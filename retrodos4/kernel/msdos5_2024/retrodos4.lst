     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/07/2024 (Previous: 21/04/2024) -test version: retrodos4.asm-
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9F02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9F02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [AD12]9F02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [EA14]9F02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [190A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 3E04                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  
  3632                                  		; 29/09/2023
  3633                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3634                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3635                                  	
  3636                                  ; 20/12/2022
  3637                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3638                                  %if 0	
  3639                                  		cli
  3640                                  
  3641                                  		push	ax
  3642                                  		xor	ax, ax
  3643                                  		mov	ds, ax
  3644                                  		pop	ax
  3645                                  %endif
  3646                                  
  3647                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3648                                  
  3649                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3650                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3651                                  
  3652                                  ;-----------------------------------------------------------------------------
  3653                                  ; initialization - stage 1
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; 02/06/2018 - Retro DOS v3.0
  3656                                  		
  3657                                  		; 21/12/2022
  3658                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3659                                  		;mov	bx, 60h
  3660                                  		;mov	es, bx
  3661                                  		;mov	si, bp
  3662                                  		;sub	di, di
  3663                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3664                                  		;;mov	cl, 35
  3665                                  		;rep	movsw
  3666                                  
  3667 00001763 0E                      		push	cs
  3668 00001764 1F                      		pop	ds
  3669                                  
  3670                                  		; 20/03/2019 - Retro DOS v4.0
  3671                                  		;cli		; turn interrupts off while manupulating stack
  3672                                  		;mov	ss, cx	; set stack segment register
  3673 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3674                                  		;sti		; turn interrupts on
  3675                                  
  3676                                  		; 27/03/2018
  3677                                  		;mov	cx, KERNEL_SIZE	; words !
  3678                                  
  3679                                  		; 20/03/2019
  3680 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3681                                  
  3682                                  		; 21/12/2022
  3683                                  		; 07/04/2018
  3684 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3685                                  		;mov	bl, KERNEL_SEGMENT
  3686 0000176E 8EC3                    		mov	es, bx
  3687 00001770 31FF                    		xor	di, di
  3688 00001772 89FE                    		mov	si, di
  3689                                  		
  3690                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3691                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3692 00001774 F3A5                    		rep	movsw
  3693                                  
  3694                                  		; 20/03/2019 - Retro DOS v4.0
  3695 00001776 53                      		push	bx
  3696 00001777 68[7B17]                		push	init0
  3697 0000177A CB                      		retf
  3698                                  init0:	
  3699                                  		; 20/12/2022
  3700                                  		; (combined kernel file > 64KB)
  3701                                  
  3702                                  		; 20/03/2019
  3703 0000177B B520                    		mov	ch, 20h
  3704 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3705                                  		;mov	cx, 1070h
  3706 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3707 00001782 8EC1                    		mov	es, cx
  3708                                  		
  3709                                  		; 21/12/2022
  3710                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3711                                  		; 28/09/2023
  3712                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3713                                  
  3714                                  		;mov	cx, KERNEL_SIZE - 32768
  3715                                  		; 28/09/2023 (BugFix)
  3716 00001784 B9E103                  		mov	cx, NXWORDCOUNT
  3717                                  		;shr	cx, 1 ; 28/09/2023
  3718                                  		;xor	si, si
  3719                                  		;xor	di, di
  3720 00001787 F3A5                    		rep	movsw
  3721                                  
  3722                                  		; 28/09/2023
  3723                                  		;; 17/06/2018 
  3724                                  		;mov	ds, bx
  3725                                  		;; 21/03/2019
  3726                                  		;mov	es, bx
  3727                                  ;init0:
  3728                                  ;		;push	es
  3729                                  ;		push	bx ; 20/03/2019
  3730                                  ;		push	init1 ; 07/04/2018
  3731                                  ;		retf	; jump to 0070h:init1
  3732                                  ;init:
  3733                                  init1:
  3734                                  		; 20/12/2022
  3735                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3736                                  		; for full MSDOS compatibility.
  3737                                  
  3738 00001789 8EC1                    		mov	es, cx ; 0
  3739 0000178B 8ED9                    		mov	ds, cx ; 0
  3740                                  
  3741 0000178D B82205                  		mov	ax, SEC9
  3742                                  
  3743                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3744 00001790 B378                    		mov	bl, 1Eh*4
  3745                                  				; INT 1Eh points to diskette parms table
  3746                                  
  3747                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3748                                   		; (do not move the DPT if is not original ROMBIOS table)
  3749                                  
  3750                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3751                                  		;;jnz	short mov_dpt
  3752                                  
  3753                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3754                                  		;je	short dont_mov_dpt
  3755                                  
  3756                                  		;mov	si, [bx] ; [1Eh*4]		
  3757                                  ;mov_dpt:
  3758                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3759 00001792 C537                    		lds	si, [bx]
  3760 00001794 89C7                    		mov	di, ax  ; SEC9
  3761 00001796 B10B                    		mov	cl, 11
  3762                                  		;cld
  3763 00001798 F3A4                    		rep	movsb
  3764                                  
  3765                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3766 0000179A 8ED9                    		mov	ds, cx ; 0
  3767 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3768 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3769                                  ;dont_mov_dpt:
  3770                                  
  3771                                  ; 20/12/2022 - Retro DOS v4.0
  3772                                  %if 0
  3773                                  		; 27/12/2018 - Retro DOS v4.0
  3774                                  		; 'Starting MS-DOS...' message
  3775                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3776                                  		; (0070h:96A3h)
  3777                                  
  3778                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3779                                  		mov     ah, 0Eh
  3780                                  		;bh = 0
  3781                                          	mov     bl, 7		; "normal" attribute and page
  3782                                  startmsg_nxt_chr:  
  3783                                  		lodsb
  3784                                  		or	al, al
  3785                                          	jz	short startmsg_ok
  3786                                         
  3787                                  		int	10h		; video write
  3788                                          	jmp	short startmsg_nxt_chr
  3789                                  
  3790                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3791                                  
  3792                                  startmsg_ok:
  3793                                  
  3794                                  %endif
  3795                                  
  3796                                  ;-----------------------------------------------------------------------------
  3797                                  ; initialization - stage 2
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3800                                  
  3801                                  
  3802                                  ; 19/03/2018
  3803                                  ; Retro DOS v2.0 (24/02/2018)
  3804                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3805                                  
  3806                                  ;------------------------------------------------------------------------
  3807                                  ;									:
  3808                                  ;	System initialization						:
  3809                                  ;									:
  3810                                  ;	The entry conditions are established by the bootstrap		:
  3811                                  ;	loader and are considered unknown. The following jobs		:
  3812                                  ;	will be performed by this module:				:
  3813                                  ;									:
  3814                                  ;	1.	All device initialization is performed			:
  3815                                  ;	2.	A local stack is set up and DS:SI are set		:
  3816                                  ;		to point to an initialization table. Then		:
  3817                                  ;		an inter-segment call is made to the first		:
  3818                                  ;		byte of the dos 					:
  3819                                  ;	3.	Once the dos returns from this call the ds		:
  3820                                  ;		register has been set up to point to the start		:
  3821                                  ;		of free memory. The initialization will then		:
  3822                                  ;		load the command program into this area 		:
  3823                                  ;		beginning at 100 hex and transfer control to		:
  3824                                  ;		this program.						:
  3825                                  ;									:
  3826                                  ;------------------------------------------------------------------------
  3827                                  		
  3828                                  		; 20/12/2022
  3829                                  		; ----------------------
  3830                                  		; Registers
  3831                                  		; ----------------------
  3832                                  		; DL = [bsDriveNumber]
  3833                                  		; DH = [bsMedia]
  3834                                  		; DS = 0, ES = 0, SS = 0
  3835                                  		; BP = 7C00h
  3836                                  		; SP = 700h
  3837                                  		; ----------------------
  3838                                  		; CX = 0				
  3839                                  
  3840                                  ; 02/10/2022 - 20/12/2022
  3841                                  ; ------------------------------------------------------------------------------
  3842                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3843                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3844                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3845                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3846                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3847                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3848                                  ; ------------------------------------------------------------------------------
  3849                                  
  3850                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3851                                  ;
  3852                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3853                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3854                                  ;;	data sector of the bios.
  3855                                  ;
  3856                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3857                                  ;		mov	[cs:bios_l], bx
  3858                                  
  3859                                  ; with the following information from msload, we don't need the
  3860                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3861                                  ;     limitation of msbio.com file.
  3862                                  
  3863                                  		; 21/12/2022
  3864 000017A1 FA                      		cli
  3865                                  
  3866 000017A2 0E                      		push	cs		; Save a peck of interrupt vectors...
  3867 000017A3 07                      		pop	es
  3868                                  		;push	cx
  3869                                  		;push	di
  3870                                  		; 20/12/2022
  3871 000017A4 B105                    		mov	cl, 5
  3872                                  		;mov	cx, 5		; NUMROMVECTORS
  3873                                  					; no. of rom vectors to	be saved
  3874                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3875 000017A6 BE[0001]                		mov	si, RomVectors
  3876                                  next_int_:		
  3877 000017A9 2E                      		cs	; 16/10/2022
  3878 000017AA AC                      		lodsb		
  3879                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3880 000017AB 98                      		cbw			; ax = interrupt number
  3881 000017AC D1E0                    		shl	ax, 1
  3882 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3883 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3884 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3885                                  					; saving address in di
  3886                                  		;lodsw			; movsw
  3887                                  		;stosw
  3888                                  		;lodsw			; movsw
  3889                                  		;stosw			; save the vector
  3890                                  		; 20/12/2022
  3891 000017B4 A5                      		movsw
  3892 000017B5 A5                      		movsw		
  3893                                  
  3894 000017B6 87F7                    		xchg	si, di
  3895 000017B8 E2EF                    		loop	next_int_
  3896                                  		
  3897                                  		;pop	di
  3898                                  		;pop	cx
  3899                                  
  3900                                  ; we need to save int13 in two places in case we are running on an at.
  3901                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3902                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3903                                  ; rom int13 routine, we must have that rom address also stored away.
  3904                                  
  3905                                  		; 20/12/2022
  3906                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3907                                  		;mov	[cs:Orig13], ax
  3908                                  		;mov	ax, [cs:Old13+2]
  3909                                  		;mov	[cs:Orig13+2], ax
  3910                                  
  3911                                  		; 16/10/2022
  3912 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3913                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3914                                  					; set up int 13	for new	action
  3915 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3916                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3917 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3918                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3919                                  					; set up int 15	for new	action
  3920 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3921                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3922 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3923                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3924                                  					; set up int 19	for new	action
  3925 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3926                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3927                                  
  3928                                  		; 20/12/2022
  3929 000017D8 0E                      		push	cs
  3930 000017D9 1F                      		pop	ds
  3931                                  		
  3932 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3933 000017DD A3[B400]                		mov	[Orig13], ax
  3934 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3935 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3936                                  					; ;
  3937 000017E6 FB                      		sti
  3938 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3939                                  					; Return: AX = equipment flag bits
  3940                                  
  3941                                  ; we have to support a system that does not have any diskette
  3942                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3943                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3944                                  ; otherwise, the system has only hardfiles.
  3945                                  ;
  3946                                  ; important thing is that still, for compatibility reason, the drive letter
  3947                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3948                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3949                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3950                                  ; drives will get "invalid drive letter ..." message. we are going to
  3951                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3952                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3953                                  
  3954                                  ; check the register returned by the equipment determination interrupt
  3955                                  ; we have to handle the case of no diskettes in the system by faking
  3956                                  ; two dummy drives.
  3957                                  ;
  3958                                  ; if the register indicates that we do have floppy drives we don't need
  3959                                  ; to do anything special.
  3960                                  ;
  3961                                  ; if the register indicates that we don't have any floppy drives then
  3962                                  ; what we need to do is set the fakefloppydrv variable, change the
  3963                                  ; register to say that we do have floppy drives and then go to execute
  3964                                  ; the code which starts at notsingle. this is because we can skip the
  3965                                  ; code given below which tries to find if there are one or two drives
  3966                                  ; since we already know about this.
  3967                                  
  3968                                  		; 06/05/2019 - Retro DOS v4.0
  3969 000017E9 88C1                    		mov	cl, al
  3970                                  
  3971                                  		; 12/12/2022
  3972 000017EB A801                    		test	al, 1
  3973                                  		;test	ax, 1		; floppy drives	present	?
  3974 000017ED 751F                    		jnz	short normalfloppydrv ;	yes.
  3975                                  
  3976                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3977                                  ; whether it is an old ROM BIOS or a new one
  3978                                  ;
  3979                                  ; WARNING !!!
  3980                                  ;
  3981                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3982                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3983                                  
  3984                                  		; 20/12/2022
  3985                                  		;push	ax
  3986                                  		;push	bx
  3987                                  		;push	cx
  3988 000017EF 52                      		push	dx
  3989                                  		;push	di
  3990 000017F0 06                      		push	es
  3991 000017F1 B408                    		mov	ah, 8
  3992 000017F3 B200                    		mov	dl, 0
  3993 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3994                                  					; DL = drive number
  3995                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3996                                  					; DL = number of consecutive drives
  3997                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3998 000017F7 7202                    		jc	short _gdskp_error
  3999                                  		;;mov	[cs:flp_drvs], dl
  4000                                  		; 20/12/2022
  4001                                  		; ds = cs
  4002                                  		;mov	[flp_drvs], dl
  4003 000017F9 88D1                    		mov	cl, dl
  4004                                  _gdskp_error:	
  4005                                  		; 20/12/2022			
  4006 000017FB 07                      		pop	es
  4007                                  		;pop	di
  4008 000017FC 5A                      		pop	dx
  4009                                  		;pop	cx
  4010                                  		;pop	bx
  4011                                  		;pop	ax
  4012                                  		
  4013 000017FD 720F                    		jc	short normalfloppydrv
  4014                                  					; if error it is an old ROM BIOS
  4015                                  					; so, lets assume that ROM BIOS lied
  4016                                  		; 20/12/2022
  4017                                  		; ds = cs
  4018                                  		;cmp	byte [flp_drvs], 0
  4019                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4020                                  		;jz	short _set_fake_flpdrv
  4021                                  		;;mov	al, [cs:flp_drvs]
  4022                                  		;mov	al, [flp_drvs]
  4023                                  		;;dec	al		; make it zero based
  4024                                  		;; 18/12/2022
  4025                                  		;dec	ax
  4026                                  		;jmp	short got_num_flp_drvs
  4027                                  		
  4028                                  		; 20/12/2022
  4029 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4030 00001801 7403                    		jz	short _set_fake_flpdrv		
  4031 00001803 49                      		dec	cx	
  4032 00001804 EB0C                    		jmp	short got_num_flp_drvs
  4033                                  ; ----------------------------------------------------------------------------
  4034                                  
  4035                                  _set_fake_flpdrv:
  4036                                  		;20/12/2022
  4037                                  		; ds = cs
  4038 00001806 FEC1                    		inc	cl	; cl = 1
  4039 00001808 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4040                                  		;mov	byte [fakefloppydrv], 1		
  4041                                  		;;mov	byte [cs:fakefloppydrv], 1
  4042                                  					; we don't have any floppy drives.
  4043                                  		; 20/12/2022
  4044                                  		;mov	ax, 1
  4045 0000180C EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4046                                  ; ----------------------------------------------------------------------------
  4047                                  
  4048                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4049                                  		; 20/12/2022
  4050                                  		;rol	al, 1		; there	exist floppy drives.
  4051                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4052 0000180E D0C1                    		rol	cl, 1
  4053 00001810 D0C1                    		rol	cl, 1
  4054                                  got_num_flp_drvs:			
  4055                                  		;;and	ax, 3		; only look at bits 0 &	1
  4056                                  		; 18/12/2022
  4057                                  		;and	al, 3
  4058                                  		; 20/12/2022
  4059 00001812 80E103                  		and	cl, 3
  4060 00001815 7505                    		jnz	short notsingle	; zero means single drive system
  4061                                  		; 20/12/2022
  4062 00001817 41                      		inc	cx
  4063                                  		;inc	ax		; pretend it's a two drive system
  4064                                  settwodrive:				; set this to two fakedrives
  4065                                  		; 20/12/2022
  4066                                  		; ds = cs
  4067 00001818 FE06[7800]              		inc	byte [single]
  4068                                  		;inc	byte [cs:single] ; remember this
  4069                                  notsingle:	
  4070                                  		; 20/12/2022			
  4071                                  		;inc	ax		; ax has number	of drives, 2-4
  4072                                  		;			; is also 0 indexed boot drive if we
  4073                                  		;			; booted off hard file
  4074                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4075                                  		; 20/12/2022
  4076 0000181C FEC1                    		inc	cl	; cl >= 2
  4077                                  
  4078                                  ; 16/10/2022
  4079                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4080                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4081                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4082                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4083                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4084                                  SEC9	EQU	522h	; address of disk parameters
  4085                                  CHROUT	EQU	29h
  4086                                  LSTDRV	EQU     504h
  4087                                  
  4088                                  ; determine whether we booted from floppy or hard disk...
  4089                                  
  4090                                  		; 20/12/2022
  4091 0000181E 88C8                    		mov	al, cl	; 26/05/2019
  4092                                  
  4093 00001820 F6C280                  		test	dl, 80h		; boot from floppy ?
  4094 00001823 7502                    		jnz	short gothrd	; no.
  4095 00001825 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4096                                  gothrd:					
  4097                                  
  4098                                  ; MSDOS 6.0
  4099                                  ;   ax = 0-based drive we booted from
  4100                                  ;   bios_l, bios_h set.
  4101                                  ;   cl = number of floppies including fake one
  4102                                  ;   ch = media byte
  4103                                  
  4104                                  ; Retro DOS 4.0 - 27/12/2018 
  4105                                  ;  (from Retro DOS v2.0 boot sector)
  4106                                  ;   dl = int 13 drive number we booted from
  4107                                  ;   dh = media byte
  4108                                  
  4109                                  		; 20/12/2022
  4110 00001827 88F5                    		mov	ch, dh		; 01/07/2018
  4111                                  
  4112                                  		; cl = number of floppies
  4113                                  		; ch = media byte
  4114                                  
  4115                                  		; set up local stack
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4119                                  					; bios_l, bios_h set.
  4120                                  					; cl = number of floppies including fake one
  4121                                  					; ch = media byte
  4122                                  		; 20/12/2022
  4123                                  		; es = ds = cs
  4124                                  		; ss = 0
  4125                                  		; sp = 700h
  4126                                  
  4127                                  		; 20/12/2022
  4128                                  		;cli
  4129                                  		;mov	ss, dx		; set stack segment and stack pointer
  4130                                  		;mov	sp, 700h
  4131                                  		;sti
  4132                                  
  4133 00001829 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4134                                  		
  4135 0000182A 88EC                    		mov	ah, ch		; FAT ID to AH
  4136 0000182C 50                      		push	ax ; (**)	; save boot drive number and media byte
  4137                                  		
  4138                                  ; let model_byte, secondary_model_byte be set here!!!
  4139                                  
  4140 0000182D B4C0                    		mov	ah, 0C0h
  4141 0000182F CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4142 00001831 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4143 00001833 80FC00                  		cmp	ah, 0
  4144 00001836 7510                    		jnz	short no_rom_system_conf
  4145                                  
  4146                                  ;		; 20/12/2022
  4147                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4148                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4149                                  ;
  4150                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4151                                  ;
  4152                                  ;		on return:
  4153                                  ;		CF = 0 if successful
  4154                                  ;		   = 1 if error
  4155                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4156                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4157                                  ;
  4158                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4159                                  ;
  4160                                  ;		Offset Size	     Description
  4161                                  ;
  4162                                  ;		  00   word   length of descriptor (8 minimum)
  4163                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4164                                  ;		  03   byte   secondary model byte
  4165                                  ;		  04   byte   BIOS revision level (zero based)
  4166                                  ;		  05   byte   feature information, see below
  4167                                  ;		  06   dword  reserved
  4168                                  
  4169                                  		; 20/12/2022
  4170                                  		; ds = cs
  4171 00001838 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4172 0000183C A2[3E06]                		mov	[model_byte], al
  4173                                  		;mov	[cs:model_byte], al
  4174                                  					; get/save model byte
  4175 0000183F 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4176 00001843 A2[3F06]                		mov	[secondary_model_byte], al
  4177                                  		;mov	[cs:secondary_model_byte], al
  4178                                  					; get/save secondary model byte
  4179 00001846 EB0C                    		jmp	short turn_timer_on
  4180                                  ;-----------------------------------------------------------------------------
  4181                                  
  4182                                  no_rom_system_conf:			
  4183 00001848 BEFFFF                  		mov	si, 0FFFFh
  4184 0000184B 8EC6                    		mov	es, si
  4185                                  		; 20/12/2022
  4186 0000184D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4187 00001851 A2[3E06]                		mov	[model_byte], al
  4188                                  		;mov	[cs:model_byte], al ; save model byte
  4189                                  turn_timer_on:				
  4190 00001854 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4191 00001856 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4192                                  					; AKPORT
  4193                                  
  4194                                  ; some olivetti m24 machines have an 8530 serial communications
  4195                                  ; chip installed at io address 50h and 52h. if we're running
  4196                                  ; on one of those, we must inhibit the normal aux port initialization
  4197                                  
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 00001858 803E[3E06]00            		cmp	byte [model_byte], 0
  4201                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4202 0000185D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4203                                  					; (except olivetti m24)
  4204 0000185F E466                    		in	al, 66h		; is 8530 installed?
  4205 00001861 A820                    		test	al, 20h
  4206 00001863 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4207 00001865 B00F                    		mov	al, 0Fh		; double check
  4208 00001867 E650                    		out	50h, al
  4209 00001869 E450                    		in	al, 50h
  4210 0000186B A801                    		test	al, 1		; this test was	copied from olivetti
  4211 0000186D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4212                                  
  4213                                  not_olivetti_m24:
  4214 0000186F B003                    		mov	al, 3		; init com4
  4215 00001871 E89108                  		call	aux_init
  4216 00001874 B002                    		mov	al, 2		; init com3
  4217 00001876 E88C08                  		call	aux_init
  4218 00001879 B001                    		mov	al, 1		; init com2
  4219 0000187B E88708                  		call	aux_init
  4220 0000187E 30C0                    		xor	al, al		; init com1
  4221 00001880 E88208                  		call	aux_init
  4222                                  
  4223                                  skip_aux_port_init:			
  4224 00001883 B002                    		mov	al, 2		; init lpt3
  4225 00001885 E87508                  		call	print_init
  4226 00001888 B001                    		mov	al, 1		; init lpt2
  4227 0000188A E87008                  		call	print_init
  4228 0000188D 30C0                    		xor	al, al		; init lpt1
  4229 0000188F E86B08                  		call	print_init
  4230                                  
  4231 00001892 31D2                    		xor	dx, dx	; 0
  4232 00001894 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4233 00001896 8EC2                    		mov	es, dx
  4234 00001898 31C0                    		xor	ax, ax
  4235                                  		; 16/10/2022
  4236 0000189A BF3405                  		mov	di, INITSPOT	; 0534h
  4237                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4238                                  					; IBM wants 4 zeros here
  4239 0000189D AB                      		stosw
  4240 0000189E AB                      		stosw
  4241 0000189F 8CC8                    		mov	ax, cs		; fetch	segment
  4242 000018A1 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4243                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4244                                  					; break	entry point
  4245 000018A7 A36E00                  		mov	[BRKADR+2], ax		
  4246                                  		;mov	ds:6Eh,	ax	; vector for break
  4247 000018AA C706A400[6207]          		mov	word [CHROUT*4], outchr
  4248                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4249 000018B0 A3A600                  		mov	[CHROUT*4+2], ax
  4250                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4251                                  
  4252 000018B3 BF0400                  		mov	di, 4
  4253 000018B6 BB[F406]                		mov	bx, intret ; 19/10/2022
  4254                                  		;mov	bx, offset intret ; intret (cs:intret)
  4255                                  					; will initialize rest of interrupts
  4256 000018B9 93                      		xchg	ax, bx
  4257 000018BA AB                      		stosw			; location 4
  4258 000018BB 93                      		xchg	ax, bx		; cs:
  4259 000018BC AB                      		stosw			; int 1	; location 6
  4260 000018BD 83C704                  		add	di, 4
  4261 000018C0 93                      		xchg	ax, bx
  4262 000018C1 AB                      		stosw			; location 12
  4263 000018C2 93                      		xchg	ax, bx		; cs:
  4264 000018C3 AB                      		stosw			; int 3	; location 14
  4265 000018C4 93                      		xchg	ax, bx
  4266 000018C5 AB                      		stosw			; location 16
  4267 000018C6 93                      		xchg	ax, bx		; cs:
  4268 000018C7 AB                      		stosw			; int 4	; location 18
  4269                                  
  4270                                  
  4271                                  ;		; 20/12/2022
  4272                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4273                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4274                                  ;	
  4275                                  ;		50:00	byte	Print screen status byte
  4276                                  ;				 00 = PrtSc not active,
  4277                                  ;				 01 = PrtSc in progress
  4278                                  ;				 FF = error
  4279                                  ;		50:01  3 bytes	Used by BASIC
  4280                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4281                                  ;		50:05  10bytes	POST work area
  4282                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4283                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4284                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4285                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4286                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4287                                  ;		50:20	word	DOS dynamic storage
  4288                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4289                                  ;		50:30	4bytes	MODE command
  4290                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4291                                  
  4292 000018C8 89160005                		mov	[0500h], dx ; 0
  4293                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4294 000018CC 89160405                		mov	[LSTDRV], dx	; [0504h]
  4295                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4296                                  
  4297                                  ; we need to initialize the cs:motorstartup variable from the disk
  4298                                  ; parameter table at sec9. the offsets in this table are defined in
  4299                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4300                                  
  4301 000018D0 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4302                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4303                                  					; [522h+0Ah]
  4304                                  		; 20/12/2022
  4305                                  		; ds = 0
  4306                                  
  4307 000018D3 2EA2[2601]              		mov	[cs:motorstartup], al
  4308 000018D7 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4309 000018DD 720B                    		jb	short no_diddle	; no
  4310 000018DF C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4311                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4312                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4313 000018E5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4314                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4315                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4316                                  no_diddle:				
  4317 000018EA CD12                    		int	12h		; MEMORY SIZE -
  4318                                  					; Return: AX = number of contiguous 1K blocks of memory
  4319 000018EC B106                    		mov	cl, 6
  4320 000018EE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4321                                  		
  4322                                  		; 20/12/2022
  4323                                  		; 03/07/2018 - 27/12/2018
  4324                                  		;pop	cx ; (**)
  4325                                  		;mov	[cs:drvfat], cx
  4326                                  		
  4327 000018F0 50                      		push	ax ; (*)	; save real top	of memory
  4328                                  
  4329                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4330                                  
  4331                                  ;M068 - BEGIN
  4332                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4333                                  
  4334                                  		; 20/12/2022
  4335                                  		; ds = 0
  4336                                  
  4337                                  		;push	ds
  4338                                  		;push	bx		; pushes not required but since this
  4339                                  					; happens to be a last minute change
  4340                                  					; & since it is only init code.
  4341                                  		;xor	bx, bx
  4342                                  		;mov	ds, bx
  4343                                  
  4344                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4345                                  		;mov	bx, [2Fh*4]
  4346                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4347                                  		;mov	ds, [2Fh*4+2]
  4348                                  		; 29/09/2023
  4349 000018F1 C51EBC00                		lds	bx, [2Fh*4]
  4350                                  
  4351 000018F5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4352                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4353 000018FA 750F                    		jnz	short SkipRPL
  4354 000018FC 807F054C                		cmp	byte [bx+5], 'L'
  4355                                  		;cmp	byte ptr [bx+5], 'L'
  4356 00001900 7509                    		jnz	short SkipRPL
  4357 00001902 89C2                    		mov	dx, ax		; get TOM into DX
  4358 00001904 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4359 00001907 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4360 00001909 89D0                    		mov	ax, dx
  4361                                  SkipRPL:	
  4362                                  		; 20/12/2022		
  4363                                  		;pop	bx
  4364                                  		;pop	ds
  4365                                  
  4366                                  ;M068 - END
  4367                                  		; 20/12/2022
  4368                                  		; 27/12/2018
  4369 0000190B 0E                      		push	cs
  4370 0000190C 1F                      		pop	ds
  4371                                  
  4372                                  		; 18/03/2019 - Retro DOS v4.0
  4373                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4374                                  		;mov	[cs:fatloc], ax	; location to read fat
  4375                                  
  4376                                  		; 01/07/2018
  4377                                  		; 08/04/2018
  4378                                  		; 28/03/2018
  4379                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4380 0000190D 83E840                  		sub	ax, 64
  4381 00001910 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4382                                  		;mov	[cs:init_bootseg], ax
  4383                                  
  4384                                  		; 27/12/2018 - Retro DOS v4.0
  4385                                  		;;pop	ax ; (*)	; get back real top of memory
  4386                                  		;pop	dx ; (*)
  4387                                  		; 29/09/2023 (BugFix)
  4388 00001913 58                      		pop	ax ; (*)	; get back real top of memory
  4389                                  
  4390                                  		; 20/12/2022
  4391                                  		; 27/12/2018
  4392 00001914 59                      		pop	cx ; (**)
  4393 00001915 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4394                                  
  4395                                  		; 20/12/2022
  4396                                  
  4397                                  		;mov	dx, 46Dh	; SYSINIT segment
  4398 00001919 BA3E04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4399 0000191C 8EDA                    		mov	ds, dx
  4400                                  
  4401                                  ; set pointer to resident device driver chain
  4402                                  
  4403                                  		; 17/10/2022
  4404 0000191E C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4405                                  		;mov	word [273h], res_dev_list
  4406                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4407                                  					; [SYSINIT+DEVICE_LIST]
  4408 00001924 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4409                                  		;mov	[275h], cs
  4410                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4411                                  
  4412 00001928 A3[9202]                		mov	[MEMORYSIZE], ax
  4413                                  		;mov	[292h], ax
  4414                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4415                                  
  4416 0000192B FEC1                    		inc	cl
  4417 0000192D 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4418                                  		;mov	[296h], cl
  4419                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4420                                  
  4421 00001931 C706[7102]CB07          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4422                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4423                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4424                                  					; dos_load_seg
  4425                                  
  4426                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4427                                  ; printer cards. we initialize this value to point to an iret only if
  4428                                  ;
  4429                                  ; 1) the original segment points to storage inside valid ram.
  4430                                  ;
  4431                                  ; 2) the original segment is 0F000:xxxx
  4432                                  
  4433                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4434                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4435                                  		;mov	es, ax
  4436                                  		; 20/12/2022
  4437                                  		;push	ds ; SYSINITSEG
  4438                                  		;pop	es
  4439 00001937 8EC2                    		mov	es, dx ; SYSINITSEG
  4440 00001939 31C0                    		xor	ax, ax ; 0
  4441 0000193B 8ED8                    		mov	ds, ax		; segment 0
  4442                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4443 0000193D A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4444                                  		; 18/10/2022
  4445 00001940 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4446                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4447 00001945 7605                    		jbe	short resetintf
  4448 00001947 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4449 0000194A 750A                    		jnz	short keepintf
  4450                                  resetintf:	
  4451 0000194C C7063C00[F406]          		mov	word [0Fh*4], intret			
  4452                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4453 00001952 8C0E3E00                		mov	word [0Fh*4+2], cs
  4454                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4455                                  keepintf:				
  4456                                  ; end important
  4457                                  
  4458                                  ; 17/10/2022
  4459                                  ; 28/12/2018 - Retro DOS v4.0
  4460                                  
  4461                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4462                                  ;
  4463                                  ; we will check if the system has ibm extended keyboard by
  4464                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4465                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4466                                  ; for the extended keyboard function. use cx as the temporary register.
  4467                                  
  4468                                  		; 20/12/2022
  4469                                  		; ds = 0
  4470                                  		;xor	cx, cx
  4471                                  		;mov	ds, cx
  4472                                  
  4473 00001956 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4474                                  
  4475                                  		; 20/12/2022
  4476                                  		; 20/03/2019
  4477 0000195A 0E                      		push	cs
  4478 0000195B 1F                      		pop	ds
  4479                                  
  4480                                  		;test	cl, 00010000b ; 10h
  4481 0000195C F6C110                  		test	cl, 10h		; extended keyboard ?
  4482 0000195F 740A                    		jz	short org_key	; no, original keyboard
  4483                                  
  4484                                  		; 20/12/2022
  4485                                  		;  ds = cs
  4486 00001961 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4487 00001966 C606[E604]11            		mov	byte [keysts_func], 11h
  4488                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4489                                  		;mov	byte [cs:keysts_func], 11h
  4490                                  					; change for extended keyboard functions
  4491                                  org_key:
  4492                                  
  4493                                  ; 02/06/2018 - Retro DOS v3.0
  4494                                  
  4495                                  ;**************************************************************
  4496                                  ;	will initialize the number of drives
  4497                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4498                                  ;	the indications are as follows:
  4499                                  ;
  4500                                  ;	bits	7	6	drives
  4501                                  ;		0	0	1
  4502                                  ;		0	1	2
  4503                                  ;		1	0	3
  4504                                  ;		1	1	4
  4505                                  ;**************************************************************
  4506                                  		
  4507                                  		; 20/12/2022
  4508                                  		; ds = cs		
  4509                                  		;push	cs
  4510                                  		;pop	ds
  4511                                  		; 21/12/2022
  4512                                  		;push	cs
  4513                                  		;pop	es
  4514                                  
  4515 0000196B E8DC08                  		call	cmos_clock_read	; If cmos clock	exists,
  4516                                  					; then set the system time according to	that.
  4517                                  					; also,	reset the cmos clock rate.
  4518                                  		; 18/10/2022
  4519                                  		;mov	word ptr BData_start, offset harddrv ;
  4520                                  					; set up pointer to hdrive
  4521                                  		; 02/10/2022
  4522 0000196E C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4523                                  		
  4524                                  		; 20/12/2022
  4525                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4526 00001974 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4527 00001975 30E4                    		xor	ah, ah		; chuck	fat id byte
  4528 00001977 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4529 0000197A A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4530 0000197D D1E0                    		shl	ax, 1
  4531 0000197F 0106[4417]              		add	[last_dskdrv_table], ax
  4532                                  
  4533 00001983 B280                    		mov	dl, 80h
  4534 00001985 B408                    		mov	ah, 8
  4535 00001987 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4536                                  					; DL = drive number
  4537                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4538                                  					; DL = number of consecutive drives
  4539                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4540 00001989 7204                    		jc	short enddrv
  4541 0000198B 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4542                                  enddrv:
  4543                                  		; 21/12/2022
  4544 0000198F 0E                      		push	cs
  4545 00001990 07                      		pop	es
  4546                                  
  4547                                  ; scan the list of drives to determine their type. we have three flavors of
  4548                                  ; diskette drives:
  4549                                  ;
  4550                                  ;   48tpi drives    we do nothing special for them
  4551                                  ;   96tpi drives    mark the fact that they have changeline support.
  4552                                  ;   3.5"  drives    mark changeline support and small.
  4553                                  ;
  4554                                  ; the following code uses registers for certain values:
  4555                                  ;
  4556                                  ;   dl - physical drive
  4557                                  ;   ds:di - points to current bds
  4558                                  ;   cx - flag bits for bds
  4559                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4560                                  					
  4561 00001991 30D2                    		xor	dl, dl
  4562                                  
  4563                                  		; 20/12/2022
  4564                                  		; ds = cs
  4565                                  		; 17/06/2018		 
  4566                                  		;push	cs
  4567                                  		;pop	ds
  4568                                  
  4569 00001993 C606[2C01]09            		mov	byte [eot], 9
  4570 00001998 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4571                                  					; to set aside two bdss	for the	two fake floppy	drives
  4572                                  
  4573                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4574                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4575                                  
  4576                                  ; check to see if we are faking floppy drives. if not we don't
  4577                                  ; do anything special. if we are faking floppy drives we need
  4578                                  ; to set aside two bdss for the two fake floppy drives. we
  4579                                  ; don't need to initalise any fields though. so starting at start_bds
  4580                                  ; use the link field in the bds structure to go to the second bds
  4581                                  ; in the list and initalise it's link field to -1 to set the end of
  4582                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4583                                  ; the bds for harddrives.
  4584                                  
  4585 0000199B 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4586 000019A0 750B                    		jnz	short loop_drive
  4587 000019A2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4588                                  					; di <-	first bds link
  4589 000019A4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4590                                  					; di <-	second bds link
  4591 000019A6 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4592 000019AA E91201                  		jmp	dohard		; allocate/initialise bds for harddrives
  4593                                  ;-----------------------------------------------------------------------------
  4594                                  
  4595                                  loop_drive:				
  4596 000019AD 3A16[7500]              		cmp	dl, [drvmax]
  4597 000019B1 7203                    		jb	short got_more
  4598 000019B3 E90501                  		jmp	done_drives
  4599                                  ;-----------------------------------------------------------------------------
  4600                                  
  4601                                  got_more:				
  4602 000019B6 31C9                    		xor	cx, cx ; 0	; zero all flags
  4603 000019B8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4604                                  					; get next bds
  4605 000019BA B600                    		mov	dh, 0 ; ff48tpi
  4606                                  					; set form factor to 48	tpi
  4607 000019BC C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4608                                  		
  4609                                  		; 14/12/2023
  4610 000019C1 51                      		push	cx ; 0
  4611                                  		; 20/12/2022
  4612                                  		;push	ds ; 11/05/2019	
  4613 000019C2 57                      		push	di
  4614 000019C3 52                      		push	dx
  4615                                  		;push	cx ; not necessary (14/12/2023)
  4616 000019C4 06                      		push	es ; ((*)) ; 20/12/2022
  4617                                  		
  4618 000019C5 B408                    		mov	ah, 8
  4619 000019C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4620                                  					; DL = drive number
  4621                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4622                                  					; DL = number of consecutive drives
  4623                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4624 000019C9 7278                    		jc	short noparmsfromrom
  4625                                  
  4626                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4627                                  ; in this case, we are going to put bogus informations to bds table.
  4628                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4629                                  ; they are calculated at the later time. this is just for the diagnostic
  4630                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4631                                  ; this should only happen with drive b.
  4632                                  
  4633                                  		; 14/12/2023
  4634                                  		; ch = low eight bits of maximum cylinder number
  4635                                  		; cl = maximum sector number (bits 5-0)
  4636                                  		;      high two bits of maximum cylinder number (bits 7-6)
  4637                                  
  4638 000019CB 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4639 000019CE 7505                    		jnz	short pfr_ok
  4640                                  
  4641                                  		;mov	ch, 39		; rom gave wrong info.
  4642                                  		;mov	cl, 9		; let's default to 360k.
  4643                                  		; 20/12/2022
  4644 000019D0 B90927                  		mov	cx, 2709h
  4645                                  
  4646 000019D3 B601                    		mov	dh, 1
  4647                                  pfr_ok:					
  4648 000019D5 FEC6                    		inc	dh		; make number of heads 1-based
  4649 000019D7 FEC5                    		inc	ch		; make number of cylinders 1-based
  4650 000019D9 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4651 000019DD 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4652 000019E0 880E[D116]              		mov	[sec_trk], cl
  4653 000019E4 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4654                                  
  4655                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4656                                  
  4657 000019E8 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4658                                  		;jbe	short eot_ok
  4659                                  		; 09/12/2022
  4660                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4661                                  		; 14/08/2023
  4662 000019EC 7604                    		jbe	short eotok
  4663 000019EE 880E[2C01]              		mov	[eot], cl
  4664                                  ;eot_ok:					
  4665                                  eotok:
  4666                                  		; 20/12/2022
  4667 000019F2 07                      		pop	es ; ((*)) es = cs = ds
  4668                                  		;pop	cx ; 14/12/2023
  4669 000019F3 5A                      		pop	dx
  4670 000019F4 5F                      		pop	di
  4671                                  		; 20/12/2022
  4672                                  		;pop	ds
  4673                                  
  4674                                  		; 14/12/2023
  4675                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4676                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4677                                  
  4678                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4679                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4680                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4681                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4682                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4683                                  		;  -- ref: Ralf Brown's Interrupt List --
  4684                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4685                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4686                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4687                                  
  4688                                  		; 14/12/2023
  4689                                  		; 13/12/2023
  4690 000019F5 52                      		push	dx ; +*+
  4691                                  
  4692                                  ; Check	for presence of	changeline
  4693                                  
  4694 000019F6 B415                    		mov	ah, 15h
  4695 000019F8 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4696                                  					; DL = drive ID
  4697                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4698                                  					; CX:DX	= number of sectors on the media
  4699                                  		; 14/12/2023
  4700 000019FA 5A                      		pop	dx ; +*+
  4701 000019FB 59                      		pop	cx ; +*+		
  4702 000019FC 720D                    		jc	short changeline_done
  4703                                  
  4704 000019FE 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4705 00001A01 7508                    		jnz	short changeline_done
  4706                                  
  4707                                  ; we have a drive with change line support.
  4708                                  
  4709 00001A03 80C902                  		or	cl, 2		; fchangeline
  4710                                  					; signal type
  4711 00001A06 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4712                                  
  4713                                  ; we now try to set up the form factor for the types of media that we know
  4714                                  ; and can recognise. for the rest, we set the form factor as "other".
  4715                                  
  4716                                  changeline_done:
  4717                                  
  4718                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4719                                  			
  4720 00001A0B 803E[D216]28            		cmp	byte [num_cyln], 40
  4721 00001A10 750B                    		jnz	short try_80
  4722 00001A12 803E[D116]09            		cmp	byte [sec_trk], 9
  4723 00001A17 7655                    		jbe	short nextdrive
  4724                                  gotother:				
  4725 00001A19 B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4726 00001A1B EB51                    		jmp	short nextdrive
  4727                                  ;-----------------------------------------------------------------------------
  4728                                  
  4729                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4730                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4731                                  
  4732                                  try_80:					
  4733 00001A1D 803E[D216]50            		cmp	byte [num_cyln], 80
  4734 00001A22 75F5                    		jnz	short gotother
  4735 00001A24 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4736 00001A26 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4737 00001A2B 7441                    		jz	short nextdrive	; yeah,	go update
  4738                                  
  4739                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4740                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4741                                  		;mov	dh, ff144
  4742                                  		;cmp	byte [sec_trk], 18
  4743                                  		;je	short nextdrive
  4744                                  
  4745 00001A2D 803E[D116]0F            		cmp	byte [sec_trk], 15
  4746 00001A32 740B                    		jz	short got96
  4747                                  		
  4748 00001A34 803E[D116]09            		cmp	byte [sec_trk], 9
  4749 00001A39 75DE                    		jnz	short gotother
  4750                                  		
  4751 00001A3B B602                    		mov	dh, 2 ; ffSmall
  4752 00001A3D EB2F                    		jmp	short nextdrive
  4753                                  ; ----------------------------------------------------------------------------
  4754                                  
  4755                                  got96:					
  4756 00001A3F B601                    		mov	dh, 1 ; ff96tpi
  4757 00001A41 EB2B                    		jmp	short nextdrive
  4758                                  ; ----------------------------------------------------------------------------
  4759                                  
  4760                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4761                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4762                                  
  4763                                  noparmsfromrom:				
  4764                                  		; 20/12/2022
  4765 00001A43 07                      		pop	es ; ((*)) 
  4766                                  		;pop	cx ; 14/12/2023
  4767 00001A44 5A                      		pop	dx
  4768 00001A45 5F                      		pop	di
  4769                                  		; 20/12/2022
  4770                                  		;pop	ds
  4771                                  
  4772                                  		; 14/12/2023
  4773                                  		; 13/12/2023 - BugFix ; * ; +*+
  4774                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4775                                  		; (some ROMBIOSs fix this BUG but return with false)
  4776                                  		; -- ref: Ralf Brown's Interrupt List --
  4777                                  
  4778                                  		; 14/12/2023
  4779                                  		; 13/12/2023
  4780 00001A46 52                      		push	dx  ; +*+
  4781                                  		
  4782 00001A47 B415                    		mov	ah, 15h
  4783 00001A49 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4784                                  					; DL = drive ID
  4785                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4786                                  					; CX:DX	= number of sectors on the media
  4787                                  		; 14/12/2023
  4788 00001A4B 5A                      		pop	dx  ; +*+
  4789 00001A4C 59                      		pop	cx  ; +*+ ; 0
  4790 00001A4D 721F                    		jc	short nextdrive
  4791                                  		
  4792 00001A4F 80FC02                  		cmp	ah, 2		; is there changeline?
  4793 00001A52 751A                    		jnz	short nextdrive
  4794                                  
  4795 00001A54 80C902                  		or	cl, 2 ; fchangeline
  4796 00001A57 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4797                                  
  4798 00001A5C C606[D216]50            		mov	byte [num_cyln], 80
  4799 00001A61 B601                    		mov	dh, 1 ; ff96tpi 
  4800 00001A63 B00F                    		mov	al, 15
  4801 00001A65 3A06[2C01]              		cmp	al, [eot]
  4802 00001A69 7603                    		jbe	short nextdrive ; eot_ok2
  4803 00001A6B A2[2C01]                		mov	[eot], al
  4804                                  ; ----------------------------------------------------------------------------
  4805                                  
  4806                                  ;eot_ok2:
  4807                                  nextdrive:				
  4808 00001A6E 80C920                  		or	cl, 20h	; fi_own_physical
  4809                                  					; set this true	for all	drives
  4810 00001A71 88D7                    		mov	bh, dl		; save int13 drive number
  4811                                  
  4812                                  ; we need to do special things if we have a single drive system and are setting
  4813                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4814                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4815                                  ; we detect the presence of this situation by examining the flag single for the
  4816                                  ; value 2.
  4817 00001A73 803E[7800]02            		cmp	byte [single], 2
  4818 00001A78 7505                    		jnz	short not_special
  4819 00001A7A FECF                    		dec	bh		; int13	drive number same for logical drive
  4820 00001A7C 80F120                  		xor	cl, 20h	; fi_own_physical
  4821                                  					; reset	ownership flag for logical drive
  4822                                  not_special:
  4823                                  
  4824                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4825                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4826                                  ; form factor is of type "ffother".
  4827                                  				
  4828 00001A7F 31C0                    		xor	ax, ax		; fill BDS for drive
  4829 00001A81 A0[D016]                		mov	al, [num_heads]
  4830 00001A84 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4831 00001A87 A0[D116]                		mov	al, [sec_trk]
  4832 00001A8A 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4833 00001A8D 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4834 00001A90 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4835 00001A93 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4836 00001A96 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4837 00001A99 8A1E[D216]              		mov	bl, [num_cyln]
  4838 00001A9D 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4839 00001AA0 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4840 00001AA5 7510                    		jnz	short no_single
  4841                                  		; 14/12/2023
  4842 00001AA7 FE06[7800]              		inc	byte [single]	; [single] = 2
  4843                                  		;mov	byte [single], 2 ; Don't forget we have
  4844                                  					; single drive system
  4845                                  		; 18/12/2022
  4846 00001AAB 80C910                  		or	cl, 10h
  4847                                  		;or	cx, 10h	; fi_am_mult
  4848                                  					; set that this	is one of several drives
  4849 00001AAE 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4850                                  					; save flags
  4851 00001AB1 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4852                                  					; move to next BDS in list
  4853 00001AB3 FEC2                    		inc	dl		; add a	number
  4854 00001AB5 EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4855                                  ; ----------------------------------------------------------------------------
  4856                                  
  4857                                  no_single:				
  4858                                  		;inc	dl
  4859                                  		; 18/12/2022
  4860 00001AB7 42                      		inc	dx
  4861 00001AB8 E9F2FE                  		jmp	loop_drive
  4862                                  ; ----------------------------------------------------------------------------
  4863                                  
  4864                                  done_drives:	
  4865                                  		;mov	word [di+BDS.link], -1			
  4866 00001ABB C705FFFF                		mov	word [di], -1	; set link to null
  4867                                  
  4868                                  ; set up all the hard drives in	the system
  4869                                  
  4870                                  		; 20/12/2022
  4871                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4872                                  dohard:					
  4873 00001ABF 8A36[4317]              		mov	dh, [hnum]
  4874 00001AC3 08F6                    		or	dh, dh		; done if no hardfiles
  4875 00001AC5 745B                    		jz	short static_configure
  4876 00001AC7 B280                    		mov	dl, 80h
  4877                                  dohard1:				
  4878 00001AC9 52                      		push	dx
  4879 00001ACA 8B3E[4617]              		mov	di, [end_of_bdss]
  4880 00001ACE 8A1E[7500]              		mov	bl, [drvmax]
  4881 00001AD2 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4882 00001AD4 E8BE01                  		call	sethard
  4883 00001AD7 7208                    		jb	short hardfile_err
  4884 00001AD9 E82407                  		call	dmax_check	; error	if already 26 drives
  4885 00001ADC 7303                    		jnb	short hardfile_err
  4886 00001ADE E83407                  		call	xinstall_bds	; insert new bds into linked list
  4887                                  hardfile_err:				
  4888 00001AE1 5A                      		pop	dx
  4889 00001AE2 FEC2                    		inc	dl		; next hard drive
  4890 00001AE4 FECE                    		dec	dh
  4891 00001AE6 75E1                    		jnz	short dohard1
  4892                                  
  4893                                  ; end of physical drive	initialization
  4894                                  
  4895                                  ; *** do not change the position of the following statement.
  4896                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4897                                  ; *** drive number of mini disk(s).
  4898                                  					
  4899 00001AE8 E82306                  		call	domini		; for setting up mini disks, if found
  4900                                  
  4901                                  ; -- begin added section
  4902                                  
  4903 00001AEB 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4904 00001AEF B280                    		mov	dl, 80h
  4905                                  dohardx1:				
  4906 00001AF1 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4907                                  dohardx2:				
  4908 00001AF3 52                      		push	dx
  4909 00001AF4 53                      		push	bx
  4910 00001AF5 8B3E[4617]              		mov	di, [end_of_bdss]
  4911 00001AF9 8A1E[7500]              		mov	bl, [drvmax]
  4912 00001AFD E89501                  		call	sethard
  4913 00001B00 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4914 00001B02 E8FB06                  		call	dmax_check	; make sure <=26 drives
  4915 00001B05 7309                    		jnb	short dohardx4	; skip if error
  4916 00001B07 E80B07                  		call	xinstall_bds	; insert new bds into linked list
  4917 00001B0A 5B                      		pop	bx		; get partition	number
  4918 00001B0B 5A                      		pop	dx		; restore physical drive counts
  4919 00001B0C FEC7                    		inc	bh
  4920 00001B0E EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4921                                  ; ----------------------------------------------------------------------------
  4922                                  
  4923                                  dohardx4:				
  4924 00001B10 5B                      		pop	bx		; unjunk partition number from stack
  4925 00001B11 5A                      		pop	dx		; restore physical drive counts
  4926 00001B12 FEC2                    		inc	dl		; next hard drive
  4927 00001B14 FECE                    		dec	dh
  4928 00001B16 75D9                    		jnz	short dohardx1
  4929                                  
  4930                                  ; -- end changed section
  4931                                  
  4932                                  ;******************************************************************************
  4933                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4934                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4935                                  ; than two diskette drives
  4936                                  ;
  4937                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4938                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4939                                  ;		letters. to do this, scan for disk drives and assign logical
  4940                                  ;		drive number starting from 2 and then rescan diskette drives
  4941                                  ;		and assign next to the last logical drive number of last disk
  4942                                  ;		drive to the 3rd and 4th diskette drives.
  4943                                  ;******************************************************************************
  4944                                  
  4945 00001B18 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4946                                  		;jbe	short static_configure ; no - no need for remapping
  4947 00001B1D 7603                    		jbe	short no_remap
  4948 00001B1F E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4949                                  no_remap:
  4950                                  
  4951                                  ; End of drive initialization.
  4952                                  
  4953                                  ; ----------------------------------------------------------------------------
  4954                                  
  4955                                  ;we now decide, based on the configurations available so far, what
  4956                                  ;code or data we need to keep as a stay resident code. the following table
  4957                                  ;shows the configurations under consideration. they are listed in the order
  4958                                  ;of their current position memory.
  4959                                  ;
  4960                                  ;configuration will be done in two ways:
  4961                                  ;
  4962                                  ;first, we are going to set "static configuration". static configuration will
  4963                                  ;consider from basic configuration to endof96tpi configuration. the result
  4964                                  ;of static configuration will be the address the dynamic configuration will
  4965                                  ;use to start with.
  4966                                  ;
  4967                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4968                                  ;involves possible relocation of code or data. dynamic configuration routine
  4969                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4970                                  ;code individually. after these operation, [dosdatasg] will be set.
  4971                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4972                                  
  4973                                  ; -- begin changed section
  4974                                  ;
  4975                                  ;   1.	 basic configuration for msbio (endfloppy)
  4976                                  ;   2.   end96tpi	; a system that supports "change line error"
  4977                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4978                                  ;   4.	 endatrom	;some of at rom fix module.
  4979                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4980                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4981                                  ;
  4982                                  
  4983                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4984                                  
  4985                                  static_configure:			
  4986 00001B22 8B3E[4617]              		mov	di, [end_of_bdss]
  4987 00001B26 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4988                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4989 00001B2A 750D                    		jnz	short dynamic_configure	; that's the end, then
  4990                                  		; 18/10/2022
  4991 00001B2C BF[1709]                		mov	di, end96tpi
  4992                                  		;mov	di, offset harddrv ; end96tpi
  4993                                  					; keep everything up to	end96tpi
  4994 00001B2F 803E[7700]00            		cmp	byte [fhave96], 0
  4995 00001B34 7503                    		jnz	short dynamic_configure
  4996                                  		
  4997 00001B36 BF[FC08]                		mov	di, endfloppy
  4998                                  dynamic_configure:
  4999                                  		; 20/12/2022
  5000                                  		;push	cs
  5001                                  		;pop	es
  5002                                  		
  5003 00001B39 FC                      		cld			; clear direction
  5004                                  
  5005                                  ; -- end changed section
  5006                                  
  5007                                  		; 20/12/2022
  5008                                  		; ds = cs <> es
  5009                                  		; ss = 0
  5010                                  		; sp = 700h
  5011                                  
  5012                                  		; 14/12/2023
  5013 00001B3A BE00F0                  		mov	si, 0F000h
  5014 00001B3D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5015                                  
  5016 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5017                                  		;jnz	short checkcmosclock
  5018                                  		; 14/12/2023
  5019 00001B44 751E                    		jnz	short checkcompaqbug ; no
  5020 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  5021                                  		;jz	short checkcmosclock
  5022 00001B4B 7417                    		jz	short checkcompaqbug
  5023 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  5024                                  		; 14/12/2023
  5025                                  		;mov	si, 0F000h
  5026                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5027 00001B4E BE[4C17]                		mov	si, bios_date	; "01/10/84"
  5028 00001B51 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5029 00001B54 B90900                  		mov	cx, 9		; bdate_l
  5030                                  					; Only patch ROM for bios 01/10/84
  5031 00001B57 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5032 00001B59 97                      		xchg	ax, di		; restore allocation pointer
  5033                                  
  5034                                  ; M015 -- begin changes
  5035                                  
  5036                                  		;jnz	short checkcmosclock
  5037                                  		; 02/10/2022
  5038 00001B5A 7508                    		jnz	short checkcompaqbug
  5039                                  
  5040                                  ; install at rom fix
  5041                                  
  5042                                  		; 19/10/2022
  5043                                  		;mov	cx, offset endatrom
  5044 00001B5C B9[0A14]                		mov	cx, endatrom
  5045                                  		;mov	si, offset ibm_disk_io
  5046 00001B5F BE[DC12]                		mov	si, ibm_disk_io
  5047 00001B62 EB46                    		jmp	short install_int13_patch
  5048                                  ; ----------------------------------------------------------------------------
  5049                                  
  5050                                  ; M065 -- begin changes
  5051                                  ;
  5052                                  ; On certain systems with Western Digital disk controllers, the
  5053                                  ; following detection scheme caused an unpredictable and serious
  5054                                  ; failure. In particular, they've implemented a nonstandard
  5055                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5056                                  ; what happens to be at es:[bx] and other memory locations indexed
  5057                                  ; off of it.
  5058                                  ;
  5059                                  ; Compaq was unable to tell us exactly which kind of systems have
  5060                                  ; the bug, except that they guarantee that the bug was fixed in
  5061                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5062                                  ; string, and then look for date codes before 08/04/86 to decide
  5063                                  ; when to install the hook.
  5064                                  
  5065                                  ;checkcmosclock:
  5066                                  ; 02/10/2022				
  5067                                  checkcompaqbug:
  5068                                  		; 20/12/2022
  5069                                  		; es = 0F000h
  5070                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5071                                  		;mov	es, ax
  5072                                  
  5073                                  		; 19/10/2022
  5074 00001B64 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5075                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5076 00001B6B 754B                    		jnz	short not_compaq_patch
  5077 00001B6D 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5078                                  		;cmp	word ptr es:0FFECh, 'PM'
  5079 00001B74 7542                    		jnz	short not_compaq_patch
  5080 00001B76 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5081                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5082 00001B7D 7539                    		jnz	short not_compaq_patch
  5083                                  
  5084                                  ; We're running on a COMPAQ. Now look at the date code.
  5085                                  
  5086 00001B7F 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5087 00001B83 86E0                    		xchg	ah, al
  5088 00001B85 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5089                                  		;cmp	ax, '86'        ; 3836h
  5090                                  					; is it	86?
  5091 00001B88 772E                    		ja	short not_compaq_patch
  5092 00001B8A 7218                    		jb	short do_compaq_patch
  5093 00001B8C 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5094 00001B90 86E0                    		xchg	ah, al
  5095 00001B92 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5096                                  		;cmp	ax, '08'        ; 3038h
  5097                                  					; is it	08?
  5098 00001B95 7721                    		ja	short not_compaq_patch
  5099 00001B97 720B                    		jb	short do_compaq_patch
  5100 00001B99 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5101 00001B9D 86E0                    		xchg	ah, al
  5102 00001B9F 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5103                                  		;cmp	ax, '04'        ; 3034h
  5104                                  					; is it	04?
  5105 00001BA2 7314                    		jnb	short not_compaq_patch
  5106                                  
  5107                                  do_compaq_patch:			
  5108 00001BA4 B9[2B14]                		mov	cx, end_compaq_i13hook
  5109                                  		;mov	si, endatrom
  5110                                  		; 14/12/2023
  5111 00001BA7 BE[0A14]                		mov	si, compaq_disk_io ; endatrom
  5112                                  
  5113                                  install_int13_patch:			
  5114 00001BAA 0E                      		push	cs
  5115 00001BAB 07                      		pop	es
  5116                                  		; 18/10/2022
  5117 00001BAC 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5118 00001BB0 8C0E[B600]              		mov	[Orig13+2], cs
  5119 00001BB4 29F1                    		sub	cx, si		; size of rom fix module
  5120 00001BB6 F3A4                    		rep movsb		; relocate it
  5121                                  
  5122                                  ; M065 -- end changes
  5123                                  
  5124                                  ; ----------------------------------------------------------------------------
  5125                                  not_compaq_patch:			; M065
  5126                                  		; 17/10/2022
  5127                                  checkcmosclock:	
  5128                                  		; 18/10/2022		
  5129 00001BB8 0E                      		push	cs
  5130 00001BB9 07                      		pop	es
  5131                                  
  5132                                  		; 20/12/2022
  5133                                  		; ds = cs = es
  5134                                  		; ss = 0
  5135                                  		; sp = 700h
  5136                                  
  5137 00001BBA 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5138 00001BBF 7518                    		jnz	short checkk09	; no
  5139                                  
  5140 00001BC1 893E[0605]              		mov	word [daycnttoday], di
  5141                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5142 00001BC5 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5143 00001BC8 BE[2C14]                		mov	si, daycnt_to_day
  5144 00001BCB F3A4                    		rep movsb
  5145 00001BCD 893E[0205]              		mov	word [bintobcd], di
  5146                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5147                                  					; let original segment stay
  5148 00001BD1 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5149 00001BD4 BE[FD14]                		mov	si, bin_to_bcd
  5150 00001BD7 F3A4                    		rep movsb
  5151                                  checkk09:				
  5152 00001BD9 57                      		push	di ; ? ; save ? ; 20/12/2022
  5153 00001BDA B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5154 00001BDD B301                    		mov	bl, 1		; wait for 1 clock tick
  5155 00001BDF 268A3D                  		mov	bh, [es:di]
  5156 00001BE2 F9                      		stc			; Assume we will fail
  5157 00001BE3 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5158                                  					; AL = condition type, BH = condition compare or mask value
  5159                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5160                                  					; DX = I/O port	address	if AL bit 4 set
  5161                                  					; 14/12/2023
  5162                                  					; ES:DI = user byte if AL bit 4 clear
  5163 00001BE5 5F                      		pop	di ; ?
  5164 00001BE6 721B                    		jc	short configdone ; 20/12/2022
  5165                                  
  5166 00001BE8 C606[7900]01            		mov	byte [fhavek09], 1
  5167                                  					; remember we have a k09 type
  5168 00001BED 1E                      		push	ds
  5169 00001BEE 31C0                    		xor	ax, ax
  5170 00001BF0 8ED8                    		mov	ds, ax
  5171                                  		
  5172 00001BF2 893EB001                		mov	[6Ch*4], di
  5173                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5174                                  					; new int 6ch handler
  5175                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5176 00001BF6 8C0EB201                		mov	word [6Ch*4+2], cs
  5177 00001BFA 1F                      		pop	ds
  5178                                  		; 20/12/2022
  5179                                  		; ds = cs = es
  5180 00001BFB BE[0815]                		mov	si, int6c
  5181 00001BFE B9C201                  		mov	cx, endk09-int6c ; 459
  5182                                  		;mov	cx, 459		; endk09 - int6c
  5183                                  					; size of k09 routine
  5184 00001C01 F3A4                    		rep movsb		;
  5185                                  					; set up config	stuff for sysinit
  5186                                  ; ----------------------------------------------------------------------------
  5187                                  ; Set up config stuff for SYSINIT
  5188                                  
  5189                                  ; 17/10/2022
  5190                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5191                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5192                                  ; 09/12/2022
  5193                                  SETDRIVE equ SetDrive
  5194                                  GETBP equ GetBp
  5195                                  		
  5196                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5197                                  configdone:	
  5198                                  		; 14/12/2023
  5199                                  		; ds = cs
  5200                                  		; 21/12/2022
  5201                                  		; 20/03/2019
  5202                                  		;push	cs		; di is	final ending address of	msbio.
  5203                                  		;pop	ds
  5204                                  		
  5205 00001C03 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5206                                  		; 10/12/2022
  5207                                  		;shr	di, 1
  5208                                  		;shr	di, 1
  5209                                  		;shr	di, 1
  5210                                  		;shr	di, 1
  5211 00001C06 B104                    		mov	cl, 4
  5212 00001C08 D3EF                    		shr	di, cl		
  5213                                  		; 10/12/2022
  5214                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5215                                  		; 19/10/2022 - Temporary !
  5216                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5217                                  		; 13/08/2023
  5218 00001C0A 83C770                  		add	di, 70h
  5219 00001C0D 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5220                                  
  5221                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5222                                  
  5223                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5224                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5225                                  	     
  5226                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5227                                  
  5228                                  ; 14/12/2023 
  5229                                  ; ----------------------------------------------------------------------------
  5230                                  ; ----------------------------------------------------------------------------
  5231                                  %if 0
  5232                                  		mov	ax, [drvfat]	; get drive and	fat id
  5233                                  		; 22/12/2022
  5234                                  		; Note: SETDRIVES uses AL (drive number) only
  5235                                  		mov	bp, SETDRIVE
  5236                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5237                                  					; at 2C7h:4D7h = 70h:2A47h
  5238                                  		push	cs		; simulate far call
  5239                                  		call	call_bios_code	; get bds for drive
  5240                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5241                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5242                                  		push	cs
  5243                                  		call	call_bios_code
  5244                                  
  5245                                  	; resort to funky old segment definitions for now
  5246                                  
  5247                                  		; 22/12/2022
  5248                                  		;push	es		; copy bds to ds:di
  5249                                  		;pop	ds
  5250                                  
  5251                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5252                                  	;
  5253                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5254                                  	;	  back. Apparently it was what actually setup es: for the following
  5255                                  	; cas----
  5256                                  
  5257                                  		; 22/12/2022
  5258                                  		;xor	di, di
  5259                                  		;mov	al, [es:di]	; get fat id byte
  5260                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5261                                  		;mov	[es:drvfat+1], al
  5262                                  		;mov	ax, [es:drvfat]
  5263                                  		
  5264                                  		; 22/12/2022
  5265                                  		; ds = cs
  5266                                  	;;;	mov	al, [drvfat]
  5267                                  
  5268                                  	; cas -- why do a SECOND setdrive here???
  5269                                  
  5270                                  		; 22/12/2022
  5271                                  		;push	es		; save whatever's in es
  5272                                  		;push	ds		; copy bds to es:di
  5273                                  		;pop	es
  5274                                  		;push	cs		; copy Bios_Data to ds
  5275                                  		;pop	ds
  5276                                  	
  5277                                  	; 22/12/2022
  5278                                  	;;;	mov	bp, SETDRIVE
  5279                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5280                                  	;;;	push	cs		; simulate far call
  5281                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5282                                  	
  5283                                  		; 22/12/2022
  5284                                  		;push	es		; copy bds back to ds:di
  5285                                  		;pop	ds
  5286                                  		;pop	es		; pop whatever was in es
  5287                                  
  5288                                  	; Now we load in the MSDOS.SYS file
  5289                                  
  5290                                  	; 22/12/2022
  5291                                  	; -----
  5292                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5293                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5294                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5295                                  	;				; get size of fat on media
  5296                                  	;	;mov	es:16DEh, bl
  5297                                  	;	mov	[es:fbigfat], bl
  5298                                  	;	mov	cl, [di+8]
  5299                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5300                                  	;	;sub	es:16D8h, ax
  5301                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5302                                  	;				; need a logical sector number that will
  5303                                  	;				; be used by getclus(diskrd procedure)
  5304                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5305                                  	;	;sbb	es:16DAh, ax
  5306                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5307                                  	; -----
  5308                                  		
  5309                                  	; -----	; 22/12/2022
  5310                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5311                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5312                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5313                                  					; get size of fat on media
  5314                                  		mov	[fbigfat], bl
  5315                                  		mov	cl, [es:di+8]
  5316                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5317                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5318                                  					; need a logical sector number that will
  5319                                  					; be used by getclus(diskrd procedure)
  5320                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5321                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5322                                  	; ------
  5323                                  
  5324                                  		xor	ch, ch	 ; cx = sectors/cluster
  5325                                  
  5326                                  	; the boot program has left the directory at 0:500h
  5327                                  
  5328                                  		push	ds
  5329                                  		xor	di, di
  5330                                  		mov	ds, di
  5331                                  		mov	bx, [53Ah]
  5332                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5333                                  					; (First cluster field of 2nd dir entry
  5334                                  					; of root directory in the buffer at 500h)
  5335                                  		pop	ds
  5336                                  loadit:
  5337                                  		mov	ax, SYSINITSEG	; 46Dh
  5338                                  		;mov	ax, 46Dh	; sysinit segment
  5339                                  		mov	es, ax
  5340                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5341                                  		;mov	es, [es:271h]
  5342                                  
  5343                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5344                                  ; ----------------------------------------------------------------------------
  5345                                  
  5346                                  		;test	byte [cs:fbigfat], fbig
  5347                                  		test	byte [cs:fbigfat], 40h ; fbig
  5348                                  		jnz	short eofbig
  5349                                  		cmp	bx, 0FF7h
  5350                                  		jmp	short iseofx
  5351                                  ; ----------------------------------------------------------------------------
  5352                                  
  5353                                  eofbig:
  5354                                  		cmp	bx, 0FFF7h
  5355                                  iseofx:
  5356                                  		jb	short loadit	; keep loading until cluster = eof
  5357                                  %endif
  5358                                  ; ----------------------------------------------------------------------------
  5359                                  ; ----------------------------------------------------------------------------
  5360                                  
  5361 00001C11 E83004                  		call	setdrvparms	; 
  5362                                  
  5363                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5364                                  		;jmp	far 46Dh:267h
  5365 00001C14 EA[6702]3E04            		jmp	SYSINITSEG:SYSINITSTART
  5366                                  
  5367                                  ; =============== S U B	R O U T	I N E ========================================
  5368                                  
  5369                                  ; Following are subroutines to support resident device driver initialization
  5370                                  ;
  5371                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5372                                  
  5373                                  ;	M035 -- begin changed section
  5374                                  
  5375                                  ;******************************************************************************
  5376                                  ; module name: remap
  5377                                  ;
  5378                                  ; descriptive name: all the code for himem that could be separated from msbio
  5379                                  ;
  5380                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5381                                  ;	     letters) if more than two diskette drives on the system.
  5382                                  ;
  5383                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5384                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5385                                  ;	       letters. to do this, scan for disk drives and assign logical
  5386                                  ;	       drive number starting from 2 and then rescan diskette drives
  5387                                  ;	       and assign next to the last logical drive number of last disk
  5388                                  ;	       drive to the 3rd and 4th diskette drives.
  5389                                  
  5390                                  ; input:       none
  5391                                  ; exit:	drive letters have been remapped in bds chain
  5392                                  ; exit error:  none
  5393                                  ; called from: msinit
  5394                                  ;
  5395                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5396                                  ;	  found in the system
  5397                                  ;	  this function assumes that there are no more than 26 drives assigned
  5398                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5399                                  ;	  this function assumes that the first entries in the chain are
  5400                                  ;	   floppy drives, and all the rest are hard drives
  5401                                  ;	  will alter the boot drive if necessary to reflect remapping
  5402                                  ;
  5403                                  ;******************************************************************************
  5404                                  
  5405                                  ; 17/10/2022
  5406                                  ; 02/10/2022
  5407                                  
  5408                                  remap:		; proc near
  5409                                  
  5410                                  		; 15/12/2023
  5411                                  		; ds = cs
  5412                                  		;mov	di, [cs:start_bds] ; get first bds
  5413 00001C19 8B3E[1901]              		mov	di, [start_bds]
  5414                                  
  5415                                  ; search for 1st fixed disk physical drive num
  5416                                  
  5417                                  drive_loop:
  5418 00001C1D 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5419                                  					; first	hard disk??
  5420 00001C21 7409                    		jz	short fdrv_found ; yes,	continue
  5421 00001C23 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5422                                  					; get next bds,	assume segment
  5423 00001C25 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5424 00001C28 75F3                    		jnz	short drive_loop ; loop	if not
  5425 00001C2A EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5426                                  
  5427                                  ;------------------------------------------------------------------------------
  5428                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5429                                  ;logical drive nums to 3, 4, 5 etc.
  5430                                  ;------------------------------------------------------------------------------
  5431                                  
  5432                                  fdrv_found:
  5433 00001C2C B002                    		mov	al, 2		; start	with logical drv num=2
  5434                                  fdrv_loop:
  5435 00001C2E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5436 00001C31 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5437                                  					; ds:di--> next	bds
  5438                                  		;inc	al		; set num for next drive
  5439                                  		; 18/12/2022
  5440 00001C33 40                      		inc	ax
  5441 00001C34 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5442 00001C37 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5443                                  
  5444                                  ;------------------------------------------------------------------------------
  5445                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5446                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5447                                  ; any more.
  5448                                  ;------------------------------------------------------------------------------
  5449                                  
  5450                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5451                                  		; 15/12/2023
  5452 00001C39 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5453 00001C3D 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5454                                  					; ds:di-->bds2
  5455                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5456 00001C3F 8A26[2501]              		mov	ah, [dsktnum]
  5457 00001C43 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5458                                  remap_loop1:
  5459 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5460                                  					; set new num to next floppy
  5461 00001C48 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5462 00001C4B FEC0                    		inc	al		; new number for next floppy
  5463 00001C4D FECC                    		dec	ah		; count down extra floppies
  5464 00001C4F 75F5                    		jnz	short remap_loop1
  5465                                  
  5466                                  ; now we've got to adjust the boot drive if we reassigned it
  5467                                  
  5468                                  		; 15/12/2023
  5469                                  		;mov	al, [cs:drvfat]
  5470 00001C51 A0[CA16]                		mov	al, [drvfat]
  5471 00001C54 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5472 00001C56 721D                    		jb	short rmap_exit
  5473                                  		;sub	al, [cs:dsktnum]
  5474 00001C58 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5475 00001C5C 7204                    		jb	short remap_boot_flop ;	brif so
  5476                                  
  5477                                  ; we've got to remap the boot hard drive
  5478                                  ; subtract the number of EXTRA floppies from it
  5479                                  
  5480 00001C5E 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5481 00001C60 EB04                    		jmp	short remap_change_boot_drv
  5482                                  ; ---------------------------------------------------------------------------
  5483                                  
  5484                                  ; we've got to remap the boot floppy.
  5485                                  ; add the number of hard drive partitions to it
  5486                                  
  5487                                  remap_boot_flop:
  5488                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5489                                  		; 15/12/2023
  5490 00001C62 0206[7500]              		add	al, [drvmax]
  5491                                  remap_change_boot_drv:			
  5492                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5493 00001C66 A2[CA16]                		mov	[drvfat], al
  5494 00001C69 FEC0                    		inc	al
  5495 00001C6B 1E                      		push	ds
  5496 00001C6C BF3E04                  		mov	di, SYSINITSEG	; 46Dh
  5497                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5498                                  		;;mov	di, 46Dh	; SYSINIT segment
  5499 00001C6F 8EDF                    		mov	ds, di
  5500 00001C71 A2[9602]                		mov	[DEFAULTDRIVE], al
  5501                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5502                                  					; pass it to sysinit as	well
  5503 00001C74 1F                      		pop	ds ; ds = cs
  5504                                  rmap_exit:
  5505 00001C75 C3                      		retn
  5506                                  
  5507                                  ; =============== S U B	R O U T	I N E =======================================
  5508                                  
  5509                                  ; 17/10/2022
  5510                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5511                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5512                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5513                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5514                                  ;**************************************************
  5515                                  ; getboot - get the boot sector for a hard disk
  5516                                  ;
  5517                                  ; Reads the boot sector from a specified drive into
  5518                                  ; a buffer at the top of memory.
  5519                                  ;
  5520                                  ; dl = int13 drive number to read boot sector for
  5521                                  ;**************************************************
  5522                                  
  5523                                  ; 17/10/2022
  5524                                  bootbias equ 200h
  5525                                  
  5526                                  getboot:	; proc near
  5527                                  		
  5528                                  		; 15/12/2023
  5529                                  		; ds = cs
  5530                                  		
  5531                                  		; 08/04/2018
  5532                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5533                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5534                                  		; 02/10/2022 - Retro DOS v4.0
  5535                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5536                                  
  5537                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5538                                  		; 15/12/2023
  5539 00001C76 A1[CD16]                		mov	ax, [init_bootseg]
  5540 00001C79 8EC0                    		mov	es, ax
  5541                                  
  5542                                  		; 17/10/2022
  5543 00001C7B BB0002                  		mov	bx, bootbias ; 200h
  5544                                  		;mov	bx, 200h	; bootbias
  5545                                  					; load BX, ES:BX is where sector goes
  5546 00001C7E B80102                  		mov	ax, 201h
  5547 00001C81 30F6                    		xor	dh, dh
  5548 00001C83 B90100                  		mov	cx, 1
  5549 00001C86 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5550                                  					; AL = number of sectors to read, CH = track, CL = sector
  5551                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5552                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5553 00001C88 7209                    		jb	short erret
  5554                                  		; 17/10/2022
  5555 00001C8A 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5556                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5557                                  					; Dave Litton magic word?
  5558 00001C91 7401                    		jz	short norm_ret	; yes
  5559                                  erret:
  5560 00001C93 F9                      		stc
  5561                                  norm_ret:
  5562 00001C94 C3                      		retn
  5563                                  
  5564                                  ; =============== S U B	R O U T	I N E =======================================
  5565                                  
  5566                                  ; 28/12/2018 - Retro DOS v4.0 
  5567                                  
  5568                                  ;***************************************************************************
  5569                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5570                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5571                                  ;   our own logical sectors start. we also read in our boot sector to
  5572                                  ;   determine version number
  5573                                  ;
  5574                                  ;   inputs:	dl is rom drive number (80...)
  5575                                  ;		bh is partition number (0....) 
  5576                                  ;		ds:di points to bds
  5577                                  ;   outputs:	carry clear -> bpb is filled in
  5578                                  ;		carry set   -> bpb is left uninitialized due to error
  5579                                  ;	trashes (at least) si, cx
  5580                                  ;	MUST PRESERVE ES:!!!!
  5581                                  ;***************************************************************************
  5582                                  
  5583                                  sethard:	; proc near		
  5584 00001C95 57                      		push	di
  5585 00001C96 53                      		push	bx
  5586 00001C97 1E                      		push	ds
  5587 00001C98 06                      		push	es
  5588 00001C99 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5589 00001C9C 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5590 00001C9F 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5591                                  					; fnon_removable
  5592 00001CA3 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5593                                  					; ffHardFile
  5594 00001CA7 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5595 00001CAC 88FE                    		mov	dh, bh		; partition number
  5596 00001CAE 52                      		push	dx
  5597 00001CAF B408                    		mov	ah, 8
  5598 00001CB1 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5599                                  					; DL = drive number
  5600                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5601                                  					; DL = number of consecutive drives
  5602                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5603 00001CB3 FEC6                    		inc	dh
  5604 00001CB5 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5605 00001CB8 5A                      		pop	dx
  5606 00001CB9 7263                    		jb	short setret	; error	if no hard disk
  5607 00001CBB 80E13F                  		and	cl, 3Fh
  5608 00001CBE 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5609 00001CC1 52                      		push	dx		; save partition number
  5610 00001CC2 E8B1FF                  		call	getboot
  5611 00001CC5 5A                      		pop	dx		; restore partition number
  5612 00001CC6 7256                    		jb	short setret
  5613 00001CC8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5614                                  
  5615                                  ; The first 'active' partition is 00, the second is 01....
  5616                                  ;   then the remainder of the 'primary' but non-active partitions
  5617                                  
  5618                                  act_part:				
  5619 00001CCB 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5620 00001CD0 7418                    		jz	short no_act	; no
  5621 00001CD2 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5622 00001CD6 740C                    		jz	short got_good_act
  5623 00001CD8 26803F04                		cmp	byte [es:bx], 4
  5624 00001CDC 7406                    		jz	short got_good_act
  5625 00001CDE 26803F06                		cmp	byte [es:bx], 6
  5626 00001CE2 7506                    		jnz	short no_act
  5627                                  got_good_act:				
  5628 00001CE4 08F6                    		or	dh, dh		; is this our target partition #?
  5629 00001CE6 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5630 00001CE8 FECE                    		dec	dh		; count	down
  5631                                  no_act:					
  5632 00001CEA 83C310                  		add	bx, 16
  5633 00001CED 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5634                                  					; last entry done?
  5635 00001CF1 75D8                    		jnz	short act_part	; no, process next entry
  5636 00001CF3 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5637                                  					; restore original value of bx
  5638                                  
  5639                                  ; Now scan the non-active partitions
  5640                                  
  5641                                  get_primary:				
  5642 00001CF6 26F647FC80              		test	byte [es:bx-4], 80h
  5643 00001CFB 7518                    		jnz	short not_prim	; we've already scanned
  5644                                  					; the ACTIVE ones
  5645 00001CFD 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5646 00001D01 740C                    		jz	short got_prim
  5647 00001D03 26803F04                		cmp	byte [es:bx], 4
  5648 00001D07 7406                    		jz	short got_prim
  5649 00001D09 26803F06                		cmp	byte [es:bx], 6
  5650 00001D0D 7506                    		jnz	short not_prim
  5651                                  got_prim:				
  5652 00001D0F 08F6                    		or	dh, dh		; is this our target partition?
  5653 00001D11 740F                    		jz	short set2
  5654 00001D13 FECE                    		dec	dh
  5655                                  not_prim:				
  5656 00001D15 83C310                  		add	bx, 16
  5657 00001D18 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5658 00001D1C 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5659                                  setret:					
  5660 00001D1E F9                      		stc			; error	return
  5661 00001D1F E9DC02                  		jmp	ret_hard_err
  5662                                  
  5663                                  ; ---------------------------------------------------------------------------
  5664                                  
  5665                                  ;  until we get the real logical boot record and get the bpb,
  5666                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5667                                  ;  for the convenience of the computation.
  5668                                  ;
  5669                                  ;  at the end of this procedure, if a bpb information is gotten from
  5670                                  ;  the valid boot record, then we are going to use those bpb information
  5671                                  ;  without change.
  5672                                  ;
  5673                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5674                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5675                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5676                                  
  5677                                  set2:					
  5678 00001D22 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5679                                  			; save the rom bios drive number we are handling now.
  5680 00001D27 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5681 00001D2B 268B5706                		mov	dx, [es:bx+6]
  5682                                  
  5683                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5684                                  ; sectors should be allowed	
  5685                                  
  5686 00001D2F 83E801                  		sub	ax, 1
  5687 00001D32 83DA00                  		sbb	dx, 0
  5688 00001D35 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5689 00001D39 2613570A                		adc	dx, [es:bx+10]
  5690 00001D3D 7305                    		jnb	short okdrive
  5691 00001D3F 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5692                                  okdrive:				
  5693 00001D44 268B4704                		mov	ax, [es:bx+4]
  5694 00001D48 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5695                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5696 00001D4B 268B4706                		mov	ax, [es:bx+6]
  5697 00001D4F 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5698 00001D52 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5699 00001D56 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5700 00001D5A 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5701 00001D5D 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5702                                  					; bpb->maxsec =	p->partitionlength
  5703 00001D60 83FA00                  		cmp	dx, 0
  5704 00001D63 7705                    		ja	short okdrive_1
  5705 00001D65 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5706 00001D68 72B4                    		jb	short setret	; return -1;
  5707                                  okdrive_1:				
  5708 00001D6A 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5709 00001D6D 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5710 00001D70 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5711                                  					; usually equal	to the # of sec/trk.
  5712 00001D72 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5713 00001D75 50                      		push	ax
  5714 00001D76 89D0                    		mov	ax, dx
  5715 00001D78 31D2                    		xor	dx, dx
  5716 00001D7A F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5717                                  					; (track)temp_h:ax + (sector)dx
  5718                                  		; 17/10/2022
  5719 00001D7C 2EA3[2905]              		mov	[cs:temp_h], ax
  5720 00001D80 58                      		pop	ax
  5721 00001D81 F7F3                    		div	bx
  5722 00001D83 88D1                    		mov	cl, dl
  5723 00001D85 FEC1                    		inc	cl
  5724 00001D87 31DB                    		xor	bx, bx
  5725 00001D89 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5726 00001D8C 50                      		push	ax
  5727 00001D8D 31D2                    		xor	dx, dx
  5728 00001D8F 2EA1[2905]              		mov	ax, [cs:temp_h]
  5729 00001D93 F7F3                    		div	bx
  5730 00001D95 2EA3[2905]              		mov	[cs:temp_h], ax
  5731 00001D99 58                      		pop	ax
  5732 00001D9A F7F3                    		div	bx		;  dl is head, ax is cylinder
  5733 00001D9C 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5734 00001DA2 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5735 00001DA4 3D0004                  		cmp	ax, 1024
  5736 00001DA7 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5737                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5738                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5739                                  			; ('ja' must be 'jnb')
  5740                                  okdrive_2:
  5741                                   		; 28/07/2019
  5742                                  ; dl is head.
  5743                                  ; ax is cylinder
  5744                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5745                                  
  5746                                  ;*** for mini disks ***
  5747                                  
  5748 00001DA9 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5749                                  					; check	for mini disk
  5750 00001DAD 7503                    		jnz	short oknotmini	; not mini disk.
  5751 00001DAF 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5752                                  					; set the physical track number
  5753                                  oknotmini:
  5754                                  ;*** end of added logic for mini disk
  5755                                  				
  5756 00001DB2 D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5757 00001DB4 D0CC                    		ror	ah, 1		; two bits of upper byte
  5758 00001DB6 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5759 00001DB9 08E1                    		or	cl, ah		; move two bits	to correct spot
  5760 00001DBB 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5761                                  					; cl is	sector + 2 high	bits of	cylinder
  5762 00001DBD 88D6                    		mov	dh, dl		; dh is	head
  5763 00001DBF 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5764                                  
  5765                                  ; cl is sector + 2 high bits of cylinder
  5766                                  ; ch is low 8 bits of cylinder
  5767                                  ; dh is head
  5768                                  ; dl is drive
  5769                                  
  5770                                  ; for convenience, we are going to read the logical boot sector
  5771                                  ; into cs:disksector area.
  5772                                  
  5773                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5774                                  ; is to be read in is cs:disksector.
  5775                                  
  5776 00001DC4 0E                      		push	cs
  5777 00001DC5 07                      		pop	es
  5778 00001DC6 BB[4E01]                		mov	bx, disksector	; for convenience,
  5779                                  					; we are going to read the logical boot	sector
  5780                                  					; into cs:disksector area.
  5781 00001DC9 B80102                  		mov	ax, 201h
  5782 00001DCC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5783                                  					; AL = number of sectors to read, CH = track, CL = sector
  5784                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5785                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5786                                  
  5787                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5788                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5789                                  ; media if we recognize the version number.
  5790                                  
  5791 00001DCE BB[4E01]                		mov	bx, disksector
  5792 00001DD1 53                      		push	bx
  5793 00001DD2 50                      		push	ax
  5794 00001DD3 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5795 00001DD7 740D                    		jz	short check_1_ok ; yes
  5796 00001DD9 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5797 00001DDD 7529                    		jnz	short invalid_boot_record ; no
  5798 00001DDF 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5799 00001DE4 7522                    		jnz	short invalid_boot_record
  5800                                  check_1_ok:				
  5801                                  		; 14/08/2023
  5802 00001DE6 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5803                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5804                                  					; point	to the bpb in the boot record
  5805 00001DE9 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5806                                  					; get the mediadescriptor byte
  5807 00001DED 24F0                    		and	al, 0F0h	; mask off low nibble
  5808 00001DEF 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5809 00001DF1 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5810 00001DF3 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5811 00001DF8 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5812                                  
  5813                                  check2_ok:				; yes, mediadescriptor ok.
  5814 00001DFA 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5815                                  					; the sectorspercluster	is
  5816                                  					; a power of 2
  5817                                  					;
  5818                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5819                                  					; get the sectorspercluster
  5820 00001DFE 08C0                    		or	al, al		; is it	zero?
  5821 00001E00 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5822                                  
  5823                                  ck_power_of_two:			
  5824 00001E02 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5825 00001E04 73FC                    		jnb	short ck_power_of_two
  5826 00001E06 7405                    		jz	short valid_boot_record
  5827                                  
  5828                                  invalid_boot_record:			
  5829 00001E08 58                      		pop	ax
  5830 00001E09 5B                      		pop	bx
  5831 00001E0A E93301                  		jmp	unknown		; jump to invalid boot record
  5832                                  					; unformatted or illegal media.
  5833                                  ; ---------------------------------------------------------------------------
  5834                                  
  5835                                  valid_boot_record:			
  5836 00001E0D 58                      		pop	ax
  5837 00001E0E 5B                      		pop	bx
  5838                                  
  5839                                  ; Signature found. Now check version.
  5840                                  
  5841 00001E0F 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5842                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5843 00001E15 750F                    		jnz	short try5
  5844 00001E17 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5845                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5846 00001E1C 7508                    		jnz	short try5
  5847 00001E1E EB2F                    		jmp	short copybpb
  5848                                  ; ---------------------------------------------------------------------------
  5849                                  
  5850                                  setret_brdg:				
  5851 00001E20 E9FBFE                  		jmp	setret
  5852                                  ; ---------------------------------------------------------------------------
  5853                                  
  5854                                  unknown3_0_j:				
  5855 00001E23 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5856                                  					; although, content might be bad.
  5857                                  ; ---------------------------------------------------------------------------
  5858                                  
  5859                                  try5:					
  5860 00001E26 E8DA01                  		call	cover_fdisk_bug
  5861                                  
  5862                                  ; see if it is an os2 signature
  5863                                  
  5864 00001E29 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5865                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5866 00001E2F 750D                    		jnz	short no_os2
  5867 00001E31 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5868 00001E35 2C31                    		sub	al, '1'
  5869                                  		;sub	al, 31h		; '1'
  5870 00001E37 24FE                    		and	al, 0FEh
  5871 00001E39 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5872 00001E3B E90201                  		jmp	unknown
  5873                                  ; ---------------------------------------------------------------------------
  5874                                  
  5875                                  ; no os2 signature, this is to check for real dos versions
  5876                                  
  5877                                  no_os2:					
  5878 00001E3E 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5879                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5880 00001E44 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5881                                  					; do not trust it, but still legal.
  5882 00001E46 7507                    		jnz	short copybpb	; honor	os2 boot record
  5883                                  					; or dos 4.0 version
  5884 00001E48 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5885                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5886 00001E4D 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5887                                  copybpb:
  5888                                  
  5889                                  ; 03/10/2022
  5890                                  
  5891                                  ; we have a valid boot sector. use the bpb in it to build the
  5892                                  ; bpb in bios. it is assumed that only
  5893                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5894                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5895                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5896                                  ; need to be set (all other values in already). fbigfat is also set.
  5897                                  
  5898                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5899                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5900                                  ; and system id according to the boot record.
  5901                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5902                                  
  5903                                  		; 10/12/2022
  5904                                  		; (number of FATs optimization)
  5905 00001E4F BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5906                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5907 00001E52 2E8A4C05                		mov	cl, [cs:si+05h]
  5908                                  		
  5909 00001E56 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5910                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5911                                  					; [disksector+EXT_BOOT.SIG]
  5912                                  					; EXT_BOOT_SIGNATURE
  5913 00001E5B 754E                    		jnz	short copybpb_fat ; conventional fat system
  5914                                  
  5915                                  		; 03/10/2022
  5916                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5917                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5918                                  		;	     number of FATs must be 2 ; =*?=
  5919                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5920                                  		;
  5921                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5922                                  
  5923                                  		; 10/12/2022
  5924                                  		;cmp	byte [cs:disksector+10h], 0
  5925                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5926                                  		;jnz	short copybpb_fat ; a fat system.
  5927 00001E5D 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5928 00001E5F 754A                    		jnz	short copybpb_fat ; a fat system.
  5929                                  
  5930                                  ; non fat based	media.
  5931                                  
  5932 00001E61 57                      		push	di
  5933 00001E62 1E                      		push	ds
  5934 00001E63 1E                      		push	ds
  5935 00001E64 07                      		pop	es
  5936 00001E65 0E                      		push	cs
  5937 00001E66 1F                      		pop	ds
  5938                                  
  5939                                  		; 10/12/2022
  5940                                  		; (number of FATs optimization)
  5941                                  		; SI = disksector+11
  5942                                  		; 17/10/2022
  5943                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5944                                  		;mov	si, disksector+11
  5945 00001E67 83C706                  		add	di, 6		; add di,BDS.BPB
  5946                                  
  5947                                  ; just for completeness, we'll make sure that total_sectors and
  5948                                  ; big_total_sectors aren't both zero. I've seen examples of
  5949                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5950                                  ; got that way. If it occurs, then use the values from the
  5951                                  ; partition table.
  5952                                  
  5953                                  		; 18/12/2022
  5954 00001E6A 29C9                    		sub	cx, cx 
  5955                                  
  5956                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5957                                  		;jnz	short already_nonz 
  5958                                  		;			; how about big_total?
  5959                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5960                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5961                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5962                                  		;jnz	short already_nonz
  5963                                  
  5964                                  		; 18/12/2022
  5965 00001E6C 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5966 00001E70 7521                    		jnz	short already_nonz
  5967                                  					     ; how about big_total?
  5968 00001E72 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5969 00001E76 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5970 00001E78 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5971 00001E7C 7515                    		jnz	short already_nonz
  5972                                  
  5973                                  ; now let's copy the values from the partition table (now in the BDS)
  5974                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5975                                  
  5976 00001E7E 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5977 00001E81 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5978 00001E85 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5979 00001E88 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5980 00001E8C 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5981 00001E8F 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5982                                  
  5983                                  already_nonz:	
  5984                                  		; 18/12/2022
  5985                                  		; cx = 0
  5986 00001E93 B119                    		mov	cl, 25		
  5987                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5988 00001E95 F3A4                    		rep movsb
  5989 00001E97 1F                      		pop	ds
  5990 00001E98 5F                      		pop	di
  5991 00001E99 06                      		push	es
  5992 00001E9A 1E                      		push	ds
  5993 00001E9B 07                      		pop	es
  5994 00001E9C 0E                      		push	cs
  5995 00001E9D 1F                      		pop	ds
  5996                                  		; 13/08/2023
  5997 00001E9E BD[3507]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5998                                  		; 18/12/2022
  5999                                  		;mov	bp, mov_media_ids
  6000                                  		;;mov	bp, 751h	; mov_media_ids
  6001                                  					; at 2C7h:751h = 70h:2CC1h
  6002                                  					; set volume id, systemid, serial.
  6003 00001EA1 0E                      		push	cs		; simulate far call
  6004 00001EA2 E8B2F8                  		call	call_bios_code
  6005 00001EA5 06                      		push	es
  6006 00001EA6 1F                      		pop	ds
  6007 00001EA7 07                      		pop	es
  6008 00001EA8 E94B01                  		jmp	goodret
  6009                                  ; ---------------------------------------------------------------------------
  6010                                  
  6011                                  ; ****** cas ---
  6012                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6013                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6014                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6015                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6016                                  ; from the boot sector into the DPB anyway, we've just been using
  6017                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6018                                  ; we'll go ahead and copy it into the DPB, except in the case
  6019                                  ; that it equals zero, in which case we just use the values in
  6020                                  ; the DPB from the partition table.
  6021                                  
  6022                                  ; 17/10/2022
  6023                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6024                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6025                                  ; 09/12/2022
  6026                                  MOVMEDIAIDS equ mov_media_ids
  6027                                  CLEARIDS equ clear_ids
  6028                                  ; 11/09/2023
  6029                                  CLEARIDS_X equ clear_ids_x
  6030                                  
  6031                                  copybpb_fat:
  6032                                  		; 10/12/2022
  6033                                  		; (number of FATs optimization)
  6034                                  		; SI = disksector+11				
  6035                                  		; 17/10/2022
  6036                                  		;mov	si, disksector+11
  6037                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6038                                  					; cs:si	-> bpb in boot
  6039 00001EAB 31D2                    		xor	dx, dx
  6040 00001EAD 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6041                                  					; get totsec from boot sec
  6042 00001EB1 09C0                    		or	ax, ax
  6043 00001EB3 7516                    		jnz	short copy_totsec ; if non zero, use that
  6044 00001EB5 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6045                                  					; get the big version
  6046                                  					; (32 bit total	sectors)
  6047 00001EB9 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6048                                  		; 10/12/2022
  6049                                  		; (number of FATs optimization)
  6050                                  		; CL = number of FATs (2 or 1) 
  6051 00001EBD 89D3                    		mov	bx, dx		; see if it is a big zero
  6052 00001EBF 09C3                    		or	bx, ax
  6053 00001EC1 7508                    		jnz	short copy_totsec
  6054                                  			; screw it. it	was bogus.
  6055 00001EC3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6056 00001EC6 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6057 00001EC9 EB06                    		jmp	short fat_big_small
  6058                                  
  6059                                  		;mov	cx, dx
  6060                                  		;or	cx, ax		; see if it is a big zero
  6061                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6062                                  copy_totsec:				
  6063 00001ECB 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6064                                  					; make DPB match boot sec
  6065 00001ECE 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6066                                  
  6067                                  		; 10/12/2022
  6068                                  ;totsec_already_set:			
  6069                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6070                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6071                                  
  6072                                  ; determine fat entry size.
  6073                                  
  6074                                  fat_big_small:
  6075                                  
  6076                                  ;at this moment dx;ax = total sector number
  6077                                  
  6078                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6079                                  ;from the BPB on the disk
  6080                                  				
  6081 00001ED1 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6082                                  					; get #reserved_sectors	from BPB
  6083 00001ED5 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6084                                  					; update BDS field
  6085 00001ED8 29D8                    		sub	ax, bx
  6086 00001EDA 83DA00                  		sbb	dx, 0		; update the count
  6087 00001EDD 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6088                                  					; bx = sectors/fat
  6089 00001EE1 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6090                                  					; set in bds bpb
  6091                                  		; 10/12/2022
  6092                                  		; (number of FATs optimization)
  6093                                  		; CL = number of FATs (2 or 1) 
  6094                                  		;dec	cl ; *
  6095                                  		; 18/12/2022
  6096 00001EE4 49                      		dec	cx ; *
  6097 00001EE5 D3E3                    		shl	bx, cl			
  6098                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6099                                  		
  6100 00001EE7 29D8                    		sub	ax, bx		; sub #	fat sectors
  6101 00001EE9 83DA00                  		sbb	dx, 0
  6102 00001EEC 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6103                                  					; # root entries
  6104 00001EF0 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6105                                  					; set in bds bpb
  6106 00001EF3 B104                    		mov	cl, 4
  6107 00001EF5 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6108 00001EF7 29D8                    		sub	ax, bx		; sub #	dir sectors
  6109 00001EF9 83DA00                  		sbb	dx, 0		;
  6110                                  					; dx:ax	now contains the
  6111                                  					; # of data sectors
  6112 00001EFC 31C9                    		xor	cx, cx ; *
  6113 00001EFE 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6114                                  					; sectors per cluster
  6115 00001F02 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6116                                  					; set in bios bpb
  6117 00001F05 50                      		push	ax
  6118 00001F06 89D0                    		mov	ax, dx
  6119 00001F08 31D2                    		xor	dx, dx
  6120 00001F0A F7F1                    		div	cx		; cx = sectors per cluster
  6121 00001F0C 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6122                                  					; # clusters.
  6123 00001F10 58                      		pop	ax
  6124 00001F11 F7F1                    		div	cx
  6125 00001F13 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6126 00001F19 771C                    		ja	short toobig_ret ; too big cluster number
  6127 00001F1B 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6128                                  					; is this 16-bit fat?
  6129 00001F1E 7205                    		jb	short copymediaid ; no,	small fat
  6130                                  		; 17/10/2022
  6131 00001F20 800E[CC16]40            		or	byte [fbigfat], 40h
  6132                                  		;or	ds:fbigfat, 40h	; fbig
  6133                                  					; 16 bit fat
  6134                                  copymediaid:				
  6135 00001F25 06                      		push	es
  6136 00001F26 1E                      		push	ds
  6137 00001F27 07                      		pop	es
  6138 00001F28 0E                      		push	cs
  6139 00001F29 1F                      		pop	ds
  6140                                  		; 17/10/2022
  6141 00001F2A BD[3507]                		mov	bp, MOVMEDIAIDS
  6142                                  		;mov	bp, 751h	; mov_media_ids
  6143                                  					; at 2C7h:751h = 70h:2CC1h
  6144                                  					; copy filesys_id, volume label
  6145 00001F2D 0E                      		push	cs		; simulate far call
  6146 00001F2E E826F8                  		call	call_bios_code
  6147 00001F31 06                      		push	es
  6148 00001F32 1F                      		pop	ds
  6149 00001F33 07                      		pop	es
  6150 00001F34 E9A100                  		jmp	massage_bpb	; now final check for bpb info
  6151                                  					; and return.
  6152                                  ; ---------------------------------------------------------------------------
  6153                                  
  6154                                  toobig_ret:				
  6155 00001F37 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6156 00001F3D E9B600                  		jmp	goodret		; still	drive letter is	assigned
  6157                                  					; but useless. to big for
  6158                                  					; current pc dos fat file system
  6159                                  ; ---------------------------------------------------------------------------
  6160                                  
  6161                                  unknown:	
  6162                                  		; 12/12/2022
  6163 00001F40 804D2402                		or	byte [di+24h], 02h			
  6164                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6165                                  					; unformatted_media
  6166                                  					; Set unformatted media	flag.
  6167                                  
  6168                                  ; the boot signature may not be	recognizable,
  6169                                  ; but we should	try and	read it	anyway.
  6170                                  
  6171                                  unknown3_0:				
  6172 00001F44 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6173                                  					; [di+BDS.totalsecs32+2]
  6174 00001F47 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6175 00001F4A BE[FC16]                		mov	si, disktable2
  6176                                  
  6177                                  scan:					
  6178 00001F4D 2E3B14                  		cmp	dx, [cs:si]
  6179 00001F50 720D                    		jb	short gotparm
  6180 00001F52 7706                    		ja	short scan_next
  6181 00001F54 2E3B4402                		cmp	ax, [cs:si+2]
  6182 00001F58 7605                    		jbe	short gotparm
  6183                                  
  6184                                  scan_next:				
  6185 00001F5A 83C60A                  		add	si, 10		; 5*2
  6186 00001F5D EBEE                    		jmp	short scan	; covers upto 512 mb media
  6187                                  ; ---------------------------------------------------------------------------
  6188                                  
  6189                                  gotparm:				
  6190 00001F5F 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6191                                  		;or	ds:fbigfat, cl
  6192                                  		; 17/10/2022
  6193 00001F62 080E[CC16]              		or	[fbigfat], cl
  6194 00001F66 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6195                                  					; cl = log base	2 of ch
  6196 00001F6A 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6197                                  
  6198                                  ; now calculate size of fat table
  6199                                  
  6200 00001F6E 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6201                                  					; save number of (root)	dir entries
  6202 00001F71 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6203 00001F74 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6204 00001F77 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6205                                  					; save sectors per cluster
  6206                                  		; 17/10/2022
  6207 00001F7A F606[CC16]40            		test	byte [fbigfat], 40h
  6208                                  		;test	ds:fbigfat, 40h	; fbig
  6209                                  					; if (fbigfat)
  6210 00001F7F 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6211                                  
  6212                                  ; we don't need to change "small fat" logic since it is gauranteed
  6213                                  ; that double word total sector will not use 12 bit fat (unless
  6214                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6215                                  ; so in this case we assume dx = 0 !!
  6216                                  
  6217 00001F81 31DB                    		xor	bx, bx		; (12 bit fat)
  6218 00001F83 88EB                    		mov	bl, ch
  6219 00001F85 4B                      		dec	bx
  6220 00001F86 01C3                    		add	bx, ax		; dx=0
  6221 00001F88 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6222 00001F8A 43                      		inc	bx		; BDS.secperclus
  6223 00001F8B 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6224 00001F8E 89DE                    		mov	si, bx
  6225 00001F90 D1EB                    		shr	bx, 1
  6226 00001F92 01F3                    		add	bx, si
  6227 00001F94 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6228 00001F98 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6229 00001F9A 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6230                                  					; save number of fat sectors
  6231 00001F9D EB39                    		jmp	short massage_bpb
  6232                                  ; ---------------------------------------------------------------------------
  6233                                  
  6234                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6235                                  
  6236                                  dobig:					
  6237 00001F9F B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6238 00001FA1 52                      		push	dx		; save total sectors (high)
  6239 00001FA2 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6240 00001FA5 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6241 00001FA7 29D0                    		sub	ax, dx
  6242 00001FA9 5A                      		pop	dx
  6243 00001FAA 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6244 00001FAD 83E801                  		sub	ax, 1
  6245 00001FB0 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6246                                  					; total	secs - reserved	secs - root dir	secs
  6247 00001FB3 B302                    		mov	bl, 2
  6248 00001FB5 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6249                                  					; bx = 256 * BDS.secperclus + 2
  6250                                  
  6251                                  ; I don't understand why to add bx here!!!
  6252                                  
  6253                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6254                                  		; 27/09/2022
  6255                                  		; (Microsoft FAT32 File	System Specification,
  6256                                  		; December 2000, Page 21)
  6257                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6258                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6259                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6260                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6261                                  		
  6262 00001FB8 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6263 00001FBA 83D200                  		adc	dx, 0
  6264 00001FBD 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6265 00001FC0 83DA00                  		sbb	dx, 0
  6266                                  
  6267                                  ; assuming dx in the table will never be bigger than bx.
  6268                                  
  6269 00001FC3 F7F3                    		div	bx		; BDS.fatsecs =
  6270                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6271 00001FC5 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6272                                  					; number of fat	sectors
  6273                                  
  6274                                  ; now, set the default filesys_id, volume label, serial number
  6275                                  
  6276                                  		;;mov	bl, ds:fbigfat
  6277                                  		; 11/09/2023
  6278                                  		; 17/10/2022
  6279                                  		;mov	bl, [fbigfat]
  6280                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6281                                  
  6282 00001FC8 1E                      		push	ds
  6283 00001FC9 1E                      		push	ds
  6284 00001FCA 07                      		pop	es
  6285 00001FCB 0E                      		push	cs
  6286 00001FCC 1F                      		pop	ds
  6287                                  		; 11/09/2023
  6288 00001FCD A0[CC16]                		mov	al, [fbigfat]
  6289 00001FD0 BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6290                                  		; 17/10/2022
  6291                                  		;mov	bp, CLEARIDS
  6292                                  		;;mov	bp, 5D9h	; clear_ids
  6293                                  					; at 2C7h:5D9h = 70h:2B49h
  6294 00001FD3 0E                      		push	cs
  6295 00001FD4 E880F7                  		call	call_bios_code
  6296 00001FD7 1F                      		pop	ds
  6297                                  
  6298                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6299                                  ; set according to the partition information. we are going to
  6300                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6301                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6302                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6303                                  ; we don't do this for the bpb information from the boot record. we
  6304                                  ; are not going to change the bpb information from the boot record.
  6305                                  
  6306                                  massage_bpb:
  6307                                  		; 11/09/2023
  6308                                  		;; 12/12/2022
  6309                                  		;mov	bl, [fbigfat]
  6310                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6311                                  		;			; set size of fat on media
  6312                                  		
  6313 00001FD8 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6314 00001FDB 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6315 00001FDE 83FA00                  		cmp	dx, 0		; double word total sectors?
  6316                                  		;ja	short goodret	; don't have to change it.
  6317                                  		; 12/12/2022
  6318 00001FE1 771B                    		ja	short short goodret2
  6319                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6320                                  		;ja	short goodret	; don't have to change it.
  6321                                  		; 12/12/2022
  6322 00001FE3 395519                  		cmp	[di+19h], dx ; 0
  6323 00001FE6 7716                    		ja	short goodret2
  6324 00001FE8 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6325                                  		;jb	short goodret
  6326                                  		; 12/12/2022
  6327 00001FEB 7209                    		jc	short goodret
  6328 00001FED 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6329 00001FF0 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6330                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6331                                  		; 12/12/2022
  6332 00001FF3 89551B                  		mov	[di+1Bh], dx ; 0 
  6333                                  goodret:				
  6334                                  		;mov	bl, ds:fbigfat
  6335                                  		; 11/09/2023
  6336                                  		; 12/12/2022
  6337                                  		; 17/10/2022
  6338 00001FF6 8A1E[CC16]              		mov	bl, [fbigfat]
  6339 00001FFA 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6340                                  		;			; set size of fat on media
  6341 00001FFD F8                      		clc
  6342                                  ret_hard_err:
  6343                                  		; 12/12/2022
  6344                                  goodret2:					
  6345 00001FFE 07                      		pop	es
  6346 00001FFF 1F                      		pop	ds
  6347 00002000 5B                      		pop	bx
  6348 00002001 5F                      		pop	di
  6349 00002002 C3                      		retn
  6350                                  
  6351                                  ; =============== S U B	R O U T	I N E =======================================
  6352                                  
  6353                                  ; 15/10/2022
  6354                                  
  6355                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6356                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6357                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6358                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6359                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6360                                  
  6361                                  		; 17/10/2022
  6362                                  cover_fdisk_bug:	
  6363 00002003 50                      		push	ax
  6364                                  		; 18/12/2023
  6365                                  		;push	dx
  6366 00002004 56                      		push	si
  6367 00002005 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6368                                  					; [disksector+EXT_BOOT.SIG],
  6369                                  					; EXT_BOOT_SIGNATURE
  6370 0000200B 742E                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6371 0000200D 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6372 00002013 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6373 00002015 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6374 0000201A 751F                    		jnz	short cfb_retit
  6375                                  cfb_chk_BPB_TOTALSECTORS:
  6376                                  		; 17/10/2022		
  6377 0000201C BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6378                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6379                                  		; 18/12/2023
  6380 0000201F 2E8B4408                		mov	ax, [cs:si+8]
  6381 00002023 09C0                    		or	ax, ax ; 0 ?
  6382                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6383                                  					; just to make sure.
  6384 00002025 7414                    		jz	short cfb_retit
  6385                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6386 00002027 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6387 0000202B 730E                    		jnb	short cfb_retit
  6388 0000202D 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6389 0000202F 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6390                                  					; then decrease	BPB_TOTALSECTORS by 1
  6391 00002033 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6392 00002037 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6393                                  cfb_retit:				
  6394 0000203B 5E                      		pop	si
  6395                                  		;pop	dx ; 18/12/2023	
  6396 0000203C 58                      		pop	ax
  6397 0000203D C3                      		retn
  6398                                  
  6399                                  ; ---------------------------------------------------------------------------
  6400                                  
  6401 0000203E 0200                    word2		dw 2			
  6402 00002040 0300                    word3		dw 3			
  6403 00002042 0002                    word512		dw 512			
  6404                                  
  6405                                  ; =============== S U B	R O U T	I N E =======================================
  6406                                  
  6407                                  ; 15/10/2022
  6408                                  
  6409                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6410                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6411                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6412                                  ; as the bpb on the drive.
  6413                                  ;
  6414                                  ; no attempt is made to preserve registers since we are going to jump to
  6415                                  ; sysinit straight after this routine.
  6416                                  
  6417                                  setdrvparms:
  6418 00002044 31DB                    		xor	bx, bx
  6419                                  		; 18/10/2022
  6420 00002046 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6421                                  _next_bds:				
  6422 0000204A 06                      		push	es
  6423 0000204B 57                      		push	di
  6424 0000204C 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6425 00002050 80FB05                  		cmp	bl, 5		; ffHardFile
  6426 00002053 753E                    		jnz	short nothardff
  6427 00002055 31D2                    		xor	dx, dx
  6428 00002057 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6429 0000205B 09C0                    		or	ax, ax
  6430 0000205D 7508                    		jnz	short get_ccyl
  6431 0000205F 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6432 00002063 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6433                                  
  6434                                  get_ccyl:				
  6435 00002067 52                      		push	dx
  6436 00002068 50                      		push	ax
  6437 00002069 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6438 0000206D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6439                                  					; assume sectors per cyl. < 64k.
  6440 00002071 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6441 00002073 58                      		pop	ax
  6442 00002074 5A                      		pop	dx		; dx:ax	= total	sectors
  6443 00002075 50                      		push	ax
  6444 00002076 89D0                    		mov	ax, dx
  6445 00002078 31D2                    		xor	dx, dx
  6446 0000207A F7F1                    		div	cx
  6447 0000207C 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6448 00002080 58                      		pop	ax
  6449 00002081 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6450 00002083 09D2                    		or	dx, dx
  6451 00002085 7401                    		jz	short no_cyl_rnd ; came out even
  6452 00002087 40                      		inc	ax		; round	up
  6453                                  
  6454                                  no_cyl_rnd:				
  6455 00002088 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6456 0000208C 06                      		push	es
  6457 0000208D 1F                      		pop	ds
  6458 0000208E 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6459                                  					; ds:si	-> bpb for hard	file
  6460 00002091 EB55                    		jmp	short set_recbpb
  6461                                  ; ---------------------------------------------------------------------------
  6462                                  
  6463                                  nothardff:				
  6464 00002093 0E                      		push	cs
  6465 00002094 1F                      		pop	ds
  6466                                  
  6467                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6468                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6469                                  
  6470                                  		; 10/12/2022
  6471                                  		; ds = cs
  6472                                  		; 17/10/2022 (ds=cs)
  6473 00002095 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6474                                  		;cmp	byte [cs:fakefloppydrv], 1
  6475 0000209A 7454                    		jz	short go_to_next_bds
  6476 0000209C 80FB07                  		cmp	bl, 7		; ffother
  6477                                  					; special case "other" type of medium
  6478 0000209F 753D                    		jnz	short not_process_other
  6479                                  process_other:
  6480 000020A1 31D2                    		xor	dx, dx
  6481 000020A3 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6482 000020A6 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6483 000020A9 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6484 000020AC 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6485                                  					; have the total number of sectors
  6486 000020AF 48                      		dec	ax
  6487 000020B0 B201                    		mov	dl, 1
  6488                                  _again:					
  6489 000020B2 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6490 000020B5 7206                    		jb	short _@@
  6491 000020B7 D1E8                    		shr	ax, 1
  6492 000020B9 D0E2                    		shl	dl, 1
  6493 000020BB EBF5                    		jmp	short _again
  6494                                  ; ---------------------------------------------------------------------------
  6495                                  
  6496                                  _@@:					
  6497 000020BD 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6498 000020C0 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6499 000020C2 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6500                                  __@@:					
  6501 000020C7 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6502                                  
  6503                                  ; logic to get the sectors/fat area.
  6504                                  ; fat entry is assumed to be 1.5 bytes!!!
  6505                                  
  6506                                  		; 10/12/2022
  6507                                  		; ds = cs
  6508                                  		; 17/10/2022 (ds=cs)
  6509 000020CA F726[4020]              		mul	word [word3]
  6510 000020CE F736[3E20]              		div	word [word2]
  6511 000020D2 31D2                    		xor	dx, dx
  6512 000020D4 F736[4220]              		div	word [word512]
  6513                                  		;
  6514                                  		; 10/12/2022
  6515                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6516                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6517                                  		;xor	dx, dx
  6518                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6519                                  		;
  6520 000020D8 40                      		inc	ax		; + 1
  6521                                  no_round_up:
  6522 000020D9 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6523 000020DC EB12                    		jmp	short go_to_next_bds
  6524                                  ; ---------------------------------------------------------------------------
  6525                                  
  6526                                  not_process_other:			
  6527 000020DE D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6528                                  		;mov	si, bpbtable
  6529                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6530                                  		; 09/12/2022
  6531                                  		;mov	si, BPBTABLE
  6532                                  		;mov	si, [bx+si]	; get address of bpb
  6533                                  		; 10/12/2022
  6534                                  		;mov	si, [BPBTABLE+bx]
  6535                                  		; 13/12/2022
  6536                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6537                                  		; 14/08/2023
  6538                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6539                                  							; correct offset
  6540 000020E0 8BB7[E073]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6541                                  
  6542                                  		; 28/08/2023
  6543 000020E4 81C6E03C                		add	si, SYSINIT_OFFSET
  6544                                  set_recbpb:				
  6545 000020E8 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6546                                  					; es:di	-> recbpb
  6547 000020EB B91900                  		mov	cx, 25		; bpbx.size
  6548 000020EE F3A4                    		rep movsb		; move (size bpbx) bytes	
  6549                                  go_to_next_bds:				
  6550 000020F0 5F                      		pop	di
  6551 000020F1 07                      		pop	es		; restore pointer to bds
  6552 000020F2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6553 000020F5 83FFFF                  		cmp	di, 0FFFFh	; -1
  6554 000020F8 740A                    		jz	short got_end_of_bds_chain
  6555 000020FA E94DFF                  		jmp	_next_bds
  6556                                  ; ---------------------------------------------------------------------------
  6557                                  
  6558                                  		; 18/12/2022
  6559                                  ;got_end_of_bds_chain:			
  6560                                  		;retn
  6561                                  
  6562                                  ; =============== S U B	R O U T	I N E =======================================
  6563                                  
  6564                                  ; 15/10/2022
  6565                                  ; 30/12/2018 - Retro DOS v4.0
  6566                                  
  6567                                  ; al = device number
  6568                                  
  6569                                  print_init:	
  6570 000020FD 98                      		cbw
  6571 000020FE 89C2                    		mov	dx, ax
  6572 00002100 B401                    		mov	ah, 1
  6573 00002102 CD17                    		int	17h		; PRINTER - INITIALIZE
  6574                                  					; DX = printer port (0-3)
  6575                                  					; Return: AH = status
  6576                                  got_end_of_bds_chain:	; 18/12/2022
  6577 00002104 C3                      		retn
  6578                                  
  6579                                  ; =============== S U B	R O U T	I N E =======================================
  6580                                  
  6581                                  ; al = device number
  6582                                  
  6583                                  aux_init:
  6584 00002105 98                      		cbw
  6585 00002106 89C2                    		mov	dx, ax
  6586                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6587                                  					; 2400,n,1,8 (msequ.inc)
  6588                                  		;mov	ah, 0
  6589                                  		; 10/12/2022
  6590 00002108 B8A300                  		mov	ax, 00A3h
  6591 0000210B CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6592                                  					; 	AL = initializing parameters,
  6593                                  					;	DX = port number (0-3)
  6594                                  					; Return: AH = RS-232 status code bits,
  6595                                  					;	  AL = modem status bits
  6596 0000210D C3                      		retn
  6597                                  
  6598                                  ; =============== S U B	R O U T	I N E =======================================
  6599                                  
  6600                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6601                                  ; 30/12/2018 - Retro DOS v4.0
  6602                                  ; 03/06/2018 - Retro DOS v3.0
  6603                                  ; (19/03/2018 - Retro DOS v2.0)
  6604                                  
  6605                                  ; domini **********************************************************************
  6606                                  ;
  6607                                  ;mini disk initialization routine. called right after dohard
  6608                                  ;modified for >2 hardfile support
  6609                                  ;
  6610                                  ; **cs=ds=es=datagrp
  6611                                  ;
  6612                                  ; **domini will search for every extended partition in the system, and
  6613                                  ;   initialize it.
  6614                                  ;
  6615                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6616                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6617                                  ;   address of bdsm table.
  6618                                  ;
  6619                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6620                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6621                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6622                                  ;
  6623                                  ; **domini will use the same routine in sethard routine after label set2 to
  6624                                  ;   save coding.
  6625                                  ;
  6626                                  ; **drvmax determined in dohard routine will be used for the next
  6627                                  ;   available logical mini disk drive number.
  6628                                  ;
  6629                                  ; input: drvmax, dskdrvs
  6630                                  ;
  6631                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6632                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6633                                  ;
  6634                                  ; called modules:
  6635                                  ;		  getboot
  6636                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6637                                  ;
  6638                                  ;		  setmini (new, it will use set2 routine)
  6639                                  ;
  6640                                  ; variables used: end_of_bdsm
  6641                                  ;		  rom_minidisk_num
  6642                                  ;		  mini_hdlim, mini_seclim
  6643                                  ;		  BDS_STRUC, start_bds
  6644                                  ;
  6645                                  ;******************************************************************************
  6646                                  
  6647                                  		; 19/10/2022
  6648                                  domini:	
  6649 0000210E 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6650                                  		; 10/12/2022
  6651 00002112 20F6                    		and	dh, dh
  6652                                  		;cmp	dh, 0
  6653 00002114 7431                    		jz	short dominiret	; no hard file?	then exit.
  6654 00002116 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6655                                  domini_loop:				
  6656 00002118 52                      		push	dx
  6657 00002119 8816[4217]              		mov	[rom_minidisk_num], dl
  6658 0000211D B408                    		mov	ah, 8
  6659 0000211F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6660                                  					; DL = drive number
  6661                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6662                                  					; DL = number of consecutive drives
  6663                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6664 00002121 FEC6                    		inc	dh
  6665 00002123 31C0                    		xor	ax, ax
  6666 00002125 88F0                    		mov	al, dh
  6667 00002127 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6668 0000212A 80E13F                  		and	cl, 3Fh
  6669 0000212D 88C8                    		mov	al, cl
  6670 0000212F A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6671 00002132 06                      		push	es
  6672 00002133 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6673 00002137 E83CFB                  		call	getboot		; read master boot record into
  6674                                  					; initbootsegment:bootbias
  6675 0000213A 7203                    		jc	short domininext
  6676 0000213C E80900                  		call	find_mini_partition
  6677                                  domininext:				
  6678 0000213F 07                      		pop	es
  6679 00002140 5A                      		pop	dx
  6680 00002141 FEC2                    		inc	dl		; next hard file
  6681 00002143 FECE                    		dec	dh
  6682 00002145 75D1                    		jnz	short domini_loop
  6683                                  dominiret:				
  6684 00002147 C3                      		retn
  6685                                  
  6686                                  ; =============== S U B	R O U T	I N E =======================================
  6687                                  
  6688                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6689                                  ; 30/12/2018 - Retro DOS v4.0
  6690                                  
  6691                                  ;find_mini_partition tries to find every extended partition on a disk.
  6692                                  ;at entry:	di -> bdsm entry
  6693                                  ;		es:bx -> 07c0:bootbias - master boot record
  6694                                  ;		rom_minidisk_num - rom drive number
  6695                                  ;		drvmax - logical drive number
  6696                                  ;		mini_hdlim, mini_seclim
  6697                                  ;
  6698                                  ;called routine: setmini which uses set2 (in sethard routine)
  6699                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6700                                  
  6701                                  
  6702                                  find_mini_partition:	
  6703 00002148 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6704                                  fmpnext:				
  6705 0000214C 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6706 00002150 740A                    		jz	short fmpgot
  6707 00002152 83C310                  		add	bx, 16
  6708 00002155 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6709 00002159 75F1                    		jnz	short fmpnext
  6710                                  		;jmp	short fmpnextfound ; extended partition	not found
  6711                                  		; 18/12/2022
  6712                                  fmpnextfound:
  6713 0000215B C3                      		retn
  6714                                  
  6715                                  ;		; 30/07/2019 - Retro DOS v3.2
  6716                                  ;		jb	short fmpnext
  6717                                  ;fmpret:
  6718                                  ;		retn	; 29/05/2019
  6719                                  
  6720                                  ; ---------------------------------------------------------------------------
  6721                                  
  6722                                  		; 19/10/2022
  6723                                  fmpgot:					; found my partition.
  6724 0000215C E8A100                  		call	dmax_check	; check	for drvmax already 26
  6725 0000215F 73FA                    		jnb	short fmpnextfound ; done if too many
  6726 00002161 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free bds
  6727 00002165 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6728                                  		; 10/12/2022
  6729 0000216A 804D2301                		or	byte [di+23h], 1
  6730                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6731                                  					; fNon_Removable
  6732 0000216E C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6733                                  					; ffHardFile
  6734 00002172 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6735 00002177 A1[4817]                		mov	ax, [mini_hdlim]
  6736 0000217A 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6737 0000217D A1[4A17]                		mov	ax, [mini_seclim]
  6738 00002180 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6739 00002183 A0[4217]                		mov	al, [rom_minidisk_num]
  6740 00002186 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6741                                  					; set physical number
  6742 00002189 A0[7500]                		mov	al, [drvmax]
  6743 0000218C 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6744                                  					; set logical number
  6745 0000218F 26837F0A00              		cmp	word [es:bx+10], 0
  6746 00002194 7707                    		ja	short fmpgot_cont
  6747 00002196 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6748                                  					; only lower word is meaningful.
  6749 0000219B 72BE                    		jb	short fmpnextfound
  6750                                  					; should be bigger than 64 sectors at least
  6751                                  fmpgot_cont:				
  6752 0000219D 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6753 000021A0 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6754 000021A4 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6755 000021A7 D0C6                    		rol	dh, 1
  6756 000021A9 D0C6                    		rol	dh, 1
  6757 000021AB 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6758 000021AF 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6759                                  					; set hidden trks
  6760 000021B2 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6761 000021B6 268A7701                		mov	dh, [es:bx+1]	; head
  6762 000021BA 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6763 000021BE BB0002                  		mov	bx, 200h	; bootbias
  6764 000021C1 B80102                  		mov	ax, 201h
  6765 000021C4 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6766                                  					; AL = number of sectors to read, CH = track, CL = sector
  6767                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6768                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6769 000021C6 7293                    		jc	short fmpnextfound
  6770 000021C8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6771 000021CB 06                      		push	es
  6772 000021CC E80900                  		call	setmini		; install a mini disk.
  6773                                  					; bx value saved.
  6774 000021CF 07                      		pop	es
  6775 000021D0 7203                    		jc	short fmpnextchain
  6776 000021D2 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6777                                  fmpnextchain:				
  6778 000021D5 E974FF                  		jmp	fmpnext		; let's find out
  6779                                  					; if we	have any chained partition
  6780                                  ; ---------------------------------------------------------------------------
  6781                                  
  6782                                  		; 18/12/2022
  6783                                  ;fmpnextfound:
  6784                                  		;retn
  6785                                  
  6786                                  ; =============== S U B	R O U T	I N E =======================================
  6787                                  
  6788                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6789                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6790                                  
  6791                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6792                                  	
  6793 000021D8 57                      		push	di
  6794 000021D9 53                      		push	bx
  6795 000021DA 1E                      		push	ds
  6796 000021DB 06                      		push	es
  6797                                  setmini_1:				
  6798 000021DC 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6799 000021E0 741B                    		jz	short setmini_2
  6800 000021E2 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6801 000021E6 7415                    		jz	short setmini_2
  6802 000021E8 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6803 000021EC 740F                    		jz	short setmini_2
  6804 000021EE 83C310                  		add	bx, 16
  6805 000021F1 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6806 000021F5 75E5                    		jnz	short setmini_1
  6807 000021F7 F9                      		stc
  6808 000021F8 07                      		pop	es
  6809 000021F9 1F                      		pop	ds
  6810 000021FA 5B                      		pop	bx
  6811 000021FB 5F                      		pop	di
  6812 000021FC C3                      		retn
  6813                                  
  6814                                  ; ---------------------------------------------------------------------------
  6815                                  setmini_2:				
  6816 000021FD E922FB                  		jmp	set2		; branch into middle of sethard
  6817                                  
  6818                                  ; =============== S U B	R O U T	I N E =======================================
  6819                                  
  6820                                  ; 15/10/2022
  6821                                  ; 28/12/2018 - Retro DOS v4.0
  6822                                  ;
  6823                                  ; dmax_check --- call this when we want to install a new drive.
  6824                                  ;		it checks for drvmax < 26 to see if there is
  6825                                  ;		a drive letter left.
  6826                                  ;
  6827                                  ;	drvmax < 26 : carry SET!
  6828                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6829                                  ;			trash ax
  6830                                  
  6831                                  dmax_check:	
  6832 00002200 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6833 00002205 720D                    		jb	short dmax_ok	; return with carry if okay
  6834 00002207 06                      		push	es
  6835                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6836 00002208 B83E04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6837 0000220B 8EC0                    		mov	es, ax
  6838                                  		; 18/10/2022
  6839 0000220D 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6840                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6841                                  					; set message flag
  6842                                  					; [SYSINIT+toomanydrivesflag]
  6843 00002213 07                      		pop	es
  6844                                  
  6845                                  		;;push	es
  6846                                  		;;mov	ax,SYSINIT_SEG
  6847                                  		;;mov	es,ax
  6848                                  		;;mov	byte [es:toomanydrivesflag],1
  6849                                  					; set message flag
  6850                                  		;;pop	es
  6851                                  		;
  6852                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6853                                  dmax_ok:				
  6854 00002214 C3                      		retn
  6855                                  
  6856                                  ; =============== S U B	R O U T	I N E =======================================
  6857                                  
  6858                                  ; 18/10/2022
  6859                                  ; 15/10/2022
  6860                                  ; 28/12/2018 - Retro DOS v4.0						
  6861                                  ;								 
  6862                                  ;	link next bds (at ds:di) into the chain. assume that the
  6863                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6864                                  ;	  dskdrv_table, and end_of_bdss.	
  6865                                  
  6866                                  xinstall_bds:		
  6867 00002215 56                      		push	si
  6868 00002216 53                      		push	bx
  6869 00002217 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6870                                  xinstall_bds_1:				
  6871 0000221B 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6872 0000221E 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6873                                  		;mov	si, [si+BDS.link]
  6874 00002220 8B34                    		mov	si, [si]	; chain	through	list
  6875 00002222 EBF7                    		jmp	short xinstall_bds_1
  6876                                  ; ---------------------------------------------------------------------------
  6877                                  
  6878                                  xinstall_bds_2:				
  6879                                  		;mov	[si+BDS.link], di
  6880 00002224 893C                    		mov	[si], di
  6881                                  		;mov	[si+BDS.link+2], ds
  6882 00002226 8C5C02                  		mov	[si+2], ds
  6883                                  		;mov	word [di+BDS.link], -1
  6884 00002229 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6885                                  		;mov	[di+BDS.link+2], ds
  6886 0000222D 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6887                                  		; 20/03/2019 - Retro DOS v4.0
  6888                                  		;lea	bx, [di+BDS.BPB]
  6889 00002230 8D5D06                  		lea	bx, [di+6]
  6890 00002233 8B36[4417]              		mov	si, [last_dskdrv_table]
  6891 00002237 891C                    		mov	[si], bx
  6892 00002239 8306[4417]02            		add	word [last_dskdrv_table], 2
  6893 0000223E FE06[7500]              		inc	byte [drvmax]
  6894 00002242 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6895 00002247 5B                      		pop	bx
  6896 00002248 5E                      		pop	si
  6897 00002249 C3                      		retn
  6898                                  
  6899                                  ; =============== S U B	R O U T	I N E =======================================
  6900                                  
  6901                                  ; 17/10/2022
  6902                                  ; 15/10/2022
  6903                                  ; 28/12/2018 - Retro DOS v4.0
  6904                                  ; 03/06/2018 - Retro DOS v3.0
  6905                                  
  6906                                  		; 19/12/2023
  6907                                  cmos_clock_read:	
  6908 0000224A 50                      		push	ax
  6909 0000224B 51                      		push	cx
  6910 0000224C 52                      		push	dx
  6911 0000224D 55                      		push	bp
  6912 0000224E 31ED                    		xor	bp, bp
  6913                                  loop_clock:
  6914 00002250 31C9                    		xor	cx, cx
  6915 00002252 31D2                    		xor	dx, dx
  6916 00002254 B402                    		mov	ah, 2
  6917 00002256 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6918                                  					; Return: CH = hours in	BCD
  6919                                  					; CL = minutes in BCD
  6920                                  					; DH = seconds in BCD
  6921 00002258 83F900                  		cmp	cx, 0
  6922 0000225B 7512                    		jnz	short clock_present
  6923 0000225D 83FA00                  		cmp	dx, 0
  6924 00002260 750D                    		jnz	short clock_present
  6925 00002262 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6926 00002265 741B                    		jz	short no_readdate ; was	at zero	setting.
  6927 00002267 45                      		inc	bp		; only perform delay once.
  6928 00002268 B90040                  		mov	cx, 4000h	; 16384
  6929                                  delay:
  6930 0000226B E2FE                    		loop	delay
  6931 0000226D EBE1                    		jmp	short loop_clock
  6932                                  ; ---------------------------------------------------------------------------
  6933                                  
  6934                                  clock_present:
  6935                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6936                                  		; 19/12/2023
  6937                                  		; ds = cs
  6938 0000226F C606[F304]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  6939                                  		
  6940 00002274 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6941                                  					; possibly destroyed by	cp dos and
  6942                                  					; post routine did not restore that.
  6943 00002277 56                      		push	si
  6944 00002278 E8AEF2                  		call	read_real_date	; read real-time clock for date
  6945 0000227B FA                      		cli
  6946                                  		;mov	ds:daycnt, si	; set system date
  6947 0000227C 8936[F004]              		mov	[daycnt], si
  6948 00002280 FB                      		sti
  6949 00002281 5E                      		pop	si
  6950                                  
  6951                                  no_readdate:
  6952 00002282 5D                      		pop	bp
  6953 00002283 5A                      		pop	dx
  6954 00002284 59                      		pop	cx
  6955 00002285 58                      		pop	ax
  6956                                  cmosck9:	; 19/12/2023
  6957 00002286 C3                      		retn
  6958                                  
  6959                                  ; ---------------------------------------------------------------------------
  6960                                  
  6961                                  ; the following code is written by jack gulley in engineering group.
  6962                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6963                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6964                                  ; the cmos clock rate are still slow which slow down disk operations
  6965                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6966                                  ; to fix this problem at the request of cp dos.
  6967                                  ;
  6968                                  ; the program is modified to be run on msinit. equates are defined
  6969                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6970                                  ;
  6971                                  ;  the following code cmosck is used to insure that the cmos has not
  6972                                  ;	had its rate controls left in an invalid state on older at's.
  6973                                  ;
  6974                                  ;	it checks for an at model byte "fc" with a submodel type of
  6975                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6976                                  ;	bits in case post has not done it. this initialization routine
  6977                                  ;	is only needed once when dos loads. it should be run as soon
  6978                                  ;	as possible to prevent slow diskette access.
  6979                                  ;
  6980                                  ;	this code exposes one to dos clearing cmos setup done by a
  6981                                  ;	resident program that hides and re-boots the system.
  6982                                  
  6983                                  cmosck:					; check and reset rtc rate bits	
  6984                                  
  6985                                  ;model byte and submodel byte were already determined in msinit.
  6986                                  
  6987                                  	; 16/06/2018 - Retro DOS v3.0
  6988                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6989                                  			
  6990                                  		; 19/12/2023
  6991                                  		; ds = cs
  6992                                  		;push	ax ; not necessary ; 19/12/2023
  6993                                  		;
  6994 00002287 803E[3E06]FC            		cmp	byte [model_byte], 0FCh
  6995                                  		;cmp	byte [cs:model_byte], 0FCh
  6996 0000228C 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  6997 0000228E 803E[3F06]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  6998                                  		;cmp	byte [cs:secondary_model_byte], 6
  6999                                  					; Is it 06 for the industral AT ?
  7000 00002293 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7001 00002295 803E[3F06]04            		cmp	byte [secondary_model_byte], 4
  7002                                  		;cmp	byte [cs:secondary_model_byte], 4
  7003                                  					; Is it 00, 01, 02, or 03 ?
  7004 0000229A 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7005                                  					; Also,Secondary_model_byte = 0
  7006                                  					;   when AH=0C0h, int 15h failed.
  7007                                  					;	RESET THE CMOS PERIODIC RATE
  7008                                  					;  Model=FC submodel=00,01,02,03 or 06
  7009                                  cmosck4:				
  7010 0000229C B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7011                                  					; NMI disabled on return
  7012 0000229E B426                    		mov	ah, 26h		; 00100110b
  7013                                  					; Set divider &	rate selection
  7014 000022A0 E80B00                  		call	cmos_write
  7015 000022A3 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7016                                  					; NMI disabled on return
  7017 000022A5 E82000                  		call	cmos_read
  7018 000022A8 2407                    		and	al, 7		; 00000111b
  7019                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7020 000022AA 88C4                    		mov	ah, al
  7021 000022AC B00B                    		mov	al, 0Bh		; cmos_reg_b
  7022                                  					; NMI enabled on return
  7023                                  		; 19/12/2023
  7024                                  		;call	cmos_write
  7025                                  ;cmosck9:
  7026                                  		;pop	ax ; 19/12/2023
  7027                                  		;retn
  7028                                  
  7029                                  		; 19/12/2023
  7030                                  		;jmp	short cmos_write
  7031                                  
  7032                                  ; =============== S U B	R O U T	I N E =======================================
  7033                                  
  7034                                  ;--- cmos_write ----------------------------------------------------------------
  7035                                  ;		write byte to cmos system clock configuration table	       :
  7036                                  ;									       :
  7037                                  ; input: (al)=	cmos table address to be written to			       :
  7038                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7039                                  ;		bits 6-0 = address of table location to write		       :
  7040                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7041                                  ;									       :
  7042                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7043                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7044                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7045                                  ;		the cmos address register is pointed to a default value and    :
  7046                                  ;		the interrupt flag restored to the entry state on return.      :
  7047                                  ;		only the cmos location and the nmi state is changed.	       :
  7048                                  ;-------------------------------------------------------------------------------
  7049                                  
  7050                                  cmos_write:				; write (ah) to location (al)	
  7051 000022AE 9C                      		pushf			; write (ah) to location (al)
  7052 000022AF 50                      		push	ax		; save work register values
  7053 000022B0 FA                      		cli
  7054 000022B1 50                      		push	ax		; save user nmi	state
  7055 000022B2 0C80                    		or	al, 80h		; disable nmi for us
  7056 000022B4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7057                                  					; RTC Seconds
  7058 000022B6 90                      		nop
  7059 000022B7 88E0                    		mov	al, ah
  7060 000022B9 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7061 000022BB 58                      		pop	ax		; get user nmi
  7062 000022BC 2480                    		and	al, 80h
  7063 000022BE 0C0F                    		or	al, 0Fh
  7064 000022C0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7065                                  					; RTC Seconds
  7066 000022C2 90                      		nop
  7067 000022C3 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7068 000022C5 58                      		pop	ax		; restore work registers
  7069                                  
  7070                                  		; 19/12/2023
  7071                                  		;push	cs		; *place code segment in stack and
  7072                                  		;call	cmos_popf	; *handle popf for b- level 80286
  7073                                  		;retn
  7074 000022C6 EB1A                    		jmp	short cmos_rw_popf
  7075                                  
  7076                                  ; =============== S U B	R O U T	I N E =======================================
  7077                                  
  7078                                  ;--- CMOS_READ -----------------------------------------------------------------
  7079                                  ;		read byte from cmos system clock configuration table	       :
  7080                                  ;									       :
  7081                                  ; input: (al)=	cmos table address to be read				       :
  7082                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7083                                  ;		bits 6-0 = address of table location to read		       :
  7084                                  ;									       :
  7085                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7086                                  ;		on then nmi left disabled. during the cmos read both nmi and   :
  7087                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7088                                  ;		the cmos address register is pointed to a default value and    :
  7089                                  ;		the interrupt flag restored to the entry state on return.      :
  7090                                  ;		only the (al) register and the nmi state is changed.	       :
  7091                                  ;-------------------------------------------------------------------------------
  7092                                  
  7093                                  cmos_read:				; read location (al) into (al)	
  7094 000022C8 9C                      		pushf
  7095 000022C9 FA                      		cli
  7096 000022CA 53                      		push	bx
  7097 000022CB 50                      		push	ax		; AL = cmos table address to be	read
  7098 000022CC 0C80                    		or	al, 80h
  7099 000022CE E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7100                                  					; RTC Seconds
  7101 000022D0 90                      		nop			; (undocumented	delay needed)
  7102 000022D1 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7103 000022D3 89C3                    		mov	bx, ax
  7104 000022D5 58                      		pop	ax
  7105 000022D6 2480                    		and	al, 80h
  7106 000022D8 0C0F                    		or	al, 0Fh
  7107 000022DA E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7108                                  					; RTC Seconds
  7109 000022DC 90                      		nop
  7110 000022DD E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7111 000022DF 89D8                    		mov	ax, bx
  7112 000022E1 5B                      		pop	bx
  7113                                  		
  7114                                  		; 19/12/2023
  7115                                  cmos_rw_popf:
  7116 000022E2 0E                      		push	cs		; *place code segment in stack and
  7117 000022E3 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7118 000022E6 C3                      		retn			; return with flags restored
  7119                                  
  7120                                  ; ---------------------------------------------------------------------------
  7121                                  
  7122                                  cmos_popf:				
  7123 000022E7 CF                      		iret			; popf for level b- parts
  7124                                  					; return far and restore flags
  7125                                  
  7126                                  ; 21/12/2022
  7127                                  ; ---------------------------------------------------------------------------
  7128                                  ; ---------------------------------------------------------------------------
  7129                                  %if 0
  7130                                  
  7131                                  ; ---------------------------------------------------------------------------
  7132                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7133                                  ; ---------------------------------------------------------------------------
  7134                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7135                                  ; ---------------------------------------------------------------------------
  7136                                  
  7137                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7138                                  ;
  7139                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7140                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7141                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7142                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7143                                  
  7144                                  ; =============== S U B	R O U T	I N E =======================================
  7145                                  
  7146                                  ; GetClus, read in a cluster at a specified address
  7147                                  ;
  7148                                  ;  bx = cluster to read
  7149                                  ;  cx = sectors per cluster
  7150                                  ;  es:di = load location
  7151                                  
  7152                                  ; 17/10/2022
  7153                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7154                                  ; 09/12/2022
  7155                                  DISKRD equ diskrd
  7156                                  
  7157                                  		; 17/10/2022
  7158                                  getclus:
  7159                                  		; 13/12/2023
  7160                                  		; ds = cs
  7161                                  
  7162                                  		push	cx
  7163                                  		push	di
  7164                                  		;mov	[cs:doscnt], cx
  7165                                  		mov	[doscnt], cx ; 13/12/2023
  7166                                  		mov	ax, bx
  7167                                  		dec	ax
  7168                                  		dec	ax
  7169                                  		mul	cx		; convert to logical sector
  7170                                  					; dx:ax	= matching logical sector number
  7171                                  					;	  starting from the data sector
  7172                                  		;add	ax, [cs:bios_l]
  7173                                  		;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7174                                  		; 13/12/2023
  7175                                  		add	ax, [bios_l]
  7176                                  		adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
  7177                                  unpack:
  7178                                  		push	ds ; ds = cs ; 13/12/2023
  7179                                  		push	dx ; * ; 13/12/2023
  7180                                  		push	ax
  7181                                  		push	bx
  7182                                  		;mov	si, [cs:fatloc]
  7183                                  		mov	si, [fatloc] ; 13/12/2023
  7184                                  		mov	ds, si
  7185                                  		mov	si, bx		; next cluster
  7186                                  		test	byte [cs:fbigfat], 40h	; fbig
  7187                                  					; 16 bit fat?
  7188                                  		jnz	short unpack16	; yes
  7189                                  		shr	si, 1		; 12 bit fat. si=si/2
  7190                                  					; si = clus + clus/2
  7191                                  		add	si, bx		;
  7192                                  					; (si =	byte offset of the cluster in the FAT)
  7193                                  		;push	dx ; 13/12/2023
  7194                                  		xor	dx, dx
  7195                                  		; 12/12/2023
  7196                                  		; ds = FAT buffer segment
  7197                                  		call	get_fat_sector
  7198                                  		;pop	dx ; 12/12/2023
  7199                                  
  7200                                  		mov	ax, [bx]	; save it into ax
  7201                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7202                                  		; 25/06/2023
  7203                                  		;mov	al, [bx]	; splitted fat
  7204                                  
  7205                                  		; 13/12/2023
  7206                                  		;mov	[cs:temp_cluster], al
  7207                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
  7208                                  
  7209                                  		inc	si		; (next	byte)
  7210                                  
  7211                                  		;push	dx ; 13/12/2023
  7212                                  		xor	dx, dx
  7213                                  		call	get_fat_sector
  7214                                  		;pop	dx ; 13/12/2023
  7215                                  
  7216                                  		;mov	al, ds:0
  7217                                  		; 13/12/2023
  7218                                  		; ds = FAT buffer segment
  7219                                  		;mov	al, [0] ; 19/10/2022
  7220                                  		;mov	[cs:temp_cluster+1], al
  7221                                  		;mov	ax, [cs:temp_cluster]
  7222                                  		; 13/12/2023
  7223                                  		;mov	al, [cs:temp_cluster]
  7224                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
  7225                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
  7226                                  even_odd:
  7227                                  		pop	bx		; restore old fat entry	value
  7228                                  		push	bx		; save it right	away.
  7229                                  		shr	bx, 1		; was it even or odd?
  7230                                  		jnb	short havclus	; it was even.
  7231                                  		shr	ax, 1		; odd. massage fat value and keep
  7232                                  					; the highest 12 bits.
  7233                                  		shr	ax, 1
  7234                                  		shr	ax, 1
  7235                                  		shr	ax, 1
  7236                                  havclus:
  7237                                  		mov	bx, ax		; now bx = new fat entry.
  7238                                  		and	bx, 0FFFh	; keep low 12 bits.
  7239                                  		jmp	short unpackx
  7240                                  ; ---------------------------------------------------------------------------
  7241                                  
  7242                                  unpack16:
  7243                                  		;push	dx	; 13/12/2023	
  7244                                  		xor	dx, dx ; 0
  7245                                  		shl	si, 1		; extend to 32 bit offset
  7246                                  		;adc	dx, 0
  7247                                  		; 13/12/2023
  7248                                  		rcl	dx, 1
  7249                                  
  7250                                  		; 13/12/2023
  7251                                  		; ds = FAT buffer segment
  7252                                  		call	get_fat_sector
  7253                                  		;pop	dx	; 13/12/2023
  7254                                  		mov	bx, [bx]	;
  7255                                  					; bx = new fat entry.
  7256                                  unpackx:
  7257                                  		pop	si		; restore old bx value into si
  7258                                  		pop	ax		; restore logical sector (low)
  7259                                  		pop	dx ; * ; 13/12/2023
  7260                                  		pop	ds
  7261                                  		; 13/12/2023
  7262                                  		; (this is a fast kernel loading method by the MSDOS programmer)
  7263                                  		; ((consequtive clusters --> consequtive sectors))
  7264                                  		; ds = cs
  7265                                  		sub	si, bx
  7266                                  		cmp	si, -1		; one apart? (consequtive?)
  7267                                  					; (current = previous+1)
  7268                                  		jnz	short getcl2	; no, read [doscnt] sectors 
  7269                                  		;add	[cs:doscnt], cx
  7270                                  		add	[doscnt], cx ; 13/12/2023 ; add to read count
  7271                                  		jmp	short unpack
  7272                                  ; ---------------------------------------------------------------------------
  7273                                  
  7274                                  getcl2:
  7275                                  		push	bx
  7276                                  		push	dx		; sector to read (high)
  7277                                  		push	ax		; sector to read (low)
  7278                                  
  7279                                  		; 13/12/2023
  7280                                  		; ds = cs
  7281                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
  7282                                  		;mov	cx, [cs:doscnt]
  7283                                  		mov	ax, [drvfat]	; get drive and	fat spec
  7284                                  		mov	cx, [doscnt]
  7285                                  
  7286                                  		pop	dx		; sector to read for diskrd (low)
  7287                                  		;pop	word [cs:start_sec_h]
  7288                                  		; 13/12/2023
  7289                                  		pop	word [start_sec_h]
  7290                                  					; sector to read for diskrd (high)
  7291                                  		; 13/12/2023
  7292                                  		; ds = cs
  7293                                  		;push	ds
  7294                                  		;push	cs
  7295                                  		;pop	ds
  7296                                  
  7297                                  		push	cs		; simulate far call
  7298                                  		; 17/10/2022
  7299                                  		mov	bp, DISKRD	; 8E5h
  7300                                  		;mov	bp, 8E5h	; offset diskrd
  7301                                  					; 2C7h:8E5h = 70h:2E55h
  7302                                  		call	call_bios_code	; read the clusters
  7303                                  		
  7304                                  		;pop	ds
  7305                                  		; 13/12/2023
  7306                                  		; ds = cs
  7307                                  		pop	bx
  7308                                  		pop	di
  7309                                  
  7310                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
  7311                                  		; 13/12/2023
  7312                                  		mov	ax, [doscnt]
  7313                                  		xchg	ah, al		; multiply by 256
  7314                                  		shl	ax, 1		; times	2 equal	512
  7315                                  		add	di, ax		; update load location
  7316                                  		pop	cx		; restore sectors/cluster
  7317                                  		retn
  7318                                  
  7319                                  ; =============== S U B	R O U T	I N E =======================================
  7320                                  
  7321                                  
  7322                                  ;function: find and read the corresponding fat sector into ds:0
  7323                                  ;
  7324                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7325                                  ;     ds - fatloc segment
  7326                                  ;     cs:drvfat - logical drive number, fat id
  7327                                  ;     cs:md_sectorsize
  7328                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7329                                  ;
  7330                                  ;out). corresponding fat sector read in.
  7331                                  ;      bx = offset value from fatlog segment.
  7332                                  ;      other registera saved.
  7333                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7334                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7335                                  ;      should save this byte, and read the next fat sector to get the rest
  7336                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7337                                  
  7338                                  		; 17/10/2022
  7339                                  get_fat_sector:
  7340                                  		; 13/12/2023
  7341                                  		; ds = fat buffer segment
  7342                                  
  7343                                  		; 13/12/2023
  7344                                  		;push	ax ; (not necessary)
  7345                                  		push	cx ; read count (sectors per cluster)
  7346                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
  7347                                  		push	si ; FAT offset value (from fat entry 0)
  7348                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
  7349                                  		push	ds ; FAT buffer segment
  7350                                  
  7351                                  		; 13/12/2023
  7352                                  		push	cs
  7353                                  		pop	ds
  7354                                  
  7355                                  		mov	ax, si
  7356                                  		;;mov	cx, [cs:md_sectorsize] ; 512
  7357                                  		; 13/12/2023
  7358                                  		;mov	cx, [md_sectorsize] ; 512
  7359                                  		;div	cx		; ax = sector number, dx = offset
  7360                                  		; 13/12/2023
  7361                                  		;nop
  7362                                  
  7363                                  		; 13/12/2023
  7364                                  		div	word [md_sectorsize] ; 512
  7365                                  
  7366                                  		; ax = FAT sector (sequence/index) number
  7367                                  		; dx = cluster number offset
  7368                                  
  7369                                  		; Get rid of the assumption that
  7370                                  		; there	is only	one reserved sector
  7371                                  
  7372                                  		; 13/12/2023 ; *
  7373                                  		;push	es ; *
  7374                                  		;push	ds ; *
  7375                                  		;push	di ; *
  7376                                  		push	ax
  7377                                  		;push	cs ; *
  7378                                  		;pop	ds ; *
  7379                                  
  7380                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
  7381                                  		; 13/12/2023
  7382                                  		mov	ax, [drvfat]	; get drive # and FAT id 
  7383                                  		mov	bp, SETDRIVE
  7384                                  		;;mov	bp, 4D7h	; setdrive
  7385                                  					; at 2C7h:4D7h = 70h:2A47h
  7386                                  		push	cs		; simulate far call
  7387                                  		call	call_bios_code	; get bds for drive
  7388                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7389                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7390                                  					; add #reserved_sectors
  7391                                  		; 13/12/2023
  7392                                  		;pop	di ; *
  7393                                  		;pop	ds ; *
  7394                                  		;pop	es ; *
  7395                                  
  7396                                  		; 13/12/2023
  7397                                  		; ds = cs
  7398                                  		cmp	ax, [last_fat_sec_num]
  7399                                  		;cmp	ax, [cs:last_fat_sec_num]
  7400                                  		jz	short gfs_split_chk ; don't need to read it again.
  7401                                  		mov	[last_fat_sec_num], ax
  7402                                  		;mov	[cs:last_fat_sec_num], ax
  7403                                  					; sector number
  7404                                  					; (in the partition, without hidden sectors)
  7405                                  		; 13/12/2023
  7406                                  		pop	es ; FAT buffer segment (DS on top of the stack)
  7407                                  		push	es ; (put it on top of the stack again)
  7408                                  
  7409                                  		push	dx ; cluster number offset
  7410                                  
  7411                                  		; 13/12/2023
  7412                                  		xor	cx, cx
  7413                                  		mov	[start_sec_h], cx ;0 
  7414                                  		;mov	word [cs:start_sec_h], 0 
  7415                                  					; prepare to read the fat sector
  7416                                  					; start_sec_h is always	0 for fat sector.
  7417                                  		mov	dx, ax
  7418                                  		; 13/12/2023
  7419                                  		inc	cx ; cx = 1
  7420                                  		;mov	cx, 1		; 1 sector read
  7421                                  		;mov	ax, [cs:drvfat]
  7422                                  		mov	ax, [drvfat]
  7423                                  		;push	ds
  7424                                  		;pop	es
  7425                                  
  7426                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
  7427                                  		
  7428                                  		; 13/12/2023
  7429                                  		;push	ds
  7430                                  		;push	cs
  7431                                  		;pop	ds
  7432                                  		
  7433                                  		push	cs		; simulate far call
  7434                                  		mov	bp, DISKRD	; 8E5h
  7435                                  		;mov	bp, 8E5h	; offset diskrd
  7436                                  					; 2C7h:8E5h = 70h:2E55h
  7437                                  		call	call_bios_code
  7438                                  
  7439                                  		; 13/12/2023
  7440                                  		;pop	ds
  7441                                  		; ds = cs = biosdata segment
  7442                                  
  7443                                  		pop	dx ; cluster number offset 
  7444                                  
  7445                                  gfs_split_chk:
  7446                                  		; 13/12/2023
  7447                                  		;mov	cx, [cs:md_sectorsize] ; 512
  7448                                  		mov	cx, [md_sectorsize]
  7449                                  ;gfs_split_chk:
  7450                                  		dec	cx		; 511
  7451                                  		cmp	dx, cx		; if offset points to the
  7452                                  					; last byte of this sector,
  7453                                  					; then splitted	entry.
  7454                                  		mov	bx, dx		; set bx to dx
  7455                                  		
  7456                                  		; 13/12/2023
  7457                                  		; bx = dx = cluster number offset in the FAT buffer
  7458                                  		pop	ds ; FAT buffer segment
  7459                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
  7460                                  		pop	si ; FAT offset value (from fat entry 0)
  7461                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
  7462                                  		pop	cx ; read count (sectors per cluster)
  7463                                  		;pop	ax
  7464                                  
  7465                                  		retn
  7466                                  ; 15/10/2022
  7467                                  ;Bios_Data_Init	ends
  7468                                  
  7469                                  %endif
  7470                                  ; ---------------------------------------------------------------------------
  7471                                  ; ---------------------------------------------------------------------------
  7472                                  
  7473                                  		; 09/12/2022
  7474                                  		;db 0
  7475                                  
  7476                                  numbertodiv	equ ($-BData_start)
  7477                                  numbertomod	equ (numbertodiv % 16)
  7478                                  
  7479                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7480 000022E8 00<rep 8h>              		times (16-numbertomod) db 0
  7481                                  %endif
  7482                                  
  7483                                  ;align 16
  7484                                  
  7485                                  ; 09/12/2022
  7486                                  IOSYSCODESEGOFF equ $ - BData_start
  7487                                  ; 29/09/2023
  7488                                  ;IOSYSCODESEGOFF equ $-$$
  7489                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7490                                  
  7491                                  ; 28/09/2023
  7492                                  S1SIZE equ $-$$
  7493                                  
  7494                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7495                                  ; ---------------------------------------------------------------------------
  7496                                  		;db 4 dup(0)
  7497                                  ; 09/12/2022		
  7498                                  ;		times 4 db 0	; 19/10/2022
  7499                                  ; ---------------------------------------------------------------------------
  7500                                  
  7501                                  ;============================================================================
  7502                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7503                                  ;============================================================================
  7504                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7505                                  
  7506                                  section .BIOSCODE vstart=0  
  7507                                  
  7508                                  BCode_start:	 ; 09/12/2022
  7509                                   
  7510                                  ; 02/10/2022
  7511                                  
  7512                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7513                                  ;----------------------------------------------------------------------------
  7514                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7515                                  ;----------------------------------------------------------------------------
  7516                                  
  7517                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7518 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7519 00000030 7000                    BiosDataWord:	dw 70h
  7520                                  
  7521                                  ; 15/10/2022
  7522                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7523                                  ; 09/12/2022
  7524                                  BIOSDATAWORD	equ BiosDataWord
  7525                                  
  7526                                  ; ---------------------------------------------------------------------------
  7527                                  
  7528                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7529                                  
  7530                                  ;************************************************************************
  7531                                  ;*									*
  7532                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7533                                  ;*	  trashes di, cx, es						*
  7534                                  ;*									*
  7535                                  ;*	cas -- should be made disposable!				*
  7536                                  ;*									*
  7537                                  ;************************************************************************
  7538                                  
  7539                                  _seg_reinit:
  7540 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7541                                  					; at 2C7h:30h or 70h:25A0h
  7542                                  		;mov	di, (offset cdev+2)
  7543 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7544 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7545                                  
  7546                                  _seg_reinit_1:				
  7547 0000003D AB                      		stosw			; modify Bios_Code entry points
  7548 0000003E 47                      		inc	di
  7549 0000003F 47                      		inc	di
  7550 00000040 E2FB                    		loop	_seg_reinit_1
  7551 00000042 CB                      		retf
  7552                                  
  7553                                  ; ---------------------------------------------------------------------------
  7554                                  
  7555                                  ; 15/10/2022
  7556                                  
  7557                                  ;************************************************************************
  7558                                  ;*									*
  7559                                  ;*	chardev_entry - main device driver dispatch routine		*
  7560                                  ;*	   called with a dummy parameter block on the stack		*
  7561                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7562                                  ;*									*
  7563                                  ;*	will eventually take care of doing the transitions in		*
  7564                                  ;*	   out of Bios_Code						*
  7565                                  ;*									*
  7566                                  ;************************************************************************
  7567                                  
  7568                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7569 00000043 56                      		push	si
  7570 00000044 50                      		push	ax
  7571 00000045 51                      		push	cx
  7572 00000046 52                      		push	dx
  7573 00000047 57                      		push	di
  7574 00000048 55                      		push	bp
  7575 00000049 1E                      		push	ds
  7576 0000004A 06                      		push	es
  7577 0000004B 53                      		push	bx
  7578 0000004C 89E5                    		mov	bp, sp
  7579 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7580                                  		;;mov	ds, word [cs:0030h]
  7581                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7582 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7583 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7584 00000059 A2[2100]                		mov	[auxnum], al
  7585 0000005C 8826[E704]              		mov	[printdev], ah
  7586 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7587 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7588 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7589 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7590 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7591 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7592                                  		; 17/10/2022
  7593 00000076 81FE[9604]              		cmp	si, DSKTBL
  7594                                  		;cmp	si, 4A2h	; dsktbl
  7595                                  					; at 2C7h:4A2h = 70h:2A12h
  7596 0000007A 7517                    		jnz	short no_sector32_mapping
  7597                                  
  7598                                  ; Special case for 32-bit start sector number:
  7599                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7600                                  ;      set high 16 bits of secnum to 0
  7601                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7602                                  ;
  7603                                  ; pass high word of sector number in start_sec_h, low word in dx
  7604                                  ;
  7605                                  ; note: start_l and start_h are the offsets within the io_request packet
  7606                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7607                                  ;	  it has been used.
  7608                                  ;
  7609                                  ; note: remember not to destroy the registers which have been set up before
  7610                                  
  7611                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7612 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7613 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7614 00000085 750C                    		jnz	short no_sector32_mapping
  7615 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7616                                  					; 32 bits dsk req
  7617                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7618 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7619 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7620                                  					; dx = packet.start_l
  7621                                  no_sector32_mapping:			
  7622 00000093 97                      		xchg	ax, di
  7623 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7624 00000098 2E3A04                  		cmp	al, cs:[si]
  7625 0000009B 732C                    		jnb	short command_error
  7626 0000009D 98                      		cbw			; note that al <= 15 means ok
  7627 0000009E D1E0                    		shl	ax, 1
  7628 000000A0 01C6                    		add	si, ax
  7629 000000A2 97                      		xchg	ax, di
  7630 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7631 000000A7 FC                      		cld
  7632                                  		; 17/10/2022
  7633 000000A8 2EFF5401                		call	near [cs:si+1]
  7634                                  		;call	word ptr cs:si+1
  7635 000000AC 7202                    		jb	short already_got_ah_status
  7636 000000AE B401                    		mov	ah, 1
  7637                                  already_got_ah_status:
  7638                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7639                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7640                                  					; cas note: shouldn't be needed!
  7641 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7642                                  		;lds	bx, ds:ptrsav
  7643 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7644 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7645                                  					; mark operation complete
  7646 000000BC 5B                      		pop	bx
  7647 000000BD 07                      		pop	es
  7648 000000BE 1F                      		pop	ds
  7649 000000BF 5D                      		pop	bp
  7650 000000C0 5F                      		pop	di
  7651 000000C1 5A                      		pop	dx
  7652 000000C2 59                      		pop	cx
  7653 000000C3 58                      		pop	ax
  7654 000000C4 5E                      		pop	si
  7655 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7656                                  	
  7657                                  		; fall through into bc_retf
  7658                                  ; ---------------------------------------------------------------------------	
  7659                                  bc_retf:
  7660 000000C8 CB                      		retf
  7661                                  ; ---------------------------------------------------------------------------
  7662                                  
  7663                                  command_error:				
  7664 000000C9 E80900                  		call	bc_cmderr
  7665 000000CC EBE2                    		jmp	short already_got_ah_status
  7666                                  ; 15/10/2022
  7667                                  ; 01/05/2019
  7668                                  
  7669                                  ;----------------------------------------------------------------------------
  7670                                  ; The following piece of hack is for supporting CP/M compatibility
  7671                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7672                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7673                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7674                                  ; high.
  7675                                  ;----------------------------------------------------------------------------
  7676                                  
  7677                                  		;db 7 dup(0)
  7678                                  
  7679                                  		; 15/10/2022
  7680                                  
  7681 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7682                                  
  7683 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7684                                  				;  which is the CP/M call 5 entry point
  7685                                  		
  7686                                  
  7687                                  ; ---------------------------------------------------------------------------
  7688                                  
  7689                                  ;	exit - all routines return through this path
  7690                                  
  7691                                  bc_cmderr:				
  7692 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7693                                  					; unknown command error
  7694                                  
  7695                                  ; =============== S U B	R O U T	I N E =======================================
  7696                                  
  7697                                  ;	now zero the count field by subtracting its current value,
  7698                                  ;	  which is still in cx, from itself.
  7699                                  
  7700                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7701                                  ;	  in order to return the number actually complete
  7702                                  
  7703                                  bc_err_cnt:	
  7704                                  		;les	bx, ds:ptrsav
  7705                                  		; 19/10/2022
  7706 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7707 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7708                                  					; # of successful i/o's
  7709 000000DF B481                    		mov	ah, 81h		; mark error return
  7710 000000E1 F9                      		stc			; indicate abnormal end
  7711 000000E2 C3                      		retn
  7712                                  
  7713                                  ; 15/10/2022
  7714                                  
  7715                                  ;Bios_Code ends
  7716                                  
  7717                                  ;----------------------------------------------------------------------------
  7718                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7719                                  ;----------------------------------------------------------------------------
  7720                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7721                                  ; 10/01/2019 - Retro DOS v4.0
  7722                                  
  7723                                  ; 30/04/2019
  7724                                  
  7725                                  ;title	mschar - character and clock devices
  7726                                  
  7727                                  ;MODE_CTRLBRK	equ	0FFh
  7728                                  
  7729                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7730                                  
  7731                                  ;************************************************************************
  7732                                  ;*									*
  7733                                  ;*	device driver dispatch tables					*
  7734                                  ;*									*
  7735                                  ;*	each table starts with a byte which lists the number of		*
  7736                                  ;*	legal functions, followed by that number of words. Each		*
  7737                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7738                                  ;*	handles the function. The functions are terminated with		*
  7739                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7740                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7741                                  ;*	returned as abnormal completion status. Notice that ds		*
  7742                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7743                                  ;*									*
  7744                                  ;************************************************************************
  7745                                  
  7746                                  		; 13/12/2022
  7747                                  		;db 0
  7748                                  
  7749                                  		; 13/12/202
  7750 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7751                                  					; 2C7h:0E4h = 70h:2654h
  7752 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7753                                  					; 00 init
  7754 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7755 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7756 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7757                                  					; 03
  7758 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7759                                  					; 04
  7760 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7761                                  					; 05
  7762 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7763 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7764                                  					; 07
  7765 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7766                                  					; 08
  7767 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7768 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7769                                  con_table_end:
  7770 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7771                                  					; 2C7h:0FBh = 70h:266Bh
  7772 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7773 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7774 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7775 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7776 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7777                                  					; 04 indicate zero chars read
  7778 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7779                                  					; 05 read non-destructive
  7780 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7781 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7782 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7783 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7784 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7785 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7786 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7787 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7788 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7789 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7790 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7791 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7792 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7793 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7794 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7795 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7796 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7797 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7798 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7799 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7800                                  prn_table_end:
  7801 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7802                                  					; 2C7h:130h = 70h:26A0h
  7803 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7804 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7805 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7806 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7807 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7808 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7809 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7810 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7811 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7812 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7813 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7814                                  aux_table_end:
  7815 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7816                                  					; 2C7h:147h = 70h:26B7h
  7817 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7818 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7819 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7820 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7821 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7822 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7823 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7824 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7825 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7826 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7827                                  tim_table_end:
  7828                                  
  7829                                  ; ---------------------------------------------------------------------------
  7830                                  
  7831                                  ;************************************************************************
  7832                                  ;*									*
  7833                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7834                                  ;*									*
  7835                                  ;************************************************************************
  7836                                  
  7837                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7838                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7839 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7840                                  con_loop:				
  7841 0000015D E80500                  		call	chrin		; get char in al
  7842 00000160 AA                      		stosb			; store	char at	es:di
  7843 00000161 E2FA                    		loop	con_loop
  7844                                  con_exit:				
  7845 00000163 F8                      		clc
  7846 00000164 C3                      		retn
  7847                                  
  7848                                  ; =============== S U B	R O U T	I N E =======================================
  7849                                  
  7850                                  ;************************************************************************
  7851                                  ;*									*
  7852                                  ;*	chrin - input single char from keyboard into al			*
  7853                                  ;*									*
  7854                                  ;*	  we are going to issue extended keyboard function, if		*
  7855                                  ;*	  supported. the returning value of the extended keystroke	*
  7856                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7857                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7858                                  ;*	  this creates a conflict when the user entered real		*
  7859                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7860                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7861                                  ;*	  in the following manner:					*
  7862                                  ;*									*
  7863                                  ;*	      ah = 16h							*
  7864                                  ;*	      int 16h							*
  7865                                  ;*	      if al == 0, then extended code (in ah)			*
  7866                                  ;*	      else if al == 0E0h, then					*
  7867                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7868                                  ;*		else greek_alpha character.				*
  7869                                  ;*									*
  7870                                  ;*	also, for compatibility reason, if an extended code is		*
  7871                                  ;*	  detected, then we are going to change the value in al		*
  7872                                  ;*	  from 0E0h to 00h.						*
  7873                                  ;*									*
  7874                                  ;************************************************************************
  7875                                  
  7876                                  		; 19/10/2022
  7877                                  chrin:		
  7878 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7879 00000169 30C0                    		xor	al, al
  7880 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7881 0000016F 08C0                    		or	al, al
  7882 00000171 752A                    		jnz	short keyret
  7883 00000173 CD16                    		int	16h		; KEYBOARD -
  7884 00000175 09C0                    		or	ax, ax
  7885 00000177 74EC                    		jz	short chrin
  7886 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7887 0000017C 7504                    		jnz	short alt_ext_chk
  7888 0000017E B010                    		mov	al, 10h
  7889 00000180 EB1B                    		jmp	short keyret
  7890                                  ; ---------------------------------------------------------------------------
  7891                                  
  7892                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7893                                  ;    if character read was 0E0h then
  7894                                  ;      if extended byte was zero (i.e. ah == 0) then
  7895                                  ;	 goto keyret
  7896                                  ;      else
  7897                                  ;	 set al to zero
  7898                                  ;	 goto alt_save
  7899                                  ;      endif
  7900                                  ;    endif
  7901                                  ;  endif
  7902                                  
  7903                                  alt_ext_chk:
  7904 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7905 00000187 740C                    		jz	short not_ext
  7906 00000189 3CE0                    		cmp	al, 0E0h
  7907 0000018B 7508                    		jnz	short not_ext
  7908 0000018D 08E4                    		or	ah, ah
  7909 0000018F 740C                    		jz	short keyret
  7910 00000191 30C0                    		xor	al, al
  7911 00000193 EB04                    		jmp	short alt_save
  7912                                  ; ---------------------------------------------------------------------------
  7913                                  
  7914                                  not_ext:				
  7915 00000195 08C0                    		or	al, al		; special case?
  7916 00000197 7504                    		jnz	short keyret
  7917                                  alt_save:				
  7918 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7919                                  keyret:					
  7920 0000019D C3                      		retn
  7921                                  
  7922                                  ; ---------------------------------------------------------------------------
  7923                                  
  7924                                  ;************************************************************************
  7925                                  ;*									*
  7926                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7927                                  ;*									*
  7928                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7929                                  ;*	in the status word of the request packet, and there is no	*
  7930                                  ;*	character in the input buffer, the driver issues a system	*
  7931                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7932                                  ;*	a 'char-not-found' to the dos.					*
  7933                                  ;*									*
  7934                                  ;************************************************************************
  7935                                  
  7936                                  		; 19/10/2022
  7937                                  con_rdnd:				
  7938 0000019E A0[0C00]                		mov	al, [altah]
  7939 000001A1 08C0                    		or	al, al
  7940 000001A3 754C                    		jnz	short rdexit
  7941 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7942 000001A9 CD16                    		int	16h		; KEYBOARD -
  7943 000001AB 751D                    		jnz	short gotchr
  7944 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7945 000001B2 7412                    		jz	short z_bus_exit
  7946 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7947                                  		; 12/12/2022
  7948 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7949                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7950 000001BD 7407                    		jz	short z_bus_exit
  7951 000001BF B80041                  		mov	ax, 4100h
  7952 000001C2 30DB                    		xor	bl, bl
  7953 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7954                                  					; AL = condition type, BH = condition compare or mask value
  7955                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7956                                  					; DX = I/O port	address	if AL bit 4 set
  7957                                  z_bus_exit:				
  7958 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7959 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7960 000001C9 C3                      		retn
  7961                                  ; ---------------------------------------------------------------------------
  7962                                  
  7963                                  gotchr:					
  7964 000001CA 09C0                    		or	ax, ax
  7965 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7966 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7967 000001D2 CD16                    		int	16h		; KEYBOARD -
  7968 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7969                                  ; ---------------------------------------------------------------------------
  7970                                  
  7971                                  notbrk:					
  7972 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7973 000001D9 7504                    		jnz	short rd_ext_chk
  7974 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7975 000001DD EB12                    		jmp	short rdexit
  7976                                  ; ---------------------------------------------------------------------------
  7977                                  
  7978                                  rd_ext_chk:				
  7979 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7980 000001E4 740B                    		jz	short rdexit
  7981 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7982 000001E8 7507                    		jnz	short rdexit
  7983 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7984 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7985 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7986                                  					; change it for	compatibility
  7987                                  rdexit:					
  7988 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7989 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7990                                  					; return keyboard character here
  7991                                  bc_exvec:				
  7992 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7993                                  					; indicate normal termination
  7994 000001FA C3                      		retn
  7995                                  ; ---------------------------------------------------------------------------
  7996                                  
  7997                                  ;************************************************************************
  7998                                  ;*									*
  7999                                  ;*	con_write - console write routine				*
  8000                                  ;*									*
  8001                                  ;*	entry:	es:di -> buffer						*
  8002                                  ;*		cx    =  count						*
  8003                                  ;*									*
  8004                                  ;************************************************************************
  8005                                  
  8006                                  con_writ:
  8007                                  		;jcxz	short bc_exvec
  8008 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8009                                  		; 12/12/2022
  8010                                  		;jcxz	cc_ret
  8011                                  con_lp:					
  8012 000001FD 268A05                  		mov	al, [es:di]
  8013 00000200 47                      		inc	di
  8014 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8015                                  					; AL = character to display
  8016 00000203 E2F8                    		loop	con_lp
  8017                                  cc_ret:					
  8018 00000205 F8                      		clc
  8019 00000206 C3                      		retn
  8020                                  
  8021                                  ; =============== S U B	R O U T	I N E =======================================
  8022                                  
  8023                                  ;************************************************************************
  8024                                  ;*									*
  8025                                  ;*	con_flush - flush out keyboard queue				*
  8026                                  ;*									*
  8027                                  ;************************************************************************
  8028                                  
  8029                                  con_flush:
  8030 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8031                                  flloop:					; while	(charavail()) charread();	
  8032 0000020C B401                    		mov	ah, 1
  8033 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8034                                  					; Return: ZF clear if character	in buffer
  8035                                  					; AH = scan code, AL = character
  8036                                  					; ZF set if no character in buffer
  8037 00000210 74F3                    		jz	short cc_ret
  8038 00000212 30E4                    		xor	ah, ah
  8039 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8040                                  					; Return: AH = scan code, AL = character
  8041 00000216 EBF4                    		jmp	short flloop
  8042                                  
  8043                                  ; ---------------------------------------------------------------------------
  8044                                  
  8045                                  ; 15/10/2022
  8046                                  
  8047                                  ;************************************************************************
  8048                                  ;*									*
  8049                                  ;*	some equates for rom bios printer i/o				*
  8050                                  ;*									*
  8051                                  ;************************************************************************
  8052                                  
  8053                                  ; ibm rom status bits (i don't trust them, neither should you)
  8054                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8055                                  ; whole slew of bits, only one of which is correct.
  8056                                  
  8057                                  ;notbusystatus	equ 10000000b		; not busy
  8058                                  ;nopaperstatus	equ 00100000b		; no more paper
  8059                                  ;prnselected	equ 00010000b		; printer selected
  8060                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8061                                  ;timeoutstatus	equ 00000001b		; time out.
  8062                                  ;
  8063                                  ;noprinter	equ 00110000b		; no printer attached
  8064                                  
  8065                                  ; 18/03/2019 - Retro DOS v4.0
  8066                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8067                                  
  8068                                  ; ---------------------------------------------------------------------------
  8069                                  
  8070                                  ;************************************************************************
  8071                                  ;*									*
  8072                                  ;*	prn_input - return with no error but zero chars read		*
  8073                                  ;*									*
  8074                                  ;*	enter with cx = number of characters requested			*
  8075                                  ;*									*
  8076                                  ;************************************************************************
  8077                                  
  8078                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8079 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8080                                  					; (sub reqpkt.count,cx)
  8081                                  		; 12/12/2022
  8082                                  prn_done:
  8083 0000021B F8                      		clc			; but return with carry	reset for no error
  8084 0000021C C3                      		retn
  8085                                  ; ---------------------------------------------------------------------------
  8086                                  
  8087                                  ;************************************************************************
  8088                                  ;*									*
  8089                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8090                                  ;*									*
  8091                                  ;*	auxnum has printer number					*
  8092                                  ;*									*
  8093                                  ;************************************************************************
  8094                                  
  8095                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8096                                  		;jcxz	short prn_done	; no chars to output
  8097 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8098                                  prn_loop:				
  8099 0000021F BB0200                  		mov	bx, 2		; retry	count
  8100                                  prn_out:				
  8101 00000222 E83600                  		call	prnstat		; get status
  8102 00000225 751D                    		jnz	short TestPrnError
  8103 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8104 0000022A 30E4                    		xor	ah, ah
  8105 0000022C E82E00                  		call	prnop		; print	to printer
  8106 0000022F 7419                    		jz	short prn_con	; no error - continue
  8107 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8108 00000234 7509                    		jnz	short _prnwf
  8109 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8110 00000238 C606[0C00]00            		mov	byte [altah], 0
  8111 0000023D EB08                    		jmp	short pmessg
  8112                                  ; ---------------------------------------------------------------------------
  8113                                  
  8114                                  _prnwf:					
  8115 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8116 00000242 7406                    		jz	short prn_con
  8117                                  TestPrnError:				
  8118 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8119 00000245 75DB                    		jnz	short prn_out
  8120                                  pmessg:					
  8121 00000247 E98DFE                  		jmp	bc_err_cnt
  8122                                  ; ---------------------------------------------------------------------------
  8123                                  
  8124                                  prn_con:				
  8125 0000024A 47                      		inc	di		; point	to next	char and continue
  8126 0000024B E2D2                    		loop	prn_loop
  8127                                  ;prn_done:				
  8128                                  		; 12/12/2022
  8129                                  prn_done2:
  8130                                  		;clc
  8131                                  		; cf=0
  8132 0000024D C3                      		retn
  8133                                  ; ---------------------------------------------------------------------------
  8134                                  
  8135                                  ;************************************************************************
  8136                                  ;*									*
  8137                                  ;*	prn_stat - device driver entry to return printer status		*
  8138                                  ;*									*
  8139                                  ;************************************************************************
  8140                                  
  8141                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8142 0000024E E80A00                  		call	prnstat		; device in dx
  8143 00000251 75F4                    		jnz	short pmessg
  8144 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8145                                  		;jnz	short prn_done
  8146                                  		; 12/12/2022
  8147 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8148 00000258 E96BFF                  		jmp	z_bus_exit
  8149                                  ; ---------------------------------------------------------------------------
  8150                                  
  8151                                  ;************************************************************************
  8152                                  ;*									*
  8153                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8154                                  ;*		 printer status. Return meaningful error code		*
  8155                                  ;*									*
  8156                                  ;************************************************************************
  8157                                  
  8158                                  prnstat:				
  8159 0000025B B402                    		mov	ah, 2		; set command for get status
  8160                                  					; PRINTER - GET	STATUS
  8161                                  					; DX = printer port (0-3)
  8162                                  					; Return: AH = status
  8163                                  
  8164                                  ; =============== S U B	R O U T	I N E =======================================
  8165                                  
  8166                                  ;************************************************************************
  8167                                  ;*									*
  8168                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8169                                  ;*		return zero true if no error				*
  8170                                  ;*		return zero false if error, al = error code		*
  8171                                  ;*									*
  8172                                  ;************************************************************************
  8173                                  
  8174                                  prnop:	
  8175 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8176 00000261 CD17                    		int	17h
  8177                                  
  8178                                  	; This check was added to see if this is a case of no
  8179                                  	; printer being installed. This tests checks to be sure
  8180                                  	; the error is noprinter (30h)
  8181                                  
  8182 00000263 50                      		push	ax
  8183 00000264 80E430                  		and	ah, 30h
  8184 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8185 0000026A 58                      		pop	ax
  8186 0000026B 7506                    		jnz	short NextTest
  8187 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8188 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8189                                  
  8190                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8191                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8192                                  ; careful about breaking basic.
  8193                                  
  8194                                  NextTest:				
  8195 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8196                                  					; i/o error?
  8197 00000276 740A                    		jz	short checknotready ; no, try not ready
  8198                                  
  8199                                  ; at this point, we know we have an error. the converse is not true
  8200                                  
  8201 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8202                                  					; first, assume	out of paper
  8203 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8204 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8205 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8206                                  ret1:					
  8207 00000281 C3                      		retn
  8208                                  ; ---------------------------------------------------------------------------
  8209                                  
  8210                                  checknotready:				
  8211 00000282 B002                    		mov	al, 2		; assume not-ready
  8212 00000284 F6C401                  		test	ah, 1
  8213 00000287 C3                      		retn
  8214                                  
  8215                                  ; ---------------------------------------------------------------------------
  8216                                  
  8217                                  ;************************************************************************
  8218                                  ;*									*
  8219                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8220                                  ;*		     this entry point should never block waiting for	*
  8221                                  ;*		     device to come ready.				*
  8222                                  ;*									*
  8223                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8224                                  ;*	outputs: set the number of bytes transferred in the		*
  8225                                  ;*		 device driver request packet				*
  8226                                  ;*									*
  8227                                  ;************************************************************************
  8228                                  
  8229                                  		; 19/10/2022
  8230                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8231 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8232                                  prn_tilbloop:				
  8233 0000028A 51                      		push	cx
  8234 0000028B 53                      		push	bx
  8235 0000028C 30FF                    		xor	bh, bh
  8236 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8237 00000292 D1E3                    		shl	bx, 1
  8238                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8239 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8240 00000298 5B                      		pop	bx
  8241                                  prn_getstat:				
  8242 00000299 E8BFFF                  		call	prnstat		; get status
  8243 0000029C 7514                    		jnz	short prn_bperr	; error
  8244 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8245 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8246 000002A3 59                      		pop	cx		; get original count
  8247 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8248 000002A6 26                      		es
  8249 000002A7 AC                      		lodsb
  8250                                  		;lods	byte ptr es:[si] ; es
  8251                                  					; lodsb
  8252 000002A8 30E4                    		xor	ah, ah
  8253 000002AA E8B0FF                  		call	prnop
  8254 000002AD 7504                    		jnz	short prn_berr	; error
  8255 000002AF E2D9                    		loop	prn_tilbloop
  8256                                  		; 12/12/2022
  8257                                  		; cf=0 (prnop)
  8258                                  		;clc			; normal no-error return
  8259 000002B1 C3                      		retn			;   from device driver
  8260                                  
  8261                                  ; ---------------------------------------------------------------------------
  8262                                  
  8263                                  prn_bperr:				
  8264 000002B2 59                      		pop	cx		; restore transfer count from stack
  8265                                  prn_berr:				
  8266 000002B3 E921FE                  		jmp	bc_err_cnt
  8267                                  ; ---------------------------------------------------------------------------
  8268                                  
  8269                                  ; 15/10/2022
  8270                                  
  8271                                  ;************************************************************************
  8272                                  ;*									*
  8273                                  ;*	prn_genioctl - get/set printer retry count			*
  8274                                  ;*									*
  8275                                  ;************************************************************************
  8276                                  
  8277                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8278                                  ; 11/01/2019
  8279                                  
  8280                                  ;********************************;*
  8281                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8282                                  ;********************************;*
  8283                                  
  8284                                  ;;RAWIO SUB-FUNCTIONS
  8285                                  ;;get_retry_count equ 65h
  8286                                  ;;set_retry_count equ 45h
  8287                                  
  8288                                  ;;struc A_RETRYCOUNT
  8289                                  ;;.rc_count: resw 1
  8290                                  ;;endstruc
  8291                                  
  8292                                  ;ioc_pc equ 5
  8293                                  
  8294                                  ; ---------------------------------------------------------------------------
  8295                                  
  8296                                  		; 19/10/2022
  8297                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8298 000002B6 C43E[1200]              		les	di, [ptrsav]
  8299 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8300                                  					; ioc_pc
  8301 000002BF 7403                    		jz	short prnfunc_ok
  8302                                  
  8303                                  prnfuncerr:				
  8304 000002C1 E911FE                  		jmp	bc_cmderr
  8305                                  ; ---------------------------------------------------------------------------
  8306                                  
  8307                                  prnfunc_ok:				
  8308 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8309 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8310 000002CC 30FF                    		xor	bh, bh
  8311                                  		;mov	bl, ds:printdev	; get index into retry counts
  8312 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8313 000002D2 D1E3                    		shl	bx, 1
  8314                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8315 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8316 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8317 000002DA 7407                    		jz	short prngetcount
  8318 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8319 000002DE 75E1                    		jnz	short prnfuncerr
  8320 000002E0 268B0D                  		mov	cx, [es:di]
  8321                                  prngetcount:				
  8322                                  		;mov	ds:wait_count[bx], cx
  8323 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8324 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8325                                  					; return current retry count
  8326                                  		; 12/12/2022
  8327                                  		; cf=0
  8328                                  		;clc
  8329 000002EA C3                      		retn
  8330                                  ; ---------------------------------------------------------------------------
  8331                                  
  8332                                  ;************************************************************************
  8333                                  ;*									*
  8334                                  ;*  prn_ioctl_query							*
  8335                                  ;*									*
  8336                                  ;*  Added for 5.00							*
  8337                                  ;************************************************************************
  8338                                  
  8339                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8340 000002EB C43E[1200]              		les	di, [ptrsav]
  8341 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8342                                  					; ioc_pc
  8343 000002F4 750D                    		jnz	short prn_query_err
  8344 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8345 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8346 000002FC 7404                    		jz	short IOCtlSupported
  8347 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8348 00000300 7501                    		jnz	short prn_query_err
  8349                                  IOCtlSupported:	
  8350                                  		; 12/12/2022
  8351                                  		; cf=0		
  8352                                  		;clc
  8353 00000302 C3                      		retn
  8354                                  ; ---------------------------------------------------------------------------
  8355                                  
  8356                                  prn_query_err:
  8357                                  		; 12/12/2022				
  8358                                  		;stc
  8359 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8360                                  ; ---------------------------------------------------------------------------
  8361                                  
  8362                                  ;************************************************************************
  8363                                  ;*									*
  8364                                  ;*	aux port driver code -- "aux" == "com1"				*
  8365                                  ;*									*
  8366                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8367                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8368                                  ;*									*
  8369                                  ;************************************************************************
  8370                                  
  8371                                  ;	values in ah, requesting function of int 14h in rom bios
  8372                                  
  8373                                  ;auxfunc_send	 equ	1	;transmit
  8374                                  ;auxfunc_receive equ	2	;read
  8375                                  ;auxfunc_status	 equ	3	;request status
  8376                                  
  8377                                  ;	error flags, reported by int 14h, reported in ah:
  8378                                  
  8379                                  ;flag_data_ready equ	01h	;data ready
  8380                                  ;flag_overrun	 equ	02h	;overrun error
  8381                                  ;flag_parity	 equ	04h	;parity error
  8382                                  ;flag_frame	 equ	08h	;framing error
  8383                                  ;flag_break	 equ	10h	;break detect
  8384                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8385                                  ;flag_timeout	 equ	80h	;timeout
  8386                                  
  8387                                  ;	these flags reported in al:
  8388                                  
  8389                                  ;flag_cts	 equ	10h	;clear to send
  8390                                  ;flag_dsr	 equ	20h	;data set ready
  8391                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8392                                  
  8393                                  ; ---------------------------------------------------------------------------
  8394                                  
  8395                                  ;************************************************************************
  8396                                  ;*									*
  8397                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8398                                  ;*		   at es:di						*
  8399                                  ;*									*
  8400                                  ;************************************************************************
  8401                                  
  8402                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8403                                  		;jcxz	short exvec2
  8404 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8405 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8406 0000030B 30C0                    		xor	al, al
  8407 0000030D 8607                    		xchg	al, [bx]
  8408 0000030F 08C0                    		or	al, al
  8409 00000311 7503                    		jnz	short aux2
  8410                                  aux1:					
  8411 00000313 E80500                  		call	auxin		; get character	from port
  8412                                  					; won't return if error
  8413                                  aux2:					
  8414 00000316 AA                      		stosb
  8415 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8416                                  exvec2:					
  8417 00000319 F8                      		clc			; all done, successful exit
  8418                                  auxin_retn:	; 18/12/2022
  8419 0000031A C3                      		retn
  8420                                  ; ---------------------------------------------------------------------------
  8421                                  
  8422                                  ;************************************************************************
  8423                                  ;*									*
  8424                                  ;*	auxin - call rom bios to read character from aux port		*
  8425                                  ;*		if error occurs, map the error and return one		*
  8426                                  ;*		level up to device driver exit code, setting		*
  8427                                  ;*		the number of bytes transferred appropriately		*
  8428                                  ;*									*
  8429                                  ;************************************************************************
  8430                                  
  8431                                  auxin:					
  8432 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8433 0000031D E83C00                  		call	auxop
  8434 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8435                                  		;jnz	short arbad	; skip if any error bits set
  8436                                  		;retn
  8437                                  		; 25/06/2023 (BugFix)
  8438 00000323 74F5                    		jz	short auxin_retn
  8439                                  ; ---------------------------------------------------------------------------
  8440                                  
  8441                                  arbad:					
  8442 00000325 58                      		pop	ax		; remove return	address	(near call)
  8443 00000326 30C0                    		xor	al, al
  8444 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8445 0000032A E9AAFD                  		jmp	bc_err_cnt
  8446                                  
  8447                                  ; ---------------------------------------------------------------------------
  8448                                  
  8449                                  ;************************************************************************
  8450                                  ;*									*
  8451                                  ;*	aux_rdnd - non-destructive aux port read			*
  8452                                  ;*									*
  8453                                  ;************************************************************************
  8454                                  
  8455                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8456 0000032D E85200                  		call	getbx
  8457 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8458 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8459 00000334 7511                    		jnz	short auxdrx	; then return character
  8460 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8461 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8462 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8463 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8464 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8465 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8466 00000345 8807                    		mov	[bx], al
  8467                                  auxdrx:					
  8468 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8469                                  ; ---------------------------------------------------------------------------
  8470                                  
  8471                                  auxbus:					
  8472 0000034A E979FE                  		jmp	z_bus_exit
  8473                                  ; ---------------------------------------------------------------------------
  8474                                  
  8475                                  ;************************************************************************
  8476                                  ;*									*
  8477                                  ;*	aux_wrst - return aux port write status				*
  8478                                  ;*									*
  8479                                  ;************************************************************************
  8480                                  
  8481                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8482 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8483 00000350 A820                    		test	al, 20h		; test data set	ready
  8484 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8485 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8486 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8487                                  		; 12/12/2022
  8488                                  		; cf=0	; (test instruction resets cf)
  8489                                  		;clc
  8490 00000359 C3                      		retn
  8491                                  ; ---------------------------------------------------------------------------
  8492                                  
  8493                                  ;************************************************************************
  8494                                  ;*									*
  8495                                  ;*	auxstat - call rom bios to determine aux port status		*
  8496                                  ;*									*
  8497                                  ;*	exit:	ax = status						*
  8498                                  ;*		dx = [auxnum]						*
  8499                                  ;*									*
  8500                                  ;************************************************************************
  8501                                  
  8502                                  auxstat:				
  8503 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8504                                  
  8505                                  		; fall into auxop
  8506                                  
  8507                                  ; =============== S U B	R O U T	I N E =======================================
  8508                                  
  8509                                  ;************************************************************************
  8510                                  ;*									*
  8511                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8512                                  ;*									*
  8513                                  ;*	entry:	ah = int 14h function number				*
  8514                                  ;*	exit:	ax = results						*
  8515                                  ;*		dx = [auxnum]						*
  8516                                  ;*									*
  8517                                  ;************************************************************************
  8518                                  
  8519                                  auxop:		; proc near		
  8520 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8521                                  					; 0=init, 1=send, 2=receive, 3=status
  8522                                  					; get port number
  8523 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8524                                  					; DX = port number (0-3)
  8525                                  					; Return: AX = port status code
  8526 00000362 C3                      		retn
  8527                                  
  8528                                  ; ---------------------------------------------------------------------------
  8529                                  
  8530                                  ;************************************************************************
  8531                                  ;*									*
  8532                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8533                                  ;*		   auxbuf [auxnum] to zero				*
  8534                                  ;*									*
  8535                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8536                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8537                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8538                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8539                                  ;*									*
  8540                                  ;************************************************************************
  8541                                  
  8542                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8543 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8544 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8545                                  					; zero out buffer
  8546                                  		;clc			; all done, successful return
  8547                                  		; 12/12/2022
  8548                                  		; cf=0 ('add' instruction in 'getbx')
  8549 00000369 C3                      		retn
  8550                                  ; ---------------------------------------------------------------------------
  8551                                  
  8552                                  ;************************************************************************
  8553                                  ;*									*
  8554                                  ;*	aux_writ - write to aux device					*
  8555                                  ;*									*
  8556                                  ;************************************************************************
  8557                                  
  8558                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8559                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8560 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8561                                  aux_loop:				
  8562 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8563                                  					; move di pointer to next character
  8564 0000036F 47                      		inc	di
  8565 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8566 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8567 00000375 F6C480                  		test	ah, 80h		; check	for error
  8568 00000378 7405                    		jz	short awok	; then no error
  8569 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8570 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8571                                  ; ---------------------------------------------------------------------------
  8572                                  
  8573                                  awok:					
  8574 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8575                                  					; still	more character to print
  8576                                  		;clc			; all done, successful return
  8577                                  		; 12/12/2022
  8578                                  		; cf=0 (test instruction above)	
  8579 00000381 C3                      		retn
  8580                                  
  8581                                  ; =============== S U B	R O U T	I N E =======================================
  8582                                  
  8583                                  ;************************************************************************
  8584                                  ;*									*
  8585                                  ;*	getbx - return bx -> single byte input buffer for		*
  8586                                  ;*		selected aux port ([auxnum])				*
  8587                                  ;*									*
  8588                                  ;************************************************************************
  8589                                  
  8590                                  getbx:	
  8591 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8592                                  					; for selected aux port	([auxnum])
  8593                                  		;add	bx, offset auxbuf
  8594 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8595                                  		; 12/12/2022
  8596                                  		; cf=0 (if [uaxnum] is valid number) 
  8597 0000038A C3                      		retn
  8598                                  
  8599                                  ; ---------------------------------------------------------------------------
  8600                                  
  8601                                  ; 15/10/2022
  8602                                  
  8603                                  ;----------------------------------------------------------------
  8604                                  ;								:
  8605                                  ;		    clock device driver 			:
  8606                                  ;								:
  8607                                  ;								:
  8608                                  ;   this file contains the clock device driver. 		:
  8609                                  ;								:
  8610                                  ;   the routines in this files are:				:
  8611                                  ;								:
  8612                                  ;	routine 		function			:
  8613                                  ;	------- 		--------			:
  8614                                  ;	tim_writ		set the current time		:
  8615                                  ;	tim_read		read the current time		:
  8616                                  ;	time_to_ticks		convert time to corresponding	:
  8617                                  ;				  number of clock ticks 	:
  8618                                  ;								:
  8619                                  ; the clock ticks at the rate of:				:
  8620                                  ;								:
  8621                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8622                                  ; see each routine for information on the use.			:
  8623                                  ;								:
  8624                                  ;----------------------------------------------------------------
  8625                                  
  8626                                  ; convert time to ticks
  8627                                  ; input : time in cx and dx
  8628                                  ; ticks returned in cx:dx
  8629                                  
  8630                                  ;19/07/2019
  8631                                  ;09/03/2019
  8632                                  
  8633                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8634                                  
  8635                                  ; first convert from hour,min,sec,hund. to
  8636                                  ; total number of 100th of seconds
  8637                                  
  8638 0000038B B03C                    		mov	al, 60
  8639 0000038D F6E5                    		mul	ch		; hours	to minutes
  8640 0000038F B500                    		mov	ch, 0
  8641 00000391 01C8                    		add	ax, cx		; total	minutes
  8642 00000393 B97017                  		mov	cx, 6000	; 60*100
  8643 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8644 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8645 0000039A 89C1                    		mov	cx, ax
  8646 0000039C B064                    		mov	al, 100
  8647 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8648 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8649 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8650 000003A5 B700                    		mov	bh, 0
  8651 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8652 000003A9 83D200                  		adc	dx, 0
  8653                                  
  8654                                  	; dx:cx is time in 1/100 sec
  8655                                  
  8656 000003AC 92                      		xchg	ax, dx
  8657 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8658 000003AE BB0BE9                  		mov	bx, 59659
  8659 000003B1 F7E3                    		mul	bx		; multiply low half
  8660 000003B3 87D1                    		xchg	dx, cx
  8661 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8662 000003B6 F7E3                    		mul	bx		; multiply high	half
  8663 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8664 000003BA 83D200                  		adc	dx, 0
  8665 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8666 000003BE BB0500                  		mov	bx, 5
  8667 000003C1 F6F3                    		div	bl		; divide high half by 5
  8668 000003C3 88C1                    		mov	cl, al
  8669 000003C5 B500                    		mov	ch, 0
  8670 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8671 000003C9 98                      		cbw
  8672 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8673 000003CB F7F3                    		div	bx		; divide low half by 5
  8674 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8675 000003CF CB                      		retf			; far return
  8676                                  
  8677                                  ; ---------------------------------------------------------------------------
  8678                                  
  8679                                  ; 17/10/2022
  8680                                  ; 15/10/2022
  8681                                  
  8682                                  ;--------------------------------------------------------------------
  8683                                  ;
  8684                                  ; tim_writ sets the current time
  8685                                  ;
  8686                                  ; on entry es:[di] has the current time:
  8687                                  ;
  8688                                  ;	number of days since 1-1-80	(word)
  8689                                  ;	minutes (0-59)			(byte)
  8690                                  ;	hours (0-23)			(byte)
  8691                                  ;	hundredths of seconds (0-99)	(byte)
  8692                                  ;	seconds (0-59)			(byte)
  8693                                  ;
  8694                                  ; each number has been checked for the correct range.
  8695                                  ;
  8696                                  ;	NOTE: Any changes in this routine probably require corresponding
  8697                                  ;	changes in the version that is built with the power manager driver.
  8698                                  ;	See ptime.asm.
  8699                                  ;
  8700                                  ;--------------------------------------------------------------------
  8701                                  
  8702                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8703 000003D0 268B05                  		mov	ax, [es:di]
  8704 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8705                                  					; end to avoid tick windows.
  8706 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8707                                  		;cmp	ds:havecmosclock, 0
  8708 000003D9 7426                    		jz	short no_cmos_1
  8709 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8710                                  					; get binary hours
  8711                                  					; convert to bcd
  8712 000003DF FF1E[0205]              		call	far [bintobcd]
  8713                                  		;call	ds:bintobcd	; call far [bintobcd]
  8714 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8715 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8716 000003E9 FF1E[0205]              		call	far [bintobcd]
  8717                                  		;call	ds:bintobcd	; convert to bcd
  8718 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8719 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8720 000003F3 FF1E[0205]              		call	far [bintobcd]
  8721                                  		;call	ds:bintobcd
  8722 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8723 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8724 000003FB FA                      		cli
  8725 000003FC B403                    		mov	ah, 3
  8726 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8727                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8728                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8729                                  					; Return: CMOS clock set
  8730 00000400 FB                      		sti
  8731                                  no_cmos_1:				
  8732 00000401 268B4D02                		mov	cx, [es:di+2]
  8733 00000405 268B5504                		mov	dx, [es:di+4]
  8734                                  		; 17/10/2022
  8735 00000409 FF1E[E206]              		call	far [ttticks]
  8736                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8737                                  					; convert time to ticks
  8738                                  					; cx:dx	now has	time in	ticks
  8739 0000040D FA                      		cli			; turn off timer
  8740 0000040E B401                    		mov	ah, 1
  8741 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8742                                  					; CX:DX	= clock	count
  8743                                  					; Return: time of day set
  8744                                  		;pop	ds:daycnt
  8745 00000412 8F06[F004]              		pop	word [daycnt]
  8746 00000416 FB                      		sti
  8747                                  		;cmp	ds:havecmosclock, 0
  8748 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8749 0000041C 740A                    		jz	short no_cmos_2
  8750 0000041E FF1E[0605]              		call	far [daycnttoday]
  8751                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8752                                  					; convert to bcd format
  8753 00000422 FA                      		cli
  8754 00000423 B405                    		mov	ah, 5
  8755 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8756                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8757                                  					; CH = century (19h or 20h)
  8758                                  					; Return: CMOS clock set
  8759 00000427 FB                      		sti
  8760                                  no_cmos_2:
  8761                                  		; 12/12/2022
  8762                                  		; cf=0				
  8763                                  		;clc
  8764 00000428 C3                      		retn
  8765                                  
  8766                                  ; ---------------------------------------------------------------------------
  8767                                  
  8768                                  ; 15/10/2022
  8769                                  
  8770                                  ;----------------------------------------------------------------------------
  8771                                  ; gettime reads date and time
  8772                                  ; and returns the following information:
  8773                                  ;
  8774                                  ;	es:[di]  =count of days since 1-1-80
  8775                                  ;	es:[di+2]=hours
  8776                                  ;	es:[di+3]=minutes
  8777                                  ;	es:[di+4]=seconds
  8778                                  ;	es:[di+5]=hundredths of seconds
  8779                                  ;
  8780                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8781                                  ;	changes in the version that is built with the power manager driver.
  8782                                  ;	See ptime.asm.
  8783                                  ;----------------------------------------------------------------------------
  8784                                  
  8785                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8786 00000429 E84E00                  		call	GetTickCnt
  8787 0000042C 8B36[F004]              		mov	si, [daycnt]
  8788                                  
  8789                                  ; we now need to convert the time in tick to the time in 100th of
  8790                                  ; seconds. the relation between tick and seconds is:
  8791                                  ;
  8792                                  ;		 65,536 seconds
  8793                                  ;	       ----------------
  8794                                  ;		1,193,180 tick
  8795                                  ;
  8796                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8797                                  ;
  8798                                  ;	ticks from clock  * 65,536 * 100
  8799                                  ;      --------------------------------- = time in 100th of seconds
  8800                                  ;		1,193,180
  8801                                  ;
  8802                                  ; fortunately this formula simplifies to:
  8803                                  ;
  8804                                  ;	ticks from clock * 5 * 65,536
  8805                                  ;      --------------------------------- = time in 100th of seconds
  8806                                  ;		59,659
  8807                                  ;
  8808                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8809                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8810                                  ; my 16 bits to the left.
  8811                                  ;
  8812                                  ; start with ticks in cx:dx
  8813                                  ; multiply by 5
  8814                                  
  8815 00000430 89C8                    		mov	ax, cx
  8816 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8817                                  					; multiply by 5
  8818 00000434 D1E2                    		shl	dx, 1
  8819 00000436 D1D1                    		rcl	cx, 1		; times	2
  8820 00000438 D1E2                    		shl	dx, 1
  8821 0000043A D1D1                    		rcl	cx, 1		; times	4
  8822 0000043C 01DA                    		add	dx, bx
  8823 0000043E 11C8                    		adc	ax, cx		; times	5
  8824 00000440 92                      		xchg	ax, dx
  8825                                  
  8826                                  ; now have ticks * 5 in	dx:ax
  8827                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8828                                  
  8829 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8830 00000444 F7F1                    		div	cx		; dx now has remainder
  8831                                  					; ax has high word of final quotient
  8832 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8833 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8834 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8835                                  
  8836                                  ; rounding based on the	remainder may be added here
  8837                                  ; the result in	bx:ax is time in 1/100 second.
  8838                                  
  8839 0000044C 89DA                    		mov	dx, bx		
  8840 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8841                                  
  8842                                  ; division by 200 is necessary to ensure no overflow--max result
  8843                                  ; is number of seconds in a day/2 = 43200.
  8844                                  
  8845 00000451 F7F1                    		div	cx
  8846 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8847 00000456 7203                    		jb	short noadj
  8848 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8849                                  noadj:					
  8850 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8851 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8852                                  
  8853                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8854                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8855                                  
  8856 0000045E D1D0                    		rcl	ax, 1		
  8857 00000460 B200                    		mov	dl, 0
  8858 00000462 D1D2                    		rcl	dx, 1
  8859 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8860 00000467 F7F1                    		div	cx
  8861 00000469 88D7                    		mov	bh, dl		; save the seconds
  8862 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8863 0000046D 86C4                    		xchg	al, ah
  8864                                  
  8865                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8866                                  
  8867 0000046F 50                      		push	ax
  8868 00000470 89F0                    		mov	ax, si		; daycnt
  8869 00000472 AB                      		stosw
  8870 00000473 58                      		pop	ax
  8871 00000474 AB                      		stosw
  8872 00000475 89D8                    		mov	ax, bx
  8873 00000477 AB                      		stosw
  8874 00000478 F8                      		clc
  8875 00000479 C3                      		retn
  8876                                  
  8877                                  ; =============== S U B	R O U T	I N E =======================================
  8878                                  
  8879                                  ; 15/10/2022
  8880                                  
  8881                                  ;----------------------------------------------------------------------------
  8882                                  ;
  8883                                  ; procedure : GetTickCnt
  8884                                  ;
  8885                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8886                                  ;		of rollover [except when power management driver is in use]. 
  8887                                  ;		Uses the following logic for updating Daycnt
  8888                                  ;
  8889                                  ;		if ( rollover ) {
  8890                                  ;			if ( t_switch )
  8891                                  ;				daycnt++ ;
  8892                                  ;			else
  8893                                  ;				daycnt += rollover ;
  8894                                  ;		}
  8895                                  ;
  8896                                  ; USES : AX
  8897                                  ;
  8898                                  ; RETURNS : CX:DX - tick count
  8899                                  ; MODIFIES : daycnt
  8900                                  ;
  8901                                  ;----------------------------------------------------------------------------
  8902                                  
  8903                                  		; 17/10/2022
  8904                                  GetTickCnt:	
  8905 0000047A 30E4                    		xor	ah, ah
  8906 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8907                                  					; Return: CX:DX	= clock	count
  8908                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8909                                  					; midnight
  8910                                  					; Otherwise, AL	> 0
  8911 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8912 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8913 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8914                                  					; and not flag
  8915 00000487 0106[F004]              		add	[daycnt], ax
  8916 0000048B C3                      		retn
  8917                                  ; ---------------------------------------------------------------------------
  8918                                  
  8919                                  inc_case:				
  8920 0000048C 08C0                    		or	al, al
  8921 0000048E 7404                    		jz	short no_rollover
  8922 00000490 FF06[F004]              		inc	word [daycnt]
  8923                                  no_rollover:				
  8924 00000494 C3                      		retn
  8925                                  
  8926                                  ;----------------------------------------------------------------------------
  8927                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8928                                  ;----------------------------------------------------------------------------
  8929                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8930                                  ; 09/03/2019 - Retro DOS v4.0
  8931                                  
  8932                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8933                                  ; 26/05/2018 - Retro DOS v3.0
  8934                                  ; 23/03/2018 - Retro DOS v2.0
  8935                                  
  8936                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8937                                  
  8938                                  ;struc BPB_TYPE
  8939                                  ;.SECSIZE:	resw 1
  8940                                  ;.SECALL:	resb 1
  8941                                  ;.RESNUM:	resw 1
  8942                                  ;.FATNUM:	resb 1
  8943                                  ;.DIRNUM:	resw 1
  8944                                  ;.SECNUM:	resw 1
  8945                                  ;.FATID:	resb 1
  8946                                  ;.FATSIZE:	resw 1
  8947                                  ;.SLIM:		resw 1
  8948                                  ;.HLIM:		resw 1
  8949                                  ;.HIDDEN:	resw 1
  8950                                  ;.size:
  8951                                  ;endstruc
  8952                                  
  8953                                  ;-----------------------------------------------------------------
  8954                                  ;	disk interface routines
  8955                                  ;-----------------------------------------------------------------
  8956                                  
  8957                                  ; device attribute bits:
  8958                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8959                                  
  8960                                  ;MAXERR		equ	5
  8961                                  ;MAX_HD_FMT_ERR	equ	2
  8962                                  
  8963                                  ;LSTDRV	equ 504h
  8964                                  
  8965                                  ; some floppies do not have changeline. as a result, media-check would
  8966                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8967                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8968                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8969                                  ; the time of the last successful disk operation and compare it with the current
  8970                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8971                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8972                                  ; since we cannot trust the timer to be always available, we record the number 
  8973                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8974                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8975                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8976                                  ; the time of last successful access, if we see that time has passed too,
  8977                                  ; we reset the counter.
  8978                                  
  8979                                  accessmax	equ	5
  8980                                  
  8981                                  ; due to various bogosities, we need to continually adjust what the head
  8982                                  ; settle time is.  the following algorithm is used:
  8983                                  ;
  8984                                  ;   get the current head settle value.
  8985                                  ;   if it is 0, then
  8986                                  ;	set slow = 15
  8987                                  ;   else
  8988                                  ;	set slow = value
  8989                                  ;   ...
  8990                                  ;*********************************************
  8991                                  ;************ old algorithm ******************
  8992                                  ;*   if we are seeking and writing then
  8993                                  ;*	 use slow
  8994                                  ;*   else
  8995                                  ;*	 use fast
  8996                                  ;*********************************************
  8997                                  ;*********** ibm's requested logic ***********
  8998                                  ;   if we are seeking and writing and not on an at then
  8999                                  ;	use slow
  9000                                  ;   else
  9001                                  ;	use fast
  9002                                  ;   ...
  9003                                  ;   restore current head settle value
  9004                                  ;
  9005                                  ;
  9006                                  ;---------------------------------------
  9007                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9008                                  					; it on after handling config.sys file as a
  9009                                  					; default value, if multrk_flag = multrk_off1.
  9010                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9011                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9012                                  
  9013                                  ; close data segment, open Bios_Code segment
  9014                                  
  9015                                  ; 15/10/2022
  9016                                  
  9017                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9018                                  
  9019                                  ;-----------------------------------------------------------------
  9020                                  ;	command jump table
  9021                                  ;-----------------------------------------------------------------
  9022                                  
  9023 00000495 00                      		db 0
  9024                                  
  9025                                  ; 11/12/2022
  9026                                  %if 0
  9027                                  
  9028                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9029                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9030                                  		dw 1742h		; dsk_init
  9031                                  		dw 4EBh			; media_chk
  9032                                  		dw 592h			; get_bpb
  9033                                  		dw 0D5h			; bc_cmderr
  9034                                  		dw 857h			; dsk_read
  9035                                  		dw 83Dh			; x_bus_exit
  9036                                  		dw 558h			; ret_carry_clear
  9037                                  		dw 558h			; ret_carry_clear
  9038                                  		dw 849h			; dsk_writ
  9039                                  		dw 841h			; dsk_writv
  9040                                  		dw 558h			; ret_carry_clear
  9041                                  		dw 558h			; ret_carry_clear
  9042                                  		dw 0D5h			; bc_cmderr
  9043                                  		dw 80Ah			; dsk_open
  9044                                  		dw 81Ah			; dsk_close
  9045                                  		dw 831h			; dsk_rem
  9046                                  		dw 558h			; ret_carry_clear
  9047                                  		dw 558h			; ret_carry_clear
  9048                                  		dw 558h			; ret_carry_clear
  9049                                  		dw 0C6Bh		; do_generic_ioctl
  9050                                  		dw 558h			; ret_carry_clear
  9051                                  		dw 558h			; ret_carry_clear
  9052                                  		dw 558h			; ret_carry_clear
  9053                                  		dw 1124h		; ioctl_getown
  9054                                  		dw 1142h		; ioctl_setown
  9055                                  		dw 129Ah		; ioctl_support_query
  9056                                  
  9057                                  ;dtbl_siz equ $-dsktbl
  9058                                  
  9059                                  %endif
  9060                                  		; 11/12/2022
  9061 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9062 00000497 [DD16]                  		dw dsk_init
  9063 00000499 [DF04]                  		dw media_chk
  9064 0000049B [8505]                  		dw get_bpb
  9065 0000049D [D500]                  		dw bc_cmderr
  9066 0000049F [3408]                  		dw dsk_read
  9067 000004A1 [1A08]                  		dw x_bus_exit
  9068 000004A3 [4B05]                  		dw ret_carry_clear
  9069 000004A5 [4B05]                  		dw ret_carry_clear
  9070 000004A7 [2608]                  		dw dsk_writ
  9071 000004A9 [1E08]                  		dw dsk_writv
  9072 000004AB [4B05]                  		dw ret_carry_clear
  9073 000004AD [4B05]                  		dw ret_carry_clear
  9074 000004AF [D500]                  		dw bc_cmderr
  9075 000004B1 [EA07]                  		dw dsk_open
  9076 000004B3 [F907]                  		dw dsk_close
  9077 000004B5 [0F08]                  		dw dsk_rem
  9078 000004B7 [4B05]                  		dw ret_carry_clear
  9079 000004B9 [4B05]                  		dw ret_carry_clear
  9080 000004BB [4B05]                  		dw ret_carry_clear
  9081 000004BD [400C]                  		dw do_generic_ioctl
  9082 000004BF [4B05]                  		dw ret_carry_clear
  9083 000004C1 [4B05]                  		dw ret_carry_clear
  9084 000004C3 [4B05]                  		dw ret_carry_clear
  9085 000004C5 [E610]                  		dw ioctl_getown
  9086 000004C7 [0311]                  		dw ioctl_setown
  9087 000004C9 [4C12]                  		dw ioctl_support_query
  9088                                  
  9089                                  dtbl_siz equ $-dsktbl
  9090                                  
  9091                                  ; =============== S U B	R O U T	I N E =======================================
  9092                                  
  9093                                  ; ---------------------------------------------------------------------------
  9094                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9095                                  ; the one that belongs to the drive specified. carry is set if none exists
  9096                                  ; for the drive. Pointer is returned in es:[di]
  9097                                  ;
  9098                                  ;  AL contains the logical drive number.
  9099                                  ; ---------------------------------------------------------------------------
  9100                                  
  9101                                  SetDrive:	
  9102                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9103 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9104                                  X_Scan_Loop:				
  9105 000004CF 26384505                		cmp	[es:di+5], al	
  9106 000004D3 7409                    		jz	short X_SetDrv
  9107 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9108 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9109 000004DB 75F2                    		jnz	short X_Scan_Loop
  9110 000004DD F9                      		stc
  9111                                  X_SetDrv:				
  9112 000004DE C3                      		retn
  9113                                  
  9114                                  ; ---------------------------------------------------------------------------
  9115                                  
  9116                                  ; 15/10/2022
  9117                                  
  9118                                  ; ---------------------------------------------------------------------
  9119                                  ; if id is f9, have a 96tpi disk else
  9120                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9121                                  ;  otherwise if within 2 secs of last disk operation media could not
  9122                                  ;    have changed, otherwise dont know if media has changed
  9123                                  ; ---------------------------------------------------------------------
  9124                                  
  9125                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9126 000004DF E8E9FF                  		call	SetDrive
  9127 000004E2 BE0100                  		mov	si, 1
  9128 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9129                                  					; fchanged_by_format
  9130 000004EA 7416                    		jz	short WeAreNotFakingIt
  9131                                  		; 12/12/2022
  9132 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9133                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9134                                  					; ~fchanged_by_format ;	reset flag
  9135 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9136                                  					; Ensure that we ask the rom if media has changed
  9137 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9138                                  					; fnon_removable
  9139 000004FB 740C                    		jz	short wehaveafloppy
  9140 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9141 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9142                                  ; ---------------------------------------------------------------------------
  9143                                  
  9144                                  WeAreNotFakingIt:
  9145                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9146 00000502 26F6452301              		test	byte [es:di+23h], 1
  9147 00000507 7525                    		jnz	short Media_Done
  9148                                  wehaveafloppy:				
  9149 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9150                                  
  9151                                  		; If we have a floppy with changeline support, we ask the ROM
  9152                                  		; to determine if media has changed. We do not perform the
  9153                                  		; 2 second check for these drives.
  9154                                  
  9155 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9156 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9157 00000512 E89312                  		call	mediacheck	;  Call	into removable routine
  9158 00000515 7236                    		jb	short err_exitj
  9159 00000517 E8EB13                  		call	haschange
  9160 0000051A 7512                    		jnz	short Media_Done
  9161                                  mChk_NoChangeLine:
  9162                                  		; If we come here, we have a floppy with no changeline support
  9163                                  			
  9164 0000051C BE0100                  		mov	si, 1		; Presume no change
  9165 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9166 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9167                                  					; Is drive of last access the same?
  9168 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9169 00000528 E82800                  		call	Check_Time_Of_Access
  9170 0000052B EB01                    		jmp	short Media_Done
  9171                                  ; ---------------------------------------------------------------------------
  9172                                  
  9173                                  Media_Unk:				
  9174 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9175                                  
  9176                                  		; SI now contains the correct value for media change.
  9177                                  		; Clean up the left overs
  9178                                  Media_Done:	
  9179                                  		; 19/10/2022			
  9180 0000052E 06                      		push	es
  9181 0000052F C41E[1200]              		les	bx, [ptrsav]
  9182 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9183 00000537 07                      		pop	es
  9184 00000538 09F6                    		or	si, si
  9185 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9186 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9187 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9188 00000543 E84B13                  		call	media_set_vid
  9189                                  mChk1_NoChangeLine:			
  9190 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9191                                  					; Make sure we ask rom for media check
  9192                                  ret_carry_clear:			
  9193 0000054B F8                      		clc			; volidok
  9194 0000054C C3                      		retn
  9195                                  ; ---------------------------------------------------------------------------
  9196                                  
  9197                                  err_exitj:				
  9198 0000054D E87B06                  		call	maperror	; guaranteed to	set carry
  9199                                  ret81:					
  9200 00000550 B481                    		mov	ah, 81h		; return error status
  9201 00000552 C3                      		retn			; return with carry set
  9202                                  
  9203                                  ; =============== S U B	R O U T	I N E =======================================
  9204                                  
  9205                                  ; ---------------------------------------------------------------------------
  9206                                  ; perform a check on the time passed since the last access for this physical
  9207                                  ; drive.
  9208                                  ; we are accessing the same drive. if the time of last successful access was
  9209                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9210                                  ; returns in si:
  9211                                  ;	0 - if time of last access was >= 2 seconds
  9212                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9213                                  ; registers affected ax,cx,dx, flags.
  9214                                  ;
  9215                                  ;	assume es:di -> bds, ds->Bios_Data
  9216                                  ; ---------------------------------------------------------------------------
  9217                                  
  9218                                  		; 19/10/2022
  9219                                  Check_Time_Of_Access:
  9220 00000553 BE0100                  		mov	si, 1		; presume no change.
  9221 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9222 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9223                                  					; get stored time
  9224 0000055D 29C2                    		sub	dx, ax
  9225 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9226 00000563 19C1                    		sbb	cx, ax
  9227 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9228 00000567 09D2                    		or	dx, dx		; time must pass
  9229 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9230 0000056B FE06[1D01]              		inc	byte [accesscount]
  9231 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9232                                  					; if count is less than threshold, ok
  9233 00000574 720C                    		jb	short timecheck_ret
  9234 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9235 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9236                                  ; ---------------------------------------------------------------------------
  9237                                  
  9238                                  timepassed:				
  9239 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9240                                  					; min elapsed time? (2 seconds)
  9241 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9242                                  
  9243                                  		; everything indicates that we do not know what has happened.
  9244                                  timecheck_unk:				
  9245 00000581 4E                      		dec	si		; presume i don't know
  9246                                  timecheck_ret:				
  9247 00000582 C3                      		retn
  9248                                  
  9249                                  ; ---------------------------------------------------------------------------
  9250                                  ; 15/10/2022
  9251                                  Err_Exitj2:
  9252 00000583 EBC8                    		jmp	short err_exitj
  9253                                  
  9254                                  ; ---------------------------------------------------------------------------
  9255                                  
  9256                                  ; 15/10/2022
  9257                                  
  9258                                  ; ==========================================================================
  9259                                  ; Build a valid bpb for the disk in the drive.
  9260                                  ; ==========================================================================
  9261                                  
  9262                                  		; 19/10/2022
  9263                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9264 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9265 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9266 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9267                                  					; fnon_removable
  9268 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9269                                  
  9270                                  		; let's set the default value for volid,vol_serial,
  9271                                  		; filesys_id in bds table
  9272                                  
  9273 00000592 E83700                  		call	clear_ids
  9274                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9275 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9276 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9277 0000059D 72B1                    		jb	short ret81
  9278                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9279 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9280                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9281 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9282 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9283                                  					; otherwise, conventional boot record
  9284                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9285 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9286 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9287 000005B2 E85613                  		call	set_volume_id
  9288                                  already_gotbpb:				
  9289 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9290                                  					; return the bpb from the current bds
  9291                                  
  9292                                  ;		fall into setptrsav, es:di -> result
  9293                                  
  9294                                  ; ---------------------------------------------------------------------------
  9295                                  
  9296                                  ; 15/10/2022
  9297                                  
  9298                                  ; ==========================================================================
  9299                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9300                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9301                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9302                                  ;It fails, for instance, when we install an external drive using driver.sys
  9303                                  ;because then the BDS segment is no longer Bios_Data. 
  9304                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9305                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9306                                  ;restored before returning to the caller.
  9307                                  ; ==========================================================================
  9308                                  
  9309                                  		; 19/10/2022
  9310                                  SetPtrSav:	; return point for dsk_init				
  9311 000005B8 8CC1                    		mov	cx, es		; save es
  9312                                  		;les	bx, ds:ptrsav
  9313 000005BA C41E[1200]              		les	bx, [ptrsav]
  9314 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9315 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9316 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9317 000005CA F8                      		clc
  9318 000005CB C3                      		retn
  9319                                  
  9320                                  ; =============== S U B	R O U T	I N E =======================================
  9321                                  
  9322                                  ; 15/10/2022
  9323                                  
  9324                                  ; -----------------------------------------------------
  9325                                  ; clear ids in bds table. only applied for floppies.
  9326                                  ;input:  es:di -> bds table
  9327                                  ;	assumes ds: -> Bios_Data
  9328                                  ;output: volid set to "NO NAME    "
  9329                                  ;	 vol_serial set to 0.
  9330                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9331                                  ;	   depending on the flag fatsize in bds.
  9332                                  ;
  9333                                  ;	trashes si, cx
  9334                                  ; -----------------------------------------------------
  9335                                  
  9336                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9337                                  ;size_of_EXT_SYSTEM_ID equ 8
  9338                                  
  9339                                  clear_ids:
  9340                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9341 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9342                                  clear_ids_x:	; 11/09/2023		
  9343                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9344 000005D0 57                      		push	di
  9345 000005D1 31C9                    		xor	cx, cx		; no serial number
  9346 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9347 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9348                                  
  9349                                  		; BUGBUG - there's a lot in common here and with
  9350                                  		; mov_media_ids.. see if we can save some space by
  9351                                  		; merging them... jgl
  9352                                  
  9353                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9354                                  		; 10/12/2022
  9355 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9356                                  
  9357                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9358 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9359 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9360 000005E3 F3A4                    		rep movsb
  9361                                  		
  9362                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9363                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9364                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9365                                  		;test	byte [es:di+1Fh], 40h
  9366                                  
  9367                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9368                                  			; Microsoft/IBM code has a bug here because the BDS's
  9369                                  			; .volid and .filesys_id fields will be reset
  9370                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9371                                  			; at the BDS offset 31 but current (this) code checks flags
  9372                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9373                                  			;
  9374                                  			; Correct Code:
  9375                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9376                                  			; 11/09/2023
  9377                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9378                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9379                                  			;
  9380                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9381                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9382                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9383                                  			;
  9384                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9385                                  			; 'clear_ids' is used for floppy disks only and the default
  9386                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9387                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9388                                  
  9389 000005E5 A840                    		test	al, 40h ; * 
  9390                                  		
  9391                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9392 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9393 000005EA 7503                    		jnz	short ci_bigfat
  9394                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9395 000005EC BE[0B05]                		mov	si, fat_12_id	; 19/10/2022
  9396                                  ci_bigfat:				
  9397                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9398                                  		; 10/12/2022
  9399 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9400 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9401                                  					; filesys_id field
  9402 000005F4 F3A4                    		rep movsb
  9403 000005F6 5F                      		pop	di		; restore bds pointer
  9404                                  getret_exit:		; 21/12/2023
  9405 000005F7 C3                      		retn
  9406                                  
  9407                                  ; =============== S U B	R O U T	I N E =======================================
  9408                                  
  9409                                  ; 15/10/2022
  9410                                  
  9411                                  ; ---------------------------------------------------------------------------
  9412                                  ;	getbp - return bpb from the drive specified by the bds.
  9413                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9414                                  ;	    note that we never come here for fixed disks.
  9415                                  ;	    for all other cases,
  9416                                  ;	      - it reads boot sector to pull out the bpb
  9417                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9418                                  ;		to get the fat id byte to build the bpb from there.
  9419                                  ;
  9420                                  ;   inputs:	es:di point to correct bds.
  9421                                  ;
  9422                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9423                                  ;		carry set, and al=7 if invalid disk.
  9424                                  ;		carry set and error code in al if other error.
  9425                                  ;		if failed to recognize the boot record, then will set the
  9426                                  ;		set_id_flag to 0.
  9427                                  ;		this routine will only work for a floppy diskette.
  9428                                  ;		     for a fixed disk, it will just return.
  9429                                  ;
  9430                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9431                                  ;	  segment definitions. It should be migrated towards.
  9432                                  ;	   now es:di has the bds, ds: has Bios_Data
  9433                                  ; ---------------------------------------------------------------------------
  9434                                  
  9435                                  GetBp:		; if returning fake bpb then return bpb as is.
  9436                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable
  9437 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9438                                  		;jz	short getbp1	; getbp1
  9439                                  		;jmp	getret_exit
  9440                                  		; 21/12/2023
  9441 000005FD 75F8                    		jnz	short getret_exit
  9442                                  ; ---------------------------------------------------------------------------
  9443                                  getbp1:
  9444 000005FF 51                      		push	cx
  9445 00000600 52                      		push	dx
  9446 00000601 53                      		push	bx
  9447                                  
  9448                                  		; attempt to read in boot sector and determine bpb.
  9449                                  		; we assume that the 2.x and greater dos disks all
  9450                                  		; have a valid boot sector.
  9451                                  
  9452 00000602 E8A400                  		call	readbootsec
  9453 00000605 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9454 00000607 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9455 00000609 7508                    		jnz	short dofatbpb
  9456 0000060B E8F000                  		call	movbpb		; move bpb into	registers
  9457 0000060E EB57                    		jmp	short Has1
  9458                                  ; ---------------------------------------------------------------------------
  9459                                  
  9460                                  getbp_err_ret_brdg:
  9461 00000610 E98200                  		jmp	getbp_err_ret
  9462                                  ; ---------------------------------------------------------------------------
  9463                                  
  9464                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9465                                  		; and fill in bpb from there.
  9466                                  dofatbpb:
  9467 00000613 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9468 00000616 72F8                    		jb	short getbp_err_ret_brdg
  9469                                  		;cmp	ds:fhave96, 0	; changeline support available?
  9470 00000618 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9471 0000061D 7403                    		jz	short bpb_nochangeline	; brif not
  9472 0000061F E88412                  		call	hidensity	; may not return! May add sp, 2	and
  9473                                  					; jump to has1!!!!!! or	has720K
  9474                                  bpb_nochangeline:		; test for a valid 3.5" medium
  9475 00000622 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9476                                  					; ffSmall
  9477 00000627 7515                    		jnz	short is_floppy
  9478 00000629 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9479 0000062C 7571                    		jnz	short got_unknown_medium
  9480                                  Has720K:				
  9481                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9482 0000062E BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9483                                  
  9484                                  		; es points to segment of bds. the following should be modified
  9485                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9486                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9487                                  
  9488                                  		; 10/12/2022
  9489                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9490                                  		; 21/12/2022
  9491 00000631 8A07                    		mov	al, [bx]
  9492 00000633 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9493 00000636 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9494 00000639 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9495                                  		; 19/10/2022 - Temporary !
  9496                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9497                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9498                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9499                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
  9500                                  
  9501 0000063C EB29                    		jmp	short Has1
  9502                                  ; ---------------------------------------------------------------------------
  9503                                  
  9504                                  is_floppy:			; must be a 5.25" floppy if we come here
  9505 0000063E 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9506 00000641 725C                    		jb	short got_unknown_medium
  9507 00000643 B001                    		mov	al, 1		; set number of	fat sectors
  9508 00000645 BB0840                  		mov	bx, 16392	; 64*256+8
  9509                                  					; set dir entries and sector max
  9510 00000648 B94001                  		mov	cx, 320		; 40*8
  9511                                  					; set size of drive
  9512 0000064B BA0101                  		mov	dx, 257		; 01*256+1
  9513                                  					; set head limit and sec/all unit
  9514 0000064E F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9515 00000651 7507                    		jnz	short has8	; nz = has 8 sectors
  9516 00000653 FEC0                    		inc	al		; inc number of	fat sectors
  9517 00000655 FEC3                    		inc	bl		; inc sector max
  9518                                  		;add	cx, 40		; increase size	(to 360)
  9519                                  		; 18/12/2022
  9520 00000657 80C128                  		add	cl, 40
  9521                                  has8:
  9522 0000065A F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9523 0000065D 7408                    		jz	short Has1	; jz = 1 head
  9524 0000065F 01C9                    		add	cx, cx		; double size of disk
  9525 00000661 B770                    		mov	bh, 112		; increase number of directory entries
  9526 00000663 FEC6                    		inc	dh		; inc sec/all unit
  9527 00000665 FEC2                    		inc	dl		; inc head limit
  9528                                  Has1:
  9529 00000667 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9530 0000066B 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9531 0000066F 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9532 00000673 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9533 00000677 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9534 0000067B 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9535 0000067F 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9536                                  
  9537                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9538                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9539                                  		; to 0 since this code is for floppies
  9540                                  
  9541                                  		; 18/12/2022
  9542                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9543                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9544                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9545                                  		; 18/12/2022
  9546 00000683 29C9                    		sub	cx, cx
  9547 00000685 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9548 00000689 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9549 0000068D 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9550                                  getret:
  9551 00000691 5B                      		pop	bx
  9552 00000692 5A                      		pop	dx
  9553 00000693 59                      		pop	cx
  9554                                  ;getret_exit:		; 21/12/2023
  9555 00000694 C3                      		retn
  9556                                  ; ---------------------------------------------------------------------------
  9557                                  
  9558                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
  9559                                  		;mov	ds:set_id_flag,	0
  9560                                  		; 19/10/2022
  9561 00000695 C606[0A05]00            		mov	byte [set_id_flag], 0
  9562 0000069A E82E05                  		call	maperror
  9563 0000069D EBF2                    		jmp	short getret
  9564                                  ; ---------------------------------------------------------------------------
  9565                                  
  9566                                  		; we have a 3.5" diskette for which we cannot build a bpb.
  9567                                  		; we do	not assume any type of bpb for this medium.
  9568                                  
  9569                                  got_unknown_medium:
  9570                                  		;mov	ds:set_id_flag,	0
  9571 0000069F C606[0A05]00            		mov	byte [set_id_flag], 0
  9572 000006A4 B007                    		mov	al, 7
  9573 000006A6 F9                      		stc
  9574 000006A7 EBE8                    		jmp	short getret
  9575                                  
  9576                                  ; =============== S U B	R O U T	I N E =======================================
  9577                                  
  9578                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9579                                  
  9580                                  ; ----------------------------------------------------------------
  9581                                  ; read in the boot sector. set carry if error in reading sector.
  9582                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9583                                  ;
  9584                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9585                                  ; ----------------------------------------------------------------
  9586                                  
  9587                                  ; 10/03/2019 - Retro DOS v4.0
  9588                                  
  9589                                  readbootsec:	
  9590 000006A9 B600                    		mov	dh, 0		; head 0
  9591 000006AB B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9592 000006AE E8C600                  		call	read_sector
  9593 000006B1 724A                    		jb	short err_ret
  9594 000006B3 31DB                    		xor	bx, bx		; assume valid boot sector
  9595                                  
  9596                                  		; put a sanity check for the boot sector in here to detect
  9597                                  		; boot sectors that do not have valid bpbs. we examine the
  9598                                  		; first two bytes - they must contain a long jump (69h) or a
  9599                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9600                                  		; (E9h). if this test is passed, we further check by examining
  9601                                  		; the signature at the end of the boot sector for the word
  9602                                  		; AA55h. if the signature is not present, we examine the media
  9603                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9604                                  		; logic is modified a little bit. we are not going to check
  9605                                  		; signature. instead we are going to sanity check the media
  9606                                  		; byte in bpb regardless of the validity of signature. this is
  9607                                  		; to save the already developed commercial products that have
  9608                                  		; good jump instruction and signature but with the false bpb
  9609                                  		; informations
  9610                                  
  9611                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9612                                  
  9613                                  		; 19/10/2022
  9614 000006B5 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9615 000006BA 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9616 000006BC 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9617 000006C1 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9618 000006C3 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9619 000006C8 7531                    		jnz	short invalidbootsec
  9620 000006CA 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9621 000006CF 752A                    		jnz	short invalidbootsec
  9622                                  
  9623                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9624                                  ;
  9625                                  ;; 10/03/2019
  9626                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9627                                  ;;
  9628                                  ;; Don't have to perform the following signature check since
  9629                                  ;; we need to check the media byte even with the good signatured diskette.
  9630                                  ;;
  9631                                  ;;check_signature:
  9632                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9633                                  ;;							 ; disk or 1.x media.
  9634                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9635                                  ;;					       ; may need some special handling
  9636                                  
  9637                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9638                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9639                                  ; by examining the media descriptor in the boot sector.
  9640                                  
  9641                                  		; 19/10/2022
  9642                                  check_bpb_mediabyte:			
  9643 000006D1 A0[6301]                		mov	al, [disksector+15h]
  9644                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9645 000006D4 24F0                    		and	al, 0F0h
  9646 000006D6 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9647 000006D8 7521                    		jnz	short invalidbootsec
  9648                                  
  9649                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9650                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9651                                  ; sectors. these are specifically diskettes that were formatted in drives
  9652                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9653                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9654                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9655                                  ; help our build bpb routine to recognise these specific cases, and to
  9656                                  ; set up out copy of the bpb accordingly.
  9657                                  ; we do this by checking to see if the boot sector is off a diskette that
  9658                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9659                                  ; sec/clus field to 1. if not, we carry on as normal.
  9660                                  
  9661                                  checksinglesided:
  9662 000006DA A0[6301]                		mov	al, [disksector+15h]
  9663 000006DD 3CF0                    		cmp	al, 0F0h
  9664 000006DF 741B                    		jz	short gooddsk
  9665 000006E1 A801                    		test	al, 1
  9666 000006E3 7517                    		jnz	short gooddsk
  9667 000006E5 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9668 000006EB 7507                    		jnz	short mustbeearlier
  9669 000006ED 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9670 000006F2 7308                    		jnb	short gooddsk
  9671                                  
  9672                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9673                                  
  9674                                  mustbeearlier:				
  9675 000006F4 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9676                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9677 000006F9 EB01                    		jmp	short gooddsk
  9678                                  ; ---------------------------------------------------------------------------
  9679                                  
  9680                                  invalidbootsec:				
  9681 000006FB 43                      		inc	bx		; indicate that boot sector invalid
  9682                                  		; 10/12/2022
  9683                                  movbpb_ret:
  9684                                  gooddsk:				
  9685 000006FC F8                      		clc
  9686                                  err_ret:
  9687 000006FD C3                      		retn
  9688                                  ; ---------------------------------------------------------------------------
  9689                                  
  9690                                  		; 10/12/2022
  9691                                  ;err_ret:				
  9692                                  		;retn
  9693                                  
  9694                                  ; =============== S U B	R O U T	I N E =======================================
  9695                                  
  9696                                  ; 15/10/2022
  9697                                  ; ---------------------------------------------------------------------------
  9698                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9699                                  ; getbp routine at has1
  9700                                  ;
  9701                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9702                                  ; serial number, volume label, file system id in bds according to
  9703                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9704                                  ; to signal that volume label is set already from the extended boot record
  9705                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9706                                  ; the volume label in the root directory.)
  9707                                  ; ---------------------------------------------------------------------------
  9708                                  
  9709                                  ; 10/03/2019 - Retro DOS v4.0
  9710                                  
  9711                                  		; 19/10/2022
  9712                                  movbpb:	
  9713 000006FE 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9714                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9715                                  					; sectors per unit
  9716 00000702 8A3E[5F01]              		mov	bh, [disksector+11h]
  9717                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9718                                  					; number of directory entries
  9719 00000706 8B0E[6101]              		mov	cx, [disksector+13h]
  9720                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9721                                  					; size of drive
  9722 0000070A 8A26[6301]              		mov	ah, [disksector+15h]
  9723                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9724                                  					; media	descriptor
  9725 0000070E A0[6401]                		mov	al, [disksector+16h];
  9726                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9727                                  					; number of fat	sectors
  9728 00000711 8A1E[6601]              		mov	bl, [disksector+18h]
  9729                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9730                                  					; sectors per track
  9731 00000715 8A16[6801]              		mov	dl, [disksector+1Ah]
  9732                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9733                                  					; number of heads
  9734 00000719 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9735 0000071E 75DC                    		jnz	short movbpb_ret
  9736 00000720 E81200                  		call	mov_media_ids
  9737 00000723 7205                    		jb	short movbpb_conv ; conventional boot record?
  9738 00000725 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9739                                  movbpb_conv:				
  9740 0000072A 803E[7700]01            		cmp	byte [fhave96], 1
  9741 0000072F 75CB                    		jnz	short movbpb_ret
  9742 00000731 E8CB11                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9743                                  		; 10/12/2022
  9744                                  		; cf = 0
  9745                                  ;movbpb_ret:				
  9746                                  		;clc
  9747 00000734 C3                      		retn
  9748                                  
  9749                                  ; =============== S U B	R O U T	I N E =======================================
  9750                                  
  9751                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9752                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9753                                  ;by es:di.
  9754                                  
  9755                                  ;in.) es:di -> bds
  9756                                  ;     ds:disksector = valid extended boot record.
  9757                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9758                                  ;      the boot record information.
  9759                                  ;     carry flag set if not an extended bpb.
  9760                                  ;     all registers saved except the flag.
  9761                                  
  9762                                  		; 19/10/2022
  9763                                  mov_media_ids:		
  9764 00000735 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9765                                  					; [disksector+EXT_BOOT.SIG],
  9766                                  					; EXT_BOOT_SIGNATURE
  9767 0000073A 752C                    		jnz	short mmi_not_ext
  9768 0000073C 51                      		push	cx
  9769 0000073D 8B0E[7501]              		mov	cx, [disksector+27h]
  9770                                  					; [disksector+EXT_BOOT.SERIAL]
  9771 00000741 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9772 00000745 8B0E[7701]              		mov	cx, [disksector+29h]
  9773                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9774 00000749 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9775 0000074D 57                      		push	di
  9776 0000074E 56                      		push	si
  9777 0000074F B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9778 00000752 BE[7901]                		mov	si, disksector+2Bh
  9779                                  		;mov	si, (offset disksector+2Bh) ;
  9780                                  					; disksector+EXT_BOOT.VOL_LABEL
  9781 00000755 83C74B                  		add	di, 75		; BDS.volid
  9782 00000758 F3A4                    		rep movsb
  9783                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9784                                  		; 10/12/2022
  9785 0000075A B108                    		mov	cl, 8 ; cx = 8
  9786 0000075C BE[8401]                		mov	si, disksector+36h
  9787                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9788 0000075F 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9789 00000762 F3A4                    		rep movsb
  9790 00000764 5E                      		pop	si
  9791 00000765 5F                      		pop	di
  9792 00000766 59                      		pop	cx
  9793                                  		; 10/12/2022
  9794                                  		; cf = 0
  9795                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9796                                  				; (20/09/2022)
  9797 00000767 C3                      		retn
  9798                                  ; ---------------------------------------------------------------------------
  9799                                  
  9800                                  mmi_not_ext:				
  9801 00000768 F9                      		stc
  9802 00000769 C3                      		retn
  9803                                  
  9804                                  ; =============== S U B	R O U T	I N E =======================================
  9805                                  
  9806                                  ; 15/10/2022
  9807                                  ; --------------------------------------------------------------
  9808                                  ; read in the fat sector and get the media byte from it.
  9809                                  ; input : es:di -> bds
  9810                                  ; output:
  9811                                  ;	  carry set if an error occurs, ax contains error code.
  9812                                  ;	  otherwise, ah contains media byte on exit
  9813                                  ; --------------------------------------------------------------
  9814                                  
  9815                                  readfat:	
  9816                                  		;mov	dh, 0
  9817                                  		; 10/12/2022
  9818 0000076A 30F6                    		xor	dh, dh
  9819 0000076C B90200                  		mov	cx, 2		; head 0
  9820                                  					; cylinder 0, sector 2
  9821 0000076F E80500                  		call	read_sector
  9822 00000772 7202                    		jb	short bad_fat_ret
  9823 00000774 8A27                    		mov	ah, [bx]	; media	byte
  9824                                  bad_fat_ret:				
  9825 00000776 C3                      		retn
  9826                                  
  9827                                  ; =============== S U B	R O U T	I N E =======================================
  9828                                  
  9829                                  ; 15/10/2022
  9830                                  
  9831                                  ; ---------------------------------------------------------------------------
  9832                                  ; read a single sector into the temp buffer.
  9833                                  ; perform three retries in case of error.
  9834                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9835                                  ;		cx has sector and cylinder
  9836                                  ;		dh has head
  9837                                  ;		es:di has bds
  9838                                  ;		ds has Bios_Data
  9839                                  ;
  9840                                  ;   outputs:	carry clear
  9841                                  ;		    Bios_Data:bx point to sector
  9842                                  ;		       (note: some callers assume location of buffer)
  9843                                  ;
  9844                                  ;		carry set
  9845                                  ;		    ax has rom error code
  9846                                  ;
  9847                                  ; register bp is preserved.
  9848                                  ; ---------------------------------------------------------------------------
  9849                                  
  9850                                  ; 10/03/2019 - Retro DOS v4.0
  9851                                  
  9852                                  		; 19/10/2022
  9853                                  read_sector:	
  9854 00000777 55                      		push	bp
  9855 00000778 BD0300                  		mov	bp, 3		; make 3 attempts
  9856 0000077B 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9857 0000077F BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9858                                  rd_ret:					
  9859 00000782 06                      		push	es
  9860 00000783 1E                      		push	ds
  9861 00000784 07                      		pop	es
  9862 00000785 B80102                  		mov	ax, 201h
  9863 00000788 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9864                                  					; AL = number of sectors to read, CH = track, CL = sector
  9865                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9866                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9867 0000078A 07                      		pop	es
  9868 0000078B 734A                    		jnb	short okret2
  9869                                  rd_rty:					
  9870 0000078D E87304                  		call	again		; reset	disk, decrement	bp, preserve ax
  9871 00000790 7442                    		jz	short err_rd_ret
  9872 00000792 26F6452301              		test	byte [es:di+23h], 1
  9873                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9874                                  					; fnon_removable
  9875 00000797 75E9                    		jnz	short rd_ret
  9876 00000799 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9877 0000079E 7510                    		jnz	short rd_skip1_dpt
  9878 000007A0 50                      		push	ax
  9879 000007A1 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9880 000007A2 C536[2D01]              		lds	si, [dpt]
  9881                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9882                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9883                                  		;			; NORMSETTLE
  9884                                  		; 12/12/2022
  9885 000007A6 B00F                    		mov	al, 15
  9886 000007A8 864409                  		xchg	al, [si+9]
  9887                                  		; 
  9888 000007AB 1F                      		pop	ds
  9889 000007AC A2[2A01]                		mov	[save_head_sttl], al
  9890 000007AF 58                      		pop	ax
  9891                                  rd_skip1_dpt:				
  9892 000007B0 06                      		push	es
  9893 000007B1 1E                      		push	ds
  9894 000007B2 07                      		pop	es
  9895 000007B3 B80102                  		mov	ax, 201h
  9896 000007B6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9897                                  					; AL = number of sectors to read, CH = track, CL = sector
  9898                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9899                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9900 000007B8 07                      		pop	es
  9901 000007B9 9C                      		pushf
  9902 000007BA 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9903 000007BF 750E                    		jnz	short rd_skip2_dpt
  9904 000007C1 50                      		push	ax
  9905 000007C2 A0[2A01]                		mov	al, [save_head_sttl]
  9906 000007C5 1E                      		push	ds
  9907 000007C6 C536[2D01]              		lds	si, [dpt]
  9908 000007CA 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9909 000007CD 1F                      		pop	ds
  9910 000007CE 58                      		pop	ax
  9911                                  rd_skip2_dpt:				
  9912 000007CF 9D                      		popf
  9913 000007D0 7305                    		jnb	short okret2
  9914 000007D2 EBB9                    		jmp	short rd_rty
  9915                                  ; ---------------------------------------------------------------------------
  9916                                  
  9917                                  err_rd_ret:				
  9918 000007D4 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9919                                  					; return error
  9920 000007D6 F9                      		stc
  9921                                  
  9922                                  ; update information pertaining to last drive accessed, time of access, last
  9923                                  ; track accessed in that drive.
  9924                                  
  9925                                  okret2:					
  9926 000007D7 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9927 000007DB 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9928 000007DF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9929                                  					; save last track accessed on this drive
  9930                                  					; preserve flags in case error occurred
  9931 000007E3 9C                      		pushf
  9932 000007E4 E8FC03                  		call	set_tim
  9933 000007E7 9D                      		popf			; restore flags
  9934 000007E8 5D                      		pop	bp
  9935 000007E9 C3                      		retn
  9936                                  
  9937                                  ;----------------------------------------------------------------------------
  9938                                  ;	disk open/close routines
  9939                                  ;----------------------------------------------------------------------------
  9940                                  
  9941                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9942 000007EA 803E[7700]00            		cmp	byte [fhave96], 0
  9943 000007EF 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9944 000007F1 E8D7FC                  		call	SetDrive	; get bds for drive
  9945 000007F4 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9946                                  dsk_open_exit:	
  9947                                  		; 10/12/2022
  9948                                  		; cf = 0			
  9949                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9950                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9951 000007F8 C3                      		retn
  9952                                  ; ---------------------------------------------------------------------------
  9953                                  
  9954                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9955 000007F9 803E[7700]00            		cmp	byte [fhave96], 0
  9956 000007FE 740E                    		jz	short exitjx	; done if no changeline	support
  9957 00000800 E8C8FC                  		call	SetDrive	; get bds for drive
  9958 00000803 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9959 00000808 7404                    		jz	short exitjx	; watch	out for	wrap
  9960 0000080A 26FF4D20                		dec	word [es:di+20h]
  9961                                  exitjx:					
  9962                                  		; 10/12/2022
  9963                                  		; cf = 0
  9964                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9965                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9966 0000080E C3                      		retn
  9967                                  
  9968                                  ;----------------------------------------------------------------------------
  9969                                  ;		disk removable routine
  9970                                  ;----------------------------------------------------------------------------
  9971                                  
  9972                                  		; al is	unit #
  9973                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9974 0000080F E8B9FC                  		call	SetDrive	; get bds for this drive
  9975                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9976 00000812 26F6452301              		test	byte [es:di+23h], 1
  9977                                  		;jnz	short x_bus_exit ; non_rem
  9978 00000817 7501                    		jnz	short non_rem	; 15/10/2022
  9979                                  		; 10/12/2022
  9980                                  		; cf = 0
  9981                                  		;clc			; CF is already ZERO here
  9982                                  					; 15/10/2022
  9983 00000819 C3                      		retn
  9984                                  ; ---------------------------------------------------------------------------
  9985                                  
  9986                                  non_rem:
  9987                                  x_bus_exit:				
  9988 0000081A B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9989                                  					; return busy status
  9990 0000081C F9                      		stc
  9991                                  dsk_ret:				
  9992 0000081D C3                      		retn
  9993                                  
  9994                                  ;----------------------------------------------------------------------------
  9995                                  ;		disk i/o routines
  9996                                  ;----------------------------------------------------------------------------
  9997                                  
  9998                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9999                                  		;mov	word [wrtverify], 103h
 10000                                  		; 19/10/2022
 10001 0000081E C706[2001]0301          		mov	word [rflag], 103h
 10002                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10003 00000824 EB06                    		jmp	short dsk_cl
 10004                                  ; ---------------------------------------------------------------------------
 10005                                  
 10006                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10007                                  		;mov	word [wrtverify], 3
 10008                                  		; 19/10/2022
 10009 00000826 C706[2001]0300          		mov	word [rflag], 3
 10010                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10011                                  
 10012                                  dsk_cl:					
 10013 0000082C E89800                  		call	diskio		; romwrite
 10014                                  ; ---------------------------------------------------------------------------
 10015                                  
 10016                                  dsk_io:					
 10017 0000082F 73EC                    		jnb	short dsk_ret
 10018 00000831 E9A3F8                  		jmp	bc_err_cnt
 10019                                  ; ---------------------------------------------------------------------------
 10020                                  
 10021                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10022 00000834 E88B00                  		call	diskrd
 10023 00000837 EBF6                    		jmp	short dsk_io
 10024                                  
 10025                                  ; =============== S U B	R O U T	I N E =======================================
 10026                                  
 10027                                  ; 15/10/2022
 10028                                  ; 10/03/2019 - Retro DOS v4.0
 10029                                  
 10030                                  ;-----------------------------------------------------------
 10031                                  ; miscellaneous odd jump routines. 
 10032                                  ; moved out of mainline for speed.
 10033                                  
 10034                                  ; if we have a system where we have virtual drives, we need 
 10035                                  ; to prompt the user to place the correct disk in the drive.
 10036                                  ;
 10037                                  ;	assume es:di -> bds, ds:->Bios_Data
 10038                                  ;-----------------------------------------------------------
 10039                                  
 10040                                  		; 19/10/2022
 10041                                  checksingle:		
 10042 00000839 50                      		push	ax
 10043 0000083A 53                      		push	bx
 10044 0000083B 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10045                                  
 10046                                  ; if hard drive, cannot change disk.
 10047                                  ; if current owner of physical drive, no need to change diskette.
 10048                                  
 10049 0000083F F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10050 00000842 7573                    		jnz	short singleret
 10051 00000844 F6C310                  		test	bl, 10h		; fi_am_mult
 10052                                  					; is there a drive sharing this	physical drive?
 10053 00000847 746E                    		jz	short singleret
 10054                                  
 10055                                  
 10056                                  ; look for the previous owner of this physical drive
 10057                                  ; and reset its ownership flag.
 10058                                  
 10059 00000849 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10060                                  					; get physical drive number
 10061 0000084D 06                      		push	es		; preserve pointer to current bds
 10062 0000084E 57                      		push	di
 10063 0000084F C43E[1901]              		les	di, [start_bds] ; get first bds
 10064                                  scan_list:				
 10065 00000853 26384504                		cmp	[es:di+4], al
 10066 00000857 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10067 00000859 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10068 0000085B 26845D23                		test	[es:di+23h], bl
 10069 0000085F 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10070 00000861 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10071 00000865 5F                      		pop	di		; restore pointer to current bds
 10072 00000866 07                      		pop	es
 10073 00000867 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10074                                  
 10075                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10076                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10077                                  ; in this case.
 10078 0000086B 803E[7A00]01            		cmp	byte [fsetowner], 1
 10079 00000870 7517                    		jnz	short not_fsetowner
 10080                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10081 00000872 26807D0400              		cmp	byte [es:di+4], 0
 10082 00000877 753E                    		jnz	short singleret
 10083 00000879 268A4505                		mov	al, [es:di+5]
 10084                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10085                                  					; get the DOS drive letter
 10086 0000087D 06                      		push	es
 10087 0000087E 8E06[1A00]              		mov	es, [zeroseg]
 10088 00000882 26A20405                		mov	[es:LSTDRV], al
 10089                                  		;mov	es:504h, al	; [es:LSTDRV]
 10090                                  					; set up sdsb
 10091 00000886 07                      		pop	es		; restore bds pointer
 10092 00000887 EB2E                    		jmp	short singleret
 10093                                  ; ---------------------------------------------------------------------------
 10094                                  
 10095                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10096                                  ; we now check to see if we are in a single drive system and the application
 10097                                  ; has "cleverly" diddled the sdsb
 10098                                  
 10099                                  not_fsetowner:				
 10100 00000889 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10101 0000088E 7517                    		jnz	short ignore_sdsb
 10102 00000890 50                      		push	ax
 10103 00000891 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10104 00000895 88C4                    		mov	ah, al
 10105 00000897 06                      		push	es
 10106 00000898 8E06[1A00]              		mov	es, [zeroseg]
 10107 0000089C 2686060405              		xchg	al, [es:LSTDRV]
 10108                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10109                                  					; then swap(curr_drv,req_drv)
 10110 000008A1 07                      		pop	es
 10111 000008A2 38C4                    		cmp	ah, al		; else
 10112 000008A4 58                      		pop	ax		; swap(curr_drv,req_drv)
 10113 000008A5 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10114                                  ignore_sdsb:				
 10115 000008A7 E8770E                  		call	swpdsk
 10116 000008AA EB0B                    		jmp	short singleret
 10117                                  ; ---------------------------------------------------------------------------
 10118                                  
 10119                                  scan_skip:	
 10120 000008AC 26C43D                  		les	di, [es:di]			
 10121                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10122                                  					; go to	next bds
 10123 000008AF 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10124 000008B2 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10125 000008B4 F9                      		stc
 10126 000008B5 5F                      		pop	di		; restore current bds
 10127 000008B6 07                      		pop	es
 10128                                  
 10129                                  singleret:				
 10130 000008B7 5B                      		pop	bx
 10131 000008B8 58                      		pop	ax
 10132 000008B9 C3                      		retn
 10133                                  
 10134                                  ; ---------------------------------------------------------------------------
 10135                                  
 10136                                  baddrive:				
 10137 000008BA B008                    		mov	al, 8		; sector not found
 10138 000008BC EB02                    		jmp	short baddrive_ret
 10139                                  ; ---------------------------------------------------------------------------
 10140                                  
 10141                                  unformatteddrive:				
 10142 000008BE B007                    		mov	al, 7		; unknown media
 10143                                  baddrive_ret:				
 10144 000008C0 F9                      		stc
 10145                                  ; ---------------------------------------------------------------------------
 10146                                  
 10147                                  ioret:		
 10148 000008C1 C3                      		retn
 10149                                  
 10150                                  ; ---------------------------------------------------------------------------
 10151                                  
 10152                                  ; 15/10/2022
 10153                                  
 10154                                  ; ---------------------------------------------------------------------------
 10155                                  ;	disk i/o handler
 10156                                  ;
 10157                                  ;	al = drive number (0-6)
 10158                                  ;	ah = media descriptor
 10159                                  ;	cx = sector count
 10160                                  ;	dx = first sector (low)
 10161                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10162                                  ;	ds = cs
 10163                                  ;	es:di = transfer address
 10164                                  ;	[rflag]=operation (2=read, 3=write)
 10165                                  ;	[verify]=1 for verify after write
 10166                                  ;
 10167                                  ;	if successful carry flag = 0
 10168                                  ;	  else cf=1 and al contains error code
 10169                                  ; ---------------------------------------------------------------------------
 10170                                  
 10171                                  diskrd:	
 10172                                  		;mov	ds:rflag, 2	; romread
 10173                                  		; 19/10/2022
 10174 000008C2 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10175                                  
 10176                                  ; =============== S U B	R O U T	I N E =======================================
 10177                                  
 10178                                  		; 19/10/2022
 10179                                  diskio:
 10180 000008C7 89FB                    		mov	bx, di		; es:bx	= transfer address
 10181 000008C9 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10182 000008CD E8FBFB                  		call	SetDrive
 10183 000008D0 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10184 000008D4 A2[1F01]                		mov	[medbyt], al
 10185                                  		;jcxz	short ioret
 10186 000008D7 E3E8                    		jcxz	ioret
 10187                                  
 10188                                  ; see if the media is formatted or not by checking the flags field in
 10189                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10190                                  ; go to the error exit at label unformatteddrive.
 10191                                  
 10192 000008D9 26F6452402              		test	byte [es:di+24h], 2
 10193                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10194                                  					; unformatted_media
 10195 000008DE 75DE                    		jnz	short unformatteddrive
 10196 000008E0 890E[2201]              		mov	[seccnt], cx	; save sector count
 10197 000008E4 8926[3501]              		mov	[spsav], sp	; save sp
 10198                                  
 10199                                  ; ensure that we are trying to access valid sectors on the drive
 10200                                  
 10201 000008E8 89D0                    		mov	ax, dx
 10202 000008EA 31F6                    		xor	si, si
 10203 000008EC 01CA                    		add	dx, cx
 10204 000008EE 83D600                  		adc	si, 0
 10205 000008F1 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10206                                  					; > 32 bit sector ?
 10207 000008F6 740D                    		jz	short sanity32
 10208 000008F8 83FE00                  		cmp	si, 0
 10209 000008FB 75BD                    		jnz	short baddrive
 10210 000008FD 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10211 00000901 77B7                    		ja	short baddrive
 10212 00000903 EB12                    		jmp	short sanityok
 10213                                  ; ---------------------------------------------------------------------------
 10214                                  
 10215                                  sanity32:				
 10216 00000905 0336[2B05]              		add	si, [start_sec_h]
 10217 00000909 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10218 0000090D 7208                    		jb	short sanityok
 10219 0000090F 77A9                    		ja	short baddrive
 10220 00000911 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10221 00000915 77A3                    		ja	short baddrive
 10222                                  
 10223                                  sanityok:				
 10224 00000917 8B16[2B05]              		mov	dx, [start_sec_h]
 10225 0000091B 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10226 0000091F 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10227                                  
 10228                                  ; now dx;ax have the physical first sector.
 10229                                  ; since the following procedures is going to destroy ax, let's
 10230                                  ; save it temporarily to saved_word.
 10231                                  
 10232 00000923 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10233                                  
 10234                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10235                                  ; will do it because we will skip the set up stuff with hard disks.
 10236                                  
 10237 00000926 06                      		push	es
 10238 00000927 8E06[1A00]              		mov	es, [zeroseg]
 10239 0000092B 26C4367800              		les	si, [es:DSKADR]
 10240                                  		;les	si, es:78h	; [es:DSKADR]
 10241                                  					; current disk parm table
 10242 00000930 8936[2D01]              		mov	[dpt], si
 10243 00000934 8C06[2F01]              		mov	[dpt+2], es
 10244 00000938 07                      		pop	es
 10245 00000939 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10246                                  					; fnon_removable
 10247 0000093E 7510                    		jnz	short skip_setup
 10248 00000940 E8F6FE                  		call	checksingle
 10249                                  
 10250                                  ; check to see if we have previously noted a change line. the routine
 10251                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10252                                  ; the proper error code.
 10253                                  
 10254 00000943 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10255 00000948 7403                    		jz	short diskio_nochangeline ; brif not
 10256 0000094A E8A20E                  		call	checklatchio	; will do a sneaky pop stack return
 10257                                  					; if a disk error occurs
 10258                                  diskio_nochangeline:			
 10259 0000094D E84700                  		call	iosetup		; set up tables	and variables for i/o
 10260                                  
 10261                                  ; now the settle values are correct for the following code
 10262                                  
 10263                                  skip_setup:
 10264                                  
 10265                                  ; 32 bit sector calculation.
 10266                                  ; dx:[saved_word] = starting sector number.
 10267                                  				
 10268 00000950 89D0                    		mov	ax, dx
 10269 00000952 31D2                    		xor	dx, dx
 10270 00000954 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10271                                  					 ; divide by sec per track
 10272 00000958 A3[2905]                		mov	[temp_h], ax
 10273 0000095B A1[2D05]                		mov	ax, [saved_word]
 10274 0000095E 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10275                                  					; now, [temp_h]:ax = track #, dx = sector
 10276                                  		;inc	dl		; sector number	is 1 based.
 10277                                  		; 18/12/2022
 10278 00000962 42                      		inc	dx
 10279 00000963 8816[3101]              		mov	[cursec], dl	; save current sector
 10280 00000967 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10281                                  					; get number of	heads
 10282 0000096B 50                      		push	ax
 10283 0000096C 31D2                    		xor	dx, dx
 10284 0000096E A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10285 00000971 F7F1                    		div	cx
 10286 00000973 A3[2905]                		mov	[temp_h], ax
 10287 00000976 58                      		pop	ax
 10288 00000977 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10289 00000979 833E[2905]00            		cmp	word [temp_h], 0
 10290 0000097E 7714                    		ja	short baddrive_brdg
 10291 00000980 3D0004                  		cmp	ax, 1024	; 2^10 currently maximum for track #.
 10292 00000983 770F                    		ja	short baddrive_brdg
 10293 00000985 8816[3201]              		mov	[curhd], dl	; save current head
 10294 00000989 A3[3301]                		mov	[curtrk], ax	; save current track
 10295                                  
 10296                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10297                                  ; violations here. not true. we perform the operation as if everything is
 10298                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10299                                  
 10300 0000098C A1[2201]                		mov	ax, [seccnt]
 10301 0000098F E88100                  		call	block		; (cas - call/ret)
 10302                                  		;call	done
 10303                                  		;retn
 10304                                  		; 18/12/2022
 10305 00000992 EB48                    		jmp	done
 10306                                  
 10307                                  ; ---------------------------------------------------------------------------
 10308                                  
 10309                                  baddrive_brdg:
 10310 00000994 E923FF                  		jmp	baddrive
 10311                                  
 10312                                  ; =============== S U B	R O U T	I N E =======================================
 10313                                  
 10314                                  ;--------------------------------------------------------------
 10315                                  ; set the drive-last-accessed flag for diskette only.
 10316                                  ; we know that the hard disk will not be removed.
 10317                                  ; es:di -> current bds.
 10318                                  ; ds -> Bios_Data
 10319                                  ; ax,cx,si are destroyed.
 10320                                  ;--------------------------------------------------------------
 10321                                  
 10322                                  		; 23/12/2023
 10323                                  		; 19/10/2022
 10324                                  iosetup:
 10325 00000997 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10326 0000099B A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10327                                  
 10328                                  ; determine proper head settle values
 10329                                  
 10330 0000099E 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10331 000009A3 7536                    		jnz	short skip_dpt_setting
 10332 000009A5 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10333 000009A8 1E                      		push	ds
 10334 000009A9 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10335 000009AD 884404                  		mov	[si+4],	al
 10336                                  		
 10337                                  		;; 23/12/2023
 10338                                  		;mov	ah, al
 10339                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10340                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10341                                  		;pop	ds
 10342                                  		;mov	[motorstartup], al
 10343                                  		;mov	[save_eot], ah
 10344                                  		; 07/04/2024
 10345 000009B0 8A640A                  		mov	ah,[si+10]
 10346 000009B3 1F                      		pop	ds
 10347 000009B4 8826[2601]              		mov	[motorstartup], ah
 10348 000009B8 A2[2B01]                		mov	[save_eot], al
 10349                                  
 10350                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10351                                  ; motor start time to 4. this checking for every i/o is going to affect
 10352                                  ; performance across the board, but is necessary!!
 10353                                  
 10354 000009BB 1E                      		push	ds
 10355 000009BC C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10356 000009C0 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10357                                  					; ffSmall
 10358 000009C5 7505                    		jnz	short motor_start_ok
 10359 000009C7 B004                    		mov	al, 4
 10360 000009C9 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10361                                  motor_start_ok:
 10362                                  
 10363                                  ; ds:si now points to disk parameter table.
 10364                                  ; get current settle and set fast settle
 10365                                  
 10366                                  		;xor	al, al
 10367                                  		;inc	al		; ibm wants fast settle	to be 1
 10368                                  		; 18/12/2022
 10369 000009CC 31C0                    		xor	ax, ax
 10370 000009CE 40                      		inc	ax
 10371 000009CF 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10372                                  					; get settle and set up	for fast
 10373 000009D2 1F                      		pop	ds
 10374 000009D3 A2[2701]                		mov	[settlecurrent], al
 10375 000009D6 B00F                    		mov	al, 15		; NORMSETTLE
 10376                                  					; someone has diddled the settle
 10377 000009D8 A2[2801]                		mov	[settleslow], al
 10378                                  skip_dpt_setting:
 10379 000009DB C3                      		retn
 10380                                  
 10381                                  ; =============== S U B	R O U T	I N E =======================================
 10382                                  
 10383                                  ;--------------------------------------------------------------
 10384                                  ; set time of last access, and reset default values in the dpt.
 10385                                  ;
 10386                                  ;	  note: trashes (at least) si
 10387                                  ;--------------------------------------------------------------
 10388                                  
 10389                                  		; 19/10/2022
 10390                                  done:
 10391 000009DC 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10392                                  					; fnon_removable
 10393 000009E1 752F                    		jnz	short ddbx	; do not set for non-removable media
 10394 000009E3 E8FD01                  		call	set_tim
 10395                                  ;diddleback:
 10396                                  ; 09/12/2022
 10397                                  diddle_back:				
 10398 000009E6 9C                      		pushf
 10399 000009E7 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10400 000009EC 7523                    		jnz	short nodiddleback
 10401 000009EE 50                      		push	ax
 10402 000009EF 06                      		push	es
 10403 000009F0 C436[2D01]              		les	si, [dpt]
 10404 000009F4 A0[2B01]                		mov	al, [save_eot]
 10405 000009F7 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10406 000009FB A0[2701]                		mov	al, [settlecurrent]
 10407 000009FE 8A26[2601]              		mov	ah, [motorstartup]
 10408 00000A02 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10409 00000A06 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10410 00000A0B 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10411 00000A0F 07                      		pop	es
 10412 00000A10 58                      		pop	ax
 10413                                  nodiddleback:				
 10414 00000A11 9D                      		popf
 10415                                  ddbx:					
 10416 00000A12 C3                      		retn
 10417                                  
 10418                                  ; =============== S U B	R O U T	I N E =======================================
 10419                                  
 10420                                  ;--------------------------------------------------------------
 10421                                  ;read the number of sectors specified in ax, 
 10422                                  ;handling track boundaries
 10423                                  ;es:di -> bds for this drive
 10424                                  ;--------------------------------------------------------------
 10425                                  
 10426                                  		 ; 19/10/2022
 10427                                  block:	
 10428 00000A13 09C0                    		or	ax, ax
 10429 00000A15 74FB                    		jz	short ddbx
 10430 00000A17 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10431                                  					; fnon_removable
 10432 00000A1C 740D                    		jz	short block_floppy ;
 10433                                  
 10434                                  ; check	to see if multi	track operation	is allowed. if not
 10435                                  ; we have to go	to the block_floppy below to break up the operation.
 10436                                  
 10437 00000A1E F606[2F05]80            		test	byte [multrk_flag], 80h
 10438                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10439 00000A23 7406                    		jz	short block_floppy
 10440 00000A25 E82900                  		call	Disk
 10441 00000A28 31C0                    		xor	ax, ax
 10442 00000A2A C3                      		retn
 10443                                  ; ---------------------------------------------------------------------------
 10444                                  
 10445                                  block_floppy:
 10446                                  
 10447                                  ; read at most 1 track worth. perform minimization at sector / track
 10448                                  				
 10449 00000A2B 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10450 00000A2F FEC1                    		inc	cl
 10451 00000A31 2A0E[3101]              		sub	cl, [cursec]
 10452 00000A35 30ED                    		xor	ch, ch
 10453 00000A37 39C8                    		cmp	ax, cx
 10454 00000A39 7302                    		jnb	short gotmin
 10455 00000A3B 89C1                    		mov	cx, ax
 10456                                  
 10457                                  gotmin:
 10458                                  
 10459                                  ; ax is the requested number of sectors to read
 10460                                  ; cx is the number that we can do on this track
 10461                                  					
 10462 00000A3D 50                      		push	ax
 10463 00000A3E 51                      		push	cx
 10464 00000A3F 89C8                    		mov	ax, cx
 10465 00000A41 E80D00                  		call	Disk
 10466 00000A44 59                      		pop	cx
 10467 00000A45 58                      		pop	ax
 10468                                  
 10469                                  ; cx is the number of sectors just transferred
 10470                                  
 10471 00000A46 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10472 00000A48 D0E1                    		shl	cl, 1
 10473 00000A4A 00CF                    		add	bh, cl		; adjust transfer address
 10474 00000A4C EBC5                    		jmp	short block
 10475                                  dskerr_brdg:				
 10476 00000A4E E9EC00                  		jmp	dskerr
 10477                                  
 10478                                  ; =============== S U B	R O U T	I N E =======================================
 10479                                  
 10480                                  ; 15/10/2022
 10481                                  
 10482                                  ;--------------------------------------------------------------
 10483                                  ;perform disk i/o with retries
 10484                                  ; al = number of sectors (1-8, all on one track)
 10485                                  ; es:di point to drive parameters
 10486                                  ; xfer_seg:bx = transfer address 
 10487                                  ;		(must not cross a 64k physical boundary)
 10488                                  ; [rflag] = 2 if read, 3 if write
 10489                                  ; [verify] = 0 for normal, 1 for verify after write
 10490                                  ;--------------------------------------------------------------
 10491                                  
 10492                                  		; 19/10/2022
 10493                                  Disk:
 10494                                  
 10495                                  ; Check for hard disk format and
 10496                                  ; if TRUE then set max error count to 2
 10497                                  
 10498 00000A51 BD0500                  		mov	bp, 5		; MAXERR
 10499                                  					; set up retry count
 10500 00000A54 26F6452301              		test	byte [es:di+23h], 1	;
 10501                                  					; [es:di+BDS.flags], fnon_removable
 10502 00000A59 7408                    		jz	short GetRdWrInd
 10503 00000A5B 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10504 00000A5E 7403                    		jz	short GetRdWrInd
 10505 00000A60 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10506                                  GetRdWrInd:				
 10507 00000A63 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10508 00000A67 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10509 00000A6B 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10510                                  ;retry:
 10511                                  ; 09/12/2022
 10512                                  _retry:					
 10513 00000A6F 50                      		push	ax
 10514 00000A70 8B16[3301]              		mov	dx, [curtrk]
 10515 00000A74 26F6452301              		test	byte [es:di+23h], 1
 10516 00000A79 740B                    		jz	short disk_not_mini
 10517 00000A7B 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10518                                  					; is this a mini disk? ((logical dos partition))
 10519 00000A80 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10520 00000A82 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10521                                  					; add hidden trks.
 10522                                  disk_not_mini:				
 10523 00000A86 D0CE                    		ror	dh, 1
 10524 00000A88 D0CE                    		ror	dh, 1
 10525 00000A8A 0A36[3101]              		or	dh, [cursec]
 10526 00000A8E 89D1                    		mov	cx, dx
 10527 00000A90 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10528 00000A92 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10529 00000A96 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10530                                  					; [es:di+BDS.drivenum]
 10531 00000A9A 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10532 00000A9F 7413                    		jz	short do_fast	; hard files use fast speed
 10533                                  
 10534                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10535                                  ; this helps when we have just done a reset disk operation and the head has
 10536                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10537                                  
 10538 00000AA1 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10539 00000AA6 740A                    		jz	short do_writej
 10540 00000AA8 80FC02                  		cmp	ah, 2		; romread
 10541 00000AAB 7407                    		jz	short do_fast
 10542 00000AAD 80FC04                  		cmp	ah, 4		; romverify
 10543 00000AB0 7402                    		jz	short do_fast
 10544                                  do_writej:	
 10545                                  
 10546                                  ; reads always fast, unless we have just done a disk reset operation
 10547                                  			
 10548 00000AB2 EB56                    		jmp	short do_write	; reads	always fast
 10549                                  ; ---------------------------------------------------------------------------
 10550                                  
 10551                                  do_fast:				
 10552 00000AB4 E8FC00                  		call	fastspeed	; change settle	mode
 10553                                  
 10554                                  testerr:				
 10555 00000AB7 7295                    		jb	short dskerr_brdg
 10556                                  
 10557                                  ; set drive and track of last access
 10558                                  
 10559 00000AB9 8816[7600]              		mov	[step_drv], dl
 10560 00000ABD 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10561                                  no_set:
 10562                                  		;cmp	word [wrtverify], 103h
 10563 00000AC1 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10564 00000AC7 7452                    		jz	short doverify
 10565                                  noverify:				
 10566 00000AC9 58                      		pop	ax
 10567                                  
 10568                                  ; check the flags word in the bds to see if the drive is non removable
 10569                                  ; if not we needn't do anything special
 10570                                  ; if it is a hard disk then check to see if multi-track operation
 10571                                  ; is specified. if specified we don't have to calculate for the next
 10572                                  ; track since we are already done. so we can go to the exit of this routine.
 10573                                  
 10574 00000ACA 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10575                                  					; fnon_removable
 10576 00000ACF 7407                    		jz	short its_removable
 10577 00000AD1 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10578 00000AD6 7530                    		jnz	short disk_ret
 10579                                  its_removable:				
 10580 00000AD8 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10581 00000ADB 30E4                    		xor	ah, ah
 10582 00000ADD 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10583 00000AE1 00C1                    		add	cl, al
 10584 00000AE3 880E[3101]              		mov	[cursec], cl
 10585 00000AE7 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10586                                  					; see if sector/track limit reached
 10587 00000AEB 761B                    		jbe	short disk_ret
 10588 00000AED C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10589 00000AF2 8A36[3201]              		mov	dh, [curhd]
 10590 00000AF6 FEC6                    		inc	dh
 10591 00000AF8 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10592 00000AFC 7206                    		jb	short noxor
 10593 00000AFE 30F6                    		xor	dh, dh
 10594 00000B00 FF06[3301]              		inc	word [curtrk]
 10595                                  noxor:					
 10596 00000B04 8836[3201]              		mov	[curhd], dh
 10597                                  disk_ret:				
 10598 00000B08 F8                      		clc
 10599 00000B09 C3                      		retn
 10600                                  ; ---------------------------------------------------------------------------
 10601                                  
 10602                                  ; 15/10/2022
 10603                                  
 10604                                  ;--------------------------------------------------------------
 10605                                  ; the request is for write. determine if we are talking about
 10606                                  ; the same track and drive. if so, use the fast speed.
 10607                                  ;--------------------------------------------------------------
 10608                                  
 10609                                  do_write:				
 10610 00000B0A 3A16[7600]              		cmp	dl, [step_drv]
 10611 00000B0E 7506                    		jnz	short do_norm	; we have changed drives
 10612 00000B10 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10613 00000B14 749E                    		jz	short do_fast	; we are still on the same track
 10614                                  
 10615                                  do_norm:				
 10616 00000B16 E87500                  		call	normspeed
 10617 00000B19 EB9C                    		jmp	short testerr
 10618                                  ; ---------------------------------------------------------------------------
 10619                                  
 10620                                  ;--------------------------------------------------------------
 10621                                  ; we have a verify request also. get state info and go verify
 10622                                  ;--------------------------------------------------------------
 10623                                  
 10624                                  doverify:				
 10625 00000B1B 58                      		pop	ax
 10626 00000B1C 50                      		push	ax
 10627 00000B1D B404                    		mov	ah, 4
 10628 00000B1F E89100                  		call	fastspeed
 10629 00000B22 73A5                    		jnb	short noverify
 10630                                  
 10631                                  ; check the error returned in ah to see if it is a soft ecc error.
 10632                                  ; if it is not we needn't do anything special. if it is a soft
 10633                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10634                                  ; this retry count becomes 0 then we just ignore the error and go to
 10635                                  ; no_verify but if we can still try then we call the routine to reset
 10636                                  ; the disk and go to dskerr1 to retry the operation.
 10637                                  
 10638 00000B24 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10639 00000B27 750B                    		jnz	short not_softecc_err
 10640 00000B29 FF0E[3405]              		dec	word [soft_ecc_cnt]
 10641 00000B2D 749A                    		jz	short noverify	; no more retry
 10642 00000B2F E84405                  		call	ResetDisk	; reset	disk
 10643 00000B32 EB3E                    		jmp	short dskerr1	; retry
 10644                                  ; ---------------------------------------------------------------------------
 10645                                  
 10646                                  not_softecc_err:			; other error.			
 10647 00000B34 E83F05                  		call	ResetDisk
 10648 00000B37 FF0E[3205]              		dec	word [vretry_cnt]
 10649 00000B3B EB1C                    		jmp	short dskerr0
 10650                                  ; ---------------------------------------------------------------------------
 10651                                  
 10652                                  ;--------------------------------------------------------------
 10653                                  ; need to special case the change-line error ah=06h.
 10654                                  ; if we get this, we need to return it.
 10655                                  ;--------------------------------------------------------------
 10656                                  
 10657                                  dskerr:					
 10658 00000B3D 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10659 00000B42 7403                    		jz	short dskerr_nochangeline ; brif not
 10660 00000B44 E81C0D                  		call	checkio
 10661                                  dskerr_nochangeline:			
 10662 00000B47 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10663 00000B4C 7508                    		jnz	short dochkagain ; no more retry.
 10664 00000B4E BD0100                  		mov	bp, 1
 10665 00000B51 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10666                                  dochkagain:				
 10667 00000B56 E8AA00                  		call	again
 10668                                  dskerr0:				
 10669 00000B59 7420                    		jz	short harderr
 10670 00000B5B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10671                                  					; fnon_removable
 10672 00000B60 7505                    		jnz	short skip_timeout_chk
 10673 00000B62 80FC80                  		cmp	ah, 80h		; timeout?
 10674 00000B65 7414                    		jz	short harderr
 10675                                  skip_timeout_chk:			
 10676 00000B67 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10677 00000B6A 740A                    		jz	short write_fault_err ;	then, don't retry.
 10678 00000B6C C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10679                                  					; set soft_ecc_cnt back	to maxerr
 10680                                  dskerr1:				
 10681 00000B72 58                      		pop	ax		; restore sector count
 10682                                  		;jmp	retry
 10683                                  		; 09/12/2022
 10684 00000B73 E9F9FE                  		jmp	_retry
 10685                                  ; ---------------------------------------------------------------------------
 10686                                  
 10687                                  write_fault_err:			
 10688 00000B76 BD0100                  		mov	bp, 1		; just retry only once
 10689                                  					; for write fault error.
 10690 00000B79 EBF7                    		jmp	short dskerr1
 10691                                  
 10692                                  		; fall into harderr
 10693                                  ; ---------------------------------------------------------------------------
 10694                                  
 10695                                  ; entry point for routines that call maperror themselves
 10696                                  
 10697                                  harderr:				
 10698 00000B7B E84D00                  		call	maperror
 10699                                  harderr2:				
 10700 00000B7E C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10701                                  					; force a media check through rom
 10702 00000B83 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10703 00000B87 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10704                                  
 10705                                  ; since we are performing a non-local goto, restore the disk parameters
 10706                                  
 10707                                  		;jmp	diddleback
 10708                                  		; 09/12/2022
 10709 00000B8B E958FE                  		jmp	diddle_back
 10710                                  
 10711                                  ; =============== S U B	R O U T	I N E =======================================
 10712                                  
 10713                                  ; change settle value from settlecurrent to whatever is appropriate
 10714                                  ; note that this routine is never called for a fixed disk.
 10715                                  
 10716                                  		; 19/10/2022
 10717                                  normspeed:
 10718 00000B8E 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10719 00000B93 751E                    		jnz	short fastspeed
 10720 00000B95 06                      		push	es
 10721 00000B96 50                      		push	ax
 10722 00000B97 A0[2801]                		mov	al, [settleslow]
 10723 00000B9A C436[2D01]              		les	si, [dpt]	; current disk parm table
 10724 00000B9E 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10725 00000BA2 58                      		pop	ax
 10726 00000BA3 07                      		pop	es
 10727 00000BA4 E80C00                  		call	fastspeed
 10728 00000BA7 06                      		push	es
 10729 00000BA8 C436[2D01]              		les	si, [dpt]
 10730 00000BAC 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10731                                  					; 1 is fast settle value
 10732 00000BB1 07                      		pop	es
 10733 00000BB2 C3                      		retn
 10734                                  
 10735                                  ; =============== S U B	R O U T	I N E =======================================
 10736                                  
 10737                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10738                                  ; partition is > 16 bits, then always return drive not ready.
 10739                                  
 10740                                  fastspeed:		
 10741 00000BB3 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10742                                  					; ftoobig
 10743 00000BB8 750D                    		jnz	short notready
 10744 00000BBA 06                      		push	es
 10745 00000BBB 8E06[3705]              		mov	es, [xfer_seg]
 10746 00000BBF CD13                    		int	13h		; DISK -
 10747 00000BC1 8C06[3705]              		mov	[xfer_seg], es
 10748 00000BC5 07                      		pop	es
 10749 00000BC6 C3                      		retn
 10750                                  ; ---------------------------------------------------------------------------
 10751                                  
 10752                                  notready:				
 10753 00000BC7 F9                      		stc
 10754 00000BC8 B480                    		mov	ah, 80h
 10755 00000BCA C3                      		retn
 10756                                  
 10757                                  ; =============== S U B	R O U T	I N E =======================================
 10758                                  
 10759                                  ; map error returned by rom in ah into corresponding code to be returned to
 10760                                  ; dos in al. trashes di. guaranteed to set carry.
 10761                                  
 10762                                  maperror:	
 10763 00000BCB 51                      		push	cx
 10764 00000BCC 06                      		push	es
 10765 00000BCD 1E                      		push	ds		; set es=Bios_Data
 10766 00000BCE 07                      		pop	es
 10767 00000BCF 88E0                    		mov	al, ah		; put error code in al
 10768 00000BD1 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10769 00000BD4 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10770                                  					; number of possible error conditions
 10771 00000BD7 BF[3C01]                		mov	di, errin	; point to error conditions
 10772 00000BDA F2AE                    		repne scasb
 10773                                  		; 10/12/2022
 10774 00000BDC 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10775                                  					; get translation
 10776                                  		; 19/10/2022 - Temporary ! 
 10777                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10778 00000BDF 07                      		pop	es
 10779 00000BE0 59                      		pop	cx
 10780 00000BE1 F9                      		stc			; flag error condition
 10781 00000BE2 C3                      		retn
 10782                                  
 10783                                  ; =============== S U B	R O U T	I N E =======================================
 10784                                  
 10785                                  ; set the time of last access for this drive.
 10786                                  ; this is done only for removable media. es:di -> bds
 10787                                  
 10788                                  set_tim:		
 10789 00000BE3 50                      		push	ax
 10790 00000BE4 E893F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10791                                  
 10792                                  ; we have the new time. if we see that the time has passed,
 10793                                  ; then we reset the threshold counter...
 10794                                  
 10795 00000BE7 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10796 00000BEB 7506                    		jnz	short setaccess
 10797 00000BED 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10798                                  		;jz	short done_set
 10799                                  		; 12/12/2022
 10800 00000BF1 740E                    		je	short done_set2
 10801                                  setaccess:				
 10802 00000BF3 C606[1D01]00            		mov	byte [accesscount], 0
 10803 00000BF8 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10804 00000BFC 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10805                                  done_set:				
 10806 00000C00 F8                      		clc
 10807                                  done_set2:		; 12/12/2022
 10808 00000C01 58                      		pop	ax
 10809 00000C02 C3                      		retn
 10810                                  
 10811                                  ; =============== S U B	R O U T	I N E =======================================
 10812                                  
 10813                                  ; this routine is called if an error occurs while formatting or verifying.
 10814                                  ; it resets the drive,and decrements the retry count.
 10815                                  ; on entry - ds:di - points to bds for the drive
 10816                                  ;	     bp    - contains retry count
 10817                                  ; on exit    flags indicate result of decrementing retry count
 10818                                  
 10819                                  again:	
 10820 00000C03 E87004                  		call	ResetDisk
 10821 00000C06 80FC06                  		cmp	ah, 6
 10822 00000C09 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10823                                  					; do not decrement retry count.
 10824 00000C0B 4D                      		dec	bp		; decrement retry count
 10825 00000C0C C3                      		retn
 10826                                  ; ---------------------------------------------------------------------------
 10827                                  
 10828                                  dont_dec_retry_count:			
 10829 00000C0D 08E4                    		or	ah, ah
 10830 00000C0F C3                      		retn
 10831                                  
 10832                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10833                                  
 10834                                  ;----------------------------------------------------------------------------
 10835                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10836                                  ;----------------------------------------------------------------------------
 10837                                  ; 11/03/2019 - Retro DOS v4.0
 10838                                  
 10839                                  ; 18/03/2019
 10840                                  
 10841                                  ; ==========================================================================
 10842                                  ;
 10843                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10844                                  ;
 10845                                  ;      This function is intended to give the user to control the
 10846                                  ;      bds table flags of unformatted_media bit.
 10847                                  ;      GetAccessFlag will show the status -
 10848                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10849                                  ;						1 disk i/o allowed
 10850                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10851                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10852                                  ;						1 disallow disk i/o
 10853                                  ; ==========================================================================
 10854                                  
 10855                                  		; generic ioctl dispatch tables
 10856                                  
 10857                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10858                                  
 10859                                  ; ---------------------------------------------------------------------------
 10860 00000C10 00                      		db 0
 10861                                  
 10862                                  ; 09/12/2022 
 10863                                  %if 0
 10864                                  
 10865                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10866                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10867                                  		dw 0EE8h	; 61h	; ReadTrack
 10868                                  		dw 0E86h	; 62h	; VerifyTrack
 10869                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10870                                  		dw 0CA3h		; Cmd_Error_Proc
 10871                                  		dw 0CA3h		; Cmd_Error_Proc
 10872                                  		dw 119Ah	; 66h	; GetMediaId
 10873                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10874                                  		dw 12C1h	; 68h	; SenseMediaType
 10875                                  
 10876                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10877                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10878                                  		dw 0EEFh	; 41h	; WriteTrack
 10879                                  		dw 0DC1h	; 42h	; FormatTrack
 10880                                  		dw 0CA3h		; Cmd_Error_Proc
 10881                                  		dw 0CA3h		; Cmd_Error_Proc
 10882                                  		dw 0CA3h		; Cmd_Error_Proc
 10883                                  		dw 11D2h	; 46h	; SetMediaId
 10884                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10885                                  
 10886                                  %endif
 10887                                  
 10888                                  		; 09/12/2022
 10889 00000C11 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10890 00000C12 [7C0C]                  		dw GetDeviceParameters	; 60h
 10891 00000C14 [B70E]                  		dw ReadTrack		; 61h
 10892 00000C16 [570E]                  		dw VerifyTrack		; 62h
 10893 00000C18 [780C]                  		dw Cmd_Error_Proc
 10894 00000C1A [780C]                  		dw Cmd_Error_Proc
 10895 00000C1C [780C]                  		dw Cmd_Error_Proc
 10896 00000C1E [5211]                  		dw GetMediaId		; 66h
 10897 00000C20 [1E12]                  		dw GetAccessFlag	; 67h ; unpublished function
 10898 00000C22 [7012]                  		dw SenseMediaType	; 68h
 10899                                  
 10900 00000C24 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10901 00000C25 [C70C]                  		dw SetDeviceParameters	; 40h
 10902 00000C27 [BE0E]                  		dw WriteTrack		; 41h
 10903 00000C29 [920D]                  		dw FormatTrack		; 42h
 10904 00000C2B [780C]                  		dw Cmd_Error_Proc
 10905 00000C2D [780C]                  		dw Cmd_Error_Proc
 10906 00000C2F [780C]                  		dw Cmd_Error_Proc
 10907 00000C31 [8811]                  		dw SetMediaId		; 46h
 10908 00000C33 [3412]                  		dw SetAccessFlag	; 47h ; unpublished function
 10909                                  
 10910                                  ; ==========================================================================
 10911                                  ; IOC_DC_Table
 10912                                  ;
 10913                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10914                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10915                                  ; Added for 5.00
 10916                                  ; ==========================================================================
 10917                                  
 10918 00000C35 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10919 00000C36 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10920 00000C37 61                      		db 61h			; READ_TRACK
 10921 00000C38 41                      		db 41h			; WRITE_TRACK
 10922 00000C39 62                      		db 62h			; VERIFY_TRACK
 10923 00000C3A 42                      		db 42h			; FORMAT_TRACK
 10924 00000C3B 66                      		db 66h			; GET_MEDIA_ID
 10925 00000C3C 46                      		db 46h			; SET_MEDIA_ID
 10926 00000C3D 67                      		db 67h			; GET_ACCESS_FLAG
 10927 00000C3E 47                      		db 47h			; SET_ACCESS_FLAG
 10928 00000C3F 68                      		db 68h			; SENSE_MEDIA_TYPE
 10929                                  
 10930                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10931                                  
 10932                                  ; ---------------------------------------------------------------------------
 10933                                  
 10934                                  ; 16/10/2022
 10935                                  
 10936                                  ; ==========================================================================
 10937                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10938                                  ;
 10939                                  ;    input: AL contains logical drive
 10940                                  ;
 10941                                  ;	functions are dispatched through a call. On return, carry indicates
 10942                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10943                                  ;	subfunctions.
 10944                                  ;
 10945                                  ; ==========================================================================
 10946                                  
 10947                                  ; 11/03/2019
 10948                                  		; 19/10/2022
 10949                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10950 00000C40 E888F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10951 00000C43 06                      		push	es
 10952 00000C44 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10953 00000C48 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10954                                  					; RAWIO
 10955 00000C4D 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10956 00000C51 07                      		pop	es
 10957 00000C52 7525                    		jnz	short IoctlFuncErr
 10958                                  
 10959                                  		; cas note: Could do the above two blocks in reverse order.
 10960                                  		; Would have to preserve al for SetDrive
 10961                                  
 10962                                  		; 10/12/2022
 10963 00000C54 BE[110C]                		mov	si, IoReadJumpTable
 10964                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10965                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10966 00000C57 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10967 00000C59 7503                    		jnz	short NotGenericWrite ; function is a read.
 10968                                  		; 10/12/2022
 10969 00000C5B BE[240C]                		mov	si, IoWriteJumpTable
 10970                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10971                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10972                                  NotGenericWrite:			
 10973 00000C5E 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10974 00000C60 2C40                    		sub	al, 40h		; offset for base function
 10975 00000C62 2E3A04                  		cmp	al, [cs:si]
 10976 00000C65 7712                    		ja	short IoctlFuncErr
 10977 00000C67 98                      		cbw
 10978 00000C68 D1E0                    		shl	ax, 1
 10979 00000C6A 46                      		inc	si
 10980 00000C6B 01C6                    		add	si, ax
 10981 00000C6D 2EFF14                  		call	near [cs:si]
 10982                                  		;call	word ptr cs:[si]
 10983 00000C70 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10984                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10985                                  					; 2C7h:30h = 70h:25A0h
 10986 00000C75 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10987 00000C77 C3                      		retn			; Pass carry flag through to exit code
 10988                                  ; ---------------------------------------------------------------------------
 10989                                  
 10990                                  		; Cmd_Error_Proc is called as a procedure and also use
 10991                                  		; as a fall through from above
 10992                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10993 00000C78 5A                      		pop	dx
 10994                                  
 10995                                  IoctlFuncErr:				
 10996 00000C79 E959F4                  		jmp	bc_cmderr
 10997                                  ; ---------------------------------------------------------------------------
 10998                                  
 10999                                  ; 16/10/2022
 11000                                  
 11001                                  ; ==========================================================================
 11002                                  ;**	GetDeviceParameters:
 11003                                  ;
 11004                                  ;	GetDeviceParameters implements the generic ioctl function:
 11005                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11006                                  ;
 11007                                  ;	ENTRY	(ES:di) = BDS for drive
 11008                                  ;		PtrSav = long pointer to request header
 11009                                  ;	EXIT	??? BUGBUG
 11010                                  ;	USES	??? BUGBUG
 11011                                  ; ==========================================================================
 11012                                  
 11013                                  		; 19/10/2022
 11014                                  GetDeviceParameters:
 11015                                  		; Copy info from bds to the device parameters packet
 11016                                  
 11017 00000C7C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11018 00000C80 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11019                                  					; (DS:BX) = return buffer
 11020 00000C83 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11021 00000C87 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11022 00000C8A 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11023 00000C8E 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11024                                  					; Mask off other bits
 11025 00000C91 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11026 00000C94 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11027 00000C98 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11028 00000C9B 30C0                    		xor	al, al		; Set media type to default
 11029 00000C9D 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11030                                  					
 11031                                  		; copy recommended bpb
 11032 00000CA0 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11033 00000CA3 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11034                                  					; BUILD_DEVICE_BPB
 11035 00000CA6 7412                    		jz	short UseBpbPresent
 11036 00000CA8 1E                      		push	ds		; Save request packet segment
 11037 00000CA9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11038                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11039                                  					; 2C7h:30h = 70h:25A0h
 11040                                  					; Point back to Bios_Data
 11041 00000CAE E888FB                  		call	checksingle
 11042 00000CB1 E844F9                  		call	GetBp		; Build	the bpb	from scratch
 11043 00000CB4 1F                      		pop	ds		; Restore request packet segment
 11044 00000CB5 720F                    		jb	short GetParmRet
 11045 00000CB7 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11046                                  					; Use this subfield of bds instead
 11047                                  UseBpbPresent:				
 11048 00000CBA 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11049                                  					; This is where	the result goes
 11050 00000CBD B91900                  		mov	cx, 25		; A_BPB.size - 6
 11051                                  					; For now use 'small' bpb
 11052 00000CC0 1E                      		push	ds		; reverse segments for copy
 11053 00000CC1 06                      		push	es
 11054 00000CC2 1F                      		pop	ds
 11055 00000CC3 07                      		pop	es
 11056 00000CC4 F3A4                    		rep movsb
 11057                                  		
 11058                                  		; 12/12/2022
 11059                                  		; cf=0 (test instruction -above- resets cf) 	
 11060                                  		;clc
 11061                                  GetParmRet:				
 11062 00000CC6 C3                      		retn
 11063                                  ; ---------------------------------------------------------------------------
 11064                                  
 11065                                  ; 17/10/2022
 11066                                  ; 16/10/2022
 11067                                  
 11068                                  ; ==========================================================================
 11069                                  ; SetDeviceParameters:
 11070                                  ;
 11071                                  ; input: ES:di points to bds for drive
 11072                                  ; ==========================================================================
 11073                                  
 11074                                  		; 19/10/2022
 11075                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11076 00000CC7 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11077 00000CCB C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11078 00000CCE 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11079                                  					; fchanged_by_format|fchanged
 11080 00000CD4 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11081                                  					; ONLY_SET_TRACKLAYOUT
 11082 00000CD7 7579                    		jnz	short setTrackTable
 11083 00000CD9 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11084 00000CDC 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11085 00000CE0 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11086 00000CE3 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11087 00000CE7 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11088 00000CEA 1E                      		push	ds
 11089                                  		; 17/10/2022
 11090 00000CEB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11091                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11092                                  					; 2C7h:30h = 70h:25A0h
 11093                                  		;cmp	byte [fhave96], 0
 11094 00000CF0 803E[7700]00            		cmp	byte [fhave96], 0
 11095 00000CF5 1F                      		pop	ds
 11096 00000CF6 7502                    		jnz	short HaveChange ; we have changeline support
 11097                                  		; 10/12/2022
 11098 00000CF8 24FD                    		and	al, 0FDh
 11099                                  		;and	ax, 0FFFDh	; ~fchangeline
 11100                                  
 11101                                  		; Ignore all bits except non_removable and changeline
 11102                                  HaveChange:				
 11103 00000CFA 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11104 00000CFD 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11105 00000D01 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11106 00000D05 09C8                    		or	ax, cx
 11107 00000D07 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11108 00000D0B 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11109                                  					; Set media type
 11110 00000D0E 1E                      		push	ds
 11111 00000D0F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11112                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11113 00000D14 A2[3706]                		mov	[mediatype], al
 11114                                  		;mov	ds:mediatype, al
 11115 00000D17 1F                      		pop	ds
 11116                                  
 11117                                  		; The media changed (maybe) so we will have to do a set dasd
 11118                                  		; the next time we format a track
 11119                                  
 11120                                  		; 10/12/2022
 11121 00000D18 26804D2380              		or	byte [es:di+35], 80h
 11122                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11123                                  					; set_dasd_true
 11124 00000D1D 57                      		push	di		; Save bds pointer
 11125                                  
 11126                                  		; Figure out what we are supposed to do with the bpb
 11127                                  		; were we asked to install a fake bpb?
 11128                                  
 11129 00000D1E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11130                                  					; INSTALL_FAKE_BPB
 11131 00000D21 7514                    		jnz	short InstallFakeBpb
 11132                                  
 11133                                  		; were we returning a fake bpb when asked to build a bpb?
 11134                                  
 11135                                  		; 10/12/2022
 11136 00000D23 26F6452304              		test	byte [es:di+35], 4
 11137                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11138                                  					; return_fake_bpb
 11139 00000D28 7405                    		jz	short InstallRecommendedBpb
 11140                                  
 11141                                  		; we were returning a fake bpb but we can stop now
 11142                                  
 11143                                  		; 10/12/2022
 11144 00000D2A 26806523FB              		and	byte [es:di+35], 0FBh
 11145                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11146                                  					; ~return_fake_bpb
 11147                                  InstallRecommendedBpb:			
 11148 00000D2F B91F00                  		mov	cx, 31		; A_BPB.size
 11149 00000D32 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11150 00000D35 EB0B                    		jmp	short CopyTheBpb
 11151                                  ; ---------------------------------------------------------------------------
 11152                                  
 11153                                  InstallFakeBpb:
 11154                                  		; 10/12/2022
 11155 00000D37 26804D2304              		or	byte [es:di+35], 4				
 11156                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11157                                  					; return_fake_bpb
 11158 00000D3C B91900                  		mov	cx, 25		; A_BPB.size - 6
 11159                                  					; move 'smaller' bpb
 11160 00000D3F 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11161                                  
 11162                                  CopyTheBpb:				
 11163 00000D42 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11164 00000D45 F3A4                    		rep movsb
 11165 00000D47 1E                      		push	ds		; Save packet segment
 11166                                  		; 17/10/2022
 11167 00000D48 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11168                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11169                                  					; Setup	for ds -> Bios_Data
 11170 00000D4D E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11171 00000D50 1F                      		pop	ds		; Restore packet segment
 11172 00000D51 5F                      		pop	di		; Restore bds pointer
 11173                                  setTrackTable:				
 11174 00000D52 8B4F26                  		mov	cx, [bx+38]
 11175 00000D55 1E                      		push	ds
 11176 00000D56 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11177 00000D5B 890E[3905]              		mov	[sectorspertrack], cx
 11178 00000D5F 1F                      		pop	ds
 11179                                  		; 10/12/2022
 11180 00000D60 26806523F7              		and	byte [es:di+35], 0F7h
 11181                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11182                                  					; ~good_tracklayout
 11183 00000D65 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11184                                  					; TRACKLAYOUT_IS_GOOD
 11185 00000D68 7405                    		jz	short UglyTrackLayOut
 11186                                  		; 10/12/2022
 11187 00000D6A 26804D2308              		or	byte [es:di+35], 8
 11188                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11189                                  					; good_tracklayout
 11190                                  UglyTrackLayOut:			
 11191 00000D6F 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11192 00000D72 771A                    		ja	short TooManyPerTrack
 11193                                  		;jcxz	short SectorInfoSaved
 11194 00000D74 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 11195 00000D76 BF[3B05]                		mov	di, tracktable
 11196 00000D79 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11197                                  		; 17/10/2022
 11198 00000D7C 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11199                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11200                                  					; Trash	our bds	pointer
 11201                                  StoreSectorInfo:			
 11202 00000D81 47                      		inc	di
 11203 00000D82 47                      		inc	di		; Skip over cylinder and head
 11204 00000D83 AD                      		lodsw			; Get sector id
 11205 00000D84 AA                      		stosb			; Copy it
 11206 00000D85 AD                      		lodsw			; Get sector size
 11207 00000D86 E8E301                  		call	SectSizeToSectIndex
 11208 00000D89 AA                      		stosb			; Store	sector SIZE index
 11209 00000D8A E2F5                    		loop	StoreSectorInfo
 11210                                  SectorInfoSaved:			
 11211 00000D8C F8                      		clc
 11212 00000D8D C3                      		retn
 11213                                  ; ---------------------------------------------------------------------------
 11214                                  
 11215                                  TooManyPerTrack:			
 11216 00000D8E B00C                    		mov	al, 0Ch
 11217 00000D90 F9                      		stc
 11218 00000D91 C3                      		retn
 11219                                  ; ---------------------------------------------------------------------------
 11220                                  
 11221                                  ; 16/10/2022
 11222                                  
 11223                                  ; ==========================================================================
 11224                                  ; FormatTrack:
 11225                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11226                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11227                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11228                                  ;
 11229                                  ; input: ES:di points to bds for drive
 11230                                  ;
 11231                                  ; output:
 11232                                  ;	for status call:
 11233                                  ;	specialfunction byte set to:
 11234                                  ;		0 - rom support + legal combination
 11235                                  ;		1 - no rom support
 11236                                  ;		2 - illegal combination
 11237                                  ;		3 - no media present
 11238                                  ;	carry cleared.
 11239                                  ;
 11240                                  ;	for format track:
 11241                                  ;		carry set if error
 11242                                  ;
 11243                                  ; ==========================================================================
 11244                                  
 11245                                  ; 16/03/2019
 11246                                  
 11247                                  		; 19/10/2022
 11248                                  FormatTrack:
 11249 00000D92 C51E[1200]              		lds	bx, [ptrsav]
 11250 00000D96 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11251 00000D99 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11252                                  					; STATUS_FOR_FORMAT
 11253 00000D9C 740E                    		jz	short DoFormatTrack
 11254 00000D9E 1E                      		push	ds
 11255                                  		; 17/10/2022
 11256 00000D9F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11257                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11258 00000DA4 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11259 00000DA7 1F                      		pop	ds
 11260 00000DA8 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11261 00000DAA F8                      		clc
 11262 00000DAB C3                      		retn
 11263                                  ; ---------------------------------------------------------------------------
 11264                                  
 11265                                  DoFormatTrack:				
 11266 00000DAC 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11267                                  					; DEV_HARDDISK
 11268 00000DB1 7508                    		jnz	short DoFormatDiskette
 11269                                  		; 17/10/2022
 11270 00000DB3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11271                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11272                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11273 00000DB8 E99C00                  		jmp	VerifyTrack
 11274                                  ; ---------------------------------------------------------------------------
 11275                                  
 11276                                  DoFormatDiskette:			
 11277 00000DBB 8B4F01                  		mov	cx, [bx+1]
 11278 00000DBE 8B5703                  		mov	dx, [bx+3]
 11279 00000DC1 F60702                  		test	byte [bx], 2
 11280                                  		; 17/10/2022
 11281 00000DC4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11282                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11283                                  					; Setup	ds-> Bios_Data for verify
 11284 00000DC9 7403                    		jz	short DoFormatDiskette_1
 11285 00000DCB E9E400                  		jmp	VerifyTrack_Err
 11286                                  ; ---------------------------------------------------------------------------
 11287                                  
 11288                                  DoFormatDiskette_1:			
 11289 00000DCE E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11290 00000DD1 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11291 00000DD3 7406                    		jz	short NeedToSetDasd ; Old rom
 11292 00000DD5 3C03                    		cmp	al, 3		; Time out error?
 11293 00000DD7 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11294                                  					; about	the illegal combination)
 11295 00000DD9 EB67                    		jmp	short FormatFailed
 11296                                  ; ---------------------------------------------------------------------------
 11297                                  
 11298                                  NeedToSetDasd:				
 11299 00000DDB 52                      		push	dx
 11300 00000DDC E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11301 00000DDF 5A                      		pop	dx
 11302                                  NoSetDasd:				
 11303 00000DE0 E856FA                  		call	checksingle	; Do any needed	diskette swapping
 11304 00000DE3 89D0                    		mov	ax, dx		; Get track from packet
 11305 00000DE5 A3[3901]                		mov	[trknum], ax
 11306 00000DE8 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11307 00000DEC 88CC                    		mov	ah, cl
 11308 00000DEE BB[3B05]                		mov	bx, tracktable
 11309 00000DF1 8B0E[3905]              		mov	cx, [sectorspertrack]
 11310                                  
 11311                                  StoreCylinderHead:			
 11312 00000DF5 8907                    		mov	[bx], ax	; Store	into TrackTable
 11313 00000DF7 83C304                  		add	bx, 4		; Skip to next sector field
 11314 00000DFA E2F9                    		loop	StoreCylinderHead
 11315 00000DFC B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11316                                  FormatRetry:				
 11317 00000DFF 51                      		push	cx
 11318 00000E00 BB[3B05]                		mov	bx, tracktable
 11319 00000E03 A0[3905]                		mov	al, [sectorspertrack]
 11320 00000E06 B405                    		mov	ah, 5		; romformat
 11321 00000E08 8C1E[3705]              		mov	[xfer_seg], ds
 11322 00000E0C E87F02                  		call	ToRom
 11323 00000E0F 59                      		pop	cx
 11324 00000E10 7216                    		jb	short FormatError
 11325 00000E12 51                      		push	cx		; Now verify the sectors just formatted.
 11326                                  					; NOTE:	because	of bug in some BIOSes we have to
 11327                                  					;	set ES:BX to 00:00
 11328 00000E13 53                      		push	bx
 11329 00000E14 31DB                    		xor	bx, bx
 11330 00000E16 891E[3705]              		mov	[xfer_seg], bx
 11331 00000E1A A0[3905]                		mov	al, [sectorspertrack]
 11332 00000E1D B404                    		mov	ah, 4		; romverify
 11333 00000E1F B101                    		mov	cl, 1
 11334 00000E21 E86A02                  		call	ToRom
 11335 00000E24 5B                      		pop	bx
 11336 00000E25 59                      		pop	cx
 11337 00000E26 7329                    		jnb	short FormatOk
 11338                                  FormatError:				
 11339 00000E28 E84B02                  		call	ResetDisk
 11340 00000E2B C606[3906]01            		mov	byte [had_format_error], 1
 11341 00000E30 50                      		push	ax
 11342 00000E31 51                      		push	cx
 11343 00000E32 52                      		push	dx
 11344 00000E33 E8AA01                  		call	SetMediaForFormat
 11345 00000E36 3C01                    		cmp	al, 1
 11346 00000E38 7503                    		jnz	short WhileErr
 11347 00000E3A E84201                  		call	SetDasd
 11348                                  WhileErr:				
 11349 00000E3D 5A                      		pop	dx
 11350 00000E3E 59                      		pop	cx
 11351 00000E3F 58                      		pop	ax
 11352 00000E40 E2BD                    		loop	FormatRetry
 11353                                  FormatFailed:				
 11354 00000E42 C606[3906]01            		mov	byte [had_format_error], 1
 11355                                  					; Set the format error flag
 11356 00000E47 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11357 00000E4A 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11358 00000E4C B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11359                                  DoMapIt:				
 11360 00000E4E E97AFD                  		jmp	maperror
 11361                                  ; ---------------------------------------------------------------------------
 11362                                  
 11363                                  FormatOk:				
 11364 00000E51 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11365 00000E56 C3                      		retn
 11366                                  ; ---------------------------------------------------------------------------
 11367                                  
 11368                                  ; 16/10/2022
 11369                                  
 11370                                  ; ==========================================================================
 11371                                  ;
 11372                                  ; VerifyTrack:
 11373                                  ;
 11374                                  ; input: ES:di points to bds for drive
 11375                                  ; ==========================================================================
 11376                                  
 11377                                  VerifyTrack:				
 11378 00000E57 1E                      		push	ds
 11379 00000E58 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11380 00000E5C C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11381                                  
 11382                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11383                                  
 11384 00000E5F 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11385 00000E62 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11386 00000E65 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11387 00000E68 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11388                                  					; Get option flag word
 11389 00000E6A 1F                      		pop	ds
 11390 00000E6B C606[2001]04            		mov	byte [rflag], 4	; romverify
 11391 00000E70 890E[3301]              		mov	[curtrk], cx
 11392 00000E74 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11393 00000E77 8B0E[3905]              		mov	cx, [sectorspertrack]
 11394                                  
 11395                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11396                                  		; specified if not we should go to the normal track verification
 11397                                  		; routine. If fast format has been specified we should get the
 11398                                  		; number of tracks to be verified and check it to see if it is
 11399                                  		; > 255. If it is then it is an error and we should go to
 11400                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11401                                  		; sectors per track to get the total number of sectors to be
 11402                                  		; verified. This should also be less than equal to 255
 11403                                  		; otherwise we go to same error exit. If everything is okay
 11404                                  		; we initalise cx to the total sectors. use ax as a temporary
 11405                                  		; register.
 11406                                  
 11407                                  					; Special function requested?	
 11408 00000E7B F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11409 00000E7E 7421                    		jz	short NormVerifyTrack
 11410 00000E80 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11411 00000E82 08E4                    		or	ah, ah
 11412 00000E84 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11413 00000E86 F6E1                    		mul	cl
 11414 00000E88 08E4                    		or	ah, ah
 11415 00000E8A 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11416 00000E8C 89C1                    		mov	cx, ax
 11417                                  		; 10/12/2022
 11418 00000E8E 26F6452301              		test	byte [es:di+35], 1
 11419                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11420                                  					; fnon_removable
 11421 00000E93 740C                    		jz	short NormVerifyTrack
 11422                                  					; Multitrack operation = on?
 11423                                  		; 10/12/2022
 11424                                  		; 19/10/2022
 11425 00000E95 F606[2F05]80            		test	byte [multrk_flag], 80h
 11426                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11427                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11428 00000E9A 7405                    		jz	short NormVerifyTrack
 11429 00000E9C C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11430                                  NormVerifyTrack:			
 11431 00000EA1 31C0                    		xor	ax, ax		; 1st sector
 11432 00000EA3 31DB                    		xor	bx, bx
 11433 00000EA5 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11434 00000EA9 E83F00                  		call	TrackIo
 11435 00000EAC C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11436 00000EB1 C3                      		retn
 11437                                  ; ---------------------------------------------------------------------------
 11438                                  
 11439                                  VerifyTrack_Err:			
 11440 00000EB2 B401                    		mov	ah, 1
 11441 00000EB4 E914FD                  		jmp	maperror
 11442                                  ; ---------------------------------------------------------------------------
 11443                                  
 11444                                  ; 16/10/2022
 11445                                  
 11446                                  ; ==========================================================================
 11447                                  ;
 11448                                  ; ReadTrack:
 11449                                  ;
 11450                                  ; input: ES:di points to bds for drive
 11451                                  ;
 11452                                  ; ==========================================================================
 11453                                  
 11454                                  ReadTrack:				
 11455 00000EB7 C606[2001]02            		mov	byte [rflag], 2	; romread
 11456 00000EBC EB05                    		jmp	short ReadWriteTrack
 11457                                  ; ---------------------------------------------------------------------------
 11458                                  
 11459                                  WriteTrack:
 11460                                  
 11461                                  ; ==========================================================================
 11462                                  ;
 11463                                  ; WriteTrack:
 11464                                  ;
 11465                                  ; input: ES:di points to bds for drive
 11466                                  ;
 11467                                  ; ==========================================================================
 11468                                  				
 11469 00000EBE C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11470                                  
 11471                                  		; Fall into ReadWriteTrack
 11472                                  
 11473                                  ; ==========================================================================
 11474                                  ;
 11475                                  ; readWriteTrack:
 11476                                  ;
 11477                                  ; input:
 11478                                  ;    ES:di points to bds for drive
 11479                                  ;    rFlag - 2 for read,3 for write
 11480                                  ;
 11481                                  ; ==========================================================================
 11482                                  
 11483                                  ReadWriteTrack:	
 11484                                  		; save bds pointer segment so we can use it to access
 11485                                  		; our packet. Notice that this is not the standard register
 11486                                  		; assignment for accessing packets
 11487                                  		
 11488                                  		; 19/10/2022	
 11489 00000EC3 06                      		push	es
 11490 00000EC4 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11491 00000EC8 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11492 00000ECC 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11493 00000ED0 A3[3301]                		mov	[curtrk], ax
 11494 00000ED3 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11495 00000ED7 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11496 00000EDA 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11497 00000EDE 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11498 00000EE2 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11499                                  					; Get transfer address
 11500                                  
 11501                                  		; we just trashed our packet address, but we no longer care
 11502                                  
 11503 00000EE6 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11504 00000EEA 07                      		pop	es
 11505                                  
 11506                                  		; Fall into TrackIo
 11507                                  
 11508                                  ; =============== S U B	R O U T	I N E =======================================
 11509                                  
 11510                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11511                                  
 11512                                  ; ==========================================================================
 11513                                  ;
 11514                                  ; TrackIo:
 11515                                  ;    performs track read/write/verify
 11516                                  ;
 11517                                  ;   input:
 11518                                  ;      rFlag	- 2 = read
 11519                                  ;		  3 = write
 11520                                  ;		  4 = verify
 11521                                  ;      AX	- Index into track table of first sector to io
 11522                                  ;      CX	- Number of sectors to io
 11523                                  ;      Xfer_Seg:BX - Transfer address
 11524                                  ;      ES:DI	- Pointer to bds
 11525                                  ;      CurTrk	- Current cylinder
 11526                                  ;      CurHd	- Current head
 11527                                  ;
 11528                                  ; ==========================================================================
 11529                                  
 11530                                  ; 16/03/2019 - Retro DOS v4.0
 11531                                  		
 11532                                  		; 19/10/2022
 11533                                  TrackIo:	
 11534                                  					; Procedure `disk' will pop stack to
 11535 00000EEB 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11536 00000EEF E847F9                  		call	checksingle	; Ensure correct disk is in drv
 11537 00000EF2 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11538                                  					; See if we have already set	disk
 11539 00000EF7 7407                    		jz	short Dptalreadyset ; base table
 11540 00000EF9 50                      		push	ax		; set up tables	and variables for i/o
 11541 00000EFA 51                      		push	cx
 11542 00000EFB E899FA                  		call	iosetup
 11543 00000EFE 59                      		pop	cx
 11544 00000EFF 58                      		pop	ax
 11545                                  Dptalreadyset:				; Point si at the table entry of the			
 11546 00000F00 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11547 00000F03 D1E0                    		shl	ax, 1
 11548 00000F05 D1E0                    		shl	ax, 1
 11549 00000F07 01C6                    		add	si, ax
 11550                                  
 11551                                  		; WE WANT:
 11552                                  		; CX to	be the number of times we have to loop
 11553                                  		; DX to	be the number of sectors we read on each iteration
 11554                                  		
 11555 00000F09 BA0100                  		mov	dx, 1
 11556                                  		; 12/12/2022
 11557 00000F0C 26F6452308              		test	byte [es:di+23h], 8
 11558                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11559                                  					; good_tracklayout
 11560 00000F11 7402                    		jz	short ionextsector
 11561                                  		
 11562 00000F13 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11563                                  ionextsector:				
 11564 00000F15 51                      		push	cx
 11565 00000F16 52                      		push	dx
 11566 00000F17 46                      		inc	si
 11567 00000F18 46                      		inc	si		; Skip over the	cylinder and head in
 11568                                  					; the track table
 11569 00000F19 AC                      		lodsb			; Get sector ID	from track table
 11570 00000F1A A2[3101]                		mov	[cursec], al
 11571                                  
 11572                                  		; assumptions for a fixed disk multi-track disk	i/o
 11573                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11574                                  		;     only CL is valid.
 11575                                  		; 2). Sector size should be set	to 512 bytes.
 11576                                  		; 3). Good track layout
 11577                                  		
 11578                                  		; 12/12/2022
 11579 00000F1D 26F6452301              		test	byte [es:di+23h], 1
 11580                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11581                                  					; fnon_removable ; Fixed disk?
 11582 00000F22 7414                    		jz	short IoRemovable ; No
 11583                                  		; 12/12/2022
 11584 00000F24 F606[2F05]80            		test	byte [multrk_flag], 80h
 11585                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11586                                  						; Allow multi-track operation?
 11587 00000F29 740D                    		jz	short IoRemovable ; No,don't do that.
 11588 00000F2B 8916[2201]              		mov	[seccnt], dx
 11589 00000F2F 89D0                    		mov	ax, dx
 11590 00000F31 E81DFB                  		call	Disk
 11591 00000F34 5A                      		pop	dx
 11592 00000F35 59                      		pop	cx
 11593 00000F36 F8                      		clc
 11594 00000F37 C3                      		retn
 11595                                  ; ---------------------------------------------------------------------------
 11596                                  
 11597                                  IoRemovable:				
 11598 00000F38 AC                      		lodsb			; Get sector size index	from track
 11599                                  					; table	and save it
 11600 00000F39 50                      		push	ax
 11601 00000F3A 56                      		push	si
 11602 00000F3B 1E                      		push	ds		; Save Bios_Data
 11603 00000F3C 50                      		push	ax
 11604 00000F3D 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11605                                  					; Fetch	EOT while ds-> Bios_Data
 11606 00000F41 C536[2D01]              		lds	si, [dpt]
 11607 00000F45 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11608 00000F48 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11609 00000F4B 58                      		pop	ax
 11610 00000F4C 1F                      		pop	ds
 11611 00000F4D 88D0                    		mov	al, dl
 11612 00000F4F A3[2201]                		mov	[seccnt], ax
 11613 00000F52 E8FCFA                  		call	Disk
 11614 00000F55 5E                      		pop	si		; Advance buffer pointer by adding
 11615                                  					; sector size
 11616 00000F56 58                      		pop	ax
 11617 00000F57 E81D00                  		call	SectorSizeIndexToSectorSize
 11618 00000F5A 01C3                    		add	bx, ax
 11619 00000F5C 5A                      		pop	dx
 11620 00000F5D 59                      		pop	cx
 11621 00000F5E E2B5                    		loop	ionextsector
 11622 00000F60 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11623                                  		;jz	short NoNeedDone
 11624                                  		; 12/12/2022
 11625 00000F65 7404                    		je	short NoNeedDone2
 11626 00000F67 E872FA                  		call	done		; set time of last access, and reset
 11627                                  					; entries in Dpt.
 11628                                  NoNeedDone:				
 11629 00000F6A F8                      		clc
 11630                                  NoNeedDone2:
 11631 00000F6B C3                      		retn
 11632                                  
 11633                                  ; =============== S U B	R O U T	I N E =======================================
 11634                                  
 11635                                  ; ---------------------------------------------------------------------------
 11636                                  ;
 11637                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11638                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11639                                  ; are permissible.
 11640                                  ;
 11641                                  ; On Input   AX contains sector size in bytes
 11642                                  ; On Output  AL Contains index
 11643                                  ; All other registers preserved
 11644                                  ;
 11645                                  ; ---------------------------------------------------------------------------
 11646                                  
 11647                                  SectSizeToSectIndex:	
 11648 00000F6C 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11649                                  					; examine upper	byte only
 11650 00000F6F 7703                    		ja	short OneK
 11651 00000F71 88E0                    		mov	al, ah		; value	in AH is the index!
 11652 00000F73 C3                      		retn
 11653                                  ; ---------------------------------------------------------------------------
 11654                                  
 11655                                  OneK:					
 11656 00000F74 B003                    		mov	al, 3
 11657 00000F76 C3                      		retn
 11658                                  
 11659                                  ; =============== S U B	R O U T	I N E =======================================
 11660                                  
 11661                                  
 11662                                  SectorSizeIndexToSectorSize:
 11663 00000F77 88C1                    		mov	cl, al
 11664 00000F79 B88000                  		mov	ax, 128
 11665 00000F7C D3E0                    		shl	ax, cl
 11666 00000F7E C3                      		retn
 11667                                  
 11668                                  ; =============== S U B	R O U T	I N E =======================================
 11669                                  
 11670                                  ; 16/10/2022
 11671                                  
 11672                                  ; ---------------------------------------------------------------------------
 11673                                  ;
 11674                                  ; SetDASD
 11675                                  ;
 11676                                  ; Set up the rom for formatting.
 11677                                  ; we have to tell the rom bios what type of disk is in the drive.
 11678                                  ;
 11679                                  ; On Input   - ES:di - Points to bds
 11680                                  ;
 11681                                  ; ---------------------------------------------------------------------------
 11682                                  
 11683                                  		; 19/10/2022
 11684                                  SetDasd:	
 11685 00000F7F 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11686                                  					; See if we've previously set dasd type
 11687 00000F84 740C                    		jz	short DoSetDasd
 11688                                  		; 10/12/2022
 11689 00000F86 26F6452380              		test	byte [es:di+23h], 80h
 11690                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11691                                  					; set_dasd_true
 11692 00000F8B 744A                    		jz	short DasdHasBeenSet
 11693                                  		; 10/12/2022
 11694 00000F8D 268065237F              		and	byte [es:di+23h], 7Fh
 11695                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11696                                  					; ~set_dasd_true
 11697                                  DoSetDasd:				
 11698 00000F92 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11699 00000F97 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11700 00000F9C B004                    		mov	al, 4
 11701 00000F9E 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11702                                  					; DEV_3INCH720KB
 11703 00000FA3 741A                    		jz	short DoSet
 11704 00000FA5 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11705                                  					; DEV_5INCH96TPI
 11706 00000FAA 7404                    		jz	short GotBig
 11707 00000FAC B001                    		mov	al, 1
 11708 00000FAE EB0F                    		jmp	short DoSet
 11709                                  ; ---------------------------------------------------------------------------
 11710                                  
 11711                                  GotBig:					
 11712 00000FB0 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11713 00000FB2 803E[3706]00            		cmp	byte [mediatype], 0
 11714 00000FB7 7506                    		jnz	short DoSet
 11715                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11716                                  		; 10/12/2022
 11717                                  		;inc	al  ; al = 3
 11718                                  		; 18/12/2022
 11719 00000FB9 40                      		inc	ax  ; al = 3
 11720 00000FBA C606[3B01]54            		mov	byte [gap_patch], 54h
 11721                                  DoSet:					
 11722 00000FBF 1E                      		push	ds
 11723 00000FC0 56                      		push	si
 11724 00000FC1 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11725                                  
 11726 00000FC5 C5367800                		lds	si, [DSKADR]
 11727                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11728                                  		;;lds	si, ds:78h		
 11729                                  
 11730 00000FC9 C644090F                		mov	byte [si+9], 0Fh ;
 11731                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11732 00000FCD 5E                      		pop	si
 11733 00000FCE 1F                      		pop	ds
 11734 00000FCF B417                    		mov	ah, 17h
 11735 00000FD1 268A5504                		mov	dl, [es:di+4]
 11736 00000FD5 CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11737                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11738                                  DasdHasBeenSet:				
 11739 00000FD7 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11740 00000FDB 8826[3701]              		mov	[formt_eot], ah
 11741 00000FDF C3                      		retn
 11742                                  
 11743                                  ; =============== S U B	R O U T	I N E =======================================
 11744                                  
 11745                                  ; 16/10/2022
 11746                                  
 11747                                  ; ---------------------------------------------------------------------------
 11748                                  ;
 11749                                  ; Set Media Type for Format
 11750                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11751                                  ; BPB area in the BDS can be handled by the rom.
 11752                                  ; On Input, ES:DI -> current BDS.
 11753                                  ; The status of the operation is returned in AL
 11754                                  ;
 11755                                  ;	- 0 - if the support is available,and the combination is valid.
 11756                                  ;	- 1 - no rom support
 11757                                  ;	- 2 - illegal combination
 11758                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11759                                  ;
 11760                                  ; Flags also may be altered. All other registers preserved.
 11761                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11762                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11763                                  ; to the one returned. the original pointer to the disk base table is stored
 11764                                  ; in TempDpt, until it is restored.
 11765                                  ;
 11766                                  ; ---------------------------------------------------------------------------
 11767                                  
 11768                                  		; 19/10/2022
 11769                                  SetMediaForFormat:	
 11770 00000FE0 51                      		push	cx
 11771 00000FE1 52                      		push	dx
 11772                                  
 11773                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11774                                  		; but we need to call int 13h, ah=18h again.
 11775                                  
 11776 00000FE2 803E[3906]01            		cmp	byte [had_format_error], 1
 11777 00000FE7 7425                    		jz	short SkipSaveDskAdr
 11778 00000FE9 30C0                    		xor	al, al		; If already done return 0
 11779 00000FEB 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11780 00000FF0 7502                    		jnz	short DoSetMediaForFormat
 11781 00000FF2 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11782                                  ; ---------------------------------------------------------------------------
 11783                                  
 11784                                  DoSetMediaForFormat:			
 11785 00000FF4 06                      		push	es
 11786 00000FF5 56                      		push	si
 11787 00000FF6 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11788 00000FFA 26C4367800              		les	si, [es:DSKADR]
 11789                                  		;les	si, es:78h	; [es:DSKADR]
 11790                                  					; Get pointer to disk base table
 11791 00000FFF 8936[2D01]              		mov	[dpt], si
 11792 00001003 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11793                                  
 11794                                  		; Initialize the head settle time to 0Fh. See the offsets
 11795                                  		; given in dskprm.inc.
 11796                                  
 11797 00001007 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11798 0000100C 5E                      		pop	si
 11799 0000100D 07                      		pop	es
 11800                                  
 11801                                  SkipSaveDskAdr:				
 11802 0000100E 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11803 00001012 49                      		dec	cx
 11804 00001013 80E503                  		and	ch, 3
 11805 00001016 D0CD                    		ror	ch, 1
 11806 00001018 D0CD                    		ror	ch, 1
 11807 0000101A 86E9                    		xchg	ch, cl
 11808 0000101C 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11809 00001020 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11810 00001024 06                      		push	es
 11811 00001025 1E                      		push	ds
 11812 00001026 56                      		push	si
 11813 00001027 57                      		push	di
 11814 00001028 B418                    		mov	ah, 18h
 11815 0000102A CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11816                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11817 0000102C 7233                    		jb	short FormaStatErr
 11818 0000102E 803E[3906]01            		cmp	byte [had_format_error], 1
 11819 00001033 7425                    		jz	short skip_disk_base_setting
 11820 00001035 06                      		push	es		; Save segment returned	by the rom
 11821 00001036 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11822 0000103A 26C4367800              		les	si, [es:DSKADR]
 11823                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11824                                  					; Get current disk base	table
 11825 0000103F 8936[3A06]              		mov	[tempdpt], si
 11826 00001043 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11827 00001047 8E06[1A00]              		mov	es, [zeroseg]
 11828                                  		;mov	es:78h,	di
 11829 0000104B 26893E7800              		mov	[es:DSKADR], di
 11830                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11831 00001050 268F067A00              		pop	word [es:DSKADR+2]
 11832 00001055 C606[3806]01            		mov	byte [media_set_for_format], 1
 11833                                  skip_disk_base_setting:			
 11834 0000105A 30C0                    		xor	al, al		; Legal	combination + rom support code
 11835                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11836 0000105C A2[3906]                		mov	[had_format_error], al
 11837 0000105F EB0E                    		jmp	short PopStatRet
 11838                                  ; ---------------------------------------------------------------------------
 11839                                  
 11840                                  FormaStatErr:
 11841                                  		; 10/12/2022
 11842 00001061 B003                    		mov	al, 3
 11843                                  				
 11844 00001063 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11845                                  					; Illegal combination =	0Ch
 11846 00001066 7406                    		jz	short FormatStatIllegalComb
 11847 00001068 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11848 0000106B 7402                    		jz	short FormatStatTimeOut
 11849                                  		; 10/12/2022
 11850                                  		;dec	al
 11851                                  		; 18/12/2022
 11852 0000106D 48                      		dec	ax
 11853                                  		; al = 2
 11854                                  		;mov	al, 1		; Function not supported.
 11855                                  		;jmp	short PopStatRet
 11856                                  ; ---------------------------------------------------------------------------
 11857                                  
 11858                                  FormatStatIllegalComb:
 11859                                  		; 10/12/2022
 11860                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11861                                  		; 18/12/2022
 11862 0000106E 48                      		dec	ax
 11863                                  		; al = 2				
 11864                                  		;mov	al, 2		; Function supported, but
 11865                                  					; Illegal sect/trk,trk combination.
 11866                                  		; 10/12/2022
 11867                                  		;jmp	short PopStatRet
 11868                                  ; ---------------------------------------------------------------------------
 11869                                  
 11870                                  FormatStatTimeOut:			
 11871                                  		; 10/12/2022
 11872                                  		; al = 3
 11873                                  		;mov	al, 3		; Function supported, but
 11874                                  					; Media	not present.
 11875                                  PopStatRet:				
 11876 0000106F 5F                      		pop	di
 11877 00001070 5E                      		pop	si
 11878 00001071 1F                      		pop	ds
 11879 00001072 07                      		pop	es
 11880                                  SetMediaRet:				
 11881 00001073 5A                      		pop	dx
 11882 00001074 59                      		pop	cx
 11883 00001075 C3                      		retn
 11884                                  
 11885                                  ; =============== S U B	R O U T	I N E =======================================
 11886                                  
 11887                                  ; 16/10/2022
 11888                                  
 11889                                  ; ---------------------------------------------------------------------------
 11890                                  ;
 11891                                  ; RESET THE DRIVE
 11892                                  ;
 11893                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11894                                  ; slow head settle time for the next operation. this is because the reset
 11895                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11896                                  ; time around - there is a problem with 3.5" drives in that the head does
 11897                                  ; not settle down in time,even for read operations!!
 11898                                  ;
 11899                                  ; ---------------------------------------------------------------------------
 11900                                  
 11901                                  ResetDisk:	
 11902 00001076 50                      		push	ax
 11903 00001077 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11904                                  					; Reset while formatting?
 11905 0000107C 7505                    		jnz	short ResetDisk_cont
 11906                                  					; Then verify operation in "fmt & vrfy"
 11907 0000107E C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11908                                  ResetDisk_cont:				
 11909 00001083 30E4                    		xor	ah, ah		; So signals that we had a format error
 11910 00001085 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11911                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11912 00001087 C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11913                                  					; Zap up the speed
 11914 0000108C 58                      		pop	ax
 11915 0000108D C3                      		retn
 11916                                  
 11917                                  ; =============== S U B	R O U T	I N E =======================================
 11918                                  
 11919                                  ; 16/10/2022
 11920                                  
 11921                                  ; ---------------------------------------------------------------------------
 11922                                  ;
 11923                                  ; This routine sets up the drive parameter table with the values needed for
 11924                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11925                                  ;
 11926                                  ; on entry  -	ES:DI - points to bds for the drive
 11927                                  ;		Xfer_Seg:BX - points to trkbuf
 11928                                  ;		AL    - number of sectors
 11929                                  ;		AH    - int 13 function code
 11930                                  ;		CL    - sector number for verify
 11931                                  ;		DS    - Bios_Data
 11932                                  ;
 11933                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11934                                  ;		AX and flags are the results of the int 13
 11935                                  ;
 11936                                  ; ---------------------------------------------------------------------------
 11937                                  
 11938                                  		; 19/10/2022
 11939                                  ToRom:	
 11940 0000108E 53                      		push	bx
 11941 0000108F 56                      		push	si
 11942                                  
 11943                                  		; Compaq bug fix - check whether we are using new ROM
 11944                                  		; functionality to set up format, not merely if it exists.
 11945                                  		; This was formerly a check against [new_rom]
 11946                                  
 11947 00001090 F606[3806]01            		test	byte [media_set_for_format], 1
 11948 00001095 7536                    		jnz	short GotValidDpt
 11949 00001097 50                      		push	ax
 11950 00001098 06                      		push	es		; Save bds segment
 11951 00001099 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11952                                  					; ffSmall ; is it a 3.5" drive?
 11953 0000109E 9C                      		pushf			; (Save	the cmp	result)
 11954 0000109F 8E06[1A00]              		mov	es, [zeroseg]
 11955                                  		;les	si, es:78h	; Get pointer to disk base table
 11956 000010A3 26C4367800              		les	si, [es:DSKADR]
 11957                                  		;mov	word ptr ds:dpt, si
 11958                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11959 000010A8 8936[2D01]              		mov	[dpt], si
 11960 000010AC 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11961                                  		
 11962 000010B0 A0[3701]                		mov	al, [formt_eot]
 11963 000010B3 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11964 000010B7 A0[3B01]                		mov	al, [gap_patch]
 11965 000010BA 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11966                                  					; Important for	format
 11967 000010BE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11968                                  					; Assume we are	doing a	seek operation
 11969                                  					; Setup	motor start correctly for 3.5" drives
 11970 000010C3 9D                      		popf			; Get result of	earlier	cmp
 11971 000010C4 7505                    		jnz	short MotorStrtOK
 11972 000010C6 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11973                                  MotorStrtOK:				
 11974 000010CB 07                      		pop	es		; Restore bds segment
 11975 000010CC 58                      		pop	ax
 11976                                  GotValidDpt:				
 11977 000010CD 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11978 000010D1 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11979 000010D3 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11980 000010D7 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11981 000010DB 06                      		push	es		; Save bds segment
 11982 000010DC 8E06[3705]              		mov	es, [xfer_seg]
 11983 000010E0 CD13                    		int	13h		; DISK -
 11984 000010E2 07                      		pop	es		; Restore bds segment
 11985 000010E3 5E                      		pop	si
 11986 000010E4 5B                      		pop	bx
 11987 000010E5 C3                      		retn
 11988                                  
 11989                                  ; ---------------------------------------------------------------------------
 11990                                  
 11991                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11992                                  
 11993                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11994                                  
 11995                                  ; ==========================================================================
 11996                                  ;
 11997                                  ; get the owner of the physical drive represented by the logical drive in al.
 11998                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11999                                  ; if this is not the case, the system may hang, just following the linked list.
 12000                                  ;
 12001                                  ; ==========================================================================
 12002                                  
 12003                                  		; 19/10/2022
 12004                                  ioctl_getown:
 12005 000010E6 E8E2F3                  		call	SetDrive
 12006 000010E9 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12007                                  					; Get physical drive number
 12008 000010ED C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12009                                  ownloop:				
 12010 000010F1 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12011 000010F5 7507                    		jnz	short getnextBDS
 12012                                  		; 10/12/2022
 12013 000010F7 26F6452320              		test	byte [es:di+23h], 20h
 12014                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12015                                  					; fi_own_physical
 12016 000010FC 7515                    		jnz	short exitown
 12017                                  getnextBDS:				
 12018 000010FE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12019 00001101 EBEE                    		jmp	short ownloop
 12020                                  ; ---------------------------------------------------------------------------
 12021                                  
 12022                                  ; ==========================================================================
 12023                                  ;
 12024                                  ; set the ownership of the physical drive represented by the logical drive
 12025                                  ; in al to al.
 12026                                  ;
 12027                                  ; ==========================================================================
 12028                                  
 12029                                  		; 19/10/2022
 12030                                  ioctl_setown:
 12031 00001103 E8C5F3                  		call	SetDrive
 12032 00001106 C606[7A00]01            		mov	byte [fsetowner], 1
 12033                                  					; set flag for CheckSingle to look at.
 12034 0000110B E82BF7                  		call	checksingle
 12035 0000110E C606[7A00]00            		mov	byte [fsetowner], 0
 12036                                  					; set ownership	of drive reset flag
 12037                                  		; Fall into ExitOwn
 12038                                  
 12039                                  ; ==========================================================================
 12040                                  ;
 12041                                  ; if there is only one logical drive assigned to this physical drive, return
 12042                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12043                                  ;
 12044                                  ; ==========================================================================
 12045                                  
 12046                                  exitown:				
 12047 00001113 30C9                    		xor	cl, cl
 12048                                  		; 12/12/2022
 12049 00001115 26F6452310              		test	byte [es:di+23h], 10h
 12050                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12051                                  					; fi_am_mult
 12052 0000111A 7406                    		jz	short exitnomult
 12053 0000111C 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12054                                  					; Get logical drive number
 12055                                  					; Get it 1-based
 12056 00001120 FEC1                    		inc	cl
 12057                                  exitnomult:				
 12058 00001122 C51E[1200]              		lds	bx, [ptrsav]
 12059 00001126 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12060                                  					; Exit normal termination
 12061                                  		; 12/12/2022
 12062                                  		; cf=0
 12063                                  		;clc
 12064 00001129 C3                      		retn
 12065                                  
 12066                                  ; =============== S U B	R O U T	I N E =======================================
 12067                                  
 12068                                  ; 16/10/2022
 12069                                  
 12070                                  ; ---------------------------------------------------------------------------
 12071                                  ;
 12072                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12073                                  ; only if the first byte of TempDpt is not -1.
 12074                                  ; all registers (including flags) are preserved.
 12075                                  ;
 12076                                  ; ---------------------------------------------------------------------------
 12077                                  
 12078                                  		; 24/12/2023
 12079                                  		; 19/10/2022
 12080                                  RestoreOldDpt:
 12081                                  		; if we have already restored the disk base table earlier,
 12082                                  		; do not do it again.
 12083                                  
 12084 0000112A 50                      		push	ax
 12085 0000112B 30C0                    		xor	al, al
 12086 0000112D A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12087 00001130 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12088 00001134 08C0                    		or	al, al
 12089 00001136 7418                    		jz	short DontRestore
 12090 00001138 56                      		push	si
 12091 00001139 1E                      		push	ds
 12092 0000113A 06                      		push	es
 12093 0000113B C536[3A06]              		lds	si, [tempdpt]
 12094                                  
 12095                                  		; 17/10/2022
 12096                                  		;mov	es, [cs:BIOSDATAWORD]
 12097                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12098                                  		;mov	es, [es:zeroseg]
 12099                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 12100                                  
 12101                                  		; 24/12/2023
 12102 0000113F 31C0                    		xor	ax, ax
 12103 00001141 8EC0                    		mov	es, ax ; 0
 12104                                  
 12105                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 12106 00001143 2689367800              		mov	[es:DSKADR], si
 12107                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12108 00001148 268C1E7A00              		mov	[es:DSKADR+2], ds
 12109 0000114D 07                      		pop	es
 12110 0000114E 1F                      		pop	ds
 12111 0000114F 5E                      		pop	si
 12112                                  DontRestore:
 12113 00001150 58                      		pop	ax
 12114                                  		; 12/12/2022
 12115                                  		; cf=0
 12116                                  		;clc			;  Clear carry
 12117 00001151 C3                      		retn
 12118                                  
 12119                                  ; ---------------------------------------------------------------------------
 12120                                  
 12121                                  ; 16/10/2022
 12122                                  
 12123                                  ; ==========================================================================
 12124                                  ;	get media id
 12125                                  ; ==========================================================================
 12126                                  ;
 12127                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12128                                  ;	    the media that has the extended boot record.
 12129                                  ;	    for the conventional media,this routine will return "unknown
 12130                                  ;	    media type" error to dos.
 12131                                  ;
 12132                                  ; INPUT :   ES:di -> bds table for this drive.
 12133                                  ;
 12134                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12135                                  ;	    if carry set,then al contains the device driver error number
 12136                                  ;	    that will be returned to dos.
 12137                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12138                                  ;
 12139                                  ; SUBROUTINES TO BE CALLED:
 12140                                  ;	BootIo:NEAR
 12141                                  ;
 12142                                  ; LOGIC:
 12143                                  ;	to recognize the extended boot record,this logic will actually
 12144                                  ;	access the boot sector even if it is a hard disk.
 12145                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12146                                  ;	field of bpb and the extended boot signature.
 12147                                  ;
 12148                                  ; {
 12149                                  ;	get logical drive number from bds table;
 12150                                  ;	rFlag = read operation;
 12151                                  ;	BootIo;		 /*get the media boot record into the buffer
 12152                                  ;	if (no error) then
 12153                                  ;	     if (extended boot record) then
 12154                                  ;		{ set volume label,volume serial number and system id
 12155                                  ;		  of the request packet to those of the boot record;
 12156                                  ;		};
 12157                                  ;	     else		  /*not an extended bpb */
 12158                                  ;		{ set register al to "unknown media.." error code;
 12159                                  ;		  set carry bit;
 12160                                  ;		};
 12161                                  ;	else
 12162                                  ;	     ret;	/*already error code is set in the register al
 12163                                  ;
 12164                                  ; ==========================================================================
 12165                                  
 12166                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12167                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12168                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12169                                  
 12170                                  		; 19/10/2022
 12171                                  GetMediaId:
 12172 00001152 E89F00                  		call	ChangeLineChk
 12173 00001155 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12174 00001159 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12175 0000115E E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12176 00001161 7224                    		jb	short IOCtl_If1
 12177                                  					; Valid? (0F0h-0FFh?)
 12178 00001163 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12179                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12180 00001168 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12181                                  		; 10/12/2022
 12182 0000116A BE[7401]                		mov	si, disksector+26h
 12183 0000116D 803C29                  		cmp	byte [si], 29h
 12184                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12185                                  					; EXT_BOOT_SIGNATURE
 12186 00001170 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12187 00001172 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12188 00001176 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12189                                  		; 10/12/2022
 12190 0000117A 46                      		inc	si
 12191                                  		; si = disksector+27h 
 12192                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12193 0000117B 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12194 0000117E B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12195                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12196                                  					; +size_of_EXT_SYSTEM_ID
 12197 00001181 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12198                                  	
 12199                                  		; 10/12/2022
 12200                                  		; cf = 0
 12201                                  		;clc
 12202                                  
 12203 00001183 C3                      		retn
 12204                                  ; ---------------------------------------------------------------------------
 12205                                  
 12206                                  IOCtl_If2:				
 12207 00001184 B007                    		mov	al, 7		; error_unknown_media
 12208 00001186 F9                      		stc
 12209                                  IOCtl_If1:				
 12210 00001187 C3                      		retn
 12211                                  ; ---------------------------------------------------------------------------
 12212                                  
 12213                                  ; 16/10/2022
 12214                                  
 12215                                  ; ==========================================================================
 12216                                  ;  set media id
 12217                                  ; ==========================================================================
 12218                                  
 12219                                  ; function: set the volume label, the system id and the serial number of
 12220                                  ;	    the media that has the extended boot record.
 12221                                  ;	    for the conventional media, this routine will return "unknown
 12222                                  ;	    media.." error to dos.
 12223                                  ;	    this routine will also set the corresponding informations in
 12224                                  ;	    the bds table.
 12225                                  ;
 12226                                  ; input :   ES:di -> bds table for this drive.
 12227                                  ;
 12228                                  ; output:   the extended boot record in the media will be set according to
 12229                                  ;	    the request packet.
 12230                                  ;	    if carry set, then al contains the device driver error number
 12231                                  ;	    that will be returned to dos.
 12232                                  ;
 12233                                  ; subroutines to be called:
 12234                                  ;	BootIo:NEAR
 12235                                  ;
 12236                                  ; logic:
 12237                                  ;
 12238                                  ; {
 12239                                  ;	get drive_number from bds;
 12240                                  ;	rFlag = "read operation";
 12241                                  ;	BootIo;
 12242                                  ;	if (no error) then
 12243                                  ;	     if (extended boot record) then
 12244                                  ;		{ set volume label,volume serial number and system id
 12245                                  ;		  of the boot record to those of the request packet;
 12246                                  ;		  rFlag = "write operation";
 12247                                  ;		  get drive number from bds;
 12248                                  ;		  BootIo;	  /*write it back*/
 12249                                  ;		};
 12250                                  ;	     else		  /*not an extended bpb */
 12251                                  ;		{ set register al to "unknown media.." error code;
 12252                                  ;		  set carry bit;
 12253                                  ;		  ret;	 /*return back to caller */
 12254                                  ;		};
 12255                                  ;	else
 12256                                  ;	     ret;		 /*already error code is set */
 12257                                  ;
 12258                                  ; ==========================================================================
 12259                                  
 12260                                  		; 19/10/2022
 12261                                  SetMediaId:
 12262 00001188 E86900                  		call	ChangeLineChk
 12263 0000118B 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12264                                  					; Logical drive	number
 12265 0000118F 88C2                    		mov	dl, al
 12266 00001191 C606[2001]02            		mov	byte [rflag], 2	; romread
 12267 00001196 52                      		push	dx
 12268 00001197 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12269 0000119A 5A                      		pop	dx
 12270 0000119B 723E                    		jb	short IOCtl_If6
 12271                                  					; Valid? (0F0h-0FFh?)
 12272 0000119D 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12273                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12274 000011A2 7234                    		jb	short IOCtl_If7	; Brif not
 12275 000011A4 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12276                                  					; EXT_BOOT_SIGNATURE
 12277 000011A9 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12278 000011AB 06                      		push	es		; Save BDS pointer
 12279 000011AC 57                      		push	di
 12280 000011AD 1E                      		push	ds		; Point	ES To boot record
 12281 000011AE 07                      		pop	es
 12282 000011AF BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12283 000011B2 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12284 000011B6 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12285 000011B9 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12286 000011BC B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12287                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12288                                  					; +size_of_EXT_SYSTEM_ID
 12289 000011BF F3A4                    		rep movsb
 12290 000011C1 06                      		push	es		; point	ds back	to Bios_Data
 12291 000011C2 1F                      		pop	ds
 12292 000011C3 5F                      		pop	di		; restore bds pointer
 12293 000011C4 07                      		pop	es
 12294 000011C5 E86DF5                  		call	mov_media_ids	; update the bds media id info.
 12295 000011C8 88D0                    		mov	al, dl
 12296 000011CA C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12297 000011CF E80A00                  		call	BootIo		; write	it back.
 12298 000011D2 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12299                                  					; make sure chk_media check the driver
 12300                                  					; return with error code from BootIo
 12301 000011D7 C3                      		retn
 12302                                  ; ---------------------------------------------------------------------------
 12303                                  
 12304                                  IOCtl_If7:				
 12305 000011D8 B007                    		mov	al, 7		; error_unknown_media
 12306 000011DA F9                      		stc
 12307                                  IOCtl_If6:				
 12308 000011DB C3                      		retn
 12309                                  
 12310                                  ; =============== S U B	R O U T	I N E =======================================
 12311                                  
 12312                                  ; 16/10/2022
 12313                                  
 12314                                  ; ---------------------------------------------------------------------------
 12315                                  ;	BootIo
 12316                                  ; ---------------------------------------------------------------------------
 12317                                  ;
 12318                                  ; function: read/write the boot record into boot sector.
 12319                                  ;
 12320                                  ; input :
 12321                                  ;	    al=logical drive number
 12322                                  ;	    rFlag = operation (read/write)
 12323                                  ;
 12324                                  ; output:   for read operation,the boot record of the drive specified in bds
 12325                                  ;	    be read into the DiskSector buffer.
 12326                                  ;	    for write operation,the DiskSector buffer image will be written
 12327                                  ;	    to the drive specified in bds.
 12328                                  ;	    if carry set,then al contains the device driver error number
 12329                                  ;	    that will be returned to dos.
 12330                                  ;	    AX,CX,DX register destroyed.
 12331                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12332                                  ;
 12333                                  ; subroutines to be called:
 12334                                  ;	DiskIO:NEAR
 12335                                  ;
 12336                                  ; logic:
 12337                                  ;
 12338                                  ; {
 12339                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12340                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12341                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12342                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12343                                  ; }
 12344                                  ; ==========================================================================
 12345                                  
 12346                                  		; 19/10/2022
 12347                                  BootIo:	
 12348 000011DC 06                      		push	es
 12349 000011DD 57                      		push	di
 12350 000011DE 53                      		push	bx
 12351 000011DF 1E                      		push	ds
 12352 000011E0 07                      		pop	es		; Point ES: to Bios_Data
 12353                                  
 12354                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12355                                  		; need to be initialized for this subroutine out here are
 12356                                  		; - Transfer address to Bios_Data:DiskSector
 12357                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12358                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12359                                  		; - Number of sectors <-- 1
 12360                                  
 12361 000011E1 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12362 000011E4 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12363 000011E6 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12364 000011EA B90100                  		mov	cx, 1
 12365 000011ED E8D7F6                  		call	diskio
 12366 000011F0 5B                      		pop	bx
 12367 000011F1 5F                      		pop	di
 12368 000011F2 07                      		pop	es
 12369 000011F3 C3                      		retn
 12370                                  
 12371                                  ; =============== S U B	R O U T	I N E =======================================
 12372                                  
 12373                                  ; 16/10/2022
 12374                                  
 12375                                  ; ---------------------------------------------------------------------------
 12376                                  ;	ChangeLineChk
 12377                                  ; ---------------------------------------------------------------------------
 12378                                  ;
 12379                                  ; when the user calls get/set media id call before dos establishes the media
 12380                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12381                                  ; lost.	this routine will check the change line activity and will save the
 12382                                  ; history in the flags.
 12383                                  ;
 12384                                  ; FUNCTION: check the change line error activity
 12385                                  ;
 12386                                  ; INPUT :  ES:di -> bds table.
 12387                                  ;
 12388                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12389                                  ;
 12390                                  ; SUBROUTINES TO BE CALLED:
 12391                                  ;	Set_Changed_DL
 12392                                  ;
 12393                                  ; ---------------------------------------------------------------------------
 12394                                  
 12395                                  ChangeLineChk:	
 12396 000011F4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12397 000011F8 08D2                    		or	dl, dl		; Fixed	disk?
 12398 000011FA 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12399                                  		; 12/12/2022
 12400 000011FC 26F6452304              		test	byte [es:di+23h], 4
 12401                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12402                                  					; return_fake_bpb
 12403 00001201 751A                    		jnz	short ChangeLnChkRet
 12404 00001203 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12405 00001208 7513                    		jnz	short ChangeLnChkRet
 12406 0000120A E8F806                  		call	haschange	; This drive support change line?
 12407 0000120D 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12408                                  
 12409                                  		; Execute the rom disk interrupt to check changeline activity.
 12410                                  
 12411 0000120F B416                    		mov	ah, 16h
 12412 00001211 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12413                                  					; DL = drive to	check
 12414                                  					; Return: AH = disk change status
 12415 00001213 7308                    		jnb	short ChangeLnChkRet
 12416 00001215 53                      		push	bx
 12417 00001216 BB4000                  		mov	bx, 40h		; fchanged
 12418                                  					; Update flag in BDS for this
 12419                                  					; physical drive
 12420 00001219 E8C206                  		call	set_changed_dl
 12421 0000121C 5B                      		pop	bx
 12422                                  ChangeLnChkRet:				
 12423 0000121D C3                      		retn
 12424                                  
 12425                                  ; ---------------------------------------------------------------------------
 12426                                  
 12427                                  ; 16/10/2022
 12428                                  
 12429                                  ; ==========================================================================
 12430                                  ;	GetAccessFlag
 12431                                  ; ==========================================================================
 12432                                  ;
 12433                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12434                                  ;
 12435                                  ; INPUT :
 12436                                  ;	    ES:di -> bds table
 12437                                  ;
 12438                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12439                                  ;						 = 1 if disk i/o allowed.
 12440                                  ; ==========================================================================
 12441                                  
 12442                                  		; 19/10/2022
 12443                                  GetAccessFlag:				
 12444 0000121E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12445 00001222 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12446                                  		;mov	al, 0		; Assume result	is unformatted
 12447                                  		; 10/12/2022
 12448 00001225 28C0                    		sub	al, al
 12449                                  		; 10/12/2022
 12450 00001227 26F6452402              		test	byte [es:di+36], 02h
 12451                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12452                                  					; unformatted_media
 12453 0000122C 7502                    		jnz	short GafDone	; Done if unformatted
 12454 0000122E FEC0                    		inc	al		; Return true for formatted
 12455                                  
 12456                                  GafDone:				
 12457 00001230 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12458 00001233 C3                      		retn
 12459                                  ; ---------------------------------------------------------------------------
 12460                                  
 12461                                  ; 16/10/2022
 12462                                  
 12463                                  ; ==========================================================================
 12464                                  ;	SetAccessFlag
 12465                                  ; ==========================================================================
 12466                                  ;
 12467                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12468                                  ;
 12469                                  ; input :
 12470                                  ;	    ES:di -> bds table
 12471                                  ;
 12472                                  ; output:   unformtted_media bit modified according to the user request
 12473                                  ; ==========================================================================
 12474                                  
 12475                                  		; 19/10/2022
 12476                                  SetAccessFlag:				
 12477 00001234 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12478 00001238 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12479                                  		; 10/12/2022
 12480 0000123B 26806524FD              		and	byte [es:di+36], 0FDh
 12481                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12482                                  					; ~unformatted_media
 12483 00001240 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12484 00001244 7505                    		jnz	short saf_Done
 12485                                  		; 10/12/2022
 12486 00001246 26804D2402              		or	byte [es:di+36], 02h
 12487                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12488                                  					; unformatted_media
 12489                                  saf_Done:				
 12490 0000124B C3                      		retn
 12491                                  ; ---------------------------------------------------------------------------
 12492                                  
 12493                                  ; 16/10/2022
 12494                                  
 12495                                  ; ==========================================================================
 12496                                  ; Ioctl_Support_Query
 12497                                  ; ==========================================================================
 12498                                  ;
 12499                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12500                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12501                                  ; device attributes specifies if this function is supported.
 12502                                  ;
 12503                                  ; ==========================================================================
 12504                                  
 12505                                  		; 19/10/2022
 12506                                  ioctl_support_query:
 12507 0000124C 06                      		push	es
 12508 0000124D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12509 00001251 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12510                                  					; AL ==	Major, AH == Minor
 12511 00001255 3C08                    		cmp	al, 8		; IOC_DC
 12512                                  					; See if major code is 8
 12513 00001257 7513                    		jnz	short nosupport
 12514 00001259 0E                      		push	cs
 12515 0000125A 07                      		pop	es
 12516 0000125B B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12517                                  		; 10/12/2022
 12518 0000125E BF[350C]                		mov	di, IOC_DC_Table
 12519                                  		;mov	di, 0C60h	; IOC_DC_Table
 12520                                  					; at 2C7h:0C60h	= 70h:31D0h
 12521 00001261 86C4                    		xchg	al, ah		; Put minor code in AL
 12522 00001263 F2AE                    		repne scasb		; Scan for minor code in AL
 12523 00001265 7505                    		jnz	short nosupport	; it was not found
 12524 00001267 B80001                  		mov	ax, 100h
 12525                                  		; 10/12/2022
 12526                                  		; (jump to ioctlsupexit is not required)
 12527                                  		;jmp	short $+2	; ioctlsupexit
 12528                                  					; Signal ioctl is supported
 12529                                  		;;jmp	short ioctlsupexit
 12530                                  ; ---------------------------------------------------------------------------
 12531                                  ioctlsupexit:				
 12532 0000126A 07                      		pop	es
 12533                                  		; 10/12/2022
 12534                                  		; cf = 0
 12535                                  		;clc
 12536 0000126B C3                      		retn
 12537                                  ; ---------------------------------------------------------------------------
 12538                                  nosupport:				
 12539 0000126C 07                      		pop	es
 12540 0000126D E965EE                  		jmp	bc_cmderr
 12541                                  ; ---------------------------------------------------------------------------
 12542                                  
 12543                                  ; 16/10/2022
 12544                                  
 12545                                  ; ==========================================================================
 12546                                  ;	GetMediaSenseStatus
 12547                                  ; ==========================================================================
 12548                                  ;
 12549                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12550                                  ;	    diskette drive and whether the media is the default type
 12551                                  ;	    for that drive. (default type means the max size for that
 12552                                  ;	    drive)
 12553                                  ;
 12554                                  ; INPUT :   ES:DI -> BDS table
 12555                                  ; OUTPUT:   If carry clear
 12556                                  ;	    DS:BX -> Updated IOCtlPacket
 12557                                  ;
 12558                                  ;			 Special Function at offset 0:
 12559                                  ;				0	- Media detected is not default type
 12560                                  ;				1	- Media detected is default type
 12561                                  ;
 12562                                  ;			 Device Type at offset 1:
 12563                                  ;				2       - 720K 3.5" 80 tracks
 12564                                  ;				7	- 1.44M 3.5" 80 tracks
 12565                                  ;				9	- 2.88M 3.5" 80 tracks
 12566                                  ;
 12567                                  ; Error Codes returned in AX if carry set:
 12568                                  ;
 12569                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12570                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12571                                  ;				  the media is really unkown, any error
 12572                                  ;				  other than "media not present"
 12573                                  ; 
 12574                                  ; ==========================================================================
 12575                                  
 12576                                  		; 19/10/2022
 12577                                  SenseMediaType:				
 12578 00001270 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12579 00001274 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12580                                  		; 10/10/2022
 12581                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12582 00001277 31D2                    		xor	dx, dx
 12583 00001279 8917                    		mov	[bx], dx ; 0
 12584                                  		;
 12585 0000127B 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12586                                  					; Get int 13h drive number from	BDS
 12587                                  		; 10/12/2022
 12588                                  		;xor	dh, dh		; DX = physical	drive number
 12589 0000127F B420                    		mov	ah, 20h		; Get Media Type function
 12590                                  					; If no	carry media type in AL
 12591 00001281 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12592 00001283 7216                    		jb	short MediaSenseEr ; error code	in AH
 12593 00001285 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12594                                  DetermineMediaType:			
 12595 00001287 FEC8                    		dec	al
 12596 00001289 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12597 0000128B 740A                    		jz	short GotMediaType
 12598 0000128D 0404                    		add	al, 4
 12599 0000128F 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12600 00001291 7404                    		jz	short GotMediaType
 12601 00001293 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12602 00001295 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12603                                  GotMediaType:				
 12604 00001297 884701                  		mov	[bx+1],	al	; Save the return value
 12605                                  		; 10/12/2022
 12606                                  		; cf = 0
 12607                                  		;clc			; Signal success
 12608 0000129A C3                      		retn
 12609                                  ; ---------------------------------------------------------------------------
 12610                                  
 12611                                  MediaSenseEr:				
 12612 0000129B 80FC32                  		cmp	ah, 32h		; See if not default media error
 12613 0000129E 74E7                    		jz	short DetermineMediaType ; Not really an error
 12614 000012A0 B002                    		mov	al, 2		; Now assume drive not ready
 12615 000012A2 80FC31                  		cmp	ah, 31h		; See if media was present
 12616 000012A5 7402                    		jz	short SenseErrExit ; Return drive not ready
 12617                                  UnknownMediaType:			
 12618 000012A7 B007                    		mov	al, 7		; Just don't know the media type
 12619                                  SenseErrExit:				
 12620 000012A9 B481                    		mov	ah, 81h		; Signal error return
 12621 000012AB F9                      		stc
 12622 000012AC C3                      		retn
 12623                                  
 12624                                  ; ---------------------------------------------------------------------------
 12625                                  		; 10/12/2022
 12626                                  		;db    0
 12627                                  ; ---------------------------------------------------------------------------
 12628                                  
 12629                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12630                                  
 12631                                  ;-----------------------------------------------------------------------------
 12632                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12633                                  ;-----------------------------------------------------------------------------
 12634                                  ; 16/03/2019 - Retro DOS v4.0
 12635                                  
 12636                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12637                                  ;	after booting. this allows testing and implementation of custom int_13
 12638                                  ;	handlers, without giving up ms-dos error recovery
 12639                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12640                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12641                                  ;	exit:	orig13	== address of new int_13 handler
 12642                                  ;		ds:dx	== old orig13 value
 12643                                  ;		es:bx	== old old13  value
 12644                                  ;
 12645                                  ; int 2f handler for external block drivers to communicate with the internal
 12646                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12647                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12648                                  ; dsk_entry, the entry point for all disk requests.
 12649                                  ;
 12650                                  ; on exit from this driver, we will return to the external driver
 12651                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12652                                  ; this scheme allows us to have a small external device driver, and makes
 12653                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12654                                  ; since we only need to make changes in one place (most of the time).
 12655                                  ;
 12656                                  ;   ax=800h - check for installed handler - reserved
 12657                                  ;   ax=801h - install the bds into the linked list
 12658                                  ;   ax=802h - dos request
 12659                                  ;   ax=803h - return bds table starting pointer in ds:di
 12660                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12661                                  ;	    problem. bds table is going to be used to get head/sector
 12662                                  ;	    informations without calling generic ioctl get device parm call.)
 12663                                  
 12664                                  ;BIOSSEGMENT equ 70h
 12665                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12666                                  
 12667                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12668                                  
 12669                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12670 000012AD 80FC13                  		cmp	ah, 13h
 12671 000012B0 7413                    		jz	short int2f_replace_int13
 12672 000012B2 80FC08                  		cmp	ah, 8
 12673 000012B5 743B                    		jz	short mine
 12674                                  
 12675                                  ; Check for WIN386 startup and return the BIOS instance data
 12676                                  
 12677 000012B7 80FC16                  		cmp	ah, 16h		; MultWin386
 12678 000012BA 7479                    		jz	short win386call
 12679 000012BC 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12680 000012BF 7503                    		jnz	short i2f_handler_iret
 12681 000012C1 E9A500                  		jmp	handle_multmult
 12682                                  ; ---------------------------------------------------------------------------
 12683                                  
 12684                                  i2f_handler_iret:			
 12685 000012C4 CF                      		iret
 12686                                  ; ---------------------------------------------------------------------------
 12687                                  
 12688                                  int2f_replace_int13:			
 12689 000012C5 50                      		push	ax	; free up a register for caller's ds
 12690 000012C6 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12691                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12692                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12693                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12694 000012C8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12695                                  		; 19/10/2022
 12696                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12697                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12698                                  		;push	word ptr ds:Old13	; return them to caller
 12699                                  		;push	word ptr ds:Old13+2
 12700 000012CD FF36[B400]              		push	word [Orig13]
 12701 000012D1 FF36[B600]              		push	word [Orig13+2]
 12702 000012D5 FF36[0601]              		push	word [Old13]
 12703 000012D9 FF36[0801]              		push	word [Old13+2]
 12704                                  
 12705                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12706                                  		;mov	word ptr ds:Orig13+2, ax
 12707                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12708                                  		;mov	word ptr ds:Old13+2, es
 12709 000012DD 8916[B400]              		mov	[Orig13], dx
 12710 000012E1 A3[B600]                		mov	[Orig13+2], ax
 12711 000012E4 891E[0601]              		mov	[Old13], bx
 12712 000012E8 8C06[0801]              		mov	[Old13+2], es
 12713                                  
 12714 000012EC 07                      		pop	es			; es:bx := old old13 vector
 12715 000012ED 5B                      		pop	bx
 12716 000012EE 1F                      		pop	ds			; ds:dx := old orig13 vector
 12717 000012EF 5A                      		pop	dx
 12718 000012F0 58                      		pop	ax
 12719                                  i2f_iret:				
 12720 000012F1 CF                      		iret
 12721                                  ; ---------------------------------------------------------------------------
 12722                                  
 12723                                  mine:					
 12724 000012F2 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12725 000012F4 73FB                    		jnb	short i2f_iret
 12726 000012F6 08C0                    		or	al, al			; a get installed state request?
 12727 000012F8 7504                    		jnz	short disp_func
 12728 000012FA B0FF                    		mov	al, 0FFh
 12729 000012FC EBF3                    		jmp	short i2f_iret
 12730                                  ; ---------------------------------------------------------------------------
 12731                                  
 12732                                  disp_func:				
 12733 000012FE 3C01                    		cmp	al, 1			; request for installing bds?
 12734 00001300 7418                    		jz	short do_subfun_01
 12735 00001302 3C03                    		cmp	al, 3			; get bds vector?
 12736 00001304 7424                    		jz	short do_get_bds_vector
 12737                                  
 12738                                  ; set up pointer to request packet
 12739                                  
 12740 00001306 1E                      		push	ds
 12741 00001307 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12742                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12743                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12744                                  		; 19/10/2022
 12745                                  		;mov	word ptr ds:ptrsav, bx
 12746                                  		;mov	word ptr ds:ptrsav+2, es
 12747 0000130C 891E[1200]              		mov	[ptrsav], bx
 12748 00001310 8C06[1400]              		mov	[ptrsav+2], es
 12749 00001314 1F                      		pop	ds
 12750                                  		;jmp	far ptr	i2f_dskentry
 12751                                  		; 17/10/2022
 12752                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12753 00001315 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12754                                  					; NOTE: jump to a FAR function, not an
 12755                                  					;  IRET type function. Callers of
 12756                                  					;  this int2f subfunction will have
 12757                                  					;  to be careful to do a popf
 12758                                  
 12759                                  ; ---------------------------------------------------------------------------
 12760                                  
 12761                                  do_subfun_01:				
 12762 0000131A 06                      		push	es
 12763 0000131B 1E                      		push	ds
 12764 0000131C 1E                      		push	ds
 12765 0000131D 07                      		pop	es
 12766                                  		; 17/10/2022
 12767 0000131E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12768                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12769                                  					; point	ds: -> Bios_Data
 12770 00001323 E8C303                  		call	install_bds
 12771 00001326 1F                      		pop	ds
 12772 00001327 07                      		pop	es
 12773 00001328 EBC7                    		jmp	short i2f_iret
 12774                                  ; ---------------------------------------------------------------------------
 12775                                  
 12776                                  do_get_bds_vector:
 12777                                  		; 17/10/2022
 12778 0000132A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12779                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12780 0000132F C53E[1901]              		lds	di, [start_bds]
 12781                                  		;lds	di, ds:start_bds
 12782                                  ;ii2f_iret:	; 10/12/2022				
 12783 00001333 EBBC                    		jmp	short i2f_iret
 12784                                  ; ---------------------------------------------------------------------------
 12785                                  
 12786                                  ; 17/10/2022
 12787                                  ; 16/10/2022
 12788                                  
 12789                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12790                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12791                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12792                                  
 12793                                  win386call:				
 12794 00001335 1E                      		push	ds
 12795 00001336 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12796                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12797                                  					; at 2C7h:30h =	70h:25A0h
 12798 0000133B 3C05                    		cmp	al, 5		; Win386_Init
 12799                                  					; is it	win386 initializing?
 12800 0000133D 7410                    		jz	short Win386Init
 12801 0000133F 3C06                    		cmp	al, 6		; Win386_Exit
 12802                                  					; is it	win386 exiting?
 12803 00001341 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12804                                  		; 12/12/2022
 12805 00001343 F6C201                  		test	dl, 1
 12806                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12807 00001346 751E                    		jnz	short win_iret	; if not win386, then continue
 12808                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12809 00001348 8026[CE08]00            		and	byte [IsWin386], 0 
 12810 0000134D EB17                    		jmp	short win_iret
 12811                                  ; ---------------------------------------------------------------------------
 12812                                  
 12813                                  Win386Init:	
 12814                                  		; 12/12/2022
 12815 0000134F F6C201                  		test	dl, 1			
 12816                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12817 00001352 7512                    		jnz	short win_iret	; if not win386, then continue
 12818                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12819 00001354 800E[CE08]01            		or	byte [IsWin386], 1
 12820                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12821                                  		;mov	word ptr ds:SI_Next+2, es
 12822 00001359 891E[9C08]              		mov	[SI_Next], bx
 12823 0000135D 8C06[9E08]              		mov	[SI_Next+2], es
 12824                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12825 00001361 BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12826 00001364 1E                      		push	ds
 12827 00001365 07                      		pop	es
 12828                                  win_iret:				
 12829 00001366 1F                      		pop	ds
 12830                                  ii2f_iret:	; 10/12/2022	
 12831 00001367 EB88                    		jmp	short i2f_iret	; return back up the chain
 12832                                  ; ---------------------------------------------------------------------------
 12833                                  
 12834                                  handle_multmult:			
 12835 00001369 3C01                    		cmp	al, 1
 12836 0000136B 7515                    		jnz	short try_2
 12837 0000136D 1E                      		push	ds
 12838 0000136E E84700                  		call	HMAPtr		; get offset of free HMA
 12839                                  		; 10/12/2022
 12840                                  		;xor	bx, bx
 12841                                  		;dec	bx
 12842 00001371 BBFFFF                  		mov	bx, 0FFFFh
 12843 00001374 8EC3                    		mov	es, bx		; seg of HMA
 12844 00001376 89FB                    		mov	bx, di
 12845 00001378 F7D3                    		not	bx
 12846 0000137A 09DB                    		or	bx, bx
 12847 0000137C 7401                    		jz	short try_1
 12848 0000137E 43                      		inc	bx
 12849                                  try_1:					
 12850 0000137F 1F                      		pop	ds
 12851 00001380 EBE5                    		jmp	short ii2f_iret
 12852                                  ; ---------------------------------------------------------------------------
 12853                                  
 12854                                  try_2:					
 12855 00001382 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12856 00001384 7530                    		jnz	short try_3
 12857 00001386 1E                      		push	ds
 12858                                  		; 10/12/2022
 12859                                  		;xor	di, di
 12860                                  		;dec	di
 12861 00001387 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12862 0000138A 8EC7                    		mov	es, di
 12863 0000138C E82900                  		call	HMAPtr		; get offset of free HMA
 12864 0000138F 83FFFF                  		cmp	di, 0FFFFh
 12865 00001392 7421                    		jz	short InsuffHMA
 12866 00001394 F7DF                    		neg	di		; free space in HMA
 12867 00001396 39FB                    		cmp	bx, di
 12868 00001398 7605                    		jbe	short try_4
 12869                                  		; 10/12/2022
 12870                                  		;sub	di, di
 12871                                  		;dec	di
 12872 0000139A BFFFFF                  		mov	di, 0FFFFh
 12873 0000139D EB16                    		jmp	short InsuffHMA
 12874                                  ; ---------------------------------------------------------------------------
 12875                                  
 12876                                  try_4:					
 12877                                  		;mov	di, ds:FreeHMAPtr
 12878 0000139F 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12879 000013A3 83C30F                  		add	bx, 15
 12880                                  		;and	bx, 0FFF0h
 12881                                  		; 10/12/2022
 12882 000013A6 80E3F0                  		and	bl, 0F0h
 12883                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12884 000013A9 011E[F508]              		add	[FreeHMAPtr], bx
 12885 000013AD 7506                    		jnz	short InsuffHMA
 12886 000013AF C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12887                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12888                                  					; no more HMA if we have wrapped
 12889                                  InsuffHMA:				
 12890 000013B5 1F                      		pop	ds
 12891                                  		; 10/12/2022
 12892                                  try_3:		
 12893 000013B6 EBAF                    		jmp	short ii2f_iret
 12894                                  ; ---------------------------------------------------------------------------
 12895                                  
 12896                                  		; 10/12/2022
 12897                                  ;try_3:					
 12898                                  		;jmp	ii2f_iret
 12899                                  
 12900                                  ; =============== S U B	R O U T	I N E =======================================
 12901                                  
 12902                                  ; 16/10/2022
 12903                                  
 12904                                  ;--------------------------------------------------------------------------
 12905                                  ;
 12906                                  ; procedure : HMAPtr
 12907                                  ;
 12908                                  ;		Gets the offset of the free HMA area ( with respect to
 12909                                  ;							seg ffff )
 12910                                  ;		If DOS has not moved high, tries to move DOS high.
 12911                                  ;		In the course of doing this, it will allocate all the HMA
 12912                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12913                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12914                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12915                                  ;
 12916                                  ;	RETURNS : offset of free HMA in DI
 12917                                  ;		  BIOS_DATA, seg in DS
 12918                                  ;
 12919                                  ;--------------------------------------------------------------------------
 12920                                  
 12921                                  		; 17/10/2022
 12922                                  HMAPtr:
 12923 000013B8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12924                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12925 000013BD 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12926                                  		;mov	di, ds:FreeHMAPtr
 12927 000013C1 83FFFF                  		cmp	di, 0FFFFh
 12928 000013C4 750F                    		jnz	short HMAPtr_retn
 12929 000013C6 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12930                                  		;cmp	ds:SysinitPresent, 0
 12931 000013CB 7408                    		jz	short HMAPtr_retn
 12932 000013CD FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12933                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12934 000013D1 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12935                                  		;mov	di, ds:FreeHMAPtr
 12936                                  HMAPtr_retn:				
 12937 000013D5 C3                      		retn
 12938                                  
 12939                                  ; =============== S U B	R O U T	I N E =======================================
 12940                                  
 12941                                  ; 16/10/2022
 12942                                  
 12943                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12944                                  ; but go ahead and update direction flag, si, & di
 12945                                  
 12946                                  move_sector:
 12947                                  
 12948                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12949                                  ; any segment to be a fault. Theoretically, this could be handled
 12950                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12951                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12952                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12953                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12954                                  ; mode. Their fault handler was only designed to deal with one
 12955                                  ; special case which occurred in a magazine benchmark, but didn't
 12956                                  ; handle the general case worth beans.
 12957                                  ;
 12958                                  ; Simply changing this code to do a byte loop would work okay but
 12959                                  ; would involve a general case performance hit. Therefore, we'll
 12960                                  ; check for either source or destination offsets being within one
 12961                                  ; sector of the end of their segments and only in that case fall
 12962                                  ; back to a byte move.
 12963                                  
 12964 000013D6 FC                      		cld
 12965 000013D7 51                      		push	cx
 12966 000013D8 B90001                  		mov	cx, 256
 12967 000013DB 81FE00FE                		cmp	si, 0FE00h
 12968 000013DF 770A                    		ja	short movsec_bytes
 12969 000013E1 81FF00FE                		cmp	di, 0FE00h
 12970 000013E5 7704                    		ja	short movsec_bytes
 12971 000013E7 F3A5                    		rep movsw
 12972 000013E9 59                      		pop	cx
 12973 000013EA C3                      		retn
 12974                                  ; ---------------------------------------------------------------------------
 12975                                  
 12976                                  movsec_bytes:				
 12977 000013EB D1E1                    		shl	cx, 1
 12978 000013ED F3A4                    		rep movsb
 12979 000013EF 59                      		pop	cx
 12980 000013F0 C3                      		retn
 12981                                  
 12982                                  ; =============== S U B	R O U T	I N E =======================================
 12983                                  
 12984                                  ; 16/10/2022
 12985                                  
 12986                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12987                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12988                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12989                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12990                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12991                                  ; but we break down a request when we get an ecc or dma error into several
 12992                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12993                                  ; number of sectors on a track on the medium, and the request would fail.
 12994                                  ;
 12995                                  ; input conditions:
 12996                                  ;	all registers set up for an int 13 request.
 12997                                  ;
 12998                                  ; output:
 12999                                  ;	dh - contains starting head number for request
 13000                                  ;	cx - contains starting sector and cylinder numbers
 13001                                  ;	(the above may or may not have been changed, and are 0-based)
 13002                                  ;	all other registers preserved.
 13003                                  
 13004                                  check_wrap:	
 13005 000013F1 50                      		push	ax
 13006 000013F2 53                      		push	bx
 13007 000013F3 06                      		push	es
 13008 000013F4 57                      		push	di
 13009 000013F5 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 13010 000013F8 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 13011                                  		; 12/12/2022
 13012 000013FA 26F6452301              		test	byte [es:di+23h], 1
 13013                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13014 000013FF 7459                    		jz	short no_wrap	; no wrapping for removable media
 13015 00001401 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13016 00001405 89C8                    		mov	ax, cx
 13017 00001407 83E03F                  		and	ax, 3Fh		; extract sector number
 13018 0000140A 39D8                    		cmp	ax, bx		; are we going to wrap?
 13019 0000140C 764C                    		jbe	short no_wrap
 13020 0000140E F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13021                                  
 13022                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13023                                  ; last sector on that track.
 13024                                  
 13025 00001410 08E4                    		or	ah, ah
 13026 00001412 7503                    		jnz	short not_on_bound
 13027                                  		; 18/12/2022
 13028 00001414 48                      		dec	ax ; *
 13029 00001415 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13030                                  					; if on	boundary
 13031                                  		;dec	al ; *		; also decrement # of head wraps
 13032                                  not_on_bound:				
 13033 00001417 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13034 0000141A 08E1                    		or	cl, ah		; or in	new sector #
 13035 0000141C 30E4                    		xor	ah, ah		; ax = # of head wraps
 13036 0000141E 40                      		inc	ax
 13037 0000141F 00F0                    		add	al, dh		; add in starting head #
 13038 00001421 80D400                  		adc	ah, 0		; catch	any carry
 13039 00001424 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13040                                  					; are we going to wrap around a	head?
 13041 00001428 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13042 0000142A 52                      		push	dx		; preserve drive number and head number
 13043 0000142B 31D2                    		xor	dx, dx
 13044 0000142D 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13045 00001431 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13046                                  
 13047                                  ; careful here! if new head # is 0, then we are on the last head.
 13048                                  
 13049 00001433 09D2                    		or	dx, dx
 13050 00001435 7507                    		jnz	short no_head_bound
 13051 00001437 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13052                                  
 13053                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13054                                  
 13055 00001439 09C0                    		or	ax, ax
 13056 0000143B 7401                    		jz	short no_head_bound
 13057 0000143D 48                      		dec	ax		; reduce number	of cylinder wraps
 13058                                  no_head_bound:				
 13059 0000143E 88D7                    		mov	bh, dl		; bh has new head number
 13060 00001440 5A                      		pop	dx		; restore drive number and head number
 13061 00001441 FECF                    		dec	bh		; get it 0-based
 13062 00001443 88FE                    		mov	dh, bh		; set up new head number in dh
 13063 00001445 88CF                    		mov	bh, cl
 13064 00001447 80E73F                  		and	bh, 3Fh		; preserve sector number
 13065 0000144A B306                    		mov	bl, 6
 13066 0000144C 86CB                    		xchg	cl, bl
 13067 0000144E D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13068 00001450 00C5                    		add	ch, al		; add in cylinder wrap
 13069 00001452 10E3                    		adc	bl, ah		; add in high byte
 13070 00001454 D2E3                    		shl	bl, cl		; move up to ms	end
 13071 00001456 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13072 00001458 08F9                    		or	cl, bh		; or in	sector number
 13073                                  no_wrap:				
 13074 0000145A F8                      		clc
 13075 0000145B 5F                      		pop	di
 13076 0000145C 07                      		pop	es
 13077 0000145D 5B                      		pop	bx
 13078 0000145E 58                      		pop	ax
 13079 0000145F C3                      		retn
 13080                                  ; ---------------------------------------------------------------------------
 13081                                  
 13082                                  no_wrap_head:				
 13083 00001460 88C6                    		mov	dh, al		; do not lose new head number
 13084 00001462 FECE                    		dec	dh		; get it 0-based
 13085 00001464 EBF4                    		jmp	short no_wrap
 13086                                  
 13087                                  ; =============== S U B	R O U T	I N E =======================================
 13088                                  
 13089                                  ; 16/10/2022
 13090                                  
 13091                                  ; this is a special version of the bds lookup code which is
 13092                                  ; based on physical drives rather than the usual logical drives
 13093                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13094                                  ; otherwise carry is clear
 13095                                  ;
 13096                                  ; guaranteed to trash no registers except es:di
 13097                                  
 13098                                  		; 19/10/2022
 13099                                  find_bds:	
 13100 00001466 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13101                                  fbds_1:					
 13102 0000146A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13103 0000146E 7409                    		jz	short fdbs_2
 13104 00001470 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13105                                  					; go to next bds
 13106 00001473 83FFFF                  		cmp	di, 0FFFFh
 13107 00001476 75F2                    		jnz	short fbds_1
 13108 00001478 F9                      		stc
 13109                                  fdbs_2:					
 13110 00001479 C3                      		retn
 13111                                  
 13112                                  ; =============== S U B	R O U T	I N E =======================================
 13113                                  
 13114                                  ; 16/10/2022
 13115                                  		; 17/10/2022
 13116                                  doint:
 13117                                  		; 10/12/2022
 13118 0000147A 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13119                                  					; get physical drive number
 13120                                  		; 19/10/2022 - Temporary !
 13121                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13122                                  		
 13123 0000147D 30E4                    		xor	ah, ah
 13124 0000147F 08C0                    		or	al, al
 13125 00001481 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13126                                  		; 10/12/2022
 13127 00001483 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13128                                  					; get request code
 13129                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13130 00001486 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13131                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13132 00001489 9D                      		popf
 13133                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13134                                  		; 17/10/2022
 13135 0000148A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13136                                  		;;call	call_orig13	; call far 70h:797h
 13137                                  					; call far KERNEL_SEGMENT:call_orig13
 13138 0000148F 9C                      		pushf
 13139                                  		; 10/12/2022
 13140 00001490 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13141                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13142                                  dointdone:				
 13143 00001493 C3                      		retn
 13144                                  
 13145                                  ;----------------------------------------------------------------------------
 13146                                  
 13147                                  ; 16/10/2022
 13148                                  
 13149                                  ; this is the true int 13 handler. we parse the request to see if there is
 13150                                  ; a dma violation. if so, depending on the function, we:
 13151                                  ;   read/write break the request into three pieces and move the middle one
 13152                                  ;	       into our internal buffer.
 13153                                  ;
 13154                                  ;   format     copy the format table into the buffer
 13155                                  ;   verify     point the transfer address into the buffer
 13156                                  ;
 13157                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13158                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13159                                  ; the offending sector into the buffer below and do the i/o from there.
 13160                                  
 13161                                  ;struc INT13FRAME
 13162                                  ;.oldbp: resw
 13163                                  ;.oldax: resw 
 13164                                  ;.oldbx: resw
 13165                                  ;.oldcx: resw
 13166                                  ;.olddx: resw
 13167                                  ;.oldds: resw	; now we save caller's ds, too
 13168                                  ;.olddd: resd
 13169                                  ;.oldf:	resw
 13170                                  ;end struc
 13171                                  
 13172                                  ;----------------------------------------------------------------------------
 13173                                  
 13174                                  ;   entry conditions:
 13175                                  ;	ah = function
 13176                                  ;	al = number of sectors
 13177                                  ;	es:bx = dma address
 13178                                  ;	cx = packed track and sector
 13179                                  ;	dx = head and drive
 13180                                  ;   output conditions:
 13181                                  ;	no dma violation.
 13182                                  
 13183                                  ;	use extreme caution when working with this code. In general,
 13184                                  ;	  all registers are hot at all times.
 13185                                  ;
 13186                                  ;	question:  does this code handle cases where dma errors
 13187                                  ;	  occur during ecc retries, and where ecc errors occur during
 13188                                  ;	  dma breakdowns???? Hmmmmm.
 13189                                  
 13190                                  ;----------------------------------------------------------------------------
 13191                                  
 13192                                  ; ---------------------------------------------------------------------------
 13193                                  
 13194 00001494 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13195                                  
 13196                                  ; 17/10/2022
 13197                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13198                                  ; 09/12/2022
 13199                                  DTYPEARRAY equ dtype_array
 13200                                  
 13201                                  ; ---------------------------------------------------------------------------
 13202                                  
 13203                                  ; stick some special stuff out of mainline
 13204                                  
 13205                                  ; we know we're doing a format command. if we have changeline
 13206                                  ; support, then flag some special changed stuff and set changed
 13207                                  ; by format bit for all logical drives using this physical drive
 13208                                  
 13209                                  format_special_stuff:			
 13210 00001498 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13211 0000149D 7459                    		jz	short format_special_stuff_done ; brif not
 13212 0000149F 53                      		push	bx
 13213 000014A0 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13214 000014A3 E83804                  		call	set_changed_dl	; indicate that media changed by format
 13215 000014A6 5B                      		pop	bx
 13216 000014A7 EB4F                    		jmp	short format_special_stuff_done
 13217                                  ; ---------------------------------------------------------------------------
 13218                                  
 13219                                  ; 16/10/2022
 13220                                  
 13221                                  ; we know we've got ec35's on the system. Now see if we're doing
 13222                                  ; a floppy. If so, create a mask and see if this particular
 13223                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13224                                  
 13225                                  		; 19/10/2022
 13226                                  ec35_special_stuff:			
 13227 000014A9 84D2                    		test	dl, dl		; floppy or hard disk?
 13228 000014AB 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13229 000014AD 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13230 000014AE 51                      		push	cx
 13231 000014AF 88D1                    		mov	cl, dl		; turn drive number into bit map
 13232 000014B1 B001                    		mov	al, 1		; assume drive 0
 13233 000014B3 D2E0                    		shl	al, cl		; shift	over correct number of times
 13234 000014B5 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13235 000014B9 59                      		pop	cx
 13236 000014BA 58                      		pop	ax
 13237 000014BB 7442                    		jz	short ec35_special_stuff_done
 13238                                  					; done if this floppy is not an	ec35
 13239 000014BD 53                      		push	bx		; free up a far	pointer	(es:bx)
 13240 000014BE 06                      		push	es
 13241                                  		; 17/10/2022
 13242 000014BF 2EC41E[9414]            		les	bx, [cs:DTYPEARRAY]
 13243                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13244                                  					; 0070h:3A65h =	2C7h:14F5h
 13245 000014C4 00D3                    		add	bl, dl
 13246 000014C6 80D700                  		adc	bh, 0		; find entry for this drive
 13247 000014C9 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13248                                  					; (360k	disk in	360k drive,
 13249                                  					; no double-stepping, 250 kbs transfer rate)
 13250 000014CD 07                      		pop	es
 13251 000014CE 5B                      		pop	bx
 13252 000014CF EB2E                    		jmp	short ec35_special_stuff_done
 13253                                  ; ---------------------------------------------------------------------------
 13254                                  
 13255                                  ; 16/10/2022
 13256                                  
 13257                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13258                                  ; this function does not reset the common buses after the execution.
 13259                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13260                                  ; will issue ah=1 (read status) call to reset the buses.
 13261                                  
 13262                                  ps2_special_stuff:			
 13263 000014D1 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13264                                  					; read driver parm ?
 13265 000014D6 7407                    		jz	short ps2_30_problem
 13266 000014D8 803E[1E00]15            		cmp	byte [prevoper], 15h
 13267                                  					; apparently function 15h fails, too
 13268 000014DD 752D                    		jnz	short ps2_special_stuff_done
 13269                                  ps2_30_problem:				
 13270 000014DF 50                      		push	ax
 13271 000014E0 B401                    		mov	ah, 1
 13272                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13273                                  		; 17/10/2022
 13274 000014E2 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13275                                  		;call	call_orig13	; call far 70:797h
 13276                                  					; call far KERNEL_SEGMENT:call_orig13
 13277 000014E7 58                      		pop	ax
 13278 000014E8 EB22                    		jmp	short ps2_special_stuff_done
 13279                                  ; ---------------------------------------------------------------------------
 13280                                  
 13281                                  ; 17/10/2022
 13282                                  ; 16/10/2022
 13283                                  
 13284                                  ; here is the actual int13 handler
 13285                                  
 13286                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13287                                  
 13288                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13289                                  ; vectoring up here from Bios_Data
 13290                                  
 13291                                  		; 19/10/2022
 13292 000014EA 1E                      		push	ds		; save caller's ds register first thing
 13293                                  		;;mov	ds, word [cs:0030h]
 13294                                  					; and set up our own ds -> Bios_Data
 13295 000014EB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13296                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13297                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13298                                  
 13299                                  ; let the operation proceed. if there is a dma violation, then we do things
 13300                                  
 13301 000014F0 A3[1E00]                		mov	[prevoper], ax	; save request
 13302 000014F3 80FC05                  		cmp	ah, 5		; romformat
 13303 000014F6 74A0                    		jz	short format_special_stuff
 13304                                  					; go do special stuff for format
 13305                                   format_special_stuff_done:		
 13306 000014F8 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13307 000014FD 75AA                    		jnz	short ec35_special_stuff
 13308                                  					; go handle it out of line if so
 13309                                  ec35_special_stuff_done:
 13310                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13311 000014FF 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13312                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13313                                  		
 13314 00001504 9C                      		pushf			; save result flags
 13315                                  		
 13316 00001505 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13317                                  					; mdl_ps2_30
 13318 0000150A 74C5                    		jz	short ps2_special_stuff
 13319                                  					; exit mainline to address special
 13320                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13321 0000150C 9D                      		popf
 13322 0000150D 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13323                                  ret_from_i13:				
 13324 0000150F 1F                      		pop	ds
 13325 00001510 CA0200                  		retf	2		; restore ds &	iret w/flags
 13326                                  ; ---------------------------------------------------------------------------
 13327                                  
 13328                                  ; most of our code exits through here. If carry isn't set, then
 13329                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13330                                  ; a changeline error.
 13331                                  
 13332                                  i13ret_ck_chglinerr:			
 13333 00001513 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13334                                  i13_ret_error:				
 13335 00001515 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13336 00001518 7513                    		jnz	short int13b	; skip if wrong	error
 13337 0000151A 08D2                    		or	dl, dl		; is this for the hard disk?
 13338 0000151C 780F                    		js	short int13b	; yes, ignore
 13339 0000151E 803E[7700]00            		cmp	byte [fhave96], 0
 13340 00001523 7408                    		jz	short int13b	; just in case ROM returned this
 13341                                  					; error	even though it told us it
 13342                                  					; never	would
 13343 00001525 53                      		push	bx
 13344 00001526 BB4000                  		mov	bx, 40h		; fchanged
 13345 00001529 E8B203                  		call	set_changed_dl
 13346 0000152C 5B                      		pop	bx
 13347                                  int13b:					
 13348 0000152D F9                      		stc			; now return the error
 13349 0000152E EBDF                    		jmp	short ret_from_i13
 13350                                  ; ---------------------------------------------------------------------------
 13351                                  
 13352                                  ; some kind of error occurred. see if it is dma violation
 13353                                  
 13354                                  goterr13:				
 13355 00001530 80FC09                  		cmp	ah, 9		; dma error?
 13356 00001533 747C                    		jz	short gotdmaerr
 13357                                  goterr13_xxxx:				
 13358 00001535 80FC11                  		cmp	ah, 11h		; ecc error?
 13359 00001538 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13360 0000153A 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13361 0000153F 74D4                    		jz	short i13_ret_error
 13362                                  
 13363 00001541 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13364                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13365                                  					; (2 = romread)
 13366                                  					; ECC correction only applies to reads
 13367 00001546 75CD                    		jnz	short i13_ret_error
 13368                                  
 13369 00001548 30E4                    		xor	ah, ah
 13370                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13371                                  		; 17/10/2022
 13372 0000154A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13373                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13374                                  					; call far 70:797h
 13375 0000154F A1[1E00]                		mov	ax, [prevoper]
 13376 00001552 30E4                    		xor	ah, ah		; return code =	no error
 13377 00001554 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13378 00001556 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13379 00001558 53                      		push	bx
 13380 00001559 51                      		push	cx
 13381 0000155A 52                      		push	dx
 13382 0000155B A2[2000]                		mov	[number_of_sec], al
 13383                                  loop_ecc:				
 13384 0000155E B80102                  		mov	ax, 201h	; read one sector
 13385                                  
 13386                                  ; we do reads one sector at a time. this ensures that we will eventually
 13387                                  ; finish the request since ecc errors on one sector do read in that sector.
 13388                                  ;
 13389                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13390                                  ; that attempt to read more sectors than are available on a particular
 13391                                  ; track.
 13392                                  ;
 13393                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13394                                  ; this request.
 13395                                  ;
 13396                                  ; at this point, all registers are set up for the call to orig13, except
 13397                                  ; that there may be a starting sector number that is bigger than the number
 13398                                  ; of sectors on a track.
 13399                                  ;
 13400 00001561 E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13401                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13402                                  		; 17/10/2022
 13403 00001564 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13404                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13405 00001569 730C                    		jnb	short ok11_op
 13406 0000156B 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13407 0000156E 741B                    		jz	short handle_dma_during_ecc
 13408 00001570 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13409 00001573 7510                    		jnz	short ok11_exit_err
 13410                                  		; 10/12/2022
 13411                                  		; xor ax ax -> ah = 0
 13412                                  		;mov	ah, 0		; ecc error. reset the system again.
 13413 00001575 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13414                                  					; was the last sector, no error	code
 13415                                  					; will be returned for the corrected
 13416                                  					; read.	(clear carry too.)
 13417                                  ok11_op:				
 13418 00001577 FE0E[2000]              		dec	byte [number_of_sec]
 13419 0000157B 7409                    		jz	short ok11_exit	; all done?
 13420 0000157D FEC1                    		inc	cl		; advance sector number
 13421                                  					; add 200h to address
 13422 0000157F FEC7                    		inc	bh
 13423 00001581 FEC7                    		inc	bh
 13424 00001583 EBD9                    		jmp	short loop_ecc
 13425                                  ; ---------------------------------------------------------------------------
 13426                                  
 13427                                  ; locate error returns centrally
 13428                                  
 13429                                  ok11_exit_err:				
 13430 00001585 F9                      		stc			; set carry bit again.
 13431                                  ok11_exit:				
 13432 00001586 5A                      		pop	dx
 13433 00001587 59                      		pop	cx
 13434 00001588 5B                      		pop	bx
 13435 00001589 EB88                    		jmp	short i13ret_ck_chglinerr
 13436                                  ; ---------------------------------------------------------------------------
 13437                                  
 13438                                  ; do the single sector read again, this time into our temporary
 13439                                  ; buffer, which is guaranteed not to have a DMA error, then
 13440                                  ; move the data to its proper location and proceed
 13441                                  
 13442                                  handle_dma_during_ecc:			
 13443 0000158B 06                      		push	es
 13444 0000158C 53                      		push	bx
 13445 0000158D BB[4E01]                		mov	bx, disksector
 13446 00001590 1E                      		push	ds
 13447 00001591 07                      		pop	es		; point es:bx to buffer
 13448 00001592 B80102                  		mov	ax, 201h	; read one sector
 13449                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13450                                  		; 17/10/2022
 13451 00001595 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13452                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13453 0000159A 5B                      		pop	bx
 13454 0000159B 07                      		pop	es
 13455 0000159C 7305                    		jnb	short handle_dma_during_ecc_noerr
 13456 0000159E 80FC11                  		cmp	ah, 11h
 13457 000015A1 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13458                                  
 13459                                  ; now we're kosher. Copy the data to where it belongs and resume
 13460                                  ; the ECC looping code.
 13461                                  
 13462                                  handle_dma_during_ecc_noerr:		
 13463 000015A3 56                      		push	si
 13464 000015A4 57                      		push	di
 13465 000015A5 89DF                    		mov	di, bx
 13466 000015A7 BE[4E01]                		mov	si, disksector
 13467 000015AA E829FE                  		call	move_sector
 13468 000015AD 5F                      		pop	di
 13469 000015AE 5E                      		pop	si
 13470 000015AF EBC6                    		jmp	short ok11_op
 13471                                  ; ---------------------------------------------------------------------------
 13472                                  
 13473                                  ; we truly have a dma violation. restore register ax and retry the
 13474                                  ; operation as best we can.
 13475                                  
 13476                                  gotdmaerr:				
 13477 000015B1 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13478 000015B4 FB                      		sti
 13479 000015B5 80FC02                  		cmp	ah, 2		; romread
 13480 000015B8 723B                    		jb	short i13_done_dmaerr
 13481                                  					; just pass dma error thru for
 13482                                  					; functions we don't handle
 13483 000015BA 80FC04                  		cmp	ah, 4		; romverify
 13484 000015BD 743C                    		jz	short intverify
 13485 000015BF 80FC05                  		cmp	ah, 5		; romformat
 13486 000015C2 7448                    		jz	short intformat
 13487 000015C4 772F                    		ja	short i13_done_dmaerr
 13488                                  
 13489                                  ; we are doing a read/write call. check for dma problems
 13490                                  
 13491                                  ;	******** set up stack frame here!!! ********
 13492                                  
 13493 000015C6 52                      		push	dx
 13494 000015C7 51                      		push	cx
 13495 000015C8 53                      		push	bx
 13496 000015C9 50                      		push	ax
 13497 000015CA 55                      		push	bp
 13498 000015CB 89E5                    		mov	bp, sp
 13499 000015CD 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13500 000015CF D1E2                    		shl	dx, 1
 13501 000015D1 D1E2                    		shl	dx, 1
 13502 000015D3 D1E2                    		shl	dx, 1
 13503 000015D5 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13504 000015D7 01DA                    		add	dx, bx		; combine with offset
 13505 000015D9 81C2FF01                		add	dx, 511		; simulate a transfer
 13506                                  
 13507                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13508                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13509                                  
 13510 000015DD 7303                    		jnb	short no_skip_first
 13511 000015DF E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13512                                  ; ---------------------------------------------------------------------------
 13513                                  
 13514                                  no_skip_first:				
 13515 000015E2 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13516 000015E4 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13517 000015E6 28F4                    		sub	ah, dh
 13518                                  
 13519                                  ; ah is now the number of sectors that we can successfully write in this
 13520                                  ; segment. if this number is above or equal to the requested number, then we
 13521                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13522                                  ;
 13523                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13524                                  ; first place is because we got a dma error. so it's impossible
 13525                                  ; for the whole block to fit, unless the dma error was returned
 13526                                  ; in error.
 13527                                  
 13528 000015E8 38C4                    		cmp	ah, al		; can we fit it	in?
 13529 000015EA 7236                    		jb	short doblock	; no, perform blocking.
 13530                                  
 13531                                  ; yes, the request fits. let it happen.
 13532                                  
 13533 000015EC 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13534                                  					; set up head number
 13535 000015EF E888FE                  		call	doint
 13536 000015F2 E9D900                  		jmp	bad13		; and return from this place
 13537                                  ; ---------------------------------------------------------------------------
 13538                                  
 13539                                  i13_done_dmaerr:			
 13540 000015F5 B409                    		mov	ah, 9		; pass dma error thru to caller
 13541 000015F7 F9                      		stc
 13542 000015F8 E914FF                  		jmp	ret_from_i13	; return with error,
 13543                                  					; we know it's not a changeline error
 13544                                  ; ---------------------------------------------------------------------------
 13545                                  
 13546                                  ; verify the given sectors. place the buffer pointer into our space.
 13547                                  
 13548                                  intverify:				
 13549 000015FB 06                      		push	es		; save caller's dma address
 13550 000015FC 53                      		push	bx
 13551 000015FD 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13552 000015FE 07                      		pop	es
 13553                                  dosimple:				
 13554 000015FF BB[4E01]                		mov	bx, disksector
 13555                                  					; do the i/o from Bios_Data:disksector
 13556                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13557                                  		; 17/10/2022
 13558 00001602 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13559                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13560 00001607 5B                      		pop	bx
 13561 00001608 07                      		pop	es
 13562 00001609 E907FF                  		jmp	i13ret_ck_chglinerr
 13563                                  ; ---------------------------------------------------------------------------
 13564                                  
 13565                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13566                                  
 13567                                  intformat:				
 13568 0000160C 06                      		push	es
 13569 0000160D 53                      		push	bx
 13570 0000160E 56                      		push	si
 13571 0000160F 57                      		push	di
 13572 00001610 1E                      		push	ds
 13573                                  
 13574                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13575                                  ; in other words, swap (ds, es)
 13576                                  
 13577 00001611 06                      		push	es
 13578 00001612 1E                      		push	ds
 13579 00001613 07                      		pop	es
 13580 00001614 1F                      		pop	ds
 13581 00001615 89DE                    		mov	si, bx
 13582 00001617 BF[4E01]                		mov	di, disksector
 13583 0000161A E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13584 0000161D 1F                      		pop	ds
 13585 0000161E 5F                      		pop	di
 13586 0000161F 5E                      		pop	si		; do the i/o from
 13587 00001620 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13588                                  ; ---------------------------------------------------------------------------
 13589                                  
 13590                                  ; we can't fit the request into the entire block. perform the operation on
 13591                                  ; the first block.
 13592                                  ;
 13593                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13594                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13595                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13596                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13597                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13598                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13599                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13600                                  ; doblock will handle the first block of requested sectors within the
 13601                                  ; boundary of this safe value.
 13602                                  
 13603                                  doblock:
 13604                                  
 13605                                  ; try to get the # of sectors/track from bds via rom drive number.
 13606                                  ; for any mini disks installed, here we have to pray that they have the
 13607                                  ; same # of sector/track as the main dos partition disk drive.
 13608                                  				
 13609 00001622 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13610                                  					; get head #, drive #
 13611 00001625 51                      		push	cx
 13612 00001626 06                      		push	es
 13613 00001627 57                      		push	di		; ah - # of sectors before dma boundary
 13614                                  					; al - requested # of sectors for i/o.
 13615 00001628 E83BFE                  		call	find_bds
 13616 0000162B 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13617                                  		; 12/12/2022
 13618 0000162F 26F6452301              		test	byte [es:di+23h], 1
 13619                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13620 00001634 5F                      		pop	di
 13621 00001635 07                      		pop	es
 13622 00001636 88E0                    		mov	al, ah		; set al=ah for	floppies
 13623 00001638 7404                    		jz	short doblockflop ; they are track by track operation
 13624 0000163A B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13625 0000163C 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13626                                  doblockflop:				
 13627 0000163E 59                      		pop	cx
 13628                                  doblockcontinue:			
 13629 0000163F 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13630 00001641 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13631 00001643 50                      		push	ax
 13632 00001644 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13633 00001646 EB03                    		jmp	short doblockdoint
 13634                                  ; ---------------------------------------------------------------------------
 13635                                  
 13636                                  doblocklast:				
 13637 00001648 88C4                    		mov	ah, al
 13638 0000164A 50                      		push	ax
 13639                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13640 0000164B E82CFE                  		call	doint
 13641 0000164E 727E                    		jb	short bad13	; something happened, bye!
 13642 00001650 58                      		pop	ax
 13643 00001651 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13644                                  					; decrement by the successful operation
 13645 00001654 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13646 00001656 00E7                    		add	bh, ah		; advance dma addres
 13647 00001658 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13648 0000165A 38C4                    		cmp	ah, al		; check	the previous value
 13649 0000165C 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13650                                  					; then we are done already.
 13651 0000165E 28E0                    		sub	al, ah		; otherwise,
 13652                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13653 00001660 E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13654 00001663 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13655                                  ; ---------------------------------------------------------------------------
 13656                                  
 13657                                  bufferx:				
 13658 00001665 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13659                                  					; set up head number
 13660                                  buffer:					
 13661 00001668 53                      		push	bx
 13662 00001669 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13663 0000166C 80FC03                  		cmp	ah, 3		; romwrite
 13664 0000166F 7525                    		jnz	short doread	;
 13665                                  					
 13666                                  ; copy the offending sector into local buffer
 13667                                  
 13668 00001671 06                      		push	es
 13669 00001672 1E                      		push	ds
 13670 00001673 56                      		push	si
 13671 00001674 57                      		push	di
 13672 00001675 1E                      		push	ds		; exchange segment registers
 13673 00001676 06                      		push	es
 13674 00001677 1F                      		pop	ds
 13675 00001678 07                      		pop	es
 13676 00001679 BF[4E01]                		mov	di, disksector	; where to move
 13677 0000167C 57                      		push	di		; save it
 13678 0000167D 89DE                    		mov	si, bx		; source
 13679 0000167F E854FD                  		call	move_sector	; move sector into local buffer
 13680 00001682 5B                      		pop	bx		; new transfer address
 13681                                  					; (es:bx = Bios_Data:diskbuffer)
 13682 00001683 5F                      		pop	di		; restore caller's di & si
 13683 00001684 5E                      		pop	si
 13684 00001685 1F                      		pop	ds		; restore Bios_Data
 13685                                  
 13686                                  ; see if we are wrapping around a track or head
 13687                                  
 13688 00001686 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13689                                  					; get drive number
 13690 00001688 8A5608                  		mov	dl, [bp+8]
 13691 0000168B E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13692                                  					;
 13693                                  					; ah is	function
 13694                                  					; al is	1 for single sector transfer
 13695                                  					; es:bx	is local transfer addres
 13696                                  					; cx is	track/sector number
 13697                                  					; dx is	head/drive number
 13698                                  					; si,di	unchanged
 13699 0000168E E8E9FD                  		call	doint
 13700 00001691 07                      		pop	es		; restore caller's dma segment
 13701 00001692 723A                    		jb	short bad13	; go clean up
 13702 00001694 EB22                    		jmp	short dotail
 13703                                  ; ---------------------------------------------------------------------------
 13704                                  
 13705                                  ; reading a sector. do int first, then move things around
 13706                                  
 13707                                  doread:					
 13708 00001696 06                      		push	es
 13709 00001697 53                      		push	bx
 13710 00001698 1E                      		push	ds		; es = Bios_Code
 13711 00001699 07                      		pop	es
 13712 0000169A BB[4E01]                		mov	bx, disksector
 13713 0000169D B001                    		mov	al, 1
 13714 0000169F 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13715                                  					; get drive number
 13716 000016A2 E84CFD                  		call	check_wrap	;
 13717                                  					; ah = function
 13718                                  					; al = 1 for single sector
 13719                                  					; es:bx	points to local	buffer
 13720                                  					; cx, dx are track/sector, head/drive
 13721 000016A5 E8D2FD                  		call	doint
 13722 000016A8 5B                      		pop	bx
 13723 000016A9 07                      		pop	es
 13724 000016AA 7222                    		jb	short bad13
 13725 000016AC 56                      		push	si
 13726 000016AD 57                      		push	di
 13727 000016AE 89DF                    		mov	di, bx
 13728 000016B0 BE[4E01]                		mov	si, disksector
 13729 000016B3 E820FD                  		call	move_sector
 13730 000016B6 5F                      		pop	di
 13731 000016B7 5E                      		pop	si
 13732                                  
 13733                                  ; note the fact that we've done 1 more sector
 13734                                  
 13735                                  dotail:					
 13736 000016B8 5B                      		pop	bx		; retrieve new dma area
 13737 000016B9 80C702                  		add	bh, 2		; advance over sector
 13738 000016BC 41                      		inc	cx
 13739 000016BD 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13740 000016C0 F8                      		clc
 13741 000016C1 FEC8                    		dec	al
 13742 000016C3 7409                    		jz	short bad13	; no more i/o
 13743                                  
 13744                                  ; see if we wrap around a track or head boundary with starting sector
 13745                                  ; we already have the correct head number to pass to check_wrap
 13746                                  
 13747 000016C5 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13748 000016C8 E826FD                  		call	check_wrap
 13749 000016CB E8ACFD                  		call	doint
 13750                                  
 13751                                  ; we are done. ax has the final code; we throw away what we got before
 13752                                  
 13753                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13754                                  ;	   or we've finished. If carry is set now, our only
 13755                                  ;	   hope for salvation is that it was a read operation
 13756                                  ;	   and the error code is ECC error. In that case, we'll
 13757                                  ;	   just pop the registers and go do the old ECC thing.
 13758                                  ;	   When the DMA error that got us here in the first
 13759                                  ;	   place occurs, it'll handle it.
 13760                                  
 13761                                  bad13:					
 13762 000016CE 89EC                    		mov	sp, bp
 13763 000016D0 5D                      		pop	bp
 13764 000016D1 5B                      		pop	bx
 13765 000016D2 5B                      		pop	bx
 13766 000016D3 59                      		pop	cx
 13767 000016D4 5A                      		pop	dx
 13768 000016D5 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13769 000016D7 E935FE                  		jmp	ret_from_i13	; non-error exit
 13770                                  ; ---------------------------------------------------------------------------
 13771                                  
 13772                                  xgoterr13_xxxx:				
 13773 000016DA E958FE                  		jmp	goterr13_xxxx
 13774                                  
 13775                                  ; ---------------------------------------------------------------------------
 13776                                  		; 10/12/2022
 13777                                  		;db 	0
 13778                                  ; ---------------------------------------------------------------------------
 13779                                  
 13780                                  ;Bios_Code ends
 13781                                  
 13782                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13783                                  
 13784                                  ;-----------------------------------------------------------------------------
 13785                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13786                                  ;-----------------------------------------------------------------------------
 13787                                  ; 17/03/2019 - Retro DOS v4.0
 13788                                  
 13789                                  		; 19/10/2022
 13790                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13791 000016DD 8A26[7500]              		mov	ah, [drvmax]
 13792 000016E1 BF[8706]                		mov	di, dskdrvs
 13793 000016E4 1E                      		push	ds		; pass result in es:di
 13794 000016E5 07                      		pop	es
 13795 000016E6 E9CFEE                  		jmp	SetPtrSav
 13796                                  
 13797                                  ; =============== S U B	R O U T	I N E =======================================
 13798                                  
 13799                                  ;---------------------------------------------------------------------------
 13800                                  ; install_bds installs a bds at location es:di into the current linked list of
 13801                                  ; bds maintained by this device driver. it places the bds at the end of the
 13802                                  ; list. Trashes (at least) ax, bx, di, si
 13803                                  ;---------------------------------------------------------------------------
 13804                                  
 13805                                  install_bds:		
 13806 000016E9 1E                      		push	ds		; save Bios_Data segment
 13807 000016EA BE[1901]                		mov	si, start_bds	; beginning of chain
 13808                                  
 13809                                  		; ds:si now points to link to first bds
 13810                                  		; assume bds list is non-empty
 13811                                  loop_next_bds:				
 13812 000016ED C534                    		lds	si, [si]	; [si+BDS.link]
 13813                                  					; fetch	next bds
 13814 000016EF 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13815 000016F3 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13816                                  					; drive	with new one?
 13817 000016F6 7518                    		jnz	short next_bds
 13818 000016F8 B310                    		mov	bl, 10h		; fi_am_mult
 13819 000016FA 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13820                                  					; set both of them to i_am_mult	if so
 13821 000016FE 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13822 00001701 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13823                                  					; we don't own it
 13824 00001706 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13825                                  					; determine if changeline available
 13826 00001709 80E302                  		and	bl, 2		; fchangeline
 13827 0000170C 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13828                                  next_bds:				
 13829 00001710 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13830                                  					; are we at end	of list?
 13831 00001713 75D8                    		jnz	short loop_next_bds
 13832 00001715 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13833                                  					; install bds
 13834 00001718 893C                    		mov	[si], di
 13835 0000171A 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13836                                  					; set next pointer to null
 13837 0000171F 1F                      		pop	ds
 13838                                  
 13839                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13840                                  ;
 13841                                  ; **** If the new drive has a higher EOT value, we must alter the
 13842                                  ;      'eot' variable appropriately.
 13843                                  ;
 13844                                  ;		; 01/06/2019
 13845                                  ;		;mov	al,[es:di+52]
 13846                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13847                                  ;
 13848                                  ;		cmp	al,[eot]
 13849                                  ;		jbe	short _eot_ok
 13850                                  ;		mov	[eot],al
 13851                                  
 13852 00001720 C3                      		retn
 13853                                  
 13854                                  ; ---------------------------------------------------------------------------
 13855                                  
 13856                                  ; 17/10/2022
 13857                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13858                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13859                                  ; 09/12/2022
 13860                                  DRVLET equ drvlet
 13861                                  SNGMSG equ sngmsg
 13862                                  
 13863                                  ; 16/10/2022
 13864                                  
 13865                                  ;---------------------------------------------------------------------------
 13866                                  ;  ask to swap the disk in drive a:
 13867                                  ;	es:di -> bds
 13868                                  ;	ds -> Bios_Data
 13869                                  ;---------------------------------------------------------------------------
 13870                                  
 13871                                  		; 19/10/2022
 13872 00001721 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13873                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13874 00001726 7405                    		jz	short no_win386	; no, skip SetFocus
 13875                                  		
 13876                                  		; set focus to the correct VM
 13877                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13878                                  		; 17/10/2022
 13879 00001728 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13880                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13881                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13882                                  no_win386:				
 13883 0000172D 51                      		push	cx
 13884 0000172E 52                      		push	dx
 13885 0000172F 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13886                                  					; get the drive	letter
 13887                                  
 13888                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13889                                  ;           then existing dsk is drive A & vice versa
 13890                                  
 13891 00001733 88D6                    		mov	dh, dl
 13892 00001735 80F601                  		xor	dh, 1
 13893 00001738 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13894 0000173A B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13895                                  					; broad	cast code for swap disk
 13896                                  					; Broadcast it
 13897 0000173D CD2F                    		int	2Fh	
 13898 0000173F 41                      		inc	cx		; cx == -1 ?
 13899 00001740 741E                    		jz	short swpdsk9	; somebody has handled it
 13900                                  
 13901                                  ; using a different drive in a one drive system so request the user change disks
 13902                                  
 13903 00001742 80C241                  		add	dl, 'A'
 13904                                  		; 17/10/2022
 13905 00001745 2E8816[7F17]            		mov	[cs:DRVLET], dl
 13906                                  		; 16/10/2022
 13907                                  		;;mov	byte [cs:drvlet], dl
 13908                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13909                                  					; 0070h:3D54h =	2C7h:17E4h
 13910 0000174A BE[6317]                		mov	si, SNGMSG
 13911                                  		;mov	si, 17C8h	; sngmsg
 13912                                  					; 0070h:3D38h =	2C7h:17C8h
 13913 0000174D 53                      		push	bx
 13914 0000174E 2E                      		cs
 13915 0000174F AC                      		lodsb			; get the next character of the message
 13916                                  		;lods	byte ptr cs:[si]
 13917                                  wrmsg_loop:				
 13918 00001750 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13919                                  					; AL = character to display
 13920 00001752 2E                      		cs
 13921 00001753 AC                      		lodsb
 13922                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13923                                  					; get the next character of the	message
 13924 00001754 08C0                    		or	al, al
 13925 00001756 75F8                    		jnz	short wrmsg_loop
 13926 00001758 E8ACEA                  		call	con_flush	; flush out keyboard queue
 13927                                  					; call rom-bios
 13928 0000175B 30E4                    		xor	ah, ah
 13929 0000175D CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13930                                  					; Return: AH = scan code, AL = character
 13931 0000175F 5B                      		pop	bx
 13932                                  swpdsk9:				
 13933 00001760 5A                      		pop	dx
 13934 00001761 59                      		pop	cx
 13935 00001762 C3                      		retn
 13936                                  
 13937                                  ; ---------------------------------------------------------------------------
 13938                                  
 13939                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13940                                  
 13941                                  ;--------------------------------------------------------
 13942                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13943                                  ;--------------------------------------------------------
 13944                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13945                                  ;--------------------------------------------------------
 13946                                  ; 17/03/2019 - Retro DOS v4.0
 13947                                  
 13948                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13949 00001763 0D0A                    sngmsg:		db 0Dh,0Ah
 13950 00001765 496E73657274206469-     		db 'Insert diskette for drive '
 13950 0000176E 736B6574746520666F-
 13950 00001777 7220647269766520   
 13951                                  
 13952                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13953 0000177F 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13953 00001788 65737320616E79206B-
 13953 00001791 6579207768656E2072-
 13953 0000179A 656164790D0A       
 13954 000017A0 0A00                    		db 0Ah,0
 13955                                  
 13956                                  ; =============== S U B	R O U T	I N E =======================================
 13957                                  
 13958                                  ;---------------------------------------------------------------------------
 13959                                  ; input : es:di points to current bds for drive.
 13960                                  ; return : zero set if no open files
 13961                                  ;	   zero reset if open files
 13962                                  ;---------------------------------------------------------------------------
 13963                                  
 13964                                  chkopcnt:		
 13965 000017A2 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13966 000017A7 C3                      		retn
 13967                                  
 13968                                  ; =============== S U B	R O U T	I N E =======================================
 13969                                  
 13970                                  ;---------------------------------------------------------------------------
 13971                                  ; at media check time, we need to really get down and check what the change is.
 13972                                  ; this is guaranteed to be expensive.
 13973                                  ;
 13974                                  ;	es:di -> bds, ds -> Bios_Data
 13975                                  ;---------------------------------------------------------------------------
 13976                                  
 13977                                  mediacheck:	
 13978 000017A8 E88EF0                  		call	checksingle	; make sure correct disk is in place
 13979 000017AB 31F6                    		xor	si, si
 13980 000017AD E85501                  		call	haschange
 13981 000017B0 742F                    		jz	short mediaret
 13982 000017B2 E84401                  		call	checkromchange
 13983 000017B5 752B                    		jnz	short mediadovolid
 13984 000017B7 50                      		push	ax
 13985 000017B8 52                      		push	dx
 13986 000017B9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13987                                  					; set logical drive number
 13988 000017BD B416                    		mov	ah, 16h
 13989 000017BF CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13990                                  					; DL = drive to	check
 13991                                  					; Return: AH = disk change status
 13992 000017C1 5A                      		pop	dx
 13993 000017C2 58                      		pop	ax
 13994 000017C3 721D                    		jb	short mediadovolid
 13995 000017C5 BE0100                  		mov	si, 1		; signal no change
 13996                                  
 13997                                  ; there are some drives with changeline that "lose" the changeline indication
 13998                                  ; if a different drive is accessed after the current one. in order to avoid
 13999                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14000                                  ; is not active and we are accessing a different drive from the last one.
 14001                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14002                                  ; status.
 14003                                  		; 19/10/2022
 14004 000017C8 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14005 000017CC 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14006                                  					; (If the last drive accessed is not current drive
 14007                                  					; media	change status may be incorrect.	So,
 14008                                  					; "I don't now" will be returned even if it is indicated
 14009                                  					; as media is not changed.)
 14010 000017D0 740F                    		jz	short mediaret	; (same	drive,
 14011                                  					; media	changeline indication is reliable)
 14012                                  
 14013                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14014                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14015                                  ; "not changed" here since the 2 second test said no change.)
 14016                                  
 14017 000017D2 50                      		push	ax
 14018 000017D3 51                      		push	cx
 14019 000017D4 52                      		push	dx
 14020 000017D5 E87BED                  		call	Check_Time_Of_Access
 14021 000017D8 5A                      		pop	dx
 14022 000017D9 59                      		pop	cx
 14023 000017DA 58                      		pop	ax
 14024 000017DB 09F6                    		or	si, si
 14025 000017DD 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14026                                  					; (volume id will be checked)
 14027 000017DF 31F6                    		xor	si, si		; return "i don't know"
 14028                                  mediaret:				
 14029 000017E1 C3                      		retn
 14030                                  ; ---------------------------------------------------------------------------
 14031                                  
 14032                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14033                                  ; because this may be different since we only set medbyt when doing a read
 14034                                  ; or write.
 14035                                  
 14036                                  mediadovolid:				
 14037 000017E2 E813EE                  		call	GetBp		; build	a new bpb in current bds
 14038 000017E5 72FA                    		jb	short mediaret
 14039 000017E7 E82D00                  		call	check_vid
 14040 000017EA 73F5                    		jnb	short mediaret
 14041 000017EC E9DCF3                  		jmp	maperror	; fix up al for	return to dos
 14042                                  ; ---------------------------------------------------------------------------
 14043                                  
 14044                                  ; simple, quick check of latched change. if no indication, then return
 14045                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14046                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14047                                  ; dos.
 14048                                  ;
 14049                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14050                                  
 14051                                  ;	call with es:di -> bds, ds -> Bios_Data
 14052                                  ;	***** warning:  this routine will return one level up on the stack
 14053                                  ;			if an error occurs!
 14054                                  
 14055                                  checklatchio:	
 14056                                  
 14057                                  ; if returning fake bpb then assume the disk has not changed
 14058                                  			
 14059 000017EF E8B0FF                  		call	chkopcnt
 14060 000017F2 741B                    		jz	short checkret	; done if zero
 14061                                  
 14062                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14063                                  
 14064 000017F4 E80201                  		call	checkromchange
 14065 000017F7 7416                    		jz	short checkret
 14066                                  
 14067                                  ; we now see that a change line has been seen in the past. let's do the
 14068                                  ; expensive verification.
 14069                                  
 14070 000017F9 E8FCED                  		call	GetBp		; build	bpb in current bds
 14071 000017FC 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14072 000017FE E81600                  		call	check_vid
 14073 00001801 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14074 00001803 09F6                    		or	si, si		; is changed for sure?
 14075 00001805 7908                    		jns	short checkret
 14076 00001807 E87D00                  		call	returnvid
 14077                                  checklatchret:				
 14078 0000180A E8BEF3                  		call	maperror	; fix up al for	return to dos
 14079                                  ret_no_error_map:			
 14080 0000180D F9                      		stc
 14081 0000180E 5E                      		pop	si		; pop off return address
 14082                                  checkret:				
 14083 0000180F C3                      		retn
 14084                                  ; ---------------------------------------------------------------------------
 14085                                  
 14086                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14087                                  ; only if there was a disk error. return that error code in ax.
 14088                                  ;
 14089                                  ;	called with es:di -> bds, ds -> Bios_Data
 14090                                  
 14091                                  checkfatvid:				
 14092 00001810 E8CD01                  		call	fat_check	; check	the fat	and the	vid
 14093 00001813 09F6                    		or	si, si
 14094 00001815 7827                    		js	short changed_drv ;
 14095                                  
 14096                                  ; the fat was the same. fall into check_vid and check volume id.
 14097                                  
 14098                                  		; fall into check_vid
 14099                                  
 14100                                  ; =============== S U B	R O U T	I N E =======================================
 14101                                  
 14102                                  ; now with the extended boot record, the logic should be enhanced.
 14103                                  ;
 14104                                  ; if it is the extended boot record, then we check the volume serial
 14105                                  ; number instead of volume id. if it is different, then set si to -1.
 14106                                  ;
 14107                                  ; if it is same, then si= 1 (no change).
 14108                                  ;
 14109                                  ; if it is not the extended boot record, then just follows the old
 14110                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14111                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14112                                  ; should have already covered by extended boot structure checking.
 14113                                  ; so, we will return "i don't know" by setting si to 0.
 14114                                  ;
 14115                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14116                                  ; (this will be gauranteed by a successful getbp call right before this
 14117                                  ; routine.)
 14118                                  ;
 14119                                  ;	called with es:di -> bds, ds -> bds
 14120                                  
 14121                                  		; 19/10/2022
 14122                                  check_vid:
 14123                                  
 14124                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14125                                  ; boot signature. if it is set then go to do the extended
 14126                                  ; id check otherwise continue with code below
 14127                                  
 14128 00001817 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14129                                  					; [disksector+EXT_BOOT.SIG],
 14130                                  					; EXT_BOOT_SIGNATURE
 14131 0000181C 7427                    		jz	short do_ext_check_id
 14132 0000181E E8E400                  		call	haschange
 14133 00001821 74EC                    		jz	short checkret
 14134 00001823 31F6                    		xor	si, si
 14135 00001825 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14136                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14137 0000182A 7411                    		jz	short checkfatret ; don't read vol id
 14138                                  					; if not fat system
 14139 0000182C E8F600                  		call	read_volume_id
 14140 0000182F 720C                    		jb	short checkfatret
 14141 00001831 E89B01                  		call	check_volume_id
 14142 00001834 BEFFFF                  		mov	si, 0FFFFh	; -1
 14143                                  					; definitely changed
 14144 00001837 7505                    		jnz	short changed_drv
 14145                                  
 14146 00001839 46                      		inc	si		; not changed
 14147                                  vid_no_changed:				
 14148 0000183A E8C200                  		call	resetchanged
 14149                                  		; 12/12/2022
 14150                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14151                                  		;clc
 14152                                  checkfatret:				
 14153 0000183D C3                      		retn
 14154                                  ; ---------------------------------------------------------------------------
 14155                                  
 14156                                  		; 12/12/2022
 14157                                  changed_drv:
 14158 0000183E F8                      		clc			; cas -- return	no error
 14159 0000183F C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14160                                  					; ensure that we ask rom for media
 14161 00001844 C3                      		retn			; check	next time round
 14162                                  ; ---------------------------------------------------------------------------
 14163                                  
 14164                                  ; extended id check
 14165                                  
 14166                                  ; 16/10/2022
 14167                                  
 14168                                  ; the code to check extended id is basically a check to see if the
 14169                                  ; volume serial number is still the same. the volume serial number
 14170                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14171                                  ; ds:di points to the bds of the drive under consideration.
 14172                                  ; the bds has fields containing the high and low words 
 14173                                  ; of the volume serial number of the media in the drive.
 14174                                  ; compare these fields to the fields mentioned above. if these fields
 14175                                  ; do not match the media has changed and so we should jump to the code
 14176                                  ; starting at ext_changed else return "i don't know" status
 14177                                  ; in the register used for the changeline status and continue executing
 14178                                  ; the code given below. for temporary storage use the register which
 14179                                  ; has been saved and restored around this block.
 14180                                  ;
 14181                                  ; bds fields in inc\msbds.inc
 14182                                  
 14183                                  		; 19/10/2022
 14184                                  do_ext_check_id:			
 14185 00001845 50                      		push	ax
 14186                                  		;mov	ax, word ptr ds:disksector+27h
 14187                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14188 00001846 A1[7501]                		mov	ax, [disksector+27h]
 14189 00001849 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14190 0000184D 750E                    		jnz	short ext_changed
 14191 0000184F A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14192 00001852 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14193 00001856 7505                    		jnz	short ext_changed
 14194 00001858 31F6                    		xor	si, si		; 0
 14195                                  					; don't know
 14196 0000185A 58                      		pop	ax
 14197 0000185B EBDD                    		jmp	short vid_no_changed
 14198                                  					; reset the flag
 14199                                  ; ---------------------------------------------------------------------------
 14200                                  
 14201                                  ext_changed:				
 14202 0000185D 58                      		pop	ax
 14203 0000185E BEFFFF                  		mov	si, 0FFFFh	; -1
 14204                                  					; disk changed!
 14205                                  		; 12/12/2022
 14206                                  		; ('changed_drv' clears cf)
 14207                                  		;clc
 14208 00001861 EBDB                    		jmp	short changed_drv
 14209                                  
 14210                                  ; ---------------------------------------------------------------------------
 14211                                  
 14212                                  ; at i/o time, we detected the error. now we need to determine whether the
 14213                                  ; media was truly changed or not. we return normally if media change unknown.
 14214                                  ; and we pop off the call and jmp to harderr if we see an error.
 14215                                  ;
 14216                                  ; es:di -> bds
 14217                                  
 14218                                  checkio:				
 14219 00001863 80FC06                  		cmp	ah, 6
 14220 00001866 75D5                    		jnz	short checkfatret
 14221 00001868 E837FF                  		call	chkopcnt
 14222 0000186B 74D0                    		jz	short checkfatret
 14223 0000186D E888ED                  		call	GetBp
 14224 00001870 7212                    		jb	short no_error_map
 14225 00001872 E89BFF                  		call	checkfatvid
 14226 00001875 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14227 00001877 09F6                    		or	si, si		; is changed for sure?
 14228 00001879 7802                    		js	short checkioerr ; yes changed
 14229 0000187B 45                      		inc	bp		; allow	a retry
 14230 0000187C C3                      		retn
 14231                                  ; ---------------------------------------------------------------------------
 14232                                  
 14233                                  checkioerr:				
 14234 0000187D E80700                  		call	returnvid
 14235                                  
 14236                                  checkioret:				
 14237 00001880 F9                      		stc			; make sure carry gets passed through
 14238 00001881 E9F7F2                  		jmp	harderr
 14239                                  ; ---------------------------------------------------------------------------
 14240                                  
 14241                                  no_error_map:				
 14242 00001884 E9F7F2                  		jmp	harderr2
 14243                                  
 14244                                  ; =============== S U B	R O U T	I N E =======================================
 14245                                  
 14246                                  ; return vid sets up the vid for a return to dos.
 14247                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14248                                  ;  **** trashes si! ****
 14249                                  
 14250                                  returnvid:		
 14251 00001887 BE1600                  		mov	si, 22		; extra
 14252                                  					; offset into pointer to return	value
 14253 0000188A E80700                  		call	vid_into_packet
 14254 0000188D B406                    		mov	ah, 6
 14255 0000188F F9                      		stc
 14256 00001890 C3                      		retn
 14257                                  
 14258                                  ; ---------------------------------------------------------------------------
 14259                                  
 14260                                  ; moves the pointer to the volid for the drive into the original request packet
 14261                                  ; no attempt is made to preserve registers.
 14262                                  ;
 14263                                  ; assumes es:di -> bds
 14264                                  ; **trashes si**
 14265                                  
 14266                                  media_set_vid:				
 14267 00001891 BE0F00                  		mov	si, 15		; trans+1
 14268                                  					; return the value here	in packet
 14269                                  
 14270                                  		; fall into vid_into_packet
 14271                                  
 14272                                  ; =============== S U B	R O U T	I N E =======================================
 14273                                  
 14274                                  ; return pointer to vid in bds at es:di in packet[si]
 14275                                  
 14276                                  		; 19/10/2022
 14277                                  vid_into_packet:
 14278 00001894 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14279 00001895 C51E[1200]              		lds	bx, [ptrsav]
 14280 00001899 83C74B                  		add	di, 75		; BDS.volid
 14281 0000189C 8938                    		mov	[bx+si], di
 14282 0000189E 83EF4B                  		sub	di, 75		; BDS.volid
 14283 000018A1 8C4002                  		mov	[bx+si+2], es
 14284 000018A4 1F                      		pop	ds
 14285                                  dofloppy:	; 18/12/2022
 14286 000018A5 C3                      		retn
 14287                                  
 14288                                  ; ---------------------------------------------------------------------------
 14289                                  
 14290                                  ;----------------------------------------------------------------------------
 14291                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14292                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14293                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14294                                  ;   of getbp. for 3.5" media, we just return.
 14295                                  ;
 14296                                  ;   inputs:	es:di point to correct bds for this drive
 14297                                  ;		ah has media byte
 14298                                  ;
 14299                                  ;   outputs:	carry clear
 14300                                  ;		    no registers modified
 14301                                  ;		carry set
 14302                                  ;		    al = sectors/fat
 14303                                  ;		    bh = number of root directory entries
 14304                                  ;		    bl = sectors per track
 14305                                  ;		    cx = number of sectors
 14306                                  ;		    dh = sectors per allocation unit
 14307                                  ;		    dl = number of heads
 14308                                  ;
 14309                                  ;----------------------------------------------------------------------------
 14310                                  
 14311                                  hidensity:
 14312                                  
 14313                                  ; check for correct drive
 14314                                  		
 14315                                  		; 12/12/2022
 14316 000018A6 26F6452302              		test	byte [es:di+23h], 2		
 14317                                  		;test	word [es:di+23h], 2 ; is it special?	
 14318                                  					; [es:di+BDS.flags], fchangeline
 14319 000018AB 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14320                                  
 14321                                  ; we have a media byte that is pretty complex. examine drive information
 14322                                  ; table to see what kind it is.
 14323                                  
 14324 000018AD 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14325 000018B2 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14326                                  					; yes, use fatid...
 14327                                  ; 96 tpi drive?
 14328 000018B4 80FCF9                  		cmp	ah, 0F9h
 14329 000018B7 75EC                    		jnz	short dofloppy
 14330                                  
 14331                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14332                                  ;------ a 720K diskette
 14333                                  
 14334 000018B9 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14335                                  					; ffOther
 14336 000018BE 7418                    		jz	short Is720K
 14337 000018C0 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14338                                  					; ff288
 14339 000018C5 7411                    		jz	short Is720K
 14340 000018C7 B007                    		mov	al, 7		; seven	sectors	/ fat
 14341 000018C9 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14342                                  					; 224 root dir entries
 14343                                  					; & 0Fh sector max
 14344 000018CC B96009                  		mov	cx, 2400	; 80*15*2
 14345                                  					; 80 tracks, 15 sectors/track,
 14346                                  					; 2 sides
 14347 000018CF BA0201                  		mov	dx, 258		; 1*256+2
 14348                                  					; sectors/allocation unit
 14349                                  					; & head max
 14350 000018D2 83C402                  		add	sp, 2		; pop off return address
 14351 000018D5 E98FED                  		jmp	Has1		; return to tail of getbp
 14352                                  ; ---------------------------------------------------------------------------
 14353                                  
 14354                                  Is720K:					
 14355 000018D8 83C402                  		add	sp, 2		; pop off return address
 14356 000018DB E950ED                  		jmp	Has720K		; return to 720K code
 14357                                  ; ---------------------------------------------------------------------------
 14358                                  
 14359                                  		; 18/12/2022
 14360                                  ;dofloppy:				
 14361                                  		;retn
 14362                                  
 14363                                  ; =============== S U B	R O U T	I N E =======================================
 14364                                  
 14365                                  ; 16/10/2022
 14366                                  
 14367                                  ;---------------------------------------------------------------------------
 14368                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14369                                  ;		   essentially used to indicate changeline, or format.
 14370                                  ;
 14371                                  ;   inputs:	dl contains physical drive number
 14372                                  ;		bx contains bits to set in the flag field in the bdss
 14373                                  ;   outputs:	none
 14374                                  ;   registers modified: flags
 14375                                  ;
 14376                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14377                                  ;
 14378                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14379                                  ;---------------------------------------------------------------------------
 14380                                  
 14381                                  set_changed_dl:	
 14382 000018DE 06                      		push	es
 14383 000018DF 57                      		push	di
 14384                                  		;les	di, ds:start_bds
 14385                                  		; 19/10/2022
 14386 000018E0 C43E[1901]              		les	di, [start_bds]
 14387                                  
 14388                                  ; note: we assume that the list is non-empty
 14389                                  
 14390                                  scan_bds:				
 14391 000018E4 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14392 000018E8 7504                    		jnz	short get_next_bds
 14393                                  
 14394                                  ; someone may complain, but this *always* must be done when a disk change is
 14395                                  ; noted. there are *no* other compromising circumstances.
 14396                                  
 14397 000018EA 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14398                                  					; signal change	on other drive
 14399                                  get_next_bds:				
 14400 000018EE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14401                                  					; go to	next bds
 14402 000018F1 83FFFF                  		cmp	di, 0FFFFh
 14403 000018F4 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14404 000018F6 5F                      		pop	di
 14405 000018F7 07                      		pop	es
 14406 000018F8 C3                      		retn
 14407                                  
 14408                                  ; =============== S U B	R O U T	I N E =======================================
 14409                                  
 14410                                  ;---------------------------------------------------------------------------
 14411                                  ; checkromchange - see if external program has diddled rom change line.
 14412                                  ;
 14413                                  ;   inputs:	es:di points to current bds.
 14414                                  ;   outputs:	zero set - no change
 14415                                  ;		zero reset - change
 14416                                  ;   registers modified: none
 14417                                  ;---------------------------------------------------------------------------
 14418                                  
 14419                                  checkromchange:	
 14420                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14421                                  		; 10/12/2022
 14422 000018F9 26F6452340              		test	byte [es:di+23h], 40h
 14423                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14424                                  					; fchanged
 14425 000018FE C3                      		retn
 14426                                  
 14427                                  ; =============== S U B	R O U T	I N E =======================================
 14428                                  
 14429                                  ;---------------------------------------------------------------------------
 14430                                  ; resetchanged - restore value of change line
 14431                                  ;
 14432                                  ;   inputs:	es:di points to current bds
 14433                                  ;   outputs:	none
 14434                                  ;   registers modified: none
 14435                                  ;---------------------------------------------------------------------------
 14436                                  
 14437                                  resetchanged:	
 14438                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14439                                  		; 10/12/2022
 14440 000018FF 26806523BF              		and	byte [es:di+23h], 0BFh
 14441                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14442                                  					; ~fchanged
 14443 00001904 C3                      		retn
 14444                                  
 14445                                  ; =============== S U B	R O U T	I N E =======================================
 14446                                  
 14447                                  ;---------------------------------------------------------------------------
 14448                                  ; haschange - see if drive can supply change line
 14449                                  ;
 14450                                  ;   inputs:	es:di points to current bds
 14451                                  ;   outputs:	zero set - no change line available
 14452                                  ;		zero reset - change line available
 14453                                  ;   registers modified: none
 14454                                  ;---------------------------------------------------------------------------
 14455                                  
 14456                                  haschange:
 14457                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14458                                  		; 10/12/2022
 14459 00001905 26F6452302              		test	byte [es:di+23h], 2		
 14460                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14461                                  					; fchangeline
 14462 0000190A C3                      		retn
 14463                                  
 14464                                  ; ---------------------------------------------------------------------------
 14465                                  
 14466                                  ; 16/10/2022
 14467                                  
 14468                                  ;-------------------------------------------------------------------------
 14469                                  ; set_volume_id      -	main routine, calls other routines.
 14470                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14471                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14472                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14473                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14474                                  ;-------------------------------------------------------------------------
 14475                                  
 14476                                  ; set_volume_id
 14477                                  ;   if drive has changeline support, read in and set the volume_id
 14478                                  ; and the last fat_id byte. if no change line support then do nothing.
 14479                                  ;
 14480                                  ;   on entry:
 14481                                  ;	es:di points to the bds for this disk.
 14482                                  ;	ah contains media byte
 14483                                  ;
 14484                                  ;   on exit:
 14485                                  ;	carry clear:
 14486                                  ;	   successful call
 14487                                  ;	carry set
 14488                                  ;	   error and ax has error code
 14489                                  
 14490                                  set_volume_id:				
 14491 0000190B 52                      		push	dx		; save registers
 14492 0000190C 50                      		push	ax
 14493 0000190D E8F5FF                  		call	haschange	; does drive have changeline support?
 14494 00001910 740B                    		jz	short setvret	; no, get out
 14495 00001912 E81000                  		call	read_volume_id
 14496 00001915 7209                    		jb	short seterr
 14497 00001917 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14498 0000191A E8E2FF                  		call	resetchanged	; restore value	of change line
 14499                                  setvret:				
 14500                                  		; 10/12/2022
 14501                                  		; cf = 0
 14502                                  		;clc			; no error, clear carry flag
 14503 0000191D 58                      		pop	ax		; restore registers
 14504 0000191E 5A                      		pop	dx
 14505 0000191F C3                      		retn
 14506                                  ; ---------------------------------------------------------------------------
 14507                                  
 14508                                  seterr:					
 14509 00001920 5A                      		pop	dx		; pop stack but don't overwrite ax
 14510 00001921 5A                      		pop	dx		; restore dx
 14511 00001922 C3                      		retn
 14512                                  ; ---------------------------------------------------------------------------
 14513 00001923 0000                    root_sec:	dw 0			; root sector #
 14514                                  
 14515                                  ; 16/10/2022
 14516                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14517                                  ; 09/12/2022
 14518                                  ROOTSEC equ root_sec
 14519                                  
 14520                                  ; =============== S U B	R O U T	I N E =======================================
 14521                                  
 14522                                  ; 16/10/2022
 14523                                  
 14524                                  ; read_volume_id read the volume id and tells if it has been changed.
 14525                                  ;
 14526                                  ;   on entry:
 14527                                  ;	es:di points to current bds for drive.
 14528                                  ;
 14529                                  ;   on exit:
 14530                                  ;	carry clear
 14531                                  ;	    si = 1  no change
 14532                                  ;	    si = 0  ?
 14533                                  ;	    si = -1 change
 14534                                  ;
 14535                                  ;	carry set:
 14536                                  ;	    error and ax has error code.
 14537                                  
 14538                                  read_volume_id:
 14539 00001925 52                      		push	dx		; preserve registers
 14540 00001926 51                      		push	cx
 14541 00001927 53                      		push	bx
 14542 00001928 50                      		push	ax
 14543 00001929 06                      		push	es		; stack the bds last
 14544 0000192A 57                      		push	di
 14545 0000192B 1E                      		push	ds		; point es to Bios_Data
 14546 0000192C 07                      		pop	es
 14547 0000192D BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14548 00001930 BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14549 00001933 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14550 00001936 F3A4                    		rep movsb
 14551 00001938 5F                      		pop	di
 14552 00001939 07                      		pop	es
 14553 0000193A 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14554                                  					; # of fats
 14555 0000193E 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14556                                  					; sectors / fat
 14557 00001942 F6E1                    		mul	cl		; size taken by	fats
 14558 00001944 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14559                                  					; add on reserved sectors
 14560                                  					;
 14561                                  					; ax is	now sector # (0	based)
 14562                                  		; 17/10/2022
 14563 00001948 2EA3[2319]              		mov	[cs:ROOTSEC], ax
 14564                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14565                                  					; 0070h:3EFFh =	2C7h:198Fh
 14566 0000194C 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14567                                  					; # root dir entries
 14568 00001950 B104                    		mov	cl, 4		; 16 entries/sector
 14569 00001952 D3E8                    		shr	ax, cl		; divide by 16
 14570 00001954 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14571                                  next_sec:				
 14572 00001956 51                      		push	cx		; save outer loop counter
 14573 00001957 2EA1[2319]              		mov	ax, [cs:ROOTSEC]
 14574                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14575                                  					; get sector #
 14576 0000195B 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14577                                  					; sectors / track
 14578 0000195F 31D2                    		xor	dx, dx
 14579 00001961 F7F1                    		div	cx
 14580                                  
 14581                                  ; set up registers for call to read_sector
 14582                                  
 14583 00001963 42                      		inc	dx		; dx= sectors into track
 14584                                  					; ax= track count from 0
 14585 00001964 88D1                    		mov	cl, dl		; sector to read
 14586 00001966 31D2                    		xor	dx, dx
 14587 00001968 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14588                                  					; # heads on this disc
 14589 0000196C 88D6                    		mov	dh, dl		; head number
 14590 0000196E 88C5                    		mov	ch, al		; track	#
 14591 00001970 E804EE                  		call	read_sector	; get first sector of the root directory,
 14592                                  					; ds:bx	-> directory sector
 14593 00001973 7243                    		jb	short readviderr
 14594 00001975 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14595 00001978 B008                    		mov	al, 8		; volume label bit
 14596                                  fvid_loop:				
 14597 0000197A 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14598 0000197D 7436                    		jz	short no_vid	; yes, no vol id
 14599 0000197F 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14600 00001982 7405                    		jz	short ent_loop	; yes, skip
 14601 00001984 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14602 00001987 7511                    		jnz	short found_vid	; jmp yes
 14603                                  ent_loop:				
 14604 00001989 83C320                  		add	bx, 32		; add length of	directory entry
 14605 0000198C E2EC                    		loop	fvid_loop
 14606 0000198E 59                      		pop	cx		; outer loop
 14607 0000198F 2EFF06[2319]            		inc	word [cs:ROOTSEC]
 14608                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14609                                  					; next sector
 14610 00001994 E2C0                    		loop	next_sec	; continue
 14611                                  notfound:				
 14612 00001996 31F6                    		xor	si, si
 14613 00001998 EB16                    		jmp	short fvid_ret
 14614                                  ; ---------------------------------------------------------------------------
 14615                                  
 14616                                  found_vid:				
 14617 0000199A 59                      		pop	cx		; clean stack of outer loop counter
 14618 0000199B 89DE                    		mov	si, bx		; point	to volume_id
 14619 0000199D 06                      		push	es		; preserve current bds
 14620 0000199E 57                      		push	di
 14621 0000199F 1E                      		push	ds
 14622 000019A0 07                      		pop	es		; point es to Bios_Data
 14623 000019A1 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14624 000019A4 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14625                                  					; length of string minus nul
 14626 000019A7 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14627 000019A9 30C0                    		xor	al, al
 14628 000019AB AA                      		stosb			; null terminate
 14629 000019AC 31F6                    		xor	si, si
 14630 000019AE 5F                      		pop	di		; restore current bds
 14631 000019AF 07                      		pop	es
 14632                                  fvid_ret:				
 14633 000019B0 58                      		pop	ax
 14634                                  		; 10/12/2022
 14635                                  		; cf = 0
 14636                                  		;clc
 14637                                  rvidret:				
 14638 000019B1 5B                      		pop	bx		; restore registers
 14639 000019B2 59                      		pop	cx
 14640 000019B3 5A                      		pop	dx
 14641 000019B4 C3                      		retn
 14642                                  ; ---------------------------------------------------------------------------
 14643                                  
 14644                                  no_vid:					
 14645 000019B5 59                      		pop	cx		; clean stack of outer loop counter
 14646 000019B6 EBDE                    		jmp	short notfound	; not found
 14647                                  ; ---------------------------------------------------------------------------
 14648                                  
 14649                                  readviderr:				
 14650 000019B8 5E                      		pop	si		; trash the outer loop counter
 14651 000019B9 5E                      		pop	si		; caller's ax, return error code instead 
 14652 000019BA EBF5                    		jmp	short rvidret
 14653                                  
 14654                                  ; =============== S U B	R O U T	I N E =======================================
 14655                                  
 14656                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14657                                  ;
 14658                                  ; inputs:	es:di has current bds
 14659                                  ; outputs:	bds for drive has volume id from tmp
 14660                                  
 14661                                  transfer_volume_id:	
 14662 000019BC 57                      		push	di		; copy the volume id from tmp to special drive
 14663 000019BD 56                      		push	si
 14664 000019BE 51                      		push	cx
 14665 000019BF BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14666                                  		;add	di, BDS.volid
 14667 000019C2 83C74B                  		add	di, 75		; BDS.volid
 14668                                  		;mov	cx, VOLID_SIZ
 14669 000019C5 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14670 000019C8 FC                      		cld
 14671 000019C9 F3A4                    		rep movsb
 14672 000019CB 59                      		pop	cx
 14673 000019CC 5E                      		pop	si
 14674 000019CD 5F                      		pop	di
 14675 000019CE C3                      		retn
 14676                                  
 14677                                  ; =============== S U B	R O U T	I N E =======================================
 14678                                  
 14679                                  ;  check_volume_id - compare volume id in tmp area with
 14680                                  ;		     one expected for drive
 14681                                  ;
 14682                                  ;   inputs:	es:di has current bds for drive
 14683                                  ;   outputs:	zero true means it matched
 14684                                  
 14685                                  check_volume_id:	
 14686 000019CF 57                      		push	di
 14687 000019D0 51                      		push	cx
 14688 000019D1 BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14689                                  		;add	di, BDS.volid
 14690 000019D4 83C74B                  		add	di, 75		; BDS.volid
 14691                                  		;mov	cx, VOLID_SIZ
 14692 000019D7 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14693 000019DA FC                      		cld
 14694 000019DB F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14695 000019DD 59                      		pop	cx
 14696 000019DE 5F                      		pop	di
 14697 000019DF C3                      		retn
 14698                                  
 14699                                  ; =============== S U B	R O U T	I N E =======================================
 14700                                  
 14701                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14702                                  ;	      - uses the fat id obtained from the boot sector.
 14703                                  ;
 14704                                  ;   inputs:	medbyt is expected fat id
 14705                                  ;		es:di points to current bds
 14706                                  ;
 14707                                  ;   output:	si = -1 if fat id different,
 14708                                  ;		si = 0 otherwise
 14709                                  ;
 14710                                  ;   no other registers changed.
 14711                                  
 14712                                  fat_check:		
 14713 000019E0 50                      		push	ax
 14714 000019E1 31F6                    		xor	si, si		; say fat id's are same.
 14715 000019E3 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14716 000019E6 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14717                                  					; compare it with the bds medbyte
 14718 000019EA 7401                    		jz	short okret1	; carry	clear
 14719 000019EC 4E                      		dec	si
 14720                                  okret1:					
 14721 000019ED 58                      		pop	ax
 14722 000019EE C3                      		retn
 14723                                  
 14724                                  ; ---------------------------------------------------------------------------
 14725                                  
 14726                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14727                                  		;times 7 db 0
 14728                                  
 14729                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14730                                  
 14731                                  		; 09/12/2022
 14732                                  		;times 4 db 0	; 17/10/2022
 14733                                  		;db 4 dup(0)	; times 4 db 0
 14734                                  
 14735                                  ; ---------------------------------------------------------------------------
 14736                                  
 14737                                  		; 09/12/2022
 14738                                  		;db 0
 14739                                  
 14740                                  number2div	equ ($-BCode_start)
 14741                                  number2mod	equ (number2div % 16)
 14742                                  
 14743                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 14744 000019EF 00                      		times (16-number2mod) db 0
 14745                                  %endif
 14746                                  
 14747                                  ;align 16
 14748                                  
 14749                                  ; 09/12/2022
 14750                                  BCODE_END	equ $ - BCode_start
 14751                                  ; 29/09/2023
 14752                                  BCODEEND:
 14753                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14754                                  ; 13/12/2022
 14755                                  SYSINITOFFSET	equ BCODE_END
 14756                                  ; 29/09/2023
 14757                                  ;SYSINITOFFSET	equ $-$$
 14758                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14759                                  
 14760                                  ; 28/09/2023
 14761                                  S2SIZE equ $-$$
 14762                                  
 14763                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14764                                  
 14765                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14766                                  ; 01/05/2019 - Retro DOS v4.0 
 14767                                  ; ============================================================================
 14768                                  ; end of BIOSCODE
 14769                                  
 14770                                  ; ----------------------------------------------------------------------------
 14771                                  ; %include sysinit5.s	; 09/12/2022
 14772                                  ; ----------------------------------------------------------------------------
 14773                                  
 14774                                  ;=============================================================================
 14775                                  ; (IO.SYS) SYSINIT SEGMENT 
 14776                                  ;=============================================================================
 14777                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14778                                  
 14779                                  section .SYSINIT vstart=0
 14780                                  
 14781                                  ; ****************************************************************************
 14782                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14783                                  ; ----------------------------------------------------------------------------
 14784                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14785                                  ; ----------------------------------------------------------------------------
 14786                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14787                                  ; ----------------------------------------------------------------------------
 14788                                  ; Assembler: NASM version 2.15
 14789                                  ; ----------------------------------------------------------------------------
 14790                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14791                                  ; ----------------------------------------------------------------------------
 14792                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14793                                  ; ----------------------------------------------------------------------------
 14794                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14795                                  ; source code by Microsoft, 1991 
 14796                                  ; ----------------------------------------------------------------------------
 14797                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14798                                  ; by Microsoft, 12/10/1983
 14799                                  ; ****************************************************************************
 14800                                  ; main file: 'retrodos4.s'
 14801                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14802                                  
 14803                                  ; 21/10/2022
 14804                                  ; ----------------------------------------------------------------------------
 14805                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14806                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14807                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14808                                  ; ----------------------------------------------------------------------------
 14809                                  ; Binary file splitter & joiner: FFSJ v3.3
 14810                                  
 14811                                  ;--------------------------------------------------------------
 14812                                  ; SYSINIT.TXT (27/01/1983)
 14813                                  ;--------------------------------------------------------------
 14814                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14815                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14816                                  ;performed any  initialization  it  needs  to  do.   Control is
 14817                                  ;transfered with a long jump to the external  variable  SYSINIT
 14818                                  ;
 14819                                  ;
 14820                                  ;   The OEM  has  the  following  variables declared external:
 14821                                  ;
 14822                                  ;   CURRENT_DOS_LOCATION    WORD
 14823                                  ;
 14824                                  ;This word  contains  the  segment  number of the DOS before it
 14825                                  ;is relocated.  The OEM bios must set this value.
 14826                                  ;
 14827                                  ;   FINAL_DOS_LOCATION      WORD
 14828                                  ;
 14829                                  ;This word contains the segment number of the DOS after SYSINIT
 14830                                  ;moves it.  The OEM bios must set this value.
 14831                                  ;
 14832                                  ;   DEVICE_LIST             DWORD
 14833                                  ;
 14834                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14835                                  ;character and block device drivers.  The  OEM  must  set  this
 14836                                  ;value.
 14837                                  ;
 14838                                  ;   MEMORY_SIZE             WORD
 14839                                  ;
 14840                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14841                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14842                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14843                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14844                                  ;and read it back until it gets a mismatch.
 14845                                  ;
 14846                                  ;   DEFAULT_DRIVE           BYTE
 14847                                  ;
 14848                                  ;This is  the initial default drive when the system first comes
 14849                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14850                                  ;it then drive a is assumed.
 14851                                  ;
 14852                                  ;   BUFFERS                 BYTE
 14853                                  ;
 14854                                  ;This is  the  default  number of buffers for the system.  This
 14855                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14856                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14857                                  ;
 14858                                  ;   FILES                   BYTE
 14859                                  ;
 14860                                  ;This is  the  default  number  of  files for the system.  This
 14861                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14862                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14863                                  ;
 14864                                  ;   SYSINIT                 FAR
 14865                                  ;
 14866                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14867                                  ;this label at the end of its INIT code.
 14868                                  ;
 14869                                  ;   The OEM  has  the  following  variables declared public:
 14870                                  ;
 14871                                  ;   RE_INIT                 FAR
 14872                                  ;
 14873                                  ;This is an entry point which allows the BIOS to do some INIT
 14874                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14875                                  ;PRESERVED.  On entry DS points to the first available memory
 14876                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14877                                  ;prefix which represents  the  "program"  currently  running.
 14878                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14879                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14880                                  ;that  no  memory  is  allocated to it, it is running in free
 14881                                  ;memory.
 14882                                  ;NOTES:
 14883                                  ;     At the time this routine is called SYSINIT occupies the
 14884                                  ;highest 10K of memory ("highest" is determined by the  value
 14885                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14886                                  ;     Since this is called AFTER DOS is initialized, you can
 14887                                  ;make system calls.  This also implies that the code for this
 14888                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14889                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14890                                  ;     If you don't want  anything done just set this to point
 14891                                  ;at a FAR RET instruction.
 14892                                  
 14893                                  ; ----------------------------------------------------------------------
 14894                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14895                                  ; ----------------------------------------------------------------------
 14896                                  
 14897                                  ;include version.inc
 14898                                  ; ----------------------------------------------------------------------
 14899                                  
 14900                                  ;FALSE   EQU     0
 14901                                  ;TRUE    EQU     0FFFFh
 14902                                  
 14903                                  ;IBMVER	    EQU     TRUE
 14904                                  ;IBMCOPYRIGHT EQU   FALSE
 14905                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14906                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14907                                  ;MSVER      EQU     FALSE
 14908                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14909                                  ;KANJI      EQU     FALSE
 14910                                  
 14911                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14912                                  ; ----------------------------------------------------------------------
 14913                                  ;MAJOR_VERSION  EQU	6
 14914                                  ;;MINOR_VERSION	EQU	0	;6.00
 14915                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14916                                  
 14917                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14918                                  ; ----------------------------------------------------------------------
 14919                                  MAJOR_VERSION   EQU	5
 14920                                  MINOR_VERSION   EQU	0
 14921                                  
 14922                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14923                                  
 14924                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14925                                  				; currently 0.
 14926                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14927                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14928                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14929                                  
 14930                                  ;      if1
 14931                                  ;      %OUT  ... for DOS Version 5.00 ...
 14932                                  ;      endif
 14933                                  
 14934                                         ;******************************
 14935                                         ;Each assembler program should:
 14936                                         ;  mov ah,030h                   ;DOS Get Version function
 14937                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14938                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14939                                         ;  jne error_handler             ; EXACT version match.
 14940                                         ;******************************
 14941                                  
 14942                                  ; ----------------------------------------------------------------------
 14943                                  ; device definitions
 14944                                  
 14945                                  ;Attribute bit masks
 14946                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14947                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14948                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14949                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14950                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14951                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14952                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14953                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14954                                  
 14955                                  ; The device table list has the form:
 14956                                  struc	SYSDEV
 14957 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14958 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14959 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14960 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14961 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14962                                  .size:
 14963                                  endstruc
 14964                                  
 14965                                  ;Static Reguest Header
 14966                                  struc	SRHEAD
 14967 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14968 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14969 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14970 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14971 00000005 ????????????????                	resb 8		;Reserved for queue links
 14972                                  .size:
 14973                                  endstruc
 14974                                  
 14975                                  ;Status word masks
 14976                                  STERR   EQU     8000H           ;Bit 15 - Error
 14977                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14978                                  STDON   EQU     0100H           ;Bit 8 - Done
 14979                                  STECODE EQU     00FFH           ;Error code
 14980                                  WRECODE EQU     0
 14981                                  
 14982                                  ;Function codes
 14983                                  DEVINIT EQU     0               ;Initialization
 14984                                  DINITHL EQU     26              ;Size of init header
 14985                                  DEVMDCH EQU     1               ;Media check
 14986                                  DMEDHL  EQU     15              ;Size of media check header
 14987                                  DEVBPB  EQU     2               ;Get BPB
 14988                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14989                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14990                                  DEVRD   EQU     4               ;Read
 14991                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14992                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14993                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14994                                  DEVIST  EQU     6               ;Input status
 14995                                  DSTATHL EQU     13              ;Size of status header
 14996                                  DEVIFL  EQU     7               ;Input flush
 14997                                  DFLSHL  EQU     15              ;Size of flush header
 14998                                  DEVWRT  EQU     8               ;Write
 14999                                  DEVWRTV EQU     9               ;Write with verify
 15000                                  DEVOST  EQU     10              ;Output status
 15001                                  DEVOFL  EQU     11              ;Output flush
 15002                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15003                                  
 15004                                  ; ----------------------------------------------------------------------
 15005                                  struc	SYS_FCB
 15006 00000000 ??                      .fcb_drive:	resb 1
 15007 00000001 ????????????????        .fcb_name:	resb 8
 15008 00000009 ??????                  .fcb_ext:	resb 3
 15009 0000000C ????                    .fcb_EXTENT:	resw 1
 15010 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15011 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15012                                                          ; word
 15013 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15014 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15015 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15016 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15017                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15018                                                          ; If file, bit 6=0 if dirty
 15019                                                          ; If I/O device, bit 6=0 if EOF (input)
 15020                                                          ;               Bit 5=1 if Raw mode
 15021                                                          ;               Bit 0=1 if console input device
 15022                                                          ;               Bit 1=1 if console output device
 15023                                                          ;               Bit 2=1 if null device
 15024                                                          ;               Bit 3=1 if clock device
 15025 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15026 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15027 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15028 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15029 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15030 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15031                                  .size:
 15032                                  endstruc
 15033                                  
 15034                                  ; ----------------------------------------------------------------------
 15035                                  ; Field definition for I/O buffer information
 15036                                  
 15037                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15038                                  
 15039                                  struc buffinfo
 15040 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15041 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15042 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15043                                  			; SFT table index (bit 7 = 1)
 15044                                  			; = FFh if buffer free
 15045 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15046                                  			;	= 0 if Local device buffer
 15047                                  			; Bit 6 = 1 if buffer dirty
 15048                                  			; Bit 5 = Reserved
 15049                                  			; Bit 4 = Search bit (bit 7 = 1)
 15050                                  			; Bit 3 = 1 if buffer is DATA
 15051                                  			; Bit 2 = 1 if buffer is DIR
 15052                                  			; Bit 1 = 1 if buffer is FAT
 15053                                  			; Bit 0 = Reserved
 15054 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15055                                  ; The next two items are often refed as a word (bit 7 = 0)
 15056 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15057 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15058 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15059 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15060 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15061                                  .size:
 15062                                  endstruc
 15063                                  
 15064                                  %define buf_offset	dword [buf_sector]
 15065                                  			;For bit 7 = 1, this is the byte
 15066                                  			;offset of the start of the buffer in
 15067                                  			;the file pointed to by buf_ID.  Thus
 15068                                  			;the buffer starts at location
 15069                                  			;buf_offset in the file and contains
 15070                                  			;buf_fill bytes.
 15071                                  
 15072                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15073                                  
 15074                                  
 15075                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15076                                  
 15077                                  ;Flag byte masks
 15078                                  buf_isnet	EQU	10000000B
 15079                                  buf_dirty	EQU	01000000B
 15080                                  ;***
 15081                                  buf_visit	EQU	00100000B
 15082                                  ;***
 15083                                  buf_snbuf	EQU	00010000B
 15084                                  
 15085                                  buf_isDATA	EQU	00001000B
 15086                                  buf_isDIR	EQU	00000100B
 15087                                  buf_isFAT	EQU	00000010B
 15088                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15089                                  
 15090                                  buf_NetID	EQU	bufinsiz
 15091                                  
 15092                                  ; ----------------------------------------------------------------------
 15093                                  
 15094                                  ; ----------------------------------------------------------------------
 15095                                  ;**	DPB - Drive Parameter Block
 15096                                  
 15097                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15098                                  
 15099                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15100                                  ;	possibly inaccurate deductions from code study... - jgl
 15101                                  ;
 15102                                  ;	The DPB is DOS's main structure for describing block devices.
 15103                                  ;	It contains info about the "Drive" intermingled with info about
 15104                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15105                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15106                                  ;
 15107                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15108                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15109                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15110                                  
 15111                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15112                                  
 15113                                  ; 12/05/2019 - Retro DOS v4.0
 15114                                  
 15115                                  struc	DPB
 15116 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15117 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15118 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15119 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15120 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15121 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15122 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15123 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15124 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15125 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15126                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15127 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15128 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15129 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15130 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15131 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15132                                  				; check the first time this DPB is used
 15133 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15134 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15135 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15136                                  .size:
 15137                                  endstruc
 15138                                  
 15139                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15140                                  
 15141                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15142                                  
 15143                                  ; ----------------------------------------------------------------------
 15144                                  ; 26/03/2018
 15145                                  
 15146                                  ; IOCTL SUB-FUNCTIONS
 15147                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15148                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15149                                  IOCTL_READ_HANDLE	EQU	2
 15150                                  IOCTL_WRITE_HANDLE	EQU	3
 15151                                  IOCTL_READ_DRIVE	EQU	4
 15152                                  IOCTL_WRITE_DRIVE	EQU	5
 15153                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15154                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15155                                  IOCTL_CHANGEABLE?	EQU	8
 15156                                  IOCTL_SHARING_RETRY	EQU	11
 15157                                  GENERIC_IOCTL_HANDLE	EQU	12
 15158                                  GENERIC_IOCTL		EQU	13
 15159                                  
 15160                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15161                                  RAWIO			EQU	8
 15162                                  
 15163                                  ; RAWIO SUB-FUNCTIONS
 15164                                  GET_DEVICE_PARAMETERS	EQU	60H
 15165                                  SET_DEVICE_PARAMETERS	EQU	40H
 15166                                  READ_TRACK		EQU	61H
 15167                                  WRITE_TRACK		EQU	41H
 15168                                  VERIFY_TRACK		EQU	62H
 15169                                  FORMAT_TRACK		EQU	42H
 15170                                  
 15171                                  ; DEVICETYPE VALUES
 15172                                  MAX_SECTORS_IN_TRACK	EQU	63
 15173                                  DEV_5INCH		EQU	0
 15174                                  DEV_5INCH96TPI		EQU	1
 15175                                  DEV_3INCH720KB		EQU	2
 15176                                  DEV_8INCHSS		EQU	3
 15177                                  DEV_8INCHDS		EQU	4
 15178                                  DEV_HARDDISK		EQU	5
 15179                                  DEV_OTHER		EQU	7
 15180                                  ;DEV_3INCH1440KB	EQU	7
 15181                                  DEV_3INCH2880KB		EQU	9
 15182                                  ; Retro DOS v2.0 - 26/03/2018
 15183                                  ;;DEV_TAPE		EQU	6
 15184                                  ;;DEV_ERIMO		EQU	8
 15185                                  ;DEV_3INCH2880KB	EQU	9
 15186                                  DEV_3INCH1440KB		EQU	10
 15187                                  
 15188                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15189                                  					; CURRENTLY SUPPORT.
 15190                                  MAX_DEV_TYPE		EQU	10
 15191                                  
 15192                                  struc A_SECTORTABLE
 15193 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15194 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15195                                  .size:
 15196                                  endstruc
 15197                                  
 15198                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15199                                  
 15200                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15201                                  ;
 15202                                  ;	The BPB contains information about the disk structure.  It dates
 15203                                  ;	back to the earliest FAT systems and so FAT information is
 15204                                  ;	intermingled with physical driver information.
 15205                                  ;
 15206                                  ;	A boot sector contains a BPB for its device; for other disks
 15207                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15208                                  ;	information in the DPB.
 15209                                  ;
 15210                                  ;	The BDS structure contains a BPB within it.
 15211                                  
 15212                                  struc A_BPB
 15213 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15214 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15215 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15216 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15217 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15218 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15219 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15220 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15221 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15222 0000000F ????                    .BPB_HEADS:		resw	1
 15223 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15224 00000013 ????                    			resw	1
 15225 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15226 00000017 ????                    			resw	1
 15227 00000019 ????????????            			resb	6	; NOTE:  many times these
 15228                                  ;					; 	 6 bytes are omitted
 15229                                  ;					;	 when BPB manipulations
 15230                                  ;					;	 are performed!
 15231                                  .size:
 15232                                  endstruc
 15233                                  
 15234                                  struc A_DEVICEPARAMETERS
 15235 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15236 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15237 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15238 00000004 ????                    .DP_CYLINDERS:		resw	1
 15239 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15240 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15241 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15242 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15243                                  endstruc
 15244                                  
 15245                                  ; ----------------------------------------------------------------------
 15246                                  ; structure, equates for devmark for mem command.
 15247                                  
 15248                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15249                                  
 15250                                  struc devmark
 15251 00000000 ??                       .id:	    resb 1
 15252 00000001 ????                     .seg:	    resw 1
 15253 00000003 ????                     .size:	    resw 1
 15254 00000005 ??????                   .dum:	    resb 3
 15255 00000008 ????????????????         .filename: resb 8
 15256                                  endstruc
 15257                                  
 15258                                  devmark_stk	equ	'S'
 15259                                  devmark_device	equ	'D'
 15260                                  devmark_ifs	equ	'I'
 15261                                  devmark_buf	equ	'B'
 15262                                  devmark_cds	equ	'L' ; lastdrive
 15263                                  devmark_files	equ	'F'
 15264                                  devmark_fcbs	equ	'X'
 15265                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15266                                  devmark_ems_stub equ	'E'
 15267                                  
 15268                                  setbrkdone	equ	00000001b
 15269                                  for_devmark	equ	00000010b
 15270                                  not_for_devmark equ	11111101b
 15271                                  
 15272                                  ; ----------------------------------------------------------------------
 15273                                  ; Memory arena structure
 15274                                  
 15275                                  ; 24/03/2019 - Retro DOS v4.0 
 15276                                  ; (MSDOS 6.0, ARENA.INC)
 15277                                  
 15278                                  ;** Arena Header
 15279                                  
 15280                                  struc ARENA
 15281 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15282 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15283 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15284 00000005 ??????                  .RESERVED	resb 3		; reserved
 15285 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15286                                  endstruc
 15287                                  
 15288                                  ; 12/04/2019
 15289                                  
 15290                                  arena_owner_system	EQU 0	; free block indication
 15291                                  
 15292                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15293                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15294                                  
 15295                                  ; ----------------------------------------------------------------------
 15296                                  ; Process data block (otherwise known as program header)
 15297                                  
 15298                                  ; 23/03/2019 - Retro DOS v4.0
 15299                                  
 15300                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15301                                  
 15302                                  FILPERPROC	EQU     20
 15303                                  
 15304                                  struc PDB	; Process_data_block
 15305 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15306 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15307 00000004 ??                                      resb 1
 15308 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15309 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15310 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15311 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15312 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15313 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15314 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15315 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15316 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15317 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15318 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15319 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15320 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15321 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15322 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15323 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15324 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15325 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15326 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15327 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15328 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15329 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15330                                  ;.size:
 15331                                  endstruc
 15332                                  
 15333                                  ; ----------------------------------------------------------------------
 15334                                  ; <system call definitions>
 15335                                  
 15336                                  ; 23/03/2019 - Retro DOS v4.0
 15337                                  
 15338                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15339                                  
 15340                                  ABORT                           EQU 0   ;  0      0
 15341                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15342                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15343                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15344                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15345                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15346                                  RAW_CON_IO                      EQU 6   ;  6      6
 15347                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15348                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15349                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15350                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15351                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15352                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15353                                  DISK_RESET                      EQU 13  ; 13      D
 15354                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15355                                  FCB_OPEN                        EQU 15  ; 15      F
 15356                                  FCB_CLOSE                       EQU 16  ; 16     10
 15357                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15358                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15359                                  FCB_DELETE                      EQU 19  ; 19     13
 15360                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15361                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15362                                  FCB_CREATE                      EQU 22  ; 22     16
 15363                                  FCB_RENAME                      EQU 23  ; 23     17
 15364                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15365                                  SET_DMA                         EQU 26  ; 26     1A
 15366                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15367                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15368                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15369                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15370                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15371                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15372                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15373                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15374                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15375                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15376                                  GET_DATE                        EQU 42  ; 42     2A
 15377                                  SET_DATE                        EQU 43  ; 43     2B
 15378                                  GET_TIME                        EQU 44  ; 44     2C
 15379                                  SET_TIME                        EQU 45  ; 45     2D
 15380                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15381                                  ; Extended functionality group
 15382                                  GET_DMA                         EQU 47  ; 47     2F
 15383                                  GET_VERSION                     EQU 48  ; 48     30
 15384                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15385                                  GET_DPB                         EQU 50  ; 50     32
 15386                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15387                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15388                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15389                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15390                                  CHAR_OPER                       EQU 55  ; 55     37
 15391                                  INTERNATIONAL                   EQU 56  ; 56     38
 15392                                  ;   Directory Group
 15393                                  MKDIR                           EQU 57  ; 57     39
 15394                                  RMDIR                           EQU 58  ; 58     3A
 15395                                  CHDIR                           EQU 59  ; 59     3B
 15396                                  ;   File Group
 15397                                  CREAT                           EQU 60  ; 60     3C
 15398                                  OPEN                            EQU 61  ; 61     3D
 15399                                  CLOSE                           EQU 62  ; 62     3E
 15400                                  READ                            EQU 63  ; 63     3F
 15401                                  WRITE                           EQU 64  ; 64     40
 15402                                  UNLINK                          EQU 65  ; 65     41
 15403                                  LSEEK                           EQU 66  ; 66     42
 15404                                  CHMOD                           EQU 67  ; 67     43
 15405                                  IOCTL                           EQU 68  ; 68     44
 15406                                  XDUP                            EQU 69  ; 69     45
 15407                                  XDUP2                           EQU 70  ; 70     46
 15408                                  CURRENT_DIR                     EQU 71  ; 71     47
 15409                                  ;    Memory Group
 15410                                  ALLOC                           EQU 72  ; 72     48
 15411                                  DEALLOC                         EQU 73  ; 73     49
 15412                                  SETBLOCK                        EQU 74  ; 74     4A
 15413                                  ;    Process Group
 15414                                  EXEC                            EQU 75  ; 75     4B
 15415                                  EXIT                            EQU 76  ; 76     4C
 15416                                  WAITPROCESS			EQU 77  ; 77     4D
 15417                                  FIND_FIRST                      EQU 78  ; 78     4E
 15418                                  ;   Special Group
 15419                                  FIND_NEXT                       EQU 79  ; 79     4F
 15420                                  ; SPECIAL SYSTEM GROUP
 15421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15423                                  GET_IN_VARS                     EQU 82  ; 82     52
 15424                                  SETDPB                          EQU 83  ; 83     53
 15425                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15426                                  DUP_PDB                         EQU 85  ; 85     55
 15427                                  RENAME                          EQU 86  ; 86     56
 15428                                  FILE_TIMES                      EQU 87  ; 87     57
 15429                                  ;
 15430                                  ALLOCOPER			EQU 88	; 88     58	
 15431                                  ; Network extention system calls
 15432                                  GetExtendedError		EQU 89	; 89	 59
 15433                                  CreateTempFile			EQU 90	; 90	 5A
 15434                                  CreateNewFile			EQU 91	; 91	 5B
 15435                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15436                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15437                                  					;	    CloseByName, CloseUser,
 15438                                  					;	    CloseUserProcess,
 15439                                  					;	    GetOpenFileList
 15440                                  UserOper			EQU 94	; 94	 5E Get and Set
 15441                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15442                                  xNameTrans			EQU 96	; 96	 60
 15443                                  PathParse			EQU 97	; 97	 61
 15444                                  GetCurrentPSP			EQU 98	; 98	 62
 15445                                  Hongeul 			EQU 99	; 99	 63
 15446                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15447                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15448                                  GetExtCntry			EQU 101 ; 101	 65
 15449                                  GetSetCdPg			EQU 102 ; 102	 66
 15450                                  ExtHandle			EQU 103 ; 103	 67
 15451                                  Commit				EQU 104 ; 104	 68
 15452                                  GetSetMediaID			EQU 105 ; 105	 69
 15453                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15454                                  ExtOpen 			EQU 108 ; 108	 6C
 15455                                  ;
 15456                                  ;ifdef ROMEXEC
 15457                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15458                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15459                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15460                                  ;endif
 15461                                  ;
 15462                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15463                                  OEM_C1				EQU 249 ; 249	 F9
 15464                                  OEM_C2				EQU 250 ; 250	 FA
 15465                                  OEM_C3				EQU 251 ; 251	 FB
 15466                                  OEM_C4				EQU 252 ; 252	 FC
 15467                                  OEM_C5				EQU 253 ; 253	 FD
 15468                                  OEM_C6				EQU 254 ; 254	 FE
 15469                                  OEM_C7				EQU 255 ; 255	 FF
 15470                                  
 15471                                  ; ----------------------------------------------------------------------
 15472                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15473                                  ; ----------------------------------------------------------------------
 15474                                  
 15475                                  ;;	IF	STACKSW
 15476                                  
 15477                                  ;;
 15478                                  ;; Internal Stack Parameters
 15479                                  ;EntrySize		equ	8
 15480                                  ;
 15481                                  ;MinCount		equ	8
 15482                                  ;DefaultCount		equ	9
 15483                                  ;MaxCount		equ	64
 15484                                  ;
 15485                                  ;MinSize 		equ	32
 15486                                  ;DefaultSize		equ	128
 15487                                  ;MaxSize 		equ	512
 15488                                  
 15489                                  ;;	ENDIF
 15490                                  
 15491                                  ; ----------------------------------------------------------------------
 15492                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15493                                  ; ----------------------------------------------------------------------
 15494                                  					  ;;Rev 3.30 Modification
 15495                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15496                                  									  
 15497                                  ;*******************************					  
 15498                                  ;System Service call ( Int 15h )					  
 15499                                  ;*******************************					  
 15500                                  ;Function AH = 0C0h, Return system configuration			  
 15501                                  ;For PC and PCJR on return:						  
 15502                                  ;	(AH)	= 80h							  
 15503                                  ;	(CY)	= 1							  
 15504                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15505                                  ;	(AH)	= 86h							  
 15506                                  ;	(CY)	= 1							  
 15507                                  ;For all others:							  
 15508                                  ;	(AH)	= 0							  
 15509                                  ;	(CY)	= 0							  
 15510                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15511                                  ; System descriptor :							  
 15512                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15513                                  ;				minimum length = 8			  
 15514                                  ;	DB	xx		model byte				  
 15515                                  ;				0FFh	= PC				  
 15516                                  ;				0FEh	= PC/XT, Portable		  
 15517                                  ;				0FDh	= PC/JR 			  
 15518                                  ;				0FCh	= PC/AT				  
 15519                                  ;				0F9h	= Convertable			  
 15520                                  ;				0F8h	= Model 80			  
 15521                                  ;				0E0 thru 0EFh = reserved		  
 15522                                  ;									  
 15523                                  ;	DB	xx		secondary model byte			  
 15524                                  ;				000h	= PC1				  
 15525                                  ;				000h	= PC/XT, Portable		  
 15526                                  ;				000h	= PC/JR 			  
 15527                                  ;				000h	= PC/AT 			  
 15528                                  ;				001h	= PC/AT Model 339		  
 15529                                  ;				003h	= PC/RT				  
 15530                                  ;				000h	= Convertable			  
 15531                                  ;									  
 15532                                  ;	DB	xx		bios revision level			  
 15533                                  ;				00 for first release, subsequent release  
 15534                                  ;				of code with same model byte and	  
 15535                                  ;				secondary model byte require revison level
 15536                                  ;				to increase by one.			  
 15537                                  ;									  
 15538                                  ;	DB	xx		feature information byte 1		  
 15539                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15540                                  ;					 = 0, DMA channel 3 not used	  
 15541                                  ;									  
 15542                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15543                                  ;					 = 0, 2nd Interrupt chip not present
 15544                                  ;									  
 15545                                  ;				00X00000 = 1, Real Time Clock present	  
 15546                                  ;					 = 0, Real Time Clock not present 
 15547                                  ;									  
 15548                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15549                                  ;						called in keyboard interrupt
 15550                                  ;						(Int 09h).		  
 15551                                  ;					 = 0, Keyboard escape sequence not
 15552                                  ;						called. 		  
 15553                                  ;				0000XXXX reserved			  
 15554                                  ;									  
 15555                                  ;	DB	xx		feature information byte 2 - reserved	  
 15556                                  ;									  
 15557                                  ;	DB	xx		feature information byte 2 - reserved	  
 15558                                  ;									  
 15559                                  ;	DB	xx		feature information byte 2 - reserved	  
 15560                                  ;									  
 15561                                  ;	DB	xx		feature information byte 2 - reserved	  
 15562                                  ;									  
 15563                                  
 15564                                  ; 22/03/2019									  
 15565                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15566 00000000 ????                    .bios_sd_leng:		resw 1				  
 15567 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15568                                  .bios_sd_scnd_modelbyte: 
 15569 00000003 ??                      			resb 1					  
 15570 00000004 ??                      			resb 1					  
 15571 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15572 00000006 ????????                			resb 4					  
 15573                                  endstruc					  
 15574                                  									  
 15575                                  ;FeatureByte1	bit map equates 					  
 15576                                  DMAchannel3		equ 10000000b					  
 15577                                  ScndIntController	equ 01000000b					  
 15578                                  RealTimeClock		equ 00100000b					  
 15579                                  KeyEscapeSeq		equ 00010000b					  
 15580                                  					;;End of Modification
 15581                                  
 15582                                  ; ----------------------------------------------------------------------
 15583                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15584                                  ; ----------------------------------------------------------------------
 15585                                  ; 22/03/2019 - Retro DOS v4.0
 15586                                  
 15587                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15588                                  
 15589                                  struc SysInitVars
 15590                                  ; MSDOS 3.3
 15591 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15592 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15593 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15594 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15595 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15596 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15597 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15598 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15599 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15600 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15601 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15602 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15603                                  ; MSDOS 6.0
 15604 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15605 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15606 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15607 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15608                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15609 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15610 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15611 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15612 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15613 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15614 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15615 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15616                                  .size:
 15617                                  endstruc
 15618                                  
 15619                                  ;This is added for more information exchage between DOS, BIOS.
 15620                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15621                                  
 15622                                  ; 22/03/2019
 15623                                  struc SysInitVars_Ext
 15624 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15625 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15626                                  endstruc
 15627                                  
 15628                                  ; 09/06/2018
 15629                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15630                                  SYSI_DPB    equ	0
 15631                                  SYSI_SFT    equ 4
 15632                                  SYSI_CLOCK  equ 8
 15633                                  SYSI_CON    equ 12
 15634                                  SYSI_MAXSEC equ 16
 15635                                  SYSI_BUF    equ 18 		
 15636                                  SYSI_CDS    equ 22
 15637                                  SYSI_FCB    equ 26
 15638                                  SYSI_KEEP   equ 30
 15639                                  SYSI_NUMIO  equ	32
 15640                                  SYSI_NCDS   equ	33
 15641                                  SYSI_DEV    equ 34
 15642                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15643                                  SYSI_ATTR	  equ 38
 15644                                  SYSI_STRAT	  equ 40
 15645                                  SYSI_INTER	  equ 42
 15646                                  SYSI_NAME	  equ 44
 15647                                  SYSI_SPLICE	  equ 52
 15648                                  SYSI_IBMDOS_SIZE  equ 53
 15649                                  SYSI_IFS_DOSCALL@ equ 55
 15650                                  SYSI_IFS	  equ 59
 15651                                  SYSI_BUFFERS	  equ 63
 15652                                  SYSI_BOOT_DRIVE   equ 67
 15653                                  SYSI_DWMOVE	  equ 68
 15654                                  SYSI_EXT_MEM	  equ 69
 15655                                  
 15656                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15657                                  
 15658                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15659                                  
 15660                                  struc BUFFINF 	; BUFFINFO
 15661 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15662 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15663 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15664 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15665                                  
 15666 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15667                                  				; are in HMA
 15668 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15669                                  				;  used to read/write on disks
 15670 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15671 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15672 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15673 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15674 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15675 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15676 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15677 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15678 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15679                                  .size:
 15680                                  endstruc
 15681                                  
 15682                                  ; ----------------------------------------------------------------------
 15683                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15684                                  ; ----------------------------------------------------------------------
 15685                                  ; 22/03/2019 - Retro DOS v4.0
 15686                                  
 15687                                  ;**	CDS - Current Directory Structure
 15688                                  ;
 15689                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15690                                  ; network identifiers for each logical name.  The ID field is used dually,
 15691                                  ; both as net ID and for a cluster number for local devices. In the case
 15692                                  ; of local devices, the cluster number will be -1 if there is a potential
 15693                                  ; of the disk being changed or if the path must be recracked.
 15694                                  ;
 15695                                  ;	Some pathnames have special preambles, such as
 15696                                  ;
 15697                                  ;		\\machine\sharename\...
 15698                                  ;	For these pathnames we can't allow ".." processing to back us
 15699                                  ;	up into the special front part of the name.  The CURDIR_END field
 15700                                  ;	holds the address of the seperator character which marks
 15701                                  ;	the split between the special preamble and the regular
 15702                                  ;	path list; ".." processing isn't allowed to back us up past
 15703                                  ;	(i.e., before) CURDIR_END
 15704                                  ;	For the root, it points at the leading /. For net
 15705                                  ;	assignments it points at the end (nul) of the initial assignment:
 15706                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15707                                  ;	  ^		 ^		     ^
 15708                                  
 15709                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15710                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15711                                  
 15712                                  struc 		curdir_list
 15713                                  ; MSDOS 3.3
 15714 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15715 00000043 ????                    .cdir_flags	resw	1		; various flags
 15716 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15717 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15718 0000004D ????                    .cdir_usr_word	resw	1
 15719 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15720                                  ; MSDOS 6.0
 15721 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15722 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15723 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15724                                  .size:
 15725                                  endstruc
 15726                                  
 15727                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15728                                  						; ASM87 which doesn't allow
 15729                                  						; Size directive as a macro
 15730                                  						; argument
 15731                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15732                                  
 15733                                  ;**	Flag values for CURDIR_FLAGS
 15734                                  
 15735                                  ;Flag word masks
 15736                                  curdir_isnet	EQU	1000000000000000B
 15737                                  curdir_isifs	EQU	1000000000000000B
 15738                                  curdir_inuse	EQU	0100000000000000B
 15739                                  curdir_splice	EQU	0010000000000000B
 15740                                  curdir_local	EQU	0001000000000000B
 15741                                  
 15742                                  ; ----------------------------------------------------------------------
 15743                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15744                                  ; ----------------------------------------------------------------------
 15745                                  ; 25/03/2019 - Retro DOS v4.0
 15746                                  
 15747                                  ; 09/04/2024 - Retro DOS v4.0 (BugFix)
 15748                                  
 15749                                  ; system file table
 15750                                  
 15751                                  ;**	System File Table SuperStructure
 15752                                  ;
 15753                                  ;	The system file table entries are allocated in contiguous groups.
 15754                                  ;	There may be more than one such groups; the SF "superstructure"
 15755                                  ;	tracks the groups.
 15756                                  
 15757                                  struc	SF
 15758 00000000 ????????                .SFLink:	resd	1
 15759 00000004 ????                    .SFCount:	resw	1		; number of entries
 15760 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15761                                  .size:
 15762                                  endstruc
 15763                                  
 15764                                  ;**	System file table entry
 15765                                  ;
 15766                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15767                                  
 15768                                  struc	SF_ENTRY
 15769 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15770                                  					;   if FCB then ref count
 15771 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15772 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15773 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15774                                  					; Bit 15 = 1 if remote file
 15775                                  					;	 = 0 if local file or device
 15776                                  					; Bit 14 = 1 if date/time is not to be
 15777                                  					;   set from clock at CLOSE.  Set by
 15778                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15779                                  					;   other reseters of the dirty bit
 15780                                  					;   (WRITE)
 15781                                  					; Bit 13 = Pipe bit (reserved)
 15782                                  					;
 15783                                  					; Bits 0-7 (old FCB_devid bits)
 15784                                  					; If remote file or local file, bit
 15785                                  					; 6=0 if dirty Device ID number, bits
 15786                                  					; 0-5 if local file.
 15787                                  					; bit 7=0 for local file, bit 7
 15788                                  					;      =1 for local I/O device
 15789                                  					; If local I/O device, bit 6=0 if EOF (input)
 15790                                  					;		Bit 5=1 if Raw mode
 15791                                  					;		Bit 0=1 if console input device
 15792                                  					;		Bit 1=1 if console output device
 15793                                  					;		Bit 2=1 if null device
 15794                                  					;		Bit 3=1 if clock device
 15795 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15796                                  					; to device header if local device,
 15797                                  					; points to net device header if
 15798                                  					; remote
 15799 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15800                                  ;.sf_lstclus:	resw	1 ; *	
 15801 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15802 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15803 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15804 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15805                                  ;
 15806                                  ; Starting here, the next 7 bytes may be used by the file system to store an ID
 15807                                  ;
 15808 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15809 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 15810 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15811                                  ;
 15812                                  ; End of 7 bytes of file-system specific info.
 15813                                  ;
 15814 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15815                                  					; directory entry.  This is used by
 15816                                  					; close to detect file deleted and
 15817                                  					; disk changed errors.
 15818                                  ; SHARING INFO
 15819 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 15820 0000002F ????                    .sf_UID:	resw	1
 15821 00000031 ????                    .sf_PID:	resw	1
 15822 00000033 ????                    .sf_MFT:	resw	1
 15823 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15824 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15825                                  .size:
 15826                                  endstruc
 15827                                  
 15828                                  ; ----------------------------------------------------------------------
 15829                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15830                                  ; ----------------------------------------------------------------------
 15831                                  ; 11/06/2018 - Retro DOS v3.0
 15832                                  
 15833                                  ;Equates for COUNTRY INFORMATION.
 15834                                  SetCountryInfo		EQU	1	;country info
 15835                                  SetUcase		EQU	2	;uppercase table
 15836                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15837                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15838                                  SetFileList		EQU	5	;valid file character list
 15839                                  SetCollate		EQU	6	;collating sequence
 15840                                  SetDBCS 		EQU	7	;double byte character set
 15841                                  SetALL			EQU	-1	;all the entries
 15842                                  
 15843                                  ;DOS country and code page information table structure.
 15844                                  ;Internally, IBMDOS gives a pointer to this table.
 15845                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15846                                  ;this structure.
 15847                                  
 15848                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15849 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15850 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15851 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15852 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15853 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15854 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15855                                  
 15856 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15857 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15858                                  
 15859 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15860 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15861                                  
 15862 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15863 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15864                                  
 15865 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15866 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15867 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15868 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15869 00000067 ????                    .ccDFormat:		resw	1	;date format
 15870 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15871                                  					;5 byte of (currency symbol+0)
 15872 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15873 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15874 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15875 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15876 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15877 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15878 00000078 ??                      .ccTFormat:		resb	1	;time format
 15879 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15880 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15881 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15882                                  .size:
 15883                                  endstruc
 15884                                  
 15885                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15886                                  
 15887                                  ; ======================================================================
 15888                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15889                                  ; ======================================================================
 15890                                  ; 21/03/2019 - Retro DOS v4.0
 15891                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15892                                  
 15893                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15894                                  ; 21/10/2022
 15895                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15896                                  ; 22/10/2022
 15897                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15898                                  ; 09/12/2022
 15899                                  DOSBIOCODESEG equ IOSYSCODESEG
 15900                                  
 15901                                  ; Note: These offset addresses must be chanqed when the code 
 15902                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15903                                  
 15904                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15905                                  
 15906                                  ; 09/12/2022
 15907                                  %if 0
 15908                                  
 15909                                  ; 13/05/2019
 15910                                  
 15911                                  ;IsWin386         equ 08CFh
 15912                                  ;V86_Crit_SetFocus equ 08D0h
 15913                                  ; 21/10/2022
 15914                                  IsWin386          equ 08D0h
 15915                                  V86_Crit_SetFocus equ 08D1h 
 15916                                  
 15917                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15918                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15919                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15920                                  
 15921                                  ;SysinitPresent	  equ 08FCh
 15922                                  ; 21/10/2022
 15923                                  SysinitPresent	  equ 08FDh
 15924                                  
 15925                                  inHMA		  equ 000Dh
 15926                                  xms		  equ 000Eh
 15927                                  ;FreeHMAPtr	  equ 08F6h
 15928                                  ;multrk_flag	  equ 0533h
 15929                                  ;ec35_flag	  equ 0535h
 15930                                  ;EOT		  equ 012Eh
 15931                                  ; 21/10/2022
 15932                                  FreeHMAPtr	  equ 08F7h
 15933                                  multrk_flag	  equ 052Fh
 15934                                  ec35_flag	  equ 0531h
 15935                                  EOT		  equ 012Ch
 15936                                  
 15937                                  ;NextStack	  equ 08BFh
 15938                                  ;IT_StackLoc	  equ 08C5h
 15939                                  ;IT_StackSize	  equ 08C9h
 15940                                  ; 21/10/2022
 15941                                  NextStack	  equ 08C0h
 15942                                  IT_StackLoc	  equ 08C6h
 15943                                  IT_StackSize	  equ 08CAh
 15944                                  
 15945                                  ;MoveDOSIntoHMA	  equ 08F8h
 15946                                  ; 21/10/2022
 15947                                  MoveDOSIntoHMA	  equ 08F9h
 15948                                  
 15949                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15950                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15951                                  ; 21/10/2022
 15952                                  INT19SEM equ 0640h ; (iosys5.txt)
 15953                                  I19_LST  equ 0641h ; (iosys5.txt)
 15954                                  
 15955                                  %endif
 15956                                  
 15957                                  ; 09/12/2022
 15958                                  seg_reinit equ _seg_reinit
 15959                                  ec35_flag  equ ec35flag		
 15960                                  INT19SEM   equ int19sem
 15961                                  I19_LST    equ i19_lst
 15962                                  
 15963                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15964                                  INT19OLD08 equ I19_LST+6
 15965                                  INT19OLD09 equ I19_LST+11
 15966                                  INT19OLD0A equ I19_LST+16
 15967                                  INT19OLD0B equ I19_LST+21
 15968                                  INT19OLD0C equ I19_LST+26
 15969                                  INT19OLD0D equ I19_LST+31
 15970                                  INT19OLD0E equ I19_LST+36
 15971                                  INT19OLD70 equ I19_LST+41
 15972                                  INT19OLD72 equ I19_LST+46
 15973                                  INT19OLD73 equ I19_LST+51
 15974                                  INT19OLD74 equ I19_LST+56
 15975                                  INT19OLD76 equ I19_LST+61
 15976                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15977                                  
 15978                                  ; 09/12/2022
 15979                                  %if 0
 15980                                  
 15981                                  ;keyrd_func	equ 04E9h
 15982                                  ;keysts_func	equ 04EAh
 15983                                  ;t_switch	equ 04F6h
 15984                                  ; 21/10/2022
 15985                                  keyrd_func	equ 04E5h
 15986                                  keysts_func	equ 04E6h
 15987                                  t_switch	equ 04F2h
 15988                                  
 15989                                  ; 22/10/2022
 15990                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15991                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15992                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15993                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15994                                  
 15995                                  %endif
 15996                                  
 15997                                  ; 09/12/2022
 15998                                  BCODESTART	equ BIOSDATAWORD
 15999                                  RE_INIT		equ re_init
 16000                                  
 16001                                  ; ----------------------------------------------------------------------
 16002                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16003                                  ; ----------------------------------------------------------------------
 16004                                  ; 15/04/2019 - Retro DOS v4.0
 16005                                  
 16006                                  CONFIG_BEGIN        equ  '['
 16007                                  CONFIG_BREAK        equ  'C'
 16008                                  CONFIG_BUFFERS      equ  'B'
 16009                                  CONFIG_COMMENT      equ  'Y'
 16010                                  CONFIG_COUNTRY      equ  'Q'
 16011                                  CONFIG_DEVICE       equ  'D'
 16012                                  CONFIG_DEVICEHIGH   equ  'U'
 16013                                  CONFIG_DOS          equ  'H'
 16014                                  CONFIG_DRIVPARM     equ  'P'
 16015                                  CONFIG_FCBS         equ  'X'
 16016                                  CONFIG_FILES        equ  'F'
 16017                                  CONFIG_INCLUDE      equ  'J'
 16018                                  CONFIG_INSTALL      equ  'I'
 16019                                  CONFIG_INSTALLHIGH  equ  'W'
 16020                                  CONFIG_LASTDRIVE    equ  'L'
 16021                                  CONFIG_MENUCOLOR    equ  'R'
 16022                                  CONFIG_MENUDEFAULT  equ  'A'
 16023                                  CONFIG_MENUITEM     equ  'E'
 16024                                  CONFIG_MULTITRACK   equ  'M'
 16025                                  CONFIG_NUMLOCK      equ  'N'
 16026                                  CONFIG_REM          equ  '0'
 16027                                  CONFIG_SEMICOLON    equ  ';'
 16028                                  CONFIG_SET          equ  'V'
 16029                                  CONFIG_SHELL        equ  'S'
 16030                                  CONFIG_STACKS       equ  'K'
 16031                                  CONFIG_SUBMENU      equ  'O'
 16032                                  CONFIG_SWITCHES     equ  '1'
 16033                                  
 16034                                  CONFIG_UNKNOWN      equ  'Z'
 16035                                  
 16036                                  CONFIG_OPTION_QUERY equ 80h
 16037                                  
 16038                                  ; ----------------------------------------------------------------------
 16039                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16040                                  ; ----------------------------------------------------------------------
 16041                                  ; 21/03/2019 - Retro DOS v4.0
 16042                                  
 16043                                  true	equ	0FFFFh
 16044                                  false	equ	0
 16045                                  cr	equ	13
 16046                                  lf	equ	10
 16047                                  tab	equ	9
 16048                                  
 16049                                  multMULT	   equ	4Ah
 16050                                  multMULTGETHMAPTR  equ	1
 16051                                  multMULTALLOCHMA   equ	2
 16052                                  
 16053                                  ;NOEXEC    equ	FALSE
 16054                                  
 16055                                  stacksw    equ	true	;include switchable hardware stacks
 16056                                  mycds_size equ	88	;size of curdir_list. if it is not
 16057                                  			;the same, then will generate compile error.
 16058                                  
 16059                                  entrysize   equ     8
 16060                                  
 16061                                  mincount    equ     8
 16062                                  defaultcount equ    9
 16063                                  maxcount    equ     64
 16064                                  
 16065                                  minsize     equ     32
 16066                                  defaultsize equ     128
 16067                                  maxsize     equ     512
 16068                                  
 16069                                  ;%define allocbyte  byte [es:bp+0]
 16070                                  ;%define intlevel   byte [es:bp+1]
 16071                                  ;%define savedsp    word [es:bp+2]
 16072                                  ;%define savedss    word [es:bp+4]
 16073                                  ;%define newsp	    word [es:bp+6]
 16074                                  
 16075                                  allocbyte   equ     0
 16076                                  intlevel    equ     1
 16077                                  savedsp     equ     2
 16078                                  savedss     equ     4
 16079                                  newsp       equ     6
 16080                                  
 16081                                  free	    equ     0
 16082                                  allocated   equ     1
 16083                                  overflowed  equ     2
 16084                                  clobbered   equ     3
 16085                                  
 16086                                  ;---------------------------------------
 16087                                  ; external variable defined in ibmbio module for multi-track
 16088                                  
 16089                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16090                                  			  ; it on after handling config.sys file as a
 16091                                  			  ; default value,if multrk_flag = multrk_off1.
 16092                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16093                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16094                                  
 16095                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16096                                  
 16097                                  SYSINIT$:
 16098                                  	;IF	STACKSW 
 16099                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16100                                  	; include STKMES.INC	;Fatal stack error message
 16101                                  	;   public Endstackcode
 16102                                  ;Endstackcode	label byte
 16103                                  	;ENDIF
 16104                                  
 16105                                  ; 05/07/2018
 16106                                  ; ----------------------------------------------------------------------
 16107                                  ; 04/06/2018 - Retro DOS v3.0
 16108                                  
 16109                                  ; ----------------------------------------------------------------------
 16110                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16111                                  ; ----------------------------------------------------------------------
 16112                                  
 16113                                  ;	MSStack.inc
 16114                                  ;
 16115                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16116                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16117                                  ;	a standard header structure.
 16118                                  ;	Fyi, the following shows the relations between
 16119                                  ;	the interrupt vector and interrupt level.
 16120                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16121                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16122                                  ;	MSSTACK module modifies the following interrupt vectors
 16123                                  ;	to meet the standard Interrupt Sharing standard;
 16124                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16125                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16126                                  ;	should be initialized to indicat whether this interrupt handler is
 16127                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16128                                  ;	program header is initialized in STKINIT.INC module.
 16129                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16130                                  ;
 16131                                  
 16132                                  ;  User specifies the number of stack elements - default = 9
 16133                                  ;						 minimum = 8
 16134                                  ;						 maximum = 64
 16135                                  ;
 16136                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16137                                  ;
 16138                                  ;  Picks a stack from pool of stacks and switches to it
 16139                                  ;
 16140                                  ;  Calls the previously saved interrupt vector after pushing flags
 16141                                  ;
 16142                                  ;  On return, returns the stack to the stack pool
 16143                                  ;
 16144                                  
 16145                                  ; This is a modification of STACKS:
 16146                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16147                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16148                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16149                                  ;    . Allows system to work if the only stack that got too big was the most
 16150                                  ;      deeply nested one
 16151                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16152                                  ; 4. Does not intercept any interupts on a PCjr.
 16153                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16154                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16155                                  
 16156                                  		;EVEN
 16157                                  ;align 2
 16158                                  		; 21/10/2022
 16159                                  
 16160 00000000 0000                    		dw	0	; spare field but leave these in order
 16161 00000002 0000                    stackcount:	dw	0
 16162 00000004 0000                    stackat: 	dw	0
 16163 00000006 0000                    stacksize:	dw	0
 16164 00000008 0000                    stacks:		dw	0
 16165 0000000A 0000                    		dw	0
 16166                                  
 16167 0000000C [0800]                  firstentry:	dw	stacks
 16168 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16169 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16170                                  
 16171                                  ;***********************************************************************
 16172                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16173                                  
 16174                                  ; ----------------------------------------------------------------------
 16175                                  
 16176 00000012 00000000                old02:	dd	0
 16177                                  
 16178                                  int02:
 16179                                  
 16180                                  ; *********************************************************************
 16181                                  ;
 16182                                  ; this is special support for the pc convertible / nmi handler
 16183                                  ;
 16184                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16185                                  ;	caused by using the "out" instructions to certain ports. when this
 16186                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16187                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16188                                  ;	includes other type of interrupts (hardware and software), and
 16189                                  ;	also includes other type of nmi's. when any nmi has occured,
 16190                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16191                                  ;	the software takes specific steps to allow further interrupting.
 16192                                  ;
 16193                                  ;	for pc convertible, the situation where the nmi is generated by the
 16194                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16195                                  ;	otherwords, it is actually a "restartable exception". in this
 16196                                  ;	case, the software handler must be able to get to the stack in
 16197                                  ;	order to figure out what instruction caused the problem, where
 16198                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16199                                  ;	we will not switch stacks in this situation. this situation is
 16200                                  ;	detected by interrogating port 62h, and checking for a bit value
 16201                                  ;	of 80h. if set, *****do not switch stacks*****.
 16202                                  ;
 16203                                  ; *********************************************************************
 16204                                  
 16205 00000016 50                      	push	ax
 16206 00000017 06                      	push	es
 16207 00000018 B800F0                  	mov	ax,0F000h
 16208 0000001B 8EC0                    	mov	es,ax
 16209                                  	; 02/11/2022
 16210 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16211 00000023 07                      	pop	es
 16212 00000024 750C                    	jne	short normal02
 16213                                  
 16214 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16215                                  				; 0-3: values of DIP switches
 16216                                  				; 5: 1=Timer 2 channel out
 16217                                  				; 6: 1=I/O channel check
 16218                                  				; 7: 1=RAM parity check error occurred.
 16219 00000028 A880                    	test	al,80h
 16220 0000002A 7406                    	jz	short normal02
 16221                                  special02:
 16222 0000002C 58                      	pop	ax
 16223 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16224                                  normal02:
 16225 00000032 58                      	pop	ax
 16226 00000033 E81101                  	call	do_int_stacks
 16227 00000036 [1200]                  	dw	old02
 16228                                  
 16229                                  ; ----------------------------------------------------------------------
 16230                                  
 16231 00000038 00000000                old08:	dd	0
 16232                                  
 16233                                  int08:
 16234 0000003C E80801                  	call	do_int_stacks
 16235 0000003F [3800]                  	dw	old08
 16236                                  
 16237                                  ; ----------------------------------------------------------------------
 16238                                  
 16239 00000041 00000000                old09:	dd	0
 16240                                  
 16241                                  int09:
 16242                                  
 16243                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16244                                  ; as its first instruction for compatibility reasons
 16245                                  
 16246 00000045 EB02                    	jmp	short keyboard_lbl
 16247 00000047 90                      	nop
 16248 00000048 00                      	db	0
 16249                                  
 16250                                  keyboard_lbl:
 16251 00000049 E8FB00                  	call	do_int_stacks
 16252 0000004C [4100]                  	dw	old09
 16253                                  
 16254                                  ; ----------------------------------------------------------------------
 16255                                  
 16256 0000004E 00000000                old70:	dd	0
 16257                                  
 16258                                  int70:
 16259 00000052 E8F200                  	call	do_int_stacks
 16260 00000055 [4E00]                  	dw	old70
 16261                                  
 16262                                  ; ----------------------------------------------------------------------
 16263                                  
 16264                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16265                                  ;public	int&a
 16266                                  ;public	old&a
 16267                                  ;public	firstflag&a
 16268                                  ;int&a	proc	far
 16269                                  ;	jmp	short entry_int&a&_stk
 16270                                  ;old&a	dd	  0		;forward pointer
 16271                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16272                                  ;firstflag&a db   0		;the firstly hooked.
 16273                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16274                                  ;	db	7 dup (0)	;reserved for future.
 16275                                  ;entry_int&a&_stk:
 16276                                  ;	call	do_int_stacks
 16277                                  ;	dw	old&a
 16278                                  ;intret_&a:
 16279                                  ;	iret
 16280                                  ;int&a	endp
 16281                                  ;	endm
 16282                                  
 16283                                  ; ----------------------------------------------------------------------
 16284                                  
 16285                                  int0A:
 16286 00000057 EB10                    	jmp	short entry_int0A_stk
 16287 00000059 00000000                old0A:	dd	0	
 16288 0000005D 4B42                    	dw	424Bh
 16289                                  firstflag0A:
 16290 0000005F 00                      	db	0
 16291 00000060 EB0C                    	jmp	short intret_0A
 16292 00000062 00<rep 7h>              	times	7 db 0
 16293                                  
 16294                                  entry_int0A_stk:
 16295 00000069 E8DB00                  	call	do_int_stacks
 16296 0000006C [5900]                  	dw	old0A
 16297                                  intret_0A:
 16298 0000006E CF                      	iret
 16299                                  
 16300                                  ; ----------------------------------------------------------------------
 16301                                  
 16302                                  int0B:
 16303 0000006F EB10                    	jmp	short entry_int0B_stk
 16304 00000071 00000000                old0B:	dd	0	
 16305 00000075 4B42                    	dw	424Bh
 16306                                  firstflag0B:
 16307 00000077 00                      	db	0
 16308 00000078 EB0C                    	jmp	short intret_0B
 16309 0000007A 00<rep 7h>              	times	7 db 0
 16310                                  
 16311                                  entry_int0B_stk:
 16312 00000081 E8C300                  	call	do_int_stacks
 16313 00000084 [7100]                  	dw	old0B
 16314                                  intret_0B:
 16315 00000086 CF                      	iret
 16316                                  
 16317                                  ; ----------------------------------------------------------------------
 16318                                  
 16319                                  int0C:
 16320 00000087 EB10                    	jmp	short entry_int0C_stk
 16321 00000089 00000000                old0C:	dd	0	
 16322 0000008D 4B42                    	dw	424Bh
 16323                                  firstflag0C:
 16324 0000008F 00                      	db	0
 16325 00000090 EB0C                    	jmp	short intret_0C
 16326 00000092 00<rep 7h>              	times	7 db 0
 16327                                  
 16328                                  entry_int0C_stk:
 16329 00000099 E8AB00                  	call	do_int_stacks
 16330 0000009C [8900]                  	dw	old0C
 16331                                  intret_0C:
 16332 0000009E CF                      	iret
 16333                                  
 16334                                  ; ----------------------------------------------------------------------
 16335                                  
 16336                                  int0D:
 16337 0000009F EB10                    	jmp	short entry_int0D_stk
 16338 000000A1 00000000                old0D:	dd	0	
 16339 000000A5 4B42                    	dw	424Bh
 16340                                  firstflag0D:
 16341 000000A7 00                      	db	0
 16342 000000A8 EB0C                    	jmp	short intret_0D
 16343 000000AA 00<rep 7h>              	times	7 db 0
 16344                                  
 16345                                  entry_int0D_stk:
 16346 000000B1 E89300                  	call	do_int_stacks
 16347 000000B4 [A100]                  	dw	old0D
 16348                                  intret_0D:
 16349 000000B6 CF                      	iret
 16350                                  
 16351                                  ; ----------------------------------------------------------------------
 16352                                  
 16353                                  int0E:
 16354 000000B7 EB10                    	jmp	short entry_int0E_stk
 16355 000000B9 00000000                old0E:	dd	0	
 16356 000000BD 4B42                    	dw	424Bh
 16357                                  firstflag0E:
 16358 000000BF 00                      	db	0
 16359 000000C0 EB0C                    	jmp	short intret_0E
 16360 000000C2 00<rep 7h>              	times	7 db 0
 16361                                  
 16362                                  entry_int0E_stk:
 16363 000000C9 E87B00                  	call	do_int_stacks
 16364 000000CC [B900]                  	dw	old0E
 16365                                  intret_0E:
 16366 000000CE CF                      	iret
 16367                                  
 16368                                  ; ----------------------------------------------------------------------
 16369                                  
 16370                                  int72:
 16371 000000CF EB10                    	jmp	short entry_int72_stk
 16372 000000D1 00000000                old72:	dd	0	
 16373 000000D5 4B42                    	dw	424Bh
 16374                                  firstflag72:
 16375 000000D7 00                      	db	0
 16376 000000D8 EB0C                    	jmp	short intret_72
 16377 000000DA 00<rep 7h>              	times	7 db 0
 16378                                  
 16379                                  entry_int72_stk:
 16380 000000E1 E86300                  	call	do_int_stacks
 16381 000000E4 [D100]                  	dw	old72
 16382                                  intret_72:
 16383 000000E6 CF                      	iret
 16384                                  
 16385                                  ; ----------------------------------------------------------------------
 16386                                  
 16387                                  int73:
 16388 000000E7 EB10                    	jmp	short entry_int73_stk
 16389 000000E9 00000000                old73:	dd	0	
 16390 000000ED 4B42                    	dw	424Bh
 16391                                  firstflag73:
 16392 000000EF 00                      	db	0
 16393 000000F0 EB0C                    	jmp	short intret_73
 16394 000000F2 00<rep 7h>              	times	7 db 0
 16395                                  
 16396                                  entry_int73_stk:
 16397 000000F9 E84B00                  	call	do_int_stacks
 16398 000000FC [E900]                  	dw	old73
 16399                                  intret_73:
 16400 000000FE CF                      	iret
 16401                                  
 16402                                  ; ----------------------------------------------------------------------
 16403                                  
 16404                                  int74:
 16405 000000FF EB10                    	jmp	short entry_int74_stk
 16406 00000101 00000000                old74:	dd	0	
 16407 00000105 4B42                    	dw	424Bh
 16408                                  firstflag74:
 16409 00000107 00                      	db	0
 16410 00000108 EB0C                    	jmp	short intret_74
 16411 0000010A 00<rep 7h>              	times	7 db 0
 16412                                  
 16413                                  entry_int74_stk:
 16414 00000111 E83300                  	call	do_int_stacks
 16415 00000114 [0101]                  	dw	old74
 16416                                  intret_74:
 16417 00000116 CF                      	iret
 16418                                  
 16419                                  ; ----------------------------------------------------------------------
 16420                                  
 16421                                  int76:
 16422 00000117 EB10                    	jmp	short entry_int76_stk
 16423 00000119 00000000                old76:	dd	0	
 16424 0000011D 4B42                    	dw	424Bh
 16425                                  firstflag76:
 16426 0000011F 00                      	db	0
 16427 00000120 EB0C                    	jmp	short intret_76
 16428 00000122 00<rep 7h>              	times	7 db 0
 16429                                  
 16430                                  entry_int76_stk:
 16431 00000129 E81B00                  	call	do_int_stacks
 16432 0000012C [1901]                  	dw	old76
 16433                                  intret_76:
 16434 0000012E CF                      	iret
 16435                                  
 16436                                  ; ----------------------------------------------------------------------
 16437                                  
 16438                                  int77:
 16439 0000012F EB10                    	jmp	short entry_int77_stk
 16440 00000131 00000000                old77:	dd	0	
 16441 00000135 4B42                    	dw	424Bh
 16442                                  firstflag77:
 16443 00000137 00                      	db	0
 16444 00000138 EB0C                    	jmp	short intret_77
 16445 0000013A 00<rep 7h>              	times	7 db 0
 16446                                  
 16447                                  entry_int77_stk:
 16448 00000141 E80300                  	call	do_int_stacks
 16449 00000144 [3101]                  	dw	old77
 16450                                  intret_77:
 16451 00000146 CF                      	iret
 16452                                  
 16453                                  ; ----------------------------------------------------------------------
 16454                                  
 16455                                  ;********************************************************************
 16456                                  ;common routines
 16457                                  ;********************************************************************
 16458                                  
 16459                                  ; do interrupt stack switching. the fake return address holds
 16460                                  ; a pointer to the far-pointer of the actual interrupt
 16461                                  ; service routine
 16462                                  
 16463                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16464                                  ; 21/03/2019 - Retro DOS v4.0
 16465                                  
 16466                                  ;allocbyte   equ 0
 16467                                  ;intlevel    equ 1
 16468                                  ;savedsp     equ 2
 16469                                  ;savedss     equ 4
 16470                                  ;newsp       equ 6
 16471                                  
 16472                                  do_int_stacks:
 16473 00000147 50                      	push	ax
 16474 00000148 55                      	push	bp
 16475 00000149 06                      	push	es
 16476 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16477 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16478 00000154 B001                    	mov	al,allocated ; 1
 16479                                  	; 21/10/2022
 16480                                  	;xchg	[es:bp+allocbyte],al 
 16481                                  	; 11/12/2022
 16482 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16483 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16484 0000015C 754F                    	jne	short notfree02
 16485                                  
 16486 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16487                                  
 16488                                  found02:
 16489 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16490 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16491                                  
 16492 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16493                                  
 16494 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16495                                  	; 21/10/2022
 16496                                  	;mov	bp,[es:bp+6]
 16497                                  	; 11/12/2022
 16498                                  	;cmp	[es:bp+0],ax	
 16499 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16500 00000176 7542                    	jne	short foundbad02
 16501                                  
 16502                                  	;mov	ax,es			; point ss,sp to the new stack
 16503                                  	;mov	es,bp
 16504                                  	;mov	bp,sp
 16505                                  	;mov	bp,[bp+6]
 16506                                  	;mov	ss,ax
 16507                                  	;mov	sp,es
 16508                                  	;mov	es,ax
 16509                                  	;mov	bp,[cs:bp]
 16510                                  
 16511                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16512 00000178 55                      	push    bp
 16513 00000179 89E5                    	mov     bp,sp
 16514 0000017B 8B4608                  	mov     ax,[bp+8]
 16515 0000017E 5D                      	pop     bp
 16516 0000017F 06                      	push    es
 16517 00000180 17                      	pop     ss
 16518 00000181 89EC                    	mov     sp,bp
 16519 00000183 89C5                    	mov     bp,ax
 16520                                  	; 11/12/2022
 16521                                  	;mov	bp,[cs:bp+0]	
 16522 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16523                                  
 16524 00000189 9C                      	pushf				; go execute the real interrupt handler
 16525                                  	; 11/12/2022
 16526 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16527                                  	; 21/10/2022
 16528                                  	;call	far [cs:bp+0]
 16529                                  
 16530 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16531                                  	; 11/12/2022
 16532 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16533                                  	; 21/10/2022
 16534                                  	;mov	bp,[es:bp+0]
 16535 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16536 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16537                                  
 16538                                  	; 11/12/2022
 16539                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16540                                  	; 21/10/2022
 16541 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16542 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16543                                  
 16544 000001A6 07                      	pop	es
 16545 000001A7 5D                      	pop	bp			; saved on entry
 16546 000001A8 58                      	pop	ax			; saved on entry
 16547 000001A9 83C402                  	add	sp,2
 16548 000001AC CF                      	iret				; done with this interrupt
 16549                                  
 16550                                  notfree02:
 16551 000001AD 3C01                    	cmp	al,allocated		; error flag
 16552 000001AF 7404                    	je	short findnext02	;  no, continue
 16553                                  	; 11/12/2022
 16554                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16555                                  	; 21/10/2022
 16556 000001B1 26864600                	xchg	[es:bp],al
 16557                                  
 16558                                  findnext02:
 16559 000001B5 E81200                  	call	longpath
 16560 000001B8 EBAA                    	jmp	short found02
 16561                                  
 16562                                  foundbad02:
 16563 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16564 000001BF 72F4                    	jc	short findnext02
 16565 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16566                                  	; 11/12/2022
 16567                                  	;mov	byte [es:bp+allocbyte],clobbered
 16568                                  	; 21/10/2022
 16569 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16570 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16571                                  
 16572                                  ; ----------------------------------------------------------------------
 16573                                  
 16574                                  ; Common routines
 16575                                  
 16576                                  longpath:
 16577                                  	; 21/03/2019
 16578 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16579                                  lploopp:
 16580                                  	; 11/12/2022
 16581                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16582                                  	; 21/10/2022
 16583 000001CF 26807E0000              	cmp	byte [es:bp],free
 16584 000001D4 7512                    	jne	short inuse		;  no, try next one
 16585                                  
 16586 000001D6 B001                    	mov	al,allocated
 16587                                  	; 11/12/2022
 16588                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16589                                  	; 21/10/2022
 16590 000001D8 26864600                	xchg	[es:bp],al
 16591 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16592 000001DE 7414                    	je	short found		;  yes, go use it
 16593                                  
 16594 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16595 000001E2 7404                    	je	short inuse		;  no, check the next one
 16596                                  
 16597                                  	; 11/12/2022
 16598                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16599                                  	; 21/10/2022
 16600 000001E4 26884600                	mov	[es:bp],al
 16601                                  inuse:
 16602 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16603 000001ED 7406                    	je	short fatal
 16604 000001EF 83ED08                  	sub	bp,entrysize
 16605 000001F2 EBDB                    	jmp	short lploopp
 16606                                  found:
 16607 000001F4 C3                      	retn
 16608                                  fatal:
 16609 000001F5 1E                      	push	ds
 16610 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16611 000001F9 8ED8                    	mov	ds,ax
 16612 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16613 00000200 1F                      	pop	ds
 16614 00000201 7504                    	jne	short skip_nmis
 16615                                  
 16616 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16617 00000205 E672                    	out	72h,al
 16618                                  
 16619                                  skip_nmis:
 16620 00000207 FA                      	cli				; disable and mask
 16621 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16622 0000020A E621                    	out	021h,al
 16623 0000020C E6A1                    	out	0A1h,al
 16624                                  
 16625 0000020E 8CCE                    	mov	si,cs
 16626 00000210 8EDE                    	mov	ds,si
 16627 00000212 BE[3902]                	mov	si,fatal_msg
 16628                                  ;SR;
 16629                                  ;   We set all foci to this VM to issue the stack failure message
 16630                                  ;
 16631 00000215 50                      	push	ax
 16632 00000216 1E                      	push	ds
 16633                                  	;;mov	ax,Bios_Data ; 0070h
 16634                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16635                                  	; 21/10/2022
 16636 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16637 0000021A 8ED8                    	mov	ds,ax
 16638                                  
 16639                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16640 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16641 00000221 1F                      	pop	ds
 16642 00000222 58                      	pop	ax
 16643 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16644                                  
 16645                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16646                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16647                                  	; 21/10/2022
 16648 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16649                                  ;
 16650                                  ;SR; We do not bother about the returned status of this call. 
 16651                                  ;
 16652                                  fatal_loop:
 16653 0000022A AC                      	lodsb
 16654 0000022B 3C24                    	cmp	al,'$'
 16655 0000022D 7408                    	je	short fatal_done
 16656                                  
 16657 0000022F B307                    	mov	bl,7
 16658 00000231 B40E                    	mov	ah,14
 16659 00000233 CD10                    	int	10h			; whoops, this enables ints
 16660 00000235 EBF3                    	jmp	short fatal_loop
 16661                                  
 16662                                  fatal_done:
 16663 00000237 EBFE                    	jmp	short fatal_done
 16664                                  
 16665                                  
 16666                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16667                                  ; ----------------------------------------------------------------------
 16668                                  ;	include msbio.cl5		; fatal stack error message
 16669                                  
 16670                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16671                                  
 16672                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16673                                  ; ----------------------------------------------------------------------
 16674                                  ; 04/06/2018 - Retro DOS v3.0
 16675                                  
 16676                                  fatal_msg:
 16677 00000239 0D0A                    	db	0Dh,0Ah
 16678 0000023B 070D0A                  	db	7,0Dh,0Ah
 16679 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16679 00000247 737461636B206F7665-
 16679 00000250 72666C6F770D0A     
 16680 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16680 00000260 6C7465640D0A24     
 16681                                  
 16682                                  endstackcode:
 16683                                  
 16684                                  ; ----------------------------------------------------------------------
 16685                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16686                                  ; ----------------------------------------------------------------------
 16687                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16688                                  
 16689                                  ; 22/03/2019 - Retro DOS v4.0
 16690                                  
 16691                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16692                                  
 16693                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16694                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16695                                  
 16696                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16697                                  ; ----------------------------------------------------------------------
 16698                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16699                                  
 16700                                  SYSINIT:	
 16701 00000267 E91C02                          JMP	GOINIT
 16702                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16703                                  
 16704                                  ; ----------------------------------------------------------------------
 16705                                  
 16706                                  struc DDHighInfo
 16707 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16708 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16709 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16710                                  endstruc
 16711                                  
 16712                                  ; 22/03/2019 - Retro DOS v4.0
 16713                                  
 16714 0000026A 00                      runhigh: db	0
 16715                                  
 16716                                  ; 02/11/2022
 16717                                  ;align 4
 16718                                  
 16719                                  DOSINFO: 
 16720 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16721                                  ;MSDOS:
 16722                                  dos_temp_location: ; dword ; MSDOS 6.0
 16723                                  dosinit:		; MSDOS 6.0
 16724 0000026F 0000                    	dw	0
 16725                                  
 16726                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16727                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16728                                  ;	dw	0
 16729                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16730                                  
 16731                                  CURRENT_DOS_LOCATION:
 16732 00000271 0000                    	dw	0
 16733                                  
 16734                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16735                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16736                                  
 16737                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16738                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16739                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16740                                  
 16741                                  DEVICE_LIST:
 16742 00000273 00000000                	dd	0
 16743                                  
 16744                                  ; 04/06/2018 - Retro DOS v3.0
 16745                                  ; 28/03/2018
 16746                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16747                                  ;
 16748                                  sysi_country:	
 16749 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16750                                  
 16751                                  ; MSDOS 6.0
 16752 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16753                                  
 16754 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16755 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16756                                  
 16757 00000283 0000                    def_php:	dw	0
 16758                                  
 16759                                  ; M022--
 16760                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16761                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16762                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16763                                  ;  the new home.
 16764                                  
 16765                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16766                                  ; 21/10/2022
 16767                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16768                                  
 16769                                  ; 22/10/2022
 16770                                  seg_reinit_ptr:	; label dword
 16771 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16772                                  temp_bcode_seg:
 16773                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16774                                  		; 22/10/2022
 16775 00000287 9F02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16776                                  
 16777                                  fake_floppy_drv:
 16778 00000289 00                      		db	0	; set to 1 if this machine
 16779                                  				; does not have any floppies!!!
 16780                                  
 16781                                  ; Internal Stack Parameters
 16782                                  
 16783 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16784 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16785 0000028E 00000000                stack_addr:	dd	0	
 16786                                  
 16787                                  ; 05/06/2018 - Retro DOS v3.0
 16788                                  
 16789                                  ; various default values
 16790                                  
 16791 00000292 0100                    MEMORY_SIZE:	dw	1
 16792                                  
 16793                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16794                                  
 16795 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16796 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16797 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16798 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16799 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16800                                  
 16801 0000029D 08                      FILES:	db	8	; enough files for pipe
 16802 0000029E 04                      FCBS:	db	4	; performance for recycling
 16803 0000029F 00                      KEEP:	db	0	; keep original set
 16804 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16805                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16806                                  ;CONFBOT: dw	0
 16807                                  ;ALLOCLIM: dw	0
 16808                                  CONFBOT: ; 02/11/2022
 16809 000002A1 0000                    top_of_cdss: dw 0
 16810                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16811 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16812                                  
 16813 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16814                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16815                                  ; (SYSINIT:02A9h)
 16816                                  command_line:
 16817 000002A9 0200                    	db	2,0
 16818 000002AB 50                      	db	'P'
 16819 000002AC 00                      	db	0
 16820 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16821                                  ; (SYSINIT:0329h)
 16822 00000329 00                      ZERO:	db	0
 16823 0000032A 00                      sepchr:	db	0
 16824 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16825 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16826 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16827                                  
 16828 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16829 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16830                                  
 16831 00000339 0000                    buf_prev_off:	dw	0
 16832                                  
 16833                                          ;IF      NOT NOEXEC
 16834                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16835                                          ;ENDIF
 16836                                  
 16837                                  ; 01/05/2018
 16838                                  COMEXE:
 16839 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16840 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16841 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16842 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16843 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16844 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16845 00000347 0000                    		dw	0
 16846                                  
 16847                                  ; variables for install= command.
 16848                                  
 16849 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16850                                  					;  indicating the pass number
 16851                                  					; 0 - do scan for DOS=HIGH/LOW
 16852                                  					; 1 - load device drivers
 16853                                  					; 2 - was to load IFS
 16854                                  					;      now it is unused
 16855                                  					; 3 - do install=
 16856                                  					; >3 - nop
 16857 0000034A 0000                    install_flag:	dw	0
 16858                                  
 16859                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16860                                  has_installed	equ	00000010b	; sysinit_base installed.
 16861                                  
 16862 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16863 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16864 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16865 00000356 0000                    checksum:	dw	0		; used by sum_up
 16866                                  
 16867 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16868 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16869 0000036D 20                      ldexec_start:	db	' '
 16870 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16871                                  
 16872                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16873                                  
 16874                                  instexe:
 16875 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16876 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16877 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16878 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16879 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16880 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16881 000003CA 0000                    		dw	0
 16882                                  
 16883                                  ; variables for comment=
 16884                                  
 16885 000003CC 00                      com_level:	db	0		; level of " " in command line
 16886 000003CD 00                      cmmt:		db	0		; length of comment string token
 16887 000003CE 00                      cmmt1:		db	0		; token
 16888 000003CF 00                      cmmt2:		db	0		; token
 16889 000003D0 00                      cmd_indicator:	db	0
 16890 000003D1 00                      donotshownum:	db	0
 16891                                  
 16892 000003D2 0000                    count:		dw	0
 16893 000003D4 0000                    org_count:	dw	0
 16894 000003D6 0000                    chrptr:		dw	0
 16895 000003D8 0000                    cntryfilehandle: dw	0
 16896 000003DA 0000                    old_area:	dw	0
 16897 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16898                                  
 16899                                  bucketptr: ; label dword
 16900                                  bufptr:	   ; label dword		; leave this stuff in order!
 16901 000003DE 0000                    memlo:	dw	0
 16902                                  prmblk:	   ; label word
 16903 000003E0 0000                    memhi:	dw	0
 16904 000003E2 0000                    ldoff:	dw	0
 16905 000003E4 0000                    area:	dw	0
 16906                                  
 16907                                  ; Following is the request packet used to call INIT routines for 
 16908                                  ; all device drivers. Some fields may be accessed individually in
 16909                                  ; the code, and hence have individual labels, but they should not
 16910                                  ; be separated.
 16911                                  
 16912 000003E6 18                      packet:	db	24			; was 22
 16913 000003E7 00                      	db	0
 16914 000003E8 00                      	db	0			; initialize code
 16915 000003E9 0000                    	dw	0
 16916 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16917                                  
 16918 000003F3 00                      unitcount:	db	0
 16919 000003F4 00000000                break_addr:	dd	0
 16920 000003F8 00000000                bpb_addr:	dd	0
 16921                                  drivenumber:	; 22/10/2022
 16922 000003FC 00                      devdrivenum:	db	0 
 16923 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16924                                  
 16925                                  ; end of request packet
 16926                                  
 16927                                  ;drivenumber:	db	0  ; 22/03/2019
 16928                                  
 16929                                  toomanydrivesflag:
 16930 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16931                                  align 2
 16932                                  
 16933                                  BCodeSeg:	; 21/10/2022
 16934 00000400 9F02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16935                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16936                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16937                                  
 16938                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16939                                  ;; 19/04/2019
 16940                                  ;_timer_lw_:
 16941                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16942                                  	
 16943                                  ;SR;
 16944                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16945                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16946                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16947                                  ;is passed to DOS as part of the DOSINIT call.
 16948                                  ;
 16949                                  
 16950                                  BiosComBlock:
 16951                                  	;dd	Bios_Data:SysinitPresent 
 16952                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16953 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16954                                  	;dw	KERNEL_SEGMENT ; 0070h
 16955                                  	; 21/10/2022
 16956 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16957                                  
 16958                                  ;align 2
 16959                                  
 16960                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16961                                  tempstack:	
 16962 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16963                                  
 16964                                  ; ----------------------------------------------------------------------------
 16965                                  
 16966                                  	; 22/10/2022 - Retro DOS v4.0
 16967                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16968                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16969                                  	; 12/12/2022
 16970                                  	; 22/03/2019 - Retro DOS v4.0
 16971                                  	; 06/07/2018
 16972                                  	; 04/06/2018 - Retro DOS v3.0
 16973                                  ; before doing anything else, let's set the model byte
 16974 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16975 00000488 CD15                    	int	15h			; *
 16976 0000048A 7217                    	jc	short no_rom_config
 16977                                  
 16978 0000048C 80FC00                  	cmp	ah,0			; double check
 16979 0000048F 7512                    	jne	short no_rom_config
 16980 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16981 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16982 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16983 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16984                                  	;jmp	short SYSIN
 16985                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16986 000004A1 EB2D                    	jmp	short move_myself
 16987                                  
 16988                                  no_rom_config:				; Old ROM
 16989 000004A3 B800F0                  	mov	ax,0F000h
 16990 000004A6 8ED8                    	mov	ds,ax
 16991 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16992 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16993                                  
 16994                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16995                                  ; execute the equipment determination interrupt and then
 16996                                  ; check the returned value to see if we have any floppy drives
 16997                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16998                                  ; see the at tech ref bios listings for help on the equipment
 16999                                  ; flag interrupt (11h)	
 17000                                  
 17001                                  	; 22/10/2022
 17002                                  check_for_fake_floppy:			; entry point for rom_config above
 17003 000004AF CD11                    	int	11h			; check equipment flag
 17004                                  
 17005                                  	; 12/12/2022
 17006 000004B1 A801                    	test	al,1		
 17007                                  	;test	ax,1			; have any floppies?
 17008 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 17009                                  
 17010                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17011                                  ; whether it is an old ROM BIOS or a new one
 17012                                  ;
 17013                                  ; WARNING !!!
 17014                                  ;
 17015                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17016                                  ; here will require an equivalent modification in MSINIT.ASM also
 17017                                  
 17018 000004B5 06                      	push	es
 17019                                  
 17020 000004B6 30C9                    	xor	cl,cl	
 17021 000004B8 B408                    	mov	ah,8			; get disk parameters
 17022 000004BA B200                    	mov	dl,0			; of drive 0
 17023 000004BC CD13                    	int	13h
 17024                                  
 17025 000004BE 07                      	pop	es
 17026                                  
 17027 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 17028                                  					;  ROM BIOS lied
 17029 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 17030 000004C4 740A                    	je	short move_myself
 17031                                  
 17032 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17033 000004C8 7506                    	jnz	short move_myself
 17034                                  
 17035 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17036                                  
 17037                                  move_myself:
 17038 000004D0 FC                      	cld				; set up move
 17039 000004D1 31F6                    	xor	si,si
 17040 000004D3 89F7                    	mov	di,si
 17041                                  
 17042                                  	; 12/12/2022
 17043 000004D5 0E                      	push	cs
 17044 000004D6 1F                      	pop	ds
 17045                                  
 17046                                  	;mov	cx,[cs:MEMORY_SIZE]
 17047 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17048                                  
 17049                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17050                                  ;;;	if	msver
 17051                                  ;	cmp	cx,1		; 1 means do scan
 17052                                  ;	jnz	short noscan
 17053                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17054                                  ;	xor	bx,bx
 17055                                  ;
 17056                                  ;memscan:inc	cx
 17057                                  ;	jz	setend
 17058                                  ;	mov	ds,cx
 17059                                  ;	mov	al,[bx]
 17060                                  ;	not	al
 17061                                  ;	mov	[bx],al
 17062                                  ;	cmp	al,[bx]
 17063                                  ;	not	al
 17064                                  ;	mov	[bx],al
 17065                                  ;	jz	short memscan
 17066                                  ;setend:
 17067                                  ;	mov	cs:[memory_size],cx
 17068                                  ;;;	endif
 17069                                  
 17070                                  ;noscan: 				; cx is mem size in para
 17071                                  ;;
 17072                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17073                                  ;;		  before we try to run.
 17074                                  ;;	       b) in any case, we should check for sufficient memory and give
 17075                                  ;;		  an appropriate error diagnostic if there isn't enough
 17076                                  ;
 17077                                  ;	push	cs
 17078                                  ;	pop	ds
 17079                                  ;
 17080                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17081                                  ;;	  that way it would be easier to slide them down home in a minimal
 17082                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17083                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17084                                  ;;	  temporary home and the final one.  the problem with doing that
 17085                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17086                                  ;
 17087                                  ;	dec	cx			; one para for an arena at end of mem
 17088                                  ;					; in case of UMBs
 17089                                  
 17090                                  	; 22/10/2022
 17091                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17092                                  
 17093                                  	; 12/12/2022
 17094                                  	;push	cs
 17095                                  	;pop	ds
 17096                                  
 17097 000004DB 49                      	dec	cx
 17098                                  
 17099                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17100                                  
 17101 000004DC 31DB                    	xor	bx,bx
 17102 000004DE 8EC3                    	mov	es,bx	; 0
 17103                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17104                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17105                                  	; 29/09/2023
 17106 000004E0 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17107 000004E5 26817F035250            	cmp	word [es:bx+3],'RP'
 17108 000004EB 751B                    	jne	short NoRPL
 17109 000004ED 26807F054C              	cmp	byte [es:bx+5],'L'
 17110 000004F2 7514                    	jne	short NoRPL
 17111                                  
 17112 000004F4 89CA                    	mov	dx,cx			; get TOM into DX
 17113 000004F6 52                      	push	dx
 17114 000004F7 B8064A                  	mov	ax,4A06h
 17115                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17116 000004FA CD2F                    	int	2Fh			; Get new TOM from any RPL
 17117 000004FC 58                      	pop	ax
 17118 000004FD 89D1                    	mov	cx,dx
 17119 000004FF 39C2                    	cmp	dx,ax
 17120 00000501 7405                    	je	short NoRPL
 17121                                  	
 17122                                  	; 11/12/2022
 17123                                  	; ds = cs
 17124 00000503 8916[9402]              	mov	[RPLMemTop],dx
 17125                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17126                                  	;mov	[cs:RPLMemTop],dx
 17127                                  	
 17128 00000507 49                      	dec	cx
 17129                                  NoRPL:
 17130 00000508 B8[D038]                	mov	ax,SI_end		; need this much room for sysinit
 17131                                  					; (SI_end == sysinit code size)
 17132 0000050B E8B006                  	call	off_to_para
 17133 0000050E 29C1                    	sub	cx,ax
 17134                                  
 17135                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17136                                  ; code above sysinit in memory
 17137                                  ;
 17138 00000510 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17139                                  
 17140 00000514 B8F019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17141 00000517 E8A406                  	call	off_to_para		; leave this much room for BIOS code
 17142 0000051A 29C1                    	sub	cx,ax
 17143 0000051C 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17144                                  
 17145 0000051E B9[D038]                	mov	cx,SI_end		; (sysinit code size)
 17146 00000521 D1E9                    	shr	cx,1			; divide by 2 to get words
 17147 00000523 F3A5                    	rep	movsw			; relocate sysinit
 17148                                  
 17149 00000525 06                      	push	es			; push relocated segment
 17150 00000526 B8[2B05]                	mov	ax,SYSIN
 17151 00000529 50                      	push	ax			; push relocated entry point
 17152                                  
 17153 0000052A CB                      	retf				; far jump to relocated sysinit
 17154                                  
 17155                                  ; ----------------------------------------------------------------------------
 17156                                  
 17157                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17158                                  
 17159                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17160                                  	; (SYSINIT:0533h)
 17161                                  SYSIN:
 17162                                  	; Retro DOS 4.0 - 22/03/2019
 17163                                  	; Retro DOS 2.0 - 25/02/2018
 17164                                  
 17165                                  	; 23/04/2019
 17166                                  	;;mov	ax,Bios_Data
 17167                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17168                                  	; 21/10/2022
 17169 0000052B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17170 0000052E 8ED8                    	mov	ds,ax
 17171 00000530 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17172 00000534 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17173                                  
 17174                                  ; first move the MSDOS.SYS image up to a harmless place 
 17175                                  ; on top of our new sysinitseg
 17176                                  
 17177                                  	; 22/10/2022
 17178 00000539 B8[D038]                	mov	ax,SI_end		; how big is sysinitseg?
 17179 0000053C E87F06                  	call	off_to_para
 17180 0000053F 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17181 00000541 01C8                    	add	ax,cx
 17182 00000543 8EC0                    	mov	es,ax
 17183                                  	
 17184 00000545 31F6                    	xor	si,si
 17185 00000547 89F7                    	mov	di,si
 17186                                  
 17187 00000549 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17188                                  
 17189                                  	;mov	ax,cs	
 17190                                  	;mov	ds,ax
 17191                                  
 17192                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17193                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17194                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17195                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17196                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17197                                  
 17198                                  	; 22/10/2022
 17199 0000054E B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17200 00000551 F3A5                    	rep     movsw
 17201 00000553 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17202                                  
 17203                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17204                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17205                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17206                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17207                                  
 17208                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17209                                  	;mov	ax,cs
 17210                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17211                                  	;mov	ds,ax
 17212                                  
 17213                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17214                                  
 17215                                  ;	; 24/04/2019 
 17216                                  ;;ifndef ROMDOS
 17217                                  ;	mov	ax,[es:3] 		; get offset of dos
 17218                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17219                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17220                                  ;	call	off_to_para		; subtract this much from segment
 17221                                  ;	; 23/04/2019
 17222                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17223                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17224                                  ;;else
 17225                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17226                                  ;;
 17227                                  ;;endif ; ROMDOS
 17228                                  
 17229                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17230                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17231                                  
 17232                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17233                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17234                                  
 17235                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17236                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17237 00000558 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17238                                  
 17239 0000055B 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17240                                  	; 02/11/2022
 17241 0000055F E85C06                  	call	off_to_para		; subtract this much from segment
 17242 00000562 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17243                                  
 17244                                  	; Current DOSCODE start address = dword [dosinit]
 17245                                  
 17246                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17247                                  ;; until it is determined whether it will be running in HIMEM or not.
 17248                                  
 17249                                  ;ifndef ROMDOS
 17250                                  
 17251                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17252                                  
 17253                                  	; 22/10/2022
 17254 00000567 8CC0                    	mov	ax,es
 17255 00000569 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17256 0000056C 8EC0                    	mov	es,ax
 17257 0000056E 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17258 00000573 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17259                                  
 17260                                  	;mov	si,BCODE_START ; mov si,30h
 17261                                  	; 09/12/2022
 17262 00000575 BE[3000]                	mov	si,BCODESTART
 17263                                  	; 02/11/2022
 17264 00000578 89F7                    	mov	di,si
 17265                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17266                                  	;sub	cx,si
 17267                                  	; 29/09/2023
 17268                                  	BCODESIZE equ BCODEEND-BCODESTART
 17269 0000057A B9C019                  	mov	cx,BCODESIZE
 17270 0000057D D1E9                    	shr	cx,1
 17271 0000057F F3A5                    	rep	movsw			; move Bios_Code into place
 17272                                  
 17273 00000581 8CC0                    	mov	ax,es			; tell it what segment it's in
 17274 00000583 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17275                                  
 17276                                  ;endif	; not ROMDOS
 17277                                  
 17278                                  ; now call dosinit while it's in its temporary home
 17279                                  
 17280                                  	;mov	ax,cs
 17281                                  	;mov	ds,ax	 
 17282                                  
 17283                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17284                                  
 17285                                  	; 22/10/2022
 17286                                  
 17287 00000588 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17288                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17289 0000058D 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17290                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17291                                  
 17292 00000592 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17293                                  
 17294 00000597 FA                      	cli
 17295 00000598 8CC8                    	mov	ax,cs
 17296 0000059A 8ED0                    	mov	ss,ax
 17297                                  
 17298                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17299                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17300                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17301                                  ;SYSINIT:0532h:
 17302                                  
 17303                                  ; 22/10/2022
 17304                                  ; ----------------------------------------------------------------------------
 17305                                  ;SYSINIT:05A6h:
 17306                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17307                                  
 17308                                  	;mov	sp, 05A6h
 17309 0000059C BC9C05                  	mov     sp,locstack		; set stack
 17310                                  
 17311 0000059F FB                      	sti
 17312                                  
 17313                                  ;align 2
 17314                                  	; 30/03/2018
 17315                                  ;LOCSTACK:
 17316                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17317                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17318                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17319                                  
 17320                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17321                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17322                                  
 17323                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17324                                  ; at the top of memory, to its final location in low memory just above the
 17325                                  ; BIOS data. It will then build important DOS data structures in low 
 17326                                  ; memory following the DOS data. It returns (among many other things) the
 17327                                  ; new starting address of free memory.
 17328                                  
 17329 000005A0 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17330                                  			 ; es:di -> sysinitvars_ext
 17331                                  
 17332 000005A5 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17333                                  	
 17334                                  	; 11/12/2022
 17335                                  	; 22/03/2019
 17336 000005AA 0E                      	push	cs
 17337 000005AB 1F                      	pop	ds
 17338                                  	; 22/10/2022
 17339 000005AC A3[8102]                	mov	[hi_doscod_size],ax
 17340 000005AF 890E[7F02]              	mov	[lo_doscod_size],cx
 17341 000005B3 8916[7B02]              	mov	[dos_segreinit],dx
 17342                                  	
 17343                                  	; 11/12/2022
 17344                                  	; ds = cs
 17345                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17346                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17347                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17348                                  
 17349                                  	; 05/06/2018 - Retro DOS v3.0
 17350                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17351                                  
 17352                                  	; 11/12/2022
 17353                                  	; ds = cs
 17354                                  	; 22/10/2022
 17355                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17356 000005B7 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17357                                  	;mov	[cs:DOSINFO],ax
 17358 000005BA A3[6B02]                	mov	[DOSINFO],ax
 17359                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17360 000005BD 268B4502                	mov	ax,[es:di+2]
 17361                                  	;mov	[cs:DOSINFO+2],ax
 17362 000005C1 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17363                                  
 17364                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17365 000005C4 268B4504                	mov	ax,[es:di+4]
 17366                                  	;mov	[cs:sysi_country],ax
 17367 000005C8 A3[7702]                	mov	[sysi_country],ax
 17368                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17369 000005CB 268B4506                	mov	ax,[es:di+6]
 17370                                  	;mov	[cs:sysi_country+2],ax
 17371 000005CF A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17372                                  
 17373                                  	; 20/04/2019
 17374                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17375                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17376                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17377                                  	; 22/10/2022
 17378                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17379                                  	;;;mov	[dos_segreinit+2],es
 17380                                  	;;mov	[dos_segreinit+2],ax
 17381                                  	;mov	[cs:dos_segreinit+2],ax
 17382                                  	; 11/12/2022
 17383                                  	; ds = cs
 17384 000005D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17385 000005D6 8C06[7D02]              	mov	[dos_segreinit+2],es
 17386                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17387                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17388                                  	;mov	[cs:dos_segreinit+2],es
 17389                                  
 17390                                  ; ----------------------------------------------------------------------------
 17391                                  
 17392                                  ;SYSINIT:0577h:
 17393                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17394                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17395                                  
 17396                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17397                                  ;------ Cover up RPL code with an arena
 17398                                  ;SYSINIT:05EBh:
 17399                                  	; 11/12/2022
 17400                                  	; ds = cs
 17401 000005DA 31DB                    	xor	bx,bx
 17402 000005DC 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17403                                  	;cmp	word [RPLMemTop],0
 17404                                  	;;cmp	word [cs:RPLMemTop],0
 17405 000005E0 7450                    	je	short NoRPLArena
 17406                                  
 17407                                  ;------ alloc all memory
 17408                                  
 17409                                  	; 11/12/2022
 17410                                  	;mov	bx,0FFFFh
 17411 000005E2 4B                      	dec	bx
 17412                                  	; bx = 0FFFFh
 17413 000005E3 B448                    	mov	ah,48h
 17414 000005E5 CD21                    	int	21h
 17415                                  			; DOS - 2+ - ALLOCATE MEMORY
 17416                                  			; BX = number of 16-byte paragraphs desired
 17417 000005E7 B448                    	mov	ah,48h
 17418 000005E9 CD21                    	int	21h
 17419                                  
 17420 000005EB 8EC0                    	mov	es,ax			; get it into ES and save it
 17421 000005ED 06                      	push	es
 17422                                  
 17423                                  ;------ resize upto RPL mem
 17424                                  
 17425                                  	; 11/12/2022
 17426                                  	; ds = cs
 17427                                  	;sub	ax,[cs:RPLMemTop]
 17428 000005EE 2B06[9402]              	sub	ax,[RPLMemTop]
 17429 000005F2 F7D8                    	neg	ax
 17430 000005F4 48                      	dec	ax
 17431 000005F5 89C3                    	mov	bx,ax
 17432 000005F7 B44A                    	mov	ah,4Ah
 17433 000005F9 CD21                    	int	21h
 17434                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17435                                  			; ES = segment address of block to change
 17436                                  			; BX = new size in paragraphs
 17437                                  
 17438                                  ;------ allocate the free (RPL MEM)
 17439                                  
 17440 000005FB BBFFFF                  	mov	bx,0FFFFh
 17441 000005FE B448                    	mov	ah,48h
 17442 00000600 CD21                    	int	21h
 17443 00000602 B448                    	mov	ah,48h
 17444 00000604 CD21                    	int	21h
 17445                                  
 17446                                  ;----- mark that it belongs to RPL
 17447                                  
 17448 00000606 48                      	dec	ax
 17449 00000607 8EC0                    	mov	es,ax
 17450                                  	;mov	word [es:arena_owner],8
 17451 00000609 26C70601000800          	mov	word [es:1],8
 17452                                  	;mov	word [es:arena_name],'RP'
 17453 00000610 26C70608005250          	mov	word [es:8],'RP'
 17454                                  	;mov	word [es:arena_name+2],'L'
 17455 00000617 26C7060A004C00          	mov	word [es:10],'L'
 17456                                  	;mov	word [es:arena_name+4],0
 17457 0000061E 26C7060C000000          	mov	word [es:12],0
 17458                                  	;mov	word [es:arena_name+6],0
 17459 00000625 26C7060E000000          	mov	word [es:14],0	
 17460                                  
 17461 0000062C 07                              pop     es                      ; get back ptr to first block
 17462 0000062D B449                            mov     ah,49h	; Dealloc	; and free it
 17463 0000062F CD21                    	int	21h		
 17464                                  					; DOS - 2+ - FREE MEMORY
 17465                                  					; ES = segment address of area to be freed
 17466                                  	; 11/12/2022
 17467 00000631 F8                      	clc
 17468                                  
 17469                                  ; ----------------------------------------------------------------------------
 17470                                  
 17471                                  NoRPLArena:
 17472                                  	; 11/12/2022
 17473                                  	; ds = cs
 17474                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17475 00000632 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17476                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17477                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17478                                  
 17479                                  	; 11/12/2022
 17480                                  	;clc				; get the extended memory size
 17481                                  
 17482                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17483                                  ;	if the function reports an error do nothing else store the extended
 17484                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17485                                  ;	currently pointed to by es:di. use the offsets specified in the
 17486                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17487                                  
 17488 00000636 B488                    	mov	ah,88h
 17489 00000638 CD15                    	int	15h			; check extended memory size
 17490 0000063A 720B                    	jc	short no_ext_memory
 17491                                  			; Get Extended Memory Size
 17492                                  			; Return: CF clear on success
 17493                                  			; AX = size of memory above 1M in K	
 17494                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17495                                  	; 22/10/2022
 17496 0000063C 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17497 00000640 09C0                    	or	ax,ax
 17498 00000642 7403                    	jz	short no_ext_memory
 17499 00000644 E8ED04                  	call	ClrVDISKHeader
 17500                                  no_ext_memory:
 17501                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17502 00000647 268B4510                	mov	ax,[es:di+10h]
 17503                                  	;add	ax,bufinsiz
 17504 0000064B 83C014                  	add	ax,20			; size of buffer header
 17505                                  	; 11/12/2022
 17506                                  	; ds = cs
 17507 0000064E A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17508                                  	;mov	[cs:singlebuffersize],ax	
 17509                                  	; 11/12/2022
 17510 00000651 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17511                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17512                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17513 00000654 26884543                	mov	[es:di+43h],al
 17514                                  
 17515                                  ; determine if 386 system...
 17516                                  
 17517                                  	;get_cpu_type			; macro to determine cpu type
 17518                                  
 17519                                  get_cpu_type:
 17520                                  	; 11/12/2022
 17521 00000658 9C                      	pushf
 17522                                  	;push	bx
 17523                                  	;xor	bx,bx
 17524                                  	; 11/12/2022
 17525                                  	;xor	cx,cx
 17526                                  	;
 17527 00000659 31C0                    	xor	ax,ax
 17528                                  	; ax = 0
 17529 0000065B 50                      	push    ax
 17530 0000065C 9D                      	popf
 17531 0000065D 9C                      	pushf
 17532 0000065E 58                      	pop	ax
 17533 0000065F 2500F0                  	and	ax,0F000h
 17534                                  	;cmp	ax,0F000h
 17535 00000662 80FCF0                  	cmp	ah,0F0h 
 17536 00000665 7410                    	je	short cpu_8086
 17537                                  	;mov	ax,0F000h
 17538 00000667 B4F0                    	mov	ah,0F0h
 17539                                  	; ax = 0F000h
 17540 00000669 50                      	push	ax
 17541 0000066A 9D                      	popf
 17542 0000066B 9C                      	pushf
 17543 0000066C 58                      	pop	ax
 17544                                  	;and	ax,0F000h
 17545 0000066D 80E4F0                  	and	ah,0F0h
 17546 00000670 7405                    	jz	short cpu_286
 17547                                  cpu_386:
 17548                                  	; 11/12/2022
 17549                                  	;;inc	bx
 17550                                  	;inc	cx
 17551                                  	; 11/12/2022
 17552                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17553 00000672 26C6454401              	mov	byte [es:di+44h],1
 17554                                  cpu_286:
 17555                                  	;;;inc	bx
 17556                                  	;;inc	cx
 17557                                  cpu_8086:
 17558                                  	; 11/12/2022
 17559                                  	;;mov	ax,bx	
 17560                                  	;pop	bx
 17561 00000677 9D                      	popf
 17562                                  
 17563                                  	;...
 17564                                  
 17565                                  	; 11/12/2022
 17566                                  	;or	cl,cl
 17567                                  	;jz	short not_386_system
 17568                                  	; 11/12/202
 17569                                  	;cmp	cl,2
 17570                                  	;;cmp	ax,2			; is it a 386?
 17571                                  	;jne	short not_386_system	; no: don't mess with flag
 17572                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17573                                  	; 11/12/2022
 17574                                  	; 22/10/2022
 17575                                  	;mov	byte [es:di+44h],1
 17576                                  not_386_system:
 17577                                  	;mov	al,[es:di+SYSI_NUMIO]
 17578 00000678 268A4520                	mov	al,[es:di+20h]
 17579                                  	; 11/12/2022
 17580                                  	; ds = cs
 17581 0000067C A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17582                                  	;mov	[cs:drivenumber],al
 17583                                  
 17584 0000067F 8CC8                    	mov	ax,cs
 17585 00000681 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17586                                  	; 11/12/2022
 17587                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17588                                  	;;mov	cx,[cs:singlebuffersize]
 17589                                  	;shr	cx,1			
 17590                                  	;shr	cx,1			; divide size by 16...
 17591                                  	;shr	cx,1
 17592                                  	;shr	cx,1			; ...to get paragraphs...
 17593                                  	;inc	cx			; ... and round up
 17594                                  	; 11/12/2022
 17595 00000684 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17596 00000688 B104                    	mov	cl,4
 17597 0000068A D3EB                    	shr	bx,cl
 17598 0000068C 43                      	inc	bx
 17599                                  
 17600                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17601                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17602                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17603                                  ;	  it is probably safe to assume that the sector size always will be.
 17604                                  ;
 17605                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17606                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17607                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17608                                  ;	  other code from ever causing a problem???
 17609                                  
 17610                                  	; 11/12/2022
 17611 0000068D 29D8                    	sub	ax,bx
 17612                                  	;sub	ax,cx
 17613 0000068F A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17614                                  	; 22/10/2022
 17615                                  	;mov	[cs:top_of_cdss],ax
 17616                                  
 17617                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17618                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17619                                  ;	for allocating memory for MagicDrv.
 17620                                  
 17621 00000692 06                      	push	es			; preserve pointer to dosinfo
 17622 00000693 57                      	push	di
 17623                                  
 17624                                  	; 22/10/2022
 17625                                  ;	mov	cx,ax			; save pointer for buffer
 17626                                  ;
 17627                                  ;;	now allocate space for 26 CDSs
 17628                                  ;
 17629                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17630                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17631                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17632                                  
 17633                                  ; setup and initialize the temporary buffer at cx
 17634                                  
 17635                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17636 00000694 26C47D12                	les	di,[es:di+12h]
 17637                                  	; 11/12/2022
 17638 00000698 31DB                    	xor	bx,bx
 17639                                  	;xor	ax,ax
 17640                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17641                                  	;mov	word [es:di+4],0
 17642 0000069A 26895D04                	mov	[es:di+4],bx ; 0
 17643                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17644                                  	;mov	word [es:di],0
 17645 0000069E 26891D                  	mov	[es:di],bx ; 0
 17646                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17647                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17648 000006A1 26894502                	mov	[es:di+2],ax
 17649                                  
 17650                                  	;mov	es,cx
 17651 000006A5 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17652                                  
 17653                                  	; 11/12/2022
 17654                                  	;xor	ax,ax
 17655                                  	;mov	di,ax			; es:di -> single buffer
 17656 000006A7 89DF                    	mov	di,bx
 17657                                  	; di = 0
 17658                                  
 17659                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17660                                  	; 11/12/2022
 17661                                  	;mov	[es:di],ax ; 0
 17662 000006A9 26891D                  	mov	[es:di],bx ; 0
 17663                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17664                                  	; 11/12/2022
 17665                                  	;mov	[es:di+2],ax ; 0
 17666 000006AC 26895D02                	mov	[es:di+2],bx ; 0 
 17667                                  
 17668                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17669                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17670                                  
 17671                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17672 000006B0 26C74504FF00            	mov	word [es:di+4],00FFh
 17673                                  ;SYSINIT:06E6h
 17674                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17675                                  	;mov	word [es:di+6],0
 17676                                  	; 11/12/2022
 17677                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17678 000006B6 26895D06                	mov	[es:di+6],bx ; 0
 17679                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17680                                  	;mov	word [es:di+8],0
 17681                                  	; 11/12/2022
 17682                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17683 000006BA 26895D08                	mov	[es:di+8],bx ; 0
 17684                                  
 17685 000006BE 5F                      	pop	di			; restore pointer to DOSINFO data
 17686 000006BF 07                      	pop	es
 17687                                  
 17688                                  	; 11/12/2022
 17689                                  	; ds = cs
 17690                                  	; 22/10/2022
 17691                                  	;push	cs
 17692                                  	;pop	ds
 17693                                  
 17694 000006C0 E80405                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17695                                  					;  can make disk system calls
 17696                                  					; tempcds trashes ds
 17697                                  	; 10/05/2019
 17698 000006C3 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17699                                  
 17700                                  	;if not ibmjapver
 17701                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17702                                  	;endif
 17703                                  
 17704                                  	; 22/10/2022
 17705                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17706                                  	;call	far ptr 70h:89Bh
 17707 000006C8 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17708                                  
 17709 000006CD FB                      	sti				; ints ok
 17710 000006CE FC                      	cld				; make sure
 17711                                  
 17712                                  ; 23/03/2019
 17713                                  
 17714                                  ;SYSINIT:069Ch
 17715                                  
 17716                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17717                                  ; of the way by putting it just below sysinit at end of memory.
 17718                                  
 17719 000006CF 8CCB                    	mov	bx,cs
 17720 000006D1 83EB10                  	sub	bx,10h
 17721 000006D4 8EC3                    	mov	es,bx
 17722 000006D6 31F6                    	xor	si,si
 17723 000006D8 89F7                    	mov	di,si
 17724 000006DA B98000                  	mov	cx,128
 17725 000006DD F3A5                    	rep	movsw
 17726                                  
 17727                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17728                                  	; 22/10/2022
 17729 000006DF 268C063600              	mov	[es:36h],es
 17730                                  
 17731                                   	; Set Process Data Block - Program Segment Prefix address
 17732                                  	; BX = PDB/PSP segment
 17733 000006E4 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17734 000006E6 CD21                    	int	21h			; tell DOS we moved it
 17735                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17736                                  			; BX = segment address of new PSP
 17737                                  	; 22/10/2022
 17738                                  	; 27/03/2019
 17739 000006E8 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17740                                  
 17741 000006E9 0E                      	push	cs	
 17742 000006EA 1F                      	pop	ds
 17743                                  
 17744                                  	; set up temp. critical error handler
 17745 000006EB BA[9633]                	mov	dx,int24		; set up int 24 handler
 17746                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17747                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17748 000006EE B82425                  	mov	ax,2524h
 17749 000006F1 CD21                    	int	21h
 17750                                  
 17751 000006F3 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17752 000006F8 7405                            je      short no_err		   ;  N: continue            M029
 17753 000006FA BA[9438]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17754                                          ; 22/10/2022
 17755                                  	;call	print 			   ;		             M029
 17756                                  	; 12/12/2022
 17757 000006FD EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17758                                  no_err:
 17759                                  	; 12/05/2019
 17760                                  	;----------------------------------------------
 17761                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17762                                  	; 22/10/2022 - Retro DOS v4.0
 17763                                  	; 12/12/2022
 17764 000006FF BA[9A33]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17765                                  p_dosinit_msg:
 17766 00000702 E86C2C                  	call	print			; Print message
 17767                                  	;----------------------------------------------
 17768                                  	
 17769                                  	; 11/12/2022
 17770                                  	; 22/10/2022
 17771                                  	; 23/03/2019 - Retro DOS v4.0
 17772                                  	;pop	ds			; start of free memory
 17773                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17774                                  	
 17775                                  	; 11/12/2022
 17776                                  	; 27/03/2019
 17777 00000705 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17778 00000709 1F                      	pop	ds ; */
 17779                                  
 17780 0000070A 08D2                    	or	dl,dl
 17781                                  	;jz	short nodrvset		; bios didn't say
 17782 0000070C 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17783                                  	;dec	dl			; A = 0
 17784                                  	; 18/12/2022
 17785 0000070E 4A                      	dec	dx
 17786 0000070F B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17787 00000711 CD21                    	int	21h			; select the disk
 17788                                  			; DOS - SELECT DISK
 17789                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17790                                  			; Return: AL = number of logical drives
 17791                                  nodrvset:
 17792                                  	;ifdef	dblspace_hooks
 17793                                  	;	....
 17794                                  	;	....
 17795                                  	;endif	
 17796                                  
 17797                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17798                                  
 17799                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17800                                  ; ----------------------------------------------------------------------------
 17801                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17802                                  
 17803                                  ProcessConfig:
 17804                                  	;; ds = cs ; 27/03/2019
 17805                                  	; 11/12/2022
 17806                                  	; ds <> cs	
 17807                                  
 17808                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17809                                  
 17810 00000713 E8F117                  	call	doconf			; do pre-scan for dos=high/low
 17811                                  
 17812                                  	; 11/12/2022
 17813                                  	; 27/03/2019
 17814                                  	; ds = cs (at return from doconf)
 17815                                  
 17816                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17817                                  ; It will either be relocated to low memory, above the DOS data structures,
 17818                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17819                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17820                                  ; to tell the DOS data where the code has been placed, and to install the
 17821                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17822                                  ; must first initialize it in its present location and load the installable
 17823                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17824                                  ; relocate the DOS code into HiMem.
 17825                                  ;
 17826                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17827                                  ; to install the low memory stub (this must be done before allowing any
 17828                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17829                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17830                                  ; been patched.
 17831                                  
 17832                                  	; 22/10/2022 - Retro DOS v4.0
 17833                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17834                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17835                                  	; 11/12/2022
 17836 00000716 803E[6A02]00            	cmp	byte [runhigh],0
 17837 0000071B 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17838                                  
 17839                                  ;------ user chose to load high
 17840                                  
 17841                                  	; 22/10/2022
 17842                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17843                                  	; 11/12/2022
 17844                                  	; ds = cs
 17845                                  ; 13/04/2024
 17846                                  %if 0
 17847                                  	mov	es,[CURRENT_DOS_LOCATION]
 17848                                  %endif
 17849                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 17850                                  	; 27/03/2019
 17851                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17852                                  
 17853 0000071D 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17854                                  
 17855                                  ; 13/04/2024
 17856                                  %if 0	
 17857                                  	; 11/12/2022
 17858                                  	; ds = cs
 17859                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17860                                  	call	far [dos_segreinit]
 17861                                  %endif
 17862 0000071F EB08                    	jmp	short do_multi_pass
 17863                                  
 17864                                  ;------ User chose to load dos low
 17865                                  
 17866                                  dont_install_stub:
 17867                                  	; 22/10/2022
 17868 00000721 31DB                    	xor	bx,bx			; M012
 17869                                  					; don't use int 21 call to alloc mem
 17870 00000723 E8D701                  	call	MovDOSLo		; move it !
 17871                                  
 17872 00000726 B80100                  	mov	ax,1			; dont install stub
 17873                                  
 17874                                  ; 13/04/2024
 17875                                  %if 1
 17876                                  do_multi_pass:
 17877                                  %endif
 17878                                  	; 11/12/2022
 17879                                  	; ds = cs
 17880 00000729 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17881                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17882                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17883                                  	; 27/03/2019
 17884                                  ;do_multi_pass:
 17885                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17886                                  
 17887                                  	; 11/12/2022
 17888                                  	; ds =cs
 17889                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17890 0000072D FF1E[7B02]              	call	far [dos_segreinit]
 17891                                  
 17892                                  ; 13/04/2024
 17893                                  %if 0
 17894                                  do_multi_pass:
 17895                                  %endif
 17896                                  
 17897 00000731 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17898                                  					; & update [memhi] & [area]
 17899                                  					; start of free memory.
 17900                                  	;ifdef	dblspace_hooks
 17901                                  	;mov	bx,0			; magic backdoor to place int hooks
 17902                                  	;call	cs:MagicBackdoor
 17903                                  	;endif
 17904                                  
 17905                                  ; Now, process config.sys some more.  
 17906                                  ; Load the device drivers and install programs
 17907                                  
 17908                                  	; 22/10/2022
 17909                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17910                                  	; 11/12/2022
 17911                                  	; ds = cs
 17912 00000734 FE06[4903]              	inc	byte [multi_pass_id]
 17913 00000738 E85F18                  	call	multi_pass		; load device drivers
 17914 0000073B E82225                  	call	ShrinkUMB
 17915 0000073E E84825                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17916                                  	; 02/11/2022
 17917                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17918                                  	; 11/12/2022
 17919                                  	; ds = cs
 17920 00000741 FE06[4903]              	inc	byte [multi_pass_id]
 17921 00000745 E85218                  	call	multi_pass		; was load ifs (now does nothing)
 17922                                  
 17923                                  	;ifdef	dblspace_hooks
 17924                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17925                                  	;endif
 17926                                  
 17927                                  	; ds = cs
 17928                                  	
 17929 00000748 E81405                  	call	endfile			; setup fcbs, files, buffers etc
 17930                                  
 17931                                  	;ifdef	dblspace_hooks
 17932                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17933                                  	;endif
 17934                                  
 17935                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17936                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17937                                  ;with overlays called from installed programs
 17938                                  
 17939                                  	; 11/12/2022
 17940                                  	; ds = cs
 17941                                  
 17942                                  	;;mov	ax,Bios_Data ; 0070h
 17943                                  	;mov	ax,KERNEL_SEGMENT
 17944                                  	; 21/10/2022
 17945 0000074B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17946 0000074E 8EC0                    	mov	es,ax			; point ES to bios data
 17947                                  
 17948 00000750 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17949                                  
 17950                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17951                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17952                                  	;test	byte [cs:install_flag],1
 17953                                  	; 11/12/2022
 17954                                  	; ds = cs
 17955 00000756 F606[4A03]01            	test	byte [install_flag],1
 17956                                  	;test	byte [cs:install_flag],have_install_cmd
 17957                                  					; are there install commands?
 17958 0000075B 7407                    	jz	short dolast		; no, no need for further processing
 17959                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17960                                  	; 11/12/2022
 17961                                  	; ds =cs
 17962 0000075D FE06[4903]              	inc	byte [multi_pass_id]
 17963 00000761 E83618                  	call	multi_pass		; execute install= commands
 17964                                  
 17965                                  dolast:
 17966                                  	
 17967                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17968                                  ;  free the confbot area used for config.sys and sysinit itself.
 17969                                  
 17970                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17971                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17972                                  ; anything, but just set up the ROM area for suballocation (or print
 17973                                  ; a message if HiMem is not available).
 17974                                  ;
 17975                                  ; There is also this little hack for CPM style DOS calls that needs to
 17976                                  ; be done when A20 is set...
 17977                                  
 17978                                  	; 11/12/2022
 17979                                  	; ds = cs
 17980                                  
 17981                                  	; 22/10/2022
 17982                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17983                                  	; 11/12/2022
 17984 00000764 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17985 00000769 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17986 0000076B E83E01                  	call	LoadDOSHiOrLo
 17987                                  _@@_:
 17988                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17989                                  	; 11/12/2022
 17990                                  	; ds = cs
 17991 0000076E 803E[6A02]00            	cmp	byte [runhigh],0
 17992                                  	;je	short _@@@
 17993 00000773 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17994 00000775 E83004                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17995                                  _@@@:
 17996                                  
 17997                                  ; We are now done with CONFIG.SYS processing
 17998                                  
 17999                                  ConfigDone:
 18000                                  	; 12/12/2022
 18001                                  	; 22/10/2022
 18002                                  	;mov	byte [cs:donotshownum],1 
 18003                                  					; done with config.sys.
 18004                                  					; do not show line number message.
 18005                                  	;mov	es,[cs:area]
 18006                                  	; 12/12/2022
 18007                                  	; ds = cs
 18008                                  	; 27/03/2019
 18009 00000778 C606[D103]01            	mov	byte [donotshownum],1
 18010 0000077D 8E06[E403]              	mov	es,[area]
 18011                                  
 18012 00000781 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18013 00000783 CD21                    	int	21h
 18014                                  			; DOS - 2+ - FREE MEMORY
 18015                                  			; ES = segment address of area to be freed
 18016                                  
 18017                                  	; 22/10/2022
 18018                                  	;test	word [cs:install_flag],2
 18019                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18020                                  	;test	byte [cs:install_flag],has_installed
 18021                                  	; 11/12/2022
 18022                                  	; ds = cs
 18023 00000785 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18024                                  	;test	byte [install_flag],has_installed
 18025 0000078A 741F                    	jz	short skip_free_sysinitbase ; no.
 18026                                  
 18027                                  ; set block from the old_area with impossible_owner_size.
 18028                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18029                                  ; handle install= command.
 18030                                  
 18031                                  	; 12/12/2022
 18032                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18033                                  	;push	bx
 18034                                  	
 18035                                  	; 22/10/2022
 18036                                  	;mov	es,[cs:old_area]
 18037                                  	;mov	bx,[cs:impossible_owner_size]
 18038                                  	; 12/12/2022
 18039                                  	; ds = cs
 18040 0000078C 8E06[DA03]              	mov	es,[old_area]
 18041 00000790 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18042                                  	
 18043 00000794 B44A                    	mov	ah,4Ah ; SETBLOCK
 18044 00000796 CD21                    	int	21h
 18045                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18046                                  			; ES = segment address of block to change
 18047                                  			; BX = new size in paragraphs
 18048 00000798 8CC0                    	mov	ax,es
 18049 0000079A 48                      	dec	ax
 18050 0000079B 8EC0                    	mov	es,ax			; point to arena
 18051                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18052 0000079D 26C70601000800          	mov	word [es:1],8
 18053                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18054 000007A4 26C70608005344          	mov	word [es:8],'SD'
 18055                                  	
 18056                                  	; 12/12/2022
 18057                                  	;pop	bx
 18058                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18059                                  
 18060                                  skip_free_sysinitbase:
 18061                                  	; 22/10/2022
 18062                                  	;cmp	byte [cs:runhigh],0
 18063                                  	; 12/12/2022
 18064                                  	; ds = cs
 18065 000007AB 803E[6A02]00            	cmp	byte [runhigh],0	
 18066 000007B0 7403                    	je	short _@@@@
 18067                                  
 18068 000007B2 E8D502                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18069                                  
 18070                                  ; ----------------------------------------------------------------------------
 18071                                  
 18072                                  _@@@@:
 18073                                  	; 12/12/2022
 18074                                  	; ds = cs
 18075                                  	; 22/10/2022
 18076                                  	; 27/03/2019
 18077                                  	;push	cs
 18078                                  	;pop	ds			; point DS to sysinitseg
 18079                                  
 18080                                  ; set up the parameters for command
 18081                                  
 18082                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18083                                  ;;ifdef  MULTI_CONFIG
 18084                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18085                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18086                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18087                                  ;	; !!!
 18088                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18089                                  ;       ; !!!
 18090                                  ;	call    disable_autoexec        ; no, we should disable it
 18091                                  ;process_autoexec:
 18092                                  ;;endif	; !!!
 18093                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18094                                  ;	; !!!
 18095                                  
 18096                                  	; 22/10/2022 
 18097                                  	;mov     cl,[command_line]
 18098                                          ;mov     ch,0
 18099                                          ;inc     cx
 18100                                          ;mov     si,command_line	
 18101                                  	;add     si,cx
 18102                                          ;mov     byte [si],cr	; cr-terminate command line
 18103                                  
 18104                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18105                                  	; (SYSINIT:0809h)
 18106                                  	
 18107                                  	;mov	si,(offset command_line+1)
 18108 000007B5 BE[AA02]                	mov	si,command_line+1
 18109 000007B8 1E                      	push    ds
 18110 000007B9 07                      	pop     es
 18111 000007BA 89F7                    	mov     di,si
 18112 000007BC B1FF                    	mov     cl,0FFh ; -1
 18113                                  _@_loop:
 18114 000007BE FEC1                    	inc     cl ; +1
 18115 000007C0 AC                      	lodsb
 18116 000007C1 AA                      	stosb
 18117 000007C2 08C0                    	or      al,al
 18118 000007C4 75F8                    	jnz     short _@_loop
 18119 000007C6 4F                      	dec     di
 18120 000007C7 B00D                    	mov     al,0Dh
 18121 000007C9 AA                      	stosb			; cr-terminate command line
 18122 000007CA 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18123                                  
 18124                                  ; ----------------------------------------------------------------------------
 18125                                  
 18126                                  ;   Once we get to this point, the above code, which is below "retry"
 18127                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18128                                  ;   which follow....)
 18129                                  
 18130                                  retry:
 18131 000007CE BA[4734]                	mov	dx,commnd	; now pointing to file description
 18132                                  
 18133                                  ; we are going to open the command interpreter and size it as is done in
 18134                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18135                                  ; there is not enough room for the command interpreter,exec will probably
 18136                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18137                                  ; here to catch it. this code is not perfect (for instance .exe command
 18138                                  ; interpreters are possible) because it does its sizing based on the
 18139                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18140                                  ; correctness to be usable.
 18141                                  
 18142                                  ; first, find out where the command interpreter is going to go.
 18143                                  
 18144 000007D1 52                      	push	dx		; save pointer to name
 18145 000007D2 BBFFFF                  	mov	bx,0FFFFh
 18146 000007D5 B448                    	mov	ah,48h	; ALLOC
 18147 000007D7 CD21                            int     21h             ; get biggest piece
 18148 000007D9 B448                    	mov	ah,48h	; ALLOC
 18149 000007DB CD21                    	int	21h		; second time gets it
 18150 000007DD 7243                    	jc	short memerrjx	; oooops
 18151                                  
 18152 000007DF 8EC0                    	mov	es,ax
 18153 000007E1 B449                    	mov	ah,49h	; DEALLOC
 18154 000007E3 CD21                    	int	21h		; give it right back
 18155 000007E5 89DD                    	mov	bp,bx
 18156                                  
 18157                                  ; es:0 points to block,and bp is the size of the block in para.
 18158                                  
 18159                                  ; we will now adjust the size in bp down by the size of sysinit.
 18160                                  ; we need to do this because exec might get upset if some of the exec
 18161                                  ; data in sysinit is overlayed during the exec.
 18162                                  
 18163                                  	; 22/10/2022
 18164                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18165 000007E7 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18166 000007EB 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18167                                  
 18168                                  ; Note that the "config_wrkseg" environment data is a segment in
 18169                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18170                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18171                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18172                                  ; we need to make sure that there's no way Exec will stomp on that data
 18173                                  ; before it can copy it, and one way to do that is to make the available
 18174                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18175                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18176                                  ; of the current sysinit CS....
 18177                                  ;
 18178                                  ; The reason I use the term "paranoid" is because this code should have
 18179                                  ; slid the data required by Exec up to the very top of memory, because as
 18180                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18181                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18182                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18183                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18184                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18185                                  
 18186                                  	; 22/10/2022
 18187                                  	;mov	cx,[config_envlen]
 18188                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18189                                          ;mov	ax,[config_wrkseg]
 18190                                  ;no_env:
 18191                                  	; 22/10/2022
 18192                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18193 000007ED 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18194 000007EF 83C311                  	add	bx,11h		; add the sysinit php
 18195 000007F2 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18196 000007F4 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18197                                  
 18198                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18199 000007F6 B8003D                          mov	ax,3D00h
 18200 000007F9 F9                      	stc                     ; in case of int 24
 18201 000007FA CD21                    	int	21h
 18202 000007FC 7241                    	jc	short comerr	; ooops
 18203                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18204                                  			; DS:DX -> ASCIZ filename
 18205                                  			; AL = access mode
 18206                                  			; 0 - read
 18207                                  	; 22/10/2022
 18208                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18209 000007FE 89C3                            mov     bx,ax           ; handle in bx
 18210                                  
 18211                                  ;   If the standard command interpreter is being used, verify it is correct
 18212                                  
 18213                                  	; 22/10/2022
 18214                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18215                                  	;jne	short skip_validation ; yes
 18216                                  	;mov	dx,retry-4
 18217                                  	;mov	cx,4		;
 18218                                  	;mov	ah,READ		;
 18219                                  	;int	21h		;
 18220                                  	;cmp	byte [retry-4],0E9h
 18221                                  	;jne	short comerr
 18222                                  	;; 20/04/2019 - Retro DOS v4.0
 18223                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18224                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18225                                  	;jne	short comerr	;
 18226                                  
 18227                                  ;skip_validation:
 18228                                  	; 22/10/2022
 18229                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18230 00000800 31C9                    	xor	cx,cx
 18231 00000802 31D2                    	xor	dx,dx
 18232                                  	;mov	ax,(LSEEK<<8)|2
 18233 00000804 B80242                  	mov	ax,4202h
 18234 00000807 F9                      	stc			;in case of int 24
 18235 00000808 CD21                    	int	21h		; get file size in dx:ax
 18236 0000080A 7233                    	jc	short comerr
 18237                                  				; convert size in dx:ax to para in ax
 18238 0000080C 83C00F                  	add	ax,15		; round up size for conversion to para
 18239 0000080F 83D200                  	adc	dx,0
 18240 00000812 E8A903                  	call	off_to_para
 18241 00000815 B10C                    	mov	cl,12
 18242 00000817 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18243 00000819 09D0                    	or	ax,dx		; ax is now # of para for file
 18244 0000081B 83C010                  	add	ax,10h		; 100h byte php
 18245 0000081E 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18246 00000820 7203                    	jb	short okld	; jump if yes.
 18247                                  
 18248                                  	; 22/10/2022
 18249                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18250                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18251                                  	; 02/11/2022
 18252                                  	;jmp	mem_err
 18253                                  	; 11/12/2022
 18254                                  	; ds = cs
 18255 00000822 E9D028                  	jmp	mem_err2
 18256                                  
 18257                                  ;memerrjx:
 18258                                  ;	mov	dx,badmem
 18259                                  ;	call	print
 18260                                  ;       jmp     short continue
 18261                                  
 18262                                  okld:
 18263 00000825 B43E                    	mov	ah,3Eh ; CLOSE
 18264 00000827 CD21                    	int	21h		; close file
 18265                                  
 18266                                  	; 22/10/2022
 18267 00000829 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18268                                  
 18269                                  	; 24/03/2019
 18270                                  
 18271 0000082A 0E                      	push	cs		; point es to sysinitseg
 18272 0000082B 07                      	pop	es
 18273 0000082C BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18274                                  	; 22/10/2022
 18275                                  	;pop	dx              ; recover pointer to name
 18276                                  
 18277                                  ;;ifdef	MULTI_CONFIG
 18278                                  
 18279                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18280                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18281                                  ;   selection was made (in which case the CONFIG environment variable will be
 18282                                  ;   set to that selection).
 18283                                  
 18284                                  	; 23/10/2022
 18285                                  	;mov	cx,[config_envlen]
 18286                                  	;jcxz	no_envdata
 18287                                          ;mov	cx,[config_wrkseg]
 18288                                  ;no_envdata:
 18289                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18290                                  	;mov	[bx],cx
 18291                                  
 18292                                  ;;endif	;MULTI_CONFIG
 18293                                  
 18294                                  	; 23/10/2022
 18295                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18296                                  
 18297                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18298 0000082F 8C4F04                  	mov	[bx+4],cs
 18299                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18300 00000832 8C4F08                  	mov	[bx+8],cs
 18301                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18302 00000835 8C4F0C                  	mov	[bx+12],cs
 18303                                  
 18304                                  	;mov	ax,(EXEC<<8) + 0
 18305                                  	; 23/10/2022
 18306 00000838 31C0                    	xor	ax,ax
 18307 0000083A B44B                    	mov	ah,4Bh        
 18308                                  
 18309 0000083C F9                      	stc                     ; in case of int 24
 18310 0000083D CD21                            int     21h             ; go start up command
 18311                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18312                                  			; DS:DX -> ASCIZ filename
 18313                                  			; ES:BX -> parameter block
 18314                                  			; AL = subfunc: load & execute program
 18315                                  	;push	cs
 18316                                  	;pop	ds
 18317                                  
 18318                                  	; 23/10/2022
 18319                                  	;push	dx		; push to balance fall-through pop
 18320                                  
 18321                                  ; note fall through if exec returns (an error)
 18322                                  comerr:
 18323                                  	; 23/10/2022
 18324                                  ;;ifdef	MULTI_CONFIG
 18325                                  	;cmp	byte [commnd4],0
 18326                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18327                                  	;cmp	byte [newcmd],0
 18328                                  	;je	short continue	; don't print err msg for defaults just yet
 18329                                  ;comerr2:
 18330                                  ;;endif
 18331 0000083F BA[9737]                        mov     dx,badcom	; want to print command error
 18332 00000842 E8002B                  	call	badfil
 18333                                  continue:
 18334                                  	; 23/10/2022
 18335                                  	;pop	dx
 18336                                  
 18337                                  ;;ifndef MULTI_CONFIG
 18338                                  	;jmp	stall
 18339                                  	; 24/10/2022
 18340                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18341 00000845 EBFE                    	jmp	short stall
 18342                                  ;;else
 18343                                  	; 23/10/2022
 18344                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18345                                  	;int	21h             ;
 18346                                  	;add	al,'A'          ;
 18347                                  	;mov	dl,al           ; DL == default drive letter
 18348                                  	;mov	si,commnd2
 18349                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18350                                  	;jne	short do_def2	; then try the 2nd alternate;
 18351                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18352                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18353                                  ;do_def2:			
 18354                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18355                                          ;jne	short do_alt    ; no
 18356                                  ;do_def3:
 18357                                  	;mov	si,commnd3
 18358                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18359                                  	;jne	short do_alt	; no
 18360                                  	;mov	si,commnd4
 18361                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18362                                  	;jne	short do_alt	; no
 18363                                  	;push	dx              ;
 18364                                  	;mov	dx,badcomprmpt
 18365                                  	;call	print		;
 18366                                  	;pop	dx              ; recover default drive letter in DL
 18367                                  ;request_input:			;
 18368                                  	;mov	ah,STD_CON_OUTPUT
 18369                                  	;int	21h             ;
 18370                                  	;push	dx              ;
 18371                                  	;mov	dl,'>'          ;
 18372                                  	;int	21h             ;
 18373                                  	;mov	bl,[tmplate+1]	;
 18374                                  	;mov	bh,0            ;
 18375                                  	;mov	byte [commnd+bx],0Dh
 18376                                  	;mov	dx,tmplate
 18377                                  	;mov	ah,STD_CON_STRING_INPUT
 18378                                  	;int	21h             ; read a line of input
 18379                                  	;mov	dx,crlfm	;
 18380                                  	;call	print           ;
 18381                                  	;pop	dx              ;
 18382                                  	;mov	bl,[tmplate+1]	;
 18383                                  	;or	bl,bl           ; was anything typed?
 18384                                  	;jz	short request_input ;
 18385                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18386                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18387                                  	;mov	word [command_line],0D00h
 18388                                  	;jmp	short do_exec   ;
 18389                                  ;do_alt:
 18390                                  	;push	ds
 18391                                  	;pop	es
 18392                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18393                                  	;mov	di,commnd	;
 18394                                  ;do_alt1:
 18395                                  	;lodsb			; copy the alternate, zapping it as we go,
 18396                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18397                                  	;stosb 			;
 18398                                  	;or	al,al		;
 18399                                  	;jnz	short do_alt1	;
 18400                                  	;mov	di,command_line
 18401                                  	;cmp	byte [si+2],':'
 18402                                  	;jne	short do_alt2	;
 18403                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18404                                  ;do_alt2:			;
 18405                                  	;lodsb			;
 18406                                  	;stosb			;
 18407                                  	;or	al,al           ;
 18408                                  	;jnz	short do_alt2   ;
 18409                                  	;mov	byte [di-1],cr
 18410                                  
 18411                                  ;;   Last but not least, see if we need to call disable_autoexec
 18412                                  
 18413                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18414                                  	;;cmp	[command_line-1],0
 18415                                          ;;jne	short do_exec   ;
 18416                                          ;;mov	[command_line-1],'/'
 18417                                  	;;call	disable_autoexec ;
 18418                                  
 18419                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18420                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18421                                  	;call	disable_autoexec
 18422                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18423                                  ;do_exec:
 18424                                  	;jmp     retry		;
 18425                                  
 18426                                  ;;endif	;MULTI_CONFIG
 18427                                  
 18428                                  ; 24/03/2019 - Retro DOS v4.0
 18429                                  
 18430                                  ; ----------------------------------------------------------------------
 18431                                  ; procedure : AllocFreeMem
 18432                                  ;
 18433                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18434                                  ; DOS is at temporary location when this call is being made
 18435                                  ;
 18436                                  ; Inputs : None
 18437                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18438                                  ;	   [area] & [memhi] set to the para value of the start of the
 18439                                  ;	   free memory.
 18440                                  ;
 18441                                  ; Uses   : AX, BX
 18442                                  ;
 18443                                  ; ----------------------------------------------------------------------
 18444                                  
 18445                                  	; 23/10/2022
 18446                                  AllocFreeMem:
 18447 00000847 BBFFFF                  	mov	bx,0FFFFh
 18448 0000084A B448                    	mov	ah,48h ; ALLOC
 18449 0000084C CD21                    	int	21h			; first time fails
 18450 0000084E B448                    	mov	ah,48h ; ALLOC
 18451 00000850 CD21                    	int	21h			; second time gets it
 18452                                  	; 11/12/2022
 18453                                  	; ds = cs
 18454                                  	;mov	[cs:area],ax
 18455                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18456 00000852 A3[E403]                	mov	[area],ax
 18457 00000855 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18458 00000858 C3                      	retn				; start of free memory
 18459                                  				
 18460                                  	; include msbio.cl6
 18461                                  ; ----------------------------------------------------------------------
 18462                                  DOSLOMSG:
 18463 00000859 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18463 00000862 7661696C61626C653A-
 18463 0000086B 204C6F6164696E6720-
 18463 00000874 444F53206C6F770D0A-
 18463 0000087D 24                 
 18464                                  FEmsg:
 18465 0000087E 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18465 00000887 6F723A2043616E6E6F-
 18465 00000890 7420616C6C6F636174-
 18465 00000899 65204D656D6F727920-
 18465 000008A2 666F7220444F530D0A-
 18465 000008AB 24                 
 18466                                  
 18467                                  ; ----------------------------------------------------------------------
 18468                                  ;
 18469                                  ; procedure : LoadDOSHiOrLo
 18470                                  ;
 18471                                  ;		Tries to move DOS into HMA. If it fails then loads
 18472                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18473                                  ;		moved; this just tries to allocate the HMA, and prints
 18474                                  ;		a message if this is not possible.
 18475                                  ;
 18476                                  ; ----------------------------------------------------------------------
 18477                                  
 18478                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18479                                  LoadDOSHiOrLo:
 18480                                  	; 27/03/2019 - Retro DOS v4.0
 18481                                  	; ds = cs
 18482 000008AC E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18483                                  	;jc	short LdngLo		; If that don't work...
 18484                                  	;retn
 18485                                  	; 18/12/2022
 18486 000008AF 731C                    	jnc	short LoadDosHi_ok
 18487                                  LdngLo:
 18488                                  	; 23/10/2022
 18489                                  	;push	cs
 18490                                  	;pop	ds
 18491                                  	; 11/12/2022
 18492                                  	; ds = cs
 18493 000008B1 B409                    	mov	ah,9
 18494 000008B3 BA[5908]                	mov	dx,DOSLOMSG		; inform user that we are
 18495 000008B6 CD21                    	int	21h			; loading low
 18496                                  
 18497                                  ;ifndef ROMDOS
 18498                                  	; actually move the dos, and reinitialize it.
 18499                                  
 18500 000008B8 BB0100                  	mov	bx,1				; M012
 18501                                  						;  use int 21 alloc for mem
 18502 000008BB E83F00                  	call	MovDOSLo
 18503                                  	; 11/12/2022
 18504                                  	; ds = cs
 18505                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18506                                  	; 23/10/2022
 18507 000008BE 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18508                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18509                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18510 000008C2 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18511                                  	; 11/12/2022
 18512                                  	; ds = cs
 18513                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18514 000008C4 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18515                                  	
 18516                                  ;endif ; ROMDOS
 18517                                  	; 23/10/2022
 18518                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18519                                  	; 11/12/2022
 18520                                  	; ds = cs
 18521 000008C8 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18522                                  LoadDosHi_ok:	; 18/12/2022
 18523 000008CD C3                      	retn
 18524                                  
 18525                                  ; ----------------------------------------------------------------------
 18526                                  ;
 18527                                  ; procedure : TryToMovDOSHi
 18528                                  ;
 18529                                  ;		This tries to move DOS into HMA.
 18530                                  ;		Returns CY if it failed.
 18531                                  ;		If it succeeds returns with carry cleared.
 18532                                  ;
 18533                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18534                                  ;		the A20 switching code in the low mem stub to be installed.
 18535                                  ; 
 18536                                  ; ----------------------------------------------------------------------
 18537                                  
 18538                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18539                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18540                                  TryToMovDOSHi:
 18541                                  	; 11/12/2022
 18542                                  	; 27/03/2019 - Retro DOS v4.0
 18543                                  	; ds = cs
 18544 000008CE E81300                  	call	MovDOSHi
 18545 000008D1 7210                    	jc	short ttldhx
 18546                                  
 18547                                  ;ifndef ROMDOS
 18548                                  	; 23/10/2022
 18549                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18550                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18551                                  	; 11/12/2022
 18552                                  	; ds = cs
 18553 000008D3 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18554                                  ;else
 18555                                  ;	..
 18556                                  ;endif ; ROMDOS
 18557                                  
 18558                                  	; 11/12/2022
 18559                                  	; ds = cs
 18560 000008D7 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18561                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18562 000008D9 FF1E[7B02]              	call	far [dos_segreinit]
 18563                                  	;mov	byte [cs:runhigh],1
 18564 000008DD C606[6A02]01            	mov	byte [runhigh],1
 18565 000008E2 F8                      	clc
 18566                                  ttldhx:
 18567 000008E3 C3                      	retn
 18568                                  
 18569                                  ; ----------------------------------------------------------------------
 18570                                  ;
 18571                                  ; procedure : MovDOSHi
 18572                                  ;
 18573                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18574                                  ;		For ROMDOS, the code is not actually moved, but the
 18575                                  ;		HMA is allocated and prepared for sub-allocation.
 18576                                  ;
 18577                                  ;		Returns : CY if it failed
 18578                                  ;
 18579                                  ; ----------------------------------------------------------------------
 18580                                  
 18581                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18582                                  MovDOSHi:
 18583                                  	; 14/05/2019
 18584                                  	; 27/03/2019 - Retro DOS v4.0
 18585                                  	; ds = cs
 18586 000008E4 E8D700                  	call	AllocHMA
 18587 000008E7 7213                    	jc	short mdhx			; did we get HMA?
 18588 000008E9 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18589 000008EC 8EC0                    	mov	es,ax
 18590                                  
 18591                                  ;ifndef ROMDOS
 18592                                  	; actually move the BIOS and DOS
 18593                                  
 18594                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18595                                  	; 24/03/2019
 18596                                  	
 18597                                  	; 23/10/2022
 18598 000008EE E83400                  	call	MovBIOS				; First move BIOS into HMA
 18599                                  
 18600                                  	; ES:DI points to free HMA after BIOS
 18601                                  	
 18602                                  	; 14/05/2019
 18603                                  	; 24/03/2019 - Retro DOS v4.0
 18604                                  	;xor	di,di
 18605                                  	
 18606                                  	; 23/10/2022
 18607                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18608                                  	; 11/12/2022
 18609                                  	; ds = cs
 18610 000008F1 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18611 000008F5 E81100                  	call	MovDOS				; and move it
 18612                                  
 18613                                  	; ES:DI points to free HMA after DOS
 18614                                  ;else
 18615                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18616                                  ;
 18617                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18618                                  ;
 18619                                  ;endif ; ROMDOS
 18620                                  
 18621 000008F8 E86102                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18622 000008FB F8                      	clc
 18623                                  mdhx:
 18624 000008FC C3                      	retn
 18625                                  
 18626                                  ; ----------------------------------------------------------------------
 18627                                  ;
 18628                                  ; procedure : MovDOSLo
 18629                                  ;
 18630                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18631                                  ;
 18632                                  ; ----------------------------------------------------------------------
 18633                                  
 18634                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18635                                  
 18636                                  ;ifndef ROMDOS
 18637                                  
 18638                                  MovDOSLo:
 18639                                  	; 14/05/2019
 18640                                  	; 27/03/2019 - Retro DOS v4.0
 18641                                  	; ds = cs
 18642 000008FD E84700                  	call	AllocMemForDOS			; incestuosly!!!
 18643                                  	
 18644                                  	; 23/10/2022
 18645                                  	; 14/05/2019
 18646                                  	;inc	ax  ; skip MCB
 18647                                  	
 18648 00000900 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18649                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18650                                  	; 24/03/2019
 18651                                  	
 18652                                  	; 23/10/2022
 18653 00000902 E82000                  	call	MovBIOS
 18654                                  
 18655                                  ;------ ES:DI points memory immediately after BIOS
 18656                                  
 18657                                  	; 14/05/2019
 18658                                  	; NOTE: 
 18659                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18660                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18661                                  
 18662                                  	; 24/03/2019 - Retro DOS v4.0
 18663                                  	;xor	di,di	
 18664                                  
 18665                                  	; 23/10/2022
 18666                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18667                                  	; 11/12/2022
 18668                                  	; ds = cs
 18669 00000905 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18670                                  	;call	MovDOS
 18671                                  	;retn
 18672                                  	; 11/12/2022
 18673                                  	;jmp	short MovDOS
 18674                                  
 18675                                  ;endif ; ROMDOS
 18676                                  
 18677                                  ; 11/12/2022
 18678                                  
 18679                                  ; ----------------------------------------------------------------------
 18680                                  ;
 18681                                  ; procedure : MovDOS
 18682                                  ;
 18683                                  ;		Moves DOS code into requested area
 18684                                  ;
 18685                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18686                                  ;	     CX    - size of DOS code to be moved
 18687                                  ;
 18688                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18689                                  ;
 18690                                  ; ----------------------------------------------------------------------
 18691                                  
 18692                                  	; 11/12/2022
 18693                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18694                                  
 18695                                  ;ifndef ROMDOS
 18696                                  
 18697                                  MovDOS:
 18698                                  	; 14/05/2019
 18699                                  	; 27/03/2019 - Retro DOS v4.0
 18700                                  
 18701                                  	; 11/12/2022
 18702                                  	; ds = cs
 18703                                  
 18704                                  	; 23/10/2022
 18705                                  	;push	ds ; *//
 18706                                  	
 18707 00000909 06                      	push	es
 18708 0000090A 57                      	push	di
 18709                                  
 18710                                  	; 11/12/2022
 18711 0000090B 1E                      	push	ds ; *// ; 11/12/202
 18712                                  
 18713                                  	; 29/04/2019
 18714 0000090C C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18715                                  	; 23/10/2022
 18716                                  	;lds	si,[cs:dosinit]
 18717                                  	;;mov	ax,si
 18718                                  
 18719 00000910 F3A4                    	rep	movsb
 18720                                  
 18721 00000912 1F                      	pop	ds ; *// ; 11/12/2022
 18722                                  
 18723 00000913 5B                      	pop	bx				; get back offset into which
 18724                                  						;  DOS was moved
 18725                                  
 18726 00000914 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18727                                  						;  wants to run
 18728 00000918 29D8                    	sub	ax,bx
 18729 0000091A E8A102                  	call	off_to_para
 18730 0000091D 5B                      	pop	bx				; get the segment at which
 18731                                  						;  we moved DOS into
 18732 0000091E 29C3                    	sub	bx,ax				; Adjust segment
 18733                                  	
 18734                                  	; 11/12/2022
 18735                                  	; 23/10/2022
 18736                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18737                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18738                                  	; 11/12/2022
 18739 00000920 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18740                                  		
 18741                                  	; 27/03/2019
 18742                                  	;pop	ds ; *//
 18743                                  	; ds = cs
 18744                                  	;mov	[FINAL_DOS_LOCATION],bx
 18745                                  
 18746 00000924 C3                      	retn
 18747                                  
 18748                                  ;endif ;ROMDOS
 18749                                  
 18750                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18751                                  ; 24/03/2019
 18752                                  ; ----------------------------------------------------------------------
 18753                                  ;
 18754                                  ; procedure : MovBIOS
 18755                                  ;
 18756                                  ;		Moves BIOS code into requested segment
 18757                                  ;
 18758                                  ;	In : ES - segment to which BIOS is to be moved
 18759                                  ;		  ( it moves always into offset BCode_Start)
 18760                                  ;
 18761                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18762                                  ;
 18763                                  ; ----------------------------------------------------------------------
 18764                                  
 18765                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18766                                  
 18767                                  ;ifndef ROMDOS
 18768                                  
 18769                                  MovBIOS: ; proc	near
 18770                                  	; 11/12/2022
 18771 00000925 1E                      	push	ds ; ds = cs	
 18772                                  	;
 18773                                  	; 23/10/2022
 18774                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18775                                  	; 17/09/2023
 18776 00000926 8E1E[8702]              	mov	ds,[temp_bcode_seg]	
 18777                                  	;mov	si,BCODE_START ; mov si,30h
 18778                                  	; 09/12/2022
 18779 0000092A BE[3000]                	mov	si,BCODESTART
 18780 0000092D 89F7                    	mov	di,si
 18781 0000092F B9F019                  	mov	cx,BCODE_END ; mov cx,1A60h
 18782 00000932 29F1                    	sub	cx,si				; size of BIOS
 18783 00000934 D1E9                    	shr	cx,1				; Both the labels are para
 18784                                  						;  aligned
 18785 00000936 F3A5                    	rep	movsw
 18786                                  	
 18787                                  	; 11/12/2022
 18788 00000938 1F                      	pop	ds ; ds = cs
 18789                                  	;
 18790 00000939 06                      	push	es
 18791 0000093A 57                      	push	di				; save end of BIOS
 18792 0000093B 8CC0                    	mov	ax,es
 18793                                  	;
 18794                                  	; 11/12/2022
 18795                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18796                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18797                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18798                                  	; ds = cs
 18799 0000093D A3[0004]                	mov	[BCodeSeg],ax
 18800 00000940 FF1E[8502]              	call	far [seg_reinit_ptr]
 18801                                  	;
 18802 00000944 5F                      	pop	di
 18803 00000945 07                      	pop	es				; get back end of BIOS
 18804 00000946 C3                      	retn
 18805                                  
 18806                                  ;MovBIOS endp
 18807                                  
 18808                                  ;endif ; ROMDOS
 18809                                  
 18810                                  ; 11/12/2022
 18811                                  %if 0
 18812                                  
 18813                                  ; 24/03/2019
 18814                                  
 18815                                  ; ----------------------------------------------------------------------
 18816                                  ;
 18817                                  ; procedure : MovDOS
 18818                                  ;
 18819                                  ;		Moves DOS code into requested area
 18820                                  ;
 18821                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18822                                  ;	     CX    - size of DOS code to be moved
 18823                                  ;
 18824                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18825                                  ;
 18826                                  ; ----------------------------------------------------------------------
 18827                                  
 18828                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18829                                  
 18830                                  ;ifndef ROMDOS
 18831                                  
 18832                                  MovDOS:
 18833                                  	; 14/05/2019
 18834                                  	; 27/03/2019 - Retro DOS v4.0
 18835                                  
 18836                                  	; 11/12/2022
 18837                                  	; ds = cs
 18838                                  
 18839                                  	; 23/10/2022
 18840                                  	;push	ds ; *//
 18841                                  	
 18842                                  	push	es
 18843                                  	push	di
 18844                                  
 18845                                  	; 11/12/2022
 18846                                  	push	ds ; *// ; 11/12/202
 18847                                  
 18848                                  	; 29/04/2019
 18849                                  	lds	si,[dosinit] ; 11/12/2022
 18850                                  	; 23/10/2022
 18851                                  	;lds	si,[cs:dosinit]
 18852                                  	;;mov	ax,si
 18853                                  
 18854                                  	rep	movsb
 18855                                  
 18856                                  	pop	ds ; *// ; 11/12/2022
 18857                                  
 18858                                  	pop	bx				; get back offset into which
 18859                                  						;  DOS was moved
 18860                                  
 18861                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18862                                  						;  wants to run
 18863                                  	sub	ax,bx
 18864                                  	call	off_to_para
 18865                                  	pop	bx				; get the segment at which
 18866                                  						;  we moved DOS into
 18867                                  	sub	bx,ax				; Adjust segment
 18868                                  	
 18869                                  	; 11/12/2022
 18870                                  	; 23/10/2022
 18871                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18872                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18873                                  	; 11/12/2022
 18874                                  	mov	[CURRENT_DOS_LOCATION],bx
 18875                                  		
 18876                                  	; 27/03/2019
 18877                                  	;pop	ds ; *//
 18878                                  	; ds = cs
 18879                                  	;mov	[FINAL_DOS_LOCATION],bx
 18880                                  
 18881                                  	retn
 18882                                  
 18883                                  ;endif ;ROMDOS
 18884                                  
 18885                                  %endif
 18886                                  
 18887                                  ; ----------------------------------------------------------------------
 18888                                  ;
 18889                                  ; procedure : AllocMemForDOS
 18890                                  ;
 18891                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18892                                  ;
 18893                                  ;	Out : AX - seg of allocated memoryblock
 18894                                  ;
 18895                                  ; ----------------------------------------------------------------------
 18896                                  
 18897                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18898                                  
 18899                                  ;ifndef ROMDOS
 18900                                  
 18901                                  AllocMemForDOS:
 18902                                  	; 11/12/2022
 18903                                  	; 14/05/2019
 18904                                  	; 27/03/2019 - Retro DOS v4.0
 18905                                  	; ds = cs
 18906                                  	;mov	ax,BCode_end
 18907                                  	;sub	ax,BCode_start		; BIOS code size
 18908                                  	; 23/10/2022
 18909 00000947 B8F019                  	mov	ax,BCODE_END ; 1A60h
 18910                                  	;sub	ax,BCODE_START ; 30h
 18911                                  	; 09/12/2022
 18912 0000094A 2D[3000]                	sub	ax,BCODESTART 
 18913                                  	; 24/03/2019 - Retro DOS v4.0 
 18914                                  	; 02/11/2022
 18915                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18916                                  	; 11/12/2022
 18917                                  	; ds = cs
 18918 0000094D 0306[7F02]              	add	ax,[lo_doscod_size]
 18919 00000951 83C00F                  	add	ax,15
 18920 00000954 E86702                  	call	off_to_para			; convert to para
 18921                                  	; 23/10/2022
 18922                                  	; 14/05/2019
 18923                                  	;inc	ax ; + 1 paragraph for MCB
 18924 00000957 09DB                    	or	bx,bx				; M012
 18925 00000959 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18926 0000095B 741A                    	jz	short update_arena		; M012
 18927 0000095D B448                    	mov	ah,48h				; request DOS
 18928 0000095F CD21                    	int	21h
 18929 00000961 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18930                                   	; 23/10/2022
 18931                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18932 00000963 83E803                  	sub	ax,3				; Take care ORG 30h of
 18933                                  						;  BIOS code
 18934 00000966 8EC0                    	mov	es,ax
 18935                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18936                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18937                                  	; 14/05/2019
 18938                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18939                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18940                                  	; 23/10/2022
 18941 00000968 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18942 0000096F 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18943                                  
 18944 00000976 C3                      	retn
 18945                                  
 18946                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18947                                  ;	  using DOS itself causes an arena to be generated.
 18948                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18949                                  ;	  assume that the device drivers are loaded into
 18950                                  ;	  the first arena. For this reason, MagicDrv's
 18951                                  ;	  main device driver header arena is manually
 18952                                  ;	  truncated from the arena chain, and the space
 18953                                  ;	  for DOS is allocated using the following
 18954                                  ;	  simple code, which also assumes that the
 18955                                  ;	  first arena is the free one where DOS's low
 18956                                  ;	  stub will go.
 18957                                  ;
 18958                                  ; M012 : BEGIN
 18959                                  
 18960                                  	; 23/10/2022
 18961                                  update_arena:
 18962 00000977 1E                      	push	ds ; ds = cs
 18963 00000978 57                      	push	di
 18964 00000979 51                      	push	cx
 18965 0000097A 52                      	push	dx
 18966                                  	; 23/10/2022
 18967                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18968                                  	; 11/12/2022
 18969                                  	; ds = cs 
 18970 0000097B C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18971 0000097F 4F                      	dec	di
 18972 00000980 4F                      	dec	di				; Arena head is immediately
 18973                                  						;  before sysvar
 18974 00000981 8E05                    	mov	es,[di]				; es = arena head
 18975                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18976 00000983 268B0E0300              	mov	cx,[es:3]
 18977 00000988 39D9                    	cmp	cx,bx				; is it sufficient ?
 18978 0000098A 7227                    	jb	short FatalErr			; no, fatal error
 18979                                  
 18980                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18981 0000098C 268A160000              	mov	dl,[es:0]
 18982 00000991 8CC0                    	mov	ax,es
 18983 00000993 01D8                    	add	ax,bx				; ax = new arena head
 18984 00000995 8905                    	mov	[di],ax				; store it in DOS data area
 18985 00000997 8ED8                    	mov	ds,ax
 18986                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18987 00000999 88160000                	mov	[0],dl
 18988                                  	;mov	word [ARENA.OWNER],0		; free
 18989 0000099D C70601000000            	mov	word [1],0
 18990 000009A3 29D9                    	sub	cx,bx				; size of the new block
 18991                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18992 000009A5 890E0300                	mov	[3],cx
 18993 000009A9 8CC0                    	mov	ax,es				; return seg to the caller
 18994                                  	; 23/10/2022
 18995                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18996 000009AB 83E803                  	sub	ax,3				;  BIOS code
 18997 000009AE 5A                      	pop	dx
 18998 000009AF 59                      	pop	cx
 18999 000009B0 5F                      	pop	di
 19000 000009B1 1F                      	pop	ds ; ds = cs
 19001 000009B2 C3                      	retn
 19002                                  ;
 19003                                  ; M012 : END
 19004                                  ;
 19005                                  FatalErr:
 19006 000009B3 0E                      	push	cs
 19007 000009B4 1F                      	pop	ds
 19008 000009B5 BA[7E08]                	mov	dx,FEmsg
 19009 000009B8 B409                    	mov	ah,9
 19010 000009BA CD21                    	int	21h 		; DOS - PRINT STRING
 19011                                  				; DS:DX -> string terminated by "$"
 19012                                          ;jmp	stall
 19013                                  	; 23/10/2022
 19014 000009BC FA                      	cli
 19015 000009BD F4                      	hlt
 19016                                  
 19017                                  ;endif ;ROMDOS
 19018                                  
 19019                                  ; 25/03/2019 - Retro DOS v4.0
 19020                                  
 19021                                  ; ----------------------------------------------------------------------
 19022                                  ;
 19023                                  ; procedure : AllocHMA
 19024                                  ;
 19025                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19026                                  ;	  up there. If it gets any sort of error, it will return with
 19027                                  ;	  carry set so that we can resort to running low.
 19028                                  ;
 19029                                  ;	It also returns ES: -> 0ffffh if it returns success
 19030                                  ;
 19031                                  ; ----------------------------------------------------------------------
 19032                                  
 19033                                  AllocHMA:
 19034                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19035                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19036                                  ;		   been deleted because it can be recycled for skipping the
 19037                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19038                                  ;		   in the case of a pre-286.
 19039                                  
 19040                                  ;;	see if we're running on a pre-286. If not, force low.
 19041                                  ;
 19042                                  ;	xor	ax,ax
 19043                                  ;	pushf			; save flags (like int)
 19044                                  ;	push	ax
 19045                                  ;	popf
 19046                                  ;	pushf
 19047                                  ;	pop	ax
 19048                                  ;	popf			; restore original flags (like int)
 19049                                  ;	and	ax,0F000h
 19050                                  ;	cmp	ax,0F000h	; 8088/8086?
 19051                                  ;	jz	short grab_hma_error
 19052                                  
 19053                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19054                                  	; (SYSINIT:0A26h)
 19055                                  
 19056 000009BE 1E                      	push	ds
 19057                                  	;;mov	ax,Bios_Data
 19058                                  	;mov	ax,KERNEL_SEGMENT
 19059                                  	; 21/10/2022
 19060 000009BF B87000                  	mov	ax,DOSBIODATASEG
 19061 000009C2 8ED8                    	mov	ds,ax
 19062                                  
 19063 000009C4 E84A00                  	call	IsXMSLoaded
 19064 000009C7 7545                    	jnz	short grabhma_error
 19065                                  
 19066 000009C9 B81043                  	mov	ax,4310h
 19067 000009CC CD2F                    	int	2Fh		; get the vector into es:bx
 19068                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19069                                  		; Return: ES:BX -> driver entry point
 19070                                  
 19071 000009CE 891E[0E00]              	mov	[xms],bx
 19072                                  	;mov	[0Eh], bx
 19073 000009D2 8C06[1000]              	mov	[xms+2],es
 19074                                  	;mov	[10h],es
 19075                                  
 19076 000009D6 B401                    	mov	ah,1		; request HMA
 19077 000009D8 BAFFFF                  	mov	dx,0FFFFh
 19078                                  	;call	dword ptr ds:0Eh
 19079 000009DB FF1E[0E00]              	call	far [xms]
 19080 000009DF 48                      	dec	ax
 19081 000009E0 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19082                                  
 19083                                  ;------ Himem may be lying because it has allocated mem for int 15
 19084                                  
 19085 000009E2 B488                    	mov	ah,88h
 19086 000009E4 CD15                    	int	15h
 19087                                  		; Get Extended Memory Size
 19088                                  		; Return: CF clear on success
 19089                                  		; AX = size of memory above 1M in K
 19090 000009E6 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19091                                  	;jb	short grabhma_error
 19092                                  	; 11/12/2022
 19093 000009E9 7224                    	jb	short grabhma_err ; cf=1
 19094                                  allocHMA_1:
 19095 000009EB B405                    	mov	ah,5		; localenableA20
 19096                                  	;call	dword ptr ds:0Eh
 19097 000009ED FF1E[0E00]              	call	far [xms]
 19098 000009F1 48                      	dec	ax
 19099 000009F2 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19100                                  
 19101 000009F4 E88901                  	call	IsVDiskInstalled
 19102 000009F7 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19103                                  
 19104 000009F9 B8FFFF                  	mov	ax,0FFFFh
 19105 000009FC 8EC0                    	mov	es,ax
 19106 000009FE 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19107 00000A05 26813E10003412          	cmp	word [es:10h],1234h
 19108                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19109                                  	; 11/12/2022
 19110 00000A0C 7401                    	je	short allocHMA_ok	
 19111                                  
 19112                                  ; 11/12/2022
 19113                                  ;	; 11/12/2022
 19114                                  ;	; cf=0
 19115                                  ;	;clc
 19116                                  ;	pop	ds
 19117                                  ;	retn
 19118                                  
 19119                                  grabhma_error:
 19120 00000A0E F9                      	stc
 19121                                  	; 11/12/022
 19122                                  grabhma_err:	; cf=1
 19123                                  allocHMA_ok:	; cf=0
 19124 00000A0F 1F                      	pop	ds
 19125 00000A10 C3                      	retn
 19126                                  
 19127                                  ; ----------------------------------------------------------------------
 19128                                  ;
 19129                                  ; procedure : IsXMSLoaded
 19130                                  ;
 19131                                  ;             Checks whether a XMS driver is loaded
 19132                                  ;
 19133                                  ; Returns : Z flag set if XMS driver loaded
 19134                                  ;           Z flag reset if no XMS drivers are present
 19135                                  ;
 19136                                  ; ----------------------------------------------------------------------
 19137                                  
 19138                                  IsXMSLoaded:
 19139 00000A11 B80043                  	mov	ax,4300h
 19140 00000A14 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19141                                  				; Return: AL = 80h XMS driver installed
 19142                                  				; AL <> 80h no driver
 19143 00000A16 3C80                    	cmp	al,80h		; XMS installed?
 19144 00000A18 C3                      	retn
 19145                                  
 19146                                  ; ----------------------------------------------------------------------
 19147                                  ; procedure : FTryToMovDOSHi
 19148                                  ;
 19149                                  ;		Called from HMA suballoc calls
 19150                                  ;	
 19151                                  ; ----------------------------------------------------------------------
 19152                                  
 19153                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19154                                  	; (SYSINIT:0A84h)
 19155                                  
 19156                                  FTryToMovDOSHi:	; proc	far
 19157                                  
 19158 00000A19 50                      	push	ax
 19159 00000A1A 53                      	push	bx
 19160 00000A1B 51                      	push	cx
 19161 00000A1C 52                      	push	dx
 19162 00000A1D 56                      	push	si
 19163 00000A1E 57                      	push	di
 19164 00000A1F 1E                      	push	ds
 19165 00000A20 06                      	push	es
 19166                                  
 19167                                  	; 23/10/2022
 19168                                  	; 27/03/2019 - Retro DOS v4.0
 19169                                  	; 11/12/2022
 19170 00000A21 0E                      	push	cs
 19171 00000A22 1F                      	pop	ds
 19172                                  
 19173                                  	;cmp	byte [cs:runhigh],0FFh
 19174                                  	; 11/12/2022
 19175 00000A23 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19176 00000A28 7503                    	jne	short _ftymdh_1
 19177                                  
 19178                                  	; ds = cs
 19179 00000A2A E8A1FE                  	call	TryToMovDOSHi
 19180                                  _ftymdh_1:
 19181 00000A2D 07                      	pop	es
 19182 00000A2E 1F                      	pop	ds
 19183 00000A2F 5F                      	pop	di
 19184 00000A30 5E                      	pop	si
 19185 00000A31 5A                      	pop	dx
 19186 00000A32 59                      	pop	cx
 19187 00000A33 5B                      	pop	bx
 19188 00000A34 58                      	pop	ax
 19189                                  
 19190 00000A35 CB                      	retf
 19191                                  
 19192                                  ; ----------------------------------------------------------------------
 19193                                  ;
 19194                                  ; following piece of code will be moved into a para boundary. And the para
 19195                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19196                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19197                                  ; to determine free extended memory.
 19198                                  ;
 19199                                  ; For more details read "power programming" column by Ray Duncan in the
 19200                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19201                                  ;
 19202                                  ; ----------------------------------------------------------------------
 19203                                  
 19204                                  StartVDHead:
 19205                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19206                                  
 19207 00000A36 00000000                	dd	0		; link to next device driver
 19208 00000A3A 0080                    	dw	8000h		; device attribute
 19209 00000A3C 0000                    	dw	0		; strategy routine offset
 19210 00000A3E 0000                    	dw	0		; interrupt routine offset
 19211 00000A40 01                      	db	1		; number of units
 19212                                  	;db	7 dup(0) 
 19213 00000A41 00<rep 7h>              	times	7 db 0 		; reserved area
 19214                                  VDiskSig1:
 19215 00000A48 564449534B              	db	'VDISK'
 19216                                  
 19217                                  VLEN1	equ	($-VDiskSig1)
 19218                                  
 19219 00000A4D 202056332E33            	db	'  V3.3'	; vdisk label
 19220                                  	;db	15 dup (0)	; pad
 19221 00000A53 00<rep Fh>              	times	15 db 0
 19222 00000A62 0000                    	dw	0		; bits 0-15 of free HMA
 19223 00000A64 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19224                                  VDInt19:
 19225 00000A65 EA                      	db	0EAh		; jmp to old vector
 19226                                  OldVDInt19:
 19227 00000A66 00000000                	dd	0		; Saved int 19 vector
 19228                                  
 19229                                  EndVDHead: ; label byte
 19230                                  
 19231                                  VDiskHMAHead:	
 19232 00000A6A 000000                  	db	0,0,0		; non-bootable disk
 19233                                  VDiskSig2:
 19234 00000A6D 564449534B              	db	'VDISK'
 19235                                  
 19236                                  VLEN2	equ	($-VDiskSig2)
 19237                                  
 19238 00000A72 332E33                  	db	'3.3'		; OEM - signature
 19239 00000A75 8000                    	dw	128		; number of bytes/sector
 19240 00000A77 01                      	db	1		; sectors/cluster
 19241 00000A78 0100                    	dw	1		; reserved sectors
 19242 00000A7A 01                      	db	1		; number of FAT copies
 19243 00000A7B 4000                    	dw	64		; number of root dir entries
 19244 00000A7D 0002                    	dw	512		; number of sectors
 19245 00000A7F FE                      	db	0FEh		; media descriptor
 19246 00000A80 0600                    	dw	6		; number of sectors/FAT
 19247 00000A82 0800                    	dw	8		; sectors per track
 19248 00000A84 0100                    	dw	1		; number of heads
 19249 00000A86 0000                    	dw	0		; number of hidden sectors
 19250 00000A88 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19251                                  
 19252                                  EndVDiskHMAHead: ; label byte
 19253                                  
 19254                                  ; ----------------------------------------------------------------------
 19255                                  ;
 19256                                  ; procedure : InstVDiskHeader
 19257                                  ;
 19258                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19259                                  ;	      It puts a 32 byte header at 10000:0 and
 19260                                  ;	      another header at (seg of int19):0
 19261                                  ;
 19262                                  ; Inputs : None
 19263                                  ;
 19264                                  ; Outputs : None
 19265                                  ;
 19266                                  ; USES : DS,SI,AX,CX,DX
 19267                                  ;
 19268                                  ; ----------------------------------------------------------------------
 19269                                  
 19270                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19271                                  
 19272                                  InstVDiskHeader:
 19273 00000A8A 31C0                    	xor	ax,ax
 19274 00000A8C 8ED8                    	mov	ds,ax			; seg of int vect table
 19275                                  
 19276                                  ;-------------- save old int 19 vector
 19277                                  
 19278                                  	; 23/10/2022
 19279 00000A8E A16400                  	mov	ax,[19h*4]
 19280                                  	;mov	[OldVDInt19],ax
 19281 00000A91 2EA3[660A]              	mov	[cs:OldVDInt19],ax
 19282 00000A95 A16600                  	mov	ax,[19h*4+2]
 19283                                  	;mov	[OldVDInt19+2],ax
 19284 00000A98 2EA3[680A]              	mov	[cs:OldVDInt19+2],ax
 19285                                  
 19286                                  ;-------------- calculate seg of new int 19 handler
 19287                                  
 19288 00000A9C B448                    	mov	ah,48h			; allocate memory
 19289                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19290                                  	; 23/10/2022
 19291 00000A9E BB0400                  	mov	bx,4
 19292 00000AA1 CD21                    	int	21h
 19293                                  
 19294                                  ;	if carry, fatal hanging error!!!!!
 19295                                  
 19296 00000AA3 48                      	dec	ax			; point to arena
 19297 00000AA4 8EC0                    	mov	es,ax
 19298                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19299 00000AA6 26C70601000800          	mov	word [es:1],8
 19300                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19301 00000AAD 26C70608005343          	mov	word [es:8],'SC'
 19302 00000AB4 40                      	inc	ax
 19303 00000AB5 8EC0                    	mov	es,ax			; get back to allocated memory
 19304                                  
 19305                                  ;-------------- install new int 19 vector
 19306                                  
 19307 00000AB7 FA                      	cli				; no reboots at this time
 19308                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19309 00000AB8 C70664002F00            	mov	word [19h*4],47
 19310 00000ABE A36600                  	mov	[19h*4+2],ax
 19311                                  
 19312                                  ;-------------- move the code into proper place
 19313                                  
 19314                                  	;mov	cx,(EndVDHead-StartVDHead)
 19315 00000AC1 B93400                  	mov	cx,52
 19316 00000AC4 BE[360A]                	mov	si,StartVDHead
 19317 00000AC7 31FF                    	xor	di,di
 19318 00000AC9 0E                      	push	cs
 19319 00000ACA 1F                      	pop	ds
 19320 00000ACB FC                      	cld
 19321 00000ACC F3A4                    	rep	movsb
 19322 00000ACE FB                      	sti				; BUGBUG is sti OK now?
 19323                                  
 19324                                  ;-------------- mov the HMA VDisk head into HMA
 19325                                  
 19326                                  	; 23/10/2022
 19327 00000ACF 57                      	push	di
 19328 00000AD0 06                      	push	es
 19329                                  
 19330 00000AD1 B8FFFF                  	mov	ax,0FFFFh
 19331 00000AD4 8EC0                    	mov	es,ax
 19332 00000AD6 BF1000                  	mov	di,10h
 19333                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19334 00000AD9 B92000                  	mov	cx,32
 19335 00000ADC BE[6A0A]                	mov	si,VDiskHMAHead
 19336 00000ADF F3A4                    	rep	movsb			; ds already set to cs
 19337                                  
 19338 00000AE1 5F                      	pop	di
 19339 00000AE2 07                      	pop	es
 19340                                  
 19341 00000AE3 C3                      	retn
 19342                                  
 19343                                  ; ----------------------------------------------------------------------
 19344                                  ; procedure : ClrVDISKHeader
 19345                                  ;
 19346                                  ;		Clears the first 32 bytes at 1MB boundary
 19347                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19348                                  ;		left by previous DOS=HIGH session
 19349                                  ;
 19350                                  ; ----------------------------------------------------------------------
 19351                                  
 19352                                  struc desc
 19353 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19354 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19355 00000004 ??                       .hi_byte:	resb 	1		; address
 19356 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19357 00000006 ????                     .reserved:	resw	1		;
 19358                                   .size:
 19359                                  endstruc
 19360                                  
 19361                                  		; 23/10/2022
 19362                                  bmove:		;label byte
 19363                                  
 19364                                  dummy:		;times desc.size db 0	; desc	<>
 19365 00000AE4 00<rep 8h>              		times 8 db 0		 
 19366                                  gdt:		;times desc.size db 0	; desc	<>
 19367 00000AEC 00<rep 8h>              		times 8 db 0
 19368 00000AF4 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19369 00000AF6 0000                    		dw	0
 19370 00000AF8 00                      		db	0
 19371 00000AF9 93                      		db	93h
 19372 00000AFA 0000                    		dw	0
 19373 00000AFC FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19374 00000AFE 0000                    		dw	0
 19375 00000B00 10                      		db	10h
 19376 00000B01 93                      		db	93h
 19377 00000B02 0000                    		dw	0
 19378                                  
 19379                                  rombios_code:	;times desc.size db 0	; desc	<>
 19380 00000B04 00<rep 8h>              		times 8 db 0
 19381                                  temp_stack:	;times desc.size db 0	; desc	<>
 19382 00000B0C 00<rep 8h>              		times 8 db 0
 19383                                  
 19384 00000B14 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19385                                  
 19386                                  
 19387                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19388                                  
 19389                                  ClrVDISKHeader:	; proc	near
 19390                                  
 19391                                  ;;-----------------------------------------------------------	      ;I070
 19392                                  ;; The following workaround get around a problem with the	      ;I070
 19393                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19394                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19395                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19396                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19397                                  ;; move crashes the system. We can do this because these	      ;I070
 19398                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19399                                  ;								      ;I070
 19400                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19401                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19402                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19403                                  ;                                      ; Check for Tortugas...	      ;I070
 19404                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19405                                  ;               je      short ClrVDISKno                              ;I070
 19406                                  ;                                      ; Check for mod 30-286	      ;I070
 19407                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19408                                  ;               jne     short ClrVDISKok			      ;I070
 19409                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19410                                  ;								      ;I070
 19411                                  ;ClrVDISKok:							      ;I070
 19412                                  ;-----------------------------------------------------------	      ;I070
 19413                                  
 19414                                  	; 12/12/2022
 19415                                  	; ds = cs
 19416                                  
 19417 00000B34 06                      	push	es
 19418 00000B35 8CC8                    	mov	ax,cs
 19419 00000B37 89C2                    	mov	dx,ax
 19420 00000B39 B10C                    	mov	cl,12
 19421 00000B3B D3EA                    	shr	dx,cl
 19422 00000B3D B104                    	mov	cl,4
 19423 00000B3F D3E0                    	shl	ax,cl
 19424 00000B41 05[140B]                	add	ax,ClrdVDISKHead
 19425 00000B44 80D200                  	adc	dl,0
 19426                                  
 19427                                  	;; 23/10/2022
 19428                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19429                                  	;mov	[cs:src_desc+2],ax
 19430                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19431                                  	;mov	[cs:src_desc+4],dl
 19432                                  	; 12/12/2022
 19433                                  	;mov	[src_desc+desc.lo_word],ax
 19434 00000B47 A3[F60A]                	mov	[src_desc+2],ax
 19435                                  	;mov	[src_desc+desc.hi_byte],dl
 19436 00000B4A 8816[F80A]              	mov	[src_desc+4],dl
 19437                                  
 19438 00000B4E B91000                  	mov	cx,16	; 16 words
 19439 00000B51 0E                      	push	cs
 19440 00000B52 07                      	pop	es
 19441 00000B53 BE[E40A]                	mov	si,bmove
 19442 00000B56 B487                    	mov	ah,87h
 19443 00000B58 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19444                                  			; CX = number of words to move 
 19445                                  			; ES:SI -> global descriptor table
 19446                                  			; Return: CF set on error, AH = status
 19447 00000B5A 07                      	pop	es
 19448 00000B5B C3                      	retn
 19449                                  
 19450                                  ; ----------------------------------------------------------------------
 19451                                  ;
 19452                                  ; procedure : SaveFreeHMAPtr
 19453                                  ;
 19454                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19455                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19456                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19457                                  ;		the offset.
 19458                                  ;
 19459                                  ; Inputs : ES:DI - pointer to free HMA
 19460                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19461                                  ;
 19462                                  ; ----------------------------------------------------------------------
 19463                                  
 19464                                  SaveFreeHMAPtr:
 19465 00000B5C 8CC3                    	mov	bx,es
 19466 00000B5E B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19467 00000B61 29D8                    	sub	ax,bx
 19468 00000B63 83C70F                  	add	di,15			; para round
 19469 00000B66 83E7F0                  	and	di,0FFF0h
 19470 00000B69 B104                    	mov	cl,4
 19471 00000B6B D3E0                    	shl	ax,cl
 19472 00000B6D 29C7                    	sub	di,ax
 19473 00000B6F 1E                      	push	ds
 19474                                  	;;mov	ax,Bios_Data ; 0070h
 19475                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19476                                  	; 21/10/2022
 19477 00000B70 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19478 00000B73 8ED8                    	mov	ds,ax
 19479 00000B75 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19480 00000B79 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19481 00000B7E 1F                      	pop	ds
 19482 00000B7F C3                      	retn
 19483                                  
 19484                                  ; ----------------------------------------------------------------------
 19485                                  ;
 19486                                  ; procedure : IsVDiskInstalled
 19487                                  ;
 19488                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19489                                  ;		& INT 19 vector
 19490                                  ;
 19491                                  ; Inputs  : A20 flag should be ON
 19492                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19493                                  ;
 19494                                  ; ----------------------------------------------------------------------
 19495                                  
 19496                                  IsVDiskInstalled:
 19497 00000B80 31C0                    	xor	ax,ax
 19498 00000B82 8ED8                    	mov	ds,ax
 19499 00000B84 8E1E4E00                	mov	ds,[19*4+2]
 19500                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19501                                  	; 23/10/2022
 19502 00000B88 BE1200                  	mov	si,18
 19503                                  	;mov	cx,VLEN1 ; 5
 19504 00000B8B B90500                  	mov	cx,5
 19505 00000B8E 0E                      	push	cs
 19506 00000B8F 07                      	pop	es
 19507 00000B90 BF[480A]                	mov	di,VDiskSig1
 19508 00000B93 F3A6                    	rep	cmpsb
 19509 00000B95 7410                    	je	short ivdins_retn
 19510 00000B97 B8FFFF                  	mov	ax,0FFFFh
 19511 00000B9A 8ED8                    	mov	ds,ax
 19512                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19513 00000B9C BE1300                  	mov	si,13h
 19514 00000B9F BF[6D0A]                	mov	di,VDiskSig2
 19515                                  	;mov	cx,VLEN2  ; 5
 19516 00000BA2 B90500                  	mov	cx,5
 19517 00000BA5 F3A6                    	rep	cmpsb
 19518                                  ivdins_retn: 
 19519 00000BA7 C3                      	retn			; returns the Zero flag
 19520                                  
 19521                                  ; ----------------------------------------------------------------------
 19522                                  ;
 19523                                  ; procedure : CPMHack
 19524                                  ;
 19525                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19526                                  ;		for CPM compatibility
 19527                                  ;
 19528                                  ; ----------------------------------------------------------------------
 19529                                  
 19530                                  	; 11/12/2022
 19531                                  CPMHack:
 19532 00000BA8 1E                      	push	ds
 19533 00000BA9 B9FFFF                  	mov	cx,0FFFFh
 19534 00000BAC 8EC1                    	mov	es,cx		; ES = FFFF
 19535                                  	;xor	cx,cx
 19536                                  	; 11/12/2022
 19537 00000BAE 41                      	inc	cx  ; cx = 0
 19538 00000BAF 8ED9                    	mov	ds,cx		; DS = 0
 19539 00000BB1 BEC000                  	mov	si,0C0h
 19540 00000BB4 BFD000                  	mov	di,0D0h
 19541                                  	;mov	cx,5
 19542 00000BB7 B105                    	mov	cl,5
 19543 00000BB9 FC                      	cld
 19544 00000BBA F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19545 00000BBC 1F                      	pop	ds
 19546 00000BBD C3                      	retn
 19547                                  
 19548                                  ; ----------------------------------------------------------------------
 19549                                  ;
 19550                                  ; procedure : off_to_para
 19551                                  ;
 19552                                  ; ----------------------------------------------------------------------
 19553                                  off_to_para:
 19554 00000BBE D1E8                    	shr	ax,1
 19555 00000BC0 D1E8                    	shr	ax,1
 19556 00000BC2 D1E8                    	shr	ax,1
 19557 00000BC4 D1E8                    	shr	ax,1
 19558 00000BC6 C3                      	retn
 19559                                  
 19560                                  ; ----------------------------------------------------------------------
 19561                                  ;**	TempCDS - Create (Temporary?) CDS
 19562                                  ;
 19563                                  ;	ENTRY	?? BUGBUG
 19564                                  ;		(DS) = SysInitSeg
 19565                                  ;	EXIT	?? BUGBUG
 19566                                  ;	USES	?? BUGBUG
 19567                                  ; ----------------------------------------------------------------------
 19568                                  
 19569                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19570                                  TempCDS:
 19571 00000BC7 C43E[6B02]              	les	di,[DOSINFO]
 19572 00000BCB 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19573                                  	;mov	cl,[es:di+20h]
 19574 00000BCF 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19575                                  
 19576 00000BD1 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19577                                  	;mov	[es:di+21h],cl	
 19578                                  
 19579 00000BD5 88C8                    	mov	al,cl
 19580 00000BD7 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19581                                  	;mov	ah,88
 19582 00000BD9 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19583 00000BDB E8D104                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19584 00000BDE 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19585                                  
 19586                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19587                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19588                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19589                                  ;		   variable which has the top of free memory for
 19590                                  ;		   device driver loads, etc.
 19591                                  
 19592 00000BE2 29C6                    	sub	si,ax
 19593                                  
 19594                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19595                                  ;		that automatically updates alloclim every time we
 19596                                  ;		set up some new CDSs. Instead, I've added code
 19597                                  ;		which pre-allocates space for 26 CDSs. This
 19598                                  ;	        way we've got room for worst case CDSs before
 19599                                  ;		we place MagicDrv.sys
 19600                                  ;
 19601                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19602                                  
 19603                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19604                                  	; (SYSINIT:0C52h)
 19605 00000BE4 8936[A302]              	mov	[ALLOCLIM],si
 19606                                  
 19607 00000BE8 26897518                	mov	[es:di+SYSI_CDS+2],si
 19608                                  	;mov	[es:di+18h],si
 19609 00000BEC 89F0                    	mov	ax,si
 19610 00000BEE 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19611                                  	;mov	[word es:di+16h],0
 19612                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19613 00000BF4 26C535                  	lds	si,[es:di]
 19614 00000BF7 8EC0                    	mov	es,ax
 19615 00000BF9 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19616                                  
 19617                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19618                                  ;	info from the corresponding DPB.
 19619                                  ;
 19620                                  ;	(cx) = count of CDSs left to process
 19621                                  ;	(es:di) = address of next CDS
 19622                                  
 19623                                  fooset:
 19624                                  	; 23/10/2022
 19625 00000BFB 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19626 00000BFF AB                      	stosw				; setup the root as the curdir
 19627                                  
 19628                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19629                                  
 19630                                  ;	(ds:si) = address of DPB
 19631                                  ;		 (si) = -1 if no drive
 19632                                  
 19633 00000C00 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19634 00000C04 AB                      	stosw
 19635 00000C05 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19636 00000C0A 31C0                    	xor	ax,ax
 19637 00000C0C 51                      	push	cx
 19638                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19639 00000C0D B93F00                  	mov	cx,63	; 23/10/2022
 19640 00000C10 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19641                                  
 19642                                  ;	should handle the system that does not have any floppies.
 19643                                  ;	in this case,we are going to pretended there are two dummy floppies
 19644                                  ;	in the system. still they have dpb and cds,but we are going to
 19645                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19646                                  ;	"invalid drive specification" message when the user try to
 19647                                  ;	access them.
 19648                                  ;
 19649                                  ;	(ax) = 0
 19650                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19651                                  ;	(ds:si) = Next DPB (-1 if none)
 19652                                  
 19653 00000C12 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19654 00000C15 7414                    	je	short fooset_zero	; don't have any physical drive.
 19655                                  
 19656                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19657                                  ;	if we are faking floppy drives then see if this cds being initialised
 19658                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19659                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19660                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19661                                  ;	for dpb offsets look at inc\dpb.inc.
 19662                                  
 19663 00000C17 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19664 00000C1D 7513                    	jne	short normcds 		; machine has floppy drives
 19665                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19666 00000C1F 803C01                  	cmp	byte [si],1
 19667 00000C22 770E                    	ja	short normcds
 19668 00000C24 B103                    	mov	cl,3			; the next dbp pointer
 19669                                  					; AX should be zero here
 19670 00000C26 F3AB                    	rep	stosw
 19671 00000C28 59                      	pop	cx
 19672 00000C29 EB18                    	jmp	short get_next_dpb
 19673                                  
 19674                                  ;	(ax) = 0
 19675                                  
 19676                                  fooset_zero:
 19677 00000C2B B103                    	mov	cl,3
 19678 00000C2D F3AB                    	rep	stosw
 19679 00000C2F 59                      	pop	cx
 19680 00000C30 EB14                    	jmp	short fincds
 19681                                  
 19682                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19683                                  ;
 19684                                  ;	(ax) = 0
 19685                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19686                                  ;	(ds:si) = Next DPB (-1 if none)
 19687                                  
 19688                                  normcds:
 19689 00000C32 59                      	pop	cx
 19690                                  
 19691                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19692                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19693                                  ;	this media is a non-fat based one.
 19694                                  
 19695                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19696                                  	; 23/10/2022
 19697 00000C33 807C0800                	cmp	byte [si+8],0
 19698 00000C37 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19699 00000C39 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19700                                  	;mov	ax,4000h
 19701                                  setnormcds:
 19702 00000C3C AB                      	stosw				; curdir_flags
 19703 00000C3D 89F0                    	mov	ax,si
 19704 00000C3F AB                      	stosw				; curdir_devptr
 19705 00000C40 8CD8                    	mov	ax,ds
 19706 00000C42 AB                      	stosw
 19707                                  
 19708                                  get_next_dpb:				; entry point for fake_fooset_zero
 19709                                  	; 23/10/2022
 19710 00000C43 C57419                  	lds	si,[si+19h]
 19711                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19712                                  fincds:
 19713 00000C46 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19714 00000C49 AB                      	stosw				; curdir_id
 19715 00000C4A AB                      	stosw				; curdir_id
 19716 00000C4B AB                      	stosw				; curdir_user_word
 19717 00000C4C B80200                  	mov	ax,2
 19718 00000C4F AB                      	stosw				; curdir_end
 19719 00000C50 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19720 00000C52 AA                      	stosb
 19721 00000C53 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19722 00000C54 AB                      	stosw
 19723 00000C55 AB                      	stosw
 19724                                  
 19725 00000C56 E2A3                    	loop	fooset
 19726                                  	
 19727 00000C58 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19728                                  	
 19729 00000C5E C3                      	retn
 19730                                  
 19731                                  ; ----------------------------------------------------------------------
 19732                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19733                                  ;
 19734                                  ;	entry:
 19735                                  ;	   al == ASCII CAPS drive letter
 19736                                  ;
 19737                                  ;	exit:
 19738                                  ;	   ds:si -> DPB, or si = -1 if not found
 19739                                  ; ----------------------------------------------------------------------
 19740                                  
 19741                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19742                                  ;
 19743                                  ;get_dpb_for_drive_al:
 19744                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19745                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19746                                  ;	lds	si,[si]
 19747                                  ;	sub	al,'A'
 19748                                  ;
 19749                                  ;get_dpb_for_drive_1:
 19750                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19751                                  ;	cmp	al,[si]
 19752                                  ;	je	short got_dpb_for_drive	;  done if so
 19753                                  ;
 19754                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19755                                  ;	cmp	si,-1
 19756                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19757                                  ;
 19758                                  ;got_dpb_for_drive:
 19759                                  ;	retn
 19760                                  
 19761                                  ;=======================================================================
 19762                                  
 19763                                  ;**	EndFile - Build DOS structures
 19764                                  ;
 19765                                  ; This procedure is called after the config.sys has been processed and
 19766                                  ; installable device drivers have been loaded (but before "install="
 19767                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19768                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19769                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19770                                  ; above these structures is deallocated back to DOS.
 19771                                  ;
 19772                                  ;	ENTRY	?? BUGBUG
 19773                                  ;	EXIT	?? BUGBUG
 19774                                  ;	USES	?? BUGBUG
 19775                                  
 19776                                  ;=======================================================================
 19777                                  ; allocate files
 19778                                  ; ----------------------------------------------------------------------
 19779                                  
 19780                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19781                                  	; (SYSINIT:0CCDh)
 19782                                  
 19783                                  endfile:
 19784                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19785                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19786                                  ; to confbot.
 19787                                  
 19788                                  ;	if this procedure has been called to take care of install= command,
 19789                                  ;	   then we have to save es,si registers.
 19790                                  
 19791                                  	; 11/12/2022
 19792                                  	; ds = cs
 19793                                  
 19794                                  	; 23/10/2022
 19795                                  	; 31/03/2019
 19796 00000C5F 1E                      	push	ds
 19797                                  
 19798                                  	;;mov	ax,Bios_Data ; 0070h
 19799                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19800                                  	; 21/10/2022
 19801 00000C60 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19802 00000C63 8ED8                    	mov	ds,ax
 19803                                  
 19804                                  	;cmp	word [052Fh],0
 19805 00000C65 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19806 00000C6A 7505                    	jne	short multrk_flag_done
 19807                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19808                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19809                                  	; 12/12/2022
 19810 00000C6C 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19811                                  multrk_flag_done:
 19812                                  	; 23/10/2022
 19813                                  	; 31/03/2019
 19814 00000C71 1F                      	pop	ds
 19815                                  
 19816                                  	; 11/12/2022
 19817                                  	; ds = cs
 19818 00000C72 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19819 00000C75 A3[A302]                	mov	[ALLOCLIM],ax
 19820                                  	; 23/10/2022
 19821                                  	;mov	ax, [cs:top_of_cdss]
 19822                                  	;mov	[cs:ALLOCLIM], ax 
 19823                                  
 19824                                  	; 11/12/2022
 19825                                  	; ds = cs
 19826                                  	;push	cs
 19827                                  	;pop	ds
 19828                                  	
 19829                                  	;mov	ax,[CONFBOT]
 19830                                  	;mov	[ALLOCLIM],ax
 19831                                  
 19832 00000C78 E83724                  	call	round
 19833                                  	; 11/12/2022
 19834                                  	; ds = cs
 19835 00000C7B A0[9D02]                	mov	al,[FILES]
 19836                                  	; 23/10/2022
 19837                                  	;mov	al,[cs:FILES]
 19838 00000C7E 2C05                    	sub	al,5
 19839 00000C80 764B                    	jbe	short dofcbs
 19840                                  
 19841 00000C82 50                      	push	ax
 19842                                  	;mov	al,devmark_files ; 'F'
 19843 00000C83 B046                    	mov	al,'F'
 19844 00000C85 E87907                  	call	setdevmark		; set devmark for sfts (files)
 19845 00000C88 58                      	pop	ax
 19846 00000C89 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19847                                  					;  it does sign extend.
 19848                                  	; 11/12/2022
 19849                                  	; ds = cs
 19850 00000C8B 8B1E[DE03]              	mov	bx,[memlo]
 19851 00000C8F 8B16[E003]              	mov	dx,[memhi]
 19852 00000C93 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19853                                  	; 23/10/2022
 19854                                  	;mov	bx,[cs:memlo]
 19855                                  	;mov	dx,[cs:memhi]
 19856                                  	;lds	di,[cs:DOSINFO]		
 19857                                  
 19858                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19859 00000C97 C57D04                  	lds	di,[di+4]
 19860                                  
 19861                                  	;mov	[di+SF.SFLink],bx
 19862 00000C9A 891D                    	mov	[di],bx
 19863 00000C9C 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19864                                  
 19865 00000C9F 0E                      	push	cs
 19866 00000CA0 1F                      	pop	ds
 19867                                  
 19868                                  	; 11/12/2022
 19869                                  	; ds = cs
 19870 00000CA1 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19871                                  	; 23/10/2022
 19872                                  	;les	di,[cs:memlo]
 19873                                  
 19874                                  	;mov	word [es:di+SF.SFLink],-1
 19875 00000CA5 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19876                                  	;mov	[es:di+SF.SFCount],ax
 19877 00000CAA 26894504                	mov	[es:di+4],ax
 19878                                  	; 09/04/2024
 19879 00000CAE B33B                    	mov	bl,SF_ENTRY.size ; 59
 19880                                  	;mov	bl,59
 19881 00000CB0 F6E3                    	mul	bl			;ax = number of bytes to clear
 19882 00000CB2 89C1                    	mov	cx,ax
 19883                                  	; 11/12/2022
 19884                                  	; ds = cs
 19885 00000CB4 0106[DE03]              	add	[memlo],ax		;allocate memory
 19886                                  	; 23/10/2022
 19887                                  	;add	[cs:memlo],ax
 19888 00000CB8 B80600                  	mov	ax,6
 19889                                  	; 11/12/2022
 19890 00000CBB 0106[DE03]              	add	[memlo],ax		;remember the header too
 19891                                  	;add	[cs:memlo],ax
 19892                                  	; 11/12/2022
 19893 00000CBF 800E[2414]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19894                                  	; 23/10/2022
 19895                                  	;or	byte [cs:setdevmarkflag],2
 19896 00000CC4 E8EB23                  	call	round			; check for mem error before the stosb
 19897 00000CC7 01C7                    	add	di,ax
 19898 00000CC9 31C0                    	xor	ax,ax
 19899 00000CCB F3AA                    	rep	stosb			;clean out the stuff
 19900                                  
 19901                                  ; allocate fcbs
 19902                                  ; ----------------------------------------------------------------------
 19903                                  
 19904                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19905                                  	; (SYSINIT:0D48h)
 19906                                  dofcbs:
 19907                                  	; 11/12/2022
 19908                                  	; ds = cs
 19909                                  	;push	cs
 19910                                  	;pop	ds
 19911 00000CCD E8E223                  	call	round
 19912                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19913 00000CD0 B058                    	mov	al,'X'
 19914 00000CD2 E82C07                  	call	setdevmark
 19915                                  	; 11/12/2022
 19916                                  	; ds = cs
 19917 00000CD5 A0[9E02]                	mov	al,[FCBS]
 19918                                  	;mov	al,[cs:FCBS]
 19919 00000CD8 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19920                                  					;  it does sign extend.
 19921                                  	; 11/12/2022
 19922 00000CDA 8B1E[DE03]              	mov	bx,[memlo]
 19923 00000CDE 8B16[E003]              	mov	dx,[memhi]
 19924 00000CE2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19925                                  	; 23/10/2022
 19926                                  	;mov	bx,[cs:memlo]
 19927                                  	;mov	dx,[cs:memhi]
 19928                                  	;lds	di,[cs:DOSINFO]
 19929                                  
 19930                                  	;mov	[di+SYSI_FCB],bx
 19931                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19932                                  	; 23/10/2022
 19933 00000CE6 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19934 00000CE9 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19935                                  
 19936 00000CEC 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19937 00000CF1 30FF                    	xor	bh,bh
 19938                                  	;mov	[di+SYSI_KEEP],bx
 19939 00000CF3 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19940                                  
 19941 00000CF6 0E                      	push	cs
 19942 00000CF7 1F                      	pop	ds
 19943                                  	
 19944 00000CF8 C43E[DE03]              	les	di,[memlo]		;point to new table
 19945                                  	;mov	word [es:di+SF.SFLink],-1
 19946 00000CFC 26C705FFFF              	mov	word [es:di],-1
 19947                                  	;mov	[es:di+SF.SFCount],ax
 19948                                  	; 02/11/2022
 19949 00000D01 26894504                	mov	[es:di+4],ax
 19950 00000D05 B33B                    	mov	bl,SF_ENTRY.size ; 59
 19951 00000D07 89C1                    	mov	cx,ax
 19952 00000D09 F6E3                    	mul	bl			;ax = number of bytes to clear
 19953 00000D0B 0106[DE03]              	add	[memlo],ax		;allocate memory
 19954                                  	;mov	ax,6
 19955 00000D0F B80600                  	mov	ax,SF.size-2 ; 6
 19956 00000D12 0106[DE03]              	add	[memlo],ax		;remember the header too
 19957                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19958 00000D16 800E[2414]02            	or	byte [setdevmarkflag],2
 19959 00000D1B E89423                  	call	round			; check for mem error before the stosb
 19960 00000D1E 01C7                    	add	di,ax			;skip over header
 19961 00000D20 B041                    	mov	al,'A'
 19962                                  fillloop:
 19963 00000D22 51                      	push	cx			; save count
 19964 00000D23 B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19965 00000D26 FC                      	cld
 19966 00000D27 F3AA                    	rep	stosb			; filled
 19967                                  
 19968                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19969                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 19970                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19971                                  
 19972                                  	; 18/12/2022
 19973                                  	;cx = 0
 19974 00000D29 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19975 00000D2D 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 19976 00000D31 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19977                                  	
 19978                                  	; 23/10/2022	
 19979                                  	;mov     word [es:di-3Bh],0
 19980                                  	;mov     word [es:di-26h],0
 19981                                  	;mov     word [es:di-24h],0
 19982                                  
 19983 00000D35 59                      	pop	cx
 19984 00000D36 E2EA                    	loop	fillloop
 19985                                  
 19986                                  ; allocate buffers
 19987                                  ; ----------------------------------------------------------------------
 19988                                  
 19989                                  ; search through the list of media supported and allocate 3 buffers if the
 19990                                  ; capacity of the drive is > 360kb
 19991                                  
 19992                                  	; 18/12/2022
 19993                                  	; cx = 0
 19994 00000D38 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19995 00000D3D 7403                    	je	short dodefaultbuff
 19996 00000D3F E98700                  	jmp	dobuff			; the user entered the buffers=.
 19997                                  
 19998                                  dodefaultbuff:
 19999                                  	; 18/12/2022
 20000 00000D42 890E[9902]              	mov	[h_buffers],cx ; 0
 20001                                  	;inc	cx
 20002                                  	;inc	cx
 20003                                  	;mov	[buffers],cx ; 2
 20004                                  	; 10/04/2024
 20005 00000D46 C706[9702]0200          	mov	word [buffers],2	
 20006                                  	
 20007                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20008                                  	;mov	word [buffers],2	; default to 2 buffers
 20009                                  
 20010                                  	; 23/10/2022	
 20011 00000D4C 50                      	push	ax
 20012 00000D4D 1E                      	push	ds ; 26/03/2019
 20013                                  	;les	bp,[DOSINFO]		; search through the dpb's
 20014 00000D4E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 20015                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20016                                  	; 11/12/2022
 20017 00000D53 26C46E00                	les	bp,[es:bp]
 20018                                  	; 23/10/2022
 20019                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20020                                  
 20021 00000D57 0E                      	push	cs
 20022 00000D58 1F                      	pop	ds
 20023                                  ;SYSINIT:0DE2h:
 20024                                  nextdpb:				; test if the drive supports removeable media
 20025                                  	;mov	bl,[es:bp+DPB.drive]
 20026                                  	; 11/12/2022
 20027 00000D59 268A5E00                	mov	bl,[es:bp]
 20028                                  	; 23/10/2022
 20029                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20030                                  
 20031                                  	;inc	bl
 20032                                  	; 18/12/2022
 20033 00000D5D 43                      	inc	bx
 20034                                  
 20035                                  	;mov	ax,(IOCTL<<8)|8
 20036 00000D5E B80844                  	mov	ax,4408h
 20037 00000D61 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20038                                  
 20039                                  ; ignore fixed disks
 20040                                  
 20041 00000D63 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20042 00000D65 7534                    	jnz	short nosetbuf
 20043                                  
 20044                                  ; get parameters of drive
 20045                                  
 20046 00000D67 31DB                    	xor	bx,bx
 20047                                  	;;mov	bl,[es:bp+DPB.drive]
 20048                                  	; 11/12/2022
 20049 00000D69 268A5E00                	mov	bl,[es:bp]
 20050                                  	; 23/10/2022
 20051                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20052                                  	
 20053                                  	;inc	bl
 20054                                  	; 18/12/2022
 20055 00000D6D 43                      	inc	bx
 20056                                  
 20057 00000D6E BA[5835]                	mov	dx,deviceparameters
 20058                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20059 00000D71 B80D44                  	mov	ax,440Dh
 20060                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20061 00000D74 B96008                  	mov	cx,860h
 20062 00000D77 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20063 00000D79 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20064                                  					; generic ioctl
 20065                                  ; determine capacity of drive
 20066                                  ; media capacity = #sectors * bytes/sector
 20067                                  
 20068                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20069                                  	; 23/10/2022
 20070 00000D7B 8B1E[6735]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20071                                  	
 20072                                  ; to keep the magnitude of the media capacity within a word,
 20073                                  ; scale the sector size
 20074                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20075                                  
 20076                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20077                                  	; 23/10/2022
 20078 00000D7F A1[5F35]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20079 00000D82 31D2                    	xor	dx,dx
 20080 00000D84 B90002                  	mov	cx,512
 20081 00000D87 F7F1                    	div	cx			; scale sector size in factor of
 20082                                  					; 512 bytes
 20083 00000D89 F7E3                    	mul	bx			; ax = #sectors * size factor
 20084 00000D8B 09D2                    	or	dx,dx			; just in case of large floppies
 20085 00000D8D 7505                    	jnz	short setbuf
 20086 00000D8F 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20087 00000D92 7607                    	jbe	short nosetbuf
 20088                                  setbuf:
 20089                                  	; 18/12/2022
 20090                                  	; word [buffers] = 2
 20091 00000D94 C606[9702]03            	mov	byte [buffers],3
 20092                                  	;mov	word [buffers],3
 20093 00000D99 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20094                                  					; for default buffer count
 20095                                  nosetbuf:
 20096                                  	; 23/10/2022
 20097                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20098 00000D9B 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20099 00000DA0 7406                    	je	short chk_memsize_for_buffers
 20100                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20101 00000DA2 26C46E19                	les	bp,[es:bp+19h]
 20102 00000DA6 EBB1                    	jmp	short nextdpb
 20103                                  
 20104                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20105                                  ;memory size too.
 20106                                  ; default buffers = 2
 20107                                  ; if diskette media > 360 kb,then default buffers = 3
 20108                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20109                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20110                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20111                                  
 20112                                  chk_memsize_for_buffers:
 20113                                  	; 18/12/2022
 20114                                  	;cmp	word [MEMORY_SIZE],2000h
 20115                                  	;jbe	short bufset
 20116                                  	;mov	word [buffers],5
 20117                                  	;cmp	word [MEMORY_SIZE],4000h
 20118                                  	;jbe	short bufset
 20119                                  	;mov	word [buffers],10
 20120                                  	;cmp	word [MEMORY_SIZE],8000h
 20121                                  	;jbe	short bufset
 20122                                  	;mov	word [buffers],15
 20123                                  
 20124                                  	; 18/12/2022
 20125                                  	; word [buffers] = 3 or 2
 20126 00000DA8 BB[9702]                	mov	bx,buffers
 20127 00000DAB A1[9202]                	mov	ax,[MEMORY_SIZE]
 20128 00000DAE 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20129                                  
 20130 00000DAF 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20131 00000DB2 7213                    	jb	short bufset
 20132 00000DB4 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20133 00000DB7 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20134 00000DBA 730B                    	jnb	short bufset
 20135 00000DBC C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20136 00000DBF 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20137 00000DC2 7303                    	jnb	short bufset
 20138 00000DC4 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20139                                  bufset:
 20140                                  	; 23/10/2022
 20141                                  	; 26/03/2019
 20142 00000DC7 1F                      	pop	ds
 20143 00000DC8 58                      	pop	ax
 20144                                  
 20145                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20146                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20147                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20148                                  
 20149                                  ; 26/03/2019
 20150                                  
 20151                                  ;*******************************************************************************
 20152                                  ;									       *
 20153                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20154                                  ; input :								       *
 20155                                  ;    memhi:memlo - start of the next available memory			       *
 20156                                  ;    buffers = number of buffers					       *
 20157                                  ;    h_buffers = number of secondary buffers				       *
 20158                                  ;									       *
 20159                                  ; output:								       *
 20160                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20161                                  ;	buffinfo set.							       *
 20162                                  ;	bufferqueue set.						       *
 20163                                  ;									       *
 20164                                  ; subroutines to be called:						       *
 20165                                  ;									       *
 20166                                  ;*******************************************************************************
 20167                                  
 20168                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20169                                  	; (SYSINIT:0E60h)
 20170                                  dobuff:
 20171                                  	; ds = cs ; 31/03/2019
 20172                                  	; 23/10/2022
 20173 00000DC9 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20174                                  	;mov	ax,[buffers] ; 31/03/2019
 20175                                  	;lds	bx,[DOSINFO]
 20176 00000DCE 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20177                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20178 00000DD2 89473F                  	mov	[bx+3Fh],ax
 20179 00000DD5 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20180                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20181 00000DD9 894741                  	mov	[bx+41h],ax
 20182 00000DDC C55F12                  	lds	bx,[bx+12h]
 20183                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20184 00000DDF E8D022                  	call	round		; get [memhi]:[memlo]
 20185                                  	;mov	al,devmark_buf	; ='B'
 20186 00000DE2 B042                    	mov	al,'B'	
 20187 00000DE4 E81A06                  	call	setdevmark
 20188                                  
 20189                                  ;allocate buffers
 20190                                  
 20191 00000DE7 1E                      	push	ds			; save buffer info. ptr.
 20192 00000DE8 53                      	push	bx
 20193                                  
 20194 00000DE9 E85003                  	call	set_buffer
 20195                                  
 20196 00000DEC 5B                      	pop	bx
 20197 00000DED 1F                      	pop	ds
 20198                                  
 20199                                  ;now set the secondary buffer if specified.
 20200                                  
 20201 00000DEE 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20202 00000DF4 742D                    	je	short xif16
 20203 00000DF6 E8B922                  	call	round
 20204                                  	; 23/10/2022
 20205 00000DF9 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20206                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20207 00000DFE 894F06                  	mov	[bx+6],cx
 20208 00000E01 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20209                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20210 00000E06 894F08                  	mov	[bx+8],cx
 20211 00000E09 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20212                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20213 00000E0E 894F0A                  	mov	[bx+10],cx
 20214 00000E11 B80002                  	mov	ax,512			; 512 byte
 20215 00000E14 F7E1                    	mul	cx
 20216 00000E16 2EA3[DE03]              	mov	[cs:memlo],ax
 20217                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20218 00000E1A 2E800E[2414]02          	or	byte [cs:setdevmarkflag],2
 20219 00000E20 E88F22                  	call	round
 20220                                  xif16:
 20221                                  
 20222                                  ; ----------------------------------------------------------------------
 20223                                  ; allocate cdss
 20224                                  ; ----------------------------------------------------------------------
 20225                                  
 20226                                  buf1:
 20227 00000E23 E88C22                  	call	round
 20228                                  
 20229 00000E26 50                      	push	ax
 20230                                  	; 23/10/2022
 20231                                  	;mov	ax,devmark_cds		;='L'
 20232 00000E27 B84C00                  	mov	ax, 'L'
 20233 00000E2A E8D405                  	call	setdevmark
 20234 00000E2D 58                      	pop	ax
 20235                                  
 20236 00000E2E 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20237                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20238 00000E33 268A4D20                	mov	cl,[es:di+20h]
 20239 00000E37 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20240 00000E3C 7305                    	jae	short gotncds 		; user setting must be at least numio
 20241 00000E3E 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20242                                  gotncds:
 20243 00000E43 30ED                    	xor	ch,ch
 20244                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20245 00000E45 26884D21                	mov	[es:di+21h],cl
 20246 00000E49 2EA1[E003]              	mov	ax,[cs:memhi]
 20247                                  	;mov	[es:di+SYSI_CDS+2],ax
 20248 00000E4D 26894518                	mov	[es:di+18h],ax
 20249 00000E51 2EA1[DE03]              	mov	ax,[cs:memlo]
 20250                                  	;mov	[es:di+SYSI_CDS],ax
 20251 00000E55 26894516                	mov	[es:di+16h],ax
 20252 00000E59 88C8                    	mov	al,cl
 20253                                  	;mov	ah,curdirlen ; curdir_list.size
 20254 00000E5B B458                    	mov	ah,88
 20255 00000E5D F6E4                    	mul	ah
 20256 00000E5F E84D02                  	call	ParaRound
 20257 00000E62 2E0106[E003]            	add	[cs:memhi],ax
 20258                                  
 20259                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20260 00000E67 2E800E[2414]02          	or	byte [cs:setdevmarkflag],2
 20261 00000E6D E84222                  	call	round			; check for mem error before initializing
 20262                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20263 00000E70 26C535                  	lds	si,[es:di]
 20264                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20265 00000E73 26C47D16                	les	di,[es:di+16h]
 20266 00000E77 E881FD                  	call	fooset
 20267                                  
 20268                                  ; ----------------------------------------------------------------------
 20269                                  ; allocate space for internal stack
 20270                                  ; ----------------------------------------------------------------------
 20271                                  
 20272 00000E7A 0E                      	push	cs
 20273 00000E7B 1F                      	pop	ds
 20274                                  
 20275                                  ;	if the user did not entered stacks= command, as a default, do not install
 20276                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20277                                  ;	otherwise,install it to the user specified value or to the default
 20278                                  ;	value of 9,128 for other systems.
 20279                                  
 20280 00000E7C 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20281 00000E81 740E                    	je	short doinstallstack	; then install as specified by the user
 20282 00000E83 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20283 00000E88 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20284 00000E8A 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20285 00000E8F 736D                    	jae	short skipstack
 20286                                  doinstallstack:
 20287 00000E91 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20288 00000E94 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20289 00000E96 7466                    	jz	short skipstack		; don't install stack.
 20290                                  
 20291                                  ;	dynamic relocation of stack code.
 20292                                  
 20293 00000E98 E81722                  	call	round			;[memhi] = seg. for stack code
 20294                                  					;[memlo] = 0
 20295                                  
 20296                                  ; set devmark block into memory for mem command
 20297                                  ; devmark_id = 's' for stack
 20298                                  
 20299                                  	;mov	al,devmark_stk	;='S'
 20300                                  	; 23/10/2022
 20301 00000E9B B053                    	mov	al,'S'
 20302 00000E9D E86105                  	call	setdevmark
 20303                                  
 20304 00000EA0 A1[E003]                	mov	ax,[memhi]
 20305 00000EA3 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20306                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20307                                  	; 11/12/2022
 20308                                  	; ds = cs
 20309                                  	;push	cs
 20310                                  	;pop	ds
 20311 00000EA5 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20312 00000EA7 31FF                    	xor	di,di
 20313 00000EA9 B9[6702]                	mov	cx,endstackcode
 20314 00000EAC 890E[DE03]              	mov	[memlo],cx
 20315 00000EB0 E8FF21                  	call	round		;have enough space for relocation?
 20316 00000EB3 F3A4                    	rep	movsb
 20317                                  
 20318 00000EB5 1E                      	push	ds		; stick the location of the NextStack entry
 20319                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20320                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20321                                  	; 21/10/2022
 20322 00000EB6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20323 00000EB9 8ED8                    	mov	ds,ax
 20324 00000EBB C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20325 00000EC1 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20326                                  
 20327 00000EC5 2EA1[DE03]              	mov	ax,[cs:memlo]
 20328 00000EC9 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20329 00000ECD A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20330 00000ED0 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20331 00000ED4 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20332 00000ED8 A3[C608]                	mov	[IT_StackLoc+2],ax
 20333                                  
 20334                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20335                                  
 20336                                  	;mov	ax,entrysize ; mov ax,8
 20337                                  	; 23/10/2022
 20338 00000EDB B80800                  	mov	ax,8
 20339 00000EDE 2E0306[8C02]            	add	ax,[cs:stack_size]
 20340 00000EE3 2EF726[8A02]            	mul	word [cs:stack_count]
 20341                                  
 20342 00000EE8 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20343                                  
 20344 00000EEB 1F                      	pop	ds		; no more need to access Instance Table
 20345                                  
 20346 00000EEC E8C001                  	call	ParaRound	; convert size to paragraphs
 20347                                  	
 20348                                  	; 11/12/2022
 20349                                  	; ds = cs
 20350                                  	;add	[cs:memhi],ax
 20351 00000EEF 0106[E003]              	add	[memhi],ax
 20352                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20353                                  	;or	byte [cs:setdevmarkflag],2
 20354 00000EF3 800E[2414]02            	or	byte [setdevmarkflag],2
 20355                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20356                                  				;to set the devmark_size for stack by round routine.
 20357 00000EF8 E8B721                  	call	round		; check for memory error before
 20358                                  				; continuing
 20359 00000EFB E8E702                  	call	stackinit	; initialize hardware stack. 
 20360                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20361                                  skipstack:
 20362                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20363                                  	; (SYSINIT:0F99h)
 20364                                  
 20365                                  	; 11/12/2022
 20366                                  	; ds = cs
 20367                                  	;push	cs
 20368                                  	;pop	ds
 20369                                  
 20370 00000EFE A0[9D02]                	mov	al,[FILES]
 20371 00000F01 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20372                                  				;  it does sign extend.
 20373 00000F03 89C1                    	mov	cx,ax
 20374 00000F05 31DB                    	xor	bx,bx		;close standard input
 20375 00000F07 B43E                    	mov	ah,3Eh ; CLOSE
 20376 00000F09 CD21                    	int	21h
 20377 00000F0B BB0200                  	mov	bx,2
 20378                                  rcclloop:			;close everybody but standard output
 20379 00000F0E B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20380 00000F10 CD21                    	int	21h		; in case we can't get new one open.
 20381 00000F12 43                      	inc	bx
 20382 00000F13 E2F9                    	loop	rcclloop
 20383                                  
 20384 00000F15 BA[E233]                	mov	dx,condev
 20385 00000F18 B002                    	mov	al,2
 20386 00000F1A B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20387 00000F1C F9                      	stc			; set for possible int 24
 20388 00000F1D CD21                    	int	21h
 20389 00000F1F 7305                    	jnc	short goaux
 20390 00000F21 E82124                  	call	badfil
 20391 00000F24 EB13                    	jmp	short goaux2
 20392                                  goaux:	
 20393 00000F26 50                      	push	ax
 20394 00000F27 BB0100                  	mov	bx,1		;close standard output
 20395 00000F2A B43E                    	mov	ah,3Eh ; CLOSE
 20396 00000F2C CD21                    	int	21h
 20397 00000F2E 58                      	pop	ax
 20398                                  
 20399 00000F2F 89C3                    	mov	bx,ax		;new device handle
 20400 00000F31 B445                    	mov	ah,45h ; XDUP
 20401 00000F33 CD21                    	int	21h		;dup to 1,stdout
 20402 00000F35 B445                    	mov	ah,45h ; XDUP
 20403 00000F37 CD21                    	int	21h		;dup to 2,stderr
 20404                                  goaux2: 
 20405 00000F39 BA[E633]                	mov	dx,auxdev
 20406 00000F3C B002                    	mov	al,2		;read/write access
 20407 00000F3E E83524                  	call	open_dev
 20408                                  
 20409 00000F41 BA[EA33]                	mov	dx,prndev
 20410 00000F44 B001                    	mov	al,1		;write only
 20411 00000F46 E82D24                  	call	open_dev
 20412                                  
 20413                                  ;global rearm command for shared interrupt devices attached in the system;
 20414                                  ;shared interrupt attachment has some problem when it issues interrupt
 20415                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20416                                  ;no further interrupts on that level will be presented until a global rearm
 20417                                  ;is issued. by the request of the system architecture group, msbio will
 20418                                  ;issue a global rearm after every device driver is loaded.
 20419                                  ;to issue a global rearm:	;for pc1,xt,palace
 20420                                  ;
 20421                                  ;			  out 02f2h,xx  ; interrupt level 2
 20422                                  ;			  out 02f3h,xx  ; interrupt level 3
 20423                                  ;			  out 02f4h,xx  ; interrupt level 4
 20424                                  ;			  out 02f5h,xx  ; interrupt level 5
 20425                                  ;			  out 02f6h,xx  ; interrupt level 6
 20426                                  ;			  out 02f7h,xx  ; interrupt level 7
 20427                                  ;
 20428                                  ;	for pc at,in addition to the above commands,
 20429                                  ;	need to handle the secondary interrupt handler
 20430                                  ;
 20431                                  ;			  out 06f2h,xx  ; interrupt level 10
 20432                                  ;			  out 06f3h,xx  ; interrupt level 11
 20433                                  ;			  out 06f4h,xx  ; interrupt level 12
 20434                                  ;			  out 06f6h,xx  ; interrupt level 14
 20435                                  ;			  out 06f7h,xx  ; interrupt level 15
 20436                                  ;
 20437                                  ;	for round-up machine
 20438                                  ;
 20439                                  ;			  none.
 20440                                  
 20441                                  ; where xx stands for any value.
 20442                                  ;
 20443                                  ; for your information,after naples level machine,the system service bios
 20444                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20445                                  
 20446                                  	; 24/10/2022
 20447                                  
 20448 00000F49 50                      	push	ax
 20449 00000F4A 53                      	push	bx
 20450 00000F4B 52                      	push	dx
 20451 00000F4C 06                      	push	es
 20452                                  
 20453 00000F4D B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20454 00000F4F BAF202                  	mov	dx,2F2h 		;get starting address
 20455 00000F52 EE                      	out	dx,al			; out 02f2h,0ffh
 20456 00000F53 42                      	inc	dx
 20457 00000F54 EE                      	out	dx,al			; out 02f3h,0ffh
 20458 00000F55 42                      	inc	dx
 20459 00000F56 EE                      	out	dx,al			; out 02f4h,0ffh
 20460 00000F57 42                      	inc	dx
 20461 00000F58 EE                      	out	dx,al			; out 02f5h,0ffh
 20462 00000F59 42                      	inc	dx
 20463 00000F5A EE                      	out	dx,al			; out 02f6h,0ffh
 20464 00000F5B 42                      	inc	dx
 20465 00000F5C EE                      	out	dx,al			; out 02f7h,0ffh
 20466                                  
 20467                                  ;sb secondary global rearm
 20468                                  
 20469 00000F5D B800F0                  	mov	ax,0F000h		;get machine type
 20470 00000F60 8EC0                    	mov	es,ax
 20471 00000F62 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20472 00000F68 740D                    	je	short startrearm	; *if at no need to check
 20473                                  
 20474 00000F6A B4C0                    	mov	ah,0C0h 		;get system configuration
 20475 00000F6C CD15                    	int	15h			; *
 20476 00000F6E 7216                    	jc	short finishrearm	; *jmp if old rom
 20477                                  
 20478                                  ; test feature byte for secondary interrupt controller
 20479                                  
 20480 00000F70 26F6470540              	test	byte [es:bx+5],40h
 20481                                  	; 24/10/2022
 20482                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20483 00000F75 740F                    	je	short finishrearm	;jmp if it is there
 20484                                  
 20485                                  startrearm:
 20486 00000F77 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20487 00000F79 BAF206                  	mov	dx,6F2h 		;get starting address
 20488 00000F7C EE                      	out	dx,al			;out 06f2h,0ffh
 20489 00000F7D 42                      	inc	dx			;bump address
 20490 00000F7E EE                      	out	dx,al			;out 06f3h,0ffh
 20491 00000F7F 42                      	inc	dx			;bump address
 20492 00000F80 EE                      	out	dx,al			;out 06f4h,0ffh
 20493 00000F81 42                      	inc	dx			;bump address
 20494 00000F82 42                      	inc	dx			;bump address
 20495 00000F83 EE                      	out	dx,al			;out 06f6h,0ffh
 20496 00000F84 42                      	inc	dx			;bump address
 20497 00000F85 EE                      	out	dx,al			;out 06f7h,0ffh
 20498                                  
 20499                                  finishrearm:
 20500 00000F86 07                      	pop	es
 20501 00000F87 5A                      	pop	dx
 20502 00000F88 5B                      	pop	bx
 20503 00000F89 58                      	pop	ax
 20504                                  
 20505                                  ;    global rearm end *******************
 20506                                  
 20507                                  ; ----------------------------------------------------------------------
 20508                                  ; allocate sysinit_base for install= command
 20509                                  ; ----------------------------------------------------------------------
 20510                                  ; sysinit_base allocation.
 20511                                  ;   check if endfile has been called to handle install= command.
 20512                                  
 20513                                  set_sysinit_base:
 20514                                  
 20515                                  ; ----------------------------------------------------------------------
 20516                                  ;sysinit_base will be established in the secure area of
 20517                                  ;lower memory when it handles the first install= command.
 20518                                  ;sysinit_base is the place where the actual exec function will be called and
 20519                                  ;will check sysinit module in high memory if it is damaged by the application
 20520                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20521                                  ;is displayed by sysinit_base.
 20522                                  ; ----------------------------------------------------------------------
 20523                                  
 20524                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20525                                  	; (SYSINIT:1028h)
 20526                                  
 20527                                  	; 11/12/2022
 20528                                  	; ds = cs
 20529 00000F8A 50                      	push	ax			; set devmark for mem command
 20530 00000F8B A1[E003]                	mov	ax,[memhi]
 20531 00000F8E 2B06[E403]              	sub	ax,[area]
 20532 00000F92 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20533                                  	;mov	al,devmark_inst ; 'T'
 20534 00000F95 B054                    	mov	al,'T'
 20535 00000F97 E86704                  	call	setdevmark
 20536 00000F9A 58                      	pop	ax
 20537                                  
 20538 00000F9B 8B3E[E003]              	mov	di,[memhi]
 20539 00000F9F 8EC7                    	mov	es,di
 20540 00000FA1 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20541 00000FA5 31FF                    	xor	di,di
 20542 00000FA7 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20543 00000FAB BE[BB10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20544 00000FAE B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20545                                  	; 24/10/2022 
 20546                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20547 00000FB1 010E[DE03]              	add	[memlo],cx
 20548                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20549                                  	; 11/12/2022
 20550                                  	; ds = cs
 20551                                  	;or	byte [cs:setdevmarkflag],2
 20552 00000FB5 800E[2414]02            	or	byte [setdevmarkflag],2
 20553                                  	;or	byte [setdevmarkflag],for_devmark
 20554 00000FBA E8F520                  	call	round			; check mem error. also,readjust memhi for the next use.
 20555 00000FBD F3A4                    	rep	movsb			; reallocate it.
 20556                                  
 20557 00000FBF C706[5203][9410]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20558 00000FC5 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20559                                  	;or	word [install_flag],has_installed ; set the flag.
 20560                                  	;or	byte [install_flag],has_installed ; 2
 20561                                  	; 11/12/2022
 20562 00000FC9 800E[4A03]02            	or	byte [install_flag],2
 20563                                  	; 24/10/2022
 20564                                  	;or	word [install_flag],2	
 20565                                  
 20566                                  ; ----------------------------------------------------------------------
 20567                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20568                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20569                                  ; have_install_cmd.
 20570                                  ; ----------------------------------------------------------------------
 20571                                  
 20572 00000FCE E8E120                  	call	round
 20573 00000FD1 8B1E[E003]              	mov	bx,[memhi]
 20574 00000FD5 A1[E403]                	mov	ax,[area]
 20575 00000FD8 A3[DA03]                	mov	[old_area],ax		; save [area]
 20576 00000FDB 8EC0                    	mov	es,ax			;calc what we needed
 20577 00000FDD 29C3                    	sub	bx,ax
 20578                                  	; 24/10/2022
 20579 00000FDF B44A                    	mov	ah,4Ah ; SETBLOCK
 20580 00000FE1 CD21                    	int	21h			;give the rest back
 20581                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20582                                  		; ES = segment address of block to change
 20583                                  		; BX = new size in paragraphs
 20584 00000FE3 06                      	push	es
 20585 00000FE4 8CC0                    	mov	ax,es
 20586 00000FE6 48                      	dec	ax
 20587 00000FE7 8EC0                    	mov	es,ax			;point to arena
 20588                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20589                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20590                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20591                                  	; 24/10/2022
 20592 00000FE9 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20593 00000FF0 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20594 00000FF7 07                      	pop	es
 20595                                  
 20596 00000FF8 BBFFFF                  	mov	bx,0FFFFh
 20597 00000FFB B448                    	mov	ah,48h ; ALLOC
 20598 00000FFD CD21                    	int	21h
 20599 00000FFF B448                    	mov	ah,48h ; ALLOC
 20600 00001001 CD21                    	int	21h			; allocate the rest of the memory
 20601                                  		; DOS - 2+ - ALLOCATE MEMORY
 20602                                  		; BX = number of 16-byte paragraphs desired
 20603 00001003 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20604 00001006 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20605                                  
 20606                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20607                                  ;;;; allocated.
 20608                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20609                                  ;;;; this time) to the top-of-the memory),here we are going to
 20610                                  ;;;; 1). "setblock" from memhi to confbot.
 20611                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20612                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20613                                  
 20614                                  ;memory allocation for sysinit,confbot module.
 20615                                  
 20616 0000100C 8EC0                    	mov	es,ax
 20617                                  	;mov	bx,[CONFBOT]
 20618                                  	; 24/10/2022
 20619 0000100E 8B1E[A102]              	mov	bx,[top_of_cdss]
 20620 00001012 29C3                    	sub	bx,ax			; confbot - memhi
 20621 00001014 4B                      	dec	bx			; make a room for the memory block id.
 20622 00001015 4B                      	dec	bx			; make sure!!!.
 20623 00001016 B44A                    	mov	ah,4Ah ; SETBLOCK
 20624 00001018 CD21                    	int	21h			; this will free (confbot to top of memory)
 20625                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20626                                  		; ES = segment address of block to change
 20627                                  		; BX = new size in paragraphs
 20628 0000101A BBFFFF                  	mov	bx,0FFFFh
 20629 0000101D B448                    	mov	ah,48h ; ALLOC
 20630 0000101F CD21                    	int	21h
 20631 00001021 B448                    	mov	ah,48h ; ALLOC
 20632 00001023 CD21                    	int	21h			; allocate (confbot to top of memory)
 20633                                  		; DOS - 2+ - ALLOCATE MEMORY
 20634                                  		; BX = number of 16-byte paragraphs desired
 20635 00001025 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20636                                  					; need this to free this area for command.com.
 20637 00001028 8E06[E003]              	mov	es,[memhi]
 20638 0000102C B449                    	mov	ah,49h			; free allocated memory.
 20639 0000102E CD21                    	int	21h			; free (memhi to confbot(=area))
 20640                                  		; DOS - 2+ - FREE MEMORY
 20641                                  		; ES = segment address of area to be freed
 20642                                  endfile_ret:
 20643 00001030 C3                      	retn
 20644                                  
 20645                                  ; End of "EndFile" DOS structure configuration.
 20646                                  
 20647                                  ; ----------------------------------------------------------------------
 20648                                  ; 26/03/2019 - Retro DOS v4.0
 20649                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20650                                  ; ----------------------------------------------------------------------
 20651                                  ; Do_Install_Exec
 20652                                  ;
 20653                                  ; This procedure is used to EXEC a program being loaded via the 
 20654                                  ; "install=" mechanism in config.sys. It does this by setting up
 20655                                  ; the parameters, and then jumping to sysinit_base, which has been
 20656                                  ; setup in low memory. When complete, sysinit_base will jump back
 20657                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20658                                  ; program).
 20659                                  
 20660                                  ;SYSINIT:10CFh:
 20661                                  
 20662                                  do_install_exec:			; now,handles install= command.
 20663                                  
 20664 00001031 56                      	push	si			; save si for config.sys again.
 20665                                  
 20666                                  ; we are going to call load/exec function.
 20667                                  ; set es:bx to the parameter block here;;;;;;;
 20668                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20669                                  ; after the filename. so parameter starts after that. if next
 20670                                  ; character is a line feed (i.e. 10),then assume that the 0
 20671                                  ; we already encountered used to be a carrage return. in this
 20672                                  ; case,let's set the length to 0 which will be followed by
 20673                                  ; carridge return.
 20674                                  
 20675                                  ; es:si -> command line in config.sys. points to the first non blank
 20676                                  ;character after =.
 20677                                  
 20678 00001032 06                      	push	es
 20679 00001033 1E                      	push	ds
 20680 00001034 07                      	pop	es
 20681 00001035 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20682 00001036 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20683                                  
 20684 00001038 31C9                    	xor	cx,cx
 20685 0000103A FC                      	cld
 20686 0000103B 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20687 00001041 BF[6E03]                	mov	di,ldexec_parm
 20688                                  installfilename:			; skip the file name
 20689 00001044 AC                      	lodsb				; al = ds:si; si++
 20690 00001045 3C00                    	cmp	al,0
 20691                                  	;je	short got_installparm
 20692                                  	;jmp	short installfilename
 20693                                  	; 10/04/2024
 20694 00001047 75FB                    	jne	short installfilename
 20695                                  got_installparm:			; copy the parameters to ldexec_parm
 20696 00001049 AC                      	lodsb
 20697 0000104A 268805                  	mov	[es:di],al
 20698 0000104D 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20699 0000104F 7405                    	je	short done_installparm
 20700 00001051 FEC1                    	inc	cl			; # of char. in the parm.
 20701 00001053 47                      	inc	di
 20702 00001054 EBF3                    	jmp	short got_installparm
 20703                                  done_installparm:
 20704 00001056 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20705 0000105B 80F900                  	cmp	cl,0			; if no parm,then
 20706 0000105E 7506                    	jne	short install_seg_set 	; let the parm area
 20707 00001060 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20708                                  					; starts with cr.
 20709                                  install_seg_set:
 20710 00001066 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20711 0000106D 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20712                                  
 20713                                  ;---------------------------------------------------M067----------------
 20714                                  ;
 20715                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20716                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20717                                  ;
 20718                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20719                                  ;
 20720                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20721                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20722                                  ; 	was fixed. 
 20723                                  ;
 20724                                  ; ----------------------------------------------------------------------
 20725                                  
 20726                                  ;;ifdef   MULTI_CONFIG
 20727                                  
 20728                                  ; If there's any environment data in "config_wrkseg", pass to app
 20729                                  
 20730                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20731                                          ;mov     cx,ax
 20732                                          ;cmp     word [cs:config_envlen],0
 20733                                          ;je      short no_envdata2
 20734                                          ;mov     cx,[cs:config_wrkseg]
 20735                                  ;no_envdata2:
 20736                                  ;;endif  ;MULTI_CONFIG
 20737                                  
 20738                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20739                                  	; 24/10/2022
 20740                                  	;mov	[cs:iexec.environ],cx
 20741                                  	; 02/11/2022
 20742 0000106F 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20743                                  
 20744                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20745 00001073 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20746                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20747 00001077 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20748                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20749 0000107B 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20750 0000107F E86E00                  	call	sum_up
 20751 00001082 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20752 00001086 31C0                    	xor	ax,ax
 20753 00001088 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20754 0000108A BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20755 0000108D 06                      	push	es			; save es,ds for load/exec
 20756 0000108E 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20757 0000108F 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20758                                  					; load/exec function and check sum.
 20759                                  
 20760                                  ;----------------------------------------
 20761                                  
 20762                                  ;j.k. this is the returning address from sysinit_base.
 20763                                  
 20764                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20765                                  
 20766                                  sysinitptr:				; returning far address from sysinit_base
 20767 00001094 5E                      	pop	si			; restore si for config.sys file.
 20768 00001095 06                      	push	es
 20769 00001096 1E                      	push	ds
 20770 00001097 07                      	pop	es
 20771 00001098 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20772 00001099 7306                            jnc     short install_exit_ret
 20773                                  
 20774 0000109B 56                      	push	si			; error in loading the file for install=.
 20775 0000109C E8AA22                  	call	badload 		; es:si-> path,filename,0.
 20776 0000109F 5E                      	pop	si
 20777                                  
 20778                                  	; 24/10/2022
 20779                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20780                                  	; 11/12/2022
 20781                                  	; ds = cs
 20782 000010A0 C3                      	retn
 20783                                  
 20784                                  install_exit_ret:
 20785                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20786                                  
 20787                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20788                                  ;SYSINIT:1142h:
 20789 000010A1 B44D                    	mov     ah,4Dh
 20790 000010A3 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20791 000010A5 80FC03                  	cmp     ah,3
 20792 000010A8 7404                    	jz      short sysinitptr_retn
 20793 000010AA E88F16                  	call    error_line
 20794 000010AD F9                      	stc
 20795                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20796 000010AE C3                      	retn		
 20797                                  
 20798                                  ; ----------------------------------------------------------------------
 20799                                  
 20800                                  ;**	ParaRound - Round Up length to paragraph multiple
 20801                                  ;
 20802                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20803                                  ;	by 16 yielding a "length in paragraphs" value.
 20804                                  ;
 20805                                  ;	ENTRY	(ax) = byte length
 20806                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20807                                  ;	USES	ax, flags
 20808                                  
 20809                                  ParaRound:
 20810 000010AF 83C00F                  	add	ax,15
 20811 000010B2 D1D8                    	rcr	ax,1
 20812 000010B4 D1E8                    	shr	ax,1
 20813 000010B6 D1E8                    	shr	ax,1
 20814 000010B8 D1E8                    	shr	ax,1
 20815 000010BA C3                      	retn
 20816                                  
 20817                                  ; ----------------------------------------------------------------------
 20818                                  ; sysinit_base module.
 20819                                  ;
 20820                                  ; This module is relocated by the routine EndFile to a location in low
 20821                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20822                                  ; that are being loaded by the "install=" command. After the EXEC call
 20823                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20824                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20825                                  ; If it did, then this module will print an error message and stop the
 20826                                  ; system. Otherwise, it returns control to SYSINIT.
 20827                                  ;
 20828                                  ;in: after relocation,
 20829                                  ;    ax = 4b00h - load and execute the program dos function.
 20830                                  ;    ds = confbot. segment of config.sys file image
 20831                                  ;    es = sysinitseg. segment of sysinit module itself.
 20832                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20833                                  ;    es:bx = pointer to a parameter block for load.
 20834                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20835                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20836                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20837                                  ;			word boundary moduler form.
 20838                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20839                                  ;
 20840                                  ;note: sysinit should save necessary registers and when the control is back
 20841                                  
 20842                                  	; 24/10/2022
 20843                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20844                                  sysinit_base:				
 20845 000010BB 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20846 000010C0 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20847 000010C5 CD21                    	int	21h			; load/exec dos call.
 20848 000010C7 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20849 000010CC 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20850 000010D1 1F                      	pop	ds			; restore confbot seg
 20851 000010D2 07                      	pop	es			; restore sysinitseg
 20852 000010D3 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20853                                  					; at this time,i don't have to worry about
 20854                                  					; that sysinit module has been broken or not.
 20855 000010D5 E81800                  	call	sum_up			; otherwise,check if it is good.
 20856 000010D8 263906[5603]            	cmp	[es:checksum],ax
 20857 000010DD 740C                    	je	short sysinit_base_end
 20858                                  
 20859                                  ;	memory broken. show "memory allocation error" message and stall.
 20860                                  
 20861 000010DF B409                    	mov	ah,9
 20862 000010E1 0E                      	push	cs
 20863 000010E2 1F                      	pop	ds
 20864 000010E3 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20865 000010E6 CD21                    	int	21h
 20866                                  		; DOS - PRINT STRING
 20867                                  		; DS:DX -> string terminated by "$"
 20868                                  	; 24/10/2022
 20869                                  _stall: 
 20870                                  	; 11/12/2022
 20871 000010E8 F4                      	hlt 
 20872                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20873                                  	;hlt				;use HLT to minimize energy consumption
 20874 000010E9 EBFD                            jmp	short _stall
 20875                                  
 20876                                  sysinit_base_end: 
 20877 000010EB 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20878                                  
 20879                                  ;-------------------------------------
 20880                                  
 20881                                  sum_up:
 20882                                  
 20883                                  ;in:   es - sysinitseg.
 20884                                  ;out:  ax - result
 20885                                  ;
 20886                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20887                                  ;	 sysinit segment,the data area, and the current stack area are not
 20888                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20889                                  ;	 gaurantee to be safe.
 20890                                  ;
 20891                                  ;first sum up confbot seg.
 20892                                  
 20893 000010F0 1E                      	push	ds
 20894                                  	;mov	ax,[es:CONFBOT]
 20895                                  	; 24/10/2022
 20896 000010F1 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20897 000010F5 8ED8                    	mov	ds,ax
 20898 000010F7 31F6                    	xor	si,si
 20899 000010F9 31C0                    	xor	ax,ax
 20900 000010FB 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20901                                  					;whole test better fail.
 20902 00001100 D1E9                    	shr	cx,1			; make it a word count
 20903 00001102 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20904                                  sum1:
 20905 00001104 0304                    	add	ax,[si]
 20906 00001106 46                      	inc	si
 20907 00001107 46                      	inc	si
 20908 00001108 E2FA                    	loop	sum1
 20909                                  ;now,sum up sysinit module.
 20910                                  sum_sys_code:
 20911                                  	; 24/10/2022
 20912 0000110A BE0A11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20913                                  				        ; starting after the stack.  M069
 20914                                  					;  this does not cover the possible stack code!!!
 20915                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20916                                  	; 02/11/2022
 20917                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20918                                  	; 30/12/2022 (BugFix)
 20919                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20920 0000110D B9[D038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20921 00001110 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20922 00001112 D1E9                    	shr	cx,1
 20923                                  sum2:
 20924 00001114 260304                  	add	ax,[es:si]
 20925 00001117 46                      	inc	si
 20926 00001118 46                      	inc	si
 20927 00001119 E2F9                    	loop	sum2
 20928 0000111B 1F                      	pop	ds
 20929 0000111C C3                      	retn
 20930                                  
 20931                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20932                                  
 20933                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20934                                  ;SYSINIT:11BDh:
 20935 0000111D 0000                    	dw	0
 20936                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20937                                  ;SYSINIT:11BFh:
 20938 0000111F 0000                    	dw	0
 20939                                  
 20940                                  mem_alloc_err_msgx:
 20941                                  
 20942                                         ;include msbio.cl4		; memory allocation error message
 20943                                  
 20944                                  ;SYSINIT:12F6h:	; MSDOS 6.21 IO.SYS
 20945 00001121 0D0A                    	db	0Dh,0Ah
 20946 00001123 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20946 0000112C 6C6F636174696F6E20-
 20946 00001135 6572726F722024     
 20947                                  
 20948                                  end_sysinit_base: ; label byte
 20949                                  	; 24/10/2022
 20950                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20951                                  
 20952                                  ; ----------------------------------------------------------------------
 20953                                  ; Set_Buffer
 20954                                  ;
 20955                                  ;function: set buffers in the real memory.				  
 20956                                  ;	   lastly set the memhi,memlo for the next available free address.
 20957                                  ;
 20958                                  ;input:    ds:bx -> buffinfo.
 20959                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20960                                  ;	   singlebuffersize = buffer header size + sector size		  
 20961                                  ;
 20962                                  ;output:   buffers Queue established.	       				   
 20963                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20964                                  ; ----------------------------------------------------------------------
 20965                                  
 20966                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20967                                  	; (SYSINIT:11DCh)
 20968                                  
 20969                                  set_buffer:
 20970 0000113C 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20971 0000113E E85500                  	call	GetBufferAddr
 20972 00001141 7402                    	jz	short set_buff_1
 20973 00001143 B201                    	mov	dl,1				; buffers in HMA
 20974                                  set_buff_1:
 20975                                  	; 25/10/2022
 20976                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20977 00001145 893F                    	mov	[bx],di
 20978                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20979 00001147 8C4702                  	mov	[bx+2],es
 20980                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20981 0000114A C747040000              	mov	word [bx+4],0
 20982                                  
 20983 0000114F 89F8                    	mov	ax,di
 20984 00001151 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20985 00001156 57                      	push	di				; remember first buffer
 20986                                  
 20987                                  ;	for each buffer
 20988                                  
 20989                                  nxt_buff:
 20990 00001157 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20991 0000115A 89C7                    	mov	di,ax
 20992 0000115C E2F9                    	loop	nxt_buff
 20993                                  
 20994 0000115E 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20995                                  
 20996 00001163 59                      	pop	cx				; get first buffer
 20997                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20998 00001164 26890D                  	mov	[es:di],cx
 20999 00001167 87CF                    	xchg	cx,di
 21000                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21001                                  	; 25/10/2022
 21002 00001169 26894D02                	mov	[es:di+2],cx
 21003                                  
 21004 0000116D 08D2                    	or	dl,dl				; In HMa ?
 21005 0000116F 7417                    	jz	short set_buff_2		; no
 21006                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21007 00001171 C6470C01                	mov	byte [bx+12],1
 21008 00001175 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21009                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21010 00001179 C7470D0000              	mov	word [bx+13],0
 21011                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21012 0000117E 89470F                  	mov	word [bx+15],ax
 21013 00001181 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21014                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21015 00001185 83E814                  	sub	ax,20
 21016                                  set_buff_2:
 21017 00001188 2E0106[DE03]            	add	[cs:memlo],ax
 21018                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21019 0000118D 2E800E[2414]02          	or	byte [cs:setdevmarkflag],2
 21020                                  	;call	round
 21021                                  	;retn
 21022                                  	; 12/12/2022
 21023 00001193 E91C1F                  	jmp	round
 21024                                  
 21025                                  ; ----------------------------------------------------------------------
 21026                                  ; procedure : GetBufferAddr
 21027                                  ;
 21028                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21029                                  ;
 21030                                  ; returns in es:di the buffer adress
 21031                                  ; returns NZ if allocated in HMA
 21032                                  ; ----------------------------------------------------------------------
 21033                                  
 21034                                  	; 25/10/2022 
 21035                                  GetBufferAddr:
 21036 00001196 53                      	push	bx
 21037 00001197 52                      	push	dx
 21038 00001198 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21039 0000119C 2EF726[9702]            	mul	word [cs:buffers]
 21040                                  	;add	ax,0Fh
 21041 000011A1 83C00F                  	add	ax,15 
 21042                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21043                                  	;and	ax,~15	; 0FFF0h	; para round
 21044                                  	; 12/12/2022
 21045 000011A4 24F0                    	and	al,~15	; 0F0h
 21046 000011A6 89C3                    	mov	bx,ax
 21047 000011A8 B8024A                  	mov	ax,4A02h
 21048                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21049 000011AB CD2F                    	int	2Fh
 21050 000011AD 83FFFF                  	cmp	di,0FFFFh
 21051 000011B0 7508                    	jne	short got_hma
 21052 000011B2 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 21053                                  	;zf=1
 21054                                  	;xor	di,di	; 25/10/2022
 21055                                  	;zf=1
 21056 000011B5 2E8E06[E003]            	mov	es,[cs:memhi]
 21057                                  got_hma:
 21058 000011BA 5A                      	pop	dx
 21059 000011BB 5B                      	pop	bx
 21060 000011BC C3                      	retn
 21061                                  
 21062                                  ; ----------------------------------------------------------------------
 21063                                  
 21064                                  set_buffer_info:
 21065                                  
 21066                                  ;function: set buf_link,buf_id,buf_sector
 21067                                  ;
 21068                                  ;in: es:di -> buffer header to be set.
 21069                                  ;    ax = di
 21070                                  ;
 21071                                  ;out:
 21072                                  ;    above entries set.
 21073                                  
 21074                                  	; 25/10/2022 
 21075 000011BD 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21076                                  	;pop	word [es:di+buffinfo.buf_prev]
 21077 000011C2 268F4502                	pop	word [es:di+2]
 21078 000011C6 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21079 000011CA 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21080                                  	;mov	[es:di+buffinfo.buf_next],ax
 21081 000011CF 268905                  	mov	[es:di],ax
 21082                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21083 000011D2 26C74504FF00            	mov	word [es:di+4],00FFh
 21084                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21085 000011D8 26C745060000            	mov	word [es:di+6],0
 21086                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21087 000011DE 26C745080000            	mov	word [es:di+8],0
 21088 000011E4 C3                      	retn
 21089                                  
 21090                                  ; ======================================================================
 21091                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21092                                  ; ----------------------------------------------------------------------
 21093                                  ; 27/03/2019 - Retro DOS v4.0
 21094                                  
 21095                                  ; ----------------------------------------------------------------------
 21096                                  ; ibmstack initialization routine.
 21097                                  ;
 21098                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21099                                  ;	has been modified. this initialization routine also has to
 21100                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21101                                  ;	should be set to signal that this interrupt handler is the
 21102                                  ;	first handler hooked to this interrupt vector.
 21103                                  ;	we determine this by looking at the instruction pointed by
 21104                                  ;	this vector. if it is iret, then this handler should be the
 21105                                  ;	first one. in our case, only the interrupt vector 77h is the
 21106                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21107                                  ;
 21108                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21109                                  ;	some design changes are needed to the above interrupt sharing
 21110                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21111                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21112                                  ;	interrupts would only be generated on levels 7 and 15.
 21113                                  ;	these assumptions are not true any more. we have to use the firstflag
 21114                                  ;	for every level of interrupt. we will set the firstflag on the following
 21115                                  ;	conditions:
 21116                                  ;
 21117                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21118                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21119                                  ;	 c. else if cs:ip points to an iret, then "first"
 21120                                  ;	 d. else if cs:ip points to dummy, then "first"
 21121                                  ;
 21122                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21123                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21124                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21125                                  ;	the bioses for all of the machines.
 21126                                  ;
 21127                                  ;	system design group requests bios to handle the phantom interrupts.
 21128                                  ;
 21129                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21130                                  ;	produced by the bogus adapter card even without interrupt request is
 21131                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21132                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21133                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21134                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21135                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21136                                  ;	interrupt line.
 21137                                  ;
 21138                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21139                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21140                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21141                                  ;	control. if it is the first, then the following action should be
 21142                                  ;	taken. we don't have to implement skack logic in this case.
 21143                                  ;
 21144                                  ;	to implement this logic, we rather choose a simple method.
 21145                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21146                                  ;	going to hook this interrupt vector. the reason is if the original
 21147                                  ;	vector points to "iret" and do nothing, we don't need
 21148                                  ;	to implement the stack logic for it. this will simplify implementation
 21149                                  ;	while maintaining compatibility with the old version of dos.
 21150                                  ;	this implies that in the main stack code, there might be a stack code
 21151                                  ;	that will never be used, a dead code.
 21152                                  ;
 21153                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21154                                  
 21155                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21156                                  	; (SYSINIT:1287h)
 21157                                  
 21158                                  	; 14/12/2022
 21159                                  stackinit:
 21160 000011E5 50                      	push	ax
 21161 000011E6 1E                      	push	ds
 21162 000011E7 06                      	push	es
 21163 000011E8 53                      	push	bx
 21164 000011E9 51                      	push	cx
 21165 000011EA 52                      	push	dx
 21166 000011EB 57                      	push	di
 21167 000011EC 56                      	push	si
 21168 000011ED 55                      	push	bp
 21169                                  
 21170                                  ;currently es -> stack code area
 21171                                  
 21172                                  	; 12/12/2022
 21173                                  	; ds = cs
 21174 000011EE A1[8A02]                	mov	ax,[stack_count]
 21175 000011F1 89C1                    	mov	cx,ax  ; *!*!*  
 21176                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21177                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21178                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21179 000011F3 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21180                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21181 000011F7 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21182 000011FA 26A3[0600]              	mov	[es:stacksize],ax
 21183                                  	; 12/12/2022
 21184 000011FE A1[8E02]                	mov	ax,[stack_addr]			; offset
 21185                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21186                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21187                                  	;mov	ax,[cs:stack_addr]  ; !!
 21188 00001201 26A3[0800]              	mov	[es:stacks],ax
 21189                                  	; 12/12/2022
 21190 00001205 89C5                    	mov	bp,ax ; *!*
 21191 00001207 A1[9002]                	mov	ax,[stack_addr+2]
 21192                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21193                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21194                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21195 0000120A 26A3[0A00]              	mov	[es:stacks+2],ax
 21196                                  
 21197                                  ; initialize the data fields with the parameters
 21198                                  
 21199                                  ; "firstentry" will always be at stacks
 21200                                  
 21201                                  	;mov	bp,[es:stacks]			; get offset of stack
 21202                                  	; 12/12/2022
 21203                                  	; bp = [es:stacks] ; *!*
 21204 0000120E 26892E[0C00]            	mov	[es:firstentry],bp
 21205                                  
 21206                                  ; the stacks will always immediately follow the table entries
 21207                                  
 21208 00001213 B80800                  	mov	ax,entrysize ; 8
 21209                                  	;mov	cx,[es:stackcount]
 21210                                  	; 12/12/2022
 21211                                  	; cx = [es:stackcount] ; *!*!*
 21212 00001216 F7E1                    	mul	cx
 21213 00001218 01E8                    	add	ax,bp
 21214 0000121A 26A3[0400]              	mov	[es:stackat],ax
 21215 0000121E 89C3                    	mov	bx,ax
 21216 00001220 83EB02                  	sub	bx,2
 21217                                  
 21218                                  ; zero the entire stack area to start with
 21219                                  
 21220 00001223 268B3E[0400]            	mov	di,[es:stackat]
 21221 00001228 26A1[0600]              	mov	ax,[es:stacksize]
 21222 0000122C F7E1                    	mul	cx
 21223 0000122E 89C1                    	mov	cx,ax
 21224 00001230 31C0                    	xor	ax,ax
 21225 00001232 06                      	push	es
 21226 00001233 1F                      	pop	ds				;ds = relocated stack code seg.
 21227                                  
 21228                                  ;now, ds -> stack code area
 21229                                  
 21230 00001234 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21231 00001238 FC                      	cld
 21232 00001239 F3AA                    	rep	stosb
 21233                                  
 21234 0000123B 8B0E[0200]              	mov	cx,[stackcount]
 21235                                  
 21236                                  ; loop for "count" times, building a table entry
 21237                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21238                                  ;  cx = number of entries
 21239                                  ;  es:bp => base of stacks - 2
 21240                                  ;  es:bx => first table entry
 21241                                  
 21242                                  buildloop:
 21243                                  	; 11/12/2022
 21244                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21245                                  	; 25/10/2022
 21246 0000123F 26C6460000              	mov	byte [es:bp],free
 21247 00001244 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21248                                  	;mov	[es:bp+1],al
 21249 00001248 26894602                	mov	[es:bp+savedsp],ax
 21250                                  	;mov	[es:bp2],ax
 21251 0000124C 26894604                	mov	[es:bp+savedss],ax
 21252                                  	;mov	[es:bp+4],ax
 21253 00001250 031E[0600]              	add	bx,[stacksize]
 21254 00001254 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21255                                  	;mov	[es:bp+6],bx
 21256 00001258 26892F                  	mov	[es:bx],bp
 21257 0000125B 83C508                  	add	bp,entrysize ; 8
 21258                                  
 21259 0000125E E2DF                    	loop	buildloop
 21260                                  
 21261 00001260 83ED08                  	sub	bp,entrysize ; 8
 21262 00001263 892E[0E00]              	mov	[lastentry],bp
 21263 00001267 892E[1000]              	mov	[nextentry],bp
 21264                                  
 21265 0000126B 1E                      	push	ds
 21266 0000126C B800F0                  	mov	ax,0F000h		;look at the model byte
 21267 0000126F 8ED8                    	mov	ds,ax
 21268 00001271 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21269 00001276 1F                      	pop	ds
 21270 00001277 7504                    	jne	short skip_disablenmis
 21271                                  
 21272 00001279 B007                    	mov	al,07h			; disable convertible nmis
 21273 0000127B E672                    	out	72h,al
 21274                                  
 21275                                  skip_disablenmis:
 21276 0000127D 31C0                    	xor	ax,ax
 21277 0000127F 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21278                                  					;ds - relocated stack code segment
 21279 00001281 FA                      	cli
 21280                                  
 21281                                  	;irp	aa,<02,08,09,70>
 21282                                  	;
 21283                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21284                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21285                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21286                                  	;mov	dx,offset int&aa	;pass where new handler is
 21287                                  	;call	new_init_loop		;adjust the vector to new handler,
 21288                                  	;				;saving pointer to original owner
 21289                                  	;endm
 21290                                  
 21291                                  stkinit_02:
 21292 00001282 BE0800                  	mov	si,02h*4 ; 8
 21293 00001285 BF[4206]                	mov	di,INT19OLD02
 21294 00001288 BB[1200]                	mov	bx,old02
 21295 0000128B BA[1600]                	mov	dx,int02
 21296 0000128E E84901                  	call	new_init_loop
 21297                                  stkinit_08:
 21298 00001291 BE2000                  	mov	si,08h*4 ; 32
 21299 00001294 BF[4706]                	mov	di,INT19OLD08
 21300 00001297 BB[3800]                	mov	bx,old08
 21301 0000129A BA[3C00]                	mov	dx,int08
 21302 0000129D E83A01                  	call	new_init_loop
 21303                                  stkinit_09:
 21304 000012A0 BE2400                  	mov	si,09h*4 ; 36
 21305 000012A3 BF[4C06]                	mov	di,INT19OLD09
 21306 000012A6 BB[4100]                	mov	bx,old09
 21307 000012A9 BA[4500]                	mov	dx,int09
 21308 000012AC E82B01                  	call	new_init_loop
 21309                                  stkinit_70:
 21310 000012AF BEC001                  	mov	si,70h*4 ; 448
 21311 000012B2 BF[6A06]                	mov	di,INT19OLD70
 21312 000012B5 BB[4E00]                	mov	bx,old70
 21313 000012B8 BA[5200]                	mov	dx,int70
 21314 000012BB E81C01                  	call	new_init_loop
 21315                                  
 21316                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21317                                  	;
 21318                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21319                                  	;push	ds			;save relocated stack code segment
 21320                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21321                                  	;push	ds
 21322                                  	;pop	dx			;dx = segment value
 21323                                  	;	
 21324                                  	;cmp	dx,0
 21325                                  	;jz	int&aa&_first
 21326                                  	;
 21327                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21328                                  	;jz	int&aa&_first
 21329                                  	;
 21330                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21331                                  	;jz	int&aa&_not_first
 21332                                  	;
 21333                                  	;cmp	dx,0f000h		;rom bios segment
 21334                                  	;jnz	int&aa&_not_first
 21335                                  	;
 21336                                  	;push	es
 21337                                  	;push	dx
 21338                                  	;mov	dx,0f000h
 21339                                  	;mov	es,dx
 21340                                  	;cmp	bx,word ptr es:0ff01h
 21341                                         	;pop	dx
 21342                                  	;pop	es
 21343                                  	;jz	int&aa&_first
 21344                                  	;
 21345                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21346                                  	;pop	ds
 21347                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21348                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21349                                  	;mov	dx, offset int&aa	;pass where new handler is
 21350                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21351                                  	;				;pointer to original owner.
 21352                                  	;jmp	short int&aa&_end
 21353                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21354                                  	;pop	ds
 21355                                  ;int&aa&_end:
 21356                                  	;
 21357                                  	;endm
 21358                                  
 21359                                  stkinit_0A:
 21360 000012BE BE2800                  	mov	si,0Ah*4 ; 40
 21361                                  	
 21362                                  ; 14/12/2022
 21363                                  %if 0	
 21364                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21365                                  	push	ds
 21366                                  	
 21367                                  	lds	bx,[es:si]
 21368                                  	push	ds
 21369                                  	pop	dx
 21370                                  		
 21371                                  	cmp	dx,0
 21372                                  	je	short int_0A_first
 21373                                  	
 21374                                  	cmp	byte [bx],0CFh
 21375                                  	je	short int_0A_first
 21376                                  	
 21377                                  	cmp	word [bx+6],424Bh
 21378                                  	je	short int_0A_not_first
 21379                                  	
 21380                                  	cmp	dx,0F000h
 21381                                  	jne	short int_0A_not_first
 21382                                  	
 21383                                  	push	es
 21384                                  	push	dx
 21385                                  	mov	dx,0F000h
 21386                                  	mov	es,dx
 21387                                  	cmp	bx,[es:0FF01h]
 21388                                         	pop	dx
 21389                                  	pop	es
 21390                                  	je	short int_0A_first
 21391                                  %Endif
 21392                                  
 21393                                  	; 14/12/2022
 21394                                  	; 25/10/2022
 21395 000012C1 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21396 000012C4 730C                    	jnc	short int_0A_first
 21397                                  	
 21398                                  int_0A_not_first:
 21399                                  	; 14/12/2022
 21400                                  	; 25/10/2022
 21401                                  	;pop	ds
 21402 000012C6 BF[5106]                	mov	di,INT19OLD0A
 21403 000012C9 BB[5900]                	mov	bx,old0A
 21404 000012CC BA[5700]                	mov	dx,int0A
 21405 000012CF E80801                  	call	new_init_loop
 21406                                  	
 21407                                  	; 14/12/2022	
 21408                                  	;jmp	short int_0A_end
 21409                                  ;int_0A_first:
 21410                                  	; 25/10/2022
 21411                                  	;pop	ds
 21412                                  
 21413                                  	; 14/12/2022
 21414                                  int_0A_first:
 21415                                  int_0A_end:
 21416                                  
 21417                                  stkinit_0B:
 21418 000012D2 BE2C00                  	mov	si,0Bh*4 ; 44
 21419                                  	
 21420                                  	; 14/12/2022
 21421                                  	; 25/10/2022
 21422 000012D5 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21423 000012D8 730C                    	jnc	short int_0B_end ; int_0B_first
 21424                                  
 21425                                  ; 14/12/2022
 21426                                  %if 0	
 21427                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21428                                  	push	ds
 21429                                  	lds	bx,[es:si]
 21430                                  	push	ds
 21431                                  	pop	dx
 21432                                  		
 21433                                  	cmp	dx,0
 21434                                  	je	short int_0B_first
 21435                                  
 21436                                  	cmp	byte [bx],0CFh
 21437                                  	je	short int_0B_first
 21438                                  	
 21439                                  	cmp	word [bx+6],424Bh
 21440                                  	je	short int_0B_not_first
 21441                                  	
 21442                                  	cmp	dx,0F000h
 21443                                  	jne	short int_0B_not_first
 21444                                  
 21445                                  	push	es
 21446                                  	push	dx
 21447                                  	mov	dx,0F000h
 21448                                  	mov	es,dx
 21449                                  	cmp	bx,[es:0FF01h]
 21450                                  	pop	dx
 21451                                  	pop	es
 21452                                  	je	short int_0B_first
 21453                                  %endif
 21454                                  
 21455                                  int_0B_not_first:
 21456                                  	; 14/12/2022
 21457                                  	; 25/10/2022
 21458                                  	;pop	ds
 21459 000012DA BF[5606]                	mov	di,INT19OLD0B
 21460 000012DD BB[7100]                	mov	bx,old0B
 21461 000012E0 BA[6F00]                	mov	dx,int0B
 21462 000012E3 E8F400                  	call	new_init_loop
 21463                                  
 21464                                  	; 14/12/2022
 21465                                  	;jmp	short int_0B_end
 21466                                  ;int_0B_first:
 21467                                  	; 25/10/2022
 21468                                  	;pop	ds
 21469                                  
 21470                                  int_0B_end:
 21471                                  	
 21472                                  stkinit_0C:
 21473 000012E6 BE3000                  	mov	si,0Ch*4 ; 48
 21474                                  	
 21475                                  	; 14/12/2022
 21476                                  	; 25/10/2022
 21477 000012E9 E8C300                  	call	int_xx_first_check
 21478 000012EC 730C                    	jnc	short int_0C_end ; int_0C_first
 21479                                  
 21480                                  ; 14/12/2022
 21481                                  %if 0	
 21482                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21483                                  	push	ds
 21484                                  	lds	bx,[es:si]
 21485                                  	push	ds
 21486                                  	pop	dx
 21487                                  		
 21488                                  	cmp	dx,0
 21489                                  	je	short int_0C_first
 21490                                  
 21491                                  	cmp	byte [bx],0CFh
 21492                                  	je	short int_0C_first
 21493                                  	
 21494                                  	cmp	word [bx+6],424Bh
 21495                                  	je	short int_0C_not_first
 21496                                  	
 21497                                  	cmp	dx,0F000h
 21498                                  	jne	short int_0C_not_first
 21499                                  
 21500                                  	push	es
 21501                                  	push	dx
 21502                                  	mov	dx,0F000h
 21503                                  	mov	es,dx
 21504                                  	cmp	bx,[es:0FF01h]
 21505                                  	pop	dx
 21506                                  	pop	es
 21507                                  	je	short int_0C_first
 21508                                  %endif
 21509                                  	
 21510                                  int_0C_not_first:
 21511                                  	; 14/12/2022
 21512                                  	; 25/10/2022
 21513                                  	;pop	ds
 21514 000012EE BF[5B06]                	mov	di,INT19OLD0C
 21515 000012F1 BB[8900]                	mov	bx,old0C
 21516 000012F4 BA[8700]                	mov	dx,int0C
 21517 000012F7 E8E000                  	call	new_init_loop
 21518                                  
 21519                                  	; 14/12/2022
 21520                                  	;jmp	short int_0C_end
 21521                                  ;int_0C_first:
 21522                                  	; 25/10/2022
 21523                                  	;pop	ds
 21524                                  
 21525                                  int_0C_end:
 21526                                  
 21527                                  stkinit_0D:
 21528 000012FA BE3400                  	mov	si,0Dh*4 ; 52
 21529                                  
 21530                                  	; 14/12/2022	
 21531                                  	; 25/10/2022
 21532 000012FD E8AF00                  	call	int_xx_first_check
 21533 00001300 730C                    	jnc	short int_0D_end ; int_0D_first
 21534                                  
 21535                                  ; 14/12/2022
 21536                                  %if 0	
 21537                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21538                                  	push	ds
 21539                                  	lds	bx,[es:si]
 21540                                  	push	ds
 21541                                  	pop	dx
 21542                                  		
 21543                                  	cmp	dx,0
 21544                                  	je	short int_0D_first
 21545                                  
 21546                                  	cmp	byte [bx],0CFh
 21547                                  	je	short int_0D_first
 21548                                  	
 21549                                  	cmp	word [bx+6],424Bh
 21550                                  	je	short int_0D_not_first
 21551                                  	
 21552                                  	cmp	dx,0F000h
 21553                                  	jne	short int_0D_not_first
 21554                                  
 21555                                  	push	es
 21556                                  	push	dx
 21557                                  	mov	dx,0F000h
 21558                                  	mov	es,dx
 21559                                  	cmp	bx,[es:0FF01h]
 21560                                  	pop	dx
 21561                                  	pop	es
 21562                                  	je	short int_0D_first
 21563                                  %endif
 21564                                  	
 21565                                  int_0D_not_first:
 21566                                  	; 14/12/2022
 21567                                  	; 25/10/2022
 21568                                  	;pop	ds
 21569 00001302 BF[6006]                	mov	di,INT19OLD0D
 21570 00001305 BB[A100]                	mov	bx,old0D
 21571 00001308 BA[9F00]                	mov	dx,int0D
 21572 0000130B E8CC00                  	call	new_init_loop
 21573                                  
 21574                                  	; 14/12/2022
 21575                                  	;jmp	short int_0D_end
 21576                                  	; 02/11/2022
 21577                                  ;int_0D_first:
 21578                                  	;pop	ds
 21579                                  
 21580                                  int_0D_end:
 21581                                  
 21582                                  stkinit_0E:
 21583 0000130E BE3800                  	mov	si,0Eh*4 ; 56
 21584                                  
 21585                                  	; 14/12/2022	
 21586                                  	; 25/10/2022
 21587 00001311 E89B00                  	call	int_xx_first_check
 21588 00001314 730C                    	jnc	short int_0E_end ; int_0E_first
 21589                                  
 21590                                  ; 14/12/2022
 21591                                  %if 0	
 21592                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21593                                  	push	ds
 21594                                  	lds	bx,[es:si]
 21595                                  	push	ds
 21596                                  	pop	dx
 21597                                  		
 21598                                  	cmp	dx,0
 21599                                  	je	short int_0E_first
 21600                                  
 21601                                  	cmp	byte [bx],0CFh
 21602                                  	je	short int_0E_first
 21603                                  	
 21604                                  	cmp	word [bx+6],424Bh
 21605                                  	je	short int_0E_not_first
 21606                                  	
 21607                                  	cmp	dx,0F000h
 21608                                  	jne	short int_0E_not_first
 21609                                  
 21610                                  	push	es
 21611                                  	push	dx
 21612                                  	mov	dx,0F000h
 21613                                  	mov	es,dx
 21614                                  	cmp	bx,[es:0FF01h]
 21615                                  	pop	dx
 21616                                  	pop	es
 21617                                  	je	short int_0E_first
 21618                                  %endif
 21619                                  	
 21620                                  int_0E_not_first:
 21621                                  	; 14/12/2022
 21622                                  	; 25/10/2022
 21623                                  	;pop	ds
 21624 00001316 BF[6506]                	mov	di,INT19OLD0E
 21625 00001319 BB[B900]                	mov	bx,old0E
 21626 0000131C BA[B700]                	mov	dx,int0E
 21627 0000131F E8B800                  	call	new_init_loop
 21628                                  
 21629                                  	; 14/12/2022
 21630                                  	;jmp	short int_0E_end
 21631                                  ;int_0E_first:
 21632                                  	; 25/10/2022
 21633                                  	;pop	ds	
 21634                                  
 21635                                  int_0E_end:
 21636                                  
 21637                                  stkinit_72:
 21638 00001322 BEC801                  	mov	si,72h*4 ; 456
 21639                                  	
 21640                                  	; 14/12/2022
 21641                                  	; 25/10/2022
 21642 00001325 E88700                  	call	int_xx_first_check
 21643 00001328 730C                    	jnc	short int_72_end ; int_72_first
 21644                                  
 21645                                  ; 14/12/2022
 21646                                  %if 0	
 21647                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21648                                  	push	ds
 21649                                  	lds	bx,[es:si]
 21650                                  	push	ds
 21651                                  	pop	dx
 21652                                  		
 21653                                  	cmp	dx,0
 21654                                  	je	short int_72_first
 21655                                  
 21656                                  	cmp	byte [bx],0CFh
 21657                                  	je	short int_72_first
 21658                                  	
 21659                                  	cmp	word [bx+6],424Bh
 21660                                  	je	short int_72_not_first
 21661                                  	
 21662                                  	cmp	dx,0F000h
 21663                                  	jne	short int_72_not_first
 21664                                  
 21665                                  	push	es
 21666                                  	push	dx
 21667                                  	mov	dx,0F000h
 21668                                  	mov	es,dx
 21669                                  	cmp	bx,[es:0FF01h]
 21670                                  	pop	dx
 21671                                  	pop	es
 21672                                  	je	short int_72_first
 21673                                  %endif
 21674                                  	
 21675                                  int_72_not_first:
 21676                                  	; 14/12/2022
 21677                                  	; 25/10/2022
 21678                                  	;pop	ds
 21679 0000132A BF[6F06]                	mov	di,INT19OLD72
 21680 0000132D BB[D100]                	mov	bx,old72
 21681 00001330 BA[CF00]                	mov	dx,int72
 21682 00001333 E8A400                  	call	new_init_loop
 21683                                  
 21684                                  	; 14/12/2022
 21685                                  	;jmp	short int_72_end
 21686                                  ;int_72_first:
 21687                                  	; 25/10/2022
 21688                                  	;pop	ds
 21689                                  
 21690                                  int_72_end:
 21691                                  
 21692                                  stkinit_73:
 21693 00001336 BECC01                  	mov	si,73h*4 ; 460
 21694                                  	
 21695                                  	; 14/12/2022
 21696                                  	; 25/10/2022
 21697 00001339 E87300                  	call	int_xx_first_check
 21698 0000133C 730C                    	jnc	short int_73_end ; int_73_first
 21699                                  
 21700                                  ; 14/12/2022
 21701                                  %if 0	
 21702                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21703                                  	push	ds
 21704                                  	lds	bx,[es:si]
 21705                                  	push	ds
 21706                                  	pop	dx
 21707                                  		
 21708                                  	cmp	dx,0
 21709                                  	je	short int_73_first
 21710                                  
 21711                                  	cmp	byte [bx],0CFh
 21712                                  	je	short int_73_first
 21713                                  	
 21714                                  	cmp	word [bx+6],424Bh
 21715                                  	je	short int_73_not_first
 21716                                  	
 21717                                  	cmp	dx,0F000h
 21718                                  	jne	short int_73_not_first
 21719                                  
 21720                                  	push	es
 21721                                  	push	dx
 21722                                  	mov	dx,0F000h
 21723                                  	mov	es,dx
 21724                                  	cmp	bx,[es:0FF01h]
 21725                                  	pop	dx
 21726                                  	pop	es
 21727                                  	je	short int_73_first
 21728                                  %endif	
 21729                                  	
 21730                                  int_73_not_first:
 21731                                  	; 14/12/2022
 21732                                  	; 25/10/2022
 21733                                  	;pop	ds
 21734 0000133E BF[7406]                	mov	di,INT19OLD73
 21735 00001341 BB[E900]                	mov	bx,old73
 21736 00001344 BA[E700]                	mov	dx,int73
 21737 00001347 E89000                  	call	new_init_loop
 21738                                  
 21739                                  	; 14/12/2022
 21740                                  	;jmp	short int_73_end
 21741                                  ;int_73_first:
 21742                                  	; 25/10/2022
 21743                                  	;pop	ds
 21744                                  
 21745                                  int_73_end:
 21746                                  
 21747                                  stkinit_74:
 21748 0000134A BED001                  	mov	si,74h*4 ; 464
 21749                                  	
 21750                                  	; 14/12/2022
 21751                                  	; 25/10/2022
 21752 0000134D E85F00                  	call	int_xx_first_check
 21753 00001350 730C                    	jnc	short int_74_end ; int_74_first
 21754                                  
 21755                                  ; 14/12/2022
 21756                                  %if 0		
 21757                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21758                                  	push	ds
 21759                                  	lds	bx,[es:si]
 21760                                  	push	ds
 21761                                  	pop	dx
 21762                                  		
 21763                                  	cmp	dx,0
 21764                                  	je	short int_74_first
 21765                                  
 21766                                  	cmp	byte [bx],0CFh
 21767                                  	je	short int_74_first
 21768                                  	
 21769                                  	cmp	word [bx+6],424Bh
 21770                                  	je	short int_74_not_first
 21771                                  	
 21772                                  	cmp	dx,0F000h
 21773                                  	jne	short int_74_not_first
 21774                                  
 21775                                  	push	es
 21776                                  	push	dx
 21777                                  	mov	dx,0F000h
 21778                                  	mov	es,dx
 21779                                  	cmp	bx,[es:0FF01h]
 21780                                  	pop	dx
 21781                                  	pop	es
 21782                                  	je	short int_74_first
 21783                                  %endif
 21784                                  
 21785                                  int_74_not_first:
 21786                                  	; 14/12/2022
 21787                                  	; 25/10/2022
 21788                                  	;pop	ds
 21789 00001352 BF[7906]                	mov	di,INT19OLD74
 21790 00001355 BB[0101]                	mov	bx,old74
 21791 00001358 BA[FF00]                	mov	dx,int74
 21792 0000135B E87C00                  	call	new_init_loop
 21793                                  	
 21794                                  	; 14/12/2022
 21795                                  	;jmp	short int_74_end
 21796                                  ;int_74_first:
 21797                                  	; 25/10/2022
 21798                                  	;pop	ds
 21799                                  
 21800                                  int_74_end:
 21801                                  
 21802                                  stkinit_76:
 21803 0000135E BED801                  	mov	si,76h*4 ; 472
 21804                                  	
 21805                                  	; 14/12/2022
 21806                                  	; 25/10/2022
 21807 00001361 E84B00                  	call	int_xx_first_check
 21808 00001364 730E                    	jnc	short int_76_end ; int_76_first
 21809                                  
 21810                                  ; 14/12/2022
 21811                                  %if 0	
 21812                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21813                                  	push	ds
 21814                                  	lds	bx,[es:si]
 21815                                  	push	ds
 21816                                  	pop	dx
 21817                                  		
 21818                                  	cmp	dx,0
 21819                                  	je	short int_76_first
 21820                                  
 21821                                  	cmp	byte [bx],0CFh
 21822                                  	je	short int_76_first
 21823                                  	
 21824                                  	cmp	word [bx+6],424Bh
 21825                                  	je	short int_76_not_first
 21826                                  	
 21827                                  	cmp	dx,0F000h
 21828                                  	jne	short int_76_not_first
 21829                                  
 21830                                  	push	es
 21831                                  	push	dx
 21832                                  	mov	dx,0F000h
 21833                                  	mov	es,dx
 21834                                  	cmp	bx,[es:0FF01h]
 21835                                  	pop	dx
 21836                                  	pop	es
 21837                                  	je	short int_76_first
 21838                                  %endif
 21839                                  	
 21840                                  int_76_not_first:
 21841                                  	; 14/12/2022
 21842                                  	; 25/10/2022
 21843                                  	;pop	ds
 21844 00001366 BF[7E06]                	mov	di,INT19OLD76
 21845 00001369 BB[1901]                	mov	bx,old76
 21846 0000136C BA[1701]                	mov	dx,int76
 21847 0000136F E86800                  	call	new_init_loop
 21848                                  
 21849                                  	; 14/12/2022
 21850 00001372 EB00                    	jmp	short int_76_end
 21851                                  ;int_76_first:
 21852                                  	; 25/10/2022
 21853                                  	;pop	ds
 21854                                  
 21855                                  int_76_end:
 21856                                  
 21857                                  stkinit_77:
 21858 00001374 BEDC01                  	mov	si,77h*4 ; 476
 21859                                  	
 21860                                  	; 14/12/2022
 21861                                  	; 25/10/2022
 21862 00001377 E83500                  	call	int_xx_first_check
 21863 0000137A 730C                    	jnc	short int_77_end ; int_77_first
 21864                                  
 21865                                  ; 14/12/2022
 21866                                  %if 0	
 21867                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21868                                  	push	ds
 21869                                  	lds	bx,[es:si]
 21870                                  	push	ds
 21871                                  	pop	dx
 21872                                  		
 21873                                  	cmp	dx,0
 21874                                  	je	short int_77_first
 21875                                  
 21876                                  	cmp	byte [bx],0CFh
 21877                                  	je	short int_77_first
 21878                                  	
 21879                                  	cmp	word [bx+6],424Bh
 21880                                  	je	short int_77_not_first
 21881                                  	
 21882                                  	cmp	dx,0F000h
 21883                                  	jne	short int_77_not_first
 21884                                  
 21885                                  	push	es
 21886                                  	push	dx
 21887                                  	mov	dx,0F000h
 21888                                  	mov	es,dx
 21889                                  	cmp	bx,[es:0FF01h]
 21890                                  	pop	dx
 21891                                  	pop	es
 21892                                  	je	short int_77_first
 21893                                  %endif
 21894                                  	
 21895                                  int_77_not_first:
 21896                                  	; 14/12/2022
 21897                                  	; 25/10/2022
 21898                                  	;pop	ds
 21899 0000137C BF[8306]                	mov	di,INT19OLD77
 21900 0000137F BB[3101]                	mov	bx,old77
 21901 00001382 BA[2F01]                	mov	dx,int77
 21902 00001385 E85200                  	call	new_init_loop
 21903                                  
 21904                                  	; 14/12/2022
 21905                                  	;jmp	short int_77_end
 21906                                  ;int_77_first:
 21907                                  	; 25/10/2022
 21908                                  	;pop	ds
 21909                                  
 21910                                  int_77_end:
 21911 00001388 1E                      	push	ds
 21912 00001389 B800F0                  	mov	ax,0F000h		; look at the model byte
 21913 0000138C 8ED8                    	mov	ds,ax
 21914 0000138E 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21915 00001393 1F                      	pop	ds
 21916 00001394 7504                    	jne	short skip_enablenmis
 21917                                  
 21918 00001396 B027                    	mov	al,27h			; enable convertible nmis
 21919 00001398 E672                    	out	72h,al
 21920                                  
 21921                                  ; 25/10/2022
 21922                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21923                                  
 21924                                  skip_enablenmis:
 21925 0000139A FB                      	sti
 21926                                  	;;mov	ax,Bios_Data ; 70h
 21927                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21928                                  	; 21/10/2022
 21929 0000139B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21930 0000139E 8ED8                    	mov	ds,ax
 21931                                  
 21932                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21933                                  
 21934 000013A0 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21935                                  					; initialization is complete
 21936                                  
 21937 000013A5 5D                      	pop	bp			; restore all
 21938 000013A6 5E                      	pop	si
 21939 000013A7 5F                      	pop	di
 21940 000013A8 5A                      	pop	dx
 21941 000013A9 59                      	pop	cx
 21942 000013AA 5B                      	pop	bx
 21943 000013AB 07                      	pop	es
 21944 000013AC 1F                      	pop	ds
 21945 000013AD 58                      	pop	ax
 21946 000013AE C3                      	retn
 21947                                  
 21948                                  ; 14/12/2022
 21949                                  ; ----------------------------------------------------------------------
 21950                                  
 21951                                  	; 14/12/2022
 21952                                  	; 25/10/2022
 21953                                  ;%if 0
 21954                                  	; 27/03/2019 - Retro DOS v4.0
 21955                                  int_xx_first_check:
 21956 000013AF 1E                      	push	ds
 21957 000013B0 26C51C                  	lds	bx,[es:si]
 21958 000013B3 1E                      	push	ds
 21959 000013B4 5A                      	pop	dx
 21960                                  		
 21961 000013B5 83FA00                  	cmp	dx,0
 21962 000013B8 741E                    	je	short int_xx_first
 21963                                  	
 21964 000013BA 803FCF                  	cmp	byte [bx],0CFh
 21965 000013BD 7419                    	je	short int_xx_first
 21966                                  	
 21967 000013BF 817F064B42              	cmp	word [bx+6],424Bh
 21968 000013C4 7411                    	je	short int_xx_not_first
 21969                                  	
 21970 000013C6 81FA00F0                	cmp	dx,0F000h
 21971 000013CA 750B                    	jne	short int_xx_not_first
 21972                                  
 21973 000013CC 06                      	push	es
 21974                                  	;push	dx
 21975                                  	;mov	dx,0F000h
 21976 000013CD 8EC2                    	mov	es,dx
 21977 000013CF 263B1E01FF              	cmp	bx,[es:0FF01h]
 21978                                        	;pop	dx
 21979 000013D4 07                      	pop	es
 21980 000013D5 7401                    	je	short int_xx_first
 21981                                  
 21982                                  int_xx_not_first:
 21983 000013D7 F9                      	stc
 21984                                  int_xx_first:
 21985 000013D8 1F                      	pop	ds
 21986 000013D9 C3                      	retn
 21987                                  
 21988                                  ;%endif
 21989                                  
 21990                                  ; ----------------------------------------------------------------------
 21991                                  ; 27/03/2019 - Retro DOS v4.0
 21992                                  
 21993                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21994                                  ; (SYSINIT:1610h)
 21995                                  
 21996                                  new_init_loop:
 21997                                  
 21998                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21999                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22000                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22001                                  ;	di=offset value of int19old&aa variable in bios.
 22002                                  ;	es=zero, segid of vector table
 22003                                  ;	ds=relocated stack code segment
 22004                                  
 22005 000013DA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22006 000013DD 8907                    	mov	[bx],ax			; to original owner in ds
 22007 000013DF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22008 000013E3 894702                  	mov	[bx+2],ax		; to original owner in ds
 22009                                  
 22010 000013E6 1E                      	push	ds
 22011                                  	;;mov	ax,Bios_Data ; 70h
 22012                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22013                                  	; 21/10/2022
 22014 000013E7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22015 000013EA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22016 000013EC 268B04                  	mov	ax,[es:si]		;int 19 handler
 22017 000013EF 8905                    	mov	[di],ax
 22018 000013F1 268B4402                	mov	ax,[es:si+2]
 22019 000013F5 894502                  	mov	word [di+2],ax
 22020 000013F8 1F                      	pop	ds
 22021                                  
 22022 000013F9 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22023 000013FC 268C5C02                	mov	[es:si+2],ds
 22024 00001400 C3                      	retn
 22025                                  
 22026                                  ; End of STACK initialization routine
 22027                                  ; ----------------------------------------------------------------------
 22028                                  
 22029                                  ; ----------------------------------------------------------------------
 22030                                  ;set the devmark for mem command.
 22031                                  ;in: [memhi] - the address to place devmark
 22032                                  ;    [memlo] = 0
 22033                                  ;    al = id for devmark_id
 22034                                  ;out: devmark established.
 22035                                  ;     the address saved in cs:[devmark_addr]
 22036                                  ;     [memhi] increase by 1.
 22037                                  ; ----------------------------------------------------------------------
 22038                                  
 22039                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22040                                  ; (SYSINIT:1637h)
 22041                                  
 22042                                  setdevmark:
 22043                                  
 22044 00001401 06                      	push	es
 22045 00001402 51                      	push	cx
 22046                                  
 22047 00001403 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22048 00001408 2E890E[2214]            	mov	[cs:devmark_addr],cx
 22049 0000140D 8EC1                    	mov	es,cx
 22050                                  	; 25/10/2022
 22051                                  	;mov	[es:devmark.id],al
 22052 0000140F 26A20000                	mov	[es:0],al
 22053 00001413 41                      	inc	cx
 22054                                  	;mov	[es:devmark.seg],cx
 22055 00001414 26890E0100              	mov	[es:1],cx
 22056                                  
 22057 00001419 59                      	pop	cx
 22058 0000141A 07                      	pop	es
 22059 0000141B 2EFF06[E003]            	inc	word [cs:memhi]
 22060 00001420 C3                      	retn
 22061                                  
 22062                                  ; ----------------------------------------------------------------------
 22063                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22064                                  ; ----------------------------------------------------------------------
 22065                                  ; 27/03/2019 - Retro DOS v4.0
 22066                                  
 22067                                  ;MULTI_CONFIG	equ 1
 22068                                  
 22069                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22070                                                                          ; allocation strategy call
 22071                                  
 22072                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22073                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22074                                  
 22075                                  default_filenum equ 8
 22076                                  
 22077                                  ;stacksw	equ true		; include switchable hardware stacks
 22078                                  
 22079                                  ; external variable defined in ibmbio module for multi-track
 22080                                  
 22081                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22082                                  					; it on after handling config.sys file as a
 22083                                  					; default value,if multrk_flag = multrk_off1.
 22084                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22085                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22086                                  
 22087                                  ; if stacksw
 22088                                  
 22089                                  ; internal stack parameters
 22090                                  
 22091                                  ;entrysize	equ 8
 22092                                  
 22093                                  ;mincount	equ 8
 22094                                  ;defaultcount	equ 9
 22095                                  ;maxcount	equ 64
 22096                                  
 22097                                  ;minsize 	equ 32
 22098                                  ;defaultsize	equ 128
 22099                                  ;maxsize 	equ 512
 22100                                  
 22101                                  DOS_FLAG_OFFSET	equ 86h
 22102                                  
 22103                                  ;ifdef MULTI_CONFIG
 22104                                  ;
 22105                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22106                                  ;   may be loaded as a dword ptr
 22107                                  
 22108                                  ; 25/10/2022
 22109                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22110                                  ;               			;  a scratch env, this is its length
 22111                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22112                                  ;                   			;  segment of work area
 22113                                  ;
 22114                                  ;config_cmd:	db  0  			; current config cmd
 22115                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22116                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22117                                  
 22118                                  ;endif ; MULTI_CONFIG
 22119                                  
 22120 00001421 00                      multdeviceflag:	db  0
 22121                                  
 22122 00001422 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22123                                  
 22124 00001424 00                      setdevmarkflag: db  0			;flag used for devmark
 22125                                  
 22126                                  ; 12/12/2022
 22127                                  ;driver_units:	db  0			;total unitcount for driver
 22128                                  
 22129                                  ; 12/12/2022
 22130                                  ;ems_stub_installed:
 22131                                  ;		db  0
 22132                                  
 22133                                  ; 12/12/2022	
 22134                                  ;align 2
 22135                                  
 22136                                  badparm_ptr:	; label	dword
 22137 00001425 0000                    badparm_off:	dw  0
 22138 00001427 0000                    badparm_seg:	dw  0
 22139                                  
 22140                                  ;******************************************************************************
 22141                                  ;take care of config.sys file.
 22142                                  ;system parser data and code.
 22143                                  ;******************************************************************************
 22144                                  
 22145                                  ;*******************************************************************
 22146                                  ; parser options set for msbio sysconf module
 22147                                  ;*******************************************************************
 22148                                  ;
 22149                                  ;**** default assemble swiches definition **************************
 22150                                  
 22151                                  ;farsw	equ 0		; near call expected
 22152                                  ;datesw	equ 0		; check date format
 22153                                  ;timesw	equ 0		; check time format
 22154                                  ;filesw	equ 1		; check file specification
 22155                                  ;capsw	equ 0		; perform caps if specified
 22156                                  ;cmpxsw	equ 0		; check complex list
 22157                                  ;numsw	equ 1		; check numeric value
 22158                                  ;keysw	equ 0		; support keywords
 22159                                  ;swsw	equ 1		; support switches
 22160                                  ;val1sw	equ 1		; support value definition 1
 22161                                  ;val2sw	equ 0		; support value definition 2
 22162                                  ;val3sw	equ 1		; support value definition 3
 22163                                  ;drvsw	equ 1		; support drive only format
 22164                                  ;qussw	equ 0		; support quoted string format
 22165                                  
 22166                                  ; psdata_seg equ cs
 22167                                  
 22168                                  	;.xlist
 22169                                  	;include parse.asm		;together with psdata.inc
 22170                                  	;.list
 22171                                  
 22172                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22173                                  ; ======================================================================
 22174                                  ; 27/03/2019 - Retro DOS v4.0
 22175                                  
 22176                                  ; 30/03/2019
 22177                                  ; VERSION.INC (MSDOS 6.0) 
 22178                                  ; Set DBCS Blank constant
 22179                                  
 22180                                  ; ifndef DBCS
 22181                                  DB_SPACE EQU 2020h
 22182                                  DB_SP_HI EQU 20h
 22183                                  DB_SP_LO EQU 20h
 22184                                  ; else
 22185                                  
 22186                                  ;*******************************************************************
 22187                                  ; Parser include file
 22188                                  ;*******************************************************************
 22189                                  
 22190                                  ;**** Equation field
 22191                                  ;-------- Character code definition
 22192                                  
 22193                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22194                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22195                                  _$P_Period	   equ	"."             ;AN020;
 22196                                  _$P_Slash	   equ	"/"             ;AN020;
 22197                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22198                                  _$P_Comma	   equ	","             ;AN000;
 22199                                  _$P_Switch	   equ	"/"             ;AN000;
 22200                                  _$P_Keyword	   equ	"="             ;AN000;
 22201                                  _$P_Colon	   equ	":"             ;AN000;
 22202                                  _$P_Plus 	   equ	"+"             ;AN000;
 22203                                  _$P_Minus	   equ	"-"             ;AN000;
 22204                                  _$P_Rparen	   equ	")"             ;AN000;
 22205                                  _$P_Lparen	   equ	"("             ;AN000;
 22206                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22207                                  _$P_DQuote	   equ	'"'             ;AN000;
 22208                                  _$P_NULL 	   equ	0		;AN000;
 22209                                  _$P_TAB		   equ	9		;AN000;
 22210                                  _$P_CR		   equ	0Dh		;AN000;
 22211                                  _$P_LF		   equ	0Ah		;AN000;
 22212                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22213                                  
 22214                                  ;-------- Masks
 22215                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22216                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22217                                  
 22218                                  ;-------- DOS function call related equs
 22219                                  
 22220                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22221                                  					; by this call, following information
 22222                                  struc _$P_CDI	
 22223 00000000 ????                     .DateF: resw 1
 22224 00000002 ??????????               .Money: resb 5
 22225 00000007 ????                     .1000:	 resb 2
 22226 00000009 ????                     .Dec:	 resb 2
 22227 0000000B ????                     .DateS: resb 2
 22228 0000000D ????                     .TimeS: resb 2
 22229 0000000F ??                          	 resb 1
 22230 00000010 ??                      	 resb 1
 22231 00000011 ??                       .TimeF: resb 1	 
 22232 00000012 ????????                	 resw 2
 22233 00000016 ????                    	 resb 2
 22234 00000018 <res Ah>                	 resw 5
 22235                                   .size:
 22236                                  endstruc
 22237                                  
 22238                                  _$P_Date_MDY	   equ	0		;AN000;
 22239                                  _$P_Date_DMY	   equ	1		;AN000;
 22240                                  _$P_Date_YMD	   equ	2		;AN000;
 22241                                  ;-------------
 22242                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22243                                  					;AN000; DS:SI will points to DBCS EV
 22244                                  ;-------------
 22245                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22246                                  					;AN000; following parameters are set
 22247                                  					;AN000; to get casemap table.
 22248                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22249                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22250                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22251                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22252                                  					; By this call following information
 22253                                  					; is returned.
 22254                                  struc _$P_DOS_TBL
 22255 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22256 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22257 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22258                                  endstruc
 22259                                  
 22260                                  ; ----------------------------------------------------------------------------
 22261                                  ; PARMS 	LABEL	BYTE
 22262                                  ;		DW	PARMSX
 22263                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22264                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22265                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22266                                  ;					; TYPICAL ARE ";", "="
 22267                                  ;					; "," & WHITESPACE ALWAYS
 22268                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22269                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22270                                  ; ----------------------------------------------------------------------------
 22271                                  
 22272                                  ;-------------------------------- PARMS block structure
 22273                                  struc _$P_PARMS_Blk
 22274 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22275 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22276 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22277                                  endstruc
 22278                                  
 22279                                  _$P_Len_PARMS	   equ	4		;AN000;
 22280                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22281                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22282                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22283                                  
 22284                                  ; ----------------------------------------------------------------------------
 22285                                  ; PARMSX	LABEL	BYTE
 22286                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22287                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22288                                  ;		:			; REPEATS maxp-1 TIMES
 22289                                  ;		DB	maxs		; # OF SWITCHES
 22290                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22291                                  ;		:			; REPEATS maxs-1 TIMES
 22292                                  ;		DB	maxk		; # OF KEYWORD
 22293                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22294                                  ;		:			; REPEATS maxk-1 TIMES
 22295                                  ; ----------------------------------------------------------------------------
 22296                                  
 22297                                  ;-------------------------------- PARMSX block structure
 22298                                  struc _$P_PARMSX_Blk		;AN000;
 22299 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22300 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22301 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22302                                  endstruc
 22303                                  
 22304                                  ; ----------------------------------------------------------------------------
 22305                                  ; << Control field definition  >>
 22306                                  ;
 22307                                  ;
 22308                                  ;CONTROL   LABEL   BYTE
 22309                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22310                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22311                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22312                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22313                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22314                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22315                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22316                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22317                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22318                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22319                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22320                                  ;				   ; 0002H=REPEATS ALLOWED
 22321                                  ;				   ; 0001H=OPTIONAL
 22322                                  ;	   DW	   FUNCTION_FLAGS
 22323                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22324                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22325                                  ;				   ; 0010H=REMOVE ":" AT END
 22326                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22327                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22328                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22329                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22330                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22331                                  ;	   :
 22332                                  ;
 22333                                  ;Note:
 22334                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22335                                  ;      DATE bit simalteniously.
 22336                                  ;
 22337                                  ;      The parser examins each bit along with the following priority.
 22338                                  ;
 22339                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22340                                  ;      FILE SPEC -> SIMPLE STRING.
 22341                                  ;
 22342                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22343                                  ;      in the result buffer is capitalized.
 22344                                  ;
 22345                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22346                                  ;
 22347                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22348                                  ;      switch, for example, '/A', then STRING points to;
 22349                                  ;
 22350                                  ;			DB    1 	; number of following synonyms
 22351                                  ;			DB   '/A',0
 22352                                  ;
 22353                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22354                                  ;
 22355                                  ;			DB    1 	; number of following synonyms
 22356                                  ;			DB   'CODEPAGE=',0
 22357                                  ;
 22358                                  ;    - "..." must consist of upper case characters only because the parser
 22359                                  ;      performs pattern matching after converting input to upper case (by
 22360                                  ;      using the current country upper case table)
 22361                                  ;
 22362                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22363                                  ;      example /A and /B, the format will be;
 22364                                  ;
 22365                                  ;			DB    2 	; number of following synonyms
 22366                                  ;			DB    '/A',0
 22367                                  ;			DB    '/B',0
 22368                                  ; ----------------------------------------------------------------------------
 22369                                  
 22370                                  ;**** Match_Flags
 22371                                  
 22372                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22373                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22374                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22375                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22376                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22377                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22378                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22379                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22380                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22381                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22382                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22383                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22384                                  
 22385                                  ;**** Function flags
 22386                                  
 22387                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22388                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22389                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22390                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22391                                  
 22392                                  ;-------------------------------- Control block structure
 22393                                  struc _$P_Control_Blk
 22394 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22395 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22396 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22397 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22398 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22399 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22400                                  endstruc
 22401                                  
 22402                                  ; ----------------------------------------------------------------------------
 22403                                  ; << Value List Definition >>
 22404                                  ;
 22405                                  ;VALUES 	LABEL	BYTE
 22406                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22407                                  ;	     +-
 22408                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22409                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22410                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22411                                  ;	     |	:
 22412                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22413                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22414                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22415                                  ;	     |	:
 22416                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22417                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22418                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22419                                  ;	     +-	:
 22420                                  ;
 22421                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22422                                  ;
 22423                                  ;Note:
 22424                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22425                                  ;      when no choice lists are provided.
 22426                                  ;
 22427                                  ;    - STRING must consist of upper case characters only because the parser
 22428                                  ;      performs pattern matching after converting input to upper case (by
 22429                                  ;      using the current country upper case table)
 22430                                  ; ----------------------------------------------------------------------------
 22431                                  
 22432                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22433                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22434                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22435                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22436                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22437                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22438                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22439                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22440                                  
 22441                                  struc _$P_Val_List
 22442 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22443 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22444 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22445 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22446 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22447                                  endstruc
 22448                                  
 22449                                  ; ----------------------------------------------------------------------------
 22450                                  ; << Result Buffer Definition  >>
 22451                                  ;
 22452                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22453                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22454                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22455                                  ;						;	3=STRING, 4=COMPLEX,
 22456                                  ;						;	5=FILESPEC, 6=DRIVE
 22457                                  ;						;	7=DATE, 8=TIME
 22458                                  ;						;	9=QUOTED STRING
 22459                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22460                                  ;
 22461                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22462                                  ;
 22463                                  ;            +-
 22464                                  ;	    | DD	n			; VALUE IF NUMBER
 22465                                  ;	    | or
 22466                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22467                                  ;	    |					; (ES presents Segment address)
 22468                                  ;	    | or
 22469                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22470                                  ;	    | or
 22471                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22472                                  ;	    | or
 22473                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22474                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22475                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22476                                  ;	    | or
 22477                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22478                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22479                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22480                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22481                                  ;	    +-
 22482                                  ;
 22483                                  ;
 22484                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22485                                  ;      list.
 22486                                  ;
 22487                                  ;      YEAR: If the input value for the year is less than 100, parser
 22488                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22489                                  ;	     the year value, he returns 1987.
 22490                                  ; ----------------------------------------------------------------------------
 22491                                  
 22492                                  ;-------------------------------- Result block structure
 22493                                  struc _$P_Result_Blk
 22494 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22495 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22496 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22497 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22498                                  endstruc
 22499                                  
 22500                                  ;--------------------------------
 22501                                  ;**** values for the type field in the result block
 22502                                  
 22503                                  _$P_EOL		   equ	0		;AN000; End of line
 22504                                  _$P_Number	   equ	1		;AN000; Number
 22505                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22506                                  _$P_String	   equ	3		;AN000; String
 22507                                  _$P_Complex	   equ	4		;AN000; Complex
 22508                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22509                                  _$P_Drive	   equ	6		;AN000; Drive
 22510                                  _$P_Date_F	   equ	7		;AN000; Date
 22511                                  _$P_Time_F	   equ	8		;AN000; Time
 22512                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22513                                  
 22514                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22515                                  
 22516                                  ;**** Return code
 22517                                  ;
 22518                                  ; following return code will be returned in the AX register.
 22519                                  
 22520                                  _$P_No_Error	   equ	0		;AN000; No error
 22521                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22522                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22523                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22524                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22525                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22526                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22527                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22528                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22529                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22530                                  
 22531                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22532                                  
 22533                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22534                                  
 22535                                  ;********************** Local Data *************************************
 22536 00001429 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22537 0000142B 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22538 0000142D 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22539 0000142F 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22540 00001431 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22541 00001432 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22542 00001434 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22543 00001436 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22544                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22545                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22546                                  
 22547                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22548                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22549                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22550                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22551                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22552                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22553                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22554                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22555                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22556                                  
 22557                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22558                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22559                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22560                                  
 22561 00001438 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22562 0000143A 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22563 0000143C 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22564 0000143E 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22565                                  
 22566 00001440 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22567                                  _$P_STRING_BUF_END equ	$		;AN000;
 22568                                  
 22569                                  ; 25/10/2022
 22570                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22571                                  
 22572 000014C0 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22573 000014C1 0000                    		   dw	0		;AN000; offset	of char case map table
 22574 000014C3 0000                    		   dw	0		;AN000; segment of char case map table
 22575                                  ; 25/10/2022
 22576                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22577                                  ;		   dw	0		;AN000; offset	of file case map table
 22578                                  ;		   dw	0		;AN000; segment of file case map table
 22579                                  
 22580                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22581                                  ;
 22582                                  
 22583                                  ;M029
 22584                                  ;!!!WARNING!!!
 22585                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22586                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22587                                  ;changes need to be made in SYSPARSE
 22588                                  
 22589                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22590                                  
 22591                                  ; 25/10/2022
 22592                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22593                                  
 22594 000014C5 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22595                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22596                                  
 22597                                  ;ENDIF					;AN000;(of FileSW)
 22598                                  
 22599                                  ; delimiter parsing
 22600                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22601                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22602                                  
 22603                                  ;filespec error flag
 22604 000014CE 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22605                                  					;AN033;  was detected.
 22606                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22607                                  
 22608                                  
 22609                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22610                                  ; ======================================================================
 22611                                  ; 27/03/2019 - Retro DOS v4.0
 22612                                  
 22613                                  ;***********************************************************************
 22614                                  ; SysParse;
 22615                                  ;
 22616                                  ;  Function : Parser Entry
 22617                                  ;
 22618                                  ;  Input: DS:SI -> command line
 22619                                  ;	  ES:DI -> parameter block
 22620                                  ;	  cs -> psdata.inc
 22621                                  ;	  CX = operand ordinal
 22622                                  ;
 22623                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22624                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22625                                  ;		 is in DS.
 22626                                  ;
 22627                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22628                                  ;		    invalid value list. But this parser does NOT implement
 22629                                  ;		    this feature. Therefore CY always zero.
 22630                                  ;
 22631                                  ;	   CY = 0   AX = return code
 22632                                  ;		    BL = terminated delimiter code
 22633                                  ;		    CX = new operand ordinal
 22634                                  ;		    SI = set past scaned operand
 22635                                  ;		    DX = selected result buffer
 22636                                  ;
 22637                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22638                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22639                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22640                                  ;
 22641                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22642                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22643                                  ;
 22644                                  ;-------- Modification History -----------------------------------------
 22645                                  ;
 22646                                  ;  4/04/87 : Created by K. K,
 22647                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22648                                  ;	   : JMP SHORT assemble error (tm02)
 22649                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22650                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22651                                  ;	     DateSW equ 1)	      (tm04)
 22652                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22653                                  ;				      (tm05) in PSDATA.INC
 22654                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22655                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22656                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22657                                  ;	     value-list block	      (tm07)
 22658                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22659                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22660                                  ;	     (tm08)
 22661                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22662                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22663                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22664                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22665                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22666                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22667                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22668                                  ;					  (tm12)
 22669                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22670                                  ;					  (tm13)
 22671                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22672                                  ;					  (tm14)
 22673                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22674                                  ;					  (tm15)
 22675                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22676                                  
 22677                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22678                                  
 22679                                  ;  7/28/87 : Kerry S (;AN018;)
 22680                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22681                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22682                                  ;	     affected: _$P_Chk_SW_Control.
 22683                                  
 22684                                  ;  7/29/87 : Kerry S (;AN019;)
 22685                                  ;	     Now allow the optional bit in match flags for switches.  This
 22686                                  ;	     allows the switch to be encountered with a value or without a
 22687                                  ;	     value and no error is returned.
 22688                                  ;
 22689                                  
 22690                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22691                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22692                                  ;	     within a date response, instead of checking just for the one
 22693                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22694                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22695                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22696                                  
 22697                                  ;  9/1/87  : Kerry S (;AN021)
 22698                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22699                                  ;	     the command line with the string in the control block the
 22700                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22701                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22702                                  ;	     string on the command line than in the synonym list in the control
 22703                                  ;	     block.  I put in a test for a null in the control block so the
 22704                                  ;	     string in the control block must be the same length as the string
 22705                                  ;	     preceeding the colon or equal on the command line.
 22706                                  
 22707                                  ;  8/28/87 : Kerry S (;AN022;)
 22708                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22709                                  ;	     problems for people who included it themselves in a segment other
 22710                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22711                                  ;	     segment.
 22712                                  
 22713                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22714                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22715                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22716                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22717                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22718                                  ;	     BL be used if TIME is being parsed.
 22719                                  
 22720                                  ;  9/24/87 : Ed K
 22721                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22722                                  ;	     invocations with their normally expanded code; made comments
 22723                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22724                                  
 22725                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22726                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22727                                  ;	     pointed to by non-existant CONTROL.
 22728                                  
 22729                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22730                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22731                                  ;	     support to frame quoted text string with single quote.
 22732                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22733                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22734                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22735                                  
 22736                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22737                                  ;	     quote chars within a quoted string is supposed to be reported as
 22738                                  ;	     one quote character, but is reported as two quotes.  This changed
 22739                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22740                                  
 22741                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22742                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22743                                  
 22744                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22745                                  
 22746                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22747                                  ;	     psdata buffer should have cs.
 22748                                  
 22749                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22750                                  ;	     positional missing.
 22751                                  
 22752                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22753                                  ;	     as a line delimiter, should use carriage return.
 22754                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22755                                  
 22756                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22757                                  
 22758                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22759                                  ;	     endless loop since SI is returned still pointing to start
 22760                                  ;	     of that parm.
 22761                                  
 22762                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22763                                  ;	     Vector to returned string has CS instead of cs, but
 22764                                  ;	     when tried to fix it on previous version, changed similar
 22765                                  ;	     but wrong place.
 22766                                  
 22767                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22768                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22769                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22770                                  
 22771                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22772                                  ;	     in a filespec, then flag an error.
 22773                                  
 22774                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22775                                  ;	     indexed off of the cs equate instead of the DS register.
 22776                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22777                                  ;  -->	     local parser data. Why were some references to local data changed
 22778                                  ;	     to do this before, but not all ?????
 22779                                  
 22780                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22781                                  
 22782                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22783                                  ;
 22784                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22785                                  
 22786                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22787                                  
 22788                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22789                                  ;	     separator in TIME before hundredths field.
 22790                                  ;
 22791                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22792                                  ;			strings as keywords.
 22793                                  ;
 22794                                  ;***********************************************************************
 22795                                  
 22796                                  ;IF FarSW				;AN000;(Check if need far return)
 22797                                  ;SysParse proc far			;AN000;
 22798                                  ;ELSE					;AN000;
 22799                                  ;SysParse proc near			;AN000;
 22800                                  ;ENDIF					;AN000;(of FarSW)
 22801                                  
 22802                                  ; 27/03/2019 - Retro DOS v4.0
 22803                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22804                                  
 22805                                  ; 25/10/2022 - Retro DOS v4.0
 22806                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22807                                  
 22808                                  SysParse:
 22809 000014CF 2EC706[3614]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22810 000014D6 FC                      	cld				;AN000; confirm forward direction
 22811 000014D7 2E890E[2914]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22812 000014DC 2EC706[2B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22813 000014E3 2EC706[3E14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22814                                  
 22815 000014EA 2EC706[2F14]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22816                                  
 22817                                  ;M029 -- Begin changes
 22818                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22819                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22820                                  ;corrupts this table but does not corrupt the checksum region will leave
 22821                                  ;command.com parsing in an inconsistent state.
 22822                                  ; NB: The special characters string has been hardcoded here. If any change
 22823                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22824                                  
 22825                                  ;IF FileSW + DrvSW
 22826                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM) 
 22827 000014F1 2EC706[C514]5B5D        	mov	word [cs:_$P_FileSp_Char], '[]'   ; 5D5Bh
 22828 000014F8 2EC706[C714]7C3C        	mov	word [cs:_$P_FileSp_Char+2], '|<' ; 3C7Ch
 22829 000014FF 2EC706[C914]3E2B        	mov	word [cs:_$P_FileSp_Char+4], '>+' ; 2B3Eh
 22830 00001506 2EC706[CB14]3D3B        	mov 	word [cs:_$P_FileSp_Char+6], '=;' ; 3B3Dh
 22831                                  ;ENDIF
 22832                                  
 22833                                  ;M029 -- End of changes
 22834                                  
 22835 0000150D E8B806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22836 00001510 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22837                                  ;--------------------------- End of Line
 22838 00001512 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22839 00001515 53                      	push	bx			;AN000;
 22840                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22841                                  					;AN000; Get the PARMSX address to
 22842 00001516 268B1D                  	mov	bx,[es:di]
 22843                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22844                                  					;AN000; check ORDINAL to see if the minimum
 22845 00001519 263A0F                  	cmp	cl,[es:bx]	
 22846 0000151C 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22847                                  
 22848 0000151E B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22849                                  _$P_Fin: 				;AN000;
 22850 00001521 5B                      	pop	bx			;AN000;
 22851 00001522 E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22852                                  ;---------------------------
 22853                                  _$P_Start:				;AN000;
 22854 00001525 2E8936[3814]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22855 0000152A 53                      	push	bx			;AN000; quoted string or file spec.
 22856 0000152B 57                      	push	di			;AN000;
 22857 0000152C 55                      	push	bp			;AN000;
 22858                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22859                                  	; 02/11/2022
 22860 0000152D 8D1E[4014]              	lea	bx,[_$P_STRING_BUF]
 22861 00001531 2EF606[3714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22862 00001537 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22863                                  
 22864                                  _$P_Pack_Loop:				;AN000;
 22865 00001539 AC                      	lodsb				;AN000; Pick a operand from buffer
 22866 0000153A E84507                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22867 0000153D 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22868                                  
 22869 0000153F E8A906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22870 00001542 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22871                                  
 22872 00001544 E8DA06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22873 00001547 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22874                                  
 22875 00001549 2EF606[3714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22876                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22877 0000154F 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22878                                  
 22879 00001551 E87406                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22880 00001554 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22881                                  
 22882                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22883 00001556 2EF606[3714]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22884 0000155C 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22885                                  
 22886 0000155E 4E                      	dec	si			;AN000; (tm08)
 22887 0000155F EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22888                                  
 22889                                  _$P_PL01:				;AN000;
 22890 00001561 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22891 00001564 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22892 00001566 7506                    	jne	short _$P_PL00 		;AN000; then
 22893                                  
 22894 00001568 2E800E[3714]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22895                                  _$P_PL00:				;AN000;
 22896 0000156E 43                      	inc	bx			;AN000; ready to see next byte
 22897 0000156F E82A07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22898 00001572 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22899                                  
 22900 00001574 AC                      	lodsb				;AN000; if yes, store
 22901 00001575 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22902 00001578 43                      	inc	bx			;AN000; update pointer
 22903 00001579 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22904                                  
 22905                                  _$P_Pack_End_BY_EOL:			;AN000;
 22906 0000157B 4E                      	dec	si			;AN000; backup si pointer
 22907                                  _$P_Pack_End:				;AN000;
 22908 0000157C 2E8936[2D14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22909 00001581 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22910 00001585 2E891E[3C14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22911                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22912 0000158A 268B1D                  	mov	bx,[es:di]
 22913                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22914                                  	; 02/11/2022
 22915 0000158D 8D36[4014]              	lea	si,[_$P_STRING_BUF]
 22916 00001591 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22917 00001595 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22918                                  
 22919 00001597 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22920 0000159B 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22921                                  
 22922 0000159D 2EF606[3714]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22923 000015A3 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22924                                  
 22925                                  _$P_Positional_Manager:			;AN000; else process as positional
 22926 000015A5 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22927 000015A9 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22928 000015AB 2E3906[2914]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22929 000015B0 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22930                                  
 22931 000015B2 2EA1[2914]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22932 000015B6 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22933 000015B8 43                      	inc	bx			;AC035; add '2' to
 22934 000015B9 43                      	inc	bx			;AC035;  BX reg
 22935                                  					;AN000; now bx points to 1st CONTROL
 22936 000015BA 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22937 000015BC 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22938 000015BF E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22939 000015C2 EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22940                                  
 22941                                  _$P_Too_Many_Error:			;AN000;
 22942 000015C4 2EC706[2B14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22943 000015CB EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22944                                  
 22945                                  _$P_SW_Manager:				;AN000;
 22946 000015CD 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22947 000015D1 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22948 000015D3 40                      	inc	ax			;AN000;
 22949 000015D4 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22950 000015D6 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22951 000015D8 268A0F                  	mov	cl,[es:bx]		;AN000;
 22952 000015DB 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22953 000015DD 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22954 000015DF 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22955                                  
 22956 000015E1 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22957                                  
 22958                                  _$P_SW_Mgr_Loop: 			;AN000;
 22959 000015E2 53                      	push	bx			;AN000;
 22960 000015E3 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22961 000015E6 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22962 000015E9 5B                      	pop	bx			;AN000;
 22963 000015EA 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22964                                  
 22965 000015EC 43                      	inc	bx			;AC035; add '2' to
 22966 000015ED 43                      	inc	bx			;AC035;  BX reg
 22967                                  					;AN000; else bx points to the next CONTROL
 22968 000015EE E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22969                                  
 22970                                  _$P_SW_Not_Found:			;AN000;
 22971 000015F0 2EC706[2B14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22972 000015F7 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22973                                  
 22974                                  _$P_Key_Manager: 			;AN000;
 22975 000015F9 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22976 000015FD 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22977 000015FF 40                      	inc	ax			;AN000;
 22978 00001600 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22979 00001602 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22980 00001604 268A07                  	mov	al,[es:bx]		;AN000;
 22981 00001607 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22982 00001609 D1E0                    	shl	ax,1			;AN000;
 22983 0000160B 40                      	inc	ax			;AN000; ax = ax*2+1
 22984 0000160C 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22985 0000160E 268A0F                  	mov	cl,[es:bx]		;AN000;
 22986 00001611 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22987 00001613 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22988 00001615 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22989                                  
 22990 00001617 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22991                                  
 22992                                  _$P_Key_Mgr_Loop:			;AN000;
 22993 00001618 53                      	push	bx			;AN000;
 22994 00001619 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22995 0000161C E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22996 0000161F 5B                      	pop	bx			;AN000;
 22997 00001620 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22998                                  
 22999 00001622 43                      	inc	bx			;AC035; add '2' to
 23000 00001623 43                      	inc	bx			;AC035;  BX reg
 23001                                  					;AN000; else bx points to the next CONTROL
 23002 00001624 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23003                                  
 23004                                  _$P_Key_Not_Found:			;AN000;
 23005 00001626 2EC706[2B14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23006                                  _$P_Return_to_Caller:			;AN000;
 23007 0000162D 5D                      	pop	bp			;AN000;
 23008 0000162E 5F                      	pop	di			;AN000;
 23009 0000162F 5B                      	pop	bx			;AN000;
 23010 00001630 2E8B0E[2914]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23011 00001635 2EA1[2B14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23012 00001639 2E8B36[2D14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23013 0000163E 2E8B16[2F14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23014 00001643 2E8A1E[3114]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23015                                  _$P_Single_Exit: 			;AN000;
 23016 00001648 F8                      	clc				;AN000;
 23017 00001649 C3                      	retn				;AN000;
 23018                                  
 23019                                  ;***********************************************************************
 23020                                  ; _$P_Chk_Pos_Control
 23021                                  ;
 23022                                  ; Function: Parse CONTROL block for a positional
 23023                                  ;
 23024                                  ; Input:     ES:BX -> CONTROL block
 23025                                  ;	     cs:SI -> _$P_STRING_BUF
 23026                                  ;
 23027                                  ; Output:    None
 23028                                  ;
 23029                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23030                                  ;
 23031                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23032                                  ;***********************************************************************
 23033                                  
 23034                                  _$P_Chk_Pos_Control:
 23035 0000164A 50                      	push	ax			;AN000;
 23036                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23037 0000164B 268B07                  	mov	ax,[es:bx]
 23038                                  	; 12/12/2022
 23039 0000164E A802                    	test	al,_$P_Repeat
 23040                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23041 00001650 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23042                                  
 23043 00001652 2EFF06[2914]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23044                                  _$P_CPC00:				;AN000;
 23045 00001657 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23046 0000165B 7518                    	jne	short _$P_CPC01		;AN000;
 23047                                  
 23048                                  	; 12/12/2022
 23049 0000165D A801                    	test	al,_$P_Optional
 23050                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23051 0000165F 7509                    	jnz	short _$P_CPC02		;AN000;
 23052                                  
 23053 00001661 2EC706[2B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23054 00001668 EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 23055                                  
 23056                                  _$P_CPC02:				;AN000;
 23057 0000166A 50                      	push	ax			;AN000;
 23058 0000166B B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 23059 0000166D B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23060 0000166F E89B00                  	call	_$P_Fill_Result		;AN000;
 23061 00001672 58                      	pop	ax			;AN000;
 23062 00001673 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23063                                  
 23064                                  _$P_CPC01:				;AN000;
 23065 00001675 E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 23066                                  _$P_CPC_Exit:				;AN000;
 23067 00001678 58                      	pop	ax			;AN000;
 23068 00001679 C3                      	retn				;AN000;
 23069                                  
 23070                                  ;***********************************************************************
 23071                                  ; _$P_Chk_Key_Control
 23072                                  ;
 23073                                  ; Function: Parse CONTROL block for a keyword
 23074                                  ;
 23075                                  ; Input:     ES:BX -> CONTROL block
 23076                                  ;	     cs:SI -> _$P_STRING_BUF
 23077                                  ;
 23078                                  ; Output:    CY = 1 : not match
 23079                                  ;
 23080                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23081                                  ;
 23082                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23083                                  ;***********************************************************************
 23084                                  
 23085                                  _$P_Chk_Key_Control:
 23086 0000167A F9                      	stc				;AN000; this logic works when the KeySW
 23087 0000167B C3                      	retn				;AN000; is reset.
 23088                                  
 23089                                  ;***********************************************************************
 23090                                  ; _$P_Search_KEYorSW:
 23091                                  ;
 23092                                  ; Function: Seach specified keyword or switch from CONTROL
 23093                                  ;
 23094                                  ; Input:     ES:BX -> CONTROL block
 23095                                  ;	     cs:SI -> _$P_STRING_BUF
 23096                                  ;
 23097                                  ; Output:    CY = 1 : not match
 23098                                  ;
 23099                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23100                                  ;***********************************************************************
 23101                                  
 23102                                  	; 25/10/2022 - Retro DOS v4.0
 23103                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23104                                  
 23105                                  _$P_Search_KEYorSW:			;AN000;
 23106 0000167C 55                      	push	bp			;AN000;
 23107 0000167D 51                      	push	cx			;AN000;
 23108 0000167E 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23109 00001682 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23110 00001684 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 23111 00001686 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23112                                  
 23113                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23114                                  	; 25/10/2022
 23115 00001688 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23116                                  	;lea	bp,[bx+9]
 23117                                  _$P_KEYorSW_Loop:			;AN000;
 23118 0000168B E8D403                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23119 0000168E 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23120                                  
 23121 00001690 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23122 00001693 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23123                                  _$P_KEYorSW_Not_Found:			;AN000;
 23124 00001695 F9                      	stc				;AN000; indicate not found in synonym list
 23125 00001696 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23126                                  
 23127                                  _$P_KEYorSW_Found:			;AN000;
 23128 00001698 2E892E[3E14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23129 0000169D F8                      	clc				;AN000; indicate found
 23130                                  _$P_KEYorSW_Exit:			;AN000;
 23131 0000169E 59                      	pop	cx			;AN000;
 23132 0000169F 5D                      	pop	bp			;AN000;
 23133 000016A0 C3                      	retn				;AN000;
 23134                                   
 23135                                  ;***********************************************************************
 23136                                  ; _$P_MoveBP_NUL
 23137                                  ;***********************************************************************
 23138                                  
 23139                                  _$P_MoveBP_NUL:
 23140                                  _$P_MBP_Loop:				;AN000;
 23141                                  	; 11/12/2022
 23142 000016A1 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23143                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23144                                  	; (SYSINIT:18DBh)
 23145                                   	;cmp     byte [es:bp+0],0
 23146 000016A6 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23147                                  
 23148 000016A8 45                      	inc	bp			;AN000; until
 23149 000016A9 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23150                                  
 23151                                  _$P_MBP_Exit:				;AN000;
 23152 000016AB 45                      	inc	bp			;AN000; bp points to next to NULL
 23153 000016AC C3                      	retn				;AN000;
 23154                                  
 23155                                  ;***********************************************************************
 23156                                  ; _$P_Chk_SW_Control
 23157                                  ;
 23158                                  ; Function: Parse CONTROL block for a switch
 23159                                  ;
 23160                                  ; Input:     ES:BX -> CONTROL block
 23161                                  ;	     cs:SI -> _$P_STRING_BUF
 23162                                  ;
 23163                                  ; Output:    CY = 1 : not match
 23164                                  ;
 23165                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23166                                  ;
 23167                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23168                                  ;***********************************************************************
 23169                                  
 23170                                  _$P_Chk_SW_Control:
 23171                                  
 23172                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23173                                  	;or	byte [cs:_$P_Flags+1],10h
 23174 000016AD 2E800E[3714]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23175 000016B3 E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23176 000016B6 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23177                                  
 23178                                  	;and	[cs:_$P_Flags+],0EFh
 23179 000016B8 2E8026[3714]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23180                                  					;AC034; reset the indicator previously set
 23181 000016BE 50                      	push	ax			;AN000; 	      /switch:
 23182 000016BF 2EA1[3A14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23183 000016C3 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23184 000016C5 2E0106[3814]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23185 000016CA 58                      	pop	ax			;AN000;
 23186                                  
 23187 000016CB 2E8B36[3A14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23188 000016D0 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23189 000016D4 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23190                                  
 23191 000016D6 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23192 000016DB 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23193                                  
 23194 000016DD 2EC706[2B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23195 000016E4 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23196                                  
 23197                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23198                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23199 000016E6 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23200 000016EA 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23201                                  
 23202                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23203                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23204                                  	;test	word [es:bx],1
 23205                                  	; 12/12/2022
 23206                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23207 000016EC 26F60701                	test	byte [es:bx],_$P_Optional
 23208 000016F0 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23209                                  
 23210 000016F2 2EC706[2B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23211 000016F9 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23212                                  
 23213                                  _$P_CSW00:				;AN000;
 23214 000016FB E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23215 000016FE F8                      	clc				;AN000; indicate match
 23216                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23217                                  	; 12/12/2022
 23218 000016FF C3                      	retn
 23219                                  
 23220                                  _$P_Chk_SW_Err0: 			;AN000;
 23221 00001700 F9                      	stc				;AN000; not found in switch synonym list
 23222                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23223                                  	; 12/12/2022
 23224 00001701 C3                      	retn	
 23225                                  
 23226                                  _$P_Chk_SW_Exit: 			;AN000;
 23227 00001702 50                      	push	ax			;AN000;
 23228 00001703 B003                    	mov	al,_$P_String		;AN000; set
 23229 00001705 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 23230 00001707 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23231 0000170A 58                      	pop	ax			;AN000;
 23232 0000170B F8                      	clc				;AN000;
 23233                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23234 0000170C C3                      	retn				;AN000;
 23235                                  ;ELSE					;AN000;(of IF SwSW)
 23236                                  ;	stc				;AN000; this logic works when the SwSW
 23237                                  ;	retn				;AN000; is reset.
 23238                                  
 23239                                  ;***********************************************************************
 23240                                  ; _$P_Fill_Result
 23241                                  ;
 23242                                  ; Function: Fill the result buffer
 23243                                  ;
 23244                                  ; Input:    AH = Item tag
 23245                                  ;	    AL = type
 23246                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23247                                  ;		  AL = 2: DX has index(offset) into value list
 23248                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23249                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23250                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23251                                  ;			  amd CH has hundredths
 23252                                  ;		  AL = else: cs:SI points to returned string buffer
 23253                                  ;	    ES:BX -> CONTROL block
 23254                                  ;
 23255                                  ; Output:   None
 23256                                  ;
 23257                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23258                                  ;
 23259                                  ; Vars: _$P_DX(W)
 23260                                  ;***********************************************************************
 23261                                  
 23262                                  _$P_Fill_Result:
 23263 0000170D 57                      	push	di			;AN000;
 23264 0000170E 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23265                                  					;AN000; di points to result buffer
 23266 00001712 2E893E[2F14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23267 00001717 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23268 0000171A 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23269 0000171E 50                      	push	ax			;AN000;
 23270 0000171F 2EA1[3E14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23271 00001723 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23272                                  					;AN000;   then set it to the result
 23273 00001727 58                      	pop	ax			;AN000;
 23274                                  _$P_RLT04:				;AN000;
 23275 00001728 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23276 0000172A 750A                    	jne	short _$P_RLT00		;AN000;
 23277                                  
 23278                                  _$P_RLT02:				;AN000;
 23279 0000172C 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23280 00001730 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23281 00001734 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23282                                  
 23283                                  _$P_RLT00:				;AN000;
 23284 00001736 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23285 00001738 7506                    	jne	short _$P_RLT01		;AN000;
 23286                                  
 23287 0000173A 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23288                                  					;AN000; then store list index
 23289 0000173E EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23290                                  
 23291                                  _$P_RLT01:				;AN000;
 23292 00001740 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23293 00001742 74E8                    	je	short _$P_RLT02		;AN000;
 23294                                  
 23295 00001744 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23296 00001746 74E4                    	je	short _$P_RLT02		;AN000;
 23297                                  
 23298 00001748 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23299 0000174A 7506                    	jne	short _$P_RLT03		;AN000;
 23300                                  
 23301 0000174C 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23302 00001750 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23303                                  
 23304                                  _$P_RLT03:				;AN000;
 23305 00001752 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23306 00001754 750F                    	jne	short _$P_RLT05		;AN000;
 23307                                  
 23308 00001756 2EA1[3814]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23309 0000175A 40                      	inc	ax			;AN000; skip left Parentheses
 23310 0000175B 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23311 0000175F 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23312 00001763 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23313                                  
 23314                                  _$P_RLT05:				;AN000;
 23315                                  ;------------------------  AL = 3, 5, or 9
 23316 00001765 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23317                                  					;AN000; store offset of STRING_BUF
 23318 00001769 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23319                                  					;AN031; store segment of STRING_BUF
 23320 0000176D 50                      	push	ax			;AN000;
 23321 0000176E 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23322                                  					;AN000; need CAPS by file table?
 23323 00001773 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23324                                  
 23325 00001775 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23326 00001777 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23327                                  
 23328                                  _$P_RLT_CAP00:				;AN000;
 23329 00001779 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23330                                  					;AN000; need CAPS by char table ?
 23331 0000177E 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23332                                  
 23333 00001780 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23334                                  _$P_RLT_CAP02:				;AN000;
 23335 00001782 E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23336                                  _$P_RLT_CAP01:				;AN000;
 23337 00001785 58                      	pop	ax			;AN000;
 23338 00001786 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23339                                  					;AN000; removing colon at end ?
 23340 0000178B 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23341                                  
 23342 0000178D E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23343                                  _$P_RLT_Exit:				;AN000;
 23344 00001790 5F                      	pop	di			;AN000;
 23345 00001791 C3                      	retn				;AN000;
 23346                                  
 23347                                  ;***********************************************************************
 23348                                  ; _$P_Check_Match_Flags
 23349                                  ;
 23350                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23351                                  ;	     result buffer
 23352                                  ;
 23353                                  ;	    Check for types in this order:
 23354                                  ;		Complex
 23355                                  ;		Date
 23356                                  ;		Time
 23357                                  ;		Drive
 23358                                  ;		Filespec
 23359                                  ;		Quoted String
 23360                                  ;		Simple String
 23361                                  ;
 23362                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23363                                  ;	     ES:BX -> CONTROL block
 23364                                  ;
 23365                                  ; Output:    None
 23366                                  ;
 23367                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23368                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23369                                  ;	     _$P_Drive_Format
 23370                                  ;***********************************************************************
 23371                                  
 23372                                  	; 25/10/2022 - Retro DOS v4.0
 23373                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23374                                  
 23375                                  	; 12/12/2022
 23376                                  _$P_Check_Match_Flags:
 23377 00001792 2EC606[CE14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23378                                  					;AN033;AC034;; clear filespec error flag.
 23379 00001798 50                      	push	ax			;AN000;
 23380                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23381 00001799 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23382 0000179C 09C0                    	or	ax,ax			;AC035; test ax for zero
 23383 0000179E 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23384 000017A0 50                      	push	ax			;AN000; (tm12)
 23385 000017A1 53                      	push	bx			;AN000; (tm12)
 23386 000017A2 52                      	push	dx			;AN000; (tm12)
 23387 000017A3 57                      	push	di			;AN000; (tm12)
 23388 000017A4 2EC706[2B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23389 000017AB B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23390 000017AD B003                    	mov	al,_$P_String		;AN000; (tm12)
 23391 000017AF E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23392 000017B2 5F                      	pop	di			;AN000; (tm12)
 23393 000017B3 5A                      	pop	dx			;AN000; (tm12)
 23394 000017B4 5B                      	pop	bx			;AN000; (tm12)
 23395 000017B5 58                      	pop	ax			;AN000; (tm12)
 23396                                  	; 12/12/2022
 23397                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23398                                  	; 12/12/2022
 23399                                  ;_$P_Mat: 				;AN000; (tm12)
 23400                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23401                                  _$P_Bridge:
 23402 000017B6 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23403                                  	
 23404                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23405                                  	; (SYSINIT:19F9h)
 23406                                  	; 12/12/2022
 23407                                  	;nop	; db 90h
 23408                                  
 23409                                  ; 12/12/2022
 23410                                  _$P_Mat:
 23411                                  _$P_Match03:				;AN000;
 23412 000017B8 A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23413 000017BB 7412                    	jz	short _$P_Match04	;AN000;
 23414                                  
 23415 000017BD 2EC706[2B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23416 000017C4 E82201                  	call	_$P_Value		;AN000; do process
 23417 000017C7 2E833E[2B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23418 000017CD 7557                    	jne	short _$P_Match_Exit	;AN000;
 23419                                  _$P_Match04:				;AN000;
 23420 000017CF A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23421 000017D2 7412                    	jz	short _$P_Match05	;AN000;
 23422                                  
 23423 000017D4 2EC706[2B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23424 000017DB E8E700                  	call	_$P_SValue		;AN000; do process
 23425 000017DE 2E833E[2B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23426 000017E4 7540                    	jne	short _$P_Match_Exit	;AN000;
 23427                                  _$P_Match05:				;AN000;
 23428 000017E6 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23429 000017E9 7415                    	jz	short _$P_Match06	;AN000;
 23430                                  
 23431 000017EB 2EC706[2B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23432 000017F2 E80B03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23433 000017F5 E88D03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23434 000017F8 2E833E[2B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23435 000017FE 7526                    	jne	short _$P_Match_Exit	;AN000;
 23436                                  _$P_Match06:				;AN000;
 23437 00001800 A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23438 00001803 7412                    	jz	short _$P_Match07	;AN000;
 23439                                  
 23440 00001805 2EC706[2B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23441 0000180C E8F102                  	call	_$P_File_Format		;AN000; do process
 23442 0000180F 2E833E[2B14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23443 00001815 750F                    	jne	short _$P_Match_Exit	;AN000;
 23444                                  _$P_Match07:				;AN000;
 23445 00001817 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23446 0000181A 740A                    	jz	short _$P_Match09	;AN000;
 23447                                  
 23448 0000181C 2EC706[2B14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23449 00001823 E8D301                  	call	_$P_Simple_String	;AN000; do process
 23450                                  _$P_Match09:				;AN000;
 23451                                  _$P_Match_Exit:				;AN000;
 23452 00001826 2E833E[CE14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23453 0000182C 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23454 0000182E 2E833E[2B14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23455 00001834 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23456 00001836 2EC706[2B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23457                                  _$P_Match2_Exit: 			;AN033;
 23458 0000183D 58                      	pop	ax			;AN000;
 23459 0000183E C3                      	retn				;AN000;
 23460                                  
 23461                                  ;***********************************************************************
 23462                                  ; _$P_Remove_Colon;
 23463                                  ;
 23464                                  ; Function: Remove colon at end
 23465                                  ;
 23466                                  ; Input:    cs:SI points to string buffer to be examineed
 23467                                  ;
 23468                                  ; Output:   None
 23469                                  ;
 23470                                  ; Use:	_$P_Chk_DBCS
 23471                                  ;***********************************************************************
 23472                                  
 23473                                  _$P_Remove_Colon:
 23474 0000183F 50                      	push	ax			;AN000;
 23475 00001840 56                      	push	si			;AN000;
 23476                                  _$P_RCOL_Loop:				;AN000;
 23477 00001841 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23478 00001844 08C0                    	or	al,al			;AN000; end of string ?
 23479 00001846 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23480                                  
 23481 00001848 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23482 0000184A 750D                    	jne	short _$P_RCOL00	;AN000;
 23483                                  
 23484 0000184C 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23485 00001851 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23486                                  
 23487 00001853 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23488 00001857 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23489                                  
 23490                                  _$P_RCOL00:				;AN000;
 23491 00001859 E84004                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23492 0000185C 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23493                                  
 23494 0000185E 46                      	inc	si			;AN000; if yes, skip trailing byte
 23495                                  _$P_RCOL01:				;AN000;
 23496 0000185F 46                      	inc	si			;AN000; si points to next byte
 23497 00001860 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23498                                  
 23499                                  _$P_RCOL_Exit:				;AN000;
 23500 00001862 5E                      	pop	si			;AN000;
 23501 00001863 58                      	pop	ax			;AN000;
 23502 00001864 C3                      	retn				;AN000;
 23503                                  
 23504                                  ;***********************************************************************
 23505                                  ; _$P_Do_CAPS_String;
 23506                                  ;
 23507                                  ; Function: Perform capitalization along with the file case map table
 23508                                  ;	    or character case map table.
 23509                                  ;
 23510                                  ; Input:    AL = 2 : Use character table
 23511                                  ;	    AL = 4 : Use file table
 23512                                  ;	    cs:SI points to string buffer to be capitalized
 23513                                  ;
 23514                                  ; Output:   None
 23515                                  ;
 23516                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23517                                  ;***********************************************************************
 23518                                  
 23519                                  _$P_Do_CAPS_String:
 23520 00001865 56                      	push	si			;AN000;
 23521 00001866 52                      	push	dx			;AN000;
 23522 00001867 88C2                    	mov	dl,al			;AN000; save info id
 23523                                  
 23524                                  _$P_DCS_Loop:				;AN000;
 23525 00001869 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23526 0000186C E82D04                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23527 0000186F 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23528                                  
 23529 00001871 08C0                    	or	al,al			;AN000; end of string ?
 23530 00001873 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23531                                  
 23532 00001875 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23533 00001878 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23534 0000187B EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23535                                  _$P_DCS00:				;AN000;
 23536 0000187D 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23537                                  _$P_DCS01:				;AN000;
 23538 0000187E 46                      	inc	si			;AN000; si point to next byte
 23539 0000187F EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23540                                  _$P_DCS_Exit:				;AN000;
 23541 00001881 5A                      	pop	dx			;AN000;
 23542 00001882 5E                      	pop	si			;AN000;
 23543 00001883 C3                      	retn
 23544                                  
 23545                                  ;***********************************************************************
 23546                                  ; _$P_Do_CAPS_Char;
 23547                                  ;
 23548                                  ; Function: Perform capitalization along with the file case map table
 23549                                  ;	    or character case map table.
 23550                                  ;
 23551                                  ; Input:    DL = 2 : Use character table
 23552                                  ;	    DL = 4 : Use file table
 23553                                  ;	    AL = character to be capitalized
 23554                                  ;
 23555                                  ; Output:   None
 23556                                  ;
 23557                                  ; Use:	INT 21h /w AH=65h
 23558                                  ;***********************************************************************
 23559                                  
 23560                                  _$P_Do_CAPS_Char:
 23561 00001884 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23562 00001886 730C                    	jae	short _$P_DCC_Go	;AN000;
 23563                                  
 23564 00001888 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23565 0000188A 7238                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23566                                  
 23567 0000188C 3C7A                    	cmp	al,"z"                  ;AN000;
 23568 0000188E 7734                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23569                                  
 23570 00001890 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23571 00001892 EB30                    	jmp	short _$P_CAPS_Ret	;AN000;
 23572                                  
 23573                                  _$P_DCC_Go:				;AN000;
 23574 00001894 53                      	push	bx			;AN000;
 23575 00001895 06                      	push	es			;AN000;
 23576 00001896 57                      	push	di			;AN000;
 23577                                  
 23578                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23579 00001897 8D3E[C014]              	lea	di,[_$P_Char_CAP_Ptr]
 23580                                  _$P_DCC00:				;AN000;
 23581 0000189B 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23582 0000189E 7417                    	je	short _$P_DCC01		;AN000; if no,
 23583                                  
 23584                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23585                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23586                                  ; call, regardless of what base register is currently be defined as cs.
 23587                                  
 23588 000018A0 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23589 000018A1 51                      	push	cx			;AN000;
 23590 000018A2 52                      	push	dx			;AN000;
 23591                                  
 23592 000018A3 0E                      	push	cs			;AC036; pass current base seg into
 23593                                  					;(Note: this used to push CS.  BUG...
 23594 000018A4 07                      	pop	es			;AN000;   ES reg, required for
 23595                                  					;get extended country information
 23596 000018A5 B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23597 000018A7 88D0                    	mov	al,dl			;AN000; upper case table
 23598 000018A9 BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23599 000018AC B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23600 000018AF BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23601                                  					;DI already set to point to buffer
 23602 000018B2 CD21                    	int	21h			;AN000; es:di point to buffer that
 23603                                  					;now has been filled in with info
 23604 000018B4 5A                      	pop	dx			;AN000;
 23605 000018B5 59                      	pop	cx			;AN000;
 23606 000018B6 58                      	pop	ax			;AN000;
 23607                                  
 23608                                  _$P_DCC01:				;AN000;
 23609                                  
 23610                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23611                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 23612                                  ; regardless of which base reg is currently the cs reg.
 23613                                  
 23614                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23615                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23616                                  	; 14/04/2024
 23617 000018B7 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 23618 000018BB 43                      	inc	bx			;AC035; add '2' to
 23619 000018BC 43                      	inc	bx			;AC035;  BX reg
 23620                                  					;AN000; skip length field
 23621 000018BD 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23622                                  	;xlat	es:[bx] 		;AN000; perform case map
 23623 000018BF 26                      	es
 23624 000018C0 D7                      	xlat
 23625 000018C1 5F                      	pop	di			;AN000;
 23626 000018C2 07                      	pop	es			;AN000;
 23627 000018C3 5B                      	pop	bx			;AN000;
 23628                                  _$P_CAPS_Ret:				;AN000;
 23629 000018C4 C3                      	retn				;AN000;
 23630                                  
 23631                                  ;***********************************************************************
 23632                                  ; _$P_Value / _$P_SValue
 23633                                  ;
 23634                                  ; Function:  Make 32bit value from cs:SI and see value list
 23635                                  ;	     and make result buffer.
 23636                                  ;	     _$P_SValue is an entry point for the signed value
 23637                                  ;	     and this will simply call _$P_Value after the handling
 23638                                  ;	     of the sign character, "+" or "-"
 23639                                  ;
 23640                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23641                                  ;	     ES:BX -> CONTROL block
 23642                                  ;
 23643                                  ; Output:    None
 23644                                  ;
 23645                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23646                                  ;
 23647                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23648                                  ;***********************************************************************
 23649                                  
 23650                                  	; 26/10/2022 - Retro DOS v4.0
 23651                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23652                                  
 23653                                  _$P_SValue:				;AN000; when signed value here
 23654 000018C5 50                      	push	ax			;AN000;
 23655 000018C6 2E800E[3714]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23656 000018CC 2E8026[3714]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23657 000018D2 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23658 000018D5 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23659 000018D7 740A                    	je	short _$P_SVal00	;AN000;
 23660                                  
 23661 000018D9 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23662 000018DB 7507                    	jne	short _$P_Sval01	;AN000; else
 23663                                  
 23664 000018DD 2E800E[3714]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23665                                  _$P_SVal00:				;AN000;
 23666 000018E3 46                      	inc	si			;AN000; skip sign char
 23667                                  _$P_Sval01:				;AN000;
 23668 000018E4 E80200                  	call	_$P_Value		;AN000; and process value
 23669 000018E7 58                      	pop	ax			;AN000;
 23670 000018E8 C3                      	retn
 23671                                  
 23672                                  ;***********************************************************************
 23673                                  
 23674                                  	; 26/10/2022
 23675                                  _$P_Value:				;AN000;
 23676 000018E9 50                      	push	ax			;AN000;
 23677 000018EA 51                      	push	cx			;AN000;
 23678 000018EB 52                      	push	dx			;AN000;
 23679 000018EC 56                      	push	si			;AN000;
 23680 000018ED 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23681 000018EF 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23682 000018F1 53                      	push	bx			;AN000; save control pointer
 23683                                  _$P_Value_Loop:				;AN000;
 23684 000018F2 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23685 000018F5 08C0                    	or	al,al			;AN000; end of line ?
 23686 000018F7 7442                    	jz	short _$P_Value00	;AN000;
 23687                                  
 23688 000018F9 E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23689 000018FC 7239                    	jc	short _$P_Value_Err0	;AN000;
 23690                                  
 23691 000018FE 30E4                    	xor	ah,ah			;AN000;
 23692 00001900 89C5                    	mov	bp,ax			;AN000; save binary number
 23693 00001902 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23694 00001904 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23695 00001906 E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23696 00001909 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23697                                  
 23698 0000190B 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23699 0000190D 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23700 0000190F D1E2                    	shl	dx,1			;AN000; to have 4*x
 23701 00001911 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23702 00001913 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23703 00001916 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23704                                  
 23705 00001918 D1E2                    	shl	dx,1			;AN000; to have 8*x
 23706 0000191A D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23707 0000191C E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23708 0000191F 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23709                                  
 23710 00001921 01DA                    	add	dx,bx			;AN000; now have 10*x
 23711 00001923 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23712 00001925 E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23713 00001928 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23714                                  
 23715 0000192A 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23716 0000192C 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23717 0000192F E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23718 00001932 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23719                                  
 23720 00001934 46                      	inc	si			;AN000; update pointer
 23721 00001935 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23722                                  ;
 23723                                  _$P_Value_Err0:				;AN000;
 23724 00001937 5B                      	pop	bx			;AN000;
 23725 00001938 E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23726                                  ;
 23727                                  _$P_Value00:				;AN000;
 23728 0000193B 5B                      	pop	bx			;AN000; restore control pointer
 23729 0000193C 2EF606[3714]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23730 00001942 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23731                                  
 23732 00001944 F7D1                    	not	cx			;AN000; +
 23733 00001946 F7D2                    	not	dx			;AN000; |- Make 2's complement
 23734 00001948 83C201                  	add	dx,1			;AN000; |
 23735 0000194B 83D100                  	adc	cx,0			;AN000; +
 23736                                  
 23737                                  _$P_Value01:				;AN000; / nval =0
 23738 0000194E 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23739 00001952 268A04                  	mov	al,[es:si]		;AN000; get nval
 23740 00001955 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23741 00001957 7506                    	jne	short _$P_Value02	;AN000;
 23742                                  
 23743 00001959 B001                    	mov	al,_$P_Number		;AN000; Set type
 23744 0000195B B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23745 0000195D EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23746                                  
 23747                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23748                                  	; (SYSINIT:1BA5h)
 23749                                  	; 12/12/2022
 23750                                  	;nop	; db  90h
 23751                                  
 23752                                  _$P_Value02:				;AN000; / nval = 1
 23753                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23754                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23755                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23756                                  
 23757 0000195F 46                      	inc	si			;AN000;
 23758 00001960 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23759 00001963 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23760 00001965 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23761                                  
 23762 00001967 46                      	inc	si			;AN000; si points to 1st item_tag
 23763                                  _$P_Val02_Loop:				;AN000;
 23764 00001968 2EF606[3714]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23765 0000196E 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23766                                  
 23767 00001970 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23768 00001974 7236                    	jb	short _$P_Val02_Next	;AN000;
 23769 00001976 7706                    	ja	short _$P_Val_In	;AN000;
 23770                                  
 23771 00001978 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23772 0000197C 722E                    	jb	short _$P_Val02_Next	;AN000;
 23773                                  
 23774                                  _$P_Val_In:				;AN000;
 23775 0000197E 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23776 00001982 7728                    	ja	short _$P_Val02_Next	;AN000;
 23777 00001984 723A                    	jb	short _$P_Val_Found	;AN000;
 23778                                  
 23779 00001986 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23780 0000198A 7720                    	ja	short _$P_Val02_Next	;AN000;
 23781                                  
 23782 0000198C EB32                    	jmp	short _$P_Val_Found	;AN000;
 23783                                  
 23784                                  _$P_Val02_Sign:				;AN000;
 23785 0000198E 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23786 00001992 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23787 00001994 7F06                    	jg	short _$P_SVal_In	;AN000;
 23788                                  
 23789 00001996 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23790 0000199A 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23791                                  
 23792                                  _$P_SVal_In:				;AN000;
 23793 0000199C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23794 000019A0 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23795                                  
 23796 000019A2 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23797                                  
 23798 000019A4 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23799 000019A8 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23800                                  
 23801 000019AA EB14                    	jmp	short _$P_Val_Found	;AN000;
 23802                                  
 23803                                  _$P_Val02_Next:				;AN000;
 23804 000019AC 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23805 000019AF FEC8                    	dec	al			;AN000; loop nrng times in AL
 23806 000019B1 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23807                                  					; / Not found
 23808 000019B3 2EC706[2B14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23809 000019BA B001                    	mov	al,_$P_Number		;AN000;
 23810 000019BC B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23811 000019BE EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23812                                  
 23813                                  _$P_Val_Found:				;AN000;
 23814 000019C0 B001                    	mov	al,_$P_Number		;AN000;
 23815 000019C2 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23816 000019C5 EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23817                                  
 23818                                  _$P_Value03:				;AN000; / nval = 2
 23819                                  
 23820                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23821                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23822                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23823                                  ;(tm07) inc	si			;AN000;
 23824                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23825                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23826                                  ;	mul	ah			;AN000;  Skip nrng field
 23827                                  ;	inc	ax			;AN000;
 23828                                  ;	add	si,ax			;AN000; si points to nnval
 23829                                  ;	mov	al,es:[si]		;AN000; get nnval
 23830                                  ;	inc	si			;AN000; si points to 1st item_tag
 23831                                  ;$P_Val03_Loop:				;AN000;
 23832                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23833                                  ;	jne	$P_Val03_Next		;AN000;
 23834                                  ;
 23835                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23836                                  ;	je	$P_Val_Found		;AN000;
 23837                                  ;
 23838                                  ;$P_Val03_Next:				;AN000;
 23839                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23840                                  ;	dec	al			;AN000; loop nval times in AL
 23841                                  ;	jne	$P_Val03_Loop		;AN000;
 23842                                  ;					;AN000; / Not found
 23843                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23844                                  ;	mov	al,$P_Number		;AN000;
 23845                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23846                                  ;	jmp	short $P_Value_Exit	;AN000;
 23847                                  ;
 23848                                  ;ENDIF					;AN000;(of Val2SW)
 23849                                  ;$P_Value04:
 23850                                  
 23851                                  _$P_Value_Err:				;AN000;
 23852 000019C7 2EC706[2B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23853 000019CE B003                    	mov	al,_$P_String		;AN000; Set type
 23854 000019D0 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23855                                  _$P_Value_Exit:				;AN000;
 23856 000019D2 E838FD                  	call	_$P_Fill_Result		;AN000;
 23857 000019D5 5E                      	pop	si			;AN000;
 23858 000019D6 5A                      	pop	dx			;AN000;
 23859 000019D7 59                      	pop	cx			;AN000;
 23860 000019D8 58                      	pop	ax			;AN000;
 23861 000019D9 C3                      	retn				;AN000;
 23862                                  
 23863                                  ; 28/03/2019 - Retro DOS v4.0
 23864                                  
 23865                                  ;***********************************************************************
 23866                                  ; _$P_Check_OVF
 23867                                  ;
 23868                                  ; Function:  Check if overflow is occurred with consideration of
 23869                                  ;	     signed or un-signed numeric value
 23870                                  ;
 23871                                  ; Input:     Flag register
 23872                                  ;
 23873                                  ; Output:    CY = 1  :	Overflow
 23874                                  ;
 23875                                  ; Vars:     _$P_Flags(R)
 23876                                  ;***********************************************************************
 23877                                  
 23878                                  	; 26/10/2022
 23879                                  _$P_Check_OVF:
 23880 000019DA 9C                      	pushf				;AN000;
 23881 000019DB 2EF606[3714]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23882 000019E1 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23883                                  
 23884 000019E3 9D                      	popf				;AN000; by the CY bit
 23885 000019E4 C3                      	retn				;AN000;
 23886                                  
 23887                                  _$P_COVF:				;AN000;
 23888 000019E5 9D                      	popf				;AN000; else,
 23889 000019E6 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23890                                  
 23891 000019E8 F8                      	clc				;AN000; indicate it with CY bit
 23892 000019E9 C3                      	retn				;AN000; CY=0 means no overflow
 23893                                  
 23894                                  _$P_COVF00:				;AN000;
 23895 000019EA F9                      	stc				;AN000; and CY=1 means overflow
 23896 000019EB C3                      	retn				;AN000;
 23897                                  
 23898                                  ;***********************************************************************
 23899                                  ; _$P_0099;
 23900                                  ;
 23901                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23902                                  ;
 23903                                  ; Input:     AL = character code
 23904                                  ;
 23905                                  ; Output:    CY = 1 : AL is not number
 23906                                  ;	     CY = 0 : AL contains binary value
 23907                                  ;***********************************************************************
 23908                                  
 23909                                  _$P_0099:
 23910 000019EC 3C30                    	cmp	al,"0"                  ;AN000;
 23911                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23912                                  	; 12/12/2022
 23913 000019EE 7208                    	jb	short _$P_0099Err2  ; cf=1
 23914                                  
 23915 000019F0 3C39                    	cmp	al,"9"                  ;AN000;
 23916 000019F2 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23917                                  
 23918 000019F4 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23919                                  	; 12/12/2022
 23920                                  	; cf=0	
 23921                                  	;clc				;AN000; indicate no error
 23922 000019F6 C3                      	retn				;AN000;
 23923                                  
 23924                                  _$P_0099Err:				;AN000;
 23925 000019F7 F9                      	stc				;AN000; indicate error
 23926                                  _$P_0099Err2: ; 12/12/2022	
 23927 000019F8 C3                      	retn				;AN000;
 23928                                  
 23929                                  ;***********************************************************************
 23930                                  ; _$P_Simple_String
 23931                                  ;
 23932                                  ; Function:  See value list for the simple string
 23933                                  ;	     and make result buffer.
 23934                                  ;
 23935                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23936                                  ;	     ES:BX -> CONTROL block
 23937                                  ;
 23938                                  ; Output:    None
 23939                                  ;
 23940                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23941                                  ;
 23942                                  ; Vars: _$P_RC(W)
 23943                                  ;***********************************************************************
 23944                                  
 23945                                  _$P_Simple_String:
 23946 000019F9 50                      	push	ax			;AN000;
 23947 000019FA 53                      	push	bx			;AN000;
 23948 000019FB 52                      	push	dx			;AN000;
 23949 000019FC 57                      	push	di			;AN000;
 23950 000019FD 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23951 00001A01 268A05                  	mov	al,[es:di]		;AN000; get nval
 23952 00001A04 08C0                    	or	al,al			;AN000; no value list ?
 23953 00001A06 7504                    	jnz	short _$P_Sim00		;AN000; then
 23954                                  
 23955 00001A08 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23956 00001A0A EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23957                                  
 23958                                  _$P_Sim00:				;AN000;
 23959                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23960 00001A0C 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23961 00001A0E 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23962                                  
 23963 00001A10 47                      	inc	di			;AN000;
 23964 00001A11 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23965 00001A14 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23966 00001A16 F6E4                    	mul	ah			;AN000; Skip nrng field
 23967 00001A18 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23968 00001A19 01C7                    	add	di,ax			;AN000; di points to nnval
 23969 00001A1B 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23970 00001A1E B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23971 00001A20 F6E4                    	mul	ah			;AN000; Skip nnval field
 23972 00001A22 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23973 00001A23 01C7                    	add	di,ax			;AN000; di points to nstrval
 23974 00001A25 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23975 00001A28 47                      	inc	di			;AC035; add '2' to
 23976 00001A29 47                      	inc	di			;AC035;  DI reg
 23977                                  					;AN000; di points to 1st string in list
 23978                                  _$P_Sim_Loop:				;AN000;
 23979 00001A2A 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23980 00001A2D E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23981 00001A30 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23982                                  
 23983 00001A32 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23984 00001A35 FEC8                    	dec	al			;AN000; loop nstval times in AL
 23985 00001A37 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23986                                  					;AN000; / Not found
 23987 00001A39 2EC706[2B14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23988 00001A40 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23989 00001A42 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23990                                  
 23991                                  _$P_Sim_Found:				;AN000;
 23992 00001A44 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23993 00001A48 B002                    	mov	al,_$P_List_Idx		;AN000;
 23994 00001A4A 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23995 00001A4D EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23996                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23997                                  _$P_Sim01:				;AN000;
 23998 00001A4F 2EC706[2B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23999 00001A56 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24000                                  _$P_Sim_Exit:				;AN000;
 24001 00001A58 B003                    	mov	al,_$P_String		;AN000; Set type
 24002                                  _$P_Sim_Exit0:				;AN000;
 24003 00001A5A E8B0FC                  	call	_$P_Fill_Result		;AN000;
 24004 00001A5D 5F                      	pop	di			;AN000;
 24005 00001A5E 5A                      	pop	dx			;AN000;
 24006 00001A5F 5B                      	pop	bx			;AN000;
 24007 00001A60 58                      	pop	ax			;AN000;
 24008 00001A61 C3                      	retn				;AN000;
 24009                                  
 24010                                  ;***********************************************************************
 24011                                  ; _$P_String_Comp:
 24012                                  ;
 24013                                  ; Function:  Compare two string
 24014                                  ;
 24015                                  ; Input:     cs:SI -> 1st string
 24016                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24017                                  ;	     ES:BX -> CONTROL block
 24018                                  ;
 24019                                  ; Output:    CY = 1 if not match
 24020                                  ;
 24021                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24022                                  ;
 24023                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24024                                  ;***********************************************************************
 24025                                  
 24026                                  _$P_String_Comp:
 24027 00001A62 50                      	push	ax			;AN000;
 24028 00001A63 55                      	push	bp			;AN000;
 24029 00001A64 52                      	push	dx			;AN000;
 24030 00001A65 56                      	push	si			;AN000;
 24031 00001A66 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24032                                  _$P_SCOM_Loop:				;AN000;
 24033 00001A68 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24034 00001A6B E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24035 00001A6E 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24036                                  
 24037 00001A70 E811FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24038                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24039 00001A73 2EF606[3714]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24040 00001A79 740D                    	jz	short _$P_SCOM04	;AN000;
 24041                                  
 24042 00001A7B 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24043 00001A7D 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24044                                  
 24045 00001A7F 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24046 00001A84 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24047                                  
 24048 00001A86 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24049                                  
 24050                                  _$P_SCOM04:				;AN000;
 24051 00001A88 2EF606[3714]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24052 00001A8E 740E                    	jz	short _$P_SCOM03	;AN000;
 24053                                  
 24054 00001A90 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24055 00001A92 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24056                                  
 24057                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24058                                  	;cmp	byte [es:bp+0],_$P_NULL
 24059                                  	; 11/12/2022
 24060 00001A94 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24061 00001A99 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24062                                  
 24063                                  _$P_SCOM05:				;AN000;   found a match
 24064 00001A9B 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24065 00001A9C EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24066                                  
 24067                                  _$P_SCOM03:				;AN000;
 24068                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24069                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24070                                  	;cmp	al,[es:bp+0]
 24071                                  	; 11/12/2022
 24072 00001A9E 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24073 00001AA2 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24074                                  
 24075 00001AA4 08C0                    	or	al,al			;AN000; end of line
 24076 00001AA6 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24077                                  
 24078                                  	; 12/12/2022
 24079                                  	;inc	si			;AN000; update operand pointer
 24080                                  	;inc	bp			;AN000;    and synonym pointer
 24081                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24082 00001AA8 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24083                                  
 24084                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24085                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24086                                  	;cmp	al,[es:bp+0]
 24087                                  	; 11/12/2022
 24088 00001AAA 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24089 00001AAE 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24090                                  
 24091 00001AB0 46                      	inc	si			;AN000; else, load next byte
 24092 00001AB1 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24093 00001AB4 45                      	inc	bp			;AN000;
 24094                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24095                                  	;cmp	al,[es:bp+0]
 24096                                  	; 11/12/2022
 24097 00001AB5 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24098 00001AB9 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24099                                  
 24100                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24101                                  	; 12/12/2022
 24102                                  _$P_SCOM01:
 24103 00001ABB 46                      	inc	si			;AN000; else update operand pointer
 24104 00001ABC 45                      	inc	bp			;AN000; 		and synonym pointer
 24105                                  ;_$P_SCOM01:				;AN000;
 24106 00001ABD EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24107                                  
 24108                                  _$P_SCOM_Differ0:			;AN000;
 24109                                  ;IF SwSW				;AN000;(tm10)
 24110 00001ABF 2EF606[3714]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24111 00001AC5 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24112                                  
 24113                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24114                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24115                                  	; 12/12/2022
 24116 00001AC7 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24117 00001ACC 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24118                                  
 24119                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24120                                  	;cmp	byte [es:bp+0],_$P_NULL
 24121                                  	; 11/12/2022
 24122 00001ACE 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24123                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24124 00001AD3 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24125                                  
 24126                                  _$P_not_applicable:			;AN000;(tm10)
 24127                                  ;ENDIF					;AN000;(tm10)
 24128                                  
 24129                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24130                                  					;AN000; ignore colon option specified ?
 24131                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24132                                  	; 12/12/2022
 24133 00001AD5 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24134                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24135                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24136 00001AD9 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24137                                  
 24138 00001ADB 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24139 00001ADD 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24140                                  
 24141                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24142                                  	;cmp	byte [es:bp+0],_$P_NULL
 24143                                  	; 11/12/2022
 24144 00001ADF 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24145 00001AE4 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24146                                  
 24147 00001AE6 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24148                                  
 24149                                  _$P_SCOM02:				;AN000;
 24150 00001AE8 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24151 00001AEA 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24152                                  
 24153                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24154                                  	;cmp	byte [es:bp+0],_$P_Colon
 24155                                  	; 11/12/2022
 24156 00001AEC 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24157 00001AF1 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24158                                  
 24159                                  _$P_SCOM_Differ: 			;AN000;
 24160 00001AF3 F9                      	stc				;AN000; indicate not found
 24161 00001AF4 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24162                                  
 24163                                  _$P_SCOM_Same:				;AN000;
 24164                                  	; 12/12/2022
 24165                                  	; cf=0
 24166 00001AF6 2E8936[3A14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24167                                  	; 12/12/2022
 24168                                  	;clc				;AN000; indicate found
 24169                                  _$P_SCOM_Exit:				;AN000;
 24170 00001AFB 5E                      	pop	si			;AN000;
 24171 00001AFC 5A                      	pop	dx			;AN000;
 24172 00001AFD 5D                      	pop	bp			;AN000;
 24173 00001AFE 58                      	pop	ax			;AN000;
 24174 00001AFF C3                      	retn
 24175                                  
 24176                                  ; 30/03/2019
 24177                                  
 24178                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24179                                  
 24180                                  ;***********************************************************************
 24181                                  ; _$P_File_Format;
 24182                                  ;
 24183                                  ; Function:  Check if the input string is valid file spec format.
 24184                                  ;	     And set the result buffer.
 24185                                  ;
 24186                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24187                                  ;	     ES:BX -> CONTROL block
 24188                                  ;
 24189                                  ; Output:    None
 24190                                  ;
 24191                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24192                                  ;
 24193                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24194                                  ;	_$P_SaveSI_Cmpx(R)
 24195                                  ;***********************************************************************
 24196                                  
 24197                                  _$P_File_Format:
 24198 00001B00 50                      	push	ax			;AN000;
 24199 00001B01 57                      	push	di			;AN000;
 24200 00001B02 56                      	push	si			;AN000;
 24201 00001B03 2E8B3E[3814]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24202                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24203 00001B08 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24204 00001B0B 08C0                    	or	al,al			;AN000; end of line ?
 24205 00001B0D 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24206                                  
 24207 00001B0F E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24208 00001B12 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24209                                  
 24210 00001B14 2EC606[CE14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24211                                  					;AN033;AC034;; set error flag- bad char.
 24212 00001B1A 5E                      	pop	si			;AN033;
 24213 00001B1B 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24214 00001B1F 5F                      	pop	di			;AN033;
 24215 00001B20 EB3E                    	jmp	short _$P_FileF02	;AN033;
 24216                                  
 24217                                  _$P_FileF_Err:				;AN000;
 24218 00001B22 5E                      	pop	si			;AN000;
 24219 00001B23 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24220 00001B27 5F                      	pop	di			;AN000;
 24221                                  
 24222                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24223                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24224                                  	; 12/12/2022
 24225 00001B28 26F60701                	test	byte [es:bx],_$P_Optional
 24226                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24227                                  	;test	word [es:bx],_$P_Optional
 24228 00001B2C 7532                    	jnz	short _$P_FileF02	;AN000;
 24229                                  
 24230 00001B2E 2EC706[2B14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24231 00001B35 EB29                    	jmp	short _$P_FileF02	;AN000;
 24232                                  
 24233                                  _$P_FileF03:				;AN000;
 24234 00001B37 58                      	pop	ax			;AN000; discard save si
 24235 00001B38 56                      	push	si			;AN000; save new si
 24236                                  _$P_FileF_Loop1: 			;AN000;
 24237 00001B39 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24238 00001B3C 08C0                    	or	al,al			;AN000; end of line ?
 24239 00001B3E 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24240                                  
 24241 00001B40 E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24242 00001B43 740B                    	je	short _$P_FileF00	;AN000;
 24243                                  
 24244 00001B45 E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24245 00001B48 7302                    	jnc	short _$P_FileF01	;AN000;
 24246 00001B4A 47                      	inc	di			;AN000; if yes, skip next byte
 24247 00001B4B 46                      	inc	si			;AN000;
 24248                                  _$P_FileF01:				;AN000;
 24249 00001B4C 47                      	inc	di			;AN000;
 24250 00001B4D 46                      	inc	si			;AN000;
 24251 00001B4E EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24252                                  ;
 24253                                  _$P_FileF00:				;AN000;
 24254 00001B50 2EA2[3114]              	mov	[cs:_$P_Terminator],al	;AC034;
 24255 00001B54 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24256 00001B58 47                      	inc	di			;AN000;
 24257 00001B59 2E893E[2D14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24258                                  _$P_FileF_RLT:				;AN000;
 24259 00001B5E 5E                      	pop	si			;AN000;
 24260 00001B5F 5F                      	pop	di			;AN000;
 24261                                  _$P_FileF02:				;AN000;
 24262 00001B60 58                      	pop	ax			;AN000; (tm14)
 24263 00001B61 A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 24264 00001B64 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24265                                  
 24266 00001B66 50                      	push	ax			;AN000;  (tm14)
 24267                                  
 24268 00001B67 B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 24269 00001B69 B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 24270 00001B6B E89FFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 24271 00001B6E 58                      	pop	ax			;AN000;
 24272                                  
 24273                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24274 00001B6F C3                      	retn				;AN000;
 24275                                  
 24276                                  ;***********************************************************************
 24277                                  ; _$P_FileSp_Chk
 24278                                  ;
 24279                                  ; Function:  Check if the input byte is one of file special characters
 24280                                  ;
 24281                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24282                                  ;	     AL = character code to be examineed
 24283                                  ;
 24284                                  ; Output:    ZF = 1 , AL is one of special characters
 24285                                  ;***********************************************************************
 24286                                  
 24287                                  _$P_FileSp_Chk:
 24288 00001B70 53                      	push	bx			;AN000;
 24289 00001B71 51                      	push	cx			;AN000;
 24290                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24291 00001B72 8D1E[C514]              	lea	bx,[_$P_FileSp_Char]
 24292 00001B76 B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24293                                  _$P_FileSp_Loop: 			;AN000;
 24294 00001B79 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24295 00001B7C 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24296                                  
 24297 00001B7E 43                      	inc	bx			;AN000;
 24298 00001B7F E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24299                                  
 24300 00001B81 41                      	inc	cx			;AN000; reset ZF
 24301                                  _$P_FileSp_Exit: 			;AN000;
 24302 00001B82 59                      	pop	cx			;AN000;
 24303 00001B83 5B                      	pop	bx			;AN000;
 24304 00001B84 C3                      	retn
 24305                                  
 24306                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24307                                  
 24308                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24309                                  
 24310                                  ;***********************************************************************
 24311                                  ; _$P_Drive_Format;
 24312                                  ;
 24313                                  ; Function:  Check if the input string is valid drive only format.
 24314                                  ;	     And set the result buffer.
 24315                                  ;
 24316                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24317                                  ;	     ES:BX -> CONTROL block
 24318                                  ;
 24319                                  ; Output:    None
 24320                                  ;
 24321                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24322                                  ;
 24323                                  ; Vars: _$P_RC(W)
 24324                                  ;***********************************************************************
 24325                                  
 24326                                  _$P_Drive_Format:
 24327 00001B85 50                      	push	ax			;AN000;
 24328 00001B86 52                      	push	dx			;AN000;
 24329 00001B87 2E8A04                  	mov	al,[cs:si]		;AN000;
 24330 00001B8A 08C0                    	or	al,al			;AN000; if null string
 24331 00001B8C 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24332                                  
 24333 00001B8E E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24334 00001B91 722B                    	jc	short _$P_Drv_Err	;AN000;
 24335                                  
 24336 00001B93 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24337 00001B98 740D                    	je	short _$P_DrvF00	;AN000;
 24338                                  
 24339                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24340                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24341                                  	; 12/12/2022
 24342 00001B9A 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24343                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24344                                  	;test	word [es:bx],_$P_Ig_Colon
 24345 00001B9E 741E                    	jz	short _$P_Drv_Err	;AN000;
 24346                                  
 24347 00001BA0 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24348 00001BA5 7517                    	jne	short _$P_Drv_Err	;AN000;
 24349                                  
 24350                                  _$P_DrvF00:				;AN000;
 24351 00001BA7 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24352 00001BA9 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24353 00001BAB 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24354                                  
 24355 00001BAD 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24356 00001BAF 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24357                                  
 24358 00001BB1 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24359 00001BB3 88C2                    	mov	dl,al			;AN000; set
 24360 00001BB5 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24361 00001BB7 B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24362 00001BB9 E851FB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24363 00001BBC EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24364                                  
 24365                                  _$P_Drv_Err:				;AN000;
 24366 00001BBE 2EC706[2B14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24367                                  _$P_Drv_Exit:				;AN000;
 24368 00001BC5 5A                      	pop	dx			;AN000;
 24369 00001BC6 58                      	pop	ax			;AN000;
 24370 00001BC7 C3                      	retn				;AN000;
 24371                                  
 24372                                  ;ENDIF					;AN000;(of DrvSW)
 24373                                  
 24374                                  ;***********************************************************************
 24375                                  ; _$P_Skip_Delim;
 24376                                  ;
 24377                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24378                                  ;	    and comma.
 24379                                  ;
 24380                                  ; Input:    DS:SI -> Command String
 24381                                  ;	    ES:DI -> Parameter List
 24382                                  ;
 24383                                  ; Output:   CY = 1 if the end of line encounterd
 24384                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24385                                  ;	    AL = Last examineed character
 24386                                  ;
 24387                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24388                                  ;
 24389                                  ; Vars:     _$P_Flags(R)
 24390                                  ;***********************************************************************
 24391                                  
 24392                                  _$P_Skip_Delim:
 24393                                  _$P_Skip_Delim_Loop:			;AN000;
 24394 00001BC8 AC                      	lodsb				;AN000;
 24395 00001BC9 E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24396 00001BCC 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24397                                  
 24398 00001BCE E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24399 00001BD1 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24400                                  
 24401 00001BD3 2EF606[3714]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24402 00001BD9 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24403                                  
 24404 00001BDB 2EF606[3714]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24405 00001BE1 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24406                                  
 24407                                  	;dec	si			;AN000; backup si for next call (tm08)
 24408                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24409                                  	; 12/12/2022
 24410                                  	; cf=0
 24411 00001BE3 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24412                                  
 24413                                  _$P_Skip_Delim_CY:			;AN000;
 24414 00001BE5 F9                      	stc				;AN000; indicate EOL
 24415 00001BE6 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24416                                  
 24417                                  _$P_Skip_Delim_NCY:			;AN000;
 24418 00001BE8 F8                      	clc				;AN000; indicate non delim
 24419                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24420 00001BE9 4E                      	dec	si			;AN000;  backup index pointer
 24421                                  	; 12/12/2022
 24422                                  _$P_Exit_At_Extra:	 ; cf=0
 24423 00001BEA C3                      	retn				;AN000;
 24424                                  
 24425                                  	; 12/12/2022
 24426                                  ;_$P_Exit_At_Extra:			;AN000;
 24427                                  	;clc				;AN000; indicate extra delim
 24428                                  	;retn				;AN000;
 24429                                  
 24430                                  ;***********************************************************************
 24431                                  ; _$P_Chk_EOL;
 24432                                  ;
 24433                                  ; Function: Check if AL is one of End of Line characters.
 24434                                  ;
 24435                                  ; Input:    AL = character code
 24436                                  ;	    ES:DI -> Parameter List
 24437                                  ;
 24438                                  ; Output:   ZF = 1 if one of End of Line characters
 24439                                  ;**********************************************************************
 24440                                  
 24441                                  _$P_Chk_EOL:
 24442 00001BEB 53                      	push	bx			;AN000;
 24443 00001BEC 51                      	push	cx			;AN000;
 24444 00001BED 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24445 00001BEF 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24446                                  
 24447 00001BF1 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24448 00001BF3 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24449                                  
 24450                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24451 00001BF5 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24452 00001BF7 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24453                                  ;ENDIF					;AN028;
 24454                                  
 24455 00001BF9 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24456                                  					;AN000; EOL character specified ?
 24457 00001BFE 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24458                                  
 24459 00001C00 31DB                    	xor	bx,bx			;AN000;
 24460 00001C02 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24461                                  					;AN000; get length of delimiter list
 24462 00001C06 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24463 00001C09 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24464 00001C0D 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24465                                  
 24466                                  	;xor	cx,cx			;AN000; Get number of extra character
 24467 00001C0F 30ED                    	xor	ch,ch
 24468 00001C11 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24469                                  _$P_Chk_EOL_Loop:			;AN000;
 24470 00001C14 43                      	inc	bx			;AN000;
 24471 00001C15 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24472 00001C18 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24473                                  
 24474 00001C1A E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24475                                  
 24476                                  _$P_Chk_EOL_NZ:				;AN000;
 24477 00001C1C 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24478                                  _$P_Chk_EOL_Exit:			;AN000;
 24479 00001C1E 59                      	pop	cx			;AN000;
 24480 00001C1F 5B                      	pop	bx			;AN000;
 24481 00001C20 C3                      	retn
 24482                                  
 24483                                  ;***********************************************************************
 24484                                  ; _$P_Chk_Delim;
 24485                                  ;
 24486                                  ; Function: Check if AL is one of delimiter characters.
 24487                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24488                                  ;	    blanks.
 24489                                  ;
 24490                                  ; Input:    AL = character code
 24491                                  ;	    DS:SI -> Next Character
 24492                                  ;	    ES:DI -> Parameter List
 24493                                  ;
 24494                                  ; Output:   ZF = 1 if one of delimiter characters
 24495                                  ;	    SI points to the next character
 24496                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24497                                  ;***********************************************************************
 24498                                  
 24499                                  _$P_Chk_Delim:
 24500 00001C21 53                      	push	bx			;AN000;
 24501 00001C22 51                      	push	cx			;AN000;
 24502 00001C23 2EC606[3114]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24503                                  					;AC034; Assume terminated by space
 24504                                  	;and	byte [cs:_$P_Flags20,0DFh
 24505 00001C29 2E8026[3714]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24506 00001C2F 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24507 00001C31 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24508                                  
 24509 00001C33 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24510 00001C35 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24511                                  
 24512 00001C37 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24513 00001C39 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24514                                  
 24515                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24516                                  _$P_Chk_Delim00: 			;AN000;
 24517 00001C3B 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24518 00001C3D 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24519                                  
 24520 00001C3F 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24521 00001C42 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24522                                  
 24523 00001C44 B020                    	mov	al,_$P_Space		;AN000;
 24524 00001C46 46                      	inc	si			;AN000; make si point to next character
 24525 00001C47 38C0                    	cmp	al,al			;AN000; Set ZF
 24526 00001C49 EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24527                                  
 24528                                  _$P_Chk_Delim01: 			;AN000;
 24529 00001C4B 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24530                                  					;AN000; delimiter character specified ?
 24531 00001C50 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24532                                  
 24533                                  	;xor	cx,cx			;AN000;
 24534 00001C52 30ED                    	xor	ch,ch
 24535                                  	;mov	cl,[es:di+3]
 24536 00001C54 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24537                                  					;AN000; get length of delimiter list
 24538 00001C58 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24539 00001C5A 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24540                                  
 24541 00001C5C BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24542                                  _$P_Chk_Delim_Loop:			;AN000;
 24543 00001C5F 43                      	inc	bx			;AN000;
 24544 00001C60 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24545 00001C63 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24546                                  
 24547 00001C65 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24548                                  
 24549                                  _$P_Chk_Delim_NZ:			;AN000;
 24550 00001C67 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24551                                  _$P_Chk_Delim_Exit:			;AN000;
 24552                                  _$P_ChkDfin:				;AN000;
 24553 00001C69 59                      	pop	cx			;AN000;
 24554 00001C6A 5B                      	pop	bx			;AN000;
 24555 00001C6B C3                      	retn				;AN000;
 24556                                  
 24557                                  _$P_Chk_Delim_Exit0:			;AN000;
 24558 00001C6C 2EA2[3114]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24559 00001C70 2EF606[3714]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24560 00001C76 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24561                                  
 24562 00001C78 2E800E[3714]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24563                                  					;AC034; flag terminated extra delimiter or comma
 24564                                  _$P_No_Set_Extra:			;AN027;
 24565 00001C7E 38C0                    	cmp	al,al			;AN000; set ZF
 24566 00001C80 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24567                                  
 24568                                  
 24569                                  ;***********************************************************************
 24570                                  ; _$P_Chk_Switch;
 24571                                  ;
 24572                                  ; Function: Check if AL is the switch character not in first position of
 24573                                  ;	    _$P_STRING_BUF
 24574                                  ;
 24575                                  ; Input:    AL = character code
 24576                                  ;	    BX = current pointer within _$P_String_Buf
 24577                                  ;	    SI =>next char on command line (following the one in AL)
 24578                                  ;
 24579                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24580                                  ;		 position, and has no chance of being part of a date string,
 24581                                  ;		 i.e. should be treated as a delimiter.
 24582                                  
 24583                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24584                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24585                                  ;		 should not be treated as a delimiter.
 24586                                  ;
 24587                                  ; Vars:  _$P_Terminator(W)
 24588                                  
 24589                                  ; Use:	 _$P_0099
 24590                                  ;***********************************************************************
 24591                                  
 24592                                  _$P_Chk_Switch:
 24593                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24594 00001C82 8D2E[4014]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24595                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24596 00001C86 39EB                    	cmp	bx,bp			;AN000;
 24597 00001C88 7406                    	je	short _$P_STRUC_L2	;AN000;
 24598                                  
 24599                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24600 00001C8A 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24601 00001C8C 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24602                                  
 24603 00001C8E F9                      	stc				;AN020;not in first position and is slash
 24604                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24605                                  	; 12/12/2022
 24606 00001C8F C3                      	retn
 24607                                  
 24608                                  ; 12/12/2022
 24609                                  ;_$P_STRUC_L5:				;AN000;
 24610                                  ;	CLC				;AN020;not a slash
 24611                                  ;;	    .ENDIF			;AN020;
 24612                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24613                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24614                                  
 24615                                  _$P_STRUC_L2:				;AN000;
 24616                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24617 00001C90 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24618 00001C92 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24619                                  
 24620 00001C94 2E800E[3714]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24621                                  ;	    .ENDIF			;AN020;
 24622                                  
 24623                                  	; 12/12/2022
 24624                                  	; cf=0
 24625                                  	;retn
 24626                                  
 24627                                  _$P_STRUC_L5:
 24628                                  	; 12/12/2022
 24629                                  _$P_STRUC_L12:				;AN000;
 24630 00001C9A F8                      	clc				;AN020;CF=0 indicating first char
 24631                                  ;	.ENDIF				;AN020;
 24632                                  _$P_STRUC_L1:				;AN000;
 24633 00001C9B C3                      	retn				;AN000;
 24634                                  
 24635                                  ;**************************************************************************
 24636                                  ; _$P_Chk_DBCS:
 24637                                  ;
 24638                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24639                                  ;
 24640                                  ;  Input:
 24641                                  ;	  AL	= Code to be examineed
 24642                                  ;
 24643                                  ;  Output:
 24644                                  ;	  If CF is on then a lead byte of DBCS
 24645                                  ;
 24646                                  ; Use: INT 21h w/AH=63
 24647                                  ;
 24648                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24649                                  ;***************************************************************************
 24650                                  
 24651                                  _$P_Chk_DBCS:
 24652 00001C9C 1E                      	push	ds			;AN000;
 24653 00001C9D 56                      	push	si			;AN000;
 24654 00001C9E 53                      	push	bx			;AN000; (tm11)
 24655                                  	
 24656 00001C9F 2E833E[3414]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24657 00001CA5 7527                    	jne	short _$P_DBCS00	;AN000;
 24658                                  
 24659 00001CA7 50                      	push	ax			;AN000;
 24660 00001CA8 1E                      	push	ds			;AN000; (tm11)
 24661 00001CA9 51                      	push	cx			;AN000;
 24662 00001CAA 52                      	push	dx			;AN000;
 24663 00001CAB 57                      	push	di			;AN000;
 24664 00001CAC 55                      	push	bp			;AN000;
 24665 00001CAD 06                      	push	es			;AN000;
 24666 00001CAE 31F6                    	xor	si,si			;AN000;
 24667 00001CB0 8EDE                    	mov	ds,si			;AN000;
 24668 00001CB2 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24669 00001CB5 CD21                    	int	21h			;AN000;
 24670                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24671 00001CB7 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24672 00001CB9 09DB                    	or	bx,bx			;AN000; (tm11)
 24673 00001CBB 07                      	pop	es			;AN000;
 24674 00001CBC 5D                      	pop	bp			;AN000;
 24675 00001CBD 5F                      	pop	di			;AN000;
 24676 00001CBE 5A                      	pop	dx			;AN000;
 24677 00001CBF 59                      	pop	cx			;AN000;
 24678 00001CC0 1F                      	pop	ds			;AN000; (tm11)
 24679 00001CC1 58                      	pop	ax			;AN000;
 24680 00001CC2 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24681                                  
 24682                                  _$P_DBCS02:				;AN000;
 24683 00001CC4 2E8936[3214]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24684 00001CC9 2E891E[3414]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24685                                  _$P_DBCS00:				;AN000;
 24686 00001CCE 2E8B36[3214]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24687 00001CD3 2E8E1E[3414]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24688                                  
 24689                                  _$P_DBCS_LOOP:				;AN000;
 24690 00001CD8 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24691 00001CDB 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24692                                  
 24693 00001CDD 3A04                    	cmp	al,[si] 		;AN000;
 24694 00001CDF 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24695                                  
 24696 00001CE1 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24697 00001CE4 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24698                                  
 24699 00001CE6 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24700 00001CE7 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24701                                  
 24702                                  _$P_DBCS01:				;AN000;
 24703 00001CE9 46                      	inc	si			;AC035; add '2' to
 24704 00001CEA 46                      	inc	si			;AC035;  SI reg
 24705                                  					;AN000; get next vector
 24706 00001CEB EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24707                                  
 24708                                  _$P_NON_DBCS:				;AN000;
 24709                                  	; 12/12/2022
 24710                                  	; cf=0
 24711                                  	;clc				;AN000; indicate SBCS
 24712                                  _$P_DBCS_EXIT:				;AN000;
 24713 00001CED 5B                      	pop	bx			;AN000; (tm11)
 24714 00001CEE 5E                      	pop	si			;AN000;
 24715 00001CEF 1F                      	pop	ds			;AN000;
 24716 00001CF0 C3                      	retn				;AN000;
 24717                                  
 24718                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24719                                  ; ======================================================================
 24720                                  ; 27/03/2019 - Retro DOS v4.0
 24721                                  
 24722                                  ;control block definitions for parser.
 24723                                  ;-----------------------------------------------------------------------
 24724                                  ; buffer = [n | n,m] {/e}
 24725                                  
 24726                                  ; 30/03/2019
 24727                                  
 24728                                  struc p_parms
 24729 00000000 ????                    	resw	1	; dw ?
 24730 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24731 00000003 ??                      	resb	1	; db 1	; length is 1
 24732 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24733                                  .size:
 24734                                  endstruc
 24735                                  
 24736                                  struc p_pos
 24737 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24738 00000002 ????                    	resw	1	; dw ?	; function
 24739 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24740                                  
 24741                                  ; note: by defining result_val before this structure, we could remove
 24742                                  ;  the "result_val" from every structure invocation
 24743                                  
 24744 00000006 ????                    	resw	1	; dw ?	; value list
 24745 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24746                                  .size:
 24747                                  endstruc
 24748                                  
 24749                                  struc	p_range
 24750 00000000 ??                      	resb	1	; db 1	; range definition
 24751 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24752 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24753 00000003 ????????                	resd	1	; dd ?	; numeric min
 24754 00000007 ????????                	resd	1	; dd ?	; numeric max
 24755                                  .size:
 24756                                  endstruc
 24757                                  
 24758                                  ;-----------------------------------------------------------------------
 24759                                  
 24760                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24761                                  	; (SYSINIT:1F48h)
 24762                                  
 24763                                  ; buffer = [n | n,m] {/e}
 24764                                  
 24765                                  ;buf_parms p_parms <buf_parmsx>
 24766                                  buf_parms: 
 24767 00001CF1 [F61C]                  	dw	buf_parmsx
 24768 00001CF3 01                      	db	1	; an extra delimiter list
 24769 00001CF4 01                      	db	1	; length is 1
 24770 00001CF5 3B                      	db	';'	; delimiter
 24771                                  
 24772                                  buf_parmsx:
 24773 00001CF6 0102[001D][141D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24774 00001CFC 01                      	db	1			; one switch
 24775 00001CFD [281D]                  	dw	sw_x_ctrl
 24776 00001CFF 00                      	db	0			; no keywords
 24777                                  
 24778                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24779                                  buf_pos1:
 24780 00001D00 0080                    	dw	8000h	; numeric value??
 24781 00001D02 0000                    	dw	0	; function
 24782 00001D04 [3A1D]                  	dw	result_val ; result value buffer	
 24783 00001D06 [091D]                  	dw	buf_range_1 ; value list
 24784 00001D08 00                      	db	0  	; no switches/keywords
 24785                                  
 24786                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24787                                  buf_range_1:
 24788 00001D09 01                      	db	1	; range definition
 24789 00001D0A 01                      	db	1	; 1 definition of range
 24790 00001D0B 01                      	db	1	; item tag for this range
 24791 00001D0C 01000000                	dd	1	; numeric min
 24792 00001D10 63000000                	dd	99	; numeric max
 24793                                  
 24794                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24795                                  buf_pos2:
 24796 00001D14 0180                    	dw	8001h
 24797 00001D16 0000                    	dw	0
 24798 00001D18 [3A1D]                  	dw	result_val	
 24799 00001D1A [1D1D]                  	dw	buf_range_2
 24800 00001D1C 00                      	db	0
 24801                                  
 24802                                  ;buf_range_2 p_range <,,,0,8>
 24803                                  buf_range_2:
 24804 00001D1D 01                      	db	1
 24805 00001D1E 01                      	db	1
 24806 00001D1F 01                      	db	1
 24807 00001D20 00000000                	dd	0
 24808 00001D24 08000000                	dd	8
 24809                                  
 24810                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24811                                  sw_x_ctrl:
 24812 00001D28 0000                    	dw	0
 24813 00001D2A 0000                    	dw	0
 24814 00001D2C [3A1D]                  	dw	result_val	
 24815 00001D2E [391D]                  	dw	noval
 24816 00001D30 01                      	db	1	; 1 switch
 24817                                  	
 24818                                  switch_x:
 24819 00001D31 2F5800                  	db	'/X',0		; M016
 24820                                  
 24821                                  p_buffers:
 24822 00001D34 0000                    	dw	0	; local variables
 24823                                  p_h_buffers:
 24824 00001D36 0000                    	dw	0
 24825                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24826                                  p_buffer_slash_x:
 24827 00001D38 00                      	db	0 ; 31/03/2019
 24828                                  
 24829                                  ;-- common definitions -------------------------------------------------
 24830                                  
 24831 00001D39 00                      noval:	db	0
 24832                                  
 24833                                  result_val: 	;label	byte
 24834 00001D3A 00                      	db	0		; type returned
 24835                                  result_val_itag:
 24836 00001D3B 00                      	db	0		; item tag returned
 24837                                  result_val_swoff:
 24838 00001D3C 0000                    	dw	0		; es:offset of the switch defined
 24839                                  rv_byte:	;label	byte
 24840 00001D3E 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24841                                  
 24842                                  ;-----------------------------------------------------------------------
 24843                                  
 24844                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24845                                  	; (SYSINIT:1F99h)
 24846                                  
 24847                                  ; break = [ on | off ]
 24848                                  
 24849                                  ;brk_parms p_parms  <brk_parmsx>
 24850                                  brk_parms:
 24851 00001D42 [471D]                  	dw	brk_parmsx
 24852 00001D44 01                      	db	1	; an extra delimiter list
 24853 00001D45 01                      	db	1	; length is 1
 24854 00001D46 3B                      	db	';'	; delimiter
 24855                                  
 24856                                  brk_parmsx:
 24857 00001D47 0101[4D1D]              	dw	101h,brk_pos	; min,max = 1 positional
 24858 00001D4B 00                      	db	0		; no switches
 24859 00001D4C 00                      	db	0		; no keywords
 24860                                  
 24861                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24862                                  brk_pos:
 24863 00001D4D 0020                    	dw	2000h
 24864 00001D4F 0000                    	dw	0
 24865 00001D51 [3A1D]                  	dw	result_val	
 24866 00001D53 [561D]                  	dw	on_off_string
 24867 00001D55 00                      	db	0
 24868                                  
 24869                                  on_off_string:	;label	byte
 24870 00001D56 03                      	db	3		; signals that there is a string choice
 24871 00001D57 00                      	db	0		; no range definition
 24872 00001D58 00                      	db	0		; no numeric values choice
 24873 00001D59 02                      	db	2		; 2 strings for choice
 24874 00001D5A 01                      	db	1		; the 1st string tag
 24875 00001D5B [601D]                  	dw	on_string
 24876 00001D5D 02                      	db	2		; the 2nd string tag
 24877 00001D5E [631D]                  	dw	off_string
 24878                                  
 24879                                  on_string:
 24880 00001D60 4F4E00                  	db	"ON",0
 24881                                  off_string:
 24882 00001D63 4F464600                	db	"OFF",0
 24883                                  
 24884                                  p_ctrl_break:
 24885 00001D67 00                      	db	0	; local variable
 24886                                  
 24887                                  ;-----------------------------------------------------------------------
 24888                                  
 24889                                  	; 27/10/2022
 24890                                  
 24891                                  ; country = n {m {path}}
 24892                                  ; or
 24893                                  ; country = n,,path
 24894                                  
 24895                                  ;cntry_parms p_parms <cntry_parmsx>
 24896                                  cntry_parms:
 24897 00001D68 [6D1D]                  	dw	cntry_parmsx
 24898 00001D6A 01                      	db	1
 24899 00001D6B 01                      	db	1
 24900 00001D6C 3B                      	db	';'
 24901                                  	
 24902                                  cntry_parmsx:
 24903 00001D6D 0103[771D][8B1D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24903 00001D73 [941D]             
 24904 00001D75 00                      	db	0		; no switches
 24905 00001D76 00                      	db	0		; no keywords
 24906                                  
 24907                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24908                                  cntry_pos1:
 24909 00001D77 0080                    	dw	8000h
 24910 00001D79 0000                    	dw	0
 24911 00001D7B [3A1D]                  	dw	result_val	
 24912 00001D7D [801D]                  	dw	cc_range
 24913 00001D7F 00                      	db	0
 24914                                  
 24915                                  ;cc_range p_range <,,,1,999>
 24916                                  cc_range:
 24917 00001D80 01                      	db	1
 24918 00001D81 01                      	db	1
 24919 00001D82 01                      	db	1
 24920 00001D83 01000000                	dd	1
 24921 00001D87 E7030000                	dd	999
 24922                                  
 24923                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24924                                  cntry_pos2:
 24925 00001D8B 0180                    	dw	8001h
 24926 00001D8D 0000                    	dw	0
 24927 00001D8F [3A1D]                  	dw	result_val	
 24928 00001D91 [801D]                  	dw	cc_range
 24929 00001D93 00                      	db	0
 24930                                  
 24931                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24932                                  cntry_pos3:
 24933 00001D94 0102                    	dw	201h
 24934 00001D96 0000                    	dw	0
 24935 00001D98 [3A1D]                  	dw	result_val	
 24936 00001D9A [391D]                  	dw	noval
 24937 00001D9C 00                      	db	0	
 24938                                  
 24939                                  p_cntry_code:
 24940 00001D9D 0000                    	dw	0	; local variable
 24941                                  p_code_page:
 24942 00001D9F 0000                    	dw	0	; local variable
 24943                                  
 24944                                  ;-----------------------------------------------------------------------
 24945                                  
 24946                                  	; 27/10/2022
 24947                                  
 24948                                  ; files = n
 24949                                  
 24950                                  ;files_parms p_parms <files_parmsx>
 24951                                  files_parms:
 24952 00001DA1 [A61D]                  	dw	files_parmsx
 24953 00001DA3 01                      	db	1
 24954 00001DA4 01                      	db	1
 24955 00001DA5 3B                      	db	';'
 24956                                  
 24957                                  files_parmsx:
 24958 00001DA6 0101[AC1D]              	dw	101h,files_pos	; min,max 1 positional
 24959 00001DAA 00                      	db	0		; no switches
 24960 00001DAB 00                      	db	0		; no keywords
 24961                                  
 24962                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24963                                  files_pos:
 24964 00001DAC 0080                    	dw	8000h
 24965 00001DAE 0000                    	dw	0
 24966 00001DB0 [3A1D]                  	dw	result_val	
 24967 00001DB2 [B51D]                  	dw	files_range
 24968 00001DB4 00                      	db	0
 24969                                  
 24970                                  ;files_range p_range <,,,8,255>
 24971                                  files_range:
 24972 00001DB5 01                      	db	1
 24973 00001DB6 01                      	db	1
 24974 00001DB7 01                      	db	1
 24975 00001DB8 08000000                	dd	8
 24976 00001DBC FF000000                	dd	255
 24977                                  
 24978                                  p_files:
 24979 00001DC0 00                      	db	0		; local variable
 24980                                  
 24981                                  ;-----------------------------------------------------------------------
 24982                                  
 24983                                  	; 27/10/2022
 24984                                  
 24985                                  ; fcbs = n,m
 24986                                  
 24987                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24988                                  fcbs_parms:
 24989 00001DC1 [C61D]                  	dw	fcbs_parmsx
 24990 00001DC3 01                      	db	1
 24991 00001DC4 01                      	db	1
 24992 00001DC5 3B                      	db	';'
 24993                                  
 24994                                  fcbs_parmsx:
 24995 00001DC6 0102[CE1D][E21D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24996 00001DCC 00                      	db	0		; no switches
 24997 00001DCD 00                      	db	0		; no keywords
 24998                                  
 24999                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25000                                  fcbs_pos_1:
 25001 00001DCE 0080                    	dw	8000h
 25002 00001DD0 0000                    	dw	0
 25003 00001DD2 [3A1D]                  	dw	result_val	
 25004 00001DD4 [D71D]                  	dw	fcbs_range
 25005 00001DD6 00                      	db	0
 25006                                  
 25007                                  ;fcbs_range p_range <,,,1,255>
 25008                                  fcbs_range:
 25009 00001DD7 01                      	db	1
 25010 00001DD8 01                      	db	1
 25011 00001DD9 01                      	db	1
 25012 00001DDA 01000000                	dd	1
 25013 00001DDE FF000000                	dd	255
 25014                                  
 25015                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25016                                  fcbs_pos_2:
 25017 00001DE2 0080                    	dw	8000h
 25018 00001DE4 0000                    	dw	0
 25019 00001DE6 [3A1D]                  	dw	result_val	
 25020 00001DE8 [EB1D]                  	dw	fcbs_keep_range
 25021 00001DEA 00                      	db	0
 25022                                  
 25023                                  ;fcbs_keep_range p_range <,,,0,255>
 25024                                  fcbs_keep_range:
 25025 00001DEB 01                      	db	1
 25026 00001DEC 01                      	db	1
 25027 00001DED 01                      	db	1
 25028 00001DEE 00000000                	dd	0
 25029 00001DF2 FF000000                	dd	255
 25030                                  
 25031 00001DF6 00                      p_fcbs:	db	0		; local variable
 25032 00001DF7 00                      p_keep:	db	0		; local variable
 25033                                  
 25034                                  ;-----------------------------------------------------------------------
 25035                                  
 25036                                  	; 27/10/2022
 25037                                  
 25038                                  ; lastdrive = x
 25039                                  
 25040                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25041                                  ldrv_parms:
 25042 00001DF8 [FD1D]                  	dw	ldrv_parmsx
 25043 00001DFA 01                      	db	1
 25044 00001DFB 01                      	db	1
 25045 00001DFC 3B                      	db	';'
 25046                                  
 25047                                  ldrv_parmsx:
 25048 00001DFD 0101[031E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25049 00001E01 00                      	db	0		; no switches
 25050 00001E02 00                      	db	0		; no keywords
 25051                                  
 25052                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25053                                  ldrv_pos:				    ; remove colon at end
 25054 00001E03 1001                    	dw	110h
 25055 00001E05 1000                    	dw	10h
 25056 00001E07 [3A1D]                  	dw	result_val	
 25057 00001E09 [391D]                  	dw	noval
 25058 00001E0B 00                      	db	0
 25059                                  	
 25060 00001E0C 00                      p_ldrv:	db	0		; local variable
 25061                                  
 25062                                  ;-----------------------------------------------------------------------
 25063                                  
 25064                                  	; 27/10/2022
 25065                                  
 25066                                  ; stacks = n,m
 25067                                  
 25068                                  ;stks_parms p_parms <stks_parmsx>
 25069                                  stks_parms:
 25070 00001E0D [121E]                  	dw	stks_parmsx
 25071 00001E0F 01                      	db	1
 25072 00001E10 01                      	db	1
 25073 00001E11 3B                      	db	';'
 25074                                  
 25075                                  stks_parmsx:
 25076 00001E12 0202[1A1E][2E1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25077 00001E18 00                      	db	0		; no switches
 25078 00001E19 00                      	db	0		; no keywords
 25079                                  
 25080                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25081                                  stks_pos_1:
 25082 00001E1A 0080                    	dw	8000h
 25083 00001E1C 0000                    	dw	0
 25084 00001E1E [3A1D]                  	dw	result_val	
 25085 00001E20 [231E]                  	dw	stks_range
 25086 00001E22 00                      	db	0
 25087                                  
 25088                                  ;stks_range p_range <,,,0,64>
 25089                                  stks_range:
 25090 00001E23 01                      	db	1
 25091 00001E24 01                      	db	1
 25092 00001E25 01                      	db	1
 25093 00001E26 00000000                	dd	0
 25094 00001E2A 40000000                	dd	64
 25095                                  
 25096                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25097                                  stks_pos_2:
 25098 00001E2E 0080                    	dw	8000h
 25099 00001E30 0000                    	dw	0
 25100 00001E32 [3A1D]                  	dw	result_val	
 25101 00001E34 [371E]                  	dw	stk_size_range
 25102 00001E36 00                      	db	0
 25103                                  
 25104                                  ;stk_size_range p_range <,,,0,512>
 25105                                  stk_size_range:
 25106 00001E37 01                      	db	1
 25107 00001E38 01                      	db	1
 25108 00001E39 01                      	db	1
 25109 00001E3A 00000000                	dd	0
 25110 00001E3E 00020000                	dd	512	
 25111                                  
 25112                                  p_stack_count:
 25113 00001E42 0000                    	dw	0	; local variable
 25114                                  p_stack_size:
 25115 00001E44 0000                    	dw	0	; local variable
 25116                                  
 25117                                  ;-----------------------------------------------------------------------
 25118                                  
 25119                                  	; 27/10/2022
 25120                                  
 25121                                  ; multitrack = [ on | off ]
 25122                                  
 25123                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25124                                  mtrk_parms:
 25125 00001E46 [4B1E]                  	dw	mtrk_parmsx
 25126 00001E48 01                      	db	1
 25127 00001E49 01                      	db	1
 25128 00001E4A 3B                      	db	';'
 25129                                  
 25130                                  mtrk_parmsx:
 25131 00001E4B 0101[511E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25132 00001E4F 00                      	db	0		; no switches
 25133 00001E50 00                      	db	0		; no keywords
 25134                                  
 25135                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25136                                  mtrk_pos:
 25137 00001E51 0020                    	dw	2000h
 25138 00001E53 0000                    	dw	0
 25139 00001E55 [3A1D]                  	dw	result_val	
 25140 00001E57 [561D]                  	dw	on_off_string
 25141 00001E59 00                      	db	0
 25142                                  
 25143 00001E5A 00                      p_mtrk:	db	0		; local variable
 25144                                  
 25145                                  ;-----------------------------------------------------------------------
 25146                                  
 25147                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25148                                  	; (SYSINIT:20B2h)
 25149                                  
 25150                                  ; switches=/k
 25151                                  
 25152                                  ;swit_parms p_parms <swit_parmsx>
 25153                                  swit_parms:
 25154 00001E5B [601E]                  	dw	swit_parmsx
 25155 00001E5D 01                      	db	1
 25156 00001E5E 01                      	db	1
 25157 00001E5F 3B                      	db	';'
 25158                                  
 25159                                  swit_parmsx:
 25160 00001E60 0000                    	dw	0		; no positionals
 25161                                  	;db	5               ; # of switches
 25162                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25163 00001E62 03                      	db	3
 25164 00001E63 [6A1E]                  	dw	swit_k_ctrl	; /k control
 25165                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25166                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25167 00001E65 [761E]                  	dw	swit_t_ctrl     ; /t control
 25168 00001E67 [821E]                  	dw	swit_w_ctrl     ; /w control
 25169 00001E69 00                      	db	0		; no keywords
 25170                                  
 25171                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25172                                  swit_k_ctrl:
 25173 00001E6A 00000000[3A1D]-         	dw	0,0,result_val,noval
 25173 00001E70 [391D]             
 25174 00001E72 01                      	db	1
 25175 00001E73 2F4B00                  swit_k:	db	'/K',0
 25176                                  
 25177                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25178                                  ;
 25179                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25180                                  ;swit_n_ctrl:
 25181                                  ;	dw	0,0,result_val,noval
 25182                                  ;	db	1
 25183                                  ;swit_n: db	'/N',0
 25184                                  ;
 25185                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25186                                  ;swit_f_ctrl:
 25187                                  ;	dw	0,0,result_val,noval
 25188                                  ;	db	1
 25189                                  ;swit_f: db 	'/F',0
 25190                                  
 25191                                  	; 27/10/2022
 25192                                  
 25193                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25194                                  swit_t_ctrl:
 25195 00001E76 00000000[3A1D]-         	dw	0,0,result_val,noval
 25195 00001E7C [391D]             
 25196 00001E7E 01                      	db	1
 25197 00001E7F 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25198                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25199                                  swit_w_ctrl:
 25200 00001E82 00000000[3A1D]-         	dw	0,0,result_val,noval
 25200 00001E88 [391D]             
 25201 00001E8A 01                      	db	1
 25202 00001E8B 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25203                                  
 25204                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25205                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25206                                  ;   in the above table to prevent the parsing code from complaining about them
 25207                                  
 25208 00001E8E 00                      p_swit_k:	db     0	; local variable
 25209 00001E8F 00                      p_swit_t:	db     0	; local variable			M059
 25210 00001E90 00                      p_swit_w:	db     0	; local variable			M063
 25211                                  
 25212                                  ;-----------------------------------------------------------------------
 25213                                  
 25214                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25215                                  	; (SYSINIT:20E8h)
 25216                                  
 25217                                  ; DOS = [ high | low ]
 25218                                  
 25219                                  ;dos_parms p_parms  <dos_parmsx>
 25220                                  dos_parms:
 25221 00001E91 [961E]                  	dw	dos_parmsx
 25222 00001E93 01                      	db	1
 25223 00001E94 01                      	db	1
 25224 00001E95 3B                      	db	';'
 25225                                  dos_parmsx:
 25226 00001E96 01                      	db	1		; min parameters
 25227 00001E97 02                      	db	2		; max parameters
 25228 00001E98 [9E1E]                  	dw	dos_pos		; 
 25229 00001E9A [9E1E]                  	dw	dos_pos		; 
 25230 00001E9C 00                      	db	0		; no switches
 25231 00001E9D 00                      	db	0		; no keywords
 25232                                  
 25233                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25234                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25235                                  dos_pos:
 25236 00001E9E 00200000[3A1D]-         	dw	2000h,0,result_val,dos_strings
 25236 00001EA4 [B01E]             
 25237 00001EA6 00                      	db	0
 25238 00001EA7 00200000[3A1D]-         	dw	2000h,0,result_val,dos_strings
 25238 00001EAD [B01E]             
 25239 00001EAF 00                      	db	0	
 25240                                  
 25241                                  dos_strings:	;label	byte
 25242 00001EB0 03                      	db	3		; signals that there is a string choice
 25243 00001EB1 00                      	db	0		; no range definition
 25244 00001EB2 00                      	db	0		; no numeric values choice
 25245 00001EB3 04                      	db	4		; 4 strings for choice
 25246 00001EB4 01                      	db	1		; the 1st string tag
 25247 00001EB5 [C01E]                  	dw	hi_string
 25248 00001EB7 02                      	db	2		; the 2nd string tag
 25249 00001EB8 [C51E]                  	dw	lo_string
 25250 00001EBA 03                      	db	3
 25251 00001EBB [C91E]                  	dw	umb_string
 25252 00001EBD 04                      	db	4
 25253 00001EBE [CD1E]                  	dw	noumb_string
 25254                                  
 25255 00001EC0 4849474800              hi_string:	db	"HIGH",0
 25256 00001EC5 4C4F5700                lo_string:	db	"LOW",0
 25257 00001EC9 554D4200                umb_string:	db	"UMB",0
 25258 00001ECD 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25259                                  
 25260 00001ED3 00                      p_dos_hi:	db	0	; local variable
 25261                                  				; BUGBUG : I dont know whether PARSER uses
 25262                                  				;          this variable or not
 25263                                  
 25264                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25265                                  
 25266                                  %if 0
 25267                                  
 25268                                  ;****************************************************************** RICHID ****
 25269                                  
 25270                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25271                                  
 25272                                  ; 30/03/2019 - Retro DOS v4.0
 25273                                  ;------------------------------------------------------------------------------
 25274                                  
 25275                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25276                                  ;
 25277                                  ;   Date:     May 14, 1992
 25278                                  ;
 25279                                  ;******************************************************************************
 25280                                  ;
 25281                                  ;   Modification log:
 25282                                  ;
 25283                                  ;     DATE    WHO      DESCRIPTION
 25284                                  ;   --------  -------  --------------------------------------------------------
 25285                                  ;   05/14/92  t-richj  Original
 25286                                  ;   06/21/92  t-richj  Final revisions before check-in
 25287                                  ;
 25288                                  ;******************************************************************************
 25289                                  ;
 25290                                  ; There are two primary definitions which need to be made, selectively, before
 25291                                  ; this include file should be used.  These are:
 25292                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25293                                  ;                declared as external.  Otherwise, variables will be declared
 25294                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25295                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25296                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25297                                  ;                (as only one module, sysconf.asm, includes this file).
 25298                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25299                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25300                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25301                                  ;
 25302                                  ;******************************************************************************
 25303                                  
 25304                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25305                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25306                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25307                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25308                                  ; space problem (it's just such a nice round number, eh?).
 25309                                  
 25310                                  MAXUMB	equ	16
 25311                                  
 25312                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25313                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25314                                  
 25315                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25316                                  SystemPSPOwner	equ	8
 25317                                  ;JapanPSPOwner	equ	9
 25318                                  
 25319                                  ; for LoadHigh and DeviceHigh:
 25320                                  ;
 25321                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25322                                  ;	          UnHideUMBs().
 25323                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25324                                  ;	           line.
 25325                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25326                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25327                                  ;	          given a command-line like "/L:3,500;4"
 25328                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25329                                  ;	          matching its index number was specified on the command-line;
 25330                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25331                                  ;	          will be set to 1.  All others will be set to 0.
 25332                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25333                                  ;	          specified by the user for a UMB (in the above example, all
 25334                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25335                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25336                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25337                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25338                                  ;	           for details).
 25339                                  
 25340                                  fInHigh:  db	0
 25341                                  fUmbTiny: db	0
 25342                                  SegLoad:  dw	0
 25343                                  UmbLoad:  db	0
 25344                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25345                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25346                                  fm_umb:   db	0
 25347                                  fm_strat: db	0
 25348                                  fm_argc:  db	0	
 25349                                  
 25350                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25351                                  ; UmbLoad is set to the UMB number given.
 25352                                  
 25353                                  UNSPECIFIED	equ	-1
 25354                                  
 25355                                  %endif
 25356                                  
 25357                                  ;****************************************************************** RICHID ****
 25358                                  
 25359                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25360                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25361                                  
 25362                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25363                                  ; (SYSINIT:212Bh)	
 25364                                  
 25365                                  		;public	DevEntry
 25366                                  
 25367 00001ED4 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25368 00001ED6 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25369 00001ED8 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25370 00001EDA 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25371 00001EDE 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25372                                  ; 27/10/2022 
 25373                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25374                                  ;
 25375 00001EE2 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25376 00001EE3 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25377 00001EE5 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25378 00001EE7 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25379                                  ;
 25380 00001EE9 00000000                DevXMSAddr:	dd	0
 25381                                  ;
 25382 00001EED 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25383 00001EEF 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25384                                  ;
 25385 00001EF1 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25386                                  				;  is being loaded into UMB
 25387 00001EF2 0000                    DevSizeOption:	dw	0	; SIZE= option
 25388                                  ;
 25389 00001EF4 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25390 00001EF5 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25391 00001EF7 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25392                                  ;
 25393 00001EFF 00                      FirstUMBLinked:	db	0
 25394 00001F00 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25395 00001F02 00000000                DevCmdLine:	dd	0	; Current Command line
 25396 00001F06 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25397                                  				; to use the file name in the command line
 25398                                  ;
 25399                                  ;	ifdef	dblspace_hooks
 25400                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25401                                  ;	endif
 25402                                  
 25403                                  ; ===========================================================================
 25404                                  
 25405                                  ; 31/03/2019 - Retro DOS v4.0
 25406                                  
 25407                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25408                                  ; (SYSINIT:215Eh)
 25409                                  
 25410                                  ;----------------------------------------------------------------------------
 25411                                  ;
 25412                                  ; procedure : doconf
 25413                                  ;
 25414                                  ;             Config file is parsed initially with this routine. For the
 25415                                  ;             Subsequent passes 'multi_pass' entry is used .
 25416                                  ;
 25417                                  ;----------------------------------------------------------------------------
 25418                                  
 25419                                  	; 27/10/2022
 25420                                  doconf:
 25421 00001F07 0E                      	push	cs
 25422 00001F08 1F                      	pop	ds
 25423                                  
 25424 00001F09 B80037                  	mov	ax,3700h
 25425                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25426 00001F0C CD21                    	int	21h
 25427 00001F0E 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25428                                  
 25429                                  ; 27/10/2022
 25430                                  ;;ifdef	MULTI_CONFIG
 25431                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25432                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25433                                  ;;endif	;MULTI_CONFIG
 25434                                  
 25435 00001F12 BA[EE33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25436 00001F15 B8003D                  	mov	ax,3D00h
 25437                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25438 00001F18 F9                      	stc				;in case of int 24
 25439 00001F19 CD21                    	int	21h			;function request
 25440 00001F1B 7306                    	jnc	short noprob		; brif opened okay
 25441                                  
 25442                                  ; 27/10/2022
 25443                                  ;;ifdef	MULTI_CONFIG
 25444                                  ;      	call	kbd_read		; we still want to give the guy
 25445                                  ;					; a chance to select clean boot!
 25446                                  ;;endif					; (ie, no autoexec.bat processing)
 25447 00001F1D C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25448 00001F22 C3                      	retn
 25449                                  noprob: 				;get file size (note < 64k!!)
 25450 00001F23 89C3                    	mov	bx,ax  ; File handle
 25451 00001F25 31C9                    	xor	cx,cx
 25452 00001F27 31D2                    	xor	dx,dx
 25453                                  	;mov	ax,4202h
 25454 00001F29 B80242                  	mov	ax,(LSEEK<<8)|2
 25455 00001F2C CD21                    	int	21h
 25456 00001F2E A3[D203]                	mov	[count],ax
 25457                                  
 25458 00001F31 31D2                    	xor	dx,dx
 25459                                  	;mov	ax,4200h
 25460 00001F33 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25461 00001F36 CD21                    	int	21h
 25462                                  
 25463                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25464                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25465 00001F38 8B16[A102]              	mov	dx,[top_of_cdss] 
 25466                                  
 25467 00001F3C A1[D203]                	mov	ax,[count]
 25468 00001F3F A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25469 00001F42 E86AF1                  	call	ParaRound
 25470 00001F45 29C2                    	sub	dx,ax
 25471                                  
 25472                                  ; 27/10/2022
 25473                                  ;;ifdef	MULTI_CONFIG
 25474                                  ;;
 25475                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25476                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25477                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25478                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25479                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25480                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25481                                  ;;  of extra space, so here we account for it (the worst case of course is
 25482                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25483                                  ;;
 25484                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25485                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25486                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25487                                  ;;endif	;MULTI_CONFIG
 25488                                  
 25489 00001F47 83EA11                  	sub	dx,11h			;room for header
 25490                                  	
 25491                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25492                                  	;mov	[CONFBOT],dx
 25493                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25494 00001F4A 8916[A102]              	mov	[top_of_cdss],dx
 25495 00001F4E E876EC                  	call    TempCDS 
 25496                                  	; 11/12/2022
 25497                                  	; ds <> cs 
 25498 00001F51 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25499                                   
 25500 00001F56 8EDA                    	mov	ds,dx
 25501 00001F58 8EC2                    	mov	es,dx
 25502                                  
 25503 00001F5A 31D2                    	xor	dx,dx
 25504 00001F5C 2E8B0E[D203]            	mov	cx,[cs:count]
 25505 00001F61 B43F                    	mov	ah,3Fh
 25506                                  	;mov	ah,READ  ; 3Fh
 25507 00001F63 F9                      	stc				;in case of int 24
 25508 00001F64 CD21                    	int	21h			;function request
 25509 00001F66 9C                      	pushf
 25510                                  
 25511                                  ; find the eof mark in the file. if present,then trim length.
 25512                                  
 25513 00001F67 50                      	push	ax
 25514 00001F68 57                      	push	di
 25515 00001F69 51                      	push	cx
 25516 00001F6A B01A                    	mov	al,1Ah			; eof mark
 25517 00001F6C 89D7                    	mov	di,dx			; point to buffer
 25518 00001F6E E305                    	jcxz	puteol			; no chars
 25519 00001F70 F2AE                    	repnz	scasb			; find end
 25520 00001F72 7501                    	jnz	short puteol		; none found and count exhausted
 25521                                  
 25522                                  ; we found a 1a. back up
 25523                                  
 25524 00001F74 4F                      	dec	di			; backup past 1Ah
 25525                                  
 25526                                  ;  just for the halibut, stick in an extra eol
 25527                                  
 25528                                  puteol:
 25529 00001F75 B00D                    	mov	al,cr ; 0Dh
 25530 00001F77 AA                      	stosb
 25531 00001F78 B00A                    	mov	al,lf  ;0Ah
 25532 00001F7A AA                      	stosb
 25533 00001F7B 29D7                    	sub	di,dx			; difference moved
 25534                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25535                                  	;mov	[cs:count],di		; new count
 25536                                  
 25537                                  	; 11/12/2022	
 25538                                  	; 31/03/2019 - Retro DOS v4.0
 25539 00001F7D 0E                      	push	cs
 25540 00001F7E 1F                      	pop	ds
 25541                                  
 25542 00001F7F 893E[D203]              	mov	[count],di		; new count
 25543                                  
 25544 00001F83 59                      	pop	cx
 25545 00001F84 5F                      	pop	di
 25546 00001F85 58                      	pop	ax
 25547                                  
 25548                                  	; 11/12/2022
 25549                                  	; 27/10/2022
 25550                                  	;push	cs
 25551                                  	;pop	ds
 25552                                  
 25553 00001F86 50                      	push	ax
 25554                                  	;mov	ah,CLOSE
 25555 00001F87 B43E                    	mov	ah,3Eh
 25556 00001F89 CD21                    	int	21h
 25557 00001F8B 58                      	pop	ax
 25558 00001F8C 9D                      	popf
 25559 00001F8D 7204                    	jc	short conferr 		;if not we've got a problem
 25560 00001F8F 39C1                    	cmp	cx,ax
 25561 00001F91 742C                    	jz	short getcom		;couldn't read the file
 25562                                  conferr:
 25563 00001F93 BA[EE33]                	mov	dx,config		;want to print config error
 25564 00001F96 E8AC13                  	call	badfil
 25565                                  endconv:
 25566 00001F99 C3                      	retn
 25567                                  
 25568                                  ;----------------------------------------------------------------------------
 25569                                  ;
 25570                                  ; entry : multi_pass
 25571                                  ;
 25572                                  ;             called to execute device=,install= commands
 25573                                  ;
 25574                                  ;----------------------------------------------------------------------------
 25575                                  
 25576                                  	; 27/10/2022
 25577                                  multi_pass:
 25578 00001F9A 0E                      	push	cs
 25579 00001F9B 1F                      	pop	ds
 25580                                  
 25581 00001F9C 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25582                                  ;jae_endconv:
 25583 00001FA1 73F6                    	jae	short endconv 		; do nothing. just return.
 25584                                  
 25585                                  	;push	word [CONFBOT]
 25586                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25587 00001FA3 FF36[A102]              	push	word [top_of_cdss]
 25588 00001FA7 07                      	pop	es			; es -> confbot
 25589                                  
 25590 00001FA8 8B36[D403]              	mov	si,[org_count]
 25591 00001FAC 8936[D203]              	mov	[count],si		; set count
 25592 00001FB0 31F6                    	xor	si,si ; 0
 25593 00001FB2 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25594 00001FB6 8936[2B03]                      mov     [linecount],si		; reset linecount
 25595                                  
 25596 00001FBA E86807                  	call	getchr
 25597 00001FBD EB06                    	jmp	short conflp
 25598                                  
 25599                                  getcom:
 25600 00001FBF E8B10E                          call    organize                ; organize the file
 25601 00001FC2 E86007                  	call	getchr
 25602                                  conflp: 
 25603 00001FC5 72D2                    	jc	short endconv
 25604                                  
 25605 00001FC7 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25606                                  
 25607 00001FCB C606[2114]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25608 00001FD0 C606[2414]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25609 00001FD5 3C0A                    	cmp	al,lf			; linefeed?
 25610 00001FD7 7416                    	je	short blank_line	;  then ignore this line.
 25611                                  
 25612                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25613                                  %if 0
 25614                                  
 25615                                  ;ifdef	MULTI_CONFIG
 25616                                  
 25617                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25618                                  ;   number immediately following it....
 25619                                  
 25620                                          mov     [config_cmd],al         ; save original command code
 25621                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25622                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25623                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25624                                          je      short not_final		; no, line number is not embedded
 25625                                  
 25626                                          push    ax                      ;
 25627                                          call    getchr                  ; ignore end-of-image errors,
 25628                                          mov     ah,al                   ; because if there's an error
 25629                                          call    getchr                  ; fetching the line number that's
 25630                                          xchg    al,ah                   ; supposed to be there, the next
 25631                                          mov     [linecount],ax          ; getchr call will get the same error
 25632                                          pop     ax
 25633                                  ;
 25634                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25635                                  ;   which to obtain its original program name, it grovels through all of
 25636                                  ;   memory to find the filename that was used to exec it; it wants to find
 25637                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25638                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25639                                  ;   immediately before the filename, but since we are now storing line # info
 25640                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25641                                  ;   spot.
 25642                                  ;
 25643                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25644                                  ;   over the line number info, since we no longer need that info anyway. This
 25645                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25646                                  ;   retrieved.
 25647                                  ;
 25648                                          cmp	byte [multi_pass_id],2	; final pass?
 25649                                          jb	short not_final		; no
 25650                                          ;test	word [install_flag],have_install_cmd
 25651                                  	test	byte [install_flag],have_install_cmd ; 1
 25652                                          jz	short final		; no install cmds, so yes it is
 25653                                          cmp	byte [multi_pass_id],3	; final pass?
 25654                                          jb	short not_final		; no
 25655                                  final:                                  ;
 25656                                  	mov	[es:si],al		; save backward-compatible command code
 25657                                  not_final:                              ;
 25658                                  ;endif
 25659                                  
 25660                                  %endif
 25661 00001FD9 88C4                    	mov	ah,al
 25662 00001FDB E84707                  	call	getchr
 25663 00001FDE 7314                    	jnc	short tryi
 25664                                  
 25665 00001FE0 803E[4903]02            	cmp	byte [multi_pass_id],2
 25666                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25667                                  	; 27/10/2022
 25668 00001FE5 73B2                    	jnb	short endconv	
 25669 00001FE7 E90707                  	jmp	badop
 25670                                  	
 25671                                  coff:	
 25672                                  	; 11/12/2022
 25673                                  	; ds = cs
 25674                                  	;push	cs
 25675                                  	;pop	ds
 25676 00001FEA E89D10                  	call	newline
 25677 00001FED EBD6                    	jmp	short conflp	; 13/05/2019
 25678                                  
 25679                                  blank_line:
 25680 00001FEF E83307                  	call	getchr
 25681 00001FF2 EBD1                    	jmp	short conflp
 25682                                  
 25683                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25684                                  ; 11/12/2022
 25685                                  ; (there is not a jump or call to here from anywhere!)
 25686                                  ;coff_p:
 25687                                  	;push	cs
 25688                                  	;pop	ds
 25689                                  
 25690                                  ;to handle install= commands,we are going to use multi-pass.
 25691                                  ;the first pass handles the other commands and only set install_flag when
 25692                                  ;it finds any install command. the second pass will only handle the
 25693                                  ;install= command.
 25694                                  
 25695                                  ;------------------------------------------------------------------------------
 25696                                  ;install command
 25697                                  ;------------------------------------------------------------------------------
 25698                                  
 25699                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25700                                  	; (SYSINIT:2250h)
 25701                                  tryi:
 25702 00001FF4 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25703 00001FF9 7503                    	jne	short not_init_pass
 25704 00001FFB E92301                  	jmp	multi_try_doshi
 25705                                  not_init_pass:
 25706 00001FFE 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25707                                          ; 11/12/2022
 25708                                  	;je	short multi_pass_coff2	; now it is NOPs
 25709 00002003 74E5                    	je	short coff
 25710                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25711                                  	;je	short multi_pass_coff	
 25712                                  					; This pass can be made use of if
 25713                                  					; we want do some config.sys process
 25714                                  					; after device drivers are loaded
 25715                                  					; and before install= commands
 25716                                  					; are processed
 25717                                  
 25718 00002005 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25719 0000200A 7411                    	je	short multi_try_i
 25720 0000200C 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25721                                  	; 11/12/2022
 25722                                  	;je	short multi_pass_coff2
 25723 0000200F 74D9                    	je	short coff
 25724                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25725                                  	;je	short multi_pass_coff	
 25726                                  
 25727                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25728                                  ;       but don't process them now.        
 25729                                          
 25730 00002011 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25731                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25732                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25733 00002014 752A                    	jne	short tryb	
 25734                                  	
 25735                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25736 00002016 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25737                                  multi_pass_coff2:
 25738 0000201B EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25739                                  
 25740                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25741                                  ;precheck_installhigh:
 25742                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25743                                  ;       jne     short tryb		; carry on with normal processing
 25744                                  ;	;or	word [install_flag],have_install_cmd
 25745                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25746                                  ;       jmp	short coff
 25747                                  
 25748                                  multi_try_i:
 25749 0000201D 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25750                                  	;jne	short multi_try_n	; no, check for installhigh
 25751                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25752 00002020 7505                    	jne	short multi_pass_filter
 25753                                  
 25754                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25755                                  ;;ifdef	MULTI_CONFIG
 25756                                  ;       call    query_user              ; query the user if config_cmd
 25757                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25758                                  ;;endif
 25759                                  
 25760 00002022 E80CF0                  	call	do_install_exec 	;install it.
 25761 00002025 EBC3                    	jmp	short coff		;to handle next install= command.
 25762                                  
 25763                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25764                                  %if 0
 25765                                  
 25766                                  multi_try_n:
 25767                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25768                                          jne	short multi_pass_filter	; no. ignore this.
 25769                                  ;ifdef	MULTI_CONFIG
 25770                                          call    query_user              ; query the user if config_cmd
 25771                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25772                                  ;endif
 25773                                  
 25774                                  ;       The memory environment is in its normal DOS state, so do
 25775                                  ;       the standard calls to set the alloc strategy for loading high
 25776                                  
 25777                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25778                                  	int	21h			;get alloc strategy
 25779                                  	mov	bx,ax
 25780                                          push    bx                      ; save for the return
 25781                                  
 25782                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25783                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25784                                  	int	21h			;set alloc strategy
 25785                                  
 25786                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25787                                          int     21h                     ; get link state
 25788                                          xor     ah,ah                   ; clear top byte
 25789                                          push    ax                      ; save for return
 25790                                  
 25791                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25792                                  	mov	bx,1
 25793                                  	int	21h			;link in UMBs
 25794                                  
 25795                                  	call	do_install_exec 	;install it.
 25796                                  
 25797                                          mov     ax,(ALLOCOPER<<8)|3
 25798                                          pop     bx                      ; recover original link state
 25799                                          int     21h
 25800                                          pop     bx                      ; recover original alloc strategy
 25801                                          mov     ax,(ALLOCOPER<<8)|1
 25802                                          int     21h
 25803                                  
 25804                                  	jmp	coff			;to handle next install= command.
 25805                                  
 25806                                  %endif
 25807                                  
 25808                                  multi_pass_filter:
 25809 00002027 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25810 0000202A 740A                    	je	short multi_pass_adjust
 25811 0000202C 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25812 0000202F 7405                    	je	short multi_pass_adjust
 25813 00002031 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25814 00002034 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25815                                  
 25816                                  multi_pass_adjust:			; these commands need to
 25817 00002036 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25818 0000203A FF06[D203]              	inc	word [count]		;  for newline proc.
 25819                                  
 25820                                  multi_pass_coff:
 25821                                  	; 11/12/2022
 25822 0000203E EBAA                    	jmp	short coff		; to handle next install= commands.
 25823                                  
 25824                                  ;------------------------------------------------------------------------------
 25825                                  ; buffer command
 25826                                  ;------------------------------------------------------------------------------
 25827                                  
 25828                                  ;******************************************************************************
 25829                                  ;									      *
 25830                                  ; function: parse the parameters of buffers= command.			      *
 25831                                  ;									      *
 25832                                  ; input :								      *
 25833                                  ;	es:si -> parameters in command line.				      *
 25834                                  ; output:								      *
 25835                                  ;	buffers set							      *
 25836                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25837                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25838                                  ;									      *
 25839                                  ; subroutines to be called:						      *
 25840                                  ;	sysinit_parse							      *
 25841                                  ; logic:								      *
 25842                                  ; {									      *
 25843                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25844                                  ;	set dx,cx to 0; 						      *
 25845                                  ;	reset buffer_slash_x;						      *
 25846                                  ;	while (end of command line)					      *
 25847                                  ;	{ sysinit_parse;						      *
 25848                                  ;	  if (no error) then						      *
 25849                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25850                                  ;		    buffer_slash_x = 1					      *
 25851                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25852                                  ;			  buffers = result_val._$P_picked_val;		      *
 25853                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25854                                  ;	  else	{show error message;error exit} 			      *
 25855                                  ;	};								      *
 25856                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25857                                  ; };									      *
 25858                                  ;									      *
 25859                                  ;******************************************************************************
 25860                                  
 25861                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25862                                  	; (SYSINIT:229Ch)
 25863                                  tryb:
 25864 00002040 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25865 00002043 7557                    	jne	short tryc
 25866                                  
 25867                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25868                                  ;;ifdef	MULTI_CONFIG
 25869                                  ;       call    query_user              ; query the user if config_cmd
 25870                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25871                                  ;;endif
 25872                                  
 25873                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25874                                  	; 18/12/2022
 25875 00002045 31C9                    	xor	cx,cx
 25876                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25877 00002047 880E[381D]              	mov	[p_buffer_slash_x],cl ; 0
 25878                                  
 25879 0000204B BF[F11C]                	mov	di,buf_parms
 25880                                  	;xor	cx,cx	; 18/12/2022
 25881                                  	; 04/01/2023
 25882                                  	;mov	dx,cx
 25883                                  do7:
 25884 0000204E E87D06                  	call	sysinit_parse
 25885 00002051 7303                    	jnc	short if7		; parse error,
 25886                                  	; 04/01/2023
 25887                                  	;call	badparm_p		;  and show messages and end the search loop.
 25888                                  	;;jmp	short sr7
 25889                                  	; 31/12/2022
 25890                                  ;sr7:
 25891                                  	;jmp	coff
 25892                                  	; 04/01/2023
 25893 00002053 E9F605                  	jmp	badparm_p_coff
 25894                                  if7:
 25895 00002056 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25896 00002059 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25897                                  	;cmp	word [result_val_swoff],switch_x
 25898 0000205B 813E[3C1D][311D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25899                                  	;jne	short if11
 25900                                  	; 31/12/2022
 25901 00002061 74EB                    	je	short do7 ;je short en11
 25902                                  
 25903                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25904                                  	;jmp	short en11 ; 31/12/2022
 25905                                  if11:
 25906                                  	;mov	ax,[rv_dword]
 25907 00002063 A1[3E1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25908 00002066 83F901                  	cmp	cx,1
 25909 00002069 7505                    	jne	short if13
 25910                                  
 25911 0000206B A3[341D]                	mov	[p_buffers],ax
 25912                                  	;jmp	short en11
 25913                                  	; 31/12/2022
 25914 0000206E EBDE                    	jmp	short do7
 25915                                  if13:
 25916 00002070 A3[361D]                	mov	[p_h_buffers],ax
 25917                                  en11:
 25918 00002073 EBD9                    	jmp	short do7
 25919                                  en7:
 25920 00002075 833E[341D]63            	cmp	word [p_buffers],99
 25921 0000207A 760B                    	jbe	short if18
 25922                                  
 25923                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25924                                  ;	jne	short if18
 25925                                  
 25926 0000207C E87E06                  	call	badparm_p
 25927 0000207F C706[361D]0000          	mov	word [p_h_buffers],0
 25928 00002085 EB12                    	jmp	short sr7
 25929                                  if18:
 25930 00002087 A1[341D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25931 0000208A A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25932                                  
 25933 0000208D A1[361D]                	mov	ax,[p_h_buffers]
 25934 00002090 A3[9902]                	mov	[h_buffers],ax
 25935                                  
 25936                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25937                                  ;	mov	[buffer_slash_x],al
 25938                                  
 25939 00002093 A1[2B03]                	mov	ax,[linecount]
 25940 00002096 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25941                                  	; 31/12/2022
 25942                                  	;jmp	short sr7
 25943                                  	; 04/01/2023
 25944                                  sr7:
 25945 00002099 E94EFF                  	jmp	coff
 25946                                  
 25947                                  ;------------------------------------------------------------------------------
 25948                                  ; break command
 25949                                  ;------------------------------------------------------------------------------
 25950                                  
 25951                                  ;****************************************************************************
 25952                                  ;									    *
 25953                                  ; function: parse the parameters of break = command.			    *
 25954                                  ;									    *
 25955                                  ; input :								    *
 25956                                  ;	es:si -> parameters in command line.				    *
 25957                                  ; output:								    *
 25958                                  ;	turn the control-c check on or off.				    *
 25959                                  ;									    *
 25960                                  ; subroutines to be called:						    *
 25961                                  ;	sysinit_parse							    *
 25962                                  ; logic:								    *
 25963                                  ; {									    *
 25964                                  ;	set di to brk_parms;						    *
 25965                                  ;	set dx,cx to 0; 						    *
 25966                                  ;	while (end of command line)					    *
 25967                                  ;	{ sysinit_parse;						    *
 25968                                  ;	  if (no error) then						    *
 25969                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25970                                  ;		   set p_ctrl_break,on;					    *
 25971                                  ;	       else					  /*off 	 */ *
 25972                                  ;		   set p_ctrl_break,off;				    *
 25973                                  ;	  else {show message;error_exit};				    *
 25974                                  ;	};								    *
 25975                                  ;	if (no error) then						    *
 25976                                  ;	   dos function call to set ctrl_break check according to	    *
 25977                                  ; };									    *
 25978                                  ;									    *
 25979                                  ;****************************************************************************
 25980                                  
 25981                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25982                                  	; (SYSINIT:22FFh)
 25983                                  tryc:
 25984 0000209C 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25985 0000209F 7534                    	jne	short trym
 25986                                  
 25987                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25988                                  ;;ifdef MULTI_CONFIG
 25989                                  ;       call    query_user              ; query the user if config_cmd
 25990                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25991                                  ;;endif
 25992 000020A1 BF[421D]                	mov	di,brk_parms
 25993 000020A4 31C9                    	xor	cx,cx
 25994                                  	; 04/01/2023
 25995                                  	;mov	dx,cx
 25996                                  do22:
 25997 000020A6 E82506                  	call	sysinit_parse
 25998 000020A9 7303                    	jnc	short if22		; parse error
 25999                                  	;call	badparm_p		;  show message and end the search loop.
 26000                                  	;;jmp	short sr22
 26001                                  	; 31/12/2022
 26002                                  ;sr22:
 26003                                  	;jmp	coff
 26004                                  	; 04/01/2023
 26005 000020AB E99E05                  	jmp	badparm_p_coff
 26006                                  if22:
 26007 000020AE 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26008 000020B1 7415                    	je	short en22		; then end the $endloop
 26009                                  
 26010                                  	;cmp	byte [result_val_itag],1
 26011 000020B3 803E[3B1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26012 000020B8 7507                    	jne	short if26
 26013                                  
 26014 000020BA C606[671D]01            	mov	byte [p_ctrl_break],1	; turn it on
 26015                                  	;jmp	short en26
 26016                                  	; 31/12/2022
 26017 000020BF EBE5                    	jmp	short do22
 26018                                  if26:
 26019 000020C1 C606[671D]00            	mov	byte [p_ctrl_break],0	; turn it off
 26020                                  en26:
 26021 000020C6 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26022                                  en22:
 26023 000020C8 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26024 000020CA B001                    	mov	al,1
 26025 000020CC 8A16[671D]              	mov	dl,[p_ctrl_break]
 26026 000020D0 CD21                    	int	21h
 26027                                  	; 31/12/2022
 26028                                  	;jmp	short sr22
 26029                                  	; 04/01/2023
 26030                                  sr22:
 26031 000020D2 E915FF                  	jmp	coff
 26032                                  
 26033                                  ;------------------------------------------------------------------------------
 26034                                  ; multitrack command
 26035                                  ;------------------------------------------------------------------------------
 26036                                  
 26037                                  ;******************************************************************************
 26038                                  ;									      *
 26039                                  ; function: parse the parameters of multitrack= command.		      *
 26040                                  ;									      *
 26041                                  ; input :								      *
 26042                                  ;	es:si -> parameters in command line.				      *
 26043                                  ; output:								      *
 26044                                  ;	turn multrk_flag on or off.					      *
 26045                                  ;									      *
 26046                                  ; subroutines to be called:						      *
 26047                                  ;	sysinit_parse							      *
 26048                                  ; logic:								      *
 26049                                  ; {									      *
 26050                                  ;	set di to brk_parms;						      *
 26051                                  ;	set dx,cx to 0; 						      *
 26052                                  ;	while (end of command line)					      *
 26053                                  ;	{ sysinit_parse;						      *
 26054                                  ;	  if (no error) then						      *
 26055                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26056                                  ;		   set p_mtrk,on;					      *
 26057                                  ;	       else					  /*off 	 */   *
 26058                                  ;		   set p_mtrk,off;					      *
 26059                                  ;	  else {show message;error_exit};				      *
 26060                                  ;	};								      *
 26061                                  ;	if (no error) then						      *
 26062                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26063                                  ;									      *
 26064                                  ; };									      *
 26065                                  ;									      *
 26066                                  ;******************************************************************************
 26067                                  
 26068                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26069                                  trym:
 26070 000020D5 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26071 000020D8 7569                    	jne	short tryu
 26072                                  
 26073                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26074                                  ;;ifdef	MULTI_CONFIG
 26075                                  ;       call    query_user      ; query the user if config_cmd
 26076                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26077                                  ;;endif
 26078 000020DA BF[461E]                	mov	di,mtrk_parms
 26079 000020DD 31C9                    	xor	cx,cx
 26080                                  	; 04/01/2023
 26081                                  	;mov	dx,cx
 26082                                  do31:
 26083 000020DF E8EC05                  	call	sysinit_parse
 26084 000020E2 7303                    	jnc	short if31	; parse error
 26085                                  	;call	badparm_p	;  show message and end the search loop.
 26086                                  	;;jmp	short sr31
 26087                                  	; 31/12/2022
 26088                                  ;sr31:
 26089                                  	;jmp	coff
 26090                                  	; 04/01/2023
 26091 000020E4 E96505                  	jmp	badparm_p_coff
 26092                                  if31:
 26093 000020E7 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26094 000020EA 7415                    	je	short en31	; then end the $endloop
 26095                                  
 26096                                  	;cmp	byte [result_val_itag],1
 26097 000020EC 803E[3B1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26098 000020F1 7507                    	jne	short if35
 26099                                  
 26100 000020F3 C606[5A1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26101                                  	;jmp	short en35
 26102                                  	; 31/12/2022
 26103 000020F8 EBE5                    	jmp	short do31
 26104                                  if35:
 26105 000020FA C606[5A1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26106                                  en35:
 26107 000020FF EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26108                                  en31:
 26109 00002101 1E                      	push	ds
 26110                                  	;;mov	ax,Bios_Data ; 70h
 26111                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26112                                  	; 21/10/2022
 26113 00002102 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26114 00002105 8ED8                    	mov	ds,ax
 26115                                  
 26116 00002107 2E803E[5A1E]00          	cmp	byte [cs:p_mtrk],0
 26117 0000210D 7508                    	jne	short if39
 26118                                  
 26119 0000210F C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26120 00002115 EB06                    	jmp	short en39
 26121                                  if39:
 26122 00002117 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26123                                  en39:
 26124 0000211D 1F                      	pop	ds
 26125                                  	; 31/12/2022
 26126                                  	;jmp	short sr31
 26127                                  	; 04/01/2023
 26128                                  sr31:
 26129 0000211E E9C9FE                  	jmp	coff
 26130                                  
 26131                                  ;----------------------------------------------------------------------------
 26132                                  ; DOS=HIGH/LOW command
 26133                                  ;----------------------------------------------------------------------------
 26134                                  
 26135                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26136                                  multi_try_doshi:
 26137 00002121 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26138 00002124 7403                    	je	short it_is_h
 26139                                  skip_it:
 26140 00002126 E9FEFE                  	jmp	multi_pass_filter
 26141                                  it_is_h:				; M003 - removed initing DevUMB
 26142                                  					;	 & runhigh
 26143                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26144                                  ;;ifdef	MULTI_CONFIG
 26145                                  ;       call    query_user              ; query the user if config_cmd
 26146                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26147                                  ;;endif
 26148 00002129 BF[911E]                	mov	di,dos_parms
 26149 0000212C 31C9                    	xor	cx,cx
 26150                                  	; 04/01/2023
 26151                                  	;mov	dx,cx
 26152                                  h_do_parse:
 26153 0000212E E89D05                  	call	sysinit_parse
 26154 00002131 7303                    	jnc	short h_parse_ok	; parse error
 26155                                  h_badparm:
 26156                                  	; 04/01/2023
 26157                                  	;call	badparm_p		; show message and end the search loop.
 26158                                  	;;jmp	short h_end
 26159                                  	; 11/12/2022
 26160                                  ;h_end:
 26161                                  	;jmp	coff
 26162                                  	; 04/01/2023
 26163 00002133 E91605                  	jmp	badparm_p_coff	
 26164                                  h_parse_ok:
 26165 00002136 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26166 00002139 7405                    	je	short h_end		; then end the $endloop
 26167 0000213B E82D06                  	call	ProcDOS
 26168 0000213E EBEE                    	jmp	short h_do_parse
 26169                                  	; 11/12/2022
 26170                                  	; 04/01/2023
 26171                                  h_end:
 26172 00002140 E9A7FE                  	jmp	coff
 26173                                  
 26174                                  ;-----------------------------------------------------------------------------
 26175                                  ; devicehigh command
 26176                                  ;-----------------------------------------------------------------------------
 26177                                  
 26178                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26179                                  tryu:
 26180 00002143 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26181 00002146 7539                    	jne	short tryd
 26182                                  
 26183                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26184                                  ;;ifdef	MULTI_CONFIG
 26185                                  ;       call    query_user              ; query the user if config_cmd
 26186                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26187                                  ;;endif
 26188                                  
 26189                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26190                                  ;	call	InitVar
 26191                                  ;	call	ParseSize		; process the size= option
 26192                                  ;	;jnc	short tryu_0
 26193                                  	
 26194                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26195                                  
 26196                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26197                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26198                                  	;mov	[cs:badparm_seg], es
 26199                                  	; 11/12/2022
 26200                                  	; ds = cs
 26201 00002148 8936[2514]              	mov	[badparm_off], si
 26202 0000214C 8C06[2714]              	mov	[badparm_seg], es
 26203                                  	;
 26204 00002150 E88A08                  	call	ParseSize
 26205 00002153 7303                    	jnc	short tryu_2	; 28/10/2022
 26206                                  
 26207                                  	;call	badparm_p
 26208                                  	;jmp	coff
 26209                                  	; 04/01/2023
 26210 00002155 E9F404                  	jmp	badparm_p_coff
 26211                                  
 26212                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26213                                  ;tryu_0:
 26214                                  ;	mov	ax,[cs:DevSizeOption]
 26215                                  ;	or	ax,ax
 26216                                  ;	jnz	short tryu_2
 26217                                  ;
 26218                                  ;	call	ParseVar
 26219                                  ;	jnc	short tryu_2
 26220                                  ;tryu_1:
 26221                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26222                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26223                                  ;	call	badparm_p		; so all we have to do is choke and
 26224                                  ;	jmp	coff			; die, rather verbosely.
 26225                                  
 26226                                  tryu_2:	
 26227 00002158 56                      	push	si
 26228 00002159 06                      	push	es
 26229                                  tryu_3:
 26230 0000215A 268A04                  	mov	al,[es:si]
 26231 0000215D 3C0D                    	cmp	al,cr
 26232 0000215F 740C                    	je	short tryu_4
 26233 00002161 3C0A                    	cmp	al,lf
 26234 00002163 7408                    	je	short tryu_4
 26235 00002165 E8070F                  	call	delim
 26236 00002168 7403                    	jz	short tryu_4
 26237 0000216A 46                      	inc	si
 26238 0000216B EBED                    	jmp	short tryu_3
 26239                                  tryu_4:	
 26240                                  	; 11/12/2022
 26241                                  	; ds = cs
 26242 0000216D A2[061F]                	mov	[DevSavedDelim],al
 26243                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26244                                  					;  it with null
 26245                                  	; 18/12/2022
 26246 00002170 29DB                    	sub	bx,bx
 26247 00002172 26881C                  	mov	[es:si],bl ; 0
 26248                                   	;mov	byte [es:si],0
 26249                                  
 26250 00002175 07                      	pop	es
 26251 00002176 5E                      	pop	si
 26252                                  
 26253                                  ;------------------------------------------------------------------------------
 26254                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26255                                  ;------------------------------------------------------------------------------
 26256                                  
 26257                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26258                                  ;
 26259                                  ;	call	UmbTest			; See if UMBs are around...
 26260                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26261                                  ;
 26262                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26263                                  ;	jmp	short LoadDevice
 26264                                  
 26265                                  ;------------------------------------------------------------------------------
 26266                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26267                                  ;------------------------------------------------------------------------------
 26268                                  
 26269                                  NrmTst:
 26270                                  	; 11/12/2022
 26271                                  	; ds = cs
 26272                                  	;;mov	byte [cs:DeviceHi],0
 26273                                  	;mov	byte [DeviceHi],0
 26274                                  	; 18/12/2022
 26275                                  	; bx = 0
 26276 00002177 381E[E21E]              	cmp	[DevUMB],bl ; 0
 26277                                  	;cmp	byte [DevUMB],0
 26278                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26279 0000217B 7417                    	je	short LoadDevice	; no, we don't
 26280                                  	;mov	byte [cs:DeviceHi],1
 26281                                  	; 11/12/2022
 26282                                  	;mov	byte [DeviceHi],1
 26283                                  	; 18/12/2022
 26284 0000217D FEC3                    	inc	bl ; mov bl,1 ; (*)
 26285                                  	; 11/12/2022
 26286                                  	;jmp	short LoadDevice2	; 11/12/2022
 26287 0000217F EB13                    	jmp	short LoadDevice
 26288                                  
 26289                                  ;------------------------------------------------------------------------------
 26290                                  ; device command
 26291                                  ;------------------------------------------------------------------------------
 26292                                  
 26293                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26294                                  	; (SYSINIT:2401h)
 26295                                  tryd:
 26296                                  	; 11/12/2022
 26297 00002181 31DB                    	xor 	bx, bx
 26298                                  	;
 26299 00002183 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26300 00002186 7403                    	je	short gotd
 26301                                  skip_it2:
 26302 00002188 E93502                  	jmp	tryq
 26303                                  gotd:
 26304                                  
 26305                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26306                                  ;;ifdef	MULTI_CONFIG
 26307                                  ;       call    query_user              ; query the user if config_cmd
 26308                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26309                                  ;;endif
 26310                                  	; 11/12/2022
 26311                                  	; ds = cs
 26312                                  	;mov	byte [DeviceHi],0
 26313                                  	;mov	word [DevSizeOption],0
 26314 0000218B 891E[F21E]              	mov	[DevSizeOption],bx ; 0
 26315 0000218F C606[061F]20            	mov	byte [DevSavedDelim],' '
 26316                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26317                                  	;mov	word [cs:DevSizeOption],0
 26318                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26319                                  					;  be replaced with a ' '
 26320                                  LoadDevice:                             ; device= or devicehigh= command.
 26321                                  	; 11/12/2022
 26322                                  	;mov	byte [DeviceHi],0
 26323 00002194 881E[F11E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26324                                  LoadDevice2:
 26325                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26326                                  	;
 26327                                  	;push    cs
 26328                                          ;pop     ds
 26329                                  	;
 26330                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26331                                  	;mov	[bpb_addr+2],es
 26332                                  	;
 26333                                  	;mov	[DevCmdLine],si		; save it for ourself
 26334                                  	;mov	[DevCmdLine+2],es
 26335                                  	;
 26336                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26337                                  
 26338                                  	; 11/12/2022
 26339                                  	; ds = cs
 26340                                  	;mov	bx,cs
 26341                                  	;mov	ds,bx
 26342                                  
 26343                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26344 00002198 8936[F803]              	mov	[bpb_addr],si
 26345                                  	;mov	[cs:bpb_addr+2],es
 26346 0000219C 8C06[FA03]              	mov	[bpb_addr+2],es
 26347                                  
 26348                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26349 000021A0 8936[021F]              	mov	[DevCmdLine],si
 26350                                  	;mov	[cs:DevCmdLine+2],es	
 26351 000021A4 8C06[041F]              	mov	[DevCmdLine+2],es	
 26352                                  
 26353 000021A8 E8070F                  	call	round
 26354                                  	
 26355 000021AB E83F07                  	call	SizeDevice
 26356 000021AE 7215                    	jc	short BadFile
 26357                                  
 26358                                  	; 11/12/2022
 26359                                  	; ds = cs
 26360                                  
 26361                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26362                                  
 26363                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26364                                  ;
 26365                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26366                                  ;
 26367                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26368                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26369                                  ;	jz	short DevConvLoad	; the actual load.
 26370                                  ;
 26371                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26372                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26373                                  ;
 26374                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26375                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26376                                  ;
 26377                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26378                                  ;
 26379                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26380                                  ;	or	ax,ax
 26381                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26382                                  ;
 26383                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26384                                  ;	jge	short DevConvLoad
 26385                                  ;
 26386                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26387                                  ;	call	StoLoadSize		; minsize for load UMB.
 26388                                  
 26389                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26390                                  
 26391                                  DevConvLoad:
 26392                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26393 000021B0 E84F06                  	call	InitDevLoad
 26394                                  
 26395                                  	; 11/12/2022
 26396                                  	; ds = cs
 26397 000021B3 A1[D61E]                	mov	ax,[DevLoadAddr]
 26398 000021B6 0306[D41E]              	add	ax,[DevSize]
 26399 000021BA 7206                    	jc	short NoMem
 26400 000021BC 3906[D81E]              	cmp	[DevLoadEnd],ax
 26401 000021C0 7312                    	jae	short LoadDev
 26402                                  	
 26403                                  	; 11/12/2022
 26404                                  	;mov	ax,[cs:DevLoadAddr]
 26405                                  	;add	ax,[cs:DevSize]
 26406                                  	;jc	short NoMem
 26407                                  	;cmp	[cs:DevLoadEnd],ax
 26408                                  	;jae	short LoadDev
 26409                                  NoMem:
 26410                                  	; 11/12/2022
 26411                                  	; ds = cs
 26412                                  	;jmp	mem_err
 26413 000021C2 E9300F                  	jmp	mem_err2
 26414                                  
 26415                                  BadFile:
 26416                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26417                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26418                                  	;cmp    byte [es:si],' '
 26419                                          ;jae	short tryd_2
 26420 000021C5 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26421 000021C9 7503                            jne	short tryd_2
 26422 000021CB E92305                  	jmp	badop
 26423                                  tryd_2:
 26424 000021CE E87811                  	call	badload
 26425 000021D1 E916FE                  	jmp	coff
 26426                                  
 26427                                  LoadDev:
 26428 000021D4 06                      	push	es
 26429 000021D5 1F                      	pop	ds
 26430                                  
 26431 000021D6 89F2                    	mov	dx,si			;ds:dx points to file name
 26432 000021D8 E86307                  	call	ExecDev			; load device driver using exec call
 26433                                  badldreset:
 26434 000021DB 1E                      	push	ds
 26435 000021DC 07                      	pop	es			;es:si back to config.sys
 26436 000021DD 0E                      	push	cs
 26437 000021DE 1F                      	pop	ds			;ds back to sysinit
 26438 000021DF 72E4                    	jc	short BadFile
 26439                                  goodld:
 26440                                  	; 11/12/2022
 26441                                  	; ds = cs
 26442                                  
 26443 000021E1 06                      	push	es
 26444 000021E2 56                      	push	si
 26445 000021E3 E87507                  	call	RemoveNull
 26446 000021E6 06                      	push	es
 26447 000021E7 56                      	push	si
 26448                                  
 26449 000021E8 0E                      	push	cs
 26450 000021E9 07                      	pop	es
 26451                                  
 26452 000021EA 1E                      	push	ds
 26453 000021EB 56                      	push	si
 26454                                  
 26455                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26456                                  	; 31/12/2022
 26457                                  	; ds = cs
 26458 000021EC C536[DA1E]              	lds	si,[DevEntry]
 26459                                  	
 26460                                  	;test	word [si+4],8000h
 26461                                  	; 11/12/2022
 26462 000021F0 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26463                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26464 000021F4 7511                    	jnz	short got_device_com_cont   ; no.
 26465                                  
 26466 000021F6 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26467                                  	;cmp	byte [si+32],26
 26468 000021FB 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26469 000021FF 7206                    	jb	short got_device_com_cont
 26470                                  
 26471 00002201 5E                      	pop	si
 26472 00002202 1F                      	pop	ds
 26473                                  
 26474 00002203 5E                      	pop	si			; clear the stack
 26475 00002204 07                      	pop	es
 26476                                  
 26477                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26478                                  	;call	RetFromUM		; Do this before we leave
 26479                                  
 26480 00002205 EB57                    	jmp	short badnumblock
 26481                                  
 26482                                  got_device_com_cont:
 26483 00002207 5E                      	pop	si
 26484 00002208 1F                      	pop	ds
 26485                                  
 26486                                  	; 11/12/2022
 26487                                  	; ds = cs
 26488                                  
 26489 00002209 E88205                  	call	LieInt12Mem
 26490 0000220C E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26491                                  
 26492                                  	; 11/12/2022
 26493                                  	; ds = cs
 26494 0000220F 803E[2114]00            	cmp	byte [multdeviceflag],0
 26495                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26496                                  					;  driver in the file ; M027
 26497 00002214 750E                    	jne	short skip_pass_limit	;		      ; M027
 26498                                  
 26499                                  	; 11/12/2022
 26500                                  	; ds = cs
 26501                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26502                                  	;mov	bx,[cs:DevLoadEnd]
 26503                                  	;mov	[cs:break_addr+2],bx
 26504                                  
 26505 00002216 C706[F403]0000          	mov	word [break_addr],0
 26506 0000221C 8B1E[D81E]              	mov	bx,[DevLoadEnd]
 26507 00002220 891E[F603]              	mov	[break_addr+2],bx
 26508                                  
 26509                                  skip_pass_limit:
 26510                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26511                                  ;	number of installed devices (including DblSpace drives) where
 26512                                  ;	"drivenumber" is the number that the next block device will
 26513                                  ;	be assigned to. Because some naughty device drivers (like
 26514                                  ;	interlnk) look at the internal DOS variable instead of the
 26515                                  ;	value we pass it, we'll temporarily stick our value into
 26516                                  ;	DOS DATA while we're initializing the device drivers.
 26517                                  ;
 26518                                  ;	Note that this will make it impossible for this device
 26519                                  ;	driver to access the DblSpace drive letters, whether
 26520                                  ;	they are swapped-hosts or unswapped compressed drives,
 26521                                  ;	during its initialization phase.
 26522                                  
 26523                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26524                                  	;push	ds
 26525                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26526                                  	;
 26527                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26528                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26529                                  	;mov	ah,al
 26530                                  	;
 26531                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26532                                  	;pop	ds
 26533                                  	;
 26534                                  	;push	ax			; save real sysi_numio/ncds in ax
 26535                                  
 26536                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26537                                  	; (SYSINIT:24B9h)
 26538                                  
 26539 00002224 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26540 00002227 E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26541 0000222A BB0800                  	mov	bx,SYSDEV.INT ; 8
 26542 0000222D E8CE0E                  	call	calldev 		; calldev (sdevint);
 26543                                  
 26544                                  	; 11/12/2022
 26545                                  	; ds <> cs
 26546                                  
 26547                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26548                                  	;pop	ax			; get real sysi_numio value
 26549                                  	;push	ds
 26550                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26551                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26552                                  	;pop	ds
 26553                                  
 26554                                  	; 11/12/2022
 26555 00002230 0E                      	push	cs
 26556 00002231 1F                      	pop	ds
 26557                                  
 26558 00002232 E88905                  	call	TrueInt12Mem
 26559                                  
 26560                                  	; 11/12/2022
 26561                                  	; ds = cs
 26562                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26563                                  	;mov	[cs:DevBrkAddr],ax
 26564                                  	;mov	ax,[cs:break_addr+2]
 26565                                  	;mov	[cs:DevBrkAddr+2],ax
 26566 00002235 A1[F403]                	mov	ax,[break_addr]	
 26567 00002238 A3[DE1E]                	mov	[DevBrkAddr],ax
 26568 0000223B A1[F603]                	mov	ax,[break_addr+2]
 26569 0000223E A3[E01E]                	mov	[DevBrkAddr+2],ax
 26570                                  
 26571                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26572                                  	;call	RetFromUM		; There we go... all done.
 26573                                  
 26574                                  	; 11/12/2022
 26575 00002241 803E[E21E]00            	cmp	byte [DevUMB],0	
 26576                                  	;cmp	byte [cs:DevUMB],0
 26577 00002246 7403                    	je	short tryd_3
 26578 00002248 E83608                  	call	AllocUMB
 26579                                  	; 31/12/2022
 26580                                  	; ds= cs
 26581                                  tryd_3:
 26582                                  
 26583                                  ;ifndef ROMDOS
 26584                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26585                                  
 26586                                  	; 11/12/2022
 26587                                  	; ds = cs
 26588                                  	
 26589                                  	;cmp	byte [cs:runhigh],0FFh
 26590 0000224B 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26591 00002250 7503                    	jne	short tryd_4
 26592                                  	
 26593                                  	; 11/12/2022
 26594                                  	; ds = cs
 26595 00002252 E879E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26596                                  tryd_4:
 26597                                  ;endif ; ROMDOS
 26598                                  
 26599 00002255 5E                      	pop	si
 26600 00002256 1F                      	pop	ds
 26601 00002257 C60400                  	mov	byte [si],0		; *p = 0;
 26602                                  
 26603 0000225A 0E                      	push	cs
 26604 0000225B 1F                      	pop	ds
 26605                                  
 26606 0000225C EB1F                    	jmp	short was_device_com
 26607                                  
 26608                                  ;----------------------------------------------------------------------------
 26609                                  
 26610                                  ;02/04/2019 - Retro DOS v4.0
 26611                                  
 26612                                  badnumblock:
 26613 0000225E 0E                      	push	cs
 26614 0000225F 1F                      	pop	ds
 26615 00002260 BA[4238]                	mov	dx,badblock
 26616 00002263 E80B11                  	call	print
 26617                                  
 26618                                  ;------ fall thru -----------------------------------------------------------
 26619                                  
 26620                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26621                                  	
 26622                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26623                                  	
 26624 00002266 5E                      	pop	si
 26625 00002267 07                      	pop	es
 26626                                  
 26627 00002268 0E                      	push	cs
 26628 00002269 1F                      	pop	ds
 26629                                  
 26630                                  skip1_resetmemhi:
 26631                                  	; 11/12/2022
 26632                                  	; ds = cs
 26633 0000226A 833E[FD03]00            	cmp	word [configmsgflag],0
 26634                                  	;cmp	word [cs:configmsgflag],0
 26635 0000226F 7409                    	je	short no_error_line_msg
 26636                                  
 26637 00002271 E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26638                                  	; 11/12/2022
 26639                                  	; ds = cs
 26640                                  	;mov	word [cs:configmsgflag],0
 26641 00002274 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26642                                  
 26643                                  no_error_line_msg:
 26644 0000227A E96DFD                  	jmp	coff
 26645                                  
 26646                                  ;----------------------------------------------------------------------------
 26647                                  
 26648                                  was_device_com:
 26649                                  	; 14/12/2022
 26650                                  	; ds = cs
 26651 0000227D A1[E01E]                	mov	ax,[DevBrkAddr+2]
 26652                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26653 00002280 3B06[D81E]              	cmp	ax,[DevLoadEnd]
 26654                                  	;cmp	ax,[cs:DevLoadEnd]
 26655 00002284 7605                    	jbe	short breakok
 26656                                  
 26657 00002286 5E                      	pop	si
 26658 00002287 07                      	pop	es
 26659 00002288 E93AFF                  	jmp	BadFile
 26660                                  
 26661                                  breakok:
 26662                                  	; 14/12/2022
 26663                                  	; ds = cs
 26664 0000228B C43E[6B02]              	les	di,[DOSINFO] 
 26665 0000228F C516[DA1E]              	lds	dx,[DevEntry]
 26666                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26667 00002293 89D6                    	mov	si,dx
 26668                                  
 26669                                  	; 14/11/2022
 26670                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26671                                  
 26672                                  	; 14/12/2022
 26673                                  	; ds <> cs
 26674                                  	
 26675                                  	;mov	ax,[si+4]
 26676 00002295 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26677                                  	; 12/12/2022
 26678 00002298 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26679                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26680 0000229B 7426                    	jz	short isblock
 26681                                  
 26682                                  ;------ lets deal with character devices
 26683                                  
 26684 0000229D 2E800E[2414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26685 000022A3 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26686                                  jc_edd:
 26687 000022A6 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26688                                  
 26689                                  	; 12/12/2022
 26690 000022A8 A801                    	test	al,ISCIN
 26691                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26692 000022AA 7408                    	jz	short tryclk
 26693                                  
 26694 000022AC 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26695 000022B0 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26696                                  tryclk: 
 26697                                  	; 12/12/2022
 26698 000022B4 A808                    	test	al,ISCLOCK
 26699                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26700 000022B6 7408                    	jz	short golink
 26701                                  
 26702 000022B8 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26703 000022BC 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26704                                  golink: 
 26705 000022C0 E9B000                  	jmp	linkit
 26706                                  
 26707                                  ;------ deal with block device drivers
 26708                                  
 26709                                  isblock:
 26710 000022C3 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26711 000022C7 08C0                    	or	al,al
 26712 000022C9 749B                    	jz	short erase_dev_do
 26713                                  	;mov	[si+10],al
 26714 000022CB 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26715                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26716                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26717                                  perdrv:
 26718 000022CE 98                      	cbw				; warning no device > 127 units
 26719 000022CF 89C1                    	mov	cx,ax
 26720 000022D1 88E6                    	mov	dh,ah
 26721                                  	;mov	dl,[es:di+32]
 26722 000022D3 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26723 000022D7 88D4                    	mov	ah,dl
 26724 000022D9 00C4                    	add	ah,al			; check for too many devices
 26725 000022DB 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26726 000022DE 7603                    	jbe	short ok_block
 26727 000022E0 E97BFF                  	jmp	badnumblock
 26728                                  
 26729                                  ok_block:
 26730 000022E3 2E800E[2414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26731 000022E9 E8A206                  	call	DevSetBreak		; alloc the device
 26732 000022EC 72B8                    	jc	short jc_edd
 26733 000022EE 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26734                                  
 26735 000022F2 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26736 000022F7 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26737                                  perunit:
 26738 000022FC 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26739                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26740                                  	; 11/12/2022
 26741 00002301 26C46E00                	les	bp,[es:bp]
 26742                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26743                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26744                                  scandpb:
 26745                                  	;cmp	word [es:bp+25],-1
 26746 00002305 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26747 0000230A 7406                    	je	short foundpb
 26748                                  	;les	bp,[es:bp+25]
 26749 0000230C 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26750 00002310 EBF3                    	jmp	short scandpb
 26751                                  foundpb:
 26752 00002312 2EA1[DE1E]              	mov	ax,[cs:DevBrkAddr]
 26753 00002316 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26754 0000231A 2EA1[E01E]              	mov	ax,[cs:DevBrkAddr+2]
 26755 0000231E 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26756                                  
 26757 00002322 2EC42E[DE1E]            	les	bp,[cs:DevBrkAddr]
 26758 00002327 2E8306[DE1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26759                                  
 26760 0000232D E83D06                  	call	RoundBreakAddr
 26761                                  
 26762 00002330 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26763 00002336 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26764                                  
 26765 0000233B 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26766 0000233D 43                      	inc	bx
 26767 0000233E 43                      	inc	bx			;point to next guy
 26768                                  	;mov	[es:bp+DPB.DRIVE],dx
 26769                                  	; 11/12/2022
 26770 0000233F 26895600                	mov	[es:bp],dx ; 13/05/2019
 26771                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26772                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26773                                  	
 26774 00002343 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26775 00002345 CD21                    	int	21h
 26776                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26777                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26778                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26779                                  
 26780                                  	;mov	ax,[es:bp+2]
 26781 00002347 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26782 0000234B 06                      	push	es
 26783 0000234C 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26784                                  	;cmp	ax,[es:di+10h]
 26785 00002351 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26786 00002355 07                      	pop	es
 26787                                  	;jna	short iblk_1
 26788                                  	;jmp	short bad_bpb_size_sector
 26789                                  	; 29/10/2022
 26790 00002356 775A                    	ja	short bad_bpb_size_sector
 26791                                  iblk_1:
 26792 00002358 1E                      	push	ds
 26793 00002359 52                      	push	dx
 26794                                  
 26795 0000235A 2EC516[DA1E]            	lds	dx,[cs:DevEntry]
 26796                                  	;mov	[es:bp+13h],dx
 26797 0000235F 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26798                                  	;mov	[es:bp+15h],ds
 26799 00002363 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26800                                  
 26801 00002367 5A                      	pop	dx
 26802 00002368 1F                      	pop	ds
 26803                                  
 26804 00002369 42                      	inc	dx
 26805 0000236A FEC6                    	inc	dh
 26806 0000236C E28E                    	loop	perunit
 26807                                  
 26808 0000236E 0E                      	push	cs
 26809 0000236F 1F                      	pop	ds
 26810                                  
 26811 00002370 E854E8                  	call	TempCDS 		; set cds for new drives
 26812                                  linkit:
 26813 00002373 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26814 00002378 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26815 0000237C 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26816                                  
 26817 00002380 2EC536[DA1E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26818 00002385 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26819 00002389 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26820 0000238D 8B04                    	mov	ax,[si]			;get pointer to next device
 26821 0000238F 2EA3[DA1E]              	mov	[cs:DevEntry],ax	;and save it
 26822                                  
 26823 00002393 890C                    	mov	[si],cx			;link in the driver
 26824 00002395 895402                  	mov	[si+2],dx
 26825                                  enddev:
 26826 00002398 5E                      	pop	si
 26827 00002399 07                      	pop	es
 26828 0000239A 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26829 0000239B 740B                    	jz	short coffj3
 26830                                  
 26831 0000239D 2EFE06[2114]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26832 000023A2 E80B06                  	call	DevBreak		; M009
 26833                                  	; 11/12/2022
 26834                                  	; ds = cs (DevBreak)
 26835                                  
 26836                                  	; 03/04/2019 - Retro DOS v4.0
 26837                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26838 000023A5 E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26839                                  coffj3: 
 26840                                  	; 18/12/2022
 26841                                  	; ax = 0
 26842 000023A8 2EA2[2114]              	mov	[cs:multdeviceflag],al ; 0
 26843                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26844 000023AC E80106                  	call	DevBreak
 26845                                  	; 11/12/2022
 26846                                  	; ds = cs (DevBreak)
 26847                                  	
 26848                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26849                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26850                                  ;					;  created a bogus arena to try
 26851                                  ;					;  to protect some of its resident-
 26852                                  ;					;  init code.
 26853                                  	;call	CheckDoubleSpace
 26854 000023AF E938FC                  	jmp	coff
 26855                                  
 26856                                  ;----------------------------------------------------------------------------
 26857                                  
 26858                                  ;CheckDoubleSpace:
 26859                                  ;;;;	ifdef	dblspace_hooks
 26860                                  ;
 26861                                  ;;	Now check for two special MagicDrv cases:
 26862                                  ;;
 26863                                  ;;       a) the last driver load was MagicDrv final placement:
 26864                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26865                                  ;;
 26866                                  ;;       b) MagicDrv is currently in temporary home:
 26867                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26868                                  ;
 26869                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26870                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26871                                  ;
 26872                                  ;;	Now inquire of driver whether it is present, and final located
 26873                                  ;
 26874                                  ;	mov	ax,multMagicdrv ; 4A11h
 26875                                  ;	mov	bx,MD_VERSION ; 0
 26876                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26877                                  ;	or	ax,ax			; is it there?
 26878                                  ;	jnz	short no_more_magic_calls ; done if not
 26879                                  ;
 26880                                  ;	test	dx,8000h		; is it final placed?
 26881                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26882                                  ;
 26883                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26884                                  ;;	don't keep checking it, and add its number of drive letters
 26885                                  ;;	to drivenumber.
 26886                                  ;
 26887                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26888                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26889                                  ;;					;  the drive number we'll pass to the
 26890                                  ;;					;  next loadable block device.
 26891                                  ;
 26892                                  ;	jmp	short no_more_magic_calls ; and finished.
 26893                                  ;
 26894                                  ;magic_not_yet_home:
 26895                                  ;	push	es
 26896                                  ;	push	si
 26897                                  ;
 26898                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26899                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26900                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26901                                  ;
 26902                                  ;	mov	bx,2
 26903                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26904                                  ;;					;   by this many units
 26905                                  ;
 26906                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26907                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26908                                  ;;					;  sees this, to prevent bad things
 26909                                  ;;					;  from happening if people run the
 26910                                  ;;					;  new driver with an old BIOS
 26911                                  ;	call	far [cs:MagicBackdoor]
 26912                                  ;
 26913                                  ;	pop	si
 26914                                  ;	pop	es
 26915                                  ;
 26916                                  ;no_more_magic_calls:
 26917                                  ;
 26918                                  ;;;;	endif
 26919                                  ;	retn
 26920                                  
 26921                                  ; 03/04/2019 - Retro DOS v4.0
 26922                                  
 26923                                  bad_bpb_size_sector:
 26924 000023B2 5E                      	pop	si
 26925 000023B3 07                      	pop	es
 26926 000023B4 BA[6437]                	mov	dx,badsiz_pre
 26927 000023B7 BB[4237]                	mov	bx,crlfm
 26928 000023BA E8920F                  	call	prnerr
 26929                                  
 26930 000023BD E92AFC                  	jmp	coff
 26931                                  
 26932                                  ;------------------------------------------------------------------------------
 26933                                  ; country command
 26934                                  ;      the syntax is:
 26935                                  ;	country=country id {,codepage {,path}}
 26936                                  ;	country=country id {,,path}	:default codepage id in dos
 26937                                  ;------------------------------------------------------------------------------
 26938                                  
 26939                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26940                                  	; (SYSINIT:2663h)
 26941                                  tryq:
 26942 000023C0 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26943 000023C3 7403                    	je	short tryq_cont
 26944                                  skip_it3:
 26945 000023C5 E90801                  	jmp	tryf
 26946                                  tryq_cont:
 26947                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26948                                  ;;ifdef	MULTI_CONFIG
 26949                                  ;       call    query_user		; query the user if config_cmd
 26950                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26951                                  ;;endif
 26952                                  	; 14/12/2022
 26953                                  	; ds = cs
 26954                                  	; bx = 0
 26955                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26956                                  	;mov	word [cs:p_code_page],0
 26957 000023C8 881E[FA33]              	mov	[cntry_drv],bl ; 0
 26958 000023CC 891E[9F1D]              	mov	[p_code_page],bx ; 0
 26959                                  	
 26960 000023D0 BF[681D]                	mov	di,cntry_parms
 26961 000023D3 31C9                    	xor	cx,cx
 26962                                  	; 04/01/2023
 26963                                  	;mov	dx,cx
 26964                                  do52:
 26965 000023D5 E8F602                  	call	sysinit_parse
 26966 000023D8 730B                    	jnc	short if52		; parse error,check error code and
 26967                                  
 26968 000023DA E8E000                  	call	cntry_error		; show message and end the search loop.
 26969                                  	; 14/12/2022
 26970                                  	; ds = cs
 26971 000023DD C706[9D1D]FFFF          	mov	word [p_cntry_code],-1
 26972                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26973 000023E3 EB34                    	jmp	short sr52
 26974                                  if52:
 26975 000023E5 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26976 000023E8 742F                    	jz	short sr52		; then end the search loop
 26977                                  
 26978                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26979                                  	; 14/12/2022
 26980                                  	; ds = cs
 26981 000023EA 803E[3A1D]01            	cmp	byte [result_val],_$P_Number	
 26982                                  	;cmp	byte [cs:result_val],_$P_Number
 26983 000023EF 7512                    	jnz	short if56
 26984                                  
 26985                                  	;;mov	ax,[cs:rw_dword]
 26986                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26987                                  	; 14/12/2022
 26988 000023F1 A1[3E1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26989 000023F4 83F901                  	cmp	cx,1
 26990 000023F7 7505                    	jne	short if57
 26991                                  
 26992                                  	;mov	[cs:p_cntry_code],ax
 26993                                  	; 14/12/2022
 26994 000023F9 A3[9D1D]                	mov	[p_cntry_code],ax
 26995                                  
 26996                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26997                                  	;jmp	short en57
 26998                                  	; 12/12/2022
 26999                                  	;jmp	short en56
 27000 000023FC EBD7                    	jmp	short do52
 27001                                  
 27002                                  if57:
 27003                                  	;mov	[cs:p_code_page],ax
 27004                                  	; 14/12/2022
 27005                                  	; ds = cs
 27006 000023FE A3[9F1D]                	mov	[p_code_page],ax
 27007                                  en57:
 27008                                  	;jmp	short en56		; path entered
 27009                                  	; 12/12/2022
 27010 00002401 EBD2                    	jmp	short do52
 27011                                  
 27012                                  if56:
 27013 00002403 1E                      	push	ds
 27014 00002404 06                      	push	es
 27015 00002405 56                      	push	si
 27016 00002406 57                      	push	di
 27017                                  
 27018 00002407 0E                      	push	cs
 27019 00002408 07                      	pop	es
 27020                                  
 27021                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27022                                  	; 14/12/2022
 27023 00002409 C536[3E1D]              	lds	si,[rv_dword]
 27024 0000240D BF[FA33]                	mov	di,cntry_drv
 27025 00002410 E82A0F                  	call	move_asciiz
 27026                                  
 27027 00002413 5F                      	pop	di
 27028 00002414 5E                      	pop	si
 27029 00002415 07                      	pop	es
 27030 00002416 1F                      	pop	ds
 27031                                  
 27032                                  en56:
 27033 00002417 EBBC                    	jmp	short do52
 27034                                  
 27035                                  sr52:
 27036                                  	; 14/12/2022
 27037                                  	; ds = cs
 27038 00002419 833E[9D1D]FF            	cmp	word [p_cntry_code],-1
 27039                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27040 0000241E 7509                    	jne	short tryq_open
 27041 00002420 E9C7FB                  	jmp	coff
 27042                                  
 27043                                  tryqbad:				;"invalid country code or code page"
 27044 00002423 F9                      	stc
 27045 00002424 BA[AB37]                	mov     dx,badcountry
 27046 00002427 EB79                    	jmp     tryqchkerr
 27047                                  
 27048                                  tryq_open:
 27049                                  	; 14/12/2022
 27050                                  	; ds = cs
 27051 00002429 803E[FA33]00            	cmp	byte [cntry_drv],0
 27052                                  	;cmp	byte [cs:cntry_drv],0
 27053 0000242E 7405                    	je	short tryq_def
 27054 00002430 BA[FA33]                	mov	dx,cntry_drv
 27055 00002433 EB03                    	jmp	short tryq_openit
 27056                                  
 27057                                  tryq_def:
 27058 00002435 BA[FC33]                	mov	dx,cntry_root
 27059                                  tryq_openit:
 27060 00002438 B8003D                  	mov	ax,3D00h		;open a file
 27061 0000243B F9                      	stc
 27062 0000243C CD21                    	int	21h
 27063 0000243E 7242                    	jc	short tryqfilebad	;open failure
 27064                                  
 27065                                  	; 14/12/2022
 27066                                  	; ds = cs
 27067 00002440 A3[D803]                	mov	[cntryfilehandle],ax
 27068                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27069 00002443 89C3                    	mov	bx,ax
 27070 00002445 A1[9D1D]                	mov	ax,[p_cntry_code]
 27071 00002448 8B16[9F1D]              	mov	dx,[p_code_page]
 27072                                  	;mov	ax,[cs:p_cntry_code]
 27073                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27074                                  	;mov	cx,[cs:memhi]
 27075 0000244C 8B0E[E003]              	mov	cx,[memhi]
 27076 00002450 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27077                                  					; M023
 27078                                  	; 14/12/2022
 27079                                  	; ds = cs
 27080 00002454 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27081                                  	;cmp	cx,[cs:ALLOCLIM]
 27082 00002458 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27083                                  
 27084 0000245A BE[FA33]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27085 0000245D 803C00                  	cmp	byte [si],0 		;default path?
 27086 00002460 7502                    	jne	short tryq_set_for_dos
 27087                                  
 27088 00002462 46                      	inc	si
 27089 00002463 46                      	inc	si			;ds:si -> cntry_root
 27090                                  
 27091                                  tryq_set_for_dos:
 27092                                  	; 14/12/2022
 27093                                  	; ds = cs
 27094 00002464 C43E[7702]              	les	di,[sysi_country]
 27095                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27096 00002468 57                      	push	di			;save di
 27097                                  	;add	di,8
 27098 00002469 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27099 0000246C E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 27100 0000246F 5F                      	pop	di			;es:di -> country info tab again.
 27101                                  
 27102                                  	; 14/12/2022	
 27103 00002470 8B0E[E003]              	mov	cx,[memhi]
 27104                                  	;mov	cx,[cs:memhi]
 27105 00002474 8ED9                    	mov	ds,cx
 27106 00002476 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27107 00002478 E8060D                  	call	setdoscountryinfo	;now do the job!!!
 27108                                  	; ds <> cs ; 14/12/2022
 27109 0000247B 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27110                                  
 27111 0000247D 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27112 00002480 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27113                                  
 27114                                  tryqfilebad:
 27115 00002482 0E                      	push	cs
 27116 00002483 07                      	pop	es
 27117 00002484 2E803E[FA33]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27118 0000248A 7405                    	je	short tryqdefbad
 27119                                  
 27120 0000248C BE[FA33]                	mov	si,cntry_drv
 27121 0000248F EB03                    	jmp	short tryqbadload
 27122                                  
 27123                                  tryqdefbad:				;default file has been used.
 27124 00002491 BE[FC33]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27125                                  tryqbadload:
 27126 00002494 E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 27127                                  	;mov	cx,[cs:CONFBOT]
 27128                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27129                                  	;mov	cx,[cs:top_of_cdss]
 27130                                  	; 11/12/2022
 27131                                  	; ds = cs
 27132 00002497 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27133 0000249B 8EC1                    	mov	es,cx			;restore es -> confbot.
 27134 0000249D EB13                    	jmp	short coffj4
 27135                                  
 27136                                  tryqmemory:
 27137 0000249F BA[EE37]                	mov	dx,insufmemory
 27138                                  tryqchkerr:
 27139                                  	;mov	cx,[cs:CONFBOT]
 27140                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27141                                  	;mov	cx,[cs:top_of_cdss]
 27142                                  	; 12/12/2022
 27143 000024A2 0E                      	push	cs
 27144 000024A3 1F                      	pop	ds
 27145 000024A4 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27146 000024A8 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27147                                  	;push	cs
 27148                                  	;pop	ds			;restore ds to sysinit_seg
 27149 000024AA 7306                    	jnc	short coffj4		;if no error,then exit
 27150                                  
 27151 000024AC E8C20E                  	call	print			;else show error message
 27152 000024AF E88A02                  	call	error_line
 27153                                  coffj4:
 27154                                  	;mov	bx,[cs:cntryfilehandle]
 27155                                  	; 11/12/2022
 27156                                  	; ds = cs
 27157 000024B2 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27158 000024B6 B43E                    	mov	ah,3Eh
 27159 000024B8 CD21                    	int	21h			;close a file. don't care even if it fails.
 27160 000024BA E92DFB                  	jmp	coff
 27161                                  
 27162                                  ;--------------------------------------------
 27163                                  
 27164                                  cntry_error:
 27165                                  
 27166                                  ;function: show "invalid country code or code page" messages,or
 27167                                  ;		"error in country command" depending on the error code
 27168                                  ;		in ax returned by sysparse;
 27169                                  ;in:	ax - error code
 27170                                  ;	ds - sysinitseg
 27171                                  ;	es - confbot
 27172                                  ;out:	show message.  dx destroyed.
 27173                                  
 27174 000024BD 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27175 000024C0 7505                    	jne	short if64
 27176 000024C2 BA[AB37]                	mov	dx,badcountry		;"invalid country code or code page"
 27177 000024C5 EB03                    	jmp	short en64
 27178                                  if64:
 27179 000024C7 BA[D137]                	mov	dx,badcountrycom	;"error in contry command"
 27180                                  en64:
 27181 000024CA E8A40E                  	call	print
 27182                                  	;call	error_line
 27183                                  	;retn
 27184                                  	; 11/12/2022
 27185 000024CD E96C02                  	jmp	error_line
 27186                                  
 27187                                  ;------------------------------------------------------------------------------
 27188                                  ; files command
 27189                                  ;------------------------------------------------------------------------------
 27190                                  
 27191                                  ;******************************************************************************
 27192                                  ; function: parse the parameters of files= command.			      *
 27193                                  ;									      *
 27194                                  ; input :								      *
 27195                                  ;	es:si -> parameters in command line.				      *
 27196                                  ; output:								      *
 27197                                  ;	variable files set.						      *
 27198                                  ;									      *
 27199                                  ; subroutines to be called:						      *
 27200                                  ;	sysinit_parse							      *
 27201                                  ; logic:								      *
 27202                                  ; {									      *
 27203                                  ;	set di points to files_parms;					      *
 27204                                  ;	set dx,cx to 0; 						      *
 27205                                  ;	while (end of command line)					      *
 27206                                  ;	{ sysinit_parse;						      *
 27207                                  ;	  if (no error) then						      *
 27208                                  ;	     files = result_val._$P_picked_val				      *
 27209                                  ;	  else								      *
 27210                                  ;	     error exit;						      *
 27211                                  ;	};								      *
 27212                                  ; };									      *
 27213                                  ;									      *
 27214                                  ;******************************************************************************
 27215                                  
 27216                                  tryf:
 27217 000024D0 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27218 000024D3 7523                    	jne	short tryl
 27219                                  
 27220                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27221                                  ;;ifdef	MULTI_CONFIG
 27222                                  ;       call    query_user              ; query the user if config_cmd
 27223                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27224                                  ;;endif
 27225                                  
 27226                                  	; 14/12/2022
 27227                                  	; ds = cs
 27228                                  
 27229 000024D5 BF[A11D]                	mov	di,files_parms
 27230 000024D8 31C9                    	xor	cx,cx
 27231                                  	; 04/01/2023
 27232                                  	;mov	dx,cx
 27233                                  do67:
 27234 000024DA E8F101                  	call	sysinit_parse
 27235 000024DD 7303                    	jnc	short if67		; parse error
 27236                                  	;call	badparm_p		;  and show messages and end the search loop.
 27237                                  	;jmp	short sr67
 27238                                  	; 04/01/2023
 27239 000024DF E96A01                  	jmp	badparm_p_coff
 27240                                  if67:
 27241 000024E2 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27242 000024E5 7408                    	je	short en67		; then end the $endloop
 27243                                  
 27244                                  	; 14/12/2022
 27245                                  	; ds = cs
 27246                                  	;;mov	al,[cs:rv_dword]
 27247                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27248                                  	;mov	[cs:p_files],al		; save it temporarily
 27249                                  	;mov	al,[rv_dword]
 27250 000024E7 A0[3E1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27251 000024EA A2[C01D]                	mov	[p_files],al
 27252                                  
 27253 000024ED EBEB                    	jmp	short do67
 27254                                  en67:
 27255                                  	; 14/12/2022
 27256                                  	; ds = cs
 27257 000024EF A0[C01D]                	mov	al,[p_files]
 27258 000024F2 A2[9D02]                	mov	[FILES],al	
 27259                                  	;mov	al,[cs:p_files]
 27260                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27261                                  sr67:
 27262 000024F5 E9F2FA                  	jmp	coff
 27263                                  
 27264                                  ; 04/04/2019 - Retro DOS v4.0
 27265                                  
 27266                                  ;------------------------------------------------------------------------------
 27267                                  ; lastdrive command
 27268                                  ;------------------------------------------------------------------------------
 27269                                  
 27270                                  ;******************************************************************************
 27271                                  ; function: parse the parameters of lastdrive= command. 		      *
 27272                                  ;									      *
 27273                                  ; input :								      *
 27274                                  ;	es:si -> parameters in command line.				      *
 27275                                  ; output:								      *
 27276                                  ;	set the variable num_cds.					      *
 27277                                  ;									      *
 27278                                  ; subroutines to be called:						      *
 27279                                  ;	sysinit_parse							      *
 27280                                  ; logic:								      *
 27281                                  ; {									      *
 27282                                  ;	set di points to ldrv_parms;					      *
 27283                                  ;	set dx,cx to 0; 						      *
 27284                                  ;	while (end of command line)					      *
 27285                                  ;	{ sysinit_parse;						      *
 27286                                  ;	  if (no error) then						      *
 27287                                  ;	     set num_cds to the returned value; 			      *
 27288                                  ;	  else	/*error exit*/						      *
 27289                                  ;	     error exit;						      *
 27290                                  ;	};								      *
 27291                                  ; };									      *
 27292                                  ;									      *
 27293                                  ;******************************************************************************
 27294                                  
 27295                                  tryl:
 27296 000024F8 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27297 000024FB 7523                    	jne	short tryp
 27298                                  
 27299                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27300                                  ;;ifdef	MULTI_CONFIG
 27301                                  ;       call    query_user      ; query the user if config_cmd
 27302                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27303                                  ;;endif
 27304                                  	; 14/12/2022
 27305                                  	; ds = cs
 27306                                  
 27307 000024FD BF[F81D]                	mov	di,ldrv_parms
 27308 00002500 31C9                    	xor	cx,cx
 27309                                  	; 04/01/2023
 27310                                  	;mov	dx,cx
 27311                                  do73:
 27312 00002502 E8C901                  	call	sysinit_parse
 27313 00002505 7303                    	jnc	short if73	; parse error
 27314                                  	;call	badparm_p	;  and show messages and end the search loop.
 27315                                  	;jmp	short sr73
 27316                                  	; 04/01/2023
 27317 00002507 E94201                  	jmp	badparm_p_coff
 27318                                  if73:
 27319 0000250A 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27320 0000250D 7408                    	je	short en73	; then end the $endloop
 27321                                  
 27322                                  	; 14/12/2022
 27323                                  	; ds = cs
 27324                                  	;;mov	al,[cs:rv_dword]
 27325                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27326                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27327                                  
 27328                                  	;mov	al,[rv_dword]
 27329 0000250F A0[3E1D]                	mov	al,[rv_byte]
 27330 00002512 A2[0C1E]                	mov	[p_ldrv],al
 27331                                  
 27332 00002515 EBEB                    	jmp	short do73
 27333                                  en73:
 27334                                  	; 14/12/2022
 27335                                  	; ds = cs
 27336 00002517 A0[0C1E]                	mov	al,[p_ldrv]
 27337 0000251A A2[A002]                	mov	[NUM_CDS],al
 27338                                  	;mov	al,[cs:p_ldrv]
 27339                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27340                                  sr73:
 27341 0000251D E9CAFA                  	jmp	coff
 27342                                  
 27343                                  ;--------------------------------------------------------------------------
 27344                                  ; setting drive parameters
 27345                                  ;--------------------------------------------------------------------------
 27346                                  
 27347                                  tryp:
 27348 00002520 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27349 00002523 7511                    	jne	short tryk
 27350                                  
 27351                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27352                                  ;;ifdef	MULTI_CONFIG
 27353                                  ;       call    query_user      ; query the user if config_cmd
 27354                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27355                                  ;;endif
 27356                                  
 27357 00002525 E86908                  	call	parseline
 27358 00002528 7209                    	jc	short trypbad
 27359 0000252A E88907                  	call	setparms
 27360 0000252D E8BF07                  	call	diddleback
 27361                                  
 27362                                  ; No error check here, because setparms and diddleback have no error 
 27363                                  ; returns, and setparms as coded now can return with carry set. 
 27364                                  ;       jc	short trypbad
 27365                                  
 27366                                  	; 12/12/2022
 27367                                  	; cf = 0
 27368                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27369                                  	;jc	short trypbad
 27370                                  	
 27371 00002530 E9B7FA                  	jmp	coff
 27372                                  trypbad:
 27373 00002533 E9BB01                  	jmp	badop
 27374                                  
 27375                                  ;--------------------------------------------------------------------------
 27376                                  ; setting internal stack parameters
 27377                                  ; stacks=m,n where
 27378                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27379                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27380                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27381                                  ;	any combinations that are not within the specified limits will
 27382                                  ;	result in "unrecognized command" error.
 27383                                  ;--------------------------------------------------------------------------
 27384                                  
 27385                                  ;**************************************************************************
 27386                                  ;									  *
 27387                                  ; function: parse the parameters of stacks= command.			  *
 27388                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27389                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27390                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27391                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27392                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27393                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27394                                  ;	    (or if "0,0" pair has been entered.)			  *
 27395                                  ; input :								  *
 27396                                  ;	es:si -> parameters in command line.				  *
 27397                                  ; output:								  *
 27398                                  ;	set the variables stack_count,stack_size.			  *
 27399                                  ;									  *
 27400                                  ; subroutines to be called:						  *
 27401                                  ;	sysinit_parse							  *
 27402                                  ; logic:								  *
 27403                                  ; {									  *
 27404                                  ;	set di points to stks_parms;					  *
 27405                                  ;	set dx,cx to 0; 						  *
 27406                                  ;	while (end of command line)					  *
 27407                                  ;	{ sysinit_parse;						  *
 27408                                  ;	  if (no error) then						  *
 27409                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27410                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27411                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27412                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27413                                  ;	     }								  *
 27414                                  ;	  else	/*error exit*/						  *
 27415                                  ;	     error exit;						  *
 27416                                  ;	};								  *
 27417                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27418                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27419                                  ;	 else error_exit;						  *
 27420                                  ; };									  *
 27421                                  ;**************************************************************************
 27422                                  
 27423                                  tryk:
 27424                                          ;if      stacksw
 27425                                  
 27426 00002536 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27427 00002539 7402                    	je	short do_tryk
 27428                                  skip_it4:
 27429 0000253B EB74                    	jmp	short trys	; 15/12/2022
 27430                                  do_tryk:
 27431                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27432                                  ;;ifdef	MULTI_CONFIG
 27433                                  ;       call    query_user              ; query the user if config_cmd
 27434                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27435                                  ;;endif
 27436                                  	; 14/12/2022
 27437                                  	; ds = cs
 27438                                  
 27439 0000253D BF[0D1E]                	mov	di,stks_parms
 27440 00002540 31C9                    	xor	cx,cx
 27441                                  	; 04/01/2023
 27442                                  	;mov	dx,cx
 27443                                  do79:
 27444 00002542 E88901                  	call	sysinit_parse
 27445 00002545 730B                    	jnc	short if79		; parse error
 27446                                  
 27447 00002547 BA[5D38]                	mov	dx,badstack		; "invalid stack parameter"
 27448 0000254A E8240E                  	call	print			;  and show messages and end the search loop.
 27449 0000254D E8EC01                  	call	error_line
 27450                                  	;jmp	sr79
 27451                                  	; 11/12/2022
 27452 00002550 EB39                    	jmp	short sr79
 27453                                  if79:
 27454 00002552 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27455 00002555 7412                    	je	short en79		; then end the $endloop
 27456                                  
 27457                                  	; 14/12/2022
 27458                                  	; ds = cs
 27459                                  
 27460                                  	;;mov	ax,[cs:rv_dword]
 27461                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27462                                  	;mov	ax,[rv_dword]
 27463 00002557 A1[3E1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27464                                  
 27465 0000255A 83F901                  	cmp	cx,1
 27466 0000255D 7505                    	jne	short if83
 27467                                  
 27468                                  	; 14/12/2022
 27469                                  	;mov	[cs:p_stack_count],ax
 27470                                  	;jmp	short en83
 27471 0000255F A3[421E]                	mov	[p_stack_count],ax
 27472 00002562 EBDE                    	jmp	short do79
 27473                                  if83:
 27474                                  	; 14/12/2022
 27475                                  	;mov	[cs:p_stack_size],ax
 27476 00002564 A3[441E]                	mov	[p_stack_size],ax
 27477                                  en83:
 27478 00002567 EBD9                    	jmp	short do79
 27479                                  en79:
 27480                                  	; 14/12/2022
 27481                                  	; ds = cs
 27482 00002569 A1[421E]                	mov	ax,[p_stack_count]
 27483 0000256C 09C0                    	or	ax,ax
 27484 0000256E 741E                    	jz	short if87		
 27485                                  
 27486                                  	; 14/12/2022
 27487                                  	;cmp	word [p_stack_count],0
 27488                                  	;;cmp	word [cs:p_stack_count],0
 27489                                  	;je	short if87
 27490                                  
 27491                                  	; 14/12/2022
 27492 00002570 83F808                  	cmp	ax, mincount ; 8
 27493                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27494                                  	; 15/12/2022
 27495 00002573 721F                    	jb	short en87
 27496 00002575 833E[441E]20            	cmp	word [p_stack_size],minsize ; 32
 27497                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27498                                  	; 15/12/2022
 27499 0000257A 7218                    	jb	short en87
 27500                                  if94:
 27501                                  	; 14/12/2022
 27502                                  	; ds = cs
 27503                                  	; ax = [p_stack_count]
 27504                                  	;mov	ax,[p_stack_count]
 27505                                  	;;mov	ax,[cs:p_stack_count]
 27506 0000257C A3[8A02]                	mov	[stack_count],ax
 27507                                  	;mov	[cs:stack_count],ax
 27508                                  	;mov	ax,[cs:p_stack_size]
 27509 0000257F A1[441E]                	mov	ax,[p_stack_size]
 27510                                  	;mov	[cs:stack_size],ax
 27511 00002582 A3[8C02]                	mov	[stack_size],ax
 27512                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27513 00002585 C706[8E02]FFFF          	mov	word [stack_addr],-1
 27514                                  sr79:
 27515 0000258B E95CFA                  	jmp	coff
 27516                                  
 27517                                  if87:
 27518                                  	; 14/12/2022
 27519 0000258E 3906[441E]              	cmp	[p_stack_size],ax ; 0
 27520 00002592 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27521                                  	;cmp	word [cs:p_stack_size],0
 27522                                  	;je	short if94
 27523                                  en87:
 27524                                  	; 15/12/2022
 27525                                  	; ([p_stack_count] is invalid, use default values)
 27526                                  	; 14/12/2022
 27527                                  	; ds = cs
 27528 00002594 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27529 0000259A C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27530 000025A0 C706[8E02]0000          	mov	word [stack_addr],0
 27531                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27532                                  	;				; reset to default value.
 27533                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27534                                  	;mov	word [cs:stack_addr],0
 27535                                  
 27536 000025A6 BA[5D38]                	mov	dx,badstack
 27537 000025A9 E8C50D                  	call	print
 27538 000025AC E88D01                  	call	error_line
 27539 000025AF EBDA                    	jmp	short sr79
 27540                                  
 27541                                  ; 15/12/2022
 27542                                  %if 0
 27543                                  	mov	di,stks_parms
 27544                                  	xor	cx,cx
 27545                                  	; 04/01/2023
 27546                                  	;mov	dx,cx
 27547                                  do79:
 27548                                  	call	sysinit_parse
 27549                                  	jnc	short if79		; parse error
 27550                                  
 27551                                  	mov	dx,badstack		; "invalid stack parameter"
 27552                                  	call	print			;  and show messages and end the search loop.
 27553                                  	call	error_line
 27554                                  	;jmp	sr79
 27555                                  	; 11/12/2022
 27556                                  	jmp	short sr79
 27557                                  if79:
 27558                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27559                                  	je	short en79		; then end the $endloop
 27560                                  
 27561                                  	;mov	ax,[cs:rv_dword]
 27562                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27563                                  	cmp	cx,1
 27564                                  	jne	short if83
 27565                                  
 27566                                  	mov	[cs:p_stack_count],ax
 27567                                  	jmp	short en83
 27568                                  if83:
 27569                                  	mov	[cs:p_stack_size],ax
 27570                                  en83:
 27571                                  	jmp	short do79
 27572                                  en79:
 27573                                  	cmp	word [cs:p_stack_count],0
 27574                                  	je	short if87
 27575                                  
 27576                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27577                                  	jb	short ll88
 27578                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27579                                  	jnb	short if88
 27580                                  ll88:
 27581                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27582                                  if88:
 27583                                  	jmp	short en87
 27584                                  
 27585                                  	; 11/12/2022
 27586                                  if94:
 27587                                  	mov	ax,[cs:p_stack_count]
 27588                                  	mov	[cs:stack_count],ax
 27589                                  	mov	ax,[cs:p_stack_size]
 27590                                  	mov	[cs:stack_size],ax
 27591                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27592                                  sr79:
 27593                                  	jmp	coff
 27594                                  
 27595                                  if87:
 27596                                  	cmp	word [cs:p_stack_size],0
 27597                                  	je	short en87
 27598                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27599                                  en87:
 27600                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27601                                  	jne	short if94
 27602                                  
 27603                                  	mov	word [cs:stack_count],defaultcount ; 9
 27604                                  					; reset to default value.
 27605                                  	mov	word [cs:stack_size],defaultsize ; 128
 27606                                  	mov	word [cs:stack_addr],0
 27607                                  
 27608                                  	mov	dx,badstack
 27609                                  	call	print
 27610                                  	call	error_line
 27611                                  	jmp	short sr79
 27612                                  
 27613                                  %endif
 27614                                  
 27615                                  ; 11/12/2022
 27616                                  %if 0 
 27617                                  
 27618                                  if94:
 27619                                  	mov	ax,[cs:p_stack_count]
 27620                                  	mov	[cs:stack_count],ax
 27621                                  	mov	ax,[cs:p_stack_size]
 27622                                  	mov	[cs:stack_size],ax
 27623                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27624                                  sr79:
 27625                                  	jmp	coff
 27626                                  
 27627                                  %endif
 27628                                  
 27629                                  	;endif
 27630                                  
 27631                                  ;------------------------------------------------------------------------
 27632                                  ; shell command
 27633                                  ;------------------------------------------------------------------------
 27634                                  
 27635                                  trys:
 27636 000025B1 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27637 000025B4 753C                    	jne	short tryx
 27638                                  
 27639                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27640                                  ;;ifdef	MULTI_CONFIG
 27641                                  ;       call    query_user              ; query the user if config_cmd
 27642                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27643                                  ;       mov	byte [cs:newcmd],1
 27644                                  ;;endif
 27645                                  
 27646                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27647                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27648                                  	;mov	byte [cs:command_line+1],0
 27649                                  	; 15/12/2022
 27650                                  	; ds = cs
 27651 000025B6 C606[AA02]00            	mov	byte [command_line+1],0
 27652                                  
 27653 000025BB BF[4834]                        mov     di,commnd+1		; we already have the first char
 27654 000025BE 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27655                                  storeshell:
 27656 000025C1 E86101                  	call	getchr
 27657 000025C4 08C0                            or      al,al                   ; this is the normal case: "organize"
 27658 000025C6 7419                            jz	short getshparms	; put a ZERO right after the filename
 27659                                  
 27660 000025C8 3C20                            cmp     al," "                  ; this may happen if there are no args
 27661 000025CA 7205                            jb	short endofshell	; I suppose...
 27662 000025CC 8805                    	mov	[di],al
 27663 000025CE 47                      	inc	di
 27664                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27665                                          ;jb	short storeshell	; commnd (the filename)
 27666                                          ;jmp	short endofshell
 27667                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27668 000025CF EBF0                    	jmp	short storeshell
 27669                                  
 27670                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27671                                  ;getshparms:
 27672                                  ;	mov     byte [di],0		; zero-terminate the filename
 27673                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27674                                  ;
 27675                                  ;parmloop:
 27676                                  ;	call	getchr
 27677                                  ;	cmp	al," "
 27678                                  ;	jb	short endofparms
 27679                                  ;	mov	[di],al
 27680                                  ;	inc	di
 27681                                  ;	cmp     di,command_line+126
 27682                                  ;	jb	short parmloop
 27683                                  ;endofparms:
 27684                                  ;	mov     cx,di
 27685                                  ;	sub     cx,command_line+1
 27686                                  ;	mov     [cs:command_line],cl
 27687                                  ;
 27688                                  ;endofshell:
 27689                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27690                                  ;					; the command-line as the case may be)
 27691                                  ;skipline:
 27692                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27693                                  ;       je	short endofline		; the line: watch for ever-present LF
 27694                                  ;call	getchr
 27695                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27696                                  ;
 27697                                  ;endofline:
 27698                                  ;       jmp     conflp
 27699                                  
 27700                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27701                                  endofshell:
 27702 000025D1 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27703                                  					; the command-line as the case may be)
 27704 000025D4 E84E01                  	call	getchr
 27705                                  skipline:
 27706 000025D7 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27707 000025D9 7403                    	je	short endofline		; the line: watch for ever-present LF
 27708 000025DB E84701                  	call	getchr
 27709                                  endofline:
 27710 000025DE E9E4F9                  	jmp     conflp
 27711                                  
 27712                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27713                                  getshparms:
 27714                                  	; 18/12/2022
 27715                                  	; al = 0
 27716 000025E1 8805                    	mov	[di],al ; 0
 27717                                  	;mov	byte [di],0		; zero-terminate the filename
 27718 000025E3 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27719                                  parmloop:
 27720 000025E6 E83C01                  	call	getchr
 27721 000025E9 3C20                    	cmp	al," " ; 20h
 27722 000025EB 72E4                    	jb	short endofshell
 27723 000025ED 8805                    	mov	[di],al
 27724 000025EF 47                      	inc	di
 27725 000025F0 EBF4                    	jmp	short parmloop
 27726                                  
 27727                                  ;------------------------------------------------------------------------
 27728                                  ; fcbs command
 27729                                  ;------------------------------------------------------------------------
 27730                                  
 27731                                  ;************************************************************************
 27732                                  ; function: parse the parameters of fcbs= command.			*
 27733                                  ;									*
 27734                                  ; input :								*
 27735                                  ;	es:si -> parameters in command line.				*
 27736                                  ; output:								*
 27737                                  ;	set the variables fcbs,keep.					*
 27738                                  ;									*
 27739                                  ; subroutines to be called:						*
 27740                                  ;	sysinit_parse							*
 27741                                  ; logic:								*
 27742                                  ; {									*
 27743                                  ;	set di points to fcbs_parms;					*
 27744                                  ;	set dx,cx to 0; 						*
 27745                                  ;	while (end of command line)					*
 27746                                  ;	{ sysparse;							*
 27747                                  ;	  if (no error) then						*
 27748                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27749                                  ;		   fcbs = result_val._$P_picked_val;			*
 27750                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27751                                  ;		   keep = result_val._$P_picked_val;			*
 27752                                  ;	     }								*
 27753                                  ;	  else	/*error exit*/						*
 27754                                  ;	     error exit;						*
 27755                                  ;	};								*
 27756                                  ; };									*
 27757                                  ;************************************************************************
 27758                                  
 27759                                  tryx:
 27760 000025F2 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27761                                          ;jne	short try1
 27762                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27763 000025F5 752F                    	jne	short tryy	; comment command
 27764                                  
 27765                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27766                                  ;;ifdef	MULTI_CONFIG
 27767                                  ;       call    query_user      ; query the user if config_cmd
 27768                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27769                                  ;;endif
 27770                                  
 27771 000025F7 BF[C11D]                	mov	di,fcbs_parms
 27772 000025FA 31C9                    	xor	cx,cx
 27773                                  	; 04/01/2023
 27774                                  	;mov	dx,cx
 27775                                  do98:
 27776 000025FC E8CF00                  	call	sysinit_parse
 27777                                          ; 04/01/2023
 27778                                  	;jnc	short if98	; parse error
 27779                                          ;call	badparm_p	;  and show messages and end the search loop.
 27780                                  	;jmp	short sr98
 27781                                  	;------------------------
 27782                                  	; 04/01/2023
 27783 000025FF 724B                    	jc	short badparm_p_coff
 27784                                  if98:
 27785 00002601 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27786 00002604 7412                    	je	short en98	; then end the $endloop
 27787                                  
 27788                                  	;;mov	al,[cs:rv_dword]
 27789                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27790                                  	; 15/12/2022
 27791                                  	; ds = cs
 27792 00002606 A0[3E1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27793 00002609 83F901                  	cmp	cx,1		; the first positional?
 27794 0000260C 7505                    	jne	short if102
 27795                                  	;mov	[cs:p_fcbs],al
 27796                                  	; 15/12/2022
 27797 0000260E A2[F61D]                	mov	[p_fcbs],al
 27798                                  	;jmp	short en102
 27799 00002611 EBE9                    	jmp	short do98
 27800                                  if102:
 27801                                  	;mov	[cs:p_keep],al
 27802                                  	; 15/12/2022
 27803 00002613 A2[F71D]                	mov	[p_keep],al
 27804                                  en102:
 27805 00002616 EBE4                    	jmp	short do98
 27806                                  en98:
 27807                                  	; 15/12/2022
 27808                                  	; ds = cs
 27809 00002618 A0[F61D]                	mov	al,[p_fcbs]
 27810 0000261B A2[9E02]                	mov	[FCBS],al
 27811 0000261E C606[9F02]00            	mov	byte [KEEP],0
 27812                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27813                                  	;mov	[cs:FCBS],al	 ; M017
 27814                                  	;mov	byte [cs:KEEP],0 ; M017
 27815                                  sr98:
 27816 00002623 E9C4F9                  	jmp	coff
 27817                                  
 27818                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27819                                  ;-------------------------------------------------------------------------
 27820                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27821                                  ;		line number
 27822                                  ;-------------------------------------------------------------------------
 27823                                  
 27824                                  tryy:
 27825 00002626 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27826 00002629 750B                    	jne	short try0
 27827                                  
 27828                                  donothing:
 27829                                  	; 15/12/2022
 27830                                  	; ds = cs
 27831 0000262B FF0E[D603]              	dec	word [chrptr]
 27832 0000262F FF06[D203]              	inc	word [count]
 27833                                  	; 02/11/2022
 27834                                  	;dec	word [cs:chrptr]
 27835                                  	;inc	word [cs:count]
 27836                                  
 27837 00002633 E9B4F9                  	jmp	coff
 27838                                  
 27839                                  ;------------------------------------------------------------------------
 27840                                  ; rem command
 27841                                  ;------------------------------------------------------------------------
 27842                                  
 27843                                  try0:				; do nothing with this line.
 27844 00002636 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27845 00002639 74F0                    	je	short donothing
 27846                                  
 27847                                  ; 07/04/2019 - Retro DOS v4.0
 27848                                  
 27849                                  ;-----------------------------------------------------------------------
 27850                                  ; switches command
 27851                                  ;-----------------------------------------------------------------------
 27852                                  
 27853                                  ;***********************************************************************
 27854                                  ;								       *
 27855                                  ; function: parse the option switches specified.		       *
 27856                                  ; note - this command is intended for the future use also.	       *
 27857                                  ; when we need to set system data flag,use this command.	       *
 27858                                  ;								       *
 27859                                  ; input :							       *
 27860                                  ;	es:si -> parameters in command line.			       *
 27861                                  ; output:							       *
 27862                                  ;	p_swit_k set if /k option chosen.			       *
 27863                                  ;								       *
 27864                                  ; subroutines to be called:					       *
 27865                                  ;	sysinit_parse						       *
 27866                                  ; logic:							       *
 27867                                  ; {								       *
 27868                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27869                                  ;	set dx,cx to 0; 					       *
 27870                                  ;	while (end of command line)				       *
 27871                                  ;	{ sysinit_parse;					       *
 27872                                  ;	  if (no error) then					       *
 27873                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27874                                  ;		    p_swit_k = 1				       *
 27875                                  ;	       endif						       *
 27876                                  ;	  else {show error message;error exit}			       *
 27877                                  ;	};							       *
 27878                                  ; };								       *
 27879                                  ;								       *
 27880                                  ;***********************************************************************
 27881                                  
 27882                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27883                                  
 27884                                  try1:
 27885 0000263B 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27886 0000263E 7402                    	je	short do_try1	; switches= command entered?
 27887                                  skip_it5:
 27888                                  	;jmp	tryv
 27889                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27890 00002640 EB7A                    	jmp	tryz
 27891                                  
 27892                                  do_try1:
 27893                                  
 27894                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27895                                  ;;ifdef	MULTI_CONFIG
 27896                                  ;       call    query_user      ; query the user if config_cmd
 27897                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27898                                  ;;endif
 27899                                  
 27900 00002642 BF[5B1E]                	mov	di,swit_parms
 27901 00002645 31C9                    	xor	cx,cx
 27902                                  	; 04/01/2023
 27903                                  	;mov	dx,cx
 27904                                  do110:
 27905 00002647 E88400                  	call	sysinit_parse
 27906 0000264A 7306                    	jnc	short if110	; parse error
 27907                                  	;call	badparm_p	;  and show messages and end the search loop.
 27908                                  	;jmp	short sr110
 27909                                  	; -----------------------
 27910                                  	; 04/01/2023
 27911                                  badparm_p_coff:
 27912 0000264C E8AE00                  	call	badparm_p
 27913 0000264F E998F9                  	jmp	coff
 27914                                  	;------------------------
 27915                                  if110:
 27916 00002652 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27917 00002655 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27918                                  
 27919                                  	; 15/12/2022
 27920                                  	; ds = cs
 27921                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27922                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27923 00002657 813E[3C1D][731E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27924 0000265D 7507                    	jne	short if115	;				;M059
 27925                                  	; 15/12/2022
 27926 0000265F C606[8E1E]01            	mov	byte [p_swit_k],1
 27927                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27928 00002664 EBE1                    	jmp	short do110
 27929                                  if115:	
 27930                                  	; 15/12/2022							;M059
 27931                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27932                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27933 00002666 813E[3C1D][7F1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27934 0000266C 7507                    	jne	short if116					;M059 M063
 27935                                  	; 15/12/2022
 27936 0000266E C606[8F1E]01            	mov	byte [p_swit_t],1
 27937                                  	;mov	byte [cs:p_swit_t],1				;M059
 27938 00002673 EBD2                    	jmp	short do110					;M059
 27939                                  if116:
 27940                                  	; 15/12/2022
 27941                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27942                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27943 00002675 813E[3C1D][8B1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27944 0000267B 75CA                    	jne	short do110					;M063
 27945                                  	; 15/12/2022
 27946 0000267D C606[901E]01            	mov	byte [p_swit_w],1
 27947                                  	;mov	byte [cs:p_swit_w],1				;M063
 27948 00002682 EBC3                    	jmp	short do110					;M063
 27949                                  en110:
 27950                                  	; 15/12/2022
 27951                                  	; ds = cs
 27952 00002684 803E[8E1E]01            	cmp	byte [p_swit_k],1
 27953                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27954 00002689 1E                      	push	ds
 27955                                  	;;mov	ax,Bios_Data
 27956                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27957                                  	; 21/10/2022
 27958 0000268A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27959 0000268D 8ED8                    	mov	ds,ax
 27960 0000268F 750A                    	jne	short if117
 27961 00002691 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27962 00002696 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27963                                  if117:
 27964                                  	; 15/12/2022
 27965                                  	; ds <> cs
 27966 0000269B 2EA0[8F1E]              	mov	al,[cs:p_swit_t]				;M059
 27967 0000269F A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27968                                  
 27969 000026A2 2E803E[901E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27970 000026A8 740E                    	je	short skip_dos_flag				;M063
 27971 000026AA 06                      	push	es
 27972 000026AB 53                      	push	bx
 27973 000026AC B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27974 000026AE CD21                    	int	21h						;M063
 27975                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27976                                  			; Return: ES:BX -> DOS list of lists
 27977                                  	;or	bytes [es:86h],2
 27978 000026B0 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27979 000026B6 5B                      	pop	bx
 27980 000026B7 07                      	pop	es
 27981                                  skip_dos_flag:							;M063
 27982 000026B8 1F                      	pop	ds
 27983                                  sr110:
 27984 000026B9 E92EF9                  	jmp	coff
 27985                                  
 27986                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27987                                  ;
 27988                                  ;tryv:
 27989                                  ;
 27990                                  ;;ifdef	MULTI_CONFIG
 27991                                  ;;------------------------------------------------------------------------
 27992                                  ;; set command (as in "set var=value<cr/lf>")
 27993                                  ;;------------------------------------------------------------------------
 27994                                  ;
 27995                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27996                                  ;       jne	short tryn
 27997                                  ;       call    query_user      ; query the user if config_cmd
 27998                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27999                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28000                                  ;       jnc	short sr110	; no error
 28001                                  ;err:    
 28002                                  ;	call    error_line      ; whoops, display error in line XXX
 28003                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28004                                  ;
 28005                                  ;;------------------------------------------------------------------------
 28006                                  ;; numlock command (as in "numlock=on|off")
 28007                                  ;;------------------------------------------------------------------------
 28008                                  ;tryn:
 28009                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28010                                  ;       jne	short tryy
 28011                                  ;       call    query_user      ; query thye user if config_cmd
 28012                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28013                                  ;       call    set_numlock
 28014                                  ;       jc	short err
 28015                                  ;       jmp	short sr110	; all done
 28016                                  ;
 28017                                  ;;endif	;MULTI_CONFIG
 28018                                  
 28019                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28020                                  ;;-------------------------------------------------------------------------
 28021                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28022                                  ;;		line number
 28023                                  ;;-------------------------------------------------------------------------
 28024                                  ;
 28025                                  ;tryy:
 28026                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28027                                  ;	jne	short try0
 28028                                  ;donothing:
 28029                                  ;	dec	word [chrptr]
 28030                                  ;	inc	word [count]
 28031                                  ;	jmp	coff
 28032                                  ;
 28033                                  ;;------------------------------------------------------------------------
 28034                                  ;; rem command
 28035                                  ;;------------------------------------------------------------------------
 28036                                  ;
 28037                                  ;try0:				;do nothing with this line.
 28038                                  ;	cmp     ah,CONFIG_REM ; '0'
 28039                                  ;	je	short donothing
 28040                                  
 28041                                  ; 30/10/2022
 28042                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28043                                  
 28044                                  ;------------------------------------------------------------------------
 28045                                  ; bogus command
 28046                                  ;------------------------------------------------------------------------
 28047                                  
 28048                                  tryz:
 28049 000026BC 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28050                                  	;je	short donothing
 28051                                  	; 02/11/2022
 28052 000026BF 740A                    	je	short tryz_donothing
 28053                                  
 28054 000026C1 FF0E[D603]              	dec	word [chrptr]
 28055 000026C5 FF06[D203]              	inc	word [count]
 28056 000026C9 EB26                    	jmp	short badop
 28057                                  
 28058                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28059                                  tryz_donothing:
 28060 000026CB E95DFF                  	jmp	donothing
 28061                                  
 28062                                  ; 07/04/2019 - Retro DOS v4.0
 28063                                  
 28064                                  ;------------------------------------------------------------------------------
 28065                                  
 28066                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28067                                  ;
 28068                                  ;
 28069                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28070                                  ;;
 28071                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28072                                  ;
 28073                                  ;CheckProtmanArena:
 28074                                  ;	push	es
 28075                                  ;	mov	ax,[cs:area]	; get our arena header
 28076                                  ;	dec	ax
 28077                                  ;	mov	es,ax
 28078                                  ;	add	ax,[es:3]	; find end of arena
 28079                                  ;	inc	ax
 28080                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28081                                  ;	ja	short CheckProtmanDone
 28082                                  ;
 28083                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28084                                  ;CheckProtmanDone:
 28085                                  ;	pop	es
 28086                                  ;	retn
 28087                                  
 28088                                  ;------------------------------------------------------------------------------
 28089                                  
 28090                                  sysinit_parse:
 28091                                  
 28092                                  ;------------------------------------------------------------------------------
 28093                                  ;set up registers for sysparse
 28094                                  ;in)	es:si -> command line in confbot
 28095                                  ;	di -> offset of the parse control definition.
 28096                                  ;
 28097                                  ;out)	calls sysparse.
 28098                                  ;	carry will set if parse error.
 28099                                  ;	*** the caller should check the eol condition by looking at ax
 28100                                  ;	*** after each call.
 28101                                  ;	*** if no parameters are found,then ax will contain a error code.
 28102                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28103                                  ;	***  the caller should use cs:@ instead of es:@.
 28104                                  ;	cx register should be set to 0 at the first time the caller calls this
 28105                                  ;	 procedure.
 28106                                  ;	ax - exit code
 28107                                  ;	bl - terminated delimeter code
 28108                                  ;	cx - new positional ordinal
 28109                                  ;	si - set to pase scanned operand
 28110                                  ;	dx - selected result buffer
 28111                                  ;------------------------------------------------------------------------------
 28112                                  
 28113                                  	; 24/10/2022
 28114 000026CE 06                      	push	es			;save es,ds
 28115 000026CF 1E                      	push	ds
 28116                                  
 28117 000026D0 06                      	push	es
 28118 000026D1 1F                      	pop	ds			;now ds:si -> command line
 28119                                  
 28120 000026D2 0E                      	push	cs
 28121 000026D3 07                      	pop	es			;now es:di -> control definition
 28122                                  
 28123 000026D4 2E8C1E[2714]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28124 000026D9 2E8936[2514]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28125                                  	;mov	dx,0
 28126                                  	; 04/01/2023
 28127 000026DE 29D2                    	sub	dx,dx ; 0
 28128 000026E0 E8ECED                  	call	SysParse
 28129 000026E3 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28130                                  
 28131                                  ;**cas note:  when zero true after cmp, carry clear
 28132                                  
 28133                                  	;je	short ll4
 28134                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28135                                  	; 12/12/2022
 28136 000026E6 7406                    	je	short en4 ; cf=0
 28137 000026E8 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28138                                  	;jne	short if4
 28139                                  	; 12/12/2022
 28140 000026EB 7401                    	je	short en4 ; cf=0
 28141                                  
 28142                                  ; 12/12/2022
 28143                                  ;ll4:
 28144                                  ;	; 12/12/2022
 28145                                  ;	; cf=0
 28146                                  ;	;clc
 28147                                  ;	jmp	short en4
 28148                                  
 28149                                  if4:
 28150                                  	; 24/10/2022
 28151 000026ED F9                      	stc
 28152                                  en4:
 28153 000026EE 1F                      	pop	ds
 28154 000026EF 07                      	pop	es
 28155 000026F0 C3                      	retn
 28156                                  
 28157                                  ; 11/12/2022
 28158                                  %if 0
 28159                                  
 28160                                  ;----------------------------------------------------------------------------
 28161                                  ;
 28162                                  ; procedure : badop_p
 28163                                  ;
 28164                                  ;             same thing as badop,but will make sure to set ds register back
 28165                                  ;             to sysinitseg and return back to the caller.
 28166                                  ;
 28167                                  ;----------------------------------------------------------------------------
 28168                                  
 28169                                  badop_p:
 28170                                  	push	cs
 28171                                  	pop	ds		;set ds to configsys seg.
 28172                                  	mov	dx,badopm
 28173                                  	call	print
 28174                                          ;call	error_line
 28175                                  	;retn
 28176                                  	; 11/12/2022
 28177                                  	jmp	error_line
 28178                                  
 28179                                  %endif
 28180                                  
 28181                                  ;----------------------------------------------------------------------------
 28182                                  ;
 28183                                  ; label : badop
 28184                                  ;
 28185                                  ;----------------------------------------------------------------------------
 28186                                  
 28187                                  badop:	
 28188 000026F1 BA[1E37]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28189 000026F4 E87A0C                  	call	print
 28190 000026F7 E84200                  	call	error_line	;show "error in config.sys ..." .
 28191 000026FA E9EDF8                  	jmp	coff
 28192                                  
 28193                                  ;----------------------------------------------------------------------------
 28194                                  ;
 28195                                  ; procedure : badparm_p
 28196                                  ;
 28197                                  ;             show "bad command or parameters - xxxxxx"
 28198                                  ;             in badparm_seg,badparm_off -> xxxxx
 28199                                  ;
 28200                                  ;----------------------------------------------------------------------------
 28201                                  
 28202                                  	; 24/10/2022
 28203                                  badparm_p:
 28204                                  	; 11/12/2022
 28205                                  	; ds = cs
 28206                                  	; 11/12/2022
 28207                                  	;push	ds ; *
 28208 000026FD 52                      	push	dx
 28209 000026FE 56                      	push	si
 28210                                  
 28211                                  	; 11/12/2022
 28212                                  	; ds = cs
 28213                                  	;push	cs
 28214                                  	;pop	ds
 28215                                  
 28216 000026FF BA[4537]                	mov	dx,badparm
 28217 00002702 E86C0C                  	call	print			; "bad command or parameters - "
 28218 00002705 C536[2514]              	lds	si,[badparm_ptr]
 28219                                  
 28220                                  ;	print "xxxx" until cr.
 28221                                  
 28222                                  do1:
 28223 00002709 8A14                    	mov	dl,[si]			; get next character
 28224 0000270B 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28225 0000270E 7407                    	je	short en1		; exit loop if so
 28226                                  
 28227 00002710 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28228 00002712 CD21                    	int	21h			; display character
 28229 00002714 46                      	inc	si			; next character
 28230 00002715 EBF2                    	jmp	short do1
 28231                                  en1:
 28232 00002717 0E                      	push	cs
 28233 00002718 1F                      	pop	ds
 28234                                  
 28235 00002719 BA[4237]                	mov	dx,crlfm
 28236 0000271C E8520C                  	call	print
 28237 0000271F E81A00                  	call	error_line
 28238                                  
 28239 00002722 5E                      	pop	si
 28240 00002723 5A                      	pop	dx
 28241                                  	; 11/12/2022
 28242                                  	;pop	ds ; *
 28243                                  badparmp_ret:
 28244 00002724 C3                      	retn
 28245                                  
 28246                                  ;----------------------------------------------------------------------------
 28247                                  ;
 28248                                  ; procedure : getchr
 28249                                  ;
 28250                                  ;----------------------------------------------------------------------------
 28251                                  
 28252                                  	; 24/10/2022
 28253                                  getchr:
 28254                                  	; 12/12/2022
 28255                                  	;push	cx
 28256                                  	;mov	cx,[count]
 28257                                  	;jcxz	nochar
 28258                                  	; 12/12/2022
 28259 00002725 833E[D203]01            	cmp	word [count],1 
 28260 0000272A 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28261                                  	
 28262 0000272C 8B36[D603]              	mov	si,[chrptr]
 28263 00002730 268A04                  	mov	al,[es:si]
 28264 00002733 FF0E[D203]              	dec	word [count]
 28265 00002737 FF06[D603]              	inc	word [chrptr]
 28266                                  	; 12/12/202
 28267                                  	; cf=0
 28268                                  	;clc
 28269                                  ;get_ret:
 28270                                  	;pop	cx
 28271                                  	;retn
 28272                                  nochar: 
 28273                                  	; 12/12/2022
 28274                                  	; cf=1
 28275                                  	;stc
 28276                                  	;jmp	short get_ret
 28277                                  	
 28278 0000273B C3                      	retn
 28279                                  
 28280                                  ; 11/12/2022
 28281                                  %if 0
 28282                                  
 28283                                  ;----------------------------------------------------------------------------
 28284                                  ;
 28285                                  ; procedure : incorrect_order
 28286                                  ;
 28287                                  ;             show "incorrect order in config.sys ..." message.
 28288                                  ;
 28289                                  ;----------------------------------------------------------------------------
 28290                                  
 28291                                  incorrect_order:
 28292                                  	mov	dx,badorder
 28293                                  	call	print
 28294                                  	call	showlinenum
 28295                                  	retn
 28296                                  
 28297                                  %endif
 28298                                  
 28299                                  ;----------------------------------------------------------------------------
 28300                                  ;
 28301                                  ; procedure : error_line
 28302                                  ;
 28303                                  ;             show "error in config.sys ..." message.
 28304                                  ;
 28305                                  ;----------------------------------------------------------------------------
 28306                                  
 28307                                  	; 11/12/2022
 28308                                  	; 24/10/2022
 28309                                  error_line:
 28310                                  	; 11/12/2022
 28311                                  	; ds = cs
 28312                                  	;push	cs
 28313                                  	;pop	ds
 28314                                  
 28315 0000273C BA[7A38]                	mov	dx,errorcmd
 28316 0000273F E82F0C                  	call	print
 28317                                  	;call	showlinenum
 28318                                  	;retn
 28319                                  	; 11/12/2022
 28320                                  	;jmp	short shortlinemum
 28321                                  
 28322                                  ;----------------------------------------------------------------------------
 28323                                  ;
 28324                                  ; procedure : showlinenum
 28325                                  ;
 28326                                  ; convert the binary linecount to decimal ascii string in showcount
 28327                                  ; and display showcount at the current curser position.
 28328                                  ; in.) linecount
 28329                                  ;
 28330                                  ; out) the number is printed.
 28331                                  ;
 28332                                  ;----------------------------------------------------------------------------
 28333                                  
 28334                                  	; 11/12/2022
 28335                                  	; ds = cs
 28336                                  	; 24/10/2022
 28337                                  showlinenum:
 28338 00002742 06                      	push	es
 28339                                  	; 11/12/2022
 28340                                  	;push	ds
 28341 00002743 57                      	push	di
 28342                                  
 28343 00002744 0E                      	push	cs
 28344 00002745 07                      	pop	es		; es=cs
 28345                                  
 28346                                  	; 11/12/2022
 28347                                  	;push	cs
 28348                                  	;pop	ds
 28349                                  
 28350 00002746 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28351 00002749 B90A00                  	mov	cx,10		; decimal divide factor
 28352                                  	;mov	ax,[cs:linecount]
 28353                                  	; 11/12/2022
 28354 0000274C A1[2B03]                	mov	ax,[linecount]
 28355                                  sln_loop:
 28356                                  	; 11/12/2022
 28357 0000274F 39C8                    	cmp	ax,cx ; < 10 ?
 28358                                  	;cmp	ax,10		; < 10?
 28359 00002751 720C                    	jb	short sln_last
 28360                                  
 28361 00002753 31D2                    	xor	dx,dx
 28362 00002755 F7F1                    	div	cx	; cx = 10
 28363 00002757 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28364 0000275A 8815                    	mov	[di],dl
 28365 0000275C 4F                      	dec	di
 28366 0000275D EBF0                    	jmp	short sln_loop
 28367                                  
 28368                                  sln_last:
 28369 0000275F 0C30                    	or	al,30h	; "0"
 28370 00002761 8805                    	mov	[di],al
 28371 00002763 89FA                    	mov	dx,di
 28372 00002765 E8090C                  	call	print		; show it.
 28373 00002768 5F                      	pop	di
 28374                                  	; 11/12/2022
 28375                                  	;pop	ds
 28376 00002769 07                      	pop	es
 28377 0000276A C3                      	retn
 28378                                  
 28379                                  ; 07/04/2019 - Retro DOS v4.0
 28380                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28381                                  
 28382                                  ;----------------------------------------------------------------------------
 28383                                  ;
 28384                                  ; procedure : ProcDOS
 28385                                  ;
 28386                                  ;	Process the result of DOS= parsing
 28387                                  ;
 28388                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28389                                  ;				= 2 for DOS=LOW
 28390                                  ;				= 3 for DOS=UMB
 28391                                  ;				= 4 for DOS=NOUMB
 28392                                  ;----------------------------------------------------------------------------
 28393                                  
 28394                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28395                                  	; (SYTSINIT:2AB5h)
 28396                                  ProcDOS:
 28397                                  	; 01/01/2023
 28398                                  	; ds = cs
 28399 0000276B 30E4                    	xor	ah,ah
 28400                                  	;;mov	al,[cs:result_val_itag]
 28401                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28402                                  	; 04/01/2023
 28403 0000276D A0[3B1D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28404 00002770 48                      	dec	ax
 28405 00002771 7415                    	jz	short pd_hi
 28406 00002773 48                      	dec	ax
 28407 00002774 740E                    	jz	short pd_lo
 28408 00002776 48                      	dec	ax
 28409 00002777 7405                    	jz	short pd_umb
 28410                                  	;;mov	byte [cs:DevUMB],0
 28411                                  	; 18/12/2022
 28412                                  	;mov	byte [cs:DevUMB],ah ; 0
 28413                                  	; 01/01/2023
 28414 00002779 8826[E21E]              	mov	byte [DevUMB],ah ; 0
 28415 0000277D C3                      	retn
 28416                                  pd_umb:
 28417                                  	; 04/01/2023
 28418 0000277E C606[E21E]FF            	mov	byte [DevUMB],0FFh
 28419                                  	;mov	byte [cs:DevUMB],0FFh
 28420 00002783 C3                      	retn
 28421                                  pd_lo:
 28422                                  	; 04/01/2023
 28423 00002784 A2[6A02]                	mov	[runhigh],al ; 0
 28424                                  	; 18/12/2022
 28425                                  	;mov	[cs:runhigh],al ; 0
 28426                                  	;;mov	byte [cs:runhigh],0
 28427 00002787 C3                      	retn
 28428                                  pd_hi:
 28429                                  	; 04/01/2023
 28430 00002788 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28431                                  	;mov	byte [cs:runhigh],0FFh
 28432                                  limx:	; 11/12/2022
 28433 0000278D C3                      	retn
 28434                                  
 28435                                  ;----------------------------------------------------------------------------
 28436                                  ;
 28437                                  ; procedure : LieInt12Mem
 28438                                  ;
 28439                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28440                                  ;		alloclim set to the limit of low memory.
 28441                                  ;
 28442                                  ;	Output : none
 28443                                  ;
 28444                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28445                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28446                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28447                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28448                                  ;	converted into Ks and stored in 40:13h
 28449                                  ;
 28450                                  ;----------------------------------------------------------------------------
 28451                                  
 28452                                  LieInt12Mem:
 28453                                  	; 11/12/2022
 28454                                  	; ds = cs
 28455 0000278E A1[A302]                	mov	ax,[ALLOCLIM]
 28456                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28457                                  					; assuming that it is 3Com
 28458 00002791 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28459 00002794 740A                    	jz	short lim_set		; yes, lie to him differently
 28460                                  	; 13/05/2019
 28461                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28462                                  	;je	short limx		; no, don't lie
 28463                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28464                                  	; 11/12/2022
 28465                                  	; ds = cs
 28466 00002796 803E[F11E]00            	cmp	byte [DeviceHi],0
 28467 0000279B 74F0                    	je	short limx
 28468 0000279D A1[D81E]                	mov	ax,[DevLoadEnd]
 28469                                  lim_set:
 28470                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28471                                  	; 11/12/2022
 28472                                  	;call	SetInt12Mem
 28473                                  ;limx:
 28474                                  	;retn
 28475                                  	
 28476                                  	;jmp	short SetInt12Mem 
 28477                                  
 28478                                  ;----------------------------------------------------------------------------
 28479                                  ;
 28480                                  ; procedure : SetInt12Mem
 28481                                  ;
 28482                                  ;	Input : AX = Memory size to be set (in paras)
 28483                                  ;	Output : none
 28484                                  ;
 28485                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28486                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28487                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28488                                  ;	restoring the value of 40:13
 28489                                  ;
 28490                                  ;----------------------------------------------------------------------------
 28491                                  
 28492                                  	; 01/11/2022
 28493                                  SetInt12Mem:
 28494 000027A0 1E                      	push	ds
 28495 000027A1 BB4000                  	mov	bx,40h
 28496 000027A4 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28497 000027A6 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28498 000027AA 2E891E[F51E]            	mov	[cs:OldInt12Mem],bx	; save it
 28499 000027AF B106                    	mov	cl,6
 28500 000027B1 D3E8                    	shr	ax,cl			; convert paras into Ks
 28501 000027B3 A31300                  	mov	[13h],ax		; Lie
 28502 000027B6 2EC606[F41E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28503 000027BC 1F                      	pop	ds
 28504                                  ;limx:
 28505 000027BD C3                      	retn
 28506                                  
 28507                                  ;----------------------------------------------------------------------------
 28508                                  ;
 28509                                  ; procedure : TrueInt12Mem
 28510                                  ;
 28511                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28512                                  ;			  = 0ffh if we are lying
 28513                                  ;		OldInt12Mem = Saved value of 40:13h
 28514                                  ;
 28515                                  ;	Output : none
 28516                                  ;
 28517                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28518                                  ;	and resets the flag which indicates that we were lying
 28519                                  ;
 28520                                  ;----------------------------------------------------------------------------
 28521                                  
 28522                                  TrueInt12Mem:
 28523                                  	; 11/12/2022
 28524                                  	; ds = cs
 28525 000027BE 803E[F41E]00            	cmp	byte [Int12Lied],0
 28526                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28527                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28528                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28529 000027C3 7412                    	je	short timx		; no, we weren't
 28530                                  	; 18/12/2022
 28531 000027C5 B84000                  	mov	ax,40h
 28532 000027C8 8826[F41E]              	mov	[Int12Lied],ah ; 0
 28533                                  	;mov	byte [Int12Lied],0
 28534                                  	;mov	byte [cs:Int12Lied],0
 28535 000027CC 1E                      	push	ds
 28536                                  	;mov	ax,40h
 28537 000027CD 8ED8                    	mov	ds,ax
 28538 000027CF 2EA1[F51E]              	mov	ax,[cs:OldInt12Mem]
 28539 000027D3 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28540 000027D6 1F                      	pop	ds
 28541                                  timx:
 28542 000027D7 C3                      	retn
 28543                                  
 28544                                  ;----------------------------------------------------------------------------
 28545                                  ;
 28546                                  ; procedure : IsIt3Com?
 28547                                  ;
 28548                                  ;	Input : DevEntry = Seg:0 of device driver
 28549                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28550                                  ;		 else Zero flag is reset
 28551                                  ;
 28552                                  ;----------------------------------------------------------------------------
 28553                                  
 28554                                  IsIt3Com:
 28555                                  	; 11/12/2022
 28556                                  	; ds = cs
 28557 000027D8 1E                      	push	ds
 28558 000027D9 06                      	push	es
 28559 000027DA 56                      	push	si
 28560                                  	; 11/12/2022
 28561 000027DB C536[DA1E]              	lds	si,[DevEntry]
 28562                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28563 000027DF 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28564 000027E2 0E                      	push	cs
 28565 000027E3 07                      	pop	es
 28566 000027E4 BF[F71E]                	mov	di,ThreeComName
 28567 000027E7 B90800                  	mov	cx,8			; name length
 28568 000027EA F3A6                    	rep	cmpsb
 28569 000027EC 5E                      	pop	si
 28570 000027ED 07                      	pop	es
 28571 000027EE 1F                      	pop	ds
 28572 000027EF C3                      	retn
 28573                                  
 28574                                  ;M020 : BEGIN
 28575                                  ;----------------------------------------------------------------------------
 28576                                  
 28577                                  UpdatePDB:
 28578 000027F0 1E                      	push	ds
 28579 000027F1 B462                    	mov	ah,62h
 28580 000027F3 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28581 000027F5 8EDB                    	mov	ds,bx
 28582 000027F7 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28583                                  	;mov	[2],bx
 28584 000027FC 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28585 00002800 1F                      	pop	ds
 28586 00002801 C3                      	retn
 28587                                  
 28588                                  ; M020 : END
 28589                                  
 28590                                  ;----------------------------------------------------------------------------
 28591                                  
 28592                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28593                                  
 28594                                  %if 0
 28595                                  
 28596                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28597                                  ;include highexit.inc	; umb's, etc
 28598                                  
 28599                                  ; ----------------------------------------------------------------------
 28600                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28601                                  ; ----------------------------------------------------------------------
 28602                                  ; 07/04/2019 - Retro DOS v4.0
 28603                                  
 28604                                  ;******************************************************************************
 28605                                  ;
 28606                                  ; This file contains routines needed to parse and implement user-given
 28607                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28608                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28609                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28610                                  ;
 28611                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28612                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28613                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28614                                  ;    DH/LH module opts
 28615                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28616                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28617                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28618                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28619                                  ; available during the load.
 28620                                  ;
 28621                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28622                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28623                                  ; upper-memory block which was not specified by the user... in addition, if
 28624                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28625                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28626                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28627                                  ; free any UMBs so allocated.
 28628                                  ;
 28629                                  ; When a device driver loads, there is the additional problem of allocating its
 28630                                  ; initial load site; this should be restricted to the first UMB specified on
 28631                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28632                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28633                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28634                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28635                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28636                                  ;
 28637                                  ;******************************************************************************
 28638                                  
 28639                                  SWTCH	equ	'/'		; Switch character
 28640                                  
 28641                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28642                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28643                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28644                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28645                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28646                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28647                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28648                                  
 28649                                  CR	equ	0Dh		; Carriage Return
 28650                                  LF	equ	0Ah		; Line Feed
 28651                                  TAB	equ	09h		; Tab character (^I)
 28652                                  
 28653                                  ; -----------------------------------------------------------------------------
 28654                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28655                                  ; -----------------------------------------------------------------------------
 28656                                  ; ENTRY:       None
 28657                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28658                                  ; ERROR EXIT:  None
 28659                                  ; USES:        Flags, variables in highvar.inc
 28660                                  ; -----------------------------------------------------------------------------
 28661                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28662                                  ; are largely ignored, but it is initialized nonetheless.
 28663                                  ; -----------------------------------------------------------------------------
 28664                                  
 28665                                  InitVar:
 28666                                  	;pushreg <ax, cx, di, es>
 28667                                  	push	ax
 28668                                  	push	cx
 28669                                  	push	di
 28670                                  	push	es
 28671                                  
 28672                                  	;dataseg es			;Point ES into appropriate data segment
 28673                                  	push	cs
 28674                                  	pop	es
 28675                                  
 28676                                  	xor	ax,ax
 28677                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28678                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28679                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28680                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28681                                  					;Later is the # of the 1st spec'd UMB
 28682                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28683                                  
 28684                                  	cld
 28685                                  
 28686                                  	mov	cx,MAXUMB ; 16		;For each entry
 28687                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28688                                  	rep	stosb			;	Store 0
 28689                                  
 28690                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28691                                  	mov	di,UmbSize		;on the UmbSize array,
 28692                                  	rep	stosw			;	Store 0
 28693                                  
 28694                                  	;normseg es			; Return ES
 28695                                  
 28696                                  	;popreg	<es, di, cx, ax>
 28697                                  	pop	es
 28698                                  	pop	di
 28699                                  	pop	cx
 28700                                  	pop	ax	 	
 28701                                  
 28702                                  	retn
 28703                                  
 28704                                  ; -----------------------------------------------------------------------------
 28705                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28706                                  ; -----------------------------------------------------------------------------
 28707                                  ; ENTRY   : None
 28708                                  ; EXIT    : None
 28709                                  ; ERROR   : None
 28710                                  ; USES    : Flags, fm_umb, fm_strat
 28711                                  ; -----------------------------------------------------------------------------
 28712                                  
 28713                                  FixMem:
 28714                                  	push	ax
 28715                                  	push	bx
 28716                                  	push	cx
 28717                                  	push	dx
 28718                                  	push	es
 28719                                  
 28720                                  	call	fm_link		; Link in UMBs
 28721                                  
 28722                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28723                                  	jc	short fmX	; (if couldn't get it, leave now).
 28724                                  
 28725                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28726                                  
 28727                                  ; - Walk MCB Chain ------------------------------------------------------------
 28728                                  
 28729                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28730                                  	mov 	cx,dx		; in CX... and the last owner
 28731                                  	inc	dx		; in dx as we go through the loop:
 28732                                  
 28733                                  ; ------------------------------------------
 28734                                  ; FM10--DX  = last MCB's owner's PSP address
 28735                                  ;       CX  = last MCB's address (segment)
 28736                                  ; ------------------------------------------
 28737                                  
 28738                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28739                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28740                                  	or	bx,dx			; dx was owner of previous MCB
 28741                                  	jnz	short fm30		; If not both zero, don't cat.
 28742                                  
 28743                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28744                                  
 28745                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28746                                  	mov	es,cx			; Go back to prev MCB's address
 28747                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28748                                  
 28749                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28750                                  	add	bx,1			; And add one for the header
 28751                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28752                                  
 28753                                  	; ---------------------------------------------------------------------
 28754                                  
 28755                                  fm30:	mov	cx,es			; Put this address on the stack
 28756                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28757                                  
 28758                                  	mov	bx,es			; Move to the next MCB
 28759                                  	add	bx,[es:ARENA.SIZE]
 28760                                  	inc	bx
 28761                                  	mov	es,bx
 28762                                  
 28763                                  	;cmp	al,'Z'
 28764                                  	cmp	al,arena_signature_end
 28765                                  	jne	short fm10		; If signature != 'Z', there are more.
 28766                                  fmX:	
 28767                                  	call	fm_unlink		; Unlink UMBs
 28768                                  
 28769                                  	pop	es
 28770                                  	pop	dx
 28771                                  	pop	cx
 28772                                  	pop	bx
 28773                                  	pop	ax
 28774                                  
 28775                                  	retn
 28776                                  
 28777                                  ; -----------------------------------------------------------------------------
 28778                                  ;*** fm_link - links UMBs not already linked in
 28779                                  ; -----------------------------------------------------------------------------
 28780                                  ; ENTRY:    None
 28781                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28782                                  ; ERROR:    None
 28783                                  ; USES:     AX, BX, fm_umb
 28784                                  ; -----------------------------------------------------------------------------
 28785                                  
 28786                                  fm_link:
 28787                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28788                                  	int	21h			; Current link-state is now in al
 28789                                  
 28790                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28791                                  	;
 28792                                  	;push	es
 28793                                  	;push	cs
 28794                                  	;pop	es
 28795                                  	;mov	[es:fm_umb],al
 28796                                  	;pop	es
 28797                                  	
 28798                                  	mov	[cs:fm_umb],al
 28799                                  
 28800                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28801                                  	mov	bx,1
 28802                                  	int	21h
 28803                                  	retn
 28804                                  
 28805                                  ; -----------------------------------------------------------------------------
 28806                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28807                                  ; -----------------------------------------------------------------------------
 28808                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28809                                  ; EXIT:     None
 28810                                  ; ERROR:    None
 28811                                  ; USES:     AX, BX
 28812                                  ; -----------------------------------------------------------------------------
 28813                                  
 28814                                  fm_unlink:
 28815                                  	xor	bx,bx
 28816                                  	
 28817                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28818                                  	;
 28819                                  	;push	ds
 28820                                  	;push	cs
 28821                                  	;pop	ds
 28822                                  	;mov	bl,[fm_umb]	
 28823                                  	;pop	ds
 28824                                  	
 28825                                  	mov	bl,[cs:fm_umb]
 28826                                  
 28827                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28828                                  	int	21h			; so just use that, and call int 21h
 28829                                  	retn
 28830                                  
 28831                                  ; 08/04/2019 - Retro DOS v4.0
 28832                                  
 28833                                  ; -----------------------------------------------------------------------------
 28834                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28835                                  ; laid out in highvar.inc
 28836                                  ; -----------------------------------------------------------------------------
 28837                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28838                                  ; EXIT:     ES:SI points to first character in child program name
 28839                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28840                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28841                                  ; -----------------------------------------------------------------------------
 28842                                  ; Error codes (in AX if carry set on return):
 28843                                  ;
 28844                                  PV_InvArg	equ	1	; Invalid argument passed
 28845                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28846                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28847                                  ;
 28848                                  ; This routine exects ES:SI to point to a string much like the following:
 28849                                  ;    "/S/L:1,200;2 module options"
 28850                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28851                                  ; required, though that's what this routine is supposed to parse.
 28852                                  ;
 28853                                  optS		equ	'S'	; /S
 28854                                  optL		equ	'L'	; /L:...
 28855                                  ;
 28856                                  ; -----------------------------------------------------------------------------
 28857                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28858                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28859                                  ;     lh /l:1,1000;2 print/d:lpt2
 28860                                  ; the arguments would look like (one per line):
 28861                                  ;     lh
 28862                                  ;     /l
 28863                                  ;     1
 28864                                  ;     1000
 28865                                  ;     2
 28866                                  ;     print
 28867                                  ;     /d
 28868                                  ;     :lpt2
 28869                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28870                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28871                                  ; of the number of arguments LH will need to skip in order to get to the
 28872                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28873                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28874                                  ; for:
 28875                                  ;    Each /L
 28876                                  ;    Each /S (there should be only one)
 28877                                  ;    Each UMB number (they follow ":" or ";")
 28878                                  ;    Each UMB size   (they follow ",")
 28879                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28880                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28881                                  ; -----------------------------------------------------------------------------
 28882                                  
 28883                                  ParseVar:
 28884                                  	;pushreg <di, ds, es>
 28885                                  	push	di
 28886                                  	push	ds
 28887                                  	push	es
 28888                                  
 28889                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28890                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28891                                  	cld
 28892                                  
 28893                                  ; ------------------------------------------------
 28894                                  ; PV10--ES:SI = any whitespace on the command-line
 28895                                  ; ------------------------------------------------
 28896                                  
 28897                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28898                                  	call	isWhite
 28899                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28900                                  	;cmp	al,'/'
 28901                                  	cmp	al,SWTCH
 28902                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28903                                  
 28904                                  	dec	si		; Backup--it's now "odule options", and we need
 28905                                  	clc			; that "m" we just read (or whatever it is).
 28906                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28907                                  
 28908                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28909                                  	;toUpper al		; So we make it upper-case, and...
 28910                                  	and	al,0DFh
 28911                                  	;cmp	al,'S'
 28912                                  	cmp	al,optS		; just read 'S'?
 28913                                  	jne	short pv30
 28914                                  
 28915                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28916                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28917                                  
 28918                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28919                                  	;
 28920                                  	;push	es
 28921                                  	;push	cs
 28922                                  	;pop	es
 28923                                  	;mov	[es:fUmbTiny],1	
 28924                                  	;pop	es
 28925                                  
 28926                                  	mov	byte [cs:fUmbTiny],1
 28927                                  
 28928                                  	jmp	short pv10	; possibly even "/L...".
 28929                                  
 28930                                  pv30:	;cmp	al,'L'
 28931                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28932                                  	jne	short pvE1		; switch!
 28933                                  
 28934                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28935                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28936                                  
 28937                                  	call	parseL
 28938                                  	jnc	short pv10	; If no carry, go back and look for more
 28939                                  
 28940                                  	dec	si		; Else, back up and exit.
 28941                                  	jmp	short pvErr	; AX has already been set by parseL
 28942                                  
 28943                                  pvE1:	;mov	ax,3
 28944                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28945                                  pvErr:	dec	si
 28946                                  	dec	si
 28947                                  	stc
 28948                                  pvX:	;popreg	<es, ds, di>
 28949                                  	pop	es
 28950                                  	pop	ds
 28951                                  	pop	di
 28952                                  	retn
 28953                                  
 28954                                  ; -----------------------------------------------------------------------------
 28955                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28956                                  ; -----------------------------------------------------------------------------
 28957                                  ; ENTRY:    ES:SI points to colon
 28958                                  ; EXIT:     ES:SI points to first character not parsed
 28959                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28960                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28961                                  ; -----------------------------------------------------------------------------
 28962                                  ; If the string here is terminated with anything other than whitespace or a
 28963                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28964                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28965                                  ; makes sure the app /L: is reported as being the culprit.
 28966                                  ; -----------------------------------------------------------------------------
 28967                                  
 28968                                  parseL:
 28969                                  	lodsb
 28970                                  	cmp	al,':'		; Make sure they did /L:
 28971                                  	jne	short plE1	; If they didn't, return with carry set.
 28972                                  
 28973                                  ; ------------------------------------------
 28974                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28975                                  ; ------------------------------------------
 28976                                  
 28977                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28978                                  	jc	short plE2	; And error if it's a bad number.
 28979                                  	call	convUMB		; Convert any address to a UMB number
 28980                                  
 28981                                  	mov	cl,al		; Remember the UMB number
 28982                                  	call	stowUMB		; Mark this UMB # as used;
 28983                                  	jc	short plE2	; If it was already marked, it'll error
 28984                                  
 28985                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28986                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28987                                  
 28988                                  	lodsb
 28989                                  	cmp	al,';'		; Did "umb;" ?
 28990                                  	je	short pl10	; Yep: go back and get another UMB.
 28991                                  
 28992                                  	call	isWhite		; Did "umb " ?
 28993                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28994                                  
 28995                                  	call	isEOL		; Did "umb" ?
 28996                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28997                                  
 28998                                  	;cmp	al,'/'
 28999                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29000                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29001                                  
 29002                                  	cmp	al,','		; Did "umb," ?
 29003                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29004                                  
 29005                                  ; --- Read a size -------------------------------------------------------------
 29006                                  
 29007                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29008                                  	jc	short plE1	; And error if it's a bad size.
 29009                                  
 29010                                  	call	toPara		; Convert from bytes to paragraphs
 29011                                  
 29012                                  	call	stowSiz		; CL still has the UMB number for this routine
 29013                                  
 29014                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29015                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29016                                  
 29017                                  	lodsb
 29018                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29019                                  	je	short pl10	;
 29020                                  
 29021                                  	call	isWhite		; Did it end with whitespace?
 29022                                  	jz	short plX	; If so, we're done here--go back.
 29023                                  
 29024                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29025                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29026                                  
 29027                                  	;cmp	al,'/'
 29028                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29029                                  	je	short plSwX	; If so, again, we're done here.
 29030                                  plE1:	
 29031                                  	;mov	ax,1
 29032                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29033                                  	dec	si
 29034                                  	stc
 29035                                  	retn
 29036                                  
 29037                                  plE2:	;mov	ax,2
 29038                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29039                                  	; 12/12/2022
 29040                                  	; cf=1
 29041                                  	;stc
 29042                                  	retn
 29043                                  plSwX:	
 29044                                  	dec	si		; If we hit a '/' character, back up one char
 29045                                  				; so the whitespace checker will see it too.
 29046                                  plX:	; 12/12/2022
 29047                                  	; cf=0
 29048                                  	;clc			; Then just return with carry clear, so
 29049                                  	retn			; ParseVar will go about its business.
 29050                                  
 29051                                  ; -----------------------------------------------------------------------------
 29052                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29053                                  ; -----------------------------------------------------------------------------
 29054                                  ; ENTRY:    None
 29055                                  ; EXIT:     None
 29056                                  ; ERROR:    None
 29057                                  ; USES:     fm_argc, flags
 29058                                  ; -----------------------------------------------------------------------------
 29059                                  
 29060                                  ;incArgc:
 29061                                  	;push	ax
 29062                                  
 29063                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29064                                  
 29065                                  	;mov	al,[cs:fm_argc]
 29066                                  
 29067                                  	;inc	al		; Increment it,
 29068                                  
 29069                                  	;;putdata fm_argc, al	; And store it right back.
 29070                                  
 29071                                  	;mov	[cs:fm_argc],al
 29072                                  
 29073                                  	;pop	ax
 29074                                  	;retn
 29075                                  
 29076                                  ; -----------------------------------------------------------------------------
 29077                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29078                                  ; -----------------------------------------------------------------------------
 29079                                  ; ENTRY:    AL contains character to test
 29080                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29081                                  ; ERROR:    None
 29082                                  ; USES:     ZF
 29083                                  ; -----------------------------------------------------------------------------
 29084                                  
 29085                                  isEOL:
 29086                                  	cmp	al,0		; Null-terminator
 29087                                  	je	short ieX
 29088                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29089                                  	je	short ieX
 29090                                  	cmp	al,LF ; 0Ah	; LineFeed
 29091                                  ieX:	
 29092                                  	retn
 29093                                  
 29094                                  ; -----------------------------------------------------------------------------
 29095                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29096                                  ; -----------------------------------------------------------------------------
 29097                                  ; ENTRY:    AL contains character to test
 29098                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29099                                  ; ERROR:    None
 29100                                  ; USES:     ZF
 29101                                  ; -----------------------------------------------------------------------------
 29102                                  
 29103                                  isWhite:
 29104                                  	cmp	al,' '		; Space
 29105                                  	je	short iwX
 29106                                  	cmp	al,'='		; Equals (treat as whitespace)
 29107                                  	je	short iwX
 29108                                  	cmp	al,tab ; 9	; Tab
 29109                                  iwX:	
 29110                                  	retn
 29111                                  
 29112                                  ; -----------------------------------------------------------------------------
 29113                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29114                                  ; -----------------------------------------------------------------------------
 29115                                  ; ENTRY:    AL contains UMB number
 29116                                  ; EXIT:     None
 29117                                  ; ERROR:    None
 29118                                  ; USES:     Flags, variables in highvar.inc
 29119                                  ; -----------------------------------------------------------------------------
 29120                                  
 29121                                  unMarkUMB:
 29122                                  	push	ax
 29123                                  	push	bx
 29124                                  	push	di
 29125                                  	push	es
 29126                                  
 29127                                  	push	cs
 29128                                  	pop	es
 29129                                  
 29130                                  	xor	ah,ah
 29131                                  	mov	bx,ax
 29132                                  
 29133                                  	; 19/04/2019
 29134                                  	
 29135                                  	;mov	byte [es:bx+UmbUsed],0
 29136                                  	mov	[es:bx+UmbUsed],ah ; 0
 29137                                  
 29138                                  	cmp	[es:UmbLoad],al
 29139                                  	jne	short umu10
 29140                                  
 29141                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29142                                  	mov	[es:UmbLoad],ah ; 0
 29143                                  umu10:	
 29144                                  	pop	es
 29145                                  	pop	di
 29146                                  	pop	bx
 29147                                  	pop	ax
 29148                                  	retn
 29149                                  
 29150                                  ; -----------------------------------------------------------------------------
 29151                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29152                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29153                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29154                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29155                                  ; -----------------------------------------------------------------------------
 29156                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29157                                  ; EXIT:     None
 29158                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29159                                  ; USES:     AX, Flags, variables in highvar.inc
 29160                                  ; -----------------------------------------------------------------------------
 29161                                  
 29162                                  stowUMB:
 29163                                  	cmp	al,MAXUMB ; 16
 29164                                  	jb	short su10
 29165                                  	stc
 29166                                  	retn			; Ooops-- UMB>=MAXUMB
 29167                                  su10:	
 29168                                  	push	bx
 29169                                  	push	di
 29170                                  	push	si
 29171                                  	push	ds
 29172                                  	push	es
 29173                                  	push	cs
 29174                                  	pop	es
 29175                                  	push	cs
 29176                                  	pop	ds
 29177                                  	
 29178                                  	;cmp	byte [UmbLoad],0FFh
 29179                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29180                                  	jne	short su20
 29181                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29182                                  su20:	
 29183                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29184                                  	jz	short su30	; that we should do here.
 29185                                  
 29186                                  	mov	bl,al
 29187                                  	xor	bh,bh
 29188                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29189                                  
 29190                                  	xchg	[es:bx+UmbUsed],al
 29191                                  
 29192                                  	or	al,al		; If it was already 1, then al==1... and that
 29193                                  	jz	short su30	; means an error.
 29194                                  
 29195                                  	stc			; OOOPS!  This one's been used before.  :(
 29196                                  su30:	
 29197                                  	pop	es
 29198                                  	pop	ds
 29199                                  	pop	si
 29200                                  	pop	di
 29201                                  	pop	bx
 29202                                  	retn
 29203                                  
 29204                                  ; -----------------------------------------------------------------------------
 29205                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29206                                  ; -----------------------------------------------------------------------------
 29207                                  ; ENTRY:    CL contains UMB number, AX contains size
 29208                                  ; EXIT:     None
 29209                                  ; ERROR:    None
 29210                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29211                                  ; -----------------------------------------------------------------------------
 29212                                  
 29213                                  ; 13/05/2019
 29214                                  
 29215                                  stowSiz:
 29216                                  	push	bx
 29217                                  	;push	di ; ?
 29218                                  	push	es
 29219                                  
 29220                                  	push	cs
 29221                                  	pop	es	
 29222                                  
 29223                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29224                                  	mov	bh,0			;     bx==UMB number, AX==size
 29225                                  	shl	bl,1			;     bx==offset into array, AX=size
 29226                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29227                                  	
 29228                                  	pop	es
 29229                                  	;pop	di ; ?
 29230                                  	pop	bx
 29231                                  
 29232                                  	retn
 29233                                  
 29234                                  ; -----------------------------------------------------------------------------
 29235                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29236                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29237                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29238                                  ; A-F are considered valid iff gnradix is 16.
 29239                                  ; -----------------------------------------------------------------------------
 29240                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29241                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29242                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29243                                  ; USES:     CL, Flags
 29244                                  ; -----------------------------------------------------------------------------
 29245                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29246                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29247                                  ; will be 10 or 16.
 29248                                  ; -----------------------------------------------------------------------------
 29249                                  
 29250                                  gnradix:
 29251                                  	dw	0		; Must be a word--16x16 multiplication
 29252                                  
 29253                                  toDigit:
 29254                                  	cmp	word [cs:gnradix],16
 29255                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29256                                  
 29257                                  toDigit_hex:
 29258                                  	cmp	cl,'a'	; 61h
 29259                                  	jb	short td10
 29260                                  	cmp	cl,'f'	; 66h
 29261                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29262                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29263                                  	;clc			; <- CLC is implicit from last SUB
 29264                                  	retn
 29265                                  td10:	
 29266                                  	cmp	cl,'A'  ; 41h
 29267                                  	jb	short td20	; Below 'A'?  Not a letter...
 29268                                  	cmp	cl,'F'	; 46h
 29269                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29270                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29271                                  	;clc			; <- CLC is implicit from last SUB
 29272                                  	retn
 29273                                  toDigit_dec:
 29274                                  td20:	
 29275                                  	cmp	cl,'0'		; If less than zero,
 29276                                  	;jb	short tdE	; Done.
 29277                                  	jb	short tdEr ; 08/04/2019
 29278                                  	cmp	cl,'9'		; Or, if greater than nine,
 29279                                  	ja	short tdE	; Done.
 29280                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29281                                  	;clc			; <- CLC is implicit from last SUB
 29282                                  	retn
 29283                                  tdE:	
 29284                                  	stc
 29285                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29286                                  	retn
 29287                                  
 29288                                  ; -----------------------------------------------------------------------------
 29289                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29290                                  ; -----------------------------------------------------------------------------
 29291                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29292                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29293                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29294                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29295                                  ; -----------------------------------------------------------------------------
 29296                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29297                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29298                                  ; will be 10 or 16.
 29299                                  ; -----------------------------------------------------------------------------
 29300                                  
 29301                                  ; 08/04/2019 - Retro DOS v4.0
 29302                                  
 29303                                  GetXNum:
 29304                                  	;pushreg <bx, cx, ds>
 29305                                  	push	bx
 29306                                  	push	cx
 29307                                  	push	ds
 29308                                  
 29309                                  	cld
 29310                                  	xor	ax,ax
 29311                                  	xor	bx,bx
 29312                                  	xor	cx,cx
 29313                                  	xor	dx,dx			; Start with 0 (makes sense)
 29314                                  
 29315                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29316                                  
 29317                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29318                                  	;call	toDigit
 29319                                  	call	toDigit_dec
 29320                                  	jc	short gxnE		; If it's not a digit, leave now.
 29321                                  
 29322                                  	or	cl,cl
 29323                                  	jnz	short gxn20		; Doesn't have '0x'
 29324                                  	mov	cl,[es:si+1]
 29325                                  	cmp	cl,'x'			; Either 'x'...
 29326                                  	je	short gxn10
 29327                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29328                                  	jne	short gxn20
 29329                                  
 29330                                  gxn10:	
 29331                                  	mov	word [cs:gnradix], 16
 29332                                  	inc	si			; Since we read "0x", march over it.
 29333                                  	inc	si
 29334                                  
 29335                                  ; ------------------------------------------------------
 29336                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29337                                  ;        DX:AX = current total
 29338                                  ;        BX    = 0
 29339                                  ;        CH    = 0
 29340                                  ; ------------------------------------------------------
 29341                                  
 29342                                  gxn20:	
 29343                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29344                                  	inc	si
 29345                                  
 29346                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29347                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29348                                  
 29349                                  	call	mul32		; Multiply DX:AX by gnradix
 29350                                  	jc	short gxnX	; (if it's too big, error out)
 29351                                  
 29352                                  	add	ax,cx		; Add the digit
 29353                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29354                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29355                                  	;jmp	short gxn20
 29356                                  	jnc	short gxn20
 29357                                  gxnE:	
 29358                                  	;stc			; In this case, we need to set the carry
 29359                                  	jmp	short gxnX	; and leave--there were no digits given.
 29360                                  gxnQ:	
 29361                                  	dec	si		; Don't read in the offensive character.
 29362                                  	clc			; And clear carry, so they know it's okay.
 29363                                  gxnX:	
 29364                                  	pop	ds
 29365                                  	pop	cx
 29366                                  	pop	bx
 29367                                  	retn
 29368                                  
 29369                                  ; -----------------------------------------------------------------------------
 29370                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29371                                  ; -----------------------------------------------------------------------------
 29372                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29373                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29374                                  ; ERROR:   Carry set if number was too large
 29375                                  ; USES:    Flags, AX, DX
 29376                                  ; -----------------------------------------------------------------------------
 29377                                  
 29378                                  mul32:
 29379                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29380                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29381                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29382                                  	jc	short m32E	; Too big?
 29383                                  
 29384                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29385                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29386                                  
 29387                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29388                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29389                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29390                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29391                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29392                                  	retn
 29393                                  m32E:	
 29394                                  	pop	ax
 29395                                  	retn
 29396                                  
 29397                                  ; -----------------------------------------------------------------------------
 29398                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29399                                  ; -----------------------------------------------------------------------------
 29400                                  ; ENTRY:   DX:AX = the number to be divided
 29401                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29402                                  ; ERROR:   None
 29403                                  ; USES:    Flags, AX, DX
 29404                                  ; -----------------------------------------------------------------------------
 29405                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29406                                  ;       can't ensure a 386 host machine. Sorry.
 29407                                  ; -----------------------------------------------------------------------------
 29408                                  
 29409                                  toPara:
 29410                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29411                                  
 29412                                  	mov	cl,4		;
 29413                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29414                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29415                                  	mov	cl,12
 29416                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29417                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29418                                  
 29419                                  	pop	cx
 29420                                  	retn
 29421                                  
 29422                                  ; -----------------------------------------------------------------------------
 29423                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29424                                  ; -----------------------------------------------------------------------------
 29425                                  ; ENTRY:  Nothing
 29426                                  ; EXIT:   AX contains 0x9FFF for most systems
 29427                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29428                                  ; USES:   Flags, AX
 29429                                  ; -----------------------------------------------------------------------------
 29430                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29431                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29432                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29433                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29434                                  ; -----------------------------------------------------------------------------
 29435                                  
 29436                                  UmbHead:
 29437                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29438                                  
 29439                                  	;push	si ; ?
 29440                                  	;push	ds ; ? 
 29441                                  	;push	es
 29442                                  	;push	bx ; *	
 29443                                  
 29444                                  	; 09/04/2019
 29445                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29446                                  
 29447                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29448                                  	int	21h
 29449                                  
 29450                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29451                                  	cmp	ax,0FFFFh
 29452                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29453                                  
 29454                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29455                                  	;jmp	short uhX
 29456                                  	; 12/12/2022
 29457                                  	retn
 29458                                  uhE:	
 29459                                  	stc
 29460                                  uhX:	
 29461                                  	;pop	bx ; *
 29462                                  	;pop	es
 29463                                  	;pop	ds ; ?
 29464                                  	;pop	si ; ?
 29465                                  	retn
 29466                                  
 29467                                  ; -----------------------------------------------------------------------------
 29468                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29469                                  ; -----------------------------------------------------------------------------
 29470                                  ; ENTRY:  ES:0 should point to a valid MCB
 29471                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29472                                  ; USES:   Flags
 29473                                  ; -----------------------------------------------------------------------------
 29474                                  
 29475                                  isSysMCB:
 29476                                  	;push	ax
 29477                                  
 29478                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29479                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29480                                  	;je	short ism10
 29481                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29482                                  	;;je	short ism10
 29483                                  	;;jmp	short ismX		; Anything else isn't.
 29484                                  	;jne	short ismX
 29485                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29486                                  	jne	short ismX 
 29487                                  ism10:	
 29488                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29489                                  	;cmp	ax,'SC' ; 4353h
 29490                                  	cmp	word [es:ARENA.NAME],'SC'
 29491                                  ismX:	
 29492                                  	;pop	ax
 29493                                  	retn
 29494                                  
 29495                                  ; 09/04/2019 - Retro DOS v4.0
 29496                                  
 29497                                  ; -----------------------------------------------------------------------------
 29498                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29499                                  ; -----------------------------------------------------------------------------
 29500                                  ; ENTRY:  AX contains a segment address
 29501                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29502                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29503                                  ; USES:   Flags, AX
 29504                                  ; -----------------------------------------------------------------------------
 29505                                  ; An address in the following areas is treated as:
 29506                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29507                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29508                                  ;      ...
 29509                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29510                                  ; -----------------------------------------------------------------------------
 29511                                  
 29512                                  AddrToUmb:
 29513                                  	push	cx
 29514                                  	push	dx
 29515                                  	push	es
 29516                                  
 29517                                  	mov	dx,ax		; DX = address to search for
 29518                                  
 29519                                  	call	UmbHead		; AX = first segment
 29520                                  	jc	short atuE	; If it couldn't get it, error out.
 29521                                  
 29522                                  	mov	es,ax		; ES = first UMB segment
 29523                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29524                                  
 29525                                  ; ----------------------------------------
 29526                                  ; ATU10--ES - Current MCB address
 29527                                  ;        DX - Address given for conversion
 29528                                  ;        CX - Current UMB #
 29529                                  ; ----------------------------------------
 29530                                  
 29531                                  atu10:	mov	ax,es
 29532                                          cmp	ax,dx		; Present segment >= given segment?
 29533                                  	jae	short atuX	; Yep--done.
 29534                                  
 29535                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29536                                  	jnz	short atu20
 29537                                  
 29538                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29539                                  atu20:	
 29540                                  	mov	al,[es:ARENA.SIGNATURE]
 29541                                  	cmp	al,arena_signature_end  ; 'Z'
 29542                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29543                                  
 29544                                  	;NextMCB es, ax
 29545                                  
 29546                                  	mov     ax,es
 29547                                  	;add	ax,[es:3]
 29548                                  	add     ax,[es:ARENA.SIZE]
 29549                                  	inc     ax
 29550                                  	mov     es,ax
 29551                                  	
 29552                                  	jmp	short atu10
 29553                                  
 29554                                  ; -----------------------------------------------------------------------------
 29555                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29556                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29557                                  ; -----------------------------------------------------------------------------
 29558                                  
 29559                                  atu30:	
 29560                                  	mov	ax,es
 29561                                  	add	ax,[es:ARENA.SIZE]
 29562                                  	cmp	ax,dx		; Present >= given?
 29563                                  	jae	short atuX	; Yep! It _was_ inside.
 29564                                  atuE:	
 29565                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29566                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29567                                  atuX:	
 29568                                  	mov	ax, cx		; Return the UMB number in AX
 29569                                  	
 29570                                  	pop	es	
 29571                                  	pop	dx
 29572                                  	pop	cx
 29573                                  	retn
 29574                                  
 29575                                  ; -----------------------------------------------------------------------------
 29576                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29577                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29578                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29579                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29580                                  ; -----------------------------------------------------------------------------
 29581                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29582                                  ; EXIT:   AX will contain a UMB number
 29583                                  ; ERROR:  None
 29584                                  ; USES:   Flags, AX
 29585                                  ; -----------------------------------------------------------------------------
 29586                                  
 29587                                  convUMB:
 29588                                  	cmp	word [cs:gnradix],16
 29589                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29590                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29591                                  	cmp	ax,0FFFFh
 29592                                  	jne	short cu10
 29593                                  	inc	ax		; If too high, ignore it (make it conventional)
 29594                                  cu10:	
 29595                                  	retn
 29596                                  
 29597                                  ; -----------------------------------------------------------------------------
 29598                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29599                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29600                                  ; of the usual HIGH_FIRST.  See the code.
 29601                                  ; -----------------------------------------------------------------------------
 29602                                  ; ENTRY:  None
 29603                                  ; EXIT:   None
 29604                                  ; ERROR:  None
 29605                                  ; USES:   Flags, fm_umb, fm_strat
 29606                                  ; -----------------------------------------------------------------------------
 29607                                  
 29608                                  setUMBs:
 29609                                  	push	ax
 29610                                  	push	bx
 29611                                  	call	fm_link
 29612                                  	pop	bx
 29613                                  	pop	ax
 29614                                  	retn
 29615                                  
 29616                                  ; -----------------------------------------------------------------------------
 29617                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29618                                  ; -----------------------------------------------------------------------------
 29619                                  ; ENTRY:  None
 29620                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29621                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29622                                  ; ERROR:  None
 29623                                  ; USES:   Flags, fm_strat, fm_umb
 29624                                  ; -----------------------------------------------------------------------------
 29625                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29626                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29627                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29628                                  ; such that the load UMB is too small, and shouldn't be used.
 29629                                  ; -----------------------------------------------------------------------------
 29630                                  
 29631                                  loadLow:
 29632                                  	;push	ds
 29633                                  	;push	cs		; Point DS into appropriate data segment
 29634                                  	;pop	ds	
 29635                                  
 29636                                  	;mov	al,[UmbLoad]
 29637                                  	mov	al,[cs:UmbLoad]
 29638                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29639                                  	jne	short ll10
 29640                                  
 29641                                  	stc
 29642                                  ll15:
 29643                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29644                                  	;stc
 29645                                  	;jmp	short llX
 29646                                  	retn
 29647                                  ll10:	
 29648                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29649                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29650                                  
 29651                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29652                                  	retn
 29653                                  
 29654                                  	;mov	al,1
 29655                                  	;clc
 29656                                  ;llX:
 29657                                  	;pop	ds		; Return DS to where it was
 29658                                  	;retn
 29659                                  
 29660                                  ; -----------------------------------------------------------------------------
 29661                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29662                                  ; -----------------------------------------------------------------------------
 29663                                  ; ENTRY:  None
 29664                                  ; EXIT:   None
 29665                                  ; ERROR:  None
 29666                                  ; USES:   Flags, fm_strat, fm_umb
 29667                                  ; -----------------------------------------------------------------------------
 29668                                  
 29669                                  HideUMBs:
 29670                                  	push	ax
 29671                                  	push	cx
 29672                                  	push	ds
 29673                                  	push	es
 29674                                  
 29675                                  	call	UmbTest		; See if we REALLY linked in anything...
 29676                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29677                                  
 29678                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29679                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29680                                  
 29681                                  	;putdata fInHigh,1	; Remember that we're now running high
 29682                                  	mov	byte [cs:fInHigh],1
 29683                                  
 29684                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29685                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29686                                  
 29687                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29688                                  	je	short husX	; then we shouldn't do this loop:
 29689                                  
 29690                                  	xor	cx,cx
 29691                                  
 29692                                  ; -----------------------------------------------
 29693                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29694                                  ; -----------------------------------------------
 29695                                  
 29696                                  hus10:	inc	cx		; For each UMB:
 29697                                  	cmp	cx,MAXUMB ; 16
 29698                                  	jae	short hus20
 29699                                  
 29700                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29701                                  	push	es
 29702                                  	call	findUMB		; valid range of UMBs)
 29703                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29704                                  	jc	short hus20
 29705                                  
 29706                                  	call	_hideUMB_	; hide what we need to hide.
 29707                                  
 29708                                  	jmp	short hus10
 29709                                  hus20:	
 29710                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29711                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29712                                  
 29713                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29714                                  	jnz	short husX	; If not, we're done.
 29715                                  
 29716                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29717                                  husX:	
 29718                                  	pop	es
 29719                                  	pop	ds
 29720                                  	pop	cx
 29721                                  	pop	ax
 29722                                  	retn
 29723                                  
 29724                                  ; -----------------------------------------------------------------------------
 29725                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29726                                  ; -----------------------------------------------------------------------------
 29727                                  ; ENTRY:  None
 29728                                  ; EXIT:   AL == load UMB
 29729                                  ; ERROR:  None
 29730                                  ; USES:   Flags, AX
 29731                                  ; -----------------------------------------------------------------------------
 29732                                  
 29733                                  ;GetLoadUMB:
 29734                                  ;	;getdata al, UmbLoad
 29735                                  ;	push	ds
 29736                                  ;	push	cs
 29737                                  ;	pop	ds
 29738                                  ;	mov	al,[UmLoad]
 29739                                  ;	pop	ds
 29740                                  ;	retn
 29741                                  
 29742                                  ; -----------------------------------------------------------------------------
 29743                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29744                                  ; -----------------------------------------------------------------------------
 29745                                  ; ENTRY:  None
 29746                                  ; EXIT:   AX == load UMB minimum size
 29747                                  ; ERROR:  None
 29748                                  ; USES:   Flags, AX
 29749                                  ; -----------------------------------------------------------------------------
 29750                                  
 29751                                  GetLoadSize:
 29752                                  	; 09/04/2019 - Retro DOS v4.0
 29753                                  	mov	al,[cs:UmbLoad]
 29754                                  	jmp	short GetSize
 29755                                  
 29756                                  	;push	bx
 29757                                  	;;push	si
 29758                                  	;push	ds
 29759                                  	;push	cs
 29760                                  	;pop	ds
 29761                                  
 29762                                  	;mov	al,[UmbLoad]
 29763                                  
 29764                                  	;xor	ah,ah			;    ax==UMB
 29765                                  	;mov	bx,UmbSize		;    bx==array
 29766                                  	;shl	al,1	                ;    ax==offset
 29767                                  	;;add	ax,bx			;    ax==element index
 29768                                  	;;mov	si,ax			; ds:si==element index
 29769                                  
 29770                                  	;;lodsw				;    ax==size
 29771                                  
 29772                                  	;add	bx,ax
 29773                                  	;mov	ax,[bx]
 29774                                  
 29775                                  	;pop	ds
 29776                                  	;;pop	si
 29777                                  	;pop	bx
 29778                                  	;retn
 29779                                  
 29780                                  ; -----------------------------------------------------------------------------
 29781                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29782                                  ; -----------------------------------------------------------------------------
 29783                                  ; ENTRY:  AL == a UMB number
 29784                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29785                                  ; ERROR:  None
 29786                                  ; USES:   Flags, AX
 29787                                  ; -----------------------------------------------------------------------------
 29788                                  
 29789                                  GetSize:
 29790                                  	; 09/04/2019 - Retro DOS v4.0
 29791                                  
 29792                                  	push	bx
 29793                                  	;push	si
 29794                                  	;push	ds
 29795                                  	;push	cs
 29796                                  	;pop	ds
 29797                                  
 29798                                  	xor	ah,ah			;    ax==UMB
 29799                                  	mov	bx,UmbSize		;    bx==array
 29800                                  	shl	al,1	                ;    ax==offset
 29801                                  	;add	ax,bx			;    ax==element index
 29802                                  	;mov	si,ax			; ds:si==element index
 29803                                  
 29804                                  	;lodsw				;    ax==size
 29805                                  
 29806                                  	add	bx,ax
 29807                                  	;mov	ax,[bx]
 29808                                  	mov	ax,[cs:bx]
 29809                                  
 29810                                  	;pop	ds
 29811                                  	;pop	si
 29812                                  	pop	bx
 29813                                  	retn
 29814                                  
 29815                                  ; -----------------------------------------------------------------------------
 29816                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29817                                  ; -----------------------------------------------------------------------------
 29818                                  ; ENTRY:   AL == new load UMB
 29819                                  ; EXIT:    None
 29820                                  ; ERROR:   None
 29821                                  ; USES:    Flags, AX
 29822                                  ; -----------------------------------------------------------------------------
 29823                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29824                                  ;          time you would ever need this, so that's okay.
 29825                                  ; -----------------------------------------------------------------------------
 29826                                  
 29827                                  ;StoLoadUMB:
 29828                                  ;	;putdata UmbLoad, al
 29829                                  ;	push	es
 29830                                  ;	push	cs
 29831                                  ;	pop	es
 29832                                  ;	mov	[es:UmbLoad],al
 29833                                  ;	pop	es
 29834                                  ;	retn
 29835                                  
 29836                                  ; -----------------------------------------------------------------------------
 29837                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29838                                  ; -----------------------------------------------------------------------------
 29839                                  ; ENTRY:  AL == new load size
 29840                                  ; EXIT:   None
 29841                                  ; ERROR:  None
 29842                                  ; USES:   Flags, AX
 29843                                  ; -----------------------------------------------------------------------------
 29844                                  
 29845                                  StoLoadSize:
 29846                                  	push	dx
 29847                                  
 29848                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29849                                  	;
 29850                                  	;push	ds
 29851                                  	;push	cs
 29852                                  	;pop	ds
 29853                                  	;mov	dl,[UmbLoad]
 29854                                  	;pop	ds	
 29855                                  
 29856                                  	mov	dl,[cs:UmbLoad]
 29857                                  
 29858                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29859                                  	je	short sls10
 29860                                  
 29861                                  	call	stowSiz			; We've got a function to do just this
 29862                                  sls10:	
 29863                                  	pop	dx
 29864                                  	retn
 29865                                  
 29866                                  ; -----------------------------------------------------------------------------
 29867                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29868                                  ; -----------------------------------------------------------------------------
 29869                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29870                                  ; EXIT:     None; free elements in UMB marked as hidden
 29871                                  ; ERROR:    None
 29872                                  ; USES:     Flags
 29873                                  ; -----------------------------------------------------------------------------
 29874                                  
 29875                                  hideUMB:
 29876                                  	push	ax
 29877                                  	push	es
 29878                                  
 29879                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29880                                  	jc	short huX
 29881                                  
 29882                                  ; ------------------------------------------------
 29883                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29884                                  ;            we're not in the same UMB, so exit.
 29885                                  ; ------------------------------------------------
 29886                                  
 29887                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29888                                  	jz	short huX	; If it is, we've finished the UMB.
 29889                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29890                                  	or	word [es:ARENA.OWNER],0
 29891                                  	jnz	short hu20
 29892                                  
 29893                                  	call	hideMCB
 29894                                  hu20:	
 29895                                  	mov	al,[es:ARENA.SIGNATURE]
 29896                                  	cmp	al,arena_signature_end  ;'Z'
 29897                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29898                                  
 29899                                  	;NextMCB es, ax		; Go on forward.
 29900                                  	mov     ax,es
 29901                                  	;add	ax,[es:3]
 29902                                  	add     ax,[es:ARENA.SIZE]
 29903                                  	inc     ax
 29904                                  	mov     es,ax
 29905                                  
 29906                                  	jmp	short hu10
 29907                                  huX:	
 29908                                  	pop	es
 29909                                  	pop	ax
 29910                                  	retn
 29911                                  
 29912                                  ; -----------------------------------------------------------------------------
 29913                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29914                                  ; -----------------------------------------------------------------------------
 29915                                  ; ENTRY:    None
 29916                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29917                                  ; ERROR:    None
 29918                                  ; USES:     Flags
 29919                                  ; -----------------------------------------------------------------------------
 29920                                  
 29921                                  isTiny:
 29922                                  	push	ax
 29923                                  
 29924                                  	;getdata al, fUmbTiny
 29925                                  	;
 29926                                  	;push	ds
 29927                                  	;push	cs
 29928                                  	;pop	ds
 29929                                  	;mov	al,[fUmbTiny]
 29930                                  	;pop	ds
 29931                                  
 29932                                  	mov	al,[cs:fUmbTiny]		
 29933                                  
 29934                                  	or	al,al
 29935                                  	pop	ax
 29936                                  	retn
 29937                                  
 29938                                  ; -----------------------------------------------------------------------------
 29939                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29940                                  ; -----------------------------------------------------------------------------
 29941                                  ; ENTRY:    ES:0 should point to an MCB
 29942                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29943                                  ; ERROR:    None
 29944                                  ; USES:     Flags
 29945                                  ; -----------------------------------------------------------------------------
 29946                                  
 29947                                  ;isFreeMCB:
 29948                                  ;	or	word [es:ARENA.OWNER],0
 29949                                  ;	retn
 29950                                  
 29951                                  ; -----------------------------------------------------------------------------
 29952                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29953                                  ; -----------------------------------------------------------------------------
 29954                                  ; ENTRY:    ES:0 should point to an MCB
 29955                                  ; EXIT:     None; MCB marked as HIDDEN
 29956                                  ; ERROR:    None
 29957                                  ; USES:     None
 29958                                  ; -----------------------------------------------------------------------------
 29959                                  
 29960                                  hideMCB:
 29961                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29962                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29963                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29964                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29965                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29966                                  	retn
 29967                                  
 29968                                  ; -----------------------------------------------------------------------------
 29969                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29970                                  ; -----------------------------------------------------------------------------
 29971                                  ; ENTRY:    ES:0 should point to an MCB
 29972                                  ; EXIT:     None; MCB marked as FREE
 29973                                  ; ERROR:    None
 29974                                  ; USES:     None
 29975                                  ; -----------------------------------------------------------------------------
 29976                                  
 29977                                  unHideMCB:
 29978                                  	push	ax
 29979                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29980                                  	mov	ax,'  ' ; 2020h
 29981                                  	mov	[es:ARENA.NAME+0],ax
 29982                                  	mov	[es:ARENA.NAME+2],ax
 29983                                  	mov	[es:ARENA.NAME+4],ax
 29984                                  	mov	[es:ARENA.NAME+6],ax
 29985                                  	pop	ax
 29986                                  	retn
 29987                                  
 29988                                  ; -----------------------------------------------------------------------------
 29989                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29990                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29991                                  ; -----------------------------------------------------------------------------
 29992                                  ; ENTRY:    AL should be to a valid UMB number
 29993                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29994                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29995                                  ; USES:     Flags, ES
 29996                                  ; -----------------------------------------------------------------------------
 29997                                  
 29998                                  findUMB:
 29999                                  	push	ax
 30000                                  	push	cx
 30001                                  	push	dx
 30002                                  
 30003                                  	xor	ah,ah		; Zap ah, so al==ax
 30004                                  
 30005                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 30006                                  
 30007                                  	call	UmbHead		; Returns first UMB segment in AX
 30008                                  	mov	es,ax
 30009                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30010                                  
 30011                                  ; ---------------------------------------------
 30012                                  ; FU10--CX - This UMB number; 0 == conventional
 30013                                  ;       DX - The UMB number they're looking for
 30014                                  ;       ES - The current MCB address
 30015                                  ; ---------------------------------------------
 30016                                  
 30017                                  fu10:	
 30018                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30019                                  	je	short fuX	; searching for--so exit.
 30020                                  
 30021                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30022                                  	jnz	short fu20
 30023                                  
 30024                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30025                                  fu20:	
 30026                                  	mov	al,[es:ARENA.SIGNATURE]
 30027                                  	cmp	al,arena_signature_end ; 'Z'
 30028                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30029                                  
 30030                                  	;NextMCB es, ax		; Go on forward.
 30031                                  	mov     ax,es
 30032                                  	;add	ax,[es:3]
 30033                                  	add     ax,[es:ARENA.SIZE]
 30034                                  	inc     ax
 30035                                  	mov     es,ax
 30036                                  
 30037                                  	jmp	short fu10
 30038                                  fuE:	
 30039                                  	stc
 30040                                  fuX:
 30041                                  	pop	dx
 30042                                  	pop	cx
 30043                                  	pop	ax		; The address is already in ES.
 30044                                  	retn
 30045                                  
 30046                                  ; -----------------------------------------------------------------------------
 30047                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30048                                  ; -----------------------------------------------------------------------------
 30049                                  ; ENTRY:    AL should be to a valid UMB number
 30050                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30051                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30052                                  ; USES:     Flags, ES
 30053                                  ; -----------------------------------------------------------------------------
 30054                                  
 30055                                  BigFree:
 30056                                  	push	bx
 30057                                  	push	cx
 30058                                  
 30059                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30060                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30061                                  
 30062                                  	xor	bx,bx			; Segment address of largest free MCB
 30063                                  	xor	cx,cx			; Size of largest free MCB
 30064                                  
 30065                                  ; ---------------------------------------------
 30066                                  ; BF10--ES - Current MCB address
 30067                                  ;       BX - Address of largest free MCB so far
 30068                                  ;       CX - Size of largest free MCB so far
 30069                                  ; ---------------------------------------------
 30070                                  
 30071                                  bf10:	
 30072                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30073                                  	jz	short bf30
 30074                                  
 30075                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30076                                  	or	word [es:ARENA.OWNER],0
 30077                                  	jnz	short bf20
 30078                                  
 30079                                  	mov	ax,[es:ARENA.SIZE]
 30080                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30081                                  	cmp	cx,ax
 30082                                  	jg	short bf20		; Unless we're bigger,
 30083                                  
 30084                                  	mov	bx,es			; Store this new element's address,
 30085                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30086                                  	mov	cx,ax
 30087                                  
 30088                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30089                                  	cmp	al,arena_signature_end	; 'Z'
 30090                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30091                                  
 30092                                  	;NextMCB es,ax		; Go on forward.
 30093                                  	mov     ax,es
 30094                                  	;add	ax,[es:3]
 30095                                  	add     ax,[es:ARENA.SIZE]
 30096                                  	inc     ax
 30097                                  	mov     es,ax
 30098                                  
 30099                                  	jmp	short bf10
 30100                                  
 30101                                  bf30:	mov	es,bx			; Return the address
 30102                                  	mov	ax,cx			; Return the size
 30103                                  	or	bx,bx
 30104                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30105                                  bfE:	
 30106                                  	stc
 30107                                  bfX:
 30108                                  	pop	cx
 30109                                  	pop	bx
 30110                                  	retn
 30111                                  
 30112                                  ; -----------------------------------------------------------------------------
 30113                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30114                                  ; -----------------------------------------------------------------------------
 30115                                  ; ENTRY:    AL should be to a valid UMB number
 30116                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30117                                  ; ERROR:    None
 30118                                  ; USES:     Flags
 30119                                  ; -----------------------------------------------------------------------------
 30120                                  
 30121                                  isSpecified:
 30122                                  	push	ax
 30123                                  
 30124                                  	xor	bh,bh
 30125                                  	mov	bl,al
 30126                                  
 30127                                  	;getdata al, DS:UmbUsed[bx]
 30128                                  	;
 30129                                  	;push	ds
 30130                                  	;push	cs
 30131                                  	;pop	ds
 30132                                  	;mov	al,[bx+UmbUsed]
 30133                                  	;pop	ds
 30134                                  	
 30135                                  	mov	al,[cs:bx+UmbUsed]
 30136                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30137                                  
 30138                                  	pop	ax
 30139                                  	retn
 30140                                  
 30141                                  ; -----------------------------------------------------------------------------
 30142                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30143                                  ; -----------------------------------------------------------------------------
 30144                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30145                                  ; EXIT:     None; MCB broken if carry clear
 30146                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30147                                  ; USES:     Flags
 30148                                  ; -----------------------------------------------------------------------------
 30149                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30150                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30151                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30152                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30153                                  ; minimum for performing a split.
 30154                                  ; -----------------------------------------------------------------------------
 30155                                  
 30156                                  MIN_SPLIT_SIZE	equ	20h
 30157                                  
 30158                                  shrinkMCB:
 30159                                  	;pushreg <bx, cx, es>
 30160                                  	push	bx
 30161                                  	push	cx
 30162                                  	push	es
 30163                                  
 30164                                  	mov	bx,ax			; Move things around... and
 30165                                  	mov	ax,es			; save this one for later.
 30166                                  
 30167                                  	mov	cx,[es:ARENA.SIZE]
 30168                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30169                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30170                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30171                                  	; 18/12/2022
 30172                                  	cmp	cx,bx
 30173                                  	jb	short smE ; (*)
 30174                                  
 30175                                  	mov	dl,[es:ARENA.SIGNATURE]
 30176                                  	mov	cx,[es:ARENA.SIZE]
 30177                                  
 30178                                  	mov	[es:ARENA.SIZE],bx
 30179                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30180                                  
 30181                                  	add	ax,bx
 30182                                  	inc	ax
 30183                                  	mov	es,ax			; Move to new arena area
 30184                                  
 30185                                  	mov	ax,cx
 30186                                  	sub	ax,bx
 30187                                  	; 12/12/2022
 30188                                  	; ax > 0
 30189                                  	dec	ax			; And prepare the new size
 30190                                  
 30191                                  	; 18/12/2022
 30192                                  	mov	[es:ARENA.SIGNATURE],dl
 30193                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30194                                  	mov	[es:ARENA.SIZE],ax
 30195                                  	;mov	ax,'  ' ; 2020h
 30196                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30197                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30198                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30199                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30200                                  
 30201                                  	; 18/12/2022
 30202                                  	call	freeMCB	; (**)
 30203                                  
 30204                                  	; 12/12/2022
 30205                                  	; cf=0
 30206                                  	;clc
 30207                                  	; 18/12/2022
 30208                                  	;jmp	short smX
 30209                                  smE:	
 30210                                  	; 18/12/2022
 30211                                  	; cf=1 (*)
 30212                                  	;stc
 30213                                  smX:	
 30214                                  	;popreg	<es, cx, bx>
 30215                                  	pop	es
 30216                                  	pop	cx
 30217                                  	pop	bx
 30218                                  	retn
 30219                                  
 30220                                  ; -----------------------------------------------------------------------------
 30221                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30222                                  ; -----------------------------------------------------------------------------
 30223                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30224                                  ; EXIT:     None; UMB is hidden as necessary
 30225                                  ; ERROR:    None
 30226                                  ; USES:     Flags, AX, CX
 30227                                  ; -----------------------------------------------------------------------------
 30228                                  ; PRIMARY LOGIC:
 30229                                  ;
 30230                                  ; If the UMB is specified in the DH/LH statement, then:
 30231                                  ;    If the largest free segment is too small (check specified size), then:
 30232                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30233                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30234                                  ;       If /S was given on the command-line, then:
 30235                                  ;          Break that element into two pieces
 30236                                  ;          Set a flag that we're shrinking
 30237                                  ;       Endif
 30238                                  ;    Endif
 30239                                  ; Endif
 30240                                  ; If the UMB is NOT specified (or was removed by the above):
 30241                                  ;    Hide all free elements in the UMB
 30242                                  ;    If the flag that we're shrinking was set, then:
 30243                                  ;       UN-hide the lower portion of the shrunken UMB
 30244                                  ;    ENDIF
 30245                                  ; ENDIF
 30246                                  ; -----------------------------------------------------------------------------
 30247                                  
 30248                                  _hideUMB_:
 30249                                  	push	bx
 30250                                  	push	dx
 30251                                  	push	es
 30252                                  
 30253                                  	mov	al,cl
 30254                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30255                                  	jz	short hu_20
 30256                                  
 30257                                  	mov	al,cl		; Retrieve the size of the largest
 30258                                  	call	BigFree		; free element in AX; put its address in ES
 30259                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30260                                  
 30261                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30262                                  	mov	al,cl		; Retrieve the user's specified
 30263                                  	call	GetSize		; minimum size for this umb (into AX)
 30264                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30265                                  
 30266                                  	or	ax,ax		; If they didn't specify one,
 30267                                  	jz	short hu_20	; Skip over all this.
 30268                                  
 30269                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30270                                  	jbe	short hu_10
 30271                                  
 30272                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30273                                  	call	unMarkUMB
 30274                                  	jmp	short hu_20
 30275                                  hu_10:	
 30276                                  	call	isTiny		; Returns ZF clear if user specified /S
 30277                                  	jz	short hu_20
 30278                                  
 30279                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30280                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30281                                  
 30282                                  	mov	dx,es
 30283                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30284                                  
 30285                                  hu_20:	mov	ax,cx
 30286                                  	call	isSpecified	; If they specified this UMB, we're done...
 30287                                  	jnz	short hu_X	; so leave.
 30288                                  
 30289                                  	xor	dx,dx
 30290                                  hu_30:	
 30291                                  	mov	al,cl
 30292                                  
 30293                                  	call	hideUMB		; Hides everything in UMB #al
 30294                                  
 30295                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30296                                  	jz	short hu_X	; So we should leave.
 30297                                  
 30298                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30299                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30300                                  hu_X:	
 30301                                  	pop	es
 30302                                  	pop	dx
 30303                                  	pop	bx
 30304                                  	retn
 30305                                  
 30306                                  ; -----------------------------------------------------------------------------
 30307                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  ; Entry:  None
 30310                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30311                                  ; Error:  None
 30312                                  ; Uses:   Flags
 30313                                  ; -----------------------------------------------------------------------------
 30314                                  
 30315                                  UnFreeze:
 30316                                  	push	ax
 30317                                  	push	es
 30318                                  
 30319                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30320                                  	jc	short ufX
 30321                                  
 30322                                  	mov	es,ax
 30323                                  
 30324                                  ; ------------------------------
 30325                                  ; UF10--ES - Current MCB address
 30326                                  ; ------------------------------
 30327                                  
 30328                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30329                                  	jnz	short uf20
 30330                                  	call	unHideMCB
 30331                                  uf20:	
 30332                                  	mov	al,[es:ARENA.SIGNATURE]
 30333                                  
 30334                                  	cmp	al,arena_signature_end ; 'Z'
 30335                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30336                                  
 30337                                  	;NextMCB es, ax		; Go on forward.
 30338                                  	mov     ax,es
 30339                                  	;add	ax,[es:3]
 30340                                  	add     ax,[es:ARENA.SIZE]
 30341                                  	inc     ax
 30342                                  	mov     es,ax
 30343                                  
 30344                                  	jmp	short uf10
 30345                                  ufX:	
 30346                                  	pop	es
 30347                                  	pop	ax
 30348                                  	retn
 30349                                  
 30350                                  ; -----------------------------------------------------------------------------
 30351                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30352                                  ; -----------------------------------------------------------------------------
 30353                                  ; ENTRY:    ES:0 should point to an MCB
 30354                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30355                                  ; ERROR:    None
 30356                                  ; USES:     Flags
 30357                                  ; -----------------------------------------------------------------------------
 30358                                  
 30359                                  isFrozMCB:
 30360                                  	;push	ax
 30361                                  
 30362                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30363                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30364                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30365                                  	jne	short ifmX
 30366                                  
 30367                                  	;mov	ax,[es:ARENA.NAME+0]
 30368                                  	;cmp	ax,'FR' ; 5246h
 30369                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30370                                  	jne	short ifmX
 30371                                  	;mov	ax,[es:ARENA.NAME+2]
 30372                                  	;cmp	ax,'OZ' ; 5A4Fh
 30373                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30374                                  	jne	short ifmX
 30375                                  	;mov	ax,[es:ARENA.NAME+4]
 30376                                  	;cmp	ax,'EN' ; 4E45h
 30377                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30378                                  	jne	short ifmX
 30379                                  	;mov	ax,[es:ARENA.NAME+6]
 30380                                  	;cmp	ax,'  ' ; 2020h
 30381                                  	cmp	word [es:ARENA.NAME+6],'  '
 30382                                  ifmX:	
 30383                                  	;pop	ax
 30384                                  	retn
 30385                                  
 30386                                  ; -----------------------------------------------------------------------------
 30387                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30388                                  ; -----------------------------------------------------------------------------
 30389                                  ; ENTRY:    ES:0 should point to an MCB
 30390                                  ; EXIT:     None; MCB frozen
 30391                                  ; ERROR:    None
 30392                                  ; USES:     None
 30393                                  ; -----------------------------------------------------------------------------
 30394                                  
 30395                                  frezMCB:
 30396                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30397                                  	mov	word [es:ARENA.NAME+0],'FR'
 30398                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30399                                  	mov	word [es:ARENA.NAME+4],'EN'
 30400                                  	mov	word [es:ARENA.NAME+6],'  '
 30401                                  	retn
 30402                                  
 30403                                  ; -----------------------------------------------------------------------------
 30404                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30405                                  ; -----------------------------------------------------------------------------
 30406                                  ; Entry:  None
 30407                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30408                                  ; Error:  None
 30409                                  ; Uses:   Flags
 30410                                  ; -----------------------------------------------------------------------------
 30411                                  
 30412                                  FreezeUM:
 30413                                  	push	ax
 30414                                  	push	cx
 30415                                  	push	dx
 30416                                  	push	es
 30417                                  
 30418                                  	;call	GetLoadUMB
 30419                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30420                                  
 30421                                  	xor	ah,ah		; Zap ah, so al==ax
 30422                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30423                                  
 30424                                  	call	UmbHead		; Returns first UMB segment in AX
 30425                                  	mov	es,ax
 30426                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30427                                  
 30428                                  ; -----------------------------------------
 30429                                  ; FUM10--ES - Current MCB address
 30430                                  ;        CX - Current UMB number
 30431                                  ;        DX - UMB number to skip (load UMB)
 30432                                  ; -----------------------------------------
 30433                                  
 30434                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30435                                  	jnz	short fum20
 30436                                  
 30437                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30438                                  fum20:	
 30439                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30440                                  	je	short fum30	; freeze anything... so skip that section.
 30441                                  
 30442                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30443                                  	or	word [es:ARENA.OWNER],0
 30444                                  	jnz	short fum30	; either.
 30445                                  
 30446                                  	call	frezMCB
 30447                                  fum30:	
 30448                                  	mov	al,[es:ARENA.SIGNATURE]
 30449                                  	cmp	al,arena_signature_end ; 'Z'
 30450                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30451                                  
 30452                                  	;NextMCB es, ax		; Go on forward.
 30453                                  	mov     ax,es
 30454                                  	;add	ax,[es:3]
 30455                                  	add     ax,[es:ARENA.SIZE]
 30456                                  	inc     ax
 30457                                  	mov     es,ax
 30458                                  	
 30459                                  	jmp	short fum10
 30460                                  
 30461                                  fumX:	pop	es
 30462                                  	pop	dx
 30463                                  	pop	cx
 30464                                  	pop	ax
 30465                                  	retn
 30466                                  
 30467                                  ; -----------------------------------------------------------------------------
 30468                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30469                                  ; -----------------------------------------------------------------------------
 30470                                  ; ENTRY:    None
 30471                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30472                                  ; ERROR:    None
 30473                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30474                                  ; -----------------------------------------------------------------------------
 30475                                  
 30476                                  UmbTest:
 30477                                  	push	ax
 30478                                  	push	bx
 30479                                  	push	ds
 30480                                  	push	es
 30481                                  
 30482                                  	call	fm_link			; Link in UMBs (if not already linked)
 30483                                  	call	WalkMem			; Check to see if they're really linked
 30484                                  	pushf				; And remember what we found out
 30485                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30486                                  	popf				; And restore what we found out.
 30487                                  
 30488                                  	pop	es
 30489                                  	pop	ds
 30490                                  	pop	bx
 30491                                  	pop	ax
 30492                                  	retn
 30493                                  
 30494                                  ; -----------------------------------------------------------------------------
 30495                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30496                                  ; -----------------------------------------------------------------------------
 30497                                  ; ENTRY:    None
 30498                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30499                                  ; ERROR:    None
 30500                                  ; USES:     Flags
 30501                                  ; -----------------------------------------------------------------------------
 30502                                  
 30503                                  WalkMem:
 30504                                  	push	ax ; ?
 30505                                  	push	bx ; ?
 30506                                  	push	es ; ? no need to save contents of these registers ?
 30507                                  		   	
 30508                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30509                                  	int	21h
 30510                                  
 30511                                  	mov	ax,[es:bx-2]
 30512                                  	mov	es,ax
 30513                                  
 30514                                  ; ------------------------------
 30515                                  ; UM10: ES = Current MCB pointer
 30516                                  ; ------------------------------
 30517                                  
 30518                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30519                                  	cmp	al,arena_signature_end ;  'Z'
 30520                                  	je	short um20		; If signature == 'Z', hay no more.
 30521                                  
 30522                                  	;NextMCB es, bx			; Move to the next MCB
 30523                                  
 30524                                  	mov     bx,es
 30525                                  	;add	bx,[es:3]
 30526                                  	add     bx,[es:ARENA.SIZE]
 30527                                  	inc     bx
 30528                                  	mov     es,bx
 30529                                  		
 30530                                  	jmp	short um10		; And restart the loop.
 30531                                  um20:	
 30532                                  	mov	ax,es
 30533                                  
 30534                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30535                                  
 30536                                  	pop	es ; ?
 30537                                  	pop	bx ; ?
 30538                                  	pop	ax ; ?
 30539                                  	retn
 30540                                  
 30541                                  ; -----------------------------------------------------------------------------
 30542                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30543                                  ; -----------------------------------------------------------------------------
 30544                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30545                                  ; EXIT:     None
 30546                                  ; ERROR:    None
 30547                                  ; USES:     AX, BX
 30548                                  ; -----------------------------------------------------------------------------
 30549                                  
 30550                                  hl_unlink:
 30551                                  	xor	bh,bh
 30552                                  
 30553                                  	;getdata bl,fm_umb		; Restore original link-state
 30554                                  	;
 30555                                  	;push	ds
 30556                                  	;push	cs
 30557                                  	;pop	ds
 30558                                  	;mov	bl,[fm_umb]
 30559                                  	;pop	ds
 30560                                  
 30561                                  	mov	bl,[cs:fm_umb]
 30562                                  
 30563                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30564                                  	int	21h
 30565                                  	retn
 30566                                  
 30567                                  ; ----------------------------------------------------------------------
 30568                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30569                                  ; ----------------------------------------------------------------------
 30570                                  ; 09/04/2019 - Retro DOS v4.0
 30571                                  
 30572                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30573                                  ;   Date:     May 14, 1992
 30574                                  
 30575                                  ;   Modification log:
 30576                                  ;
 30577                                  ;     DATE    WHO      DESCRIPTION
 30578                                  ;   --------  -------  --------------------------------------------------------
 30579                                  ;   05/14/92  t-richj  Original
 30580                                  ;   06/21/92  t-richj  Final revisions before check-in
 30581                                  
 30582                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30583                                  
 30584                                  ; -----------------------------------------------------------------------------
 30585                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30586                                  ; -----------------------------------------------------------------------------
 30587                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30588                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30589                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30590                                  ; ERROR:  None
 30591                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30592                                  ; -----------------------------------------------------------------------------
 30593                                  
 30594                                  UnHideUMBs:
 30595                                  	push	ax		; Save ax for what we're about to do
 30596                                  
 30597                                  ; -----------------------------------------------------------------------------
 30598                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30599                                  ;    length of time. Those six constitute a check of whether or not we should
 30600                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30601                                  ;    will destroy the current link-state and memory-allocation strategy after
 30602                                  ;    every command execution.
 30603                                  ; -----------------------------------------------------------------------------
 30604                                  
 30605                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30606                                  	;
 30607                                  	;push	ds
 30608                                  	;push	cs
 30609                                  	;pop	ds
 30610                                  	;mov	al,[fInHigh]
 30611                                  	;pop	ds	
 30612                                  
 30613                                  	mov	al,[cs:fInHigh]
 30614                                  
 30615                                  	or	al,al
 30616                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30617                                  
 30618                                  	pop	ax		; then there's nothing to do here... so
 30619                                  	stc			; restore everything and return. Just like
 30620                                  	retn			; that.
 30621                                  uhu10:	
 30622                                  	call	linkumb		; Make sure UMBs are linked in.
 30623                                  	call	FreeUMBs
 30624                                  
 30625                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30626                                  	;
 30627                                  	;push	es
 30628                                  	;push	cs
 30629                                  	;pop	es
 30630                                  	;mov	byte [es:fInHigh],0
 30631                                  	;pop	ds	
 30632                                  
 30633                                  	mov	byte [cs:fInHigh],0	
 30634                                  
 30635                                  	call	he_unlink	; Unlink UMBs
 30636                                  
 30637                                  	pop	ax
 30638                                  	; 12/12/2022
 30639                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30640                                  	retn
 30641                                  
 30642                                  ; -----------------------------------------------------------------------------
 30643                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30644                                  ; -----------------------------------------------------------------------------
 30645                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30646                                  ; EXIT:     None
 30647                                  ; ERROR:    None
 30648                                  ; USES:     AX, BX
 30649                                  ; -----------------------------------------------------------------------------
 30650                                  
 30651                                  he_unlink:
 30652                                  	xor	bh, bh
 30653                                  
 30654                                  	;getdata bl, fm_umb	; Restore original link-state
 30655                                  	mov	bl,[cs:fm_umb]	
 30656                                  
 30657                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30658                                  	int	21h
 30659                                  	retn
 30660                                  
 30661                                  ; -----------------------------------------------------------------------------
 30662                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30663                                  ; -----------------------------------------------------------------------------
 30664                                  ; ENTRY:    None
 30665                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30666                                  ; ERROR:    None (ignore CF)
 30667                                  ; USES:     Flags
 30668                                  ; -----------------------------------------------------------------------------
 30669                                  
 30670                                  FreeUMBs:
 30671                                  	push	ax
 30672                                  	push	es
 30673                                  
 30674                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30675                                  	jc	short fusX
 30676                                  
 30677                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30678                                  fus10:	
 30679                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30680                                  	jnz	short fus20
 30681                                  	call	freeMCB
 30682                                  fus20:	   
 30683                                  	mov	al,[es:ARENA.SIGNATURE]
 30684                                  	cmp	al,arena_signature_end ; 'Z'
 30685                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30686                                  
 30687                                  	mov	ax,es
 30688                                  	add	ax,[es:ARENA.SIZE]
 30689                                  	inc	ax
 30690                                  	mov	es,ax		; Go on forward.
 30691                                  
 30692                                  	jmp	short fus10
 30693                                  fusX:	
 30694                                  	pop	es
 30695                                  	pop	ax
 30696                                  	retn
 30697                                  
 30698                                  ; -----------------------------------------------------------------------------
 30699                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30700                                  ; -----------------------------------------------------------------------------
 30701                                  ; ENTRY:    ES:0 should point to an MCB
 30702                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30703                                  ; ERROR:    None
 30704                                  ; USES:     Flags
 30705                                  ; -----------------------------------------------------------------------------
 30706                                  
 30707                                  isHideMCB:
 30708                                  	;push	ax
 30709                                  
 30710                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30711                                  	jne	short ihm_x				; then check for HIDDEN
 30712                                  
 30713                                  	;mov	ax,[es:ARENA.NAME]
 30714                                  	;cmp	ax,'HI' ; 4948h
 30715                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30716                                  	jne	short ihm_x
 30717                                  	;mov	ax,[es:ARENA.NAME+2]
 30718                                  	;cmp	ax,'DD' ; 4444h
 30719                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30720                                  	jne	short ihm_x
 30721                                  	;mov	ax,[es:ARENA.NAME+4]
 30722                                  	;cmp	ax,'EN' ; 4E45h
 30723                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30724                                  	jne	short ihm_x
 30725                                  	;mov	ax,[es:ARENA.NAME+6]
 30726                                  	;cmp	ax,'  ' ; 2020h
 30727                                  	cmp	word [es:ARENA.NAME+6],'  '
 30728                                  ihm_x:	
 30729                                  	;pop	ax
 30730                                  	retn
 30731                                  
 30732                                  ; -----------------------------------------------------------------------------
 30733                                  ;*** freeMCB - marks as free the MCB at ES:0
 30734                                  ; -----------------------------------------------------------------------------
 30735                                  ; ENTRY:    ES:0 should point to an MCB
 30736                                  ; EXIT:     None; MCB free'd
 30737                                  ; ERROR:    None
 30738                                  ; USES:     AX
 30739                                  ; -----------------------------------------------------------------------------
 30740                                  
 30741                                  freeMCB:
 30742                                  	mov	word [es:ARENA.OWNER],0
 30743                                  	mov	ax,'  '
 30744                                  	mov	[es:ARENA.NAME+0],ax
 30745                                  	mov	[es:ARENA.NAME+2],ax
 30746                                  	mov	[es:ARENA.NAME+4],ax
 30747                                  	mov	[es:ARENA.NAME+6],ax
 30748                                  	retn
 30749                                  
 30750                                  ; -----------------------------------------------------------------------------
 30751                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30752                                  ; -----------------------------------------------------------------------------
 30753                                  ; ENTRY:  Nothing
 30754                                  ; EXIT:   AX contains 0x9FFF for most systems
 30755                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30756                                  ; USES:   Flags, AX
 30757                                  ; -----------------------------------------------------------------------------
 30758                                  
 30759                                  HeadUmb:
 30760                                  	; 13/05/2019
 30761                                  
 30762                                  	;push	si ; ?
 30763                                  	;push	ds ; ?
 30764                                  	;push	es
 30765                                  	;push	bx ; *
 30766                                  
 30767                                  	; 09/04/2019
 30768                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30769                                  
 30770                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30771                                  	int	21h
 30772                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30773                                  			; Return: ES:BX -> DOS list of lists
 30774                                  	;mov	ax,[es:8Ch]
 30775                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30776                                  	cmp	ax,0FFFFh
 30777                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30778                                  
 30779                                  	;clc				; Else, it isn't.
 30780                                  	;jmp	short xhu_x
 30781                                  xhu_e:	
 30782                                  	;stc
 30783                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30784                                  xhu_x:	
 30785                                  	;pop	bx ; *
 30786                                  	;pop	es	
 30787                                  	;pop	ds ; ?
 30788                                  	;pop	si ; ?
 30789                                  	retn
 30790                                  
 30791                                  ; -----------------------------------------------------------------------------
 30792                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30793                                  ; -----------------------------------------------------------------------------
 30794                                  ; ENTRY:    None
 30795                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30796                                  ; ERROR:    None
 30797                                  ; USES:     AX, BX, fm_umb
 30798                                  ; -----------------------------------------------------------------------------
 30799                                  
 30800                                  linkumb:
 30801                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30802                                  	int	21h			; Current link-state is now in al
 30803                                  
 30804                                  	or	al,al			; BUGBUG: proper check?
 30805                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30806                                  
 30807                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30808                                  	mov	bx,1
 30809                                  	int	21h
 30810                                  lumbX:
 30811                                  	retn
 30812                                  
 30813                                  %endif
 30814                                  
 30815                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30816                                  ; (SYSINIT:2B5Fh)
 30817                                  
 30818                                  ; ----------------------------------------------------------------------
 30819                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30820                                  ; ----------------------------------------------------------------------
 30821                                  ; 09/04/2019 - Retro DOS v4.0
 30822                                  
 30823                                  ;----------------------------------------------------------------------------
 30824                                  ;
 30825                                  ; procedure : InitDevLoad
 30826                                  ;
 30827                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30828                                  ;			 = 1 indicates load in UMB:
 30829                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30830                                  ;		                    = 1 indicates a DOS 5-style load
 30831                                  ;		DevSize  = Size of the device driver file in paras
 30832                                  ;
 30833                                  ;	Output : none
 30834                                  ;
 30835                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30836                                  ;	Also sets up a header for the Device driver entry for mem utility
 30837                                  ;
 30838                                  ;----------------------------------------------------------------------------
 30839                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30840                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30841                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30842                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30843                                  ;----------------------------------------------------------------------------
 30844                                  
 30845                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30846                                  InitDevLoad:
 30847                                  	; 11/12/2022
 30848                                  	; ds = cs
 30849 00002802 803E[F11E]00            	cmp	byte [DeviceHi],0
 30850                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30851                                  	;je	short InitForLo		; no, init for lo mem
 30852 00002807 741F                    	je	short initforlo_x ; 09/04/2019
 30853                                  
 30854                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30855                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30856                                  ;	je	short InitForConv
 30857                                  ;
 30858                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30859                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30860                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30861                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30862                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30863                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30864                                  ;
 30865                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30866                                  ;
 30867                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30868                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30869                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30870                                  ;	pushf
 30871                                  ;	call	UnFreeze		; Then unhide everything frozen
 30872                                  ;	popf
 30873                                  ;
 30874                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30875                                  ;
 30876                                  ;	jmp	short InitForHi
 30877                                  
 30878                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30879                                  	; (SYSINIT:2B67h)
 30880                                  InitForConv:
 30881                                  	; 11/12/2022
 30882                                  	; ds = cs
 30883 00002809 E83700                  	call	SpaceInUMB		; Do we have space left in the
 30884                                  					;  current UMB ?
 30885 0000280C 7308                    	jnc	short InitForHi		; yes, we have
 30886 0000280E E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30887 00002811 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30888 00002814 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30889                                  					;  in low memory
 30890                                  InitForHi:
 30891                                  	; 11/12/2022
 30892                                  	; ds = cs
 30893                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30894                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30895                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30896 00002816 A1[E71E]                	mov	ax,[DevUMBFree]
 30897 00002819 8B16[E31E]              	mov	dx,[DevUMBAddr]
 30898 0000281D 0316[E51E]              	add	dx,[DevUMBSize]
 30899 00002821 EB0C                    	jmp	short idl1
 30900                                  
 30901                                  InitForLo:
 30902                                  	; 11/12/2022
 30903                                  	; ds = cs
 30904                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30905 00002823 C606[F11E]00            	mov	byte [DeviceHi],0
 30906                                  initforlo_x:
 30907                                  	; 11/12/2022
 30908                                  	; ds = cs
 30909                                  					;  into UMB indicate that
 30910                                  					;  we are loading low
 30911                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30912                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30913 00002828 A1[E003]                	mov	ax,[memhi]
 30914 0000282B 8B16[A302]              	mov	dx,[ALLOCLIM]
 30915                                  idl1:
 30916 0000282F E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30917                                  	; 11/12/2022
 30918                                  	; ds = cs
 30919                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30920                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30921                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30922                                  	;mov	[cs:DevEntry+2],ax
 30923 00002832 A3[D61E]                	mov	[DevLoadAddr],ax
 30924 00002835 8916[D81E]              	mov	[DevLoadEnd],dx
 30925 00002839 C706[DA1E]0000          	mov	word [DevEntry],0
 30926 0000283F A3[DC1E]                	mov	[DevEntry+2],ax
 30927 00002842 C3                      	retn
 30928                                  
 30929                                  ;----------------------------------------------------------------------------
 30930                                  ;
 30931                                  ; procedure : SpaceInUMB?
 30932                                  ;
 30933                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30934                                  ;	Output : Carry set if no space in UMB
 30935                                  ;		 Carry clear if Space is available for the device in
 30936                                  ;		   current UMB
 30937                                  ;
 30938                                  ;----------------------------------------------------------------------------
 30939                                  
 30940                                  SpaceInUMB:
 30941                                  	; 11/12/2022
 30942                                  	; ds = cs
 30943                                  	;mov	ax,[cs:DevUMBSize]
 30944                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30945                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30946 00002843 A1[E51E]                	mov	ax,[DevUMBSize]
 30947 00002846 0306[E31E]              	add	ax,[DevUMBAddr]		; End of UMB
 30948 0000284A 2B06[E71E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30949                                  	; 11/12/2022
 30950                                  	;or	ax,ax			; Nospace ?
 30951                                  	;jnz	short spcinumb1
 30952                                  	;stc
 30953                                  	;retn
 30954                                  	; 11/12/2022
 30955 0000284E 83F801                  	cmp	ax,1
 30956 00002851 7205                    	jb	short spcinumb2	; cf=1
 30957                                  spcinumb1:
 30958 00002853 48                      	dec	ax			; space for sub-arena
 30959                                  	; 11/12/2022
 30960                                  	; ds = cs
 30961 00002854 3B06[D41E]              	cmp	ax,[DevSize]
 30962                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30963                                  spcinumb2:
 30964 00002858 C3                      	retn
 30965                                  
 30966                                  ;----------------------------------------------------------------------------
 30967                                  ;
 30968                                  ; procedure : PrepareMark
 30969                                  ;
 30970                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30971                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30972                                  ;
 30973                                  ;----------------------------------------------------------------------------
 30974                                  
 30975                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30976                                  ;
 30977                                  ;PrepareMark:
 30978                                  ;	push	ds
 30979                                  ;	mov	ds,ax
 30980                                  ;	mov	word [ARENA.OWNER],8
 30981                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30982                                  ;	pop	ds
 30983                                  ;
 30984                                  ;	inc	ax
 30985                                  ;	mov	[cs:DevUMBAddr],ax
 30986                                  ;	mov	[cs:DevUMBFree],ax
 30987                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30988                                  ;	retn
 30989                                  
 30990                                  ;----------------------------------------------------------------------------
 30991                                  ;
 30992                                  ; procedure : GetUMBForDev
 30993                                  ;
 30994                                  ;	Input : DevSize
 30995                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30996                                  ;		 the device.
 30997                                  ;		 If success carry clear
 30998                                  ;
 30999                                  ;	Allocates the biggest UMB for loading devices and updates
 31000                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31001                                  ;	UMB.
 31002                                  ;
 31003                                  ;	This routine relies on the fact that all of the low memory
 31004                                  ;	is allocated, and any DOS alloc calls should return memory
 31005                                  ;	from the UMB pool.
 31006                                  ;
 31007                                  ;----------------------------------------------------------------------------
 31008                                  
 31009                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31010                                  	; (SYSINIT:2BC6h)
 31011                                  
 31012                                  GetUMBForDev:
 31013                                  	; 11/12/2022
 31014                                  	; ds = cs
 31015 00002859 BBFFFF                  	mov	bx,0FFFFh
 31016 0000285C B80048                  	mov	ax,4800h
 31017 0000285F CD21                    	int	21h
 31018                                  		; DOS - 2+ - ALLOCATE MEMORY
 31019                                  		; BX = number of 16-byte paragraphs desired
 31020                                  
 31021 00002861 09DB                    	or	bx,bx
 31022 00002863 742C                    	jz	short gufd_err
 31023                                  
 31024 00002865 4B                      	dec	bx
 31025                                  	; 11/12/2022
 31026                                  	; ds = cs
 31027 00002866 391E[D41E]              	cmp	[DevSize],bx
 31028                                  	;cmp	[cs:DevSize],bx
 31029 0000286A 7725                    	ja	short gufd_err
 31030 0000286C 43                      	inc	bx
 31031                                  
 31032 0000286D B80048                  	mov	ax,4800h
 31033 00002870 CD21                    	int	21h
 31034 00002872 721D                    	jc	short gufd_err
 31035                                  
 31036                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31037                                  	;dec	ax
 31038                                  	;call	PrepareMark
 31039                                  	;
 31040                                  PrepareMark:
 31041 00002874 1E                      	push	ds
 31042 00002875 48                      	dec	ax
 31043 00002876 8ED8                    	mov	ds,ax
 31044 00002878 C70601000800            	mov	word [ARENA.OWNER],8
 31045 0000287E C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31046 00002884 40                      	inc	ax
 31047 00002885 1F                      	pop	ds
 31048                                  	; 11/12/2022
 31049                                  	; ds = cs
 31050                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31051                                  	;mov	[cs:DevUMBAddr],ax
 31052                                  	;mov	[cs:DevUMBFree],ax
 31053 00002886 891E[E51E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31054 0000288A A3[E31E]                	mov	[DevUMBAddr],ax
 31055 0000288D A3[E71E]                	mov	[DevUMBFree],ax
 31056                                  	;
 31057                                  	; 11/12/2022
 31058                                  	; cf=0
 31059                                  	;clc				; mark no error
 31060 00002890 C3                      	retn
 31061                                  gufd_err:
 31062 00002891 31C0                    	xor	ax,ax ; 0
 31063                                  	; 11/12/2022
 31064                                  	; ds = cs
 31065                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31066                                  	;mov	[cs:DevUMBAddr],ax
 31067                                  	;mov	[cs:DevUMBFree],ax
 31068 00002893 A3[E51E]                	mov	[DevUMBSize],ax		; erase the previous values
 31069 00002896 A3[E31E]                	mov	[DevUMBAddr],ax
 31070 00002899 A3[E71E]                	mov	[DevUMBFree],ax
 31071 0000289C F9                      	stc
 31072 0000289D C3                      	retn
 31073                                  
 31074                                  ;----------------------------------------------------------------------------
 31075                                  ;
 31076                                  ; procedure : DevSetMark
 31077                                  ;
 31078                                  ;	Input : AX - Free segment were device is going to be loaded
 31079                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31080                                  ;
 31081                                  ;	Creates a sub-arena for the device driver
 31082                                  ;	puts 'D' marker in the sub-arena
 31083                                  ;	Put the owner of the sub-arena as (AX+1)
 31084                                  ;	Copies the file name into sub-arena name field
 31085                                  ;
 31086                                  ;	Size field of the sub-arena will be set only at succesful
 31087                                  ;	completion of Device load.
 31088                                  ;
 31089                                  ;----------------------------------------------------------------------------
 31090                                  
 31091                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31092                                  	; (SYSINIT:2C13h)
 31093                                  
 31094                                  DevSetMark:
 31095 0000289E 06                      	push	es
 31096 0000289F 57                      	push	di
 31097 000028A0 1E                      	push	ds
 31098 000028A1 56                      	push	si
 31099 000028A2 8EC0                    	mov	es,ax
 31100 000028A4 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31101 000028AA 40                      	inc	ax
 31102 000028AB 26A30100                	mov	[es:devmark.seg],ax
 31103                                  
 31104                                  ;-------------- Copy file name
 31105                                  
 31106 000028AF 50                      	push	ax			; save load addr
 31107 000028B0 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 31108                                  
 31109 000028B5 89F7                    	mov	di,si
 31110 000028B7 FC                      	cld
 31111                                  dsm_again:
 31112 000028B8 AC                      	lodsb
 31113 000028B9 3C3A                    	cmp	al,':'
 31114 000028BB 7504                    	jne	short isit_slash
 31115 000028BD 89F7                    	mov	di,si
 31116 000028BF EBF7                    	jmp	short dsm_again
 31117                                  isit_slash:
 31118 000028C1 3C5C                    	cmp	al, '\'
 31119 000028C3 7504                    	jne	short isit_null
 31120 000028C5 89F7                    	mov	di,si
 31121 000028C7 EBEF                    	jmp	short dsm_again
 31122                                  isit_null:
 31123 000028C9 08C0                    	or	al,al
 31124 000028CB 75EB                    	jnz	short dsm_again
 31125 000028CD 89FE                    	mov	si,di
 31126                                  
 31127 000028CF BF0800                  	mov	di,devmark.filename ; 8
 31128 000028D2 B90800                  	mov	cx,8			; maximum 8 characters
 31129                                  dsm_next_char:
 31130 000028D5 AC                      	lodsb
 31131 000028D6 08C0                    	or	al, al
 31132 000028D8 7407                    	jz	short blankout
 31133 000028DA 3C2E                    	cmp	al, '.'
 31134 000028DC 7403                    	je	short blankout
 31135 000028DE AA                      	stosb
 31136 000028DF E2F4                    	loop	dsm_next_char
 31137                                  blankout:
 31138 000028E1 E304                    	jcxz	dsm_exit
 31139 000028E3 B020                    	mov	al, ' '
 31140 000028E5 F3AA                    	rep	stosb			; blank out the rest
 31141                                  dsm_exit:
 31142 000028E7 58                      	pop	ax			; restore load addr
 31143 000028E8 5E                      	pop	si
 31144 000028E9 1F                      	pop	ds
 31145 000028EA 5F                      	pop	di
 31146 000028EB 07                      	pop	es
 31147 000028EC C3                      	retn
 31148                                  
 31149                                  ;----------------------------------------------------------------------------
 31150                                  ;
 31151                                  ; procedure : SizeDevice
 31152                                  ;
 31153                                  ;	Input : ES:SI - points to device file to be sized
 31154                                  ;
 31155                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31156                                  ;
 31157                                  ;	Calculates the size of the device file in paras and stores it
 31158                                  ;	in DevSize
 31159                                  ;
 31160                                  ;----------------------------------------------------------------------------
 31161                                  
 31162                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31163                                  SizeDevice:
 31164                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31165                                  	; 11/12/2022 ; *
 31166 000028ED 1E                      	push	ds ; *
 31167 000028EE 06                      	push	es
 31168 000028EF 1F                      	pop	ds
 31169 000028F0 89F2                    	mov	dx,si			; ds:dx -> file name
 31170 000028F2 B8003D                  	mov	ax,3D00h		; open
 31171 000028F5 CD21                    	int	21h
 31172 000028F7 7243                    	jc	short sd_err		; open failed
 31173                                  
 31174 000028F9 89C3                    	mov	bx,ax			; BX - file handle
 31175 000028FB B80242                  	mov	ax,4202h		; seek
 31176 000028FE 31C9                    	xor	cx,cx
 31177 00002900 89CA                    	mov	dx,cx			; to end of file
 31178 00002902 CD21                    	int	21h
 31179 00002904 722F                    	jc	short sd_close		; did seek fail (impossible)
 31180 00002906 83C00F                  	add	ax,15			; para convert
 31181 00002909 83D200                  	adc	dx,0
 31182 0000290C F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31183 00002910 7409                    	jz	short szdev1		; no
 31184 00002912 2EC706[D41E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31185                                  					; assuming that we fail later
 31186 00002919 EB1A                    	jmp	short sd_close
 31187                                  szdev1:
 31188 0000291B B104                    	mov	cl,4			; convert it to paras
 31189 0000291D D3E8                    	shr	ax,cl
 31190 0000291F B10C                    	mov	cl,12
 31191 00002921 D3E2                    	shl	dx,cl
 31192 00002923 09D0                    	or	ax,dx
 31193                                  	;
 31194                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31195 00002925 2E3B06[F21E]            	cmp     ax,[cs:DevSizeOption]
 31196                                  	;ja	short szdev2
 31197                                  	; 14/08/2023
 31198 0000292A 7305                    	jnb	short szdev2
 31199 0000292C 2EA1[F21E]              	mov     ax,[cs:DevSizeOption]
 31200                                  	; 12/12/2022
 31201 00002930 F8                      	clc
 31202                                  szdev2:
 31203 00002931 2EA3[D41E]              	mov	[cs:DevSize],ax		; save file size
 31204                                  
 31205                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31206                                  	; 12/12/2022
 31207                                  	; cf=0
 31208                                  	;clc
 31209                                  sd_close:
 31210 00002935 9C                      	pushf				; let close not spoil our
 31211                                  					;  carry flag
 31212 00002936 B8003E                  	mov	ax,3E00h		; close
 31213 00002939 CD21                    	int	21h			; we are not checking for err
 31214 0000293B 9D                      	popf
 31215                                  sd_err:
 31216                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31217                                  	; 11/12/2022 ; *
 31218 0000293C 1F                      	pop     ds ; *
 31219 0000293D C3                      	retn
 31220                                  
 31221                                  ;----------------------------------------------------------------------------
 31222                                  ;
 31223                                  ; procedure : ExecDev
 31224                                  ;
 31225                                  ;	Input : ds:dx -> device to be executed
 31226                                  ;		DevLoadAddr - contains where device has to be loaded
 31227                                  ;
 31228                                  ;	Output : Carry if error
 31229                                  ;		 Carry clear if no error
 31230                                  ;
 31231                                  ;	Loads a device driver using the 4b03h function call
 31232                                  ;
 31233                                  ;----------------------------------------------------------------------------
 31234                                  
 31235                                  	; 01/11/2022
 31236                                  ExecDev:
 31237 0000293E 2E8B1E[D61E]            	mov	bx,[cs:DevLoadAddr]
 31238 00002943 2E891E[ED1E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31239                                  					;  block for exec with
 31240                                  					;  Load address
 31241 00002948 2E891E[EF1E]            	mov	[cs:DevExecReloc],bx
 31242 0000294D 8CCB                    	mov	bx,cs
 31243 0000294F 8EC3                    	mov	es,bx
 31244 00002951 BB[ED1E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31245 00002954 B003                    	mov	al,3	; (load program only)
 31246 00002956 B44B                    	mov	ah,EXEC ; 4Bh
 31247 00002958 CD21                    	int	21h			;load in the device driver
 31248                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31249                                  		; DS:DX -> ASCIZ filename
 31250                                  		; ES:BX -> parameter block
 31251                                  		; AL = subfunction 
 31252 0000295A C3                      	retn
 31253                                  
 31254                                  ;----------------------------------------------------------------------------
 31255                                  ;
 31256                                  ; procedure : RetFromUM
 31257                                  ;
 31258                                  ;	Input : None
 31259                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31260                                  ;		 ConvLoad clear if did.
 31261                                  ;
 31262                                  ;	Prepares memory for more devices after returning from loading one
 31263                                  ;	using the DOS 6 options (/L:... etc).
 31264                                  ;
 31265                                  ;----------------------------------------------------------------------------
 31266                                  
 31267                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31268                                  ;RetFromUM:
 31269                                  ;	pushf
 31270                                  ;	mov	byte [cs:ConvLoad],1
 31271                                  ;	call	UnHideUMBs
 31272                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31273                                  ;	mov	byte [cs:ConvLoad],0
 31274                                  ;rfUM1:	
 31275                                  ;	popf
 31276                                  ;	retn
 31277                                  
 31278                                  ;----------------------------------------------------------------------------
 31279                                  ;
 31280                                  ; procedure : RemoveNull
 31281                                  ;
 31282                                  ;	Input : ES:SI points to a null terminated string
 31283                                  ;
 31284                                  ;	Output : none
 31285                                  ;
 31286                                  ;	Replaces the null at the end of a string with blank
 31287                                  ;
 31288                                  ;----------------------------------------------------------------------------
 31289                                  
 31290                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31291                                  	; (SYSINIT:2CCEh)
 31292                                  RemoveNull:
 31293                                  	; 11/12/2022
 31294                                  	; ds = cs
 31295                                  rn_next:
 31296 0000295B 268A1C                  	mov	bl,[es:si]
 31297 0000295E 08DB                    	or	bl,bl			; null ?
 31298 00002960 7403                    	jz	short rn_gotnull
 31299 00002962 46                      	inc	si			; advance the pointer
 31300 00002963 EBF6                    	jmp	short rn_next
 31301                                  rn_gotnull:
 31302                                  	; 11/12/2022
 31303 00002965 8A1E[061F]              	mov	bl,[DevSavedDelim]
 31304                                  	;mov	bl,[cs:DevSavedDelim]
 31305 00002969 26881C                  	mov	[es:si],bl		; replace null with blank
 31306                                  	; 02/11/2022
 31307                                  ; 11/12/2022
 31308                                  rba_ok:		; 10/04/2019
 31309 0000296C C3                      	retn
 31310                                  
 31311                                  ;----------------------------------------------------------------------------
 31312                                  ;
 31313                                  ; procedure : RoundBreakAddr
 31314                                  ;
 31315                                  ;	Input : DevBrkAddr
 31316                                  ;	Output : DevBrkAddr
 31317                                  ;
 31318                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31319                                  ;
 31320                                  ;----------------------------------------------------------------------------
 31321                                  
 31322                                  RoundBreakAddr:
 31323 0000296D 2EA1[DE1E]              	mov	ax,[cs:DevBrkAddr]
 31324 00002971 E83BE7                  	call	ParaRound
 31325 00002974 2E0106[E01E]            	add	[cs:DevBrkAddr+2],ax
 31326 00002979 2EC706[DE1E]0000        	mov	word [cs:DevBrkAddr],0
 31327 00002980 2EA1[D81E]              	mov	ax,[cs:DevLoadEnd]
 31328 00002984 2E3906[E01E]            	cmp	[cs:DevBrkAddr+2],ax
 31329 00002989 76E1                    	jbe	short rba_ok
 31330 0000298B E96507                  	jmp	mem_err
 31331                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31332                                  	; 11/12/2022
 31333                                  ;rba_ok:
 31334                                  ;	retn
 31335                                  
 31336                                  ;----------------------------------------------------------------------------
 31337                                  ;
 31338                                  ; procedure : DevSetBreak
 31339                                  ;
 31340                                  ;	Input : DevBrkAddr
 31341                                  ;	Output : Carry set if Device returned Init failed
 31342                                  ;		 Else carry clear
 31343                                  ;
 31344                                  ;----------------------------------------------------------------------------
 31345                                  
 31346                                  DevSetBreak:
 31347 0000298E 50                      	push	ax
 31348                                  
 31349 0000298F 2EA1[E01E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31350 00002993 2E803E[2114]00          	cmp	byte [cs:multdeviceflag],0
 31351 00002999 750F                    	jne	short set_break_continue ;do not check it.
 31352 0000299B 2E3B06[D61E]            	cmp	ax,[cs:DevLoadAddr]
 31353 000029A0 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31354                                  
 31355                                  	;cmp	word [cs:DevBrkAddr],0
 31356                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31357                                  	; 12/12/2022
 31358 000029A2 2E833E[DE1E]01          	cmp	word [cs:DevBrkAddr],1
 31359 000029A8 7204                    	jb	short break_failed
 31360                                  
 31361                                  set_break_continue:
 31362 000029AA E8C0FF                  	call	RoundBreakAddr
 31363                                  	; 12/12/2022
 31364 000029AD F8                      	clc
 31365                                  break_failed:
 31366 000029AE 58                      	pop	ax
 31367                                  	;clc
 31368 000029AF C3                      	retn
 31369                                  
 31370                                  	; 12/12/2022
 31371                                  ;break_failed:
 31372                                  	;pop	ax
 31373                                  	;stc
 31374                                  	;retn
 31375                                  
 31376                                  ;----------------------------------------------------------------------------
 31377                                  ;
 31378                                  ; procedure : DevBreak
 31379                                  ;
 31380                                  ;	Input : DevLoadAddr & DevBrkAddr
 31381                                  ;	Output : none
 31382                                  ;
 31383                                  ;	Marks a succesful install of a device driver
 31384                                  ;	Sets device size field in sub-arena &
 31385                                  ;	Updates Free ptr in UMB or adjusts memhi
 31386                                  ;
 31387                                  ;----------------------------------------------------------------------------
 31388                                  
 31389                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31390                                  DevBreak:
 31391                                  	;push	ds ; 11/12/2022
 31392                                  
 31393                                  	; 11/12/2022
 31394 000029B0 0E                      	push	cs
 31395 000029B1 1F                      	pop	ds
 31396                                  	;mov	ax,[cs:DevLoadAddr]
 31397                                  	;mov	bx,[cs:DevBrkAddr+2]
 31398 000029B2 A1[D61E]                	mov	ax,[DevLoadAddr]
 31399 000029B5 8B1E[E01E]              	mov	bx,[DevBrkAddr+2]
 31400                                  	; 11/12/2022
 31401 000029B9 1E                      	push	ds
 31402                                  
 31403 000029BA 48                      	dec	ax			; seg of sub-arena
 31404 000029BB 8ED8                    	mov	ds,ax
 31405 000029BD 40                      	inc	ax			; Back to Device segment
 31406 000029BE 29D8                    	sub	ax,bx
 31407 000029C0 F7D8                    	neg	ax			; size of device in paras
 31408 000029C2 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31409                                  	
 31410                                  	; 11/12/2022
 31411 000029C5 1F                      	pop	ds
 31412                                  	; ds = cs
 31413                                   	
 31414 000029C6 803E[F11E]00            	cmp	byte [DeviceHi],0
 31415                                  	;cmp	byte [cs:DeviceHi],0
 31416 000029CB 7405                    	je	short db_lo
 31417                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31418                                  	;jmp	short db_exit
 31419                                  	; 11/12/2022
 31420 000029CD 891E[E71E]              	mov	[DevUMBFree],bx
 31421 000029D1 C3                      	retn	
 31422                                  db_lo:
 31423                                  	; 11/12/2022
 31424                                  	; ds = cs
 31425                                  	;mov	[cs:memhi],bx
 31426                                  	;mov	word [cs:memlo],0
 31427 000029D2 891E[E003]              	mov	[memhi],bx
 31428 000029D6 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31429                                  db_exit:
 31430                                  	;pop	ds ; 11/12/2022
 31431 000029DC C3                      	retn
 31432                                  
 31433                                  ; 10/04/2019 - Retro DOS v4.0
 31434                                  
 31435                                  ;----------------------------------------------------------------------------
 31436                                  ;
 31437                                  ; procedure : ParseSize
 31438                                  ;
 31439                                  ;	Parses the command line for SIZE= command
 31440                                  ;
 31441                                  ;	ES:SI = command line to parsed
 31442                                  ;
 31443                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31444                                  ;	updates the DevSizeOption variable with value supplied
 31445                                  ;	in SIZE=option
 31446                                  ;	Returns carry if the SIZE option was invalid
 31447                                  ;
 31448                                  ;----------------------------------------------------------------------------
 31449                                  
 31450                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31451                                  	; (SYSINIT:2D5Ah)
 31452                                  ParseSize:
 31453                                  	;push	bx
 31454                                  	;mov	bx,si
 31455                                  
 31456                                  	; 11/12/2022
 31457                                  	; ds = cs
 31458                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31459                                  	;mov	[cs:DevCmdLine],si
 31460                                  	;mov	[cs:DevCmdLine+2],es
 31461 000029DD C706[F21E]0000          	mov	word [DevSizeOption],0 ; init the value
 31462 000029E3 8936[021F]              	mov	[DevCmdLine],si
 31463 000029E7 8C06[041F]              	mov	[DevCmdLine+2],es	
 31464 000029EB E82800                  	call	SkipDelim
 31465 000029EE 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31466 000029F3 751F                    	jne	short ps_no_size
 31467 000029F5 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31468 000029FB 7517                    	jne	short ps_no_size
 31469 000029FD 268A4404                	mov	al,[es:si+4]
 31470 00002A01 E86B06                  	call	delim
 31471 00002A04 750E                    	jne	short ps_no_size
 31472 00002A06 83C605                  	add	si,5
 31473 00002A09 E81500                  	call	GetHexNum
 31474 00002A0C 7207                    	jc	short ps_err
 31475                                  	; 11/12/2022
 31476                                  	; ds = cs
 31477                                  	;mov	[cs:DevSizeOption],ax
 31478 00002A0E A3[F21E]                	mov	[DevSizeOption],ax
 31479 00002A11 E80200                  	call	SkipDelim
 31480                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31481                                  	;mov	bx,si
 31482                                  ps_no_size:	
 31483                                  	;mov	si,bx
 31484                                  	;pop	bx
 31485 00002A14 F8                      	clc	; cf=0
 31486                                  	;retn
 31487                                  	; 11/12/2022
 31488                                  ps_err:		; cf=1
 31489                                  sd_ret:		; cf=?
 31490 00002A15 C3                      	retn
 31491                                  ;ps_err:
 31492                                  	; 02/11/2022
 31493                                  	;pop	bx
 31494                                  	;stc
 31495                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31496                                  	; 11/12/2022
 31497                                  	; cf=1
 31498                                  	;stc
 31499                                  	; 11/12/2022
 31500                                  ;sd_ret: 
 31501                                  	; 22/07/2023
 31502                                  	; 12/04/2019
 31503                                  	;retn
 31504                                  
 31505                                  ; 12/04/2019 - Retro DOS v4.0
 31506                                  
 31507                                  ;----------------------------------------------------------------------------
 31508                                  ;
 31509                                  ; procedure : SkipDelim
 31510                                  ;
 31511                                  ;	Skips delimiters in the string pointed to by ES:SI
 31512                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31513                                  ;
 31514                                  ;----------------------------------------------------------------------------
 31515                                  	
 31516                                  	; 01/11/2022
 31517                                  SkipDelim:
 31518                                  sd_next_char:
 31519 00002A16 268A04                  	mov	al,[es:si]
 31520 00002A19 E85306                  	call	delim
 31521 00002A1C 75F7                    	jnz	short sd_ret
 31522 00002A1E 46                      	inc	si
 31523 00002A1F EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31524                                  	; 11/12/2022
 31525                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31526                                  ;sd_ret:
 31527                                  	;retn
 31528                                  
 31529                                  ;----------------------------------------------------------------------------
 31530                                  ;
 31531                                  ; procedure : GetHexNum
 31532                                  ;
 31533                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31534                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31535                                  ;
 31536                                  ;	Returns in AX the number number of paras equivalent to the
 31537                                  ;	hex number of bytes specified by the hexadecimal string.
 31538                                  ;
 31539                                  ;	Returns carry in case it encountered a non-hex character or
 31540                                  ;	if it encountered crlf
 31541                                  ;
 31542                                  ;----------------------------------------------------------------------------
 31543                                  
 31544                                  ; 13/05/2019
 31545                                  
 31546                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31547                                  	; (SYSINIT:2DA5h)
 31548                                  GetHexNum:
 31549 00002A21 31C0                    	xor	ax,ax
 31550 00002A23 31D2                    	xor	dx,dx
 31551                                  ghn_next:
 31552 00002A25 268A1C                  	mov	bl,[es:si]
 31553 00002A28 80FB0D                  	cmp	bl,cr  ; 0Dh
 31554 00002A2B 7436                    	je	short ghn_err
 31555 00002A2D 80FB0A                  	cmp	bl,lf  ; 0Ah
 31556 00002A30 7431                    	je	short ghn_err
 31557 00002A32 50                      	push	ax
 31558 00002A33 88D8                    	mov	al,bl
 31559 00002A35 E83706                  	call	delim
 31560 00002A38 58                      	pop	ax
 31561                                  	; 04/01/2023
 31562 00002A39 B90400                  	mov	cx, 4
 31563 00002A3C 7410                    	jz	short ghn_into_paras
 31564 00002A3E E82400                  	call	GetNibble
 31565                                  	;jc	short ghn_err
 31566                                  	; 11/12/2022
 31567 00002A41 7221                    	jc	short ghn_ret ; cf=1
 31568                                  	; 04/01/2023
 31569                                  	;mov	cx,4
 31570                                  ghn_shift1:
 31571 00002A43 D1E0                    	shl	ax,1
 31572 00002A45 D1D2                    	rcl	dx,1
 31573 00002A47 E2FA                    	loop	ghn_shift1
 31574 00002A49 08D8                    	or	al,bl
 31575 00002A4B 46                      	inc	si
 31576 00002A4C EBD7                    	jmp	short ghn_next
 31577                                  ghn_into_paras:
 31578 00002A4E 83C00F                  	add	ax,15
 31579 00002A51 83D200                  	adc	dx,0
 31580 00002A54 F7C2F0FF                	test	dx,0FFF0h
 31581 00002A58 7509                    	jnz	short ghn_err
 31582                                  	; 04/01/2023
 31583                                  	;mov	cx,4
 31584                                  ghn_shift2:
 31585 00002A5A F8                      	clc
 31586 00002A5B D1DA                    	rcr	dx,1
 31587 00002A5D D1D8                    	rcr	ax,1
 31588 00002A5F E2F9                    	loop	ghn_shift2
 31589 00002A61 F8                      	clc
 31590 00002A62 C3                      	retn
 31591                                  	; 11/12/2022
 31592                                  ghn_err:
 31593                                  gnib_err:
 31594 00002A63 F9                      	stc
 31595                                  ghn_ret:
 31596                                  gnib_ret:
 31597 00002A64 C3                      	retn
 31598                                  
 31599                                  ;----------------------------------------------------------------------------
 31600                                  ;
 31601                                  ; procedure : GetNibble
 31602                                  ;
 31603                                  ;	Convert one nibble (hex digit) in BL into binary
 31604                                  ;
 31605                                  ;	Retruns binary value in BL
 31606                                  ;
 31607                                  ;	Returns carry if BL contains non-hex digit
 31608                                  ;
 31609                                  ;----------------------------------------------------------------------------
 31610                                  
 31611                                  GetNibble:
 31612 00002A65 80FB30                  	cmp	bl,'0'
 31613                                  	;jb	short gnib_err
 31614                                  	; 11/12/2022
 31615 00002A68 72FA                    	jb	short gnib_ret ; cf=1
 31616 00002A6A 80FB39                  	cmp	bl,'9'
 31617 00002A6D 7704                    	ja	short is_it_hex
 31618 00002A6F 80EB30                  	sub	bl,'0'		; clc
 31619 00002A72 C3                      	retn
 31620                                  is_it_hex:
 31621 00002A73 80FB41                  	cmp	bl,'A'
 31622                                  	;jb	short gnib_err
 31623                                  	; 11/12/2022
 31624 00002A76 72EC                    	jb	short gnib_ret ; cf=1
 31625 00002A78 80FB46                  	cmp	bl,'F'
 31626 00002A7B 77E6                    	ja	short gnib_err ; 11/12/2022
 31627 00002A7D 80EB37                  	sub	bl,'A'- 10	; clc
 31628 00002A80 C3                      	retn
 31629                                  	; 11/12/2022
 31630                                  ;gnib_err:
 31631                                  ;	stc
 31632                                  ;gnib_ret:
 31633                                  ;	retn
 31634                                  
 31635                                  ;============================================================================
 31636                                  
 31637                                  ; 12/04/2019 - Retro DOS v4.0
 31638                                  
 31639                                  ; umb.inc (MSDOS 6.0, 1991)
 31640                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31641                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31642                                  
 31643                                  XMM_REQUEST_UMB	equ 10h
 31644                                  XMM_RELEASE_UMB	equ 11h
 31645                                  
 31646                                  ;----------------------------------------------------------------------------
 31647                                  ;
 31648                                  ; procedure : AllocUMB
 31649                                  ;
 31650                                  ;	Allocate all UMBs and link it to DOS arena chain
 31651                                  ;
 31652                                  ;----------------------------------------------------------------------------
 31653                                  
 31654                                  AllocUMB:
 31655                                  	; 31/12/2022
 31656                                  	; ds = cs
 31657 00002A81 E81000                  	call	InitAllocUMB		; link in the first UMB
 31658 00002A84 720D                    	jc	short au_exit		; quit on error
 31659                                  au_next:
 31660 00002A86 E83900                  	call	umb_allocate		; allocate
 31661 00002A89 7205                    	jc	short au_coalesce
 31662 00002A8B E85200                  	call	umb_insert		; & insert till no UMBs
 31663 00002A8E EBF6                    	jmp	short au_next
 31664                                  au_coalesce:
 31665 00002A90 E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31666                                  au_exit:
 31667                                  	; 31/12/2022
 31668                                  	; ds = cs
 31669 00002A93 C3                      	retn
 31670                                  
 31671                                  ;----------------------------------------------------------------------------
 31672                                  ;
 31673                                  ; procedure : InitAllocUMB
 31674                                  ;
 31675                                  ;----------------------------------------------------------------------------
 31676                                  
 31677                                  InitAllocUMB:
 31678                                  	; 31/12/2022
 31679                                  	; ds = cs
 31680 00002A94 E87ADF                  	call	IsXMSLoaded
 31681 00002A97 7527                    	jnz	short iau_err		; quit on no XMS driver
 31682 00002A99 B452                    	mov	ah,52h
 31683 00002A9B CD21                    	int	21h			; get DOS DATA seg
 31684                                  	; 31/12/2022
 31685                                  	; ds = cs
 31686                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31687 00002A9D 8C06[001F]              	mov	[DevDOSData],es		; & save it for later
 31688 00002AA1 B81043                  	mov	ax,4310h
 31689 00002AA4 CD2F                    	int	2Fh
 31690                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31691                                  	;mov	[cs:DevXMSAddr+2],es
 31692 00002AA6 891E[E91E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31693 00002AAA 8C06[EB1E]              	mov	[DevXMSAddr+2],es	
 31694                                  	; 31/12/2022
 31695 00002AAE 803E[FF1E]00            	cmp	byte [FirstUMBLinked],0 
 31696                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31697                                  	;jne	short ia_1		; quit if we already did it
 31698                                  	; 12/12/2022
 31699 00002AB3 770A                    	ja	short ia_1 ; cf=0
 31700 00002AB5 E83401                  	call	LinkFirstUMB		; else link the first UMB
 31701                                  	;jc	short iau_err
 31702                                  	; 12/12/2022
 31703 00002AB8 7207                    	jc	short iau_err2  ; cf=1
 31704                                  	; 31/12/2022
 31705                                  	; ds = cs
 31706 00002ABA C606[FF1E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31707                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31708                                  ia_1:
 31709                                  	; 12/12/2022
 31710                                  	; cf=0
 31711                                  	;clc
 31712 00002ABF C3                      	retn
 31713                                  iau_err:
 31714 00002AC0 F9                      	stc
 31715                                  iau_err2:
 31716 00002AC1 C3                      	retn
 31717                                  
 31718                                  ;-------------------------------------------------------------------------
 31719                                  ;
 31720                                  ; Procedure Name	: umb_allocate
 31721                                  ;
 31722                                  ; Inputs		: DS = data
 31723                                  ;
 31724                                  ; Outputs		: if UMB available
 31725                                  ;				Allocates the largest available UMB and 
 31726                                  ;			  	BX = segment of allocated block
 31727                                  ;				DX = size of allocated block
 31728                                  ;				NC
 31729                                  ;			  else 
 31730                                  ;				CY
 31731                                  ;
 31732                                  ; Uses			: BX, DX
 31733                                  ;
 31734                                  ;-------------------------------------------------------------------------
 31735                                  
 31736                                  umb_allocate:
 31737                                  	; 31/12/2022
 31738                                  	; ds = cs
 31739 00002AC2 50                      	push	ax
 31740 00002AC3 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31741 00002AC5 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31742                                  					;   possible
 31743                                  	; 31/12/2022
 31744 00002AC8 FF1E[E91E]              	call	far [DevXMSAddr]
 31745                                  	;call	far [cs:DevXMSAddr]
 31746                                  					; dx now contains the size of
 31747                                  					; the largest UMB
 31748 00002ACC 09D2                    	or	dx,dx
 31749 00002ACE 740D                    	jz	short ua_err
 31750                                  	
 31751 00002AD0 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31752                                  
 31753                                  	; 31/12/2022
 31754 00002AD2 FF1E[E91E]              	call	far [DevXMSAddr]
 31755                                  	;call	far [cs:DevXMSAddr]
 31756                                  
 31757 00002AD6 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31758 00002AD9 7502                    	jne	short ua_err		; N: error
 31759                                  	;clc
 31760                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31761                                  	; 12/12/2022
 31762                                  	; cf=0
 31763                                  	;clc 
 31764                                  ua_done:
 31765 00002ADB 58                      	pop	ax
 31766 00002ADC C3                      	retn
 31767                                  ua_err:
 31768 00002ADD F9                      	stc
 31769 00002ADE EBFB                    	jmp	short ua_done
 31770                                  
 31771                                  ;---------------------------------------------------------------------------
 31772                                  ;
 31773                                  ; Procedure Name	: umb_insert
 31774                                  ;
 31775                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31776                                  ;			: BX = seg address of UMB to be linked in
 31777                                  ;			: DX = size of UMB to be linked in paras
 31778                                  ;			; DS = data
 31779                                  ;
 31780                                  ; Outputs		: links the UMB into the arena chain
 31781                                  ;
 31782                                  ; Uses			: AX, CX, ES, DX, BX
 31783                                  ;
 31784                                  ;---------------------------------------------------------------------------
 31785                                  
 31786                                  umb_insert:
 31787 00002AE0 1E                      	push	ds
 31788                                  
 31789                                  	; 31/12/2022
 31790                                  	; ds = cs
 31791                                  
 31792                                  	;mov	ds,[cs:DevDOSData]
 31793 00002AE1 8E1E[001F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31794                                  	;mov	ds,[8Ch]
 31795 00002AE5 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31796 00002AE9 8CD8                    	mov	ax,ds
 31797 00002AEB 8EC0                    	mov	es,ax
 31798                                  ui_next:
 31799 00002AED 39D8                    	cmp	ax,bx			; Q: is current block above
 31800                                  					;    new block
 31801 00002AEF 770F                    	ja	short ui_insert		; Y: insert it
 31802                                  					; Q: is current block the
 31803                                  					;    last
 31804 00002AF1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31805 00002AF7 745C                    	je	short ui_append		; Y: append new block to chain
 31806                                  					; N: get next block
 31807 00002AF9 8ED8                    	mov	ds,ax			; M005
 31808                                  	;call	get_next		; ax = es = next block
 31809 00002AFB E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31810 00002AFE EBED                    	jmp	short ui_next
 31811                                  
 31812                                  ui_insert:
 31813 00002B00 8CD9                    	mov	cx,ds			; ds = previous arena
 31814 00002B02 41                      	inc	cx			; top of previous block
 31815                                  
 31816 00002B03 29D9                    	sub	cx,bx
 31817 00002B05 F7D9                    	neg	cx			; cx = size of used block
 31818                                  	;mov	byte [0],'M'
 31819 00002B07 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31820                                  	;mov	word [1],8
 31821 00002B0C C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31822                                  	;mov	[3],cx
 31823 00002B12 890E0300                	mov	[ARENA.SIZE],cx	
 31824                                  	;mov	word [8],4353h ; 'SC'
 31825 00002B16 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31826                                  
 31827                                  ; prepare the arena at start of new block
 31828                                  
 31829 00002B1C 8EC3                    	mov	es,bx
 31830 00002B1E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31831 00002B24 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31832                                  					; mark as free
 31833 00002B2B 83EA02                  	sub	dx,2			; make room for arena at
 31834                                  					; start & end of new block
 31835 00002B2E 2689160300              	mov	[es:ARENA.SIZE],dx
 31836                                  
 31837                                  ; prepare arena at end of new block
 31838                                  	
 31839 00002B33 01D3                    	add	bx,dx
 31840 00002B35 43                      	inc	bx
 31841 00002B36 8EC3                    	mov	es,bx			; es=arena at top of new block
 31842 00002B38 43                      	inc	bx			; bx=top of new block
 31843                                  
 31844                                  					; ax contains arena just above
 31845                                  					; this block
 31846 00002B39 29D8                    	sub	ax,bx			; ax = size of used block
 31847                                  	
 31848 00002B3B 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31849 00002B41 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31850 00002B48 26A30300                	mov	[es:ARENA.SIZE],ax	
 31851 00002B4C 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31852                                  
 31853 00002B53 EB47                    	jmp	short ui_done
 31854                                  
 31855                                  ui_append:
 31856                                  					; es = arena of last block	
 31857 00002B55 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31858 00002B5A 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31859                                  					; going to rsrv on top of this 
 31860                                  					; block for the next arena.
 31861                                  	; 13/05/2019
 31862 00002B60 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31863                                  
 31864 00002B66 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31865 00002B68 40                      	inc	ax
 31866 00002B69 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31867                                  					;    seg. address of new block
 31868 00002B6B F7D8                    	neg	ax
 31869                                  
 31870 00002B6D 8EC1                    	mov	es,cx			; ds = arena of unused block
 31871                                  
 31872 00002B6F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31873 00002B75 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31874 00002B7C 26A30300                	mov	[es:ARENA.SIZE],ax	
 31875 00002B80 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31876                                  
 31877                                  ; prepare the arena at start of new block
 31878 00002B87 8EC3                    	mov	es,bx
 31879 00002B89 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31880 00002B8F 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31881                                  					; mark as free
 31882 00002B96 4A                      	dec	dx			; make room for arena
 31883 00002B97 2689160300              	mov	[es:ARENA.SIZE],dx	
 31884                                  ui_done:
 31885                                  uc_done: ; 31/12/2022 ; *!
 31886 00002B9C 1F                      	pop	ds
 31887                                  	; ds = cs ; 31/12/2022
 31888                                  ;uc_done:	; 18/12/2022
 31889 00002B9D C3                      	retn
 31890                                  
 31891                                  ; 13/04/2019 - Retro DOS v4.0
 31892                                  
 31893                                  ;----------------------------------------------------------------------------
 31894                                  ;
 31895                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31896                                  ;
 31897                                  ;	Coalesce adds the block following the argument to the argument block,
 31898                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31899                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31900                                  ;	preceeding allocated block.
 31901                                  ;
 31902                                  ;	EXIT	'C' clear if OK
 31903                                  ;		  (ds) unchanged, this block updated
 31904                                  ;		  (ax) = address of next block, IFF not at end
 31905                                  ;		'C' set if arena trashed
 31906                                  ;	USES	cx, di, ds, es
 31907                                  ;
 31908                                  ;----------------------------------------------------------------------------
 31909                                  
 31910                                  umb_coalesce:
 31911                                  	; 31/12/2022
 31912                                  	; ds = cs
 31913 00002B9E 1E                      	push	ds ; *!
 31914                                  
 31915 00002B9F 31FF                    	xor	di, di
 31916                                  
 31917                                  	;mov	es,[cs:DevDOSData]
 31918                                  	; 31/12/2022
 31919 00002BA1 8E06[001F]              	mov	es,[DevDOSData]
 31920 00002BA5 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31921                                  uc_nextfree:
 31922 00002BAA 8CC0                    	mov	ax,es
 31923 00002BAC 8ED8                    	mov	ds,ax
 31924                                  	;cmp	[es:1],di
 31925 00002BAE 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31926 00002BB3 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31927                                  					; N: get next arena
 31928 00002BB5 E82100                  	call	get_next		; es, ax = next arena
 31929 00002BB8 72E2                    	jc	short uc_done	; *!
 31930 00002BBA EBEE                    	jmp	short uc_nextfree
 31931                                  uc_again:
 31932 00002BBC E81A00                  	call	get_next		; ES, AX <- next block
 31933 00002BBF 72DB                    	jc	short uc_done	; *!
 31934                                  uc_check:
 31935 00002BC1 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31936 00002BC6 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31937                                  					; Y: coalesce
 31938 00002BC8 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31939 00002BCD 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31940                                  	;add	[3],cx
 31941 00002BCE 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31942 00002BD2 268A0D                  	mov     cl,[es:di]              ; move up signature
 31943 00002BD5 880D                    	mov     [di],cl
 31944 00002BD7 EBE3                    	jmp     short uc_again		; try again
 31945                                  
 31946                                  	; 18/12/2022
 31947                                  ;uc_done:
 31948                                  	;retn
 31949                                  
 31950                                  ;----------------------------------------------------------------------------
 31951                                  ;
 31952                                  ;**	get_next - Find Next item in Arena
 31953                                  ;
 31954                                  ;	ENTRY	dS - pointer to block head
 31955                                  ;	EXIT	AX,ES - pointers to next head
 31956                                  ;		'C' set if arena damaged
 31957                                  ;
 31958                                  ;----------------------------------------------------------------------------
 31959                                  
 31960                                  	; 01/11/2022
 31961                                  get_next:
 31962 00002BD9 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31963 00002BDE 740A                    	je	short gn_err
 31964                                  _get_next_:
 31965 00002BE0 8CD8                    	mov     ax,ds                   ; ax=current block
 31966 00002BE2 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31967 00002BE6 40                      	inc     ax                      ; remember that header!
 31968 00002BE7 8EC0                    	mov	es,ax
 31969                                  	;clc
 31970                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31971                                  	; 11/12/2022
 31972                                  	; cf=0
 31973                                  	;clc
 31974 00002BE9 C3                      	retn
 31975                                  gn_err:
 31976 00002BEA F9                      	stc
 31977                                  	; 11/12/2022	
 31978                                  lfu_err:	 ; cf=1
 31979 00002BEB C3                      	retn
 31980                                  
 31981                                  ;----------------------------------------------------------------------------
 31982                                  ;
 31983                                  ; procedure : LinkFirstUMB
 31984                                  ;
 31985                                  ;----------------------------------------------------------------------------
 31986                                  
 31987                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31988                                  	; (SYSINIT:2F81h)
 31989                                  LinkFirstUMB:
 31990                                  	; 31/12/2022
 31991                                  	; ds = cs
 31992 00002BEC E8D3FE                  	call	umb_allocate
 31993 00002BEF 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31994                                  
 31995                                  ; bx = segment of allocated UMB
 31996                                  ; dx = size of UMB
 31997                                  
 31998                                  	; 31/12/2022
 31999                                  	; ds = cs
 32000                                  
 32001 00002BF1 CD12                    	int	12h			; ax = size of memory
 32002 00002BF3 B106                    	mov	cl,6
 32003 00002BF5 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32004                                  
 32005 00002BF7 89C1                    	mov	cx,ax			; cx = size in paras
 32006 00002BF9 29D8                    	sub	ax,bx			; ax = - size of unused block
 32007                                  
 32008 00002BFB F7D8                    	neg	ax
 32009                                  
 32010 00002BFD 83E901                  	sub	cx,1			; cx = first umb_arena
 32011 00002C00 8EC1                    	mov	es,cx			; es = first umb_arena
 32012                                  	
 32013 00002C02 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32014 00002C08 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32015                                  					
 32016 00002C0F 26A30300                	mov	[es:ARENA.SIZE],ax	
 32017 00002C13 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32018                                  
 32019                                  ; put in the arena for the first UMB
 32020                                  
 32021 00002C1A 8EC3                    	mov	es,bx			; es has first free umb seg
 32022 00002C1C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32023 00002C22 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32024                                  					; mark as free 
 32025 00002C29 4A                      	dec	dx			; make room for arena
 32026 00002C2A 2689160300              	mov	[es:ARENA.SIZE],dx	
 32027                                  
 32028                                  	;mov	es,[cs:DevDOSData]
 32029                                  	; 31/12/2022
 32030 00002C2F 8E06[001F]              	mov	es,[DevDOSData] ; ds = cs
 32031 00002C33 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 32032 00002C36 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 32033                                  					;  data segment with the arena
 32034                                  					;  just below Top of Mem
 32035                                  
 32036                                  ; we must now scan the arena chain and update the size of the last arena
 32037                                  
 32038 00002C39 BF2400                  	mov	di,DOS_ARENA ; 24h
 32039 00002C3C 268E05                  	mov	es,[es:di]		; es = start arena
 32040 00002C3F 31FF                    	xor	di,di
 32041                                  ;scan_next
 32042                                  ; 09/12/2022
 32043                                  scannext:
 32044 00002C41 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32045 00002C45 740C                    	je	short got_last
 32046                                  	
 32047 00002C47 8CC0                    	mov	ax,es
 32048 00002C49 2603060300              	add	ax,[es:ARENA.SIZE]
 32049 00002C4E 40                      	inc	ax
 32050 00002C4F 8EC0                    	mov	es,ax
 32051                                  	;jmp	short scan_next
 32052                                  	; 09/12/2022
 32053 00002C51 EBEE                    	jmp	short scannext
 32054                                  got_last:
 32055 00002C53 26832E030001            	sub	word [es:ARENA.SIZE],1
 32056 00002C59 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32057                                  	;clc
 32058                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32059                                  	; 11/12/2022
 32060                                  	; cf=0
 32061                                  	;clc
 32062 00002C5F C3                      	retn
 32063                                  
 32064                                  ; 11/12/2022
 32065                                  ;;lfu_err:
 32066                                  ;	;stc
 32067                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32068                                  ;	; 11/12/2022
 32069                                  ;	; cf=1
 32070                                  ;	;stc
 32071                                  ;	retn
 32072                                  
 32073                                  ;----------------------------------------------------------------------------
 32074                                  ;
 32075                                  ; procedure : ShrinkUMB
 32076                                  ;
 32077                                  ;	Shrinks the current UMB in use, so that the unused portions
 32078                                  ;	of the UMB is given back to the DOS free mem pool
 32079                                  ;
 32080                                  ;----------------------------------------------------------------------------
 32081                                  
 32082                                  ShrinkUMB:
 32083                                  	; 12/12/2022
 32084                                  	; ds = cs
 32085 00002C60 833E[E31E]00            	cmp	word [DevUMBAddr],0
 32086                                  	;cmp	word [cs:DevUMBAddr],0
 32087 00002C65 7421                    	je	short su_exit
 32088 00002C67 06                      	push	es
 32089 00002C68 53                      	push	bx
 32090                                  	; 12/12/2022
 32091                                  	;mov	bx,[cs:DevUMBFree]
 32092                                  	;sub	bx,[cs:DevUMBAddr]
 32093                                  	;mov	es,[cs:DevUMBAddr]
 32094 00002C69 8B1E[E71E]              	mov	bx,[DevUMBFree]
 32095 00002C6D 2B1E[E31E]              	sub	bx,[DevUMBAddr]
 32096 00002C71 8E06[E31E]              	mov	es,[DevUMBAddr]
 32097                                  	
 32098 00002C75 B8004A                  	mov	ax,4A00h
 32099 00002C78 CD21                    	int	21h
 32100                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32101                                  		; ES = segment address of block to change
 32102                                  		; BX = new size in paragraphs
 32103 00002C7A 8CC0                    	mov	ax,es
 32104 00002C7C 48                      	dec	ax
 32105 00002C7D 8EC0                    	mov	es,ax
 32106 00002C7F 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32107 00002C86 5B                      	pop	bx
 32108 00002C87 07                      	pop	es
 32109                                  su_exit:
 32110 00002C88 C3                      	retn
 32111                                  
 32112                                  ;----------------------------------------------------------------------------
 32113                                  ;
 32114                                  ; procedure : UnlinkUMB
 32115                                  ;
 32116                                  ;	Unlinks the UMBs from the DOS arena chain
 32117                                  ;
 32118                                  ;----------------------------------------------------------------------------
 32119                                  
 32120                                  UnlinkUMB:
 32121                                  	; 12/12/2022
 32122                                  	; ds = cs
 32123 00002C89 1E                      	push	ds
 32124 00002C8A 06                      	push	es
 32125                                  	; 12/12/2022
 32126 00002C8B 803E[FF1E]00            	cmp	byte [FirstUMBLinked],0
 32127                                  	;cmp	byte [cs:FirstUMBLinked],0
 32128 00002C90 7420                    	je	short ulu_x		; nothing to unlink
 32129                                  	; 12/12/2022
 32130 00002C92 8E06[001F]              	mov	es,[DevDOSData]
 32131                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32132 00002C96 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32133 00002C9B 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32134                                  ulu_next:
 32135 00002CA0 E836FF                  	call	get_next
 32136 00002CA3 720D                    	jc	short ulu_x
 32137 00002CA5 39C7                    	cmp	di,ax			; is the next one UMB ?
 32138 00002CA7 7404                    	je	short ulu_found
 32139 00002CA9 8ED8                    	mov	ds,ax
 32140 00002CAB EBF3                    	jmp	short ulu_next
 32141                                  ulu_found:
 32142                                  	;mov	byte [0],'Z'
 32143 00002CAD C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32144                                  ulu_x:
 32145 00002CB2 07                      	pop	es
 32146 00002CB3 1F                      	pop	ds
 32147 00002CB4 C3                      	retn
 32148                                  
 32149                                  ; ----------------------------------------------------------------------
 32150                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32151                                  ; ----------------------------------------------------------------------
 32152                                  ; 14/04/2019 - Retro DOS v4.0
 32153                                  
 32154                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32155                                  ;
 32156                                  ; Summary:
 32157                                  ;
 32158                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32159                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32160                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32161                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32162                                  ;   and/or config.inc for the full list.
 32163                                  ;
 32164                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32165                                  ;   configuration support. blockname is either MENU, which contains one
 32166                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32167                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32168                                  ;   INCLUDE allows the current block to name another block for inclusion
 32169                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32170                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32171                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32172                                  ;
 32173                                  ; Example:
 32174                                  ;
 32175                                  ;   [menu]
 32176                                  ;   menuitem=misc,Miscellaneous
 32177                                  ;   menuitem=network,Network Configuration
 32178                                  ;   menudefault=network,15
 32179                                  ;
 32180                                  ;   [network]
 32181                                  ;   include misc
 32182                                  ;   device=foo
 32183                                  ;
 32184                                  ;   [misc]
 32185                                  ;   device=bar
 32186                                  ;   include alternate
 32187                                  ;
 32188                                  ;   [alternate]
 32189                                  ;   device=tar
 32190                                  ;
 32191                                  ;
 32192                                  ;   When the menu is displayed
 32193                                  ;
 32194                                  ;    1. Miscellaneous
 32195                                  ;    2. Network Configuration
 32196                                  ;
 32197                                  ;   #2 is highlighted as the default option, and will be automatically
 32198                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32199                                  ;   following order:
 32200                                  ;
 32201                                  ;       DEVICE=BAR
 32202                                  ;       DEVICE=TAR
 32203                                  ;       DEVICE=FOO
 32204                                  ;
 32205                                  
 32206                                  ;MULTI_CONFIG equ 1
 32207                                  
 32208                                  ; the following depend on the positions of the various letters in switchlist
 32209                                  
 32210                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32211                                  
 32212                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32213                                  flagdrive	equ 00001000b ; 8 
 32214                                  flagcyln	equ 00010000b ; 16
 32215                                  flagseclim	equ 00100000b ; 32
 32216                                  flagheads	equ 01000000b ; 64
 32217                                  flagff		equ 10000000b ; 128
 32218                                  
 32219                                  ;----------------------------------------------------------------------------
 32220                                  ; 19/04/2019 - Retro DOS v4.0
 32221                                  
 32222                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32223                                  
 32224                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32225                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32226                                  
 32227 00002CB5 00                      insert_blank:	db 	0
 32228                                  
 32229                                  ;----------------------------------------------------------------------------
 32230                                  ;
 32231                                  ; procedure : setparms
 32232                                  ;
 32233                                  ; the following set of routines is used to parse the drivparm = command in
 32234                                  ; the config.sys file to change the default drive parameters.
 32235                                  ;
 32236                                  ;----------------------------------------------------------------------------
 32237                                  
 32238                                  setparms:
 32239 00002CB6 1E                      	push	ds
 32240 00002CB7 50                      	push	ax
 32241 00002CB8 53                      	push	bx
 32242 00002CB9 51                      	push	cx
 32243 00002CBA 52                      	push	dx
 32244                                  
 32245 00002CBB 0E                      	push	cs
 32246 00002CBC 1F                      	pop	ds
 32247                                  
 32248 00002CBD 31DB                    	xor	bx,bx
 32249 00002CBF 8A1E[8036]              	mov	bl,[drive]
 32250                                  	; 18/12/2022
 32251 00002CC3 43                      	inc	bx
 32252                                  	;inc	bl			; get it correct for ioctl call
 32253                                  					; (1=a,2=b...)
 32254 00002CC4 BA[5835]                	mov	dx,deviceparameters
 32255 00002CC7 B444                    	mov	ah,IOCTL ; 44h
 32256 00002CC9 B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 32257 00002CCB B508                    	mov	ch,RAWIO ; 8
 32258 00002CCD B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32259 00002CCF CD21                    	int	21h
 32260                                  
 32261                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32262                                  ;
 32263                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32264                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32265                                  ;	; 21/10/2022
 32266                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32267                                  ;	mov	ds,ax			; set Bios_Data segment
 32268                                  ;
 32269                                  ;	test	word [cs:switches],flagec35 ; 4
 32270                                  ;	jz	short not_ec35
 32271                                  
 32272                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32273                                  	;test	word [switches],flagec35 ; 4
 32274                                  	; 12/12/2022
 32275 00002CD1 F606[8136]04            	test	byte [switches],flagec35 ; 4
 32276 00002CD6 7411                    	jz	short eot_ok
 32277                                  
 32278                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32279                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32280 00002CD8 8A0E[8036]              	mov	cl,[drive]
 32281 00002CDC B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32282 00002CDF 8ED8                    	mov	ds,ax	
 32283                                  
 32284 00002CE1 B001                    	mov	al,1			; assume drive 0
 32285 00002CE3 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32286                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32287 00002CE5 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32288                                  
 32289                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32290                                  ;
 32291                                  ;not_ec35:
 32292                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32293                                  ;;	sectors per track than any old ones.
 32294                                  ;
 32295                                  ;	;mov	al,[cs:deviceparameters+20]
 32296                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32297                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32298                                  ;	cmp	al,[EOT]
 32299                                  ;	jbe	short eot_ok
 32300                                  ;	mov	[EOT],al
 32301                                  
 32302                                  eot_ok:
 32303 00002CE9 5A                      	pop	dx			; fix up all the registers
 32304 00002CEA 59                      	pop	cx
 32305 00002CEB 5B                      	pop	bx
 32306 00002CEC 58                      	pop	ax
 32307 00002CED 1F                      	pop	ds ; 13/05/2019
 32308 00002CEE C3                      	retn
 32309                                  
 32310                                  ;----------------------------------------------------------------------------
 32311                                  ;
 32312                                  ; procedure : diddleback
 32313                                  ;
 32314                                  ; replace default values for further drivparm commands
 32315                                  ;
 32316                                  ;----------------------------------------------------------------------------
 32317                                  
 32318                                  diddleback:
 32319 00002CEF 1E                      	push	ds
 32320 00002CF0 0E                      	push	cs
 32321 00002CF1 1F                      	pop	ds
 32322                                  	;mov	word [deviceparameters+4],80
 32323 00002CF2 C706[5C35]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32324                                  	;mov	byte [deviceparameters+1],2
 32325 00002CF8 C606[5935]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32326                                  	;mov	word [deviceparameters+2],0
 32327 00002CFD C706[5A35]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32328 00002D03 C706[8136]0000          	mov	word [switches],0	    ; zero all switches
 32329 00002D09 1F                      	pop	ds
 32330 00002D0A C3                      	retn
 32331                                  
 32332                                  ; 04/01/2023
 32333                                  %if 0
 32334                                  
 32335                                  ; 15/04/2019 - Retro DOS v4.0
 32336                                  
 32337                                  ;----------------------------------------------------------------------------
 32338                                  ;
 32339                                  ; procedure : parseline
 32340                                  ;
 32341                                  ; entry point is parseline. al contains the first character in command line.
 32342                                  ;
 32343                                  ;----------------------------------------------------------------------------
 32344                                  
 32345                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32346                                  	; (SYSINIT:30ACh)
 32347                                  
 32348                                  parseline:
 32349                                  	push	ds
 32350                                  
 32351                                  	push	cs
 32352                                  	pop	ds
 32353                                  
 32354                                  nextswtch:
 32355                                  	cmp	al,cr			; carriage return?
 32356                                  	je	short done_line
 32357                                  	cmp	al,lf			; linefeed?
 32358                                  	je	short put_back		; put it back and done
 32359                                  
 32360                                  ; anything less or equal to a space is ignored.
 32361                                  
 32362                                  	cmp	al,' '                  ; space?
 32363                                  	jbe	short getnext		; skip over space
 32364                                  	cmp	al,'/'
 32365                                  	je	short getparm
 32366                                  	stc				; mark error invalid-character-in-input
 32367                                  	jmp	short exitpl
 32368                                  
 32369                                  getparm:
 32370                                  	call	check_switch
 32371                                  	mov	[switches],bx		; save switches read so far
 32372                                  	jc	short swterr
 32373                                  getnext:
 32374                                  	call	getchr
 32375                                  	jc	short done_line
 32376                                  	jmp	short nextswtch
 32377                                  swterr:
 32378                                  	jmp	short exitpl		; exit if error
 32379                                  
 32380                                  done_line:
 32381                                  	; 12/12/2022
 32382                                  	test	byte [switches],flagdrive ; 8
 32383                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32384                                  	jnz	short okay
 32385                                  	stc				; mark error no-drive-specified
 32386                                  	jmp	short exitpl
 32387                                  
 32388                                  okay:
 32389                                  	mov	ax,[switches]
 32390                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32391                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32392                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32393                                  	;clc			    ; everything is fine
 32394                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32395                                  	; 12/12/2022
 32396                                  	; cf=0
 32397                                  	;clc
 32398                                  	call	setdeviceparameters
 32399                                  exitpl:
 32400                                  	pop	ds
 32401                                  	retn
 32402                                  put_back:
 32403                                  	inc	word [count]		; one more char to scan
 32404                                  	dec	word [chrptr]		; back up over linefeed
 32405                                  	jmp	short done_line
 32406                                  
 32407                                  %endif
 32408                                  
 32409                                  ;----------------------------------------------------------------------------
 32410                                  ;
 32411                                  ; procedure : check_switch
 32412                                  ;
 32413                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32414                                  ; gets the number, if any required, following the switch. the switch and the
 32415                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32416                                  ; error.
 32417                                  ;
 32418                                  ;----------------------------------------------------------------------------
 32419                                  
 32420                                  check_switch:
 32421 00002D0B E817FA                  	call	getchr
 32422                                  	;jc	short err_check
 32423 00002D0E 724E                    	jc	short err_chk
 32424 00002D10 24DF                            and     al,0DFh                 ; convert it to upper case
 32425 00002D12 3C41                    	cmp	al,'A'
 32426                                  	;jb	short err_check
 32427 00002D14 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32428 00002D16 3C5A                    	cmp	al,'Z'
 32429 00002D18 7743                    	ja	short err_check
 32430                                  
 32431 00002D1A 06                      	push	es
 32432                                  
 32433 00002D1B 0E                      	push	cs
 32434 00002D1C 07                      	pop	es
 32435                                  
 32436 00002D1D 8A0E[1437]              	mov	cl,[switchlist]		; get number of valid switches
 32437 00002D21 B500                    	mov	ch,0
 32438 00002D23 BF[1537]                	mov	di,1+switchlist		; point to string of valid switches
 32439 00002D26 F2AE                    	repne	scasb
 32440                                  
 32441 00002D28 07                      	pop	es
 32442 00002D29 7532                    	jnz	short err_check
 32443                                  
 32444 00002D2B B80100                  	mov	ax,1
 32445 00002D2E D3E0                    	shl	ax,cl			; set bit to indicate switch
 32446 00002D30 8B1E[8136]              	mov	bx,[switches]		; get switches so far
 32447 00002D34 09C3                    	or	bx,ax			; save this with other switches
 32448 00002D36 89C1                    	mov	cx,ax
 32449                                  	; 12/12/2022
 32450 00002D38 A8F8                    	test	al,switchnum ; 0F8h
 32451                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32452 00002D3A 741E                    	jz	short done_swtch
 32453                                  
 32454 00002D3C E8E6F9                  	call	getchr
 32455 00002D3F 721A                    	jc	short err_swtch
 32456                                  
 32457 00002D41 3C3A                    	cmp	al,':'
 32458 00002D43 7516                    	jne	short err_swtch
 32459                                  
 32460 00002D45 E8DDF9                  	call	getchr
 32461 00002D48 53                      	push	bx			; preserve switches
 32462                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32463                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32464                                  	; 12/12/2022
 32465                                  	; ds = cs
 32466 00002D49 C606[2A03]20            	mov	byte [sepchr],' '
 32467 00002D4E E8D803                  	call	getnum
 32468                                  	;mov	byte [cs:sepchr],0
 32469                                  	; 12/12/2022
 32470 00002D51 C606[2A03]00            	mov	byte [sepchr],0
 32471 00002D56 5B                      	pop	bx			; restore switches
 32472                                  
 32473                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32474                                  ; not check for carry set here. if there is an error, it will be detected
 32475                                  ; further on (hopefully).
 32476                                  
 32477 00002D57 E80500                  	call	process_num
 32478                                  
 32479                                  done_swtch:
 32480                                  	;clc
 32481                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32482                                  	; 12/12/2022
 32483                                  	; cf=0
 32484                                  	;clc
 32485 00002D5A C3                      	retn
 32486                                  
 32487                                  err_swtch:
 32488 00002D5B 31CB                    	xor	bx,cx			; remove this switch from the records
 32489                                  err_check:
 32490 00002D5D F9                      	stc
 32491                                  err_chk:
 32492 00002D5E C3                      	retn
 32493                                  
 32494                                  ;----------------------------------------------------------------------------
 32495                                  ;
 32496                                  ; procedure : process_num
 32497                                  ;
 32498                                  ; this routine takes the switch just input, and the number following (if any),
 32499                                  ; and sets the value in the appropriate variable. if the number input is zero
 32500                                  ; then it does nothing - it assumes the default value that is present in the
 32501                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32502                                  ;
 32503                                  ;----------------------------------------------------------------------------
 32504                                  
 32505                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32506                                  	; (SYSINIT:3156h)
 32507                                  process_num:
 32508 00002D5F 850E[8136]              	test	[switches],cx		; if this switch has been done before,
 32509 00002D63 752B                    	jnz	short done_ret		; ignore this one.
 32510                                  	; 12/12/2022
 32511 00002D65 F6C108                  	test	cl,flagdrive ; 8
 32512                                  	;test	cx,flagdrive ; 8
 32513 00002D68 7404                    	jz	short try_f
 32514 00002D6A A2[8036]                	mov	byte [drive],al
 32515                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32516                                  	;jmp	short done_ret
 32517                                  	; 12/12/2022
 32518                                  	; cf=0
 32519 00002D6D C3                      	retn	; 13/05/2019
 32520                                  try_f:
 32521                                  	; 12/12/2022
 32522 00002D6E F6C180                  	test	cl,flagff ; 80h
 32523                                  	;test	cx,flagff ; 80h
 32524 00002D71 7404                    	jz	short try_t
 32525                                  
 32526                                  ; ensure that we do not get bogus form factors that are not supported
 32527                                  
 32528                                  	;mov	[deviceparameters+1],al
 32529 00002D73 A2[5935]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32530                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32531                                  	;jmp	short done_ret
 32532                                  	; 12/12/2022
 32533                                  	; cf=0
 32534 00002D76 C3                      	retn	; 13/05/2019
 32535                                  try_t:
 32536 00002D77 09C0                    	or	ax,ax
 32537 00002D79 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32538                                  	; 12/12/2022
 32539 00002D7B F6C110                  	test	cl,flagcyln ; 10h
 32540                                  	;test	cx,flagcyln ; 10h
 32541 00002D7E 7404                    	jz	short try_s
 32542                                  
 32543                                  	;mov	[deviceparameters+4],ax
 32544 00002D80 A3[5C35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32545                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32546                                  	;jmp	short done_ret
 32547                                  	; 12/12/2022
 32548                                  	; cf=0
 32549 00002D83 C3                      	retn	; 13/05/2019
 32550                                  try_s:
 32551                                  	; 12/12/2022
 32552 00002D84 F6C120                  	test	cl,flagseclim ; 20h
 32553                                  	;test	cx,flagseclim ; 20h
 32554 00002D87 7404                    	jz	short try_h
 32555 00002D89 A3[7E36]                	mov	[slim],ax
 32556                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32557                                  	;jmp	short done_ret
 32558                                  	; 12/12/2022
 32559                                  	; cf=0
 32560 00002D8C C3                      	retn	; 13/05/2019
 32561                                  
 32562                                  ; must be for number of heads
 32563                                  
 32564                                  try_h:
 32565 00002D8D A3[7C36]                	mov	[hlim],ax
 32566                                  done_ret:
 32567                                  	;clc
 32568                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32569                                  	; 12/12/2022
 32570                                  	; cf=0 (test instruction resets cf)
 32571                                  	;clc
 32572 00002D90 C3                      	retn
 32573                                  
 32574                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32575                                  %if 1
 32576                                  
 32577                                  ; 15/04/2019 - Retro DOS v4.0
 32578                                  
 32579                                  ;----------------------------------------------------------------------------
 32580                                  ;
 32581                                  ; procedure : parseline
 32582                                  ;
 32583                                  ; entry point is parseline. al contains the first character in command line.
 32584                                  ;
 32585                                  ;----------------------------------------------------------------------------
 32586                                  
 32587                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32588                                  	; (SYSINIT:30ACh)
 32589                                  parseline:
 32590                                  	; 04/01/2023
 32591                                  	; ds = cs ; *
 32592                                  
 32593                                  	;push	ds ; *
 32594                                  
 32595                                  	;push	cs ; *
 32596                                  	;pop	ds ; *
 32597                                  
 32598                                  nextswtch:
 32599 00002D91 3C0D                    	cmp	al,cr			; carriage return?
 32600 00002D93 741C                    	je	short done_line
 32601 00002D95 3C0A                    	cmp	al,lf			; linefeed?
 32602 00002D97 7421                    	je	short put_back		; put it back and done
 32603                                  
 32604                                  ; anything less or equal to a space is ignored.
 32605                                  
 32606 00002D99 3C20                    	cmp	al,' '                  ; space?
 32607 00002D9B 760F                    	jbe	short getnext		; skip over space
 32608 00002D9D 3C2F                    	cmp	al,'/'
 32609 00002D9F 7402                    	je	short getparm
 32610 00002DA1 F9                      	stc				; mark error invalid-character-in-input
 32611                                  	;jmp	short exitpl
 32612                                  	; 04/01/2023
 32613                                  swterr:
 32614 00002DA2 C3                      	retn
 32615                                  
 32616                                  getparm:
 32617 00002DA3 E865FF                  	call	check_switch
 32618 00002DA6 891E[8136]              	mov	[switches],bx		; save switches read so far
 32619 00002DAA 72F6                    	jc	short swterr
 32620                                  getnext:
 32621 00002DAC E876F9                  	call	getchr
 32622                                  	;jc	short done_line
 32623                                  	;jmp	short nextswtch
 32624                                  	; 04/01/2023
 32625 00002DAF 73E0                    	jnc	short nextswtch
 32626                                  ;swterr:
 32627                                  	;jmp	short exitpl		; exit if error
 32628                                  
 32629                                  done_line:
 32630                                  	; 12/12/2022
 32631 00002DB1 F606[8136]08            	test	byte [switches],flagdrive ; 8
 32632                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32633 00002DB6 750C                    	jnz	short okay
 32634 00002DB8 F9                      	stc				; mark error no-drive-specified
 32635                                  	;jmp	short exitpl
 32636                                  	; 04/01/2023
 32637 00002DB9 C3                      	retn
 32638                                  
 32639                                  ;exitpl:
 32640                                  	; 04/01/2023
 32641                                  	; ds = cs
 32642                                  	;;pop	ds ; *
 32643                                  	;retn
 32644                                  
 32645                                  put_back:
 32646 00002DBA FF06[D203]              	inc	word [count]		; one more char to scan
 32647 00002DBE FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32648 00002DC2 EBED                    	jmp	short done_line
 32649                                  
 32650                                  okay:
 32651 00002DC4 A1[8136]                	mov	ax,[switches]
 32652 00002DC7 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32653 00002DCA A3[5A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32654 00002DCD C706[7E35]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32655                                  	;clc			    ; everything is fine
 32656                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32657                                  	; 12/12/2022
 32658                                  	; cf=0
 32659                                  	;clc
 32660                                  	;call	setdeviceparameters
 32661                                  	; 04/01/2023
 32662                                  	;jmp	short setdeviceparameters
 32663                                  
 32664                                  %endif
 32665                                  
 32666                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32667                                  
 32668                                  ;----------------------------------------------------------------------------
 32669                                  ;
 32670                                  ; procedure : setdeviceparameters
 32671                                  ;
 32672                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32673                                  ; system based on the form factor. it is assumed that the bpbs for the
 32674                                  ; various form factors are present in the bpbtable. for hard files,
 32675                                  ; the recommended bpb is the same as the bpb on the drive.
 32676                                  ; no attempt is made to preserve registers since we are going to jump to
 32677                                  ; sysinit straight after this routine.
 32678                                  ;
 32679                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32680                                  ;	  we always return no carry
 32681                                  ;
 32682                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32683                                  ;
 32684                                  ;----------------------------------------------------------------------------
 32685                                  
 32686                                  ; 15/04/2019 - Retro DOS v4.0
 32687                                  
 32688                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32689                                  setdeviceparameters:
 32690                                  	; 04/01/2023
 32691                                  	; ds = cs
 32692                                  	
 32693 00002DD3 06                      	push	es
 32694                                  
 32695 00002DD4 0E                      	push	cs
 32696 00002DD5 07                      	pop	es
 32697                                  
 32698 00002DD6 31DB                    	xor	bx,bx
 32699 00002DD8 8A1E[5935]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32700 00002DDC 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32701 00002DDF 7506                    	jne	short got_80
 32702                                  
 32703 00002DE1 C706[5C35]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32704                                  							; 48 tpi=40 cyl
 32705                                  got_80:
 32706 00002DE7 D1E3                    	shl	bx,1			; get index into bpb table
 32707 00002DE9 8BB7[0037]              	mov	si,[bpbtable+bx]	; get address of bpb
 32708                                  
 32709                                  	;mov	di,deviceparameters+7	
 32710                                  	; 02/11/2022
 32711 00002DED BF[5F35]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32712 00002DF0 B91F00                  	mov	cx,A_BPB.size ; 31
 32713 00002DF3 FC                      	cld
 32714                                  	;repe	movsb
 32715                                  	; 02/11/2022
 32716 00002DF4 F3A4                    	rep	movsb
 32717                                  
 32718 00002DF6 07                      	pop	es
 32719                                  
 32720                                  	; 12/12/2022
 32721 00002DF7 F606[8136]20            	test	byte [switches],flagseclim ; 20h
 32722                                  	;test	word [switches],flagseclim ; 20h
 32723 00002DFC 7406                    	jz	short see_heads
 32724                                  
 32725 00002DFE A1[7E36]                	mov	ax,[slim]
 32726                                  	;mov	[deviceparameters+20],ax
 32727 00002E01 A3[6C35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32728                                  
 32729                                  see_heads:
 32730                                  	; 12/12/2022
 32731 00002E04 F606[8136]40            	test	byte [switches],flagheads ; 40h
 32732                                  	;test	word [switches],flagheads ; 40h
 32733 00002E09 7406                    	jz	short heads_not_altered
 32734                                  
 32735 00002E0B A1[7C36]                	mov	ax,[hlim]
 32736                                  	;mov	[deviceparameters+22],ax	
 32737 00002E0E A3[6E35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32738                                  
 32739                                  heads_not_altered:
 32740                                  
 32741                                  ; set up correct media descriptor byte and sectors/cluster
 32742                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32743                                  
 32744                                  	;mov	byte [deviceparameters+9],2
 32745                                  	; 02/11/2022
 32746                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32747                                  	; 04/01/2023
 32748 00002E11 B80200                  	mov	ax,2	
 32749 00002E14 A2[6135]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32750                                  
 32751 00002E17 B3F0                    	mov	bl,0F0h			; get default mediabyte
 32752                                  
 32753                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32754                                  
 32755                                  	;mov	bh,[deviceparameters+17]
 32756                                  	; 02/11/2022
 32757 00002E19 8A3E[6935]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32758                                  
 32759                                  	; 04/01/2023
 32760                                  	; ax = 2
 32761 00002E1D 3906[6E35]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32762                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32763 00002E21 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32764                                  
 32765 00002E23 7524                    	jne	short only_one_head	; one head, do one head stuff
 32766                                  
 32767                                  ;	two head drives will use the mediadescriptor from the bpb
 32768                                  
 32769 00002E25 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32770                                  
 32771                                  ;	two sided drives have two special cases to look for. One is
 32772                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32773                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32774                                  ;	   one sector/cluster.
 32775                                  
 32776                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32777                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32778                                  ;	   type of 2 headed drive is all set.
 32779                                  
 32780 00002E27 833E[6C35]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32781 00002E2C 7509                    	jne	short not_144m
 32782 00002E2E 833E[5C35]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32783 00002E33 7502                    	jne	short not_144m
 32784                                  
 32785                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32786                                  
 32787 00002E35 EB24                    	jmp	short got_one_secperclus_drive
 32788                                  
 32789                                  ;	check for 320K
 32790                                  
 32791                                  not_144m:
 32792 00002E37 833E[5C35]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32793 00002E3C 7521                    	jne	short got_correct_mediad
 32794 00002E3E 833E[6C35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32795 00002E43 751A                    	jne	short got_correct_mediad
 32796                                  
 32797 00002E45 B3FC                    	mov	bl,0FCh
 32798 00002E47 EB16                    	jmp	short got_correct_mediad
 32799                                  
 32800                                  only_one_head:
 32801                                  
 32802                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32803                                  
 32804 00002E49 803E[5935]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32805 00002E4E 740B                    	je	short got_one_secperclus_drive
 32806                                  
 32807                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32808                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32809                                  ;	  besides 8 will be considered 0fch
 32810                                  
 32811 00002E50 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32812 00002E52 833E[6C35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32813                                  	; 12/12/2022
 32814 00002E57 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32815                                  
 32816 00002E59 B3FE                    	mov	bl,0FEh			; 160K mediaid
 32817                                  
 32818                                  ;	we've either got a one sided drive, or a 1.44M drive
 32819                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32820                                  
 32821                                  got_one_secperclus_drive:
 32822                                  	; 04/01/2023
 32823                                  	; ax = 2
 32824 00002E5B 48                      	dec	ax  ; ax = 1
 32825 00002E5C A2[6135]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32826                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32827                                  
 32828                                  got_correct_mediad:
 32829 00002E5F 881E[6935]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32830                                  
 32831                                  ;	 Calculate the correct number of Total Sectors on medium
 32832                                  
 32833 00002E63 A1[5C35]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32834 00002E66 F726[6E35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32835 00002E6A F726[6C35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32836 00002E6E A3[6735]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32837 00002E71 F8                      	clc				; we currently return no errors
 32838                                  
 32839 00002E72 C3                      	retn
 32840                                  
 32841                                  ;	M047 -- end rewritten routine
 32842                                  
 32843                                  ;----------------------------------------------------------------------------
 32844                                  ;
 32845                                  ; procedure : organize
 32846                                  ;
 32847                                  ;----------------------------------------------------------------------------
 32848                                  
 32849                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32850                                  	; (SYSINIT:3234h)
 32851                                  
 32852                                  organize:
 32853                                  	; 04/01/2023
 32854                                  	; ds = cs
 32855 00002E73 8B0E[D203]              	mov	cx,[count]
 32856                                  	;mov	cx,[cs:count]
 32857 00002E77 E326                    	jcxz	nochar1
 32858                                  
 32859                                  ;ifndef	MULTI_CONFIG
 32860                                  ;
 32861                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32862                                  ;;   because we the case of values in SET commands preserved
 32863                                  ;
 32864                                  ;	call	mapcase
 32865                                  ;endif
 32866                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32867 00002E79 E81B02                  	call	mapcase
 32868                                  
 32869 00002E7C 31F6                    	xor	si,si
 32870 00002E7E 89F7                    	mov	di,si
 32871 00002E80 31C0                    	xor	ax,ax
 32872                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32873                                  	;;mov	byte [cs:com_level],0
 32874                                  	; 12/12/2022
 32875                                  	;mov	[cs:com_level],al ; 0
 32876                                  	; 04/01/2023
 32877                                  	; ds = cs
 32878 00002E82 A2[CC03]                	mov	[com_level],al ; 0
 32879                                  org1:
 32880 00002E85 E8B101                  	call	skip_comment
 32881 00002E88 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32882 00002E8A E89601                  	call	get2			; not a comment string. then get a char.
 32883 00002E8D 3C0A                    	cmp	al,lf ; 0Ah
 32884 00002E8F 7406                    	je	short end_commd_line	; starts with a blank line.
 32885 00002E91 3C20                    	cmp	al,' ' ; 20h
 32886 00002E93 76F0                    	jbe	short org1		; skip leading control characters
 32887 00002E95 EB0A                    	jmp	short findit
 32888                                  
 32889                                  end_commd_line:
 32890 00002E97 AA                      	stosb				; store line feed char in buffer for the linecount.
 32891                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32892                                  	; 04/01/2023
 32893                                  	; ds = cs
 32894 00002E98 C606[CC03]00            	mov	byte [com_level],0
 32895 00002E9D EBE6                    	jmp	short org1
 32896                                  
 32897                                  nochar1:
 32898 00002E9F F9                      	stc
 32899 00002EA0 C3                      	retn
 32900                                  
 32901                                  findit:
 32902 00002EA1 51                      	push	cx
 32903 00002EA2 56                      	push	si
 32904 00002EA3 57                      	push	di
 32905 00002EA4 89F5                    	mov	bp,si
 32906 00002EA6 4D                      	dec	bp
 32907 00002EA7 BE[C734]                        mov     si,comtab		; prepare to search command table
 32908 00002EAA B500                    	mov	ch,0
 32909                                  findcom:
 32910 00002EAC 89EF                    	mov	di,bp
 32911 00002EAE 8A0C                    	mov	cl,[si]
 32912 00002EB0 46                      	inc	si
 32913 00002EB1 E324                    	jcxz	nocom
 32914                                  
 32915                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32916                                  
 32917                                  ;ifdef	MULTI_CONFIG
 32918                                  ;
 32919                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32920                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32921                                  ;;   anything in particular)
 32922                                  ;
 32923                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32924                                  ;       je	short semicolon
 32925                                  ;loopcom:
 32926                                  ;       mov     al,[es:di]
 32927                                  ;       inc     di
 32928                                  ;       and     al,~20h ; 0DFh		; force upper case
 32929                                  ;       inc     si                      ; compare to byte @es:di
 32930                                  ;       cmp     al,[si-1]
 32931                                  ;       loope   loopcom
 32932                                  ;;else
 32933                                  ;;	repe	cmpsb
 32934                                  ;endif
 32935                                  	; 02/11/2022
 32936 00002EB3 F3A6                    	repe	cmpsb
 32937                                  
 32938 00002EB5 9F                      	lahf
 32939 00002EB6 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32940 00002EB8 9E                      	sahf
 32941 00002EB9 AC                              lodsb                           ; get indicator letter
 32942 00002EBA 75F0                    	jnz	short findcom
 32943 00002EBC 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32944 00002EC0 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32945 00002EC2 26803D0A                	cmp	byte [es:di],lf
 32946 00002EC6 740A                    	je	short gotcom0
 32947                                  
 32948                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32949                                  ;
 32950                                  ;;ifdef	MULTI_CONFIG
 32951                                  ;
 32952                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32953                                  ;
 32954                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32955                                  ;       je	short gotcom0
 32956                                  ;;endif
 32957                                  ;	push	ax
 32958                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32959                                  ;
 32960                                  ;;ifdef	MULTI_CONFIG
 32961                                  ;
 32962                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32963                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32964                                  ;;   stored in the CONFIG.SYS memory image.
 32965                                  ;
 32966                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32967                                  ;       jne	short no_query		; no
 32968                                  ;       pop     ax                      ; yes, so retrieve the original code
 32969                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32970                                  ;       jmp     short gotcom0           ;
 32971                                  ;semicolon:
 32972                                  ;       mov     al,CONFIG_REM
 32973                                  ;       jmp     short gotcom0
 32974                                  ;no_query:
 32975                                  ;;endif  ;MULTI_CONFIG
 32976                                  
 32977                                  	; 02/11/2022
 32978 00002EC8 50                      	push	ax
 32979 00002EC9 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32980                                  
 32981 00002ECC E8A001                  	call	delim
 32982                                  no_delim:
 32983 00002ECF 58                      	pop	ax
 32984 00002ED0 75DA                    	jnz	short findcom
 32985                                  gotcom0:
 32986 00002ED2 5F                      	pop	di
 32987 00002ED3 5E                      	pop	si
 32988 00002ED4 59                      	pop	cx
 32989 00002ED5 EB0F                    	jmp	short gotcom
 32990                                  nocom:
 32991 00002ED7 5F                      	pop	di
 32992 00002ED8 5E                      	pop	si
 32993 00002ED9 59                      	pop	cx
 32994 00002EDA B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32995 00002EDC AA                      	stosb				; save indicator char.
 32996                                  _skipline:
 32997 00002EDD E84301                  	call	get2
 32998 00002EE0 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32999 00002EE2 75F9                            jne     short _skipline
 33000 00002EE4 EBB1                    	jmp	short end_commd_line	; handle next command line
 33001                                  gotcom:
 33002 00002EE6 AA                              stosb                           ; save indicator char in buffer
 33003                                  
 33004                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33005                                  ;;ifdef	MULTI_CONFIG
 33006                                  ;
 33007                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33008                                  ;;   it screws up the direct comparisons below.
 33009                                  ;
 33010                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33011                                  ;;endif
 33012                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 33013                                  ;
 33014                                  ;;ifdef	MULTI_CONFIG
 33015                                  ;
 33016                                  ;;   There is no whitespace/delimiter between the "begin block" character
 33017                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33018                                  ;;   skipping code
 33019                                  ;
 33020                                  ;       cmp     al,CONFIG_BEGIN
 33021                                  ;       je	short org31
 33022                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 33023                                  ;       je      short no_mapcase
 33024                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 33025                                  ;       je      short no_mapcase
 33026                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 33027                                  ;       je      short no_mapcase
 33028                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 33029                                  ;       je      short no_mapcase
 33030                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33031                                  ;no_mapcase:
 33032                                  ;;endif
 33033                                  
 33034                                  	; 02/11/2022
 33035                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33036                                  	; 04/01/2023
 33037                                  	; ds = cs
 33038 00002EE7 A2[D003]                	mov	[cmd_indicator],al
 33039                                  org2:	
 33040 00002EEA E83601                  	call    get2                    ; skip the command name until delimiter
 33041 00002EED 3C0A                            cmp     al,lf
 33042 00002EEF 740B                    	je	short org21
 33043 00002EF1 3C0D                    	cmp	al,cr
 33044 00002EF3 7407                    	je	short org21
 33045                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33046                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33047                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33048                                  
 33049 00002EF5 E87701                  	call	delim
 33050 00002EF8 75F0                            jnz	short org2
 33051 00002EFA EB02                    	jmp	short org3
 33052                                  org21:					;if cr or lf then
 33053 00002EFC 4E                      	dec	si			; undo si, cx register
 33054 00002EFD 41                      	inc	cx			;  and continue
 33055                                  org3:	
 33056                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33057                                  	;je	short get_cmt_token
 33058                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33059                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33060                                  	;;je	short org_file
 33061                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33062                                  	;je	short org_file
 33063                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33064                                          ;;je	short org_file
 33065                                  	;; 02/11/2022
 33066                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33067                                  	;je	short org_file
 33068                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33069                                  	;je	short org_file
 33070                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33071                                  	;je	short org_switch
 33072                                  
 33073                                  	; 04/01/2023
 33074                                  	; ds = cs
 33075                                  
 33076 00002EFE 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33077 00002F03 7456                    	je	short get_cmt_token
 33078                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33079                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33080                                  	;je	short org_file
 33081 00002F05 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33082 00002F0A 7429                    	je	short org_file
 33083                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33084                                          ;je	short org_file
 33085                                  	; 02/11/2022
 33086 00002F0C 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33087 00002F11 7422                    	je	short org_file
 33088 00002F13 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33089 00002F18 741B                    	je	short org_file
 33090 00002F1A 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33091 00002F1F 7403                    	je	short org_switch
 33092                                  	
 33093                                  org31:
 33094 00002F21 E99500                  	jmp	org4
 33095                                  
 33096                                  org_switch:
 33097 00002F24 E81201                  	call	skip_comment
 33098 00002F27 7472                    	jz	short end_commd_line_brdg
 33099                                  
 33100 00002F29 E8F700                  	call	get2
 33101 00002F2C E84801                  	call	org_delim
 33102 00002F2F 74F3                    	jz	short org_switch
 33103                                  
 33104 00002F31 AA                      	stosb
 33105 00002F32 E99300                  	jmp	org5
 33106                                  
 33107                                  org_file:			; get the filename and put 0 at end
 33108 00002F35 E80101                  	call	skip_comment
 33109 00002F38 7464                    	jz	short org_put_zero
 33110                                  
 33111 00002F3A E8E600                  	call	get2		; not a comment
 33112 00002F3D E82F01                  	call	delim
 33113 00002F40 74F3                    	jz	short org_file	; skip the possible delimiters
 33114                                  
 33115 00002F42 AA                      	stosb			; copy the first non delim char found in buffer
 33116                                  
 33117                                  org_copy_file:
 33118 00002F43 E8F300                  	call	skip_comment	; comment char in the filename?
 33119 00002F46 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33120                                  
 33121 00002F48 E8D800                  	call	get2
 33122 00002F4B 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33123 00002F4D 7457                    	je	short end_file_slash ; this will be the special case.
 33124                                  
 33125 00002F4F AA                      	stosb			; save the char. in buffer
 33126 00002F50 E81C01                  	call	delim
 33127 00002F53 7459                    	jz	short end_copy_file
 33128                                  
 33129 00002F55 3C20                    	cmp	al, ' '
 33130 00002F57 77EA                    	ja	short org_copy_file ; keep copying
 33131 00002F59 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33132                                  
 33133                                  get_cmt_token:			; get the token. just max. 2 char.
 33134 00002F5B E8C500                  	call	get2
 33135 00002F5E 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33136 00002F60 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33137 00002F62 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33138 00002F64 74F5                    	je	short get_cmt_token ;  character.)
 33139 00002F66 3C3D                    	cmp	al,'='		; = is special in this case.
 33140 00002F68 74F1                    	je	short get_cmt_token
 33141 00002F6A 3C0D                    	cmp	al,cr
 33142 00002F6C 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33143 00002F6E 3C0A                    	cmp	al,lf
 33144 00002F70 7422                    	je	short get_cmt_end
 33145                                  
 33146                                  	; 04/01/2023
 33147                                  	; ds = cs
 33148                                  	;mov	[cs:cmmt1],al	; store it
 33149                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33150 00002F72 A2[CE03]                	mov	[cmmt1],al	; store it
 33151 00002F75 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33152 00002F7A E8A600                  	call	get2
 33153 00002F7D 3C20                    	cmp	al,' ' ; 20h
 33154 00002F7F 7413                    	je	short get_cmt_end
 33155 00002F81 3C09                    	cmp	al,tab ; 9
 33156 00002F83 740F                    	je	short get_cmt_end
 33157 00002F85 3C0D                    	cmp	al,cr  ; 0Dh
 33158 00002F87 740B                    	je	short get_cmt_end
 33159 00002F89 3C0A                    	cmp	al,lf  ; 0Ah
 33160 00002F8B 740E                    	je	short end_commd_line_brdg
 33161                                  
 33162                                  	;mov	[cs:cmmt2],al
 33163                                  	;inc	byte [cs:cmmt]
 33164                                  	; 04/01/2023
 33165 00002F8D A2[CF03]                	mov	[cmmt2],al
 33166 00002F90 FE06[CD03]              	inc	byte [cmmt]
 33167                                  
 33168                                  get_cmt_end:
 33169 00002F94 E88C00                  	call	get2
 33170 00002F97 3C0A                    	cmp	al,lf
 33171 00002F99 75F9                    	jne	short get_cmt_end	; skip it.
 33172                                  end_commd_line_brdg: 
 33173 00002F9B E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33174                                  
 33175                                  org_put_zero:				; make the filename in front of
 33176 00002F9E 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33177 00002FA2 47                      	inc	di
 33178 00002FA3 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33179                                  
 33180                                  end_file_slash: 			; al = "/" option char.
 33181 00002FA6 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33182 00002FAA 47                      	inc	di			; and
 33183 00002FAB AA                      	stosb				; store "/" after that.
 33184 00002FAC EB1A                    	jmp	short org5		; continue with the rest of the line
 33185                                  
 33186                                  end_copy_file:
 33187 00002FAE 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33188 00002FB3 3C0A                    	cmp	al,lf
 33189 00002FB5 74E4                    	je	short end_commd_line_brdg
 33190 00002FB7 EB0F                    	jmp	short org5
 33191                                  
 33192                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33193 00002FB9 E87D00                  	call	skip_comment
 33194 00002FBC 74DD                    	jz	short end_commd_line_brdg
 33195                                  
 33196 00002FBE E86200                  	call	get2
 33197 00002FC1 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33198 00002FC4 74F3                    	jz	short org4
 33199 00002FC6 EB08                    	jmp	short org51
 33200                                  
 33201                                  org5:					; rest of the line
 33202 00002FC8 E86E00                  	call	skip_comment		; comment?
 33203 00002FCB 74CE                    	jz	short end_commd_line_brdg
 33204 00002FCD E85300                  	call	get2			; not a comment.
 33205                                  
 33206                                  org51:
 33207 00002FD0 AA                      	stosb				; copy the character
 33208 00002FD1 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33209 00002FD3 743A                    	je	short at_quote
 33210 00002FD5 3C20                    	cmp	al,' '  ; 20h
 33211 00002FD7 77EF                    	ja	short org5
 33212                                  					; M051 - Start
 33213                                  	; 04/01/2023
 33214                                  	; ds = cs
 33215 00002FD9 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33216                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33217 00002FDE 7514                    	jne	short not_dh		; N: 
 33218 00002FE0 3C0A                    	cmp	al,lf			; Q: is this line feed
 33219 00002FE2 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33220 00002FE4 3C0D                    	cmp	al,cr			; Q: is this a cr
 33221 00002FE6 75E0                    	jne	short org5		; N: 
 33222 00002FE8 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33223 00002FED AA                      	stosb				; put cr after blank
 33224 00002FEE FE06[B52C]              	inc	byte [insert_blank]
 33225                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33226                                  					; inserted
 33227 00002FF2 EBD4                    	jmp	short org5
 33228                                  not_dh:					; M051 - End
 33229                                  
 33230 00002FF4 3C0A                    	cmp	al,lf			; line feed?
 33231 00002FF6 740F                    	je	short org1_brdg		; handles the next command line.
 33232 00002FF8 EBCE                    	jmp	short org5		; handles next char in this line.
 33233                                  
 33234                                  org_dhlf:				; M051 - Start
 33235                                  	; 04/01/2023
 33236                                  	; ds = cs
 33237 00002FFA 803E[B52C]01            	cmp	byte [insert_blank],1
 33238                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33239 00002FFF 7406                    	je	short org1_brdg		; Y:
 33240 00003001 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33241 00003006 AA                      	stosb				; put lf after blank
 33242                                  					; M051 - End
 33243                                  org1_brdg:
 33244 00003007 C606[B52C]00            	mov	byte [insert_blank],0 
 33245                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33246                                  					; M051: devicehigh
 33247 0000300C E976FE                  	jmp	org1
 33248                                  
 33249                                  at_quote:
 33250 0000300F 803E[CC03]00            	cmp	byte [com_level],0
 33251                                  	;cmp	byte [cs:com_level],0
 33252 00003014 7407                    	je	short up_level
 33253                                  	;mov	byte [cs:com_level],0	; reset it.
 33254 00003016 C606[CC03]00            	mov	byte [com_level],0
 33255 0000301B EBAB                    	jmp	short org5
 33256                                  
 33257                                  up_level:
 33258                                  	;inc	byte [cs:com_level]	; set it.
 33259 0000301D FE06[CC03]              	inc	byte [com_level]
 33260 00003021 EBA5                    	jmp	short org5
 33261                                  
 33262                                  ;----------------------------------------------------------------------------
 33263                                  ;
 33264                                  ; procedure : get2
 33265                                  ;
 33266                                  ;----------------------------------------------------------------------------
 33267                                  
 33268                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33269                                  	; (SYSINIT:33FAh)
 33270                                  	; 04/01/2023
 33271                                  get2:
 33272 00003023 E304                    	jcxz	noget
 33273                                  	;
 33274                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33275                                  	;;lods	byte ptr es:[si]
 33276                                  	; 12/12/2022
 33277 00003025 26                      	es	
 33278 00003026 AC                      	lodsb
 33279                                  	;mov	al, [es:si]
 33280                                  	;inc	si
 33281                                  	;
 33282 00003027 49                      	dec	cx
 33283 00003028 C3                      	retn
 33284                                  noget:
 33285 00003029 59                      	pop	cx
 33286                                  	; 04/01/2023
 33287                                  	; ds = cs
 33288                                  	;mov	[cs:count],di ; 13/05/2019
 33289                                  	;mov	[cs:org_count],di
 33290 0000302A 893E[D203]              	mov	[count],di
 33291 0000302E 893E[D403]              	mov	[org_count],di
 33292 00003032 31F6                    	xor	si,si
 33293                                  	;mov	[cs:chrptr],si
 33294 00003034 8936[D603]              	mov	[chrptr],si
 33295                                  
 33296                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33297                                  ;;ifndef MULTI_CONFIG
 33298                                  ;;	retn
 33299                                  ;;else
 33300                                  ;
 33301                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33302                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33303                                  ;;   and the new boot menu stuff...
 33304                                  ;
 33305                                  ;	mov     cx,di
 33306                                  ;	jmp     menu_check
 33307                                  ;;endif
 33308                                  
 33309                                  	; 02/11/2022
 33310 00003038 C3                      	retn
 33311                                  
 33312                                  ;----------------------------------------------------------------------------
 33313                                  ;
 33314                                  ; procedure : skip_comment
 33315                                  ;
 33316                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33317                                  ;in) es:si-> string
 33318                                  ;	 cx -> length.
 33319                                  ;out) zero flag not set if not found a comment string.
 33320                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33321                                  ;	  the line feed character at this moment when return.
 33322                                  ;	  ax register destroyed.
 33323                                  ;	  if found, si, cx register adjusted accordingly.
 33324                                  ;
 33325                                  ;----------------------------------------------------------------------------
 33326                                  
 33327                                  	; 04/01/2023 - Retro DOS v4.0
 33328                                  
 33329                                  skip_comment:
 33330 00003039 E3EE                    	jcxz	noget		; get out of the organize routine.
 33331                                  
 33332                                  	; 04/01/2023
 33333                                  	; ds = cs	
 33334                                  
 33335 0000303B 803E[CC03]00            	cmp	byte [com_level],0
 33336                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33337 00003040 752C                    	jne	short no_commt	 ; (not inside quotations)
 33338                                  
 33339 00003042 803E[CD03]01            	cmp	byte [cmmt],1
 33340                                  	;cmp	byte [cs:cmmt],1
 33341 00003047 7225                    	jb	short no_commt
 33342                                  
 33343 00003049 268A04                  	mov	al,[es:si]
 33344                                  	
 33345 0000304C 3806[CE03]              	cmp	[cmmt1],al
 33346                                  	;cmp	[cs:cmmt1],al
 33347 00003050 751C                    	jne	short no_commt
 33348                                  
 33349 00003052 803E[CD03]02            	cmp	byte [cmmt],2
 33350                                  	;cmp	byte [cs:cmmt],2
 33351 00003057 750A                    	jne	short skip_cmmt
 33352                                  
 33353 00003059 268A4401                	mov	al,[es:si+1]
 33354                                  	
 33355 0000305D 3806[CF03]              	cmp	[cmmt2],al
 33356                                  	;cmp	[cs:cmmt2],al
 33357 00003061 750B                    	jne	short no_commt
 33358                                  skip_cmmt:
 33359 00003063 E3C4                    	jcxz	noget		; get out of organize routine.
 33360 00003065 268A04                  	mov	al,[es:si]
 33361 00003068 46                      	inc	si
 33362 00003069 49                      	dec	cx
 33363 0000306A 3C0A                    	cmp	al,lf		; line feed?
 33364 0000306C 75F5                    	jne	short skip_cmmt
 33365                                  no_commt:
 33366 0000306E C3                      	retn
 33367                                  
 33368                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33369                                  %if 0
 33370                                  
 33371                                  ;ifdef	MULTI_CONFIG
 33372                                  
 33373                                  ;----------------------------------------------------------------------------
 33374                                  ;
 33375                                  ;   kbd_read: wait for keystroke
 33376                                  ;
 33377                                  ;   INPUT
 33378                                  ;       DS == CS == sysinitseg
 33379                                  ;
 33380                                  ;   OUTPUT
 33381                                  ;       Carry SET to clean boot, CLEAR otherwise
 33382                                  ;
 33383                                  ;   OTHER REGS USED
 33384                                  ;       All
 33385                                  ;
 33386                                  ;   HISTORY
 33387                                  ;       Created 16-Nov-1992 by JeffPar
 33388                                  ;
 33389                                  ;----------------------------------------------------------------------------
 33390                                  
 33391                                  kbd_read:
 33392                                          test    byte [bDisableUI],2
 33393                                          jnz     short kbd_nodelay
 33394                                  
 33395                                          push    ds              ; the bios timer tick count is incremented
 33396                                          sub     ax,ax           ; 18.2 times per second;
 33397                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33398                                  	;mov	dx,[046Ch]	; get initial value
 33399                                  kbd_loop:
 33400                                          mov     ah,1            ;
 33401                                          int     16h             ; peek the keyboard
 33402                                          jnz	short kbd_loopdone ; something's there, get out
 33403                                          mov     ah,2            ; peek the shift states
 33404                                          int     16h             ;
 33405                                          test    al,03h          ; either right or left shift key bits set?
 33406                                          jnz	short kbd_loopdone ; yes
 33407                                          mov     ax,[046Ch]	;
 33408                                  	;sub	ax,dx           ; get difference
 33409                                  	; 15/04/2019 - Retro DOS v4.0
 33410                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33411                                  
 33412                                  	cmp     al,37           ; reached limit?
 33413                                          jb	short kbd_loop	; not yet
 33414                                  kbd_loopdone:
 33415                                          pop     ds              ; delay complete!
 33416                                  kbd_nodelay:
 33417                                          sub     bx,bx           ; assume clean boot
 33418                                          mov     ah,2            ; peek the shift states
 33419                                          int     16h             ;
 33420                                          test    al,03h          ; either right or left shift key bits set?
 33421                                          jz      short kbd_notshift ; no
 33422                                          inc     bx              ; yes
 33423                                          inc     bx
 33424                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33425                                  	or	byte [bQueryOpt],4
 33426                                  kbd_notshift:                   ;
 33427                                          mov     ah,1            ; peek the keyboard
 33428                                          int     16h             ;
 33429                                          jz	short kbd_test	; no key present
 33430                                          or      al,al           ; is it a function key?
 33431                                          jnz	short kbd_test	; no
 33432                                  
 33433                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33434                                          cmp     ah,62h          ; CTRL F5
 33435                                          je	short kbd_cfg_bypass
 33436                                  	
 33437                                          cmp     ah,3Fh          ; F5 function key?
 33438                                          jne	short kbd_notf5	; no
 33439                                  kbd_cfg_bypass:
 33440                                          mov     dx,_$CleanMsg
 33441                                          call    print
 33442                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33443                                  	or	byte [bQueryOpt],4           ;
 33444                                          jmp     short kbd_eat   ; yes, clean boot selected
 33445                                  kbd_notf5:
 33446                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33447                                          cmp     ah,65h          ; CTRL F8
 33448                                          je	short kbd_cfg_confirm
 33449                                  
 33450                                          cmp     ah,42h          ; F8 function key?
 33451                                          jne	short kbd_exit	; no
 33452                                  kbd_cfg_confirm:
 33453                                          mov     dx,_$InterMsg
 33454                                          call    print           ;
 33455                                          mov     bl,1            ; yes, interactive-boot option enabled
 33456                                          mov     [bQueryOpt],bl  ; change default setting
 33457                                  kbd_eat:                        ;
 33458                                          mov     ah,0            ;
 33459                                          int     16h             ; eat the key we assumed was a signal
 33460                                          mov	byte [secElapsed],-1
 33461                                          or      bx,bx           ;
 33462                                          jz	short kbd_clean	;
 33463                                  kbd_test:                       ;
 33464                                          cmp     bl,2            ;
 33465                                          jb	short kbd_exit	;
 33466                                  kbd_clean:                      ;
 33467                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33468                                          stc                     ; set carry to indicate abort
 33469                                          retn			;
 33470                                  kbd_exit:                       ;
 33471                                          clc                     ; clear carry to indicate success
 33472                                          retn			;
 33473                                  
 33474                                  ;----------------------------------------------------------------------------
 33475                                  ;
 33476                                  ;   set_numlock: set numlock LED
 33477                                  ;
 33478                                  ;   INPUT
 33479                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33480                                  ;
 33481                                  ;   OUTPUT
 33482                                  ;       None
 33483                                  ;
 33484                                  ;   OTHER REGS USED
 33485                                  ;       None
 33486                                  ;
 33487                                  ;   HISTORY
 33488                                  ;       Created 16-Nov-1992 by JeffPar
 33489                                  ;
 33490                                  ;----------------------------------------------------------------------------
 33491                                  
 33492                                  set_numlock:
 33493                                          push    ax
 33494                                          push    ds
 33495                                          sub     ax,ax
 33496                                          mov     ds,ax
 33497                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33498                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33499                                          jne	short not_off	; no
 33500                                          and     byte [0417h],~20h ; 0DFh
 33501                                          jmp     short set_done
 33502                                  not_off:
 33503                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33504                                          stc
 33505                                          jne	short set_done	; no
 33506                                          or      byte [0417h],20h
 33507                                  set_done:
 33508                                          pop     ds
 33509                                          pop     ax
 33510                                          retn
 33511                                  
 33512                                  ; 16/04/2019 - Retro DOS v4.0
 33513                                  
 33514                                  ;----------------------------------------------------------------------------
 33515                                  ;
 33516                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33517                                  ;
 33518                                  ;   INPUT
 33519                                  ;       CX == "organized" config.sys memory image length
 33520                                  ;    ES:SI -> "organized" config.sys memory image
 33521                                  ;       DS == CS == sysinitseg
 33522                                  ;
 33523                                  ;   OUTPUT
 33524                                  ;       Same as above;  the idea is that menu_check simply transforms
 33525                                  ;       a block-structured config.sys image into a conventional image,
 33526                                  ;       based on the user's block selection and any other boot-time options
 33527                                  ;       the user may have employed...
 33528                                  ;
 33529                                  ;   OTHER REGS USED
 33530                                  ;       All
 33531                                  ;
 33532                                  ;   NOTES
 33533                                  ;       [count] and [org_count] are set to the new config.sys image length
 33534                                  ;
 33535                                  ;   HISTORY
 33536                                  ;       Created 16-Mar-1992 by JeffPar
 33537                                  ;
 33538                                  ;----------------------------------------------------------------------------
 33539                                  
 33540                                  menu_check:
 33541                                  
 33542                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33543                                  ;   disable clean/interactive boot options
 33544                                  
 33545                                          push    cx              ;
 33546                                          push    si              ;
 33547                                          sub     bx,bx           ; remains ZERO until first block
 33548                                  swchk_loop:                     ;
 33549                                          call    get_char        ; get first char of current line
 33550                                          jc	short swchk_end	; hit eof
 33551                                          cmp     al,CONFIG_BEGIN ;
 33552                                          jne	short swchk_next1 ;
 33553                                          inc     bx              ; remember that we've seen a block
 33554                                          jmp     short swchk_nextline
 33555                                  swchk_next1:                    ;
 33556                                          cmp     al,CONFIG_NUMLOCK
 33557                                          jne	short swchk_next2 ;
 33558                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33559                                          jnz	short swchk_nextline ; before the first block
 33560                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33561                                          mov     byte [es:si-1],CONFIG_REM
 33562                                          jmp     short swchk_nextline
 33563                                  swchk_next2:                    ;
 33564                                          cmp     al,CONFIG_SWITCHES
 33565                                          jne	short swchk_nextline ; this line ain't it
 33566                                  swchk_scan:                     ;
 33567                                          call    get_char        ; look for /N or /F
 33568                                  swchk_scan1:                    ;
 33569                                          cmp     al,LF           ; end of line?
 33570                                          je	short swchk_nextline ; yes
 33571                                          cmp     al,'/'          ; switch-char?
 33572                                          jne	short swchk_scan ; no
 33573                                          call    get_char        ;
 33574                                          and     al,~20h ; 0DFh	; convert to upper case
 33575                                          cmp     al,[swit_n+1]
 33576                                          jne	short swchk_scan2 ; no
 33577                                          or      byte [bDisableUI],1
 33578                                          jmp	short swchk_scan ; continue looking for switches of interest
 33579                                  swchk_scan2:                    ;
 33580                                          cmp     al,[swit_f+1]
 33581                                          jne	short swchk_scan1 ; no
 33582                                          or      byte [bDisableUI],2
 33583                                          jmp     short swchk_scan ; continue looking for switches of interest
 33584                                  swchk_nextline:                 ;
 33585                                          call    skip_opt_line   ;
 33586                                          jmp     short swchk_loop ;
 33587                                  swchk_end:                      ;
 33588                                          pop     si              ;
 33589                                          pop     cx              ;
 33590                                  
 33591                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33592                                  ;   the DisableUI flag is still clear
 33593                                  
 33594                                          test    byte [bDisableUI],1
 33595                                          jnz	short menu_search
 33596                                  ;
 33597                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33598                                  ;   there is anything at all in the keyboard buffer
 33599                                  ;
 33600                                          call    kbd_read
 33601                                          jnc	short menu_search
 33602                                          jmp	menu_abort
 33603                                  
 33604                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33605                                  
 33606                                  menu_search:
 33607                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33608                                          mov     di,szMenu	;
 33609                                          call    find_block      ; find the MENU block
 33610                                          jnc	short menu_found ;
 33611                                          mov     byte [szBoot],0
 33612                                          jmp	no_selection ; not found
 33613                                  
 33614                                  ;   Process the requested menu color(s)
 33615                                  
 33616                                  menu_color:
 33617                                          push    cx              ;
 33618                                          push    dx              ;
 33619                                          mov     dx,0007h        ; default color setting
 33620                                          call    get_number	; get first number
 33621                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33622                                          mov     ch,bl           ; save it in CH
 33623                                          and     dl,0F0h         ;
 33624                                          or      dl,bl           ;
 33625                                          call    delim           ; did we hit a delimiter
 33626                                          jne	short check_color ; no, all done
 33627                                          call    get_number	; get next number
 33628                                          and     bl,0Fh		; second # is background color (for high nibble)
 33629                                          mov     dh,bl           ; save it in DH
 33630                                          and     dl,0Fh		;
 33631                                          mov     cl,4            ;
 33632                                          shl     bl,cl           ;
 33633                                          or      dl,bl           ;
 33634                                  check_color:                    ;
 33635                                          cmp     ch,dh           ; are foreground/background the same?
 33636                                          jne	short set_color	; no
 33637                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33638                                  set_color:
 33639                                          mov     [bMenuColor],dl ;
 33640                                          pop     dx              ;
 33641                                          pop     cx              ;
 33642                                          jmp	menu_nextitem
 33643                                  
 33644                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33645                                  ;   above is there simply to alleviate short jump problems)
 33646                                  
 33647                                  menu_found:
 33648                                          mov     byte [bDefBlock],1
 33649                                          mov     word [offDefBlock],0
 33650                                          mov     byte [secTimeOut],-1
 33651                                          and     byte [bQueryOpt],~2 ; 0FDh
 33652                                  
 33653                                          call    skip_opt_line   ; skip to next line
 33654                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33655                                  
 33656                                  ;   Process the menu block now
 33657                                  
 33658                                  menu_process:
 33659                                          call    get_char        ; get first char of current line
 33660                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33661                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33662                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33663                                          je	short to_menu_getdefault
 33664                                          cmp     al,CONFIG_SUBMENU
 33665                                          je	short menu_item	; go process sub-menu
 33666                                          cmp     al,CONFIG_MENUITEM
 33667                                          je	short menu_item	; go process menu item
 33668                                          cmp     al,CONFIG_MENUDEFAULT
 33669                                          je	short menu_default ; go process menu default
 33670                                          cmp     al,CONFIG_MENUCOLOR
 33671                                          je	short menu_color ; go process menu color
 33672                                          cmp     al,CONFIG_NUMLOCK
 33673                                          je	short menu_numlock ;
 33674                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33675                                          je	short menu_nextitem ;
 33676                                          call    any_delim       ; allow blank lines and such
 33677                                          je	short menu_nextitem ;
 33678                                          stc                     ;
 33679                                          call    print_error     ; non-MENU command!
 33680                                          jmp     short menu_nextitem
 33681                                  menu_numlock:
 33682                                          call    set_numlock
 33683                                          jmp     short menu_nextitem
 33684                                  to_menu_getdefault:
 33685                                          jmp     short menu_getdefault
 33686                                  
 33687                                  ;   Save the offset of the default block name, we'll need it later
 33688                                  
 33689                                  menu_default:
 33690                                          mov     [offDefBlock],si; save address of default block name
 33691                                          cmp     byte [secElapsed],0
 33692                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33693                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33694                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33695                                          call    skip_delim      ; something is typed
 33696                                          jc	short menu_nextitem ;
 33697                                          mov     si,bx           ;
 33698                                          call    get_number      ; get number (of seconds for timeout)
 33699                                          cmp     bl,90           ; limit it to a reasonable number
 33700                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33701                                          mov     bl,90           ;  display function can handle)
 33702                                  timeout_ok:                     ;
 33703                                          mov     [secTimeOut],bl ;
 33704                                  timeout_skip:
 33705                                          jmp     short menu_nextitem
 33706                                  
 33707                                  ;   Verify that this is a valid menu item by searching for the named block
 33708                                  
 33709                                  menu_item:
 33710                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33711                                          jae	short menu_nextitem ;
 33712                                          mov     di,si           ; DS:DI -> block name to search for
 33713                                          call    srch_block      ;
 33714                                          je	short menu_itemfound ;
 33715                                          stc                     ;
 33716                                          call    print_error     ; print error and pause
 33717                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33718                                  
 33719                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33720                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33721                                  ;   and CX are unmodified
 33722                                  
 33723                                  menu_itemfound:
 33724                                          inc     dx              ; otherwise, increment total block count
 33725                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33726                                          mov	[abBlockType+bx],al
 33727                                          add     bx,bx           ; of recorded block names and descriptions
 33728                                  
 33729                                  ;   There should be a description immediately following the block name on
 33730                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33731                                  ;   description...
 33732                                  
 33733                                          mov     [aoffBlockName+bx],si
 33734                                          mov     [aoffBlockDesc+bx],si
 33735                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33736                                          call    skip_token      ;
 33737                                          jc	short menu_nextitem ; hit eol/eof
 33738                                          call    skip_delim      ;
 33739                                          jc	short menu_nextitem ; hit eol/eof
 33740                                          xchg    bx,di           ;
 33741                                          mov     [aoffBlockDesc+bx],di
 33742                                  
 33743                                  menu_nextitem:
 33744                                          call    skip_opt_line   ;
 33745                                          jmp     menu_process    ; go back for more lines
 33746                                  
 33747                                  ;   Display menu items now, after determining which one is default
 33748                                  
 33749                                  menu_getdefault:
 33750                                          or      dl,dl           ; where there any valid blocks at all?
 33751                                          jnz	short menu_valid ; yes
 33752                                          sub     bx,bx           ; no, so force autoselect of 0
 33753                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33754                                  menu_valid:
 33755                                          sub     bx,bx           ;
 33756                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33757                                          mov     di,[offDefBlock];
 33758                                          or      di,di           ; does a default block exist?
 33759                                          jz	short menu_nodefault ; no
 33760                                          inc     bx              ; yes, walk name table, looking for default
 33761                                  menu_chkdefault:
 33762                                          push    bx              ;
 33763                                          add     bx,bx           ;
 33764                                          mov     si,[aoffBlockName+bx]
 33765                                          mov     cx,128          ; arbitrary maximum length of a name
 33766                                          push    ds              ;
 33767                                          push    es              ;
 33768                                          pop     ds              ;
 33769                                          call    comp_names      ; is this block the same as the default?
 33770                                          pop     ds              ;
 33771                                          pop     bx              ;
 33772                                          je	short menu_setdefault ; yes
 33773                                          inc     bx              ;
 33774                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33775                                          jbe	short menu_chkdefault ; not yet
 33776                                  menu_nodefault:
 33777                                          mov     bl,1            ; if no default, force default to #1
 33778                                  menu_setdefault:
 33779                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33780                                  
 33781                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33782                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33783                                  ;   supposed to skip menu display and run with the specified default block;
 33784                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33785                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33786                                  ;   with no timeout)
 33787                                  
 33788                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33789                                          jne	short menu_display ; no
 33790                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33791                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33792                                          jmp     not_topmenu	;
 33793                                  
 33794                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33795                                  
 33796                                  menu_display:
 33797                                          mov     ah,0Fh          ; get current video mode
 33798                                          int     10h             ;
 33799                                          mov     ah,00h          ; just re-select that mode
 33800                                          int     10h             ;
 33801                                          push    es              ;
 33802                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33803                                          mov     es,ax           ; and save the current (default) video page
 33804                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33805                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33806                                          mov     al,[es:0062h]   ;
 33807                                          mov     [bCRTPage],al   ;
 33808                                          mov     ax,[bMenuPage]	; select new page for menu
 33809                                          int     10h             ;
 33810                                          mov     ax,0600h        ; clear entire screen
 33811                                          mov     bh,[bMenuColor] ; using this color
 33812                                          sub     cx,cx           ; upper left row/col
 33813                                          ;mov	dl,[es:CRT_Cols] 
 33814                                          mov	dl,[es:4Ah]
 33815                                  	dec     dl              ;
 33816                                          ;mov	dh,[es:CRT_Rows];
 33817                                          mov	dh,[es:84h]
 33818                                  	or      dh,dh           ; # of rows valid?
 33819                                          jnz	short menu_clear ; hopefully
 33820                                          mov     dh,[bLastRow]   ; no, use a default
 33821                                  menu_clear:
 33822                                          int     10h             ; clear the screen using the req. attribute
 33823                                          pop     es              ;
 33824                                          mov     [bLastRow],dh   ; save DH
 33825                                          mov     dx,_$MenuHeader
 33826                                          call    print           ; cursor now on row 3 (numbered from 0)
 33827                                  
 33828                                          test    byte [bDisableUI],1
 33829                                          jnz     short menu_nostatus
 33830                                          mov     bh,[bMenuPage]  ;
 33831                                          mov     dh,[bLastRow]   ; restore DH
 33832                                          mov     dl,0            ; print the status line on row DH, col 0,
 33833                                          mov     ah,02h          ; now that we can trash the cursor position
 33834                                          int     10h             ;
 33835                                          mov     dx,_$StatusLine
 33836                                          call    print           ;
 33837                                          mov     ah,3            ; get cursor position
 33838                                          int     10h             ;
 33839                                          sub     dl,2            ;
 33840                                          mov     [bLastCol],dl   ; save column where status char will go
 33841                                  
 33842                                  menu_nostatus:
 33843                                          mov     bx,1            ; now prepare to display all the menu items
 33844                                  menu_disploop:
 33845                                          call    print_item	; print item #BL
 33846                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33847                                          cmp     bl,[bMaxBlock]  ; all done?
 33848                                          jbe	short menu_disploop ; not yet
 33849                                  
 33850                                  ;   Set cursor position to just below the menu items
 33851                                  
 33852                                          mov     dl,0            ; select column
 33853                                          mov     dh,bl           ;
 33854                                          add     dh,4            ; select row below menu
 33855                                          mov     bh,[bMenuPage]  ;
 33856                                          mov     ah,02h          ; set cursor position beneath the block list
 33857                                          int     10h             ;
 33858                                  
 33859                                          mov     dx,_$MenuPrmpt
 33860                                          call    print           ;
 33861                                          call    select_item     ; make a selection, return # in BX
 33862                                          mov     dx,crlfm	
 33863                                          call    print           ;
 33864                                          push    word [bDisableUI]
 33865                                          or      byte [bDisableUI],1
 33866                                          call    show_status     ; clear the status line now
 33867                                          pop     word [bDisableUI]
 33868                                  
 33869                                  ;   Now begins the "re-organization" process...
 33870                                  
 33871                                  menu_autoselect:
 33872                                          cmp     bx,-1           ; clean boot requested?
 33873                                          jne	short normal_boot ; no
 33874                                          call    disable_autoexec; basically, add a /D to the command.com line
 33875                                  menu_abort:
 33876                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33877                                          jmp	menu_exit	;
 33878                                  
 33879                                  normal_boot:
 33880                                          cmp     bx,-2           ; back to top-level menu?
 33881                                          jne	short not_topmenu ; no
 33882                                          mov     cx,[count]      ; yes, start all over
 33883                                          sub     si,si           ;
 33884                                          jmp     menu_search
 33885                                  
 33886                                  not_topmenu:
 33887                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33888                                          jne	short not_submenu
 33889                                          add     bx,bx           ;
 33890                                          mov     di,[aoffBlockName+bx]
 33891                                          call    srch_block      ; THIS CANNOT FAIL!
 33892                                          mov     si,di           ;
 33893                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33894                                          jmp     menu_found
 33895                                  
 33896                                  not_submenu:
 33897                                          add     bx,bx           ; get BX -> name of selected block
 33898                                          mov     bx,[aoffBlockName+bx]
 33899                                  
 33900                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33901                                  ;   the offset relative to ES of the block name to be processed (along with
 33902                                  ;   all the "common" lines of course)
 33903                                  
 33904                                  no_selection:
 33905                                          mov     [offDefBlock],bx; save selection
 33906                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33907                                          sub     si,si           ;
 33908                                          push    ds              ;
 33909                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33910                                          sub     di,di           ;
 33911                                  
 33912                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33913                                  ;
 33914                                  ;   Work our way through the config.sys image again, this time copying
 33915                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33916                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33917                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33918                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33919                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33920                                  ;
 33921                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33922                                  ;   stack we're running on, then we should check it inside copy_block
 33923                                  
 33924                                  copyblock_loop:
 33925                                          push    bx              ; save selected block name
 33926                                          call    copy_block      ; process (named or common) block
 33927                                          pop     bx              ;
 33928                                          jc	short move_config ; hit eof
 33929                                  
 33930                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33931                                  
 33932                                  copyblock_begin:
 33933                                          push    ax              ;
 33934                                          push    cx              ;
 33935                                          push    si              ;
 33936                                          push    di              ; always do "common" blocks
 33937                                          mov     di,szCommon
 33938                                          push    ds              ;
 33939                                          push    cs              ;
 33940                                          pop     ds              ;
 33941                                          call    comp_names      ;
 33942                                          pop     ds              ;
 33943                                          pop     di              ;
 33944                                          pop     si              ;
 33945                                          pop     cx              ;
 33946                                          pop     ax              ;
 33947                                          je	short copyblock_check
 33948                                          or      bx,bx           ; is there a block name to check?
 33949                                          jz	short copyblock_skip ; no
 33950                                          push    di              ;
 33951                                          mov     di,bx           ; check block against given block name
 33952                                          push    ds              ;
 33953                                          push    es              ;
 33954                                          pop     ds              ;
 33955                                          call    comp_names      ; is this the block we really want to do?
 33956                                          pop     ds              ;
 33957                                          pop     di              ;
 33958                                  copyblock_check:
 33959                                          jc	short move_config ; hit eof
 33960                                          jne	short copyblock_skip  ;
 33961                                          call    skip_opt_line   ;
 33962                                          jmp	short copyblock_loop 
 33963                                  
 33964                                  copyblock_skip:                 ;
 33965                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33966                                          call    get_char        ;
 33967                                          jc	short move_config ; hit eof
 33968                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33969                                          cmp     al,CONFIG_BEGIN ;
 33970                                          je	short copyblock_begin
 33971                                          jmp     short copyblock_skip ; anything else is just skipped
 33972                                  ;
 33973                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33974                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33975                                  ;   copy the new config.sys image to "confbot"
 33976                                  ;
 33977                                  move_config:
 33978                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33979                                          push    cx              ;
 33980                                  ;
 33981                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33982                                  ;   since the configuration name only currently exists in the "confbot" area
 33983                                  ;
 33984                                   	;mov	cx,7
 33985                                  	mov     cx,szMenu-szBoot-1
 33986                                          mov     si,szBoot	; first copy the CONFIG= part
 33987                                          inc     di              ; skip a byte, in case absolutely nothing
 33988                                                                  ; was copied to the workspace, because we always
 33989                                                                  ; zero the first byte of the workspace (below)
 33990                                  copy_boot: 
 33991                                  	;lods    byte ptr cs:[si];
 33992                                          cs
 33993                                  	lodsb
 33994                                  	mov     [di],al         ;
 33995                                          inc     di              ;
 33996                                          loop    copy_boot       ;
 33997                                  
 33998                                          push    es              ; then copy the configuration name
 33999                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 34000                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34001                                          or      si,si           ; valid?
 34002                                          jnz	short l1	; yes
 34003                                          push    cs              ;
 34004                                          pop     es              ;
 34005                                          mov     si,szCommon
 34006                                  l1:     mov     al,[es:si]      ;
 34007                                          call    any_delim       ;
 34008                                          je	short l2	;
 34009                                          mov     [di],al         ;
 34010                                          inc     si              ;
 34011                                          inc     di              ;
 34012                                          loop    l1              ;
 34013                                  l2:     mov     byte [di],lf	; terminate the configuration string
 34014                                          pop     es              ;
 34015                                  
 34016                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34017                                  
 34018                                          sub     di,di           ;
 34019                                          mov     [cs:config_envlen],di
 34020                                          sub     si,si           ;
 34021                                          pop     cx              ; recover the size of "config_wrkseg"
 34022                                  
 34023                                          push    cx              ;
 34024                                          rep     movsb           ; moved!
 34025                                          pop     cx              ;
 34026                                          mov     ax,ds           ;
 34027                                          pop     ds              ;
 34028                                  
 34029                                  ;   Now that the config_wrkseg is available once again, we shall
 34030                                  ;   use it to create an environment. The first thing to go in will be
 34031                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34032                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34033                                  ;   is empty.
 34034                                  
 34035                                          push    es              ;
 34036                                          mov     es,ax           ;
 34037                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34038                                          mov     byte [es:0],0	;empty the environment block
 34039                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34040                                          pop     es
 34041                                  
 34042                                  ;   Before returning, restore the default video page setting but do NOT
 34043                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34044                                  ;   displayed on a different page, then it's because we don't want to see
 34045                                  ;   all the device driver/TSR goop (which goes to the default page)
 34046                                  
 34047                                  menu_done:
 34048                                          cmp     byte [bMenuPage],0
 34049                                          je	short menu_exit	;
 34050                                          push    es              ;
 34051                                          mov     ax,40h          ;
 34052                                          mov     es,ax           ;
 34053                                          mov     ax,[wCRTStart]  ;
 34054                                          mov     [es:004Eh],ax   ;
 34055                                          mov     al,[bCRTPage]   ;
 34056                                          mov     [es:0062h],al   ;
 34057                                          pop     es              ;
 34058                                  menu_exit:
 34059                                          mov     [count],cx      ; set new counts
 34060                                          mov     [org_count],cx  ;
 34061                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34062                                          retn
 34063                                  
 34064                                  ;----------------------------------------------------------------------------
 34065                                  ;
 34066                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34067                                  ;
 34068                                  ;   INPUT
 34069                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34070                                  ;
 34071                                  ;   OUTPUT
 34072                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34073                                  ;       carry set if error (eg, missing =); clear otherwise
 34074                                  ;
 34075                                  ;   OTHER REGS USED
 34076                                  ;       None
 34077                                  ;
 34078                                  ;   NOTES
 34079                                  ;       None
 34080                                  ;
 34081                                  ;   HISTORY
 34082                                  ;       Created 29-Mar-1992 by JeffPar
 34083                                  ;
 34084                                  ;----------------------------------------------------------------------------
 34085                                  
 34086                                  copy_envvar:
 34087                                          push    cx              ;
 34088                                          push    si              ;
 34089                                          push    ds              ;
 34090                                          push    es              ;
 34091                                          push    es              ;
 34092                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34093                                          pop     ds                 ; DS:SI to point to envvar
 34094                                  
 34095                                  ;   Have to calculate the length of the variable name (and if we hit
 34096                                  ;   the end of the line before we hit '=', then it's curtains for this
 34097                                  ;   config.sys line)
 34098                                  ;
 34099                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34100                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34101                                  ;   menu block existed (in order to prevent the creation of an environment)
 34102                                  
 34103                                          sub     cx,cx           ;
 34104                                  copy_varlen:                    ;
 34105                                          lodsb                   ;
 34106                                          or      al,al           ; NULL?
 34107                                          stc                     ;
 34108                                          jz	short copy_envexit ; yes, abort
 34109                                          cmp     al,cr          ;
 34110                                          stc                     ;
 34111                                          je	short copy_envexit
 34112                                          cmp     al,lf          ;
 34113                                          stc                     ;
 34114                                          je	short copy_envexit
 34115                                          inc     cx              ;
 34116                                          cmp     al,'='          ;
 34117                                          jne	short copy_varlen
 34118                                          mov     al,0            ;
 34119                                          mov     ah,[si]         ; save char after '='
 34120                                          sub     si,cx           ; back up to given varname
 34121                                          dec     cx              ; CX == # of bytes in varname
 34122                                          sub     di,di           ; start looking for DS:SI at ES:0
 34123                                  copy_varsrch:
 34124                                          cmp     byte [es:di],al
 34125                                          je	short copy_envprep ; search failed, just copy var
 34126                                          mov     bx,di           ; ES:BX -> start of this varname
 34127                                          push    cx              ;
 34128                                          push    si              ;
 34129                                          repe    cmpsb           ;
 34130                                          pop     si              ;
 34131                                          pop     cx              ;
 34132                                          jne	short copy_varnext ; no match, skip to next varname
 34133                                          cmp     byte [es:di],'='
 34134                                          jne     short copy_varnext ; no match, there's more characters
 34135                                  
 34136                                  ;   Previous occurrence of variable has been found; determine the
 34137                                  ;   entire length and then destroy it
 34138                                  
 34139                                          mov     cx,-1           ;
 34140                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34141                                          push    si              ;
 34142                                          mov     si,di           ;
 34143                                          mov     di,bx           ;
 34144                                          mov     cx,[cs:config_envlen]
 34145                                          sub     cx,si           ; destroy variable now
 34146                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34147                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 34148                                  
 34149                                  	rep	; 0F3h
 34150                                  	es	; 26h
 34151                                  	movsb	; 0A4h
 34152                                  
 34153                                  	pop     si
 34154                                  copy_envprep:
 34155                                          cmp     ah,cr          ; if there is nothing after the '='
 34156                                          je	short copy_envdel ; then just exit with variable deleted
 34157                                          cmp     ah,lf           ;
 34158                                          je	short copy_envdel
 34159                                          jmp     short copy_envloop
 34160                                  
 34161                                  copy_varnext:                   ;
 34162                                          push    cx              ;
 34163                                          mov     cx,-1           ;
 34164                                          repne   scasb           ;
 34165                                          pop     cx              ;
 34166                                          jmp	short copy_varsrch
 34167                                  
 34168                                  copy_envloop:                   ;
 34169                                          lodsb                   ;
 34170                                          cmp     al,cr           ;
 34171                                          je	short copy_envdone
 34172                                          cmp     al,lf           ;
 34173                                          je	short copy_envdone
 34174                                          stosb                   ;
 34175                                          jmp     short copy_envloop
 34176                                  
 34177                                  copy_envdone:                   ;
 34178                                          sub     al,al           ; do SUB to clear carry as well
 34179                                          stosb                   ; always null-terminate these puppies
 34180                                  copy_envdel:                    ;
 34181                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34182                                          mov     [cs:config_envlen],di
 34183                                  
 34184                                  copy_envexit:                   ;
 34185                                          pop     es              ;
 34186                                          pop     ds              ;
 34187                                          pop     si              ;
 34188                                          pop     cx              ;
 34189                                  
 34190                                  copy_done:	; 18/12/2022
 34191                                          retn
 34192                                  
 34193                                  ;----------------------------------------------------------------------------
 34194                                  ;
 34195                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34196                                  ;
 34197                                  ;   INPUT
 34198                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34199                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34200                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34201                                  ;             config.sys image) where the current block is to be copied
 34202                                  ;
 34203                                  ;   OUTPUT
 34204                                  ;       Same as above
 34205                                  ;       AL also equals the last character read from the organized image
 34206                                  ;
 34207                                  ;   OTHER REGS USED
 34208                                  ;       All
 34209                                  ;
 34210                                  ;   NOTES
 34211                                  ;       None
 34212                                  ;
 34213                                  ;   HISTORY
 34214                                  ;       Created 16-Mar-1992 by JeffPar
 34215                                  ;
 34216                                  ;----------------------------------------------------------------------------
 34217                                  
 34218                                  copy_block:
 34219                                          call    get_char        ; check for include
 34220                                          jc	short copy_done	;
 34221                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34222                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34223                                          je	short copy_done ;
 34224                                  
 34225                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34226                                          mov     al,ah           ; AL == the original line code
 34227                                          jne	short copy_line	; not an "include" line
 34228                                  
 34229                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34230                                  ;   never try to include the block again (no infinite include loops please),
 34231                                  ;   then search for the named block and call copy_block again.
 34232                                  
 34233                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34234                                          push    di              ;
 34235                                  
 34236                                          mov     di,szMenu
 34237                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34238                                          je	short copy_skip	;
 34239                                  
 34240                                          mov     di,szCommon
 34241                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34242                                          je	short copy_skip	;
 34243                                  
 34244                                          mov     di,si           ; try to find the block
 34245                                          call    srch_block      ;
 34246                                          mov     dx,di           ;
 34247                                          pop     di              ;
 34248                                          jne	short copy_error ; no such block
 34249                                          push    cx              ;
 34250                                          mov     cx,bx           ;
 34251                                          push    si              ;
 34252                                          dec     dx              ;
 34253                                          mov     si,dx           ;
 34254                                          call    skip_line       ; skip the rest of the "block name" line
 34255                                          call    copy_block      ; and copy in the rest of that block
 34256                                          pop     si              ;
 34257                                          pop     cx              ;
 34258                                          sub     al,al           ; force skip_opt_line to skip...
 34259                                          jmp     short copy_nextline
 34260                                  
 34261                                  copy_skip:
 34262                                          pop     di
 34263                                  copy_error:
 34264                                          clc                     ;
 34265                                          call    print_error     ; note that carry is clear, no pause
 34266                                          jmp     short copy_nextline
 34267                                  
 34268                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34269                                  
 34270                                  copy_line:
 34271                                          mov     [di],al         ;
 34272                                          inc     di              ;
 34273                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34274                                          jb	short copy_nextline ; no
 34275                                          cmp     byte [cs:config_multi],0
 34276                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34277                                          call    get_linenum	; BX == line # of line @ES:SI
 34278                                          mov     [di],bx         ; stash it immediately following the line code
 34279                                          inc     di              ;
 34280                                          inc     di              ;
 34281                                          jmp     short copy_next ;
 34282                                  copy_loop:                      ;
 34283                                          call    get_char        ;
 34284                                          jc	short copy_done ; end of file
 34285                                          mov     [di],al         ;
 34286                                          inc     di              ;
 34287                                  copy_next:
 34288                                          cmp     al,lf ; 0Ah	; done with line?
 34289                                          jne	short copy_loop	; nope
 34290                                  
 34291                                  copy_nextline:
 34292                                          call    skip_opt_line   ;
 34293                                          jmp     short copy_block
 34294                                  
 34295                                  	; 18/12/2022
 34296                                  ;copy_done:
 34297                                          ;retn
 34298                                  
 34299                                  ;----------------------------------------------------------------------------
 34300                                  ;
 34301                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34302                                  ;
 34303                                  ;   INPUT
 34304                                  ;    ES:SI -> some line in the config.sys memory image
 34305                                  ;
 34306                                  ;   OUTPUT
 34307                                  ;       BX == line # (relative to 1)
 34308                                  ;
 34309                                  ;   OTHER REGS USED
 34310                                  ;       DX
 34311                                  ;
 34312                                  ;   NOTES
 34313                                  ;       None
 34314                                  ;
 34315                                  ;   HISTORY
 34316                                  ;       Created 16-Mar-1992 by JeffPar
 34317                                  ;
 34318                                  ;----------------------------------------------------------------------------
 34319                                  
 34320                                  get_linenum:
 34321                                          push    ax              ;
 34322                                          sub     bx,bx           ; BX == line # (to be returned)
 34323                                          push    cx              ;
 34324                                          mov     dx,si           ; DX == the offset we're looking for
 34325                                          push    si              ;
 34326                                          mov     cx,[cs:count]   ;
 34327                                          sub     si,si           ; prepare to scan entire file
 34328                                  get_linenum_loop:               ;
 34329                                          call    skip_line       ;
 34330                                          jc	short get_linenum_done
 34331                                          inc     bx              ;
 34332                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34333                                          jb	short get_linenum_loop ; no
 34334                                  get_linenum_done:               ;
 34335                                          pop     si              ;
 34336                                          pop     cx              ;
 34337                                          pop     ax              ;
 34338                                          retn
 34339                                  
 34340                                  ;----------------------------------------------------------------------------
 34341                                  ;
 34342                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34343                                  ;
 34344                                  ;   INPUT
 34345                                  ;       ES -> config.sys image
 34346                                  ;    ES:DI -> block name to find
 34347                                  ;
 34348                                  ;   OUTPUT
 34349                                  ;       ZF flag set, if found
 34350                                  ;    ES:DI -> just past the name in the block heading, if found
 34351                                  ;       BX == # bytes remaining from that point, if found
 34352                                  ;
 34353                                  ;   OTHER REGS USED
 34354                                  ;       None
 34355                                  ;
 34356                                  ;   NOTES
 34357                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34358                                  ;       config.sys image, not merely the remaining portion, and that it
 34359                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34360                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34361                                  ;
 34362                                  ;   HISTORY
 34363                                  ;       Created 16-Mar-1992 by JeffPar
 34364                                  ;
 34365                                  ;----------------------------------------------------------------------------
 34366                                  
 34367                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34368                                          push    ax              ;
 34369                                          push    cx              ;
 34370                                          mov     cx,[cs:count]   ;
 34371                                          push    si              ;
 34372                                          sub     si,si           ;
 34373                                          push    ds              ;
 34374                                          push    es              ;
 34375                                          pop     ds              ;
 34376                                          call    find_block      ;
 34377                                          mov     di,si           ;
 34378                                          mov     bx,cx           ;
 34379                                          pop     ds              ;
 34380                                          pop     si              ;
 34381                                          pop     cx              ;
 34382                                          pop     ax              ;
 34383                                  find_exit: ; 16/04/2019
 34384                                          retn			;
 34385                                  
 34386                                  ;----------------------------------------------------------------------------
 34387                                  ;
 34388                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34389                                  ;
 34390                                  ;   INPUT
 34391                                  ;    DS:DI -> block name to find
 34392                                  ;    ES:SI -> remainder of config.sys image
 34393                                  ;       CX == remaining size of config.sys image
 34394                                  ;
 34395                                  ;   OUTPUT
 34396                                  ;       ZF flag set, if found (also, CF set if EOF)
 34397                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34398                                  ;       CX == # bytes remaining from that point
 34399                                  ;
 34400                                  ;   OTHER REGS USED
 34401                                  ;       AX
 34402                                  ;
 34403                                  ;   NOTES
 34404                                  ;       This differs from "srch_block" in that it searches only the
 34405                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34406                                  ;       pointing to where the search left off, and that it takes a pointer
 34407                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34408                                  ;
 34409                                  ;   HISTORY
 34410                                  ;       Created 16-Mar-1992 by JeffPar
 34411                                  ;
 34412                                  ;----------------------------------------------------------------------------
 34413                                  
 34414                                  find_block:
 34415                                          call    get_char        ; get line code
 34416                                          jc	short find_exit	; end of file
 34417                                          and     al,~CONFIG_OPTION_QUERY
 34418                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34419                                          je	short check_line ; no
 34420                                          cmp     al,CONFIG_INCLUDE
 34421                                          jne	short next_line	;
 34422                                          or	byte [cs:config_multi],1
 34423                                          jmp     short next_line ;
 34424                                  check_line:
 34425                                          or      byte [cs:config_multi],1
 34426                                          call    comp_names      ; compare block names
 34427                                          jbe	short find_exit	; end of file, or names matched
 34428                                  next_line:
 34429                                          call    skip_opt_line   ; no, so skip to next line
 34430                                          jmp	short find_block  ;
 34431                                  ;find_exit:
 34432                                  ;	retn
 34433                                  
 34434                                  ;----------------------------------------------------------------------------
 34435                                  ;
 34436                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34437                                  ;
 34438                                  ;   INPUT
 34439                                  ;    DS:DI -> keyword to compare
 34440                                  ;    ES:SI -> position in config.sys
 34441                                  ;       CX == remaining bytes in config.sys
 34442                                  ;
 34443                                  ;   OUTPUT
 34444                                  ;       ZF flag set, if match (also, CF set if EOF)
 34445                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34446                                  ;       CX == # bytes remaining from that point
 34447                                  ;
 34448                                  ;   OTHER REGS USED
 34449                                  ;       AX
 34450                                  ;
 34451                                  ;   NOTES
 34452                                  ;       None
 34453                                  ;
 34454                                  ;   HISTORY
 34455                                  ;       Created 16-Mar-1992 by JeffPar
 34456                                  ;
 34457                                  ;----------------------------------------------------------------------------
 34458                                  
 34459                                  comp_names:
 34460                                          push    di              ;
 34461                                  comp_loop:                      ;
 34462                                          call    get_char        ;
 34463                                          jc	short comp_exit	;
 34464                                          call    any_delim       ; is next character a delimiter?
 34465                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34466                                          je	short comp_almost ; yes, it *could* be a match
 34467                                          inc     di              ;
 34468                                          and     ax,~2020h ; 0DFDFh 
 34469                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34470                                          cmp     al,ah           ; match?
 34471                                          je	short comp_loop ; yes, keep looking at the characters
 34472                                          clc                     ; prevent erroneous eof indication: clear carry
 34473                                  comp_exit:                      ;
 34474                                          pop     di              ;
 34475                                          retn			;
 34476                                  comp_almost:                    ;
 34477                                          xchg    al,ah           ; we don't know for sure if it's a match
 34478                                          call    any_delim       ; until we verify that the second string has
 34479                                          xchg    al,ah           ; been exhausted also...
 34480                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34481                                  
 34482                                  ;----------------------------------------------------------------------------
 34483                                  
 34484                                  comp_names_safe:
 34485                                          push    ax
 34486                                          push    cx
 34487                                          push	si
 34488                                          push    ds
 34489                                          push    cs
 34490                                          pop     ds
 34491                                          call    comp_names
 34492                                          pop     ds
 34493                                  	pop	si
 34494                                          pop     cx
 34495                                          pop     ax
 34496                                          retn
 34497                                  
 34498                                  ;----------------------------------------------------------------------------
 34499                                  ;
 34500                                  ;   print_item:  display menu item #BL
 34501                                  ;
 34502                                  ;   INPUT
 34503                                  ;       BL == menu item # to display
 34504                                  ;
 34505                                  ;   OUTPUT
 34506                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34507                                  ;
 34508                                  ;   OTHER REGS USED
 34509                                  ;       None
 34510                                  ;
 34511                                  ;   NOTES
 34512                                  ;       This function saves/restores the current cursor position, so you
 34513                                  ;       needn't worry about it.
 34514                                  ;
 34515                                  ;   HISTORY
 34516                                  ;       Created 16-Mar-1992 by JeffPar
 34517                                  ;
 34518                                  ;----------------------------------------------------------------------------
 34519                                  
 34520                                  print_item:		; prints menu item #BL (1 to N)
 34521                                          push    ax              ;
 34522                                          push    bx              ;
 34523                                          push    cx              ;
 34524                                          push    dx              ;
 34525                                          push    si              ;
 34526                                          mov     ah,03h          ; get cursor position
 34527                                          mov     bh,[bMenuPage]  ; always page zero
 34528                                          int     10h             ; DH/DL = row/column
 34529                                          push    dx              ; save it
 34530                                          mov     ah,02h          ; set cursor position
 34531                                          mov     dh,bl           ;
 34532                                          add     dh,3            ;
 34533                                          mov     dl,5            ;
 34534                                          int     10h             ; set cursor position for correct row/col
 34535                                          mov     al,bl           ;
 34536                                          add     al,'0'          ; convert menu item # to ASCII digit
 34537                                          mov     ah,[bMenuColor] ; normal attribute
 34538                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34539                                          jne	short print_other ; no
 34540                                          or      ah,70h          ; yes, set bgnd color to white
 34541                                          mov     ch,ah           ;
 34542                                          mov     cl,4            ;
 34543                                          rol     ch,cl           ;
 34544                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34545                                          jne	short print_other ; no
 34546                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34547                                  print_other:                    ;
 34548                                          mov     bh,0            ;
 34549                                          add     bx,bx           ;
 34550                                          mov     di,[aoffBlockDesc+bx]
 34551                                          mov     bl,ah           ; put the attribute in the correct register now
 34552                                          mov     bh,[bMenuPage]  ; get correct video page #
 34553                                          mov     ah,09h          ; write char/attr
 34554                                          mov     cx,1            ;
 34555                                          int     10h             ;
 34556                                          inc     dl              ; increment column
 34557                                          mov     ah,02h          ;
 34558                                          int     10h             ;
 34559                                          ;mov	ax,0900h+'.'    ;
 34560                                          mov	ax,092Eh
 34561                                  	int     10h             ; display '.'
 34562                                          inc     dl              ; increment column
 34563                                          mov     ah,02h          ;
 34564                                          int     10h             ;
 34565                                          ;mov	ax,0900h+' '    ;
 34566                                          mov	ax,0920h
 34567                                  	int     10h             ; display ' '
 34568                                          inc     dl              ; increment column
 34569                                          mov     ah,02h          ;
 34570                                          int     10h             ;
 34571                                          push    es              ;
 34572                                  print_loop:                     ;
 34573                                          mov     al,[es:di]	; get a character of the description
 34574                                          inc     di              ;
 34575                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34576                                          jne	short print_nontab ;
 34577                                          mov     al,' '          ;
 34578                                  print_nontab:                   ;
 34579                                          cmp     al,' '          ;
 34580                                          jb	short print_done ; stop at the 1st character < space
 34581                                          cmp     al,'$'          ;
 34582                                          je	short print_done ; also stop on $
 34583                                          mov     ah,09h          ; display function #
 34584                                          int     10h             ;
 34585                                          inc     dl              ; increment column
 34586                                          cmp     dl,78           ; far enough?
 34587                                          jae	short print_done ; yes
 34588                                          mov     ah,02h          ;
 34589                                          int     10h             ;
 34590                                          jmp     print_loop      ;
 34591                                  print_done:                     ;
 34592                                          pop     es              ;
 34593                                          pop     dx              ;
 34594                                          mov     ah,02h          ;
 34595                                          int     10h             ; restore previous row/col
 34596                                          pop     si              ;
 34597                                          pop     dx              ;
 34598                                          pop     cx              ;
 34599                                          pop     bx              ;
 34600                                          pop     ax              ;
 34601                                          retn			;
 34602                                  
 34603                                  ;----------------------------------------------------------------------------
 34604                                  ;
 34605                                  ;   select_item:  wait for user to select menu item, with time-out
 34606                                  ;
 34607                                  ;   INPUT
 34608                                  ;       None
 34609                                  ;
 34610                                  ;   OUTPUT
 34611                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34612                                  ;       Selected menu item highlighted
 34613                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34614                                  ;
 34615                                  ;   OTHER REGS USED
 34616                                  ;       None
 34617                                  ;
 34618                                  ;   NOTES
 34619                                  ;       None
 34620                                  ;
 34621                                  ;   HISTORY
 34622                                  ;       Created 16-Mar-1992 by JeffPar
 34623                                  ;
 34624                                  ;----------------------------------------------------------------------------
 34625                                  
 34626                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34627                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34628                                          mov     al,bl           ;
 34629                                          call    disp_num        ;
 34630                                          call    show_status     ; display current interactive status
 34631                                          cmp     byte [secTimeOut],-1
 34632                                          je	short input_key	; no time-out, just go to input
 34633                                          mov     ah,GET_TIME ; 2Ch
 34634                                          int     21h             ;
 34635                                          mov     bh,dh           ; BH = initial # of seconds
 34636                                  check_time:
 34637                                          mov     al,[secTimeOut] ;
 34638                                          sub     al,[secElapsed] ;
 34639                                          jae	short show_time	;
 34640                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34641                                          mov     byte [secElapsed],0
 34642                                          jmp	select_done	; time's up!
 34643                                  show_time:
 34644                                          push    bx              ;
 34645                                          mov     bl,al           ; save # in BL
 34646                                          mov     bh,[bMenuPage]  ;
 34647                                          mov     ah,03h          ; get cursor position
 34648                                          int     10h             ;
 34649                                          push    dx              ;
 34650                                  	add	dl,8		; move cursor to the right
 34651                                          mov     ah,02h          ; set cursor position
 34652                                          int     10h             ;
 34653                                          mov     dx,_$TimeOut
 34654                                          call    print           ; print the "Time remaining: " prompt
 34655                                          mov     al,bl           ; recover # from BL
 34656                                          cbw                     ; this works because AL is always <= 90
 34657                                          mov     cl,10           ;
 34658                                          div     cl              ; AL = tens digit, AH = ones digit
 34659                                          mov     cl,ah           ;
 34660                                          add     al,'0'          ;
 34661                                          mov     ah,0Eh          ;
 34662                                          int     10h             ; write TTY tens digit
 34663                                          mov     al,cl           ;
 34664                                          add     al,'0'          ;
 34665                                          mov     ah,0Eh          ;
 34666                                          int     10h             ; write TTY ones digit
 34667                                          pop     dx
 34668                                          mov     ah,02h          ; set cursor position back to where it was
 34669                                          int     10h             ;
 34670                                          pop     bx              ;
 34671                                  input_key:
 34672                                          mov     ah,RAW_CON_IO ; 6
 34673                                          mov     dl,0FFh         ; input request
 34674                                          int     21h             ;
 34675                                          jnz	short got_key	;
 34676                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34677                                          je	short input_key	; no, just go back to input
 34678                                          mov     ah,GET_TIME     ;
 34679                                          int     21h             ; DH = seconds
 34680                                          mov     ah,dh           ;
 34681                                          sub     dh,bh           ; should generally be zero or one
 34682                                          mov     bh,ah           ;
 34683                                          jnc	short got_time	;
 34684                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34685                                  got_time:
 34686                                          or      dh,dh           ; any change?
 34687                                          jz	short input_key	; no
 34688                                          add     [secElapsed],dh ;
 34689                                          jmp	short check_time ;
 34690                                  got_key:
 34691                                          push    ax              ;
 34692                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34693                                          xchg    [secTimeOut],ax
 34694                                          cmp     al,-1           ; was time-out already disabled?
 34695                                          je	short timeout_disabled ; yes
 34696                                          push    bx              ; let's disable # seconds display
 34697                                          mov     ax,0A20h        ; write multiple spaces
 34698                                          mov     bx,[bMenuColor]
 34699                                          mov     cx,80           ; 80 of them, to be safe
 34700                                          int     10h             ; to completely obliterate # seconds display
 34701                                          pop     bx   		;
 34702                                  
 34703                                  timeout_disabled:
 34704                                          pop     ax              ;
 34705                                          or      al,al           ; extended key pressed?
 34706                                          jnz	short normal_key ; no
 34707                                          int     21h             ; get the next part of the key then
 34708                                          jz	short input_key	; hmmm, what happened to the second part?
 34709                                  
 34710                                          cmp     al,48h          ; up arrow?
 34711                                          jne	short not_up	; no
 34712                                          cmp     bl,1            ; are we as up as up can get?
 34713                                          jbe	short input_key	; yes, ignore it
 34714                                          dec     byte [bDefBlock] ;
 34715                                          call    print_item      ; re-print the current item
 34716                                          dec     bl              ; and then print the new current item
 34717                                          jmp     short print1
 34718                                  not_up:
 34719                                          cmp     al,50h          ; down arrow?
 34720                                          jne	short not_down	; no
 34721                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34722                                          jae	short to_input_key ; yes, ignore it
 34723                                          inc     byte [bDefBlock] ;
 34724                                          call    print_item      ; re-print the current item
 34725                                          inc     bx              ; and then print the new current item
 34726                                  print1: 
 34727                                  	mov     al,bl           ;
 34728                                  print2: 
 34729                                  	call    print_item      ;
 34730                                          call    disp_num        ;
 34731                                  to_input_key:
 34732                                          jmp     input_key       ;
 34733                                  not_down:
 34734                                          test    byte [bDisableUI],1
 34735                                          jnz	short to_input_key ; don't allow F8 or F5
 34736                                          cmp     al,42h          ; F8 function key?
 34737                                          jne	short not_f8	; no
 34738                                          xor     byte [bQueryOpt],1
 34739                                          call    show_status     ;
 34740                                          jmp     input_key	;
 34741                                  not_f8:
 34742                                          cmp     al,3Fh          ; F5 function key?
 34743                                          jne	short to_input_key ; no
 34744                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34745                                          mov     al,' '          ; don't want to display anything really;
 34746                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34747                                  
 34748                                  normal_key:
 34749                                          cmp     al,0Dh          ; Enter?
 34750                                          je	short select_done ; yes
 34751                                          cmp     al,08h          ; backspace?
 34752                                          jne	short not_backspace ; no
 34753                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34754                                          retn			;
 34755                                  not_backspace:
 34756                                          sub     al,'0'          ; is greater than '0'?
 34757                                          jbe	short to_input_key ; no
 34758                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34759                                          ja	short to_input_key ; no
 34760                                          mov	[bDefBlock],al  ;
 34761                                          call    print_item      ; redisplay the current selection
 34762                                          mov     bl,al           ; set new selection
 34763                                          jmp	short print2
 34764                                  
 34765                                  select_done:
 34766                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34767                                          mov     al,bl           ;
 34768                                          add     al,'0'          ; convert it into a digit, then display it
 34769                                  
 34770                                  	; fall into disp_input
 34771                                  
 34772                                  ; 16/04/2019 - Retro DOS v4.0
 34773                                  
 34774                                  ;----------------------------------------------------------------------------
 34775                                  ;
 34776                                  ;   disp_input:  display a single character + cr/lf
 34777                                  ;
 34778                                  ;   INPUT
 34779                                  ;       AL == character to display
 34780                                  ;
 34781                                  ;   OUTPUT
 34782                                  ;       None
 34783                                  ;
 34784                                  ;   OTHER REGS USED
 34785                                  ;       None
 34786                                  ;
 34787                                  ;   NOTES
 34788                                  ;       This function is used not only for the menu input selection but
 34789                                  ;       also for the interactive line prompting (the y/n/a thing).
 34790                                  ;
 34791                                  ;   HISTORY
 34792                                  ;       Created 16-Mar-1992 by JeffPar
 34793                                  ;
 34794                                  ;----------------------------------------------------------------------------
 34795                                  
 34796                                  disp_input:
 34797                                          push    ax
 34798                                          cmp     al,' '
 34799                                          jae	short disp_ok
 34800                                          mov     al,' '
 34801                                  disp_ok:
 34802                                          mov     dl,al
 34803                                          mov     ah,STD_CON_OUTPUT ; 2
 34804                                          int     21h
 34805                                          mov     dx,crlfm
 34806                                          call    print
 34807                                          pop     ax
 34808                                          retn
 34809                                  
 34810                                  ;----------------------------------------------------------------------------
 34811                                  
 34812                                  disp_num:
 34813                                          push    bx
 34814                                          add     al,'0'
 34815                                          mov     ah,0Ah
 34816                                          mov     bx,[bMenuColor]
 34817                                          mov     cx,1
 34818                                          int     10h
 34819                                          pop     bx
 34820                                          retn
 34821                                  
 34822                                  ;----------------------------------------------------------------------------
 34823                                  ;
 34824                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34825                                  ;
 34826                                  ;   INPUT
 34827                                  ;       None
 34828                                  ;
 34829                                  ;   OUTPUT
 34830                                  ;       None
 34831                                  ;
 34832                                  ;   OTHER REGS USED
 34833                                  ;       None
 34834                                  ;
 34835                                  ;   NOTES
 34836                                  ;       None
 34837                                  ;
 34838                                  ;   HISTORY
 34839                                  ;       Created 16-Mar-1992 by JeffPar
 34840                                  ;
 34841                                  ;----------------------------------------------------------------------------
 34842                                  
 34843                                  show_status:
 34844                                          push    bx              ; BL = video page #
 34845                                          mov     bx,[bMenuColor]
 34846                                          mov     ah,03h          ; get cursor position
 34847                                          int     10h             ;
 34848                                          push    dx              ; save it
 34849                                          mov     ah,02h          ; set cursor position
 34850                                          mov     dx,[bLastCol]   ; set correct row/col
 34851                                          test    byte [bDisableUI],1
 34852                                          jz	short show_onoff ; just show on/off
 34853                                          mov     dl,0            ;
 34854                                          int     10h             ;
 34855                                          mov     ax,0A20h        ; write multiple spaces
 34856                                          mov     cx,80           ; 80 of them, to be exact
 34857                                          int     10h             ; to obliterate the status line
 34858                                          jmp     short show_done ;
 34859                                  show_onoff: 
 34860                                          int     10h
 34861                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34862                                  		; AL = character, BH = display page - alpha mode
 34863                                  		; BL = color of character (graphics mode, PCjr only)
 34864                                  		; CX = number of times to write character
 34865                                  
 34866                                          mov     al,[_$NO]	; assume OFF
 34867                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34868                                          jne	short show_noton ; no
 34869                                          mov     al,[_$YES]	; yes
 34870                                  show_noton:                     ;
 34871                                          mov     ah,0Eh          ; write TTY
 34872                                          int     10h             ;
 34873                                  show_done:                      ;
 34874                                          pop     dx              ;
 34875                                          mov     ah,02h          ;
 34876                                          int     10h             ; restore original cursor position
 34877                                          pop     bx              ;
 34878                                          retn			;
 34879                                  
 34880                                  ; 16/04/2019 - Retro DOS v4.0
 34881                                  
 34882                                  ;----------------------------------------------------------------------------
 34883                                  ;
 34884                                  ;   skip_token: advances ES:SI/CX past the current token
 34885                                  ;
 34886                                  ;   INPUT
 34887                                  ;    ES:SI -> position in config.sys
 34888                                  ;       CX == remaining bytes in config.sys
 34889                                  ;
 34890                                  ;   OUTPUT
 34891                                  ;       CF set if EOL/EOF hit
 34892                                  ;       AL == 1st char of delimiter
 34893                                  ;    ES:SI -> just past the delimiter
 34894                                  ;       CX == # bytes remaining from that point
 34895                                  ;
 34896                                  ;   OTHER REGS USED
 34897                                  ;       AX
 34898                                  ;
 34899                                  ;   NOTES
 34900                                  ;       None
 34901                                  ;
 34902                                  ;   HISTORY
 34903                                  ;       Created 16-Mar-1992 by JeffPar
 34904                                  ;
 34905                                  ;----------------------------------------------------------------------------
 34906                                  
 34907                                  skip_token:
 34908                                          call    get_char
 34909                                          jc	short skip_token_done
 34910                                          call    any_delim
 34911                                          jne	short skip_token
 34912                                  skip_check_eol:
 34913                                          cmp     al,cr ; 0Dh
 34914                                          je	short skip_token_eol
 34915                                          cmp     al,lf ; 0Ah
 34916                                          je	short skip_token_eol
 34917                                          clc
 34918                                          ;jmp	short skip_token_done
 34919                                  	retn
 34920                                  skip_token_eol:
 34921                                          stc
 34922                                  skip_token_done:
 34923                                          retn
 34924                                  
 34925                                  ;----------------------------------------------------------------------------
 34926                                  ;
 34927                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34928                                  ;
 34929                                  ;   INPUT
 34930                                  ;    ES:SI -> position in config.sys
 34931                                  ;       CX == remaining bytes in config.sys
 34932                                  ;
 34933                                  ;   OUTPUT
 34934                                  ;       CF set if EOF hit
 34935                                  ;       AL == 1st char of token
 34936                                  ;    ES:SI -> just past the token
 34937                                  ;       CX == # bytes remaining from that point
 34938                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34939                                  ;
 34940                                  ;   OTHER REGS USED
 34941                                  ;       AX
 34942                                  ;
 34943                                  ;   NOTES
 34944                                  ;       None
 34945                                  ;
 34946                                  ;   HISTORY
 34947                                  ;       Created 16-Mar-1992 by JeffPar
 34948                                  ;
 34949                                  ;----------------------------------------------------------------------------
 34950                                  
 34951                                  skip_delim:       ; returns carry set if eol/eof
 34952                                          call    get_char        ;
 34953                                          lea     bx,[si-1]       ; also returns BX -> next token
 34954                                          jc	short skip_token_done ;
 34955                                          call    delim           ;
 34956                                          je	short skip_delim ;
 34957                                          jmp	short skip_check_eol  ; 13/05/2019
 34958                                  
 34959                                  ;----------------------------------------------------------------------------
 34960                                  ;
 34961                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34962                                  ;
 34963                                  ;   INPUT
 34964                                  ;       AL == last character read
 34965                                  ;    ES:SI -> position in config.sys
 34966                                  ;       CX == remaining bytes in config.sys
 34967                                  ;
 34968                                  ;   OUTPUT
 34969                                  ;       CF set if EOF hit
 34970                                  ;       AL == 1st char of new line
 34971                                  ;    ES:SI -> just past 1st char of new line
 34972                                  ;       CX == # bytes remaining from that point
 34973                                  ;
 34974                                  ;   OTHER REGS USED
 34975                                  ;       AX
 34976                                  ;
 34977                                  ;   NOTES
 34978                                  ;       In other words, the purpose here is to skip to the next line,
 34979                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34980                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34981                                  ;
 34982                                  ;   HISTORY
 34983                                  ;       Created 16-Mar-1992 by JeffPar
 34984                                  ;
 34985                                  ;----------------------------------------------------------------------------
 34986                                  
 34987                                  skip_opt_line:
 34988                                          cmp     al,lf ; 0Ah
 34989                                          je	short skip_line_done
 34990                                       
 34991                                  	; fall into skip_line
 34992                                  
 34993                                  ;----------------------------------------------------------------------------
 34994                                  ;
 34995                                  ;   skip_line: skip to the next line
 34996                                  ;
 34997                                  ;   INPUT
 34998                                  ;    ES:SI -> position in config.sys
 34999                                  ;       CX == remaining bytes in config.sys
 35000                                  ;
 35001                                  ;   OUTPUT
 35002                                  ;       CF set if EOF hit
 35003                                  ;    ES:SI -> just past 1st char of new line
 35004                                  ;       CX == # bytes remaining from that point
 35005                                  ;
 35006                                  ;   OTHER REGS USED
 35007                                  ;       AX
 35008                                  ;
 35009                                  ;   NOTES
 35010                                  ;       None
 35011                                  ;
 35012                                  ;   HISTORY
 35013                                  ;       Created 16-Mar-1992 by JeffPar
 35014                                  ;
 35015                                  ;----------------------------------------------------------------------------
 35016                                  
 35017                                  skip_line:
 35018                                          call    get_char
 35019                                          jc	short skip_line_done
 35020                                          cmp     al,lf ; 0Ah
 35021                                          jne	short skip_line
 35022                                  skip_line_done:
 35023                                  num_done:	; 18/12/2022
 35024                                          retn
 35025                                  
 35026                                  ;----------------------------------------------------------------------------
 35027                                  ;
 35028                                  ;   get_number: return binary equivalent of numeric string
 35029                                  ;
 35030                                  ;   INPUT
 35031                                  ;    ES:SI -> position in config.sys
 35032                                  ;       CX == remaining bytes in config.sys
 35033                                  ;
 35034                                  ;   OUTPUT
 35035                                  ;       AL == non-digit encountered
 35036                                  ;       BX == binary #
 35037                                  ;    ES:SI -> just past 1st non-digit
 35038                                  ;       CX == # bytes remaining from that point
 35039                                  ;
 35040                                  ;   OTHER REGS USED
 35041                                  ;       AX
 35042                                  ;
 35043                                  ;   NOTES
 35044                                  ;       None
 35045                                  ;
 35046                                  ;   HISTORY
 35047                                  ;       Created 16-Mar-1992 by JeffPar
 35048                                  ;
 35049                                  ;----------------------------------------------------------------------------
 35050                                  
 35051                                  ; 13/05/2019
 35052                                  
 35053                                  get_number:
 35054                                          sub     bx,bx           ; BX = result
 35055                                  num_loop:
 35056                                          call    get_char        ;
 35057                                          jc	short num_done	;
 35058                                          cmp     al,'0'          ; convert to value
 35059                                          jb	short num_done	; no more number
 35060                                          cmp     al,'9'          ;
 35061                                          ja	short num_done	;
 35062                                          push    ax              ;
 35063                                          mov     ax,10           ;
 35064                                          push    dx              ;
 35065                                          mul     bx              ;
 35066                                          pop     dx              ;
 35067                                          mov     bx,ax           ;
 35068                                          pop     ax              ;
 35069                                          sub     al,'0'          ;
 35070                                          cbw                     ;
 35071                                          add     bx,ax           ;
 35072                                          jmp	short num_loop	;
 35073                                  
 35074                                  	; 18/12/2022
 35075                                  ;num_done:
 35076                                          ;retn
 35077                                  
 35078                                  ;----------------------------------------------------------------------------
 35079                                  ;
 35080                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35081                                  ;
 35082                                  ;   INPUT
 35083                                  ;    ES:SI -> position in config.sys
 35084                                  ;       CX == remaining bytes in config.sys
 35085                                  ;
 35086                                  ;   OUTPUT
 35087                                  ;       AL == next character
 35088                                  ;    ES:SI -> just past next character
 35089                                  ;       CX == # bytes remaining from that point
 35090                                  ;
 35091                                  ;   OTHER REGS USED
 35092                                  ;       AX
 35093                                  ;
 35094                                  ;   NOTES
 35095                                  ;       None
 35096                                  ;
 35097                                  ;   HISTORY
 35098                                  ;       Created 16-Mar-1992 by JeffPar
 35099                                  ;
 35100                                  ;----------------------------------------------------------------------------
 35101                                  
 35102                                  get_char:
 35103                                          sub     cx,1            ; use SUB to set carry,zero
 35104                                          jb	short get_fail	; out of data
 35105                                          ;lods	byte ptr es:[si] ;
 35106                                  	es	
 35107                                  	lodsb
 35108                                          mov     ah,al           ;
 35109                                          retn			;
 35110                                  get_fail:                       ; restore CX to zero
 35111                                          mov     cx,0            ; leave carry set, zero not set
 35112                                  nearby_ret:
 35113                                          retn
 35114                                  
 35115                                  ;----------------------------------------------------------------------------
 35116                                  ;
 35117                                  ;   query_user: ask user whether to execute current config.sys command
 35118                                  ;
 35119                                  ;   INPUT
 35120                                  ;       AL == current command code
 35121                                  ;    ES:SI -> current command line in config.sys
 35122                                  ;    config_cmd == current command code, but with QUERY bit intact
 35123                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35124                                  ;
 35125                                  ;   OUTPUT
 35126                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35127                                  ;
 35128                                  ;   OTHER REGS USED
 35129                                  ;       BX, CX, DX, DI
 35130                                  ;
 35131                                  ;   NOTES
 35132                                  ;       None
 35133                                  ;
 35134                                  ;   HISTORY
 35135                                  ;       Created 16-Mar-1992 by JeffPar
 35136                                  ;
 35137                                  ;----------------------------------------------------------------------------
 35138                                  
 35139                                  	; 12/12/2022
 35140                                  query_user:
 35141                                          test    byte [bQueryOpt],4	; answer no to everything?
 35142                                          ;jz	short qu_1		;
 35143                                          ; 12/12/2022
 35144                                  	;jmp	short skip_all		;
 35145                                  	jnz	short skip_all
 35146                                  qu_1:
 35147                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35148                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35149                                          push    ax                      ;
 35150                                          mov     al,[config_cmd]         ;
 35151                                          test    byte [bQueryOpt],1	; query every command?
 35152                                          jnz	short query_all		; yes
 35153                                          test    al,CONFIG_OPTION_QUERY  ;
 35154                                          ;jnz	short query_all		;
 35155                                          ; 12/12/2022
 35156                                  	;jmp	short do_cmd		;
 35157                                  	jz	short do_cmd ; cf=0
 35158                                  query_all:
 35159                                  
 35160                                  ;   Search for the command code (AL) in "comtab", and then print
 35161                                  ;   out the corresponding keyword, followed by the rest of the actual
 35162                                  ;   line pointed to by ES:SI
 35163                                  
 35164                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35165                                          mov     dx,_$AutoPrmpt    	;
 35166                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35167                                          jz	short generic_prompt	; config_cmd must have been 0
 35168                                  
 35169                                          mov     dh,al                   ; save config_cmd in DH
 35170                                          sub     bx,bx                   ;
 35171                                          mov     di,comtab		;
 35172                                  find_match:                             ;
 35173                                          mov     bl,[di]                 ; get size of current keyword
 35174                                          or      bl,bl                   ;
 35175                                          jz	short line_print	; end of table
 35176                                          inc     di                      ;
 35177                                          cmp     al,[di+bx]              ; match?
 35178                                          je	short cmd_match		; yes
 35179                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35180                                  	; 13/05/2019	
 35181                                          jmp	short find_match	; loop
 35182                                  cmd_match:                              ;
 35183                                          mov     cl,[di-1]               ;
 35184                                          mov     ch,0                    ;
 35185                                          mov     ah,STD_CON_OUTPUT ; 2
 35186                                  cmd_print:                              ;
 35187                                          mov     al,[di]                 ;
 35188                                          inc     di                      ;
 35189                                          mov     dl,al                   ;
 35190                                          int     21h                     ;
 35191                                          loop    cmd_print               ;
 35192                                          mov     dl,'='                  ;
 35193                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35194                                          jne	short cmd_notset	;
 35195                                          mov     dl,' '                  ;
 35196                                  cmd_notset:
 35197                                          int     21h                     ; '=' looks funny on SET commands
 35198                                  line_print:                             ;
 35199                                  	;lods	byte ptr es:[si]        ;
 35200                                          es
 35201                                  	lodsb
 35202                                  	or      al,al                   ;
 35203                                          jnz	short non_null		;
 35204                                          mov     al,' '                  ;
 35205                                  non_null:                               ;
 35206                                          cmp     al,' '                  ; control code?
 35207                                          jb	short prompt_user	; yes, assume end of line
 35208                                          jne	short non_space		;
 35209                                          cmp     byte [es:si],' '	;
 35210                                          jb	short prompt_user	;
 35211                                  non_space:                              ;
 35212                                          mov     dl,al                   ;
 35213                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35214                                          int     21h                     ;
 35215                                          jmp	short line_print	;
 35216                                  prompt_user:                            ;
 35217                                          mov     dx,_$InterPrmpt		;
 35218                                  
 35219                                  generic_prompt:
 35220                                          call    print                   ;
 35221                                  input_loop:                             ;
 35222                                          mov     ah,0                    ; read a key
 35223                                          int     16h                     ;
 35224                                          or      al,al                   ; is it a function key?
 35225                                          jnz	short not_func		; no
 35226                                          cmp     ah,3Fh                  ; F5 function key?
 35227                                          jne	short input_loop	; no
 35228                                          mov     al,[_$NO]                  ;
 35229                                          or      byte [bQueryOpt],4	; no more queries
 35230                                          jmp     short legal_char        ;
 35231                                  not_func:
 35232                                          and     al,~20h ; 0DFh		; converting to upper case
 35233                                          cmp     al,[_$NO]		; verify character is legal
 35234                                          je	short legal_char	;
 35235                                          cmp     al,[_$YES]		;
 35236                                          je	short legal_char	;
 35237                                          cmp     byte [config_cmd],0	;
 35238                                          je	short input_loop	; don't allow Esc on this query
 35239                                          cmp     al,1Bh                  ; Esc?
 35240                                          jne	short input_loop	;
 35241                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35242                                          mov     al,[_$YES]
 35243                                  legal_char:                             ;
 35244                                          call    disp_input              ;
 35245                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35246                                  
 35247                                          cmp     al,[_$NO]		; process line?
 35248                                          je	short skip_cmd		; no
 35249                                  	; 12/12/2022
 35250                                  	clc
 35251                                  do_cmd:
 35252                                  	pop     ax			;
 35253                                  	; 12/12/2022
 35254                                  	; cf=0
 35255                                  	;clc				; just do the command
 35256                                  	retn
 35257                                  
 35258                                  skip_cmd:
 35259                                  	pop     ax			;
 35260                                  skip_all:
 35261                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35262                                  	stc
 35263                                  	retn
 35264                                  
 35265                                  ;----------------------------------------------------------------------------
 35266                                  ;
 35267                                  ;   print_error: displays multi-config error conditions
 35268                                  ;
 35269                                  ;   INPUT
 35270                                  ;    Carry set to pause, clear to not
 35271                                  ;    ES:SI -> current command line in config.sys
 35272                                  ;
 35273                                  ;   OUTPUT
 35274                                  ;       None
 35275                                  ;
 35276                                  ;   OTHER REGS USED
 35277                                  ;       None
 35278                                  ;
 35279                                  ;   NOTES
 35280                                  ;       None
 35281                                  ;
 35282                                  ;   HISTORY
 35283                                  ;       Created 16-Mar-1992 by JeffPar
 35284                                  ;
 35285                                  ;----------------------------------------------------------------------------
 35286                                  
 35287                                  print_error:
 35288                                          push    ax
 35289                                          push    bx
 35290                                          push    cx
 35291                                          push    dx
 35292                                          push    ds
 35293                                          push    cs
 35294                                          pop     ds
 35295                                          pushf
 35296                                          call    get_linenum
 35297                                          mov     [linecount],bx
 35298                                          call    error_line
 35299                                          popf
 35300                                          jnc	short pe_ret
 35301                                          mov     dx,_$PauseMsg
 35302                                          call    print
 35303                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35304                                          int     21h			; wait for a key
 35305                                          or      al,al			; extended key?
 35306                                          jnz	short pe_1		; no
 35307                                          mov     ah,07h			; yes
 35308                                          int     21h			; eat it too
 35309                                  pe_1:     
 35310                                  	mov     dx,crlfm
 35311                                          call    print
 35312                                  pe_ret: 
 35313                                  	pop     ds
 35314                                          pop     dx
 35315                                          pop     cx
 35316                                          pop     bx
 35317                                          pop     ax
 35318                                  	retn
 35319                                  
 35320                                  ;----------------------------------------------------------------------------
 35321                                  
 35322                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35323                                  ;   command-line for the shell;  this (undocumented) switch disables
 35324                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35325                                  ;   displayed when there's no AUTOEXEC.BAT.
 35326                                  
 35327                                  disable_autoexec:
 35328                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35329                                  	; 17/04/2019 - Retro DOS v4.0
 35330                                  
 35331                                  	test	byte [bQueryOpt],4
 35332                                  	jz	short disable_exit
 35333                                  	test	byte [dae_flag],1
 35334                                  	jnz	short disable_exit
 35335                                  	or	byte [dae_flag],1
 35336                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35337                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35338                                  	mov     dx,'D ' ; 2044h
 35339                                  dae_1:
 35340                                          ;mov	al,[def_swchr]
 35341                                  	mov     al,[command_line-1]     ; get default switchchar
 35342                                          or      al,al                   ; anything there?
 35343                                          jz	short disable_exit	; no, disable_autoexec already called
 35344                                          mov     bl,[command_line]       ;
 35345                                          mov     bh,0                    ; BX == command-line length
 35346                                          mov     cx,bx                   ;
 35347                                          add     bl,3                    ;
 35348                                          cmp     bl,126                  ;
 35349                                          ja	short disable_exit	;
 35350                                          mov     [command_line],bl       ; update length
 35351                                          add     bx,command_line+1	; make sure we move the NULL too
 35352                                          inc     cx                      ; (just for consistency sake)
 35353                                  disable_loop:                           ;
 35354                                          mov     ah,[bx-3]               ;
 35355                                          mov     [bx],ah                 ;
 35356                                          dec     bx                      ;
 35357                                          loop    disable_loop            ;
 35358                                          mov     [bx-2],al               ;
 35359                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35360                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35361                                          ;mov	byte [command_line-1],0 ;
 35362                                  disable_exit:                           ;
 35363                                          retn
 35364                                  
 35365                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35366                                  	cmp     byte [bQueryOpt],1
 35367                                  	jnz     short disable_exit
 35368                                  	test	byte [dae_flag],2
 35369                                  	jnz     short disable_exit
 35370                                  	or      byte [dae_flag],2
 35371                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35372                                  	jmp     short dae_1
 35373                                  
 35374                                  ;endif  ;MULTI_CONFIG
 35375                                  
 35376                                  %endif	; 02/11/2022
 35377                                  
 35378                                  
 35379                                  ; 19/04/2019 - Retro DOS v4.0
 35380                                  
 35381                                  ;----------------------------------------------------------------------------
 35382                                  ;
 35383                                  ; procedure : delim
 35384                                  ;
 35385                                  ;----------------------------------------------------------------------------
 35386                                  
 35387                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35388                                  ;
 35389                                  ;;ifdef	MULTI_CONFIG
 35390                                  ;
 35391                                  ;any_delim:
 35392                                  ;       cmp     al,cr
 35393                                  ;       je	short delim_ret
 35394                                  ;       cmp     al,lf
 35395                                  ;       je	short delim_ret
 35396                                  ;       cmp     al,'['
 35397                                  ;       je	short delim_ret
 35398                                  ;       cmp     al,']'
 35399                                  ;       je	short delim_ret
 35400                                  ;
 35401                                  ;;endif  ;MULTI_CONFIG
 35402                                  
 35403                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35404                                  	; (SYSINIT:3450h)	
 35405                                  delim:
 35406 0000306F 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35407 00003071 7416                    	je	short delim_ret
 35408                                  
 35409 00003073 3C00                    	cmp	al,0		; special case for sysinit!!!
 35410 00003075 7412                    	je	short delim_ret
 35411                                  
 35412                                  org_delim:			; used by organize routine except for getting
 35413 00003077 3C20                    	cmp	al,' '          ; the filename.
 35414 00003079 740E                    	je	short delim_ret
 35415 0000307B 3C09                            cmp     al,tab ; 9
 35416 0000307D 740A                    	je	short delim_ret
 35417 0000307F 3C3D                    	cmp	al,'='
 35418 00003081 7406                    	je	short delim_ret
 35419 00003083 3C2C                    	cmp	al,','
 35420 00003085 7402                    	je	short delim_ret
 35421 00003087 3C3B                    	cmp	al,';'
 35422                                  
 35423                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35424                                  ;;ifdef	MULTI_CONFIG
 35425                                  ;;   Make sure there's no chance of a false EOF indication
 35426                                  ;	clc
 35427                                  ;;endif
 35428                                  
 35429                                  	; 02/11/2022
 35430                                  delim_ret:
 35431 00003089 C3                      	retn
 35432                                  
 35433                                  ;----------------------------------------------------------------------------
 35434                                  ;
 35435                                  ; procedure : newline
 35436                                  ;
 35437                                  ;  newline returns with first character of next line
 35438                                  ;
 35439                                  ;----------------------------------------------------------------------------
 35440                                  
 35441                                  newline:
 35442 0000308A E898F6                  	call	getchr			;skip non-control characters
 35443 0000308D 7207                    	jc	short nl_ret
 35444 0000308F 3C0A                    	cmp	al,lf			;look for line feed
 35445 00003091 75F7                    	jne	short newline
 35446 00003093 E88FF6                  	call	getchr
 35447                                  nl_ret:
 35448 00003096 C3                      	retn
 35449                                  
 35450                                  ;----------------------------------------------------------------------------
 35451                                  ; 
 35452                                  ; procedure : mapcase
 35453                                  ;
 35454                                  ;----------------------------------------------------------------------------
 35455                                  
 35456                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35457                                  mapcase:
 35458 00003097 51                      	push	cx
 35459 00003098 56                      	push	si
 35460 00003099 1E                      	push	ds
 35461                                  
 35462 0000309A 06                      	push	es
 35463 0000309B 1F                      	pop	ds
 35464                                  
 35465                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35466                                  ;;ifdef	MULTI_CONFIG
 35467                                  ;
 35468                                  ;	mov	bl,al                   ; same cmd code this line
 35469                                  ;;else
 35470                                  ;;	xor	si,si
 35471                                  ;;endif
 35472                                  	; 02/11/2022
 35473 0000309C 31F6                    	xor	si, si
 35474                                  
 35475                                  convloop:
 35476 0000309E AC                      	lodsb
 35477 0000309F 3C61                    	cmp	al,'a'
 35478 000030A1 7209                    	jb	short noconv
 35479 000030A3 3C7A                    	cmp	al,'z'
 35480 000030A5 7705                    	ja	short noconv
 35481 000030A7 2C20                    	sub	al,20h
 35482 000030A9 8844FF                  	mov	[si-1],al
 35483                                  noconv:
 35484                                  
 35485                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35486                                  ;;ifdef	MULTI_CONFIG
 35487                                  ;;
 35488                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35489                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35490                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35491                                  ;;   anything after the "=" in a SET)
 35492                                  ;;
 35493                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35494                                  ;       jne	short check_eol		; no, just check for end-of-line
 35495                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35496                                  ;       je	short convdone		; yes
 35497                                  ;check_eol:
 35498                                  ;       cmp     al,cr
 35499                                  ;       je	short convdone
 35500                                  ;       cmp     al,lf
 35501                                  ;       je	short convdone
 35502                                  ;;endif
 35503                                  	
 35504                                  	; 02/11/2022
 35505 000030AC E2F0                    	loop	convloop
 35506                                  convdone:
 35507 000030AE 1F                      	pop	ds
 35508 000030AF 5E                      	pop	si
 35509 000030B0 59                      	pop	cx
 35510 000030B1 C3                      	retn
 35511                                  
 35512                                  ;----------------------------------------------------------------------------
 35513                                  ;
 35514                                  ; procedure : round
 35515                                  ;
 35516                                  ; round the values in memlo and memhi to paragraph boundary.
 35517                                  ; perform bounds check.
 35518                                  ;
 35519                                  ;----------------------------------------------------------------------------
 35520                                  
 35521                                  round:
 35522 000030B2 50                      	push	ax
 35523 000030B3 2EA1[DE03]              	mov	ax,[cs:memlo]
 35524                                  
 35525 000030B7 E8F5DF                  	call	ParaRound		; para round up
 35526                                  
 35527 000030BA 2E0106[E003]            	add	[cs:memhi],ax
 35528 000030BF 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35529 000030C6 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35530 000030CA 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35531 000030CF 7322                    	jae	short mem_err
 35532 000030D1 2EF606[2414]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35533 000030D7 7418                    	jz	short skip_set_devmarksize
 35534 000030D9 06                      	push	es
 35535 000030DA 56                      	push	si
 35536 000030DB 2E8B36[2214]            	mov	si,[cs:devmark_addr]
 35537 000030E0 8EC6                    	mov	es,si
 35538 000030E2 29F0                    	sub	ax,si
 35539 000030E4 48                      	dec	ax
 35540                                  	;mov	[es:3],ax
 35541 000030E5 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35542 000030E9 2E8026[2414]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35543 000030EF 5E                      	pop	si
 35544 000030F0 07                      	pop	es
 35545                                  skip_set_devmarksize:
 35546 000030F1 58                      	pop	ax
 35547                                  	; 11/12/2022
 35548                                  	; cf = 0
 35549                                  	; 02/11/2022
 35550                                  	;clc	; ? (not needed here)	; clear carry
 35551 000030F2 C3                      	retn
 35552                                  
 35553                                  ;----------------------------------------------------------------------------
 35554                                  
 35555                                  mem_err:
 35556                                  	; 11/12/2022
 35557 000030F3 0E                      	push	cs
 35558 000030F4 1F                      	pop	ds
 35559                                  mem_err2:
 35560 000030F5 BA[1B38]                	mov	dx,badmem
 35561                                  	;push	cs
 35562                                  	;pop	ds
 35563 000030F8 E87602                  	call	print
 35564 000030FB E947D7                  	jmp	stall
 35565                                  
 35566                                  ;----------------------------------------------------------------------------
 35567                                  ;
 35568                                  ; procedure : calldev
 35569                                  ;
 35570                                  ;----------------------------------------------------------------------------
 35571                                  
 35572                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35573                                  	; (SYSINIT:34E0h)
 35574                                  calldev:
 35575 000030FE 2E8E1E[DC1E]            	mov	ds,[cs:DevEntry+2]
 35576 00003103 2E031E[DA1E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35577 00003108 8B07                    	mov	ax,[bx]
 35578                                  
 35579 0000310A 2EFF36[DA1E]            	push	word [cs:DevEntry]
 35580 0000310F 2EA3[DA1E]              	mov	word [cs:DevEntry],ax
 35581 00003113 BB[E603]                	mov	bx,packet
 35582 00003116 2EFF1E[DA1E]            	call	far [cs:DevEntry]
 35583 0000311B 2E8F06[DA1E]            	pop	word [cs:DevEntry]
 35584 00003120 C3                      	retn
 35585                                  
 35586                                  ;----------------------------------------------------------------------------
 35587                                  ;
 35588                                  ; procedure : todigit
 35589                                  ;
 35590                                  ;----------------------------------------------------------------------------
 35591                                  
 35592                                  todigit:
 35593 00003121 2C30                    	sub	al,'0'
 35594                                  	;jb	short notdig  ; 02/11/2022
 35595                                  	; 12/12/2022
 35596 00003123 7203                    	jb	short notdig2
 35597                                  	;cmp	al,9
 35598                                  	;ja	short notdig
 35599                                  	;clc
 35600                                  	;retn
 35601                                  	; 12/12/2022
 35602 00003125 3C0A                    	cmp	al,10
 35603 00003127 F5                      	cmc
 35604                                  notdig:
 35605                                  	;stc
 35606                                  notdig2:
 35607 00003128 C3                      	retn
 35608                                  
 35609                                  ;----------------------------------------------------------------------------
 35610                                  ;
 35611                                  ; procedure : getnum
 35612                                  ;
 35613                                  ; getnum parses a decimal number.
 35614                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35615                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35616                                  ;
 35617                                  ;----------------------------------------------------------------------------
 35618                                  
 35619                                  getnum:
 35620 00003129 53                      	push	bx
 35621 0000312A 31DB                    	xor	bx,bx			; running count is zero
 35622                                  b2:
 35623 0000312C E8F2FF                  	call	todigit 		; do we have a digit ?
 35624 0000312F 7247                    	jc	short badnum		; no, bomb
 35625                                  
 35626 00003131 93                      	xchg	ax,bx			; put total in ax
 35627 00003132 53                      	push	bx			; save digit (0 to 9)
 35628                                  	;mov	bx,10			; base of arithmetic
 35629                                  	; 12/12/2022
 35630 00003133 B30A                    	mov	bl,10
 35631 00003135 F7E3                    	mul	bx			; shift by one decimal digit
 35632 00003137 5B                      	pop	bx			; get back digit (0 to 9)
 35633 00003138 00D8                    	add	al,bl			; get total
 35634 0000313A 80D400                  	adc	ah,0			; make that 16 bits
 35635 0000313D 7239                    	jc	short badnum		; too big a number
 35636                                  
 35637 0000313F 93                      	xchg	ax,bx			; stash total
 35638                                  
 35639 00003140 E8E2F5                  	call	getchr			;get next digit
 35640 00003143 722D                    	jc	short b1		; no more characters
 35641 00003145 3C20                    	cmp	al,' ' 			; space?
 35642 00003147 741F                    	je	short b15		; then end of digits
 35643 00003149 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35644 0000314B 741B                    	je	short b15		; then end of digits.
 35645 0000314D 3C09                    	cmp	al, tab ; 9		; tab
 35646 0000314F 7417                    	je	short b15
 35647 00003151 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35648 00003156 7410                    	je	short b15
 35649 00003158 3C2F                    	cmp	al,'/'			; see if another switch follows
 35650                                  	;nop				; cas - remnant of old bad code
 35651                                  	;nop
 35652                                  	; 12/12/2022
 35653                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35654                                  	;nop
 35655                                  	;nop
 35656 0000315A 740C                    	je	short b15
 35657 0000315C 3C0A                    	cmp	al,lf			; line-feed?
 35658 0000315E 7408                    	je	short b15
 35659 00003160 3C0D                    	cmp	al,cr			; carriage return?
 35660 00003162 7404                    	je	short b15
 35661 00003164 08C0                    	or	al,al			; end of line separator?
 35662 00003166 75C4                    	jnz	short b2		; no, try as a valid char...
 35663                                  b15:
 35664 00003168 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35665 0000316D 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35666                                  b1:
 35667 00003172 89D8                    	mov	ax,bx			; get proper count
 35668 00003174 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35669 00003176 5B                      	pop	bx
 35670 00003177 C3                      	retn
 35671                                  badnum:
 35672                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35673                                  	;mov	byte [cs:sepchr],0
 35674 00003178 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35675                                  	; 12 /12/2022
 35676 0000317A 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35677 0000317E 5B                      	pop	bx
 35678 0000317F F9                      	stc				; and carry set
 35679 00003180 C3                      	retn
 35680                                  
 35681                                  ;****************************************************************************
 35682                                  
 35683                                  setdoscountryinfo:
 35684                                  
 35685                                  ;----------------------------------------------------------------------------
 35686                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35687                                  ;	ds:0  -> buffer.
 35688                                  ;	si = 0
 35689                                  ;	ax = country id
 35690                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35691                                  ;	bx = file handle
 35692                                  ;	this routine can handle maximum 438 country_data entries.
 35693                                  ;
 35694                                  ;output: dos_country_cdpg_info set.
 35695                                  ;	 carry set if any file read failure or wrong information in the file.
 35696                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35697                                  ;	 codepage_id in the file.
 35698                                  ;----------------------------------------------------------------------------
 35699                                  
 35700 00003181 57                      	push	di
 35701 00003182 50                      	push	ax
 35702 00003183 52                      	push	dx
 35703                                  
 35704 00003184 31C9                    	xor	cx,cx
 35705 00003186 31D2                    	xor	dx,dx
 35706 00003188 B80002                  	mov	ax,512			;read 512 bytes
 35707 0000318B E84F01                  	call	readincontrolbuffer	;read the file header
 35708 0000318E 724D                    	jc	short setdosdata_fail
 35709                                  
 35710 00003190 06                      	push	es
 35711 00003191 56                      	push	si
 35712                                  
 35713 00003192 0E                      	push	cs
 35714 00003193 07                      	pop	es
 35715                                  
 35716 00003194 BF[3D34]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35717 00003197 B90800                  	mov	cx,8			;length of the signature
 35718 0000319A F3A6                    	repz	cmpsb
 35719                                  
 35720 0000319C 5E                      	pop	si
 35721 0000319D 07                      	pop	es
 35722 0000319E 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35723                                  
 35724 000031A0 83C612                  	add	si,18			;si -> county info type
 35725 000031A3 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35726 000031A6 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35727                                  
 35728 000031A8 46                      	inc	si			;si -> file offset
 35729 000031A9 8B14                    	mov	dx,[si]			;get the info file offset.
 35730 000031AB 8B4C02                  	mov	cx,[si+2]
 35731 000031AE B80018                  	mov	ax,6144			;read 6144 bytes.
 35732 000031B1 E82901                  	call	readincontrolbuffer	;read info
 35733 000031B4 7227                    	jc	short setdosdata_fail
 35734                                  
 35735 000031B6 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35736 000031B8 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35737 000031BC 771F                    	ja	short setdosdata_fail
 35738                                  
 35739 000031BE 46                      	inc	si
 35740 000031BF 46                      	inc	si			;si -> entry information packet
 35741 000031C0 5A                      	pop	dx			;restore code page id
 35742 000031C1 58                      	pop	ax			;restore country id
 35743 000031C2 5F                      	pop	di
 35744                                  
 35745                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35746 000031C3 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35747 000031C6 750A                    	jne	short setdoscntry_next
 35748                                  
 35749 000031C8 83FA00                  	cmp	dx,0			;no user specified code page ?
 35750 000031CB 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35751 000031CD 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35752 000031D0 7413                    	je	short setdoscntry_got_it
 35753                                  
 35754                                  setdoscntry_next:
 35755 000031D2 0334                    	add	si,[si]			;next entry
 35756 000031D4 46                      	inc	si
 35757 000031D5 46                      	inc	si			;take a word for size of entry itself
 35758 000031D6 E2EB                    	loop	setdoscntry_find
 35759                                  
 35760 000031D8 B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35761                                  setdoscntry_fail:
 35762 000031DB F9                      	stc
 35763 000031DC C3                      	retn
 35764                                  
 35765                                  setdosdata_fail:
 35766 000031DD 5E                      	pop	si
 35767 000031DE 59                      	pop	cx
 35768 000031DF 5F                      	pop	di
 35769 000031E0 EBF9                    	jmp	short setdoscntry_fail
 35770                                  
 35771                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35772 000031E2 8B5404                  	mov	dx,[si+4]
 35773                                  
 35774                                  setdoscntry_got_it:			;found the matching entry
 35775 000031E5 2E8916[4534]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35776 000031EA 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35777 000031ED 8B4C0C                  	mov	cx,[si+12]
 35778 000031F0 B80002                  	mov	ax,512 			;read 512 bytes
 35779 000031F3 E8E700                  	call	readincontrolbuffer
 35780 000031F6 72E3                    	jc	short setdoscntry_fail
 35781                                  
 35782 000031F8 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35783 000031FA 46                      	inc	si
 35784 000031FB 46                      	inc	si			;si -> first entry
 35785                                  
 35786                                  setdoscntry_data:
 35787 000031FC 57                      	push	di			;es:di -> dos_country_cdpg_info
 35788 000031FD 51                      	push	cx			;save # of entry left
 35789 000031FE 56                      	push	si			;si -> current entry in control buffer
 35790                                  
 35791 000031FF 8A4402                  	mov	al,[si+2]		;get data entry id
 35792 00003202 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35793 00003205 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35794                                  
 35795 00003207 8B5404                  	mov	dx,[si+4]		;get offset of data
 35796 0000320A 8B4C06                  	mov	cx,[si+6]
 35797 0000320D B80042                  	mov	ax,4200h
 35798 00003210 F9                      	stc
 35799 00003211 CD21                    	int	21h			;move pointer
 35800 00003213 72C8                    	jc	short setdosdata_fail
 35801                                  
 35802 00003215 BA0002                  	mov	dx,512			;start of data buffer
 35803 00003218 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35804 0000321B B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35805 0000321D F9                      	stc
 35806 0000321E CD21                    	int	21h			;read the country.sys data
 35807 00003220 72BB                    	jc	short setdosdata_fail 	;read failure
 35808                                  
 35809 00003222 39C8                    	cmp	ax,cx
 35810 00003224 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35811                                  
 35812 00003226 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35813 00003229 8B4C06                  	mov	cx,[si+6]
 35814 0000322C B80042                  	mov	ax,4200h
 35815 0000322F F9                      	stc
 35816 00003230 CD21                    	int	21h			;move pointer back again
 35817 00003232 72A9                    	jc	short setdosdata_fail
 35818                                  
 35819 00003234 56                      	push	si
 35820 00003235 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35821 00003238 8B0C                    	mov	cx,[si]
 35822 0000323A 5E                      	pop	si
 35823 0000323B BA0002                  	mov	dx,512			;start of data buffer
 35824 0000323E 83C10A                  	add	cx,10			;signature + a word for the length itself
 35825 00003241 B43F                    	mov	ah,3Fh			;read the data from the file.
 35826 00003243 F9                      	stc
 35827 00003244 CD21                    	int	21h
 35828 00003246 7295                    	jc	short setdosdata_fail
 35829                                  
 35830 00003248 39C8                    	cmp	ax,cx
 35831 0000324A 7591                    	jne	short setdosdata_fail
 35832                                  
 35833 0000324C 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35834 0000324F BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35835 00003252 8B0C                    	mov	cx,[si]			;get the length of the file
 35836 00003254 41                      	inc	cx			;take care of a word for lenght of tab
 35837 00003255 41                      	inc	cx			;itself.
 35838 00003256 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35839 0000325A 7781                    	ja	short setdosdata_fail
 35840                                  
 35841                                  	;if	bugfix
 35842 0000325C E83500                  	call	setdbcs_before_copy
 35843                                  	;endif
 35844                                  
 35845 0000325F 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35846 00003261 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35847                                  
 35848 00003263 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35849                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35850 00003267 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35851                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35852                                  	
 35853 0000326B 57                      	push	di			;save di
 35854                                  
 35855 0000326C 50                      	push	ax
 35856 0000326D 2EA1[4534]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35857 00003271 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35858 00003274 58                      	pop	ax
 35859                                  
 35860                                  setdoscntry_mov:
 35861 00003275 F3A4                    	rep	movsb			;copy the table into dos
 35862 00003277 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35863 00003279 7509                    	jne	short setdoscntry_data_next
 35864                                  
 35865 0000327B 5F                      	pop	di			;restore di
 35866 0000327C 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35867                                  	;pop	word [es:di+26]		;restore
 35868 00003280 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35869                                  	;pop	word [es:di+24]
 35870                                  
 35871                                  setdoscntry_data_next:
 35872 00003284 5E                      	pop	si			;restore control buffer pointer
 35873 00003285 59                      	pop	cx			;restore # of entries left
 35874 00003286 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35875 00003287 0334                    	add	si,[si]			;try to get the next entry
 35876 00003289 46                      	inc	si
 35877 0000328A 46                      	inc	si			;take a word of entry length itself
 35878 0000328B 49                      	dec	cx
 35879 0000328C 83F900                  	cmp	cx,0
 35880 0000328F 741D                    	je	short setdoscntry_ok
 35881 00003291 E968FF                  	jmp	setdoscntry_data
 35882                                  
 35883                                  	; 18/12/2022
 35884                                  ;setdoscntry_ok:
 35885                                  	;retn
 35886                                  
 35887                                  ;----------------------------------------------------------------------------
 35888                                  
 35889                                  	;if	bugfix
 35890                                  
 35891                                  setdbcs_before_copy:
 35892 00003294 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35893 00003296 7516                    	jne	short sdbcsbc		; jump if not
 35894 00003298 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35895 0000329C 7410                    	je	short sdbcsbc		; jump if so
 35896                                  
 35897 0000329E 57                      	push	di
 35898 0000329F 50                      	push	ax
 35899 000032A0 51                      	push	cx
 35900 000032A1 268B0D                  	mov	cx,[es:di]		; load block length
 35901 000032A4 83C702                  	add	di,2			; points actual data
 35902 000032A7 30C0                    	xor	al,al			; fill bytes
 35903 000032A9 F3AA                    	rep	stosb			; clear data block
 35904 000032AB 59                      	pop	cx
 35905 000032AC 58                      	pop	ax
 35906 000032AD 5F                      	pop	di
 35907                                  sdbcsbc:
 35908                                  setdoscntry_ok:	; 18/12/2022	
 35909 000032AE C3                      	retn
 35910                                  
 35911                                  	;endif
 35912                                  
 35913                                  ;----------------------------------------------------------------------------
 35914                                  
 35915                                  getcountrydestination:
 35916                                  
 35917                                  ;get the destination address in the dos country info table.
 35918                                  ;input: al - data id
 35919                                  ;	es:di -> dos_country_cdpg_info
 35920                                  ;on return:
 35921                                  ;	es:di -> destination address of the matching data id
 35922                                  ;	carry set if no matching data id found in dos.
 35923                                  
 35924 000032AF 51                      	push	cx
 35925                                  	;add	di,74
 35926 000032B0 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35927                                  					;skip the reserved area, syscodepage etc.
 35928 000032B3 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35929 000032B6 47                      	inc	di
 35930 000032B7 47                      	inc	di			;si -> the first start entry id
 35931                                  
 35932                                  getcntrydest:
 35933 000032B8 263805                  	cmp	byte [es:di],al
 35934 000032BB 7413                    	je	short getcntrydest_ok
 35935 000032BD 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35936 000032C1 7405                    	je	short getcntrydest_1
 35937                                  
 35938 000032C3 83C705                  	add	di,5			;next data id
 35939 000032C6 EB03                    	jmp	short getcntrydest_loop
 35940                                  
 35941                                  getcntrydest_1:
 35942                                  	;add	di,41
 35943 000032C8 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35944                                  getcntrydest_loop:
 35945 000032CB E2EB                    	loop	getcntrydest
 35946 000032CD F9                      	stc
 35947 000032CE EB0B                    	jmp	short getcntrydest_exit
 35948                                  
 35949                                  getcntrydest_ok:
 35950 000032D0 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35951 000032D2 7503                    	jne	short getcntrydest_ok1
 35952                                  
 35953 000032D4 47                      	inc	di			;now di -> cccountryinfolen
 35954 000032D5 EB04                    	jmp	short getcntrydest_exit
 35955                                  
 35956                                  getcntrydest_ok1:
 35957 000032D7 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35958                                  
 35959                                  getcntrydest_exit:
 35960 000032DB 59                      	pop	cx
 35961 000032DC C3                      	retn
 35962                                  
 35963                                  ;----------------------------------------------------------------------------
 35964                                  
 35965                                  readincontrolbuffer:
 35966                                  
 35967                                  ;move file pointer to cx:dx
 35968                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35969                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35970                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35971                                  ;	 be moved.
 35972                                  ;	 ax - # of bytes to read
 35973                                  ;	 bx - file handle
 35974                                  ;	 ds - buffer seg.
 35975                                  ;return: the control data information is read into ds:0 - ds:0200.
 35976                                  ;	 cx,dx value destroyed.
 35977                                  ;	 carry set if error in reading file.
 35978                                  
 35979 000032DD 50                      	push	ax			;# of bytes to read
 35980 000032DE B80042                  	mov	ax,4200h
 35981 000032E1 F9                      	stc
 35982 000032E2 CD21                    	int	21h			;move pointer
 35983 000032E4 59                      	pop	cx			;# of bytes to read
 35984 000032E5 7209                    	jc	short ricb_exit
 35985                                  
 35986 000032E7 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35987 000032E9 31F6                    	xor	si,si
 35988 000032EB B43F                    	mov	ah,3Fh			;read into the buffer
 35989 000032ED F9                      	stc
 35990 000032EE CD21                    	int	21h			;should be less than 1024 bytes.
 35991                                  ricb_exit:
 35992 000032F0 C3                      	retn
 35993                                  
 35994                                  ;----------------------------------------------------------------------------
 35995                                  
 35996                                  set_country_path:
 35997                                  
 35998                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35999                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36000                                  ;     assumes current directory is the root directory.
 36001                                  ;out: ds:di -> full path (cntry_drv).
 36002                                  ;     set the cntry_drv string from the country=,,path command.
 36003                                  ;     ds, es, si value saved.
 36004                                  
 36005 000032F1 56                      	push	si
 36006                                  
 36007 000032F2 1E                      	push	ds			;switch ds, es
 36008 000032F3 06                      	push	es
 36009 000032F4 1F                      	pop	ds
 36010 000032F5 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 36011                                  
 36012 000032F6 E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36013 000032F9 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 36014                                  
 36015 000032FB 8A04                    	mov	al,[si]
 36016 000032FD 46                      	inc	si
 36017 000032FE 46                      	inc	si			;si -> next char after ":"
 36018 000032FF EB06                    	jmp	short scp_setdrv
 36019                                  
 36020                                  scp_default_drv:
 36021 00003301 B419                    	mov	ah,19h
 36022 00003303 CD21                    	int	21h
 36023 00003305 0441                    	add	al,"A"			;convert it to a character.
 36024                                  
 36025                                  scp_setdrv:
 36026 00003307 2EA2[FA33]              	mov	[cs:cntry_drv],al	;set the drive letter.
 36027 0000330B BF[FD33]                	mov	di,cntry_path
 36028 0000330E 8A04                    	mov	al,[si]
 36029 00003310 3C5C                    	cmp	al, "\"
 36030 00003312 7406                    	je	short scp_root_dir
 36031                                  
 36032 00003314 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 36033 00003316 7402                    	je	short scp_root_dir
 36034                                  
 36035 00003318 EB01                    	jmp	short scp_path
 36036                                  
 36037                                  scp_root_dir:
 36038 0000331A 4F                      	dec	di			;di -> cntry_root
 36039                                  scp_path:
 36040 0000331B E81F00                  	call	move_asciiz		;copy it
 36041                                  
 36042 0000331E BF[FA33]                	mov	di,cntry_drv
 36043                                  scpath_exit:
 36044                                  
 36045 00003321 1E                      	push	ds			;switch ds, es
 36046 00003322 06                      	push	es
 36047 00003323 1F                      	pop	ds
 36048 00003324 07                      	pop	es			;ds, es value restored
 36049                                  
 36050 00003325 5E                      	pop	si
 36051 00003326 C3                      	retn
 36052                                  
 36053                                  ;----------------------------------------------------------------------------
 36054                                  
 36055                                  chk_drive_letter:
 36056                                  
 36057                                  ;check if ds:[si] is a drive letter followed by ":".
 36058                                  ;assume that every alpha character is already converted to upper case.
 36059                                  ;carry set if not.
 36060                                  
 36061 00003327 50                      	push	ax
 36062 00003328 803C41                  	cmp	byte [si],"A"
 36063                                  	;jb	short cdletter_no
 36064 0000332B 720E                    	jb	short cdletter_exit
 36065 0000332D 803C5A                  	cmp	byte [si],"Z"
 36066 00003330 7708                    	ja	short cdletter_no
 36067 00003332 807C013A                	cmp	byte [si+1],":"
 36068 00003336 7502                    	jne	short cdletter_no
 36069                                  
 36070 00003338 EB01                    	jmp	short cdletter_exit
 36071                                  
 36072                                  cdletter_no:
 36073 0000333A F9                      	stc
 36074                                  cdletter_exit:
 36075 0000333B 58                      	pop	ax
 36076 0000333C C3                      	retn
 36077                                  
 36078                                  ;----------------------------------------------------------------------------
 36079                                  
 36080                                  move_asciiz:
 36081                                  
 36082                                  ;in: ds:si -> source es:di -> target
 36083                                  ;out: copy the string until 0.
 36084                                  ;assumes there exists a 0.
 36085                                  
 36086                                  masciiz_loop:
 36087 0000333D A4                      	movsb
 36088 0000333E 807CFF00                	cmp	byte [si-1],0	; was it 0?
 36089 00003342 75F9                    	jne	short masciiz_loop
 36090 00003344 C3                      	retn
 36091                                  
 36092                                  ;----------------------------------------------------------------------------
 36093                                  
 36094                                  ;	ds:dx points to string to output (asciz)
 36095                                  ;
 36096                                  ;	prints <badld_pre> <string> <badld_post>
 36097                                  
 36098                                  badfil:
 36099 00003345 0E                      	push	cs
 36100 00003346 07                      	pop	es
 36101                                  
 36102 00003347 89D6                    	mov	si,dx
 36103                                  badload:
 36104 00003349 BA[8537]                	mov	dx,badld_pre	; want to print config error
 36105 0000334C BB[4237]                	mov	bx,crlfm
 36106                                  prnerr:
 36107 0000334F 0E                      	push	cs
 36108 00003350 1F                      	pop	ds ; *
 36109 00003351 E81D00                  	call	print
 36110                                  prn1:
 36111 00003354 268A14                  	mov	dl,[es:si]
 36112 00003357 08D2                    	or	dl,dl
 36113 00003359 7407                    	jz	short prn2
 36114 0000335B B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36115 0000335D CD21                    	int	21h
 36116 0000335F 46                      	inc	si
 36117 00003360 EBF2                    	jmp	short prn1
 36118                                  prn2:
 36119 00003362 89DA                    	mov	dx,bx
 36120 00003364 E80A00                  	call	print
 36121                                  	; 11/12/2022
 36122                                  	; ds = cs ; *
 36123 00003367 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36124                                  	;cmp	byte [cs:donotshownum],1 
 36125 0000336C 7407                    	je	short prnexit
 36126                                  	
 36127                                  	; 18/12/2022
 36128                                  	;call	error_line
 36129 0000336E E9CBF3                  	jmp	error_line
 36130                                  ;prnexit:
 36131                                  	;retn
 36132                                  
 36133                                  ;----------------------------------------------------------------------------
 36134                                  
 36135                                  print:
 36136 00003371 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36137 00003373 CD21                    	int	21h
 36138                                  prnexit:	; 18/12/2022
 36139 00003375 C3                      	retn
 36140                                  
 36141                                  ;----------------------------------------------------------------------------
 36142                                  
 36143                                  ;  open device pointed to by dx, al has access code
 36144                                  ;   if unable to open do a device open null device instead
 36145                                  
 36146                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36147                                  	; (SYSINIT:3764h)
 36148                                  open_dev:
 36149 00003376 E80500                  	call	open_file
 36150 00003379 7309                    	jnc	short open_dev3
 36151                                  
 36152                                  open_dev1:
 36153 0000337B BA[DE33]                	mov	dx,nuldev
 36154                                  	; 18/12/2022
 36155                                  	;call	open_file
 36156                                  ;of_retn:
 36157                                  	;retn
 36158                                  	; 18/12/2022
 36159                                  	;jmp	short open_file
 36160                                  open_file:
 36161 0000337E B43D                    	mov	ah,OPEN	; 3Dh
 36162 00003380 F9                      	stc
 36163 00003381 CD21                    	int	21h
 36164                                  of_retn:	; 18/12/2022
 36165 00003383 C3                      	retn
 36166                                  
 36167                                  open_dev3:
 36168 00003384 89C3                    	mov	bx,ax			; handle from open to bx
 36169                                  	;;xor	ax,ax			; get device info
 36170                                  	;;mov	ah,IOCTL ; 44h
 36171                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36172                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36173                                  	;xor	ax,ax
 36174                                  	;mov	ah,44h	; IOCTL
 36175                                  	; 11/12/2022
 36176 00003386 B80044                  	mov	ax,4400h ; IOCTL<<8 
 36177                                  
 36178 00003389 CD21                    	int	21h
 36179                                  
 36180 0000338B F6C280                  	test	dl,10000000b ; 80h
 36181 0000338E 75F3                    	jnz	short of_retn
 36182                                  
 36183 00003390 B43E                    	mov	ah,CLOSE ; 3Eh
 36184 00003392 CD21                    	int	21h
 36185 00003394 EBE5                    	jmp	short open_dev1
 36186                                  
 36187                                  ;----------------------------------------------------------------------------
 36188                                  
 36189                                  ; 18/12/2022
 36190                                  %if 0
 36191                                  open_file:
 36192                                  	mov	ah,OPEN	; 3Dh
 36193                                  	stc
 36194                                  	int	21h
 36195                                  	retn
 36196                                  %endif
 36197                                  
 36198                                  ;----------------------------------------------------------------------------
 36199                                  
 36200                                  ; test int24. return back to dos with the fake user response of "fail"
 36201                                  
 36202                                  int24:
 36203 00003396 B003                    	mov	al,3			; fail the system call
 36204 00003398 CF                      	iret				; return back to dos.
 36205                                  
 36206                                  ; 19/04/2019 - Retro DOS v4.0
 36207                                  
 36208                                  ;----------------------------------------------------------------------------
 36209                                  ; DATA
 36210                                  ;----------------------------------------------------------------------------
 36211                                  
 36212                                  ;include copyrigh.inc			; copyright statement
 36213                                  
 36214                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36215                                  
 36216                                  ;MsDosVersion6Copyr:
 36217                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36218                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36219                                  
 36220                                  ; 22/10/2022
 36221                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36222                                  
 36223                                  ; 04/01/2023
 36224                                  %if 0
 36225                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36226                                  MsDosVersion5Copyr:
 36227                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36228                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36229                                  %endif
 36230                                  
 36231                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36232                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36233                                  ; 20/04/2019 - Retro DOS v4.0
 36234                                  ;BOOTMES:
 36235                                  ;	db      13
 36236                                  ;	db      10
 36237                                  ;	db      "MS-DOS version "
 36238                                  ;	db      MAJOR_VERSION + "0"
 36239                                  ;	db      "."
 36240                                  ;	db      (MINOR_VERSION / 10) + "0"
 36241                                  ;	db      (MINOR_VERSION % 10) + "0"
 36242                                  ;	db      13,10
 36243                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36244                                  ;	; 22/10/2022
 36245                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36246                                  ;	;
 36247                                  ;	db	0
 36248                                  
 36249                                  	; 12/12/2022
 36250 00003399 00                      	db	0
 36251                                  ; 12/12/2022
 36252                                  BOOTMES:
 36253 0000339A 0D0A                    	db	13,10
 36254 0000339C 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36254 000033A5 2076342E3020284D6F-
 36254 000033AE 646966696564204D53-
 36254 000033B7 444F5320352E302920 
 36255 000033C0 0D0A                    	db	13,10
 36256                                  	;;db	"by Erdogan Tan [2022] "
 36257                                  	;db	"by Erdogan Tan [2023] " ; 04/01/2023
 36258 000033C2 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 05/01/2024
 36258 000033CB 6E2054616E205B3230-
 36258 000033D4 32345D20           
 36259 000033D8 0D0A                    	db	13,10
 36260 000033DA 0D0A2400                	db	13,10,"$",0
 36261                                  
 36262 000033DE 4E554C00                nuldev:	db	"NUL",0
 36263 000033E2 434F4E00                condev:	db	"CON",0
 36264 000033E6 41555800                auxdev:	db	"AUX",0
 36265 000033EA 50524E00                prndev:	db	"PRN",0
 36266                                  
 36267                                  ;IFDEF	CONFIGPROC
 36268 000033EE 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36268 000033F7 595300             
 36269                                  
 36270 000033FA 413A                    cntry_drv:  db	"A:"
 36271 000033FC 5C                      cntry_root: db	"\"
 36272 000033FD 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36272 00003406 595300             
 36273                                  	    ;db	52 dup (0)
 36274 00003409 00<rep 34h>             	    times 52 db 0	
 36275                                  
 36276                                  country_file_signature:
 36277 0000343D FF434F554E545259        	db	0FFh,'COUNTRY'
 36278                                  
 36279                                  cntrycodepage_id: 
 36280 00003445 0000                    	dw	0 	
 36281                                  
 36282                                  ;ENDIF ; CONFIGPROC
 36283                                  
 36284                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36285                                  ;;ifdef	MULTI_CONFIG
 36286                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36287                                  ;tmplate: db	64                      ; must precede commnd
 36288                                  ;;endif
 36289                                  	; 02/11/2022
 36290                                  	;db	12                      ; size of commnd line (excl. null)
 36291                                  
 36292 00003447 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36292 00003450 434F4D00           
 36293                                  	;db	51 dup (0)
 36294 00003454 00<rep 33h>             	times	51 db 0
 36295                                  ;endif
 36296                                  
 36297                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36298                                  ;;ifdef	MULTI_CONFIG
 36299                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36300                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36301                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36302                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36303                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36304                                  ;	 db	9,"A:\DOS /P",0		;
 36305                                  ;def_swchr:	
 36306                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36307                                  ;;endif
 36308                                  
 36309                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36310                                  ;command_line:
 36311                                  ;	db	2,"/P"			; default command.com args
 36312                                  ;	;db	125 dup (0)
 36313                                  ;	times	125 db 0
 36314                                  
 36315                                  pathstring:
 36316                                  	;db	64 dup (0)
 36317 00003487 00<rep 40h>             	times	64 db 0
 36318                                  
 36319                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36320                                  %if 0
 36321                                  
 36322                                  dae_flag:
 36323                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36324                                  
 36325                                  ;ifdef	MULTI_CONFIG
 36326                                  
 36327                                  MAX_MULTI_CONFIG equ 10
 36328                                  
 36329                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36330                                  
 36331                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36332                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36333                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36334                                  bLastCol:	db      0               ; ending column on status line
 36335                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36336                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36337                                                                          ; 2=disable default 2-second delay
 36338                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36339                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36340                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36341                                  bDefBlock:	db      1               ; default block #
 36342                                  bMaxBlock:	db      0               ; maxmimum block #
 36343                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36344                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36345                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36346                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36347                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36348                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36349                                  
 36350                                  szBoot:		db      "CONFIG=",0
 36351                                  szMenu:		db      "MENU",0
 36352                                  szCommon:	db      "COMMON",0
 36353                                  
 36354                                  ;endif	;MULTI_CONFIG
 36355                                  
 36356                                  comtab:	 ; label byte
 36357                                  
 36358                                  ;            cmd len    command         cmd code
 36359                                  ;            -------    -------         --------
 36360                                  
 36361                                  ;ifdef MULTI_CONFIG
 36362                                          db      1,      "[",            CONFIG_BEGIN
 36363                                  ;endif
 36364                                          db      5,      "BREAK",        CONFIG_BREAK
 36365                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36366                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36367                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36368                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36369                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36370                                          db      3,      "DOS",          CONFIG_DOS
 36371                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36372                                          db      4,      "FCBS",         CONFIG_FCBS
 36373                                          db      5,      "FILES",        CONFIG_FILES
 36374                                  ;ifdef MULTI_CONFIG
 36375                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36376                                  ;endif
 36377                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36378                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36379                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36380                                  ;ifdef MULTI_CONFIG
 36381                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36382                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36383                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36384                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36385                                  ;endif
 36386                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36387                                  ;ifdef MULTI_CONFIG
 36388                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36389                                  ;endif
 36390                                          db      3,      "REM",          CONFIG_REM
 36391                                  ;ifdef MULTI_CONFIG
 36392                                          db      3,      "SET",          CONFIG_SET
 36393                                  ;endif
 36394                                          db      5,      "SHELL",        CONFIG_SHELL
 36395                                  ;if    STACKSW
 36396                                          db      6,      "STACKS",       CONFIG_STACKS
 36397                                  ;endif
 36398                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36399                                  	db	0
 36400                                  %endif
 36401                                  
 36402                                  comtab:
 36403                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36404                                  	; (SYSINIT:38EDh)
 36405 000034C7 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36406 000034D0 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36407 000034D7 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36408 000034DF 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36408 000034E8 474855             
 36409 000034EB 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36410 000034F2 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36411 000034F8 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36411 00003501 454C               
 36412 00003503 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36412 0000350C 434B4D             
 36413 0000350F 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36413 00003518 50                 
 36414 00003519 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36415 00003521 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36416 0000352A 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36417 00003531 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36418 0000353A 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36419 00003543 0352454D30              	db      3,      "REM",          CONFIG_REM
 36420 00003548 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36420 00003551 31                 
 36421 00003552 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36422 00003557 00                      	db	0
 36423                                  
 36424                                  deviceparameters:	
 36425                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36426                                  devp.specialfunc:	; deviceparameters +
 36427 00003558 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36428                                  devp.devtype:
 36429 00003559 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36430                                  devp.devattr:
 36431 0000355A 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36432                                  devp.cylinders:
 36433 0000355C 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36434                                  
 36435 0000355E 00<rep 11Eh>            	times	286	db 0
 36436                                  	
 36437 0000367C 0200                    hlim:	dw	2
 36438 0000367E 0900                    slim:	dw	9
 36439                                  
 36440 00003680 00                      drive:	db	0
 36441                                  
 36442                                  switches:
 36443 00003681 0000                    	dw	0
 36444                                  
 36445                                  ; the following are the recommended bpbs for the media that
 36446                                  ; we know of so far.
 36447                                  
 36448                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36449                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36450                                  
 36451                                  ; 48 tpi diskettes
 36452                                  
 36453 00003683 0002                    bpb48t	dw	512
 36454 00003685 02                      	db	2
 36455 00003686 0100                    	dw	1
 36456 00003688 02                      	db	2
 36457 00003689 7000                    	dw	112
 36458 0000368B D002                    	dw	2*9*40 ; 720
 36459 0000368D FD                      	db	0FDh
 36460 0000368E 0200                    	dw	2
 36461 00003690 0900                    	dw	9
 36462 00003692 0200                    	dw	2
 36463 00003694 00000000                	dd	0
 36464 00003698 00000000                        dd      0
 36465                                  
 36466                                  ; 96tpi diskettes
 36467                                  
 36468 0000369C 0002                    bpb96t:	dw	512
 36469 0000369E 01                      	db	1
 36470 0000369F 0100                    	dw	1
 36471 000036A1 02                      	db	2
 36472 000036A2 E000                    	dw	224
 36473 000036A4 6009                    	dw	2*15*80 ; 2400
 36474 000036A6 F9                      	db	0F9h
 36475 000036A7 0700                    	dw	7
 36476 000036A9 0F00                    	dw	15
 36477 000036AB 0200                    	dw	2
 36478 000036AD 00000000                	dd	0
 36479 000036B1 00000000                        dd      0
 36480                                  
 36481                                  ; 3 1/2 inch diskette bpb
 36482                                  
 36483 000036B5 0002                    bpb35:	dw	512
 36484 000036B7 02                      	db	2
 36485 000036B8 0100                    	dw	1
 36486 000036BA 02                      	db	2
 36487 000036BB 7000                    	dw	112
 36488 000036BD A005                    	dw	2*9*80 ; 1440
 36489 000036BF F9                      	db	0F9h
 36490 000036C0 0300                    	dw	3
 36491 000036C2 0900                    	dw	9
 36492 000036C4 0200                    	dw	2
 36493 000036C6 00000000                	dd	0
 36494 000036CA 00000000                        dd      0
 36495                                        
 36496 000036CE 0002                    bpb35h:	dw	512
 36497 000036D0 01                      	db	1
 36498 000036D1 0100                    	dw	1
 36499 000036D3 02                      	db	2
 36500 000036D4 E000                    	dw	224
 36501 000036D6 400B                    	dw	2*18*80 ; 2880
 36502 000036D8 F0                      	db	0F0h
 36503 000036D9 0900                    	dw	9
 36504 000036DB 1200                    	dw	18
 36505 000036DD 0200                    	dw	2
 36506 000036DF 00000000                	dd	0
 36507 000036E3 00000000                        dd      0
 36508                                  
 36509                                  ; m037 - BEGIN
 36510                                  
 36511 000036E7 0002                    bpb288:	dw	512
 36512 000036E9 02                      	db	2
 36513 000036EA 0100                    	dw	1
 36514 000036EC 02                      	db	2
 36515 000036ED F000                    	dw	240
 36516 000036EF 8016                    	dw	2*36*80 ; 5760
 36517 000036F1 F0                      	db	0F0h
 36518 000036F2 0900                    	dw	9
 36519 000036F4 2400                    	dw	36
 36520 000036F6 0200                    	dw	2
 36521 000036F8 00000000                	dd	0
 36522 000036FC 00000000                        dd      0
 36523                                  
 36524                                  ; m037 - END
 36525                                  
 36526                                  ; 12/05/2019
 36527                                  
 36528                                  align 2
 36529                                  
 36530                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36531                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36532                                  
 36533 00003700 [8336]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36534 00003702 [9C36]                  	    dw	    bpb96t		; 96tpi drives
 36535 00003704 [B536]                  	    dw	    bpb35		; 3.5" drives
 36536                                  ; the following are not supported, so default to 3.5" media layout
 36537 00003706 [B536]                  	    dw	    bpb35		; not used - 8" drives
 36538 00003708 [B536]                  	    dw	    bpb35		; not used - 8" drives
 36539 0000370A [B536]                  	    dw	    bpb35		; not used - hard files
 36540 0000370C [B536]                  	    dw	    bpb35		; not used - tape drives
 36541 0000370E [CE36]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36542 00003710 [B536]                  	    dw	    bpb35		; ERIMO				m037
 36543 00003712 [E736]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36544                                  
 36545                                  switchlist: 
 36546 00003714 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36547                                  
 36548                                  ;----------------------------------------------------------------------------
 36549                                  ; Messages
 36550                                  ;----------------------------------------------------------------------------
 36551                                  
 36552                                  ; 19/04/2019 - Retro DOS v4.0
 36553                                  
 36554                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36555                                  
 36556 0000371D 00                      	db 	0
 36557                                  
 36558                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36559                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36560                                  
 36561                                  badopm:
 36562 0000371E 0D0A                    	db	0Dh,0Ah 
 36563 00003720 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36563 00003729 7A656420636F6D6D61-
 36563 00003732 6E6420696E20434F4E-
 36563 0000373B 4649472E535953     
 36564                                  crlfm:
 36565 00003742 0D0A24                  	db	0Dh,0Ah,'$'
 36566                                  badparm:
 36567 00003745 0D0A                    	db	0Dh,0Ah
 36568 00003747 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36568 00003750 6E64206F7220706172-
 36568 00003759 616D6574657273202D-
 36568 00003762 2024               
 36569                                  badsiz_pre:
 36570 00003764 0D0A                    	db	0Dh,0Ah
 36571 00003766 536563746F72207369-     	db	'Sector size too large in file $'
 36571 0000376F 7A6520746F6F206C61-
 36571 00003778 72676520696E206669-
 36571 00003781 6C652024           
 36572                                  badld_pre:
 36573 00003785 0D0A                    	db	0Dh,0Ah
 36574 00003787 426164206F72206D69-     	db	'Bad or missing $'
 36574 00003790 7373696E672024     
 36575                                  badcom:
 36576 00003797 436F6D6D616E642049-     	db	'Command Interpreter',0
 36576 000037A0 6E7465727072657465-
 36576 000037A9 7200               
 36577                                  badcountry:
 36578 000037AB 0D0A                    	db	0Dh,0Ah
 36579 000037AD 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36579 000037B6 6F756E74727920636F-
 36579 000037BF 6465206F7220636F64-
 36579 000037C8 6520706167650D0A24 
 36580                                  badcountrycom:
 36581 000037D1 0D0A                    	db	0Dh,0Ah
 36582 000037D3 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36582 000037DC 434F554E5452592063-
 36582 000037E5 6F6D6D616E640D0A24 
 36583                                  insufmemory:
 36584 000037EE 0D0A                    	db	0Dh,0Ah
 36585 000037F0 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36585 000037F9 656E74206D656D6F72-
 36585 00003802 7920666F7220434F55-
 36585 0000380B 4E5452592E53595320-
 36585 00003814 66696C650D0A24     
 36586                                  badmem:
 36587 0000381B 0D0A                    	db	0Dh,0Ah
 36588 0000381D 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36588 00003826 74696F6E20746F6F20-
 36588 0000382F 6C6172676520666F72-
 36588 00003838 206D656D6F72790D0A-
 36588 00003841 24                 
 36589                                  badblock:
 36590 00003842 0D0A                    	db	0Dh,0Ah
 36591 00003844 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36591 0000384D 626C6F636B20646576-
 36591 00003856 696365730D0A24     
 36592                                  badstack:
 36593 0000385D 0D0A                    	db	0Dh,0Ah
 36594 0000385F 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36594 00003868 5441434B2070617261-
 36594 00003871 6D65746572730D0A24 
 36595                                  	; 18/12/2022
 36596                                  ;badorder:
 36597                                  	;db	0Dh,0Ah
 36598                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36599                                  errorcmd:
 36600 0000387A 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36600 00003883 434F4E4649472E5359-
 36600 0000388C 53206C696E652024   
 36601                                  
 36602                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36603                                  %if 0
 36604                                  
 36605                                  OnOff:	db	'ON'
 36606                                  OnOff2:	db	'OFF'
 36607                                  
 36608                                  StartMsg:
 36609                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36610                                  	db	0Ah,0
 36611                                  _$PauseMsg:
 36612                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36613                                  _$CleanMsg:
 36614                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36615                                  _$InterMsg:
 36616                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36617                                  _$MenuHeader:
 36618                                  	db	0Dh,0Ah
 36619                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36620                                  	db	'  =======================',0Dh,0Ah,'$'
 36621                                  _$MenuPrmpt:
 36622                                  	db	'  Enter a choice: $'
 36623                                  _$StatusLine:
 36624                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36625                                  	db	'and AUTOEXEC.BAT [ ]$'
 36626                                  _$InterPrmpt:
 36627                                  	db	' [Y,N]?$'
 36628                                  _$YES:	db	'YES$'
 36629                                  _$NO:	db	'NO $'
 36630                                  _$TimeOut:
 36631                                  	db	'Time remaining: $'
 36632                                  badcomprmpt:
 36633                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36634                                  	db	0Dh,0Ah,'$'
 36635                                  _$AutoPrmpt:
 36636                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36637                                  
 36638                                  %endif
 36639                                  
 36640                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36641                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36642                                  
 36643                                  TooManyDrivesMsg:
 36644 00003894 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36644 0000389D 4C6F676963616C2064-
 36644 000038A6 726976657320706173-
 36644 000038AF 74205A3A2065786973-
 36644 000038B8 7420616E642077696C-
 36644 000038C1 6C2062652069676E6F-
 36644 000038CA 7265640D0A24       
 36645                                  
 36646                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36647                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36648                                  	;db	7 dup(0)
 36649                                  
 36650                                  	;times	7 db 0
 36651                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36652                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36653                                  	; 09/12/2022
 36654                                  	;times	4 db 0
 36655                                  
 36656                                  ;----------------------------------------------------------------------------
 36657                                  		; 09/12/2022
 36658                                  		;db 0
 36659                                  
 36660                                  number3div	equ ($-SYSINIT$)
 36661                                  number3mod	equ (number3div % 16)
 36662                                  
 36663                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 36664                                  		times (16-number3mod) db 0
 36665                                  %endif
 36666                                  
 36667                                  ;---------------------------------------------------------------------------- 
 36668                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36669                                  ;---------------------------------------------------------------------------- 
 36670                                  
 36671                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36672                                  
 36673                                  ;----------------------------------------------------------------------------
 36674                                  ; 20/04/2019 - Retro DOS v4.0
 36675                                  
 36676                                  ; 09/12/2022
 36677                                  ;
 36678                                  ;bss_start:
 36679                                  ;
 36680                                  ;ABSOLUTE bss_start
 36681                                  ;
 36682                                  ;alignb 16
 36683                                  
 36684                                  SI_end:  ; SI_end equ $
 36685                                  
 36686                                  ;----------------------------------------------------------------------------
 36687                                  
 36688                                  ;sysinitseg	ends
 36689                                  
 36690                                  ; ***************************************************************************
 36691                                  
 36692                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36693                                  
 36694                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36695                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36696                                  
 36697                                  ;----------------------------------------------------------------------------
 36698                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36699                                  ;----------------------------------------------------------------------------
 36700                                  
 36701                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36702                                  ;----------------------------------------------------------------------------
 36703                                  ;----------------------------------------------------------------------------
 36704                                  
 36705                                  ; ----------------------------------------------------------------------------
 36706                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36707                                  ; ----------------------------------------------------------------------------
 36708                                  ; 18/03/2019 - Retro DOS v4.0 
 36709                                  ; 11/06/2018 - Retro DOS v3.0 
 36710                                  
 36711                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36712                                  		;; 28/06/2019 ('msdos6.s') 
 36713                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36714                                  		
 36715                                  		; 09/07/2024 (Original MSDOS 5 Kernel : MSDOS5.BIN for Test) 
 36716                                  		; 11/04/2024
 36717                                  		; 22/01/2024 (BugFix)
 36718                                  		; 21/01/2024  	
 36719                                  		; 16/01/2024 (BugFix)
 36720                                  		; 15/01/2024
 36721                                  		; 27/09/2023 (BugFix)
 36722                                  		; 19/09/2023
 36723                                  		; 28/12/2022 (BugFix)
 36724                                  		; 22/12/2022
 36725                                  		; 21/12/2022 ('msdos5.s')
 36726 000038D0 <bin 9212h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36727                                  	
 36728                                  ; 28/09/2023	
 36729                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36730                                  
 36731                                  align 2
 36732                                  
 36733                                  ; 21/12/2022
 36734                                  ;;END_OF_KERNEL:
 36735                                  ;END_OF_KERNEL equ $
 36736                                  
 36737                                  ; 28/09/2023
 36738                                  S3SIZE equ $-$$
 36739                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 36740                                  
 36741                                  ;=============================================================================
 36742                                  ;	END
 36743                                  ;=============================================================================
 36744                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36745                                  ; ------------------------------
 36746                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
