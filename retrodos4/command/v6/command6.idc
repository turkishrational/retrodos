//
// ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
// บ     This file is generated by The Interactive Disassembler (IDA)        บ
// บ     Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>           บ
// บ                      Licensed to: Freeware version                      บ
// ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("metapc");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	;
	SegCreate(0X100,0X26E0,0X0,0,1,2);
	SegRename(0X100,"RESGROUP");
	SegClass (0X100,"CODE");
	SetSegmentType(0X100,2);
	SegCreate(0X26E0,0XD675,0X26E,0,1,2);
	SegRename(0X26E0,"TRANGROUP");
	SegClass (0X26E0,"CODE");
	SetSegmentType(0X26E0,2);
	LowVoids(0x0);
	HighVoids(0xD675);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X100,	0,	"; File Name   : C:\\Users\\Erdo๐an\\Desktop\\COMMAND.COM");
	ExtLinA		(0X100,	1,	"; Format      : MS-DOS COM-file");
	ExtLinA		(0X100,	2,	"; Base Address: 0h Range: 100h-D675h Loaded length: D575h");
	MakeCode	(0X100);
	MakeName	(0X100,	"StartCode");
	MakeByte	(0X103);
	MakeName	(0X103,	"VersionByte");
	MakeDword	(x=0X104);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X104,	"Int2f_Entry");
	MakeDword	(x=0X108);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X108,	"Int2e_Entry");
	MakeDword	(x=0X10C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X10C,	"Ctrlc_Entry");
	MakeDword	(x=0X110);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X110,	"CritErr_Entry");
	MakeDword	(0X114);
	MakeName	(0X114,	"Exec_Entry");
	MakeDword	(0X118);
	MakeName	(0X118,	"RemCheck_Entry");
	MakeDword	(0X11C);
	MakeName	(0X11C,	"TrnLodCom1_Entry");
	MakeDword	(0X120);
	MakeName	(0X120,	"LodCom_Entry");
	MakeDword	(0X124);
	MakeName	(0X124,	"MsgRetrv_Entry");
	MakeDword	(0X128);
	MakeName	(0X128,	"HeadFix_Entry");
	MakeDword	(0X12C);
	MakeName	(0X12C,	"UMBOff_Entry");
	MakeDword	(0X130);
	MakeName	(0X130,	"XMMCallAddr");
	MakeByte	(0X134);
	MakeName	(0X134,	"ComInHMA");
	MakeCode	(0X135);
	MakeName	(0X135,	"Int2f_Trap");
	MakeCode	(0X13F);
	MakeName	(0X13F,	"Int2e_Trap");
	MakeCode	(0X14A);
	MakeName	(0X14A,	"Ctrlc_Trap");
	MakeCode	(0X155);
	MakeName	(0X155,	"CritErr_Trap");
	MakeCode	(0X160);
	MakeName	(0X160,	"Exec_Trap");
	MakeCode	(0X16A);
	MakeName	(0X16A,	"RemCheck_Trap");
	MakeCode	(0X174);
	MakeName	(0X174,	"TrnLodCom1_Trap");
	MakeCode	(0X17E);
	MakeName	(0X17E,	"LodCom_Trap");
	MakeCode	(0X188);
	MakeName	(0X188,	"MsgRetrv_Trap");
	MakeCode	(0X192);
	MakeName	(0X192,	"HeadFix_Trap");
	MakeCode	(0X19C);
	MakeName	(0X19C,	"CheckA20");
	MakeCode	(0X1AF);
	MakeName	(0X1AF,	"Carousel_i2f_Hook");
	MakeCode	(0X1B4);
	MakeName	(0X1B4,	"QueryA20");
	MakeCode	(0X1C5);
	MakeCode	(0X1C7);
	MakeName	(0X1C7,	"EnableA20");
	MakeCode	(0X1D7);
	MakeComm	(0X1D9,	"Marks HIDDEN elements as FREE");
	MakeCode	(0X1D9);
	MakeName	(0X1D9,	"UnHideUMBs");
	MakeCode	(x=0X1DB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1E6,	"Make sure UMBs are linked in.");
	MakeCode	(0X1E6);
	MakeCode	(x=0X1ED);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1F4,	"Unlink UMBs");
	MakeComm	(0X1FA,	"unlinks UMBs if fm_umb is set to 0");
	MakeCode	(0X1FA);
	MakeName	(0X1FA,	"he_unlink");
	MakeCode	(x=0X1FD);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X202);
	OpHex		(x,	1);
	MakeComm	(0X205,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X205);
	OpHex		(x,	0);
	MakeCode	(x=0X20A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20F);
	OpHex		(x,	1);
	MakeComm	(0X212,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X212);
	OpHex		(x,	0);
	MakeComm	(0X215,	"frees all HIDDEN memory elements in upper-memory");
	MakeCode	(0X215);
	MakeName	(0X215,	"FreeUMBs");
	MakeComm	(0X217,	"Returns with carry if err, else ES == MCB");
	MakeComm	(0X21E,	"Returns with ZF set if owner is 0");
	MakeComm	(0X223,	"Marks as free the MCB at ES:0");
	MakeComm	(0X226,	"[es:arena_signature]");
	MakeComm	(0X22A,	"arena_signature_end");
	MakeComm	(0X22C,	"That means this was the last MCB.");
	MakeComm	(0X230,	"[es:arena_size]");
	MakeCode	(0X23A);
	MakeCode	(0X23D);
	MakeName	(0X23D,	"isHideMCB");
	MakeComm	(0X23E,	"cmp word [es:arena_owner],SystemPSPOwner");
	MakeComm	(0X246,	"[es:arena_name]");
	MakeComm	(0X24A,	"HIDDEN");
	MakeCode	(x=0X24A);
	OpChr		(x,	1);
	MakeComm	(0X24F,	"[es:arena_name+2]");
	MakeCode	(x=0X24F);
	OpHex		(x,	1);
	MakeCode	(x=0X253);
	OpChr		(x,	1);
	MakeComm	(0X258,	"[es:arena_name+4]");
	MakeCode	(x=0X258);
	OpHex		(x,	1);
	MakeCode	(x=0X25C);
	OpChr		(x,	1);
	MakeComm	(0X261,	"[es:arena_name+6]");
	MakeCode	(x=0X261);
	OpHex		(x,	1);
	MakeCode	(x=0X265);
	OpChr		(x,	1);
	MakeComm	(0X26A,	"mov word [es:arena_owner],0");
	MakeCode	(0X26A);
	MakeName	(0X26A,	"freeMCB");
	MakeComm	(0X274,	"[es:arena_name+0],ax");
	MakeComm	(0X280,	"[es:arena_name+6],ax");
	MakeComm	(0X285,	"returns in AX the address of the first UMB block\n(0x9FFF)");
	MakeCode	(0X285);
	MakeName	(0X285,	"HeadUmb");
	MakeComm	(0X288,	"DOS_GET_LISTS");
	MakeCode	(x=0X288);
	OpHex		(x,	1);
	MakeComm	(0X28A,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists");
	MakeCode	(x=0X28A);
	OpHex		(x,	0);
	MakeComm	(0X28C,	"[es:UMB_HeadIdx]");
	MakeCode	(0X298);
	MakeCode	(x=0X29D);
	OpHex		(x,	1);
	MakeName	(0X29D,	"linkumb");
	MakeComm	(0X2A0,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state");
	MakeCode	(x=0X2A0);
	OpHex		(x,	0);
	MakeComm	(0X2AC,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X2AC);
	OpHex		(x,	0);
	MakeComm	(0X2AF,	"DOS - ");
	MakeCode	(x=0X2AF);
	OpHex		(x,	0);
	MakeName	(0X2AF,	"Issue_Exec_Call");
	MakeComm	(0X2B4,	"DATARES:RStack ; stack is set up");
	MakeComm	(0X2B9,	"ds = DATARES");
	MakeComm	(0X2BB,	"This call frees HIDDEN umb's,\nrestores the memory-allocation\nstrategy and link state, as app.");
	MakeStr		(0X2C2,	0X2C5);
	MakeName	(0X2C2,	"cox_location");
	MakeWord	(0X2C5);
	MakeName	(0X2C5,	"cox_Y_option");
	MakeByte	(0X2C7);
	MakeName	(0X2C7,	"BlkDevErrSubst");
	MakeWord	(0X2C8);
	MakeName	(0X2C8,	"BlkDevErrRw");
	MakeByte	(0X2CA);
	MakeWord	(x=0X2CB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X2CD);
	OpChr		(x,	0);
	MakeName	(0X2CD,	"DrvLet");
	MakeByte	(0X2CE);
	MakeName	(0X2CE,	"CharDevErrSubst");
	MakeWord	(0X2CF);
	MakeName	(0X2CF,	"CharDevErrRw");
	MakeByte	(0X2D1);
	MakeWord	(x=0X2D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2D4);
	MakeArray	(0X2D4,	0X8);
	MakeName	(0X2D4,	"DevName");
	MakeByte	(0X2DC);
	MakeByte	(0X2DD);
	MakeName	(0X2DD,	"NeedVolSubst");
	MakeWord	(x=0X2DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2E0);
	MakeWord	(x=0X2E1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2E3);
	MakeWord	(x=0X2E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X2E6);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0X2E6,	"VolName");
	MakeByte	(0X2F1);
	MakeDword	(0X2F2);
	MakeName	(0X2F2,	"VolSer");
	MakeByte	(0X2F6);
	MakeName	(0X2F6,	"CDevAt");
	MakeByte	(0X2F7);
	MakeName	(0X2F7,	"BadFatSubst");
	MakeWord	(x=0X2F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2FA);
	MakeName	(0X2FA,	"PutBackSubst");
	MakeWord	(0X2FB);
	MakeName	(0X2FB,	"PutBackComSpec");
	MakeByte	(0X2FD);
	MakeWord	(x=0X2FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X300);
	MakeName	(0X300,	"PutBackDrv");
	MakeByte	(0X301);
	MakeName	(0X301,	"ExecErrSubst");
	MakeWord	(x=0X302);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(0X304);
	MakeName	(0X304,	"NeedVol");
	MakeByte	(0X308);
	MakeName	(0X308,	"ErrType");
	MakeDword	(0X309);
	MakeName	(0X309,	"Int_2e_Ret");
	MakeWord	(0X30D);
	MakeName	(0X30D,	"Save_Pdb");
	MakeWord	(0X30F);
	MakeName	(0X30F,	"Parent");
	MakeWord	(0X311);
	MakeArray	(0X311,	0X2);
	MakeName	(0X311,	"OldTerm");
	MakeWord	(0X315);
	MakeName	(0X315,	"ErrCd_24");
	MakeWord	(0X317);
	MakeName	(0X317,	"Handle01");
	MakeByte	(0X319);
	MakeName	(0X319,	"Loading");
	MakeWord	(0X31A);
	MakeName	(0X31A,	"Batch");
	MakeByte	(x=0X31C);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0X31C,	"ComSpec");
	MakeWord	(0X35C);
	MakeName	(0X35C,	"ComSpec_End");
	MakeWord	(x=0X35E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X35E,	"Trans");
	MakeWord	(0X360);
	MakeName	(0X360,	"TrnSeg");
	MakeByte	(0X362);
	MakeName	(0X362,	"TrnMvFlg");
	MakeByte	(0X363);
	MakeName	(0X363,	"In_Batch");
	MakeByte	(0X364);
	MakeName	(0X364,	"Batch_Abort");
	MakeByte	(0X365);
	MakeName	(0X365,	"ComDrv");
	MakeWord	(0X366);
	MakeName	(0X366,	"MemSiz");
	MakeWord	(0X368);
	MakeName	(0X368,	"Sum");
	MakeByte	(0X36A);
	MakeName	(0X36A,	"ExtCom");
	MakeWord	(0X36B);
	MakeName	(0X36B,	"RetCode");
	MakeByte	(0X36D);
	MakeName	(0X36D,	"Crit_Err_Info");
	MakeByte	(0X36E);
	MakeName	(0X36E,	"EchoFlag");
	MakeByte	(0X36F);
	MakeName	(0X36F,	"Suppress");
	MakeWord	(0X370);
	MakeName	(0X370,	"Io_Save");
	MakeByte	(0X372);
	MakeName	(0X372,	"RestDir");
	MakeByte	(0X373);
	MakeName	(0X373,	"PermCom");
	MakeWord	(0X374);
	MakeName	(0X374,	"SemiPermCom");
	MakeWord	(0X376);
	MakeName	(0X376,	"SingleCom");
	MakeWord	(0X378);
	MakeName	(0X378,	"VerVal");
	MakeByte	(0X37A);
	MakeName	(0X37A,	"fFail");
	MakeByte	(0X37B);
	MakeName	(0X37B,	"IfFlag");
	MakeByte	(0X37C);
	MakeName	(0X37C,	"ForFlag");
	MakeWord	(0X37D);
	MakeName	(0X37D,	"ForPtr");
	MakeWord	(0X37F);
	MakeName	(0X37F,	"Nest");
	MakeByte	(0X381);
	MakeName	(0X381,	"Call_Flag");
	MakeByte	(0X382);
	MakeName	(0X382,	"Call_Batch_Flag");
	MakeWord	(0X383);
	MakeName	(0X383,	"Next_Batch");
	MakeByte	(0X385);
	MakeName	(0X385,	"NullFlag");
	MakeByte	(0X386);
	MakeArray	(0X386,	0X5);
	MakeName	(0X386,	"FUCase_Addr");
	MakeWord	(0X38B);
	MakeName	(0X38B,	"Crit_Msg_Off");
	MakeWord	(0X38D);
	MakeName	(0X38D,	"Crit_Msg_Seg");
	MakeDword	(0X38F);
	MakeName	(0X38F,	"Dbcs_Vector_Addr");
	MakeWord	(0X393);
	MakeName	(0X393,	"Append_State");
	MakeByte	(0X395);
	MakeName	(0X395,	"Append_Flag");
	MakeByte	(0X396);
	MakeName	(0X396,	"Re_Out_App");
	MakeByte	(x=0X397);
	MakeArray	(x,	0X50);
	OpDecimal	(x,	0);
	MakeName	(0X397,	"Re_OutStr");
	MakeByte	(0X3E7);
	MakeName	(0X3E7,	"InitFlag");
	MakeByte	(0X3E8);
	MakeName	(0X3E8,	"PipeFlag");
	MakeByte	(0X3E9);
	MakeName	(0X3E9,	"PipeFiles");
	MakeCode	(0X3EA);
	MakeName	(0X3EA,	"EndInit");
	MakeCode	(x=0X408);
	OpHex		(x,	1);
	MakeComm	(0X40A,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X40A);
	OpHex		(x,	0);
	MakeComm	(0X40C,	"permanent command.com?");
	MakeComm	(0X411,	"no, do not free batchseg");
	MakeComm	(0X41A,	"mov bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 \n(33+16+15)/16");
	MakeCode	(x=0X41D);
	OpHex		(x,	1);
	MakeComm	(0X41F,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X41F);
	OpHex		(x,	0);
	MakeComm	(0X421,	"no memory, use old batchseg");
	MakeComm	(0X423,	"es = New batch segment");
	MakeComm	(0X42A,	"ds = Old Batch Segment");
	MakeComm	(0X42E,	"BATCHSEGMENT.SIZE+16");
	MakeCode	(x=0X42E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X431);
	OpDecimal	(x,	1);
	MakeCode	(x=0X43A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43E);
	OpHex		(x,	1);
	MakeComm	(0X440,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X440);
	OpHex		(x,	0);
	MakeCode	(x=0X442);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X446,	"adjust_env");
	MakeCode	(x=0X449);
	OpHex		(x,	1);
	MakeComm	(0X44B,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X44B);
	OpHex		(x,	0);
	MakeCode	(x=0X44F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X452,	"[PDB.ENVIRON]");
	MakeComm	(0X461,	"ds = RESGROUP");
	MakeCode	(x=0X462);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X46B);
	OpHex		(x,	1);
	MakeComm	(0X46D,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X46D);
	OpHex		(x,	0);
	MakeCode	(x=0X46F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X46F,	"no_free");
	MakeComm	(0X475,	"mov si,TRANSTART (26E0h)");
	MakeComm	(0X47B,	"TRANSIENT portion size\n(TRANSPACEEND)");
	MakeCode	(x=0X481);
	OpHex		(x,	1);
	MakeComm	(0X483,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X483);
	OpHex		(x,	0);
	MakeCode	(x=0X489);
	OpHex		(x,	1);
	MakeComm	(0X48B,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X48B);
	OpHex		(x,	0);
	MakeCode	(x=0X494);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4A6);
	OpHex		(x,	1);
	MakeComm	(0X4A8,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X4A8);
	OpHex		(x,	0);
	MakeCode	(x=0X4AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X4B4);
	MakeName	(0X4B4,	"nomem_err");
	MakeByte	(x=0X4B7);
	MakeArray	(x,	0X54);
	OpDecimal	(x,	0);
	MakeName	(0X4B7,	"EndCodeInit");
	MakeWord	(0X50B);
	MakeName	(0X50B,	"InPipePtr");
	MakeWord	(0X50D);
	MakeName	(0X50D,	"OutPipePtr");
	MakeWord	(0X50F);
	MakeName	(0X50F,	"EnvirSeg");
	MakeWord	(0X511);
	MakeArray	(0X511,	0X2);
	MakeName	(0X511,	"Com_Ptr");
	MakeWord	(0X515);
	MakeArray	(0X515,	0X2);
	MakeName	(0X515,	"Com_Fcb1");
	MakeWord	(0X519);
	MakeArray	(0X519,	0X2);
	MakeName	(0X519,	"Com_Fcb2");
	MakeWord	(x=0X51D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X51D,	"TranVars");
	MakeWord	(0X51F);
	MakeName	(0X51F,	"MySeg");
	MakeWord	(0X521);
	MakeName	(0X521,	"LTpa");
	MakeByte	(x=0X523);
	OpChr		(x,	0);
	MakeName	(0X523,	"RSwitChar");
	MakeByte	(x=0X524);
	OpChr		(x,	0);
	MakeName	(0X524,	"RDirChar");
	MakeWord	(x=0X525);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X527);
	MakeName	(0X527,	"MySeg1");
	MakeWord	(x=0X529);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X52B);
	MakeName	(0X52B,	"MySeg2");
	MakeWord	(0X52D);
	MakeName	(0X52D,	"ResTest");
	MakeWord	(0X52F);
	MakeName	(0X52F,	"Res_Tpa");
	MakeWord	(0X531);
	MakeName	(0X531,	"Y_Flag");
	MakeWord	(0X533);
	MakeName	(0X533,	"OldErrNo");
	MakeByte	(x=0X535);
	MakeArray	(x,	0X50);
	OpDecimal	(x,	0);
	MakeName	(0X535,	"SafePathBuffer");
	MakeWord	(0X585);
	MakeArray	(0X585,	0X2);
	MakeName	(0X585,	"Int2fHandler");
	MakeWord	(0X589);
	MakeName	(0X589,	"ResMsgEnd");
	MakeWord	(0X58B);
	MakeName	(0X58B,	"ResSize");
	MakeByte	(x=0X58D);
	MakeArray	(x,	0X7D);
	OpDecimal	(x,	0);
	MakeWord	(0X60A);
	MakeName	(0X60A,	"RStack");
	MakeByte	(0X60C);
	MakeName	(0X60C,	"fInHigh");
	MakeByte	(0X60D);
	MakeName	(0X60D,	"fUmbTiny");
	MakeWord	(0X60E);
	MakeName	(0X60E,	"SegLoad");
	MakeByte	(0X610);
	MakeName	(0X610,	"UmbLoad");
	MakeByte	(x=0X611);
	MakeArray	(x,	0X10);
	OpDecimal	(x,	0);
	MakeName	(0X611,	"UmbUsed");
	MakeWord	(x=0X621);
	MakeArray	(x,	0X10);
	OpDecimal	(x,	0);
	MakeName	(0X621,	"UmbSize");
	MakeByte	(0X641);
	MakeName	(0X641,	"fm_umb");
	MakeByte	(0X642);
	MakeName	(0X642,	"fm_strat");
	MakeByte	(0X643);
	MakeName	(0X643,	"fm_argc");
	MakeByte	(x=0X644);
	OpChr		(x,	0);
	MakeName	(0X644,	"ABORT_CHAR");
	MakeByte	(x=0X645);
	OpChr		(x,	0);
	MakeName	(0X645,	"RETRY_CHAR");
	MakeByte	(x=0X646);
	OpChr		(x,	0);
	MakeName	(0X646,	"IGNORE_CHAR");
	MakeByte	(x=0X647);
	OpChr		(x,	0);
	MakeName	(0X647,	"FAIL_CHAR");
	MakeByte	(x=0X648);
	OpChr		(x,	0);
	MakeName	(0X648,	"YES_CHAR");
	MakeByte	(x=0X649);
	OpChr		(x,	0);
	MakeName	(0X649,	"NO_CHAR");
	MakeByte	(0X64A);
	MakeName	(0X64A,	"REQ_ABORT");
	MakeStr		(0X64B,	0X650);
	MakeByte	(0X650);
	MakeName	(0X650,	"REQ_RETRY");
	MakeStr		(0X651,	0X658);
	MakeByte	(0X658);
	MakeName	(0X658,	"REQ_IGNORE");
	MakeStr		(0X659,	0X661);
	MakeByte	(0X661);
	MakeName	(0X661,	"REQ_FAIL");
	MakeStr		(0X662,	0X668);
	MakeByte	(0X668);
	MakeName	(0X668,	"REQ_END");
	MakeByte	(x=0X669);
	OpChr		(x,	0);
	MakeByte	(0X66A);
	MakeName	(0X66A,	"MREAD");
	MakeStr		(0X66B,	0X673);
	MakeByte	(0X673);
	MakeName	(0X673,	"MWRITE");
	MakeStr		(0X674,	0X67C);
	MakeByte	(x=0X67C);
	OpDecimal	(x,	0);
	MakeName	(0X67C,	"MDRIVE");
	MakeStr		(0X67D,	0X68B);
	MakeByte	(x=0X68B);
	OpDecimal	(x,	0);
	MakeName	(0X68B,	"MDEVICE");
	MakeStr		(0X68C,	0X69B);
	MakeByte	(x=0X69B);
	OpDecimal	(x,	0);
	MakeName	(0X69B,	"MVOLSERIAL");
	MakeStr		(0X69C,	0X6C2);
	MakeByte	(x=0X6C2);
	OpDecimal	(x,	0);
	MakeName	(0X6C2,	"BADFATMSG");
	MakeStr		(0X6C3,	0X6E8);
	MakeByte	(x=0X6E8);
	OpDecimal	(x,	0);
	MakeName	(0X6E8,	"COMBAD");
	MakeStr		(0X6E9,	0X6FE);
	MakeByte	(x=0X6FE);
	OpDecimal	(x,	0);
	MakeName	(0X6FE,	"PUTBACKMSG");
	MakeStr		(0X6FF,	0X720);
	MakeByte	(x=0X720);
	OpDecimal	(x,	0);
	MakeName	(0X720,	"PROMPT");
	MakeStr		(0X721,	0X742);
	MakeByte	(x=0X742);
	OpDecimal	(x,	0);
	MakeName	(0X742,	"ENDBATMES");
	MakeStr		(0X743,	0X75F);
	MakeByte	(x=0X75F);
	OpDecimal	(x,	0);
	MakeName	(0X75F,	"EXECEMES");
	MakeStr		(0X760,	0X773);
	MakeByte	(x=0X773);
	OpDecimal	(x,	0);
	MakeName	(0X773,	"EXEBAD");
	MakeStr		(0X774,	0X787);
	MakeByte	(x=0X787);
	OpDecimal	(x,	0);
	MakeName	(0X787,	"TOOBIG");
	MakeStr		(0X788,	0X7AA);
	MakeByte	(x=0X7AA);
	OpDecimal	(x,	0);
	MakeName	(0X7AA,	"NOHANDMES");
	MakeStr		(0X7AB,	0X7C1);
	MakeByte	(x=0X7C1);
	OpDecimal	(x,	0);
	MakeName	(0X7C1,	"RBADNAM");
	MakeStr		(0X7C2,	0X7DC);
	MakeByte	(0X7DC);
	MakeName	(0X7DC,	"ACCDEN");
	MakeStr		(0X7DD,	0X7EB);
	MakeByte	(x=0X7EB);
	OpDecimal	(x,	0);
	MakeName	(0X7EB,	"BMEMMES");
	MakeStr		(0X7EC,	0X805);
	MakeByte	(x=0X805);
	OpDecimal	(x,	0);
	MakeName	(0X805,	"HALTMES");
	MakeStr		(0X806,	0X82C);
	MakeByte	(x=0X82C);
	OpDecimal	(x,	0);
	MakeName	(0X82C,	"FRETMES");
	MakeStr		(0X82D,	0X84E);
	MakeByte	(x=0X84E);
	OpDecimal	(x,	0);
	MakeName	(0X84E,	"PATRICIDE");
	MakeStr		(0X84F,	0X87D);
	MakeByte	(0X87D);
	MakeName	(0X87D,	"NEWLINE");
	MakeByte	(0X87E);
	MakeArray	(0X87E,	0X2);
	MakeComm	(0X880,	"extended error messages");
	MakeDword	(0X880);
	MakeName	(0X880,	"MsgPtrLists");
	MakeComm	(0X884,	"parse   error messages");
	MakeWord	(x=0X884);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X886);
	MakeComm	(0X888,	"critical error messages");
	MakeWord	(x=0X888);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X88A);
	MakeComm	(0X88C,	"File system error messages\nare not supported.");
	MakeWord	(0X88C);
	MakeWord	(0X88E);
	MakeComm	(0X890,	"disk retriever routine");
	MakeWord	(x=0X890);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X892,	"segment of retriever routine");
	MakeWord	(0X892);
	MakeName	(0X892,	"MySeg3");
	MakeByte	(0X894);
	MakeName	(0X894,	"CRMSG0");
	MakeStr		(0X895,	0X8A8);
	MakeByte	(0X8A8);
	MakeName	(0X8A8,	"CRMSG1");
	MakeStr		(0X8A9,	0X8B5);
	MakeByte	(0X8B5);
	MakeName	(0X8B5,	"CRMSG2");
	MakeStr		(0X8B6,	0X8BF);
	MakeByte	(0X8BF);
	MakeName	(0X8BF,	"CRMSG3");
	MakeStr		(0X8C0,	0X8D6);
	MakeByte	(0X8D6);
	MakeName	(0X8D6,	"CRMSG4");
	MakeStr		(0X8D7,	0X8E1);
	MakeByte	(0X8E1);
	MakeName	(0X8E1,	"CRMSG5");
	MakeStr		(0X8E2,	0X903);
	MakeByte	(0X903);
	MakeName	(0X903,	"CRMSG6");
	MakeStr		(0X904,	0X90E);
	MakeByte	(0X90E);
	MakeName	(0X90E,	"CRMSG7");
	MakeStr		(0X90F,	0X921);
	MakeByte	(0X921);
	MakeName	(0X921,	"CRMSG8");
	MakeStr		(0X922,	0X932);
	MakeByte	(0X932);
	MakeName	(0X932,	"CRMSG9");
	MakeStr		(0X933,	0X94D);
	MakeByte	(0X94D);
	MakeName	(0X94D,	"CRMSG10");
	MakeStr		(0X94E,	0X95F);
	MakeByte	(0X95F);
	MakeName	(0X95F,	"CRMSG11");
	MakeStr		(0X960,	0X970);
	MakeByte	(0X970);
	MakeName	(0X970,	"CRMSG12");
	MakeStr		(0X971,	0X980);
	MakeByte	(0X980);
	MakeName	(0X980,	"CRMSG13");
	MakeStr		(0X981,	0X992);
	MakeByte	(0X992);
	MakeName	(0X992,	"CRMSG14");
	MakeStr		(0X993,	0X9A1);
	MakeByte	(0X9A1);
	MakeName	(0X9A1,	"CRMSG15");
	MakeStr		(0X9A2,	0X9B5);
	MakeByte	(0X9B5);
	MakeName	(0X9B5,	"CRMSG16");
	MakeStr		(0X9B6,	0X9C5);
	MakeByte	(0X9C5);
	MakeName	(0X9C5,	"CRMSG17");
	MakeStr		(0X9C6,	0X9DF);
	MakeByte	(0X9DF);
	MakeName	(0X9DF,	"CRMSG18");
	MakeStr		(0X9E0,	0X9F2);
	MakeByte	(0X9F2);
	MakeName	(0X9F2,	"CRMSG19");
	MakeStr		(0X9F3,	0X9FF);
	MakeByte	(0X9FF);
	MakeName	(0X9FF,	"CRMSG20");
	MakeStr		(0XA00,	0XA17);
	MakeWord	(x=0XA17);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XA17,	"CRITMSGPTRS");
	MakeWord	(x=0XA19);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA1B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA1D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA1F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA21);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA23);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA25);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA27);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA29);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA2B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA2D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA2F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA31);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA33);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA35);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA37);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA39);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA3B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA3D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XA3F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XA41);
	MakeName	(0XA41,	"PAERRMSG0");
	MakeStr		(0XA42,	0XA55);
	MakeByte	(0XA55);
	MakeName	(0XA55,	"PAERRMSG1");
	MakeStr		(0XA56,	0XA70);
	MakeByte	(0XA70);
	MakeName	(0XA70,	"PAERRMSG2");
	MakeStr		(0XA71,	0XA7F);
	MakeByte	(0XA7F);
	MakeName	(0XA7F,	"PAERRMSG3");
	MakeStr		(0XA80,	0XA8F);
	MakeByte	(0XA8F);
	MakeName	(0XA8F,	"PAERRMSG4");
	MakeByte	(x=0XA90);
	OpChr		(x,	0);
	MakeByte	(0XA91);
	MakeName	(0XA91,	"PAERRMSG5");
	MakeStr		(0XA92,	0XAB6);
	MakeByte	(0XAB6);
	MakeName	(0XAB6,	"PAERRMSG6");
	MakeStr		(0XAB7,	0XAD2);
	MakeByte	(0XAD2);
	MakeName	(0XAD2,	"PAERRMSG7");
	MakeStr		(0XAD3,	0XAEE);
	MakeByte	(0XAEE);
	MakeName	(0XAEE,	"PAERRMSG8");
	MakeStr		(0XAEF,	0XB0B);
	MakeByte	(0XB0B);
	MakeName	(0XB0B,	"PAERRMSG9");
	MakeStr		(0XB0C,	0XB1D);
	MakeByte	(0XB1D);
	MakeName	(0XB1D,	"PAERRMSG10");
	MakeStr		(0XB1E,	0XB3B);
	MakeWord	(x=0XB3B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XB3B,	"PARSMSGPTRS");
	MakeWord	(x=0XB3D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB3F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB41);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB43);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB45);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB47);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB49);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB4B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB4D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XB4F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XB51);
	MakeName	(0XB51,	"INVLFUNCT");
	MakeStr		(0XB52,	0XB62);
	MakeByte	(0XB62);
	MakeName	(0XB62,	"FNOTFOUND");
	MakeStr		(0XB63,	0XB71);
	MakeByte	(0XB71);
	MakeName	(0XB71,	"PNOTFOUND");
	MakeStr		(0XB72,	0XB80);
	MakeByte	(0XB80);
	MakeName	(0XB80,	"TOOMANYOF");
	MakeStr		(0XB81,	0XB94);
	MakeByte	(0XB94);
	MakeName	(0XB94,	"ACCDENIED");
	MakeStr		(0XB95,	0XBA3);
	MakeByte	(0XBA3);
	MakeName	(0XBA3,	"INVHANDLE");
	MakeStr		(0XBA4,	0XBB2);
	MakeByte	(0XBB2);
	MakeName	(0XBB2,	"MEMCBDEST");
	MakeStr		(0XBB3,	0XBD2);
	MakeByte	(0XBD2);
	MakeName	(0XBD2,	"INSUFFMEM");
	MakeStr		(0XBD3,	0XBE6);
	MakeByte	(0XBE6);
	MakeName	(0XBE6,	"INVMEMBLA");
	MakeStr		(0XBE7,	0XC03);
	MakeByte	(0XC03);
	MakeName	(0XC03,	"INVENVIRO");
	MakeStr		(0XC04,	0XC17);
	MakeByte	(0XC17);
	MakeName	(0XC17,	"INVFORMAT");
	MakeStr		(0XC18,	0XC26);
	MakeByte	(0XC26);
	MakeName	(0XC26,	"INVFNPARM");
	MakeStr		(0XC27,	0XC41);
	MakeByte	(0XC41);
	MakeName	(0XC41,	"INVLDDATA");
	MakeStr		(0XC42,	0XC4E);
	MakeByte	(0XC4E);
	MakeName	(0XC4E,	"INVDRVSPC");
	MakeStr		(0XC4F,	0XC6A);
	MakeByte	(0XC6A);
	MakeName	(0XC6A,	"ATRCURDIR");
	MakeStr		(0XC6B,	0XC8E);
	MakeByte	(0XC8E);
	MakeName	(0XC8E,	"NOTSAMDEV");
	MakeStr		(0XC8F,	0XC9E);
	MakeByte	(0XC9E);
	MakeName	(0XC9E,	"NOMOREFIL");
	MakeStr		(0XC9F,	0XCAC);
	MakeByte	(0XCAC);
	MakeName	(0XCAC,	"FILEXISTS");
	MakeStr		(0XCAD,	0XCB8);
	MakeByte	(0XCB8);
	MakeName	(0XCB8,	"CANTMKDIR");
	MakeStr		(0XCB9,	0XCD4);
	MakeByte	(0XCD4);
	MakeName	(0XCD4,	"FAILINT24");
	MakeStr		(0XCD5,	0XCE3);
	MakeByte	(0XCE3);
	MakeName	(0XCE3,	"TOOMANYRD");
	MakeStr		(0XCE4,	0XCF9);
	MakeByte	(0XCF9);
	MakeName	(0XCF9,	"DUPLREDIR");
	MakeStr		(0XCFA,	0XD0F);
	MakeByte	(0XD0F);
	MakeName	(0XD0F,	"INVPASSWD");
	MakeStr		(0XD10,	0XD20);
	MakeByte	(0XD20);
	MakeName	(0XD20,	"INVLDPARM");
	MakeStr		(0XD21,	0XD32);
	MakeByte	(0XD32);
	MakeName	(0XD32,	"NETDATFAU");
	MakeStr		(0XD33,	0XD45);
	MakeByte	(0XD45);
	MakeName	(0XD45,	"FNOSUPNET");
	MakeStr		(0XD46,	0XD67);
	MakeByte	(0XD67);
	MakeName	(0XD67,	"RSCNOTINS");
	MakeStr		(0XD68,	0XD8F);
	MakeWord	(x=0XD8F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XD8F,	"EXTMSGPTRS");
	MakeWord	(x=0XD91);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD93);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD95);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD97);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD99);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD9B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD9D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XD9F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDA1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDA3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDA5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDA7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0XDA9);
	MakeWord	(x=0XDAB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDAD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDAF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDB1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDB3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDB5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDB7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDB9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDBB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDBD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDBF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDC1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDC3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDC5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDC7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDC9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDCB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDCD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDCF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDD1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDD3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDD5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDD7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDD9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XDDB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0XDDD);
	MakeArray	(x,	0X50);
	OpDecimal	(x,	0);
	MakeWord	(x=0XE2D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0XE2F);
	MakeWord	(x=0XE31);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE33);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE35);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE37);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE39);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE3B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE3D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE3F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XE41);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0XE43);
	MakeArray	(x,	0XD);
	OpDecimal	(x,	0);
	MakeName	(0XE43,	"ExtMsgEnd");
	MakeComm	(0XE50,	"RCODE_START = 0E50h");
	MakeCode	(x=0XE50);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XE50,	"Exec_Err");
	MakeCode	(x=0XE57);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE5E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE65);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE6C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE6F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XE72,	"GotExecEMes");
	MakeCode	(0XE79);
	MakeName	(0XE79,	"Exec_Ret");
	MakeCode	(x=0XE7B);
	OpHex		(x,	1);
	MakeName	(0XE7B,	"Exec_Wait");
	MakeComm	(0XE7D,	"DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)");
	MakeCode	(x=0XE7D);
	OpHex		(x,	0);
	MakeCode	(x=0XE7F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XE82,	"NoExec");
	MakeCode	(0XE85);
	MakeName	(0XE85,	"ContC");
	MakeCode	(x=0XE86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0XE8D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(0XE98);
	MakeName	(0XE98,	"CmdIret");
	MakeCode	(x=0XE9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0XE9A,	"NotAtInit");
	MakeCode	(x=0XEA6);
	OpDecimal	(x,	1);
	MakeCode	(x=0XEAC);
	OpHex		(x,	1);
	MakeCode	(x=0XEB3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0XEB3,	"NotInit");
	MakeCode	(x=0XEBA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XEC2);
	OpHex		(x,	1);
	MakeComm	(0XEC4,	"DOS - DISK RESET");
	MakeCode	(x=0XEC4);
	OpHex		(x,	0);
	MakeCode	(x=0XEC7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0XEC7,	"NoReset");
	MakeCode	(x=0XEDB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XEE0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XEE0,	"ClearBatch");
	MakeComm	(0XEE4,	"BATCHSEGMENT.BatFile");
	MakeCode	(x=0XEE4);
	OpHex		(x,	1);
	MakeComm	(0XEE7,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeComm	(0XEF4,	"DEALLOC");
	MakeCode	(x=0XEF4);
	OpHex		(x,	1);
	MakeComm	(0XEF6,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0XEF6);
	OpHex		(x,	0);
	MakeComm	(0XEF9,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeName	(0XEF9,	"No_Bat_For");
	MakeComm	(0XEFE,	"[es:BATCHSEGMENT.BatLast]");
	MakeCode	(x=0XF03);
	OpHex		(x,	1);
	MakeComm	(0XF05,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0XF05);
	OpHex		(x,	0);
	MakeCode	(x=0XF07);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF0B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XF1B,	"ContBatch");
	MakeName	(0XF21,	"ContCTerm");
	MakeCode	(x=0XF25);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0XF34,	"-1");
	MakeCode	(x=0XF34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0XF3A,	"~INITCTRLC");
	MakeCode	(x=0XF3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0XF3A,	"NoSetSing");
	MakeCode	(x=0XF3F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XF48);
	MakeName	(0XF48,	"DoDAb");
	MakeCode	(0XF4A);
	MakeName	(0XF4A,	"ResPipeOff");
	MakeCode	(x=0XF4D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XF55);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0XF5B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XF5B,	"BadMemErr");
	MakeName	(0XF5E,	"FatalC");
	MakeCode	(x=0XF61);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF6F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XF78);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XF7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XF7E,	"FatalRet2");
	MakeCode	(x=0XF85);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0XF88,	"[PDB.PARENT_PID]");
	MakeCode	(x=0XF8B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0XF8E,	"[PDB.EXIT]");
	MakeCode	(x=0XF91);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0XF94,	"[PDB.EXIT+2]");
	MakeCode	(x=0XF97);
	OpHex		(x,	1);
	MakeComm	(0XF9A,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0XF9A);
	OpHex		(x,	0);
	MakeCode	(x=0XF9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFA2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XFA6);
	OpHex		(x,	1);
	MakeComm	(0XFA8,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0XFA8);
	OpHex		(x,	0);
	MakeCode	(x=0XFAA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XFAE);
	OpHex		(x,	1);
	MakeComm	(0XFB0,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0XFB0);
	OpHex		(x,	0);
	MakeCode	(x=0XFB2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XFB5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XFC7);
	MakeName	(0XFC7,	"Int_2e");
	MakeCode	(x=0XFC9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFCD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFD1);
	OpHex		(x,	1);
	MakeCode	(x=0XFD8);
	OpHex		(x,	1);
	MakeCode	(x=0XFDB);
	OpDecimal	(x,	1);
	MakeCode	(x=0XFE0);
	OpHex		(x,	1);
	MakeComm	(0XFE2,	"DOS - 2+ internal - GET PSP SEGMENT\nReturn: BX = current PSP segment");
	MakeCode	(x=0XFE2);
	OpHex		(x,	0);
	MakeCode	(x=0XFE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFE9);
	OpHex		(x,	1);
	MakeComm	(0XFEF,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0XFEF);
	OpHex		(x,	0);
	MakeCode	(x=0XFF1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFF7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XFFE,	"LodCom");
	MakeCode	(x=0XFFF);
	OpHex		(x,	1);
	MakeCode	(x=0X1002);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X100C);
	MakeName	(0X100C,	"LodCom0");
	MakeCode	(x=0X100F);
	OpHex		(x,	1);
	MakeComm	(0X1011,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X1011);
	OpHex		(x,	0);
	MakeCode	(x=0X1016);
	OpHex		(x,	1);
	MakeName	(0X101D,	"BadMemErrJ");
	MakeComm	(0X1020,	"TRANSPACEEND+15");
	MakeCode	(0X1020);
	MakeName	(0X1020,	"SetSize");
	MakeCode	(x=0X1028);
	OpHex		(x,	1);
	MakeName	(0X1028,	"MemOk");
	MakeComm	(0X102A,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X102A);
	OpHex		(x,	0);
	MakeCode	(x=0X102E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1033);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1036);
	OpHex		(x,	1);
	MakeCode	(x=0X103E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1050);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1050,	"Bad_Tpa");
	MakeCode	(x=0X1053);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1053,	"LTpaSet");
	MakeCode	(x=0X1056);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X105B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1064);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X106A,	"TRANSPACEEND (Transient portion size)");
	MakeCode	(0X1076);
	MakeName	(0X1076,	"mov_down");
	MakeName	(0X107C,	"copy_trans");
	MakeCode	(x=0X1080);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1089);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X108D,	"LodCom1");
	MakeComm	(0X1091,	"mov sp,offset DATARES:RStack");
	MakeCode	(x=0X1091);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1099,	"-1");
	MakeCode	(x=0X109C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X10A0,	"-1");
	MakeCode	(x=0X10A5);
	OpHex		(x,	1);
	MakeComm	(0X10A7,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X10A7);
	OpHex		(x,	0);
	MakeCode	(x=0X10A9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X10A9,	"NoSetVer");
	MakeCode	(0X10B3);
	MakeName	(0X10B3,	"NoSng");
	MakeCode	(x=0X10B6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X10BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X10BC,	"Bogus_Com");
	MakeName	(0X10C4,	"ChkSame");
	MakeCode	(x=0X10C7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X10CD,	"Also_Bogus");
	MakeCode	(x=0X10D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X10D2,	"HavCom");
	MakeComm	(0X10D7,	"offset DATARES:TranVars");
	MakeCode	(x=0X10D7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X10DA,	"offset TRANGROUP:HeadCall");
	MakeCode	(x=0X10DA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X10DD);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X10E2,	"; offset TranVarEnd");
	MakeCode	(x=0X10E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X10E9);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X10EC,	"[PDB.BLOCK_LEN]");
	MakeComm	(0X10EF,	"jmp far [Trans]");
	MakeCode	(x=0X10EF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10F3);
	MakeName	(0X10F3,	"TRemCheck");
	MakeCode	(x=0X10F4);
	OpHex		(x,	1);
	MakeCode	(0X10FB);
	MakeName	(0X10FB,	"RemCheck");
	MakeCode	(x=0X10FF);
	OpHex		(x,	1);
	MakeComm	(0X1102,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X1102);
	OpHex		(x,	0);
	MakeCode	(x=0X110A);
	OpHex		(x,	1);
	MakeCode	(0X1112);
	MakeName	(0X1112,	"THeadFix");
	MakeCode	(x=0X1113);
	OpHex		(x,	1);
	MakeCode	(0X111A);
	MakeName	(0X111A,	"HeadFix");
	MakeCode	(x=0X111F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1123,	"[PDB.JFN_TABLE]");
	MakeCode	(x=0X112B);
	OpHex		(x,	1);
	MakeComm	(0X112D,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X112D);
	OpHex		(x,	0);
	MakeCode	(x=0X1138);
	OpHex		(x,	1);
	MakeComm	(0X113A,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X113A);
	OpHex		(x,	0);
	MakeComm	(0X113C,	"[PDB.JFN_TABLE+1]");
	MakeComm	(0X1143,	"FILPERPROC-5");
	MakeCode	(x=0X1143);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1146);
	OpHex		(x,	1);
	MakeComm	(0X1148,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1148);
	OpHex		(x,	0);
	MakeComm	(0X114D,	"-1");
	MakeCode	(x=0X114D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1157);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X115B,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X115B);
	OpHex		(x,	0);
	MakeCode	(x=0X115D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1163);
	MakeName	(0X1163,	"SavHand");
	MakeCode	(x=0X1167);
	OpHex		(x,	1);
	MakeComm	(0X1169,	"DOS - 2+ internal - GET PSP SEGMENT\nReturn: BX = current PSP segment");
	MakeCode	(x=0X1169);
	OpHex		(x,	0);
	MakeComm	(0X116D,	"[PDB.JFN_Pointer]");
	MakeCode	(x=0X1175);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1179,	"[es:PDB.JFN_TABLE+2]");
	MakeCode	(0X1186);
	MakeName	(0X1186,	"GetComDsk2");
	MakeCode	(0X118C);
	MakeName	(0X118C,	"RestHand");
	MakeCode	(x=0X118F);
	OpHex		(x,	1);
	MakeComm	(0X1191,	"DOS - 2+ internal - GET PSP SEGMENT\nReturn: BX = current PSP segment");
	MakeCode	(x=0X1191);
	OpHex		(x,	0);
	MakeCode	(x=0X1193);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1198,	"[PDB.JFN_Pointer]");
	MakeCode	(x=0X11A2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X11A8,	"GetComDsk");
	MakeCode	(x=0X11B0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11B6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11C3);
	OpHex		(x,	1);
	MakeComm	(0X11C5,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X11C5);
	OpHex		(x,	0);
	MakeCode	(x=0X11C7);
	OpChr		(x,	1);
	MakeCode	(x=0X11C9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11CC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11CF);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11D5);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11DF);
	OpHex		(x,	1);
	MakeName	(0X11DF,	"GetRawFlushedByte");
	MakeComm	(0X11E2,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X11E2);
	OpHex		(x,	0);
	MakeCode	(x=0X11E4);
	OpHex		(x,	1);
	MakeComm	(0X11E7,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X11E7);
	OpHex		(x,	0);
	MakeName	(0X11E9,	"LoadCom_retn");
	MakeCode	(0X11EA);
	MakeName	(0X11EA,	"LoadCom");
	MakeCode	(x=0X11EB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11EE);
	OpHex		(x,	1);
	MakeComm	(0X11F1,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X11F1);
	OpHex		(x,	0);
	MakeComm	(0X11F5,	"ERROR_TOO_MANY_OPEN_FILES");
	MakeCode	(x=0X11FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1200);
	MakeCode	(0X1205);
	MakeComm	(0X1207,	"mov dx,offset RESGROUP:TranStart");
	MakeCode	(x=0X120C);
	OpHex		(x,	1);
	MakeComm	(0X120F,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X120F);
	OpHex		(x,	0);
	MakeComm	(0X1213,	"mov cx,offset TRANGROUP:TranSpaceEnd - 100h");
	MakeCode	(x=0X1217);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X121E);
	OpHex		(x,	1);
	MakeComm	(0X1220,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X1220);
	OpHex		(x,	0);
	MakeCode	(x=0X1225);
	OpHex		(x,	1);
	MakeComm	(0X1227,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1227);
	OpHex		(x,	0);
	MakeCode	(x=0X1231);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1231,	"WrongCom");
	MakeCode	(0X1239);
	MakeName	(0X1239,	"ChkSum");
	MakeCode	(x=0X123A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1241,	"offset TRANGROUP:TranDataEnd - 100h");
	MakeCode	(x=0X1245);
	OpHex		(x,	1);
	MakeCode	(x=0X1253);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1253,	"SetVect");
	MakeComm	(0X1259,	"[PDB.EXIT]");
	MakeComm	(0X125D,	"[PDB.EXIT+2]");
	MakeComm	(0X1261,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X1261);
	OpHex		(x,	0);
	MakeCode	(x=0X1263);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1268,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X1268);
	OpHex		(x,	0);
	MakeCode	(x=0X126A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X126F,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X126F);
	OpHex		(x,	0);
	MakeCode	(0X1272);
	MakeName	(0X1272,	"TrnLodCom1");
	MakeCode	(x=0X1273);
	OpHex		(x,	1);
	MakeCode	(x=0X1279);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1279,	"AskEnd");
	MakeCode	(x=0X127F);
	OpHex		(x,	1);
	MakeComm	(0X1282,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X1282);
	OpHex		(x,	0);
	MakeCode	(x=0X1287);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1295);
	MakeName	(0X1295,	"DskErr");
	MakeComm	(0X1296,	"pop word [OldDS]");
	MakeCode	(x=0X1296);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X12A2,	"es = DATARES");
	MakeComm	(0X12A5,	"[si+SYSDEV.ATT]");
	MakeCode	(x=0X12A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12AD);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X12B3,	"add si,SYSDEV.NAME");
	MakeCode	(x=0X12B3);
	OpDecimal	(x,	1);
	MakeComm	(0X12BD,	"ds = DATARES");
	MakeCode	(x=0X12C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12CA);
	OpChr		(x,	1);
	MakeCode	(x=0X12CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12CF);
	OpHex		(x,	1);
	MakeCode	(x=0X12D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X12DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X12DE,	"NoHardE");
	MakeCode	(x=0X12E1);
	OpHex		(x,	1);
	MakeCode	(x=0X12E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12E9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12E9,	"SavMes");
	MakeCode	(x=0X12F4);
	OpHex		(x,	1);
	MakeComm	(0X12F6,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X12F6);
	OpHex		(x,	0);
	MakeCode	(x=0X12FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1302);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X130B,	"ERROR_WRITE_PROTECT");
	MakeComm	(0X1310,	"ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT");
	MakeCode	(x=0X1313);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1313,	"HavCod");
	MakeComm	(0X1318,	"ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT");
	MakeComm	(0X131D,	"ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT");
	MakeCode	(x=0X1322);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1322,	"SetStyle");
	MakeCode	(x=0X1327);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1327,	"GotStyle");
	MakeComm	(0X132B,	"ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT");
	MakeComm	(0X1335,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, can't install\nFFh installed");
	MakeCode	(x=0X1335);
	OpHex		(x,	0);
	MakeComm	(0X1341,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - ");
	MakeCode	(x=0X1341);
	OpHex		(x,	0);
	MakeCode	(x=0X1346);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X134E,	"-1");
	MakeCode	(x=0X1356);
	OpChr		(x,	1);
	MakeComm	(0X135A,	"STD_CON_STRING_OUTPUT");
	MakeCode	(x=0X135A);
	OpHex		(x,	1);
	MakeComm	(0X135C,	"DOS - PRINT STRING\nDS:DX -> string terminated by \"$\"");
	MakeCode	(x=0X135C);
	OpHex		(x,	0);
	MakeCode	(x=0X1365);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1365,	"NoHandler");
	MakeCode	(x=0X136A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X136E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1372,	"ERROR_WRITE_PROTECT");
	MakeName	(0X1372,	"NormalError");
	MakeCode	(x=0X137A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X137A,	"CheckErrType");
	MakeCode	(0X1386);
	MakeName	(0X1386,	"ContOld");
	MakeCode	(x=0X1387);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X138E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1391);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1395);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X139D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X139D,	"BlkErr");
	MakeCode	(x=0X13A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13A4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13B7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X13B7,	"Ask");
	MakeCode	(x=0X13C1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13C9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X13D3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13D6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X13DC,	"Not15");
	MakeComm	(0X13E2,	"RETRY_ALLOWED");
	MakeCode	(x=0X13E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X13E9);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X13EF,	"IGNORE_ALLOWED");
	MakeCode	(x=0X13EF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X13EF,	"Try_Ignore");
	MakeCode	(x=0X13F6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X13FC,	"FAIL_ALLOWED");
	MakeCode	(x=0X13FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X13FC,	"Try_Fail");
	MakeCode	(x=0X1403);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1409);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1409,	"Term_Question");
	MakeComm	(0X140F,	"-1");
	MakeCode	(x=0X140F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X141B);
	OpHex		(x,	1);
	MakeName	(0X141B,	"DoPrompt");
	MakeComm	(0X141E,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X141E);
	OpHex		(x,	0);
	MakeComm	(0X1428,	"IGNORE_ALLOWED");
	MakeCode	(x=0X1428);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X142F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1435,	"User_Retry");
	MakeComm	(0X1437,	"RETRY_ALLOWED");
	MakeCode	(x=0X1437);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X143E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1444,	"User_Abort");
	MakeCode	(x=0X1446);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X144E,	"FAIL_ALLOWED");
	MakeCode	(x=0X144E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X1455);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X145B,	"AskJ");
	MakeCode	(0X145E);
	MakeName	(0X145E,	"EExitJ");
	MakeComm	(0X1460,	"INITINIT");
	MakeCode	(x=0X1460);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X1460,	"Abort_Process");
	MakeCode	(x=0X1467);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X146E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1474,	"DeadInTheWater");
	MakeCode	(x=0X1476);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1476,	"JustExit");
	MakeComm	(0X1479,	"[PDB.PARENT_PID]");
	MakeComm	(0X147C,	"(EXIT<<8)|255");
	MakeCode	(x=0X147C);
	OpHex		(x,	1);
	MakeComm	(0X147F,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0X147F);
	OpHex		(x,	0);
	MakeComm	(0X1481,	"-1");
	MakeCode	(x=0X1481);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X1481,	"AbortCont");
	MakeCode	(x=0X1488);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X148D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X148D,	"Not_Batch_Abort");
	MakeCode	(x=0X1498);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X149F,	"-1");
	MakeCode	(x=0X149F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14A5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X14A5,	"CheckForA");
	MakeCode	(x=0X14AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14B3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X14B3,	"abortfor");
	MakeCode	(x=0X14B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X14BF,	"-1");
	MakeCode	(x=0X14BF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X14C5,	"EExit");
	MakeName	(0X14C9,	"RestHd");
	MakeComm	(0X14CF,	"mov ds,[OldDS]");
	MakeCode	(x=0X14CF);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X14D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X14D4,	"FatErr");
	MakeCode	(x=0X14D7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X14E1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X14E1,	"crlf");
	MakeName	(0X14E4,	"RPrint");
	MakeCode	(0X14FD);
	MakeName	(0X14FD,	"RPrintCrit");
	MakeCode	(x=0X1500);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1503);
	OpHex		(x,	1);
	MakeCode	(x=0X1505);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1510,	"rdNextChar");
	MakeCode	(0X1510);
	MakeName	(0X1510,	"RDispMsg");
	MakeCode	(x=0X1511);
	OpChr		(x,	1);
	MakeCode	(x=0X1517);
	OpChr		(x,	1);
	MakeCode	(0X1526);
	MakeCode	(x=0X1528);
	OpHex		(x,	1);
	MakeComm	(0X152A,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X152A);
	OpHex		(x,	0);
	MakeComm	(0X152C,	"loop rdNextChar");
	MakeCode	(0X152F);
	MakeName	(0X152F,	"SubstMsg");
	MakeComm	(0X1531,	"size SUBST");
	MakeComm	(0X1537,	"mov al,[bx].SubstType");
	MakeComm	(0X1539,	"mov bx,[bx].SubstPtr");
	MakeCode	(x=0X1549);
	OpHex		(x,	1);
	MakeCode	(x=0X154B);
	OpHex		(x,	1);
	MakeCode	(x=0X154D);
	OpHex		(x,	1);
	MakeCode	(x=0X154F);
	OpHex		(x,	1);
	MakeCode	(x=0X1552);
	OpHex		(x,	1);
	MakeCode	(x=0X1554);
	OpChr		(x,	1);
	MakeCode	(x=0X1556);
	OpChr		(x,	1);
	MakeComm	(0X155A,	"('A' - '0') - 10");
	MakeCode	(x=0X155E);
	OpHex		(x,	1);
	MakeComm	(0X1560,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X1560);
	OpHex		(x,	0);
	MakeCode	(0X1567);
	MakeCode	(x=0X1569);
	OpHex		(x,	1);
	MakeComm	(0X156B,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X156B);
	OpHex		(x,	0);
	MakeCode	(0X156F);
	MakeCode	(x=0X1575);
	OpHex		(x,	1);
	MakeComm	(0X1577,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X1577);
	OpHex		(x,	0);
	MakeCode	(0X157C);
	MakeCode	(0X157F);
	MakeName	(0X157F,	"CharToUpper");
	MakeComm	(0X1583,	"Multiplex - DOS 3+ internal - UPPERCASE CHARACTER\nSTACK: WORD character to convert to uppercase\nReturn: AL = uppercase character\nSTACK unchanged");
	MakeCode	(x=0X1583);
	OpHex		(x,	0);
	MakeCode	(0X1588);
	MakeName	(0X1588,	"MsgInt2fHandler");
	MakeComm	(0X1589,	"(MULTDOS<<8)|MESSAGE_2F");
	MakeComm	(0X158E,	"GET_COMMAND_STATE");
	MakeCode	(x=0X159F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X15A5);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X15AF);
	MakeName	(0X15AF,	"fcOurs");
	MakeCode	(x=0X15B1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X15B8);
	OpHex		(x,	1);
	MakeName	(0X15B8,	"miOurs");
	MakeCode	(x=0X15C2);
	OpHex		(x,	1);
	MakeCode	(x=0X15C4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X15C9,	"miRet");
	MakeCode	(0X15CB);
	MakeName	(0X15CB,	"MsgRetriever");
	MakeComm	(0X15D3,	"NUMPARSMSGS");
	MakeCode	(x=0X15D3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X15D6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X15DC,	"NUMEXTMSGS");
	MakeCode	(x=0X15DC);
	OpDecimal	(x,	1);
	MakeName	(0X15DF,	"chkmsgnum");
	MakeCode	(x=0X15E4);
	OpHex		(x,	1);
	MakeCode	(x=0X15E8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X15EE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X15F1,	"EXT_EXISTS_OPEN");
	MakeComm	(0X15F4,	"INT_24_ERROR");
	MakeComm	(0X15F7,	"ExtOpen shl 8");
	MakeCode	(x=0X15F7);
	OpHex		(x,	1);
	MakeComm	(0X15FA,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X15FA);
	OpHex		(x,	0);
	MakeCode	(x=0X1604);
	OpHex		(x,	1);
	MakeName	(0X1604,	"mrRead");
	MakeComm	(0X160A,	"LSEEK shl 8");
	MakeCode	(x=0X160A);
	OpHex		(x,	1);
	MakeComm	(0X160D,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X160D);
	OpHex		(x,	0);
	MakeComm	(0X1611,	"MsgBuffer");
	MakeCode	(x=0X1611);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1614);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1617);
	OpHex		(x,	1);
	MakeComm	(0X1619,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X1619);
	OpHex		(x,	0);
	MakeComm	(0X1622,	"[MsgBuffer]");
	MakeCode	(x=0X1622);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X162B,	"mrCloseFile");
	MakeCode	(x=0X162C);
	OpHex		(x,	1);
	MakeComm	(0X162E,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X162E);
	OpHex		(x,	0);
	MakeCode	(0X1635);
	MakeName	(0X1635,	"mrInMem");
	MakeName	(0X163D,	"mrRet");
	MakeCode	(0X1644);
	MakeName	(0X1644,	"Lh_OffUnlink");
	MakeCode	(x=0X1648);
	OpHex		(x,	1);
	MakeComm	(0X164B,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: get allocation strategy");
	MakeCode	(x=0X164B);
	OpHex		(x,	0);
	MakeCode	(x=0X164F);
	OpHex		(x,	1);
	MakeCode	(x=0X1651);
	OpHex		(x,	1);
	MakeCode	(x=0X1654);
	OpHex		(x,	1);
	MakeCode	(x=0X1659);
	OpHex		(x,	1);
	MakeComm	(0X165C,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X165C);
	OpHex		(x,	0);
	MakeCode	(x=0X1660);
	OpHex		(x,	1);
	MakeCode	(x=0X1664);
	OpHex		(x,	1);
	MakeComm	(0X1667,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X1667);
	OpHex		(x,	0);
	MakeByte	(0X166A);
	MakeArray	(0X166A,	0X6);
	MakeName	(0X166A,	"EndCode");
	MakeCode	(x=0X1670);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1670,	"ConProc");
	MakeCode	(x=0X1673);
	OpHex		(x,	1);
	MakeComm	(0X1677,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0X1677);
	OpHex		(x,	0);
	MakeCode	(x=0X1679);
	OpHex		(x,	1);
	MakeComm	(0X167C,	"DOS - GET DOS VERSION\nReturn: AL = major version number (00h for DOS 1.x)");
	MakeCode	(x=0X167C);
	OpHex		(x,	0);
	MakeCode	(x=0X1683);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X168B,	"[es:PDB.PARENT_PID]");
	MakeName	(0X1690,	"Here");
	MakeComm	(0X1692,	"DOS - PROGRAM TERMINATION\nreturns to DOS--identical to INT 21/AH=00h");
	MakeCode	(x=0X1692);
	OpHex		(x,	0);
	MakeComm	(0X1694,	"TRANSTART+15");
	MakeCode	(0X1694);
	MakeName	(0X1694,	"okdos");
	MakeCode	(x=0X169F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X16AB,	"- Multiplex - APPEND - INSTALLATION CHECK\nReturn: AL = 00h not installed\nAL = FFh if installed");
	MakeCode	(x=0X16AB);
	OpHex		(x,	0);
	MakeComm	(0X16B4,	"- Multiplex - APPEND - VERSION CHECK\nReturn: AX = FFFFh if not DOS 4.0 APPEND\nAL = major version number\nAH = minor version number, otherwise");
	MakeCode	(x=0X16B4);
	OpHex		(x,	0);
	MakeComm	(0X16BE,	"- Multiplex - DOS 4.0 APPEND - GET APPEND FUNCTION STATE\nReturn: BX = APPEND state");
	MakeCode	(x=0X16BE);
	OpHex		(x,	0);
	MakeCode	(x=0X16C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X16C9,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X16C9);
	OpHex		(x,	0);
	MakeComm	(0X16CB,	"offset resgroup:DataresEnd");
	MakeCode	(x=0X16CB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X16CB,	"set_msg_addr");
	MakeCode	(x=0X16CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16D8);
	OpHex		(x,	0);
	MakeCode	(x=0X16DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16E3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X16EA,	"first_com");
	MakeName	(0X16F0,	"init_cntry");
	MakeComm	(0X16F2,	"GETEXTCNTRY");
	MakeCode	(x=0X16F2);
	OpHex		(x,	1);
	MakeComm	(0X16F6,	"-1");
	MakeComm	(0X16F9,	"-1");
	MakeCode	(x=0X16FF);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1702,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X1702);
	OpHex		(x,	0);
	MakeCode	(x=0X1705);
	OpHex		(x,	1);
	MakeComm	(0X1708,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0X1708);
	OpHex		(x,	0);
	MakeCode	(x=0X170D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1711);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1715,	"[PDB.PARENT_PID]");
	MakeCode	(x=0X1718);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X171B,	"[PDB.EXIT]");
	MakeCode	(x=0X171E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1721,	"[PDB.EXIT+2]");
	MakeCode	(x=0X1724);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1727,	"EndCode+15");
	MakeComm	(0X172C,	"(EndCode+15)>>4");
	MakeCode	(x=0X1732);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1735);
	OpHex		(x,	1);
	MakeCode	(x=0X173D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1740);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1740,	"TpaSet");
	MakeComm	(0X1743,	"[PDB.BLOCK_LEN]");
	MakeCode	(x=0X1746);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X174A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X174E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1752);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1756);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X175A,	"mov bx,offset RESGROUP:TranStart");
	MakeComm	(0X175D,	"add bx,offset TRANGROUP:TranSpaceEnd");
	MakeCode	(x=0X1768);
	OpHex		(x,	1);
	MakeComm	(0X176A,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X176A);
	OpHex		(x,	0);
	MakeComm	(0X176D,	"((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1");
	MakeCode	(x=0X176D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpDecimal	(x,	1);
	MakeComm	(0X1773,	"ENVSML/16 ; 256/16");
	MakeCode	(x=0X1773);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpDecimal	(x,	1);
	MakeComm	(0X1779,	"TRANSPACEEND+15");
	MakeComm	(0X177E,	"(TRANSPACEEND+15)>>4");
	MakeCode	(x=0X1780);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1786);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1789,	"[PDB.ENVIRON]");
	MakeCode	(x=0X178C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1793);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X179A,	"buildenv");
	MakeName	(0X179D,	"environpassed");
	MakeCode	(x=0X179F);
	OpHex		(x,	1);
	MakeName	(0X179F,	"gottheenvir");
	MakeComm	(0X17A1,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X17A1);
	OpHex		(x,	0);
	MakeCode	(x=0X17A5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X17A8,	"[FCB]");
	MakeCode	(x=0X17AF);
	OpChr		(x,	1);
	MakeCode	(x=0X17B1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17B4);
	OpHex		(x,	1);
	MakeCode	(x=0X17B7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17BE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X17C2);
	OpChr		(x,	1);
	MakeComm	(0X17CC,	"lea si,[di+MAX_COMSPEC-3]");
	MakeCode	(x=0X17CC);
	OpDecimal	(x,	1);
	MakeComm	(0X17D0,	"lea di,[di+MAX_COMSPEC-1]");
	MakeCode	(x=0X17D0);
	OpDecimal	(x,	1);
	MakeComm	(0X17D4,	"MAX_COMSPEC - 2");
	MakeCode	(x=0X17D4);
	OpDecimal	(x,	1);
	MakeName	(0X17DE,	"notwidenv");
	MakeCode	(x=0X17DF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X17E5,	"nocomdrv");
	MakeCode	(x=0X17EC);
	OpHex		(x,	1);
	MakeComm	(0X17FF,	"offset ResGroup:Parse_Command");
	MakeCode	(x=0X17FF);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X17FF,	"Parse_command_line");
	MakeComm	(0X180C,	"call far [Init_Parse]");
	MakeComm	(0X1814,	"-1");
	MakeCode	(0X181C);
	MakeName	(0X181C,	"t1");
	MakeName	(0X1821,	"parse_line_error");
	MakeName	(0X182E,	"init_chk_delim");
	MakeCode	(0X1852);
	MakeName	(0X1852,	"check_k_too");
	MakeCode	(0X185D);
	MakeName	(0X185D,	"parse_line_error_disp");
	MakeCode	(x=0X1869);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1869,	"parse_cont");
	MakeCode	(x=0X1871);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1879);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1881);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X188C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X188C,	"parse_cont_1");
	MakeCode	(x=0X1894);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X189F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X189F,	"parse_cont_2");
	MakeCode	(x=0X18AA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X18AA,	"parse_cont_3");
	MakeCode	(0X18B5);
	MakeName	(0X18B5,	"SetMSwitchjmp");
	MakeComm	(0X18B8,	"-1");
	MakeCode	(0X18B8);
	MakeName	(0X18B8,	"SetFSwitch");
	MakeCode	(0X18C5);
	MakeName	(0X18C5,	"failok");
	MakeCode	(0X18CD);
	MakeName	(0X18CD,	"SetPSwitch");
	MakeCode	(0X18DA);
	MakeName	(0X18DA,	"permcomok");
	MakeCode	(x=0X18DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X18E8,	"-1");
	MakeName	(0X18F4,	"Parse_command_line_jmp");
	MakeCode	(0X18F7);
	MakeName	(0X18F7,	"SetDSwitch");
	MakeCode	(0X1904);
	MakeName	(0X1904,	"setdateok");
	MakeCode	(0X1910);
	MakeName	(0X1910,	"SetKSwitch");
	MakeCode	(0X1918);
	MakeName	(0X1918,	"SetSSwitch");
	MakeName	(0X191D,	"SetSorKSwitch");
	MakeCode	(0X1929);
	MakeName	(0X1929,	"SetESwitch");
	MakeComm	(0X1930,	"MoreArgs_Ptr");
	MakeCode	(0X1936);
	MakeName	(0X1936,	"eswitchok");
	MakeCode	(x=0X193A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X194D,	"SET_EXTENDED_MSG");
	MakeCode	(0X194D);
	MakeName	(0X194D,	"SetMswitch");
	MakeComm	(0X1954,	"MoreArgs_Ptr");
	MakeCode	(0X195A);
	MakeName	(0X195A,	"setMswitchok");
	MakeCode	(x=0X1962);
	OpHex		(x,	1);
	MakeName	(0X1962,	"SetYSwitch");
	MakeCode	(0X196A);
	MakeCode	(0X196D);
	MakeName	(0X196D,	"ChkOtherArgs");
	MakeCode	(x=0X1975);
	OpHex		(x,	1);
	MakeComm	(0X1978,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write");
	MakeCode	(x=0X1978);
	OpHex		(x,	0);
	MakeCode	(x=0X197E);
	OpHex		(x,	1);
	MakeComm	(0X1981,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X1981);
	OpHex		(x,	0);
	MakeCode	(x=0X1983);
	OpHex		(x,	1);
	MakeCode	(x=0X1988);
	OpHex		(x,	1);
	MakeName	(0X1988,	"BadSetCon");
	MakeComm	(0X198A,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X198A);
	OpHex		(x,	0);
	MakeCode	(0X198E);
	MakeName	(0X198E,	"IsaDevice");
	MakeCode	(x=0X1990);
	OpHex		(x,	1);
	MakeCode	(x=0X1993);
	OpHex		(x,	1);
	MakeComm	(0X1996,	"DOS - 2+ - IOCTL - SET DEVICE INFORMATION\nBX = device handle, DH = 0\nDL = device information to set (bits 0-7 from function 0)");
	MakeCode	(x=0X1996);
	OpHex		(x,	0);
	MakeCode	(x=0X199C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X19AA);
	OpHex		(x,	1);
	MakeName	(0X19AA,	"rcclloop");
	MakeComm	(0X19AC,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X19AC);
	OpHex		(x,	0);
	MakeCode	(x=0X19B3);
	OpHex		(x,	1);
	MakeComm	(0X19B5,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X19B5);
	OpHex		(x,	0);
	MakeCode	(x=0X19B7);
	OpHex		(x,	1);
	MakeComm	(0X19B9,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X19B9);
	OpHex		(x,	0);
	MakeCode	(x=0X19BB);
	OpHex		(x,	1);
	MakeComm	(0X19BD,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X19BD);
	OpHex		(x,	0);
	MakeCode	(x=0X19BF);
	OpHex		(x,	1);
	MakeComm	(0X19C1,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X19C1);
	OpHex		(x,	0);
	MakeCode	(x=0X19C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X19CE);
	MakeName	(0X19CE,	"DevErr");
	MakeCode	(x=0X19DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X19DC,	"ChkSrchSpec");
	MakeCode	(x=0X19E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X19EC,	"env_alloced");
	MakeName	(0X19F1,	"countloop");
	MakeCode	(x=0X19F7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X19FF,	"ENVBIG");
	MakeCode	(x=0X19FF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1A02);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1A0D,	"comp_endenv");
	MakeCode	(0X1A14);
	MakeName	(0X1A14,	"got_endenv");
	MakeCode	(x=0X1A18);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1A1D,	"ComspStrLen");
	MakeCode	(x=0X1A29);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1A38,	"ComtrLoop");
	MakeCode	(x=0X1A3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1A46);
	MakeName	(0X1A46,	"SetComsr");
	MakeCode	(x=0X1A4A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1A4D);
	OpDecimal	(x,	1);
	MakeName	(0X1A5C,	"iNotRoot");
	MakeCode	(x=0X1A64);
	OpHex		(x,	1);
	MakeComm	(0X1A67,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X1A67);
	OpHex		(x,	0);
	MakeCode	(x=0X1A6E);
	OpHex		(x,	1);
	MakeComm	(0X1A70,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1A70);
	OpHex		(x,	0);
	MakeName	(0X1A72,	"SetComsrRet");
	MakeCode	(x=0X1A7A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1A7A,	"SetComsrBad");
	MakeComm	(0X1A7D,	"call TriageError (in TRANSCODE)\n26E0h+333Ch");
	MakeCode	(x=0X1A80);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1A85);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1A88,	"doprt");
	MakeCode	(x=0X1A8B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1A8E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1A92);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1A99);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1A99,	"ArgsDone");
	MakeCode	(x=0X1A9D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1AA5);
	OpHex		(x,	1);
	MakeComm	(0X1AAB,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0X1AAB);
	OpHex		(x,	0);
	MakeComm	(0X1AAD,	"PDB.EXIT");
	MakeCode	(x=0X1AB0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1AB7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1ABE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1AC5,	"[PDB.PARENT_PID]");
	MakeCode	(x=0X1AC9);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1ACC);
	OpHex		(x,	1);
	MakeComm	(0X1ACF,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X1ACF);
	OpHex		(x,	0);
	MakeComm	(0X1AD2,	"[PDB.PARENT_PID]");
	MakeName	(0X1AD2,	"ComReturns");
	MakeCode	(x=0X1AD5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1ADC,	"[PDB.JFN_TABLE]");
	MakeCode	(x=0X1ADF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1AE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1AE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1AEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1AEE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1AF1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1AF5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1B04);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1B14);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1B17,	"ComspStrLen");
	MakeCode	(x=0X1B1D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1B1D,	"CopyComsp");
	MakeCode	(x=0X1B22);
	OpChr		(x,	1);
	MakeCode	(x=0X1B28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1B2E,	"CopyComspLoop");
	MakeCode	(x=0X1B34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1B39);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1B3E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1B43,	"'A' - 1");
	MakeCode	(x=0X1B43);
	OpHex		(x,	1);
	MakeCode	(x=0X1B46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1B53,	"offset RESGROUP:TranStart");
	MakeName	(0X1B53,	"EnvMaximum");
	MakeComm	(0X1B56,	"TRANSTART+100h");
	MakeComm	(0X1B5A,	"offset TRANGROUP:TranDataEnd - 100h");
	MakeCode	(x=0X1B5E);
	OpHex		(x,	1);
	MakeName	(0X1B62,	"Ichksum");
	MakeComm	(0X1B75,	"((BATCHSEGMENT.SIZE)+16+0Fh)/16\n(33+16+15)/16");
	MakeCode	(x=0X1B78);
	OpHex		(x,	1);
	MakeComm	(0X1B7A,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X1B7A);
	OpHex		(x,	0);
	MakeName	(0X1B81,	"NoBatchSeg");
	MakeComm	(0X1B95,	"4096 - 1");
	MakeCode	(x=0X1B98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1B9D);
	OpHex		(x,	1);
	MakeCode	(x=0X1B9F);
	OpHex		(x,	1);
	MakeCode	(x=0X1BA1);
	OpHex		(x,	1);
	MakeCode	(x=0X1BA3);
	OpHex		(x,	1);
	MakeCode	(x=0X1BA5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1BAD,	"NxtStr");
	MakeCode	(0X1BC4);
	MakeName	(0X1BC4,	"OkCpyStr");
	MakeCode	(0X1BC6);
	MakeName	(0X1BC6,	"EnvExit");
	MakeCode	(x=0X1BCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1BD2,	"EnvNoErr");
	MakeCode	(x=0X1BE2);
	OpDecimal	(x,	1);
	MakeName	(0X1BE5,	"st_envsize");
	MakeCode	(0X1BF4);
	MakeName	(0X1BF4,	"DoDate");
	MakeComm	(0X1C14,	"-1");
	MakeCode	(x=0X1C17);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1C23);
	OpHex		(x,	1);
	MakeComm	(0X1C25,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X1C25);
	OpHex		(x,	0);
	MakeCode	(x=0X1C31);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1C31,	"NoAutSet");
	MakeCode	(x=0X1C3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1C3D);
	OpHex		(x,	1);
	MakeComm	(0X1C40,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X1C40);
	OpHex		(x,	0);
	MakeCode	(x=0X1C46);
	OpHex		(x,	1);
	MakeComm	(0X1C48,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1C48);
	OpHex		(x,	0);
	MakeCode	(0X1C4D);
	MakeName	(0X1C4D,	"noabat");
	MakeComm	(0X1C55,	"call far [triage_add]");
	MakeCode	(x=0X1C59);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1C5E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1C61);
	OpHex		(x,	1);
	MakeComm	(0X1C64,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X1C64);
	OpHex		(x,	0);
	MakeComm	(0X1C68,	"KOREA_COUNTRY_CODE");
	MakeCode	(x=0X1C68);
	OpHex		(x,	1);
	MakeComm	(0X1C6D,	"BatFile");
	MakeCode	(x=0X1C6D);
	OpHex		(x,	1);
	MakeCode	(x=0X1C70);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1C79);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1C7C);
	OpHex		(x,	1);
	MakeComm	(0X1C7F,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X1C7F);
	OpHex		(x,	0);
	MakeCode	(x=0X1C85);
	OpHex		(x,	1);
	MakeComm	(0X1C87,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1C87);
	OpHex		(x,	0);
	MakeComm	(0X1C8B,	"call far [Triage_Add]");
	MakeCode	(0X1C8B);
	MakeName	(0X1C8B,	"NoKabat");
	MakeCode	(x=0X1C8F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1C94);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1C94,	"AccDenErr");
	MakeName	(0X1C9A,	"OpenErr");
	MakeCode	(x=0X1C9E);
	OpHex		(x,	1);
	MakeComm	(0X1CA0,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X1CA0);
	OpHex		(x,	0);
	MakeComm	(0X1CB3,	"offset TranGroup:Datinit");
	MakeCode	(x=0X1CB3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X1CB9,	"offset RESGROUP:TranStart");
	MakeComm	(0X1CC7,	"call far [INITADD]");
	MakeName	(0X1CCB,	"NoDttm");
	MakeCode	(x=0X1CD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1CD8,	"Drv0");
	MakeComm	(0X1CE2,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X1CE2);
	OpHex		(x,	0);
	MakeCode	(x=0X1CE5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1CF0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1CF3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1CF8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1CFD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1D00);
	OpHex		(x,	1);
	MakeCode	(x=0X1D02);
	OpHex		(x,	1);
	MakeCode	(x=0X1D0F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1D15,	"res_low");
	MakeCode	(0X1D19);
	MakeName	(0X1D19,	"move_code");
	MakeName	(0X1D1C,	"finish_init");
	MakeCode	(0X1D1F);
	MakeName	(0X1D1F,	"GetStrLen");
	MakeCode	(x=0X1D28);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1D28,	"Setup_Seg");
	MakeCode	(x=0X1D2B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1D35,	"offset ResGroup:TranStart");
	MakeCode	(x=0X1D38);
	OpHex		(x,	1);
	MakeCode	(x=0X1D3A);
	OpHex		(x,	1);
	MakeCode	(x=0X1D3C);
	OpHex		(x,	1);
	MakeCode	(x=0X1D3E);
	OpHex		(x,	1);
	MakeComm	(0X1D44,	"display parse error message");
	MakeCode	(0X1D44);
	MakeName	(0X1D44,	"RPrintParse");
	MakeCode	(x=0X1D48);
	OpHex		(x,	1);
	MakeCode	(x=0X1D4A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1D55);
	MakeName	(0X1D55,	"IfindE");
	MakeCode	(0X1D5C);
	MakeName	(0X1D5C,	"ifind");
	MakeCode	(x=0X1D60);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1D87,	"ifind2");
	MakeCode	(0X1D88);
	MakeName	(0X1D88,	"Icount0");
	MakeCode	(0X1D92);
	MakeCode	(x=0X1D9C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1D9C,	"Iscasb1");
	MakeCode	(0X1DA1);
	MakeName	(0X1DA1,	"Iscasb2");
	MakeCode	(x=0X1DA3);
	OpDecimal	(x,	1);
	MakeName	(0X1DA3,	"Iscasbx");
	MakeCode	(x=0X1DA9);
	OpHex		(x,	1);
	MakeName	(0X1DA9,	"iupconv");
	MakeCode	(x=0X1DAD);
	OpHex		(x,	1);
	MakeCode	(x=0X1DB1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1DBD);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1DC3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1DC9);
	OpHex		(x,	1);
	MakeCode	(x=0X1DCC);
	OpHex		(x,	1);
	MakeName	(0X1DCC,	"init_contc_specialcase");
	MakeCode	(0X1DD9);
	MakeName	(0X1DD9,	"setup_for_messages");
	MakeCode	(x=0X1DED);
	OpHex		(x,	1);
	MakeComm	(0X1DF0,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X1DF0);
	OpHex		(x,	0);
	MakeCode	(x=0X1E03);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1E0E);
	OpHex		(x,	1);
	MakeComm	(0X1E11,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X1E11);
	OpHex		(x,	0);
	MakeCode	(x=0X1E14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1E18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1E1F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1E22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1E28,	"SET_EXTENDED_MSG");
	MakeCode	(x=0X1E28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1E3C,	"DS:SI = ptr to command-line tail");
	MakeCode	(x=0X1E3C);
	OpHex		(x,	1);
	MakeName	(0X1E3C,	"CheckHelp");
	MakeComm	(0X1E3F,	"RESGROUP:Parse_Command");
	MakeCode	(x=0X1E3F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1E46,	"call far [Init_Parse]");
	MakeCode	(x=0X1E46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1E4A,	"-1");
	MakeCode	(x=0X1E56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1E5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1E66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1E70);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1E7F,	"DOS - PROGRAM TERMINATION\nreturns to DOS--identical to INT 21/AH=00h");
	MakeCode	(x=0X1E7F);
	OpHex		(x,	0);
	MakeCode	(0X1E81);
	MakeCode	(0X1E82);
	MakeName	(0X1E82,	"Setup_res_end");
	MakeCode	(x=0X1E8B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1E91);
	OpHex		(x,	1);
	MakeCode	(x=0X1E94);
	OpHex		(x,	1);
	MakeCode	(x=0X1EA2);
	OpHex		(x,	1);
	MakeComm	(0X1EA5,	"DOS - 5+ Get TRUE Version Number (BL major, BH minor, DL revision, DH flags)");
	MakeCode	(x=0X1EA5);
	OpHex		(x,	0);
	MakeCode	(x=0X1EA8);
	OpHex		(x,	1);
	MakeCode	(x=0X1EAF);
	OpHex		(x,	1);
	MakeComm	(0X1EB5,	"size of code in bytes\nEndCode-RCODE_START");
	MakeCode	(x=0X1EB5);
	OpHex		(x,	1);
	MakeCode	(x=0X1EBA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1EBD);
	OpHex		(x,	1);
	MakeCode	(x=0X1EBF);
	OpHex		(x,	1);
	MakeCode	(x=0X1EC1);
	OpHex		(x,	1);
	MakeCode	(x=0X1EC3);
	OpHex		(x,	1);
	MakeCode	(0X1ECB);
	MakeComm	(0X1ECC,	"EndCode-RCODE_START");
	MakeCode	(x=0X1ECC);
	OpHex		(x,	1);
	MakeCode	(0X1ED1);
	MakeName	(0X1ED1,	"Move_res_code");
	MakeCode	(x=0X1ED7);
	OpHex		(x,	1);
	MakeComm	(0X1EDA,	"DOS - 5+ Get TRUE Version Number (BL major, BH minor, DL revision, DH flags)");
	MakeCode	(x=0X1EDA);
	OpHex		(x,	0);
	MakeCode	(x=0X1EDC);
	OpHex		(x,	1);
	MakeCode	(x=0X1EE7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1EF0,	"offset CODERES:EndCode\n\nRESGROUP:EndCode - RESGROUP:RCODE_START");
	MakeCode	(0X1EF0);
	MakeComm	(0X1EF6,	"GET_HMA_ADDR");
	MakeCode	(x=0X1EF9);
	OpHex		(x,	0);
	MakeComm	(0X1EFB,	"HMA available?");
	MakeComm	(0X1F0E,	"EndCode-RCODE_START (CODERES:EndCode)");
	MakeComm	(0X1F11,	"ax = para size of res code");
	MakeCode	(x=0X1F16);
	OpHex		(x,	1);
	MakeCode	(x=0X1F18);
	OpHex		(x,	1);
	MakeCode	(x=0X1F1A);
	OpHex		(x,	1);
	MakeCode	(x=0X1F1C);
	OpHex		(x,	1);
	MakeComm	(0X1F1E,	"resident size");
	MakeCode	(0X1F24);
	MakeComm	(0X1F29,	"round it to a para offset");
	MakeCode	(x=0X1F29);
	OpHex		(x,	1);
	MakeComm	(0X1F2E,	"offset RESGROUP:StartCode\nRCODE_START");
	MakeCode	(x=0X1F2E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X1F31,	"offset CODERES:EndCode\nRESGROUP:EndCode - RESGROUP:RCODE_START");
	MakeCode	(0X1F3F);
	MakeName	(0X1F3F,	"alloc_env");
	MakeCode	(x=0X1F45);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1F48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1F52);
	MakeComm	(0X1F54,	"SIZE Environment\nENVIRONSIZ");
	MakeCode	(x=0X1F54);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1F57);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1F62,	"_find_path");
	MakeComm	(0X1F6C,	"PathStrLen");
	MakeCode	(x=0X1F6F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1F76);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1F7D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1F88,	"PrmptStrLen2");
	MakeCode	(x=0X1F8B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1F92);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1F99);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1FA4,	"ComspStrLen");
	MakeCode	(x=0X1FA7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1FAE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1FB5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X1FBB,	"ENVBIG (maximum environment size)");
	MakeCode	(x=0X1FBB);
	OpDecimal	(x,	1);
	MakeCode	(0X1FC6);
	MakeComm	(0X1FC7,	"lea bx,[di+SIZE Environment]\nlea bx,[di+ENVIRONSIZ]");
	MakeCode	(x=0X1FC7);
	OpDecimal	(x,	1);
	MakeComm	(0X1FCC,	"[PDB.PARENT_PID]");
	MakeCode	(x=0X1FD8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1FDE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1FE1);
	OpHex		(x,	1);
	MakeCode	(x=0X1FE3);
	OpHex		(x,	1);
	MakeCode	(x=0X1FE5);
	OpHex		(x,	1);
	MakeCode	(x=0X1FE7);
	OpHex		(x,	1);
	MakeComm	(0X1FE9,	"mov ah,ALLOC");
	MakeCode	(x=0X1FE9);
	OpHex		(x,	1);
	MakeComm	(0X1FEB,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X1FEB);
	OpHex		(x,	0);
	MakeCode	(0X1FF2);
	MakeCode	(x=0X1FFA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2010);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2017,	"PathStrLen+1");
	MakeCode	(x=0X201C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2022,	"mov ah,GET_DEFAULT_DRIVE");
	MakeCode	(x=0X2022);
	OpHex		(x,	1);
	MakeComm	(0X2024,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X2024);
	OpHex		(x,	0);
	MakeCode	(x=0X2026);
	OpChr		(x,	1);
	MakeCode	(x=0X2028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X202B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2033);
	OpChr		(x,	1);
	MakeComm	(0X2039,	"mov ah,Current_Dir");
	MakeCode	(x=0X2039);
	OpHex		(x,	1);
	MakeComm	(0X203B,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X203B);
	OpHex		(x,	0);
	MakeComm	(0X203E,	"DefPathStrLen+1");
	MakeCode	(x=0X2041);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2046,	"mov ah,CHDir");
	MakeCode	(x=0X2046);
	OpHex		(x,	1);
	MakeComm	(0X2048,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2048);
	OpHex		(x,	0);
	MakeComm	(0X204C,	"DefPath2StrLen+1");
	MakeCode	(x=0X204F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2054,	"mov ah,CHDir");
	MakeCode	(x=0X2054);
	OpHex		(x,	1);
	MakeComm	(0X2056,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2056);
	OpHex		(x,	0);
	MakeComm	(0X205F,	"mov ah,CHDir");
	MakeCode	(x=0X205F);
	OpHex		(x,	1);
	MakeComm	(0X2061,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2061);
	OpHex		(x,	0);
	MakeCode	(x=0X206A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2076);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X207D,	"PrmptStrLen+1");
	MakeCode	(x=0X207D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2088,	"lea ax,[di+ComspStrLen]");
	MakeCode	(x=0X208C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X208F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2092,	"ComspStrLen2+1");
	MakeCode	(x=0X2092);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2099);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X209C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X20A5,	"call alloc_error");
	MakeCode	(0X20A5);
	MakeName	(0X20A8,	"Alloc_error");
	MakeCode	(0X20AB);
	MakeName	(0X20AB,	"patch_stub");
	MakeComm	(0X20B0,	"offset DATARES:Int2f_Entry");
	MakeCode	(x=0X20B0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X20B3,	"offset RESGROUP:Reloc_Table");
	MakeCode	(x=0X20B3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20B8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X20C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X20C6,	"patch_segs");
	MakeCode	(0X20D8);
	MakeName	(0X20D8,	"get_XMMAddr");
	MakeComm	(0X20DC,	"- Multiplex - XMS - INSTALLATION CHECK\nReturn: AL = 80h XMS driver installed\nAL <> 80h no driver");
	MakeCode	(x=0X20DC);
	OpHex		(x,	0);
	MakeCode	(x=0X20DE);
	OpHex		(x,	1);
	MakeComm	(0X20E5,	"- Multiplex - XMS - GET DRIVER ADDRESS\nReturn: ES:BX -> driver entry point");
	MakeCode	(x=0X20E5);
	OpHex		(x,	0);
	MakeCode	(x=0X20E7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20EB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X20F1);
	MakeArray	(x,	0XF);
	OpDecimal	(x,	0);
	MakeStr		(0X2100,	0X210E);
	MakeName	(0X2100,	"ICONDEV");
	MakeByte	(0X210E);
	MakeName	(0X210E,	"BADCSPFL");
	MakeStr		(0X210F,	0X211C);
	MakeName	(0X210F,	"COMSPECT");
	MakeByte	(0X211C);
	MakeByte	(0X211D);
	MakeName	(0X211D,	"AUTOBAT");
	MakeStr		(0X211E,	0X212D);
	MakeByte	(0X212D);
	MakeByte	(0X212E);
	MakeName	(0X212E,	"KAUTOBAT");
	MakeStr		(0X212F,	0X213E);
	MakeByte	(0X213E);
	MakeByte	(x=0X213F);
	OpHex		(x,	0);
	MakeName	(0X213F,	"PRDATTM");
	MakeWord	(0X2140);
	MakeArray	(0X2140,	0X2);
	MakeName	(0X2140,	"InitAdd");
	MakeWord	(x=0X2144);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X2144,	"print_add");
	MakeWord	(0X2146);
	MakeName	(0X2146,	"print_add_seg");
	MakeWord	(x=0X2148);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X2148,	"triage_add");
	MakeWord	(0X214A);
	MakeName	(0X214A,	"triage_add_seg");
	MakeByte	(0X214C);
	MakeName	(0X214C,	"AllocedEnv");
	MakeStr		(0X214D,	0X2153);
	MakeName	(0X214D,	"PathString");
	MakeStr		(0X2153,	0X215C);
	MakeName	(0X2153,	"DefPathString");
	MakeStr		(0X215C,	0X2163);
	MakeName	(0X215C,	"DefPath2String");
	MakeStr		(0X2163,	0X216F);
	MakeName	(0X2163,	"PrmptString");
	MakeWord	(0X216F);
	MakeName	(0X216F,	"ComspOffset");
	MakeStr		(0X2171,	0X2186);
	MakeName	(0X2171,	"ComspString");
	MakeByte	(x=0X2186);
	OpChr		(x,	0);
	MakeName	(0X2186,	"equalsign");
	MakeByte	(x=0X2187);
	OpChr		(x,	0);
	MakeName	(0X2187,	"lcasea");
	MakeByte	(x=0X2188);
	OpChr		(x,	0);
	MakeName	(0X2188,	"lcasez");
	MakeByte	(0X2189);
	MakeName	(0X2189,	"space");
	MakeByte	(x=0X218A);
	OpChr		(x,	0);
	MakeName	(0X218A,	"scswitch");
	MakeByte	(x=0X218B);
	OpChr		(x,	0);
	MakeName	(0X218B,	"skswitch");
	MakeByte	(x=0X218C);
	OpChr		(x,	0);
	MakeName	(0X218C,	"ucasea");
	MakeWord	(0X218D);
	MakeName	(0X218D,	"EnvSiz");
	MakeWord	(0X218F);
	MakeName	(0X218F,	"EnvMax");
	MakeWord	(0X2191);
	MakeName	(0X2191,	"OldEnv");
	MakeWord	(0X2193);
	MakeName	(0X2193,	"UsedEnv");
	MakeWord	(0X2195);
	MakeName	(0X2195,	"PARS_MSG_OFF");
	MakeWord	(0X2197);
	MakeName	(0X2197,	"PARS_MSG_SEG");
	MakeWord	(x=0X2199);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X2199,	"Init_Parse");
	MakeWord	(0X219B);
	MakeName	(0X219B,	"initend");
	MakeWord	(0X219D);
	MakeName	(0X219D,	"TrnSize");
	MakeByte	(0X219F);
	MakeName	(0X219F,	"resetenv");
	MakeByte	(0X21A0);
	MakeName	(0X21A0,	"ext_msg");
	MakeByte	(0X21A1);
	MakeName	(0X21A1,	"eswitch");
	MakeByte	(0X21A2);
	MakeName	(0X21A2,	"dswitch");
	MakeWord	(0X21A3);
	MakeName	(0X21A3,	"parsemes_ptr");
	MakeComm	(0X21A5,	"PARSE_COMMAND");
	MakeWord	(x=0X21A5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X21A5,	"INTERNAT_INFO");
	MakeByte	(0X21A7);
	MakeByte	(0X21A8);
	MakeName	(0X21A8,	"COMMAND_PARMS");
	MakeByte	(0X21A9);
	MakeWord	(x=0X21AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21AE);
	MakeWord	(x=0X21AF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21B1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21B3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21B5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21B7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21B9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21BB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21BD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21BF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21C1);
	MakeWord	(0X21C2);
	MakeName	(0X21C2,	"COMMAND_FILE");
	MakeWord	(0X21C4);
	MakeWord	(x=0X21C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21CA);
	MakeWord	(0X21CB);
	MakeName	(0X21CB,	"COMMAND_SWITCH1");
	MakeWord	(0X21CD);
	MakeWord	(x=0X21CF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21D1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21D3);
	MakeStr		(0X21D4,	0X21D7);
	MakeName	(0X21D4,	"COMMAND_P_SYN");
	MakeWord	(0X21D7);
	MakeName	(0X21D7,	"COMMAND_SWITCH2");
	MakeWord	(0X21D9);
	MakeWord	(x=0X21DB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21DD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21DF);
	MakeStr		(0X21E0,	0X21E3);
	MakeName	(0X21E0,	"COMMAND_F_SYN");
	MakeWord	(0X21E3);
	MakeName	(0X21E3,	"COMMAND_SWITCH3");
	MakeWord	(0X21E5);
	MakeWord	(x=0X21E7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21E9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21EB);
	MakeStr		(0X21EC,	0X21EF);
	MakeName	(0X21EC,	"COMMAND_D_SYN");
	MakeWord	(0X21EF);
	MakeName	(0X21EF,	"COMMAND_SWITCH4");
	MakeWord	(0X21F1);
	MakeWord	(x=0X21F3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X21F5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X21F7);
	MakeStr		(0X21F8,	0X21FB);
	MakeName	(0X21F8,	"COMMAND_E_SYN");
	MakeByte	(0X21FB);
	MakeName	(0X21FB,	"COMMAND_E_VAL");
	MakeByte	(0X21FC);
	MakeByte	(0X21FD);
	MakeComm	(0X21FE,	"ENVSML");
	MakeDword	(x=0X21FE);
	OpDecimal	(x,	0);
	MakeComm	(0X2202,	"ENVBIG");
	MakeDword	(x=0X2202);
	OpDecimal	(x,	0);
	MakeByte	(0X2206);
	MakeByte	(0X2207);
	MakeWord	(0X2208);
	MakeName	(0X2208,	"COMMAND_SWITCH5");
	MakeWord	(0X220A);
	MakeWord	(x=0X220C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X220E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2210);
	MakeStr		(0X2211,	0X2214);
	MakeName	(0X2211,	"COMMAND_C_SYN");
	MakeWord	(0X2214);
	MakeName	(0X2214,	"COMMAND_SWITCH6");
	MakeWord	(0X2216);
	MakeWord	(x=0X2218);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X221A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X221C);
	MakeStr		(0X221D,	0X2222);
	MakeName	(0X221D,	"COMMAND_M_SYN");
	MakeWord	(0X2222);
	MakeName	(0X2222,	"COMMAND_SWITCH7");
	MakeWord	(0X2224);
	MakeWord	(x=0X2226);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X2228);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X222A);
	MakeStr		(0X222B,	0X222E);
	MakeName	(0X222B,	"COMMAND_?_SYN");
	MakeWord	(0X222E);
	MakeName	(0X222E,	"COMMAND_SWITCH8");
	MakeWord	(0X2230);
	MakeWord	(x=0X2232);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X2234);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2236);
	MakeStr		(0X2237,	0X223A);
	MakeName	(0X2237,	"COMMAND_K_SYN");
	MakeWord	(0X223A);
	MakeName	(0X223A,	"COMMAND_SWITCH9");
	MakeWord	(0X223C);
	MakeWord	(x=0X223E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X2240);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2242);
	MakeStr		(0X2243,	0X2246);
	MakeName	(0X2243,	"COMMAND_Y_SYN");
	MakeByte	(0X2246);
	MakeName	(0X2246,	"COMND1_OUTPUT");
	MakeByte	(0X2247);
	MakeName	(0X2247,	"COMND1_CODE");
	MakeWord	(0X2248);
	MakeName	(0X2248,	"COMND1_SYN");
	MakeDword	(0X224A);
	MakeName	(0X224A,	"COMND1_ADDR");
	MakeByte	(0X224E);
	MakeName	(0X224E,	"NO_VAL");
	MakeWord	(0X224F);
	MakeName	(0X224F,	"num_positionals");
	MakeWord	(0X2251);
	MakeName	(0X2251,	"old_parse_ptr");
	MakeByte	(0X2253);
	MakeName	(0X2253,	"BADVERMSG");
	MakeStr		(0X2254,	0X226B);
	MakeByte	(0X226B);
	MakeName	(0X226B,	"OUTENVMSG");
	MakeStr		(0X226C,	0X2286);
	MakeByte	(x=0X2286);
	OpHex		(x,	0);
	MakeName	(0X2286,	"COPYRIGHTMSG");
	MakeStr		(0X2287,	0X22E5);
	MakeByte	(0X22E5);
	MakeName	(0X22E5,	"BADCOMLKMES");
	MakeStr		(0X22E6,	0X230E);
	MakeByte	(0X230E);
	MakeName	(0X230E,	"BADCOMACCMSG");
	MakeStr		(0X230F,	0X2346);
	MakeByte	(0X2346);
	MakeName	(0X2346,	"HELPMSG1");
	MakeStr		(0X2347,	0X237F);
	MakeByte	(x=0X237F);
	OpHex		(x,	0);
	MakeName	(0X237F,	"HELPMSG2");
	MakeStr		(0X2380,	0X23B8);
	MakeByte	(x=0X23B8);
	OpHex		(x,	0);
	MakeName	(0X23B8,	"HELPMSG3");
	MakeStr		(0X23B9,	0X23E3);
	MakeByte	(0X23E3);
	MakeName	(0X23E3,	"HELPMSG4");
	MakeStr		(0X23E4,	0X242C);
	MakeByte	(0X242C);
	MakeName	(0X242C,	"HELPMSG5");
	MakeStr		(0X242D,	0X247A);
	MakeByte	(0X247A);
	MakeName	(0X247A,	"HELPMSG6");
	MakeStr		(0X247B,	0X24C0);
	MakeByte	(0X24C0);
	MakeName	(0X24C0,	"HELPMSG7");
	MakeStr		(0X24C1,	0X250E);
	MakeByte	(0X250E);
	MakeName	(0X250E,	"HELPMSG8");
	MakeStr		(0X250F,	0X2555);
	MakeByte	(0X2555);
	MakeName	(0X2555,	"HELPMSG9");
	MakeStr		(0X2556,	0X25A0);
	MakeByte	(0X25A0);
	MakeName	(0X25A0,	"HELPMSG10");
	MakeStr		(0X25A1,	0X25E0);
	MakeByte	(0X25E0);
	MakeName	(0X25E0,	"HELPMSG11");
	MakeStr		(0X25E1,	0X262C);
	MakeByte	(0X262C);
	MakeName	(0X262C,	"HELPMSG12");
	MakeStr		(0X262D,	0X2679);
	MakeByte	(0X2679);
	MakeName	(0X2679,	"HELPMSG13");
	MakeStr		(0X267A,	0X26A5);
	MakeWord	(x=0X26A5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X26A5,	"HelpMsgs");
	MakeWord	(x=0X26A7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26A9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26AB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26AD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26AF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26B1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26B3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26B5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26B7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26B9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26BB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X26BD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X26BF);
	MakeComm	(0X26C1,	"738h+0E50h = MsgInt2fHandler");
	MakeWord	(0X26C1);
	MakeName	(0X26C1,	"Reloc_Table");
	MakeComm	(0X26C3,	"177h+0E50h = Int_2e");
	MakeWord	(0X26C3);
	MakeComm	(0X26C5,	"035h+0E50h = ContC");
	MakeWord	(0X26C5);
	MakeComm	(0X26C7,	"445h+0E50h = DskErr");
	MakeWord	(0X26C7);
	MakeComm	(0X26C9,	"029h+0E50h = Exec_Ret");
	MakeWord	(0X26C9);
	MakeComm	(0X26CB,	"2A3h+0E50h = TRemCheck");
	MakeWord	(0X26CB);
	MakeComm	(0X26CD,	"422h+0E50h = TrnLodCom1");
	MakeWord	(0X26CD);
	MakeComm	(0X26CF,	"1AEh+0E50h = LodCom");
	MakeWord	(0X26CF);
	MakeComm	(0X26D1,	"77Bh+0E50h = MsgRetriever");
	MakeWord	(0X26D1);
	MakeComm	(0X26D3,	"2C2h+0E50h = THeadFix");
	MakeWord	(0X26D3);
	MakeComm	(0X26D5,	"7F4h+0E50h = Lh_OffUnlink");
	MakeWord	(0X26D5);
	MakeWord	(0X26D7);
	MakeArray	(0X26D7,	0X2);
	MakeName	(0X26D7,	"ResJmpTable");
	MakeByte	(0X26DB);
	MakeName	(0X26DB,	"FirstCom");
	MakeByte	(0X26DC);
	MakeName	(0X26DC,	"DevFlag");
	MakeByte	(0X26DD);
	MakeName	(0X26DD,	"PathFlag");
	MakeByte	(0X26DE);
	MakeArray	(0X26DE,	0X2);
	MakeByte	(x=0X26E0);
	MakeArray	(x,	0X100);
	OpDecimal	(x,	0);
	MakeName	(0X26E0,	"TRANSTART");
	MakeCode	(x=0X27E0);
	OpHex		(x,	1);
	MakeName	(0X27E0,	"SETDRV");
	MakeComm	(0X27E2,	"DOS - SELECT DISK\nDL = new default drive number (0 = A, 1 = B, etc.)\nReturn: AL = number of logical drives");
	MakeCode	(x=0X27E2);
	OpHex		(x,	0);
	MakeName	(0X27E4,	"TCOMMAND");
	MakeComm	(0X27E9,	"-1");
	MakeCode	(x=0X27EC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X27F5);
	OpHex		(x,	1);
	MakeComm	(0X27F7,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X27F7);
	OpHex		(x,	0);
	MakeComm	(0X27F9,	"call far [cs:HEADCALL]");
	MakeComm	(0X2800,	"-1");
	MakeCode	(x=0X2800);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X280C);
	MakeName	(0X280C,	"COMMAND");
	MakeCode	(x=0X2812);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2826);
	OpDecimal	(x,	1);
	MakeCode	(x=0X282C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X283F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2847);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X284E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2851);
	OpHex		(x,	1);
	MakeComm	(0X2853,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2853);
	OpHex		(x,	0);
	MakeCode	(x=0X2856);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X285D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2867);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2871,	"offset INTERNATVARS");
	MakeCode	(x=0X2871);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2874,	"mov ax,INTERNATIONAL*256");
	MakeCode	(x=0X2874);
	OpHex		(x,	1);
	MakeComm	(0X2877,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X2877);
	OpHex		(x,	0);
	MakeCode	(x=0X287F);
	OpDecimal	(x,	1);
	MakeComm	(0X2889,	"-1");
	MakeCode	(x=0X288C);
	OpDecimal	(x,	1);
	MakeComm	(0X2891,	"~1FFh (NOT 511)");
	MakeCode	(x=0X2891);
	OpHex		(x,	1);
	MakeCode	(x=0X289B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X28A7,	"-1");
	MakeCode	(x=0X28A7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X28AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X28B5,	"-1");
	MakeCode	(x=0X28B5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X28C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X28C7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X28CF,	"Y/N question overwrite flag");
	MakeCode	(x=0X28CF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X28D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X28D9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X28DE);
	OpHex		(x,	1);
	MakeComm	(0X28E0,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X28E0);
	OpHex		(x,	0);
	MakeCode	(x=0X28E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X28F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X28FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X2903);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X290E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(0X2918);
	MakeCode	(x=0X291E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2923);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2928);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X292D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X2937,	"mult_shell_get");
	MakeCode	(x=0X293A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X293E);
	OpHex		(x,	1);
	MakeCode	(x=0X2943);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2946,	"- Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE\nES:DI -> ASCIZ full filename of current batch file, with at least the\nfinal filename element uppercased\nDS:DX -> buffer for results");
	MakeCode	(x=0X2946);
	OpHex		(x,	0);
	MakeComm	(0X2948,	"shell_action");
	MakeCode	(x=0X2953);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2958);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X2960);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2969);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X296D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2977);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X297E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2982);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2986);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X299B,	"(SERVERCALL<<8)+9");
	MakeCode	(x=0X299B);
	OpHex		(x,	1);
	MakeComm	(0X299E,	"DOS - 3.1+ internal - FLUSH REDIRECTED PRINTER OUTPUT");
	MakeCode	(x=0X299E);
	OpHex		(x,	0);
	MakeComm	(0X29A0,	"(SERVERCALL<<8)+8");
	MakeComm	(0X29A5,	"DOS - 3.1+ internal - SET REDIRECTED PRINTER MODE\nDL = 00h redirected output is combined\n     01h redirected output placed in separate jobs\nstart new print job now");
	MakeCode	(x=0X29A5);
	OpHex		(x,	0);
	MakeCode	(x=0X29A9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X29AC,	"AX = DOSKey Read Line function");
	MakeCode	(x=0X29AF);
	OpHex		(x,	0);
	MakeComm	(0X29B5,	"Std_Con_String_Input");
	MakeCode	(x=0X29B5);
	OpHex		(x,	1);
	MakeComm	(0X29B7,	"DOS - BUFFERED KEYBOARD INPUT\nDS:DX -> buffer");
	MakeCode	(x=0X29B7);
	OpHex		(x,	0);
	MakeCode	(x=0X29C2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X29C5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X29D1);
	MakeComm	(0X29D4,	"cox_Y_option = yes (1)");
	MakeName	(0X29D4,	"DOCOM0");
	MakeCode	(x=0X29DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X29E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X29EE,	"YES answer");
	MakeComm	(0X29F0,	"NO answer");
	MakeCode	(0X29F3);
	MakeName	(0X29F3,	"DOCOM1");
	MakeCode	(0X29FB);
	MakeName	(0X29FB,	"NULLCOMJ");
	MakeCode	(0X29FE);
	MakeCode	(x=0X2A05);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2A0E,	"[ARG+ARGV_ELE.argflags],wildcard");
	MakeCode	(x=0X2A0E);
	OpHex		(x,	1);
	MakeComm	(0X2A15,	" [ARG+ARG_UNIT.argvcnt]");
	MakeComm	(0X2A1C,	"[ARG+ARGV_ELE.arglen]");
	MakeCode	(x=0X2A23);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2A26);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2A29);
	OpHex		(x,	1);
	MakeComm	(0X2A2C,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X2A2C);
	OpHex		(x,	0);
	MakeComm	(0X2A2E,	"[ARG+ARG_UNIT.argv]");
	MakeCode	(x=0X2A32);
	OpChr		(x,	1);
	MakeCode	(x=0X2A3A);
	OpHex		(x,	1);
	MakeCode	(x=0X2A3D);
	OpChr		(x,	1);
	MakeComm	(0X2A40,	"-1");
	MakeComm	(0X2A44,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(0X2A50);
	MakeName	(0X2A50,	"DRVBADJ");
	MakeCode	(0X2A53);
	MakeName	(0X2A53,	"DRVGD");
	MakeCode	(x=0X2A67);
	OpHex		(x,	1);
	MakeCode	(x=0X2A6B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X2A72,	"DO_SKIPCOM");
	MakeName	(0X2A82,	"DO_SKIPPED");
	MakeName	(0X2A85,	"COMTAIL");
	MakeComm	(0X2A90,	"mov [80h],cl");
	MakeComm	(0X2A95,	"[ARG+ARGV_ELE.argsw_word]");
	MakeComm	(0X2A9D,	"[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]");
	MakeComm	(0X2AA7,	"mov di,FCB ; 5Ch");
	MakeCode	(x=0X2AA7);
	OpHex		(x,	1);
	MakeName	(0X2AA7,	"DOPARSE");
	MakeCode	(x=0X2AAA);
	OpHex		(x,	1);
	MakeComm	(0X2AAD,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X2AAD);
	OpHex		(x,	0);
	MakeComm	(0X2AB2,	"[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]");
	MakeComm	(0X2ABA,	"[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]");
	MakeComm	(0X2AC4,	"mov di,FCB+10h ; 6Ch");
	MakeCode	(x=0X2AC4);
	OpHex		(x,	1);
	MakeName	(0X2AC4,	"DOPARSE2");
	MakeCode	(x=0X2AC7);
	OpHex		(x,	1);
	MakeComm	(0X2ACA,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X2ACA);
	OpHex		(x,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeComm	(0X2ACF,	"[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]");
	MakeComm	(0X2AD7,	"[ARG+ARGV_ELE.argsw_word]");
	MakeComm	(0X2ADD,	"[ARG+ARG_UNIT.argswinfo]");
	MakeCode	(0X2AF5);
	MakeName	(0X2AF5,	"EXTERNALJ1");
	MakeCode	(0X2AF8);
	MakeComm	(0X2AFC,	"-1");
	MakeCode	(x=0X2AFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X2B04,	"mov byte [NullFlag],nullcommand");
	MakeCode	(x=0X2B04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2B09,	"-1");
	MakeCode	(x=0X2B09);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2B13);
	MakeName	(0X2B13,	"EXITJ");
	MakeComm	(0X2B16,	"empty input buffer");
	MakeCode	(0X2B16);
	MakeName	(0X2B16,	"get_cox_y_n_opt");
	MakeName	(0X2B18,	"ccydp0");
	MakeCode	(x=0X2B23);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2B27);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2B2B,	"bit 1 = 1 -> Y/N answer is needed");
	MakeCode	(x=0X2B2B);
	OpHex		(x,	1);
	MakeComm	(0X2B2F,	"(in) Batch file ?");
	MakeCode	(x=0X2B2F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2B35,	"yes, don't check for ESCAPE");
	MakeComm	(0X2B37,	"ESCAPE status \n(bit 4 is zero if Y/N is excaped)");
	MakeCode	(x=0X2B37);
	OpHex		(x,	1);
	MakeCode	(x=0X2B3B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X2B3B,	"ccydp1");
	MakeCode	(x=0X2B44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2B49,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeCode	(0X2B52);
	MakeCode	(0X2B55);
	MakeCode	(x=0X2B5A);
	OpHex		(x,	1);
	MakeComm	(0X2B5C,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X2B5C);
	OpHex		(x,	0);
	MakeComm	(0X2B5E,	"msg number pointer of ' [Y/N]?' (is 1082)");
	MakeCode	(x=0X2B5E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2B65,	"cox_Y_answer number (overwrite Y/N answer letter)");
	MakeCode	(x=0X2B65);
	OpDecimal	(x,	1);
	MakeComm	(0X2B68,	"utility_msg_class");
	MakeComm	(0X2B6D,	"'YN' Yes/No (CL=Y)");
	MakeCode	(x=0X2B6D);
	OpChr		(x,	1);
	MakeCode	(x=0X2B75);
	OpHex		(x,	1);
	MakeComm	(0X2B77,	"DOS - KEYBOARD INPUT, NO ECHO\nReturn: AL = character");
	MakeCode	(x=0X2B77);
	OpHex		(x,	0);
	MakeCode	(x=0X2B7D);
	OpHex		(x,	1);
	MakeComm	(0X2B7F,	"DOS - KEYBOARD INPUT, NO ECHO\nReturn: AL = character");
	MakeCode	(x=0X2B7F);
	OpHex		(x,	0);
	MakeCode	(x=0X2B81);
	OpChr		(x,	1);
	MakeComm	(0X2B85,	"bit 4, question flag");
	MakeCode	(x=0X2B85);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X2B8D,	"ESCAPE ?");
	MakeCode	(0X2B8D);
	MakeComm	(0X2B91,	"(ESCAPE) Clear bit 4 ; ~10h");
	MakeCode	(x=0X2B91);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X2B99,	"uppercase");
	MakeCode	(x=0X2B99);
	OpHex		(x,	1);
	MakeComm	(0X2B9B,	"NO character (N)");
	MakeComm	(0X2BA0,	"cf = 1 -> overwrite NO answer");
	MakeComm	(0X2BA2,	"YES character (Y)");
	MakeCode	(0X2BA2);
	MakeComm	(0X2BA6,	"cf = 0 -> overwrite YES answer");
	MakeCode	(x=0X2BA9);
	OpHex		(x,	1);
	MakeComm	(0X2BAB,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X2BAB);
	OpHex		(x,	0);
	MakeCode	(0X2BB5);
	MakeName	(0X2BB5,	"ROM_SCAN");
	MakeCode	(x=0X2BC0);
	OpHex		(x,	1);
	MakeCode	(0X2BD0);
	MakeCode	(x=0X2BDE);
	OpHex		(x,	1);
	MakeComm	(0X2BE8,	"[es:di+ROM_HEADER.rom_length]");
	MakeCode	(0X2BE8);
	MakeName	(0X2BE8,	"SCAN_LIST");
	MakeCode	(x=0X2BEE);
	OpHex		(x,	1);
	MakeCode	(x=0X2BF0);
	OpHex		(x,	1);
	MakeCode	(x=0X2BF2);
	OpHex		(x,	1);
	MakeComm	(0X2BF5,	"round to 2k");
	MakeCode	(x=0X2BF5);
	OpHex		(x,	1);
	MakeComm	(0X2BF8,	"ROM_HEADER.name_list");
	MakeName	(0X2BFB,	"SCAN_NAME");
	MakeCode	(0X2C09);
	MakeName	(0X2C10,	"SCAN_NEXT");
	MakeCode	(0X2C17);
	MakeName	(0X2C21,	"SCAN_SAVE");
	MakeCode	(0X2C2E);
	MakeName	(0X2C2E,	"ROM_EXEC");
	MakeCode	(x=0X2C31);
	OpHex		(x,	1);
	MakeComm	(0X2C33,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2C33);
	OpHex		(x,	0);
	MakeCode	(x=0X2C35);
	OpHex		(x,	1);
	MakeComm	(0X2C37,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2C37);
	OpHex		(x,	0);
	MakeComm	(0X2C3B,	"(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE");
	MakeCode	(x=0X2C44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2C47,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X2C47);
	OpHex		(x,	0);
	MakeCode	(x=0X2C4F);
	OpHex		(x,	1);
	MakeComm	(0X2C51,	"DOS - 2+ internal - CREATE PSP\nDX = segment number at which to set up PSP\nSI = (DOS 3+) value to place in memory size field at DX:[0002h]");
	MakeCode	(x=0X2C51);
	OpHex		(x,	0);
	MakeCode	(x=0X2C55);
	OpHex		(x,	1);
	MakeCode	(x=0X2C58);
	OpHex		(x,	1);
	MakeComm	(0X2C5A,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X2C5A);
	OpHex		(x,	0);
	MakeCode	(x=0X2C5C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2C60,	"[PDB.ENVIRON]");
	MakeComm	(0X2C68,	"[PDB.BLOCK_LEN]");
	MakeComm	(0X2C72,	"[ARENA.owner]");
	MakeName	(0X2C80,	"GOT_STACK");
	MakeCode	(0X2C9C);
	MakeName	(0X2C9C,	"PROMPTBAT");
	MakeComm	(0X2CA2,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(0X2CA2);
	MakeName	(0X2CA2,	"PROMPTBAT1");
	MakeComm	(0X2CA7,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X2CB1,	"call far [cs:RCH_ADDR]");
	MakeCode	(0X2CB1);
	MakeCode	(x=0X2CBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2CC1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X2CCF);
	MakeCode	(x=0X2CD2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2CD8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X2CE4);
	MakeName	(0X2CE4,	"output_batch_name");
	MakeCode	(x=0X2CE5);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2CE9,	"BATCHSEGMENT.BatFile");
	MakeCode	(x=0X2CE9);
	OpHex		(x,	1);
	MakeCode	(x=0X2CEF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2CFA,	"ext_msg_class");
	MakeCode	(x=0X2CFF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2D02);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2D08,	"one_subst");
	MakeCode	(0X2D0F);
	MakeName	(0X2D0F,	"GETKEYSTROKE");
	MakeComm	(0X2D10,	"(ECS_call SHL 8) OR GetInterimMode");
	MakeCode	(x=0X2D10);
	OpHex		(x,	1);
	MakeComm	(0X2D13,	"DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE");
	MakeCode	(x=0X2D13);
	OpHex		(x,	0);
	MakeComm	(0X2D16,	"(ECS_call SHL 8) OR SetInterimMode");
	MakeComm	(0X2D19,	"InterimMode");
	MakeComm	(0X2D1B,	"DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE\nDL = new mode\n00h return only full characters on DOS keyboard input functions\n01h return partially-formed characters also");
	MakeCode	(x=0X2D1B);
	OpHex		(x,	0);
	MakeCode	(x=0X2D1D);
	OpHex		(x,	1);
	MakeComm	(0X2D20,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X2D20);
	OpHex		(x,	0);
	MakeCode	(x=0X2D22);
	OpHex		(x,	1);
	MakeComm	(0X2D25,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X2D25);
	OpHex		(x,	0);
	MakeComm	(0X2D27,	"(ECS_call SHL 8) OR SetInterimMode");
	MakeComm	(0X2D2B,	"DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE\nDL = new mode\n00h return only full characters on DOS keyboard input functions\n01h return partially-formed characters also");
	MakeCode	(x=0X2D2B);
	OpHex		(x,	0);
	MakeComm	(0X2D2F,	"YES_ECHO");
	MakeCode	(x=0X2D2F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2D2F,	"READBAT");
	MakeCode	(x=0X2D34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X2D3B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2D41);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2D45,	"[BATCHSEGMENT.BatchEOF]");
	MakeCode	(x=0X2D50);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X2D58);
	MakeCode	(x=0X2D5B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2D60);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2D64,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X2D68,	"[BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X2D68);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2D71);
	OpChr		(x,	1);
	MakeCode	(x=0X2D77);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X2D7F,	"No_Echo_Char");
	MakeCode	(x=0X2D7F);
	OpChr		(x,	1);
	MakeComm	(0X2D83,	"NO_ECHO");
	MakeCode	(x=0X2D83);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2D8A);
	MakeCode	(x=0X2D8B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2D93);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2D98);
	OpHex		(x,	1);
	MakeComm	(0X2D9B,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X2D9B);
	OpHex		(x,	0);
	MakeCode	(x=0X2D9D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X2DA8);
	MakeCode	(x=0X2DAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(0X2DB7);
	MakeComm	(0X2DC0,	"COMBUFLEN-1");
	MakeCode	(x=0X2DC0);
	OpDecimal	(x,	1);
	MakeComm	(0X2DCC,	"COMBUFLEN");
	MakeCode	(x=0X2DCC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2DD2);
	OpChr		(x,	1);
	MakeCode	(x=0X2DDB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2DE1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X2DEB,	"NO_ECHO");
	MakeCode	(x=0X2DEB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2DF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X2DFD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2E0C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X2E16);
	MakeCode	(0X2E20);
	MakeCode	(x=0X2E23);
	OpChr		(x,	1);
	MakeCode	(x=0X2E2B);
	OpChr		(x,	1);
	MakeName	(0X2E2B,	"PAROK");
	MakeCode	(x=0X2E36);
	OpHex		(x,	1);
	MakeCode	(x=0X2E39);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2E3D,	"[es:bx+BATCHSEGMENT.BatParm]");
	MakeComm	(0X2E42,	"-1");
	MakeCode	(0X2E4A);
	MakeCode	(x=0X2E4B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2E56,	"COMBUFLEN");
	MakeCode	(x=0X2E56);
	OpDecimal	(x,	1);
	MakeCode	(0X2E5F);
	MakeCode	(0X2E64);
	MakeCode	(0X2E68);
	MakeCode	(x=0X2E6B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2E6E);
	OpChr		(x,	1);
	MakeCode	(x=0X2E7E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2E8D);
	OpChr		(x,	1);
	MakeCode	(x=0X2E91);
	OpChr		(x,	1);
	MakeCode	(x=0X2E97);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2EB1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X2EB1,	"SKIPTOEOL");
	MakeCode	(0X2EBA);
	MakeCode	(0X2EC2);
	MakeName	(0X2EC2,	"FREE_TPA");
	MakeCode	(x=0X2EC3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2EC7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2ECC);
	OpHex		(x,	1);
	MakeComm	(0X2ECE,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X2ECE);
	OpHex		(x,	0);
	MakeCode	(0X2ED2);
	MakeName	(0X2ED2,	"ALLOC_TPA");
	MakeCode	(x=0X2ED3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X2EDA);
	OpHex		(x,	1);
	MakeComm	(0X2EDC,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2EDC);
	OpHex		(x,	0);
	MakeCode	(x=0X2EDF);
	OpHex		(x,	1);
	MakeComm	(0X2EE1,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2EE1);
	OpHex		(x,	0);
	MakeCode	(x=0X2EE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2EE8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X2EED);
	OpHex		(x,	1);
	MakeCode	(x=0X2EF4);
	OpHex		(x,	1);
	MakeName	(0X2EF9,	"CALC_TPA");
	MakeCode	(x=0X2EFB);
	OpHex		(x,	1);
	MakeCode	(x=0X2F03);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2F1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2F20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2F24);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X2F2E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2F3B);
	OpDecimal	(x,	1);
	MakeComm	(0X2F40,	"NOT 511 = NOT 1FFh");
	MakeCode	(x=0X2F40);
	OpHex		(x,	1);
	MakeCode	(x=0X2F43);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X2F48);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X2F48,	"BATCOM");
	MakeCode	(x=0X2F4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2F57,	"skip_ioset");
	MakeComm	(0X2F5A,	"call_in_progress");
	MakeCode	(x=0X2F5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2F65,	"GETECHO");
	MakeCode	(x=0X2F68);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2F6C);
	OpHex		(x,	1);
	MakeCode	(x=0X2F71);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X2F7A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X2F7E,	"call_in_progress");
	MakeCode	(x=0X2F7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2F89,	"[es:BATCHSEGMENT.BatLast]");
	MakeName	(0X2F8E,	"LEAVEBAT");
	MakeCode	(x=0X2F8F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2F9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2F9A,	"STARTBAT");
	MakeCode	(x=0X2FA0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X2FA3,	"AppendTruename");
	MakeComm	(0X2FA6,	"- Multiplex - DOS 4.0 APPEND - SET RETURN FOUND NAME STATE");
	MakeCode	(x=0X2FA6);
	OpHex		(x,	0);
	MakeCode	(x=0X2FA8);
	OpHex		(x,	1);
	MakeComm	(0X2FAF,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X2FAF);
	OpHex		(x,	0);
	MakeComm	(0X2FB6,	"15+BATCHSEGMENT.SIZE+COMBUFLEN+15");
	MakeCode	(x=0X2FB6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FC0);
	OpHex		(x,	1);
	MakeComm	(0X2FC2,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2FC2);
	OpHex		(x,	0);
	MakeCode	(x=0X2FCA);
	OpHex		(x,	1);
	MakeComm	(0X2FCF,	"mov dx,offset TRANGROUP:TranSpaceEnd");
	MakeCode	(x=0X2FD2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FE5);
	OpHex		(x,	1);
	MakeComm	(0X2FE8,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X2FE8);
	OpHex		(x,	0);
	MakeName	(0X2FEB,	"MEM_ERROR");
	MakeCode	(0X2FEE);
	MakeName	(0X2FEE,	"ENOUGH_MEM");
	MakeCode	(x=0X2FEF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2FF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2FFE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X3003,	"[es:BATCHSEGMENT.BatType]");
	MakeComm	(0X3009,	"[es:BATCHSEGMENT.BatLast]");
	MakeCode	(x=0X300E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3014);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X3018,	"[es:BATCHSEGMENT.BatForFlag]");
	MakeCode	(x=0X301D);
	OpHex		(x,	1);
	MakeCode	(x=0X3022);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3025);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X302A,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeName	(0X302A,	"FOR_NOT_ON");
	MakeCode	(x=0X3030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3033);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X3038,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeComm	(0X303D,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X3043,	"[es:BATCHSEGMENT.BatSeek]");
	MakeComm	(0X3047,	"[es:BATCHSEGMENT.BatSeek+2]");
	MakeComm	(0X304C,	"BATCHSEGMENT.BatParm");
	MakeCode	(x=0X3051);
	OpDecimal	(x,	1);
	MakeCode	(x=0X305A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X305D);
	OpDecimal	(x,	1);
	MakeName	(0X3060,	"EACHPARM");
	MakeName	(0X306F,	"MOVPARM");
	MakeCode	(0X307C);
	MakeName	(0X307C,	"ENDPARM");
	MakeCode	(0X3084);
	MakeName	(0X3084,	"HAVPARM");
	MakeCode	(x=0X308E);
	OpHex		(x,	1);
	MakeComm	(0X3090,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X3090);
	OpHex		(x,	0);
	MakeComm	(0X3095,	"-1");
	MakeCode	(x=0X3095);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X309C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X30A2,	"NOBATSING");
	MakeCode	(x=0X30A3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X30A9);
	MakeName	(0X30A9,	"NO_MEMORY");
	MakeComm	(0X30AF,	"ext_msg_class");
	MakeCode	(x=0X30AF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X30B4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X30B7,	"ERROR_NOT_ENOUGH_MEMORY");
	MakeCode	(x=0X30B7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X30C0);
	MakeName	(0X30C0,	"BATCHOFF");
	MakeCode	(x=0X30CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X30D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X30DF,	"NO_ECHO");
	MakeCode	(x=0X30DF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X30E4,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeCode	(x=0X30E9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X30ED,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeCode	(x=0X30F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X30F6,	"[es:BATCHSEGMENT.BatForFlag]");
	MakeCode	(x=0X30FB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X30FF,	"[es:BATCHSEGMENT.BatLast]");
	MakeCode	(x=0X3104);
	OpHex		(x,	1);
	MakeComm	(0X3106,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X3106);
	OpHex		(x,	0);
	MakeCode	(x=0X3109);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X310D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3114);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X311C);
	MakeName	(0X311C,	"STRCPY");
	MakeComm	(0X311F,	"COMBUFLEN");
	MakeCode	(x=0X311F);
	OpDecimal	(x,	1);
	MakeCode	(0X3128);
	MakeCode	(0X3131);
	MakeName	(0X3131,	"GETBATBYT");
	MakeCode	(x=0X3134);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X313E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(0X3149);
	MakeCode	(x=0X314A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X314E,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X3159,	"[es:BATCHSEGMENT.BatSeek]");
	MakeCode	(0X3159);
	MakeComm	(0X315F,	"[es:BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X3173);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X317E);
	OpHex		(x,	1);
	MakeComm	(0X3180,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X3180);
	OpHex		(x,	0);
	MakeComm	(0X3195,	"END_OF_LINE_IN");
	MakeCode	(x=0X3195);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X319A,	"END_OF_LINE_OUT");
	MakeCode	(x=0X319A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X319F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X31A5);
	MakeCode	(x=0X31A9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X31AF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X31B3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X31B8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X31BE,	"-1");
	MakeCode	(x=0X31C1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X31C5,	"^Z for termination?");
	MakeCode	(x=0X31CA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X31CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X31DB,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeCode	(x=0X31E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X31E4,	"\ncmp byte [bx+BATBUF-1],0Ah\nwas a LF present?");
	MakeCode	(x=0X31E4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X31EB,	"BatchEOF == 4 to fake CR-LF");
	MakeCode	(x=0X31F1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X31F5,	"decrement the flag");
	MakeCode	(x=0X31F5);
	OpHex		(x,	1);
	MakeComm	(0X31FA,	"zero,turn batch off");
	MakeComm	(0X3202,	"BatchEOF was 2, return LF");
	MakeComm	(0X3204,	"BatchEOF == 4, \nindicates return fake CR now\nand fake LF next");
	MakeComm	(0X3209,	"return fake LF");
	MakeCode	(0X3209);
	MakeCode	(0X320E);
	MakeCode	(x=0X3217);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X321C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3223);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X322A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3231);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X3238,	"-1");
	MakeCode	(x=0X3238);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3242);
	MakeName	(0X3242,	"IFERRORP");
	MakeCode	(x=0X3243);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3243,	"IFFORERROR");
	MakeCode	(0X3249);
	MakeName	(0X3249,	"_$IF");
	MakeCode	(x=0X324A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X324E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3259);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X325E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3264);
	OpHex		(x,	1);
	MakeCode	(x=0X3270);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X327E);
	MakeComm	(0X3289,	"Try lower case");
	MakeCode	(x=0X3289);
	OpHex		(x,	1);
	MakeCode	(x=0X32A9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X32A9,	"IFNOT");
	MakeCode	(x=0X32AD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X32B3);
	MakeCode	(x=0X32C3);
	OpChr		(x,	1);
	MakeCode	(0X32CE);
	MakeCode	(x=0X32CF);
	OpChr		(x,	1);
	MakeName	(0X32E8,	"IFERRORJ2");
	MakeComm	(0X32EF,	"-1");
	MakeCode	(0X32F3);
	MakeCode	(0X32F6);
	MakeCode	(0X3300);
	MakeName	(0X3300,	"IFEXISTS");
	MakeComm	(0X3306,	"DIRBUF");
	MakeCode	(x=0X3306);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3309);
	OpHex		(x,	1);
	MakeComm	(0X330C,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X330C);
	OpHex		(x,	0);
	MakeCode	(x=0X3311);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3315,	"mov ax,ARG\n(mov ax,ARG+ARG_UNIT.argv)");
	MakeCode	(x=0X3315);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X331B,	"[bx+ARGV_ELE.argpointer] \nmov dx,[bx+0]");
	MakeComm	(0X331D,	"IFEXIST_ATTR ; filetypes to search for");
	MakeCode	(x=0X3320);
	OpHex		(x,	1);
	MakeComm	(0X3323,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3323);
	OpHex		(x,	0);
	MakeComm	(0X332B,	"-1");
	MakeCode	(0X332B);
	MakeCode	(x=0X332D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X332D,	"IFRET");
	MakeCode	(0X333D);
	MakeCode	(x=0X3342);
	OpHex		(x,	1);
	MakeCode	(x=0X334E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3352);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X335C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3360,	"-1");
	MakeCode	(x=0X3360);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3369);
	MakeName	(0X3369,	"IFERRORJ3");
	MakeCode	(x=0X336C);
	OpDecimal	(x,	1);
	MakeName	(0X336C,	"IFERLEV");
	MakeName	(0X3370,	"GETNUMLP");
	MakeCode	(x=0X337A);
	OpChr		(x,	1);
	MakeCode	(0X3386);
	MakeName	(0X3386,	"GOTNUM");
	MakeCode	(x=0X3387);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X338B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X339A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X339A,	"SHIFT");
	MakeCode	(x=0X339E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X33A5,	"SHIFT_RETN");
	MakeCode	(0X33A6);
	MakeName	(0X33A6,	"SHIFT1");
	MakeComm	(0X33AA,	"BATCHSEGMENT.BatParm");
	MakeComm	(0X33B5,	"-1");
	MakeComm	(0X33BC,	"-1");
	MakeName	(0X33C0,	"SKIPCRLP");
	MakeCode	(x=0X33CD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X33CD,	"SKIPDELIM");
	MakeCode	(0X33DF);
	MakeName	(0X33E0,	"GOTO_RETN");
	MakeCode	(0X33E1);
	MakeName	(0X33E1,	"_$CALL");
	MakeCode	(x=0X33E5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X33EB,	"length_call");
	MakeCode	(x=0X33EE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X33F1,	"COMBUFLEN-length_call");
	MakeCode	(x=0X33F1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X33FB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X33FF,	"call_in_progress");
	MakeCode	(x=0X33FF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3404);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3409);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3415);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3415,	"GOTO");
	MakeCode	(x=0X3419);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X3424);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X3428,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X342C,	"[BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X342C);
	OpDecimal	(x,	0);
	MakeComm	(0X3430,	"[BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X3439,	" FCB+1");
	MakeCode	(x=0X3439);
	OpHex		(x,	1);
	MakeCode	(x=0X343C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3446);
	OpDecimal	(x,	1);
	MakeName	(0X3446,	"NOINC");
	MakeComm	(0X344B,	"mov [es:GOTOLEN],cx");
	MakeCode	(x=0X344B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3455);
	OpChr		(x,	1);
	MakeName	(0X3459,	"LABLKLP");
	MakeCode	(x=0X3465);
	OpChr		(x,	1);
	MakeCode	(x=0X3469);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X3469,	"LABLKTST");
	MakeName	(0X3471,	"BADGOTO");
	MakeCode	(x=0X3479);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X347F);
	MakeName	(0X347F,	"CHKLABEL");
	MakeComm	(0X3484,	"FCB+1");
	MakeCode	(x=0X3484);
	OpHex		(x,	1);
	MakeComm	(0X3487,	"mov cx,[es:GOTOLEN]");
	MakeCode	(x=0X3487);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X348E);
	MakeName	(0X348E,	"NEXTCHRLP");
	MakeName	(0X3493,	"GOTBYTE");
	MakeCode	(x=0X34AB);
	OpHex		(x,	1);
	MakeName	(0X34AB,	"NOTKANJ1");
	MakeCode	(x=0X34B4);
	OpHex		(x,	1);
	MakeName	(0X34B4,	"TRYUPPER");
	MakeName	(0X34B9,	"KNEXTLABCHR");
	MakeName	(0X34BB,	"NEXTLABCHR");
	MakeComm	(0X34C1,	"cmp [es:GOTOLEN],8");
	MakeCode	(x=0X34C1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X34CD,	"GOTOCONT");
	MakeName	(0X34D1,	"TONEXTBATLIN");
	MakeName	(0X34D8,	"SKIPLFEED");
	MakeCode	(x=0X34DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X34E0,	"BATCHSEGMENT.BatchEOF");
	MakeCode	(0X34EB);
	MakeName	(0X34EB,	"BATCLOSE");
	MakeCode	(x=0X34F5);
	OpHex		(x,	1);
	MakeComm	(0X34F7,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X34F7);
	OpHex		(x,	0);
	MakeCode	(x=0X34F9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X34FF);
	MakeName	(0X34FF,	"BATOPEN");
	MakeCode	(x=0X3500);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X3504,	"BATCHSEGMENT.BatFile");
	MakeCode	(x=0X3504);
	OpHex		(x,	1);
	MakeCode	(x=0X3507);
	OpHex		(x,	1);
	MakeComm	(0X350A,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X350A);
	OpHex		(x,	0);
	MakeComm	(0X350E,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X3512,	"[BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X3512);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3517);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X351D);
	OpHex		(x,	1);
	MakeComm	(0X3520,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X3520);
	OpHex		(x,	0);
	MakeComm	(0X3522,	"-1");
	MakeCode	(x=0X3522);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X352A);
	MakeCode	(0X3538);
	MakeName	(0X3538,	"free_batch");
	MakeCode	(x=0X3539);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X3543,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeCode	(x=0X3550);
	OpHex		(x,	1);
	MakeComm	(0X3552,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X3552);
	OpHex		(x,	0);
	MakeComm	(0X3555,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeComm	(0X355A,	"[es:BATCHSEGMENT.BatLast]");
	MakeCode	(x=0X355F);
	OpHex		(x,	1);
	MakeComm	(0X3561,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X3561);
	OpHex		(x,	0);
	MakeCode	(x=0X3563);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3567);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X356D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3571);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3579);
	MakeName	(0X3579,	"FORTERM");
	MakeCode	(x=0X3585);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X358D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X3594,	"-1");
	MakeCode	(x=0X3594);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X359C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X35A3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(0X35B1);
	MakeCode	(x=0X35B3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X35BA,	"FOR_INFO.FORDMA");
	MakeCode	(x=0X35BD);
	OpHex		(x,	1);
	MakeComm	(0X35C0,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X35C0);
	OpHex		(x,	0);
	MakeComm	(0X35C2,	"FOR_INFO.FOR_EXPAND");
	MakeComm	(0X35C9,	"FOR_INFO.FOR_MINARG");
	MakeComm	(0X35D1,	"FOR_INFO.FOR_MAXARG");
	MakeComm	(0X35D7,	"FOR_INFO.FOR_ARGS");
	MakeComm	(0X35DD,	"[bx+ARGV_ELE.argstartel]");
	MakeComm	(0X35E0,	"[bx+ARGV_ELE.argpointer]");
	MakeComm	(0X35E2,	"[bx+ARGV_ELE.argflags],path_sep");
	MakeCode	(x=0X35E2);
	OpHex		(x,	1);
	MakeComm	(0X35EA,	"lparen");
	MakeCode	(x=0X35EA);
	OpChr		(x,	1);
	MakeCode	(x=0X35F2);
	OpChr		(x,	1);
	MakeComm	(0X35FE,	"[FOR_INFO.FOR_EXPAND]");
	MakeComm	(0X3605,	"wildcard");
	MakeCode	(x=0X3605);
	OpHex		(x,	1);
	MakeComm	(0X360B,	"[bx+ARGV_ELE.arglen]");
	MakeCode	(0X3610);
	MakeCode	(x=0X3613);
	OpHex		(x,	1);
	MakeComm	(0X3616,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3616);
	OpHex		(x,	0);
	MakeCode	(x=0X361B);
	OpHex		(x,	1);
	MakeComm	(0X361E,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call");
	MakeCode	(x=0X361E);
	OpHex		(x,	0);
	MakeComm	(0X3631,	"FOR_INFO.FORBUF");
	MakeComm	(0X363D,	"FOR_INFO.FORDMA+FIND_BUF.PNAME");
	MakeCode	(x=0X3651);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3654,	"[FOR_INFO.FOR_COM_START]");
	MakeComm	(0X3658,	"[FOR_INFO.FOR_VAR]");
	MakeComm	(0X365E,	"FOR_INFO.FOR_ARGS = 0");
	MakeComm	(0X3664,	"[bx+ARGV_ELE.arg_ocomptr]");
	MakeCode	(x=0X366B);
	OpChr		(x,	1);
	MakeComm	(0X3675,	"FOR_INFO.FORBUF");
	MakeCode	(0X3683);
	MakeCode	(x=0X3695);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X369C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36B7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X36BD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X36CB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X36D5);
	MakeName	(0X36D5,	"FORNESTERRJ");
	MakeCode	(0X36DB);
	MakeName	(0X36DB,	"FORERRORJ");
	MakeCode	(0X36DE);
	MakeName	(0X36DE,	"_$FOR");
	MakeCode	(x=0X36E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36FC);
	OpChr		(x,	1);
	MakeComm	(0X370C,	"~2020h (not 2020h)");
	MakeCode	(x=0X370C);
	OpHex		(x,	1);
	MakeComm	(0X370F,	"\"IN\"");
	MakeCode	(x=0X370F);
	OpChr		(x,	1);
	MakeName	(0X3719,	"CHECKLPAREN");
	MakeComm	(0X371E,	"lparen");
	MakeCode	(x=0X371E);
	OpChr		(x,	1);
	MakeName	(0X371E,	"LPCHECK");
	MakeComm	(0X3727,	"rparen");
	MakeCode	(x=0X3727);
	OpChr		(x,	1);
	MakeComm	(0X372F,	"[bx+ARGV_ELE.argpointer] ; [bx+0]");
	MakeCode	(0X372F);
	MakeComm	(0X3731,	"[bx+ARGV_ELE.arglen]");
	MakeCode	(0X3737);
	MakeComm	(0X373C,	"db 29h,0 ; db ')',0");
	MakeCode	(x=0X373C);
	OpHex		(x,	1);
	MakeCode	(0X3744);
	MakeCode	(0X3747);
	MakeCode	(x=0X374F);
	OpChr		(x,	1);
	MakeCode	(0X375C);
	MakeComm	(0X3761,	"db 29h,0 ; db ')',0");
	MakeCode	(x=0X3761);
	OpHex		(x,	1);
	MakeComm	(0X376C,	"and ax,~2020h");
	MakeCode	(x=0X376C);
	OpHex		(x,	1);
	MakeComm	(0X376F,	"\"DO\" ; 4F44h");
	MakeCode	(x=0X376F);
	OpChr		(x,	1);
	MakeComm	(0X378B,	"FOR_INFO.size-ARG_UNIT.SIZE");
	MakeCode	(x=0X378B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3792);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X37A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X37AC,	"[es:FOR_INFO.FOR_MINARG]");
	MakeComm	(0X37B1,	"[es:FOR_INFO.FOR_MAXARG]");
	MakeComm	(0X37B6,	"[es:FOR_INFO.FOR_COM_START]");
	MakeComm	(0X37BB,	"[es:FOR_INFO.FOR_EXPAND]");
	MakeComm	(0X37C4,	"[es:FOR_INFO.FOR_VAR]");
	MakeCode	(x=0X37CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X37CF,	"-1");
	MakeCode	(x=0X37CF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X37D7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X37DF,	"ext_msg_class");
	MakeCode	(0X37DF);
	MakeCode	(x=0X37E4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X37E7,	"ERROR_NOT_ENOUGH_MEMORY");
	MakeCode	(0X37F0);
	MakeName	(0X37F0,	"NEXTARG");
	MakeComm	(0X37F1,	"[ARG+ARG_UNIT.argvcnt]");
	MakeComm	(0X37F9,	"ARG+ARG_UNIT.argv ; ARG");
	MakeCode	(x=0X37F9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X37FF,	"[bx+ARGV_ELE.argpointer] \nmov si,[bx+0]");
	MakeCode	(0X3804);
	MakeCode	(0X3806);
	MakeName	(0X3806,	"FORNESTERR");
	MakeCode	(x=0X380B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X380E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X3816,	"-1");
	MakeCode	(x=0X3816);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X381C,	"NOFORP3");
	MakeCode	(0X3820);
	MakeName	(0X3820,	"FOROFF");
	MakeCode	(x=0X3827);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3832);
	OpHex		(x,	1);
	MakeComm	(0X3834,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X3834);
	OpHex		(x,	0);
	MakeCode	(x=0X3837);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X383E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3847);
	MakeName	(0X3847,	"CATALOG");
	MakeCode	(0X3858);
	MakeName	(0X3858,	"catalog1");
	MakeComm	(0X385E,	"mask.bare");
	MakeCode	(x=0X385E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3869);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3870);
	MakeName	(0X3870,	"catalog2");
	MakeComm	(0X3873,	"DIRBUF");
	MakeCode	(x=0X3873);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3876);
	OpHex		(x,	1);
	MakeComm	(0X3878,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X3878);
	OpHex		(x,	0);
	MakeComm	(0X387A,	"FCB");
	MakeCode	(x=0X387A);
	OpHex		(x,	1);
	MakeComm	(0X387E,	"wildcard character");
	MakeCode	(x=0X387E);
	OpChr		(x,	1);
	MakeCode	(x=0X3880);
	OpDecimal	(x,	1);
	MakeName	(0X3885,	"catCrunch");
	MakeCode	(x=0X388A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3894,	"mask cratio\ncompression ratio wanted?");
	MakeCode	(x=0X3894);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X389C,	"yes, try to open CVF file");
	MakeComm	(0X38A1,	"not (mask cratio)");
	MakeCode	(x=0X38A1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X38A6,	"catalog4");
	MakeComm	(0X38AE,	"mask.subd");
	MakeCode	(x=0X38AE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X38BB,	"mask.bare");
	MakeCode	(x=0X38BB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X38BB,	"catalog3");
	MakeCode	(x=0X38C3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X38CF,	"mask.dev");
	MakeCode	(x=0X38CF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X38CF,	"catRecErr");
	MakeComm	(0X38D7,	"mask.baddir");
	MakeCode	(x=0X38D7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X38DF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X38E4);
	MakeName	(0X38E4,	"catNoFiles");
	MakeComm	(0X38E7,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X38EA,	"ext_msg_class");
	MakeCode	(x=0X38EA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X38EF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X38F2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X38F7);
	MakeName	(0X38F7,	"catExtErr1");
	MakeComm	(0X38FA,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X38FA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X3901,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X3901);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3907,	"close Compressed Volume File if cratio");
	MakeCode	(x=0X3907);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X3907,	"catExtErr2");
	MakeName	(0X3912,	"catErr");
	MakeComm	(0X3915,	"mask cratio");
	MakeCode	(x=0X3915);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X3915,	"catRet");
	MakeName	(0X3920,	"catRetn");
	MakeCode	(x=0X3921);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3921,	"SetDefaults");
	MakeCode	(x=0X3924);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3928);
	OpChr		(x,	1);
	MakeCode	(x=0X392E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3936);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3939);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X393C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X393F,	"ATTR_HIDDEN+ATTR_SYSTEM");
	MakeCode	(x=0X393F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3944);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3947);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X394B);
	MakeName	(0X394B,	"ParseEnvironment");
	MakeComm	(0X3953,	"-1");
	MakeComm	(0X395B,	"-1");
	MakeCode	(x=0X395B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3960);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3967);
	OpHex		(x,	1);
	MakeName	(0X3967,	"ParseCmdLine");
	MakeComm	(0X396D,	"-1");
	MakeCode	(0X3975);
	MakeComm	(0X3977,	"INTERNATVARS");
	MakeCode	(x=0X3977);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3977,	"SetCollatingTable");
	MakeCode	(x=0X397A);
	OpHex		(x,	1);
	MakeComm	(0X397D,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X397D);
	OpHex		(x,	0);
	MakeComm	(0X3986,	"(GETEXTCNTRY<<8)+SETCOLLATE\nAH = 'Get Extended Country Info'\nAL = 'Get Pointer to Collating Table'");
	MakeComm	(0X3989,	"-1");
	MakeComm	(0X398C,	"buffer length");
	MakeComm	(0X398F,	"default country ID");
	MakeCode	(x=0X3991);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3994,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X3994);
	OpHex		(x,	0);
	MakeComm	(0X3998,	"mov byte [CountryPtrId],0");
	MakeCode	(x=0X3998);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X399E,	"(inmem,lcase,bare,subd,pagd,wide,cratio)\n\nmask bare");
	MakeCode	(x=0X399E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X399E,	"SetOptions");
	MakeComm	(0X39A6,	"not mask wide");
	MakeCode	(x=0X39A6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X39AB,	"(mask bare) or (mask wide)");
	MakeCode	(x=0X39AB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X39B3,	"not mask cratio");
	MakeCode	(x=0X39B3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X39B9);
	OpHex		(x,	1);
	MakeComm	(0X39BE,	"[CRT_Rows]");
	MakeComm	(0X39C6,	"LINESPERPAGE");
	MakeCode	(x=0X39C6);
	OpDecimal	(x,	1);
	MakeName	(0X39CA,	"setopts3");
	MakeCode	(x=0X39CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X39CF,	"(IOCTL<<8)+GENERIC_IOCTL_HANDLE");
	MakeComm	(0X39D2,	"STDOUT");
	MakeComm	(0X39D5,	"IOC_SC (screen)");
	MakeComm	(0X39D7,	"get_generic");
	MakeCode	(x=0X39D7);
	OpHex		(x,	1);
	MakeCode	(x=0X39D9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X39DC,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X39DC);
	OpHex		(x,	0);
	MakeCode	(x=0X39DE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X39E1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X39E4,	"NORMPERLIN");
	MakeCode	(x=0X39E4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X39E9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X39F1,	"WIDEPERLIN");
	MakeCode	(x=0X39F1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X39F6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpChr		(x,	1);
	MakeCode	(x=0X39FD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3A00,	"~20h ; not 20h \ncapitalize ASCII drive letter");
	MakeCode	(x=0X3A00);
	OpHex		(x,	1);
	MakeComm	(0X3A02,	"sub al,40h\nconvert to 1-based number (1=A)");
	MakeCode	(x=0X3A02);
	OpChr		(x,	1);
	MakeComm	(0X3A04,	"[FCB]");
	MakeCode	(0X3A08);
	MakeName	(0X3A08,	"CrunchPath");
	MakeComm	(0X3A0D,	"mask.dev");
	MakeCode	(x=0X3A0D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3A14);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3A18,	"-1");
	MakeCode	(x=0X3A18);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3A20);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3A2A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3A30);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3A37);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3A3E,	"mask.baddir");
	MakeCode	(x=0X3A3E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3A45);
	OpChr		(x,	1);
	MakeCode	(x=0X3A4C);
	OpChr		(x,	1);
	MakeCode	(x=0X3A58);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X3A5F,	"FCB");
	MakeCode	(x=0X3A5F);
	OpHex		(x,	1);
	MakeCode	(x=0X3A62);
	OpHex		(x,	1);
	MakeComm	(0X3A65,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X3A65);
	OpHex		(x,	0);
	MakeCode	(0X3A6A);
	MakeCode	(0X3A6C);
	MakeName	(0X3A6C,	"InstallCtrlC");
	MakeCode	(x=0X3A6D);
	OpHex		(x,	1);
	MakeComm	(0X3A70,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X3A70);
	OpHex		(x,	0);
	MakeCode	(x=0X3A72);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3A76);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3A7B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3A7E);
	OpHex		(x,	1);
	MakeComm	(0X3A81,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X3A81);
	OpHex		(x,	0);
	MakeCode	(0X3A84);
	MakeName	(0X3A84,	"ListSubds");
	MakeCode	(x=0X3A87);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3A99,	"ERROR_PATH_NOT_FOUND");
	MakeCode	(0X3AA0);
	MakeCode	(x=0X3AA7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3ABA);
	OpChr		(x,	1);
	MakeCode	(0X3ACA);
	MakeComm	(0X3ACD,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X3AD2,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3AD2);
	OpDecimal	(x,	1);
	MakeComm	(0X3AD9,	"\n[DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY");
	MakeCode	(x=0X3AD9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X3AD9,	"CheckChild");
	MakeComm	(0X3AE0,	"[DIRBUF+FIND_BUF.PNAME]");
	MakeCode	(x=0X3AE0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpChr		(x,	1);
	MakeCode	(x=0X3AE7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3AF1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3AFB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3B00);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3B06);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3B06,	"CmpEntry");
	MakeCode	(x=0X3B15);
	OpHex		(x,	1);
	MakeCode	(x=0X3B19);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X3B24);
	MakeName	(0X3B2D,	"ceDone");
	MakeWord	(x=0X3B2E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X3B2E,	"FieldCmps");
	MakeWord	(x=0X3B30);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3B32);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3B34);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3B36);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3B38);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3B3A);
	MakeName	(0X3B3A,	"CmpName");
	MakeComm	(0X3B3E,	"entry.filename");
	MakeComm	(0X3B41,	"entry.filename");
	MakeComm	(0X3B44,	"size entry.filename");
	MakeCode	(0X3B49);
	MakeName	(0X3B49,	"CmpExt");
	MakeComm	(0X3B4D,	"entry.fileext");
	MakeComm	(0X3B50,	"entry.fileext");
	MakeComm	(0X3B53,	"size entry.fileext");
	MakeComm	(0X3B56,	"CountryPtrId");
	MakeCode	(x=0X3B56);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X3B56,	"CmpStr");
	MakeCode	(x=0X3B60);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3B6A,	"cnNextChar");
	MakeName	(0X3B73,	"cn1");
	MakeName	(0X3B7C,	"cn2");
	MakeCode	(0X3B84);
	MakeName	(0X3B84,	"cnNoCollTable");
	MakeCode	(0X3B88);
	MakeName	(0X3B88,	"CmpTime");
	MakeComm	(0X3B8C,	"entry.filedate + size entry.filedate - 1");
	MakeCode	(x=0X3B8C);
	OpDecimal	(x,	1);
	MakeComm	(0X3B8F,	"entry.filedate + size entry.filedate - 1");
	MakeCode	(x=0X3B8F);
	OpDecimal	(x,	1);
	MakeComm	(0X3B92,	"size entry.filetime + size entry.filedate");
	MakeCode	(0X3B9B);
	MakeName	(0X3B9B,	"CmpSize");
	MakeCode	(x=0X3B9F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3BA2);
	OpDecimal	(x,	1);
	MakeComm	(0X3BAE,	"entry.fileattr");
	MakeCode	(x=0X3BAE);
	OpDecimal	(x,	1);
	MakeName	(0X3BAE,	"CmpType");
	MakeCode	(x=0X3BB2);
	OpDecimal	(x,	1);
	MakeComm	(0X3BB6,	"(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY");
	MakeCode	(x=0X3BB6);
	OpHex		(x,	1);
	MakeComm	(0X3BBC,	" es:[bx].compratio");
	MakeCode	(x=0X3BBC);
	OpDecimal	(x,	1);
	MakeName	(0X3BBC,	"CmpCratio");
	MakeCode	(x=0X3BC0);
	OpDecimal	(x,	1);
	MakeComm	(0X3BC5,	"ATTR_HIDDEN+ATTR_SYSTEM");
	MakeCode	(x=0X3BC5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X3BC5,	"DefaultAttr");
	MakeCode	(x=0X3BCA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3BD1,	"mask subd");
	MakeCode	(x=0X3BD1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X3BD1,	"DisplayTotals");
	MakeCode	(x=0X3BDF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3BE8,	"mask cratio");
	MakeCode	(x=0X3BE8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3BF0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3BF3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3BF6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3BF9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3BFE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3C01);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3C04);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3C0C);
	OpHex		(x,	1);
	MakeComm	(0X3C12,	"DOS - 2+ - GET DISK SPACE\nDL = drive code (0 = default, 1 = A, 2 = B, etc.)");
	MakeCode	(x=0X3C12);
	OpHex		(x,	0);
	MakeComm	(0X3C14,	"-1");
	MakeCode	(x=0X3C1D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3C20);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3C24);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3C2E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3C2E,	"FileIsDevice");
	MakeCode	(x=0X3C34);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3C3E);
	OpHex		(x,	1);
	MakeComm	(0X3C40,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3C40);
	OpHex		(x,	0);
	MakeComm	(0X3C46,	"[DIRBUF+21],40h\n[DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE");
	MakeCode	(x=0X3C46);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X3C51);
	MakeCode	(x=0X3C52);
	OpChr		(x,	1);
	MakeCode	(x=0X3C54);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3C65);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3C65,	"FindFirst");
	MakeCode	(x=0X3C6A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3C6A,	"FindNext");
	MakeName	(0X3C6D,	"ffFindEntry");
	MakeComm	(0X3C6E,	"mask.inmem");
	MakeCode	(x=0X3C6E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X3C7B);
	MakeName	(0X3C7B,	"ffDisk");
	MakeCode	(x=0X3C7F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X3C8D);
	MakeCode	(x=0X3C93);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3C93,	"FindInMem");
	MakeComm	(0X3CAD,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3CAD);
	OpDecimal	(x,	1);
	MakeCode	(0X3CB3);
	MakeCode	(x=0X3CBB);
	OpDecimal	(x,	1);
	MakeName	(0X3CBB,	"FindNextChild");
	MakeComm	(0X3CC4,	"002Ah");
	MakeCode	(x=0X3CC4);
	OpChr		(x,	1);
	MakeComm	(0X3CC8,	"'*.'");
	MakeComm	(0X3CD2,	"ATTR_DIRECTORY");
	MakeCode	(x=0X3CD5);
	OpHex		(x,	1);
	MakeComm	(0X3CD7,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3CD7);
	OpHex		(x,	0);
	MakeCode	(x=0X3CE1);
	OpHex		(x,	1);
	MakeComm	(0X3CE3,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call");
	MakeCode	(x=0X3CE3);
	OpHex		(x,	0);
	MakeCode	(0X3CEC);
	MakeComm	(0X3CEF,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3CEF);
	OpDecimal	(x,	1);
	MakeCode	(0X3D06);
	MakeCode	(x=0X3D08);
	OpDecimal	(x,	1);
	MakeCode	(0X3D0D);
	MakeName	(0X3D0D,	"FindOneInMem");
	MakeComm	(0X3D1A,	"size EntryStruc (22 = 21 + compratio)");
	MakeCode	(x=0X3D1A);
	OpDecimal	(x,	1);
	MakeName	(0X3D1A,	"FindNextInMem");
	MakeCode	(0X3D1F);
	MakeCode	(0X3D21);
	MakeName	(0X3D21,	"GetEnvValue");
	MakeCode	(x=0X3D22);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3D30);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3D3B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3D40,	"[FCB-7]");
	MakeCode	(0X3D40);
	MakeName	(0X3D40,	"GetFirst");
	MakeComm	(0X3D45,	"mov byte [FCB-1],ATTR_ALL");
	MakeComm	(0X3D4A,	"FCB-7");
	MakeCode	(x=0X3D4A);
	OpHex		(x,	1);
	MakeCode	(x=0X3D4D);
	OpHex		(x,	1);
	MakeComm	(0X3D4F,	"DOS - SEARCH FIRST USING FCB\nDS:DX -> FCB");
	MakeCode	(x=0X3D4F);
	OpHex		(x,	0);
	MakeCode	(x=0X3D51);
	OpHex		(x,	1);
	MakeCode	(x=0X3D57);
	OpHex		(x,	1);
	MakeName	(0X3D57,	"GetNext");
	MakeCode	(x=0X3D5A);
	OpHex		(x,	1);
	MakeComm	(0X3D5C,	"DOS - SEARCH NEXT USING FCB\nDS:DX -> FCB\nReturn: AL = status");
	MakeCode	(x=0X3D5C);
	OpHex		(x,	0);
	MakeCode	(x=0X3D5E);
	OpHex		(x,	1);
	MakeComm	(0X3D62,	"\n[DIRBUF+8+DIR_ENTRY.DIR_ATTR]");
	MakeCode	(x=0X3D62);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3D62,	"gfFound");
	MakeCode	(x=0X3D65);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3D6B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3D73,	"gfRet");
	MakeCode	(0X3D74);
	MakeName	(0X3D74,	"ListDir");
	MakeComm	(0X3D76,	"zero file count");
	MakeCode	(x=0X3D76);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3D79,	"zero file size accumulator");
	MakeCode	(x=0X3D79);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3D7C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3D7F,	"zero count clusters used");
	MakeCode	(x=0X3D7F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3D82,	"zero count compressed sectors used");
	MakeCode	(x=0X3D82);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3D85);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3D88,	"check for sort code");
	MakeCode	(x=0X3D88);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3D8F,	"load entries for sorted listing");
	MakeCode	(0X3D9A);
	MakeComm	(0X3DAF,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(0X3DAF);
	MakeComm	(0X3DB4,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3DB4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3DBC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3DC8);
	MakeName	(0X3DC8,	"LoadEntries");
	MakeCode	(x=0X3DC9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3DCF,	" ~mask.inmem ; not mask.inmem");
	MakeCode	(x=0X3DCF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3DE1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3DE6,	"size EntryStruc+2 (23 + compratio)");
	MakeCode	(x=0X3DE6);
	OpDecimal	(x,	1);
	MakeCode	(0X3DF0);
	MakeComm	(0X3DF4,	"mask.inmem");
	MakeCode	(x=0X3DF4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X3DFC,	"DIRBUF+8");
	MakeCode	(x=0X3DFC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3DFC,	"LoadEntry");
	MakeCode	(x=0X3E02);
	OpDecimal	(x,	1);
	MakeComm	(0X3E09,	"(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1");
	MakeCode	(x=0X3E09);
	OpDecimal	(x,	1);
	MakeComm	(0X3E11,	"ATTR_DIRECTORY");
	MakeCode	(x=0X3E11);
	OpHex		(x,	1);
	MakeComm	(0X3E18,	"mask.cratio");
	MakeCode	(x=0X3E18);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X3E24);
	MakeCode	(0X3E35);
	MakeComm	(0X3E3D,	"no sort");
	MakeCode	(x=0X3E3D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X3E3D,	"NoOrder");
	MakeComm	(0X3E42,	"no error");
	MakeCode	(0X3E44);
	MakeName	(0X3E44,	"OnOffSw");
	MakeCode	(x=0X3E46);
	OpHex		(x,	1);
	MakeCode	(x=0X3E48);
	OpHex		(x,	1);
	MakeCode	(x=0X3E4F);
	OpHex		(x,	1);
	MakeCode	(x=0X3E55);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3E5B);
	MakeCode	(x=0X3E5D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3E63);
	MakeName	(0X3E63,	"ParseAttr");
	MakeCode	(x=0X3E64);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3E69,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(x=0X3E74);
	OpChr		(x,	1);
	MakeCode	(x=0X3E7A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3E7D,	"NUM_ATTR_LTRS");
	MakeComm	(0X3E86,	"NUM_ATTR_LTRS");
	MakeCode	(x=0X3E8D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3E93);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3E99);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3E9F);
	MakeCode	(0X3EA5);
	MakeCode	(x=0X3EA8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3EA8,	"Parse_Line");
	MakeComm	(0X3EB0,	"END_OF_LINE");
	MakeComm	(0X3EBC,	" RESULT_FILESPEC");
	MakeCode	(0X3EC8);
	MakeCode	(0X3ECD);
	MakeCode	(0X3ECE);
	MakeName	(0X3ECE,	"ParseOrder");
	MakeComm	(0X3ED0,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(x=0X3ED3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3EDC,	"sort 1st by group");
	MakeComm	(0X3EE0,	"then by name");
	MakeComm	(0X3EE4,	"then by extension");
	MakeCode	(0X3EEA);
	MakeCode	(x=0X3EF1);
	OpChr		(x,	1);
	MakeCode	(x=0X3EF5);
	OpHex		(x,	1);
	MakeCode	(x=0X3EF8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3EFB,	"NUM_ORDER_LTRS");
	MakeComm	(0X3F04,	"NUM_ORDER_LTRS");
	MakeComm	(0X3F07,	"cmp cl, CRATIO_ORDER");
	MakeComm	(0X3F0C,	"mask.cratio");
	MakeCode	(x=0X3F0C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3F16);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X3F1E);
	MakeCode	(0X3F25);
	MakeCode	(0X3F2C);
	MakeName	(0X3F2C,	"ParseRatio");
	MakeComm	(0X3F30,	"mov si,word ptr [bx].ValuePtr");
	MakeCode	(x=0X3F39);
	OpChr		(x,	1);
	MakeComm	(0X3F43,	"set Host cluster size flag");
	MakeCode	(x=0X3F43);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3F49);
	MakeName	(0X3F49,	"ParseSwitch");
	MakeComm	(0X3F4B,	"[bx+ResultBuffer.SynPtr]");
	MakeCode	(x=0X3F4E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3F51,	"NUM_DIR_SWS");
	MakeCode	(x=0X3F51);
	OpDecimal	(x,	1);
	MakeComm	(0X3F57,	"Dir_Sw_Ptrs+2");
	MakeCode	(x=0X3F57);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3F5B,	"call word [cs:di+SwHandler]");
	MakeCode	(x=0X3F5B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F63);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X3F63,	"SwHandler");
	MakeWord	(x=0X3F65);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F67);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F69);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F6B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F6D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F6F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F71);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F73);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F75);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F77);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F79);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F7B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F7D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F7F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0X3F81);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3F83,	"DIRBUF");
	MakeCode	(x=0X3F83);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X3F83,	"ChangeDir");
	MakeName	(0X3F8C,	"cdLoop");
	MakeComm	(0X3F92,	"DIRBUF");
	MakeCode	(x=0X3F92);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3F95);
	OpHex		(x,	1);
	MakeComm	(0X3F97,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X3F97);
	OpHex		(x,	0);
	MakeCode	(0X3F9A);
	MakeName	(0X3F9A,	"CmpAscz");
	MakeCode	(0X3FAA);
	MakeName	(0X3FAA,	"CopyPathname");
	MakeComm	(0X3FAB,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(0X3FB3);
	MakeName	(0X3FB3,	"CountFile");
	MakeCode	(x=0X3FB4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X3FB8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3FBC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3FC2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X3FC6,	"EntryStruc.filesize");
	MakeCode	(x=0X3FC6);
	OpDecimal	(x,	1);
	MakeComm	(0X3FCA,	"EntryStruc.filesize + 2");
	MakeCode	(x=0X3FCA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3FCE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3FD2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3FD6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X3FDA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X3FE0);
	MakeName	(0X3FE0,	"DisplayBare");
	MakeCode	(x=0X3FE2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3FE6,	"[bx+EntrStruc.filename]");
	MakeCode	(x=0X3FE6);
	OpChr		(x,	1);
	MakeComm	(0X3FEE,	"mask.subd");
	MakeCode	(x=0X3FEE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X3FF9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X3FFC,	"mask.lcase");
	MakeCode	(x=0X3FFC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X4012);
	OpChr		(x,	1);
	MakeCode	(x=0X4019);
	OpChr		(x,	1);
	MakeCode	(x=0X401D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4023);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4033);
	MakeName	(0X4033,	"DisplayDotForm");
	MakeComm	(0X403F,	"filename + size filename - 1");
	MakeComm	(0X4042,	"size filename = 8 ; size of EntryStruc.filename");
	MakeComm	(0X4054,	"mask.lcase");
	MakeCode	(x=0X4054);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X4067,	"fileext + size fileext - 1");
	MakeCode	(x=0X4067);
	OpDecimal	(x,	1);
	MakeComm	(0X406A,	"size fileext");
	MakeCode	(x=0X4078);
	OpChr		(x,	1);
	MakeComm	(0X407F,	"EntryStruc.fileext");
	MakeCode	(x=0X4084);
	OpHex		(x,	1);
	MakeComm	(0X4099,	"mask.bare");
	MakeCode	(x=0X4099);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X4099,	"DisplayFile");
	MakeCode	(0X40A6);
	MakeCode	(x=0X40A9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X40B6);
	MakeComm	(0X40BC,	"mask.cratio");
	MakeCode	(x=0X40BC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X40CB,	"mask.bare");
	MakeCode	(x=0X40CB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X40CB,	"DisplayHeader");
	MakeComm	(0X40D3,	"mask.subd");
	MakeCode	(x=0X40D3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X40E3);
	MakeCode	(x=0X40EB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X40FB);
	MakeName	(0X40FB,	"DisplayName");
	MakeCode	(x=0X40FC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4100,	"DS:SI = ptr to entry");
	MakeComm	(0X4102,	"EntryStruc.filename");
	MakeCode	(x=0X4105);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X410C,	"move filename to CharBuf");
	MakeComm	(0X4110,	"add a blank");
	MakeComm	(0X4114,	"add extension");
	MakeComm	(0X4118,	"add a NULL");
	MakeComm	(0X411A,	"mask.lcase");
	MakeCode	(x=0X411A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X4120,	"lowercase not required");
	MakeCode	(x=0X4122);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4128);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X412E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4135);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X4135,	"DisplayNext");
	MakeCode	(x=0X413C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4143);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X414B);
	MakeCode	(x=0X4151);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4154);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4157);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X415C);
	MakeName	(0X415C,	"DisplayTheRest");
	MakeCode	(x=0X415D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4163,	"\n[es:bp+EntryStruc.fileattr],ATTR_DIRECTORY");
	MakeCode	(x=0X4163);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X416A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4170,	"80 columns ?");
	MakeCode	(x=0X4170);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X4175,	"no");
	MakeComm	(0X4177,	"4 space chars");
	MakeCode	(x=0X4177);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X417F,	"[es:bp+EntryStruc.filesize]");
	MakeCode	(x=0X417F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4183);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4187,	"[es:bp+EntryStruc.filesize+2]");
	MakeCode	(x=0X4187);
	OpDecimal	(x,	1);
	MakeCode	(x=0X418B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X418F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4195,	"[es:bp+EntryStruc.filedate]");
	MakeCode	(x=0X4195);
	OpDecimal	(x,	1);
	MakeCode	(x=0X419F);
	OpHex		(x,	1);
	MakeCode	(x=0X41AA);
	OpHex		(x,	1);
	MakeCode	(x=0X41B0);
	OpHex		(x,	1);
	MakeCode	(x=0X41B4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X41B7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X41BC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X41C1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X41C5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X41C9,	"[es:bp+EntryStruc.filetime]");
	MakeCode	(x=0X41C9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X41CF);
	OpHex		(x,	1);
	MakeCode	(x=0X41D1);
	OpHex		(x,	1);
	MakeCode	(x=0X41D3);
	OpHex		(x,	1);
	MakeCode	(x=0X41D5);
	OpHex		(x,	1);
	MakeCode	(x=0X41D7);
	OpHex		(x,	1);
	MakeCode	(x=0X41DB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X41DF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X41E9);
	MakeName	(0X41E9,	"DisplayCompRatio");
	MakeCode	(x=0X41EA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X41EE,	"mov al, es:[bx].compratio\nmov al,[es:bx+EntryStruc.compratio]");
	MakeCode	(x=0X41FE);
	OpHex		(x,	1);
	MakeCode	(x=0X4200);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4204);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4207);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X420F,	"mask.bare");
	MakeCode	(x=0X420F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X420F,	"DisplayTrailer");
	MakeCode	(x=0X421D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4220,	"mask.cratio");
	MakeCode	(x=0X4220);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X4220,	"DisplayCntSiz");
	MakeCode	(x=0X4229);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4230);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4234);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X423B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X423F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4242);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X424C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X424F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4255);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X425E,	"dtrRet");
	MakeCode	(0X425F);
	MakeName	(0X425F,	"DisplayWide");
	MakeCode	(x=0X4260);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4264,	"\n[bx+EntryStruc.fileattr],ATTR_DIRECTORY");
	MakeCode	(x=0X4264);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X426A);
	OpChr		(x,	1);
	MakeCode	(x=0X4272);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4278);
	OpChr		(x,	1);
	MakeComm	(0X427D,	"size filename + size fileext + 1");
	MakeCode	(x=0X427D);
	OpDecimal	(x,	1);
	MakeComm	(0X428D,	"mask.pagd");
	MakeCode	(x=0X428D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeName	(0X428D,	"EndPage");
	MakeCode	(x=0X429D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X42A5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X42A9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X42AD,	"[FCB]");
	MakeCode	(0X42AD);
	MakeName	(0X42AD,	"GetDriveLtr");
	MakeCode	(x=0X42B4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X42B9,	"'A'-1");
	MakeCode	(x=0X42B9);
	OpHex		(x,	1);
	MakeCode	(x=0X42BB);
	OpChr		(x,	1);
	MakeCode	(0X42BE);
	MakeName	(0X42BE,	"SetupParamError");
	MakeComm	(0X42C1,	"parse_msg_class");
	MakeCode	(x=0X42C1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X42C6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X42C9,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(x=0X42CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X42D0,	"one_subst");
	MakeCode	(x=0X42D0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X42D5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X42D9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X42D9,	"UseLine");
	MakeCode	(x=0X42DD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X42E8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X42E8,	"ZeroTotals");
	MakeComm	(0X42EB,	"size FileCntTotal + size FileSizTotal\n+ csecSIZE + ccluSIZE");
	MakeCode	(x=0X42EB);
	OpDecimal	(x,	1);
	MakeCode	(0X42F3);
	MakeName	(0X42F3,	"CtrlCHandler");
	MakeComm	(0X42F9,	"close CVF file if open");
	MakeComm	(0X42FC,	"restore user's default directory");
	MakeCode	(x=0X4308);
	OpChr		(x,	1);
	MakeName	(0X4308,	"LowerCase");
	MakeCode	(x=0X430C);
	OpChr		(x,	1);
	MakeCode	(x=0X4310);
	OpHex		(x,	1);
	MakeCode	(0X4313);
	MakeName	(0X4313,	"LowercaseString");
	MakeCode	(0X4322);
	MakeCode	(0X4324);
	MakeName	(0X4324,	"screen_f_set");
	MakeCode	(x=0X4325);
	OpHex		(x,	1);
	MakeComm	(0X432A,	"Check ROMBIOS DATA colums per row value (80 or 40)");
	MakeCode	(x=0X432A);
	OpDecimal	(x,	1);
	MakeComm	(0X4330,	"80 columns per line (video mode 3)");
	MakeComm	(0X4332,	"~40h ; not 40h");
	MakeCode	(x=0X4332);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X4337,	"10 bytes (file size field)");
	MakeCode	(x=0X4337);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X433D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X4342);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X4347);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X434D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X4352,	"28 bytes (free bytes field)");
	MakeCode	(x=0X4352);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X435A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X435F,	"14 bytes (file size field)");
	MakeCode	(x=0X435F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4365);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X436A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X436F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4375);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X437A,	"32 bytes (free bytes field)");
	MakeCode	(x=0X437A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4381,	"-1");
	MakeCode	(0X4381);
	MakeName	(0X4381,	"OpenCVF");
	MakeComm	(0X4384,	"CVF not open");
	MakeCode	(x=0X4384);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4387,	"no FAT entries in buffers");
	MakeCode	(x=0X4387);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X438A,	"[FCB]");
	MakeCode	(0X4396);
	MakeCode	(x=0X4399);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X439D,	"multMagicDrv");
	MakeComm	(0X43A0,	"MD_DRIVE_MAP");
	MakeCode	(x=0X43A3);
	OpHex		(x,	0);
	MakeCode	(x=0X43A9);
	OpHex		(x,	1);
	MakeCode	(x=0X43AE);
	OpHex		(x,	1);
	MakeCode	(x=0X43BB);
	OpHex		(x,	0);
	MakeCode	(x=0X43C3);
	OpHex		(x,	1);
	MakeCode	(x=0X43CE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X43D3);
	OpChr		(x,	1);
	MakeCode	(x=0X43D5);
	OpChr		(x,	1);
	MakeCode	(x=0X43D9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X43DC,	"cbCVFRoot");
	MakeCode	(x=0X43DC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X43EA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X43F3);
	OpChr		(x,	1);
	MakeCode	(x=0X43FE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4401,	"'RV'  (DRVSPACE)");
	MakeCode	(x=0X4409);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X440C,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X440C);
	OpHex		(x,	0);
	MakeComm	(0X4410,	"'BL'  (DBLSPACE)");
	MakeCode	(x=0X4418);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X441B,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X441B);
	OpHex		(x,	0);
	MakeCode	(x=0X441F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4424,	"READ");
	MakeCode	(x=0X4424);
	OpHex		(x,	1);
	MakeComm	(0X4426,	"size MD_BPB");
	MakeCode	(x=0X4426);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4429);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X442C,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X442C);
	OpHex		(x,	0);
	MakeName	(0X4434,	"ocvf_error1");
	MakeCode	(x=0X443A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4441,	"Get_Drive_Data");
	MakeCode	(x=0X4443);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4447,	"'A'-1");
	MakeCode	(x=0X4447);
	OpHex		(x,	1);
	MakeComm	(0X444B,	"DOS - GET ALLOCATION TABLE INFORMATION FOR SPECIFIC DRIVE\nDL = drive number to check (0=default, 1=A, etc)");
	MakeCode	(x=0X444B);
	OpHex		(x,	0);
	MakeComm	(0X4452,	"mov al,[MDBPB.dos_bpb.csecPerClu]");
	MakeCode	(x=0X4452);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4455);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4458);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X445B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X445E,	"32*1024");
	MakeComm	(0X4463,	"cRES_FAT_ENTRIES");
	MakeCode	(x=0X4463);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4469);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X446D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4473);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X447B,	"cBIG_FAT_ENTRIES");
	MakeCode	(x=0X447B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X447E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4482,	"6 bytes per entry (2 for DOS FAT, 4 MD FAT)");
	MakeCode	(x=0X4482);
	OpHex		(x,	1);
	MakeComm	(0X4484,	"entries * 2");
	MakeCode	(x=0X4486);
	OpHex		(x,	1);
	MakeComm	(0X4488,	"bx = # entries * 6");
	MakeCode	(x=0X448C);
	OpHex		(x,	1);
	MakeCode	(x=0X448F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4492);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4496);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X449A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X449F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X44A4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X44A4,	"CloseCVF");
	MakeComm	(0X44A8,	"-1");
	MakeComm	(0X44AD,	"CLOSE");
	MakeCode	(x=0X44AD);
	OpHex		(x,	1);
	MakeComm	(0X44AF,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X44AF);
	OpHex		(x,	0);
	MakeComm	(0X44B1,	"-1");
	MakeCode	(x=0X44B1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X44B7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X44BA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X44BE);
	MakeName	(0X44BE,	"CalcCompRatio");
	MakeCode	(x=0X44C2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X44C8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X44CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X44D0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X44E8);
	OpHex		(x,	1);
	MakeCode	(x=0X44EE);
	OpHex		(x,	1);
	MakeCode	(x=0X44F0);
	OpHex		(x,	1);
	MakeCode	(x=0X44F7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X44FB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4508);
	OpHex		(x,	1);
	MakeCode	(x=0X4512);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X451E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X452B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X452E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4532);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4536);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X453A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X453E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4542);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4546);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X454A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X4553);
	MakeCode	(0X455A);
	MakeName	(0X455A,	"ComputeRatio");
	MakeCode	(x=0X4560);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X457A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4588);
	OpHex		(x,	1);
	MakeCode	(x=0X458A);
	OpHex		(x,	1);
	MakeCode	(x=0X459A);
	OpDecimal	(x,	1);
	MakeCode	(0X45A5);
	MakeName	(0X45A5,	"Div32");
	MakeCode	(0X45BB);
	MakeCode	(0X45C9);
	MakeCode	(x=0X45D2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X45D2,	"GetDOSFATEntry");
	MakeComm	(0X45DA,	"cmp MDBPB.f12BitFAT, 0");
	MakeCode	(x=0X45DA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X45E1);
	OpHex		(x,	1);
	MakeCode	(x=0X45E3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X45EC);
	OpHex		(x,	1);
	MakeCode	(x=0X45F0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X45F4);
	OpHex		(x,	1);
	MakeCode	(x=0X45FB);
	OpHex		(x,	1);
	MakeCode	(0X4600);
	MakeCode	(x=0X460D);
	OpHex		(x,	1);
	MakeCode	(0X4612);
	MakeName	(0X4612,	"GetMDFATEntry");
	MakeCode	(x=0X4614);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X461A);
	OpHex		(x,	1);
	MakeComm	(0X461C,	"* 4 bytes per MDFAT entry");
	MakeCode	(x=0X461C);
	OpHex		(x,	1);
	MakeCode	(x=0X461E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X462B);
	MakeName	(0X462B,	"CheckFATBuffers");
	MakeCode	(x=0X462D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4633);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X463B);
	MakeComm	(0X4640,	"cmp MDBPB.f12BitFAT, 0");
	MakeCode	(x=0X4640);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4647);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X464A);
	OpHex		(x,	1);
	MakeCode	(x=0X464C);
	OpHex		(x,	1);
	MakeComm	(0X4650,	"not 1");
	MakeCode	(x=0X4650);
	OpHex		(x,	1);
	MakeCode	(x=0X4652);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4657);
	OpHex		(x,	1);
	MakeComm	(0X465D,	"mov ax, MDBPB.csecMDReserved\n# magicDrv reserved sectors");
	MakeCode	(x=0X465D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4660,	"add ax, MDBPB.dos_bpb.csecReserved");
	MakeCode	(x=0X4660);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4664,	"mul MDBPB.dos_bpb.cbPerSec\nDX:AX = DOS FAT file origin");
	MakeCode	(x=0X4664);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X466C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4670);
	OpHex		(x,	1);
	MakeCode	(x=0X4672);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X467B,	"mov ax, MDBPB.secMDFATStart");
	MakeCode	(x=0X467B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X467F,	"mul MDBPB.dos_bpb.cbPerSec\nDX:AX = MDFAT file offset\n");
	MakeCode	(x=0X467F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4683);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4689,	"add bx, MDBPB.cluFirstData\nCX:BX = MDFAT entry #");
	MakeCode	(x=0X4689);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X468F);
	OpHex		(x,	1);
	MakeCode	(x=0X4691);
	OpHex		(x,	1);
	MakeCode	(x=0X4693);
	OpHex		(x,	1);
	MakeCode	(x=0X4695);
	OpHex		(x,	1);
	MakeCode	(x=0X469B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X469F);
	OpHex		(x,	1);
	MakeCode	(x=0X46A1);
	OpHex		(x,	1);
	MakeCode	(x=0X46A3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X46B1);
	MakeName	(0X46B1,	"ReadCVFile");
	MakeComm	(0X46B7,	"(LSEEK shl 8) or 0");
	MakeCode	(x=0X46BA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X46BE,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X46BE);
	OpHex		(x,	0);
	MakeComm	(0X46C2,	"READ");
	MakeCode	(x=0X46C2);
	OpHex		(x,	1);
	MakeComm	(0X46C9,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X46C9);
	OpHex		(x,	0);
	MakeCode	(x=0X46D4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X46D4,	"PAUSE");
	MakeCode	(x=0X46E1);
	OpHex		(x,	1);
	MakeName	(0X46E1,	"ERASE");
	MakeCode	(x=0X46E4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X46EA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X46FE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4707);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X470B,	"colon_char");
	MakeCode	(x=0X470B);
	OpChr		(x,	1);
	MakeComm	(0X4711,	"end_of_line_out");
	MakeCode	(0X471C);
	MakeCode	(x=0X4722);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4729,	"MoreArgs_Ptr");
	MakeCode	(x=0X4731);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X4737);
	MakeCode	(x=0X473C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4744);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X474B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X4755);
	MakeComm	(0X4758,	"ERROR_PATH_NOT_FOUND");
	MakeCode	(0X4758);
	MakeName	(0X4758,	"badpath_err");
	MakeComm	(0X475B,	"ext_msg_class");
	MakeCode	(x=0X475B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X475B,	"extend_setup");
	MakeCode	(x=0X4760);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4763);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X4766,	"errj2");
	MakeCode	(x=0X4769);
	OpHex		(x,	1);
	MakeName	(0X4769,	"CRENAME");
	MakeCode	(x=0X476C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X477C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X478F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4793);
	OpChr		(x,	1);
	MakeComm	(0X479A,	"parse_msg_class");
	MakeCode	(x=0X479A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X479F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X47A2,	"BadParm_ptr");
	MakeCode	(x=0X47A2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X47AB,	"FCB+10h");
	MakeCode	(x=0X47AB);
	OpHex		(x,	1);
	MakeCode	(x=0X47AE);
	OpHex		(x,	1);
	MakeComm	(0X47B1,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X47B1);
	OpHex		(x,	0);
	MakeCode	(x=0X47B4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X47B8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X47C3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X47CA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X47D2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X47DC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X47DF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X47E9,	"FCB");
	MakeCode	(x=0X47E9);
	OpHex		(x,	1);
	MakeComm	(0X47EC,	"DOS - RENAME FILE via FCB\nDS:DX -> FCB\nFCB contains new name starting at byte 17h.");
	MakeCode	(x=0X47EC);
	OpHex		(x,	0);
	MakeCode	(0X4802);
	MakeCode	(x=0X4810);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4816);
	MakeCode	(x=0X4817);
	OpHex		(x,	1);
	MakeName	(0X4817,	"TYPEFIL");
	MakeCode	(x=0X481A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X482A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4832);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X483A,	"typefil_parse_error");
	MakeCode	(0X483D);
	MakeName	(0X483D,	"gottarg");
	MakeComm	(0X4840,	"00000010b");
	MakeCode	(x=0X4840);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X4847);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X484D,	"ExtOpen SHL 8");
	MakeCode	(0X484D);
	MakeComm	(0X4850,	"read_open_mode");
	MakeComm	(0X4855,	"read_open_flag");
	MakeCode	(x=0X4858);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X485B,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X485B);
	OpHex		(x,	0);
	MakeCode	(x=0X4864);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X486A,	"one_subst");
	MakeCode	(0X4872);
	MakeCode	(x=0X4874);
	OpHex		(x,	1);
	MakeComm	(0X4877,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X4877);
	OpHex		(x,	0);
	MakeCode	(x=0X4879);
	OpHex		(x,	1);
	MakeComm	(0X487E,	"-1");
	MakeCode	(0X4886);
	MakeComm	(0X488D,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X488D);
	OpHex		(x,	0);
	MakeComm	(0X489B,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X489B);
	OpHex		(x,	0);
	MakeCode	(0X48B1);
	MakeComm	(0X48B6,	"-1");
	MakeCode	(0X48D3);
	MakeCode	(0X48EA);
	MakeCode	(x=0X48EF);
	OpHex		(x,	1);
	MakeComm	(0X48F1,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X48F1);
	OpHex		(x,	0);
	MakeCode	(0X48F8);
	MakeCode	(x=0X4920);
	OpHex		(x,	1);
	MakeComm	(0X4922,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X4922);
	OpHex		(x,	0);
	MakeCode	(0X492E);
	MakeCode	(0X4934);
	MakeCode	(x=0X4937);
	OpHex		(x,	1);
	MakeComm	(0X493A,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X493A);
	OpHex		(x,	0);
	MakeCode	(x=0X493C);
	OpHex		(x,	1);
	MakeCode	(0X4944);
	MakeCode	(x=0X4945);
	OpHex		(x,	1);
	MakeName	(0X4945,	"VOLUME");
	MakeCode	(x=0X4948);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4952,	"-1");
	MakeCode	(x=0X495C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4969);
	MakeName	(0X4969,	"DisAppend");
	MakeComm	(0X496F,	"- Multiplex - APPEND - INSTALLATION CHECK\nReturn: AL = 00h not installed\nAL = FFh if installed");
	MakeCode	(x=0X496F);
	OpHex		(x,	0);
	MakeComm	(0X4978,	"- Multiplex - APPEND - VERSION CHECK\nReturn: AX = FFFFh if not DOS 4.0 APPEND\nAL = major version number\nAH = minor version number, otherwise");
	MakeCode	(x=0X4978);
	OpHex		(x,	0);
	MakeComm	(0X4982,	"- Multiplex - DOS 4.0 APPEND - GET APPEND FUNCTION STATE\nReturn: BX = APPEND state");
	MakeCode	(x=0X4982);
	OpHex		(x,	0);
	MakeCode	(x=0X4984);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4988);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X498C,	"-1");
	MakeCode	(x=0X498C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X4996,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X4996);
	OpHex		(x,	0);
	MakeCode	(0X499C);
	MakeName	(0X499C,	"OkVolArg");
	MakeComm	(0X49A2,	"blank");
	MakeComm	(0X49A9,	"FCB-7");
	MakeCode	(x=0X49A9);
	OpHex		(x,	1);
	MakeComm	(0X49AC,	"-1");
	MakeComm	(0X49B4,	"ATTR_VOLUME_ID");
	MakeCode	(x=0X49B8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X49BB);
	OpChr		(x,	1);
	MakeComm	(0X49BF,	"DIRBUF");
	MakeCode	(x=0X49BF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X49C2);
	OpHex		(x,	1);
	MakeComm	(0X49C4,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X49C4);
	OpHex		(x,	0);
	MakeCode	(x=0X49C6);
	OpHex		(x,	1);
	MakeCode	(x=0X49C9);
	OpHex		(x,	1);
	MakeComm	(0X49CB,	"DOS - SEARCH FIRST USING FCB\nDS:DX -> FCB");
	MakeCode	(x=0X49CB);
	OpHex		(x,	0);
	MakeCode	(x=0X49D7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X49DA);
	OpChr		(x,	1);
	MakeCode	(x=0X49DC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X49E4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X49E9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X49EE,	"DIRBUF+8");
	MakeCode	(x=0X49EE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X49F1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X49F9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4A00,	"[FCB]");
	MakeCode	(x=0X4A04);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4A07,	"DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER\nAL = 00h get serial number / 01h set serial number\nBL = drive (0=default, 1=A, 2=B, etc)\nDS:DX -> disk info");
	MakeCode	(x=0X4A07);
	OpHex		(x,	0);
	MakeCode	(x=0X4A14);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4A1A);
	MakeName	(0X4A1A,	"Set_Ext_Error_Msg");
	MakeComm	(0X4A1D,	"ext_msg_class");
	MakeCode	(x=0X4A1D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4A22);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4A25);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X4A2A);
	MakeName	(0X4A2A,	"get_ext_error_number");
	MakeComm	(0X4A32,	"GetExtendedError");
	MakeCode	(x=0X4A32);
	OpHex		(x,	1);
	MakeComm	(0X4A36,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X4A36);
	OpHex		(x,	0);
	MakeCode	(x=0X4A41);
	OpHex		(x,	1);
	MakeName	(0X4A41,	"VERSION");
	MakeCode	(x=0X4A44);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4A4E,	"RESULT_NO_ERROR");
	MakeComm	(0X4A55,	"END_OF_LINE");
	MakeCode	(0X4A5D);
	MakeCode	(x=0X4A6C);
	OpHex		(x,	1);
	MakeComm	(0X4A6F,	"DOS - 5+ Get TRUE Version Number (BL major, BH minor, DL revision, DH flags)");
	MakeCode	(x=0X4A6F);
	OpHex		(x,	0);
	MakeComm	(0X4A75,	"'Z'-'A'");
	MakeCode	(x=0X4A75);
	OpDecimal	(x,	1);
	MakeComm	(0X4A79,	"'*'-'A'");
	MakeCode	(x=0X4A79);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeComm	(0X4A7B,	"41h");
	MakeCode	(x=0X4A7B);
	OpChr		(x,	1);
	MakeCode	(x=0X4A7D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4A80);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4A8C);
	OpHex		(x,	1);
	MakeCode	(x=0X4A90);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4A95);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4A9A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4AA3);
	OpHex		(x,	1);
	MakeName	(0X4AA3,	"PRINT_VERSION");
	MakeComm	(0X4AA5,	"DOS - GET DOS VERSION\nReturn: AL = major version number (00h for DOS 1.x)");
	MakeCode	(x=0X4AA5);
	OpHex		(x,	0);
	MakeCode	(x=0X4AAA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4AB2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4AB5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4ABB);
	MakeName	(0X4ABB,	"PRINT_PROMPT");
	MakeCode	(x=0X4ACD);
	OpChr		(x,	1);
	MakeCode	(0X4AD4);
	MakeCode	(x=0X4ADC);
	OpChr		(x,	1);
	MakeCode	(0X4AE5);
	MakeComm	(0X4AE9,	"PROMPT_TABLE-3 (db '[2J')");
	MakeCode	(x=0X4AE9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4B01);
	MakeCode	(0X4B0C);
	MakeCode	(x=0X4B0F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X4B0F,	"PRINT_BACK");
	MakeCode	(x=0X4B15);
	OpChr		(x,	1);
	MakeName	(0X4B15,	"PRINT_EQ");
	MakeComm	(0X4B19,	"ESCape");
	MakeCode	(0X4B19);
	MakeName	(0X4B19,	"PRINT_ESC");
	MakeCode	(x=0X4B1D);
	OpChr		(x,	1);
	MakeName	(0X4B1D,	"PRINT_G");
	MakeCode	(x=0X4B21);
	OpChr		(x,	1);
	MakeName	(0X4B21,	"PRINT_L");
	MakeCode	(x=0X4B25);
	OpChr		(x,	1);
	MakeName	(0X4B25,	"Print_B");
	MakeName	(0X4B27,	"PRINT_CHAR");
	MakeComm	(0X4B2E,	"STD_CON_OUTPUT");
	MakeCode	(x=0X4B2E);
	OpHex		(x,	1);
	MakeComm	(0X4B30,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X4B30);
	OpHex		(x,	0);
	MakeCode	(x=0X4B36);
	OpHex		(x,	1);
	MakeName	(0X4B36,	"PRINT_DRIVE");
	MakeComm	(0X4B38,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X4B38);
	OpHex		(x,	0);
	MakeCode	(0X4B40);
	MakeName	(0X4B40,	"build_dir_for_prompt");
	MakeCode	(x=0X4B42);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B47);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B4A);
	OpChr		(x,	1);
	MakeCode	(x=0X4B4C);
	OpChr		(x,	1);
	MakeCode	(x=0X4B4F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B55);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4B59);
	OpHex		(x,	1);
	MakeComm	(0X4B5B,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X4B5B);
	OpHex		(x,	0);
	MakeCode	(x=0X4B5D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B62);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X4B65,	"doprint");
	MakeCode	(0X4B69);
	MakeName	(0X4B69,	"build_dir_for_chdir");
	MakeComm	(0X4B6C,	"DIRBUF");
	MakeCode	(x=0X4B6C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B6F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4B73);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4B7A);
	MakeName	(0X4B7A,	"build_dir_string");
	MakeCode	(x=0X4B86);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B8D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4B90);
	OpHex		(x,	1);
	MakeComm	(0X4B92,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X4B92);
	OpHex		(x,	0);
	MakeCode	(x=0X4B9B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4BA1);
	OpChr		(x,	1);
	MakeCode	(0X4BA9);
	MakeName	(0X4BA9,	"PATH");
	MakeCode	(x=0X4BAB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4BB5,	"3Bh");
	MakeCode	(x=0X4BB5);
	OpChr		(x,	1);
	MakeCode	(0X4BBC);
	MakeComm	(0X4BBD,	"END_OF_LINE_IN");
	MakeCode	(0X4BCB);
	MakeComm	(0X4BCE,	"3Bh ; semicolon");
	MakeCode	(x=0X4BCE);
	OpChr		(x,	1);
	MakeCode	(x=0X4BE4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4BE7,	"MoreArgs_Ptr");
	MakeComm	(0X4BED,	"parse_msg_class");
	MakeCode	(0X4BF5);
	MakeCode	(x=0X4C04);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4C11);
	MakeCode	(0X4C15);
	MakeCode	(0X4C1F);
	MakeName	(0X4C1F,	"print_path");
	MakeCode	(x=0X4C25);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4C2F);
	MakeComm	(0X4C39,	"255");
	MakeCode	(x=0X4C41);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4C44,	"256");
	MakeCode	(x=0X4C4D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4C55);
	MakeName	(0X4C55,	"CLS");
	MakeComm	(0X4C59,	"- Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK\nReturn: AL = FFh if installed");
	MakeCode	(x=0X4C59);
	OpHex		(x,	0);
	MakeComm	(0X4C5B,	"ANSI_installed");
	MakeCode	(x=0X4C67);
	OpHex		(x,	1);
	MakeCode	(x=0X4C69);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4C6C,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X4C6C);
	OpHex		(x,	0);
	MakeCode	(0X4C7C);
	MakeCode	(x=0X4C7F);
	OpHex		(x,	1);
	MakeComm	(0X4C82,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X4C82);
	OpHex		(x,	0);
	MakeCode	(x=0X4C84);
	OpHex		(x,	1);
	MakeCode	(x=0X4C89);
	OpHex		(x,	1);
	MakeCode	(0X4C93);
	MakeComm	(0X4C95,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page");
	MakeCode	(x=0X4C95);
	OpHex		(x,	0);
	MakeComm	(0X4CA1,	"- VIDEO - SET VIDEO MODE\nAL = mode");
	MakeCode	(x=0X4CA1);
	OpHex		(x,	0);
	MakeCode	(0X4CA5);
	MakeComm	(0X4CA6,	"ROMBIOS_DATA");
	MakeCode	(x=0X4CA6);
	OpHex		(x,	1);
	MakeComm	(0X4CAB,	"[CRT_Cols]");
	MakeComm	(0X4CAF,	"[CRT_Rows]");
	MakeCode	(x=0X4CB8);
	OpDecimal	(x,	1);
	MakeCode	(0X4CC0);
	MakeName	(0X4CC0,	"reg_cls");
	MakeComm	(0X4CC9,	"- VIDEO - SET COLOR PALETTE\nBH = 00h, BL = border color\nBH = 01h, BL = palette (0-3)");
	MakeCode	(x=0X4CC9);
	OpHex		(x,	0);
	MakeComm	(0X4CD6,	"- VIDEO - SCROLL PAGE UP\nAL = number of lines to scroll window (0 = blank whole window)\nBH = attributes to be used on blanked lines\nCH,CL = row,column of upper left corner of window to scroll\nDH,DL = row,column of lower right corner of window");
	MakeCode	(x=0X4CD6);
	OpHex		(x,	0);
	MakeComm	(0X4CDA,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page");
	MakeCode	(x=0X4CDA);
	OpHex		(x,	0);
	MakeComm	(0X4CE0,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ");
	MakeCode	(x=0X4CE0);
	OpHex		(x,	0);
	MakeCode	(x=0X4CE3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X4CE3,	"ansi_cls");
	MakeComm	(0X4CEB,	"Raw_CON_IO");
	MakeComm	(0X4CF0,	"DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT\nDL = character <> FFh\n Return: ZF set = no character\n  ZF clear = character recieved, AL = character");
	MakeCode	(x=0X4CF0);
	OpHex		(x,	0);
	MakeCode	(0X4CF5);
	MakeName	(0X4CF5,	"CTTY");
	MakeCode	(x=0X4CF7);
	OpHex		(x,	1);
	MakeCode	(x=0X4CFA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4D0F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4D13);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4D1D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4D27);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4D2A);
	OpHex		(x,	1);
	MakeComm	(0X4D2D,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write");
	MakeCode	(x=0X4D2D);
	OpHex		(x,	0);
	MakeCode	(x=0X4D33);
	OpHex		(x,	1);
	MakeComm	(0X4D36,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X4D36);
	OpHex		(x,	0);
	MakeCode	(x=0X4D38);
	OpHex		(x,	1);
	MakeCode	(x=0X4D3D);
	OpHex		(x,	1);
	MakeComm	(0X4D3F,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X4D3F);
	OpHex		(x,	0);
	MakeCode	(x=0X4D41);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4D49);
	MakeCode	(x=0X4D4A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4D4D,	"-1 ; util_msg_class");
	MakeComm	(0X4D5B,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X4D5B);
	OpHex		(x,	0);
	MakeCode	(x=0X4D63);
	OpHex		(x,	1);
	MakeCode	(x=0X4D66);
	OpHex		(x,	1);
	MakeComm	(0X4D69,	"DOS - 2+ - IOCTL - SET DEVICE INFORMATION\nBX = device handle, DH = 0\nDL = device information to set (bits 0-7 from function 0)");
	MakeCode	(x=0X4D69);
	OpHex		(x,	0);
	MakeCode	(x=0X4D71);
	OpHex		(x,	1);
	MakeComm	(0X4D73,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X4D73);
	OpHex		(x,	0);
	MakeCode	(x=0X4D79);
	OpHex		(x,	1);
	MakeComm	(0X4D7B,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X4D7B);
	OpHex		(x,	0);
	MakeCode	(x=0X4D7D);
	OpHex		(x,	1);
	MakeComm	(0X4D7F,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X4D7F);
	OpHex		(x,	0);
	MakeCode	(x=0X4D81);
	OpHex		(x,	1);
	MakeComm	(0X4D83,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X4D83);
	OpHex		(x,	0);
	MakeCode	(x=0X4D85);
	OpHex		(x,	1);
	MakeComm	(0X4D87,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X4D87);
	OpHex		(x,	0);
	MakeCode	(x=0X4D89);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4D8E,	"[PDB.JFN_TABLE]");
	MakeCode	(x=0X4D91);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4D94);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4D99);
	MakeName	(0X4D99,	"CHCP");
	MakeCode	(x=0X4D9B);
	OpHex		(x,	1);
	MakeCode	(x=0X4D9E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4DA8,	"-1");
	MakeCode	(x=0X4DB3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4DB8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4DBD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4DC9,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed");
	MakeCode	(x=0X4DC9);
	OpHex		(x,	0);
	MakeComm	(0X4DCB,	"NLSFUNC_installed");
	MakeCode	(x=0X4DCF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4DD4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4DD8,	"GETSETCDPG");
	MakeCode	(x=0X4DD8);
	OpHex		(x,	1);
	MakeComm	(0X4DDC,	"DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE\nBX = active code page \nDX = system code page (active page at boot time)");
	MakeCode	(x=0X4DDC);
	OpHex		(x,	0);
	MakeComm	(0X4DE0,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X4DE5,	"GETEXTENDEDERROR");
	MakeCode	(x=0X4DE5);
	OpHex		(x,	1);
	MakeComm	(0X4DE9,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X4DE9);
	OpHex		(x,	0);
	MakeComm	(0X4DEB,	"ERROR_INVALID_DATA");
	MakeCode	(x=0X4DF0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4DF5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4DFA);
	OpHex		(x,	1);
	MakeComm	(0X4DFE,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X4DFE);
	OpHex		(x,	0);
	MakeCode	(x=0X4E00);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4E05);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E0A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E10);
	OpHex		(x,	1);
	MakeComm	(0X4E14,	"DOS - 3.3+ - GET GLOBAL CODE PAGE TABLE");
	MakeCode	(x=0X4E14);
	OpHex		(x,	0);
	MakeCode	(x=0X4E16);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4E1A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4E21);
	MakeName	(0X4E21,	"TRUENAME");
	MakeCode	(x=0X4E23);
	OpHex		(x,	1);
	MakeCode	(x=0X4E26);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E30);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4E33,	"END_OF_LINE");
	MakeComm	(0X4E3D,	"PARSE1_TYPE");
	MakeCode	(x=0X4E3D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X4E46);
	MakeCode	(x=0X4E48);
	OpChr		(x,	1);
	MakeCode	(0X4E4D);
	MakeCode	(x=0X4E4E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4E52,	"'A'-1");
	MakeCode	(x=0X4E52);
	OpHex		(x,	1);
	MakeComm	(0X4E55,	"2E3Ah ; ah=\".\", al=\":\"");
	MakeCode	(x=0X4E55);
	OpChr		(x,	1);
	MakeCode	(0X4E5F);
	MakeCode	(x=0X4E60);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E6B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E76);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E79);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E7C);
	OpHex		(x,	1);
	MakeComm	(0X4E7E,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X4E7E);
	OpHex		(x,	0);
	MakeCode	(x=0X4E85);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4E8B,	"one_subst");
	MakeCode	(x=0X4E8B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4E93);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4E99);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4EA3);
	MakeName	(0X4EA3,	"_$EXIT");
	MakeCode	(x=0X4EA4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4EA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X4EAF,	"-1");
	MakeCode	(x=0X4EAF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X4EB9,	"(multdos shl 8 or message_2f)");
	MakeCode	(0X4EB9);
	MakeComm	(0X4EBC,	"SET_CRITICAL_MSG");
	MakeCode	(x=0X4EBE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4EC2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X4EC6,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - set critical/SHARE error table\nES:DI -> error table");
	MakeCode	(x=0X4EC6);
	OpHex		(x,	0);
	MakeCode	(x=0X4ECC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4ED0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X4ED4,	"[es:PDB.PARENT_PID]");
	MakeCode	(x=0X4ED8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X4EDC,	"[es:PDB.EXIT]");
	MakeCode	(x=0X4EE0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X4EE4,	"[es:PDB.EXIT+2]");
	MakeCode	(x=0X4EE9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4EED);
	OpHex		(x,	1);
	MakeComm	(0X4EEF,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X4EEF);
	OpHex		(x,	0);
	MakeComm	(0X4EF2,	"EXIT");
	MakeCode	(x=0X4EF2);
	OpHex		(x,	1);
	MakeCode	(x=0X4EF4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X4EF8,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0X4EF8);
	OpHex		(x,	0);
	MakeCode	(0X4EFA);
	MakeName	(0X4EFA,	"parse_check_eol");
	MakeCode	(x=0X4EFC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4F03,	"END_OF_LINE");
	MakeComm	(0X4F07,	"RESULT_NO_ERROR");
	MakeCode	(x=0X4F11);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X4F11,	"Parse_With_Msg");
	MakeComm	(0X4F25,	"parse_msg_class");
	MakeCode	(x=0X4F25);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X4F25,	"setup_parse_error_msg");
	MakeCode	(x=0X4F2A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X4F2D,	"END_OF_LINE_OUT");
	MakeCode	(x=0X4F30);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4F38);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4F3C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4F40,	"one_subst");
	MakeCode	(x=0X4F40);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X4F47);
	MakeName	(0X4F47,	"ADD_PROMPT");
	MakeCode	(0X4F55);
	MakeCode	(0X4F5E);
	MakeCode	(0X4F61);
	MakeName	(0X4F61,	"ADD_NAME_TO_ENVIRONMENT");
	MakeComm	(0X4F6A,	"0Dh");
	MakeCode	(x=0X4F6A);
	OpDecimal	(x,	1);
	MakeComm	(0X4F6E,	"3Dh");
	MakeCode	(x=0X4F6E);
	OpChr		(x,	1);
	MakeComm	(0X4F74,	"0Dh");
	MakeCode	(x=0X4F74);
	OpDecimal	(x,	1);
	MakeCode	(0X4F7D);
	MakeCode	(x=0X4F82);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X4F88);
	MakeCode	(x=0X4F9C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4FA1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4FAB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X4FB4,	"13");
	MakeCode	(0X4FBD);
	MakeCode	(x=0X4FBE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X4FC8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X4FCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4FD3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X4FE0,	"3Ah");
	MakeCode	(x=0X4FE0);
	OpChr		(x,	1);
	MakeComm	(0X4FEB,	"41h");
	MakeCode	(x=0X4FEB);
	OpChr		(x,	1);
	MakeCode	(x=0X4FF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X4FF6,	"'A'-1");
	MakeCode	(x=0X4FF6);
	OpHex		(x,	1);
	MakeCode	(x=0X4FF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4FFD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X5009,	"13");
	MakeCode	(0X5010);
	MakeCode	(x=0X5013);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5019);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X501F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5023);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X502E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5037);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5043);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5043,	"delete_path");
	MakeCode	(x=0X5048);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5048,	"delete_prompt");
	MakeName	(0X504B,	"delete_name_in_environment");
	MakeName	(0X506B,	"find_retn");
	MakeCode	(x=0X506C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X506C,	"find_path");
	MakeCode	(x=0X5071);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5071,	"find_prompt");
	MakeName	(0X5074,	"find_name_in_environment");
	MakeCode	(0X507C);
	MakeName	(0X507C,	"FIND");
	MakeCode	(x=0X5080);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5084);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X50A3);
	MakeCode	(0X50C1);
	MakeName	(0X50C1,	"COUNT0");
	MakeCode	(0X50CB);
	MakeName	(0X50D4,	"move_name_retn");
	MakeComm	(0X50D5,	"0Dh");
	MakeCode	(x=0X50D5);
	OpDecimal	(x,	1);
	MakeName	(0X50D5,	"move_name");
	MakeCode	(0X50E9);
	MakeCode	(x=0X50EF);
	OpChr		(x,	1);
	MakeName	(0X50F3,	"getarg_retn");
	MakeCode	(x=0X50F4);
	OpHex		(x,	1);
	MakeName	(0X50F4,	"GETARG");
	MakeComm	(0X50FF,	"13");
	MakeName	(0X5101,	"sdn_retn");
	MakeCode	(x=0X5102);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5102,	"scan_double_null");
	MakeCode	(x=0X5106);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5118);
	OpChr		(x,	1);
	MakeName	(0X5118,	"SCASB1");
	MakeCode	(0X511C);
	MakeName	(0X511C,	"SCASB2");
	MakeCode	(x=0X511E);
	OpDecimal	(x,	1);
	MakeName	(0X511E,	"SCASBX");
	MakeCode	(0X5124);
	MakeName	(0X5124,	"testkanj");
	MakeCode	(x=0X512C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X5143);
	MakeCode	(0X5147);
	MakeCode	(x=0X514E);
	OpHex		(x,	1);
	MakeName	(0X514E,	"UPCONV");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	MakeCode	(x=0X5152);
	OpHex		(x,	1);
	MakeCode	(x=0X5156);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X515A,	"\nlds bx,[FUCase_Addr+1]");
	MakeCode	(x=0X515A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X5166,	"small_a");
	MakeCode	(0X5166);
	MakeComm	(0X516A,	"small_z");
	MakeCode	(x=0X516E);
	OpHex		(x,	1);
	MakeCode	(0X5171);
	MakeName	(0X5171,	"store_char");
	MakeCode	(x=0X5175);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5179);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X519D);
	MakeCode	(x=0X51A6);
	OpHex		(x,	1);
	MakeCode	(x=0X51AF);
	OpHex		(x,	1);
	MakeComm	(0X51B1,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X51B1);
	OpHex		(x,	0);
	MakeCode	(x=0X51B5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X51C3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X51C9);
	MakeCode	(0X51D3);
	MakeName	(0X51D3,	"GETENVSIZ");
	MakeComm	(0X51DA,	"[es:ARENA.size]");
	MakeName	(0X51E6,	"getenvsiz_retn");
	MakeCode	(0X51E7);
	MakeName	(0X51E7,	"RestUDir1");
	MakeCode	(x=0X51E8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X51EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X51F4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X51F4,	"RestUDir");
	MakeCode	(x=0X51F7);
	OpHex		(x,	1);
	MakeComm	(0X51F9,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X51F9);
	OpHex		(x,	0);
	MakeCode	(x=0X5201);
	OpHex		(x,	1);
	MakeName	(0X5201,	"_$CHDIR");
	MakeCode	(x=0X5204);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5218,	"[PARSE1_TYPE],result_drive");
	MakeCode	(x=0X5218);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X521F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5230);
	MakeCode	(x=0X5231);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5239);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5246);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X524D);
	OpHex		(x,	1);
	MakeComm	(0X524F,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X524F);
	OpHex		(x,	0);
	MakeComm	(0X5256,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X525B,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X5265);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X526B,	"mkdir_retn");
	MakeCode	(0X526C);
	MakeName	(0X526C,	"_$MKDIR");
	MakeCode	(x=0X5271);
	OpHex		(x,	1);
	MakeComm	(0X5273,	"DOS - 2+ - CREATE A SUBDIRECTORY (MKDIR)\nDS:DX -> ASCIZ pathname (may include drive)");
	MakeCode	(x=0X5273);
	OpHex		(x,	0);
	MakeComm	(0X527A,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X527F,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X5289);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X528C);
	OpHex		(x,	1);
	MakeComm	(0X528E,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X528E);
	OpHex		(x,	0);
	MakeCode	(x=0X5290);
	OpHex		(x,	1);
	MakeComm	(0X5292,	"ATTR_DIRECTORY");
	MakeComm	(0X5295,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X5295);
	OpHex		(x,	0);
	MakeComm	(0X5299,	"[SRCXNAME+FIND_BUF.ATTR] ; [SRCXNAME+21]");
	MakeCode	(x=0X5299);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X529D);
	OpHex		(x,	1);
	MakeCode	(x=0X52A2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X52A7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X52AD,	"setrmmk_retn");
	MakeCode	(x=0X52AE);
	OpHex		(x,	1);
	MakeName	(0X52AE,	"SETRMMK");
	MakeCode	(x=0X52B1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X52BB,	"RESULT_NO_ERROR");
	MakeCode	(x=0X52C0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X52C5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X52CB,	"END_OF_LINE_OUT");
	MakeCode	(x=0X52D0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X52D9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X52DF,	"rmdir_retn");
	MakeCode	(0X52E0);
	MakeName	(0X52E0,	"_$RMDIR");
	MakeCode	(x=0X52E7);
	OpHex		(x,	1);
	MakeComm	(0X52E9,	"DOS - 2+ - REMOVE A DIRECTORY ENTRY (RMDIR)\nDS:DX -> ASCIZ pathname (may include drive)");
	MakeCode	(x=0X52E9);
	OpHex		(x,	0);
	MakeComm	(0X52F0,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X52F5,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X52FF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5305,	"savudir_err_retn");
	MakeComm	(0X5306,	"ext_msg_class");
	MakeCode	(x=0X5306);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X5306,	"set_ext_error_subst");
	MakeCode	(x=0X530B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X530F,	"one_subst");
	MakeCode	(x=0X530F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5314);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5317);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X531B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X531B,	"SAVUDIR");
	MakeName	(0X531E,	"SAVUDIR1");
	MakeCode	(x=0X5326);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X532D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5331,	"3Ah");
	MakeCode	(x=0X5331);
	OpChr		(x,	1);
	MakeCode	(x=0X5338);
	OpHex		(x,	1);
	MakeComm	(0X533A,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X533A);
	OpHex		(x,	0);
	MakeCode	(0X5341);
	MakeName	(0X5341,	"CRLF2");
	MakeCode	(x=0X5342);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X534E);
	MakeName	(0X534E,	"scanoff");
	MakeName	(0X5355,	"scanoff_retn");
	MakeCode	(0X5356);
	MakeName	(0X5356,	"DELIM");
	MakeCode	(0X536D);
	MakeName	(0X536D,	"FCB_TO_ASCZ");
	MakeName	(0X5392,	"STRCOMP_RETN");
	MakeCode	(0X5393);
	MakeName	(0X5393,	"STRCOMP");
	MakeCode	(0X539E);
	MakeName	(0X539E,	"CRPRINT");
	MakeComm	(0X539F,	"0Dh");
	MakeCode	(x=0X539F);
	OpDecimal	(x,	1);
	MakeComm	(0X53A5,	"0FFFFh");
	MakeCode	(x=0X53A5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X53B2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X53B6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X53BC,	"0Dh");
	MakeCode	(x=0X53BC);
	OpDecimal	(x,	1);
	MakeCode	(0X53C6);
	MakeName	(0X53C6,	"error_output");
	MakeCode	(x=0X53CC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X53CF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X53DA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X53E0);
	MakeName	(0X53E0,	"pathchrcmp");
	MakeComm	(0X53E1,	"2Fh");
	MakeCode	(x=0X53E1);
	OpChr		(x,	1);
	MakeComm	(0X53E9,	"2Fh");
	MakeCode	(x=0X53E9);
	OpChr		(x,	1);
	MakeComm	(0X53ED,	"5Ch");
	MakeCode	(x=0X53ED);
	OpChr		(x,	1);
	MakeCode	(0X53F1);
	MakeName	(0X53F1,	"PathCrunch");
	MakeComm	(0X53F7,	"[FCB]");
	MakeCode	(x=0X53F7);
	MakeCode	(x=0X5403);
	OpHex		(x,	1);
	MakeCode	(x=0X540A);
	OpHex		(x,	1);
	MakeComm	(0X540C,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X540C);
	OpHex		(x,	0);
	MakeCode	(0X5423);
	MakeComm	(0X5426,	"3Fh");
	MakeCode	(x=0X5426);
	OpChr		(x,	1);
	MakeCode	(x=0X5428);
	OpHex		(x,	1);
	MakeCode	(x=0X542B);
	OpDecimal	(x,	1);
	MakeCode	(0X5433);
	MakeCode	(0X5436);
	MakeCode	(0X545C);
	MakeCode	(0X5466);
	MakeCode	(0X5487);
	MakeCode	(0X54B0);
	MakeCode	(x=0X54B3);
	OpHex		(x,	1);
	MakeComm	(0X54B5,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X54B5);
	OpHex		(x,	0);
	MakeCode	(0X54C3);
	MakeComm	(0X54D0,	"CHDIR");
	MakeCode	(x=0X54D0);
	OpHex		(x,	1);
	MakeComm	(0X54D2,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X54D2);
	OpHex		(x,	0);
	MakeComm	(0X54E2,	"-1");
	MakeComm	(0X54E9,	"FCB");
	MakeCode	(x=0X54E9);
	OpHex		(x,	1);
	MakeCode	(x=0X54EC);
	OpHex		(x,	1);
	MakeComm	(0X54EF,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X54EF);
	OpHex		(x,	0);
	MakeCode	(0X54F3);
	MakeCode	(0X54F5);
	MakeName	(0X54F5,	"SWITCH");
	MakeCode	(x=0X5500);
	OpHex		(x,	1);
	MakeCode	(x=0X5510);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5523);
	MakeCode	(x=0X5525);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5525,	"DRVBAD");
	MakeCode	(0X552B);
	MakeCode	(0X552E);
	MakeName	(0X552E,	"FNDCOM");
	MakeCode	(x=0X5548);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X554B,	"-1");
	MakeCode	(x=0X554E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5554,	"- Multiplex - DOS 3.3+ internal - INSTALLABLE COMMAND - EXECUTE\nDX = FFFFh, DS:SI -> buffer\nReturn: buffer at DS:SI filled with a length byte followed by the uppercase\ninternal command to execute (if length not 0)");
	MakeCode	(x=0X5554);
	OpHex		(x,	0);
	MakeCode	(x=0X5560);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5565);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X559A,	"[AllSwitch]");
	MakeCode	(x=0X559E);
	OpHex		(x,	1);
	MakeCode	(x=0X55A3);
	OpHex		(x,	1);
	MakeComm	(0X55AA,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(0X55C5);
	MakeCode	(x=0X55C9);
	OpHex		(x,	1);
	MakeCode	(0X55DE);
	MakeComm	(0X55E1,	"fSwitchAllowed");
	MakeCode	(x=0X55E1);
	OpHex		(x,	1);
	MakeComm	(0X55ED,	"parse_msg_class");
	MakeCode	(x=0X55F2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X55F5,	"BadSwt_Ptr");
	MakeCode	(0X55FE);
	MakeComm	(0X5607,	"call_in_progress");
	MakeCode	(x=0X5607);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X560C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5617);
	MakeCode	(0X561A);
	MakeName	(0X561A,	"noswit");
	MakeCode	(x=0X561B);
	OpHex		(x,	1);
	MakeCode	(x=0X561E);
	OpHex		(x,	1);
	MakeCode	(0X5630);
	MakeName	(0X5630,	"EXTERNAL");
	MakeCode	(0X5638);
	MakeCode	(x=0X564F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X565F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X566B,	"NEOEXECUTE");
	MakeName	(0X566D,	"RESEARC");
	MakeCode	(0X567C);
	MakeCode	(0X567E);
	MakeCode	(x=0X5681);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5681,	"LH_EXECUTE");
	MakeCode	(x=0X5685);
	OpHex		(x,	1);
	MakeComm	(0X5687,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X5687);
	OpHex		(x,	0);
	MakeCode	(x=0X5689);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X568D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5692);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5698);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X569B,	"RESGROUP");
	MakeCode	(x=0X569B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X569E);
	OpDecimal	(x,	1);
	MakeComm	(0X56A4,	"FCB");
	MakeCode	(x=0X56A4);
	OpHex		(x,	1);
	MakeCode	(x=0X56A9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X56AE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X56B3,	"offset Exec_Block = offset EnvirSeg");
	MakeCode	(x=0X56B3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X56B9);
	OpHex		(x,	1);
	MakeCode	(0X56C4);
	MakeCode	(x=0X56C8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X56CB,	"jmp far [cs:EXEC_ADDR]");
	MakeCode	(0X56D0);
	MakeCode	(x=0X56D2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X56D5,	"cerror");
	MakeCode	(0X56DB);
	MakeName	(0X56DB,	"PRESCAN");
	MakeCode	(x=0X56E1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X56EF,	"13");
	MakeCode	(0X56EF);
	MakeComm	(0X5704,	"DB_SPACE");
	MakeCode	(0X570B);
	MakeCode	(0X571C);
	MakeCode	(0X5736);
	MakeComm	(0X574A,	"rabracket");
	MakeCode	(x=0X5753);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X575B,	"labracket");
	MakeCode	(x=0X5766);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5770);
	MakeCode	(x=0X5771);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X5778,	"64+13");
	MakeCode	(x=0X5778);
	OpDecimal	(x,	1);
	MakeComm	(0X578B,	"quote");
	MakeComm	(0X578F,	"labracket");
	MakeComm	(0X5793,	"rabracket");
	MakeCode	(0X579D);
	MakeCode	(0X57A2);
	MakeCode	(0X57A5);
	MakeCode	(0X57C1);
	MakeCode	(x=0X57C2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X57CC);
	MakeComm	(0X57CE,	"ALTPIPECHR");
	MakeComm	(0X57D3,	"vbar");
	MakeCode	(x=0X57D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X57E0,	"shl byte [es:EchoFlag],1");
	MakeCode	(x=0X57E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X57E5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X57F1,	"ALTPIPECHR");
	MakeComm	(0X57F5,	"vbar");
	MakeCode	(0X57FE);
	MakeComm	(0X5804,	"-1");
	MakeCode	(x=0X5822);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X5822,	"PRESCANEND");
	MakeComm	(0X582A,	"PipeStr ; RESGROUP:EndInit+160");
	MakeComm	(0X582D,	"[es:PipePtr],di \n(RESGROUP:EndInit+158)");
	MakeCode	(x=0X5832);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5842);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X584B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X584B,	"cmd_copy");
	MakeCode	(x=0X5855);
	OpHex		(x,	1);
	MakeComm	(0X5863,	"mov ds:80h, cl");
	MakeCode	(0X5863);
	MakeCode	(x=0X5868);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5868,	"test_append");
	MakeCode	(x=0X586B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X586E,	"-1");
	MakeComm	(0X5874,	"- Multiplex - DOS 3.3+ internal - INSTALLABLE COMMAND - INSTALL CHECK\nDX = FFFFh, DS:BX -> command line\nReturn: AL = FFh if this command is a TSR extension to COMMAND.COM\nAL = 00h if the command should be executed as usual");
	MakeCode	(x=0X5874);
	OpHex		(x,	0);
	MakeCode	(0X5879);
	MakeName	(0X5879,	"SETPATH");
	MakeName	(0X5880,	"GETPATH");
	MakeCode	(0X58BC);
	MakeCode	(x=0X58C9);
	OpHex		(x,	1);
	MakeCode	(x=0X58D2);
	OpHex		(x,	1);
	MakeName	(0X58F6,	"SETPATH_RETN");
	MakeCode	(x=0X58F7);
	OpHex		(x,	1);
	MakeName	(0X58F7,	"PGETARG");
	MakeCode	(0X5905);
	MakeName	(0X5905,	"PSCANOFF");
	MakeComm	(0X590B,	"3Bh");
	MakeCode	(x=0X590B);
	OpChr		(x,	1);
	MakeCode	(0X5911);
	MakeName	(0X5911,	"IOSET");
	MakeCode	(x=0X591B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5922);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeName	(0X5934,	"IOSET_RETN");
	MakeCode	(0X5935);
	MakeName	(0X5935,	"TESTDOREIN");
	MakeCode	(x=0X5940);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5943,	"OPEN*256");
	MakeComm	(0X5948,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X5948);
	OpHex		(x,	0);
	MakeComm	(0X5951,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5954,	"[PDB.JFN_TABLE]");
	MakeCode	(0X5958);
	MakeName	(0X5958,	"REDIRERR");
	MakeCode	(x=0X595D);
	OpDecimal	(x,	1);
	MakeComm	(0X5962,	"OPEN");
	MakeCode	(x=0X5962);
	OpHex		(x,	1);
	MakeCode	(x=0X5967);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X596D,	"ext_msg_class");
	MakeCode	(0X596D);
	MakeCode	(x=0X5973);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X597D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X597D,	"TESTDOREOUT");
	MakeCode	(x=0X5987);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X598E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X5995,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write");
	MakeCode	(x=0X5995);
	OpHex		(x,	0);
	MakeCode	(x=0X599C);
	OpHex		(x,	1);
	MakeComm	(0X599F,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X599F);
	OpHex		(x,	0);
	MakeCode	(x=0X59A1);
	OpHex		(x,	1);
	MakeComm	(0X59A9,	"-1");
	MakeComm	(0X59AE,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X59AE);
	OpHex		(x,	0);
	MakeCode	(x=0X59B8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X59BB,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X59BB);
	OpHex		(x,	0);
	MakeComm	(0X59D6,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from present location");
	MakeCode	(x=0X59D6);
	OpHex		(x,	0);
	MakeCode	(0X59DA);
	MakeComm	(0X59E6,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X59E6);
	OpHex		(x,	0);
	MakeComm	(0X59EA,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X59EA);
	MakeCode	(x=0X59F3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X59F8);
	OpHex		(x,	1);
	MakeComm	(0X59FB,	"DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)\nCX = attributes for file\nDS:DX -> ASCIZ filename (may include drive and path)");
	MakeCode	(x=0X59FB);
	OpHex		(x,	0);
	MakeCode	(0X5A03);
	MakeComm	(0X5A07,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5A0A,	"mov [PDB.JFN_TABLE+1],al");
	MakeCode	(0X5A0E);
	MakeName	(0X5A0E,	"dstrlen");
	MakeName	(0X5A1B,	"TRIAGEERR_RETN");
	MakeCode	(0X5A1C);
	MakeName	(0X5A1C,	"TriageError");
	MakeCode	(x=0X5A28);
	OpHex		(x,	1);
	MakeComm	(0X5A2A,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X5A2A);
	OpHex		(x,	0);
	MakeCode	(x=0X5A2E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5A31);
	OpDecimal	(x,	1);
	MakeCode	(0X5A43);
	MakeName	(0X5A43,	"Triage_Init");
	MakeCode	(0X5A47);
	MakeName	(0X5A47,	"Move_To_SrcBuf");
	MakeCode	(x=0X5A4A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5A53,	"mts_get_chars");
	MakeCode	(0X5A5C);
	MakeName	(0X5A5C,	"mts_end_string");
	MakeCode	(0X5A6E);
	MakeName	(0X5A6E,	"SINGLETEST");
	MakeCode	(x=0X5A74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5A7B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5A83);
	MakeName	(0X5A83,	"SetRest1");
	MakeName	(0X5A85,	"SETREST");
	MakeCode	(x=0X5A86);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5A8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5A8F);
	MakeName	(0X5A8F,	"PIPEDEL");
	MakeComm	(0X5A96,	"offset Pipe1 = offset RESGROUP:EndInit");
	MakeCode	(x=0X5A99);
	OpHex		(x,	1);
	MakeComm	(0X5A9B,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X5A9B);
	OpHex		(x,	0);
	MakeComm	(0X5A9D,	"offset Pipe2 = offset RESGROUP:EndInit+79");
	MakeCode	(x=0X5AA0);
	OpHex		(x,	1);
	MakeComm	(0X5AA2,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X5AA2);
	OpHex		(x,	0);
	MakeCode	(x=0X5AA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5AAF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5AAF,	"PIPEERRSYN");
	MakeCode	(0X5ABA);
	MakeCode	(x=0X5AC0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5ACE);
	OpDecimal	(x,	1);
	MakeCode	(0X5AD6);
	MakeCode	(0X5AD9);
	MakeCode	(x=0X5ADD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5AE8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5AFF,	"offset DATARES:Pipe1 = RESGROUP:EndInit");
	MakeCode	(x=0X5AFF);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5B02);
	OpHex		(x,	1);
	MakeComm	(0X5B05,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash");
	MakeCode	(x=0X5B05);
	OpHex		(x,	0);
	MakeCode	(x=0X5B09);
	OpHex		(x,	1);
	MakeComm	(0X5B16,	"2Eh");
	MakeCode	(x=0X5B16);
	OpChr		(x,	1);
	MakeComm	(0X5B18,	"offset DATARES:Pipe1 = RESGROUP:EndInit");
	MakeComm	(0X5B1C,	"offset DATARES:Pipe2 = RESGROUP:EndInit+79");
	MakeComm	(0X5B22,	"offset DATARES:Pipe1+1 = RESGROUP:EndInit+1");
	MakeComm	(0X5B26,	"offset DATARES:Pipe2+1 = RESGROUP:EndInit+80");
	MakeComm	(0X5B2A,	"offset DATARES:Pipe1 = offset RESGROUP:EndInit");
	MakeCode	(x=0X5B2F);
	OpHex		(x,	1);
	MakeComm	(0X5B31,	"DOS - 3+ - CREATE UNIQUE FILE\nDS:DX -> ASCIZ directory path name ending with a '' + 13 bytes to\nreceive generated filename\nCX = file attributes (only bits 0,1,2,5 may be set)");
	MakeCode	(x=0X5B31);
	OpHex		(x,	0);
	MakeCode	(0X5B37);
	MakeCode	(x=0X5B39);
	OpHex		(x,	1);
	MakeComm	(0X5B3B,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X5B3B);
	OpHex		(x,	0);
	MakeComm	(0X5B3D,	"offset DATARES:Pipe2 = offset RESGROUP:EndInit+79");
	MakeCode	(x=0X5B40);
	OpHex		(x,	1);
	MakeComm	(0X5B42,	"DOS - 3+ - CREATE UNIQUE FILE\nDS:DX -> ASCIZ directory path name ending with a '' + 13 bytes to\nreceive generated filename\nCX = file attributes (only bits 0,1,2,5 may be set)");
	MakeCode	(x=0X5B42);
	OpHex		(x,	0);
	MakeCode	(0X5B49);
	MakeCode	(x=0X5B4B);
	OpHex		(x,	1);
	MakeComm	(0X5B4D,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X5B4D);
	OpHex		(x,	0);
	MakeComm	(0X5B52,	"offset DATARES:PipePtr = offset RESGROUP:EndInit+158");
	MakeComm	(0X5B56,	"-1");
	MakeCode	(x=0X5B56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5B5D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5B65);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeComm	(0X5B6A,	"offset DATARES:PipePtr = offset RESGROUP:EndInit+158");
	MakeComm	(0X5B6F,	"ALTPIPECHR");
	MakeComm	(0X5B73,	"vbar");
	MakeCode	(x=0X5B7A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5B7E);
	OpHex		(x,	1);
	MakeComm	(0X5B81,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X5B81);
	OpHex		(x,	0);
	MakeCode	(0X5B88);
	MakeComm	(0X5B8C,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5B8F,	"[PDB.JFN_TABLE],al  ; Redirect");
	MakeCode	(x=0X5B92);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5B97,	"'|<CR>'");
	MakeCode	(0X5B9F);
	MakeCode	(0X5BB6);
	MakeCode	(x=0X5BC9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5BCF,	"[PipePtr] = [EndInit+158]");
	MakeCode	(x=0X5BD3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5BDA);
	OpHex		(x,	1);
	MakeComm	(0X5BDD,	"DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)\nCX = attributes for file\nDS:DX -> ASCIZ filename (may include drive and path)");
	MakeCode	(x=0X5BDD);
	OpHex		(x,	0);
	MakeComm	(0X5BE6,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5BE9,	"[PDB.JFN_TABLE+1]");
	MakeCode	(x=0X5BEC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5BF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5BF6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5BFC,	"[PipePtr] = [EndInit+158]");
	MakeCode	(0X5C08);
	MakeCode	(x=0X5C0B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X5C13,	"-1");
	MakeCode	(x=0X5C13);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5C1C);
	MakeName	(0X5C1C,	"DATINIT");
	MakeComm	(0X5C2C,	"mov dx, offset INTERNATVARS");
	MakeCode	(x=0X5C2C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5C2F);
	OpHex		(x,	1);
	MakeComm	(0X5C32,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X5C32);
	OpHex		(x,	0);
	MakeCode	(x=0X5C3A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5C3F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5C4E);
	OpHex		(x,	1);
	MakeName	(0X5C4E,	"DATE");
	MakeCode	(x=0X5C51);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5C67);
	MakeCode	(x=0X5C6C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5C70);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5C74);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5C7D,	"END_OF_LINE (-1)");
	MakeCode	(x=0X5C87);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5C8B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5C8F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5C9D,	"END_OF_LINE (-1)");
	MakeCode	(x=0X5CA3);
	OpHex		(x,	1);
	MakeComm	(0X5CA5,	"DOS - SET CURRENT DATE\nDL = day, DH = month, CX = year\nReturn: AL = 00h if no error /= FFh if bad value sent to routine");
	MakeCode	(x=0X5CA5);
	OpHex		(x,	0);
	MakeCode	(0X5CAC);
	MakeCode	(x=0X5CAF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5CB7);
	OpHex		(x,	1);
	MakeName	(0X5CB7,	"CTIME");
	MakeCode	(x=0X5CBA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5CC4,	"END_OF_LINE");
	MakeComm	(0X5CC9,	"RESULT_NO_ERROR");
	MakeCode	(x=0X5CD0);
	OpHex		(x,	1);
	MakeComm	(0X5CD2,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds");
	MakeCode	(x=0X5CD2);
	OpHex		(x,	0);
	MakeCode	(x=0X5CD8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5CDC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5CE0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5CE9,	"-1 ; END_OF_LINE");
	MakeComm	(0X5CEE,	"0 ; RESULT_NO_ERROR");
	MakeCode	(x=0X5CF3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5CF7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5CFB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5CFF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5D0D,	"-1 ; END_OF_LINE");
	MakeCode	(x=0X5D13);
	OpHex		(x,	1);
	MakeComm	(0X5D15,	"DOS - SET CURRENT TIME\nCH = hours, CL = minutes, DH = seconds, DL = hundredths of seconds\nReturn: AL = 00h if no error / = FFh if bad value sent to routine");
	MakeCode	(x=0X5D15);
	OpHex		(x,	0);
	MakeCode	(0X5D1C);
	MakeCode	(x=0X5D1F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5D27);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X5D27,	"SetInitFlag");
	MakeComm	(0X5D2B,	"~INITSPECIAL ; NOT INITSPECIAL");
	MakeCode	(x=0X5D2B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X5D30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5D37);
	MakeName	(0X5D37,	"PipeOff");
	MakeCode	(x=0X5D40);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5D48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X5D4F);
	OpHex		(x,	1);
	MakeName	(0X5D4F,	"PRINT_TIME");
	MakeComm	(0X5D51,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds");
	MakeCode	(x=0X5D51);
	OpHex		(x,	0);
	MakeCode	(x=0X5D64);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5D6C);
	MakeName	(0X5D6C,	"GETDAT");
	MakeCode	(x=0X5D6F);
	OpHex		(x,	1);
	MakeComm	(0X5D72,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X5D72);
	OpHex		(x,	0);
	MakeComm	(0X5D8D,	"util_msg_class");
	MakeCode	(x=0X5D97);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5DA4,	"STD_CON_STRING_INPUT");
	MakeCode	(x=0X5DA6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5DA9,	"INITSPECIAL");
	MakeComm	(0X5DAF,	"DOS - ");
	MakeCode	(x=0X5DAF);
	OpHex		(x,	0);
	MakeCode	(x=0X5DB9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5DBC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5DC7);
	MakeName	(0X5DC7,	"GETTIM");
	MakeCode	(x=0X5DC9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5DCF,	"STD_CON_STRING_INPUT");
	MakeCode	(x=0X5DD1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5DD4,	"INITSPECIAL");
	MakeComm	(0X5DDA,	"DOS - ");
	MakeCode	(x=0X5DDA);
	OpHex		(x,	0);
	MakeCode	(x=0X5DE4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5DE7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5DF2);
	MakeName	(0X5DF2,	"skip_white");
	MakeComm	(0X5DFE,	"65535");
	MakeCode	(0X5DFE);
	MakeName	(0X5DFE,	"copy_pipe_path");
	MakeComm	(0X5E10,	"offset DATARES:Pipe1\n(offset RESGROUP:EndINit)");
	MakeComm	(0X5E1E,	"offset DATARES:Pipe2\n(offset RESGROUP:EndINit+79)");
	MakeCode	(0X5E25);
	MakeName	(0X5E25,	"PARSELINE");
	MakeCode	(x=0X5E2C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5E31);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5E39,	"ARG_UNIT.SIZE");
	MakeCode	(x=0X5E39);
	OpDecimal	(x,	1);
	MakeComm	(0X5E3C,	"offset ARG");
	MakeCode	(x=0X5E3C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5E41,	"ARG+ARG_UNIT.argbuf");
	MakeCode	(x=0X5E41);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5E47,	"[ARG+ARG_UNIT.argswinfo]");
	MakeCode	(x=0X5E47);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5E4D,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X5E4D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5E53);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5E57);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5E5B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X5E63,	"ARG+ARG_UNIT.argforcombuf");
	MakeCode	(x=0X5E63);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5E68);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5E70);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5E73);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5E78);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5E7E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5E94);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X5EA0);
	MakeCode	(0X5EA4);
	MakeCode	(0X5EAD);
	MakeName	(0X5EAD,	"newarg");
	MakeComm	(0X5EB6,	"cmp [ARG+ARG_UNIT.argvcnt],ARGMAX");
	MakeCode	(x=0X5EB6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X5EBF,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X5EBF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5EC3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5EC7,	"ARG+ARG_UNIT.argv");
	MakeCode	(x=0X5EC7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5ECD,	"[bx+ARGV_ELE.argsw_word]");
	MakeComm	(0X5ED2,	"[bx+ARGV_ELE.arglen]");
	MakeComm	(0X5ED5,	"[bx+ARGV_ELE.argflags]");
	MakeCode	(x=0X5ED8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5EDC,	"[bx+ARGV_ELE.argpointer]");
	MakeCode	(x=0X5EDE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5EE4,	"[bx+ARGV_ELE.argstartel]");
	MakeCode	(x=0X5EE7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5EEB,	"[bx+ARGV_ELE.arg_ocomptr]");
	MakeCode	(x=0X5EF0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5EF6,	"ARG+ARG_UNIT.argbuf+ARGBLEN-1");
	MakeCode	(x=0X5EF6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5F01,	"ANULL");
	MakeCode	(x=0X5F04);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X5F0C);
	MakeCode	(0X5F11);
	MakeCode	(0X5F1C);
	MakeName	(0X5F1C,	"arg_switch");
	MakeCode	(x=0X5F21);
	OpHex		(x,	1);
	MakeComm	(0X5F26,	"-1");
	MakeCode	(x=0X5F26);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5F2D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5F31,	"ARG+ARG_UNIT.argv ; ARG+0");
	MakeCode	(x=0X5F31);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5F37,	"[bx+ARGV_ELE.argsw_word]");
	MakeComm	(0X5F3A,	"[ARG+ARG_UNIT.argswinfo]");
	MakeCode	(x=0X5F3A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5F42,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X5F42);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5F45);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X5F4F);
	MakeName	(0X5F4F,	"argv_calc");
	MakeComm	(0X5F52,	"ARGV_ELE.SIZE");
	MakeCode	(x=0X5F52);
	OpDecimal	(x,	1);
	MakeCode	(0X5F5B);
	MakeName	(0X5F5B,	"path_search");
	MakeComm	(0X5F62,	"[ARG+ARGV_ELE.argflags],wildcard+sw_flag");
	MakeCode	(x=0X5F62);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X5F6C);
	MakeCode	(x=0X5F6F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5F72);
	OpHex		(x,	1);
	MakeComm	(0X5F75,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X5F75);
	OpHex		(x,	0);
	MakeComm	(0X5F7B,	"[pathinfo+0]");
	MakeCode	(x=0X5F7B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5F7F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X5F83);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X5F88,	"PBUFLEN");
	MakeCode	(x=0X5F88);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5F8B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5F95);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5FA4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5FA7,	"[ARG+ARGV_ELE.argpointer]");
	MakeCode	(x=0X5FA7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X5FAB,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(x=0X5FAB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5FB1);
	OpChr		(x,	1);
	MakeCode	(x=0X5FBD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5FC0);
	OpChr		(x,	1);
	MakeCode	(0X5FC5);
	MakeCode	(x=0X5FCA);
	OpHex		(x,	1);
	MakeComm	(0X5FCE,	"'a'-1");
	MakeCode	(x=0X5FCE);
	OpHex		(x,	1);
	MakeCode	(x=0X5FD1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5FDC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X5FE7);
	OpHex		(x,	1);
	MakeComm	(0X5FEA,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X5FEA);
	OpHex		(x,	0);
	MakeCode	(x=0X5FEF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X5FFF);
	MakeComm	(0X600D,	"[ARG+ARGV_ELE.argflags],path_sep");
	MakeCode	(x=0X600D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X6014);
	OpChr		(x,	1);
	MakeComm	(0X6016,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(x=0X6016);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X601A,	"[ARG+ARGV_ELE.argpointer]");
	MakeCode	(x=0X601A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X601E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6034);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6037);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X603B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6040,	"[pathinfo+0]");
	MakeCode	(x=0X6040);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6060);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X606A);
	OpHex		(x,	1);
	MakeComm	(0X606D,	"'a'-1");
	MakeCode	(x=0X606D);
	OpHex		(x,	1);
	MakeCode	(x=0X6075);
	OpHex		(x,	1);
	MakeComm	(0X6078,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X6078);
	OpHex		(x,	0);
	MakeComm	(0X608B,	"[pathinfo+0]");
	MakeCode	(x=0X608B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X60A3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X60A8);
	MakeCode	(x=0X60AC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X60B5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X60B5,	"path_success");
	MakeCode	(0X60CA);
	MakeName	(0X60CA,	"STORE_PCHAR");
	MakeCode	(x=0X60D4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X60D9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X60DE);
	MakeName	(0X60DE,	"path_crunch");
	MakeCode	(x=0X60E7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X60EA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X60EE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X60F3,	"[pathinfo+0]");
	MakeCode	(x=0X60F3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X610E);
	MakeCode	(0X6113);
	MakeCode	(x=0X6114);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X611C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6122);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X6122,	"path_cr_look");
	MakeCode	(x=0X6137);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X613A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X614B);
	MakeCode	(0X6153);
	MakeName	(0X6153,	"PSEARCH");
	MakeCode	(x=0X615B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6168,	"~20h  ; uppercase");
	MakeCode	(x=0X6168);
	OpHex		(x,	1);
	MakeComm	(0X616B,	"convert to drive number");
	MakeCode	(x=0X616E);
	OpHex		(x,	1);
	MakeComm	(0X6171,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X6171);
	OpHex		(x,	0);
	MakeComm	(0X6176,	"search_attr");
	MakeCode	(x=0X6179);
	OpHex		(x,	1);
	MakeComm	(0X617C,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X617C);
	OpHex		(x,	0);
	MakeComm	(0X6180,	"SEARCH_FILE_NOT_FOUND ; 0");
	MakeCode	(x=0X6180);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6185,	"ANULL ; 0");
	MakeCode	(x=0X6185);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X618D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6193);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6196,	"FBUF+FIND_BUF.PNAME");
	MakeCode	(x=0X6196);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6199);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X619C,	"FNAME_MAX_LEN");
	MakeCode	(x=0X619C);
	OpDecimal	(x,	1);
	MakeComm	(0X61A2,	"SEARCH_COM");
	MakeComm	(0X61A6,	"SEARCH_ATTR");
	MakeCode	(x=0X61A9);
	OpHex		(x,	1);
	MakeComm	(0X61AC,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call");
	MakeCode	(x=0X61AC);
	OpHex		(x,	0);
	MakeCode	(x=0X61B0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X61B3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X61BA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X61BD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X61C2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X61D2);
	MakeName	(0X61D2,	"SEARCH_FTYPE");
	MakeComm	(0X61D7,	"FBUF+FIND_BUF.PNAME");
	MakeCode	(x=0X61D7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X61DA,	"FNAME_MAX_LEN");
	MakeCode	(x=0X61DA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X61E5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X61F0,	"SEARCH_COM");
	MakeCode	(0X61F5);
	MakeCode	(x=0X61F7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6200,	"SEARCH_EXE");
	MakeCode	(0X6205);
	MakeCode	(x=0X6207);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6210,	"SEARCH_BAT");
	MakeCode	(0X6215);
	MakeCode	(x=0X6218);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X621F,	"ANULL");
	MakeCode	(x=0X6224);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6227,	"SEARCH_COM");
	MakeCode	(0X622D);
	MakeName	(0X622D,	"STRIP");
	MakeCode	(x=0X6234);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6239,	"[ARG+ARGV_ELE.argpointer]");
	MakeCode	(x=0X6239);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X623D,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(x=0X623D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6248,	"[ARG+ARGV_ELE.arglen]");
	MakeCode	(x=0X6248);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6256);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6271);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6286);
	MakeCode	(0X628F);
	MakeName	(0X628F,	"SAVE_ARGS");
	MakeComm	(0X6296,	"ARG_UNIT.SIZE+15");
	MakeCode	(x=0X6296);
	OpDecimal	(x,	1);
	MakeCode	(x=0X629E);
	OpHex		(x,	1);
	MakeComm	(0X62A1,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X62A1);
	OpHex		(x,	0);
	MakeComm	(0X62AA,	"ARG_UNIT.SIZE");
	MakeCode	(x=0X62AA);
	OpDecimal	(x,	1);
	MakeComm	(0X62AF,	"offset ARG");
	MakeCode	(x=0X62AF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X62B4,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X62B4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X62BA,	"offset ARG");
	MakeCode	(x=0X62BA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X62C5,	"[ARG+ARGV_ELE.argpointer+bx]");
	MakeCode	(x=0X62C5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X62CE,	"[ARG+ARGV_ELE.argstartel+bx]");
	MakeCode	(x=0X62CE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X62D4,	"[es:bx+ARGV_ELE.argstartel]");
	MakeComm	(0X62D8,	"[ARG+ARGV_ELE.arg_ocomptr+bx]");
	MakeCode	(x=0X62D8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X62DE,	"[es:bx+ARGV_ELE.arg_ocomptr]");
	MakeCode	(0X62E4);
	MakeCode	(0X62E9);
	MakeCode	(0X62ED);
	MakeCode	(x=0X62F6);
	OpDecimal	(x,	1);
	MakeComm	(0X62F9,	"FCB+1");
	MakeCode	(x=0X62F9);
	OpHex		(x,	1);
	MakeCode	(x=0X62FD);
	OpChr		(x,	1);
	MakeCode	(x=0X6308);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X630E);
	OpHex		(x,	1);
	MakeCode	(x=0X6313);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6317);
	OpHex		(x,	1);
	MakeComm	(0X631A,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X631A);
	OpHex		(x,	0);
	MakeComm	(0X632A,	"NO character");
	MakeCode	(0X632A);
	MakeComm	(0X632E,	"YES character");
	MakeComm	(0X6339,	"FCB");
	MakeCode	(x=0X6339);
	OpHex		(x,	1);
	MakeComm	(0X633C,	"DOS - DELETE FILE via FCB\nDS:DX -> FCB with filename field filled with\ntemplate for  deletion ('?' wildcard allowed, but not '*')\nReturn: AL = 00h file found, FFh file not found");
	MakeCode	(x=0X633C);
	OpHex		(x,	0);
	MakeCode	(0X6346);
	MakeName	(0X6346,	"eraerr");
	MakeComm	(0X634E,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X634E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X6355,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X6355);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X635B,	"cerrorj2");
	MakeCode	(0X635E);
	MakeCode	(x=0X6363);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6366,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X6366);
	OpHex		(x,	0);
	MakeCode	(x=0X636A);
	OpHex		(x,	1);
	MakeComm	(0X636D,	"DOS - SEARCH FIRST USING FCB\nDS:DX -> FCB");
	MakeCode	(x=0X636D);
	OpHex		(x,	0);
	MakeCode	(x=0X6373);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6376);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6379);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6383);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6388,	"END_OF_LINE_OUT");
	MakeCode	(x=0X6392);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6396);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X639C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X639F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X63A3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X63A9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X63AF);
	OpHex		(x,	1);
	MakeComm	(0X63B2,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X63B2);
	OpHex		(x,	0);
	MakeComm	(0X63BA,	"NO character");
	MakeCode	(0X63BA);
	MakeComm	(0X63BE,	"YES character");
	MakeCode	(0X63C4);
	MakeCode	(x=0X63C6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X63C9,	"DOS - DELETE FILE via FCB\nDS:DX -> FCB with filename field filled with\ntemplate for  deletion ('?' wildcard allowed, but not '*')\nReturn: AL = 00h file found, FFh file not found");
	MakeCode	(x=0X63C9);
	OpHex		(x,	0);
	MakeComm	(0X63D2,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X63E2);
	MakeCode	(0X63E5);
	MakeCode	(x=0X63E7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X63EA,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X63EA);
	OpHex		(x,	0);
	MakeCode	(x=0X63EE);
	OpHex		(x,	1);
	MakeComm	(0X63F1,	"DOS - SEARCH NEXT USING FCB\nDS:DX -> FCB\nReturn: AL = status");
	MakeCode	(x=0X63F1);
	OpHex		(x,	0);
	MakeCode	(0X63FA);
	MakeComm	(0X63FD,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X63FD);
	OpDecimal	(x,	1);
	MakeCode	(0X6405);
	MakeCode	(0X640C);
	MakeName	(0X640C,	"ECHO");
	MakeCode	(x=0X6411);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6417);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X641D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(0X6423);
	MakeName	(0X6423,	"CERRORJ");
	MakeCode	(0X6426);
	MakeCode	(x=0X642B);
	OpHex		(x,	1);
	MakeCode	(x=0X6434);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6438);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X643E);
	OpHex		(x,	1);
	MakeCode	(x=0X6441);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X6446);
	MakeName	(0X6446,	"CNTRLC");
	MakeComm	(0X6449,	"(SET_CTRL_C_TRAPPING<<8)|1");
	MakeComm	(0X6452,	"DOS - EXTENDED CONTROL-BREAK CHECKING\nAL = 00h get state / 01h set state / 02h set AND get\nDL = 00h for OFF or 01h for ON");
	MakeCode	(x=0X6452);
	OpHex		(x,	0);
	MakeCode	(0X6455);
	MakeComm	(0X6457,	"DOS - ");
	MakeCode	(x=0X6457);
	OpHex		(x,	0);
	MakeCode	(0X645A);
	MakeComm	(0X6461,	"DOS - ");
	MakeCode	(x=0X6461);
	OpHex		(x,	0);
	MakeCode	(x=0X6465);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6468);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X6468,	"PYN");
	MakeCode	(x=0X646F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6476,	"util_msg_class ; -1");
	MakeComm	(0X647B,	"Ptr_off_pos");
	MakeCode	(0X6489);
	MakeName	(0X6489,	"VERIFY");
	MakeComm	(0X648C,	"(SET_VERIFY_ON_WRITE<<8)|1");
	MakeComm	(0X6493,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X6493);
	OpHex		(x,	0);
	MakeCode	(0X6496);
	MakeComm	(0X6498,	"DOS - ");
	MakeCode	(x=0X6498);
	OpHex		(x,	0);
	MakeCode	(0X649B);
	MakeCode	(x=0X64A0);
	OpHex		(x,	1);
	MakeComm	(0X64A2,	"DOS - 2+ - GET VERIFY FLAG\nReturn: AL = 00h if flag OFF\nAL = 01h if flag ON");
	MakeCode	(x=0X64A2);
	OpHex		(x,	0);
	MakeCode	(x=0X64A6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X64AB);
	OpHex		(x,	1);
	MakeName	(0X64AB,	"ON_OFF");
	MakeComm	(0X64AF,	"blank");
	MakeComm	(0X64B3,	"tab_chr");
	MakeComm	(0X64B7,	"equal_chr");
	MakeCode	(x=0X64BC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X64C6,	"END_OF_LINE ; -1");
	MakeComm	(0X64D4,	"-1");
	MakeCode	(0X64D4);
	MakeComm	(0X64DB,	"BadParm_Ptr");
	MakeCode	(0X64E0);
	MakeCode	(x=0X64E7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X64EF,	"END_OF_LINE");
	MakeCode	(0X64F8);
	MakeCode	(x=0X64FB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X6500);
	MakeName	(0X6500,	"PRINT_DATE");
	MakeCode	(x=0X6509);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X650D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6511);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X651A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X651A,	"GetDate");
	MakeCode	(x=0X651D);
	OpHex		(x,	1);
	MakeComm	(0X651F,	"DOS - GET CURRENT DATE\nReturn: DL = day, DH = month, CX = year\nAL = day of the week (0=Sunday, 1=Monday, etc.)");
	MakeCode	(x=0X651F);
	OpHex		(x,	0);
	MakeCode	(x=0X6526);
	OpHex		(x,	1);
	MakeComm	(0X6528,	"SI=AX*3");
	MakeComm	(0X652F,	"util_msg_class");
	MakeComm	(0X653D,	"END_OF_LINE_OUT");
	MakeCode	(0X6543);
	MakeName	(0X6543,	"char_in_xlat");
	MakeComm	(0X6547,	"(GetExtCntry<<8)+35");
	MakeCode	(x=0X6547);
	OpHex		(x,	1);
	MakeComm	(0X654A,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X654A);
	OpHex		(x,	0);
	MakeCode	(0X654D);
	MakeName	(0X654D,	"COPY");
	MakeComm	(0X655E,	"[DestSwitch]");
	MakeComm	(0X6567,	"[DestClosed]");
	MakeComm	(0X6579,	"[DestVars]");
	MakeComm	(0X657C,	"[SrcVars]");
	MakeComm	(0X6585,	"[RDEOF]");
	MakeComm	(0X65A9,	"[AllSwitch]");
	MakeComm	(0X65AC,	"[ArgC]");
	MakeComm	(0X65BE,	"[Concat]");
	MakeComm	(0X65C7,	"MSDOS 6.22");
	MakeComm	(0X65D9,	"[DIRBUF]");
	MakeComm	(0X65DC,	"[DestFcb]");
	MakeComm	(0X65E2,	"-1");
	MakeComm	(0X65E3,	"[DESTHAND]");
	MakeCode	(x=0X65F2);
	OpHex		(x,	1);
	MakeCode	(x=0X65F5);
	OpChr		(x,	1);
	MakeCode	(x=0X6602);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6611,	"no \"+\" delimiter");
	MakeCode	(x=0X6611);
	OpHex		(x,	1);
	MakeCode	(x=0X661B);
	OpHex		(x,	1);
	MakeComm	(0X6620,	"not a switch");
	MakeComm	(0X6623,	"SwitchV\nVerify requested?");
	MakeCode	(x=0X6623);
	OpHex		(x,	1);
	MakeComm	(0X6629,	"test word [AllSwitch],SwitchV\nVerify already entered?");
	MakeCode	(x=0X6629);
	OpHex		(x,	1);
	MakeComm	(0X6631,	"FBadSwitch\nSet up bad switch");
	MakeCode	(x=0X6631);
	OpHex		(x,	1);
	MakeComm	(0X6635,	"negative Y (-Y) switch flag");
	MakeCode	(x=0X6635);
	OpHex		(x,	1);
	MakeComm	(0X663B,	"[AllSwitch] negative (-Y) flag");
	MakeCode	(x=0X663B);
	OpHex		(x,	1);
	MakeComm	(0X6641,	"N flag");
	MakeComm	(0X6643,	"[AllSwitch] SwitchY (Y) flag");
	MakeCode	(x=0X6643);
	OpHex		(x,	1);
	MakeComm	(0X664B,	"FBadSwitch (Repetitive)\nSet up bad switch");
	MakeCode	(x=0X664B);
	OpHex		(x,	1);
	MakeComm	(0X664F,	"cox_y setting will be used");
	MakeCode	(x=0X6654);
	OpHex		(x,	1);
	MakeComm	(0X6658,	"not a /Y switch");
	MakeCode	(x=0X665C);
	OpChr		(x,	1);
	MakeCode	(x=0X6660);
	OpChr		(x,	1);
	MakeComm	(0X6664,	"FBadSwitch\nSet up bad switch");
	MakeCode	(x=0X6664);
	OpHex		(x,	1);
	MakeCode	(0X666A);
	MakeComm	(0X666E,	"[AllSwitch] negative (-Y) flag");
	MakeCode	(x=0X666E);
	OpHex		(x,	1);
	MakeComm	(0X6674,	"N flag");
	MakeComm	(0X6676,	"[AllSwitch] SwitchY (Y) flag");
	MakeCode	(x=0X6676);
	OpHex		(x,	1);
	MakeComm	(0X667E,	"FBadSwitch (Repetitive)\nSet up bad switch");
	MakeCode	(x=0X667E);
	OpHex		(x,	1);
	MakeComm	(0X6687,	"set [DestSwitch] SwitchY flag to 1");
	MakeComm	(0X668B,	"set [AllSwitch] SwitchY flag to 1");
	MakeComm	(0X668F,	"~SwitchCopy ; not SwitchCopy");
	MakeCode	(x=0X668F);
	OpHex		(x,	1);
	MakeComm	(0X6696,	"BadSwt_Ptr");
	MakeCode	(0X669F);
	MakeCode	(0X66A5);
	MakeCode	(x=0X66A8);
	OpHex		(x,	1);
	MakeComm	(0X66AD,	"inc byte [ArgC]");
	MakeCode	(x=0X66B5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X66BA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X66CD,	"[DestSwitch]");
	MakeCode	(0X66D7);
	MakeComm	(0X66DE,	"[ArgC]");
	MakeCode	(x=0X66EC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X66F2);
	MakeComm	(0X66F5,	"[Concat]");
	MakeCode	(x=0X66F8);
	OpHex		(x,	1);
	MakeCode	(x=0X66FA);
	OpHex		(x,	1);
	MakeComm	(0X66FF,	"[ArgC]");
	MakeCode	(x=0X6706);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6709,	"LessArgs_Ptr");
	MakeCode	(0X6711);
	MakeCode	(x=0X6715);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6718,	"MoreArgs_Ptr");
	MakeComm	(0X671E,	"parse_msg_class");
	MakeComm	(0X6726,	"offset DestVars");
	MakeCode	(x=0X6726);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6730);
	OpChr		(x,	1);
	MakeCode	(x=0X6732);
	OpChr		(x,	1);
	MakeComm	(0X6734,	"[bp+VARSTRUC.SIZ]");
	MakeCode	(x=0X6738);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X673C,	"[DestSwitch]");
	MakeComm	(0X6742,	"[bp+VARSTRUC.INFO]");
	MakeComm	(0X6746,	"[bp+VARSTRUC.ISDIR]");
	MakeComm	(0X6753,	"3Ah");
	MakeCode	(x=0X6753);
	OpChr		(x,	1);
	MakeCode	(x=0X675B);
	OpHex		(x,	1);
	MakeCode	(x=0X675F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6769,	"[bp+VARSTRUC.TTAIL]");
	MakeCode	(x=0X6771);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6774);
	OpChr		(x,	1);
	MakeCode	(x=0X677F);
	OpHex		(x,	1);
	MakeComm	(0X6789,	"SwitchV");
	MakeCode	(x=0X6789);
	OpHex		(x,	1);
	MakeCode	(x=0X678E);
	OpHex		(x,	1);
	MakeComm	(0X6790,	"DOS - 2+ - GET VERIFY FLAG\nReturn: AL = 00h if flag OFF\nAL = 01h if flag ON");
	MakeCode	(x=0X6790);
	OpHex		(x,	0);
	MakeCode	(x=0X6799);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X679D);
	OpHex		(x,	1);
	MakeComm	(0X67A0,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X67A0);
	OpHex		(x,	0);
	MakeCode	(x=0X67A4);
	OpHex		(x,	1);
	MakeComm	(0X67A7,	"plus_chr ; 2Bh");
	MakeCode	(x=0X67A7);
	OpChr		(x,	1);
	MakeCode	(x=0X67A9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X67AF);
	OpHex		(x,	1);
	MakeComm	(0X67B4,	"[DestSwitch]");
	MakeCode	(x=0X67B4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X67B8);
	OpHex		(x,	1);
	MakeComm	(0X67BE,	"[Concat]");
	MakeCode	(x=0X67BE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X67C5,	"SWITCHA");
	MakeCode	(x=0X67C5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X67D3);
	MakeName	(0X67D3,	"ENDCOPY");
	MakeCode	(x=0X67D6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X67D6,	"ENDCOPY2");
	MakeCode	(x=0X67D9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X67DD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X67E7,	"[Concat]");
	MakeCode	(x=0X67E7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X67EE,	"ext_msg_class");
	MakeCode	(x=0X67EE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X67F3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X67F6,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X67F6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X67FC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6802,	"one_subst");
	MakeCode	(x=0X6802);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X680A);
	MakeName	(0X680A,	"SOURCEPROC");
	MakeComm	(0X680D,	"[Concat]");
	MakeCode	(x=0X680D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6814,	"FRSTSRC");
	MakeCode	(x=0X6816);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6819);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X681C,	"[DestClosed]");
	MakeCode	(x=0X681C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X681F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X681F,	"LEAVECFLAG");
	MakeCode	(x=0X6823);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6826,	"offset SrcVars");
	MakeCode	(x=0X6826);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X682C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6831);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X683A);
	MakeCode	(x=0X683C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6840);
	OpChr		(x,	1);
	MakeCode	(x=0X6842);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X684A);
	OpHex		(x,	1);
	MakeCode	(x=0X684F);
	OpHex		(x,	1);
	MakeCode	(x=0X6857);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X685E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6865);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X686A,	"FCB");
	MakeCode	(x=0X686A);
	OpHex		(x,	1);
	MakeCode	(x=0X686D);
	OpHex		(x,	1);
	MakeComm	(0X6870,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X6870);
	OpHex		(x,	0);
	MakeCode	(x=0X6877);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X687A);
	OpChr		(x,	1);
	MakeCode	(x=0X6881);
	OpHex		(x,	1);
	MakeCode	(x=0X6883);
	OpHex		(x,	1);
	MakeComm	(0X6885,	"mov [FCB],al");
	MakeComm	(0X6888,	"DIR_SEARCH_FIRST");
	MakeCode	(0X6897);
	MakeCode	(x=0X6899);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X68A1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X68A4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X68A7,	"offset DIRBUF");
	MakeCode	(x=0X68A7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X68AE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X68B1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X68B5,	"offset DIRBUF+1");
	MakeCode	(x=0X68B5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X68BB,	"/Y switch override (question) enabled ?");
	MakeCode	(x=0X68BB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X68C0,	"no");
	MakeCode	(x=0X68C5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X68C8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X68CB,	"xNameTrans");
	MakeCode	(x=0X68CB);
	OpHex		(x,	1);
	MakeComm	(0X68CD,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X68CD);
	OpHex		(x,	0);
	MakeComm	(0X68D2,	"different file names");
	MakeComm	(0X68D4,	"[Concat]");
	MakeCode	(x=0X68D4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X68D9,	"concatenating");
	MakeCode	(x=0X68DB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X68E4,	"\"File cannot be copied onto itself\"");
	MakeCode	(x=0X68E4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X68EA,	"destination file created flag");
	MakeCode	(x=0X68EA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X68EF,	"yes, new (created) file\nno, overwrite question (must be confirmed)");
	MakeComm	(0X68F4,	"answer is no");
	MakeComm	(0X68F6,	"[Concat]");
	MakeCode	(x=0X68F6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X68FD,	"is there a (valid) target file ?");
	MakeCode	(x=0X68FD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6902,	"yes");
	MakeComm	(0X6904,	"no, destination/target file does not exist");
	MakeComm	(0X6906,	"is 'Mel Hallerman copy' false ?");
	MakeCode	(x=0X6906);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X690B,	"no (, it is true)");
	MakeComm	(0X690D,	"[Concat]");
	MakeCode	(x=0X690D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6914,	"[DestClosed]");
	MakeCode	(x=0X6914);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X691C);
	MakeCode	(x=0X6921);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X692B,	"[DestClosed]");
	MakeCode	(x=0X692B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6933,	"[Concat]");
	MakeCode	(x=0X6933);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X693A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X6941);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X694D,	"[Concat]");
	MakeCode	(x=0X694D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6959,	"clear new file (created) flag");
	MakeCode	(x=0X6959);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X695E,	"[Concat]");
	MakeCode	(x=0X695E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6968);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X6971);
	MakeComm	(0X6976,	"[DestClosed]");
	MakeCode	(x=0X6976);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X697E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6985);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6989);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X698D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6994);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6998,	"2Bh");
	MakeCode	(x=0X6998);
	OpChr		(x,	1);
	MakeCode	(x=0X699A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X69A0);
	OpHex		(x,	1);
	MakeCode	(x=0X69A5);
	OpHex		(x,	1);
	MakeComm	(0X69B0,	"offset DESTFCB2");
	MakeCode	(x=0X69B0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X69B3);
	OpHex		(x,	1);
	MakeComm	(0X69B6,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X69B6);
	OpHex		(x,	0);
	MakeCode	(x=0X69B8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X69BB,	"offset DESTFCB2+1");
	MakeCode	(x=0X69BB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X69BE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X69C5,	"[Concat]");
	MakeCode	(x=0X69C5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X69CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X69D4);
	MakeCode	(0X69D7);
	MakeCode	(x=0X69DC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X69DF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X69E2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X69E5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X69E9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X69F5);
	MakeComm	(0X69F8,	"DIR_SEARCH_NEXT");
	MakeCode	(0X69F8);
	MakeName	(0X69F8,	"SEARCHNEXT");
	MakeCode	(x=0X69FA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(0X6A04);
	MakeName	(0X6A04,	"SEARCH");
	MakeCode	(x=0X6A07);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6A0A,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X6A0A);
	OpHex		(x,	0);
	MakeCode	(x=0X6A0D);
	OpHex		(x,	1);
	MakeComm	(0X6A10,	"DOS - ");
	MakeCode	(x=0X6A10);
	OpHex		(x,	0);
	MakeCode	(x=0X6A15);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X6A15,	"DOCOPY");
	MakeCode	(x=0X6A18);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6A1B);
	OpHex		(x,	1);
	MakeComm	(0X6A1D,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X6A1D);
	OpHex		(x,	0);
	MakeComm	(0X6A1F,	"[RDEOF]");
	MakeCode	(x=0X6A1F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A27);
	OpHex		(x,	1);
	MakeComm	(0X6A2F,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X6A2F);
	OpHex		(x,	0);
	MakeCode	(0X6A35);
	MakeCode	(x=0X6A37);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A3B);
	OpHex		(x,	1);
	MakeComm	(0X6A3E,	"DOS - 2+ - GET FILE'S DATE/TIME\nBX = file handle");
	MakeCode	(x=0X6A3E);
	OpHex		(x,	0);
	MakeCode	(x=0X6A42);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A46);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6A4C);
	MakeCode	(x=0X6A4F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6A55);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A5D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A67);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6A71);
	MakeCode	(x=0X6A74);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6A78);
	OpHex		(x,	1);
	MakeComm	(0X6A7B,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X6A7B);
	OpHex		(x,	0);
	MakeCode	(x=0X6A7D);
	OpHex		(x,	1);
	MakeCode	(x=0X6A80);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A86);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6A8D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6A93);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6A97);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6A9B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6AA6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6AAD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6AB2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6AB6);
	OpHex		(x,	1);
	MakeComm	(0X6AB8,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X6AB8);
	OpHex		(x,	0);
	MakeCode	(x=0X6AC1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6AC8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6AD1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6AD8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6AE1,	"inc byte [RDEOF]");
	MakeCode	(x=0X6AE1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6AEA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6AEE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6AF2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6AFB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6B04);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6B0B,	"cmp byte [RDEOF],0");
	MakeCode	(x=0X6B0B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6B12);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X6B12,	"CLOSESRC");
	MakeCode	(x=0X6B16);
	OpHex		(x,	1);
	MakeComm	(0X6B18,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6B18);
	OpHex		(x,	0);
	MakeName	(0X6B1A,	"CLOSESRCDEST_RETN");
	MakeComm	(0X6B1B,	"byte [DestClosed]");
	MakeCode	(x=0X6B1B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6B1B,	"CLOSEDEST");
	MakeComm	(0X6B22,	"byte [DestSwitch]");
	MakeCode	(x=0X6B22);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6B2A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X6B35);
	MakeCode	(x=0X6B38);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6B3C,	"EOF mark (ctrl-Z)");
	MakeCode	(x=0X6B41);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6B45);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6B4A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6B4D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6B5D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6B67,	"[DESTHAND]");
	MakeCode	(x=0X6B67);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6B6B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6B6F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6B73);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6B7A);
	OpHex		(x,	1);
	MakeComm	(0X6B7C,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds");
	MakeCode	(x=0X6B7C);
	OpHex		(x,	0);
	MakeCode	(x=0X6B7E);
	OpHex		(x,	1);
	MakeCode	(x=0X6B80);
	OpHex		(x,	1);
	MakeCode	(x=0X6B82);
	OpHex		(x,	1);
	MakeCode	(x=0X6B84);
	OpHex		(x,	1);
	MakeCode	(x=0X6B86);
	OpHex		(x,	1);
	MakeCode	(x=0X6B88);
	OpHex		(x,	1);
	MakeCode	(x=0X6B8D);
	OpHex		(x,	1);
	MakeComm	(0X6B8F,	"DOS - GET CURRENT DATE\nReturn: DL = day, DH = month, CX = year\nAL = day of the week (0=Sunday, 1=Monday, etc.)");
	MakeCode	(x=0X6B8F);
	OpHex		(x,	0);
	MakeCode	(x=0X6B91);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6B97);
	OpHex		(x,	1);
	MakeCode	(x=0X6B99);
	OpHex		(x,	1);
	MakeCode	(x=0X6B9B);
	OpHex		(x,	1);
	MakeCode	(x=0X6B9D);
	OpHex		(x,	1);
	MakeCode	(x=0X6B9F);
	OpHex		(x,	1);
	MakeCode	(x=0X6BA1);
	OpHex		(x,	1);
	MakeName	(0X6BAB,	"DODCLOSE");
	MakeCode	(x=0X6BB0);
	OpHex		(x,	1);
	MakeComm	(0X6BB3,	"DOS - 2+ - SET FILE'S DATE/TIME\nBX = file handle, CX = time to be set\nDX = date to be set");
	MakeCode	(x=0X6BB3);
	OpHex		(x,	0);
	MakeComm	(0X6BBE,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X6BBE);
	OpHex		(x,	0);
	MakeCode	(x=0X6BC3);
	OpHex		(x,	1);
	MakeComm	(0X6BC6,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X6BC6);
	OpHex		(x,	0);
	MakeCode	(x=0X6BC9);
	OpHex		(x,	1);
	MakeComm	(0X6BCB,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6BCB);
	OpHex		(x,	0);
	MakeCode	(0X6BD9);
	MakeCode	(x=0X6BDC);
	OpHex		(x,	1);
	MakeCode	(x=0X6BE7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6BEB,	"[DestClosed]");
	MakeCode	(x=0X6BEB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6BEF,	"RET50");
	MakeComm	(0X6BF1,	"[DESTHAND]");
	MakeCode	(x=0X6BF1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6BFB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6C03);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X6C03,	"DestDelete");
	MakeCode	(x=0X6C06);
	OpHex		(x,	1);
	MakeComm	(0X6C08,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X6C08);
	OpHex		(x,	0);
	MakeCode	(0X6C0B);
	MakeName	(0X6C0B,	"SOURCE_SET");
	MakeCode	(x=0X6C0C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6C0F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6C14);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6C19);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6C1C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6C23);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6C34);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6C34,	"CleanUpErr");
	MakeCode	(x=0X6C3E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6C44,	"one_subst");
	MakeCode	(x=0X6C44);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6C4D,	"clear validation flag");
	MakeCode	(x=0X6C4D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6C4D,	"get_answer_YNA");
	MakeCode	(x=0X6C55);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6C58,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash");
	MakeCode	(x=0X6C58);
	OpHex		(x,	0);
	MakeComm	(0X6C5F,	"valid destination file");
	MakeCode	(x=0X6C5F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6C63);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6C67,	"sublist size, 11 bytes");
	MakeCode	(x=0X6C67);
	OpDecimal	(x,	1);
	MakeComm	(0X6C6B,	"sublist value (pointer)");
	MakeCode	(x=0X6C6B);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6C70,	"sublist segment");
	MakeCode	(x=0X6C70);
	OpHex		(x,	0);
	MakeComm	(0X6C73,	"sub id (N of %N)");
	MakeCode	(x=0X6C73);
	OpHex		(x,	0);
	MakeComm	(0X6C77,	"data type flags");
	MakeCode	(x=0X6C77);
	OpHex		(x,	0);
	MakeComm	(0X6C7B,	"maximum length (chars)");
	MakeCode	(x=0X6C7B);
	OpHex		(x,	0);
	MakeComm	(0X6C7F,	"minimum length (chars)");
	MakeCode	(x=0X6C7F);
	OpHex		(x,	0);
	MakeComm	(0X6C83,	"pad field character (0)");
	MakeCode	(x=0X6C83);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6C87);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6C8B,	"message number\n'Overwrite %1 (Yes/No/All)?'");
	MakeCode	(x=0X6C8B);
	OpDecimal	(x,	1);
	MakeComm	(0X6C8E,	"std error (file handle = 2)");
	MakeComm	(0X6C91,	"byte count");
	MakeComm	(0X6C94,	"message class (utility)");
	MakeComm	(0X6C96,	"control flag = 0");
	MakeCode	(x=0X6C9D);
	OpHex		(x,	1);
	MakeComm	(0X6CA0,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X6CA0);
	OpHex		(x,	0);
	MakeCode	(x=0X6CAE);
	OpHex		(x,	1);
	MakeComm	(0X6CB1,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X6CB1);
	OpHex		(x,	0);
	MakeComm	(0X6CB3,	"'Y' ?");
	MakeCode	(x=0X6CB3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6CB9,	"'N' ?");
	MakeCode	(x=0X6CB9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6CBF,	"'A' ?");
	MakeCode	(x=0X6CBF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6CC8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6CCC);
	OpHex		(x,	1);
	MakeComm	(0X6CCE,	"std error (file handle = 2)");
	MakeComm	(0X6CD1,	"byte count");
	MakeCode	(x=0X6CD4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6CD7,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6CD7);
	OpHex		(x,	0);
	MakeCode	(x=0X6CD9);
	OpHex		(x,	1);
	MakeComm	(0X6CDB,	"backspace (move cursor to back)");
	MakeCode	(x=0X6CDB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6CE0,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6CE0);
	OpHex		(x,	0);
	MakeCode	(0X6CE5);
	MakeCode	(x=0X6CEC);
	OpHex		(x,	1);
	MakeComm	(0X6CEF,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X6CEF);
	OpHex		(x,	0);
	MakeComm	(0X6CF2,	"message number");
	MakeCode	(x=0X6CF2);
	OpDecimal	(x,	1);
	MakeComm	(0X6CF5,	"std error (file handle = 2)");
	MakeComm	(0X6CFA,	"message class (utility)");
	MakeCode	(x=0X6D02);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6D08);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6D0E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6D18);
	MakeComm	(0X6D1A,	"suppress copy overwrite confirmation");
	MakeCode	(x=0X6D1A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6D1A,	"init_copycmd_option");
	MakeCode	(x=0X6D20);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6D24);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6D29);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6D35,	"copycmd=/Y or copycmd=/-Y");
	MakeComm	(0X6D3A,	"skip '/'");
	MakeComm	(0X6D3E,	"convert to uppercase");
	MakeCode	(x=0X6D3E);
	OpHex		(x,	1);
	MakeCode	(x=0X6D40);
	OpChr		(x,	1);
	MakeComm	(0X6D44,	"clear copy overwrite question/confirmation\n(don't suppress)");
	MakeCode	(x=0X6D44);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6D4B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6D4F,	"default (/Y) switch option (1 = enabled)");
	MakeCode	(x=0X6D4F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6D59);
	MakeName	(0X6D59,	"get_copycmd_option");
	MakeCode	(x=0X6D5F);
	OpChr		(x,	1);
	MakeCode	(0X6D68);
	MakeCode	(0X6D6B);
	MakeCode	(0X6D6D);
	MakeName	(0X6D6D,	"getenv_copycmd");
	MakeCode	(x=0X6D80);
	OpDecimal	(x,	1);
	MakeCode	(0X6D88);
	MakeCode	(0X6D8B);
	MakeComm	(0X6D8D,	"[Concat]");
	MakeCode	(x=0X6D8D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X6D8D,	"TRYFLUSH");
	MakeComm	(0X6D95,	"[Concat]");
	MakeCode	(x=0X6D95);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6D9A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6D9A,	"FlshFil");
	MakeCode	(x=0X6D9F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6DA9);
	MakeCode	(x=0X6DB1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6DB8,	"[Concat]");
	MakeCode	(x=0X6DB8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6DBD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6DC5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6DCD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6DD0);
	OpHex		(x,	1);
	MakeCode	(x=0X6DD8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6DE2,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X6DE2);
	OpHex		(x,	0);
	MakeCode	(x=0X6DE9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6DEF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6DF7,	"[DESTHAND]");
	MakeCode	(x=0X6DF7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6DFA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E01);
	OpHex		(x,	1);
	MakeComm	(0X6E04,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X6E04);
	OpHex		(x,	0);
	MakeCode	(x=0X6E06);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E0A);
	OpHex		(x,	1);
	MakeComm	(0X6E0F,	"[DestSwitch]");
	MakeCode	(x=0X6E0F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6E12,	"SWITCHA+SWITCHB ; 4+8");
	MakeCode	(x=0X6E12);
	OpHex		(x,	1);
	MakeCode	(x=0X6E16);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6E19);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6E21,	"SWITCHB");
	MakeCode	(x=0X6E21);
	OpHex		(x,	1);
	MakeComm	(0X6E2A,	"devid_RAW");
	MakeCode	(x=0X6E2A);
	OpHex		(x,	1);
	MakeCode	(x=0X6E2D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6E31,	"DOS - 2+ - IOCTL - SET DEVICE INFORMATION\nBX = device handle, DH = 0\nDL = device information to set (bits 0-7 from function 0)");
	MakeCode	(x=0X6E31);
	OpHex		(x,	0);
	MakeCode	(0X6E35);
	MakeComm	(0X6E38,	"SWITCHA");
	MakeCode	(x=0X6E38);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6E3D,	"SWITCHA");
	MakeCode	(x=0X6E3D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X6E42);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E49);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E55);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E5C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6E62);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E68);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6E6D,	"[DESTHAND]");
	MakeCode	(x=0X6E6D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6E73);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6E79);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E7D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6E87);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6E8B);
	OpHex		(x,	1);
	MakeComm	(0X6E8D,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6E8D);
	OpHex		(x,	0);
	MakeCode	(x=0X6E90);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X6E98);
	MakeComm	(0X6E9C,	"devid_ISDEV");
	MakeCode	(x=0X6E9C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X6EA3,	"devid_RAW");
	MakeCode	(x=0X6EA3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeCode	(x=0X6EAA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6EB4);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X6EB9);
	MakeCode	(x=0X6EBD);
	OpHex		(x,	1);
	MakeComm	(0X6EC0,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from present location");
	MakeCode	(x=0X6EC0);
	OpHex		(x,	0);
	MakeCode	(x=0X6EC2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6EC5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6EC9,	"cmp byte [RDEOF],0");
	MakeCode	(x=0X6EC9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6ED0);
	OpHex		(x,	1);
	MakeComm	(0X6ED2,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6ED2);
	OpHex		(x,	0);
	MakeCode	(x=0X6ED6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6EDC);
	MakeName	(0X6EDC,	"COPYERR");
	MakeComm	(0X6EDF,	"inc byte [DestClosed]");
	MakeCode	(x=0X6EDF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6EDF,	"CopErrP");
	MakeCode	(x=0X6EE3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6EEA,	"[DESTHAND]");
	MakeCode	(x=0X6EEA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6EF3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6EF7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F01);
	OpHex		(x,	1);
	MakeComm	(0X6F04,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X6F04);
	OpHex		(x,	0);
	MakeCode	(x=0X6F08);
	OpHex		(x,	1);
	MakeComm	(0X6F0A,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6F0A);
	OpHex		(x,	0);
	MakeCode	(x=0X6F0C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6F14);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F17);
	OpHex		(x,	1);
	MakeComm	(0X6F19,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6F19);
	OpHex		(x,	0);
	MakeCode	(x=0X6F1B);
	OpHex		(x,	1);
	MakeComm	(0X6F1D,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6F1D);
	OpHex		(x,	0);
	MakeCode	(x=0X6F22);
	OpHex		(x,	1);
	MakeComm	(0X6F24,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6F24);
	OpHex		(x,	0);
	MakeCode	(x=0X6F26);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F29);
	OpHex		(x,	1);
	MakeComm	(0X6F2B,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X6F2B);
	OpHex		(x,	0);
	MakeCode	(x=0X6F2D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X6F35);
	MakeComm	(0X6F38,	"SWITCHA+SWITCHB");
	MakeCode	(x=0X6F38);
	OpHex		(x,	1);
	MakeName	(0X6F38,	"SETASC");
	MakeCode	(x=0X6F3D);
	OpHex		(x,	1);
	MakeComm	(0X6F3F,	"SWITCHB");
	MakeCode	(x=0X6F3F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6F43,	"SWITCHA");
	MakeCode	(x=0X6F43);
	OpHex		(x,	1);
	MakeCode	(x=0X6F45);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6F48);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6F4C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6F52,	"-1");
	MakeCode	(x=0X6F52);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X6F52,	"BUILDDEST");
	MakeCode	(x=0X6F59);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6F5C,	"offset DestVars");
	MakeCode	(x=0X6F5C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F67);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F72);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6F76,	"offset DestFcb");
	MakeCode	(x=0X6F76);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F79);
	OpHex		(x,	1);
	MakeComm	(0X6F7C,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X6F7C);
	OpHex		(x,	0);
	MakeCode	(x=0X6F83);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F89);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F8C);
	OpChr		(x,	1);
	MakeCode	(x=0X6F93);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6F97);
	OpHex		(x,	1);
	MakeCode	(x=0X6F99);
	OpHex		(x,	1);
	MakeComm	(0X6F9B,	"[DestFcb]");
	MakeCode	(x=0X6F9B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6F9E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6FA1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6FA5);
	OpHex		(x,	1);
	MakeCode	(x=0X6FB0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6FB7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6FBF);
	OpHex		(x,	1);
	MakeCode	(x=0X6FC3);
	OpHex		(x,	1);
	MakeCode	(x=0X6FC5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X6FC9,	"[Concat]");
	MakeCode	(x=0X6FC9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6FCC);
	OpHex		(x,	1);
	MakeCode	(x=0X6FCE);
	OpHex		(x,	1);
	MakeCode	(x=0X6FD0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6FD3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6FDA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X6FE6);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6FF1);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X6FFB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X6FFF,	"DIRBUF+1");
	MakeCode	(x=0X6FFF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7002,	"[Concat]");
	MakeCode	(x=0X7002);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7009);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X700C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X700F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X7013,	"BUILDNAME");
	MakeCode	(x=0X7017);
	OpChr		(x,	1);
	MakeComm	(0X702D,	"2Eh ; dot_chr");
	MakeCode	(x=0X702D);
	OpChr		(x,	1);
	MakeComm	(0X7031,	"3Fh");
	MakeCode	(x=0X7031);
	OpChr		(x,	1);
	MakeComm	(0X7043,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X7043);
	OpHex		(x,	1);
	MakeName	(0X7043,	"BUILDPATH");
	MakeComm	(0X704B,	"add dx,VARSTRUC.BUF");
	MakeComm	(0X7052,	"deny_none or read_open_mode");
	MakeCode	(x=0X7052);
	OpHex		(x,	1);
	MakeComm	(0X7059,	"read_open_flag");
	MakeComm	(0X705C,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X705C);
	OpHex		(x,	0);
	MakeComm	(0X7064,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X7069,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X706E,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X7076);
	MakeCode	(x=0X7078);
	OpHex		(x,	1);
	MakeComm	(0X707B,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X707B);
	OpHex		(x,	0);
	MakeCode	(x=0X707D);
	OpHex		(x,	1);
	MakeComm	(0X707F,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X707F);
	OpHex		(x,	0);
	MakeCode	(x=0X7081);
	OpHex		(x,	1);
	MakeComm	(0X7086,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X7086);
	OpHex		(x,	1);
	MakeComm	(0X708C,	"[bp+VARSTRUC.BUF]");
	MakeCode	(x=0X709B);
	OpHex		(x,	1);
	MakeComm	(0X709E,	"A = 1");
	MakeCode	(x=0X709E);
	OpHex		(x,	1);
	MakeCode	(0X70AC);
	MakeComm	(0X70AE,	"add dx,VARSTRUC.BUF");
	MakeComm	(0X70B1,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X70B4);
	OpHex		(x,	1);
	MakeComm	(0X70BC,	"[bp+VARSTRUC.TTAIL]");
	MakeComm	(0X70C6,	"[bp+VARSTRUC.ISDIR]");
	MakeCode	(0X70CC);
	MakeCode	(0X70D4);
	MakeCode	(0X70DE);
	MakeCode	(x=0X70E1);
	OpHex		(x,	1);
	MakeComm	(0X70E3,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X70E3);
	OpHex		(x,	0);
	MakeCode	(0X7102);
	MakeCode	(x=0X7103);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7106,	"[bp+VARSTRUC.ISDIR]");
	MakeComm	(0X7118,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X7118);
	OpHex		(x,	1);
	MakeCode	(0X7120);
	MakeComm	(0X7123,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X7128,	"ERROR_ACCESS_DENIED");
	MakeComm	(0X712D,	"[bp+VARSTRUC.ISDIR]");
	MakeComm	(0X7131,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X7134);
	OpHex		(x,	1);
	MakeComm	(0X713D,	"[bp+VARSTRUC.TTAIL]");
	MakeCode	(0X7177);
	MakeCode	(x=0X7182);
	OpHex		(x,	1);
	MakeComm	(0X7184,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X7184);
	OpHex		(x,	0);
	MakeCode	(0X7190);
	MakeComm	(0X7193,	"[bp+VARSTRUC.TTAIL]");
	MakeCode	(0X7193);
	MakeName	(0X7193,	"SETSTARS");
	MakeComm	(0X7196,	"[bp+VARSTRUC.SIZ]");
	MakeCode	(x=0X7196);
	OpDecimal	(x,	1);
	MakeComm	(0X719A,	" \"?.\" ; dot_qmark ; 2E3Fh");
	MakeCode	(x=0X719A);
	OpChr		(x,	1);
	MakeCode	(x=0X71AF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X71AF,	"COMPNAME");
	MakeCode	(x=0X71B2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X71B5,	"xNameTrans");
	MakeCode	(x=0X71B5);
	OpHex		(x,	1);
	MakeComm	(0X71B7,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X71B7);
	OpHex		(x,	0);
	MakeCode	(x=0X71B9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X71BC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X71C3);
	MakeName	(0X71C3,	"cparse");
	MakeCode	(x=0X71C5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X71C9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X71CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X71D5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X71E7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X71EF);
	OpHex		(x,	1);
	MakeCode	(x=0X71F4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X71FC);
	MakeCode	(x=0X7200);
	OpHex		(x,	1);
	MakeCode	(0X7205);
	MakeCode	(x=0X720C);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7215);
	OpChr		(x,	1);
	MakeCode	(x=0X721B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X722C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7230);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7238);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X723C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7241);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X724E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X725C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7260);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7270);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X727A,	"dot_chr");
	MakeCode	(x=0X727E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7282);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X728B);
	OpHex		(x,	1);
	MakeComm	(0X728E,	"star");
	MakeCode	(x=0X7292);
	OpHex		(x,	1);
	MakeCode	(x=0X7295);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X729E);
	MakeCode	(0X72A0);
	MakeCode	(x=0X72A2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X72AD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X72C7);
	OpHex		(x,	1);
	MakeCode	(x=0X72CA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X72D1);
	OpHex		(x,	1);
	MakeCode	(x=0X72D6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X72DA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X72DE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X72E3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X72EC,	"cpcont3");
	MakeCode	(x=0X72F5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7306);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X7312);
	MakeCode	(0X7315);
	MakeCode	(x=0X7318);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X731E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X7324);
	MakeCode	(0X7329);
	MakeCode	(x=0X732C);
	OpHex		(x,	1);
	MakeComm	(0X732F,	"FSWITCH");
	MakeCode	(x=0X732F);
	OpHex		(x,	1);
	MakeComm	(0X7343,	"FBADSWITCH");
	MakeCode	(x=0X7343);
	OpHex		(x,	1);
	MakeCode	(0X7349);
	MakeCode	(x=0X7350);
	OpHex		(x,	1);
	MakeCode	(0X7356);
	MakeCode	(x=0X7361);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7364,	"SWCOUNT");
	MakeComm	(0X7367,	"FBADSWITCH");
	MakeCode	(x=0X7367);
	OpHex		(x,	1);
	MakeComm	(0X736F,	"~FBADSWITCH ; not FBADSWITCH");
	MakeCode	(x=0X736F);
	OpHex		(x,	1);
	MakeCode	(0X7384);
	MakeName	(0X7384,	"move_char");
	MakeCode	(x=0X7386);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X738B,	"mov psdata_seg:$P_Flags,0");
	MakeCode	(0X738B);
	MakeName	(0X738B,	"sysparse");
	MakeComm	(0X7392,	"MOV PSDATA_SEG:$P_ORIG_ORD,CX");
	MakeName	(0X73A1,	"$P_Redo_Time");
	MakeComm	(0X73A2,	"mov psdata_seg:$P_ordinal,cx");
	MakeComm	(0X73A7,	"mov psdata_seg:$P_RC,$P_No_Error");
	MakeComm	(0X73AE,	"mov psdata_seg:$P_Found_SYNONYM,0");
	MakeComm	(0X73B5,	"mov word ptr psdata_seg:$P_DX,0");
	MakeCode	(x=0X73BC);
	OpChr		(x,	1);
	MakeCode	(x=0X73C3);
	OpChr		(x,	1);
	MakeCode	(x=0X73CA);
	OpChr		(x,	1);
	MakeCode	(x=0X73D1);
	OpChr		(x,	1);
	MakeComm	(0X73DD,	"$P_RC_EOL");
	MakeComm	(0X73E1,	"es:[di].$P_PARMSX_Address");
	MakeComm	(0X73E4,	"es:[bx].$P_MinP");
	MakeComm	(0X73E9,	"$P_Op_Missing");
	MakeComm	(0X73F0,	"mov psdata_seg:$P_SaveSI_Cmpx,si");
	MakeCode	(0X73F0);
	MakeCode	(x=0X73F8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X73FC,	"$P_Extra");
	MakeCode	(x=0X73FC);
	OpHex		(x,	1);
	MakeComm	(0X7414,	"test psdata_seg:$P_Flags2,$P_Extra");
	MakeCode	(x=0X7414);
	OpHex		(x,	1);
	MakeComm	(0X7421,	"test psdata_seg:$P_Flags2,$P_SW+$P_equ");
	MakeCode	(x=0X7421);
	OpHex		(x,	1);
	MakeComm	(0X742C,	"mov psdata_seg:[bx],al");
	MakeCode	(0X742C);
	MakeComm	(0X742F,	"cmp al,$P_Keyword");
	MakeCode	(x=0X742F);
	OpChr		(x,	1);
	MakeComm	(0X7433,	"or psdata_seg:$P_Flags2,$P_equ");
	MakeCode	(x=0X7433);
	OpHex		(x,	1);
	MakeComm	(0X7440,	"mov psdata_seg:[bx],al");
	MakeCode	(0X7446);
	MakeComm	(0X744C,	"mov byte ptr psdata_seg:[bx],$P_NULL");
	MakeComm	(0X7455,	"es:[di].$P_PARMSX_Address");
	MakeComm	(0X7458,	"lea si,psdata_seg:$P_STRING_BUF\n(lea si,ds:9E6Ah)");
	MakeCode	(x=0X7458);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X745C,	"psdata_seg:[si],$P_Switch");
	MakeCode	(x=0X745C);
	OpChr		(x,	1);
	MakeComm	(0X7462,	"psdata_seg:[si],$P_DQuote");
	MakeCode	(x=0X7462);
	OpChr		(x,	1);
	MakeComm	(0X7468,	"test psdata_seg:$P_Flags2,$P_equ");
	MakeCode	(x=0X7468);
	OpHex		(x,	1);
	MakeComm	(0X7470,	"es:[bx].$P_MaxP");
	MakeComm	(0X7476,	"psdata_seg:$P_ORDINAL,ax");
	MakeComm	(0X747D,	"psdata_seg:$P_ORDINAL");
	MakeCode	(x=0X7481);
	OpHex		(x,	1);
	MakeComm	(0X748F,	"psdata_seg:$P_RC,$P_Too_Many");
	MakeCode	(0X748F);
	MakeComm	(0X7498,	"mov al,[es:bx+$P_PARMSX_BLK.$P_MaxP]");
	MakeCode	(0X7498);
	MakeCode	(x=0X749F);
	OpHex		(x,	1);
	MakeComm	(0X74C4,	"es:[bx].$P_MaxP");
	MakeCode	(0X74C4);
	MakeCode	(x=0X74CB);
	OpHex		(x,	1);
	MakeCode	(x=0X74D4);
	OpHex		(x,	1);
	MakeComm	(0X74F1,	"psdata_seg:$P_RC,$P_Not_In_Key");
	MakeComm	(0X74FB,	"mov cx,psdata_seg:$P_Ordinal");
	MakeComm	(0X7504,	"mov si,psdata_seg:$P_SI_Sav");
	MakeCode	(0X7515);
	MakeName	(0X7515,	"$P_Chk_Pos_Control");
	MakeComm	(0X7516,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag]");
	MakeCode	(x=0X7519);
	OpHex		(x,	1);
	MakeComm	(0X7523,	"$P_NULL");
	MakeName	(0X7523,	"$P_CPC00");
	MakeComm	(0X7529,	"$P_Optional");
	MakeCode	(x=0X7529);
	OpHex		(x,	1);
	MakeComm	(0X752E,	"$P_Op_Missing");
	MakeCode	(0X7537);
	MakeComm	(0X7538,	"$P_String");
	MakeComm	(0X753A,	"$P_No_Tag");
	MakeCode	(0X7542);
	MakeCode	(0X7547);
	MakeName	(0X7547,	"$P_Chk_Key_Control");
	MakeCode	(0X7549);
	MakeName	(0X7549,	"$P_Search_KEYorSW");
	MakeComm	(0X754B,	"[es:bx+$P_CONTROL_BLK.$P_nid]");
	MakeComm	(0X7555,	"[es:bx+$P_CONTROL_BLK.$P_KEYorSW]");
	MakeCode	(0X7565);
	MakeComm	(0X756E,	"$P_NULL");
	MakeCode	(0X756E);
	MakeName	(0X756E,	"$P_MoveBP_NUL");
	MakeCode	(0X7578);
	MakeComm	(0X757A,	"or psdata_seg:$P_Flags2,$P_Sw_Cmp");
	MakeCode	(x=0X757A);
	OpHex		(x,	1);
	MakeName	(0X757A,	"$P_Chk_SW_Control");
	MakeComm	(0X7585,	"and psdata_seg:$P_Flags2,0ffh-$P_Sw_Cmp");
	MakeCode	(x=0X7585);
	OpHex		(x,	1);
	MakeComm	(0X758C,	"psdata_seg:$P_KEYorSW_Ptr");
	MakeComm	(0X759D,	"psdata_seg:[si],$P_NULL");
	MakeComm	(0X75A3,	"psdata_seg:[si-1],$P_Colon");
	MakeCode	(x=0X75A3);
	OpChr		(x,	1);
	MakeComm	(0X75AA,	"$P_Syntax");
	MakeComm	(0X75B3,	"cmp es:[bx].$P_Match_Flag,0");
	MakeCode	(0X75B3);
	MakeComm	(0X75B9,	"test es:[bx].$P_Match_Flag,$P_Optional");
	MakeCode	(x=0X75B9);
	OpHex		(x,	1);
	MakeComm	(0X75C0,	"mov psdata_seg:$P_RC,$P_Op_Missing");
	MakeCode	(0X75C9);
	MakeCode	(0X75CF);
	MakeCode	(0X75D2);
	MakeComm	(0X75D3,	"mov al,$P_String");
	MakeComm	(0X75D5,	"mov ah,$P_No_Tag");
	MakeCode	(0X75DD);
	MakeName	(0X75DD,	"$P_Fill_Result");
	MakeComm	(0X75DE,	"[es:bx+$P_CONTROL_BLK.$P_Result_Buf]");
	MakeComm	(0X75E7,	"[es:di+$P_RESULT_BLK.$P_Type]");
	MakeComm	(0X75EA,	"[es:di+$P_RESULT_BLK.$P_Item_Tag]");
	MakeComm	(0X75F3,	"[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr]");
	MakeComm	(0X75F8,	"$P_Number");
	MakeComm	(0X75FC,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X7600,	"[es:di+2+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X7606,	"$P_List_Idx");
	MakeCode	(0X7606);
	MakeComm	(0X760A,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X7610,	"$P_Date_F");
	MakeCode	(0X7610);
	MakeComm	(0X7614,	"$P_Time_F");
	MakeComm	(0X7618,	"$P_Drive");
	MakeComm	(0X761C,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X7622,	"$P_Complex");
	MakeCode	(0X7622);
	MakeComm	(0X762B,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X762F,	"[es:di+2+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X7635,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeCode	(0X7635);
	MakeComm	(0X7639,	"[es:di+2+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X763E,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File");
	MakeCode	(x=0X763E);
	OpHex		(x,	1);
	MakeComm	(0X7645,	"$P_DOSTBL_File");
	MakeComm	(0X7649,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char");
	MakeCode	(x=0X7649);
	OpHex		(x,	1);
	MakeComm	(0X7650,	"$P_DOSTBL_Char");
	MakeComm	(0X7656,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon");
	MakeCode	(x=0X7656);
	OpHex		(x,	1);
	MakeComm	(0X7662,	"$P_NULL");
	MakeCode	(0X7662);
	MakeName	(0X7662,	"$P_Check_Match_Flags");
	MakeComm	(0X7669,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag]");
	MakeComm	(0X7674,	"$P_Syntax");
	MakeComm	(0X767B,	"$P_No_Tag");
	MakeComm	(0X767D,	"$P_String");
	MakeComm	(0X7688,	"$P_Date_S");
	MakeCode	(x=0X7688);
	OpHex		(x,	1);
	MakeComm	(0X768D,	"$P_No_Error");
	MakeComm	(0X7697,	"$P_Syntax");
	MakeCode	(x=0X769F);
	OpHex		(x,	1);
	MakeComm	(0X76A4,	"$P_No_Error");
	MakeComm	(0X76AE,	"$P_Syntax");
	MakeCode	(0X76B8);
	MakeCode	(0X76BA);
	MakeComm	(0X76BB,	"$P_Num_Val");
	MakeCode	(x=0X76BB);
	OpHex		(x,	1);
	MakeComm	(0X76C0,	"$P_No_Error");
	MakeComm	(0X76CA,	"$P_Syntax");
	MakeComm	(0X76D2,	"$P_SNum_Val");
	MakeCode	(x=0X76D2);
	OpHex		(x,	1);
	MakeComm	(0X76D7,	"$P_No_Error");
	MakeComm	(0X76E1,	"$P_Syntax");
	MakeComm	(0X76E9,	"$P_Drv_Only");
	MakeCode	(x=0X76E9);
	OpHex		(x,	1);
	MakeComm	(0X76EE,	"$P_No_Error");
	MakeComm	(0X76FB,	"$P_Syntax");
	MakeComm	(0X7703,	"$P_File_Spc");
	MakeCode	(x=0X7703);
	OpHex		(x,	1);
	MakeComm	(0X771A,	"$P_Simple_S");
	MakeCode	(x=0X771A);
	OpHex		(x,	1);
	MakeComm	(0X7729,	"$P_error_filespec");
	MakeComm	(0X7731,	"$P_No_Error");
	MakeComm	(0X7739,	"$P_Syntax");
	MakeCode	(0X7742);
	MakeName	(0X7742,	"$P_Remove_Colon");
	MakeComm	(0X774B,	"$P_Colon");
	MakeCode	(x=0X774B);
	OpChr		(x,	1);
	MakeComm	(0X774F,	"$P_NULL");
	MakeCode	(0X775C);
	MakeCode	(0X7765);
	MakeCode	(0X7768);
	MakeName	(0X7768,	"$P_Do_CAPS_String");
	MakeCode	(0X7780);
	MakeCode	(0X7784);
	MakeComm	(0X7787,	"$P_ASCII80");
	MakeCode	(x=0X7787);
	OpHex		(x,	1);
	MakeName	(0X7787,	"$P_Do_CAPS_Char");
	MakeComm	(0X7793,	"$P_Make_Upper");
	MakeCode	(x=0X7793);
	OpHex		(x,	1);
	MakeCode	(0X7797);
	MakeCode	(x=0X779A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X779E,	"$P_DOSTBL_File");
	MakeCode	(x=0X77A3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X77B1,	"$P_DOS_Get_TBL");
	MakeCode	(x=0X77B1);
	OpHex		(x,	1);
	MakeComm	(0X77B5,	"-1 ; get active CON");
	MakeComm	(0X77B8,	"buffer length");
	MakeComm	(0X77BB,	"-1 ; get for default code page");
	MakeComm	(0X77BE,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X77BE);
	OpHex		(x,	0);
	MakeComm	(0X77C3,	"[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]");
	MakeComm	(0X77C7,	"[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]");
	MakeCode	(x=0X77CD);
	OpHex		(x,	1);
	MakeComm	(0X77CF,	"$P_ASCII80");
	MakeCode	(0X77D5);
	MakeName	(0X77D5,	"$P_SValue");
	MakeComm	(0X77D6,	"$P_Signed");
	MakeCode	(x=0X77D6);
	OpHex		(x,	1);
	MakeComm	(0X77DC,	"0FFh-$P_Neg");
	MakeCode	(x=0X77DC);
	OpHex		(x,	1);
	MakeComm	(0X77E5,	"$P_Plus");
	MakeComm	(0X77E9,	"$P_Minus");
	MakeComm	(0X77ED,	"$P_Neg");
	MakeCode	(x=0X77ED);
	OpHex		(x,	1);
	MakeCode	(0X77F9);
	MakeName	(0X77F9,	"$P_Value");
	MakeCode	(x=0X7812);
	OpHex		(x,	1);
	MakeCode	(x=0X7814);
	OpHex		(x,	1);
	MakeCode	(x=0X781F);
	OpHex		(x,	1);
	MakeCode	(x=0X7821);
	OpHex		(x,	1);
	MakeCode	(x=0X7828);
	OpHex		(x,	1);
	MakeCode	(x=0X782A);
	OpHex		(x,	1);
	MakeCode	(0X7847);
	MakeCode	(0X784B);
	MakeComm	(0X784C,	"$P_Neg");
	MakeCode	(x=0X784C);
	OpHex		(x,	1);
	MakeComm	(0X785E,	"[es:bx+$P_CONTROL_BLK.$P_Value_List]");
	MakeComm	(0X7865,	"$P_nval_None\n");
	MakeCode	(0X786F);
	MakeComm	(0X7876,	"$P_Value03");
	MakeComm	(0X7879,	"$P_Signed");
	MakeCode	(x=0X7879);
	OpHex		(x,	1);
	MakeComm	(0X7881,	"[es:si+$P_VAL_LIST.$P_Val_XH]");
	MakeComm	(0X7889,	"[es:si+$P_VAL_LIST.$P_Val_XL]");
	MakeComm	(0X788F,	"[es:si+$P_VAL_LIST.$P_Val_YH]");
	MakeComm	(0X7897,	"[es:si+$P_VAL_LIST.$P_Val_YL]");
	MakeCode	(0X789F);
	MakeComm	(0X78BD,	"$P_Len_Range");
	MakeCode	(0X78BD);
	MakeComm	(0X78C4,	"$P_Out_Of_Range");
	MakeComm	(0X78CB,	"$P_Number");
	MakeComm	(0X78CD,	"$P_No_Tag");
	MakeCode	(0X78D1);
	MakeComm	(0X78D8,	"$P_Syntax");
	MakeCode	(0X78D8);
	MakeComm	(0X78DF,	"$P_String");
	MakeComm	(0X78E1,	"$P_No_Tag");
	MakeCode	(0X78EB);
	MakeName	(0X78EB,	"$P_Check_OVF");
	MakeComm	(0X78EC,	"$P_Neg");
	MakeCode	(x=0X78EC);
	OpHex		(x,	1);
	MakeCode	(0X78F6);
	MakeCode	(0X78FB);
	MakeCode	(0X78FD);
	MakeName	(0X78FD,	"$P_0099");
	MakeCode	(0X7909);
	MakeCode	(0X790B);
	MakeName	(0X790B,	"$P_Simple_String");
	MakeComm	(0X790F,	"[es:bx+$P_CONTROL_BLK.$P_Value_List]");
	MakeComm	(0X791E,	"$P_nval_String");
	MakeCode	(0X791E);
	MakeComm	(0X7926,	"$P_Len_Range");
	MakeComm	(0X7930,	"$P_Len_Value");
	MakeComm	(0X7944,	"$P_Len_String");
	MakeComm	(0X794B,	"$P_Not_In_Str");
	MakeComm	(0X7952,	"$P_No_Tag");
	MakeCode	(0X7956);
	MakeComm	(0X795A,	"$P_List_Idx");
	MakeComm	(0X7961,	"$P_Syntax");
	MakeCode	(0X7961);
	MakeComm	(0X7968,	"$P_No_Tag");
	MakeComm	(0X796A,	"$P_String");
	MakeCode	(0X7974);
	MakeName	(0X7974,	"$P_String_Comp");
	MakeComm	(0X7978,	"$P_DOSTBL_Char");
	MakeComm	(0X797A,	"1st string");
	MakeComm	(0X7985,	"$P_Key_Cmp");
	MakeCode	(x=0X7985);
	OpHex		(x,	1);
	MakeComm	(0X798D,	"$P_Keyword");
	MakeComm	(0X799A,	"$P_SW_Cmp");
	MakeCode	(x=0X799A);
	OpHex		(x,	1);
	MakeComm	(0X79A2,	"$P_Colon");
	MakeComm	(0X79A6,	"$P_NULL");
	MakeComm	(0X79B0,	"2nd string (must be upper case)");
	MakeCode	(0X79B0);
	MakeCode	(0X79BE);
	MakeComm	(0X79D3,	"$P_SW");
	MakeCode	(x=0X79D3);
	OpHex		(x,	1);
	MakeComm	(0X79DB,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary");
	MakeCode	(x=0X79DB);
	OpHex		(x,	1);
	MakeComm	(0X79EA,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon");
	MakeCode	(x=0X79EA);
	OpHex		(x,	1);
	MakeComm	(0X79F1,	"$P_Colon");
	MakeComm	(0X79F5,	"$P_NULL");
	MakeCode	(0X79FE);
	MakeCode	(0X7A0C);
	MakeCode	(0X7A17);
	MakeName	(0X7A17,	"$P_Date_Format");
	MakeComm	(0X7A28,	"mov psdata_seg:$P_2nd_Val,0");
	MakeComm	(0X7A5D,	"[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]\nmov bx,psdata_seg:$P_Country_Info.$P_CDI_DateF");
	MakeComm	(0X7A62,	"bx,$P_Date_YMD");
	MakeComm	(0X7A80,	"bx,$P_Date_DMY");
	MakeCode	(0X7A89);
	MakeCode	(x=0X7AA2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7AA7);
	OpDecimal	(x,	1);
	MakeComm	(0X7AAD,	"$P_No_Tag");
	MakeComm	(0X7AAF,	"$P_Date_F");
	MakeCode	(0X7AB6);
	MakeComm	(0X7AB8,	"$P_No_Tag");
	MakeComm	(0X7ABA,	"$P_String");
	MakeComm	(0X7ABF,	"mov psdata_seg:$P_RC,$P_Syntax");
	MakeComm	(0X7ACA,	"(lea si,ds:9EF1h)\nlea si,psdata_seg:$P_Country_Info");
	MakeCode	(x=0X7ACA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X7ACA,	"$P_Set_CDI");
	MakeComm	(0X7ACE,	"\ncmp psdata_seg:[si].$P_CDI_DateF,$P_NeedToBeRead");
	MakeCode	(0X7AD6);
	MakeComm	(0X7ADB,	"$P_DOS_Get_CDI");
	MakeComm	(0X7AE0,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X7AE0);
	OpHex		(x,	0);
	MakeCode	(0X7AE6);
	MakeName	(0X7AE6,	"$P_Get_DecNum");
	MakeComm	(0X7AEA,	"mov al,psdata_seg:[si]");
	MakeComm	(0X7AF1,	"cmp psdata_seg:$P_Got_Time,0");
	MakeComm	(0X7AF9,	"cmp bl,$P_colon_period");
	MakeComm	(0X7AFE,	"$P_Colon");
	MakeCode	(x=0X7AFE);
	OpChr		(x,	1);
	MakeComm	(0X7B02,	"$P_Period");
	MakeCode	(x=0X7B02);
	OpChr		(x,	1);
	MakeComm	(0X7B08,	"$P_Minus");
	MakeCode	(x=0X7B08);
	OpChr		(x,	1);
	MakeComm	(0X7B0C,	"$P_Slash");
	MakeCode	(x=0X7B0C);
	OpChr		(x,	1);
	MakeComm	(0X7B10,	"$P_Period");
	MakeCode	(x=0X7B10);
	OpChr		(x,	1);
	MakeCode	(x=0X7B1C);
	OpDecimal	(x,	1);
	MakeCode	(0X7B2D);
	MakeCode	(0X7B32);
	MakeCode	(0X7B36);
	MakeCode	(0X7B3C);
	MakeName	(0X7B3C,	"$P_Time_Format");
	MakeComm	(0X7B45,	"\ntest byte ptr psdata_seg:[si].$P_CDI_TimeF,1");
	MakeCode	(x=0X7B45);
	OpHex		(x,	1);
	MakeComm	(0X7B5E,	"mov psdata_seg:$P_3rd_Val,0");
	MakeComm	(0X7B6C,	"mov psdata_seg:$P_Got_Time,1");
	MakeComm	(0X7B72,	"$P_colon_period");
	MakeComm	(0X7B8E,	"mov bl,$P_period_only");
	MakeComm	(0X7B9D,	"test psdata_seg:$P_Flags1,$P_Time_Again");
	MakeCode	(x=0X7B9D);
	OpHex		(x,	1);
	MakeComm	(0X7BA5,	"mov si,psdata_seg:$P_SI_Save");
	MakeComm	(0X7BAA,	"cmp byte ptr [si-1],$P_Comma");
	MakeCode	(x=0X7BAA);
	OpChr		(x,	1);
	MakeComm	(0X7BB0,	"mov byte ptr [si-1],$P_Period");
	MakeCode	(x=0X7BB0);
	OpChr		(x,	1);
	MakeComm	(0X7BBB,	"or psdata_seg:$P_Flags1,$P_Time_Again");
	MakeCode	(x=0X7BBB);
	OpHex		(x,	1);
	MakeCode	(0X7BD3);
	MakeComm	(0X7BE8,	"test psdata_seg:$P_Flags1,$P_Time12am");
	MakeCode	(x=0X7BE8);
	OpHex		(x,	1);
	MakeCode	(x=0X7BF0);
	OpDecimal	(x,	1);
	MakeComm	(0X7BF8,	"test psdata_seg:$P_Flags2,$P_Time12");
	MakeCode	(x=0X7BF8);
	OpHex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	MakeCode	(x=0X7C00);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7C04);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7C08);
	OpDecimal	(x,	1);
	MakeComm	(0X7C22,	"mov ax,psdata_seg:$P_4th_Val");
	MakeComm	(0X7C2E,	"$P_No_Tag");
	MakeComm	(0X7C30,	"$P_Time_F");
	MakeCode	(0X7C37);
	MakeComm	(0X7C3B,	"$P_String");
	MakeComm	(0X7C40,	"mov psdata_seg:$P_RC,$P_Syntax");
	MakeComm	(0X7C47,	"mov psdata_seg:$P_Got_Time,0");
	MakeCode	(0X7C51);
	MakeName	(0X7C51,	"$P_Time_2412");
	MakeComm	(0X7C53,	"mov al,psdata_seg:[si]");
	MakeComm	(0X7C5B,	"mov al,psdata_seg:[si-word]");
	MakeComm	(0X7C5F,	"or al,$P_Make_Lower");
	MakeCode	(x=0X7C5F);
	OpHex		(x,	1);
	MakeCode	(x=0X7C61);
	OpChr		(x,	1);
	MakeCode	(x=0X7C65);
	OpChr		(x,	1);
	MakeCode	(x=0X7C69);
	OpChr		(x,	1);
	MakeCode	(x=0X7C72);
	OpHex		(x,	1);
	MakeCode	(x=0X7C74);
	OpChr		(x,	1);
	MakeCode	(x=0X7C78);
	OpChr		(x,	1);
	MakeComm	(0X7C7E,	"or psdata_seg:$P_Flags2,$P_Time12");
	MakeCode	(x=0X7C7E);
	OpHex		(x,	1);
	MakeComm	(0X7C86,	"or psdata_seg:$P_Flags1,$P_Time12AM");
	MakeCode	(x=0X7C86);
	OpHex		(x,	1);
	MakeComm	(0X7C8C,	"psdata_seg:[si-2],$P_NULL");
	MakeCode	(0X7C94);
	MakeName	(0X7C94,	"$P_File_Format");
	MakeComm	(0X7CA8,	"$P_error_filespec");
	MakeComm	(0X7CAF,	"$P_NULL");
	MakeCode	(0X7CB6);
	MakeComm	(0X7CBC,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional");
	MakeCode	(x=0X7CBC);
	OpHex		(x,	1);
	MakeComm	(0X7CC3,	"$P_Op_Missing");
	MakeCode	(0X7CCC);
	MakeCode	(0X7CE5);
	MakeComm	(0X7CF6,	"$P_File_Spc");
	MakeCode	(x=0X7CF6);
	OpHex		(x,	1);
	MakeComm	(0X7CFC,	"$P_No_Tag");
	MakeComm	(0X7CFE,	"$P_File_Spec");
	MakeCode	(0X7D05);
	MakeName	(0X7D05,	"$P_FileSp_Chk");
	MakeCode	(x=0X7D07);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7D0B,	"$P_FileSp_Len");
	MakeCode	(0X7D1A);
	MakeName	(0X7D1A,	"$P_Drive_Format");
	MakeComm	(0X7D28,	"$P_Colon");
	MakeComm	(0X7D2F,	"$P_Ig_Colon");
	MakeCode	(x=0X7D2F);
	OpHex		(x,	1);
	MakeComm	(0X7D3D,	"$P_Make_Lower");
	MakeCode	(x=0X7D3D);
	OpHex		(x,	1);
	MakeComm	(0X7D4B,	"$P_No_Tag");
	MakeComm	(0X7D4D,	"$P_Drive");
	MakeComm	(0X7D54,	"$P_Syntax");
	MakeCode	(0X7D54);
	MakeCode	(0X7D5E);
	MakeName	(0X7D5E,	"$P_Skip_Delim");
	MakeComm	(0X7D69,	"$P_Extra");
	MakeCode	(x=0X7D69);
	OpHex		(x,	1);
	MakeCode	(x=0X7D71);
	OpHex		(x,	1);
	MakeCode	(0X7D7C);
	MakeCode	(0X7D7F);
	MakeCode	(0X7D82);
	MakeCode	(0X7D84);
	MakeName	(0X7D84,	"$P_Chk_EOL");
	MakeComm	(0X7D86,	"$P_CR");
	MakeComm	(0X7D8A,	"$P_NULL");
	MakeComm	(0X7D8E,	"[es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL");
	MakeComm	(0X7D97,	"[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]");
	MakeComm	(0X7D9B,	"$P_Len_PARMS");
	MakeComm	(0X7D9E,	"$P_I_Use_Default");
	MakeCode	(0X7DB6);
	MakeName	(0X7DB6,	"$P_Chk_Delim");
	MakeComm	(0X7DB8,	"$P_Space");
	MakeComm	(0X7DBE,	"0FFh-$P_Extra");
	MakeCode	(x=0X7DBE);
	OpHex		(x,	1);
	MakeComm	(0X7DC4,	"$P_Space");
	MakeComm	(0X7DC8,	"$P_TAB");
	MakeComm	(0X7DCC,	"$P_Comma");
	MakeComm	(0X7DD0,	"$P_DBSP1");
	MakeComm	(0X7DD4,	"$P_DBSP2");
	MakeComm	(0X7DE0,	"[es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim");
	MakeCode	(0X7DE0);
	MakeComm	(0X7DE9,	"[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]");
	MakeComm	(0X7DF1,	"$P_Len_PARMS-1");
	MakeComm	(0X7DFC,	"$P_Space");
	MakeCode	(0X7E01);
	MakeComm	(0X7E05,	"$P_equ");
	MakeCode	(x=0X7E05);
	OpHex		(x,	1);
	MakeComm	(0X7E0D,	"$P_Extra");
	MakeCode	(x=0X7E0D);
	OpHex		(x,	1);
	MakeCode	(x=0X7E17);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X7E17,	"$P_Chk_Switch");
	MakeComm	(0X7E1F,	"$P_Switch");
	MakeCode	(0X7E36);
	MakeComm	(0X7E39,	"$P_Switch");
	MakeCode	(0X7E39);
	MakeComm	(0X7E3D,	"$P_SW");
	MakeCode	(x=0X7E3D);
	OpHex		(x,	1);
	MakeCode	(0X7E45);
	MakeName	(0X7E45,	"$P_Chk_DBCS");
	MakeComm	(0X7E48,	"cmp psdata_seg:$P_DBCSEV_SEG");
	MakeCode	(x=0X7E5B);
	OpHex		(x,	1);
	MakeComm	(0X7E5E,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0X7E5E);
	OpHex		(x,	0);
	MakeComm	(0X7E72,	"psdata_seg:$P_DBCSEV_SEG,bx");
	MakeComm	(0X7E77,	"psdata_seg:$P_DBCSEV_OFF");
	MakeCode	(0X7E92);
	MakeCode	(0X7E96);
	MakeCode	(0X7E9B);
	MakeName	(0X7E9B,	"cmd_parse");
	MakeCode	(0X7E9F);
	MakeName	(0X7E9F,	"append_parse");
	MakeCode	(0X7EA3);
	MakeName	(0X7EA3,	"Printf_Init");
	MakeCode	(0X7EA7);
	MakeName	(0X7EA7,	"Printf_Crlf");
	MakeCode	(x=0X7EAE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X7EAE,	"std_eprintf");
	MakeCode	(x=0X7EB6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X7EB6,	"std_printf");
	MakeName	(0X7EBC,	"new_printf");
	MakeComm	(0X7EC5,	"mov word [print_err_flag],0");
	MakeCode	(x=0X7EC5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7EDA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7EE2,	"parm_block_size");
	MakeCode	(x=0X7EE2);
	OpDecimal	(x,	1);
	MakeComm	(0X7EE7,	"[bx.$M_S_FLAG],date_type");
	MakeCode	(x=0X7EE7);
	OpHex		(x,	1);
	MakeComm	(0X7EED,	"[bx.$M_S_VALUE],0");
	MakeComm	(0X7EF2,	"[bx.$M_S_VALUE+2],0");
	MakeComm	(0X7EFA,	"(number of substitutions)");
	MakeComm	(0X7EFB,	"(Message Number)");
	MakeComm	(0X7EFC,	"Util_Msg_Class");
	MakeCode	(x=0X7EFC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7F03,	"ext_msg_class");
	MakeCode	(x=0X7F03);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7F08);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7F0F,	"(Message Number)");
	MakeComm	(0X7F10,	"(subst_buffer)");
	MakeComm	(0X7F16,	"[bx.$M_S_VALUE+2],0");
	MakeComm	(0X7F1C,	"[bx.$M_S_FLAG],date_type");
	MakeCode	(x=0X7F1C);
	OpHex		(x,	1);
	MakeComm	(0X7F22,	"[bx.$M_S_VALUE+2],cs");
	MakeComm	(0X7F25,	"parm_block_size");
	MakeCode	(x=0X7F25);
	OpDecimal	(x,	1);
	MakeComm	(0X7F2D,	"\n[bx.$M_S_VALUE],offset trangroup:string_ptr_2");
	MakeCode	(x=0X7F2D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7F34);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7F38,	"[bx.$M_S_VALUE],dx");
	MakeCode	(x=0X7F3B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7F3F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7F43);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7F47,	"no_cont_flag (no control flag)");
	MakeCode	(x=0X7F47);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7F4C,	"Util_Msg_Class");
	MakeCode	(x=0X7F4C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7F5A,	"cmp word [print_err_flag],0");
	MakeCode	(x=0X7F5A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7F64);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X7F6C);
	MakeCode	(x=0X7F6E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7F78);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7F7B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7F7F,	"-1");
	MakeCode	(x=0X7F7F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpHex		(x,	1);
	MakeCode	(x=0X7F8A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X7F8F,	"ext_msg_class");
	MakeCode	(x=0X7F8F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X7F94);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X7F97);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X7F9F);
	MakeName	(0X7F9F,	"TSYSLOADMSG");
	MakeCode	(0X7FA5);
	MakeName	(0X7FA5,	"TSYSGETMSG");
	MakeCode	(0X7FAB);
	MakeName	(0X7FAB,	"SYSLOADMSG");
	MakeComm	(0X7FB6,	"DOS_GET_EXT_PARSE_ADD");
	MakeComm	(0X7FB9,	"DOS_GET_EXTENDED");
	MakeComm	(0X7FBB,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)\nReturn: ES:DI -> error table");
	MakeCode	(x=0X7FBB);
	OpHex		(x,	0);
	MakeComm	(0X7FBD,	"[$M_RT+10]");
	MakeCode	(x=0X7FBD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FC1,	"[$M_RT+8]");
	MakeCode	(x=0X7FC1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FC8,	"DOS_GET_PARSE");
	MakeComm	(0X7FCA,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get parameter error table (errors 00h-0Ah)\nES:DI -> error table");
	MakeCode	(x=0X7FCA);
	OpHex		(x,	0);
	MakeComm	(0X7FCC,	"[$M_RT+18]");
	MakeCode	(x=0X7FCC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FD0,	"[$M_RT+16]");
	MakeCode	(x=0X7FD0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FD7,	"DOS_GET_CRITICAL");
	MakeComm	(0X7FD9,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get critical/SHARE error table (errors 13h-2Bh)\nES:DI -> error table");
	MakeCode	(x=0X7FD9);
	OpHex		(x,	0);
	MakeComm	(0X7FDB,	"[$M_RT+34]");
	MakeCode	(x=0X7FDB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FDF,	"[$M_RT+32]");
	MakeCode	(x=0X7FDF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FE6,	"DOS_GET_FILE");
	MakeComm	(0X7FE8,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get ??? error table\nES:DI -> error table");
	MakeCode	(x=0X7FE8);
	OpHex		(x,	0);
	MakeComm	(0X7FEA,	"[$M_RT+6]");
	MakeCode	(x=0X7FEA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FEE,	"[$M_RT+4]");
	MakeCode	(x=0X7FEE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FF5,	"[$M_RT+2]");
	MakeCode	(x=0X7FF5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FF9,	"[$M_RT+0]");
	MakeCode	(x=0X7FF9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X7FFD,	"[$M_RT+30]");
	MakeCode	(x=0X7FFD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8001,	"[$M_RT+28]");
	MakeCode	(x=0X8001);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8008,	"[$M_RT+22]");
	MakeCode	(x=0X8008);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X800C,	"[$M_RT+20]");
	MakeCode	(x=0X800C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8015,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get ??? error table\nReturn: ES:DI -> error table");
	MakeCode	(x=0X8015);
	OpHex		(x,	0);
	MakeComm	(0X8017,	"[$M_RT+42]");
	MakeCode	(x=0X8017);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X801B,	"[$M_RT+40]");
	MakeCode	(x=0X801B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X801F,	"CRLF");
	MakeCode	(x=0X801F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X8025);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X802A,	"$M_NULL");
	MakeCode	(x=0X802A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8030,	"$M_BASE10");
	MakeCode	(x=0X8030);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X8036,	"Get addressibilty to class F");
	MakeComm	(0X8039,	"$M_RT.$M_CLASS_ADDRS+$M_INDEX ; $M_INDEX = 0\n[$M_RT+44]");
	MakeCode	(x=0X8039);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X804A);
	OpDecimal	(x,	1);
	MakeCode	(0X804F);
	MakeName	(0X804F,	"$M_GET_DBCS_VEC");
	MakeCode	(x=0X8052);
	OpHex		(x,	1);
	MakeComm	(0X8055,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0X8055);
	OpHex		(x,	0);
	MakeComm	(0X805C,	"$M_RT.$M_DBCS_VEC\n[$M_RT+60]");
	MakeCode	(x=0X805C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8060,	"[$M_RT+62]");
	MakeCode	(x=0X8060);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X8067);
	MakeName	(0X8067,	"SYSGETMSG");
	MakeComm	(0X8070,	"UTILITY_MSG_CLASS");
	MakeCode	(0X807A);
	MakeCode	(0X8083);
	MakeName	(0X8083,	"$M_GET_MSG_ADDRESS");
	MakeComm	(0X8089,	"UTILITY_MSG_CLASS");
	MakeComm	(0X808E,	"\nmov di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]");
	MakeCode	(x=0X808E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8096,	"PARSE_ERR_CLASS");
	MakeCode	(x=0X8096);
	OpHex		(x,	1);
	MakeComm	(0X809B,	"\nles di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]");
	MakeCode	(x=0X809B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X80A3,	"$M_CRIT_LO");
	MakeCode	(x=0X80A3);
	OpDecimal	(x,	1);
	MakeComm	(0X80A8,	"$M_CRIT_HI");
	MakeCode	(x=0X80A8);
	OpDecimal	(x,	1);
	MakeComm	(0X80AD,	"\nles di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]");
	MakeCode	(x=0X80AD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X80B5,	"\nles di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]");
	MakeCode	(x=0X80B5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X80BB,	"$M_TERMINATING_FLAG");
	MakeComm	(0X80C0,	"UTILITY_MSG_CLASS");
	MakeComm	(0X80C8,	"$M_RT.$M_MSG_NUM\n[$M_RT+72]");
	MakeCode	(0X80C8);
	MakeComm	(0X80CB,	"$M_SPECIAL_MSG_NUM");
	MakeComm	(0X80CE,	"$M_ONE_REPLACE");
	MakeComm	(0X80D6,	"$M_CLASS_NOT_EXIST");
	MakeCode	(0X80D6);
	MakeComm	(0X80DE,	"$M_ADDR_SZ_FAR");
	MakeCode	(0X80EA);
	MakeComm	(0X80EB,	"EXT_ERR_CLASS");
	MakeComm	(0X80F6,	"IFSFUNC_INSTALL_CHECK");
	MakeComm	(0X80F9,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, can't install\nFFh installed");
	MakeCode	(x=0X80F9);
	OpHex		(x,	0);
	MakeComm	(0X80FB,	"IFSFUNC_INSTALLED");
	MakeComm	(0X8102,	"IFS_GET_ERR_TEXT");
	MakeComm	(0X8105,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - ");
	MakeCode	(x=0X8105);
	OpHex		(x,	0);
	MakeCode	(0X8109);
	MakeCode	(x=0X8111);
	OpHex		(x,	1);
	MakeCode	(0X811B);
	MakeName	(0X811B,	"m_popf_iret");
	MakeComm	(0X811C,	"$M_POPF (macro)");
	MakeCode	(0X811C);
	MakeCode	(0X8123);
	MakeName	(0X8123,	"$M_SET_LEN_IN_CX");
	MakeComm	(0X8125,	"-1 ; 65535");
	MakeCode	(0X8132);
	MakeName	(0X8132,	"$M_FIND_SPECIFIED_MSG");
	MakeComm	(0X8137,	"[$M_RT+40],-1");
	MakeComm	(0X8144,	"$M_RT.$M_MSG_NUM\n[$M_RT+72]");
	MakeComm	(0X8147,	"DWORD PTR $M_RT.$M_DISK_PROC_ADDR\ncall far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]");
	MakeComm	(0X814E,	"\ncall far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]");
	MakeCode	(0X814E);
	MakeCode	(0X8154);
	MakeComm	(0X8156,	"UTILITY_MSG_CLASS");
	MakeComm	(0X815B,	"BYTE PTR ES:[DI].$M_NUM_CLS_MSG");
	MakeComm	(0X8161,	"BYTE PTR CS:[DI].$M_CLASS_ID,DH");
	MakeCode	(0X8161);
	MakeComm	(0X8166,	"BYTE PTR CS:[DI].$M_NUM_CLS_MSG");
	MakeComm	(0X816A,	"$M_CLASS_ID_SZ");
	MakeComm	(0X8175,	"UTILITY_MSG_CLASS");
	MakeComm	(0X817A,	"WORD PTR ES:[DI].$M_NUM");
	MakeComm	(0X817F,	"WORD PTR CS:[DI].$M_NUM");
	MakeCode	(0X817F);
	MakeCode	(0X8186);
	MakeCode	(0X818E);
	MakeComm	(0X8191,	"UTILITY_MSG_CLASS");
	MakeComm	(0X8199,	"WORD PTR ES:[DI].$M_TXT_PTR");
	MakeComm	(0X81A5,	"$M_RT.$M_SIZE,$M_NULL\n[$M_RT+66]");
	MakeCode	(0X81AB);
	MakeName	(0X81AB,	"SYSDISPMSG");
	MakeComm	(0X81B4,	"[$M_RT+$M_RES_ADDRS.$M_HANDLE]\n[$M_RT+64],bx");
	MakeComm	(0X81B8,	"[$M_RT+$M_RES_ADDRS.$M_CLASS]\n[$M_RT+69],dh");
	MakeComm	(0X81BF,	"(message length)");
	MakeComm	(0X81C7,	"(es:di = message/text address)");
	MakeCode	(0X81CC);
	MakeComm	(0X81DB,	"MSDOS 6.0 (to 6.22)");
	MakeCode	(x=0X81E0);
	OpHex		(x,	1);
	MakeCode	(0X81E6);
	MakeCode	(x=0X81EF);
	OpHex		(x,	1);
	MakeCode	(x=0X81F4);
	OpHex		(x,	1);
	MakeCode	(0X81F9);
	MakeName	(0X81F9,	"$M_DISPLAY_STRING");
	MakeComm	(0X81FC,	"$M_RT.$M_HANDLE\n[$M_RT+64]");
	MakeComm	(0X8200,	"$M_NO_HANDLE");
	MakeCode	(0X820A);
	MakeComm	(0X820F,	"DOS_GET_EXT_ERROR");
	MakeCode	(x=0X820F);
	OpHex		(x,	1);
	MakeComm	(0X8214,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X8214);
	OpHex		(x,	0);
	MakeCode	(x=0X8218);
	OpHex		(x,	1);
	MakeComm	(0X821E,	"$M_NO_HANDLE");
	MakeCode	(0X821E);
	MakeCode	(x=0X822A);
	OpHex		(x,	1);
	MakeCode	(0X8234);
	MakeName	(0X8234,	"$M_DISPLAY_$_STRING");
	MakeComm	(0X8237,	"$M_SINGLE_CHAR");
	MakeComm	(0X823C,	"DOS_DISP_CHAR");
	MakeComm	(0X8241,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X8241);
	OpHex		(x,	0);
	MakeComm	(0X8252,	"DOS - ");
	MakeCode	(x=0X8252);
	OpHex		(x,	0);
	MakeComm	(0X8257,	"DOS_DISP_CHAR");
	MakeCode	(0X8257);
	MakeComm	(0X8260,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X8260);
	OpHex		(x,	0);
	MakeCode	(0X8269);
	MakeName	(0X8269,	"scan_ctrlz");
	MakeComm	(0X8273,	"Ctrl-Z");
	MakeCode	(0X8284);
	MakeName	(0X8284,	"$M_DISPLAY_H_STRING");
	MakeCode	(x=0X828D);
	OpHex		(x,	1);
	MakeComm	(0X8291,	"$M_SINGLE_CHAR");
	MakeComm	(0X8296,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X8296);
	OpHex		(x,	0);
	MakeCode	(x=0X82A7);
	OpHex		(x,	1);
	MakeComm	(0X82AA,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X82AA);
	OpHex		(x,	0);
	MakeComm	(0X82AD,	"Ctrl-Z?");
	MakeComm	(0X82B1,	"@@:");
	MakeCode	(0X82B7);
	MakeName	(0X82B7,	"intret");
	MakeComm	(0X82B8,	"$M_Popf (macro)");
	MakeCode	(0X82B8);
	MakeCode	(0X82BE);
	MakeName	(0X82BE,	"$MIF128");
	MakeComm	(0X82C6,	"DOS - ");
	MakeCode	(x=0X82C6);
	OpHex		(x,	0);
	MakeCode	(0X82CC);
	MakeName	(0X82CC,	"chk_count");
	MakeName	(0X82D7,	"m_cnt_ok");
	MakeName	(0X82D8,	"$MEN128");
	MakeName	(0X82D9,	"$MIF127");
	MakeComm	(0X82DA,	"EXT_ERR_39");
	MakeCode	(x=0X82DA);
	OpHex		(x,	1);
	MakeName	(0X82DA,	"$M_GET_EXT_ERR_39");
	MakeComm	(0X82DD,	"(ERROR_CLASS_39 SHR 8) + ACTION_39");
	MakeComm	(0X82E0,	"LOCUS_39");
	MakeComm	(0X82E3,	"UTILITY_MSG_CLASS");
	MakeCode	(0X82E3);
	MakeName	(0X82E3,	"$M_ADD_CRLF");
	MakeComm	(0X82E8,	"$M_NO_CRLF_MASK");
	MakeCode	(x=0X82E8);
	OpHex		(x,	1);
	MakeComm	(0X82EF,	"$M_RT.$M_CRLF\n[$M_RT+67]");
	MakeCode	(x=0X82EF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X82F3,	"$M_CRLF_SIZE");
	MakeCode	(0X82FA);
	MakeName	(0X82FA,	"$M_IS_IT_DBCS");
	MakeComm	(0X82FC,	"$M_RT.$M_DBCS_VEC\n[$M_RT+60]\nles di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]");
	MakeCode	(x=0X82FC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8304,	"$M_DBCS_TERM");
	MakeCode	(0X831B);
	MakeComm	(0X831E,	"pop word [$M_RT+70]");
	MakeCode	(x=0X831E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X831E,	"$M_CONVERT2ASC");
	MakeComm	(0X8326,	"div word [$M_RT+74]");
	MakeCode	(x=0X8326);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X832B,	"[$M_RT+74]");
	MakeCode	(x=0X832B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8334,	"add dl,37h");
	MakeCode	(x=0X8334);
	OpDecimal	(x,	1);
	MakeComm	(0X8339,	"30h");
	MakeCode	(x=0X8339);
	OpChr		(x,	1);
	MakeComm	(0X8346,	"$M_FIRST_THOU");
	MakeComm	(0X834B,	"\n$M_SL.$M_S_PAD,$M_COMMA ($M_SL = [DS:SI])");
	MakeCode	(x=0X834B);
	OpChr		(x,	1);
	MakeComm	(0X8351,	"word $M_RT.$M_THOU_SEPARA");
	MakeCode	(x=0X8351);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8358,	"$M_SECOND_THOU\n(It was 'cmp cx,6' in MSDOS 5.0 COMMAND.COM!)");
	MakeCode	(0X8358);
	MakeCode	(x=0X835D);
	OpChr		(x,	1);
	MakeComm	(0X8363,	"[$M_RT+83]");
	MakeCode	(x=0X8363);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X836A,	"$M_THIRD_THOU\n(It was 'cmp cx,9' in MSDOS 5.0 COMMAND.COM!)");
	MakeCode	(x=0X836A);
	OpDecimal	(x,	1);
	MakeComm	(0X836F,	"$M_SL.$M_S_PAD,$M_COMMA");
	MakeCode	(x=0X836F);
	OpChr		(x,	1);
	MakeComm	(0X8375,	"[$M_RT+83]");
	MakeCode	(x=0X8375);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X837F);
	MakeComm	(0X8383,	"[$M_RT+70]");
	MakeCode	(x=0X8383);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8388,	"$MDO165");
	MakeCode	(0X8388);
	MakeName	(0X8388,	"$M_DISPLAY_MESSAGE");
	MakeComm	(0X838A,	"(byte count of the message/text)");
	MakeCode	(x=0X838E);
	OpChr		(x,	1);
	MakeComm	(0X83B7,	"$M_RT.$M_MSG_NUM,$M_NULL\n[$M_RT+72]],0");
	MakeCode	(x=0X83B7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X83BE,	"$M_SL.$M_S_ID");
	MakeCode	(x=0X83C1);
	OpHex		(x,	1);
	MakeComm	(0X83CB,	"$M_SPECIAL_CASE");
	MakeCode	(x=0X83CB);
	OpHex		(x,	1);
	MakeComm	(0X83D3,	"add si,[si+$M_SUBLIST_STRUC.$M_S_SIZE]\nadd si,[si+0]");
	MakeComm	(0X83D7,	"$M_RT.$M_CLASS,UTILITY_MSG_CLASS\ncmp byte [$M_RT+69],0FFh");
	MakeCode	(x=0X83D7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X83E6,	"0FFFFh");
	MakeCode	(x=0X83E6);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeCode	(0X83F6);
	MakeComm	(0X83F9,	"$M_SL.$M_S_ID,$M_SPECIAL_CASE-30H");
	MakeCode	(0X8409);
	MakeCode	(0X840C);
	MakeCode	(x=0X8413);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeComm	(0X8424,	"$M_RT.$M_MSG_NUM,$M_NULL\n[$M_RT+72],0");
	MakeCode	(x=0X8424);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X842B,	"\n$M_SL.$M_S_FLAG,NOT Char_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X842B);
	OpHex		(x,	1);
	MakeComm	(0X8431,	"$M_SL.$M_S_VALUE");
	MakeComm	(0X8439,	"\n$M_SL.$M_S_FLAG,NOT Sgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X8439);
	OpHex		(x,	1);
	MakeComm	(0X843F,	"\n$M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X843F);
	OpHex		(x,	1);
	MakeComm	(0X8445,	"\n$M_SL.$M_S_FLAG,NOT Bin_Hex_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X8445);
	OpHex		(x,	1);
	MakeComm	(0X8453,	"$M_SL.$M_S_FLAG,NOT Date_Type AND $M_TYPE_MASK\n($M_SL = [ds:si])");
	MakeCode	(x=0X8453);
	OpHex		(x,	1);
	MakeCode	(0X845E);
	MakeCode	(0X8466);
	MakeCode	(x=0X8472);
	OpDecimal	(x,	1);
	MakeComm	(0X8476,	"$M_RT.$M_MSG_NUM,$M_NUL\ncmp word [$M_RT+72],0");
	MakeCode	(x=0X8476);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X847F,	"jmp $MDO165");
	MakeComm	(0X8482,	"$M_RT.$M_MSG_NUM,0\nmov word [$M_RT+72],0");
	MakeCode	(x=0X8482);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X8489);
	MakeName	(0X8489,	"$M_EXT_PAR_REPLACE");
	MakeComm	(0X848B,	"$M_RT.$M_MSG_NUM\nmov ax,[$M_RT+72]");
	MakeCode	(x=0X848B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X848E,	"$M_RT.$M_DIVISOR,$M_BASE10\n[$M_RT+74],10");
	MakeCode	(x=0X848E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X8498,	"[bx+$M_RT+76]\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X8498);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X849D,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X849D);
	OpDecimal	(x,	1);
	MakeComm	(0X84A9,	"$M_CR_LF");
	MakeComm	(0X84AC,	"$M_RT.$M_TEMP_BUF[BX],AX");
	MakeCode	(x=0X84AC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X84B6);
	MakeName	(0X84B6,	"$M_DISPLAY_REPLACE");
	MakeComm	(0X84B8,	"$M_SL.$M_S_ID,$M_SPECIAL_CASE-30H");
	MakeComm	(0X84BE,	"\n$M_RT.$M_TEMP_BUF[BX],$M_SPACE_HYP");
	MakeCode	(x=0X84BE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X84C6,	"\n$M_RT.$M_TEMP_BUF[BX],$M_SPACE");
	MakeCode	(x=0X84C6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpHex		(x,	1);
	MakeComm	(0X84D4,	"$M_RT.$M_SIZE\nmov [$M_RT+66],cl");
	MakeCode	(x=0X84D4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X84D8,	"$M_SL.$M_S_MINW");
	MakeComm	(0X84E3,	"BYTE PTR $M_SL.$M_S_FLAG,Right_Align");
	MakeCode	(x=0X84E3);
	OpHex		(x,	1);
	MakeComm	(0X84E9,	"$M_SL.$M_S_PAD");
	MakeCode	(x=0X84EC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X84F1,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X84F1);
	OpDecimal	(x,	1);
	MakeComm	(0X84FD,	"$M_SL.$M_S_MAXW,$M_UNLIM_W");
	MakeComm	(0X8503,	"$M_SL.$M_S_MAXW");
	MakeComm	(0X8514,	"\n$M_SL.$M_S_FLAG,NOT Char_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X8514);
	OpHex		(x,	1);
	MakeComm	(0X851A,	"\n$M_SL.$M_S_FLAG,Char_field_ASCIIZ AND $M_SIZE_MASK");
	MakeCode	(x=0X851A);
	OpHex		(x,	1);
	MakeCode	(0X8526);
	MakeComm	(0X8527,	"\nMOV BYTE PTR $M_RT.$M_TEMP_BUF[BX],AL\nmov [bx+$M_RT+76],al");
	MakeCode	(x=0X8527);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X852C,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X852C);
	OpDecimal	(x,	1);
	MakeComm	(0X8538,	"$M_SL.$M_S_FLAG,Right_Align");
	MakeCode	(x=0X8538);
	OpHex		(x,	1);
	MakeComm	(0X8542,	"$M_SL.$M_S_PAD\n(ds:si+$M_SUBLIST_STRUC.$M_S_PAD)");
	MakeCode	(x=0X8545);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X854A,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X854A);
	OpDecimal	(x,	1);
	MakeComm	(0X8556,	"\n$M_SL.$M_S_FLAG,NOT Char_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X8556);
	OpHex		(x,	1);
	MakeComm	(0X855C,	"\n$M_SL.$M_S_FLAG,Char_field_ASCIIZ AND $M_SIZE_MASK");
	MakeCode	(x=0X855C);
	OpHex		(x,	1);
	MakeCode	(0X8564);
	MakeComm	(0X8568,	"pop [$M_RT.$M_RETURN_ADDR]\npop word [$M_RT+70]");
	MakeCode	(x=0X8568);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X8575);
	MakeName	(0X8575,	"$M_FLUSH_BUF");
	MakeComm	(0X857E,	"$M_RT.$M_TEMP_BUF\nlea di,[$M_RT+76]");
	MakeCode	(x=0X857E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X858C);
	OpHex		(x,	1);
	MakeCode	(0X8591);
	MakeName	(0X8591,	"$M_CHAR_REPLACE");
	MakeComm	(0X8592,	"\n$M_SL.$M_S_FLAG,NOT Char_Field_Char AND $M_SIZE_MASK");
	MakeCode	(x=0X8592);
	OpHex		(x,	1);
	MakeCode	(0X85AA);
	MakeCode	(0X85B5);
	MakeCode	(0X85B9);
	MakeName	(0X85B9,	"$M_BIN2ASC_REPLACE");
	MakeComm	(0X85BE,	"$M_RT.$M_DIVISOR,$M_BASE16\nmov word [$M_RT+74],16");
	MakeCode	(x=0X85BE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X85C6,	"$M_SL.$M_S_FLAG,NOT $M_BYTE AND $M_SIZE_MASK");
	MakeCode	(x=0X85C6);
	OpHex		(x,	1);
	MakeComm	(0X85CF,	"$M_SL.$M_S_FLAG,NOT Sgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X85CF);
	OpHex		(x,	1);
	MakeComm	(0X85D5,	"test al,10000000b");
	MakeCode	(x=0X85D5);
	OpHex		(x,	1);
	MakeComm	(0X85D9,	"negative number");
	MakeComm	(0X85DA,	"and al,01111111b");
	MakeCode	(x=0X85DA);
	OpHex		(x,	1);
	MakeComm	(0X85DC,	"$M_RT.$M_DIVISOR,$M_BASE10\nmov word [$M_RT+74],10");
	MakeCode	(x=0X85DC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X85E2,	"$M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X85E2);
	OpHex		(x,	1);
	MakeComm	(0X85E8,	"mov word [$M_RT+74],10");
	MakeCode	(x=0X85E8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X85F0,	"$M_SL.$M_S_FLAG,NOT $M_WORD AND $M_SIZE_MASK");
	MakeCode	(x=0X85F0);
	OpHex		(x,	1);
	MakeComm	(0X85F9,	"$M_SL.$M_S_FLAG,NOT Sgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X85F9);
	OpHex		(x,	1);
	MakeComm	(0X85FF,	"test ah,10000000b");
	MakeCode	(x=0X85FF);
	OpHex		(x,	1);
	MakeComm	(0X8605,	"and ah,01111111b");
	MakeCode	(x=0X8605);
	OpHex		(x,	1);
	MakeCode	(x=0X8608);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X860E,	"$M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X860E);
	OpHex		(x,	1);
	MakeComm	(0X8614,	"$M_RT.$M_DIVISOR,$M_BASE10\nmov word [$M_RT+74],10");
	MakeCode	(x=0X8614);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeCode	(0X861C);
	MakeComm	(0X8623,	"$M_SL.$M_S_FLAG,NOT Sgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X8623);
	OpHex		(x,	1);
	MakeComm	(0X8629,	"test dh,10000000b");
	MakeCode	(x=0X8629);
	OpHex		(x,	1);
	MakeComm	(0X862F,	"and dh,01111111b");
	MakeCode	(x=0X862F);
	OpHex		(x,	1);
	MakeComm	(0X8632,	"mov word [$M_RT+74],10");
	MakeCode	(x=0X8632);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X8638,	"$M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK\n($M_SL = [ds:si]) ($M_SUBLIST_STRUC.$M_S_FLAG = 7)");
	MakeCode	(x=0X8638);
	OpHex		(x,	1);
	MakeCode	(x=0X863E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X8644,	"MSDOS 6.22\n(Custom/International flag for thousand separator)");
	MakeCode	(x=0X8644);
	OpHex		(x,	1);
	MakeComm	(0X864A,	"MSDOS 6.22");
	MakeComm	(0X864C,	"International");
	MakeCode	(x=0X864C);
	OpHex		(x,	1);
	MakeCode	(x=0X8650);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8654,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X8654);
	OpHex		(x,	0);
	MakeComm	(0X8656,	"(use country depended thousand separator)");
	MakeCode	(x=0X8658);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpChr		(x,	1);
	MakeComm	(0X865D,	"(save pad character)");
	MakeComm	(0X8664,	"(comma is needed for converting procedure)");
	MakeCode	(x=0X8664);
	OpChr		(x,	1);
	MakeComm	(0X866D,	"(restore pad character)");
	MakeComm	(0X8670,	"MSDOS 6.22");
	MakeCode	(0X8672);
	MakeComm	(0X867C,	"$M_NEG_SIGN");
	MakeCode	(x=0X867C);
	OpChr		(x,	1);
	MakeCode	(0X8681);
	MakeName	(0X8681,	"$M_DATE_REPLACE");
	MakeComm	(0X8682,	"$M_RT.$M_DIVISOR,$M_BASE10\nmov word [$M_RT+74],10");
	MakeCode	(x=0X8682);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X868F,	"$M_RT.$M_DATE_FORMAT,0\ncmp word [$M_RT+76],0");
	MakeCode	(x=0X868F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X869C,	"$M_RT.$M_DATE_SEPARA\npush word [$M_RT+87]");
	MakeCode	(x=0X869C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86A3,	"$M_SL.$M_S_VALUE+3");
	MakeCode	(x=0X86A9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86AE,	"$M_SL.$M_S_VALUE+2");
	MakeComm	(0X86B4,	"$M_RT.$M_DATE_FORMAT,1");
	MakeCode	(x=0X86B4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86C1,	"push word [$M_RT+87]");
	MakeCode	(x=0X86C1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86C8,	"$M_SL.$M_S_VALUE+2");
	MakeCode	(x=0X86CE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86D3,	"$M_SL.$M_S_VALUE+3");
	MakeComm	(0X86D9,	"$M_RT.$M_DATE_FORMAT,2");
	MakeCode	(x=0X86D9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X86E6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86F1,	"$M_RT.$M_DATE_SEPARA");
	MakeCode	(x=0X86F1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X86FE,	"DOS_GET_COUNTRY");
	MakeCode	(x=0X86FE);
	OpHex		(x,	1);
	MakeName	(0X86FE,	"$M_GET_DATE");
	MakeComm	(0X8702,	"lea dx,[$M_RT+76]");
	MakeCode	(x=0X8702);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8706,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X8706);
	OpHex		(x,	0);
	MakeComm	(0X870A,	"$M_RT.$M_DATE_FORMAT,$M_DEF_DATE_FORM");
	MakeCode	(x=0X870A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8710,	"\n$M_RT.$M_DATE_SEPARA,$M_DEF_DATE_SEP\nmov byte [$M_RT+87],'-'");
	MakeCode	(x=0X8710);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpChr		(x,	1);
	MakeComm	(0X8716,	"$M_SL.$M_S_VALUE\n($M_SUBLIST_STRUC.$M_S_VALUE = 2)");
	MakeCode	(0X8716);
	MakeName	(0X8716,	"$M_YEAR");
	MakeComm	(0X8719,	"$M_SL.$M_S_FLAG,Date_MDY_4 AND $M_DATE_MASK");
	MakeCode	(x=0X8719);
	OpHex		(x,	1);
	MakeComm	(0X871F,	"$M_MAX_2_YEAR");
	MakeCode	(x=0X871F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8724);
	OpDecimal	(x,	1);
	MakeComm	(0X8728,	"$M_RT.$M_TEMP_BUF\npop word [$M_RT+76]");
	MakeCode	(x=0X8728);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X8728,	"$M_CONVERTDATE");
	MakeComm	(0X872C,	"$M_RT.$M_SIZE");
	MakeCode	(x=0X872C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X8734);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X873A,	"$M_TIMEDATE_PAD");
	MakeCode	(x=0X873A);
	OpChr		(x,	1);
	MakeComm	(0X8740,	"push word [$M_RT+76]");
	MakeCode	(x=0X8740);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X8745);
	MakeName	(0X8745,	"$M_TIME_REPLACE");
	MakeComm	(0X8746,	"MOV $M_RT.$M_DIVISOR,$M_BASE10");
	MakeCode	(x=0X8746);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X874F,	"$M_SL.$M_S_FLAG,Time_Cty_Type AND $M_TIME_MASK");
	MakeCode	(x=0X874F);
	OpHex		(x,	1);
	MakeComm	(0X8755,	"$M_RT.$M_TIME_FORMAT\ncmp byte [$M_RT+93],0");
	MakeCode	(x=0X8755);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X875C,	"$M_SL.$M_S_VALUE ($M_SL = [ds:si])");
	MakeCode	(x=0X875F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8763);
	OpDecimal	(x,	1);
	MakeComm	(0X8767,	"$M_AM");
	MakeCode	(x=0X8767);
	OpChr		(x,	1);
	MakeComm	(0X876D,	"$M_PM");
	MakeCode	(x=0X876D);
	OpChr		(x,	1);
	MakeComm	(0X8775,	"\n$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty AND $M_SIZE_MASK");
	MakeCode	(x=0X8775);
	OpHex		(x,	1);
	MakeComm	(0X877B,	"$M_SL.$M_S_VALUE+3 ($M_SUBLIST_STRUC.$M_S_VALUE = 2)");
	MakeComm	(0X8781,	"$M_RT.$M_DECI_SEPARA\npush word [$M_RT+85]");
	MakeCode	(x=0X8781);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8786,	"\n$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty AND $M_SIZE_MASK");
	MakeCode	(x=0X8786);
	OpHex		(x,	1);
	MakeComm	(0X878C,	"\n$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK");
	MakeCode	(x=0X878C);
	OpHex		(x,	1);
	MakeComm	(0X8792,	"$M_SL.$M_S_VALUE+2");
	MakeComm	(0X8798,	"$M_RT.$M_TIME_SEPARA\npush word [$M_RT+89]");
	MakeCode	(x=0X8798);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X879D,	"$M_SL.$M_S_VALUE+1");
	MakeCode	(x=0X87A3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X87A8,	"$M_SL.$M_S_VALUE");
	MakeComm	(0X87AB,	"\n$M_SL.$M_S_FLAG,Time_Cty_Type AND $M_TIME_MASK");
	MakeCode	(x=0X87AB);
	OpHex		(x,	1);
	MakeComm	(0X87B1,	"$M_RT.$M_TIME_FORMAT\ncmp byte [$M_RT+93],0");
	MakeCode	(x=0X87B1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(x=0X87B8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X87BC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X87C2);
	OpDecimal	(x,	1);
	MakeComm	(0X87C9,	"DOS_GET_COUNTRY");
	MakeCode	(x=0X87C9);
	OpHex		(x,	1);
	MakeName	(0X87C9,	"$M_GET_TIME");
	MakeCode	(x=0X87CD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X87D1,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X87D1);
	OpHex		(x,	0);
	MakeComm	(0X87D5,	"$M_DEF_TIME_FORM");
	MakeCode	(x=0X87D5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X87DB,	"$M_DEF_TIME_SEP");
	MakeCode	(x=0X87DB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpChr		(x,	1);
	MakeComm	(0X87E0,	"$M_DEF_DECI_SEP");
	MakeCode	(x=0X87E0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpChr		(x,	1);
	MakeComm	(0X87E6,	"$M_RT.$M_TEMP_BUF\npop word [$M_RT+76]");
	MakeCode	(x=0X87E6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X87E6,	"$M_CONVERTTIME");
	MakeCode	(x=0X87EA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X87F2,	"$M_RT.$M_SIZE");
	MakeCode	(x=0X87F2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X87F8,	"$M_TIMEDATE_PAD");
	MakeCode	(x=0X87F8);
	OpChr		(x,	1);
	MakeCode	(x=0X87FE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeCode	(0X8803);
	MakeName	(0X8803,	"$M_WAIT_FOR_INPUT");
	MakeComm	(0X8806,	"DOS_CLR_KEYB_BUF_MASK");
	MakeCode	(x=0X8806);
	OpHex		(x,	1);
	MakeComm	(0X880D,	"LOW_NIB_MASK");
	MakeCode	(x=0X880D);
	OpHex		(x,	1);
	MakeComm	(0X880F,	"DOS_CLR_KEYB_BUF");
	MakeCode	(x=0X880F);
	OpHex		(x,	1);
	MakeCode	(0X8813);
	MakeComm	(0X8819,	"DOS - ");
	MakeCode	(x=0X8819);
	OpHex		(x,	0);
	MakeComm	(0X881C,	"DOS_BUF_KEYB_INP");
	MakeCode	(x=0X881C);
	OpHex		(x,	1);
	MakeComm	(0X882B,	"DOS - ");
	MakeCode	(x=0X882B);
	OpHex		(x,	0);
	MakeCode	(0X8832);
	MakeCode	(x=0X883A);
	OpHex		(x,	1);
	MakeCode	(0X883F);
	MakeName	(0X883F,	"InitVar");
	MakeCode	(x=0X8843);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8849);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X884D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8851);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8855,	"UNSPECIFIED");
	MakeCode	(x=0X8855);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X885B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8860,	"MAXUMB");
	MakeCode	(x=0X8860);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8863);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8868,	"MAXUMB");
	MakeCode	(x=0X8868);
	OpDecimal	(x,	1);
	MakeCode	(x=0X886B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8875);
	MakeName	(0X8875,	"FixMem");
	MakeComm	(0X8889,	"es:[arena_signature]");
	MakeComm	(0X888D,	"es:[arena_owner]");
	MakeName	(0X8896,	"fm20");
	MakeComm	(0X88A1,	"es:[arena_size]");
	MakeCode	(x=0X88CC);
	OpHex		(x,	1);
	MakeName	(0X88CC,	"fm_link");
	MakeComm	(0X88CF,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state");
	MakeCode	(x=0X88CF);
	OpHex		(x,	0);
	MakeCode	(x=0X88D2);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X88D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X88E1,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X88E1);
	OpHex		(x,	0);
	MakeCode	(0X88E4);
	MakeName	(0X88E4,	"fm_unlink");
	MakeCode	(x=0X88E7);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X88EB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X88F0);
	OpHex		(x,	1);
	MakeComm	(0X88F3,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X88F3);
	OpHex		(x,	0);
	MakeCode	(0X88F6);
	MakeName	(0X88F6,	"ParseVar");
	MakeComm	(0X8902,	"SWTCH");
	MakeCode	(x=0X8902);
	OpChr		(x,	1);
	MakeCode	(0X890A);
	MakeComm	(0X890B,	"toUpper (macro)");
	MakeCode	(x=0X890B);
	OpHex		(x,	1);
	MakeComm	(0X890D,	"optS ; just read 'S'?");
	MakeCode	(x=0X890D);
	OpChr		(x,	1);
	MakeComm	(0X8911,	"it is /S, another arg for LH is skipped");
	MakeCode	(x=0X8915);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8919);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8922,	"optL ; If it's not 'L', it is a bad switch");
	MakeCode	(x=0X8922);
	OpChr		(x,	1);
	MakeComm	(0X8926,	"it is /L, another arg for LH is skipped");
	MakeComm	(0X8931,	"PV_InvSwt ; Unrecognized switch passed");
	MakeCode	(0X8931);
	MakeCode	(0X893B);
	MakeName	(0X893B,	"parseL");
	MakeComm	(0X893C,	"Make sure they did /L:");
	MakeCode	(x=0X893C);
	OpChr		(x,	1);
	MakeComm	(0X8945,	"Convert any address to a UMB number");
	MakeComm	(0X894A,	"Mark this UMB # as used");
	MakeComm	(0X894F,	"Each UMB number is another arg for LH to skip");
	MakeComm	(0X8953,	"Did \"umb;\" ?");
	MakeCode	(x=0X8953);
	OpChr		(x,	1);
	MakeComm	(0X8955,	"get another UMB");
	MakeComm	(0X8957,	"Did \"umb \" ?");
	MakeComm	(0X895A,	"return");
	MakeComm	(0X895C,	"Did \"umb\" ?");
	MakeComm	(0X895F,	"backup and exit");
	MakeComm	(0X8961,	"Did \"umb/\" ? (as in, \"/L:1,100;2/S\")");
	MakeCode	(x=0X8961);
	OpChr		(x,	1);
	MakeComm	(0X8963,	"backup one character and return");
	MakeComm	(0X8965,	"Did \"umb,\" ?");
	MakeCode	(x=0X8965);
	OpChr		(x,	1);
	MakeComm	(0X8967,	"return error");
	MakeComm	(0X8969,	"Stop on \"size;\" or \"size \" or anything else");
	MakeComm	(0X896C,	"bad size");
	MakeComm	(0X896E,	"Convert from bytes to paragraphs");
	MakeComm	(0X8971,	"CL still has the UMB number for this routine");
	MakeComm	(0X8974,	"Each UMB size is another arg for LH to skip");
	MakeComm	(0X8978,	"They did \"umb,size;\", so get another UMB.");
	MakeCode	(x=0X8978);
	OpChr		(x,	1);
	MakeComm	(0X897C,	"Did it end with whitespace?");
	MakeComm	(0X897F,	"we're done here--go back");
	MakeComm	(0X8981,	"Did they do \"umb,size\" and end??? (stupid)");
	MakeComm	(0X8984,	"backup and exit like everything's ok");
	MakeComm	(0X8986,	"Did they do \"umb,size/\" ?");
	MakeCode	(x=0X8986);
	OpChr		(x,	1);
	MakeComm	(0X8988,	"we're done here");
	MakeComm	(0X898A,	"PV_InvArg ; we don't know WHAT they did..");
	MakeComm	(0X8990,	"PV_BadUMB ; they've specified a UMB twice");
	MakeCode	(0X8990);
	MakeComm	(0X8995,	"we hit a '/' character, back up one char");
	MakeCode	(0X8995);
	MakeCode	(0X8998);
	MakeName	(0X8998,	"incArgc");
	MakeComm	(0X8999,	"getdata (macro)\ngetdata al, fm_argc");
	MakeCode	(x=0X899A);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X899E,	"Obtain previous value of fm_argc,");
	MakeCode	(x=0X899E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X89A2,	"increment it,");
	MakeComm	(0X89A4,	"putdata (macro)\nputdata fm_argc, al");
	MakeCode	(x=0X89A5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X89A9,	"and store it right back.");
	MakeCode	(x=0X89A9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X89B0,	"Null-terminator");
	MakeCode	(0X89B0);
	MakeName	(0X89B0,	"isEOL");
	MakeComm	(0X89B4,	"Carriage Return");
	MakeComm	(0X89B8,	"LineFeed");
	MakeComm	(0X89BB,	"Space");
	MakeCode	(0X89BB);
	MakeName	(0X89BB,	"isWhite");
	MakeComm	(0X89BF,	"Equals (treat as whitespace)");
	MakeComm	(0X89C3,	"Tab");
	MakeCode	(0X89C6);
	MakeName	(0X89C6,	"unMarkUMB");
	MakeCode	(x=0X89CA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X89D2,	"marks the UMB as unused");
	MakeCode	(x=0X89D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X89D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X89DF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X89EA,	"MAXUMB");
	MakeCode	(x=0X89EA);
	OpDecimal	(x,	1);
	MakeName	(0X89EA,	"stowUMB");
	MakeCode	(0X89F0);
	MakeCode	(x=0X89F5);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X89F9);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X89FD,	"UNSPECIFIED");
	MakeCode	(x=0X89FD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8A04,	"remember this UMB as the load UMB slot");
	MakeCode	(x=0X8A04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8A09,	"umb number is 0, nothing to do");
	MakeComm	(0X8A0F,	"Now, AX = 1 and BX = UMB Number");
	MakeComm	(0X8A12,	"mark the UMB as used");
	MakeCode	(x=0X8A12);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8A17,	"If it was already 1, that means an error");
	MakeComm	(0X8A1B,	"OOOPS! This one's been used before.");
	MakeCode	(0X8A22);
	MakeName	(0X8A22,	"stowSiz");
	MakeCode	(x=0X8A25);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8A29,	"bl==UMB number, AX==size");
	MakeCode	(x=0X8A2D);
	OpHex		(x,	1);
	MakeComm	(0X8A2F,	"bx==offset into array, AX=size");
	MakeCode	(x=0X8A2F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8A38,	"Must be a word--16x16 multiplication");
	MakeWord	(0X8A38);
	MakeName	(0X8A38,	"gnradix");
	MakeCode	(x=0X8A3A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeName	(0X8A3A,	"toDigit");
	MakeComm	(0X8A3F,	"Don't check hex digits if radix isn't 16");
	MakeCode	(x=0X8A41);
	OpChr		(x,	1);
	MakeCode	(x=0X8A46);
	OpChr		(x,	1);
	MakeComm	(0X8A4B,	"'a'-10 ; 87 ; make 'a' == 10");
	MakeCode	(x=0X8A4B);
	OpHex		(x,	1);
	MakeCode	(x=0X8A4F);
	OpChr		(x,	1);
	MakeCode	(x=0X8A54);
	OpChr		(x,	1);
	MakeComm	(0X8A59,	"'A'-10 ; 55 ; make 'A' == 10");
	MakeCode	(x=0X8A59);
	OpHex		(x,	1);
	MakeCode	(x=0X8A5D);
	OpChr		(x,	1);
	MakeCode	(x=0X8A62);
	OpChr		(x,	1);
	MakeComm	(0X8A67,	"30h ;  make '0' == 0");
	MakeCode	(x=0X8A67);
	OpChr		(x,	1);
	MakeCode	(0X8A6B);
	MakeCode	(0X8A6D);
	MakeName	(0X8A6D,	"GetXNum");
	MakeComm	(0X8A79,	"default radix is 10");
	MakeCode	(x=0X8A79);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X8A85,	"it is not a digit");
	MakeComm	(0X8A89,	"Doesn't have '0x'");
	MakeComm	(0X8A8F,	"'x' means it's hexadecimal");
	MakeCode	(x=0X8A8F);
	OpChr		(x,	1);
	MakeComm	(0X8A94,	"'X' means it's hexadecimal");
	MakeCode	(x=0X8A94);
	OpChr		(x,	1);
	MakeComm	(0X8A99,	"Since we read \"0x\", march over it.");
	MakeCode	(x=0X8A99);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeComm	(0X8AA1,	"Now DX:AX=current total,\nCH=0, CL=number <=15");
	MakeComm	(0X8AA8,	"not a digit, stop");
	MakeComm	(0X8AAA,	"Multiply DX:AX by gnradix");
	MakeComm	(0X8AAD,	"(if it's too big, error out)");
	MakeComm	(0X8AB1,	"bx = 0");
	MakeCode	(0X8AB7);
	MakeCode	(0X8ABA);
	MakeCode	(0X8AC0);
	MakeName	(0X8AC0,	"mul32");
	MakeCode	(x=0X8AC3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8AC7,	"too big?");
	MakeCode	(x=0X8ACE);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(0X8AD9);
	MakeComm	(0X8ADB,	"divide DX:AX by 16; result in AX only \nDX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll");
	MakeCode	(0X8ADB);
	MakeName	(0X8ADB,	"toPara");
	MakeComm	(0X8ADE,	"DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll");
	MakeComm	(0X8AE0,	"DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh");
	MakeCode	(x=0X8AE1);
	OpDecimal	(x,	1);
	MakeComm	(0X8AE3,	"DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000");
	MakeComm	(0X8AE5,	"   AX=hhhh LLLL llll llll");
	MakeCode	(0X8AE9);
	MakeName	(0X8AE9,	"UmbHead");
	MakeComm	(0X8AEC,	"DOS_GET_DOS_LISTS");
	MakeCode	(x=0X8AEC);
	OpHex		(x,	1);
	MakeComm	(0X8AEE,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists");
	MakeCode	(x=0X8AEE);
	OpHex		(x,	0);
	MakeComm	(0X8AF0,	"[DOS_UMB_HEAD]");
	MakeComm	(0X8AF7,	"error (ax = 0FFFFh)");
	MakeCode	(0X8AFC);
	MakeComm	(0X8B01,	"sets ZF \nif ES points to an MCB owned by \"SC\"+(8or9)");
	MakeCode	(0X8B01);
	MakeName	(0X8B01,	"isSysMCB");
	MakeComm	(0X8B02,	"mov ax, es:[arena_owner]");
	MakeComm	(0X8B06,	"SystemPSPOwner (for US or Japan)");
	MakeComm	(0X8B0B,	"JapanPSPOwner (for Japan)");
	MakeComm	(0X8B12,	"mov ax, word ptr es:[arena_name]");
	MakeCode	(0X8B12);
	MakeComm	(0X8B16,	"'SC'");
	MakeCode	(x=0X8B16);
	OpChr		(x,	1);
	MakeComm	(0X8B1B,	"convert segment addr in AX to UMB number");
	MakeCode	(0X8B1B);
	MakeName	(0X8B1B,	"AddrToUmb");
	MakeComm	(0X8B27,	"cx = UMB# = 0");
	MakeComm	(0X8B2B,	"Present segment >= given segment?");
	MakeComm	(0X8B34,	"If it _was_ a system MCB,\nwe're in a new UMB.");
	MakeComm	(0X8B35,	"mov al, es:[arena_signature]");
	MakeComm	(0X8B39,	"arena_signature_end");
	MakeCode	(x=0X8B39);
	OpChr		(x,	1);
	MakeComm	(0X8B3B,	"'Z' means this was the last MCB");
	MakeComm	(0X8B3F,	"NextMCB (macro)");
	MakeCode	(0X8B49);
	MakeComm	(0X8B4B,	"add ax, es:[arena_size]");
	MakeComm	(0X8B50,	"Present >= given?");
	MakeComm	(0X8B52,	"Yes, it _was_ inside");
	MakeComm	(0X8B54,	"Else, fall through with UMB # == -1");
	MakeComm	(0X8B57,	"Return the UMB number in AX");
	MakeCode	(x=0X8B5D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	OpDecimal	(x,	1);
	MakeName	(0X8B5D,	"convUMB");
	MakeComm	(0X8B62,	"If it didn't read in hex, it's not an address");
	MakeComm	(0X8B64,	"convert the address to a UMB number");
	MakeComm	(0X8B6C,	"If too high, ignore it (make it conventional)");
	MakeCode	(0X8B6E);
	MakeName	(0X8B6E,	"setUMBs");
	MakeComm	(0X8B73,	"DOS_CHECK_STRATEGY");
	MakeCode	(x=0X8B73);
	OpHex		(x,	1);
	MakeComm	(0X8B76,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: get allocation strategy");
	MakeCode	(x=0X8B76);
	OpHex		(x,	0);
	MakeCode	(x=0X8B79);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8B7D,	"store the current strategy");
	MakeCode	(x=0X8B7D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8B82,	"0000.0000.0111.1111 == All that other stuff");
	MakeCode	(x=0X8B82);
	OpHex		(x,	1);
	MakeComm	(0X8B86,	"returns al==0 if load low, al==1 if loadhigh");
	MakeComm	(0X8B89,	"shift that to al==0 or al==0x80");
	MakeCode	(x=0X8B89);
	OpHex		(x,	1);
	MakeComm	(0X8B8B,	"restore pushed ax above");
	MakeComm	(0X8B8C,	"now we have 0000.0000.?111.1111 in BX");
	MakeComm	(0X8B8E,	"DOS_SET_STRATEGY ; with ? ==1 if load highfirs");
	MakeCode	(x=0X8B8E);
	OpHex		(x,	1);
	MakeComm	(0X8B91,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X8B91);
	OpHex		(x,	0);
	MakeComm	(0X8B96,	"returns AL==0 if UMB0 == 0, else AL==1");
	MakeCode	(0X8B96);
	MakeName	(0X8B96,	"loadLow");
	MakeCode	(x=0X8B97);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8B9B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8B9E,	"UNSPECIFIED");
	MakeComm	(0X8BA2,	"Return with AL==1 && STC if no UMBs specified");
	MakeComm	(0X8BA7,	"AL=the load UMB: Is it == 0?");
	MakeCode	(0X8BA7);
	MakeComm	(0X8BA9,	"yes, CF==0 (from OR) && AL=0, so just exit");
	MakeCode	(0X8BB0);
	MakeName	(0X8BB0,	"HideUMBs");
	MakeComm	(0X8BB4,	"see if we REALLY linked in anything...");
	MakeComm	(0X8BB7,	"if not, there's nothing for us to do.");
	MakeComm	(0X8BB9,	"concatenate adjacent free MCBs in upper mem");
	MakeComm	(0X8BBC,	"link UMBs and set memory-allocation strategy");
	MakeCode	(x=0X8BC0);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8BC4,	"remember that we're now running high");
	MakeCode	(x=0X8BC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X8BCB,	"see if they gave us a list to leave free");
	MakeComm	(0X8BCE,	"UNSPECIFIED ; if they didn't,");
	MakeComm	(0X8BD0,	"then we shouldn't do this loop");
	MakeComm	(0X8BD4,	"for each UMB");
	MakeCode	(x=0X8BD5);
	OpDecimal	(x,	1);
	MakeComm	(0X8BDA,	"stopping as soon as we're outside of the\nvalid range of UMBs");
	MakeComm	(0X8BE3,	"hide what we need to hide");
	MakeComm	(0X8BE8,	"now check if they offered /L:0");
	MakeCode	(0X8BE8);
	MakeComm	(0X8BEB,	"is the load UMB 0? (-1==unspecified)");
	MakeComm	(0X8BED,	"if not, we're done");
	MakeComm	(0X8BEF,	"if so, however, fix UMBs and strategy");
	MakeCode	(0X8BF7);
	MakeName	(0X8BF7,	"GetLoadUMB");
	MakeComm	(0X8BF8,	"getdata (macro)\ngetdata al,UmbLoad");
	MakeCode	(x=0X8BF8);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8BFC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8C01);
	MakeName	(0X8C01,	"GetLoadSize");
	MakeCode	(x=0X8C04);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8C08);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8C0B,	"ax==UMB");
	MakeCode	(x=0X8C0D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C10);
	OpHex		(x,	1);
	MakeComm	(0X8C14,	"ds:si==element index");
	MakeComm	(0X8C16,	"ax==size");
	MakeCode	(0X8C1B);
	MakeName	(0X8C1B,	"GetSize");
	MakeCode	(x=0X8C1E);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8C22,	"ax==UMB");
	MakeCode	(x=0X8C24);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C27);
	OpHex		(x,	1);
	MakeComm	(0X8C2B,	"ds:si==element index");
	MakeComm	(0X8C2D,	"ax==size");
	MakeCode	(0X8C32);
	MakeName	(0X8C32,	"StoLoadUMB");
	MakeCode	(x=0X8C33);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8C37);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8C3D);
	MakeName	(0X8C3D,	"StoLoadSize");
	MakeCode	(x=0X8C3F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8C43,	"Put UMB# in DL and size in AX");
	MakeCode	(x=0X8C43);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8C48,	"UNSPECIFIED");
	MakeCode	(0X8C52);
	MakeName	(0X8C52,	"hideUMB");
	MakeComm	(0X8C5E,	"ZF = 1 if owner is 0");
	MakeComm	(0X8C61,	"ZF = 0");
	MakeComm	(0X8C66,	"mov al, es:[arena_signature]");
	MakeComm	(0X8C6A,	"arena_signature_end");
	MakeCode	(x=0X8C6A);
	OpChr		(x,	1);
	MakeComm	(0X8C6C,	"'Z' means this was the last MCB");
	MakeComm	(0X8C6E,	"NextMCB (macro)\nNextMCB es, ax");
	MakeCode	(0X8C7A);
	MakeCode	(0X8C7D);
	MakeName	(0X8C7D,	"isTiny");
	MakeComm	(0X8C7F,	"getdata (macro)\ngetdata al, fUmbTiny");
	MakeCode	(x=0X8C7F);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8C83);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8C8B,	"or es:[arena_owner], 0");
	MakeCode	(x=0X8C8B);
	OpHex		(x,	1);
	MakeName	(0X8C8B,	"isFreeMCB");
	MakeComm	(0X8C92,	"mov es:[arena_owner], SystemPSPOwner");
	MakeCode	(0X8C92);
	MakeName	(0X8C92,	"hideMCB");
	MakeComm	(0X8C99,	"'HIDDEN  '\nmov word ptr es:[arena_name+0], 'IH'");
	MakeCode	(x=0X8C99);
	OpHex		(x,	1);
	MakeComm	(0X8CA0,	"mov word ptr es:[arena_name+2], 'DD'");
	MakeCode	(x=0X8CA0);
	OpHex		(x,	1);
	MakeComm	(0X8CA7,	"mov word ptr es:[arena_name+4], 'NE'");
	MakeCode	(x=0X8CA7);
	OpHex		(x,	1);
	MakeComm	(0X8CAE,	"mov word ptr es:[arena_name+6], '  '");
	MakeCode	(x=0X8CAE);
	OpHex		(x,	1);
	MakeCode	(0X8CB6);
	MakeName	(0X8CB6,	"unHideMCB");
	MakeComm	(0X8CB7,	"mov es:[arena_owner], FreePSPOwner");
	MakeComm	(0X8CBE,	"mov ax, '  '");
	MakeComm	(0X8CC1,	"mov word ptr es:[arena_name+0], ax");
	MakeComm	(0X8CC5,	"mov word ptr es:[arena_name+2], ax");
	MakeComm	(0X8CC9,	"mov word ptr es:[arena_name+4], ax");
	MakeComm	(0X8CCD,	"mov word ptr es:[arena_name+6], ax");
	MakeComm	(0X8CD3,	"makes ES:0 point to the first MCB in UMB given as AL");
	MakeCode	(0X8CD3);
	MakeName	(0X8CD3,	"findumb");
	MakeComm	(0X8CD8,	"Store the to-be-found UMB number in DX");
	MakeComm	(0X8CDA,	"Returns first UMB segment in AX");
	MakeComm	(0X8CDF,	"Pretend we're on UMB 0 for now.");
	MakeComm	(0X8CE5,	"Returns with ZF set if owner is SYSTEM");
	MakeComm	(0X8CEA,	"If it _was_ SYSTEM, we're in a new UMB");
	MakeComm	(0X8CEB,	"mov al, es:[arena_signature]");
	MakeComm	(0X8CEF,	"cmp al, arena_signature_end");
	MakeComm	(0X8CF1,	"'Z' means this was the last MCB");
	MakeComm	(0X8CF3,	"NextMCB (macro)\nNextMCB es, ax");
	MakeCode	(0X8CFF);
	MakeComm	(0X8D04,	"makes ES:0 point to the largest free MCB in UMB given as AL");
	MakeCode	(0X8D04);
	MakeName	(0X8D04,	"BigFree");
	MakeComm	(0X8D0B,	"Segment address of largest free MCB");
	MakeComm	(0X8D0D,	"Size of largest free MCB");
	MakeComm	(0X8D0F,	"If we've left the MCB, we're done");
	MakeComm	(0X8D14,	"Returns with ZF set if owner is 0");
	MakeComm	(0X8D19,	"es:[arena_size]");
	MakeComm	(0X8D27,	"es:[arena_signature]");
	MakeComm	(0X8D2B,	"arena_signature_end");
	MakeComm	(0X8D2F,	"NextMCB es, ax");
	MakeCode	(0X8D3B);
	MakeComm	(0X8D41,	"(if size==0, there's nothing free)");
	MakeComm	(0X8D47,	"sets ZF if UMB in AL wasn't specified in DH/LH line");
	MakeCode	(0X8D47);
	MakeName	(0X8D47,	"isSpecified");
	MakeComm	(0X8D4C,	"getdata al, ds:UmbUsed[bx]");
	MakeCode	(x=0X8D4D);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8D51);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8D56,	"Sets ZF if al==0 (ie, if unspecified)");
	MakeComm	(0X8D5A,	"breaks an MCB into two pieces,\nthe lowest one's size==AX");
	MakeCode	(0X8D5A);
	MakeName	(0X8D5A,	"shrinkMCB");
	MakeComm	(0X8D61,	"es:[arena_size]");
	MakeComm	(0X8D66,	"MIN_SPLIT_SIZE");
	MakeCode	(x=0X8D66);
	OpDecimal	(x,	1);
	MakeComm	(0X8D69,	"{New size} vs {Current Size-20h}");
	MakeComm	(0X8D6B,	"if wanted_size > cur-20h, abort.");
	MakeComm	(0X8D6D,	"es:[arena_signature]");
	MakeComm	(0X8D72,	"es:[arena_size]");
	MakeComm	(0X8D7C,	"4Dh");
	MakeCode	(x=0X8D7C);
	OpChr		(x,	1);
	MakeComm	(0X8D85,	"move to new arena area");
	MakeComm	(0X8D8B,	"and prepare the new size");
	MakeComm	(0X8D91,	"es:[arena_owner]");
	MakeComm	(0X8D98,	"es:[arena_size]");
	MakeComm	(0X8D9F,	"es:[arena_name+0]");
	MakeComm	(0X8DAB,	"es:[arena_name+6]");
	MakeCode	(0X8DB2);
	MakeComm	(0X8DB7,	"hides as appropriate the UMB in CL");
	MakeCode	(0X8DB7);
	MakeName	(0X8DB7,	"hideUMB?");
	MakeComm	(0X8DBC,	"Returns ZF set if al's umb was NOT specified.");
	MakeComm	(0X8DC1,	"Retrieve the size of the largest");
	MakeComm	(0X8DC3,	"free element in AX; put its address in ES.");
	MakeComm	(0X8DC6,	"Oops. Errors mean skip this part.");
	MakeComm	(0X8DCB,	"Retrieve the user's specified\nminimum size for this umb (into AX).");
	MakeComm	(0X8DCE,	"Now BX==BigFree, AX==Specified Size");
	MakeComm	(0X8DD1,	"If they didn't specify one,\nskip over all this.");
	MakeComm	(0X8DD3,	"if (specified > max free)");
	MakeComm	(0X8DD7,	"Then mark that UMB as unused.");
	MakeComm	(0X8DDE,	"Returns ZF clear if user specified /S.");
	MakeCode	(0X8DDE);
	MakeComm	(0X8DE3,	"They specified /S, so shrink the MCB to AX.");
	MakeComm	(0X8DE6,	"if didn't shrink after all, skip this");
	MakeComm	(0X8DEA,	"Skip the spec check.");
	MakeCode	(0X8DEC);
	MakeComm	(0X8DEE,	"If they specified this UMB, we're done.");
	MakeComm	(0X8DF7,	"Hides everything in UMB #al");
	MakeComm	(0X8DFA,	"Did we shrink a UMB? If not, DX==0,");
	MakeComm	(0X8DFC,	"So we should leave.");
	MakeComm	(0X8DFE,	"DX==the MCB's address");
	MakeComm	(0X8E00,	"Un-hides the lower portion of that MCB.");
	MakeComm	(0X8E07,	"Marks FROZEN elements as FREE");
	MakeCode	(0X8E07);
	MakeName	(0X8E07,	"UnFreeze");
	MakeComm	(0X8E09,	"Returns with carry if err, else ES == MCB");
	MakeComm	(0X8E10,	"Returns with ZF set if MCB is FROZEN");
	MakeComm	(0X8E18,	"es:[arena_signature]");
	MakeComm	(0X8E1C,	"'Z' means this was the last MCB.");
	MakeComm	(0X8E20,	"NextMCB es, ax\nGo on forward.");
	MakeComm	(0X8E22,	"es:[arena_size]");
	MakeCode	(0X8E2C);
	MakeCode	(0X8E2F);
	MakeName	(0X8E2F,	"isFrozMCB");
	MakeComm	(0X8E30,	"es:[arena_owner]");
	MakeComm	(0X8E34,	"SystemPSPOwner");
	MakeComm	(0X8E39,	"'FROZEN  '\nmov ax, word ptr es:[arena_name]");
	MakeComm	(0X8E3D,	"4256h");
	MakeCode	(x=0X8E3D);
	OpChr		(x,	1);
	MakeComm	(0X8E46,	"5A4Fh");
	MakeCode	(x=0X8E46);
	OpChr		(x,	1);
	MakeComm	(0X8E4F,	"4E45h");
	MakeCode	(x=0X8E4F);
	OpChr		(x,	1);
	MakeComm	(0X8E58,	"2020h");
	MakeCode	(x=0X8E58);
	OpChr		(x,	1);
	MakeComm	(0X8E5D,	"mov es:[arena_owner], SystemPSPOwner");
	MakeCode	(0X8E5D);
	MakeName	(0X8E5D,	"frezMCB");
	MakeComm	(0X8E64,	"'FROZEN  '\nmov word ptr es:[arena_name+0], 'RF'");
	MakeCode	(x=0X8E64);
	OpChr		(x,	1);
	MakeCode	(x=0X8E6B);
	OpChr		(x,	1);
	MakeCode	(x=0X8E72);
	OpChr		(x,	1);
	MakeComm	(0X8E79,	"\nmov word ptr es:[arena_name+6], 2020h");
	MakeCode	(x=0X8E79);
	OpChr		(x,	1);
	MakeCode	(0X8E81);
	MakeName	(0X8E81,	"FreezeUM");
	MakeComm	(0X8E8A,	"Store the load UMB in DX, so we can skip it");
	MakeComm	(0X8E8C,	"Returns first UMB segment in AX");
	MakeComm	(0X8E93,	"Returns with ZF set if owner is SYSTEM");
	MakeComm	(0X8E98,	"If it _was_ SYSTEM, we're in a new UMB.");
	MakeComm	(0X8E9D,	"If it's not free, we can't freeze it.");
	MakeComm	(0X8EA5,	"es:[arena_signature]");
	MakeComm	(0X8EA9,	"arena_signature_end");
	MakeCode	(x=0X8EA9);
	OpChr		(x,	1);
	MakeComm	(0X8EAB,	"'Z' means this was the last MCB.");
	MakeComm	(0X8EAD,	"NextMCB es, ax\nGo on forward.");
	MakeComm	(0X8EAF,	"es:[arena_size]");
	MakeCode	(0X8EB9);
	MakeComm	(0X8EBE,	"returns with carry set if UMBs are not available,\nelse CF==false");
	MakeCode	(0X8EBE);
	MakeName	(0X8EBE,	"UmbTest");
	MakeComm	(0X8EC2,	"Link in UMBs (if not already linked)");
	MakeComm	(0X8EC5,	"Check to see if they're really linked");
	MakeComm	(0X8EC8,	"remember what we found out.");
	MakeComm	(0X8EC9,	"Unlink UMBs (if WE have linked them)");
	MakeComm	(0X8ECC,	"restore what we found out.");
	MakeComm	(0X8ED2,	"travels memory chain \nand returns carry clear if UMBs are linked");
	MakeCode	(0X8ED2);
	MakeName	(0X8ED2,	"WalkMem");
	MakeComm	(0X8ED5,	"DOS_GET_DOS_LISTS");
	MakeCode	(x=0X8ED5);
	OpHex		(x,	1);
	MakeComm	(0X8ED7,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists");
	MakeCode	(x=0X8ED7);
	OpHex		(x,	0);
	MakeComm	(0X8EDF,	"es:[arena_signature]");
	MakeComm	(0X8EE3,	"5Ah, arena_signature_end");
	MakeCode	(x=0X8EE3);
	OpChr		(x,	1);
	MakeComm	(0X8EE7,	"NextMCB es, bx");
	MakeCode	(0X8EF3);
	MakeComm	(0X8EF5,	" This sets CF if ax < 9FFF.");
	MakeCode	(0X8EFC);
	MakeName	(0X8EFC,	"hl_unlink");
	MakeCode	(x=0X8EFF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F03,	"Restore original link-state");
	MakeCode	(x=0X8F03);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8F08,	"DOS_SET_UMBLINK");
	MakeCode	(x=0X8F08);
	OpHex		(x,	1);
	MakeComm	(0X8F0B,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X8F0B);
	OpHex		(x,	0);
	MakeCode	(x=0X8F10);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F14,	"Restore original mem-alloc strategy");
	MakeCode	(x=0X8F14);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8F19,	"DOS_SET_STRATEGY");
	MakeCode	(x=0X8F19);
	OpHex		(x,	1);
	MakeComm	(0X8F1C,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X8F1C);
	OpHex		(x,	0);
	MakeCode	(0X8F1F);
	MakeName	(0X8F1F,	"LoadHigh");
	MakeComm	(0X8F21,	"parse the command line");
	MakeComm	(0X8F26,	"setup pgm's command line");
	MakeComm	(0X8F29,	"setup path for file");
	MakeComm	(0X8F2E,	"prepare upper-memory for load");
	MakeComm	(0X8F31,	"go and exec file");
	MakeComm	(0X8F34,	"print error message and recycle");
	MakeCode	(0X8F34);
	MakeName	(0X8F34,	"LhErr");
	MakeComm	(0X8F37,	"iCmdLine\nds:si points at command line");
	MakeCode	(x=0X8F37);
	OpHex		(x,	1);
	MakeName	(0X8F37,	"ParseLhCmd");
	MakeComm	(0X8F3D,	"Initialize data for ParseVar");
	MakeComm	(0X8F40,	"And parse the command line");
	MakeComm	(0X8F46,	"PV_BadUMB ; Bad UMB passed?");
	MakeCode	(x=0X8F4B);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8F50);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F53,	"PV_InvSwt ; Unrecognized switch passed?");
	MakeCode	(x=0X8F58);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F5D,	"copy filename into our buffer");
	MakeCode	(0X8F5D);
	MakeCode	(x=0X8F61);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X8F61,	"LhCopyFilename");
	MakeComm	(0X8F68,	"wildcard? (*)");
	MakeCode	(x=0X8F68);
	OpChr		(x,	1);
	MakeComm	(0X8F6C,	"wildcard? (?)");
	MakeCode	(x=0X8F6C);
	OpChr		(x,	1);
	MakeComm	(0X8F70,	"carriage return?");
	MakeComm	(0X8F74,	"'/'?");
	MakeCode	(x=0X8F74);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F7A,	"EOS?");
	MakeComm	(0X8F7E,	"Space?");
	MakeComm	(0X8F86,	"store char");
	MakeComm	(0X8F87,	"number of chars stored");
	MakeCode	(0X8F8A);
	MakeComm	(0X8F8D,	"If we didn't copy any characters,");
	MakeComm	(0X8F8F,	"they didn't give a filename.");
	MakeComm	(0X8F94,	"\"Invalid Filename\"");
	MakeCode	(x=0X8F94);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F99,	"\"Required parm missing\"");
	MakeCode	(x=0X8F99);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8F9E,	"iCmdLine");
	MakeCode	(x=0X8F9E);
	OpHex		(x,	1);
	MakeName	(0X8F9E,	"SetupCmdLine");
	MakeComm	(0X8FA3,	"just CR means count = 0");
	MakeComm	(0X8FA7,	"update count");
	MakeComm	(0X8FAD,	"carriage return?");
	MakeComm	(0X8FAF,	"no, continue storing");
	MakeComm	(0X8FB1,	"store new cmd line length");
	MakeComm	(0X8FB7,	"EXT_MSG_CLASS");
	MakeCode	(x=0X8FB7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0X8FB7,	"LhSetupErrMsg");
	MakeCode	(x=0X8FBC);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8FBF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8FC3,	"arg.argvcnt\ntotal number of arguments");
	MakeCode	(x=0X8FC3);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeName	(0X8FC3,	"SetupPath");
	MakeComm	(0X8FC7,	"SIZE Argv_ele");
	MakeCode	(x=0X8FC7);
	OpDecimal	(x,	1);
	MakeComm	(0X8FCA,	"dx:ax = size of argument lists");
	MakeComm	(0X8FCC,	"getdata (macro)\ngetdata cl, fm_argc\nCL = number of arguments to skip");
	MakeCode	(x=0X8FCD);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0X8FD1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X8FD6,	"Skip one arg, to get over \"lh\"");
	MakeComm	(0X8FDF,	"offset TRANGROUP:Arg\nCopy TO argv[0]");
	MakeCode	(x=0X8FDF);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X8FE4,	"SIZE Argv_ele\nCopy FROM argv[1]");
	MakeCode	(x=0X8FE4);
	OpDecimal	(x,	1);
	MakeComm	(0X8FE8,	"Move the argument list");
	MakeComm	(0X8FEA,	"arg.argvcnt\nFake one less argument, and");
	MakeCode	(x=0X8FEA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0X8FEE,	"there's one argument we don't copy.");
	MakeCode	(x=0X8FEE);
	OpDecimal	(x,	1);
	MakeComm	(0X8FF5,	"look in the path\n\nax = 0, no file found\nax < 4, batch file found -- cant be executed\nax = 4,8 => .com or .exe file found\n");
	MakeCode	(0X8FF5);
	MakeComm	(0X8FF8,	"any file found?");
	MakeComm	(0X8FFA,	"no, error");
	MakeComm	(0X8FFC,	"executable file?");
	MakeComm	(0X8FFF,	"no, indicate fail");
	MakeComm	(0X9003,	"offset TRANGROUP:NoExecBat_Ptr\nSetup message ptr");
	MakeCode	(x=0X9003);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0X9008,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(0X9008);
	MakeComm	(0X900B,	"setup error message");
	MakeByte	(0X9010);
	MakeName	(0X9010,	"$M_CLASS_3_STRUC");
	MakeComm	(0X9011,	"$M_COMMAND_VER (COMMAND.COM version)");
	MakeWord	(0X9011);
	MakeComm	(0X9013,	"Total number of messages");
	MakeByte	(x=0X9013);
	OpDecimal	(x,	0);
	MakeWord	(x=0X9014);
	OpDecimal	(x,	0);
	MakeName	(0X9014,	"$M_ID_3_1");
	MakeWord	(x=0X9016);
	OpDecimal	(x,	0);
	MakeWord	(x=0X9018);
	OpDecimal	(x,	0);
	MakeName	(0X9018,	"$M_ID_3_2");
	MakeWord	(x=0X901A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X901C);
	MakeArray	(x,	0X170);
	OpDecimal	(x,	0);
	MakeName	(0X901C,	"$M_ID_3_3");
	MakeComm	(0X92FC,	"Message Number = 1927");
	MakeWord	(x=0X92FC);
	OpDecimal	(x,	0);
	MakeName	(0X92FC,	"$M_ID_3_187");
	MakeComm	(0X92FE,	"Message offset from message number");
	MakeWord	(x=0X92FE);
	OpDecimal	(x,	0);
	MakeByte	(0X9300);
	MakeName	(0X9300,	"MSG_1020");
	MakeStr		(0X9301,	0X9310);
	MakeByte	(0X9310);
	MakeName	(0X9310,	"MSG_1015");
	MakeStr		(0X9311,	0X9334);
	MakeByte	(0X9334);
	MakeName	(0X9334,	"MSG_1004");
	MakeStr		(0X9335,	0X934E);
	MakeByte	(0X934E);
	MakeName	(0X934E,	"MSG_1026");
	MakeStr		(0X934F,	0X9362);
	MakeByte	(0X9362);
	MakeName	(0X9362,	"MSG_1031");
	MakeStr		(0X9363,	0X9371);
	MakeByte	(0X9371);
	MakeName	(0X9371,	"MSG_1035");
	MakeStr		(0X9372,	0X9380);
	MakeByte	(0X9380);
	MakeName	(0X9380,	"MSG_1062");
	MakeStr		(0X9381,	0X938F);
	MakeByte	(0X938F);
	MakeName	(0X938F,	"MSG_1028");
	MakeStr		(0X9390,	0X93B1);
	MakeByte	(0X93B1);
	MakeName	(0X93B1,	"MSG_1045");
	MakeStr		(0X93B2,	0X93CE);
	MakeByte	(0X93CE);
	MakeName	(0X93CE,	"MSG_1041");
	MakeStr		(0X93CF,	0X93F0);
	MakeByte	(0X93F0);
	MakeName	(0X93F0,	"MSG_1042");
	MakeStr		(0X93F1,	0X940B);
	MakeByte	(0X940B);
	MakeName	(0X940B,	"MSG_1043");
	MakeStr		(0X940C,	0X942B);
	MakeByte	(0X942B);
	MakeName	(0X942B,	"MSG_1002");
	MakeStr		(0X942C,	0X9453);
	MakeByte	(0X9453);
	MakeName	(0X9453,	"MSG_1003");
	MakeStr		(0X9454,	0X946F);
	MakeByte	(0X946F);
	MakeName	(0X946F,	"MSG_1007");
	MakeStr		(0X9470,	0X948A);
	MakeByte	(0X948A);
	MakeName	(0X948A,	"MSG_1008");
	MakeStr		(0X948B,	0X94A0);
	MakeByte	(0X94A0);
	MakeName	(0X94A0,	"MSG_1009");
	MakeStr		(0X94A1,	0X94B5);
	MakeByte	(0X94B5);
	MakeName	(0X94B5,	"MSG_1010");
	MakeStr		(0X94B6,	0X94D5);
	MakeByte	(0X94D5);
	MakeName	(0X94D5,	"MSG_1011");
	MakeStr		(0X94D6,	0X94F0);
	MakeByte	(0X94F0);
	MakeName	(0X94F0,	"MSG_1014");
	MakeStr		(0X94F1,	0X9501);
	MakeByte	(0X9501);
	MakeName	(0X9501,	"MSG_1016");
	MakeStr		(0X9502,	0X952B);
	MakeByte	(0X952B);
	MakeName	(0X952B,	"MSG_1017");
	MakeStr		(0X952C,	0X9550);
	MakeByte	(0X9550);
	MakeStr		(0X9551,	0X9564);
	MakeByte	(0X9564);
	MakeStr		(0X9565,	0X9570);
	MakeByte	(0X9570);
	MakeStr		(0X9571,	0X958E);
	MakeByte	(0X958E);
	MakeStr		(0X958F,	0X95B5);
	MakeByte	(0X95B5);
	MakeStr		(0X95B6,	0X95E1);
	MakeByte	(0X95E1);
	MakeStr		(0X95E2,	0X95F8);
	MakeByte	(0X95F8);
	MakeStr		(0X95F9,	0X9610);
	MakeByte	(0X9610);
	MakeStr		(0X9611,	0X9631);
	MakeByte	(0X9631);
	MakeStr		(0X9632,	0X9643);
	MakeByte	(0X9643);
	MakeStr		(0X9644,	0X9652);
	MakeByte	(0X9652);
	MakeStr		(0X9653,	0X966A);
	MakeByte	(0X966A);
	MakeStr		(0X966B,	0X9680);
	MakeByte	(0X9680);
	MakeStr		(0X9681,	0X9696);
	MakeByte	(0X9696);
	MakeStr		(0X9697,	0X96AB);
	MakeByte	(0X96AB);
	MakeStr		(0X96AC,	0X96BC);
	MakeByte	(0X96BC);
	MakeStr		(0X96BD,	0X96CF);
	MakeByte	(0X96CF);
	MakeStr		(0X96D0,	0X970C);
	MakeByte	(0X970C);
	MakeStr		(0X970D,	0X9721);
	MakeByte	(0X9721);
	MakeStr		(0X9722,	0X9735);
	MakeByte	(0X9735);
	MakeStr		(0X9736,	0X976C);
	MakeByte	(0X976C);
	MakeStr		(0X976D,	0X9785);
	MakeByte	(0X9785);
	MakeStr		(0X9786,	0X9797);
	MakeByte	(0X9797);
	MakeStr		(0X9798,	0X97A1);
	MakeByte	(0X97A1);
	MakeStr		(0X97A2,	0X97C0);
	MakeByte	(0X97C0);
	MakeStr		(0X97C1,	0X97D1);
	MakeByte	(0X97D1);
	MakeStr		(0X97D2,	0X97E8);
	MakeByte	(0X97E8);
	MakeStr		(0X97E9,	0X980E);
	MakeByte	(0X980E);
	MakeStr		(0X980F,	0X9835);
	MakeByte	(0X9835);
	MakeName	(0X9835,	"MSG_1055");
	MakeStr		(0X9836,	0X9843);
	MakeByte	(0X9843);
	MakeStr		(0X9844,	0X9852);
	MakeByte	(0X9852);
	MakeStr		(0X9853,	0X985F);
	MakeByte	(0X985F);
	MakeStr		(0X9860,	0X9864);
	MakeByte	(0X9864);
	MakeStr		(0X9865,	0X9868);
	MakeByte	(0X9868);
	MakeName	(0X9868,	"MSG_1061");
	MakeStr		(0X9869,	0X9882);
	MakeByte	(0X9882);
	MakeName	(0X9882,	"MSG_1063");
	MakeStr		(0X9883,	0X9885);
	MakeByte	(0X9885);
	MakeStr		(0X9886,	0X9888);
	MakeByte	(0X9888);
	MakeStr		(0X9889,	0X988B);
	MakeByte	(0X988B);
	MakeStr		(0X988C,	0X988E);
	MakeByte	(0X988E);
	MakeName	(0X988E,	"MSG_1067");
	MakeByte	(0X988F);
	MakeByte	(x=0X9890);
	OpDecimal	(x,	0);
	MakeName	(0X9890,	"MSG_1068");
	MakeStr		(0X9891,	0X989B);
	MakeByte	(0X989B);
	MakeByte	(0X989C);
	MakeArray	(0X989C,	0X3);
	MakeByte	(0X989F);
	MakeName	(0X989F,	"MSG_1070");
	MakeByte	(0X98A0);
	MakeArray	(0X98A0,	0X2);
	MakeByte	(0X98A2);
	MakeStr		(0X98A3,	0X98A5);
	MakeByte	(0X98A5);
	MakeName	(0X98A5,	"MSG_1072");
	MakeStr		(0X98A6,	0X98AF);
	MakeByte	(0X98AF);
	MakeName	(0X98AF,	"MSG_1073");
	MakeStr		(0X98B0,	0X98B9);
	MakeByte	(0X98B9);
	MakeName	(0X98B9,	"MSG_1074");
	MakeStr		(0X98BA,	0X98C3);
	MakeByte	(0X98C3);
	MakeName	(0X98C3,	"MSG_1075");
	MakeStr		(0X98C4,	0X98C9);
	MakeByte	(0X98C9);
	MakeStr		(0X98CA,	0X98CC);
	MakeByte	(0X98CC);
	MakeStr		(0X98CD,	0X98D4);
	MakeByte	(0X98D4);
	MakeName	(0X98D4,	"MSG_1078");
	MakeStr		(0X98D5,	0X98EF);
	MakeByte	(x=0X98EF);
	OpDecimal	(x,	0);
	MakeName	(0X98EF,	"MSG_1079");
	MakeStr		(0X98F0,	0X98FA);
	MakeByte	(0X98FA);
	MakeName	(0X98FA,	"MSG_1080");
	MakeStr		(0X98FB,	0X9910);
	MakeByte	(0X9910);
	MakeStr		(0X9911,	0X993B);
	MakeByte	(0X993B);
	MakeName	(0X993B,	"MSG_1082");
	MakeStr		(0X993C,	0X9943);
	MakeByte	(0X9943);
	MakeName	(0X9943,	"MSG_1083");
	MakeStr		(0X9944,	0X9946);
	MakeByte	(0X9946);
	MakeName	(0X9946,	"MSG_1084");
	MakeStr		(0X9947,	0X9956);
	MakeByte	(0X9956);
	MakeStr		(0X9957,	0X9964);
	MakeByte	(0X9964);
	MakeStr		(0X9965,	0X9972);
	MakeByte	(0X9972);
	MakeStr		(0X9973,	0X9980);
	MakeByte	(0X9980);
	MakeStr		(0X9981,	0X9995);
	MakeByte	(0X9995);
	MakeStr		(0X9996,	0X99B2);
	MakeByte	(x=0X99B2);
	OpDecimal	(x,	0);
	MakeName	(0X99B2,	"MSG_1095");
	MakeStr		(0X99B3,	0X99CF);
	MakeByte	(0X99CF);
	MakeStr		(0X99D0,	0X9A00);
	MakeByte	(x=0X9A00);
	OpDecimal	(x,	0);
	MakeName	(0X9A00,	"MSG_1097");
	MakeStr		(0X9A01,	0X9A1D);
	MakeByte	(x=0X9A1D);
	OpDecimal	(x,	0);
	MakeName	(0X9A1D,	"MSG_1098");
	MakeStr		(0X9A1E,	0X9A3A);
	MakeByte	(x=0X9A3A);
	OpDecimal	(x,	0);
	MakeStr		(0X9A3B,	0X9A50);
	MakeByte	(x=0X9A50);
	OpDecimal	(x,	0);
	MakeStr		(0X9A51,	0X9A76);
	MakeByte	(x=0X9A76);
	OpDecimal	(x,	0);
	MakeName	(0X9A76,	"MSG_1101");
	MakeStr		(0X9A77,	0X9A85);
	MakeByte	(x=0X9A85);
	OpDecimal	(x,	0);
	MakeName	(0X9A85,	"MSG_1102");
	MakeStr		(0X9A86,	0X9ABF);
	MakeByte	(x=0X9ABF);
	OpDecimal	(x,	0);
	MakeName	(0X9ABF,	"MSG_1103");
	MakeStr		(0X9AC0,	0X9ADA);
	MakeByte	(0X9ADA);
	MakeName	(0X9ADA,	"MSG_1104");
	MakeByte	(x=0X9ADB);
	OpChr		(x,	0);
	MakeName	(0X9ADB,	"_Y_es");
	MakeByte	(x=0X9ADC);
	OpChr		(x,	0);
	MakeName	(0X9ADC,	"_N_o");
	MakeByte	(x=0X9ADD);
	OpChr		(x,	0);
	MakeName	(0X9ADD,	"_A_ll");
	MakeByte	(0X9ADE);
	MakeName	(0X9ADE,	"MSG_1105");
	MakeStr		(0X9ADF,	0X9AE3);
	MakeByte	(0X9AE3);
	MakeName	(0X9AE3,	"MSG_1200");
	MakeByte	(0X9AE4);
	MakeName	(0X9AE4,	"MSG_1300");
	MakeStr		(0X9AE5,	0X9B6B);
	MakeByte	(0X9B6B);
	MakeStr		(0X9B6C,	0X9BAB);
	MakeByte	(0X9BAB);
	MakeStr		(0X9BAC,	0X9C1C);
	MakeByte	(0X9C1C);
	MakeStr		(0X9C1D,	0X9C78);
	MakeByte	(0X9C78);
	MakeStr		(0X9C79,	0X9CDB);
	MakeByte	(0X9CDB);
	MakeStr		(0X9CDC,	0X9D6D);
	MakeByte	(0X9D6D);
	MakeStr		(0X9D6E,	0X9D89);
	MakeByte	(x=0X9D89);
	OpDecimal	(x,	0);
	MakeName	(0X9D89,	"MSG_1400");
	MakeStr		(0X9D8A,	0X9E26);
	MakeByte	(0X9E26);
	MakeStr		(0X9E27,	0X9E8F);
	MakeByte	(0X9E8F);
	MakeStr		(0X9E90,	0X9F06);
	MakeByte	(x=0X9F06);
	OpDecimal	(x,	0);
	MakeName	(0X9F06,	"MSG_1403");
	MakeStr		(0X9F07,	0X9F46);
	MakeByte	(x=0X9F46);
	OpDecimal	(x,	0);
	MakeName	(0X9F46,	"MSG_1404");
	MakeStr		(0X9F47,	0X9FBB);
	MakeByte	(x=0X9FBB);
	OpDecimal	(x,	0);
	MakeName	(0X9FBB,	"MSG_1405");
	MakeStr		(0X9FBC,	0XA02E);
	MakeByte	(x=0XA02E);
	OpDecimal	(x,	0);
	MakeName	(0XA02E,	"MSG_1406");
	MakeStr		(0XA02F,	0XA071);
	MakeByte	(x=0XA071);
	OpDecimal	(x,	0);
	MakeName	(0XA071,	"MSG_1407");
	MakeStr		(0XA072,	0XA0F9);
	MakeByte	(0XA0F9);
	MakeName	(0XA0F9,	"MSG_1420");
	MakeStr		(0XA0FA,	0XA184);
	MakeByte	(x=0XA184);
	OpDecimal	(x,	0);
	MakeName	(0XA184,	"MSG_1440");
	MakeStr		(0XA185,	0XA1E2);
	MakeByte	(0XA1E2);
	MakeStr		(0XA1E3,	0XA266);
	MakeByte	(0XA266);
	MakeName	(0XA266,	"MSG_1460");
	MakeStr		(0XA267,	0XA2CB);
	MakeByte	(0XA2CB);
	MakeStr		(0XA2CC,	0XA34F);
	MakeByte	(0XA34F);
	MakeStr		(0XA350,	0XA39F);
	MakeByte	(x=0XA39F);
	OpDecimal	(x,	0);
	MakeName	(0XA39F,	"MSG_1480");
	MakeStr		(0XA3A0,	0XA429);
	MakeByte	(x=0XA429);
	OpDecimal	(x,	0);
	MakeStr		(0XA42A,	0XA448);
	MakeByte	(x=0XA448);
	OpDecimal	(x,	0);
	MakeStr		(0XA449,	0XA499);
	MakeByte	(x=0XA499);
	OpDecimal	(x,	0);
	MakeStr		(0XA49A,	0XA4F3);
	MakeByte	(x=0XA4F3);
	OpDecimal	(x,	0);
	MakeStr		(0XA4F4,	0XA572);
	MakeByte	(x=0XA572);
	OpDecimal	(x,	0);
	MakeName	(0XA572,	"MSG_1485");
	MakeStr		(0XA573,	0XA5EE);
	MakeByte	(x=0XA5EE);
	OpDecimal	(x,	0);
	MakeStr		(0XA5EF,	0XA684);
	MakeByte	(x=0XA684);
	OpDecimal	(x,	0);
	MakeName	(0XA684,	"MSG_1487");
	MakeStr		(0XA685,	0XA6CB);
	MakeByte	(x=0XA6CB);
	OpDecimal	(x,	0);
	MakeStr		(0XA6CC,	0XA74B);
	MakeByte	(x=0XA74B);
	OpDecimal	(x,	0);
	MakeStr		(0XA74C,	0XA78D);
	MakeByte	(x=0XA78D);
	OpDecimal	(x,	0);
	MakeName	(0XA78D,	"MSG_1490");
	MakeStr		(0XA78E,	0XA7A9);
	MakeByte	(x=0XA7A9);
	OpDecimal	(x,	0);
	MakeStr		(0XA7AA,	0XA7FC);
	MakeByte	(x=0XA7FC);
	OpDecimal	(x,	0);
	MakeName	(0XA7FC,	"MSG_1492");
	MakeStr		(0XA7FD,	0XA88F);
	MakeByte	(x=0XA88F);
	OpDecimal	(x,	0);
	MakeStr		(0XA890,	0XA8A6);
	MakeByte	(x=0XA8A6);
	OpDecimal	(x,	0);
	MakeName	(0XA8A6,	"MSG_1494");
	MakeStr		(0XA8A7,	0XA8C4);
	MakeByte	(0XA8C4);
	MakeName	(0XA8C4,	"MSG_1500");
	MakeStr		(0XA8C5,	0XA903);
	MakeByte	(0XA903);
	MakeName	(0XA903,	"MSG_1520");
	MakeStr		(0XA904,	0XA941);
	MakeByte	(0XA941);
	MakeName	(0XA941,	"MSG_1540");
	MakeStr		(0XA942,	0XA99F);
	MakeByte	(0XA99F);
	MakeStr		(0XA9A0,	0XAA0B);
	MakeByte	(0XAA0B);
	MakeStr		(0XAA0C,	0XAA47);
	MakeByte	(0XAA47);
	MakeName	(0XAA47,	"MSG_1560");
	MakeStr		(0XAA48,	0XAA7F);
	MakeByte	(0XAA7F);
	MakeStr		(0XAA80,	0XAAFC);
	MakeByte	(0XAAFC);
	MakeStr		(0XAAFD,	0XAB2C);
	MakeByte	(0XAB2C);
	MakeStr		(0XAB2D,	0XAB57);
	MakeByte	(0XAB57);
	MakeStr		(0XAB58,	0XAB95);
	MakeByte	(0XAB95);
	MakeName	(0XAB95,	"MSG_1565");
	MakeStr		(0XAB96,	0XABCA);
	MakeByte	(0XABCA);
	MakeStr		(0XABCB,	0XABF7);
	MakeByte	(0XABF7);
	MakeStr		(0XABF8,	0XAC71);
	MakeByte	(0XAC71);
	MakeStr		(0XAC72,	0XACBE);
	MakeByte	(0XACBE);
	MakeName	(0XACBE,	"MSG_1580");
	MakeStr		(0XACBF,	0XAD06);
	MakeByte	(0XAD06);
	MakeName	(0XAD06,	"MSG_1600");
	MakeStr		(0XAD07,	0XAD23);
	MakeByte	(0XAD23);
	MakeStr		(0XAD24,	0XAD77);
	MakeByte	(x=0XAD77);
	OpDecimal	(x,	0);
	MakeName	(0XAD77,	"MSG_1602");
	MakeStr		(0XAD78,	0XAE18);
	MakeByte	(0XAE18);
	MakeName	(0XAE18,	"MSG_1620");
	MakeStr		(0XAE19,	0XAE70);
	MakeByte	(0XAE70);
	MakeStr		(0XAE71,	0XAEF2);
	MakeByte	(0XAEF2);
	MakeName	(0XAEF2,	"MSG_1622");
	MakeStr		(0XAEF3,	0XAF3E);
	MakeByte	(x=0XAF3E);
	OpDecimal	(x,	0);
	MakeName	(0XAF3E,	"MSG_1640");
	MakeStr		(0XAF3F,	0XAF6C);
	MakeByte	(0XAF6C);
	MakeStr		(0XAF6D,	0XAFF0);
	MakeByte	(0XAFF0);
	MakeName	(0XAFF0,	"MSG_1660");
	MakeStr		(0XAFF1,	0XB037);
	MakeByte	(0XB037);
	MakeName	(0XB037,	"MSG_1680");
	MakeStr		(0XB038,	0XB05D);
	MakeByte	(x=0XB05D);
	OpDecimal	(x,	0);
	MakeName	(0XB05D,	"MSG_1700");
	MakeStr		(0XB05E,	0XB10F);
	MakeByte	(0XB10F);
	MakeName	(0XB10F,	"MSG_1720");
	MakeStr		(0XB110,	0XB162);
	MakeByte	(0XB162);
	MakeName	(0XB162,	"MSG_1740");
	MakeStr		(0XB163,	0XB1BE);
	MakeByte	(0XB1BE);
	MakeName	(0XB1BE,	"MSG_1741");
	MakeStr		(0XB1BF,	0XB231);
	MakeByte	(0XB231);
	MakeName	(0XB231,	"MSG_1760");
	MakeStr		(0XB232,	0XB27E);
	MakeByte	(0XB27E);
	MakeName	(0XB27E,	"MSG_1780");
	MakeStr		(0XB27F,	0XB2EA);
	MakeByte	(0XB2EA);
	MakeName	(0XB2EA,	"MSG_1800");
	MakeStr		(0XB2EB,	0XB338);
	MakeByte	(0XB338);
	MakeName	(0XB338,	"MSG_1801");
	MakeStr		(0XB339,	0XB390);
	MakeByte	(0XB390);
	MakeStr		(0XB391,	0XB3D8);
	MakeByte	(0XB3D8);
	MakeStr		(0XB3D9,	0XB463);
	MakeByte	(0XB463);
	MakeName	(0XB463,	"MSG_1840");
	MakeStr		(0XB464,	0XB4AE);
	MakeByte	(0XB4AE);
	MakeName	(0XB4AE,	"MSG_1860");
	MakeStr		(0XB4AF,	0XB4E5);
	MakeStr		(0XB4E5,	0XB509);
	MakeByte	(0XB509);
	MakeStr		(0XB50A,	0XB550);
	MakeByte	(0XB550);
	MakeStr		(0XB551,	0XB5CE);
	MakeByte	(0XB5CE);
	MakeName	(0XB5CE,	"MSG_1863");
	MakeStr		(0XB5CF,	0XB671);
	MakeByte	(0XB671);
	MakeStr		(0XB672,	0XB6D8);
	MakeByte	(0XB6D8);
	MakeStr		(0XB6D9,	0XB743);
	MakeByte	(0XB743);
	MakeStr		(0XB744,	0XB7AB);
	MakeByte	(0XB7AB);
	MakeName	(0XB7AB,	"MSG_1880");
	MakeStr		(0XB7AC,	0XB823);
	MakeByte	(0XB823);
	MakeStr		(0XB824,	0XB8A1);
	MakeByte	(0XB8A1);
	MakeStr		(0XB8A2,	0XB8F8);
	MakeByte	(0XB8F8);
	MakeName	(0XB8F8,	"MSG_1883");
	MakeStr		(0XB8F9,	0XB99B);
	MakeByte	(0XB99B);
	MakeName	(0XB99B,	"MSG_1900");
	MakeStr		(0XB99C,	0XB9B3);
	MakeByte	(0XB9B3);
	MakeName	(0XB9B3,	"MSG_1920");
	MakeStr		(0XB9B4,	0XB9E3);
	MakeByte	(x=0XB9E3);
	OpDecimal	(x,	0);
	MakeName	(0XB9E3,	"MSG_1921");
	MakeStr		(0XB9E4,	0XBA81);
	MakeByte	(x=0XBA81);
	OpDecimal	(x,	0);
	MakeName	(0XBA81,	"MSG_1922");
	MakeStr		(0XBA82,	0XBB38);
	MakeByte	(x=0XBB38);
	OpDecimal	(x,	0);
	MakeName	(0XBB38,	"MSG_1923");
	MakeStr		(0XBB39,	0XBBBE);
	MakeByte	(x=0XBBBE);
	OpDecimal	(x,	0);
	MakeStr		(0XBBBF,	0XBC3E);
	MakeByte	(x=0XBC3E);
	OpDecimal	(x,	0);
	MakeName	(0XBC3E,	"MSG_1925");
	MakeStr		(0XBC3F,	0XBCC2);
	MakeByte	(x=0XBCC2);
	OpDecimal	(x,	0);
	MakeStr		(0XBCC3,	0XBD1A);
	MakeByte	(x=0XBD1A);
	OpDecimal	(x,	0);
	MakeName	(0XBD1A,	"MSG_1927");
	MakeStr		(0XBD1B,	0XBD75);
	MakeCode	(0XBD75);
	MakeName	(0XBD75,	"$M_CLS_3");
	MakeCode	(x=0XBD77);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0XBD7B,	"ADD CX,$-$M_CLASS_3_STRUC");
	MakeCode	(x=0XBD7B);
	OpDecimal	(x,	1);
	MakeComm	(0XBD80,	"$M_CLASS_ID");
	MakeByte	(0XBD80);
	MakeName	(0XBD80,	"$M_CLASS_1_STRUC");
	MakeComm	(0XBD81,	"EXPECTED_VERSION (COMMAND.COM version)");
	MakeWord	(0XBD81);
	MakeComm	(0XBD83,	"Class_1_MessageCount");
	MakeByte	(0XBD83);
	MakeComm	(0XBD84,	"Message Number = 2");
	MakeWord	(0XBD84);
	MakeName	(0XBD84,	"$M_ID_1_1");
	MakeComm	(0XBD86,	"Message offset from message number");
	MakeWord	(0XBD86);
	MakeComm	(0XBD88,	"Message Number = 3");
	MakeWord	(0XBD88);
	MakeName	(0XBD88,	"$M_ID_1_2");
	MakeComm	(0XBD8A,	"Message offset from message number");
	MakeWord	(0XBD8A);
	MakeComm	(0XBD8C,	"Message Number = 8");
	MakeWord	(0XBD8C);
	MakeName	(0XBD8C,	"$M_ID_1_3");
	MakeComm	(0XBD8E,	"Message offset from message number");
	MakeWord	(0XBD8E);
	MakeComm	(0XBD90,	"Message Number = -1");
	MakeWord	(0XBD90);
	MakeName	(0XBD90,	"$M_ID_1_4");
	MakeComm	(0XBD92,	"Message offset from message number");
	MakeWord	(0XBD92);
	MakeByte	(0XBD94);
	MakeName	(0XBD94,	"EXTEND2");
	MakeStr		(0XBD95,	0XBDA3);
	MakeByte	(0XBDA3);
	MakeName	(0XBDA3,	"EXTEND3");
	MakeStr		(0XBDA4,	0XBDB2);
	MakeByte	(0XBDB2);
	MakeName	(0XBDB2,	"EXTEND8");
	MakeStr		(0XBDB3,	0XBDC6);
	MakeByte	(0XBDC6);
	MakeName	(0XBDC6,	"EXTEND999");
	MakeStr		(0XBDC7,	0XBDD8);
	MakeCode	(0XBDD8);
	MakeName	(0XBDD8,	"$M_MSGSERV_1");
	MakeCode	(x=0XBDDA);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeComm	(0XBDDE,	"$-$M_CLASS_1_STRUC");
	MakeCode	(x=0XBDDE);
	OpDecimal	(x,	1);
	MakeComm	(0XBDE2,	"$M_CLASS_ID");
	MakeByte	(0XBDE2);
	MakeName	(0XBDE2,	"$M_CLASS_2_STRUC");
	MakeComm	(0XBDE3,	"EXPECTED_VERSION (COMMAND.COM version)");
	MakeWord	(0XBDE3);
	MakeComm	(0XBDE5,	"Class_2_MessageCount");
	MakeByte	(0XBDE5);
	MakeWord	(0XBDE6);
	MakeName	(0XBDE6,	"$M_ID_2_1");
	MakeComm	(0XBDE8,	"Message Number = -1");
	MakeWord	(0XBDE8);
	MakeComm	(0XBDEA,	"Message offset from message number");
	MakeByte	(0XBDEA);
	MakeName	(0XBDEA,	"PARSE999");
	MakeStr		(0XBDEB,	0XBDF9);
	MakeCode	(0XBDF9);
	MakeName	(0XBDF9,	"$M_MSGSERV_2");
	MakeCode	(x=0XBDFB);
	OpOff		(x,	1,	0X26E0);
	OpOff		(x,	129,	0X26E0);
	MakeCode	(x=0XBDFF);
	OpDecimal	(x,	1);
	MakeByte	(0XBE03);
	MakeName	(0XBE03,	"msg_disp_class");
	MakeByte	(0XBE04);
	MakeName	(0XBE04,	"msg_cont_flag");
	MakeWord	(0XBE05);
	MakeName	(0XBE05,	"extend_buf_ptr");
	MakeByte	(0XBE07);
	MakeName	(0XBE07,	"extend_buf_sub");
	MakeByte	(x=0XBE08);
	OpDecimal	(x,	0);
	MakeByte	(0XBE09);
	MakeWord	(x=0XBE0A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE0C);
	MakeName	(0XBE0C,	"extend_buf_seg");
	MakeByte	(0XBE0E);
	MakeByte	(0XBE0F);
	MakeByte	(x=0XBE10);
	OpDecimal	(x,	0);
	MakeByte	(0XBE11);
	MakeByte	(0XBE12);
	MakeWord	(x=0XBE13);
	OpDecimal	(x,	0);
	MakeName	(0XBE13,	"RENERR_PTR");
	MakeByte	(0XBE15);
	MakeWord	(x=0XBE16);
	OpDecimal	(x,	0);
	MakeName	(0XBE16,	"BADCPMES_PTR");
	MakeByte	(x=0XBE18);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBE19);
	OpDecimal	(x,	0);
	MakeName	(0XBE19,	"NOSPACE_PTR");
	MakeByte	(0XBE1B);
	MakeWord	(x=0XBE1C);
	OpDecimal	(x,	0);
	MakeName	(0XBE1C,	"ENVERR_PTR");
	MakeByte	(0XBE1E);
	MakeWord	(x=0XBE1F);
	OpDecimal	(x,	0);
	MakeName	(0XBE1F,	"FULLDIR_PTR");
	MakeByte	(0XBE21);
	MakeWord	(x=0XBE22);
	OpDecimal	(x,	0);
	MakeName	(0XBE22,	"BADBAT_PTR");
	MakeByte	(0XBE24);
	MakeWord	(x=0XBE25);
	OpDecimal	(x,	0);
	MakeName	(0XBE25,	"NEEDBAT_PTR");
	MakeByte	(0XBE27);
	MakeWord	(x=0XBE28);
	OpDecimal	(x,	0);
	MakeName	(0XBE28,	"BADNAM_PTR");
	MakeByte	(0XBE2A);
	MakeWord	(x=0XBE2B);
	OpDecimal	(x,	0);
	MakeName	(0XBE2B,	"ACCDEN_PTR");
	MakeByte	(0XBE2D);
	MakeWord	(x=0XBE2E);
	OpDecimal	(x,	0);
	MakeName	(0XBE2E,	"OVERWR_PTR");
	MakeByte	(0XBE30);
	MakeWord	(x=0XBE31);
	OpDecimal	(x,	0);
	MakeName	(0XBE31,	"LOSTERR_PTR");
	MakeByte	(0XBE33);
	MakeWord	(x=0XBE34);
	OpDecimal	(x,	0);
	MakeName	(0XBE34,	"INORNOT_PTR");
	MakeByte	(0XBE36);
	MakeWord	(x=0XBE37);
	OpDecimal	(x,	0);
	MakeName	(0XBE37,	"copied_ptr");
	MakeByte	(0XBE39);
	MakeByte	(0XBE3A);
	MakeByte	(0XBE3B);
	MakeWord	(x=0XBE3C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE3E);
	MakeByte	(0XBE40);
	MakeByte	(0XBE41);
	MakeByte	(0XBE42);
	MakeByte	(0XBE43);
	MakeByte	(0XBE44);
	MakeWord	(x=0XBE45);
	OpDecimal	(x,	0);
	MakeName	(0XBE45,	"dirmes_ptr");
	MakeByte	(0XBE47);
	MakeComm	(0XBE48,	"parm_block_size");
	MakeByte	(0XBE48);
	MakeByte	(0XBE49);
	MakeWord	(x=0XBE4A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE4C);
	MakeByte	(0XBE4E);
	MakeComm	(0XBE4F,	"Right_Align+Unsgn_Bin_Word (binary to decimal)\n+ 40h (for 80 columns per row)");
	MakeByte	(0XBE4F);
	MakeName	(0XBE4F,	"screen_f_3");
	MakeByte	(0XBE50);
	MakeByte	(0XBE51);
	MakeByte	(0XBE52);
	MakeWord	(x=0XBE53);
	OpDecimal	(x,	0);
	MakeName	(0XBE53,	"bytmes_ptr");
	MakeByte	(0XBE55);
	MakeByte	(0XBE56);
	MakeByte	(0XBE57);
	MakeWord	(x=0XBE58);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE5A);
	MakeByte	(0XBE5C);
	MakeComm	(0XBE5D,	"Right_Align+Unsgn_Bin_DWord (long binary to decimal)\n+ 40h (for 80 columns per row)");
	MakeByte	(0XBE5D);
	MakeName	(0XBE5D,	"screen_f_6");
	MakeByte	(x=0XBE5E);
	OpDecimal	(x,	0);
	MakeName	(0XBE5E,	"screen_f_7");
	MakeByte	(x=0XBE5F);
	OpDecimal	(x,	0);
	MakeByte	(0XBE60);
	MakeWord	(x=0XBE61);
	OpDecimal	(x,	0);
	MakeName	(0XBE61,	"baddrv_ptr");
	MakeByte	(0XBE63);
	MakeWord	(x=0XBE64);
	OpDecimal	(x,	0);
	MakeName	(0XBE64,	"cp_not_set_ptr");
	MakeByte	(0XBE66);
	MakeByte	(0XBE67);
	MakeByte	(0XBE68);
	MakeWord	(x=0XBE69);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE6B);
	MakeByte	(0XBE6D);
	MakeByte	(0XBE6E);
	MakeByte	(0XBE6F);
	MakeByte	(0XBE70);
	MakeByte	(0XBE71);
	MakeWord	(x=0XBE72);
	OpDecimal	(x,	0);
	MakeName	(0XBE72,	"cp_not_all_ptr");
	MakeByte	(0XBE74);
	MakeByte	(0XBE75);
	MakeByte	(0XBE76);
	MakeWord	(x=0XBE77);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE79);
	MakeByte	(0XBE7B);
	MakeByte	(0XBE7C);
	MakeByte	(0XBE7D);
	MakeByte	(0XBE7E);
	MakeByte	(0XBE7F);
	MakeWord	(x=0XBE80);
	OpDecimal	(x,	0);
	MakeName	(0XBE80,	"cp_active_ptr");
	MakeByte	(0XBE82);
	MakeByte	(0XBE83);
	MakeByte	(0XBE84);
	MakeWord	(x=0XBE85);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBE87);
	MakeByte	(0XBE89);
	MakeByte	(0XBE8A);
	MakeByte	(0XBE8B);
	MakeByte	(0XBE8C);
	MakeByte	(0XBE8D);
	MakeWord	(x=0XBE8E);
	OpDecimal	(x,	0);
	MakeName	(0XBE8E,	"NLSFUNC_PTR");
	MakeByte	(0XBE90);
	MakeWord	(x=0XBE91);
	OpDecimal	(x,	0);
	MakeName	(0XBE91,	"INV_CODE_PAGE");
	MakeByte	(0XBE93);
	MakeWord	(x=0XBE94);
	OpDecimal	(x,	0);
	MakeName	(0XBE94,	"BADCURDRV");
	MakeByte	(0XBE96);
	MakeWord	(x=0XBE97);
	OpDecimal	(x,	0);
	MakeName	(0XBE97,	"PAUSEMES_PTR");
	MakeByte	(0XBE99);
	MakeWord	(x=0XBE9A);
	OpDecimal	(x,	0);
	MakeName	(0XBE9A,	"BADLAB_PTR");
	MakeByte	(0XBE9C);
	MakeWord	(x=0XBE9D);
	OpDecimal	(x,	0);
	MakeName	(0XBE9D,	"SYNTMES_PTR");
	MakeByte	(0XBE9F);
	MakeWord	(x=0XBEA0);
	OpDecimal	(x,	0);
	MakeName	(0XBEA0,	"BADDAT_PTR");
	MakeByte	(0XBEA2);
	MakeWord	(x=0XBEA3);
	OpDecimal	(x,	0);
	MakeName	(0XBEA3,	"CurDat_Ptr");
	MakeByte	(0XBEA5);
	MakeByte	(0XBEA6);
	MakeByte	(0XBEA7);
	MakeWord	(x=0XBEA8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBEAA);
	MakeByte	(0XBEAC);
	MakeByte	(0XBEAD);
	MakeByte	(0XBEAE);
	MakeByte	(0XBEAF);
	MakeByte	(0XBEB0);
	MakeByte	(0XBEB1);
	MakeByte	(0XBEB2);
	MakeWord	(0XBEB3);
	MakeName	(0XBEB3,	"CurDat_yr");
	MakeWord	(0XBEB5);
	MakeName	(0XBEB5,	"CurDat_mo_day");
	MakeByte	(0XBEB7);
	MakeByte	(0XBEB8);
	MakeByte	(x=0XBEB9);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBEBA);
	OpDecimal	(x,	0);
	MakeByte	(0XBEBB);
	MakeWord	(x=0XBEBC);
	OpDecimal	(x,	0);
	MakeName	(0XBEBC,	"WeekTab");
	MakeByte	(0XBEBE);
	MakeWord	(x=0XBEBF);
	OpDecimal	(x,	0);
	MakeName	(0XBEBF,	"NewDat_Ptr");
	MakeByte	(0XBEC1);
	MakeByte	(0XBEC2);
	MakeByte	(0XBEC3);
	MakeWord	(0XBEC4);
	MakeName	(0XBEC4,	"NewDat_Format");
	MakeWord	(0XBEC6);
	MakeByte	(0XBEC8);
	MakeByte	(0XBEC9);
	MakeByte	(0XBECA);
	MakeByte	(0XBECB);
	MakeByte	(0XBECC);
	MakeWord	(x=0XBECD);
	OpDecimal	(x,	0);
	MakeName	(0XBECD,	"BadTim_Ptr");
	MakeByte	(0XBECF);
	MakeWord	(x=0XBED0);
	OpDecimal	(x,	0);
	MakeName	(0XBED0,	"CurTim_Ptr");
	MakeByte	(0XBED2);
	MakeByte	(0XBED3);
	MakeByte	(0XBED4);
	MakeWord	(0XBED5);
	MakeName	(0XBED5,	"CurTim_hr_min");
	MakeWord	(0XBED7);
	MakeName	(0XBED7,	"CurTim_Sec_hn");
	MakeByte	(0XBED9);
	MakeByte	(0XBEDA);
	MakeByte	(x=0XBEDB);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBEDC);
	OpDecimal	(x,	0);
	MakeByte	(0XBEDD);
	MakeWord	(x=0XBEDE);
	OpDecimal	(x,	0);
	MakeName	(0XBEDE,	"NewTim_Ptr");
	MakeByte	(0XBEE0);
	MakeWord	(x=0XBEE1);
	OpDecimal	(x,	0);
	MakeName	(0XBEE1,	"Del_Y_N_Ptr");
	MakeByte	(0XBEE3);
	MakeWord	(x=0XBEE4);
	OpDecimal	(x,	0);
	MakeName	(0XBEE4,	"SureMes_Ptr");
	MakeByte	(0XBEE6);
	MakeWord	(x=0XBEE7);
	OpDecimal	(x,	0);
	MakeName	(0XBEE7,	"VerMes_Ptr");
	MakeByte	(0XBEE9);
	MakeByte	(x=0XBEEA);
	OpDecimal	(x,	0);
	MakeByte	(0XBEEB);
	MakeWord	(x=0XBEEC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBEEE);
	MakeByte	(0XBEF0);
	MakeByte	(0XBEF1);
	MakeByte	(0XBEF2);
	MakeByte	(0XBEF3);
	MakeComm	(0XBEF4,	"blank (pad character)");
	MakeByte	(0XBEF4);
	MakeByte	(x=0XBEF5);
	OpDecimal	(x,	0);
	MakeByte	(0XBEF6);
	MakeWord	(x=0XBEF7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBEF9);
	MakeByte	(0XBEFB);
	MakeByte	(0XBEFC);
	MakeByte	(0XBEFD);
	MakeByte	(0XBEFE);
	MakeComm	(0XBEFF,	"\"0\" (pad character)");
	MakeByte	(0XBEFF);
	MakeComm	(0XBF00,	"message number");
	MakeWord	(x=0XBF00);
	OpDecimal	(x,	0);
	MakeName	(0XBF00,	"VolMes_Ptr_2");
	MakeByte	(0XBF02);
	MakeComm	(0XBF03,	"0Bh");
	MakeByte	(x=0XBF03);
	OpDecimal	(x,	0);
	MakeByte	(0XBF04);
	MakeWord	(x=0XBF05);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBF07);
	MakeByte	(0XBF09);
	MakeComm	(0XBF0A,	"Char_field_Char (character)");
	MakeByte	(0XBF0A);
	MakeByte	(x=0XBF0B);
	OpDecimal	(x,	0);
	MakeByte	(0XBF0C);
	MakeByte	(0XBF0D);
	MakeComm	(0XBF0E,	"\"Volume in drive %1 is %2\",13,10");
	MakeWord	(x=0XBF0E);
	OpDecimal	(x,	0);
	MakeName	(0XBF0E,	"VolMes_Ptr");
	MakeComm	(0XBF10,	"number of subst");
	MakeByte	(0XBF10);
	MakeComm	(0XBF11,	"size of sublist");
	MakeByte	(x=0XBF11);
	OpDecimal	(x,	0);
	MakeComm	(0XBF12,	"reserved");
	MakeByte	(0XBF12);
	MakeComm	(0XBF13,	"offset of drive");
	MakeWord	(x=0XBF13);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0XBF15,	"segment of arg");
	MakeWord	(0XBF15);
	MakeComm	(0XBF17,	"first subst");
	MakeByte	(0XBF17);
	MakeComm	(0XBF18,	"character (Char_field_Char)");
	MakeByte	(0XBF18);
	MakeComm	(0XBF19,	"maximum width");
	MakeByte	(x=0XBF19);
	OpDecimal	(x,	0);
	MakeComm	(0XBF1A,	"minimum width");
	MakeByte	(0XBF1A);
	MakeComm	(0XBF1B,	"pad character (blank)");
	MakeByte	(0XBF1B);
	MakeComm	(0XBF1C,	"size of sublist");
	MakeByte	(x=0XBF1C);
	OpDecimal	(x,	0);
	MakeComm	(0XBF1D,	"reserved");
	MakeByte	(0XBF1D);
	MakeComm	(0XBF1E,	"offset of string");
	MakeWord	(x=0XBF1E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeComm	(0XBF20,	"segment of arg");
	MakeWord	(0XBF20);
	MakeComm	(0XBF22,	"second subst");
	MakeByte	(0XBF22);
	MakeComm	(0XBF23,	"Char_field_ASCIIZ (character string)");
	MakeByte	(0XBF23);
	MakeComm	(0XBF24,	"maximum width");
	MakeByte	(x=0XBF24);
	OpDecimal	(x,	0);
	MakeComm	(0XBF25,	"minimum width");
	MakeByte	(0XBF25);
	MakeComm	(0XBF26,	"pad character (blank)");
	MakeByte	(0XBF26);
	MakeComm	(0XBF27,	"\"Volume Serial Number is %1-%2\",13,10");
	MakeWord	(x=0XBF27);
	OpDecimal	(x,	0);
	MakeName	(0XBF27,	"VolSerMes_Ptr");
	MakeByte	(0XBF29);
	MakeComm	(0XBF2A,	"11");
	MakeByte	(x=0XBF2A);
	OpDecimal	(x,	0);
	MakeByte	(0XBF2B);
	MakeWord	(x=0XBF2C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBF2E);
	MakeByte	(0XBF30);
	MakeComm	(0XBF31,	"Right_Align+Bin_Hex_Word (binary to hex)");
	MakeByte	(0XBF31);
	MakeByte	(0XBF32);
	MakeByte	(0XBF33);
	MakeComm	(0XBF34,	"\"0\"");
	MakeByte	(0XBF34);
	MakeByte	(x=0XBF35);
	OpDecimal	(x,	0);
	MakeByte	(0XBF36);
	MakeWord	(x=0XBF37);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBF39);
	MakeByte	(0XBF3B);
	MakeByte	(0XBF3C);
	MakeByte	(0XBF3D);
	MakeByte	(0XBF3E);
	MakeByte	(0XBF3F);
	MakeWord	(x=0XBF40);
	OpDecimal	(x,	0);
	MakeName	(0XBF40,	"badcd_ptr");
	MakeByte	(0XBF42);
	MakeWord	(x=0XBF43);
	OpDecimal	(x,	0);
	MakeName	(0XBF43,	"badmkd_ptr");
	MakeByte	(0XBF45);
	MakeWord	(x=0XBF46);
	OpDecimal	(x,	0);
	MakeName	(0XBF46,	"badrmd_ptr");
	MakeByte	(0XBF48);
	MakeWord	(x=0XBF49);
	OpDecimal	(x,	0);
	MakeName	(0XBF49,	"bad_on_off_ptr");
	MakeByte	(0XBF4B);
	MakeWord	(x=0XBF4C);
	OpDecimal	(x,	0);
	MakeName	(0XBF4C,	"dirhead_ptr");
	MakeByte	(0XBF4E);
	MakeByte	(0XBF4F);
	MakeByte	(0XBF50);
	MakeWord	(x=0XBF51);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBF53);
	MakeByte	(0XBF55);
	MakeByte	(0XBF56);
	MakeByte	(x=0XBF57);
	OpDecimal	(x,	0);
	MakeByte	(0XBF58);
	MakeByte	(0XBF59);
	MakeWord	(x=0XBF5A);
	OpDecimal	(x,	0);
	MakeName	(0XBF5A,	"NULLPATH_PTR");
	MakeByte	(0XBF5C);
	MakeWord	(x=0XBF5D);
	OpDecimal	(x,	0);
	MakeName	(0XBF5D,	"BADPMES_PTR");
	MakeByte	(0XBF5F);
	MakeWord	(x=0XBF60);
	OpDecimal	(x,	0);
	MakeName	(0XBF60,	"BADDEV_PTR");
	MakeByte	(0XBF62);
	MakeWord	(x=0XBF63);
	OpDecimal	(x,	0);
	MakeName	(0XBF63,	"FORNESTMES_PTR");
	MakeByte	(0XBF65);
	MakeWord	(x=0XBF66);
	OpDecimal	(x,	0);
	MakeName	(0XBF66,	"PIPEEMES_PTR");
	MakeByte	(0XBF68);
	MakeWord	(x=0XBF69);
	OpDecimal	(x,	0);
	MakeName	(0XBF69,	"INBDEV_PTR");
	MakeByte	(0XBF6B);
	MakeWord	(x=0XBF6C);
	OpDecimal	(x,	0);
	MakeName	(0XBF6C,	"CtrlcMes_Ptr");
	MakeByte	(0XBF6E);
	MakeByte	(x=0XBF6F);
	OpDecimal	(x,	0);
	MakeByte	(0XBF70);
	MakeWord	(0XBF71);
	MakeWord	(0XBF73);
	MakeByte	(0XBF75);
	MakeByte	(0XBF76);
	MakeByte	(x=0XBF77);
	OpDecimal	(x,	0);
	MakeByte	(0XBF78);
	MakeByte	(0XBF79);
	MakeWord	(x=0XBF7A);
	OpDecimal	(x,	0);
	MakeName	(0XBF7A,	"VeriMes_Ptr");
	MakeByte	(0XBF7C);
	MakeByte	(0XBF7D);
	MakeByte	(0XBF7E);
	MakeWord	(0XBF7F);
	MakeWord	(0XBF81);
	MakeByte	(0XBF83);
	MakeByte	(0XBF84);
	MakeByte	(0XBF85);
	MakeByte	(0XBF86);
	MakeByte	(0XBF87);
	MakeWord	(x=0XBF88);
	OpDecimal	(x,	0);
	MakeName	(0XBF88,	"EchoMes_Ptr");
	MakeByte	(0XBF8A);
	MakeByte	(0XBF8B);
	MakeByte	(0XBF8C);
	MakeWord	(0XBF8D);
	MakeWord	(0XBF8F);
	MakeByte	(0XBF91);
	MakeByte	(0XBF92);
	MakeByte	(0XBF93);
	MakeByte	(0XBF94);
	MakeByte	(0XBF95);
	MakeWord	(x=0XBF96);
	OpDecimal	(x,	0);
	MakeName	(0XBF96,	"OFFMES_PTR");
	MakeByte	(x=0XBF98);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBF99);
	OpDecimal	(x,	0);
	MakeName	(0XBF99,	"ONMES_PTR");
	MakeByte	(x=0XBF9B);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBF9C);
	OpDecimal	(x,	0);
	MakeName	(0XBF9C,	"DEVWMES_PTR");
	MakeByte	(x=0XBF9E);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBF9F);
	OpDecimal	(x,	0);
	MakeName	(0XBF9F,	"INVAL_PATH_PTR");
	MakeByte	(x=0XBFA1);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBFA2);
	OpDecimal	(x,	0);
	MakeName	(0XBFA2,	"arg_buf_ptr");
	MakeByte	(0XBFA4);
	MakeByte	(0XBFA5);
	MakeByte	(0XBFA6);
	MakeWord	(x=0XBFA7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBFA9);
	MakeByte	(0XBFAB);
	MakeByte	(0XBFAC);
	MakeByte	(0XBFAD);
	MakeByte	(0XBFAE);
	MakeByte	(0XBFAF);
	MakeWord	(x=0XBFB0);
	OpDecimal	(x,	0);
	MakeName	(0XBFB0,	"file_name_ptr");
	MakeByte	(0XBFB2);
	MakeByte	(0XBFB3);
	MakeByte	(0XBFB4);
	MakeWord	(x=0XBFB5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBFB7);
	MakeByte	(0XBFB9);
	MakeByte	(0XBFBA);
	MakeByte	(0XBFBB);
	MakeByte	(0XBFBC);
	MakeByte	(0XBFBD);
	MakeWord	(x=0XBFBE);
	OpDecimal	(x,	0);
	MakeName	(0XBFBE,	"disp_file_size_ptr");
	MakeByte	(0XBFC0);
	MakeByte	(0XBFC1);
	MakeByte	(0XBFC2);
	MakeWord	(x=0XBFC3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBFC5);
	MakeByte	(0XBFC7);
	MakeByte	(0XBFC8);
	MakeName	(0XBFC8,	"screen_f_1");
	MakeByte	(x=0XBFC9);
	OpDecimal	(x,	0);
	MakeName	(0XBFC9,	"screen_f_2");
	MakeByte	(x=0XBFCA);
	OpDecimal	(x,	0);
	MakeByte	(0XBFCB);
	MakeWord	(x=0XBFCC);
	OpDecimal	(x,	0);
	MakeName	(0XBFCC,	"string_buf_ptr");
	MakeByte	(0XBFCE);
	MakeByte	(x=0XBFCF);
	OpDecimal	(x,	0);
	MakeByte	(0XBFD0);
	MakeWord	(x=0XBFD1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBFD3);
	MakeByte	(0XBFD5);
	MakeByte	(0XBFD6);
	MakeByte	(x=0XBFD7);
	OpDecimal	(x,	0);
	MakeByte	(0XBFD8);
	MakeByte	(0XBFD9);
	MakeByte	(0XBFDA);
	MakeWord	(x=0XBFDB);
	OpDecimal	(x,	0);
	MakeName	(0XBFDB,	"tab_ptr");
	MakeByte	(0XBFDD);
	MakeWord	(x=0XBFDE);
	OpDecimal	(x,	0);
	MakeName	(0XBFDE,	"dmes_ptr");
	MakeByte	(0XBFE0);
	MakeWord	(x=0XBFE1);
	OpDecimal	(x,	0);
	MakeName	(0XBFE1,	"space_4_ptr");
	MakeByte	(0XBFE3);
	MakeWord	(x=0XBFE4);
	OpDecimal	(x,	0);
	MakeName	(0XBFE4,	"dback_ptr");
	MakeByte	(0XBFE6);
	MakeWord	(x=0XBFE7);
	OpDecimal	(x,	0);
	MakeName	(0XBFE7,	"acrlf_ptr");
	MakeByte	(0XBFE9);
	MakeWord	(x=0XBFEA);
	OpDecimal	(x,	0);
	MakeName	(0XBFEA,	"usadat_Ptr");
	MakeByte	(x=0XBFEC);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBFED);
	OpDecimal	(x,	0);
	MakeName	(0XBFED,	"eurdat_ptr");
	MakeByte	(x=0XBFEF);
	OpDecimal	(x,	0);
	MakeWord	(x=0XBFF0);
	OpDecimal	(x,	0);
	MakeName	(0XBFF0,	"japdat_ptr");
	MakeByte	(0XBFF2);
	MakeWord	(x=0XBFF3);
	OpDecimal	(x,	0);
	MakeName	(0XBFF3,	"promptdat_ptr");
	MakeByte	(0XBFF5);
	MakeByte	(x=0XBFF6);
	OpDecimal	(x,	0);
	MakeByte	(0XBFF7);
	MakeWord	(x=0XBFF8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XBFFA);
	MakeByte	(0XBFFC);
	MakeByte	(0XBFFD);
	MakeByte	(0XBFFE);
	MakeByte	(0XBFFF);
	MakeByte	(0XC000);
	MakeByte	(x=0XC001);
	OpDecimal	(x,	0);
	MakeByte	(0XC002);
	MakeWord	(0XC003);
	MakeName	(0XC003,	"promptDat_yr");
	MakeWord	(0XC005);
	MakeName	(0XC005,	"promptDat_moday");
	MakeByte	(0XC007);
	MakeByte	(0XC008);
	MakeByte	(x=0XC009);
	OpDecimal	(x,	0);
	MakeByte	(0XC00A);
	MakeByte	(0XC00B);
	MakeWord	(x=0XC00C);
	OpDecimal	(x,	0);
	MakeName	(0XC00C,	"promtim_ptr");
	MakeByte	(0XC00E);
	MakeByte	(0XC00F);
	MakeByte	(0XC010);
	MakeWord	(0XC011);
	MakeName	(0XC011,	"PromTim_hr_min");
	MakeWord	(0XC013);
	MakeName	(0XC013,	"PromTim_Sec_hn");
	MakeByte	(0XC015);
	MakeByte	(0XC016);
	MakeByte	(x=0XC017);
	OpDecimal	(x,	0);
	MakeByte	(x=0XC018);
	OpDecimal	(x,	0);
	MakeByte	(0XC019);
	MakeWord	(x=0XC01A);
	OpDecimal	(x,	0);
	MakeName	(0XC01A,	"dirdattim_ptr");
	MakeByte	(0XC01C);
	MakeByte	(0XC01D);
	MakeByte	(0XC01E);
	MakeWord	(0XC01F);
	MakeName	(0XC01F,	"DirDat_Yr");
	MakeWord	(0XC021);
	MakeName	(0XC021,	"DirDat_Mo_Day");
	MakeByte	(0XC023);
	MakeByte	(0XC024);
	MakeByte	(x=0XC025);
	OpDecimal	(x,	0);
	MakeByte	(0XC026);
	MakeByte	(0XC027);
	MakeByte	(0XC028);
	MakeByte	(0XC029);
	MakeWord	(0XC02A);
	MakeName	(0XC02A,	"DirTim_Hr_Min");
	MakeWord	(0XC02C);
	MakeName	(0XC02C,	"DirTim_Sec_hn");
	MakeByte	(0XC02E);
	MakeByte	(0XC02F);
	MakeByte	(0XC030);
	MakeByte	(0XC031);
	MakeByte	(0XC032);
	MakeWord	(x=0XC033);
	OpDecimal	(x,	0);
	MakeName	(0XC033,	"MD_EXISTS_PTR");
	MakeByte	(0XC035);
	MakeWord	(x=0XC036);
	OpDecimal	(x,	0);
	MakeName	(0XC036,	"bytes_ptr");
	MakeByte	(0XC038);
	MakeByte	(0XC039);
	MakeByte	(0XC03A);
	MakeWord	(x=0XC03B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC03D);
	MakeByte	(0XC03F);
	MakeByte	(0XC040);
	MakeName	(0XC040,	"screen_f_4");
	MakeByte	(x=0XC041);
	OpDecimal	(x,	0);
	MakeName	(0XC041,	"screen_f_5");
	MakeByte	(x=0XC042);
	OpDecimal	(x,	0);
	MakeByte	(0XC043);
	MakeWord	(x=0XC044);
	OpDecimal	(x,	0);
	MakeName	(0XC044,	"total_ptr");
	MakeByte	(0XC046);
	MakeWord	(x=0XC047);
	OpDecimal	(x,	0);
	MakeName	(0XC047,	"errparsenv_ptr");
	MakeByte	(0XC049);
	MakeWord	(x=0XC04A);
	OpDecimal	(x,	0);
	MakeName	(0XC04A,	"cox_Y_quest_ptr");
	MakeByte	(0XC04C);
	MakeWord	(x=0XC04D);
	OpDecimal	(x,	0);
	MakeName	(0XC04D,	"cox_Y_answ_ptr");
	MakeByte	(0XC04F);
	MakeWord	(x=0XC050);
	OpDecimal	(x,	0);
	MakeName	(0XC050,	"dircont_ptr");
	MakeByte	(0XC052);
	MakeByte	(0XC053);
	MakeByte	(0XC054);
	MakeWord	(x=0XC055);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC057);
	MakeByte	(0XC059);
	MakeByte	(0XC05A);
	MakeByte	(0XC05B);
	MakeByte	(0XC05C);
	MakeByte	(0XC05D);
	MakeWord	(x=0XC05E);
	OpDecimal	(x,	0);
	MakeName	(0XC05E,	"dosrev_ptr");
	MakeByte	(0XC060);
	MakeWord	(0XC061);
	MakeWord	(x=0XC063);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC065);
	MakeByte	(0XC067);
	MakeByte	(0XC068);
	MakeByte	(0XC069);
	MakeByte	(0XC06A);
	MakeByte	(0XC06B);
	MakeWord	(x=0XC06C);
	OpDecimal	(x,	0);
	MakeName	(0XC06C,	"DosRom_Ptr");
	MakeByte	(x=0XC06E);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC06F);
	OpDecimal	(x,	0);
	MakeName	(0XC06F,	"DosHma_Ptr");
	MakeByte	(x=0XC071);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC072);
	OpDecimal	(x,	0);
	MakeName	(0XC072,	"DosLow_Ptr");
	MakeByte	(x=0XC074);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC075);
	OpDecimal	(x,	0);
	MakeName	(0XC075,	"NoExecBat_Ptr");
	MakeByte	(x=0XC077);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC078);
	OpDecimal	(x,	0);
	MakeName	(0XC078,	"LhInvFil_Ptr");
	MakeByte	(x=0XC07A);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC07B);
	OpDecimal	(x,	0);
	MakeName	(0XC07B,	"NoCntry_Ptr");
	MakeByte	(x=0XC07D);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC07E);
	OpDecimal	(x,	0);
	MakeName	(0XC07E,	"LhInvArg_Ptr");
	MakeByte	(x=0XC080);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC081);
	OpDecimal	(x,	0);
	MakeName	(0XC081,	"ReqParmMiss");
	MakeByte	(x=0XC083);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC084);
	OpDecimal	(x,	0);
	MakeName	(0XC084,	"LhInvSwt_Ptr");
	MakeByte	(x=0XC086);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC087);
	OpDecimal	(x,	0);
	MakeName	(0XC087,	"LhBadUMB_Ptr");
	MakeByte	(x=0XC089);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC08A);
	OpDecimal	(x,	0);
	MakeName	(0XC08A,	"DirCompRatio_Ptr");
	MakeByte	(0XC08C);
	MakeByte	(0XC08D);
	MakeByte	(0XC08E);
	MakeWord	(x=0XC08F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC091);
	MakeByte	(0XC093);
	MakeByte	(0XC094);
	MakeByte	(0XC095);
	MakeByte	(0XC096);
	MakeByte	(0XC097);
	MakeByte	(0XC098);
	MakeByte	(0XC099);
	MakeWord	(x=0XC09A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC09C);
	MakeByte	(0XC09E);
	MakeByte	(0XC09F);
	MakeByte	(0XC0A0);
	MakeByte	(0XC0A1);
	MakeByte	(0XC0A2);
	MakeWord	(x=0XC0A3);
	OpDecimal	(x,	0);
	MakeName	(0XC0A3,	"AveCompRatio_Ptr");
	MakeByte	(0XC0A5);
	MakeByte	(0XC0A6);
	MakeByte	(0XC0A7);
	MakeWord	(x=0XC0A8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC0AA);
	MakeByte	(0XC0AC);
	MakeByte	(0XC0AD);
	MakeByte	(0XC0AE);
	MakeByte	(0XC0AF);
	MakeByte	(0XC0B0);
	MakeByte	(0XC0B1);
	MakeByte	(0XC0B2);
	MakeWord	(x=0XC0B3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(0XC0B5);
	MakeByte	(0XC0B7);
	MakeByte	(0XC0B8);
	MakeByte	(0XC0B9);
	MakeByte	(0XC0BA);
	MakeByte	(0XC0BB);
	MakeStr		(0XC0BC,	0XC0C1);
	MakeName	(0XC0BC,	"PATH_TEXT");
	MakeStr		(0XC0C1,	0XC0C8);
	MakeName	(0XC0C1,	"PROMPT_TEXT");
	MakeStr		(0XC0C8,	0XC0D0);
	MakeName	(0XC0C8,	"COMSPECSTR");
	MakeStr		(0XC0D0,	0XC0D7);
	MakeName	(0XC0D0,	"DirEnvVar");
	MakeWord	(x=0XC0D7);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC0D7,	"BreakHelpMsgs");
	MakeWord	(x=0XC0DB);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0XC0DB,	"ChcpHelpMsgs");
	MakeWord	(x=0XC0E1);
	MakeArray	(x,	0X4);
	OpDecimal	(x,	0);
	MakeName	(0XC0E1,	"CdHelpMsgs");
	MakeWord	(x=0XC0E9);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC0E9,	"ClsHelpMsgs");
	MakeWord	(x=0XC0ED);
	MakeArray	(x,	0X9);
	OpDecimal	(x,	0);
	MakeName	(0XC0ED,	"CopyHelpMsgs");
	MakeWord	(x=0XC0FF);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC0FF,	"CttyHelpMsgs");
	MakeWord	(x=0XC103);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0XC103,	"DateHelpMsgs");
	MakeWord	(x=0XC109);
	MakeArray	(x,	0X4);
	OpDecimal	(x,	0);
	MakeName	(0XC109,	"DelHelpMsgs");
	MakeWord	(x=0XC111);
	MakeArray	(x,	0XD);
	OpDecimal	(x,	0);
	MakeName	(0XC111,	"DirHelpMsgs");
	MakeWord	(0XC12B);
	MakeWord	(x=0XC12D);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC12D,	"ExitHelpMsgs");
	MakeWord	(x=0XC131);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC131,	"MdHelpMsgs");
	MakeWord	(x=0XC135);
	MakeArray	(x,	0X4);
	OpDecimal	(x,	0);
	MakeName	(0XC135,	"PathHelpMsgs");
	MakeWord	(x=0XC13D);
	MakeArray	(x,	0XA);
	OpDecimal	(x,	0);
	MakeName	(0XC13D,	"PromptHelpMsgs");
	MakeWord	(x=0XC151);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC151,	"RdHelpMsgs");
	MakeWord	(x=0XC155);
	MakeArray	(x,	0X4);
	OpDecimal	(x,	0);
	MakeName	(0XC155,	"RenHelpMsgs");
	MakeWord	(x=0XC15D);
	MakeArray	(x,	0X4);
	OpDecimal	(x,	0);
	MakeName	(0XC15D,	"SetHelpMsgs");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	MakeWord	(x=0XC165);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0XC165,	"TimeHelpMsgs");
	MakeWord	(x=0XC16B);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC16B,	"TypeHelpMsgs");
	MakeWord	(x=0XC16F);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC16F,	"VerHelpMsgs");
	MakeWord	(x=0XC173);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC173,	"VerifyHelpMsgs");
	MakeWord	(x=0XC177);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC177,	"VolHelpMsgs");
	MakeWord	(x=0XC17B);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0XC17B,	"CallHelpMsgs");
	MakeWord	(x=0XC181);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC181,	"RemHelpMsgs");
	MakeWord	(x=0XC185);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC185,	"PauseHelpMsgs");
	MakeWord	(x=0XC189);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0XC189,	"EchoHelpMsgs");
	MakeWord	(x=0XC18F);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0XC18F,	"GotoHelpMsgs");
	MakeWord	(x=0XC195);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC195,	"ShiftHelpMsgs");
	MakeWord	(x=0XC199);
	MakeArray	(x,	0X8);
	OpDecimal	(x,	0);
	MakeName	(0XC199,	"IfHelpMsgs");
	MakeWord	(x=0XC1A9);
	MakeArray	(x,	0X5);
	OpDecimal	(x,	0);
	MakeName	(0XC1A9,	"ForHelpMsgs");
	MakeWord	(x=0XC1B3);
	MakeArray	(x,	0X2);
	OpDecimal	(x,	0);
	MakeName	(0XC1B3,	"TruenameHelpMsgs");
	MakeWord	(x=0XC1B7);
	MakeArray	(x,	0X9);
	OpDecimal	(x,	0);
	MakeName	(0XC1B7,	"LoadhighHelpMsgs");
	MakeByte	(0XC1C9);
	MakeName	(0XC1C9,	"CLSSTRING");
	MakeComm	(0XC1CA,	"ESC");
	MakeByte	(0XC1CA);
	MakeStr		(0XC1CB,	0XC1CE);
	MakeName	(0XC1CB,	"clsstring_2");
	MakeByte	(x=0XC1CE);
	OpChr		(x,	0);
	MakeName	(0XC1CE,	"PROMPT_TABLE");
	MakeWord	(x=0XC1CF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1D1);
	OpChr		(x,	0);
	MakeWord	(x=0XC1D2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1D4);
	OpChr		(x,	0);
	MakeWord	(x=0XC1D5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1D7);
	OpChr		(x,	0);
	MakeWord	(x=0XC1D8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1DA);
	OpChr		(x,	0);
	MakeWord	(x=0XC1DB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1DD);
	OpChr		(x,	0);
	MakeWord	(x=0XC1DE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1E0);
	OpChr		(x,	0);
	MakeWord	(x=0XC1E1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1E3);
	OpChr		(x,	0);
	MakeWord	(x=0XC1E4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1E6);
	OpChr		(x,	0);
	MakeWord	(x=0XC1E7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1E9);
	OpChr		(x,	0);
	MakeWord	(x=0XC1EA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1EC);
	OpChr		(x,	0);
	MakeWord	(x=0XC1ED);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1EF);
	OpChr		(x,	0);
	MakeWord	(x=0XC1F0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1F2);
	OpChr		(x,	0);
	MakeWord	(x=0XC1F3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC1F5);
	MakeByte	(0XC1F6);
	MakeName	(0XC1F6,	"IFTAB");
	MakeStr		(0XC1F7,	0XC1FA);
	MakeWord	(x=0XC1FA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC1FC);
	OpDecimal	(x,	0);
	MakeStr		(0XC1FD,	0XC207);
	MakeWord	(x=0XC207);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC209);
	MakeStr		(0XC20A,	0XC20F);
	MakeWord	(x=0XC20F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC211);
	MakeByte	(0XC212);
	MakeName	(0XC212,	"COMTAB");
	MakeStr		(0XC213,	0XC216);
	MakeByte	(0XC216);
	MakeWord	(x=0XC217);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC219);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC21B);
	MakeStr		(0XC21C,	0XC220);
	MakeByte	(0XC220);
	MakeWord	(x=0XC221);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC223);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC225);
	MakeStr		(0XC226,	0XC22A);
	MakeByte	(0XC22A);
	MakeWord	(x=0XC22B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC22D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC22F);
	MakeStr		(0XC230,	0XC236);
	MakeByte	(0XC236);
	MakeWord	(x=0XC237);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC239);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC23B);
	MakeStr		(0XC23C,	0XC23F);
	MakeByte	(0XC23F);
	MakeWord	(x=0XC240);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC242);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC244);
	MakeStr		(0XC245,	0XC24A);
	MakeByte	(0XC24A);
	MakeWord	(x=0XC24B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC24D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC24F);
	MakeStr		(0XC250,	0XC253);
	MakeByte	(0XC253);
	MakeWord	(x=0XC254);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC256);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC258);
	MakeStr		(0XC259,	0XC25D);
	MakeByte	(0XC25D);
	MakeWord	(x=0XC25E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC260);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC262);
	MakeStr		(0XC263,	0XC266);
	MakeByte	(0XC266);
	MakeWord	(x=0XC267);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC269);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC26B);
	MakeStr		(0XC26C,	0XC270);
	MakeByte	(0XC270);
	MakeWord	(x=0XC271);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC273);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC275);
	MakeStr		(0XC276,	0XC27B);
	MakeByte	(0XC27B);
	MakeWord	(x=0XC27C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC27E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC280);
	MakeStr		(0XC281,	0XC285);
	MakeByte	(0XC285);
	MakeWord	(x=0XC286);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC288);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC28A);
	MakeStr		(0XC28B,	0XC28F);
	MakeByte	(0XC28F);
	MakeWord	(x=0XC290);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC292);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC294);
	MakeStr		(0XC295,	0XC298);
	MakeByte	(0XC298);
	MakeWord	(x=0XC299);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC29B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC29D);
	MakeStr		(0XC29E,	0XC2A1);
	MakeByte	(0XC2A1);
	MakeWord	(x=0XC2A2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2A4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2A6);
	MakeStr		(0XC2A7,	0XC2A9);
	MakeByte	(0XC2A9);
	MakeWord	(x=0XC2AA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2AC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2AE);
	MakeStr		(0XC2AF,	0XC2B4);
	MakeByte	(0XC2B4);
	MakeWord	(x=0XC2B5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2B7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2B9);
	MakeStr		(0XC2BA,	0XC2BC);
	MakeByte	(0XC2BC);
	MakeWord	(x=0XC2BD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2BF);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2C1);
	MakeStr		(0XC2C2,	0XC2C7);
	MakeByte	(0XC2C7);
	MakeWord	(x=0XC2C8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2CA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2CC);
	MakeStr		(0XC2CD,	0XC2CF);
	MakeByte	(0XC2CF);
	MakeWord	(x=0XC2D0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2D2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2D4);
	MakeStr		(0XC2D5,	0XC2DA);
	MakeByte	(0XC2DA);
	MakeWord	(x=0XC2DB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2DD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2DF);
	MakeStr		(0XC2E0,	0XC2E5);
	MakeByte	(0XC2E5);
	MakeWord	(x=0XC2E6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2E8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2EA);
	MakeStr		(0XC2EB,	0XC2F1);
	MakeByte	(0XC2F1);
	MakeWord	(x=0XC2F2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2F4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2F6);
	MakeStr		(0XC2F7,	0XC2FA);
	MakeByte	(0XC2FA);
	MakeWord	(x=0XC2FB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC2FD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC2FF);
	MakeStr		(0XC300,	0XC306);
	MakeByte	(0XC306);
	MakeWord	(x=0XC307);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC309);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC30B);
	MakeStr		(0XC30C,	0XC310);
	MakeByte	(0XC310);
	MakeWord	(x=0XC311);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC313);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC315);
	MakeStr		(0XC316,	0XC31A);
	MakeByte	(0XC31A);
	MakeWord	(x=0XC31B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC31D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC31F);
	MakeStr		(0XC320,	0XC324);
	MakeByte	(0XC324);
	MakeWord	(x=0XC325);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC327);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC329);
	MakeStr		(0XC32A,	0XC32E);
	MakeByte	(0XC32E);
	MakeWord	(x=0XC32F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC331);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC333);
	MakeStr		(0XC334,	0XC338);
	MakeByte	(0XC338);
	MakeWord	(x=0XC339);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC33B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC33D);
	MakeStr		(0XC33E,	0XC343);
	MakeByte	(0XC343);
	MakeWord	(x=0XC344);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC346);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC348);
	MakeStr		(0XC349,	0XC34B);
	MakeByte	(0XC34B);
	MakeWord	(x=0XC34C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC34E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC350);
	MakeStr		(0XC351,	0XC354);
	MakeByte	(0XC354);
	MakeWord	(x=0XC355);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC357);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC359);
	MakeStr		(0XC35A,	0XC35D);
	MakeByte	(0XC35D);
	MakeWord	(x=0XC35E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC360);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC362);
	MakeStr		(0XC363,	0XC36B);
	MakeByte	(0XC36B);
	MakeWord	(x=0XC36C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC36E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC370);
	MakeStr		(0XC371,	0XC379);
	MakeByte	(0XC379);
	MakeWord	(x=0XC37A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC37C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC37E);
	MakeStr		(0XC37F,	0XC381);
	MakeByte	(0XC381);
	MakeWord	(x=0XC382);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC384);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC386);
	MakeStr		(0XC387,	0XC38B);
	MakeName	(0XC387,	"comext");
	MakeStr		(0XC38B,	0XC38F);
	MakeName	(0XC38B,	"exeext");
	MakeStr		(0XC38F,	0XC393);
	MakeName	(0XC38F,	"batext");
	MakeStr		(0XC393,	0XC39B);
	MakeName	(0XC393,	"switch_list");
	MakeStr		(0XC39B,	0XC3A1);
	MakeName	(0XC39B,	"AttrLtrs");
	MakeStr		(0XC3A1,	0XC3A7);
	MakeName	(0XC3A1,	"OrderLtrs");
	MakeByte	(0XC3A7);
	MakeName	(0XC3A7,	"comspec_flag");
	MakeWord	(x=0XC3A8);
	OpDecimal	(x,	0);
	MakeName	(0XC3A8,	"BATBUFLEN");
	MakeWord	(0XC3AA);
	MakeName	(0XC3AA,	"NO_VALUES");
	MakeByte	(0XC3AC);
	MakeName	(0XC3AC,	"NULL_VALUE_LIST");
	MakeWord	(0XC3AD);
	MakeName	(0XC3AD,	"FILE_REQUIRED");
	MakeWord	(0XC3AF);
	MakeWord	(x=0XC3B1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC3B3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3B5);
	MakeWord	(0XC3B6);
	MakeName	(0XC3B6,	"FILE_OPTIONAL");
	MakeWord	(0XC3B8);
	MakeWord	(x=0XC3BA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC3BC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3BE);
	MakeWord	(0XC3BF);
	MakeName	(0XC3BF,	"FILE_OPTIONAL2");
	MakeWord	(0XC3C1);
	MakeWord	(x=0XC3C3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC3C5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3C7);
	MakeWord	(0XC3C8);
	MakeName	(0XC3C8,	"SLASH_P_SWITCH");
	MakeWord	(0XC3CA);
	MakeWord	(x=0XC3CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC3CE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3D0);
	MakeStr		(0XC3D1,	0XC3D4);
	MakeName	(0XC3D1,	"SLASH_P_SYN");
	MakeWord	(x=0XC3D4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC3D4,	"PARSE_BREAK");
	MakeByte	(0XC3D6);
	MakeByte	(0XC3D7);
	MakeName	(0XC3D7,	"BREAK_PARMS");
	MakeByte	(0XC3D8);
	MakeWord	(x=0XC3D9);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3DB);
	MakeByte	(0XC3DC);
	MakeWord	(0XC3DD);
	MakeName	(0XC3DD,	"BREAK_CONTROL1");
	MakeByte	(0XC3DF);
	MakeByte	(0XC3E0);
	MakeWord	(x=0XC3E1);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC3E3);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3E5);
	MakeByte	(0XC3E6);
	MakeName	(0XC3E6,	"BREAK_VALUES");
	MakeByte	(0XC3E7);
	MakeByte	(0XC3E8);
	MakeByte	(0XC3E9);
	MakeByte	(0XC3EA);
	MakeWord	(x=0XC3EB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC3ED);
	OpChr		(x,	0);
	MakeWord	(x=0XC3EE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeStr		(0XC3F0,	0XC3F3);
	MakeName	(0XC3F0,	"BREAK_ON");
	MakeStr		(0XC3F3,	0XC3F7);
	MakeName	(0XC3F3,	"BREAK_OFF");
	MakeWord	(x=0XC3F7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC3F7,	"PARSE_CHCP");
	MakeByte	(0XC3F9);
	MakeByte	(0XC3FA);
	MakeName	(0XC3FA,	"CHCP_PARMS");
	MakeByte	(0XC3FB);
	MakeWord	(x=0XC3FC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC3FE);
	MakeByte	(0XC3FF);
	MakeWord	(0XC400);
	MakeName	(0XC400,	"CHCP_CONTROL1");
	MakeWord	(0XC402);
	MakeWord	(x=0XC404);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC406);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC408);
	MakeByte	(0XC409);
	MakeName	(0XC409,	"CHCP_VALUES");
	MakeByte	(0XC40A);
	MakeByte	(0XC40B);
	MakeDword	(x=0XC40C);
	OpDecimal	(x,	0);
	MakeDword	(x=0XC410);
	OpDecimal	(x,	0);
	MakeByte	(0XC414);
	MakeByte	(0XC415);
	MakeWord	(x=0XC416);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC416,	"PARSE_DATE");
	MakeByte	(0XC418);
	MakeByte	(0XC419);
	MakeName	(0XC419,	"DATE_PARMS");
	MakeByte	(0XC41A);
	MakeWord	(x=0XC41B);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC41D);
	MakeByte	(0XC41E);
	MakeWord	(0XC41F);
	MakeName	(0XC41F,	"DATE_CONTROL1");
	MakeWord	(0XC421);
	MakeWord	(x=0XC423);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC425);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC427);
	MakeWord	(x=0XC428);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC428,	"PARSE_TIME");
	MakeByte	(0XC42A);
	MakeByte	(0XC42B);
	MakeName	(0XC42B,	"TIME_PARMS");
	MakeByte	(0XC42C);
	MakeWord	(x=0XC42D);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC42F);
	MakeByte	(0XC430);
	MakeWord	(0XC431);
	MakeName	(0XC431,	"TIME_CONTROL1");
	MakeWord	(0XC433);
	MakeWord	(x=0XC435);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC437);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC439);
	MakeWord	(x=0XC43A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC43A,	"PARSE_VOL");
	MakeByte	(0XC43C);
	MakeByte	(0XC43D);
	MakeName	(0XC43D,	"VOL_PARMS");
	MakeByte	(0XC43E);
	MakeWord	(x=0XC43F);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC441);
	MakeByte	(0XC442);
	MakeWord	(0XC443);
	MakeName	(0XC443,	"DRIVE_CONTROL1");
	MakeWord	(0XC445);
	MakeWord	(x=0XC447);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC449);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC44B);
	MakeWord	(x=0XC44C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC44C,	"PARSE_MRDIR");
	MakeByte	(0XC44E);
	MakeByte	(0XC44F);
	MakeName	(0XC44F,	"MRDIR_PARMS");
	MakeByte	(0XC450);
	MakeWord	(x=0XC451);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC453);
	MakeByte	(0XC454);
	MakeWord	(x=0XC455);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC455,	"PARSE_CHDIR");
	MakeByte	(0XC457);
	MakeByte	(0XC458);
	MakeName	(0XC458,	"CHDIR_PARMS");
	MakeByte	(0XC459);
	MakeWord	(x=0XC45A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC45C);
	MakeByte	(0XC45D);
	MakeWord	(x=0XC45E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC45E,	"PARSE_ERASE");
	MakeByte	(0XC460);
	MakeByte	(0XC461);
	MakeName	(0XC461,	"ERASE_PARMS");
	MakeByte	(0XC462);
	MakeWord	(x=0XC463);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC465);
	MakeWord	(x=0XC466);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC468);
	MakeWord	(x=0XC469);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC469,	"PARSE_DIR");
	MakeByte	(0XC46B);
	MakeByte	(0XC46C);
	MakeName	(0XC46C,	"DIR_PARMS");
	MakeByte	(0XC46D);
	MakeWord	(x=0XC46E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC470);
	MakeWord	(x=0XC471);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC473);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC475);
	MakeWord	(0XC476);
	MakeName	(0XC476,	"DIR_SW_VALUED");
	MakeWord	(0XC478);
	MakeWord	(x=0XC47A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC47C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC47E);
	MakeStr		(0XC47F,	0XC482);
	MakeName	(0XC47F,	"DIR_SW_A");
	MakeStr		(0XC482,	0XC485);
	MakeName	(0XC482,	"DIR_SW_O");
	MakeStr		(0XC485,	0XC488);
	MakeName	(0XC485,	"DIR_SW_C");
	MakeWord	(0XC488);
	MakeName	(0XC488,	"DIR_SW_UNVALUED");
	MakeWord	(0XC48A);
	MakeWord	(x=0XC48C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC48E);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(x=0XC490);
	OpDecimal	(x,	0);
	MakeStr		(0XC491,	0XC495);
	MakeName	(0XC491,	"DIR_SW_NEG_A");
	MakeStr		(0XC495,	0XC499);
	MakeName	(0XC495,	"DIR_SW_NEG_O");
	MakeStr		(0XC499,	0XC49C);
	MakeName	(0XC499,	"DIR_SW_S");
	MakeStr		(0XC49C,	0XC4A0);
	MakeName	(0XC49C,	"DIR_SW_NEG_S");
	MakeStr		(0XC4A0,	0XC4A3);
	MakeName	(0XC4A0,	"DIR_SW_B");
	MakeStr		(0XC4A3,	0XC4A7);
	MakeName	(0XC4A3,	"DIR_SW_NEG_B");
	MakeStr		(0XC4A7,	0XC4AA);
	MakeName	(0XC4A7,	"DIR_SW_W");
	MakeStr		(0XC4AA,	0XC4AE);
	MakeName	(0XC4AA,	"DIR_SW_NEG_W");
	MakeStr		(0XC4AE,	0XC4B1);
	MakeName	(0XC4AE,	"DIR_SW_P");
	MakeStr		(0XC4B1,	0XC4B5);
	MakeName	(0XC4B1,	"DIR_SW_NEG_P");
	MakeStr		(0XC4B5,	0XC4B8);
	MakeName	(0XC4B5,	"DIR_SW_L");
	MakeStr		(0XC4B8,	0XC4BC);
	MakeName	(0XC4B8,	"DIR_SW_NEG_L");
	MakeStr		(0XC4BC,	0XC4C0);
	MakeName	(0XC4BC,	"DIR_SW_NEG_C");
	MakeWord	(x=0XC4C0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC4C0,	"Dir_Sw_Ptrs");
	MakeWord	(x=0XC4C2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC4C2,	"Dir_Sw_Ptrs_2");
	MakeWord	(x=0XC4C4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4C6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4C8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4CA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4CC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4CE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4D0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4D2);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4D4);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4D6);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4D8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4DA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4DC);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4DE);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4E0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC4E0,	"PARSE_RENAME");
	MakeByte	(0XC4E2);
	MakeByte	(0XC4E3);
	MakeName	(0XC4E3,	"RENAME_PARMS");
	MakeByte	(0XC4E4);
	MakeWord	(x=0XC4E5);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4E7);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC4E9);
	MakeByte	(0XC4EA);
	MakeWord	(x=0XC4EB);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC4EB,	"PARSE_CTTY");
	MakeByte	(0XC4EE);
	MakeName	(0XC4EE,	"CTTY_PARMS");
	MakeByte	(0XC4EF);
	MakeWord	(x=0XC4F0);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC4F2);
	MakeByte	(0XC4F3);
	MakeWord	(0XC4F4);
	MakeName	(0XC4F4,	"CTTY_CONTROL1");
	MakeWord	(0XC4F6);
	MakeWord	(x=0XC4F8);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC4FA);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC4FC);
	MakeWord	(x=0XC4FD);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC4FD,	"PARSE_VER");
	MakeByte	(0XC4FF);
	MakeByte	(0XC500);
	MakeName	(0XC500,	"VER_PARMS");
	MakeByte	(0XC501);
	MakeByte	(0XC502);
	MakeWord	(x=0XC503);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC505);
	MakeWord	(0XC506);
	MakeName	(0XC506,	"SLASH_R");
	MakeWord	(0XC508);
	MakeWord	(x=0XC50A);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeWord	(x=0XC50C);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC50E);
	MakeStr		(0XC50F,	0XC512);
	MakeName	(0XC50F,	"SLASH_R_SYN");
	MakeWord	(x=0XC512);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeName	(0XC512,	"Parse_LoadHi");
	MakeByte	(0XC514);
	MakeByte	(0XC515);
	MakeName	(0XC515,	"LoadHi_Parms");
	MakeByte	(0XC516);
	MakeWord	(x=0XC517);
	OpOff		(x,	0,	0X26E0);
	OpOff		(x,	128,	0X26E0);
	MakeByte	(0XC519);
	MakeByte	(0XC51A);
	MakeStr		(0XC51B,	0XC521);
	MakeName	(0XC51B,	"TempVarName");
	MakeStr		(0XC521,	0XC529);
	MakeName	(0XC521,	"copycmd");
	MakeStr		(0XC529,	0XC533);
	MakeName	(0XC529,	"sCVFRoot");
	MakeWord	(0XC533);
	MakeName	(0XC533,	"$P_ORDINAL");
	MakeWord	(0XC535);
	MakeName	(0XC535,	"$P_RC");
	MakeWord	(0XC537);
	MakeName	(0XC537,	"$P_SI_Save");
	MakeWord	(0XC539);
	MakeName	(0XC539,	"$P_DX");
	MakeByte	(0XC53B);
	MakeName	(0XC53B,	"$P_Terminator");
	MakeWord	(0XC53C);
	MakeName	(0XC53C,	"$P_DBCSEV_OFF");
	MakeWord	(0XC53E);
	MakeName	(0XC53E,	"$P_DBCSEV_SEG");
	MakeByte	(0XC540);
	MakeName	(0XC540,	"$P_Flags");
	MakeByte	(0XC541);
	MakeName	(0XC541,	"$P_Flags2");
	MakeWord	(0XC542);
	MakeName	(0XC542,	"$P_SaveSI_Cmpx");
	MakeWord	(0XC544);
	MakeName	(0XC544,	"$P_KEYorSW_Ptr");
	MakeWord	(0XC546);
	MakeName	(0XC546,	"$P_Save_EOB");
	MakeWord	(0XC548);
	MakeName	(0XC548,	"$P_Found_SYNONYM");
	MakeByte	(x=0XC54A);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XC54A,	"$P_STRING_BUF");
	MakeWord	(0XC5CA);
	MakeName	(0XC5CA,	"$P_ORIG_ORD");
	MakeWord	(0XC5CC);
	MakeName	(0XC5CC,	"$P_ORIG_STACK");
	MakeWord	(0XC5CE);
	MakeName	(0XC5CE,	"$P_ORIG_SI");
	MakeByte	(0XC5D0);
	MakeName	(0XC5D0,	"$P_Got_Time");
	MakeWord	(0XC5D1);
	MakeName	(0XC5D1,	"$P_Country_Info");
	MakeByte	(x=0XC5D3);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeWord	(0XC5F3);
	MakeName	(0XC5F3,	"$P_1st_Val");
	MakeWord	(0XC5F5);
	MakeName	(0XC5F5,	"$P_2nd_Val");
	MakeWord	(0XC5F7);
	MakeName	(0XC5F7,	"$P_3rd_Val");
	MakeWord	(0XC5F9);
	MakeName	(0XC5F9,	"$P_4th_Val");
	MakeByte	(0XC5FB);
	MakeName	(0XC5FB,	"$P_Char_CAP_Ptr");
	MakeDword	(0XC5FC);
	MakeByte	(0XC600);
	MakeName	(0XC600,	"$P_File_CAP_Ptr");
	MakeDword	(0XC601);
	MakeStr		(0XC605,	0XC60E);
	MakeName	(0XC605,	"$P_FileSp_Char");
	MakeByte	(0XC60E);
	MakeName	(0XC60E,	"$P_err_flag");
	MakeWord	(0XC60F);
	MakeArray	(0XC60F,	0X2);
	MakeName	(0XC60F,	"$M_RT_$M_EXT_ERR_ADDRS");
	MakeWord	(0XC613);
	MakeArray	(0XC613,	0X2);
	MakeName	(0XC613,	"$M_RT_$M_EXT_FILE");
	MakeWord	(0XC617);
	MakeArray	(0XC617,	0X2);
	MakeName	(0XC617,	"$M_RT_$M_EXT_COMMAND");
	MakeDword	(0XC61B);
	MakeWord	(0XC61F);
	MakeArray	(0XC61F,	0X2);
	MakeName	(0XC61F,	"$M_RT_$M_PARSE_COMMAND");
	MakeWord	(0XC623);
	MakeArray	(0XC623,	0X2);
	MakeName	(0XC623,	"$M_RT_$M_PARSE_ADDRS");
	MakeDword	(0XC627);
	MakeWord	(0XC62B);
	MakeArray	(0XC62B,	0X2);
	MakeName	(0XC62B,	"$M_RT_$M_CRIT_ADDRS");
	MakeWord	(0XC62F);
	MakeArray	(0XC62F,	0X2);
	MakeName	(0XC62F,	"$M_RT_$M_CRIT_COMMAND");
	MakeDword	(0XC633);
	MakeDword	(0XC637);
	MakeName	(0XC637,	"$M_RT_$M_DISK_PROC_ADDR");
	MakeWord	(0XC63B);
	MakeArray	(0XC63B,	0X6);
	MakeName	(0XC63B,	"$M_RT_$M_CLASS_ADDRS");
	MakeDword	(0XC647);
	MakeWord	(0XC64B);
	MakeArray	(0XC64B,	0X2);
	MakeName	(0XC64B,	"$M_RT_$M_DBCS_VEC");
	MakeWord	(0XC64F);
	MakeName	(0XC64F,	"$M_RT_$M_HANDLE");
	MakeByte	(0XC651);
	MakeName	(0XC651,	"$M_RT_$M_SIZE");
	MakeWord	(0XC652);
	MakeName	(0XC652,	"$M_RT_$M_CRLF");
	MakeByte	(0XC654);
	MakeName	(0XC654,	"$M_RT_$M_CLASS");
	MakeWord	(0XC655);
	MakeName	(0XC655,	"$M_RT_$M_RETURN_ADDR");
	MakeWord	(0XC657);
	MakeName	(0XC657,	"$M_RT_$M_MSG_NUM");
	MakeWord	(x=0XC659);
	OpDecimal	(x,	0);
	MakeName	(0XC659,	"$M_RT_$M_DIVISOR");
	MakeWord	(0XC65B);
	MakeName	(0XC65B,	"$M_RT_$M_TEMP_BUF");
	MakeByte	(x=0XC65D);
	MakeArray	(x,	0X5);
	OpChr		(x,	0);
	MakeName	(0XC65D,	"$M_RT_$M_CURR_SEPARA");
	MakeWord	(0XC662);
	MakeName	(0XC662,	"$M_RT_$M_THOU_SEPARA");
	MakeWord	(0XC664);
	MakeName	(0XC664,	"$M_RT_$M_DECI_SEPARA");
	MakeWord	(0XC666);
	MakeName	(0XC666,	"$M_RT_$M_DATE_SEPARA");
	MakeWord	(0XC668);
	MakeName	(0XC668,	"$M_RT_$M_TIME_SEPARA");
	MakeComm	(0XC66A,	"$");
	MakeByte	(0XC66A);
	MakeName	(0XC66A,	"$M_RT_$M_CURR_FORMAT");
	MakeComm	(0XC66B,	"$");
	MakeByte	(0XC66B);
	MakeName	(0XC66B,	"$M_RT_$M_SIG_DIGS_CU");
	MakeComm	(0XC66C,	"$");
	MakeByte	(0XC66C);
	MakeName	(0XC66C,	"$M_RT_$M_TIME_FORMAT");
	MakeComm	(0XC66D,	"24h");
	MakeByte	(x=0XC66D);
	OpChr		(x,	0);
	MakeByte	(x=0XC66E);
	MakeArray	(x,	0X2D);
	OpChr		(x,	0);
	MakeByte	(x=0XC69B);
	OpChr		(x,	0);
	MakeName	(0XC69B,	"$M_RT_$M_BUF_TERM");
	MakeStr		(0XC69C,	0XC711);
	MakeName	(0XC69C,	"MsDosVer6_CCopy");
	MakeWord	(0XC711);
	MakeName	(0XC711,	"PRINTF_HANDLE");
	MakeByte	(x=0XC713);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XC713,	"SRCXNAME");
	MakeByte	(x=0XC76A);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XC76A,	"TRGXNAME");
	MakeByte	(x=0XC7C1);
	MakeArray	(x,	0X83);
	OpDecimal	(x,	0);
	MakeName	(0XC7C1,	"UCOMBUF");
	MakeByte	(x=0XC844);
	MakeArray	(x,	0X83);
	OpDecimal	(x,	0);
	MakeName	(0XC844,	"COMBUF");
	MakeByte	(x=0XC8C7);
	MakeArray	(x,	0X46);
	OpDecimal	(x,	0);
	MakeName	(0XC8C7,	"USERDIR1");
	MakeByte	(x=0XC90D);
	MakeArray	(x,	0X83);
	OpDecimal	(x,	0);
	MakeName	(0XC90D,	"EXECPATH");
	MakeByte	(x=0XC990);
	MakeArray	(x,	0X53);
	OpDecimal	(x,	0);
	MakeName	(0XC990,	"RE_INSTR");
	MakeWord	(0XC9E3);
	MakeName	(0XC9E3,	"HEADCALL");
	MakeWord	(0XC9E5);
	MakeName	(0XC9E5,	"RESSEG");
	MakeWord	(0XC9E7);
	MakeName	(0XC9E7,	"TPA");
	MakeByte	(0XC9E9);
	MakeName	(0XC9E9,	"SWITCHAR");
	MakeByte	(0XC9EA);
	MakeName	(0XC9EA,	"DIRCHAR");
	MakeDword	(0XC9EB);
	MakeName	(0XC9EB,	"EXEC_ADDR");
	MakeDword	(0XC9EF);
	MakeName	(0XC9EF,	"RCH_ADDR");
	MakeWord	(0XC9F3);
	MakeWord	(0XC9F5);
	MakeName	(0XC9F5,	"TRAN_TPA");
	MakeByte	(0XC9F7);
	MakeName	(0XC9F7,	"CHKDRV");
	MakeByte	(0XC9F8);
	MakeName	(0XC9F8,	"IFNOTFLAG");
	MakeByte	(0XC9F9);
	MakeName	(0XC9F9,	"CURDRV");
	MakeByte	(0XC9FA);
	MakeName	(0XC9FA,	"PARM1");
	MakeByte	(0XC9FB);
	MakeName	(0XC9FB,	"PARM2");
	MakeWord	(0XC9FC);
	MakeName	(0XC9FC,	"COMSW");
	MakeWord	(0XC9FE);
	MakeName	(0XC9FE,	"ARG1S");
	MakeWord	(0XCA00);
	MakeName	(0XCA00,	"ARG2S");
	MakeWord	(0XCA02);
	MakeName	(0XCA02,	"ARGTS");
	MakeByte	(0XCA04);
	MakeName	(0XCA04,	"CFLAG");
	MakeByte	(0XCA05);
	MakeName	(0XCA05,	"SPECDRV");
	MakeWord	(0XCA06);
	MakeName	(0XCA06,	"BYTCNT");
	MakeWord	(0XCA08);
	MakeName	(0XCA08,	"savBytCnt");
	MakeWord	(0XCA0A);
	MakeName	(0XCA0A,	"NXTADD");
	MakeByte	(0XCA0C);
	MakeName	(0XCA0C,	"FRSTSRCH");
	MakeByte	(0XCA0D);
	MakeName	(0XCA0D,	"LeftOnLine");
	MakeByte	(0XCA0E);
	MakeName	(0XCA0E,	"PerLine");
	MakeWord	(0XCA0F);
	MakeName	(0XCA0F,	"LeftOnPage");
	MakeWord	(0XCA11);
	MakeName	(0XCA11,	"FileCnt");
	MakeWord	(0XCA13);
	MakeArray	(0XCA13,	0X2);
	MakeName	(0XCA13,	"FileSiz");
	MakeWord	(0XCA17);
	MakeArray	(0XCA17,	0X2);
	MakeName	(0XCA17,	"FileCntTotal");
	MakeDword	(0XCA1B);
	MakeName	(0XCA1B,	"FileSizTotal");
	MakeWord	(0XCA1F);
	MakeName	(0XCA1F,	"ccluUsed");
	MakeWord	(0XCA21);
	MakeName	(0XCA21,	"ccluUsedDir");
	MakeWord	(0XCA23);
	MakeName	(0XCA23,	"ccluUsedTotal");
	MakeWord	(0XCA25);
	MakeArray	(0XCA25,	0X2);
	MakeName	(0XCA25,	"csecUsed");
	MakeWord	(0XCA29);
	MakeArray	(0XCA29,	0X2);
	MakeName	(0XCA29,	"csecUsedDir");
	MakeDword	(0XCA2D);
	MakeName	(0XCA2D,	"csecUsedTotal");
	MakeWord	(0XCA31);
	MakeName	(0XCA31,	"fhCVF");
	MakeByte	(x=0XCA33);
	MakeArray	(x,	0X10);
	OpDecimal	(x,	0);
	MakeName	(0XCA33,	"szCVF");
	MakeByte	(x=0XCA43);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0XCA43,	"MDBPB");
	MakeByte	(0XCA83);
	MakeName	(0XCA83,	"csecPerCluster");
	MakeByte	(0XCA84);
	MakeName	(0XCA84,	"fUseHostSize");
	MakeWord	(0XCA85);
	MakeName	(0XCA85,	"cFATEntries");
	MakeWord	(0XCA87);
	MakeName	(0XCA87,	"entInBuf");
	MakeWord	(0XCA89);
	MakeName	(0XCA89,	"segFATBuf");
	MakeWord	(0XCA8B);
	MakeName	(0XCA8B,	"pbufDOSFAT");
	MakeWord	(0XCA8D);
	MakeName	(0XCA8D,	"pbufMDFAT");
	MakeByte	(x=0XCA8F);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0XCA8F,	"bufDOSFAT");
	MakeByte	(x=0XCACF);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XCACF,	"bufMDFAT");
	MakeByte	(x=0XCB4F);
	MakeArray	(x,	0X50);
	OpDecimal	(x,	0);
	MakeName	(0XCB4F,	"CHARBUF");
	MakeByte	(0XCB9F);
	MakeName	(0XCB9F,	"IDLEN");
	MakeByte	(0XCBA0);
	MakeArray	(0XCBA0,	0X8);
	MakeName	(0XCBA0,	"ID");
	MakeByte	(0XCBA8);
	MakeArray	(0XCBA8,	0X3);
	MakeName	(0XCBA8,	"COM");
	MakeByte	(x=0XCBAB);
	MakeArray	(x,	0X25);
	OpDecimal	(x,	0);
	MakeName	(0XCBAB,	"DEST");
	MakeByte	(x=0XCBD0);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0XCBD0,	"DESTNAME");
	MakeByte	(x=0XCBDB);
	MakeArray	(x,	0X43);
	OpDecimal	(x,	0);
	MakeName	(0XCBDB,	"DESTDIR");
	MakeWord	(0XCC1E);
	MakeArray	(0XCC1E,	0X4);
	MakeName	(0XCC1E,	"BWDBUF");
	MakeByte	(x=0XCC26);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0XCC26,	"DIRBUF_8");
	MakeByte	(0XCC31);
	MakeName	(0XCC31,	"DIRBUF_8_DIR_ATTR");
	MakeByte	(0XCC32);
	MakeByte	(0XCC33);
	MakeName	(0XCC33,	"DIRBUF_find_buf_attr");
	MakeByte	(0XCC34);
	MakeArray	(0XCC34,	0X8);
	MakeByte	(x=0XCC3C);
	MakeArray	(x,	0XD);
	OpDecimal	(x,	0);
	MakeName	(0XCC3C,	"DIRBUF_find_buf_pname");
	MakeByte	(x=0XCC49);
	MakeArray	(x,	0X1B);
	OpDecimal	(x,	0);
	MakeByte	(x=0XCC64);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeName	(0XCC64,	"SDIRBUF");
	MakeWord	(0XCC70);
	MakeName	(0XCC70,	"_Bits");
	MakeWord	(0XCC72);
	MakeName	(0XCC72,	"PathCnt");
	MakeWord	(0XCC74);
	MakeName	(0XCC74,	"PathPos");
	MakeWord	(0XCC76);
	MakeName	(0XCC76,	"PathSw");
	MakeByte	(0XCC78);
	MakeName	(0XCC78,	"AttrSpecified");
	MakeByte	(0XCC79);
	MakeName	(0XCC79,	"AttrSelect");
	MakeByte	(0XCC7A);
	MakeName	(0XCC7A,	"comma");
	MakeByte	(0XCC7B);
	MakeName	(0XCC7B,	"plus_comma");
	MakeByte	(0XCC7C);
	MakeName	(0XCC7C,	"DirFlag");
	MakeWord	(0XCC7D);
	MakeName	(0XCC7D,	"parse_last");
	MakeWord	(0XCC7F);
	MakeName	(0XCC7F,	"system_cpage");
	MakeByte	(x=0XCC81);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XCC81,	"Arg_Buf");
	MakeWord	(0XCD01);
	MakeName	(0XCD01,	"File_Size_Low");
	MakeWord	(0XCD03);
	MakeName	(0XCD03,	"File_Size_High");
	MakeWord	(0XCD05);
	MakeName	(0XCD05,	"string_ptr_2");
	MakeWord	(0XCD07);
	MakeName	(0XCD07,	"Copy_num");
	MakeByte	(0XCD09);
	MakeName	(0XCD09,	"cpyflag");
	MakeWord	(0XCD0A);
	MakeName	(0XCD0A,	"Dir_Num");
	MakeByte	(0XCD0C);
	MakeName	(0XCD0C,	"Dir_CRatio_1");
	MakeByte	(0XCD0D);
	MakeName	(0XCD0D,	"Dir_CRatio_2");
	MakeDword	(0XCD0E);
	MakeName	(0XCD0E,	"Bytes_Free");
	MakeWord	(0XCD12);
	MakeName	(0XCD12,	"Major_Ver_Num");
	MakeWord	(0XCD14);
	MakeName	(0XCD14,	"Minor_Ver_Num");
	MakeByte	(0XCD16);
	MakeName	(0XCD16,	"One_Char_Val");
	MakeByte	(0XCD17);
	MakeByte	(0XCD18);
	MakeName	(0XCD18,	"vol_drv");
	MakeByte	(0XCD19);
	MakeName	(0XCD19,	"ROM_CALL");
	MakeWord	(0XCD1A);
	MakeName	(0XCD1A,	"ROM_IP");
	MakeWord	(0XCD1C);
	MakeName	(0XCD1C,	"ROM_CS");
	MakeByte	(0XCD1E);
	MakeName	(0XCD1E,	"DestIsDir");
	MakeByte	(0XCD1F);
	MakeName	(0XCD1F,	"DestSiz");
	MakeWord	(0XCD20);
	MakeName	(0XCD20,	"DestTail");
	MakeByte	(0XCD22);
	MakeName	(0XCD22,	"DestInfo");
	MakeByte	(x=0XCD23);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XCD23,	"DestBuf");
	MakeWord	(0XCD7A);
	MakeName	(0XCD7A,	"EndDestBuf");
	MakeByte	(0XCD7C);
	MakeName	(0XCD7C,	"DESTISDEV");
	MakeByte	(0XCD7D);
	MakeName	(0XCD7D,	"FIRSTDEST");
	MakeByte	(0XCD7E);
	MakeName	(0XCD7E,	"MELCOPY");
	MakeWord	(0XCD7F);
	MakeName	(0XCD7F,	"MELSTART");
	MakeByte	(0XCD81);
	MakeName	(0XCD81,	"SrcIsDir");
	MakeByte	(0XCD82);
	MakeName	(0XCD82,	"SrcSiz");
	MakeWord	(0XCD83);
	MakeName	(0XCD83,	"SrcTail");
	MakeByte	(0XCD85);
	MakeName	(0XCD85,	"SrcInfo");
	MakeByte	(x=0XCD86);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XCD86,	"SrcBuf");
	MakeWord	(0XCDDD);
	MakeName	(0XCDDD,	"SRCHAND");
	MakeByte	(0XCDDF);
	MakeName	(0XCDDF,	"SRCISDEV");
	MakeByte	(x=0XCDE0);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XCDE0,	"ScanBuf");
	MakeWord	(0XCE37);
	MakeName	(0XCE37,	"SRCPT");
	MakeByte	(0XCE39);
	MakeName	(0XCE39,	"INEXACT");
	MakeByte	(0XCE3A);
	MakeName	(0XCE3A,	"NOWRITE");
	MakeByte	(0XCE3B);
	MakeName	(0XCE3B,	"BINARY");
	MakeWord	(0XCE3C);
	MakeName	(0XCE3C,	"WRITTEN");
	MakeByte	(0XCE3E);
	MakeName	(0XCE3E,	"TERMREAD");
	MakeByte	(0XCE3F);
	MakeName	(0XCE3F,	"ASCII");
	MakeByte	(0XCE40);
	MakeName	(0XCE40,	"PLUS");
	MakeByte	(0XCE41);
	MakeName	(0XCE41,	"ObjCnt");
	MakeWord	(0XCE42);
	MakeName	(0XCE42,	"CPDATE");
	MakeWord	(0XCE44);
	MakeName	(0XCE44,	"CPTIME");
	MakeWord	(0XCE46);
	MakeName	(0XCE46,	"OFilePtr_Lo");
	MakeWord	(0XCE48);
	MakeName	(0XCE48,	"OFilePtr_Hi");
	MakeByte	(0XCE4A);
	MakeName	(0XCE4A,	"OCtrlZ");
	MakeByte	(x=0XCE4B);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0XCE4B,	"cox_sublist_buff");
	MakeByte	(0XCE56);
	MakeName	(0XCE56,	"cox_y_override");
	MakeByte	(0XCE57);
	MakeName	(0XCE57,	"cox_dest_file");
	MakeByte	(0XCE58);
	MakeName	(0XCE58,	"cox_src_file");
	MakeWord	(0XCE59);
	MakeName	(0XCE59,	"BATHAND");
	MakeWord	(0XCE5B);
	MakeName	(0XCE5B,	"STARTEL");
	MakeByte	(0XCE5D);
	MakeName	(0XCE5D,	"ELCNT");
	MakeByte	(0XCE5E);
	MakeName	(0XCE5E,	"ELPOS");
	MakeByte	(0XCE5F);
	MakeName	(0XCE5F,	"SKPDEL");
	MakeByte	(x=0XCE60);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeByte	(0XCE6B);
	MakeName	(0XCE6B,	"ext_entered");
	MakeByte	(0XCE6C);
	MakeName	(0XCE6C,	"Display_Ioctl");
	MakeByte	(0XCE6D);
	MakeComm	(0XCE6E,	"crt_ioctl_ln");
	MakeWord	(x=0XCE6E);
	OpDecimal	(x,	0);
	MakeWord	(0XCE70);
	MakeByte	(0XCE72);
	MakeName	(0XCE72,	"display_mode");
	MakeByte	(0XCE73);
	MakeWord	(0XCE74);
	MakeWord	(0XCE76);
	MakeWord	(0XCE78);
	MakeWord	(0XCE7A);
	MakeName	(0XCE7A,	"display_width");
	MakeWord	(x=0XCE7C);
	OpDecimal	(x,	0);
	MakeName	(0XCE7C,	"LinPerPag");
	MakeWord	(0XCE7E);
	MakeName	(0XCE7E,	"vol_ioctl_buf");
	MakeDword	(0XCE80);
	MakeName	(0XCE80,	"vol_serial");
	MakeByte	(0XCE84);
	MakeArray	(0XCE84,	0XB);
	MakeByte	(0XCE8F);
	MakeArray	(0XCE8F,	0X8);
	MakeByte	(0XCE97);
	MakeName	(0XCE97,	"expand_star");
	MakeByte	(0XCE98);
	MakeName	(0XCE98,	"msg_flag");
	MakeWord	(0XCE99);
	MakeName	(0XCE99,	"Msg_Numb");
	MakeByte	(0XCE9B);
	MakeName	(0XCE9B,	"append_exec");
	MakeWord	(0XCE9C);
	MakeName	(0XCE9C,	"print_err_flag");
	MakeByte	(x=0XCE9E);
	MakeArray	(x,	0X16);
	OpDecimal	(x,	0);
	MakeName	(0XCE9E,	"subst_buffer");
	MakeByte	(0XCEB4);
	MakeName	(0XCEB4,	"KPARSE");
	MakeWord	(0XCEB5);
	MakeName	(0XCEB5,	"ARG_ARGV");
	MakeByte	(0XCEB7);
	MakeName	(0XCEB7,	"ARGV0_ARG_FLAGS");
	MakeWord	(0XCEB8);
	MakeName	(0XCEB8,	"ARGV0_ARGSTARTEL");
	MakeWord	(0XCEBA);
	MakeName	(0XCEBA,	"ARGV0_ARGLEN");
	MakeWord	(0XCEBC);
	MakeName	(0XCEBC,	"ARGV0_ARGSW_WORD");
	MakeWord	(0XCEBE);
	MakeName	(0XCEBE,	"ARGV0_OCOMPTR");
	MakeWord	(0XCEC0);
	MakeName	(0XCEC0,	"ARGV1_ARGPOINTER");
	MakeWord	(0XCEC2);
	MakeWord	(0XCEC4);
	MakeByte	(0XCEC6);
	MakeWord	(0XCEC7);
	MakeName	(0XCEC7,	"ARGV1_ARGSW_WORD");
	MakeWord	(0XCEC9);
	MakeWord	(0XCECB);
	MakeName	(0XCECB,	"ARGV2_ARGPOINTER");
	MakeByte	(0XCECD);
	MakeArray	(0XCECD,	0X5);
	MakeWord	(0XCED2);
	MakeName	(0XCED2,	"ARGV2_ARGSW_WORD");
	MakeByte	(x=0XCED4);
	MakeArray	(x,	0X2A1);
	OpDecimal	(x,	0);
	MakeWord	(0XD175);
	MakeName	(0XD175,	"ARG_ARGVCNT");
	MakeWord	(0XD177);
	MakeName	(0XD177,	"ARG_ARGSWINFO");
	MakeByte	(x=0XD179);
	MakeArray	(x,	0X200);
	OpDecimal	(x,	0);
	MakeName	(0XD179,	"ARG_ARGBUF");
	MakeByte	(x=0XD379);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XD379,	"ARG_ARGFORCOMBUF");
	MakeWord	(0XD3F9);
	MakeName	(0XD3F9,	"ARGBUF_PTR");
	MakeByte	(x=0XD3FB);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XD3FB,	"TPBUF");
	MakeWord	(0XD47B);
	MakeName	(0XD47B,	"LASTARG");
	MakeWord	(0XD47D);
	MakeName	(0XD47D,	"COMPTR");
	MakeByte	(x=0XD47F);
	MakeArray	(x,	0X2B);
	OpDecimal	(x,	0);
	MakeName	(0XD47F,	"FBUF");
	MakeWord	(0XD4AA);
	MakeArray	(0XD4AA,	0X3);
	MakeName	(0XD4AA,	"pathinfo");
	MakeByte	(0XD4B0);
	MakeName	(0XD4B0,	"psep_char");
	MakeByte	(0XD4B1);
	MakeName	(0XD4B1,	"search_best");
	MakeByte	(x=0XD4B2);
	MakeArray	(x,	0XD);
	OpDecimal	(x,	0);
	MakeName	(0XD4B2,	"search_best_buf");
	MakeByte	(x=0XD4BF);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0XD4BF,	"search_curdir_buf");
	MakeWord	(0XD4FF);
	MakeName	(0XD4FF,	"search_error");
	MakeWord	(0XD501);
	MakeName	(0XD501,	"IF_NOT_COUNT");
	MakeByte	(0XD503);
	MakeName	(0XD503,	"zflag");
	MakeByte	(x=0XD504);
	MakeArray	(x,	0X100);
	OpDecimal	(x,	0);
	MakeByte	(x=0XD604);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeName	(0XD604,	"STACK");
	MakeByte	(0XD624);
	MakeName	(0XD624,	"CountryPtrInfo");
	MakeDword	(0XD625);
	MakeName	(0XD625,	"CountryPtr");
	MakeDword	(0XD629);
	MakeName	(0XD629,	"OldCtrlCHandler");
	MakeWord	(0XD62D);
	MakeName	(0XD62D,	"BATBUFPOS");
	MakeByte	(x=0XD62F);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeName	(0XD62F,	"BATBUF");
	MakeWord	(0XD64F);
	MakeName	(0XD64F,	"BATBUFEND");
	MakeWord	(0XD651);
	MakeArray	(0XD651,	0X2);
	MakeName	(0XD651,	"TypeFilSiz");
	MakeByte	(0XD655);
	MakeName	(0XD655,	"PARSE1_OUTPUT");
	MakeByte	(0XD656);
	MakeName	(0XD656,	"PARSE1_CODE");
	MakeWord	(0XD657);
	MakeName	(0XD657,	"PARSE1_SYN");
	MakeDword	(0XD659);
	MakeName	(0XD659,	"PARSE1_ADDR");
	MakeByte	(0XD65D);
	MakeName	(0XD65D,	"DATE_OUTPUT");
	MakeByte	(0XD65E);
	MakeWord	(0XD65F);
	MakeWord	(0XD661);
	MakeName	(0XD661,	"DATE_YEAR");
	MakeByte	(0XD663);
	MakeName	(0XD663,	"DATE_MONTH");
	MakeByte	(0XD664);
	MakeName	(0XD664,	"DATE_DAY");
	MakeByte	(0XD665);
	MakeName	(0XD665,	"TIME_OUTPUT");
	MakeByte	(0XD666);
	MakeWord	(0XD667);
	MakeByte	(0XD669);
	MakeName	(0XD669,	"TIME_HOUR");
	MakeByte	(0XD66A);
	MakeName	(0XD66A,	"TIME_MINUTES");
	MakeByte	(0XD66B);
	MakeName	(0XD66B,	"TIME_SECONDS");
	MakeByte	(0XD66C);
	MakeName	(0XD66C,	"TIME_FRACTION");
	MakeByte	(0XD66D);
	MakeName	(0XD66D,	"DRIVE_OUTPUT");
	MakeByte	(0XD66E);
	MakeName	(0XD66E,	"DRIVE_VALUE");
	MakeWord	(0XD66F);
	MakeByte	(0XD671);
	MakeName	(0XD671,	"DRIVE_NUMBER");
	MakeByte	(0XD672);
	MakeArray	(0XD672,	0X3);
}

static Functions_0(void) {

	MakeFunction    (0X100,0X103);
	SetFunctionFlags(0X100,0x0);
	MakeFunction    (0X19C,0X1AF);
	SetFunctionFlags(0X19C,0x0);
	MakeNameEx(0X1AD, "A20_on", SN_LOCAL);
	MakeFunction    (0X1B4,0X1C7);
	SetFunctionFlags(0X1B4,0x0);
	MakeFrame(0X1B4, 0X0, 4, 0X0);
	MakeNameEx(0X1C5, "QA20_ON", SN_LOCAL);
	MakeFunction    (0X1C7,0X1D9);
	SetFunctionFlags(0X1C7,0x0);
	MakeFrame(0X1C7, 0X0, 4, 0X0);
	MakeNameEx(0X1D7, "XMMerror", SN_LOCAL);
	MakeFunction    (0X1D9,0X1FA);
	SetFunctionFlags(0X1D9,0x0);
	MakeFrame(0X1D9, 0X0, 4, 0X0);
	MakeNameEx(0X1E6, "uhu10", SN_LOCAL);
	MakeFunction    (0X1FA,0X215);
	SetFunctionFlags(0X1FA,0x0);
	MakeFunction    (0X215,0X23D);
	SetFunctionFlags(0X215,0x0);
	MakeFrame(0X215, 0X0, 4, 0X0);
	MakeNameEx(0X21E, "fus10", SN_LOCAL);
	MakeNameEx(0X226, "fus20", SN_LOCAL);
	MakeNameEx(0X23A, "fusX", SN_LOCAL);
	MakeFunction    (0X23D,0X26A);
	SetFunctionFlags(0X23D,0x0);
	MakeFrame(0X23D, 0X0, 2, 0X0);
	MakeNameEx(0X268, "ihm_x", SN_LOCAL);
	MakeFunction    (0X26A,0X285);
	SetFunctionFlags(0X26A,0x0);
	MakeFunction    (0X285,0X29D);
	SetFunctionFlags(0X285,0x0);
	MakeFrame(0X285, 0X0, 6, 0X0);
	MakeNameEx(0X298, "xhu_e", SN_LOCAL);
	MakeNameEx(0X299, "xhu_x", SN_LOCAL);
	MakeFunction    (0X29D,0X2AF);
	SetFunctionFlags(0X29D,0x0);
	MakeNameEx(0X2AE, "lumbX", SN_LOCAL);
	MakeFunction    (0XF4A,0XF5B);
	SetFunctionFlags(0XF4A,0x0);
	MakeFrame(0XF4A, 0X0, 2, 0X0);
	MakeNameEx(0XF59, "NoPipePop", SN_LOCAL);
	MakeFunction    (0X1020,0X1028);
	SetFunctionFlags(0X1020,0x0);
	MakeFunction    (0X10FB,0X1112);
	SetFunctionFlags(0X10FB,0x0);
	MakeFrame(0X10FB, 0X0, 4, 0X0);
	MakeNameEx(0X110A, "rcCont", SN_LOCAL);
	MakeNameEx(0X110F, "ResRegs", SN_LOCAL);
	MakeFunction    (0X111A,0X1163);
	SetFunctionFlags(0X111A,0x0);
	MakeNameEx(0X1133, "Chk1", SN_LOCAL);
	MakeNameEx(0X1140, "ChkOtherHand", SN_LOCAL);
	MakeNameEx(0X1146, "CloseLoop", SN_LOCAL);
	MakeNameEx(0X1162, "Append_Fix_End", SN_LOCAL);
	MakeFunction    (0X1163,0X1186);
	SetFunctionFlags(0X1163,0x0);
	MakeFrame(0X1163, 0X0, 8, 0X0);
	MakeFunction    (0X118C,0X11A2);
	SetFunctionFlags(0X118C,0x0);
	MakeFrame(0X118C, 0X0, 6, 0X0);
	MakeFunction    (0X11A8,0X11DF);
	SetFunctionFlags(0X11A8,0x0);
	MakeNameEx(0X11A2, "Hopeless", SN_LOCAL);
	MakeNameEx(0X11BC, "GetComDsk4", SN_LOCAL);
	MakeNameEx(0X11CC, "Users_Drive", SN_LOCAL);
	MakeFunction    (0X11DF,0X11EA);
	SetFunctionFlags(0X11DF,0x0);
	MakeFunction    (0X11EA,0X1231);
	SetFunctionFlags(0X11EA,0x0);
	MakeNameEx(0X1200, "TryDoOpen", SN_LOCAL);
	MakeNameEx(0X1205, "ReadCom", SN_LOCAL);
	MakeNameEx(0X1223, "WrongCom1", SN_LOCAL);
	MakeFunction    (0X1231,0X1239);
	SetFunctionFlags(0X1231,0x0);
	MakeFunction    (0X1239,0X1253);
	SetFunctionFlags(0X1239,0x0);
	MakeFrame(0X1239, 0X0, 2, 0X0);
	MakeNameEx(0X1249, "Chk", SN_LOCAL);
	MakeFunction    (0X1253,0X1272);
	SetFunctionFlags(0X1253,0x0);
	MakeFrame(0X1253, 0X0, 0, 0X0);
	MakeFunction    (0X1279,0X1295);
	SetFunctionFlags(0X1279,0x0);
	MakeNameEx(0X1294, "aeRet", SN_LOCAL);
	MakeFunction    (0X14E1,0X14E4);
	SetFunctionFlags(0X14E1,0x0);
	MakeFunction    (0X14E4,0X14FD);
	SetFunctionFlags(0X14E4,0x0);
	MakeFrame(0X14E4, 0X0, 10, 0X0);
	MakeNameEx(0X14F7, "rpRet", SN_LOCAL);
	MakeFunction    (0X14FD,0X1510);
	SetFunctionFlags(0X14FD,0x0);
	MakeFrame(0X14FD, 0X0, 2, 0X0);
	MakeFunction    (0X1510,0X152F);
	SetFunctionFlags(0X1510,0x0);
	MakeNameEx(0X1526, "rdOutChar", SN_LOCAL);
	MakeNameEx(0X152C, "rdCharDone", SN_LOCAL);
	MakeFunction    (0X152F,0X157F);
	SetFunctionFlags(0X152F,0x0);
	MakeFrame(0X152F, 0X0, 4, 0X0);
	MakeNameEx(0X1549, "smDigit", SN_LOCAL);
	MakeNameEx(0X155C, "smDigit09", SN_LOCAL);
	MakeNameEx(0X1567, "smChar", SN_LOCAL);
	MakeNameEx(0X156F, "smStr", SN_LOCAL);
	MakeNameEx(0X157C, "smRet", SN_LOCAL);
	MakeFunction    (0X157F,0X1588);
	SetFunctionFlags(0X157F,0x0);
	MakeFrame(0X157F, 0X0, 2, 0X0);
	MakeFunction    (0X1644,0X166A);
	SetFunctionFlags(0X1644,0x2);
	MakeFunction    (0X1D1F,0X1D28);
	SetFunctionFlags(0X1D1F,0x0);
	MakeNameEx(0X1D21, "NxtChar", SN_LOCAL);
	MakeFunction    (0X1D28,0X1D44);
	SetFunctionFlags(0X1D28,0x0);
	MakeNameEx(0X1D43, "setup_end", SN_LOCAL);
	MakeFunction    (0X1D44,0X1D55);
	SetFunctionFlags(0X1D44,0x0);
	MakeFrame(0X1D44, 0X0, 2, 0X0);
	MakeFunction    (0X1D55,0X1D5C);
	SetFunctionFlags(0X1D55,0x0);
	MakeFunction    (0X1D5C,0X1D88);
	SetFunctionFlags(0X1D5C,0x0);
	MakeNameEx(0X1D66, "ifind1", SN_LOCAL);
	MakeNameEx(0X1D69, "ifind11", SN_LOCAL);
	MakeNameEx(0X1D76, "ifind12", SN_LOCAL);
	MakeFunction    (0X1D88,0X1D9C);
	SetFunctionFlags(0X1D88,0x0);
	MakeFrame(0X1D88, 0X0, 2, 0X0);
	MakeNameEx(0X1D96, "Icountx", SN_LOCAL);
	MakeFunction    (0X1D9C,0X1DA1);
	SetFunctionFlags(0X1D9C,0x0);
	MakeFunction    (0X1DA1,0X1DA9);
	SetFunctionFlags(0X1DA1,0x0);
	MakeFunction    (0X1DA9,0X1DCC);
	SetFunctionFlags(0X1DA9,0x0);
	MakeNameEx(0X1DBD, "other_fucase", SN_LOCAL);
	MakeNameEx(0X1DCB, "iupconv_end", SN_LOCAL);
	MakeFunction    (0X1DD9,0X1E3C);
	SetFunctionFlags(0X1DD9,0x0);
	MakeFrame(0X1DD9, 0X0, 12, 0X0);
	MakeNameEx(0X1E18, "no_msg_hook", SN_LOCAL);
	MakeNameEx(0X1E28, "no_permcom", SN_LOCAL);
	MakeNameEx(0X1E35, "permcom_end", SN_LOCAL);
	MakeFunction    (0X1E3C,0X1E82);
	SetFunctionFlags(0X1E3C,0x0);
	MakeNameEx(0X1E46, "chParse", SN_LOCAL);
	MakeNameEx(0X1E56, "chWhich", SN_LOCAL);
	MakeNameEx(0X1E70, "chHelp", SN_LOCAL);
	MakeNameEx(0X1E73, "chHelpNext", SN_LOCAL);
	MakeNameEx(0X1E7F, "chHelpDone", SN_LOCAL);
	MakeNameEx(0X1E81, "chRet", SN_LOCAL);
	MakeFunction    (0X1E82,0X1ED1);
	SetFunctionFlags(0X1E82,0x0);
	MakeFrame(0X1E82, 0X0, 2, 0X0);
	MakeNameEx(0X1E97, "calc_res", SN_LOCAL);
	MakeNameEx(0X1EB8, "not_first", SN_LOCAL);
	MakeNameEx(0X1ECB, "oldver", SN_LOCAL);
	MakeFunction    (0X1ED1,0X1F3F);
	SetFunctionFlags(0X1ED1,0x0);
	MakeFrame(0X1ED1, 0X0, 4, 0X0);
	MakeNameEx(0X1EE1, "load_low", SN_LOCAL);
	MakeNameEx(0X1EF0, "move_high", SN_LOCAL);
	MakeNameEx(0X1F24, "no_move", SN_LOCAL);
	MakeNameEx(0X1F2E, "setup_move", SN_LOCAL);
	MakeNameEx(0X1F39, "patch_up", SN_LOCAL);
	MakeFunction    (0X1F3F,0X20AB);
	SetFunctionFlags(0X1F3F,0x0);
	MakeFrame(0X1F3F, 0X0, 10, 0X0);
	MakeNameEx(0XF76, "Stall", SN_LOCAL);
	MakeNameEx(0XF78, "FatalRet", SN_LOCAL);
	MakeNameEx(0XF9C, "Ret_2e", SN_LOCAL);
	MakeNameEx(0XFBE, "GotECode", SN_LOCAL);
	MakeNameEx(0X1F52, "alloc_cont", SN_LOCAL);
	MakeNameEx(0X1F68, "comp_path", SN_LOCAL);
	MakeNameEx(0X1F7D, "got_path", SN_LOCAL);
	MakeNameEx(0X1F82, "_find_prompt", SN_LOCAL);
	MakeNameEx(0X1F84, "comp_prompt", SN_LOCAL);
	MakeNameEx(0X1F99, "got_prompt", SN_LOCAL);
	MakeNameEx(0X1F9E, "find_comspec", SN_LOCAL);
	MakeNameEx(0X1FA0, "comp_comspec", SN_LOCAL);
	MakeNameEx(0X1FB5, "got_comspec", SN_LOCAL);
	MakeNameEx(0X1FBE, "comp_envend", SN_LOCAL);
	MakeNameEx(0X1FC6, "got_envend", SN_LOCAL);
	MakeNameEx(0X1FD8, "alloc_new", SN_LOCAL);
	MakeNameEx(0X1FDC, "alloc_seg", SN_LOCAL);
	MakeNameEx(0X1FF2, "init_ok", SN_LOCAL);
	MakeNameEx(0X200A, "copy_path", SN_LOCAL);
	MakeNameEx(0X205A, "init_setpath", SN_LOCAL);
	MakeNameEx(0X2067, "init_prompt", SN_LOCAL);
	MakeNameEx(0X2082, "init_comspec", SN_LOCAL);
	MakeNameEx(0X2097, "init_done", SN_LOCAL);
	MakeNameEx(0X20A0, "alloc_done", SN_LOCAL);
	MakeNameEx(0X20A5, "init_nomem", SN_LOCAL);
	MakeFunction    (0X20AB,0X20C6);
	SetFunctionFlags(0X20AB,0x0);
	MakeFrame(0X20AB, 0X0, 2, 0X0);
	MakeNameEx(0X20BB, "patchlp", SN_LOCAL);
	MakeFunction    (0X20C6,0X20D8);
	SetFunctionFlags(0X20C6,0x0);
	MakeNameEx(0X20D1, "pseglp", SN_LOCAL);
	MakeFunction    (0X20D8,0X20F1);
	SetFunctionFlags(0X20D8,0x0);
	MakeFrame(0X20D8, 0X0, 2, 0X0);
	MakeNameEx(0X20EF, "cXMMexit", SN_LOCAL);
	MakeFunction    (0X2B16,0X2BB5);
	SetFunctionFlags(0X2B16,0x0);
	MakeNameEx(0X2B4F, "ccydp2", SN_LOCAL);
	MakeNameEx(0X2B52, "ccydp3", SN_LOCAL);
	MakeNameEx(0X2B53, "ccydp4", SN_LOCAL);
	MakeNameEx(0X2B55, "ccydp5", SN_LOCAL);
	MakeNameEx(0X2B74, "ccydp6", SN_LOCAL);
	MakeNameEx(0X2B75, "ccydp7", SN_LOCAL);
	MakeNameEx(0X2B8D, "ccydp8", SN_LOCAL);
	MakeNameEx(0X2B99, "ccydp9", SN_LOCAL);
	MakeNameEx(0X2BA2, "ccydp10", SN_LOCAL);
	MakeNameEx(0X2BA6, "ccydp11", SN_LOCAL);
	MakeNameEx(0X2BAE, "ccydp12", SN_LOCAL);
	MakeFunction    (0X2BB5,0X2C2E);
	SetFunctionFlags(0X2BB5,0x0);
	MakeFrame(0X2BB5, 0X0, 12, 0X0);
	MakeNameEx(0X2BC8, "NO_ROM", SN_LOCAL);
	MakeNameEx(0X2BC9, "ROM_RET", SN_LOCAL);
	MakeNameEx(0X2BD0, "SCAN_IT", SN_LOCAL);
	MakeNameEx(0X2BD3, "SCAN_ONE", SN_LOCAL);
	MakeNameEx(0X2BE1, "SCAN_END", SN_LOCAL);
	MakeNameEx(0X2C09, "SCAN_TEST", SN_LOCAL);
	MakeNameEx(0X2C17, "SCAN_FOUND", SN_LOCAL);
	MakeFunction    (0X2C9C,0X2CE4);
	SetFunctionFlags(0X2C9C,0x20);
	MakeFrame(0X2C9C, 0X0, 0, 0X0);
	MakeNameEx(0X2CB1, "BAT_REMCHECK", SN_LOCAL);
	MakeNameEx(0X2CC4, "BATDIE", SN_LOCAL);
	MakeNameEx(0X2CCF, "ASKFORBAT", SN_LOCAL);
	MakeFunction    (0X2CE4,0X2D0F);
	SetFunctionFlags(0X2CE4,0x0);
	MakeFrame(0X2CE4, 0X0, 2, 0X0);
	MakeFunction    (0X2D0F,0X2D2F);
	SetFunctionFlags(0X2D0F,0x0);
	MakeFrame(0X2D0F, 0X0, 2, 0X0);
	MakeFunction    (0X2D2F,0X2EB1);
	SetFunctionFlags(0X2D2F,0x0);
	MakeNameEx(0X2D58, "CONTBAT", SN_LOCAL);
	MakeNameEx(0X2D5B, "TRYING_TO_ABORT", SN_LOCAL);
	MakeNameEx(0X2D5E, "TESTNOP", SN_LOCAL);
	MakeNameEx(0X2D8A, "SET_BAT_POS", SN_LOCAL);
	MakeNameEx(0X2DA8, "NOPLINE", SN_LOCAL);
	MakeNameEx(0X2DB6, "READBAT_RETN", SN_LOCAL);
	MakeNameEx(0X2DB7, "RDBAT", SN_LOCAL);
	MakeNameEx(0X2DCC, "RDBAT1", SN_LOCAL);
	MakeNameEx(0X2DD6, "SAVBATBYT", SN_LOCAL);
	MakeNameEx(0X2DDB, "FOUND_EOL", SN_LOCAL);
	MakeNameEx(0X2DF9, "RESET", SN_LOCAL);
	MakeNameEx(0X2DFD, "TRY_NEXTFLAG", SN_LOCAL);
	MakeNameEx(0X2E07, "NO_CRLF_PRINT", SN_LOCAL);
	MakeNameEx(0X2E16, "TOOLONG", SN_LOCAL);
	MakeNameEx(0X2E1D, "LTLCONT", SN_LOCAL);
	MakeNameEx(0X2E20, "NEEDPARM", SN_LOCAL);
	MakeNameEx(0X2E4A, "YES_THERE_IS", SN_LOCAL);
	MakeNameEx(0X2E50, "COPYPARM", SN_LOCAL);
	MakeNameEx(0X2E5F, "LINETOOL", SN_LOCAL);
	MakeNameEx(0X2E64, "ENDPARAM", SN_LOCAL);
	MakeNameEx(0X2E68, "NEEDENV", SN_LOCAL);
	MakeNameEx(0X2E71, "GETENV1", SN_LOCAL);
	MakeNameEx(0X2E8D, "GETENV15", SN_LOCAL);
	MakeNameEx(0X2EAD, "GETENV6", SN_LOCAL);
	MakeFunction    (0X2EB1,0X2EC2);
	SetFunctionFlags(0X2EB1,0x0);
	MakeNameEx(0X2EBA, "SKIPTOEOL1", SN_LOCAL);
	MakeFunction    (0X2EC2,0X2ED2);
	SetFunctionFlags(0X2EC2,0x0);
	MakeFrame(0X2EC2, 0X0, 2, 0X0);
	MakeFunction    (0X2ED2,0X2F48);
	SetFunctionFlags(0X2ED2,0x0);
	MakeFrame(0X2ED2, 0X0, 2, 0X0);
	MakeNameEx(0X2F1C, "NOROUND", SN_LOCAL);
	MakeNameEx(0X2F20, "ROUNDDONE", SN_LOCAL);
	MakeNameEx(0X2F3B, "SAVSIZ2", SN_LOCAL);
	MakeNameEx(0X2F43, "GOTSIZE2", SN_LOCAL);
	MakeFunction    (0X30C0,0X311C);
	SetFunctionFlags(0X30C0,0x0);
	MakeFrame(0X30C0, 0X0, 8, 0X0);
	MakeNameEx(0X30E4, "ECHO_LAST_LINE", SN_LOCAL);
	MakeNameEx(0X3117, "NOTFREE", SN_LOCAL);
	MakeFunction    (0X311C,0X3131);
	SetFunctionFlags(0X311C,0x0);
	MakeFrame(0X311C, 0X0, 2, 0X0);
	MakeNameEx(0X311D, "ccycle", SN_LOCAL);
	MakeNameEx(0X3128, "ccopy", SN_LOCAL);
	MakeNameEx(0X312D, "ccend", SN_LOCAL);
	MakeFunction    (0X3131,0X3242);
	SetFunctionFlags(0X3131,0x0);
	MakeFrame(0X3131, 0X0, 6, 0X0);
	MakeNameEx(0X313E, "getbatbyt1", SN_LOCAL);
	MakeNameEx(0X3149, "getbatbyt2", SN_LOCAL);
	MakeNameEx(0X3159, "not_eof", SN_LOCAL);
	MakeNameEx(0X31A5, "bat_read_ok", SN_LOCAL);
	MakeNameEx(0X31B3, "UNBUF", SN_LOCAL);
	MakeNameEx(0X31C1, "SETBUFPOS", SN_LOCAL);
	MakeNameEx(0X31C9, "BATEOFDS", SN_LOCAL);
	MakeNameEx(0X31F1, "crpresent", SN_LOCAL);
	MakeNameEx(0X31F5, "At_EOF", SN_LOCAL);
	MakeNameEx(0X3209, "ret_lf", SN_LOCAL);
	MakeNameEx(0X320E, "turn_off", SN_LOCAL);
	MakeNameEx(0X320F, "BATEOF", SN_LOCAL);
	MakeNameEx(0X322A, "CONT_GET_BYT", SN_LOCAL);
	MakeNameEx(0X323E, "GETBYTEDONE", SN_LOCAL);
	MakeFunction    (0X3249,0X3369);
	SetFunctionFlags(0X3249,0x2);
	MakeFrame(0X3249, 0X0, 2, 0X0);
	MakeNameEx(0X27F9, "NOSETVER2", SN_LOCAL);
	MakeNameEx(0X2807, "_$EXITPREP", SN_LOCAL);
	MakeNameEx(0X283F, "TESTRDIR", SN_LOCAL);
	MakeNameEx(0X2856, "NOSETBUF", SN_LOCAL);
	MakeNameEx(0X2867, "NOPCLOSE", SN_LOCAL);
	MakeNameEx(0X288C, "SAVSIZ", SN_LOCAL);
	MakeNameEx(0X2894, "GOTSIZE", SN_LOCAL);
	MakeNameEx(0X28C0, "GETCOM", SN_LOCAL);
	MakeNameEx(0X28D4, "GETCOM2", SN_LOCAL);
	MakeNameEx(0X28F0, "NOPIPE", SN_LOCAL);
	MakeNameEx(0X290E, "NOPDRV", SN_LOCAL);
	MakeNameEx(0X2918, "TESTFORBAT", SN_LOCAL);
	MakeNameEx(0X2973, "JDOCOM1", SN_LOCAL);
	MakeNameEx(0X2977, "ISNOBAT", SN_LOCAL);
	MakeNameEx(0X298B, "SINGLELOOP", SN_LOCAL);
	MakeNameEx(0X299B, "REGCOM", SN_LOCAL);
	MakeNameEx(0X29B9, "GOTCOM", SN_LOCAL);
	MakeNameEx(0X29D1, "DOCOM", SN_LOCAL);
	MakeNameEx(0X29D7, "DOCOM2", SN_LOCAL);
	MakeNameEx(0X29FE, "NOPIPEPROC", SN_LOCAL);
	MakeNameEx(0X2A03, "BADPARSE", SN_LOCAL);
	MakeNameEx(0X2A0E, "OKPARSE", SN_LOCAL);
	MakeNameEx(0X2AF8, "NULLCOM", SN_LOCAL);
	MakeNameEx(0X2B09, "NOSETFLAG", SN_LOCAL);
	MakeNameEx(0X3258, "IFNoPipe", SN_LOCAL);
	MakeNameEx(0X3267, "IFREENT", SN_LOCAL);
	MakeNameEx(0X3275, "IFINDCOM", SN_LOCAL);
	MakeNameEx(0X327E, "IFCOMP", SN_LOCAL);
	MakeNameEx(0X3280, "FIRSTCOMP", SN_LOCAL);
	MakeNameEx(0X328E, "IFLP", SN_LOCAL);
	MakeNameEx(0X3290, "IF_DIF", SN_LOCAL);
	MakeNameEx(0X329D, "IFERRJ", SN_LOCAL);
	MakeNameEx(0X32B3, "IFSTRING", SN_LOCAL);
	MakeNameEx(0X32B6, "FIRST_STRING", SN_LOCAL);
	MakeNameEx(0X32C3, "EQUAL_CHECK", SN_LOCAL);
	MakeNameEx(0X32CE, "EQUAL_CHECK2", SN_LOCAL);
	MakeNameEx(0X32E5, "SKIPSTRINGEND", SN_LOCAL);
	MakeNameEx(0X32E6, "NOTMATCH", SN_LOCAL);
	MakeNameEx(0X32F3, "IFERRPJ", SN_LOCAL);
	MakeNameEx(0X32F6, "MATCH", SN_LOCAL);
	MakeNameEx(0X332B, "IF_EX_C", SN_LOCAL);
	MakeNameEx(0X3336, "REALTEST", SN_LOCAL);
	MakeNameEx(0X333D, "IFTRUE", SN_LOCAL);
	MakeNameEx(0X35B1, "_$FOR_EXIT", SN_LOCAL);
	MakeNameEx(0X35B3, "FORPROC", SN_LOCAL);
	MakeNameEx(0X35C2, "FOR_BEGIN", SN_LOCAL);
	MakeNameEx(0X35CD, "FOR_BEGIN1", SN_LOCAL);
	MakeNameEx(0X35FC, "FORSUB", SN_LOCAL);
	MakeNameEx(0X3610, "FOR_FIND_FIRST", SN_LOCAL);
	MakeNameEx(0X361B, "FOR_FIND_NEXT", SN_LOCAL);
	MakeNameEx(0X3620, "FOR_RESULT", SN_LOCAL);
	MakeNameEx(0X3628, "FOR_CHECK", SN_LOCAL);
	MakeNameEx(0X362F, "FOR_SMOOSH", SN_LOCAL);
	MakeNameEx(0X3640, "FOR_MORE", SN_LOCAL);
	MakeNameEx(0X3648, "FOR_MAKE_COM", SN_LOCAL);
	MakeNameEx(0X3668, "FOR_MAKE_LOOP", SN_LOCAL);
	MakeNameEx(0X3678, "SLOOP", SN_LOCAL);
	MakeNameEx(0X3683, "FOR_STOSB", SN_LOCAL);
	MakeNameEx(0X36A6, "NO_CRLF_PR", SN_LOCAL);
	MakeNameEx(0X36CB, "NOECHO3", SN_LOCAL);
	MakeNameEx(0X552B, "EXTERNALJ", SN_LOCAL);
	MakeNameEx(0X5537, "APPEND_INTERNAL", SN_LOCAL);
	MakeNameEx(0X5560, "CONTCOM", SN_LOCAL);
	MakeNameEx(0X5565, "FINDCOM", SN_LOCAL);
	MakeNameEx(0X5579, "ABCD", SN_LOCAL);
	MakeNameEx(0X5597, "DONT_SET_IO", SN_LOCAL);
	MakeNameEx(0X55B1, "DO_HELP", SN_LOCAL);
	MakeNameEx(0X55B7, "NEXT_HELP_MSG", SN_LOCAL);
	MakeNameEx(0X55C5, "HELP_DONE", SN_LOCAL);
	MakeNameEx(0X55C9, "DRIVE_CHECK", SN_LOCAL);
	MakeNameEx(0X55DE, "NOCHECK", SN_LOCAL);
	MakeNameEx(0X55FE, "REALWORK", SN_LOCAL);
	MakeNameEx(0X5600, "CMD_DONE", SN_LOCAL);
	MakeNameEx(0X5617, "INCALL", SN_LOCAL);
	MakeNameEx(0X5638, "NOT_BARRYF", SN_LOCAL);
	MakeNameEx(0X565F, "DO_SCAN", SN_LOCAL);
	MakeNameEx(0X567C, "badcomj45", SN_LOCAL);
	MakeNameEx(0X567E, "EXECUTE", SN_LOCAL);
	MakeNameEx(0X56C4, "OK_EXEC", SN_LOCAL);
	MakeNameEx(0X56D0, "BADCOM", SN_LOCAL);
	MakeNameEx(0X5ABA, "PIPERR", SN_LOCAL);
	MakeNameEx(0X5AD6, "TCOMMANDJ", SN_LOCAL);
	MakeNameEx(0X5AD9, "PIPEPROCSTRT", SN_LOCAL);
	MakeNameEx(0X5B10, "no_temp_path", SN_LOCAL);
	MakeNameEx(0X5B2A, "crt_temp", SN_LOCAL);
	MakeNameEx(0X5B37, "pps0", SN_LOCAL);
	MakeNameEx(0X5B49, "pps1", SN_LOCAL);
	MakeNameEx(0X5B63, "NOSINGP", SN_LOCAL);
	MakeNameEx(0X5B65, "PIPEPROC", SN_LOCAL);
	MakeNameEx(0X5B7A, "ISPIPE1", SN_LOCAL);
	MakeNameEx(0X5B83, "PIPEERRJ", SN_LOCAL);
	MakeNameEx(0X5B88, "NO_PIPEERR", SN_LOCAL);
	MakeNameEx(0X5B92, "FIRSTPIPE", SN_LOCAL);
	MakeNameEx(0X5B9C, "PIPEERRSYNJ", SN_LOCAL);
	MakeNameEx(0X5B9F, "PIPEOK1", SN_LOCAL);
	MakeNameEx(0X5BAA, "PIPECOMLP", SN_LOCAL);
	MakeNameEx(0X5BB6, "NOTKANJ5", SN_LOCAL);
	MakeNameEx(0X5BC3, "ISPIPE2", SN_LOCAL);
	MakeNameEx(0X5BF6, "LASTPIPE", SN_LOCAL);
	MakeNameEx(0X5C03, "PIPECOM", SN_LOCAL);
	MakeNameEx(0X5C08, "PIPEEND", SN_LOCAL);
	MakeNameEx(0X5C19, "NOSINGP2", SN_LOCAL);
	MakeFunction    (0X33CD,0X33E1);
	SetFunctionFlags(0X33CD,0x0);
	MakeNameEx(0X33DF, "SKIPERR", SN_LOCAL);
	MakeFunction    (0X33E1,0X3415);
	SetFunctionFlags(0X33E1,0x0);
	MakeFrame(0X33E1, 0X0, 8, 0X0);
	MakeNameEx(0X3413, "_NOPIPE", SN_LOCAL);
	MakeFunction    (0X34EB,0X34FF);
	SetFunctionFlags(0X34EB,0x0);
	MakeNameEx(0X34F9, "CLOSERETURN", SN_LOCAL);
	MakeFunction    (0X34FF,0X3538);
	SetFunctionFlags(0X34FF,0x0);
	MakeFrame(0X34FF, 0X0, 2, 0X0);
	MakeNameEx(0X352A, "SETERRDL", SN_LOCAL);
	MakeFunction    (0X3538,0X3579);
	SetFunctionFlags(0X3538,0x0);
	MakeFrame(0X3538, 0X0, 2, 0X0);
	MakeNameEx(0X3541, "_ClearBatch", SN_LOCAL);
	MakeNameEx(0X3555, "no_bat_for", SN_LOCAL);
	MakeNameEx(0X3577, "fb_ret", SN_LOCAL);
	MakeFunction    (0X36DE,0X37F0);
	SetFunctionFlags(0X36DE,0x0);
	MakeNameEx(0X359C, "BAT_CRLF", SN_LOCAL);
	MakeNameEx(0X35AE, "NOFORP2", SN_LOCAL);
	MakeNameEx(0X36F5, "NO_PIPE", SN_LOCAL);
	MakeNameEx(0X372F, "FOR_LIST_NOT_EMPTY", SN_LOCAL);
	MakeNameEx(0X3737, "FOR_PAREN_TOKEN", SN_LOCAL);
	MakeNameEx(0X3744, "FORERORJJ", SN_LOCAL);
	MakeNameEx(0X3747, "FOR_LIST", SN_LOCAL);
	MakeNameEx(0X3749, "SKIP_LIST", SN_LOCAL);
	MakeNameEx(0X375C, "FOR_END_LIST", SN_LOCAL);
	MakeNameEx(0X3767, "FOR_DO", SN_LOCAL);
	MakeNameEx(0X37DE, "FOR_RET", SN_LOCAL);
	MakeNameEx(0X37DF, "FOR_ALLOC_ERR", SN_LOCAL);
	MakeFunction    (0X37F0,0X3806);
	SetFunctionFlags(0X37F0,0x0);
	MakeNameEx(0X3804, "NEXTARG_ERR", SN_LOCAL);
	MakeFunction    (0X3820,0X3847);
	SetFunctionFlags(0X3820,0x0);
	MakeFrame(0X3820, 0X0, 4, 0X0);
	MakeNameEx(0X3837, "FREEDONE", SN_LOCAL);
	MakeFunction    (0X3921,0X394B);
	SetFunctionFlags(0X3921,0x0);
	MakeFunction    (0X394B,0X3967);
	SetFunctionFlags(0X394B,0x0);
	MakeNameEx(0X3966, "peRet", SN_LOCAL);
	MakeFunction    (0X3967,0X3977);
	SetFunctionFlags(0X3967,0x0);
	MakeNameEx(0X3975, "pcOk", SN_LOCAL);
	MakeNameEx(0X3976, "pcRet", SN_LOCAL);
	MakeFunction    (0X3977,0X399E);
	SetFunctionFlags(0X3977,0x0);
	MakeNameEx(0X3998, "scNoTable", SN_LOCAL);
	MakeNameEx(0X399D, "scRet", SN_LOCAL);
	MakeFunction    (0X399E,0X3A08);
	SetFunctionFlags(0X399E,0x0);
	MakeNameEx(0X39AB, "setopts0", SN_LOCAL);
	MakeNameEx(0X39B8, "setopts1", SN_LOCAL);
	MakeNameEx(0X39C8, "setopts2", SN_LOCAL);
	MakeNameEx(0X39F6, "setopts4", SN_LOCAL);
	MakeNameEx(0X3A07, "soRet", SN_LOCAL);
	MakeFunction    (0X3A08,0X3A6C);
	SetFunctionFlags(0X3A08,0x0);
	MakeNameEx(0X3A14, "crpath1", SN_LOCAL);
	MakeNameEx(0X3A30, "cpNoDir", SN_LOCAL);
	MakeNameEx(0X3A45, "cpMaybe", SN_LOCAL);
	MakeNameEx(0X3A4C, "crpath2", SN_LOCAL);
	MakeNameEx(0X3A5F, "cpFile", SN_LOCAL);
	MakeNameEx(0X3A6A, "cpErr", SN_LOCAL);
	MakeNameEx(0X3A6B, "cpRet", SN_LOCAL);
	MakeFunction    (0X3A6C,0X3A84);
	SetFunctionFlags(0X3A6C,0x0);
	MakeFrame(0X3A6C, 0X0, 2, 0X0);
	MakeFunction    (0X3A84,0X3AD9);
	SetFunctionFlags(0X3A84,0x0);
	MakeNameEx(0X3A8A, "lsNode", SN_LOCAL);
	MakeNameEx(0X3A8D, "lsLoop", SN_LOCAL);
	MakeNameEx(0X3AA0, "lstsd1", SN_LOCAL);
	MakeNameEx(0X3ACA, "lsErr", SN_LOCAL);
	MakeNameEx(0X3AD8, "lsRet", SN_LOCAL);
	MakeFunction    (0X3AD9,0X3B06);
	SetFunctionFlags(0X3AD9,0x0);
	MakeNameEx(0X3B05, "ccRet", SN_LOCAL);
	MakeFunction    (0X3B06,0X3B2E);
	SetFunctionFlags(0X3B06,0x0);
	MakeNameEx(0X3B09, "ceLoop", SN_LOCAL);
	MakeNameEx(0X3B24, "ceDn", SN_LOCAL);
	MakeNameEx(0X3B2A, "ceNs", SN_LOCAL);
	MakeFunction    (0X3BC5,0X3BD1);
	SetFunctionFlags(0X3BC5,0x0);
	MakeFunction    (0X3BD1,0X3C2E);
	SetFunctionFlags(0X3BD1,0x0);
	MakeNameEx(0X3BFE, "dtCntSize", SN_LOCAL);
	MakeNameEx(0X3C0C, "dtFree", SN_LOCAL);
	MakeNameEx(0X3C2D, "dtRet", SN_LOCAL);
	MakeFunction    (0X3C2E,0X3C65);
	SetFunctionFlags(0X3C2E,0x0);
	MakeNameEx(0X3C51, "piCol", SN_LOCAL);
	MakeNameEx(0X3C64, "piRet", SN_LOCAL);
	MakeFunction    (0X3C65,0X3C6A);
	SetFunctionFlags(0X3C65,0x0);
	MakeFunction    (0X3C6A,0X3C93);
	SetFunctionFlags(0X3C6A,0x0);
	MakeFrame(0X3C6A, 0X0, 2, 0X0);
	MakeNameEx(0X3C8D, "ffGetErr", SN_LOCAL);
	MakeNameEx(0X3C91, "ffRet", SN_LOCAL);
	MakeFunction    (0X3C93,0X3CBB);
	SetFunctionFlags(0X3C93,0x0);
	MakeNameEx(0X3C9F, "fiBest", SN_LOCAL);
	MakeNameEx(0X3CA1, "fiNext", SN_LOCAL);
	MakeNameEx(0X3CAD, "fiNoMore", SN_LOCAL);
	MakeNameEx(0X3CB3, "fiFound", SN_LOCAL);
	MakeNameEx(0X3CBA, "fiRet", SN_LOCAL);
	MakeFunction    (0X3CBB,0X3D0D);
	SetFunctionFlags(0X3CBB,0x0);
	MakeFrame(0X3CBB, 0XC, 0, 0X0);
	MakeNameEx(0X3CDE, "fcNext", SN_LOCAL);
	MakeNameEx(0X3CEC, "fcErr", SN_LOCAL);
	MakeNameEx(0X3CFE, "fcMove", SN_LOCAL);
	MakeNameEx(0X3D06, "fcNope", SN_LOCAL);
	MakeNameEx(0X3D07, "fcRet", SN_LOCAL);
	MakeFunction    (0X3D0D,0X3D1A);
	SetFunctionFlags(0X3D0D,0x0);
	MakeNameEx(0X3D1F, "foNoMore", SN_LOCAL);
	MakeFunction    (0X3D1A,0X3D1F);
	SetFunctionFlags(0X3D1A,0x0);
	MakeFunction    (0X3D21,0X3D40);
	SetFunctionFlags(0X3D21,0x0);
	MakeFrame(0X3D21, 0X0, 2, 0X0);
	MakeNameEx(0X3D33, "geLoop", SN_LOCAL);
	MakeNameEx(0X3D3E, "geRet", SN_LOCAL);
	MakeFunction    (0X3D40,0X3D57);
	SetFunctionFlags(0X3D40,0x0);
	MakeFunction    (0X3D57,0X3D74);
	SetFunctionFlags(0X3D57,0x0);
	MakeFunction    (0X3D74,0X3DC8);
	SetFunctionFlags(0X3D74,0x0);
	MakeNameEx(0X3D9A, "ld1", SN_LOCAL);
	MakeNameEx(0X3DA5, "ldNext", SN_LOCAL);
	MakeNameEx(0X3DAF, "ldErr", SN_LOCAL);
	MakeNameEx(0X3DBC, "ldDone", SN_LOCAL);
	MakeNameEx(0X3DC6, "ld2", SN_LOCAL);
	MakeNameEx(0X3DC7, "ldRet", SN_LOCAL);
	MakeFunction    (0X3DC8,0X3DFC);
	SetFunctionFlags(0X3DC8,0x0);
	MakeFrame(0X3DC8, 0X0, 2, 0X0);
	MakeNameEx(0X3DDC, "leNext", SN_LOCAL);
	MakeNameEx(0X3DF0, "leLoaded", SN_LOCAL);
	MakeNameEx(0X3DF9, "leOk", SN_LOCAL);
	MakeNameEx(0X3DFA, "leRet", SN_LOCAL);
	MakeFunction    (0X3DFC,0X3E3D);
	SetFunctionFlags(0X3DFC,0x0);
	MakeNameEx(0X3E24, "leCalcRatio", SN_LOCAL);
	MakeNameEx(0X3E35, "leSetDirSize", SN_LOCAL);
	MakeNameEx(0X3E39, "leNoRatio", SN_LOCAL);
	MakeFunction    (0X3E3D,0X3E44);
	SetFunctionFlags(0X3E3D,0x0);
	MakeFunction    (0X3E44,0X3E63);
	SetFunctionFlags(0X3E44,0x0);
	MakeNameEx(0X3E5B, "oo1", SN_LOCAL);
	MakeNameEx(0X3E61, "ooRet", SN_LOCAL);
	MakeFunction    (0X3E63,0X3EA8);
	SetFunctionFlags(0X3E63,0x0);
	MakeFrame(0X3E63, 0X0, 2, 0X0);
	MakeNameEx(0X3E6C, "paLoop", SN_LOCAL);
	MakeNameEx(0X3E7A, "pa1", SN_LOCAL);
	MakeNameEx(0X3E9F, "paErr", SN_LOCAL);
	MakeNameEx(0X3EA5, "paOk", SN_LOCAL);
	MakeNameEx(0X3EA6, "paRet", SN_LOCAL);
	MakeFunction    (0X3EA8,0X3ECE);
	SetFunctionFlags(0X3EA8,0x0);
	MakeNameEx(0X3EAD, "plPars", SN_LOCAL);
	MakeNameEx(0X3EC8, "plFil", SN_LOCAL);
	MakeNameEx(0X3ECD, "plRet", SN_LOCAL);
	MakeFunction    (0X3ECE,0X3F2C);
	SetFunctionFlags(0X3ECE,0x0);
	MakeFrame(0X3ECE, 0X0, 4, 0X0);
	MakeNameEx(0X3EEA, "poLtr", SN_LOCAL);
	MakeNameEx(0X3EF8, "po1", SN_LOCAL);
	MakeNameEx(0X3F11, "poSet", SN_LOCAL);
	MakeNameEx(0X3F1E, "poErr", SN_LOCAL);
	MakeNameEx(0X3F25, "poOk", SN_LOCAL);
	MakeNameEx(0X3F2A, "poRet", SN_LOCAL);
	MakeFunction    (0X3F2C,0X3F49);
	SetFunctionFlags(0X3F2C,0x0);
	MakeNameEx(0X3F43, "prDone", SN_LOCAL);
	MakeNameEx(0X3F47, "prRet", SN_LOCAL);
	MakeFunction    (0X3F9A,0X3FAA);
	SetFunctionFlags(0X3F9A,0x0);
	MakeFrame(0X3F9A, 0X0, 2, 0X0);
	MakeFunction    (0X3FAA,0X3FB3);
	SetFunctionFlags(0X3FAA,0x0);
	MakeFrame(0X3FAA, 0X0, 2, 0X0);
	MakeFunction    (0X3FB3,0X3FE0);
	SetFunctionFlags(0X3FB3,0x0);
	MakeFrame(0X3FB3, 0X0, 2, 0X0);
	MakeNameEx(0X3FC6, "cntf1", SN_LOCAL);
	MakeFunction    (0X3FE0,0X4033);
	SetFunctionFlags(0X3FE0,0x0);
	MakeNameEx(0X4009, "dbare1", SN_LOCAL);
	MakeNameEx(0X401D, "dbare2", SN_LOCAL);
	MakeNameEx(0X4029, "dbNameExt", SN_LOCAL);
	MakeNameEx(0X4032, "dbRet", SN_LOCAL);
	MakeFunction    (0X4033,0X4099);
	SetFunctionFlags(0X4033,0x0);
	MakeFrame(0X4033, 0X0, 4, 0X0);
	MakeNameEx(0X4052, "NextNameChar", SN_LOCAL);
	MakeNameEx(0X4060, "ddf1", SN_LOCAL);
	MakeNameEx(0X4082, "NextExtChar", SN_LOCAL);
	MakeNameEx(0X4090, "ddf2", SN_LOCAL);
	MakeNameEx(0X4095, "ddDone", SN_LOCAL);
	MakeFunction    (0X4099,0X40CB);
	SetFunctionFlags(0X4099,0x0);
	MakeNameEx(0X40A6, "dfNorm", SN_LOCAL);
	MakeNameEx(0X40B6, "dfFul", SN_LOCAL);
	MakeNameEx(0X40C7, "dfCnt", SN_LOCAL);
	MakeNameEx(0X40CA, "dfRet", SN_LOCAL);
	MakeFunction    (0X40CB,0X40FB);
	SetFunctionFlags(0X40CB,0x0);
	MakeNameEx(0X40E3, "dhNorm", SN_LOCAL);
	MakeNameEx(0X40E8, "dhCom", SN_LOCAL);
	MakeNameEx(0X40FA, "dhRet", SN_LOCAL);
	MakeFunction    (0X40FB,0X4135);
	SetFunctionFlags(0X40FB,0x0);
	MakeFrame(0X40FB, 0X0, 2, 0X0);
	MakeNameEx(0X4128, "dn1", SN_LOCAL);
	MakeFunction    (0X4135,0X415C);
	SetFunctionFlags(0X4135,0x0);
	MakeNameEx(0X414B, "dnEol", SN_LOCAL);
	MakeNameEx(0X4151, "dn1st", SN_LOCAL);
	MakeNameEx(0X4157, "dnDone", SN_LOCAL);
	MakeFunction    (0X415C,0X41E9);
	SetFunctionFlags(0X415C,0x0);
	MakeFrame(0X415C, 0X0, 2, 0X0);
	MakeNameEx(0X417D, "dr_0", SN_LOCAL);
	MakeNameEx(0X417F, "drNonDir", SN_LOCAL);
	MakeNameEx(0X4195, "drCom", SN_LOCAL);
	MakeNameEx(0X41BF, "dr_1", SN_LOCAL);
	MakeNameEx(0X41DF, "drPrint", SN_LOCAL);
	MakeNameEx(0X41E5, "drDone", SN_LOCAL);
	MakeFunction    (0X41E9,0X420F);
	SetFunctionFlags(0X41E9,0x0);
	MakeFrame(0X41E9, 0X0, 2, 0X0);
	MakeNameEx(0X420D, "dcrRet", SN_LOCAL);
	MakeFunction    (0X420F,0X425F);
	SetFunctionFlags(0X420F,0x0);
	MakeNameEx(0X424B, "dtrSkipRatio", SN_LOCAL);
	MakeNameEx(0X424C, "dtrSize", SN_LOCAL);
	MakeFunction    (0X425F,0X428D);
	SetFunctionFlags(0X425F,0x0);
	MakeFrame(0X425F, 0X0, 2, 0X0);
	MakeNameEx(0X426F, "dw1", SN_LOCAL);
	MakeNameEx(0X427D, "dw2", SN_LOCAL);
	MakeNameEx(0X4286, "dw3", SN_LOCAL);
	MakeNameEx(0X428B, "dwDone", SN_LOCAL);
	MakeFunction    (0X428D,0X42AD);
	SetFunctionFlags(0X428D,0x0);
	MakeNameEx(0X42A5, "epNew", SN_LOCAL);
	MakeFunction    (0X42AD,0X42BE);
	SetFunctionFlags(0X42AD,0x0);
	MakeNameEx(0X42B9, "gdl1", SN_LOCAL);
	MakeFunction    (0X42BE,0X42D9);
	SetFunctionFlags(0X42BE,0x0);
	MakeFunction    (0X42D9,0X42E8);
	SetFunctionFlags(0X42D9,0x0);
	MakeNameEx(0X42E7, "ulRet", SN_LOCAL);
	MakeFunction    (0X42E8,0X42F3);
	SetFunctionFlags(0X42E8,0x0);
	MakeFunction    (0X4308,0X4313);
	SetFunctionFlags(0X4308,0x0);
	MakeNameEx(0X4312, "lcRet", SN_LOCAL);
	MakeFunction    (0X4313,0X4324);
	SetFunctionFlags(0X4313,0x0);
	MakeFrame(0X4313, 0X0, 2, 0X0);
	MakeNameEx(0X4317, "NextChar", SN_LOCAL);
	MakeNameEx(0X4322, "EndOfString", SN_LOCAL);
	MakeFunction    (0X4324,0X4381);
	SetFunctionFlags(0X4324,0x0);
	MakeFrame(0X4324, 0X0, 2, 0X0);
	MakeNameEx(0X435A, "columns_80", SN_LOCAL);
	MakeNameEx(0X4380, "screen_f_set_retn", SN_LOCAL);
	MakeFunction    (0X4381,0X44A4);
	SetFunctionFlags(0X4381,0x0);
	MakeNameEx(0X4396, "ocvf_errorj", SN_LOCAL);
	MakeNameEx(0X4399, "ocvf_default", SN_LOCAL);
	MakeNameEx(0X439D, "ocvf_swap_info", SN_LOCAL);
	MakeNameEx(0X43CE, "ocvf_got_host", SN_LOCAL);
	MakeNameEx(0X43EF, "ocvf_1", SN_LOCAL);
	MakeNameEx(0X441F, "ocvf_2", SN_LOCAL);
	MakeNameEx(0X4437, "ocvf_error", SN_LOCAL);
	MakeNameEx(0X443A, "ocvf_pick_cluster_size", SN_LOCAL);
	MakeNameEx(0X4452, "ovcf_use_CVF_size", SN_LOCAL);
	MakeNameEx(0X4455, "ovcf_set_size", SN_LOCAL);
	MakeNameEx(0X447B, "ocvf_big_buf", SN_LOCAL);
	MakeNameEx(0X44A2, "ocvf_success", SN_LOCAL);
	MakeNameEx(0X44A3, "ocvf_ret", SN_LOCAL);
	MakeFunction    (0X44A4,0X44BE);
	SetFunctionFlags(0X44A4,0x0);
	MakeNameEx(0X44BD, "ccvf_ret", SN_LOCAL);
	MakeFunction    (0X44BE,0X455A);
	SetFunctionFlags(0X44BE,0x0);
	MakeFrame(0X44BE, 0X0, 8, 0X0);
	MakeNameEx(0X44D4, "ccr_next", SN_LOCAL);
	MakeNameEx(0X4512, "ccr_1", SN_LOCAL);
	MakeNameEx(0X452B, "ccr_eof", SN_LOCAL);
	MakeNameEx(0X4553, "ccr_screwy", SN_LOCAL);
	MakeNameEx(0X4555, "ccr_ret", SN_LOCAL);
	MakeFunction    (0X455A,0X45A5);
	SetFunctionFlags(0X455A,0x0);
	MakeFrame(0X455A, 0X0, 4, 0X0);
	MakeNameEx(0X4597, "cr_got_tenths", SN_LOCAL);
	MakeNameEx(0X45A2, "cr_exit", SN_LOCAL);
	MakeFunction    (0X45A5,0X45D2);
	SetFunctionFlags(0X45A5,0x0);
	MakeNameEx(0X45AD, "div32_1", SN_LOCAL);
	MakeNameEx(0X45BB, "d32_too_far", SN_LOCAL);
	MakeNameEx(0X45C9, "d32_16bit", SN_LOCAL);
	MakeFunction    (0X45D2,0X4612);
	SetFunctionFlags(0X45D2,0x0);
	MakeNameEx(0X45EA, "gdf_success", SN_LOCAL);
	MakeNameEx(0X45EB, "gdf_ret", SN_LOCAL);
	MakeNameEx(0X45EC, "gdf_12", SN_LOCAL);
	MakeNameEx(0X4600, "gdf_odd", SN_LOCAL);
	MakeNameEx(0X4608, "gdf_testEOF", SN_LOCAL);
	MakeFunction    (0X4612,0X462B);
	SetFunctionFlags(0X4612,0x0);
	MakeNameEx(0X462A, "gmf_ret", SN_LOCAL);
	MakeFunction    (0X462B,0X46B1);
	SetFunctionFlags(0X462B,0x0);
	MakeNameEx(0X463B, "cfb_load_fat", SN_LOCAL);
	MakeNameEx(0X4650, "cfb_12", SN_LOCAL);
	MakeNameEx(0X465B, "cfb_common", SN_LOCAL);
	MakeNameEx(0X46AC, "cfb_error", SN_LOCAL);
	MakeNameEx(0X46AD, "cfb_ret", SN_LOCAL);
	MakeFunction    (0X46B1,0X46D4);
	SetFunctionFlags(0X46B1,0x0);
	MakeFrame(0X46B1, 0X0, 4, 0X0);
	MakeNameEx(0X46D3, "rcf_ret", SN_LOCAL);
	MakeFunction    (0X46D4,0X46E1);
	SetFunctionFlags(0X46D4,0x0);
	MakeFunction    (0X46E1,0X4758);
	SetFunctionFlags(0X46E1,0x0);
	MakeNameEx(0X46EF, "erase_scan", SN_LOCAL);
	MakeNameEx(0X471C, "erase_drive_ok", SN_LOCAL);
	MakeNameEx(0X4722, "set_erase_prompt", SN_LOCAL);
	MakeNameEx(0X4731, "ok_to_set_erase_prompt", SN_LOCAL);
	MakeNameEx(0X4737, "good_line", SN_LOCAL);
	MakeNameEx(0X474B, "checkdr", SN_LOCAL);
	MakeNameEx(0X4755, "notest2j", SN_LOCAL);
	MakeNameEx(0X62F6, "notest2", SN_LOCAL);
	MakeNameEx(0X62FC, "ambspec", SN_LOCAL);
	MakeNameEx(0X6303, "allfil", SN_LOCAL);
	MakeNameEx(0X6308, "askagn", SN_LOCAL);
	MakeNameEx(0X6329, "answ_no", SN_LOCAL);
	MakeNameEx(0X632A, "check_yn", SN_LOCAL);
	MakeNameEx(0X6337, "noprmpt", SN_LOCAL);
	MakeNameEx(0X635E, "slashp_erase", SN_LOCAL);
	MakeNameEx(0X6373, "delete_prompt_loop", SN_LOCAL);
	MakeNameEx(0X6380, "slashp_askagn", SN_LOCAL);
	MakeNameEx(0X6392, "not_del_root", SN_LOCAL);
	MakeNameEx(0X63BA, "slashp_check_yn", SN_LOCAL);
	MakeNameEx(0X63C4, "delete_this_file", SN_LOCAL);
	MakeNameEx(0X63E2, "stop_del", SN_LOCAL);
	MakeNameEx(0X63E5, "next_del_file", SN_LOCAL);
	MakeNameEx(0X63FA, "slash_p_exit", SN_LOCAL);
	MakeNameEx(0X6405, "good_erase_exit", SN_LOCAL);
	MakeFunction    (0X4769,0X4816);
	SetFunctionFlags(0X4769,0x0);
	MakeNameEx(0X47A9, "crename_parse_error", SN_LOCAL);
	MakeNameEx(0X47AB, "ren_no_drive", SN_LOCAL);
	MakeNameEx(0X47DC, "notest3", SN_LOCAL);
	MakeNameEx(0X47F8, "renameok", SN_LOCAL);
	MakeNameEx(0X4802, "rn1", SN_LOCAL);
	MakeNameEx(0X4810, "use_renerr", SN_LOCAL);
	MakeNameEx(0X4813, "errj", SN_LOCAL);
	MakeFunction    (0X4817,0X4945);
	SetFunctionFlags(0X4817,0x0);
	MakeNameEx(0X484D, "nowilds", SN_LOCAL);
	MakeNameEx(0X485F, "typerr", SN_LOCAL);
	MakeNameEx(0X4872, "typecont", SN_LOCAL);
	MakeNameEx(0X4886, "not_device", SN_LOCAL);
	MakeNameEx(0X489D, "dotype", SN_LOCAL);
	MakeNameEx(0X48A8, "typelp", SN_LOCAL);
	MakeNameEx(0X48B1, "tf1", SN_LOCAL);
	MakeNameEx(0X48D3, "lt64k", SN_LOCAL);
	MakeNameEx(0X48EA, "gtbuf", SN_LOCAL);
	MakeNameEx(0X48EF, "typ_read", SN_LOCAL);
	MakeNameEx(0X48F8, "tf2", SN_LOCAL);
	MakeNameEx(0X4912, "foundz", SN_LOCAL);
	MakeNameEx(0X491C, "typecont2", SN_LOCAL);
	MakeNameEx(0X492E, "tf3", SN_LOCAL);
	MakeNameEx(0X4933, "tf4", SN_LOCAL);
	MakeNameEx(0X4934, "Error_outputj", SN_LOCAL);
	MakeNameEx(0X4944, "typelp_ret", SN_LOCAL);
	MakeFunction    (0X4945,0X4969);
	SetFunctionFlags(0X4945,0x0);
	MakeNameEx(0X4966, "badvolarg", SN_LOCAL);
	MakeFunction    (0X4969,0X499C);
	SetFunctionFlags(0X4969,0x0);
	MakeFrame(0X4969, 0X0, 6, 0X0);
	MakeNameEx(0X4998, "daRet", SN_LOCAL);
	MakeFunction    (0X499C,0X4A1A);
	SetFunctionFlags(0X499C,0x0);
	MakeFrame(0X499C, 0X0, 0, 0X0);
	MakeNameEx(0X49DC, "drvok", SN_LOCAL);
	MakeNameEx(0X49E9, "Get_vol_name", SN_LOCAL);
	MakeNameEx(0X49FC, "print_serial", SN_LOCAL);
	MakeNameEx(0X4A17, "printvol_end", SN_LOCAL);
	MakeFunction    (0X4A1A,0X4A2A);
	SetFunctionFlags(0X4A1A,0x0);
	MakeFunction    (0X4A2A,0X4A41);
	SetFunctionFlags(0X4A2A,0x0);
	MakeFrame(0X4A2A, 0X0, 16, 0X0);
	MakeFunction    (0X4A41,0X4AA3);
	SetFunctionFlags(0X4A41,0x0);
	MakeNameEx(0X4A5D, "verPrintVer", SN_LOCAL);
	MakeNameEx(0X4A7B, "ver1", SN_LOCAL);
	MakeNameEx(0X4A95, "verRom", SN_LOCAL);
	MakeNameEx(0X4A9A, "verHma", SN_LOCAL);
	MakeNameEx(0X4A9D, "verPrintLoc", SN_LOCAL);
	MakeNameEx(0X4AA0, "verDone", SN_LOCAL);
	MakeFunction    (0X4AA3,0X4ABB);
	SetFunctionFlags(0X4AA3,0x0);
	MakeFunction    (0X4ABB,0X4B0F);
	SetFunctionFlags(0X4ABB,0x0);
	MakeFrame(0X4ABB, 0X0, 4, 0X0);
	MakeNameEx(0X4ACA, "PP0", SN_LOCAL);
	MakeNameEx(0X4AD4, "PP1", SN_LOCAL);
	MakeNameEx(0X4AE5, "PP2", SN_LOCAL);
	MakeNameEx(0X4AF0, "PP3", SN_LOCAL);
	MakeNameEx(0X4B01, "PP4", SN_LOCAL);
	MakeNameEx(0X4B0C, "PP5", SN_LOCAL);
	MakeFunction    (0X4B27,0X4B36);
	SetFunctionFlags(0X4B27,0x0);
	MakeFrame(0X4B27, 0X0, 4, 0X0);
	MakeFunction    (0X4B36,0X4B40);
	SetFunctionFlags(0X4B36,0x0);
	MakeFunction    (0X4B69,0X4B7A);
	SetFunctionFlags(0X4B69,0x0);
	MakeFunction    (0X4B7A,0X4BA9);
	SetFunctionFlags(0X4B7A,0x0);
	MakeNameEx(0X4B8C, "gotdrive", SN_LOCAL);
	MakeNameEx(0X4B9B, "dpbisok", SN_LOCAL);
	MakeFunction    (0X4BA9,0X4C1F);
	SetFunctionFlags(0X4BA9,0x0);
	MakeNameEx(0X4BBC, "pathslp", SN_LOCAL);
	MakeNameEx(0X4BC8, "path_hold", SN_LOCAL);
	MakeNameEx(0X4BCB, "notkanj2", SN_LOCAL);
	MakeNameEx(0X4BD7, "scan_white", SN_LOCAL);
	MakeNameEx(0X4BF5, "path_eol", SN_LOCAL);
	MakeNameEx(0X4C07, "store_path", SN_LOCAL);
	MakeNameEx(0X4C11, "got_paths", SN_LOCAL);
	MakeNameEx(0X4C15, "disppath", SN_LOCAL);
	MakeFunction    (0X4C1F,0X4C55);
	SetFunctionFlags(0X4C1F,0x0);
	MakeNameEx(0X4C25, "path0", SN_LOCAL);
	MakeNameEx(0X4C2F, "path1", SN_LOCAL);
	MakeFunction    (0X4C55,0X4CC0);
	SetFunctionFlags(0X4C55,0x0);
	MakeNameEx(0X4C7C, "no_variable", SN_LOCAL);
	MakeNameEx(0X4C8E, "ansicls", SN_LOCAL);
	MakeNameEx(0X4C93, "cls_normal", SN_LOCAL);
	MakeNameEx(0X4CA5, "DoAlpha", SN_LOCAL);
	MakeNameEx(0X4CBA, "regcls", SN_LOCAL);
	MakeNameEx(0X4CBF, "cls_ret", SN_LOCAL);
	MakeFunction    (0X4CC0,0X4CE3);
	SetFunctionFlags(0X4CC0,0x0);
	MakeFunction    (0X4CE3,0X4CF5);
	SetFunctionFlags(0X4CE3,0x0);
	MakeNameEx(0X4CED, "clrloop", SN_LOCAL);
	MakeFunction    (0X4CF5,0X4D99);
	SetFunctionFlags(0X4CF5,0x20);
	MakeFrame(0X4CF5, 0X0, 2, 0X0);
	MakeNameEx(0X4D16, "ctty_move_filename", SN_LOCAL);
	MakeNameEx(0X4D25, "ctty_error", SN_LOCAL);
	MakeNameEx(0X4D27, "nocolon", SN_LOCAL);
	MakeNameEx(0X4D3D, "closedev", SN_LOCAL);
	MakeNameEx(0X4D41, "isbaddev", SN_LOCAL);
	MakeNameEx(0X4D49, "devisok", SN_LOCAL);
	MakeNameEx(0X4D71, "iclloop", SN_LOCAL);
	MakeNameEx(0X4D89, "resret", SN_LOCAL);
	MakeFunction    (0X4D99,0X4E21);
	SetFunctionFlags(0X4D99,0x0);
	MakeFrame(0X4D99, 0X0, 2, 0X0);
	MakeNameEx(0X4DD4, "got_NLS", SN_LOCAL);
	MakeNameEx(0X4DF5, "no_countrysys", SN_LOCAL);
	MakeNameEx(0X4DFA, "chcp_other_error", SN_LOCAL);
	MakeNameEx(0X4E0A, "none_set", SN_LOCAL);
	MakeNameEx(0X4E0D, "cp_error", SN_LOCAL);
	MakeNameEx(0X4E10, "getcp", SN_LOCAL);
	MakeNameEx(0X4E20, "chcp_return", SN_LOCAL);
	MakeFunction    (0X4E21,0X4EA3);
	SetFunctionFlags(0X4E21,0x0);
	MakeFrame(0X4E21, 0X0, 2, 0X0);
	MakeNameEx(0X4E46, "tn_eol", SN_LOCAL);
	MakeNameEx(0X4E4D, "tn_drive", SN_LOCAL);
	MakeNameEx(0X4E5F, "tn_filespec", SN_LOCAL);
	MakeNameEx(0X4E64, "tn_move_filename", SN_LOCAL);
	MakeNameEx(0X4E6B, "tn_check_eol", SN_LOCAL);
	MakeNameEx(0X4E73, "tn_parse_error", SN_LOCAL);
	MakeNameEx(0X4E76, "tn_doit", SN_LOCAL);
	MakeNameEx(0X4E93, "tn_print_xname", SN_LOCAL);
	MakeFunction    (0X4EA3,0X4EFA);
	SetFunctionFlags(0X4EA3,0x0);
	MakeFrame(0X4EA3, 0X0, 2, 0X0);
	MakeNameEx(0X4EB9, "free_com", SN_LOCAL);
	MakeNameEx(0X4EC8, "no_reset", SN_LOCAL);
	MakeFunction    (0X4EFA,0X4F11);
	SetFunctionFlags(0X4EFA,0x0);
	MakeNameEx(0X4F0D, "ok_to_setup_pmsg", SN_LOCAL);
	MakeNameEx(0X4F10, "parse_good_eol", SN_LOCAL);
	MakeFunction    (0X4F11,0X4F25);
	SetFunctionFlags(0X4F11,0x0);
	MakeNameEx(0X4F24, "parse_msg_good", SN_LOCAL);
	MakeFunction    (0X4F25,0X4F47);
	SetFunctionFlags(0X4F25,0x0);
	MakeNameEx(0X4F45, "setup_parse_msg_ret", SN_LOCAL);
	MakeFunction    (0X4F47,0X5010);
	SetFunctionFlags(0X4F47,0x0);
	MakeFrame(0X4F47, 0X0, 0, 0X0);
	MakeNameEx(0X4F54, "ADD_PROMPT_RETN", SN_LOCAL);
	MakeNameEx(0X4F55, "ADD_PROMPT3", SN_LOCAL);
	MakeNameEx(0X4F5E, "DISP_ENVJ", SN_LOCAL);
	MakeNameEx(0X4F69, "EQLP", SN_LOCAL);
	MakeNameEx(0X4F7D, "QUEQ", SN_LOCAL);
	MakeNameEx(0X4F88, "ONEQ", SN_LOCAL);
	MakeNameEx(0X4FAF, "NOT_COMSPEC", SN_LOCAL);
	MakeNameEx(0X4FB1, "ADD_NAME", SN_LOCAL);
	MakeNameEx(0X4FB3, "ADD_NAME1", SN_LOCAL);
	MakeNameEx(0X4FBD, "ADD_NAME_RET", SN_LOCAL);
	MakeNameEx(0X4FC3, "ADD_NAME_JZ_RET", SN_LOCAL);
	MakeNameEx(0X4FF8, "_GOTDRIVE", SN_LOCAL);
	MakeNameEx(0X5003, "COPY_COMSPEC", SN_LOCAL);
	MakeNameEx(0X5010, "COPYDONE", SN_LOCAL);
	MakeNameEx(0X501F, "DISP_ENV", SN_LOCAL);
	MakeNameEx(0X5029, "PENVLP", SN_LOCAL);
	MakeNameEx(0X5031, "PENVLP2", SN_LOCAL);
	MakeFunction    (0X5043,0X5048);
	SetFunctionFlags(0X5043,0x0);
	MakeFunction    (0X5048,0X506C);
	SetFunctionFlags(0X5048,0x0);
	MakeNameEx(0X5060, "not_dnull", SN_LOCAL);
	MakeNameEx(0X5069, "del1", SN_LOCAL);
	MakeFunction    (0X506C,0X5071);
	SetFunctionFlags(0X506C,0x0);
	MakeFunction    (0X5071,0X5074);
	SetFunctionFlags(0X5071,0x0);
	MakeFunction    (0X5074,0X507C);
	SetFunctionFlags(0X5074,0x0);
	MakeFunction    (0X507C,0X50C1);
	SetFunctionFlags(0X507C,0x0);
	MakeNameEx(0X508B, "find1", SN_LOCAL);
	MakeNameEx(0X508E, "find11", SN_LOCAL);
	MakeNameEx(0X50A3, "notkanj3", SN_LOCAL);
	MakeNameEx(0X50AF, "find12", SN_LOCAL);
	MakeFunction    (0X50C1,0X50D5);
	SetFunctionFlags(0X50C1,0x0);
	MakeFrame(0X50C1, 0X0, 2, 0X0);
	MakeNameEx(0X50CF, "COUNTX", SN_LOCAL);
	MakeFunction    (0X50D5,0X50F4);
	SetFunctionFlags(0X50D5,0x0);
	MakeNameEx(0X50E9, "notkanj1", SN_LOCAL);
	MakeFunction    (0X50F4,0X5102);
	SetFunctionFlags(0X50F4,0x0);
	MakeFrame(0X50F4, 0X0, 0, 0X0);
	MakeFunction    (0X5102,0X5118);
	SetFunctionFlags(0X5102,0x0);
	MakeNameEx(0X510D, "sdn1", SN_LOCAL);
	MakeFunction    (0X5118,0X511C);
	SetFunctionFlags(0X5118,0x0);
	MakeFunction    (0X511C,0X5124);
	SetFunctionFlags(0X511C,0x0);
	MakeFunction    (0X5124,0X514E);
	SetFunctionFlags(0X5124,0x0);
	MakeFrame(0X5124, 0X0, 6, 0X0);
	MakeNameEx(0X5130, "ktlop", SN_LOCAL);
	MakeNameEx(0X5143, "notlead", SN_LOCAL);
	MakeNameEx(0X5147, "islead", SN_LOCAL);
	MakeNameEx(0X514A, "ktret", SN_LOCAL);
	MakeFunction    (0X514E,0X5171);
	SetFunctionFlags(0X514E,0x0);
	MakeNameEx(0X5166, "oth_fucase", SN_LOCAL);
	MakeNameEx(0X5170, "upconv_end", SN_LOCAL);
	MakeFunction    (0X5171,0X51D3);
	SetFunctionFlags(0X5171,0x0);
	MakeFrame(0X5171, 0X0, 8, 0X0);
	MakeNameEx(0X519A, "bad_env_size", SN_LOCAL);
	MakeNameEx(0X519D, "envsiz_ok", SN_LOCAL);
	MakeNameEx(0X51B3, "envnoset", SN_LOCAL);
	MakeNameEx(0X51C9, "store1", SN_LOCAL);
	MakeFunction    (0X51D3,0X51E7);
	SetFunctionFlags(0X51D3,0x0);
	MakeFrame(0X51D3, 0X0, 4, 0X0);
	MakeFunction    (0X51E7,0X5201);
	SetFunctionFlags(0X51E7,0x0);
	MakeFrame(0X51E7, 0X0, 2, 0X0);
	MakeFunction    (0X5201,0X526C);
	SetFunctionFlags(0X5201,0x0);
	MakeNameEx(0X5229, "bwdj", SN_LOCAL);
	MakeNameEx(0X522F, "chdir_retn", SN_LOCAL);
	MakeNameEx(0X5230, "REALCD", SN_LOCAL);
	MakeNameEx(0X5265, "BadChDir", SN_LOCAL);
	MakeNameEx(0X5268, "ChDirErr", SN_LOCAL);
	MakeFunction    (0X526C,0X52AE);
	SetFunctionFlags(0X526C,0x0);
	MakeNameEx(0X5289, "badmderr", SN_LOCAL);
	MakeNameEx(0X52A7, "MD_other_err", SN_LOCAL);
	MakeNameEx(0X52AA, "MkDirErr", SN_LOCAL);
	MakeFunction    (0X52AE,0X52E0);
	SetFunctionFlags(0X52AE,0x0);
	MakeNameEx(0X52C9, "mrdir_move_filename", SN_LOCAL);
	MakeNameEx(0X52D9, "noarger", SN_LOCAL);
	MakeFunction    (0X52E0,0X5306);
	SetFunctionFlags(0X52E0,0x0);
	MakeNameEx(0X52FF, "badrderr", SN_LOCAL);
	MakeNameEx(0X5302, "RmDirErr", SN_LOCAL);
	MakeFunction    (0X5306,0X531B);
	SetFunctionFlags(0X5306,0x0);
	MakeFunction    (0X531B,0X5341);
	SetFunctionFlags(0X531B,0x0);
	MakeNameEx(0X532C, "GOTUDRV", SN_LOCAL);
	MakeFunction    (0X5341,0X534E);
	SetFunctionFlags(0X5341,0x0);
	MakeFrame(0X5341, 0X0, 2, 0X0);
	MakeFunction    (0X534E,0X5356);
	SetFunctionFlags(0X534E,0x0);
	MakeFunction    (0X5356,0X536D);
	SetFunctionFlags(0X5356,0x0);
	MakeFunction    (0X536D,0X5393);
	SetFunctionFlags(0X536D,0x0);
	MakeNameEx(0X5370, "MAINNAME", SN_LOCAL);
	MakeNameEx(0X5376, "SKIPSPC", SN_LOCAL);
	MakeNameEx(0X5387, "EXTNAME", SN_LOCAL);
	MakeNameEx(0X538F, "GOTNAME", SN_LOCAL);
	MakeFunction    (0X5393,0X539E);
	SetFunctionFlags(0X5393,0x0);
	MakeFunction    (0X539E,0X53E0);
	SetFunctionFlags(0X539E,0x0);
	MakeFrame(0X539E, 0X0, 2, 0X0);
	MakeNameEx(0X53DD, "go_to_error", SN_LOCAL);
	MakeFunction    (0X53E0,0X53F1);
	SetFunctionFlags(0X53E0,0x0);
	MakeFrame(0X53E0, 0X0, 2, 0X0);
	MakeNameEx(0X53ED, "noslasht", SN_LOCAL);
	MakeNameEx(0X53EF, "pccont", SN_LOCAL);
	MakeFunction    (0X53F1,0X54F3);
	SetFunctionFlags(0X53F1,0x0);
	MakeNameEx(0X5423, "chdir_worked", SN_LOCAL);
	MakeNameEx(0X5433, "pcrunch_cderrj", SN_LOCAL);
	MakeNameEx(0X5436, "trypeel", SN_LOCAL);
	MakeNameEx(0X544A, "delstrt", SN_LOCAL);
	MakeNameEx(0X544F, "delloop", SN_LOCAL);
	MakeNameEx(0X545C, "notkanj8", SN_LOCAL);
	MakeNameEx(0X5466, "gotdele", SN_LOCAL);
	MakeNameEx(0X5471, "delloop2", SN_LOCAL);
	MakeNameEx(0X5487, "trycd", SN_LOCAL);
	MakeNameEx(0X5498, "trycd1", SN_LOCAL);
	MakeNameEx(0X54AE, "peelfail", SN_LOCAL);
	MakeNameEx(0X54B0, "notdoublesl", SN_LOCAL);
	MakeNameEx(0X54B9, "pcrunch_cderr", SN_LOCAL);
	MakeNameEx(0X54C2, "pcrunch_retn", SN_LOCAL);
	MakeNameEx(0X54C3, "badret", SN_LOCAL);
	MakeNameEx(0X54D9, "cdsucc", SN_LOCAL);
	MakeNameEx(0X54F1, "pcrunch_end", SN_LOCAL);
	MakeFunction    (0X54F5,0X5525);
	SetFunctionFlags(0X54F5,0x0);
	MakeNameEx(0X54F3, "RETSW", SN_LOCAL);
	MakeNameEx(0X54F7, "SWLOOP", SN_LOCAL);
	MakeNameEx(0X5523, "BADSW", SN_LOCAL);
	MakeFunction    (0X561A,0X5630);
	SetFunctionFlags(0X561A,0x0);
	MakeFrame(0X561A, 0X0, 2, 0X0);
	MakeFunction    (0X56DB,0X584B);
	SetFunctionFlags(0X56DB,0x0);
	MakeNameEx(0X56E6, "COUNTQUOTES", SN_LOCAL);
	MakeNameEx(0X56EF, "COUNTEND", SN_LOCAL);
	MakeNameEx(0X56F6, "KanjiScan", SN_LOCAL);
	MakeNameEx(0X570B, "KanjiQuote", SN_LOCAL);
	MakeNameEx(0X5713, "KanjiQuoteLoop", SN_LOCAL);
	MakeNameEx(0X571C, "KanjiEnd", SN_LOCAL);
	MakeNameEx(0X5723, "PRESCANLP", SN_LOCAL);
	MakeNameEx(0X5736, "NOTKANJ6", SN_LOCAL);
	MakeNameEx(0X573E, "QLOOP", SN_LOCAL);
	MakeNameEx(0X574A, "TRYGREATER", SN_LOCAL);
	MakeNameEx(0X5758, "NOAPPND", SN_LOCAL);
	MakeNameEx(0X5763, "REOUT_ERRSET", SN_LOCAL);
	MakeNameEx(0X5770, "GOTREOFIL", SN_LOCAL);
	MakeNameEx(0X5777, "SETREOUTSTR", SN_LOCAL);
	MakeNameEx(0X577B, "SETREOUTSTR_LOOP", SN_LOCAL);
	MakeNameEx(0X5797, "ABRACKET_TERM", SN_LOCAL);
	MakeNameEx(0X579A, "GOTRESTR_J", SN_LOCAL);
	MakeNameEx(0X579D, "NO_ABRACKET", SN_LOCAL);
	MakeNameEx(0X57A2, "PIPEERRSYNJ5_J", SN_LOCAL);
	MakeNameEx(0X57A5, "NOOUT", SN_LOCAL);
	MakeNameEx(0X57B6, "REIN_ERRSET", SN_LOCAL);
	MakeNameEx(0X57C1, "GOTREIFIL", SN_LOCAL);
	MakeNameEx(0X57CC, "CHKPIPE", SN_LOCAL);
	MakeNameEx(0X57D8, "ISPIPE3", SN_LOCAL);
	MakeNameEx(0X57E5, "NOECHOPUSH", SN_LOCAL);
	MakeNameEx(0X57F9, "PIPEERRSYNJ5", SN_LOCAL);
	MakeNameEx(0X57FE, "GOTRESTR", SN_LOCAL);
	MakeNameEx(0X5810, "NOTRAILCOL", SN_LOCAL);
	MakeNameEx(0X5815, "CONTPRESCAN", SN_LOCAL);
	MakeNameEx(0X5838, "PIPESETLP", SN_LOCAL);
	MakeNameEx(0X583E, "ISNOPIPE", SN_LOCAL);
	MakeFunction    (0X584B,0X5868);
	SetFunctionFlags(0X584B,0x0);
	MakeNameEx(0X585A, "cmdcopy", SN_LOCAL);
	MakeNameEx(0X5863, "copy_done", SN_LOCAL);
	MakeFunction    (0X5868,0X5879);
	SetFunctionFlags(0X5868,0x0);
	MakeFunction    (0X5879,0X58F7);
	SetFunctionFlags(0X5879,0x0);
	MakeNameEx(0X58A6, "SKIPPATH", SN_LOCAL);
	MakeNameEx(0X58AB, "SKIPPATH2", SN_LOCAL);
	MakeNameEx(0X58BC, "TESTPPSEP", SN_LOCAL);
	MakeNameEx(0X58C5, "TESTPMETA", SN_LOCAL);
	MakeNameEx(0X58CE, "TESTPSTAR", SN_LOCAL);
	MakeNameEx(0X58D7, "TESTPDELIM", SN_LOCAL);
	MakeNameEx(0X58E2, "PATHDONEDEC", SN_LOCAL);
	MakeNameEx(0X58E3, "PATHDONE", SN_LOCAL);
	MakeNameEx(0X58EE, "NOPSTORE", SN_LOCAL);
	MakeFunction    (0X58F7,0X5905);
	SetFunctionFlags(0X58F7,0x0);
	MakeFunction    (0X5905,0X5911);
	SetFunctionFlags(0X5905,0x0);
	MakeNameEx(0X590F, "PSCANOFFD", SN_LOCAL);
	MakeFunction    (0X5911,0X5935);
	SetFunctionFlags(0X5911,0x0);
	MakeFrame(0X5911, 0X0, 10, 0X0);
	MakeNameEx(0X592F, "NOREDIR", SN_LOCAL);
	MakeFunction    (0X5935,0X597D);
	SetFunctionFlags(0X5935,0x0);
	MakeNameEx(0X596A, "_CERRORJ", SN_LOCAL);
	MakeNameEx(0X596D, "OpenError", SN_LOCAL);
	MakeFunction    (0X597D,0X5A0E);
	SetFunctionFlags(0X597D,0x0);
	MakeNameEx(0X5987, "REOUTEXISTS", SN_LOCAL);
	MakeNameEx(0X59DA, "reout_0_length", SN_LOCAL);
	MakeNameEx(0X59EA, "OpenWriteError", SN_LOCAL);
	MakeNameEx(0X59F3, "REOUTCRT", SN_LOCAL);
	MakeNameEx(0X5A03, "NOREDIRERR", SN_LOCAL);
	MakeNameEx(0X5A05, "SET_REOUT", SN_LOCAL);
	MakeNameEx(0X5A0D, "NOREOUT", SN_LOCAL);
	MakeFunction    (0X5A0E,0X5A1C);
	SetFunctionFlags(0X5A0E,0x0);
	MakeFrame(0X5A0E, 0X0, 2, 0X0);
	MakeNameEx(0X5A12, "dloop", SN_LOCAL);
	MakeFunction    (0X5A1C,0X5A43);
	SetFunctionFlags(0X5A1C,0x0);
	MakeNameEx(0X5A3A, "NoMove", SN_LOCAL);
	MakeFunction    (0X5A47,0X5A6E);
	SetFunctionFlags(0X5A47,0x0);
	MakeFrame(0X5A47, 0X0, 6, 0X0);
	MakeFunction    (0X5A6E,0X5A83);
	SetFunctionFlags(0X5A6E,0x0);
	MakeFrame(0X5A6E, 0X0, 2, 0X0);
	MakeNameEx(0X5A81, "TESTDONE", SN_LOCAL);
	MakeFunction    (0X5A83,0X5A85);
	SetFunctionFlags(0X5A83,0x0);
	MakeFunction    (0X5A85,0X5A8F);
	SetFunctionFlags(0X5A85,0x0);
	MakeFrame(0X5A85, 0X0, 2, 0X0);
	MakeFunction    (0X5A8F,0X5AAF);
	SetFunctionFlags(0X5A8F,0x0);
	MakeFrame(0X5A8F, 0X0, 4, 0X0);
	MakeFunction    (0X5C4E,0X5CB7);
	SetFunctionFlags(0X5C4E,0x0);
	MakeNameEx(0X5C67, "PRMTDAT", SN_LOCAL);
	MakeNameEx(0X5C7A, "GET_NEW_DATE", SN_LOCAL);
	MakeNameEx(0X5C87, "COMDAT", SN_LOCAL);
	MakeNameEx(0X5CAB, "date_end", SN_LOCAL);
	MakeNameEx(0X5CAC, "DATERR", SN_LOCAL);
	MakeFunction    (0X5CB7,0X5D27);
	SetFunctionFlags(0X5CB7,0x0);
	MakeNameEx(0X5CD0, "PRMTTIM", SN_LOCAL);
	MakeNameEx(0X5CE6, "GET_NEW_TIME", SN_LOCAL);
	MakeNameEx(0X5CF3, "COMTIM", SN_LOCAL);
	MakeNameEx(0X5D1B, "time_end", SN_LOCAL);
	MakeNameEx(0X5D1C, "TIMERR", SN_LOCAL);
	MakeFunction    (0X5D27,0X5D37);
	SetFunctionFlags(0X5D27,0x0);
	MakeFunction    (0X5D37,0X5D4F);
	SetFunctionFlags(0X5D37,0x0);
	MakeFrame(0X5D37, 0X0, 4, 0X0);
	MakeNameEx(0X5D4C, "PipeOffDone", SN_LOCAL);
	MakeFunction    (0X5D6C,0X5DC7);
	SetFunctionFlags(0X5D6C,0x0);
	MakeNameEx(0X5D8B, "printformat", SN_LOCAL);
	MakeFunction    (0X5DC7,0X5DF2);
	SetFunctionFlags(0X5DC7,0x0);
	MakeFunction    (0X5DF2,0X5DFE);
	SetFunctionFlags(0X5DF2,0x0);
	MakeNameEx(0X5DF3, "skw_lp", SN_LOCAL);
	MakeFunction    (0X5DFE,0X5E25);
	SetFunctionFlags(0X5DFE,0x0);
	MakeFunction    (0X5E25,0X5EAD);
	SetFunctionFlags(0X5E25,0x0);
	MakeFrame(0X5E25, 0X0, 12, 0X0);
	MakeNameEx(0X5E73, "PCONT", SN_LOCAL);
	MakeNameEx(0X5E78, "PARSELOOP", SN_LOCAL);
	MakeNameEx(0X5E94, "MORE_PRSE", SN_LOCAL);
	MakeNameEx(0X5EA0, "PARSEDONE", SN_LOCAL);
	MakeNameEx(0X5EA4, "PARSE_ERROR", SN_LOCAL);
	MakeNameEx(0X5EA6, "PARSE_EXIT", SN_LOCAL);
	MakeFunction    (0X5EAD,0X5F1C);
	SetFunctionFlags(0X5EAD,0x0);
	MakeFrame(0X5EAD, 0X0, 10, 0X0);
	MakeNameEx(0X5F0C, "to_many_args", SN_LOCAL);
	MakeNameEx(0X5F11, "buf_oflow", SN_LOCAL);
	MakeNameEx(0X5F14, "newarg_error", SN_LOCAL);
	MakeNameEx(0X5F16, "newarg_exit", SN_LOCAL);
	MakeFunction    (0X5F1C,0X5F4F);
	SetFunctionFlags(0X5F1C,0x0);
	MakeFrame(0X5F1C, 0X0, 8, 0X0);
	MakeNameEx(0X5F42, "arg_no_switch0", SN_LOCAL);
	MakeNameEx(0X5F48, "arg_no_switch1", SN_LOCAL);
	MakeNameEx(0X5F4A, "arg_switch_exit", SN_LOCAL);
	MakeFunction    (0X5F4F,0X5F5B);
	SetFunctionFlags(0X5F4F,0x0);
	MakeFrame(0X5F4F, 0X0, 2, 0X0);
	MakeFunction    (0X5F5B,0X60CA);
	SetFunctionFlags(0X5F5B,0x0);
	MakeFrame(0X5F5B, 0X0, 12, 0X0);
	MakeNameEx(0X5F69, "path_failure_jmp", SN_LOCAL);
	MakeNameEx(0X5F6C, "path_search_ok", SN_LOCAL);
	MakeNameEx(0X5FBD, "adddrive", SN_LOCAL);
	MakeNameEx(0X5FC5, "movedrive", SN_LOCAL);
	MakeNameEx(0X5FCA, "checkpath", SN_LOCAL);
	MakeNameEx(0X5FE4, "addpath", SN_LOCAL);
	MakeNameEx(0X5FF7, "scanend", SN_LOCAL);
	MakeNameEx(0X5FFF, "foundend", SN_LOCAL);
	MakeNameEx(0X6000, "movepath", SN_LOCAL);
	MakeNameEx(0X6006, "copypath", SN_LOCAL);
	MakeNameEx(0X600A, "_copydone", SN_LOCAL);
	MakeNameEx(0X600D, "path_noinit", SN_LOCAL);
	MakeNameEx(0X6022, "path_loop", SN_LOCAL);
	MakeNameEx(0X602F, "path_failure", SN_LOCAL);
	MakeNameEx(0X6034, "path_found", SN_LOCAL);
	MakeNameEx(0X6087, "path_cpy", SN_LOCAL);
	MakeNameEx(0X6091, "kloop", SN_LOCAL);
	MakeNameEx(0X60A2, "popdone", SN_LOCAL);
	MakeNameEx(0X60A8, "notkanj1", SN_LOCAL);
	MakeNameEx(0X60B4, "path_store", SN_LOCAL);
	MakeNameEx(0X60BA, "path_succ_loop", SN_LOCAL);
	MakeNameEx(0X60C2, "path_exit", SN_LOCAL);
	MakeFunction    (0X60CA,0X60DE);
	SetFunctionFlags(0X60CA,0x0);
	MakeFrame(0X60CA, 0X0, 2, 0X0);
	MakeNameEx(0X60D9, "STORE_SLASH", SN_LOCAL);
	MakeFunction    (0X60DE,0X6153);
	SetFunctionFlags(0X60DE,0x0);
	MakeFrame(0X60DE, 0X0, 10, 0X0);
	MakeNameEx(0X60FA, "path_cr_copy", SN_LOCAL);
	MakeNameEx(0X610E, "_notkanj2", SN_LOCAL);
	MakeNameEx(0X6113, "path_seg", SN_LOCAL);
	MakeNameEx(0X612E, "path_cr_store", SN_LOCAL);
	MakeNameEx(0X612F, "path_cr_l1", SN_LOCAL);
	MakeNameEx(0X6131, "path_cr_l2", SN_LOCAL);
	MakeNameEx(0X6143, "path_cr_leave", SN_LOCAL);
	MakeNameEx(0X614B, "path_cr_empty", SN_LOCAL);
	MakeNameEx(0X614D, "path_cr_exit", SN_LOCAL);
	MakeFunction    (0X6153,0X61D2);
	SetFunctionFlags(0X6153,0x0);
	MakeFrame(0X6153, 0X0, 8, 0X0);
	MakeNameEx(0X616E, "SEARCH_DIR_CHECK", SN_LOCAL);
	MakeNameEx(0X618A, "SEARCH_LOOP", SN_LOCAL);
	MakeNameEx(0X61A6, "SEARCH_NEXT", SN_LOCAL);
	MakeNameEx(0X61B0, "SEARCH_DONE", SN_LOCAL);
	MakeNameEx(0X61C2, "SEARCH_INVALID_DRIVE", SN_LOCAL);
	MakeNameEx(0X61C9, "SEARCH_NO_FILE", SN_LOCAL);
	MakeNameEx(0X61CC, "SEARCH_EXIT", SN_LOCAL);
	MakeFunction    (0X61D2,0X622D);
	SetFunctionFlags(0X61D2,0x0);
	MakeFrame(0X61D2, 0X0, 4, 0X0);
	MakeNameEx(0X61F5, "FTYPE_EXE", SN_LOCAL);
	MakeNameEx(0X6205, "FTYPE_BAT", SN_LOCAL);
	MakeNameEx(0X6215, "FTYPE_FAIL", SN_LOCAL);
	MakeNameEx(0X6218, "FTYPE_EXIT", SN_LOCAL);
	MakeNameEx(0X622A, "FTYPE_DONE", SN_LOCAL);
	MakeFunction    (0X622D,0X628F);
	SetFunctionFlags(0X622D,0x0);
	MakeFrame(0X622D, 0X0, 12, 0X0);
	MakeNameEx(0X625F, "PROCESS_EXT", SN_LOCAL);
	MakeNameEx(0X6282, "SKIP_WILDS", SN_LOCAL);
	MakeNameEx(0X6286, "STRIP_ERROR", SN_LOCAL);
	MakeNameEx(0X6288, "STRIP_EXIT", SN_LOCAL);
	MakeFunction    (0X628F,0X62F6);
	SetFunctionFlags(0X628F,0x0);
	MakeFrame(0X628F, 0X0, 12, 0X0);
	MakeNameEx(0X62BD, "SAVE_PTR_LOOP", SN_LOCAL);
	MakeNameEx(0X62E4, "SAVE_DONE", SN_LOCAL);
	MakeNameEx(0X62E9, "SAVE_ERROR", SN_LOCAL);
	MakeNameEx(0X62ED, "SAVE_OK", SN_LOCAL);
	MakeNameEx(0X62EF, "SAVE_EXIT", SN_LOCAL);
	MakeFunction    (0X640C,0X6446);
	SetFunctionFlags(0X640C,0x0);
	MakeFrame(0X640C, 0X0, 0, 0X0);
	MakeNameEx(0X641D, "ECH_OFF", SN_LOCAL);
	MakeNameEx(0X6426, "DOEMES", SN_LOCAL);
	MakeNameEx(0X6434, "PECHO", SN_LOCAL);
	MakeNameEx(0X6472, "PRINTVAL", SN_LOCAL);
	MakeFunction    (0X6446,0X6468);
	SetFunctionFlags(0X6446,0x0);
	MakeNameEx(0X6455, "CNTRLC_OFF", SN_LOCAL);
	MakeNameEx(0X645A, "PCNTRLC", SN_LOCAL);
	MakeFunction    (0X6489,0X64AB);
	SetFunctionFlags(0X6489,0x0);
	MakeNameEx(0X6496, "VER_OFF", SN_LOCAL);
	MakeNameEx(0X649B, "PVERIFY", SN_LOCAL);
	MakeFunction    (0X64AB,0X6500);
	SetFunctionFlags(0X64AB,0x0);
	MakeNameEx(0X64AE, "scan_on_off", SN_LOCAL);
	MakeNameEx(0X64BC, "parse_on_off", SN_LOCAL);
	MakeNameEx(0X64D4, "on_off_there", SN_LOCAL);
	MakeNameEx(0X64E0, "good_on_off", SN_LOCAL);
	MakeNameEx(0X64F8, "BADONF_flag", SN_LOCAL);
	MakeNameEx(0X64FB, "BADONF", SN_LOCAL);
	MakeNameEx(0X64FF, "on_off_end", SN_LOCAL);
	MakeFunction    (0X651A,0X6543);
	SetFunctionFlags(0X651A,0x0);
	MakeFunction    (0X6543,0X654D);
	SetFunctionFlags(0X6543,0x0);
	MakeFunction    (0X654D,0X67D3);
	SetFunctionFlags(0X654D,0x20);
	MakeFrame(0X654D, 0X0, 0, 0X0);
	MakeNameEx(0X6600, "DESTSCAN", SN_LOCAL);
	MakeNameEx(0X661B, "NOCOPY", SN_LOCAL);
	MakeNameEx(0X6623, "CHK_CP_SWITCH", SN_LOCAL);
	MakeNameEx(0X6635, "NOT_SLASHV", SN_LOCAL);
	MakeNameEx(0X664B, "NOT_SLASHY1", SN_LOCAL);
	MakeNameEx(0X664F, "NOT_SLASHY2", SN_LOCAL);
	MakeNameEx(0X6654, "CHK_SLASHY0", SN_LOCAL);
	MakeNameEx(0X666A, "CHK_SLASHY1", SN_LOCAL);
	MakeNameEx(0X667E, "CHK_SLASHY2", SN_LOCAL);
	MakeNameEx(0X6682, "CHK_SLASHY3", SN_LOCAL);
	MakeNameEx(0X6687, "CHK_SLASHY4", SN_LOCAL);
	MakeNameEx(0X669F, "NOT_BAD_SWITCH", SN_LOCAL);
	MakeNameEx(0X66A5, "TESTP2", SN_LOCAL);
	MakeNameEx(0X66B1, "GOTPLUS", SN_LOCAL);
	MakeNameEx(0X66D7, "CHECKDONE", SN_LOCAL);
	MakeNameEx(0X66F2, "CDCONT", SN_LOCAL);
	MakeNameEx(0X6711, "TRY_TOO_MANY", SN_LOCAL);
	MakeNameEx(0X671E, "CERROR_PARSEJ", SN_LOCAL);
	MakeNameEx(0X6723, "CERROR4J", SN_LOCAL);
	MakeNameEx(0X6726, "ACOUNTOK", SN_LOCAL);
	MakeNameEx(0X674D, "GOT2ARGS", SN_LOCAL);
	MakeNameEx(0X6769, "NOTSHORTDEST", SN_LOCAL);
	MakeNameEx(0X6786, "CHKSWTCHES", SN_LOCAL);
	MakeNameEx(0X67A2, "NOVERIF", SN_LOCAL);
	MakeNameEx(0X67A9, "SCANFSRC", SN_LOCAL);
	MakeNameEx(0X67CA, "NOSETCASC", SN_LOCAL);
	MakeNameEx(0X67E7, "SRCNONEXIST", SN_LOCAL);
	MakeNameEx(0X6831, "NEXTSRC", SN_LOCAL);
	MakeNameEx(0X6838, "ENDCOPYJ2", SN_LOCAL);
	MakeNameEx(0X683A, "MORECP", SN_LOCAL);
	MakeNameEx(0X6842, "SCANSRC", SN_LOCAL);
	MakeNameEx(0X6865, "NOSTAMP", SN_LOCAL);
	MakeNameEx(0X686A, "FIRSTENT", SN_LOCAL);
	MakeNameEx(0X6881, "DRVSPEC1", SN_LOCAL);
	MakeNameEx(0X688D, "SRCHDONE", SN_LOCAL);
	MakeNameEx(0X6897, "NEXTAMBIG0", SN_LOCAL);
	MakeNameEx(0X68A1, "SETNMEL", SN_LOCAL);
	MakeNameEx(0X68AC, "NEXTAMBIG", SN_LOCAL);
	MakeNameEx(0X68BB, "MELDO0", SN_LOCAL);
	MakeNameEx(0X68EA, "MELDO1", SN_LOCAL);
	MakeNameEx(0X6906, "MELDO2", SN_LOCAL);
	MakeNameEx(0X6914, "MELDO3", SN_LOCAL);
	MakeNameEx(0X691C, "MELDO4", SN_LOCAL);
	MakeNameEx(0X692B, "MELDO5", SN_LOCAL);
	MakeNameEx(0X6933, "MELDO", SN_LOCAL);
	MakeNameEx(0X6941, "SHOWCPNAM", SN_LOCAL);
	MakeNameEx(0X694A, "DOREAD", SN_LOCAL);
	MakeNameEx(0X695E, "NODCLOSE", SN_LOCAL);
	MakeNameEx(0X6971, "NOFLUSH", SN_LOCAL);
	MakeNameEx(0X697E, "DOMELCOPY", SN_LOCAL);
	MakeNameEx(0X6992, "CONTMEL", SN_LOCAL);
	MakeNameEx(0X699A, "SCANSRC2", SN_LOCAL);
	MakeNameEx(0X69D1, "MELDOJ", SN_LOCAL);
	MakeNameEx(0X69D4, "NEXTSRCJ", SN_LOCAL);
	MakeNameEx(0X69D7, "NEXTMEL", SN_LOCAL);
	MakeNameEx(0X69F5, "SETNMELJ", SN_LOCAL);
	MakeFunction    (0X680A,0X6814);
	SetFunctionFlags(0X680A,0x0);
	MakeFunction    (0X6814,0X6831);
	SetFunctionFlags(0X6814,0x0);
	MakeFunction    (0X69F8,0X6A04);
	SetFunctionFlags(0X69F8,0x0);
	MakeFunction    (0X6A04,0X6A15);
	SetFunctionFlags(0X6A04,0x0);
	MakeFrame(0X6A04, 0X0, 2, 0X0);
	MakeFunction    (0X6A15,0X6B12);
	SetFunctionFlags(0X6A15,0x0);
	MakeNameEx(0X6A35, "OPENOK", SN_LOCAL);
	MakeNameEx(0X6A4C, "Error_On_Source", SN_LOCAL);
	MakeNameEx(0X6A67, "No_Close_Src", SN_LOCAL);
	MakeNameEx(0X6A71, "EndCopyJ3", SN_LOCAL);
	MakeNameEx(0X6A74, "No_Copy_Xa", SN_LOCAL);
	MakeNameEx(0X6A93, "COPYLP", SN_LOCAL);
	MakeNameEx(0X6AB1, "GOTROOM", SN_LOCAL);
	MakeNameEx(0X6ACF, "NOTESTA", SN_LOCAL);
	MakeNameEx(0X6AE6, "USEALL", SN_LOCAL);
	MakeNameEx(0X6AEA, "BINREAD", SN_LOCAL);
	MakeNameEx(0X6B04, "TESTDEV", SN_LOCAL);
	MakeFunction    (0X6B12,0X6B1B);
	SetFunctionFlags(0X6B12,0x0);
	MakeFunction    (0X6B1B,0X6BAB);
	SetFunctionFlags(0X6B1B,0x0);
	MakeNameEx(0X6B33, "CONCHNG", SN_LOCAL);
	MakeNameEx(0X6B35, "NOCONC", SN_LOCAL);
	MakeNameEx(0X6B58, "BINCLOS", SN_LOCAL);
	MakeNameEx(0X6B62, "FORGETITJ", SN_LOCAL);
	MakeNameEx(0X6B67, "NO_FORGET", SN_LOCAL);
	MakeNameEx(0X6BF1, "FORGETIT", SN_LOCAL);
	MakeFunction    (0X6BAB,0X6BF1);
	SetFunctionFlags(0X6BAB,0x0);
	MakeNameEx(0X6BD1, "Cleanup_Err", SN_LOCAL);
	MakeNameEx(0X6BD9, "Close_Cont", SN_LOCAL);
	MakeNameEx(0X6BE7, "CLOSEDONE", SN_LOCAL);
	MakeNameEx(0X6BEB, "FILECLOSED", SN_LOCAL);
	MakeFunction    (0X6C03,0X6C0B);
	SetFunctionFlags(0X6C03,0x0);
	MakeFunction    (0X6C0B,0X6C34);
	SetFunctionFlags(0X6C0B,0x0);
	MakeFrame(0X6C0B, 0X0, 2, 0X0);
	MakeFunction    (0X6C34,0X6C4D);
	SetFunctionFlags(0X6C34,0x0);
	MakeNameEx(0X6C4C, "CleanupErr_Cont", SN_LOCAL);
	MakeFunction    (0X6C4D,0X6D1A);
	SetFunctionFlags(0X6C4D,0x0);
	MakeNameEx(0X6C5F, "getansw_1", SN_LOCAL);
	MakeNameEx(0X6C9D, "getansw_2", SN_LOCAL);
	MakeNameEx(0X6CC5, "getansw_3", SN_LOCAL);
	MakeNameEx(0X6CE5, "getansw_4", SN_LOCAL);
	MakeNameEx(0X6D15, "getansw_5", SN_LOCAL);
	MakeNameEx(0X6D18, "getansw_6", SN_LOCAL);
	MakeNameEx(0X6D19, "getansw_7", SN_LOCAL);
	MakeFunction    (0X6D1A,0X6D59);
	SetFunctionFlags(0X6D1A,0x0);
	MakeNameEx(0X6D44, "icpcmd_1", SN_LOCAL);
	MakeNameEx(0X6D49, "icpcmd_2", SN_LOCAL);
	MakeNameEx(0X6D4B, "icpcmd_3", SN_LOCAL);
	MakeFunction    (0X6D59,0X6D6D);
	SetFunctionFlags(0X6D59,0x0);
	MakeNameEx(0X6D68, "gcpcmdo_1", SN_LOCAL);
	MakeNameEx(0X6D6B, "gcpcmdo_2", SN_LOCAL);
	MakeNameEx(0X6D6C, "gcpcmdo_3", SN_LOCAL);
	MakeFunction    (0X6D6D,0X6D8D);
	SetFunctionFlags(0X6D6D,0x0);
	MakeNameEx(0X6D71, "gecpcmd_1", SN_LOCAL);
	MakeNameEx(0X6D88, "gecpcmd_2", SN_LOCAL);
	MakeNameEx(0X6D8B, "gecpcmd_3", SN_LOCAL);
	MakeNameEx(0X6D8C, "gecpcmd_4", SN_LOCAL);
	MakeFunction    (0X6D8D,0X6D9A);
	SetFunctionFlags(0X6D8D,0x0);
	MakeFunction    (0X6D9A,0X6F38);
	SetFunctionFlags(0X6D9A,0x0);
	MakeNameEx(0X6DA9, "NotExists", SN_LOCAL);
	MakeNameEx(0X6DC5, "No_Concat_Err", SN_LOCAL);
	MakeNameEx(0X6DCA, "ProcDest", SN_LOCAL);
	MakeNameEx(0X6DE2, "DoDestOpen", SN_LOCAL);
	MakeNameEx(0X6DE6, "Xa_Set_Error", SN_LOCAL);
	MakeNameEx(0X6DF7, "Dest_Open_Okay", SN_LOCAL);
	MakeNameEx(0X6E1F, "TestBoth", SN_LOCAL);
	MakeNameEx(0X6E38, "ExSetA", SN_LOCAL);
	MakeNameEx(0X6E42, "Exists", SN_LOCAL);
	MakeNameEx(0X6E6C, "Ret60", SN_LOCAL);
	MakeNameEx(0X6E6D, "NoChecking", SN_LOCAL);
	MakeNameEx(0X6E98, "NoChecking2", SN_LOCAL);
	MakeNameEx(0X6EB4, "DevWrtErr", SN_LOCAL);
	MakeNameEx(0X6EB9, "SeekEnd", SN_LOCAL);
	MakeNameEx(0X6F1B, "ceClose0", SN_LOCAL);
	MakeNameEx(0X6F22, "ceClose", SN_LOCAL);
	MakeNameEx(0X6F26, "NoClose", SN_LOCAL);
	MakeNameEx(0X6F32, "EndCopyJ", SN_LOCAL);
	MakeNameEx(0X6F35, "Xa_Set_Error_Jmp", SN_LOCAL);
	MakeFunction    (0X6F38,0X6F52);
	SetFunctionFlags(0X6F38,0x0);
	MakeNameEx(0X6F4C, "LOADSW", SN_LOCAL);
	MakeFunction    (0X6F52,0X7013);
	SetFunctionFlags(0X6F52,0x0);
	MakeNameEx(0X6F65, "KNOWABOUTDEST", SN_LOCAL);
	MakeNameEx(0X6F72, "FIRSTDST", SN_LOCAL);
	MakeNameEx(0X6F89, "GOODPARSE", SN_LOCAL);
	MakeNameEx(0X6F93, "DRVSPEC4", SN_LOCAL);
	MakeNameEx(0X6FBF, "NOTMELCOPY", SN_LOCAL);
	MakeNameEx(0X6FC5, "SETCONC", SN_LOCAL);
	MakeNameEx(0X6FFF, "NOFIRSTDEST", SN_LOCAL);
	MakeNameEx(0X700C, "GOTCHRSRC", SN_LOCAL);
	MakeFunction    (0X7013,0X7043);
	SetFunctionFlags(0X7013,0x0);
	MakeNameEx(0X7016, "BUILDMAIN", SN_LOCAL);
	MakeNameEx(0X701D, "NOTAMBIG", SN_LOCAL);
	MakeNameEx(0X7022, "NOSTORE", SN_LOCAL);
	MakeNameEx(0X7030, "BUILDEXT", SN_LOCAL);
	MakeNameEx(0X7037, "NOTAMBIGE", SN_LOCAL);
	MakeNameEx(0X703C, "NOSTOREE", SN_LOCAL);
	MakeNameEx(0X703F, "ENDDEST", SN_LOCAL);
	MakeFunction    (0X7043,0X7193);
	SetFunctionFlags(0X7043,0x0);
	MakeNameEx(0X7076, "PURE_FILE", SN_LOCAL);
	MakeNameEx(0X708C, "NOTPFILE", SN_LOCAL);
	MakeNameEx(0X7099, "SET_DRIVE_SPEC", SN_LOCAL);
	MakeNameEx(0X709B, "DRVSPEC5", SN_LOCAL);
	MakeNameEx(0X70AC, "CURDIR_OK", SN_LOCAL);
	MakeNameEx(0X70CC, "KNOWNOTSPEC", SN_LOCAL);
	MakeNameEx(0X70D1, "DOPCDJ", SN_LOCAL);
	MakeNameEx(0X70D4, "CHECKAMB", SN_LOCAL);
	MakeNameEx(0X70D9, "ISADEV", SN_LOCAL);
	MakeNameEx(0X70DE, "CHECKCD", SN_LOCAL);
	MakeNameEx(0X70EE, "Kloop", SN_LOCAL);
	MakeNameEx(0X7102, "DONE", SN_LOCAL);
	MakeNameEx(0X7113, "_STORE_PCHAR", SN_LOCAL);
	MakeNameEx(0X7118, "GOTSRCSLSH", SN_LOCAL);
	MakeNameEx(0X711F, "NOTPDIR_RETN", SN_LOCAL);
	MakeNameEx(0X7120, "NOTPDIR", SN_LOCAL);
	MakeNameEx(0X712D, "NOTPDIR_TRY", SN_LOCAL);
	MakeNameEx(0X7157, "DOPCD", SN_LOCAL);
	MakeNameEx(0X7168, "Kloop2", SN_LOCAL);
	MakeNameEx(0X7177, "NotKanj4", SN_LOCAL);
	MakeNameEx(0X717D, "LookBack", SN_LOCAL);
	MakeNameEx(0X7182, "DoCdr", SN_LOCAL);
	MakeNameEx(0X718D, "EXTEND_SETUPJ", SN_LOCAL);
	MakeNameEx(0X7190, "BADCDERRJ2", SN_LOCAL);
	MakeFunction    (0X7193,0X71AF);
	SetFunctionFlags(0X7193,0x0);
	MakeFunction    (0X71AF,0X71C3);
	SetFunctionFlags(0X71AF,0x0);
	MakeFunction    (0X71C3,0X7384);
	SetFunctionFlags(0X71C3,0x0);
	MakeNameEx(0X71D9, "moredelim", SN_LOCAL);
	MakeNameEx(0X71F9, "no_comma", SN_LOCAL);
	MakeNameEx(0X71FC, "SCANCDONE", SN_LOCAL);
	MakeNameEx(0X7205, "nospec", SN_LOCAL);
	MakeNameEx(0X720C, "ncperror", SN_LOCAL);
	MakeNameEx(0X7215, "na_switch", SN_LOCAL);
	MakeNameEx(0X7225, "cpcont2", SN_LOCAL);
	MakeNameEx(0X7238, "anum_chard", SN_LOCAL);
	MakeNameEx(0X7265, "anum_char", SN_LOCAL);
	MakeNameEx(0X7270, "NOTKANJ", SN_LOCAL);
	MakeNameEx(0X727A, "TESTDOT", SN_LOCAL);
	MakeNameEx(0X7287, "testquest", SN_LOCAL);
	MakeNameEx(0X728E, "testsplat", SN_LOCAL);
	MakeNameEx(0X729E, "BADPERR2J", SN_LOCAL);
	MakeNameEx(0X72A0, "expand_filename", SN_LOCAL);
	MakeNameEx(0X72AB, "gotelcnt", SN_LOCAL);
	MakeNameEx(0X72B7, "qmove", SN_LOCAL);
	MakeNameEx(0X72C0, "testpathx", SN_LOCAL);
	MakeNameEx(0X72C2, "testpath", SN_LOCAL);
	MakeNameEx(0X72D6, "no_err_check", SN_LOCAL);
	MakeNameEx(0X72E8, "notspecial", SN_LOCAL);
	MakeNameEx(0X72EB, "anum_test", SN_LOCAL);
	MakeNameEx(0X7306, "FOO15", SN_LOCAL);
	MakeNameEx(0X7312, "cpcont4", SN_LOCAL);
	MakeNameEx(0X7318, "BADPERR2", SN_LOCAL);
	MakeNameEx(0X731E, "BADPERR", SN_LOCAL);
	MakeNameEx(0X7324, "cperror", SN_LOCAL);
	MakeNameEx(0X7329, "x_done", SN_LOCAL);
	MakeNameEx(0X732C, "a_switch", SN_LOCAL);
	MakeNameEx(0X7349, "a_switch_notkanj", SN_LOCAL);
	MakeNameEx(0X7356, "Store_swt", SN_LOCAL);
	MakeNameEx(0X737A, "out_tokenp", SN_LOCAL);
	MakeNameEx(0X737D, "out_token", SN_LOCAL);
	MakeFunction    (0X7384,0X738B);
	SetFunctionFlags(0X7384,0x0);
	MakeFunction    (0X738B,0X7515);
	SetFunctionFlags(0X738B,0x0);
	MakeNameEx(0X73EC, "$P_Fin", SN_LOCAL);
	MakeNameEx(0X73F0, "$P_Start", SN_LOCAL);
	MakeNameEx(0X7404, "$P_Pack_Loop", SN_LOCAL);
	MakeNameEx(0X7421, "$P_Pack_End_backup_si", SN_LOCAL);
	MakeNameEx(0X742C, "$P_PL01", SN_LOCAL);
	MakeNameEx(0X7439, "$P_PL00", SN_LOCAL);
	MakeNameEx(0X7446, "$P_Pack_End_BY_EOL", SN_LOCAL);
	MakeNameEx(0X7447, "$P_Pack_End", SN_LOCAL);
	MakeNameEx(0X7470, "$P_Positional_Manager", SN_LOCAL);
	MakeNameEx(0X748F, "$P_Too_Many_Error", SN_LOCAL);
	MakeNameEx(0X7498, "$P_SW_Manager", SN_LOCAL);
	MakeNameEx(0X74AD, "$P_SW_Mgr_Loop", SN_LOCAL);
	MakeNameEx(0X74BB, "$P_SW_Not_Found", SN_LOCAL);
	MakeNameEx(0X74C4, "$P_Key_Manager", SN_LOCAL);
	MakeNameEx(0X74E3, "$P_Key_Mgr_Loop", SN_LOCAL);
	MakeNameEx(0X74F1, "$P_Key_Not_Found", SN_LOCAL);
	MakeNameEx(0X74F8, "$P_Return_to_Caller", SN_LOCAL);
	MakeNameEx(0X7513, "$P_Single_Exit", SN_LOCAL);
	MakeFunction    (0X7515,0X7547);
	SetFunctionFlags(0X7515,0x0);
	MakeFrame(0X7515, 0X0, 2, 0X0);
	MakeNameEx(0X7537, "$P_CPC02", SN_LOCAL);
	MakeNameEx(0X7542, "$P_CPC01", SN_LOCAL);
	MakeNameEx(0X7545, "$P_CPC_Exit", SN_LOCAL);
	MakeFunction    (0X7547,0X7549);
	SetFunctionFlags(0X7547,0x0);
	MakeFunction    (0X7549,0X756E);
	SetFunctionFlags(0X7549,0x0);
	MakeFrame(0X7549, 0X0, 4, 0X0);
	MakeNameEx(0X7558, "$P_KEYorSW_Loop", SN_LOCAL);
	MakeNameEx(0X7562, "$P_KEYorSW_Not_Found", SN_LOCAL);
	MakeNameEx(0X7565, "P_KEYorSW_Found", SN_LOCAL);
	MakeNameEx(0X756B, "$P_KEYorSW_Exit", SN_LOCAL);
	MakeFunction    (0X756E,0X757A);
	SetFunctionFlags(0X756E,0x0);
	MakeNameEx(0X7578, "$P_MBP_Exit", SN_LOCAL);
	MakeFunction    (0X757A,0X75DD);
	SetFunctionFlags(0X757A,0x0);
	MakeNameEx(0X75B3, "$P_Chk_if_data_required", SN_LOCAL);
	MakeNameEx(0X75C9, "$P_CSW00", SN_LOCAL);
	MakeNameEx(0X75CF, "$P_Chk_SW_Err0", SN_LOCAL);
	MakeNameEx(0X75D2, "$P_Chk_SW_Exit", SN_LOCAL);
	MakeNameEx(0X75DC, "P_Chk_SW_Single_Exit", SN_LOCAL);
	MakeFunction    (0X75DD,0X7662);
	SetFunctionFlags(0X75DD,0x0);
	MakeFrame(0X75DD, 0X0, 2, 0X0);
	MakeNameEx(0X75FC, "$P_RLT02", SN_LOCAL);
	MakeNameEx(0X7606, "$P_RLT00", SN_LOCAL);
	MakeNameEx(0X7610, "$P_RLT01", SN_LOCAL);
	MakeNameEx(0X7622, "$P_RLT03", SN_LOCAL);
	MakeNameEx(0X7635, "$P_RLT05", SN_LOCAL);
	MakeNameEx(0X7649, "$P_RLT_CAP00", SN_LOCAL);
	MakeNameEx(0X7652, "P_RLT_CAP02", SN_LOCAL);
	MakeNameEx(0X7655, "$P_RLT_CAP01", SN_LOCAL);
	MakeNameEx(0X7660, "$P_RLT_Exit", SN_LOCAL);
	MakeFunction    (0X7662,0X7742);
	SetFunctionFlags(0X7662,0x0);
	MakeNameEx(0X7688, "$P_Mat", SN_LOCAL);
	MakeNameEx(0X769F, "$P_Match02", SN_LOCAL);
	MakeNameEx(0X76B8, "$P_Bridge", SN_LOCAL);
	MakeNameEx(0X76BB, "$P_Match03", SN_LOCAL);
	MakeNameEx(0X76D2, "$P_Match04", SN_LOCAL);
	MakeNameEx(0X76E9, "$P_Match05", SN_LOCAL);
	MakeNameEx(0X7703, "$P_Match06", SN_LOCAL);
	MakeNameEx(0X771A, "$P_Match07", SN_LOCAL);
	MakeNameEx(0X7729, "$P_Match_Exit", SN_LOCAL);
	MakeNameEx(0X7740, "$P_Match2_Exit", SN_LOCAL);
	MakeFunction    (0X7742,0X7768);
	SetFunctionFlags(0X7742,0x0);
	MakeFrame(0X7742, 0X0, 4, 0X0);
	MakeNameEx(0X7744, "$P_RCOL_Loop", SN_LOCAL);
	MakeNameEx(0X775C, "$P_RCOL00", SN_LOCAL);
	MakeNameEx(0X7762, "$P_RCOL01", SN_LOCAL);
	MakeNameEx(0X7765, "$P_RCOL_Exit", SN_LOCAL);
	MakeFunction    (0X7768,0X7787);
	SetFunctionFlags(0X7768,0x0);
	MakeFrame(0X7768, 0X0, 4, 0X0);
	MakeNameEx(0X776C, "$P_DCS_Loop", SN_LOCAL);
	MakeNameEx(0X7780, "$P_DCS0", SN_LOCAL);
	MakeNameEx(0X7781, "$P_DCS01", SN_LOCAL);
	MakeNameEx(0X7784, "$P_DCS_Exit", SN_LOCAL);
	MakeFunction    (0X7787,0X77D5);
	SetFunctionFlags(0X7787,0x0);
	MakeNameEx(0X7797, "$P_DCC_Go", SN_LOCAL);
	MakeNameEx(0X77A7, "$P_DCC00", SN_LOCAL);
	MakeNameEx(0X77C3, "$P_DCC01", SN_LOCAL);
	MakeNameEx(0X77D4, "$P_CAPS_Ret", SN_LOCAL);
	MakeFunction    (0X77D5,0X77F9);
	SetFunctionFlags(0X77D5,0x0);
	MakeFrame(0X77D5, 0X0, 2, 0X0);
	MakeNameEx(0X77F3, "$P_SVal00", SN_LOCAL);
	MakeNameEx(0X77F4, "$P_Sval01", SN_LOCAL);
	MakeFunction    (0X77F9,0X78EB);
	SetFunctionFlags(0X77F9,0x0);
	MakeFrame(0X77F9, 0X0, 8, 0X0);
	MakeNameEx(0X7802, "$P_Value_Loop", SN_LOCAL);
	MakeNameEx(0X7847, "$P_Value_Err0", SN_LOCAL);
	MakeNameEx(0X784B, "$P_Value00", SN_LOCAL);
	MakeNameEx(0X785E, "$P_Value01", SN_LOCAL);
	MakeNameEx(0X7870, "$P_Value02", SN_LOCAL);
	MakeNameEx(0X7879, "$P_Val02_Loop", SN_LOCAL);
	MakeNameEx(0X788F, "$P_Val_In", SN_LOCAL);
	MakeNameEx(0X789F, "$P_Val02_Sign", SN_LOCAL);
	MakeNameEx(0X78AD, "$P_SVal_In", SN_LOCAL);
	MakeNameEx(0X78BD, "$P_Val02_Next", SN_LOCAL);
	MakeNameEx(0X78D1, "$P_Val_Found", SN_LOCAL);
	MakeNameEx(0X78D8, "$P_Value_Err", SN_LOCAL);
	MakeNameEx(0X78E3, "$P_Value_Exit", SN_LOCAL);
	MakeFunction    (0X78EB,0X78FD);
	SetFunctionFlags(0X78EB,0x0);
	MakeNameEx(0X78F6, "$P_COVF", SN_LOCAL);
	MakeNameEx(0X78FB, "$P_COVF00", SN_LOCAL);
	MakeFunction    (0X78FD,0X790B);
	SetFunctionFlags(0X78FD,0x0);
	MakeNameEx(0X7909, "$P_0099Err", SN_LOCAL);
	MakeFunction    (0X790B,0X7974);
	SetFunctionFlags(0X790B,0x0);
	MakeFrame(0X790B, 0X0, 8, 0X0);
	MakeNameEx(0X791E, "$P_Sim00", SN_LOCAL);
	MakeNameEx(0X793C, "$P_Sim_Loop", SN_LOCAL);
	MakeNameEx(0X7956, "$P_Sim_Found", SN_LOCAL);
	MakeNameEx(0X7961, "$P_Sim01", SN_LOCAL);
	MakeNameEx(0X796A, "$P_Sim_Exit", SN_LOCAL);
	MakeNameEx(0X796C, "$P_Sim_Exit0", SN_LOCAL);
	MakeFunction    (0X7974,0X7A17);
	SetFunctionFlags(0X7974,0x0);
	MakeFrame(0X7974, 0X0, 8, 0X0);
	MakeNameEx(0X797A, "$P_SCOM_Loop", SN_LOCAL);
	MakeNameEx(0X799A, "$P_SCOM04", SN_LOCAL);
	MakeNameEx(0X79AD, "$P_SCOM05", SN_LOCAL);
	MakeNameEx(0X79B0, "$P_SCOM03", SN_LOCAL);
	MakeNameEx(0X79BE, "$P_SCOM00", SN_LOCAL);
	MakeNameEx(0X79D1, "$P_SCOM01", SN_LOCAL);
	MakeNameEx(0X79D3, "$P_SCOM_Differ0", SN_LOCAL);
	MakeNameEx(0X79EA, "$P_not_applicable", SN_LOCAL);
	MakeNameEx(0X79FE, "$P_SCOM02", SN_LOCAL);
	MakeNameEx(0X7A09, "$P_SCOM_Differ", SN_LOCAL);
	MakeNameEx(0X7A0C, "$P_SCOM_Same", SN_LOCAL);
	MakeNameEx(0X7A12, "$P_SCOM_Exit", SN_LOCAL);
	MakeFunction    (0X7A17,0X7ACA);
	SetFunctionFlags(0X7A17,0x0);
	MakeFrame(0X7A17, 0X0, 12, 0X0);
	MakeNameEx(0X7A53, "$P_DateF_Err0", SN_LOCAL);
	MakeNameEx(0X7A5D, "$P_DateF_YMD", SN_LOCAL);
	MakeNameEx(0X7A87, "$P_DateF01", SN_LOCAL);
	MakeNameEx(0X7A89, "$P_DateF00", SN_LOCAL);
	MakeNameEx(0X7AA2, "$P_DateF02", SN_LOCAL);
	MakeNameEx(0X7AAB, "$P_DateF03", SN_LOCAL);
	MakeNameEx(0X7AB6, "$P_DateF_Error", SN_LOCAL);
	MakeNameEx(0X7AC6, "$P_Date_Format_Exit", SN_LOCAL);
	MakeFunction    (0X7ACA,0X7AE6);
	SetFunctionFlags(0X7ACA,0x0);
	MakeNameEx(0X7AD6, "$P_Read_CDI", SN_LOCAL);
	MakeNameEx(0X7AE5, "$P_Set_CDI_Exit", SN_LOCAL);
	MakeFunction    (0X7AE6,0X7B3C);
	SetFunctionFlags(0X7AE6,0x0);
	MakeFrame(0X7AE6, 0X0, 4, 0X0);
	MakeNameEx(0X7AEA, "$P_GetNum_Loop", SN_LOCAL);
	MakeNameEx(0X7B02, "$P_Do_Time_Delim1", SN_LOCAL);
	MakeNameEx(0X7B08, "$P_Do_Date_Delims", SN_LOCAL);
	MakeNameEx(0X7B14, "$P_Neither_Delims", SN_LOCAL);
	MakeNameEx(0X7B2D, "$P_GetNum00", SN_LOCAL);
	MakeNameEx(0X7B32, "$P_GetNum01", SN_LOCAL);
	MakeNameEx(0X7B36, "$P_GetNum02", SN_LOCAL);
	MakeNameEx(0X7B37, "$P_GetNum_Exit", SN_LOCAL);
	MakeFunction    (0X7B3C,0X7C51);
	SetFunctionFlags(0X7B3C,0x0);
	MakeFrame(0X7B3C, 0X0, 12, 0X0);
	MakeNameEx(0X7B50, "$P_TimeF00", SN_LOCAL);
	MakeNameEx(0X7BD3, "$P_Time_4", SN_LOCAL);
	MakeNameEx(0X7BD6, "$P_TimeF_Err0", SN_LOCAL);
	MakeNameEx(0X7BE0, "$P_TimeF_Rlt", SN_LOCAL);
	MakeNameEx(0X7BF8, "$P_Time_notAM", SN_LOCAL);
	MakeNameEx(0X7C0C, "$P_TimeSkip00", SN_LOCAL);
	MakeNameEx(0X7C37, "$P_TimeF_Error", SN_LOCAL);
	MakeNameEx(0X7C47, "$P_Time_Format_Exit", SN_LOCAL);
	MakeFunction    (0X7C51,0X7C94);
	SetFunctionFlags(0X7C51,0x0);
	MakeFrame(0X7C51, 0X0, 4, 0X0);
	MakeNameEx(0X7C53, "$P_T12_Loop", SN_LOCAL);
	MakeNameEx(0X7C7E, "$P_T1200", SN_LOCAL);
	MakeNameEx(0X7C86, "$P_T1201", SN_LOCAL);
	MakeNameEx(0X7C8C, "$P_Tclr_chr", SN_LOCAL);
	MakeNameEx(0X7C91, "$P_T12_Exit", SN_LOCAL);
	MakeFunction    (0X7C94,0X7D05);
	SetFunctionFlags(0X7C94,0x0);
	MakeFrame(0X7C94, 0X0, 6, 0X0);
	MakeNameEx(0X7CB6, "$P_FileF_Err", SN_LOCAL);
	MakeNameEx(0X7CCC, "$P_FileF03", SN_LOCAL);
	MakeNameEx(0X7CCE, "$P_FileF_Loop1", SN_LOCAL);
	MakeNameEx(0X7CE1, "$P_FileF01", SN_LOCAL);
	MakeNameEx(0X7CE5, "$P_FileF00", SN_LOCAL);
	MakeNameEx(0X7CF3, "$P_FileF_RLT", SN_LOCAL);
	MakeNameEx(0X7CF5, "$P_FileF02", SN_LOCAL);
	MakeNameEx(0X7D04, "$P_Drv_Only_Exit", SN_LOCAL);
	MakeFunction    (0X7D05,0X7D1A);
	SetFunctionFlags(0X7D05,0x0);
	MakeFrame(0X7D05, 0X0, 4, 0X0);
	MakeNameEx(0X7D0E, "$P_FileSp_Loop", SN_LOCAL);
	MakeNameEx(0X7D17, "$P_FileSp_Exit", SN_LOCAL);
	MakeFunction    (0X7D1A,0X7D5E);
	SetFunctionFlags(0X7D1A,0x0);
	MakeFrame(0X7D1A, 0X0, 4, 0X0);
	MakeNameEx(0X7D3D, "$P_DrvF00", SN_LOCAL);
	MakeNameEx(0X7D54, "$P_Drv_Err", SN_LOCAL);
	MakeNameEx(0X7D5B, "$P_Drv_Exit", SN_LOCAL);
	MakeFunction    (0X7D5E,0X7D84);
	SetFunctionFlags(0X7D5E,0x0);
	MakeNameEx(0X7D7C, "$P_Skip_Delim_CY", SN_LOCAL);
	MakeNameEx(0X7D7F, "$P_Skip_Delim_NCY", SN_LOCAL);
	MakeNameEx(0X7D80, "$P_Skip_Delim_Exit", SN_LOCAL);
	MakeNameEx(0X7D82, "$P_Exit_At_Extra", SN_LOCAL);
	MakeFunction    (0X7D84,0X7DB6);
	SetFunctionFlags(0X7D84,0x0);
	MakeFrame(0X7D84, 0X0, 4, 0X0);
	MakeNameEx(0X7DA9, "$P_Chk_EOL_Loop", SN_LOCAL);
	MakeNameEx(0X7DB1, "$P_Chk_EOL_NZ", SN_LOCAL);
	MakeNameEx(0X7DB3, "$P_Chk_EOL_Exit", SN_LOCAL);
	MakeFunction    (0X7DB6,0X7E17);
	SetFunctionFlags(0X7DB6,0x0);
	MakeFrame(0X7DB6, 0X0, 4, 0X0);
	MakeNameEx(0X7DE0, "$P_Chk_Delim01", SN_LOCAL);
	MakeNameEx(0X7DF4, "$P_Chk_Delim_Loop", SN_LOCAL);
	MakeNameEx(0X7DFC, "$P_Chk_Delim_NZ", SN_LOCAL);
	MakeNameEx(0X7DFE, "$P_Chk_Delim_Exit", SN_LOCAL);
	MakeNameEx(0X7E01, "$P_Chk_Delim_Exit0", SN_LOCAL);
	MakeNameEx(0X7E13, "$P_No_Set_Extra", SN_LOCAL);
	MakeFunction    (0X7E17,0X7E45);
	SetFunctionFlags(0X7E17,0x0);
	MakeNameEx(0X7E33, "$P_STRUC_L7", SN_LOCAL);
	MakeNameEx(0X7E36, "$P_STRUC_L5", SN_LOCAL);
	MakeNameEx(0X7E39, "$P_STRUC_L2", SN_LOCAL);
	MakeNameEx(0X7E43, "$P_STRUC_L12", SN_LOCAL);
	MakeNameEx(0X7E44, "$P_STRUC_L1", SN_LOCAL);
	MakeFunction    (0X7E45,0X7E9B);
	SetFunctionFlags(0X7E45,0x0);
	MakeFrame(0X7E45, 0X0, 6, 0X0);
	MakeNameEx(0X7E77, "$P_DBCS00", SN_LOCAL);
	MakeNameEx(0X7E81, "$P_DBCS_LOOP", SN_LOCAL);
	MakeNameEx(0X7E92, "$P_DBCS01", SN_LOCAL);
	MakeNameEx(0X7E96, "$P_NON_DBCS", SN_LOCAL);
	MakeNameEx(0X7E97, "$P_DBCS_EXIT", SN_LOCAL);
	MakeFunction    (0X7E9B,0X7E9F);
	SetFunctionFlags(0X7E9B,0x0);
	MakeFunction    (0X7EA7,0X7EAE);
	SetFunctionFlags(0X7EA7,0x0);
	MakeFunction    (0X7EAE,0X7EB6);
	SetFunctionFlags(0X7EAE,0x0);
	MakeFunction    (0X7EB6,0X7F9F);
	SetFunctionFlags(0X7EB6,0x0);
	MakeNameEx(0X7EDF, "move_subst", SN_LOCAL);
	MakeNameEx(0X7EF7, "move_subst_cont", SN_LOCAL);
	MakeNameEx(0X7F0F, "check_fix", SN_LOCAL);
	MakeNameEx(0X7F16, "set_subst", SN_LOCAL);
	MakeNameEx(0X7F25, "subst_seg_set", SN_LOCAL);
	MakeNameEx(0X7F3B, "ready_to_print", SN_LOCAL);
	MakeNameEx(0X7F5D, "print_success", SN_LOCAL);
	MakeNameEx(0X7F6C, "print_err", SN_LOCAL);
	MakeNameEx(0X7F78, "not_stderr", SN_LOCAL);
	MakeNameEx(0X7F8F, "_go_to_error", SN_LOCAL);
	MakeNameEx(0X7F9A, "print_err_exit", SN_LOCAL);
	MakeFunction    (0X7F9F,0X7FA5);
	SetFunctionFlags(0X7F9F,0x0);
	MakeFrame(0X7F9F, 0X0, 2, 0X0);
	MakeFunction    (0X7FA5,0X7FAB);
	SetFunctionFlags(0X7FA5,0x0);
	MakeFrame(0X7FA5, 0X0, 2, 0X0);
	MakeFunction    (0X7FAB,0X804F);
	SetFunctionFlags(0X7FAB,0x0);
	MakeFrame(0X7FAB, 0X0, 10, 0X0);
	MakeNameEx(0X804A, "$MIF20", SN_LOCAL);
	MakeNameEx(0X804E, "$MEN20", SN_LOCAL);
	MakeFunction    (0X804F,0X8067);
	SetFunctionFlags(0X804F,0x0);
	MakeFrame(0X804F, 0X0, 6, 0X0);
	MakeNameEx(0X8064, "$MIF23", SN_LOCAL);
	MakeFunction    (0X8067,0X8083);
	SetFunctionFlags(0X8067,0x0);
	MakeFrame(0X8067, 0X0, 8, 0X0);
	MakeNameEx(0X807A, "$MIF32", SN_LOCAL);
	MakeNameEx(0X807C, "$MEN32", SN_LOCAL);
	MakeNameEx(0X807E, "$MIF31", SN_LOCAL);
	MakeFunction    (0X8083,0X811B);
	SetFunctionFlags(0X8083,0x0);
	MakeFrame(0X8083, 0X0, 4, 0X0);
	MakeNameEx(0X8089, "$MDO36", SN_LOCAL);
	MakeNameEx(0X8096, "$MIF37", SN_LOCAL);
	MakeNameEx(0X80A3, "$MIF39", SN_LOCAL);
	MakeNameEx(0X80B5, "$MIF41", SN_LOCAL);
	MakeNameEx(0X80BB, "$MEN37", SN_LOCAL);
	MakeNameEx(0X80C8, "$MIF47", SN_LOCAL);
	MakeNameEx(0X80D4, "$MEN47", SN_LOCAL);
	MakeNameEx(0X80D6, "$MIF46", SN_LOCAL);
	MakeNameEx(0X80DE, "$MIF51", SN_LOCAL);
	MakeNameEx(0X80E2, "$MEN46", SN_LOCAL);
	MakeNameEx(0X80EA, "$MEN36", SN_LOCAL);
	MakeNameEx(0X8109, "$MIF57", SN_LOCAL);
	MakeNameEx(0X810A, "$MEN57", SN_LOCAL);
	MakeNameEx(0X8111, "$MIF60", SN_LOCAL);
	MakeNameEx(0X8117, "$MEN60", SN_LOCAL);
	MakeNameEx(0X8119, "$MIF56", SN_LOCAL);
	MakeNameEx(0X811C, "$M_MYRET", SN_LOCAL);
	MakeFunction    (0X8123,0X8132);
	SetFunctionFlags(0X8123,0x0);
	MakeFrame(0X8123, 0X0, 4, 0X0);
	MakeFunction    (0X8132,0X81AB);
	SetFunctionFlags(0X8132,0x0);
	MakeNameEx(0X814E, "$MIF65", SN_LOCAL);
	MakeNameEx(0X8152, "$MEN65", SN_LOCAL);
	MakeNameEx(0X8154, "$MIF64", SN_LOCAL);
	MakeNameEx(0X8161, "$MIF69", SN_LOCAL);
	MakeNameEx(0X816A, "$MEN69", SN_LOCAL);
	MakeNameEx(0X816E, "$MEN64", SN_LOCAL);
	MakeNameEx(0X8171, "$MDO76", SN_LOCAL);
	MakeNameEx(0X817F, "$MIF78", SN_LOCAL);
	MakeNameEx(0X8182, "$MEN78", SN_LOCAL);
	MakeNameEx(0X8186, "$MIF76", SN_LOCAL);
	MakeNameEx(0X818E, "$MEN76", SN_LOCAL);
	MakeNameEx(0X818F, "$MSR76", SN_LOCAL);
	MakeNameEx(0X8199, "$MIF87", SN_LOCAL);
	MakeNameEx(0X819D, "$MIF75", SN_LOCAL);
	MakeNameEx(0X81A5, "$MIF91", SN_LOCAL);
	MakeFunction    (0X81AB,0X81F9);
	SetFunctionFlags(0X81AB,0x0);
	MakeFrame(0X81AB, 0X0, 14, 0X0);
	MakeNameEx(0X81CC, "$MIF94", SN_LOCAL);
	MakeNameEx(0X81CF, "$MEN94", SN_LOCAL);
	MakeNameEx(0X81DE, "$MIF98", SN_LOCAL);
	MakeNameEx(0X81E0, "$MIF97", SN_LOCAL);
	MakeNameEx(0X81E4, "$MEN97", SN_LOCAL);
	MakeNameEx(0X81E6, "$MIF93", SN_LOCAL);
	MakeNameEx(0X81EA, "$MEN93", SN_LOCAL);
	MakeNameEx(0X81F4, "$MIF104", SN_LOCAL);
	MakeNameEx(0X81F8, "$MEN104", SN_LOCAL);
	MakeFunction    (0X81F9,0X8234);
	SetFunctionFlags(0X81F9,0x0);
	MakeFrame(0X81F9, 0X0, 6, 0X0);
	MakeNameEx(0X820A, "$MIF107", SN_LOCAL);
	MakeNameEx(0X820D, "$MEN107", SN_LOCAL);
	MakeNameEx(0X821E, "$MIF110", SN_LOCAL);
	MakeNameEx(0X822E, "$MEN110", SN_LOCAL);
	MakeNameEx(0X8233, "$MIF117", SN_LOCAL);
	MakeFunction    (0X8234,0X8269);
	SetFunctionFlags(0X8234,0x0);
	MakeFrame(0X8234, 0X0, 4, 0X0);
	MakeNameEx(0X8255, "$MIF120", SN_LOCAL);
	MakeNameEx(0X8257, "$MIF119", SN_LOCAL);
	MakeNameEx(0X8259, "$MDO123", SN_LOCAL);
	MakeNameEx(0X8266, "$MEN119", SN_LOCAL);
	MakeFunction    (0X8269,0X8284);
	SetFunctionFlags(0X8269,0x0);
	MakeFrame(0X8269, 0X0, 8, 0X0);
	MakeNameEx(0X827D, "noCtrlz", SN_LOCAL);
	MakeFunction    (0X8284,0X82B7);
	SetFunctionFlags(0X8284,0x0);
	MakeNameEx(0X82AC, "$MIF129", SN_LOCAL);
	MakeNameEx(0X82B5, "m_popf_j", SN_LOCAL);
	MakeNameEx(0X82B8, "m_popf", SN_LOCAL);
	MakeFunction    (0X82DA,0X82E3);
	SetFunctionFlags(0X82DA,0x0);
	MakeFunction    (0X82E3,0X82FA);
	SetFunctionFlags(0X82E3,0x0);
	MakeNameEx(0X82F9, "$MIF134", SN_LOCAL);
	MakeFunction    (0X82FA,0X831E);
	SetFunctionFlags(0X82FA,0x0);
	MakeFrame(0X82FA, 0X0, 4, 0X0);
	MakeNameEx(0X8304, "$MDO139", SN_LOCAL);
	MakeNameEx(0X8317, "$MIF141", SN_LOCAL);
	MakeNameEx(0X831B, "$MIF138", SN_LOCAL);
	MakeFunction    (0X831E,0X8388);
	SetFunctionFlags(0X831E,0x0);
	MakeNameEx(0X8326, "$MDO145", SN_LOCAL);
	MakeNameEx(0X8339, "$MIF146", SN_LOCAL);
	MakeNameEx(0X833C, "$MEN146", SN_LOCAL);
	MakeNameEx(0X8346, "$MLL149", SN_LOCAL);
	MakeNameEx(0X8356, "$MIF151", SN_LOCAL);
	MakeNameEx(0X8358, "$MIF150", SN_LOCAL);
	MakeNameEx(0X8368, "$MIF155", SN_LOCAL);
	MakeNameEx(0X836A, "$MIF154", SN_LOCAL);
	MakeNameEx(0X837A, "$MEN154", SN_LOCAL);
	MakeNameEx(0X837F, "$MEN145", SN_LOCAL);
	MakeFunction    (0X8388,0X8489);
	SetFunctionFlags(0X8388,0x0);
	MakeNameEx(0X8392, "$MDO167", SN_LOCAL);
	MakeNameEx(0X83A1, "$MLL168", SN_LOCAL);
	MakeNameEx(0X83AA, "$MIF169", SN_LOCAL);
	MakeNameEx(0X83AF, "$MIF166", SN_LOCAL);
	MakeNameEx(0X83BE, "$MDO175", SN_LOCAL);
	MakeNameEx(0X83CB, "$MIF175", SN_LOCAL);
	MakeNameEx(0X83D3, "$MLL178", SN_LOCAL);
	MakeNameEx(0X83D7, "$MEN175", SN_LOCAL);
	MakeNameEx(0X83E6, "$MIF180", SN_LOCAL);
	MakeNameEx(0X83E9, "$MIF173", SN_LOCAL);
	MakeNameEx(0X83F6, "$MXL3", SN_LOCAL);
	MakeNameEx(0X8409, "$MIF188", SN_LOCAL);
	MakeNameEx(0X840A, "$MEN188", SN_LOCAL);
	MakeNameEx(0X840C, "$MIF187", SN_LOCAL);
	MakeNameEx(0X8413, "$MIF192", SN_LOCAL);
	MakeNameEx(0X841A, "$MIF194", SN_LOCAL);
	MakeNameEx(0X841C, "$MEN187", SN_LOCAL);
	MakeNameEx(0X8439, "$MIF200", SN_LOCAL);
	MakeNameEx(0X844B, "$MLL202", SN_LOCAL);
	MakeNameEx(0X8453, "$MIF202", SN_LOCAL);
	MakeNameEx(0X845E, "$MIF204", SN_LOCAL);
	MakeNameEx(0X8461, "$MEN200", SN_LOCAL);
	MakeNameEx(0X8466, "$MIF199", SN_LOCAL);
	MakeNameEx(0X8469, "$MEN199", SN_LOCAL);
	MakeNameEx(0X8472, "$MIF211", SN_LOCAL);
	MakeNameEx(0X8476, "$MEN211", SN_LOCAL);
	MakeNameEx(0X8482, "$MEN165", SN_LOCAL);
	MakeFunction    (0X8489,0X84B6);
	SetFunctionFlags(0X8489,0x0);
	MakeNameEx(0X8497, "$MDO215", SN_LOCAL);
	MakeNameEx(0X84A5, "$MIF216", SN_LOCAL);
	MakeFunction    (0X84B6,0X8575);
	SetFunctionFlags(0X84B6,0x0);
	MakeNameEx(0X84CF, "$MIF276", SN_LOCAL);
	MakeNameEx(0X84E9, "MDO280", SN_LOCAL);
	MakeNameEx(0X84F9, "$MIF281", SN_LOCAL);
	MakeNameEx(0X84FD, "$MIF278", SN_LOCAL);
	MakeNameEx(0X8510, "$MIF286", SN_LOCAL);
	MakeNameEx(0X8514, "$MDO291", SN_LOCAL);
	MakeNameEx(0X8526, "$MIF292", SN_LOCAL);
	MakeNameEx(0X8527, "$MEN292", SN_LOCAL);
	MakeNameEx(0X8534, "$MIF295", SN_LOCAL);
	MakeNameEx(0X8538, "$MIF290", SN_LOCAL);
	MakeNameEx(0X8542, "$MDO301", SN_LOCAL);
	MakeNameEx(0X8552, "$MIF302", SN_LOCAL);
	MakeNameEx(0X8556, "$MIF299", SN_LOCAL);
	MakeNameEx(0X8564, "$MIF307", SN_LOCAL);
	MakeNameEx(0X8568, "$MDO310", SN_LOCAL);
	MakeNameEx(0X8570, "$MEN307", SN_LOCAL);
	MakeFunction    (0X8575,0X8591);
	SetFunctionFlags(0X8575,0x0);
	MakeFrame(0X8575, 0X0, 8, 0X0);
	MakeNameEx(0X858C, "$MIF314", SN_LOCAL);
	MakeNameEx(0X8590, "$MEN314", SN_LOCAL);
	MakeFunction    (0X8591,0X85B9);
	SetFunctionFlags(0X8591,0x0);
	MakeNameEx(0X85A8, "$MIF318", SN_LOCAL);
	MakeNameEx(0X85AA, "$MIF317", SN_LOCAL);
	MakeNameEx(0X85B5, "$MEN321", SN_LOCAL);
	MakeNameEx(0X85B7, "$MEN317", SN_LOCAL);
	MakeFunction    (0X85B9,0X8681);
	SetFunctionFlags(0X85B9,0x0);
	MakeNameEx(0X85DC, "$MIF327", SN_LOCAL);
	MakeNameEx(0X85E2, "$MIF326", SN_LOCAL);
	MakeNameEx(0X85EE, "$MIF330", SN_LOCAL);
	MakeNameEx(0X85F0, "$MIF325", SN_LOCAL);
	MakeNameEx(0X8608, "$MIF335", SN_LOCAL);
	MakeNameEx(0X860E, "$MIF334", SN_LOCAL);
	MakeNameEx(0X861A, "$MIF338", SN_LOCAL);
	MakeNameEx(0X861C, "$MIF333", SN_LOCAL);
	MakeNameEx(0X8632, "$MIF342", SN_LOCAL);
	MakeNameEx(0X8638, "$MIF341", SN_LOCAL);
	MakeNameEx(0X8644, "$MEN333", SN_LOCAL);
	MakeNameEx(0X865D, "$MEN341", SN_LOCAL);
	MakeNameEx(0X8673, "$MEN325", SN_LOCAL);
	MakeNameEx(0X8676, "$MEN345", SN_LOCAL);
	MakeNameEx(0X867F, "$MIF349", SN_LOCAL);
	MakeFunction    (0X8681,0X86FE);
	SetFunctionFlags(0X8681,0x0);
	MakeNameEx(0X86B4, "$MIF351", SN_LOCAL);
	MakeNameEx(0X86D9, "$MIF353", SN_LOCAL);
	MakeNameEx(0X86FC, "$MIF355", SN_LOCAL);
	MakeFunction    (0X86FE,0X8716);
	SetFunctionFlags(0X86FE,0x0);
	MakeNameEx(0X8715, "$MIF357", SN_LOCAL);
	MakeFunction    (0X8716,0X8728);
	SetFunctionFlags(0X8716,0x0);
	MakeNameEx(0X8727, "$MIF360", SN_LOCAL);
	MakeFunction    (0X8728,0X8745);
	SetFunctionFlags(0X8728,0x0);
	MakeNameEx(0X873F, "$MIF363", SN_LOCAL);
	MakeFunction    (0X8745,0X87C9);
	SetFunctionFlags(0X8745,0x0);
	MakeNameEx(0X8767, "$MLL367", SN_LOCAL);
	MakeNameEx(0X876D, "MIF367", SN_LOCAL);
	MakeNameEx(0X8771, "$MIF365", SN_LOCAL);
	MakeNameEx(0X8786, "$MIF372", SN_LOCAL);
	MakeNameEx(0X8792, "$MLL374", SN_LOCAL);
	MakeNameEx(0X879D, "$MIF374", SN_LOCAL);
	MakeNameEx(0X87BE, "$MIF378", SN_LOCAL);
	MakeNameEx(0X87C4, "$MIF376", SN_LOCAL);
	MakeFunction    (0X87C9,0X87E6);
	SetFunctionFlags(0X87C9,0x0);
	MakeNameEx(0X87E5, "$MIF384", SN_LOCAL);
	MakeFunction    (0X87E6,0X8803);
	SetFunctionFlags(0X87E6,0x0);
	MakeNameEx(0X87FD, "$MIF386", SN_LOCAL);
	MakeFunction    (0X8803,0X883F);
	SetFunctionFlags(0X8803,0x0);
	MakeFrame(0X8803, 0X0, 6, 0X0);
	MakeNameEx(0X8813, "$MIF388", SN_LOCAL);
	MakeNameEx(0X8815, "$MEN388", SN_LOCAL);
	MakeNameEx(0X8832, "$MIF392", SN_LOCAL);
	MakeNameEx(0X8834, "$MIF391", SN_LOCAL);
	MakeNameEx(0X883A, "$MIF396", SN_LOCAL);
	MakeNameEx(0X883E, "$MEN396", SN_LOCAL);
	MakeFunction    (0X883F,0X8875);
	SetFunctionFlags(0X883F,0x0);
	MakeFrame(0X883F, 0X0, 8, 0X0);
	MakeFunction    (0X8875,0X88CC);
	SetFunctionFlags(0X8875,0x0);
	MakeFrame(0X8875, 0X0, 10, 0X0);
	MakeNameEx(0X8889, "fm10", SN_LOCAL);
	MakeNameEx(0X88AE, "fm30", SN_LOCAL);
	MakeNameEx(0X88C3, "fmX", SN_LOCAL);
	MakeFunction    (0X88CC,0X88E4);
	SetFunctionFlags(0X88CC,0x0);
	MakeFunction    (0X88E4,0X88F6);
	SetFunctionFlags(0X88E4,0x0);
	MakeFunction    (0X88F6,0X893B);
	SetFunctionFlags(0X88F6,0x0);
	MakeFrame(0X88F6, 0X0, 8, 0X0);
	MakeNameEx(0X88FC, "pv10", SN_LOCAL);
	MakeNameEx(0X890A, "pv20", SN_LOCAL);
	MakeNameEx(0X8922, "pv30", SN_LOCAL);
	MakeNameEx(0X8931, "pvE1", SN_LOCAL);
	MakeNameEx(0X8934, "pvErr", SN_LOCAL);
	MakeNameEx(0X8937, "pvX", SN_LOCAL);
	MakeFunction    (0X893B,0X8998);
	SetFunctionFlags(0X893B,0x0);
	MakeNameEx(0X8940, "pl10", SN_LOCAL);
	MakeNameEx(0X898A, "plE1", SN_LOCAL);
	MakeNameEx(0X8990, "plE2", SN_LOCAL);
	MakeNameEx(0X8995, "plSwX", SN_LOCAL);
	MakeNameEx(0X8996, "plX", SN_LOCAL);
	MakeFunction    (0X8998,0X89B0);
	SetFunctionFlags(0X8998,0x0);
	MakeFrame(0X8998, 0X0, 4, 0X0);
	MakeFunction    (0X89B0,0X89BB);
	SetFunctionFlags(0X89B0,0x0);
	MakeNameEx(0X89BA, "ieX", SN_LOCAL);
	MakeFunction    (0X89BB,0X89C6);
	SetFunctionFlags(0X89BB,0x0);
	MakeNameEx(0X89C5, "iwX", SN_LOCAL);
	MakeFunction    (0X89C6,0X89EA);
	SetFunctionFlags(0X89C6,0x0);
	MakeFrame(0X89C6, 0X0, 8, 0X0);
	MakeNameEx(0X89E5, "umu10", SN_LOCAL);
	MakeFunction    (0X89EA,0X8A22);
	SetFunctionFlags(0X89EA,0x0);
	MakeNameEx(0X89F0, "su10", SN_LOCAL);
	MakeNameEx(0X8A07, "su20", SN_LOCAL);
	MakeNameEx(0X8A1C, "su30", SN_LOCAL);
	MakeFunction    (0X8A22,0X8A38);
	SetFunctionFlags(0X8A22,0x0);
	MakeFrame(0X8A22, 0X0, 6, 0X0);
	MakeFunction    (0X8A3A,0X8A6D);
	SetFunctionFlags(0X8A3A,0x0);
	MakeNameEx(0X8A4F, "td10", SN_LOCAL);
	MakeNameEx(0X8A5D, "td20", SN_LOCAL);
	MakeNameEx(0X8A6B, "tdE", SN_LOCAL);
	MakeFunction    (0X8A6D,0X8AC0);
	SetFunctionFlags(0X8A6D,0x0);
	MakeFrame(0X8A6D, 0X0, 6, 0X0);
	MakeNameEx(0X8A99, "gxn10", SN_LOCAL);
	MakeNameEx(0X8AA1, "gxn20", SN_LOCAL);
	MakeNameEx(0X8AB7, "gxnE", SN_LOCAL);
	MakeNameEx(0X8ABA, "gxnQ", SN_LOCAL);
	MakeNameEx(0X8ABC, "gxnX", SN_LOCAL);
	MakeFunction    (0X8AC0,0X8ADB);
	SetFunctionFlags(0X8AC0,0x0);
	MakeFrame(0X8AC0, 0X0, 2, 0X0);
	MakeNameEx(0X8AD9, "m32E", SN_LOCAL);
	MakeFunction    (0X8ADB,0X8AE9);
	SetFunctionFlags(0X8ADB,0x0);
	MakeFrame(0X8ADB, 0X0, 2, 0X0);
	MakeFunction    (0X8AE9,0X8B01);
	SetFunctionFlags(0X8AE9,0x0);
	MakeFrame(0X8AE9, 0X0, 6, 0X0);
	MakeNameEx(0X8AFC, "uhE", SN_LOCAL);
	MakeNameEx(0X8AFD, "uhX", SN_LOCAL);
	MakeFunction    (0X8B01,0X8B1B);
	SetFunctionFlags(0X8B01,0x0);
	MakeFrame(0X8B01, 0X0, 2, 0X0);
	MakeNameEx(0X8B12, "ism10", SN_LOCAL);
	MakeNameEx(0X8B19, "ismX", SN_LOCAL);
	MakeFunction    (0X8B1B,0X8B5D);
	SetFunctionFlags(0X8B1B,0x0);
	MakeFrame(0X8B1B, 0X0, 6, 0X0);
	MakeNameEx(0X8B29, "atu10", SN_LOCAL);
	MakeNameEx(0X8B35, "atu20", SN_LOCAL);
	MakeNameEx(0X8B49, "atu30", SN_LOCAL);
	MakeNameEx(0X8B54, "atuE", SN_LOCAL);
	MakeNameEx(0X8B57, "atuX", SN_LOCAL);
	MakeFunction    (0X8B5D,0X8B6E);
	SetFunctionFlags(0X8B5D,0x0);
	MakeNameEx(0X8B6D, "cu10", SN_LOCAL);
	MakeFunction    (0X8B6E,0X8B96);
	SetFunctionFlags(0X8B6E,0x0);
	MakeFrame(0X8B6E, 0X0, 4, 0X0);
	MakeFunction    (0X8B96,0X8BB0);
	SetFunctionFlags(0X8B96,0x0);
	MakeFrame(0X8B96, 0X0, 2, 0X0);
	MakeNameEx(0X8BA7, "ll10", SN_LOCAL);
	MakeNameEx(0X8BAE, "llX", SN_LOCAL);
	MakeFunction    (0X8BB0,0X8BF7);
	SetFunctionFlags(0X8BB0,0x0);
	MakeFrame(0X8BB0, 0X0, 8, 0X0);
	MakeNameEx(0X8BD4, "hus10", SN_LOCAL);
	MakeNameEx(0X8BE8, "hus20", SN_LOCAL);
	MakeNameEx(0X8BF2, "husX", SN_LOCAL);
	MakeFunction    (0X8BF7,0X8C01);
	SetFunctionFlags(0X8BF7,0x0);
	MakeFrame(0X8BF7, 0X0, 2, 0X0);
	MakeFunction    (0X8C01,0X8C1B);
	SetFunctionFlags(0X8C01,0x0);
	MakeFrame(0X8C01, 0X0, 6, 0X0);
	MakeFunction    (0X8C1B,0X8C32);
	SetFunctionFlags(0X8C1B,0x0);
	MakeFrame(0X8C1B, 0X0, 6, 0X0);
	MakeFunction    (0X8C32,0X8C3D);
	SetFunctionFlags(0X8C32,0x0);
	MakeFrame(0X8C32, 0X0, 2, 0X0);
	MakeFunction    (0X8C3D,0X8C52);
	SetFunctionFlags(0X8C3D,0x0);
	MakeFrame(0X8C3D, 0X0, 4, 0X0);
	MakeNameEx(0X8C50, "sls10", SN_LOCAL);
	MakeFunction    (0X8C52,0X8C7D);
	SetFunctionFlags(0X8C52,0x0);
	MakeFrame(0X8C52, 0X0, 4, 0X0);
	MakeNameEx(0X8C59, "hu10", SN_LOCAL);
	MakeNameEx(0X8C66, "hu20", SN_LOCAL);
	MakeNameEx(0X8C7A, "huX", SN_LOCAL);
	MakeFunction    (0X8C7D,0X8C8B);
	SetFunctionFlags(0X8C7D,0x0);
	MakeFrame(0X8C7D, 0X0, 4, 0X0);
	MakeFunction    (0X8C8B,0X8C92);
	SetFunctionFlags(0X8C8B,0x0);
	MakeFunction    (0X8C92,0X8CB6);
	SetFunctionFlags(0X8C92,0x0);
	MakeFunction    (0X8CB6,0X8CD3);
	SetFunctionFlags(0X8CB6,0x0);
	MakeFrame(0X8CB6, 0X0, 2, 0X0);
	MakeFunction    (0X8CD3,0X8D04);
	SetFunctionFlags(0X8CD3,0x0);
	MakeFrame(0X8CD3, 0X0, 6, 0X0);
	MakeNameEx(0X8CE1, "fu10", SN_LOCAL);
	MakeNameEx(0X8CEB, "fu20", SN_LOCAL);
	MakeNameEx(0X8CFF, "fuE", SN_LOCAL);
	MakeNameEx(0X8D00, "fuX", SN_LOCAL);
	MakeFunction    (0X8D04,0X8D47);
	SetFunctionFlags(0X8D04,0x0);
	MakeFrame(0X8D04, 0X0, 4, 0X0);
	MakeNameEx(0X8D0F, "bf10", SN_LOCAL);
	MakeNameEx(0X8D27, "bf20", SN_LOCAL);
	MakeNameEx(0X8D3B, "bf30", SN_LOCAL);
	MakeNameEx(0X8D44, "bfX", SN_LOCAL);
	MakeFunction    (0X8D47,0X8D5A);
	SetFunctionFlags(0X8D47,0x0);
	MakeFrame(0X8D47, 0X0, 2, 0X0);
	MakeFunction    (0X8D5A,0X8DB7);
	SetFunctionFlags(0X8D5A,0x0);
	MakeFrame(0X8D5A, 0X0, 6, 0X0);
	MakeNameEx(0X8DB2, "smE", SN_LOCAL);
	MakeNameEx(0X8DB3, "smX", SN_LOCAL);
	MakeFunction    (0X8DB7,0X8E07);
	SetFunctionFlags(0X8DB7,0x0);
	MakeFrame(0X8DB7, 0X0, 6, 0X0);
	MakeNameEx(0X8DDE, "hu?10", SN_LOCAL);
	MakeNameEx(0X8DEC, "hu?20", SN_LOCAL);
	MakeNameEx(0X8DF5, "hu?30", SN_LOCAL);
	MakeNameEx(0X8E03, "hu?X", SN_LOCAL);
	MakeFunction    (0X8E07,0X8E2F);
	SetFunctionFlags(0X8E07,0x0);
	MakeFrame(0X8E07, 0X0, 4, 0X0);
	MakeNameEx(0X8E10, "uf10", SN_LOCAL);
	MakeNameEx(0X8E18, "uf20", SN_LOCAL);
	MakeNameEx(0X8E2C, "ufX", SN_LOCAL);
	MakeFunction    (0X8E2F,0X8E5D);
	SetFunctionFlags(0X8E2F,0x0);
	MakeFrame(0X8E2F, 0X0, 2, 0X0);
	MakeNameEx(0X8E5B, "ifmX", SN_LOCAL);
	MakeFunction    (0X8E5D,0X8E81);
	SetFunctionFlags(0X8E5D,0x0);
	MakeFunction    (0X8E81,0X8EBE);
	SetFunctionFlags(0X8E81,0x0);
	MakeFrame(0X8E81, 0X0, 8, 0X0);
	MakeNameEx(0X8E93, "fum10", SN_LOCAL);
	MakeNameEx(0X8E99, "fum20", SN_LOCAL);
	MakeNameEx(0X8EA5, "fum30", SN_LOCAL);
	MakeNameEx(0X8EB9, "fumX", SN_LOCAL);
	MakeFunction    (0X8EBE,0X8ED2);
	SetFunctionFlags(0X8EBE,0x0);
	MakeFrame(0X8EBE, 0X0, 8, 0X0);
	MakeFunction    (0X8ED2,0X8EFC);
	SetFunctionFlags(0X8ED2,0x0);
	MakeFrame(0X8ED2, 0X0, 6, 0X0);
	MakeNameEx(0X8EDF, "um10", SN_LOCAL);
	MakeNameEx(0X8EF3, "um20", SN_LOCAL);
	MakeFunction    (0X8EFC,0X8F1F);
	SetFunctionFlags(0X8EFC,0x0);
	MakeFunction    (0X8F37,0X8F61);
	SetFunctionFlags(0X8F37,0x0);
	MakeNameEx(0X8F50, "plc10", SN_LOCAL);
	MakeNameEx(0X8F5B, "plc20", SN_LOCAL);
	MakeNameEx(0X8F5D, "plcC", SN_LOCAL);
	MakeFunction    (0X8F61,0X8F9E);
	SetFunctionFlags(0X8F61,0x0);
	MakeNameEx(0X8F67, "lhcpfn1", SN_LOCAL);
	MakeNameEx(0X8F8A, "lhcpfn2", SN_LOCAL);
	MakeNameEx(0X8F94, "lhfilerr", SN_LOCAL);
	MakeNameEx(0X8F99, "lhmissing", SN_LOCAL);
	MakeFunction    (0X8F9E,0X8FB7);
	SetFunctionFlags(0X8F9E,0x0);
	MakeNameEx(0X8FA5, "scmdl1", SN_LOCAL);
	MakeNameEx(0X8FB1, "scmdl2", SN_LOCAL);
	MakeFunction    (0X8FB7,0X8FC3);
	SetFunctionFlags(0X8FB7,0x0);
	MakeFunction    (0X8FC3,0X9010);
	SetFunctionFlags(0X8FC3,0x0);
	MakeNameEx(0X8FD8, "argloop", SN_LOCAL);
	MakeNameEx(0X8FF5, "argdone", SN_LOCAL);
	MakeNameEx(0X9003, "no_exec_bat", SN_LOCAL);
	MakeNameEx(0X9008, "no_exec_file", SN_LOCAL);
	MakeNameEx(0X900E, "lhsp_errret", SN_LOCAL);
	MakeFunction    (0XBD75,0XBD80);
	SetFunctionFlags(0XBD75,0x0);
	MakeFrame(0XBD75, 0X0, 2, 0X0);
	MakeFunction    (0XBDD8,0XBDE2);
	SetFunctionFlags(0XBDD8,0x0);
	MakeFrame(0XBDD8, 0X0, 2, 0X0);
	MakeFunction    (0XBDF9,0XBE03);
	SetFunctionFlags(0XBDF9,0x0);
	MakeFrame(0XBDF9, 0X0, 2, 0X0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
}

// End of file.
