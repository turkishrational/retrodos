     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (MSDOS 6.22 Command Interpreter) - RETRO DOS v4.2 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update:  14/08/2024 (v6.22 - 2024 optimization)
     5                                  ;		19/06/2023 (v6.22) ((Previous: 05/05/2023 COMMAND.COM v5.0))
     6                                  ; ----------------------------------------------------------------------------
     7                                  ; Beginning: 21/04/2018 (COMMAND.COM v2.11) - 11/09/2018 (COMMAND.COM v3.30)
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15 (2.11)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	    ((nasm command6.s -l command6.lst -o COMMAND.COM)) 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    14                                  ; by Microsoft, 18/08/1983
    15                                  ; ****************************************************************************
    16                                  ; Modified from 'COMMAND5.S' (MSDOS 5.0 COMMAND.COM) source code
    17                                  ; in NASM syntax (by Erdogan Tan), 05/05/2023
    18                                  ; ----------------------------------------------------------------------------
    19                                  ; Modified from 'COMMAND3.S' (MSDOS 3.3 COMMAND.COM) source code
    20                                  ; in NASM syntax (by Erdogan Tan), 20/10/2018
    21                                  ; ----------------------------------------------------------------------------
    22                                  ;; 11/09/2018 - Erdogan Tan
    23                                  ; (Note: I haven't got MSDOS 3.3 COMMAND.COM src files; so, I need to continue
    24                                  ; by using disassembled COMMAND.COM -v3.30- and MSDOS 6.0 OS source files.)
    25                                  ; ----------------------------------------------------------------------------
    26                                  ; MSDOS 6.0 source files:
    27                                  ;;============================================================================
    28                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    29                                  ; (MSDOS 3.30 COMMAND.COM) output in TASM syntax (11/09/2018..29/09/2018)
    30                                  ;;============================================================================
    31                                  ;
    32                                  ; COMMAND.COM v6.0 source files:
    33                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    34                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    35                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    36                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    37                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    38                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    39                                  ;
    40                                  ; COMMAND.COM v2.11 source files:
    41                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    42                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    43                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    44                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    45                                  ;
    46                                  ; ----------------------------------------------------------------------------
    47                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    48                                  
    49                                  ;============================================================================
    50                                  ; MSDOS 6.22 COMMAND.COM, DISASSEMBLED by Erdogan Tan, 17/05/2023-05/06/2023
    51                                  ;============================================================================
    52                                  
    53                                  ; -=========================================================================¬
    54                                  ; ¦     This file is generated by The Interactive Disassembler (IDA)        ¦
    55                                  ; ¦     Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>           ¦
    56                                  ; ¦                      Licensed to: Freeware version                      ¦
    57                                  ; L=========================================================================-
    58                                  ;
    59                                  ; Input MD5   : FAF051453F215165981F10BD73071D88
    60                                  ;
    61                                  ; File Name   : C:\Users\Erdo­an\Desktop\COMMAND.COM
    62                                  ; Format      : MS-DOS COM-file
    63                                  ; Base Address: 0h Range: 100h-D675h Loaded length: D575h
    64                                  
    65                                  ;============================================================================
    66                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    67                                  ;============================================================================
    68                                  ; 21/09/2018 - Retro DOS v3.0
    69                                  
    70                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    71                                  ;BREAK <system call definitions>
    72                                  
    73                                  ;
    74                                  ;	Microsoft Confidential
    75                                  ;	Copyright (C) Microsoft Corporation 1991
    76                                  ;	All Rights Reserved.
    77                                  ;
    78                                  
    79                                  ;SUBTTL	system call definitions
    80                                  ;PAGE
    81                                  
    82                                  Abort				EQU 0	;  0	  0
    83                                  STD_CON_INPUT			EQU 1	;  1	  1
    84                                  Std_Con_Output			EQU 2	;  2	  2
    85                                  Std_Aux_Input			EQU 3	;  3	  3
    86                                  Std_Aux_Output			EQU 4	;  4	  4
    87                                  Std_Printer_Output		EQU 5	;  5	  5
    88                                  Raw_Con_IO			EQU 6	;  6	  6
    89                                  RAW_CON_INPUT			EQU 7	;  7	  7
    90                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    91                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    92                                  Std_Con_String_Input		EQU 10	; 10	  A
    93                                  Std_Con_Input_Status		EQU 11	; 11	  B
    94                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    95                                  DISK_RESET			EQU 13	; 13	  D
    96                                  Set_Default_Drive		EQU 14	; 14	  E
    97                                  FCB_Open			EQU 15	; 15	  F
    98                                  FCB_Close			EQU 16	; 16	 10
    99                                  Dir_Search_First		EQU 17	; 17	 11
   100                                  Dir_Search_Next 		EQU 18	; 18	 12
   101                                  FCB_Delete			EQU 19	; 19	 13
   102                                  FCB_Seq_Read			EQU 20	; 20	 14
   103                                  FCB_Seq_Write			EQU 21	; 21	 15
   104                                  FCB_Create			EQU 22	; 22	 16
   105                                  FCB_Rename			EQU 23	; 23	 17
   106                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
   107                                  Set_DMA 			EQU 26	; 26	 1A
   108                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   109                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   110                                  ;									   ;
   111                                  Get_Default_DPB 		EQU 31	; 31	 1F
   112                                  ;									   ;
   113                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   115                                  FCB_Random_Read 		EQU 33	; 33	 21
   116                                  FCB_Random_Write		EQU 34	; 34	 22
   117                                  Get_FCB_File_Length		EQU 35	; 35	 23
   118                                  Get_FCB_Position		EQU 36	; 36	 24
   119                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   120                                  Create_Process_Data_Block	EQU 38	; 38	 26
   121                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   122                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   123                                  Parse_File_Descriptor		EQU 41	; 41	 29
   124                                  Get_Date			EQU 42	; 42	 2A
   125                                  Set_Date			EQU 43	; 43	 2B
   126                                  Get_Time			EQU 44	; 44	 2C
   127                                  Set_Time			EQU 45	; 45	 2D
   128                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   129                                  ; Extended functionality group
   130                                  Get_DMA 			EQU 47	; 47	 2F
   131                                  GET_VERSION			EQU 48	; 48	 30
   132                                  Keep_Process			EQU 49	; 49	 31
   133                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   134                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   135                                  ;									   ;
   136                                  Get_DPB 			EQU 50	; 50	 32
   137                                  ;									   ;
   138                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   139                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   140                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   141                                  Get_InDOS_Flag			EQU 52	; 52	 34
   142                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   143                                  Get_Drive_Freespace		EQU 54	; 54	 36
   144                                  CHAR_OPER			EQU 55	; 55	 37
   145                                  International			EQU 56	; 56	 38
   146                                  ;   Directory Group
   147                                  MKDir				EQU 57	; 57	 39
   148                                  RMDir				EQU 58	; 58	 3A
   149                                  CHDir				EQU 59	; 59	 3B
   150                                  ;   File Group
   151                                  Creat				EQU 60	; 60	 3C
   152                                  OPEN				EQU 61	; 61	 3D
   153                                  CLOSE				EQU 62	; 62	 3E
   154                                  READ				EQU 63	; 63	 3F
   155                                  Write				EQU 64	; 64	 40
   156                                  Unlink				EQU 65	; 65	 41
   157                                  LSEEK				EQU 66	; 66	 42
   158                                  CHMod				EQU 67	; 67	 43
   159                                  IOCTL				EQU 68	; 68	 44
   160                                  XDUP				EQU 69	; 69	 45
   161                                  XDup2				EQU 70	; 70	 46
   162                                  Current_Dir			EQU 71	; 71	 47
   163                                  ;    Memory Group
   164                                  ALLOC				EQU 72	; 72	 48
   165                                  DEALLOC				EQU 73	; 73	 49
   166                                  SETBLOCK			EQU 74	; 74	 4A
   167                                  ;    Process Group
   168                                  Exec				EQU 75	; 75	 4B
   169                                  EXIT				EQU 76	; 76	 4C
   170                                  WAITPROCESS			EQU 77	; 77	 4D
   171                                  Find_First			EQU 78	; 78	 4E
   172                                  ;   Special Group
   173                                  Find_Next			EQU 79	; 79	 4F
   174                                  ; SPECIAL SYSTEM GROUP
   175                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   176                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   177                                  ;									   ;
   178                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   179                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   180                                  Get_In_Vars			EQU 82	; 82	 52
   181                                  SetDPB				EQU 83	; 83	 53
   182                                  ;									   ;
   183                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   184                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   185                                  Get_Verify_On_Write		EQU 84	; 84	 54
   186                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   187                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   188                                  ;									   ;
   189                                  Dup_PDB 			EQU 85	; 85	 55
   190                                  ;									   ;
   191                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   192                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   193                                  Rename				EQU 86	; 86	 56
   194                                  File_Times			EQU 87	; 87	 57
   195                                  AllocOper			EQU 88	; 88	 58
   196                                  ; Network extention system calls
   197                                  GetExtendedError		EQU 89	; 89	 59
   198                                  CreateTempFile			EQU 90	; 90	 5A
   199                                  CreateNewFile			EQU 91	; 91	 5B
   200                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   201                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   202                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   203                                  ;									   ;
   204                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   205                                  					;	    CloseByName, CloseUser,
   206                                  					;	    CloseUserProcess,
   207                                  					;	    GetOpenFileList
   208                                  ;									   ;
   209                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   210                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   211                                  UserOper			EQU 94	; 94	 5E Get and Set
   212                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   213                                  xNameTrans			EQU 96	; 96	 60
   214                                  PathParse			EQU 97	; 97	 61
   215                                  GetCurrentPSP			EQU 98	; 98	 62
   216                                  Hongeul 			EQU 99	; 99	 63
   217                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   218                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   219                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   220                                  ;									   ;
   221                                  Set_Printer_Flag		EQU 100 ; 100	 64
   222                                  ;									   ;
   223                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   224                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   225                                  GetExtCntry			EQU 101 ; 101	 65
   226                                  GetSetCdPg			EQU 102 ; 102	 66
   227                                  ExtHandle			EQU 103 ; 103	 67
   228                                  Commit				EQU 104 ; 104	 68
   229                                  GetSetMediaID			EQU 105 ; 105	 69
   230                                  IFS_IOCTL			EQU 107 ; 107	 6B
   231                                  ExtOpen 			EQU 108 ; 108	 6C
   232                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   233                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   234                                  ;                                                                          ;
   235                                  ;ifdef ROMEXEC
   236                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   237                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   238                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   239                                  ;endif
   240                                  ;                                                                          ;
   241                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   242                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   243                                  ;
   244                                  ;
   245                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   246                                  OEM_C1				EQU 249 ; 249	 F9
   247                                  OEM_C2				EQU 250 ; 250	 FA
   248                                  OEM_C3				EQU 251 ; 251	 FB
   249                                  OEM_C4				EQU 252 ; 252	 FC
   250                                  OEM_C5				EQU 253 ; 253	 FD
   251                                  OEM_C6				EQU 254 ; 254	 FE
   252                                  OEM_C7				EQU 255 ; 255	 FF
   253                                  
   254                                  ;============================================================================
   255                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   256                                  ;============================================================================
   257                                  ; 21/09/2018 - Retro DOS v3.0
   258                                  
   259                                  ;BREAK <Control character definitions>
   260                                  
   261                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   262                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   263                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   264                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   265                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   266                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   267                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   268                                  c_HT	    EQU     09h 	; ^I ASCII tab
   269                                  
   270                                  ;============================================================================
   271                                  ; DIRENT.INC, MSDOS 6.0, 1991
   272                                  ;============================================================================
   273                                  ; 21/09/2018 - Retro DOS v3.0
   274                                  
   275                                  ;Break <Directory entry>
   276                                  
   277                                  ;	NOTE:  These offsets are also used in the DTA for
   278                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   279                                  ;	with the FCB filename field, and the rest of the
   280                                  ;	DIR_ENTRY fields follow. -DavidOls
   281                                  
   282                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   283                                  ;
   284                                  ;	+---------------------------+
   285                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   286                                  ;	+---------------------------+
   287                                  ;	|     (BYTE) attributes     |	    11	    B
   288                                  ;	+---------------------------+
   289                                  ;	|    (10 BYTE) reserved     |	    12	    C
   290                                  ;	+---------------------------+
   291                                  ;	| (WORD) time of last write |	    22	    16
   292                                  ;	+---------------------------+
   293                                  ;	| (WORD) date of last write |	    24	    18
   294                                  ;	+---------------------------+
   295                                  ;	|   (WORD) First cluster    |	    26	    1A
   296                                  ;	+---------------------------+
   297                                  ;	|     (DWORD) file size     |	    28	    1C
   298                                  ;	+---------------------------+
   299                                  ;
   300                                  ;   First byte of filename  = E5 -> free directory entry
   301                                  ;			    = 00 -> end of allocated directory
   302                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   303                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   304                                  ;
   305                                  
   306                                  STRUC DIR_ENTRY
   307 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   308 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   309 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   310 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   311 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   312 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   313 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   314 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   315 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   316 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   317 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   318                                  .size:
   319                                  
   320                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   321                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   322                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   323                                  ;	    this field is zero for subdirectory files.
   324                                  
   325                                  ENDSTRUC
   326                                  
   327                                  ATTR_READ_ONLY	equ	 1h
   328                                  ATTR_HIDDEN	equ	 2h
   329                                  ATTR_SYSTEM	equ	 4h
   330                                  ATTR_VOLUME_ID	equ	 8h
   331                                  ATTR_DIRECTORY	equ	10h
   332                                  ATTR_ARCHIVE	equ	20h
   333                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   334                                  				;   NO directory entry on a disk EVER
   335                                  				;   has this bit set. It is set non-zero
   336                                  				;   when a device is found by GETPATH
   337                                  
   338                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   339                                  				; OR of hard attributes for FINDENTRY
   340                                  
   341                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   342                                  				; ignore this(ese) attribute(s) during
   343                                  				; search first/next
   344                                  
   345                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   346                                  				; changeable via CHMOD
   347                                  
   348                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   349                                  
   350                                  ;============================================================================
   351                                  ; ERROR.INC, MSDOS 6.0, 1991
   352                                  ;============================================================================
   353                                  ; 21/09/2018 - Retro DOS v3.0
   354                                  
   355                                  ;**	ERROR.INC - DOS Error Codes
   356                                  ;
   357                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   358                                  ;    return error codes through AX.	If an error occurred then
   359                                  ;    the carry bit will be set and the error code is in AX.	If no error
   360                                  ;    occurred then the carry bit is reset and AX contains returned info.
   361                                  ;
   362                                  ;    Since the set of error codes is being extended as we extend the operating
   363                                  ;    system, we have provided a means for applications to ask the system for a
   364                                  ;    recommended course of action when they receive an error.
   365                                  ;
   366                                  ;    The GetExtendedError system call returns a universal error, an error
   367                                  ;    location and a recommended course of action.	The universal error code is
   368                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   369                                  ;    is issued.
   370                                  
   371                                  
   372                                  ;	2.0 error codes
   373                                  
   374                                  error_invalid_function		EQU	1
   375                                  ERROR_FILE_NOT_FOUND		EQU	2
   376                                  ERROR_PATH_NOT_FOUND		EQU	3
   377                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   378                                  ERROR_ACCESS_DENIED		EQU	5
   379                                  error_invalid_handle		EQU	6
   380                                  error_arena_trashed		EQU	7
   381                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   382                                  error_invalid_block		EQU	9
   383                                  error_bad_environment		EQU	10
   384                                  ERROR_BAD_FORMAT		EQU	11
   385                                  error_invalid_access		EQU	12
   386                                  ERROR_INVALID_DATA		EQU	13
   387                                  ;**** reserved			EQU	14	; *****
   388                                  error_invalid_drive		EQU	15
   389                                  error_current_directory 	EQU	16
   390                                  error_not_same_device		EQU	17
   391                                  ERROR_NO_MORE_FILES		EQU	18
   392                                  
   393                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   394                                  
   395                                  ERROR_WRITE_PROTECT		EQU	19
   396                                  error_bad_unit			EQU	20
   397                                  error_not_ready 		EQU	21
   398                                  error_bad_command		EQU	22
   399                                  error_CRC			EQU	23
   400                                  error_bad_length		EQU	24
   401                                  error_Seek			EQU	25
   402                                  error_not_DOS_disk		EQU	26
   403                                  error_sector_not_found		EQU	27
   404                                  error_out_of_paper		EQU	28
   405                                  error_write_fault		EQU	29
   406                                  error_read_fault		EQU	30
   407                                  ERROR_GEN_FAILURE		EQU	31
   408                                  
   409                                  ;	the new 3.0 error codes reported through INT 24
   410                                  
   411                                  error_sharing_violation 	EQU	32
   412                                  error_lock_violation		EQU	33
   413                                  error_wrong_disk		EQU	34
   414                                  ERROR_FCB_UNAVAILABLE		EQU	35
   415                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   416                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   417                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   418                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   419                                  
   420                                  ;	New OEM network-related errors are 50-79
   421                                  
   422                                  error_not_supported		EQU	50
   423                                  
   424                                  error_net_access_denied		EQU	65	;M028
   425                                  
   426                                  ;	End of INT 24 reportable errors
   427                                  
   428                                  error_file_exists		EQU	80
   429                                  error_DUP_FCB			EQU	81	; *****
   430                                  error_cannot_make		EQU	82
   431                                  error_FAIL_I24			EQU	83
   432                                  
   433                                  ;	New 3.0 network related error codes
   434                                  
   435                                  error_out_of_structures 	EQU	84
   436                                  error_Already_assigned		EQU	85
   437                                  error_invalid_password		EQU	86
   438                                  error_invalid_parameter 	EQU	87
   439                                  error_NET_write_fault		EQU	88
   440                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   441                                  
   442                                  ;============================================================================
   443                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   444                                  ;============================================================================
   445                                  ; 22/09/2018 - Retro DOS v3.0
   446                                  
   447                                  ;**	DevSym.inc - Device Symbols
   448                                  
   449                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   450                                  
   451                                  STRUC SYSDEV
   452 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   453 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   454 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   455 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   456 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   457                                  .size:
   458                                  ENDSTRUC
   459                                  
   460                                  ; 24/09/2018
   461                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   462                                  
   463                                  ;============================================================================
   464                                  ; CURDIR.INC, MSDOS 6.0, 1991
   465                                  ;============================================================================
   466                                  ; 21/09/2018 - Retro DOS v3.0
   467                                  
   468                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   469                                  
   470                                  ;============================================================================
   471                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   472                                  ;============================================================================
   473                                  ; 21/09/2018 - Retro DOS v3.0
   474                                  
   475                                  ;/*
   476                                  ; *                      Microsoft Confidential
   477                                  ; *                      Copyright (C) Microsoft Corporation 1991
   478                                  ; *                      All Rights Reserved.
   479                                  ; */
   480                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   481                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   482                                  ;*************************************
   483                                  ; COMMAND EQUs which are not switch dependant
   484                                  
   485                                  ;		include	curdir.inc	; to get DIRSTRLEN
   486                                  ;		Note dossym.inc must already have been included!
   487                                  
   488                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   489                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   490                                  
   491                                  SYM		EQU	">"
   492                                  
   493                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   494                                  
   495                                  NORMPERLIN	EQU	1
   496                                  WIDEPERLIN	EQU	5
   497                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   498                                  BatLen		EQU	32		; buffer for batch files
   499                                  YES_ECHO	EQU	1		; echo line
   500                                  NO_ECHO 	EQU	0		; don't echo line
   501                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   502                                  call_in_progress EQU	1		; indicate we're in the CALL command
   503                                  length_call	EQU	4		; length of CALL
   504                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   505                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   506                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   507                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   508                                  nullcommand	EQU     1		; no command on command line
   509                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   510                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   511                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   512                                  result_number	EQU	1		;AN000; number returned from parser
   513                                  result_string	EQU	3		;AN000; string returned from parser
   514                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   515                                  result_drive	EQU	6		;AN000; drive returned from parser
   516                                  result_date	EQU	7		;AN000; date returned from parser
   517                                  result_time	EQU	8		;AN000; time returned from parser
   518                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   519                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   520                                  util_msg_class	EQU	-1		;AN000; message class for utility
   521                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   522                                  parse_msg_class EQU	2		;AN000; message class for parse error
   523                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   524                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   525                                  colon_char	EQU	":"             ;AN000; colon character
   526                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   527                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   528                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   529                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   530                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   531                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   532                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   533                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   534                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   535                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   536                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   537                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   538                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   539                                  parm_block_size equ	11		;AN000; size of message subst block
   540                                  blank		equ	" "             ;AN000; blank character
   541                                  no_subst	equ	0		;AN000; no substitutions for messages
   542                                  one_subst	equ	1		;AN000; one substitution for messages
   543                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   544                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   545                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   546                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   547                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   548                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   549                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   550                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   551                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   552                                  capital_A	equ	'A'             ;AC000;
   553                                  vbar		equ	'|'             ;AC000;
   554                                  labracket	equ	'<'             ;AC000;
   555                                  rabracket	equ	'>'             ;AC000;
   556                                  dollar		equ	'$'             ;AC000;
   557                                  lparen		equ	'('             ;AC000;
   558                                  rparen		equ	')'             ;AC000;
   559                                  nullrparen	equ	29h		;AC000;
   560                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   561                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   562                                  star		equ	'*'             ;AC000;
   563                                  plus_chr	equ	'+'             ;AC000;
   564                                  small_a 	equ	'a'             ;AC000;
   565                                  small_z 	equ	'z'             ;AC000;
   566                                  dot_chr 	equ	'.'             ;AC000;
   567                                  tab_chr 	equ	9		;AN032;
   568                                  equal_chr	equ	'='             ;AN032;
   569                                  semicolon	equ	';'             ;AN049;
   570                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   571                                  dot_colon	equ	2e3ah		;AC000; '.:'
   572                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   573                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   574                                  AppendInstall	equ	0B700H		;AN020; append install check
   575                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   576                                  AppendGetState	equ	0B706H		;AN020; append get current state
   577                                  AppendSetState	equ	0B707H		;AN020; append set current state
   578                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   579                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   580                                  
   581                                  ;*************************************
   582                                  ;* PARSE ERROR MESSAGES
   583                                  ;*************************************
   584                                  
   585                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   586                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   587                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   588                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   589                                  
   590                                  ;*************************************
   591                                  ;* EQUATES FOR MESSAGE RETRIEVER
   592                                  ;*************************************
   593                                  
   594                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   595                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   596                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   597                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   598                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   599                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   600                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   601                                  
   602                                  ;*********************************
   603                                  ;* EQUATES FOR INT 10H
   604                                  ;*********************************
   605                                  
   606                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   607                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   608                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   609                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   610                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   611                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   612                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   613                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   614                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   615                                  
   616                                  AltPipeChr	equ	"|"             ; alternate pipe character
   617                                  
   618                                  FCB		equ	5Ch
   619                                  
   620                                  STRUC VARSTRUC
   621 00000000 ??                      .ISDIR:		RESB	1
   622 00000001 ??                      .SIZ:		RESB	1
   623 00000002 ????                    .TTAIL:		RESW	1
   624 00000004 ??                      .INFO:		RESB	1
   625 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   626                                  .size:
   627                                  ENDSTRUC
   628                                  ;
   629                                  ; Flags for internal command parsing
   630                                  ;
   631                                  fCheckDrive	equ	00000001b	; validate drive letter
   632                                  fSwitchAllowed	equ	00000010b	; switches allowed
   633                                  fLimitHelp	equ	00000100b	; /? must appear alone
   634                                  
   635                                  ;
   636                                  ; Test switches
   637                                  ;
   638                                  fParse		EQU	0001h		; display results of parseline
   639                                  
   640                                  ;
   641                                  ; Batch segment structure
   642                                  ;
   643                                  ;   BYTE    type of segment
   644                                  ;   BYTE    echo state of parent on entry to batch file
   645                                  ;   WORD    segment of last batch file
   646                                  ;   WORD    segment for FOR command
   647                                  ;   BYTE    FOR flag state on entry to batch file
   648                                  ;   DWORD   offset for next line
   649                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   650                                  ;   ASCIZ   file name (with . and ..)
   651                                  ;   BYTES   CR-terminated parameters
   652                                  ;   BYTE    0 flag to indicate end of parameters
   653                                  ;
   654                                  
   655                                  BATCHTYPE   equ 0
   656                                  
   657                                  STRUC BATCHSEGMENT
   658 00000000 ??                      .BatType:	RESB	1		; signature
   659 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   660                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   661 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   662 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   663 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   664 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   665 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   666 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   667 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   668                                  .SIZE:
   669                                  ENDSTRUC
   670                                  
   671                                  ANULL		equ	0		; terminates an argv string
   672                                  ARGMAX		equ	64		; max args on a command line
   673                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   674                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   675                                  ARGBLEN 	equ	2*64
   676                                  tplen		equ	64		; max size of one argument
   677                                  arg_cnt_error	equ	1		; number of args > MAXARG
   678                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   679                                  
   680                                  STRUC ARGV_ELE				; elements in the argv array
   681 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   682 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   683 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   684 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   685 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   686 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   687                                  .SIZE:	; 11 ; 27/07/2024
   688                                  ENDSTRUC
   689                                  
   690                                  STRUC ARG_UNIT
   691 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE
   692 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   693 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   694 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   695 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   696                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   697                                  ENDSTRUC
   698                                  
   699                                  ; Equates for initialization
   700                                  ;
   701                                  INITINIT	equ	01h		; initialization in progress
   702                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   703                                  INITCTRLC	equ	04h		; already in ^C handler
   704                                  
   705                                  ;============================================================================
   706                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   707                                  ;============================================================================
   708                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   709                                  
   710                                  ; Current structure of the data returned by the international call
   711                                  
   712                                  struc INTERNAT_BLOCK
   713 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   714 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   715 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   716 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   717 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   718 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   719 0000000F ??                      .bit_field:	resb 1			; Bit values
   720                                  					;   Bit 0 = 0 if currency symbol first
   721                                  					;	  = 1 if currency symbol last
   722                                  					;   Bit 1 = 0 if No space after currency symbol
   723                                  					;	  = 1 if space after currency symbol
   724                                  .currency_cents:
   725 00000010 ??                      		resb 1			; Number of places after currency dec point
   726 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   727 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   728                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   729                                  					;  in pieces.
   730 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   731 00000017 ??                      		resb 1
   732                                  endstruc
   733                                  
   734                                  ; Max size of the block returned by the INTERNATIONAL call
   735                                  
   736                                  internat_block_max equ 32
   737                                  
   738                                  ;============================================================================
   739                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   740                                  ;============================================================================
   741                                  ; 13/10/2018 - Retro DOS v3.0
   742                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   743                                  
   744                                  ;Break	<find first/next buffer>
   745                                  
   746                                  	; MSDOS 3.3 & MSDOS 6.0
   747                                  
   748                                  struc FIND_BUF
   749 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   750 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   751 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   752 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   753 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   754 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   755 00000015 ??                      .ATTR:	    resb 1	; attribute found
   756 00000016 ????                    .TIMR:	    resw 1	; time
   757 00000018 ????                    .DATE:	    resw 1	; date
   758 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   759 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   760 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   761                                  .size:
   762                                  endstruc
   763                                  
   764                                  ;=============================================================================
   765                                  ; PDB.INC, MSDOS 6.0, 1991
   766                                  ;=============================================================================
   767                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   768                                  
   769                                  ;**	Process data block (otherwise known as program header)
   770                                  
   771                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   772                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   773                                  ;	for use.
   774                                  
   775                                  FILPERPROC	EQU     20
   776                                  
   777                                  struc PDB	; Process_data_block
   778 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   779 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   780 00000004 ??                                      resb 1
   781 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   782 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   783 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   784 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   785 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   786 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   787 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   788 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   789 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   790 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   791 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   792 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   793 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   794 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   795 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   796 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   797 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   798 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   799                                  				;  an extended FCB
   800                                  ;endstruc 	; MSDOS 3.3
   801                                  	  	; MSDOS 6.0
   802 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   803 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   804 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   805 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   806                                  endstruc
   807                                  
   808                                  ;=============================================================================
   809                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   810                                  ;=============================================================================
   811                                  ; 24/09/2018 - Retro DOS v3.0
   812                                  
   813                                  ;major_version	equ 6		; Major DOS version
   814                                  ;minor_version	equ 0		; Minor DOS Version
   815                                  
   816                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   817                                  
   818                                  ; MSDOS 3.3 COMMAND.COM
   819                                  ;MAJOR_VERSION	EQU 3
   820                                  ;MINOR_VERSION	EQU 30
   821                                  
   822                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   823                                  ;MAJOR_VERSION	EQU 5		; Major DOS version
   824                                  ;MINOR_VERSION	EQU 0		; Minor DOS version
   825                                  
   826                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
   827                                  MAJOR_VERSION	EQU 6		; Major DOS version
   828                                  MINOR_VERSION	EQU 22		; Minor DOS version
   829                                  
   830                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   831                                  
   832                                  ;-----------------------------------------------------------------------------
   833                                  ; 21/09/2018
   834                                  ;-----------------------------------------------------------------------------
   835                                  ; Retro DOS v3.0 NOTE:  
   836                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   837                                  ;	with minor modifications which are done by me (Erdogan Tan).
   838                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   839                                  ;	source code files (written by using MASM syntax).
   840                                  ;-----------------------------------------------------------------------------
   841                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   842                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   843                                  ;----------------------------------------------------------------------------- 	
   844                                  
   845                                  ;=============================================================================
   846                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   847                                  ;=============================================================================
   848                                  ; 21/09/2018 - Retro DOS v3.0
   849                                  
   850                                  ;	page ,132
   851                                  ;	title	COMMAND - resident code for COMMAND.COM
   852                                  ;	name	COMMAND
   853                                  
   854                                  ;/*
   855                                  ; *                      Microsoft Confidential
   856                                  ; *                      Copyright (C) Microsoft Corporation 1991
   857                                  ; *                      All Rights Reserved.
   858                                  ; */
   859                                  
   860                                  ;*****************************************************************************
   861                                  ;
   862                                  ; MODULE:	       COMMAND.COM
   863                                  ;
   864                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   865                                  ;
   866                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   867                                  ;		       parts.  First is the resident portion, which includes
   868                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   869                                  ;		       error), and 2EH (command line execute); it also has
   870                                  ;		       code to test and, if necessary, reload the transient
   871                                  ;		       portion. Following the resident is the init code, which
   872                                  ;		       is overwritten after use.  Then comes the transient
   873                                  ;		       portion, which includes all command processing (whether
   874                                  ;		       internal or external).  The transient portion loads at
   875                                  ;		       the end of physical memory, and it may be overlayed by
   876                                  ;		       programs that need as much memory as possible. When the
   877                                  ;		       resident portion of command regains control from a user
   878                                  ;		       program, a check sum is performed on the transient
   879                                  ;		       portion to see if it must be reloaded.  Thus programs
   880                                  ;		       which do not need maximum memory will save the time
   881                                  ;		       required to reload COMMAND when they terminate.
   882                                  ;
   883                                  ; ENTRY POINT:	       PROGSTART
   884                                  ;
   885                                  ; INPUT:	       command line at offset 81H
   886                                  ;
   887                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   888                                  ;		       from a secondary command processor via the EXIT
   889                                  ;		       internal command.
   890                                  ;
   891                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   892                                  ;		       hang the system.
   893                                  ;
   894                                  ; INTERNAL REFERENCES:
   895                                  ;
   896                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   897                                  ;		       (COMMAND.DOC)
   898                                  ;
   899                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   900                                  ;		       (COMMAND.DOC)
   901                                  ;
   902                                  ; EXTERNAL REFERENCES:
   903                                  ;
   904                                  ;      ROUTINES:       none
   905                                  ;
   906                                  ;      DATA AREAS:     none
   907                                  ;
   908                                  ;*****************************************************************************
   909                                  ;
   910                                  ;			      REVISION HISTORY
   911                                  ;			      ----------------
   912                                  ;
   913                                  ; DOS 1.00 to DOS 3.30
   914                                  ; --------------------------
   915                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   916                                  ;
   917                                  ; REV 1.17
   918                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   919                                  ;	       resident since the EXELOAD may have overwritten the transient.
   920                                  ;
   921                                  ; REV 1.18
   922                                  ;    05/21/82  IBM version always looks on drive A
   923                                  ;	       MSVER always looks on default drive
   924                                  ;
   925                                  ; REV 1.19
   926                                  ;    06/03/82  Drive spec now entered in command line
   927                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   928                                  ;	       (print volume label)
   929                                  ;
   930                                  ; REV 1.20
   931                                  ;    06/09/82  Prints "directory" after directories
   932                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   933                                  ;
   934                                  ; REV 1.50
   935                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   936                                  ;	       do it right.
   937                                  ;
   938                                  ; REV 1.70
   939                                  ;	       EXEC used to fork off new processes
   940                                  ;
   941                                  ; REV 1.80
   942                                  ;	       C switch for single command execution
   943                                  ;
   944                                  ; REV 1.90
   945                                  ;	       Batch uses XENIX
   946                                  ;
   947                                  ; Rev 2.00
   948                                  ;	       Lots of neato stuff
   949                                  ;	       IBM 2.00 level
   950                                  ;
   951                                  ; Rev 2.01
   952                                  ;	       'D' switch for date time suppression
   953                                  ;
   954                                  ; Rev 2.02
   955                                  ;	       Default userpath is NUL rather than BIN
   956                                  ;		       same as IBM
   957                                  ;	       COMMAND split into pieces
   958                                  ;
   959                                  ; Rev 2.10
   960                                  ;	       INTERNATIONAL SUPPORT
   961                                  ;
   962                                  ; Rev 2.50
   963                                  ;	       all the 2.x new stuff -MU
   964                                  ;
   965                                  ; Rev 3.30     (Ellen G)
   966                                  ;	       CALL internal command (TBATCH2.ASM)
   967                                  ;	       CHCP internal command (TCMD2B.ASM)
   968                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   969                                  ;	       @ sign suppression of batch file line
   970                                  ;	       Replaceable environment value support in batch files
   971                                  ;	       INT 2FH calls for APPEND
   972                                  ;	       Lots of PTR fixes!
   973                                  ;
   974                                  ; Beyond 3.30 to forever  (Ellen G)
   975                                  ; ----------------------
   976                                  ;
   977                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   978                                  ;			Use Message Retriever services
   979                                  ;			/MSG switch for resident extended error msg
   980                                  ;			Convert to new capitalization support
   981                                  ;			Better error recovery on CHCP command
   982                                  ;			Code page file tag support
   983                                  ;			TRUENAME internal command
   984                                  ;			Extended screen line support
   985                                  ;			/P switch on DEL/ERASE command
   986                                  ;			Improved file redirection error recovery
   987                                  ;	(removed)	Improved batch file performance
   988                                  ;			Unconditional DBCS support
   989                                  ;			Volume serial number support
   990                                  ;	(removed)	COMMENT=?? support
   991                                  ;
   992                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   993                                  ;
   994                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   995                                  ;			require delimiters.
   996                                  ;
   997                                  ; A003	PTM P5,P9,P111	Included in A000 development
   998                                  ;
   999                                  ; A004	PTM P86 	Fix IF command to turn off piping before
  1000                                  ;			executing
  1001                                  ;
  1002                                  ; A005	DCR D17 	If user specifies an extension on the command
  1003                                  ;			line search for that extension only.
  1004                                  ;
  1005                                  ; A006	DCR D15 	New message for MkDir - "Directory already
  1006                                  ;			exists"
  1007                                  ;
  1008                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
  1009                                  ;
  1010                                  ; A008	PTM P182	Change COPY to set default if invalid function
  1011                                  ;			returned from code page call.
  1012                                  ;
  1013                                  ; A009	PTM P179	Add CRLF to invalid disk change message
  1014                                  ;
  1015                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
  1016                                  ;			transient COMMAND.
  1017                                  ;
  1018                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
  1019                                  ;			before appending to a file.
  1020                                  ;
  1021                                  ; A012	PTM P189	Fix redirection error recovery.
  1022                                  ;
  1023                                  ; A013	PTM P330	Change date format
  1024                                  ;
  1025                                  ; A014	PTM P455	Fix echo parsing
  1026                                  ;
  1027                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1028                                  ;
  1029                                  ; A016	PTM P354	Fix extended error message addressing
  1030                                  ;
  1031                                  ; A017	PTM P448	Fix appending to 0 length files
  1032                                  ;
  1033                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1034                                  ;			the parser fails on. Fail on duplicate switches.
  1035                                  ;
  1036                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1037                                  ;			critical error
  1038                                  ;
  1039                                  ; A020	DCR D43 	Set append state off while in DIR
  1040                                  ;
  1041                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1042                                  ;
  1043                                  ; A022	DCR D209	Enhanced error recovery
  1044                                  ;
  1045                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1046                                  ;
  1047                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1048                                  ;
  1049                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1050                                  ;
  1051                                  ; A026	DCR D191	Change redirection error recovery support.
  1052                                  ;
  1053                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1054                                  ;			with a carriage return.
  1055                                  ;
  1056                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1057                                  ;			date and invalid time messages.
  1058                                  ;
  1059                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1060                                  ;			and TIME.
  1061                                  ;
  1062                                  ; A030	DCR D201	New extended attribute format.
  1063                                  ;
  1064                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1065                                  ;
  1066                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1067                                  ;
  1068                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1069                                  ;
  1070                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1071                                  ;
  1072                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1073                                  ;			do a read to determine eof.
  1074                                  ;
  1075                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1076                                  ;			so that ASSIGN works correctly.
  1077                                  ;
  1078                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1079                                  ;
  1080                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1081                                  ;
  1082                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1083                                  ;
  1084                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1085                                  ;			specified.
  1086                                  ;
  1087                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1088                                  ;			executes.
  1089                                  ;
  1090                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1091                                  ;			files causing loss of batch file.
  1092                                  ;
  1093                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1094                                  ;			CALL'ed batch files.
  1095                                  ;
  1096                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1097                                  ;			as an end of line character
  1098                                  ;
  1099                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1100                                  ;			and extended message pointers when we EXIT if
  1101                                  ;			COMMAND /P is the top level process.
  1102                                  ;
  1103                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1104                                  ;			"File not found - fn"
  1105                                  ;
  1106                                  ; A047	PTM P2819	Fix transient reload prompt message
  1107                                  ;
  1108                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1109                                  ;			when DBCS code was added.
  1110                                  ;
  1111                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1112                                  ;			on line.
  1113                                  ;
  1114                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1115                                  ;
  1116                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1117                                  ;
  1118                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1119                                  ;
  1120                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1121                                  ;
  1122                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1123                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1124                                  ;
  1125                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1126                                  ;			problems with breaking out of INT 24h
  1127                                  ;
  1128                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1129                                  ;
  1130                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1131                                  ;			before the "string".  EX: COMMAND /CDIR
  1132                                  ;
  1133                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1134                                  ;			DBCS switch.
  1135                                  ;
  1136                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1137                                  ;			the time.
  1138                                  ;
  1139                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1140                                  ;			messages to be disk based.  Only keep them if /MSG
  1141                                  ;			is used.
  1142                                  ;
  1143                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1144                                  ;			out of internal commands, due to substitution blocks
  1145                                  ;			not being reset.
  1146                                  ;
  1147                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1148                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1149                                  ;			secondary copy of environment.	Change default slash in
  1150                                  ;			default comspec string to backslash.
  1151                                  ;
  1152                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1153                                  ;			text for critical error messages.
  1154                                  ;
  1155                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1156                                  ;	5/20/88 	with Microsoft product already shipped.
  1157                                  ;
  1158                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1159                                  ;	 5/20/88	with Microsoft product already shipped.
  1160                                  ;
  1161                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1162                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1163                                  ;			header and space remaining.
  1164                                  ;
  1165                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1166                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1167                                  ;			environment was putting a "Z block" marker in the old
  1168                                  ;			environment.  The fix is to move to the old environment
  1169                                  ;			to the new environment before doing the SETBLOCK.
  1170                                  ;
  1171                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1172                                  ;        09/19/88       because the check for APPEND needed to be performed
  1173                                  ;                       before the DIR's findfirst.
  1174                                  ;
  1175                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1176                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1177                                  ;                       loading trans w/new comspec with no user change comspec.
  1178                                  ;
  1179                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1180                                  ;        11/05/88       Expansion of environment variables into batch line of
  1181                                  ;                       128 chars was not being counted and "%" which should be
  1182                                  ;                       ignored were being counted.
  1183                                  ;
  1184                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1185                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1186                                  ;                       ing included in checksum and was being overwritten by
  1187                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1188                                  ;                       Also removed fix A069 (because flag now protected).
  1189                                  ;
  1190                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1191                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1192                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1193                                  ;
  1194                                  ;***********************************************************************************
  1195                                  
  1196                                  ;
  1197                                  ;	Revision History
  1198                                  ;	================
  1199                                  ;
  1200                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1201                                  ;					at init time (date/time prompt)
  1202                                  ;
  1203                                  
  1204                                  ;
  1205                                  ;.xcref
  1206                                  ;.xlist
  1207                                  ;	include dossym.inc		; basic DOS symbol set
  1208                                  ;	include syscall.inc		; DOS function names
  1209                                  ;	include comsw.asm		; build version info
  1210                                  ;	include comequ.asm		; common command.com symbols
  1211                                  ;	include resmsg.equ		; resident message names
  1212                                  ;
  1213                                  ;	include comseg.asm		;segment ordering
  1214                                  ;.list
  1215                                  ;.cref
  1216                                  
  1217                                  ;CODERES segment public byte
  1218                                  ;CODERES ends
  1219                                  ;
  1220                                  ;DATARES 	segment public byte
  1221                                  ;		extrn	AccDen:byte
  1222                                  ;		extrn	Batch:word
  1223                                  ;		extrn	EchoFlag:byte
  1224                                  ;		extrn	ExeBad:byte
  1225                                  ;		extrn	ExecEMes:byte
  1226                                  ;		extrn	ExecErrSubst:byte
  1227                                  ;		extrn	ExtCom:byte
  1228                                  ;		extrn	ForFlag:byte
  1229                                  ;		extrn	IfFlag:byte
  1230                                  ;		extrn	InitFlag:BYTE
  1231                                  ;		extrn	Nest:word
  1232                                  ;		extrn	PipeFlag:byte
  1233                                  ;		extrn	RBadNam:byte
  1234                                  ;		extrn	RetCode:word
  1235                                  ;		extrn	SingleCom:word
  1236                                  ;		extrn	TooBig:byte
  1237                                  ;
  1238                                  ;		extrn	OldDS:word
  1239                                  ;
  1240                                  ;DATARES 	ends
  1241                                  ;
  1242                                  ;
  1243                                  ;INIT		segment public para
  1244                                  ;		extrn	ConProc:near
  1245                                  ;		extrn	Init_Contc_SpecialCase:near
  1246                                  ;INIT		ends
  1247                                  
  1248                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1249                                  ; --------------------------------------
  1250                                  ; 'command5.s' source code reference(s):
  1251                                  
  1252                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1253                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1254                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1255                                  ; ----------------------------------------------------------------------				 	 	
  1256                                  
  1257                                  ; -----------------------------------------------------------------------------
  1258                                  ; START OF RESIDENT PORTION
  1259                                  ; -----------------------------------------------------------------------------
  1260                                  ; SEGMENT - DATARES
  1261                                  ; -----------------------------------------------------------------------------
  1262                                  
  1263                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1264                                  
  1265                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1266                                  
  1267                                  ;==============================================================================
  1268                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1269                                  ;==============================================================================
  1270                                  
  1271                                  ;This file contains the low memory stub for command.com which hooks all the
  1272                                  ;entry points into the resident command.com and directs the calls to the
  1273                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1274                                  ;
  1275                                  ;The stub has been made part of the resident data and will always
  1276                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1277                                  ;that actually hook the interrupt vectors belong to either the first 
  1278                                  ;command.com or to any other command.com executed with the /p switch. 
  1279                                  ;
  1280                                  ;The stub also keeps track of the current active data segment. The 
  1281                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1282                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1283                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1284                                  ;the exit code picks up the previous data segment pointer from the current
  1285                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1286                                  ;
  1287                                  ;Right now the stub does not bother about A20 switching. We assume
  1288                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1289                                  ;value of the current data segment in one of the registers. A20 toggle 
  1290                                  ;support maybe added as a future enhancement, if the need is felt.
  1291                                  
  1292                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1293                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1294                                  
  1295                                  	[ORG 100H]
  1296                                  
  1297                                  	; 21/09/2018 - Retro DOS v3.0
  1298                                  StartCode:
  1299 00000000 E9BD14                  	jmp	ConProc	; 10/01/2023 
  1300                                  
  1301                                  	; 09/01/2023
  1302                                  
  1303                                  ; Make following table word-aligned, and at the same time, provide a
  1304                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1305                                  
  1306                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARESRES:0103h
  1307 00000003 66                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1308                                  
  1309                                  ;All the entry points declared below are patched in at INIT time with the
  1310                                  ;proper segment and offset values after the resident code segment has been
  1311                                  ;moved to its final location
  1312                                  
  1313                                  ;!!!WARNING!!!
  1314                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1315                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1316                                  ;in the correct segments and offsets
  1317                                  
  1318                                  Int2f_Entry:
  1319 00000004 [D813]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1320 00000006 0000                    	dw	0
  1321                                  Int2e_Entry:
  1322 00000008 [340E]                  	dw	Int_2e			; Address of int 2eh handler
  1323 0000000A 0000                    	dw	0
  1324                                  Ctrlc_Entry:
  1325 0000000C [F30C]                  	dw	ContC			; Address of Ctrl-C handler
  1326 0000000E 0000                    	dw	0
  1327                                  CritErr_Entry:
  1328 00000010 [F510]                  	dw	DSKERR			; Address of critical error handler
  1329 00000012 0000                    	dw	0
  1330                                  
  1331                                  Exec_Entry:
  1332 00000014 00000000                	dd	0			; Entry from transient to Ext_Exec
  1333                                  RemCheck_Entry:
  1334 00000018 00000000                	dd	0			; Entry from transient to TRemCheck
  1335                                  TrnLodCom1_Entry:
  1336 0000001C 00000000                	dd	0			; Entry from transient to LodCom1
  1337                                  LodCom_Entry:
  1338 00000020 00000000                	dd	0			; Entry after exit from command.com
  1339                                  MsgRetrv_Entry:
  1340 00000024 00000000                	dd	0			; Entry from external to MsgRetriever
  1341                                  HeadFix_Entry:
  1342 00000028 00000000                	dd	0			; Entry from trans to HeadFix
  1343                                  UMBOff_Entry:
  1344 0000002C 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1345                                  XMMCallAddr:
  1346 00000030 00000000                	dd	0			; Call address for XMM functions
  1347                                  ComInHMA:
  1348 00000034 00                      	db	0			; Flags if command.com in HMA
  1349                                  
  1350                                  Int2f_Trap:
  1351                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1352 00000035 E86400                  	call	CheckA20
  1353 00000038 1E                      	push	ds			; push current ds value
  1354 00000039 0E                      	push	cs			; push resident data segment value
  1355                                  	;jmp	cs:Int2f_Entry
  1356 0000003A 2EFF2E[0400]            	jmp	far [cs:Int2f_Entry]
  1357                                  
  1358                                  Int2e_Trap:
  1359 0000003F FB                      	sti
  1360 00000040 E85900                  	call	CheckA20
  1361 00000043 1E                      	push	ds			; push current ds value
  1362 00000044 0E                      	push	cs			; push resident data segment value
  1363                                  	;jmp	cs:Int2e_Entry
  1364 00000045 2EFF2E[0800]            	jmp	far [cs:Int2e_Entry]
  1365                                  
  1366                                  Ctrlc_Trap:
  1367 0000004A FB                      	sti
  1368 0000004B E84E00                  	call	CheckA20
  1369 0000004E 1E                      	push	ds			; push current ds value
  1370 0000004F 0E                      	push	cs			; push resident data segment value
  1371                                  	;jmp	cs:Ctrlc_Entry
  1372 00000050 2EFF2E[0C00]            	jmp	far [cs:Ctrlc_Entry]
  1373                                  
  1374                                  CritErr_Trap:
  1375 00000055 FB                      	sti
  1376 00000056 E84300                  	call	CheckA20
  1377 00000059 1E                      	push	ds			; push current ds value
  1378 0000005A 0E                      	push	cs			; push resident data segment value
  1379                                  	;jmp	cs:CritErr_Entry
  1380 0000005B 2EFF2E[1000]            	jmp	far [cs:CritErr_Entry]
  1381                                  
  1382                                  Exec_Trap:
  1383 00000060 E83900                  	call	CheckA20
  1384 00000063 1E                      	push	ds			; push current ds value
  1385 00000064 0E                      	push	cs			; push resident data segment value
  1386                                  	;jmp	cs:Exec_Entry
  1387 00000065 2EFF2E[1400]            	jmp	far [cs:Exec_Entry]
  1388                                  
  1389                                  RemCheck_Trap:
  1390 0000006A E82F00                  	call	CheckA20
  1391 0000006D 1E                      	push	ds			; push current ds value
  1392 0000006E 0E                      	push	cs			; push resident data segment value
  1393                                  	;jmp	cs:RemCheck_Entry
  1394 0000006F 2EFF2E[1800]            	jmp	far [cs:RemCheck_Entry]
  1395                                  
  1396                                  TrnLodCom1_Trap:
  1397 00000074 E82500                  	call	CheckA20
  1398 00000077 1E                      	push	ds			; push current ds value
  1399 00000078 0E                      	push	cs			; push resident data segment value
  1400                                  	;jmp	cs:TrnLodCom1_Entry
  1401 00000079 2EFF2E[1C00]            	jmp	far [cs:TrnLodCom1_Entry]
  1402                                  
  1403                                  LodCom_Trap:
  1404 0000007E E81B00                  	call	CheckA20
  1405 00000081 1E                      	push	ds			; push current ds value
  1406 00000082 0E                      	push	cs			; push resident data segment value
  1407                                  	;jmp	cs:LodCom_Entry
  1408 00000083 2EFF2E[2000]            	jmp	far [cs:LodCom_Entry]
  1409                                  
  1410                                  MsgRetrv_Trap:
  1411 00000088 E81100                  	call	CheckA20
  1412 0000008B 1E                      	push	ds			; push current ds value
  1413 0000008C 0E                      	push	cs			; push resident data segment value
  1414                                  	;jmp	cs:MsgRetrv_Entry
  1415 0000008D 2EFF2E[2400]            	jmp	far [cs:MsgRetrv_Entry]
  1416                                  
  1417                                  HeadFix_Trap:
  1418 00000092 E80700                  	call	CheckA20
  1419 00000095 1E                      	push	ds			; push current ds value
  1420 00000096 0E                      	push	cs			; push resident data segment value
  1421                                  	;jmp	cs:HeadFix_Entry
  1422 00000097 2EFF2E[2800]            	jmp	far [cs:HeadFix_Entry]
  1423                                  
  1424                                  ; ----------------------------------------------------------------------------
  1425                                  
  1426                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1427                                  %if 0
  1428                                  	; 09/01/2023
  1429                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1430                                  
  1431                                  	; 05/06/2023
  1432                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1433                                  CheckA20:
  1434                                  	pushf				; save current flags
  1435                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1436                                  	jz	short A20_on		; no, jump to resident
  1437                                  
  1438                                  	call	QueryA20
  1439                                  	jnc	short A20_on		; A20 is on, jump to resident
  1440                                  
  1441                                  	call	EnableA20		; turn A20 on
  1442                                  A20_on:
  1443                                  	popf				; flags have to be unchanged
  1444                                  	retn
  1445                                  %else
  1446                                  	; 18/07/2024
  1447                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1448                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1449                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1450                                  CheckA20:
  1451 0000009C 9C                      	pushf				; save current flags
  1452 0000009D 2E803E[3400]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1453 000000A3 741A                    	jz	short A20_on		; no, jump to resident
  1454                                  	; 18/07/2024
  1455 000000A5 50                      	push	ax
  1456 000000A6 53                      	push	bx
  1457                                  QueryA20:
  1458                                  	;mov	ah,7
  1459 000000A7 B407                    	mov	ah,XMM_QUERY_A20
  1460                                  	;call	cs:XMMCallAddr
  1461 000000A9 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1462 000000AE 09C0                    	or	ax,ax
  1463                                  	; 16/04/2023
  1464 000000B0 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1465                                  	; 18/07/2024
  1466                                  EnableA20:
  1467                                  	;mov	ah,5
  1468 000000B2 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1469                                  	;call	cs:XMMCallAddr
  1470 000000B4 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1471 000000B9 09C0                    	or	ax,ax
  1472 000000BB 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1473                                  QA20_ON:
  1474 000000BD 5B                      	pop	bx
  1475 000000BE 58                      	pop	ax
  1476                                  A20_on:
  1477 000000BF 9D                      	popf				; flags have to be unchanged
  1478 000000C0 C3                      	retn
  1479                                  ;If we get an error, we just loop forever
  1480                                  XMMerror:
  1481 000000C1 EBFE                    	jmp	short XMMerror
  1482                                  %endif
  1483                                  
  1484                                  ; ----------------------------------------------------------------------------
  1485                                  
  1486                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1487                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1488                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1489                                  ; M005; pointers because our cs is going to be different. The segment to
  1490                                  ; M005; jump to is patched in at init time. (in init.asm)
  1491                                  
  1492                                  Carousel_i2f_Hook:			; M005
  1493 000000C3 EA                      	db	0EAh			; far jump opcode; M005
  1494 000000C4 [3500]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1495 000000C6 0000                    	dw	0			; int 2fh segment; M005
  1496                                  
  1497                                  ; ----------------------------------------------------------------------------
  1498                                  
  1499                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1500                                  %if 0
  1501                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1502                                  QueryA20:
  1503                                  	push	bx
  1504                                  	push	ax
  1505                                  	;mov	ah,7
  1506                                  	mov	ah,XMM_QUERY_A20
  1507                                  	;call	cs:XMMCallAddr
  1508                                  	call	far [cs:XMMCallAddr]
  1509                                  	or	ax,ax
  1510                                  	pop	ax
  1511                                  	pop	bx
  1512                                  	; 16/04/2023
  1513                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1514                                  	stc					; OFF
  1515                                  	;retn
  1516                                  QA20_ON:
  1517                                  	;clc					; ON
  1518                                  	retn
  1519                                  %endif
  1520                                  
  1521                                  ; ----------------------------------------------------------------------------
  1522                                  
  1523                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1524                                  %if 0
  1525                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1526                                  EnableA20:
  1527                                  	push	bx
  1528                                  	push	ax
  1529                                  	;mov	ah,5
  1530                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1531                                  	;call	cs:XMMCallAddr
  1532                                  	call	far [cs:XMMCallAddr]
  1533                                  	or	ax,ax
  1534                                  	jz	short XMMerror			; AX = 0 fatal error
  1535                                  	pop	ax
  1536                                  	pop	bx
  1537                                  	retn
  1538                                  ;If we get an error, we just loop forever
  1539                                  XMMerror:
  1540                                  	jmp	short XMMerror
  1541                                  %endif
  1542                                  
  1543                                  ; -----------------------------------------------------------------------------
  1544                                  
  1545                                  ; 05/06/2023
  1546                                  ;HV_Extern	equ	1
  1547                                  ;HV_LoadHigh	equ	1
  1548                                  ;HV_Stub	equ	1
  1549                                  ;	include	highvar.inc	; Make high-memory variables external here
  1550                                  ;	include	highexit.inc	; And add code for UnHideUMBs
  1551                                  
  1552                                  ;==============================================================================
  1553                                  ; HIGHEXIT.INC, MSDOS 6.0, 1992
  1554                                  ;==============================================================================
  1555                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1556                                  
  1557                                  DOS_STRATEGY_GET equ  5800h	; Int 21h, Func 58h, Svc 0 = get alloc strategy
  1558                                  DOS_STRATEGY_SET equ  5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
  1559                                  DOS_UMBLINK_GET	equ   5802h	; Int 21h, Func 58h, Svc 2 = get link state
  1560                                  DOS_UMBLINK_SET	equ   5803h	; Int 21h, Func 58h, Svc 3 = set link state
  1561                                  DOS_GET_LISTS	equ     52h	; Int 21h, Func 52h = get list of lists
  1562                                  
  1563                                  UMB_HeadIdx	equ     8Ch	; Offset from ES (after func52h) to get UMBHead
  1564                                  
  1565                                  	; 05/06/2023
  1566                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:01D9h
  1567                                  
  1568                                  ; -----------------------------------------------------------------------------
  1569                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
  1570                                  ; -----------------------------------------------------------------------------
  1571                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
  1572                                  ;               very little to do, as no elelments will be marked as HIDDEN.
  1573                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
  1574                                  ; ERROR:  None
  1575                                  ; USES:   fInHigh (from highvar.inc), carry flag
  1576                                  ; -----------------------------------------------------------------------------
  1577                                  
  1578                                  UnHideUMBs:
  1579 000000C8 50                      	push	ax		; Save ax for what we're about to do
  1580                                  
  1581                                  ; -----------------------------------------------------------------------------
  1582                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
  1583                                  ;    length of time. Those six constitute a check of whether or not we should
  1584                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
  1585                                  ;    will destroy the current link-state and memory-allocation strategy after
  1586                                  ;    every command execution.
  1587                                  ; -----------------------------------------------------------------------------
  1588                                  
  1589                                  	; 05/06/2023
  1590                                  	;getdata al,fInHigh	; Get InHigh from data segment
  1591                                  	;
  1592                                  	;push	ds
  1593 000000C9 A0[D604]                	mov	al,[fInHigh]
  1594                                  	;pop	ds
  1595                                  
  1596                                  	;or	al, al
  1597                                  	;jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
  1598                                  
  1599                                  	;pop	ax		; then there's nothing to do here... so
  1600                                  	;stc			; restore everything and return.  Just like
  1601                                  	;retn			; that.
  1602                                  
  1603                                  	; 05/06/2023
  1604 000000CC 3C01                    	cmp	al,1
  1605 000000CE 720F                    	jb	short uhu20	; cf=1
  1606                                  uhu10:	
  1607 000000D0 E8A000                  	call	linkumb		; Make sure UMBs are linked in.
  1608 000000D3 E82000                  	call	FreeUMBs
  1609                                  
  1610                                  	;putdata fInHigh, 0	; We're leaving, so update fInHigh.
  1611                                  	;
  1612                                  	;push	es
  1613                                  	;mov	byte [es:fInHigh],0
  1614                                  	;pop	es
  1615                                  	; 05/06/2023
  1616 000000D6 C606[D604]00            	mov	byte [fInHigh],0
  1617                                  
  1618 000000DB E80300                  	call	he_unlink	; Unlink UMBs
  1619                                  
  1620                                  	;pop	ax
  1621                                  	;clc
  1622                                  	;retn
  1623                                  
  1624 000000DE F8                      	clc
  1625                                  uhu20:
  1626 000000DF 58                      	pop	ax
  1627 000000E0 C3                      	retn
  1628                                  
  1629                                  ; -----------------------------------------------------------------------------
  1630                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
  1631                                  ; -----------------------------------------------------------------------------
  1632                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
  1633                                  ; EXIT:     None
  1634                                  ; ERROR:    None
  1635                                  ; USES:     AX, BX
  1636                                  ; -----------------------------------------------------------------------------
  1637                                  
  1638                                  	; 05/06/2023
  1639                                  he_unlink:
  1640 000000E1 30FF                    	xor	bh, bh
  1641                                  	
  1642                                  	;getdata bl,fm_umb		; Restore original link-state
  1643                                  	;
  1644                                  	;push	ds
  1645 000000E3 8A1E[DB04]              	mov     bl,[fm_umb]
  1646                                  	;pop	ds
  1647                                  
  1648 000000E7 B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1649 000000EA CD21                    	int	21h
  1650                                  
  1651                                  	;xor	bh, bh
  1652                                  	
  1653                                  	;getdata bl,fm_strat		; Restore original mem-alloc strategy
  1654                                  	;push	ds
  1655 000000EC 8A1E[DC04]              	mov     bl,[fm_strat]
  1656                                  	;pop	ds
  1657                                  
  1658 000000F0 B80158                  	mov	ax,DOS_STRATEGY_SET ; 5801h
  1659 000000F3 CD21                    	int	21h
  1660                                  
  1661 000000F5 C3                      	retn
  1662                                  
  1663                                  ; -----------------------------------------------------------------------------
  1664                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
  1665                                  ; -----------------------------------------------------------------------------
  1666                                  ; ENTRY:    None
  1667                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
  1668                                  ; ERROR:    None (ignore CF)
  1669                                  ; USES:     Flags
  1670                                  ; -----------------------------------------------------------------------------
  1671                                  
  1672                                  	; 05/06/2023
  1673                                  arena_signature_end equ 5Ah ; 'Z'
  1674                                  arena_signature equ 0
  1675                                  arena_size equ 3
  1676                                  
  1677                                  FreeUMBs:
  1678 000000F6 50                      	push	ax
  1679 000000F7 06                      	push	es
  1680                                  
  1681 000000F8 E86900                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
  1682 000000FB 721C                    	jc	short fusX
  1683                                  fus10:
  1684 000000FD 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
  1685 000000FF E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
  1686 00000102 7503                    	jnz	short fus20
  1687 00000104 E84200                  	call	freeMCB
  1688                                  fus20:	
  1689 00000107 26A00000                	mov	al,[es:arena_signature] ; mov al,[es:0]
  1690 0000010B 3C5A                    	cmp	al,arena_signature_end ; 'Z' ; 5Ah
  1691 0000010D 740A                    	jz	short fusX	; That means this was the last MCB--that's it.
  1692                                  
  1693 0000010F 8CC0                    	mov	ax,es
  1694 00000111 2603060300              	add	ax,[es:arena_size] ; add ax,[es:3]
  1695 00000116 40                      	inc	ax
  1696                                  	;mov	es,ax		; Go on forward.
  1697                                  	;jmp	short fus10
  1698                                  	; 18/07/2024
  1699 00000117 EBE4                    	jmp	short fus10
  1700                                  fusX:
  1701 00000119 07                      	pop	es
  1702 0000011A 58                      	pop	ax
  1703 0000011B C3                      	retn
  1704                                  
  1705                                  ; -----------------------------------------------------------------------------
  1706                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
  1707                                  ; -----------------------------------------------------------------------------
  1708                                  ; ENTRY:    ES:0 should point to an MCB
  1709                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
  1710                                  ; ERROR:    None
  1711                                  ; USES:     Flags
  1712                                  ; -----------------------------------------------------------------------------
  1713                                  
  1714                                  	; 05/06/2023
  1715                                  SystemPSPOwner	equ 8
  1716                                  arena_owner	equ 1
  1717                                  arena_name	equ 8
  1718                                  
  1719                                  isHideMCB:
  1720 0000011C 50                      	push	ax
  1721                                  
  1722 0000011D 26833E010008            	cmp	word [es:arena_owner],SystemPSPOwner ; If the owner's SYSTEM
  1723 00000123 7522                    	jne	short ihm_x			     ; then check for HIDDEN
  1724                                  
  1725 00000125 26A10800                	mov	ax,[es:arena_name]   ; [es:8]
  1726 00000129 3D4849                  	cmp	ax,'HI' ; 4948h
  1727 0000012C 7519                    	jne	short ihm_x
  1728 0000012E 26A10A00                	mov	ax,[es:arena_name+2] ; [es:10]
  1729 00000132 3D4444                  	cmp	ax,'DD' ; 4444h
  1730 00000135 7510                    	jne	short ihm_x
  1731 00000137 26A10C00                	mov	ax,[es:arena_name+4] ; [es:12]
  1732 0000013B 3D454E                  	cmp	ax,'EN' ; 4E45h
  1733 0000013E 7507                    	jne	short ihm_x
  1734 00000140 26A10E00                	mov	ax,[es:arena_name+6] ; [es:14]
  1735 00000144 3D2020                  	cmp	ax,'  ' ; 2020h
  1736                                  ihm_x:
  1737 00000147 58                      	pop	ax
  1738 00000148 C3                      	retn
  1739                                  
  1740                                  ; -----------------------------------------------------------------------------
  1741                                  ;*** freeMCB - marks as free the MCB at ES:0
  1742                                  ; -----------------------------------------------------------------------------
  1743                                  ; ENTRY:    ES:0 should point to an MCB
  1744                                  ; EXIT:     None; MCB free'd
  1745                                  ; ERROR:    None
  1746                                  ; USES:     AX
  1747                                  ; -----------------------------------------------------------------------------
  1748                                  
  1749                                  	; 05/06/2023
  1750                                  freeMCB:
  1751 00000149 26C70601000000          	mov	word [es:arena_owner],0	; [es:1]
  1752 00000150 B82020                  	mov	ax,'  '
  1753 00000153 26A30800                	mov	[es:arena_name+0],ax	; [es:8]
  1754 00000157 26A30A00                	mov	[es:arena_name+2],ax
  1755 0000015B 26A30C00                	mov	[es:arena_name+4],ax
  1756 0000015F 26A30E00                	mov	[es:arena_name+6],ax	; [es:14]
  1757 00000163 C3                      	retn
  1758                                  
  1759                                  ; -----------------------------------------------------------------------------
  1760                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
  1761                                  ; -----------------------------------------------------------------------------
  1762                                  ; ENTRY:  Nothing
  1763                                  ; EXIT:   AX contains 0x9FFF for most systems
  1764                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
  1765                                  ; USES:   Flags, AX
  1766                                  ; -----------------------------------------------------------------------------
  1767                                  
  1768                                  	; 05/06/2023
  1769                                  HeadUmb:
  1770                                  	; 18/07/2024 - PCDOS 7.1 - RESGROUP:02CDh
  1771                                  	;push	si
  1772                                  	;push	ds
  1773 00000164 06                      	push	es
  1774                                  
  1775 00000165 B452                    	mov	ah,DOS_GET_LISTS	; Call int 21h, function 52h...
  1776 00000167 CD21                    	int	21h	; DOS - 2+ internal - GET LIST OF LISTS
  1777                                  			; Return: ES:BX -> DOS list of lists
  1778                                  
  1779 00000169 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008Ch
  1780 0000016D 83F8FF                  	cmp	ax,0FFFFh
  1781                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
  1782                                  	;clc				; Else, it isn't.
  1783                                  	;jmp	short xhu_x
  1784                                  ;xhu_e:
  1785                                  	;stc
  1786                                  	; 05/06/2023
  1787 00000170 F5                      	cmc	; cf=0 -> cf=1
  1788                                  ;xhu_x:
  1789 00000171 07                      	pop	es
  1790                                  	; 18/07/2024
  1791                                  	;pop	ds
  1792                                  	;pop	si
  1793 00000172 C3                      	retn
  1794                                  
  1795                                  ; -----------------------------------------------------------------------------
  1796                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
  1797                                  ; -----------------------------------------------------------------------------
  1798                                  ; ENTRY:    None
  1799                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
  1800                                  ; ERROR:    None
  1801                                  ; USES:     AX, BX, fm_umb
  1802                                  ; -----------------------------------------------------------------------------
  1803                                  
  1804                                  	; 05/06/2023
  1805                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:029Dh
  1806                                  linkumb:
  1807 00000173 B80258                  	mov	ax,DOS_UMBLINK_GET ; 5802h
  1808 00000176 CD21                    	int	21h			; Current link-state is now in al
  1809                                  
  1810 00000178 08C0                    	or	al,al			; BUGBUG: proper check?
  1811 0000017A 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
  1812                                  
  1813 0000017C B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1814 0000017F BB0100                  	mov	bx,1
  1815 00000182 CD21                    	int	21h
  1816                                  lumbX:
  1817 00000184 C3                      	retn
  1818                                  
  1819                                  ;==============================================================================
  1820                                  ; STUB.ASM, MSDOS 6.0, 1991
  1821                                  ;==============================================================================
  1822                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1823                                  
  1824                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1825                                  	; 05/06/2023 - Retro DOS 4.2
  1826                                  
  1827                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1828                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1829                                  ;returns with all registers preserved and so all our segment registers are
  1830                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1831                                  ;comes back here. In this case the segment registers and the stack are
  1832                                  ;not set up and random things can happen. The only way to setup all the 
  1833                                  ;registers is to use the cs value and this can only be done when we are in
  1834                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1835                                  ;the code segment to the data segment.
  1836                                  
  1837                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02AFh
  1838                                  Issue_Exec_Call:
  1839 00000185 CD21                    	int 	21h
  1840                                  
  1841                                  ;We disable interrupts while changing the stack because there is a bug in 
  1842                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1843                                  ;are being changed.
  1844                                  
  1845 00000187 FA                      	cli
  1846 00000188 0E                      	push	cs
  1847 00000189 17                      	pop	ss
  1848                                  
  1849                                  	;;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1850                                  	;mov	sp,60Ah	; MSDOS 6.22 COMMAND.COM RESGROUP:02B4h
  1851                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1852 0000018A BC[D404]                	mov	sp,RStack		; stack is set up
  1853                                  
  1854                                  ; 05/06/2023	
  1855                                  %if 0	
  1856                                  	; 20/04/2023
  1857                                  	;sti
  1858                                  	;push	cs
  1859                                  	;pop	ds			; ds = DATARES
  1860                                  
  1861                                  ; M009; Restore UMB state to that before Exec
  1862                                  
  1863                                  	;pushf				;    This call frees HIDDEN umb's,
  1864                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1865                                  	;popf				;    strategy and link state, as app.
  1866                                  
  1867                                  	; 09/01/2023 - Retro DOS v4.0
  1868                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1869                                  	; ----------------------
  1870                                  	sti
  1871                                  	push    cs
  1872                                  	pop     ds
  1873                                  	pushf
  1874                                  	;mov	al,[cs:fInHigh]
  1875                                  	; 18/04/2023
  1876                                  	mov	al,[fInHigh]
  1877                                  	test	al,80h
  1878                                  	jz      short uhu10
  1879                                  	and     al,7Fh
  1880                                  	;;call	cs:UMBOff_Entry
  1881                                  	;call	far [cs:UMBOff_Entry]
  1882                                  	call	far [UMBOff_Entry]
  1883                                  uhu10:
  1884                                  	;and	byte [cs:fInHigh],7Fh
  1885                                  	; 18/04/2023
  1886                                  	and	byte [fInHigh],7Fh
  1887                                  	popf
  1888                                  	; ----------------------
  1889                                  
  1890                                  %endif
  1891                                  	; 05/06/2023 - Retro DOS 4.2
  1892                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02B7h
  1893 0000018D FB                      	sti
  1894 0000018E 0E                      	push	cs
  1895 0000018F 1F                      	pop	ds			; ds = DATARES
  1896                                  
  1897                                  ; M009; Restore UMB state to that before Exec
  1898                                  
  1899 00000190 9C                      	pushf				;    This call frees HIDDEN umb's,
  1900 00000191 E834FF                  	call	UnHideUMBs		; <- restores the memory-allocation
  1901 00000194 9D                      	popf				;    strategy and link state, as app
  1902                                  
  1903                                  ;We now jump to the stub trap which returns us to the resident code. All
  1904                                  ;flags are preserved by the stub code.
  1905                                  
  1906 00000195 E9C8FE                  	jmp	Exec_Trap
  1907                                  
  1908                                  ;==============================================================================
  1909                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1910                                  ;==============================================================================
  1911                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1912                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1913                                  
  1914                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:02C2h (DATARES:02C2h) (*)
  1915                                  ; -----------------------------------------------------------------------------
  1916 00000198 636F78                  cox_location:	db 'cox' ; (*)	
  1917 0000019B 0000                    cox_Y_option:	dw 0     ; (*)
  1918                                  ; -----------------------------------------------------------------------------
  1919                                  
  1920                                  ;***	Message substitution blocks
  1921                                  
  1922                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1923                                  
  1924                                  ;BlkDevErrSubst	label	byte
  1925                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1926                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1927                                  
  1928 0000019D 02                      BlkDevErrSubst: db	2
  1929 0000019E 0000                    BlkDevErrRw:	dw	0
  1930 000001A0 01                      		db	1
  1931 000001A1 [A301]                  		dw	DrvLet
  1932                                  
  1933 000001A3 41                      DrvLet:		db	'A'			; drive letter
  1934                                  
  1935                                  
  1936                                  ;CharDevErrSubst label	byte
  1937                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1938                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1939                                  
  1940 000001A4 02                      CharDevErrSubst: db	2
  1941 000001A5 0000                    CharDevErrRw:	dw	0
  1942 000001A7 02                      		db	2
  1943 000001A8 [B601]                  		dw	DevName
  1944                                  
  1945                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1946                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1947                                  ;		db	0
  1948                                  
  1949                                  ;NeedVolSubst	label	byte
  1950                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1951                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1952                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1953                                  
  1954 000001AA 02                      NeedVolSubst:	db	2
  1955 000001AB [B301]                  		dw	VolName
  1956 000001AD 03                      		db	3
  1957 000001AE [C101]                  		dw	VolSer+2
  1958 000001B0 03                      		db	3
  1959 000001B1 [BF01]                  		dw	VolSer
  1960                                  
  1961                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1962                                  	; NOTE:	VolName and VolSer must be adjacent
  1963                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1964                                  		; 18/07/2024
  1965 000001B3 000000                  VolName:	db	3 dup(0)
  1966 000001B6 0000000000000000        DevName:	db	8 dup(0)
  1967                                  	
  1968 000001BE 00                      		db	0
  1969 000001BF 00000000                VolSer:		dd	0			; volume serial #
  1970                                  
  1971 000001C3 00                      CDevAt:		db	0
  1972                                  
  1973                                  ;BadFatSubst	label	byte
  1974                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1975                                  
  1976 000001C4 01                      BadFatSubst:	db	1
  1977 000001C5 [A301]                  		dw	DrvLet
  1978                                  
  1979                                  ;PutBackSubst	label	byte
  1980                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1981                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1982                                  
  1983 000001C7 02                      PutBackSubst:	db	2
  1984 000001C8 0000                    PutBackComSpec:	dw	0
  1985 000001CA 01                      		db	1
  1986 000001CB [CD01]                  		dw	PutBackDrv
  1987                                  
  1988 000001CD 20                      PutBackDrv:	db	' '	; db 20h	; drive letter
  1989                                  
  1990                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  1991                                  
  1992 000001CE 02                      ExecErrSubst:	db	2
  1993 000001CF [0004]                  		dw	SafePathBuffer
  1994                                  
  1995 000001D1 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  1996 000001D5 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  1997                                  
  1998 000001D6 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  1999 000001DA 0000                    Save_Pdb:	dw	0
  2000 000001DC 0000                    Parent:		dw	0
  2001 000001DE 00000000                OldTerm:	dd	0
  2002 000001E2 0000                    ErrCd_24:	dw	0
  2003 000001E4 0000                    Handle01:	dw	0
  2004 000001E6 00                      Loading:	db	0
  2005 000001E7 0000                    Batch:		dw	0	; assume no batch mode initially
  2006                                  
  2007                                  ;;;;SR;
  2008                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  2009                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  2010                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  2011                                  ;;;;
  2012                                  ;;;BatchEOF:	db	0
  2013                                  
  2014                                  	; Bugbug: ComSpec should be 64+3+12+1?
  2015                                  	; What's this comspec_end about?
  2016 000001E9 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  2017 00000229 0000                    ComSpec_End:	dw	0
  2018                                  
  2019                                  ;Trans		label	dword
  2020                                  ;		dw	TRANGROUP:Command
  2021                                  
  2022                                  Trans:		;dw	12Ch
  2023                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  2024 0000022B [2C01]                  		dw	COMMAND ; 16/04/2023
  2025 0000022D 0000                    TrnSeg:		dw	0
  2026                                  
  2027 0000022F 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  2028                                  
  2029 00000230 00                      In_Batch:	db	0	; set if we are in batch processing mode
  2030 00000231 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  2031                                  
  2032 00000232 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  2033 00000233 0000                    MemSiz:		dw	0
  2034 00000235 0000                    Sum:		dw	0
  2035 00000237 01                      ExtCom:		db	1	; for init, pretend just did an external
  2036 00000238 0000                    RetCode: 	dw	0
  2037 0000023A 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  2038                                  
  2039                                  
  2040                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  2041                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  2042                                  
  2043 0000023B 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  2044 0000023C 01                      Suppress:	db	1	; used for echo, 1=echo line
  2045 0000023D 0000                    Io_Save: 	dw	0
  2046 0000023F 00                      RestDir: 	db	0
  2047 00000240 00                      PermCom: 	db	0	; true => permanent command
  2048                                  ; 05/06/2023
  2049 00000241 FFFF                    SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  2050                                  				; true => semi-permanent command (/K)
  2051 00000243 0000                    SingleCom:	dw	0	; true => single command version
  2052 00000245 FFFF                    VerVal:		dw	-1
  2053 00000247 00                      fFail:		db	0	; true => fail all int 24s
  2054 00000248 00                      IfFlag:		db	0	; true => IF statement in progress
  2055                                  
  2056 00000249 00                      ForFlag: 	db	0	; true => FOR statement in progress
  2057 0000024A 0000                    ForPtr:		dw	0
  2058                                  
  2059 0000024C 0000                    Nest:		dw	0	; nested batch file counter
  2060 0000024E 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  2061 0000024F 00                      Call_Batch_Flag: db	0
  2062 00000250 0000                    Next_Batch:	dw	0	; address of next batch segment
  2063 00000252 00                      NullFlag:	db	0	; flag if no command on command line
  2064 00000253 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  2065                                  				; buffer for file ucase address
  2066                                  ; Bugbug: don't need crit_msg_ anymore?
  2067                                  
  2068 00000258 0000                    Crit_Msg_Off:	dw	0	; saved critical error message offset
  2069 0000025A 0000                    Crit_Msg_Seg:	dw	0	; saved critical error message segment
  2070 0000025C 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  2071 0000025E 0000                    		 dw	0	; DBCS vector segment
  2072 00000260 0000                    Append_State:	dw	0	; current state of append
  2073                                  				;  (if Append_Flag is set)
  2074 00000262 00                      Append_Flag:	db	0	; set if append state is valid
  2075 00000263 00                      Re_Out_App:	db	0
  2076 00000264 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  2077                                  
  2078                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  2079                                  ; various times. Here is the breakdown:
  2080                                  ;
  2081                                  ;   INITINIT	We are in the init code.
  2082                                  ;   INITSPECIAL We are in the date/time prompt
  2083                                  ;   INITCTRLC	We are handling a ^C already.
  2084                                  ;
  2085                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  2086                                  ; ignore the ^C. This is so the system calls work on nested commands.
  2087                                  ;
  2088                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  2089                                  ; input buffer with a CR to pretend an empty response.
  2090                                  ;
  2091                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  2092                                  ; (ourselves). We can then detect the carry set and properly retry the
  2093                                  ; operation.
  2094                                  
  2095                                  InitFlag:	;db	1
  2096 000002B4 01                      		db	INITINIT
  2097                                  
  2098                                  ; Note: these two bytes are referenced as a word
  2099 000002B5 00                      PipeFlag:	db	0
  2100 000002B6 00                      PipeFiles:	db	0
  2101                                  
  2102                                  ; (rdata.asm, msdos 6.0, 1992)
  2103                                  ; ----------------------------------------------------------------------------
  2104                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  2105                                  
  2106                                  ;;SR
  2107                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  2108                                  ;;
  2109                                  ;
  2110                                  ;; Bugbug: can we find any way around maintaining these
  2111                                  ;; large buffers?
  2112                                  ;
  2113                                  ;Pipe1		db	67+12 dup (?)
  2114                                  ;Pipe2		db	67+12 dup (?)
  2115                                  ;
  2116                                  ;PipePtr 	dw	?
  2117                                  ;
  2118                                  ;PipeStr 	db	129 dup (?)
  2119                                  ;
  2120                                  ;EndPipe	label	byte	; marks end of buffers; M004
  2121                                  ;
  2122                                  ;;SR;
  2123                                  ;; We can move our EndInit code into above buffers. This way, the code will
  2124                                  ;;automatically be discarded after init.
  2125                                  ;;
  2126                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  2127                                  ;; M004; the origin.
  2128                                  ;;
  2129                                  ;	ORG	Pipe1	; M004
  2130                                  ;
  2131                                  ;; Bugbug: really need a procedure header for EndInit, describing
  2132                                  ;; what it expects, what it does.
  2133                                  ;
  2134                                  
  2135                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2136                                  
  2137                                  Pipe1	equ	EndInit
  2138                                  Pipe2	equ	Pipe1+67+12
  2139                                  PipePtr	equ	Pipe2+67+12
  2140                                  PipeStr	equ	PipePtr+2
  2141                                  EndPipe	equ	PipeStr+129	; EndInit+289
  2142                                  
  2143                                  ; Bugbug: really need a procedure header for EndInit, describing
  2144                                  ; what it expects, what it does.
  2145                                  
  2146                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h
  2147                                  
  2148                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (compatible with MSDOS 6.22)
  2149                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:03EAh 
  2150                                  
  2151                                  EndInit:
  2152 000002B7 1E                      	push	ds
  2153 000002B8 06                      	push	es		; save segments
  2154 000002B9 0E                      	push	cs
  2155 000002BA 1F                      	pop	ds		
  2156                                  	;assume	ds:RESGROUP
  2157                                  
  2158                                  ; M004; Save size of transient here before INIT segment is deallocated
  2159                                  
  2160 000002BB 8B16[D21E]              	mov	dx,[TrnSize]		; M004
  2161                                  ;M027
  2162                                  ; These variables are also defined in the INIT segment and need to be saved
  2163                                  ;before we resize
  2164                                  ;
  2165 000002BF A1[C61E]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  2166 000002C2 8B1E[C21E]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  2167 000002C6 8B0E[C81E]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  2168 000002CA 50                      	push	ax		; Save all these values ;M027
  2169 000002CB 53                      	push	bx		; M027
  2170 000002CC 51                      	push	cx		; M027
  2171                                  
  2172                                  
  2173                                  ; Bugbug: push ds, pop es here.
  2174                                  	;mov	bx,ds
  2175                                  	;mov	es,bx		; es = RESGROUP
  2176                                  	; 09/01/2023
  2177 000002CD 1E                      	push	ds
  2178 000002CE 07                      	pop	es
  2179                                  
  2180                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  2181                                  ; code + data for low COMMAND
  2182                                  
  2183 000002CF 8B1E[5604]              	mov	bx,[ResSize]	; Total size of resident
  2184 000002D3 B44A                    	mov	ah,4Ah
  2185                                  	;mov	ah,SETBLOCK
  2186 000002D5 CD21                    	int	21h		; Set block to resident size
  2187                                  
  2188                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  2189                                  		; ES = segment address of block to change
  2190                                  		; BX = new size in paragraphs
  2191                                  
  2192                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  2193                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  2194                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  2195                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  2196                                  ;
  2197                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  2198                                  	
  2199 000002D7 803E[4002]01            	cmp	byte [PermCom],1 ; permanent command.com?
  2200 000002DC 7530                    	jne	short adjust_env ; no, do not free batchseg
  2201                                  
  2202 000002DE 833E[E701]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  2203 000002E3 7429                    	je	short adjust_env ; no, dont juggle
  2204                                  
  2205                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  2206                                  	; 21/01/2023
  2207 000002E5 BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  2208                                  	;mov	bx,4	; 09/01/2023
  2209                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  2210 000002E8 B448                    	mov	ah,48h
  2211                                  	;mov	ah,ALLOC
  2212 000002EA CD21                    	int	21h
  2213                                  
  2214                                  		; DOS - 2+ - ALLOCATE MEMORY
  2215                                  		; BX = number of 16-byte paragraphs desired
  2216                                  
  2217                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  2218                                  ; a hole, the batch segment COULD already be in the ideal place. We
  2219                                  ; could be making it worse! We're second-guessing where memory
  2220                                  ; allocations go, which might not be such a great idea. Is there
  2221                                  ; a strategy, short of doing something even worse like diddling
  2222                                  ; arena headers, where we can minimize the possibility of fragmentation
  2223                                  ; under all cases? Hmm..
  2224                                  	
  2225 000002EC 7220                    	jc	short adjust_env ; no memory, use old batchseg
  2226                                  
  2227 000002EE 8EC0                    	mov	es,ax		 ; es = New batch segment
  2228 000002F0 31FF                    	xor	di,di
  2229 000002F2 31F6                    	xor	si,si
  2230                                  
  2231 000002F4 1E                      	push	ds
  2232 000002F5 8E1E[E701]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  2233                                  	;assume	ds:nothing
  2234                                  	;mov	cx,SIZE BatchSegment
  2235                                  	; 23/01/2023
  2236                                  	;mov	cx,BATCHSEGMENT.SIZE
  2237                                  	;;mov	cx,33	; 09/01/2023
  2238                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  2239                                  	;
  2240                                  	;add	cx,16		 ; for the filename
  2241                                  	; 20/04/2023
  2242 000002F9 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  2243                                  
  2244                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  2245                                  	; It's sure be bad if we copied more bytes than the batch segment
  2246                                  	; holds!
  2247                                  	
  2248 000002FC FC                      	cld
  2249 000002FD F3A4                    	rep	movsb
  2250 000002FF 1F                      	pop	ds
  2251                                  	;assume	ds:RESGROUP
  2252                                  
  2253 00000300 8CC1                    	mov	cx,es		; save new batch segment 
  2254 00000302 8E06[E701]              	mov	es,[Batch]
  2255 00000306 B449                    	mov	ah,49h
  2256                                  	;mov	ah,DEALLOC
  2257 00000308 CD21                    	int	21h		; free the old batch segment
  2258                                  
  2259                                  	; Bugbug: should we check for error?
  2260                                  
  2261 0000030A 890E[E701]              	mov	[Batch],cx	; store new batch segment address
  2262                                  
  2263                                  adjust_env:
  2264 0000030E 59                      	pop	cx		; cx = size of old env ;M027
  2265 0000030F 5B                      	pop	bx		; bx = size of new env needed ;M027
  2266 00000310 5D                      	pop	bp		; bp = old env seg ;M027
  2267                                  
  2268                                  ;Allocate the correct size for the environment
  2269                                  
  2270 00000311 B448                    	mov	ah,48h
  2271                                  	;mov	ah,ALLOC
  2272 00000313 CD21                    	int	21h		; get memory
  2273 00000315 7264                    	jc	short nomem_err	; out of memory,signal error
  2274                                  	
  2275                                  	; Bugbug: why not continue, leaving environment where it is?
  2276                                  
  2277 00000317 A3[DC03]                	mov	[EnvirSeg],ax	; Store new environment segment
  2278                                  	;;mov	[ds:2Ch],ax
  2279                                  	;mov	[2Ch],ax
  2280                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  2281 0000031A A32C00                  	mov	[PDB.ENVIRON],ax
  2282 0000031D 8EC0                    	mov	es,ax		; es = address of allocated memory
  2283                                  	;assume	es:nothing
  2284                                  
  2285                                  ;Copy the environment to the newly allocated segment
  2286                                  
  2287 0000031F 1E                      	push	ds
  2288 00000320 8EDD                    	mov	ds,bp		; ds = Old environment segment
  2289                                  	;assume	ds:nothing
  2290                                  
  2291 00000322 31F6                    	xor	si,si
  2292 00000324 89F7                    	mov	di,si		; Start transfer from 0
  2293                                  
  2294 00000326 FC                      	cld
  2295 00000327 F3A4                    	rep	movsb		; Do the copy
  2296                                  
  2297 00000329 1F                      	pop	ds		; ds = RESGROUP
  2298                                  	;assume	ds:RESGROUP
  2299                                  
  2300                                  ; We have to free the old environment block if it was allocated by INIT
  2301                                  
  2302                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  2303                                  ; or does it also apply to passed environments?
  2304                                  
  2305                                  ;M036
  2306                                  ; Free up old env segment always because this is a copy passed by Exec and
  2307                                  ; takes up memory that is never used
  2308                                  
  2309                                  ;M044
  2310                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  2311                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  2312                                  ; errors if it gets a memory alloc that it is below its load segment. The
  2313                                  ; freed environment creates a large enough hole for some of its allocs to fit
  2314                                  ; in
  2315                                  
  2316                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  2317                                          ;je	short no_free	    ; no, do not free it
  2318                                  	; 21/01/2023
  2319                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  2320 0000032A 803E[881E]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  2321 0000032F 7506                    	jne	short no_free
  2322                                  
  2323 00000331 8EC5                    	mov	es,bp
  2324 00000333 B449                    	mov	ah,49h
  2325                                  	;mov	ah,DEALLOC
  2326 00000335 CD21                    	int	21h		    ; Free it
  2327                                  no_free:
  2328                                  
  2329                                  ; M004; Start of changes
  2330                                  
  2331                                  ; Move the transient now. We will allocate the biggest block available
  2332                                  ; now and move the transient to the top of the block. We will then
  2333                                  ; deallocate this block. When the resident starts executing, it will
  2334                                  ; hopefully allocate this block again and find the transient intact.
  2335                                  
  2336 00000337 C606[2F02]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2337 0000033C 06                      	push	es
  2338                                  	;;mov	si,offset ResGroup:TranStart
  2339                                  	; 09/01/2023
  2340                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2341                                  	; 05/06/2023
  2342                                  	;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM RESGROUP:0475h
  2343 0000033D BE5025                  	mov	si,TRANSTART	; (End of the resident portion)
  2344                                  	;mov	di,0
  2345 00000340 31FF                    	xor	di,di ; 0
  2346                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2347                                  	;mov	cx,98C5h
  2348                                  	; 05/06/2023 - MSDOS 6.22 COMMAND.COM RESGROUP:047Bh
  2349                                  	;mov	cx,0AF95h	; TRANSIENT portion size
  2350 00000342 B901AA                  	mov	cx,TRANSPACEEND
  2351                                  	
  2352                                  ; Find the largest block available
  2353                                  
  2354 00000345 BBFFFF                  	mov	bx,0FFFFh
  2355 00000348 B448                    	mov	ah,48h
  2356                                  	;mov	ah,ALLOC
  2357 0000034A CD21                    	int	21h
  2358                                  
  2359                                  ; dx = size of transient saved previously 
  2360                                  
  2361 0000034C 39D3                    	cmp	bx,dx		; enough memory?
  2362 0000034E 722B                    	jb	short nomem_err	; not enough memory for transient
  2363                                  
  2364 00000350 B448                    	mov	ah,48h
  2365                                  	;mov	ah,ALLOC
  2366 00000352 CD21                    	int	21h		; get the largest block
  2367 00000354 7225                    	jc	short nomem_err	; something is really screwed up
  2368                                  
  2369 00000356 50                      	push	ax		; save memory address
  2370 00000357 01D8                    	add	ax,bx		; ax = top of my memory block
  2371 00000359 29D0                    	sub	ax,dx		; less size of transient
  2372 0000035B A3[2D02]                	mov	[TrnSeg],ax	; save transient segment
  2373 0000035E 8EC0                    	mov	es,ax		;
  2374 00000360 58                      	pop	ax		; restore our seg addr
  2375                                  
  2376                                  ; Everything is set for a move. We need to move in the reverse direction to
  2377                                  ; make sure we dont overwrite ourselves while copying
  2378                                  
  2379 00000361 01CE                    	add	si,cx
  2380 00000363 4E                      	dec	si
  2381 00000364 01CF                    	add	di,cx
  2382 00000366 4F                      	dec	di
  2383 00000367 FD                      	std
  2384 00000368 F3A4                    	rep	movsb
  2385 0000036A FC                      	cld
  2386                                  
  2387                                  ; Now we have to free up this block so that resident can get hold of it
  2388                                  
  2389 0000036B 8EC0                    	mov	es,ax
  2390 0000036D B449                    	mov	ah,49h
  2391                                  	;mov	ah,DEALLOC
  2392 0000036F CD21                    	int	21h		; release the memory block
  2393                                  
  2394                                  ; M004; End of changes
  2395                                  
  2396                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2397                                  	; 09/01/2023
  2398 00000371 C606[B402]00            	mov	byte [InitFlag],0	
  2399                                  
  2400 00000376 07                      	pop	es
  2401 00000377 1F                      	pop	ds
  2402                                  	;assume	ds:nothing
  2403                                  	
  2404                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2405                                  	
  2406 00000378 E903FD                  	jmp	LodCom_Trap	; allocate transient
  2407                                  
  2408                                  nomem_err:
  2409                                  
  2410                                  ;We call the error routine which will never return. It will either exit
  2411                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2412                                  ;message ( if first COMMAND )
  2413                                  
  2414 0000037B E9761A                  	jmp	Alloc_error
  2415                                  
  2416                                  ;EndCodeInit:	; label	byte		; M004
  2417                                  
  2418                                  	; 16/04/2023
  2419                                  	EndCodeInit equ $
  2420                                  
  2421                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2422                                  ;; M004; If not, we signal an assembly error
  2423                                  ;
  2424                                  ;IF2
  2425                                  ;	IF ($ GT EndPipe)
  2426                                  ;		.err
  2427                                  ;		%out	"ENDINIT CODE TOO BIG"
  2428                                  ;	ENDIF
  2429                                  ;ENDIF
  2430                                  
  2431                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2432                                  ;;
  2433                                  ;		ORG	EndPipe		; M004
  2434                                  
  2435                                  ; 09/01/2023
  2436                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2437                                  ; 05/06/2023
  2438                                  ; MSDOS 6.22 COMMAND.COM - CODERES:04B7h
  2439                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2440                                  
  2441                                  ; 16/04/2023
  2442                                  	FillBytes equ EndPipe - EndCodeInit
  2443                                  
  2444                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2445                                  ; 16/04/2023
  2446                                  %if FillBytes>0
  2447                                  	;times EndPipe - EndCodeInit db 0
  2448 0000037E 00<rep 5Ah>             	times FillBytes db 0
  2449                                  %endif
  2450                                  
  2451                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2452                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289
  2453                                  
  2454                                  ; 05/06/2023 - Retrodos v4.2
  2455                                  ; MSDOS 6.22 COMMAND.COM - CODERES:050Bh ; EndInit+289
  2456                                  
  2457                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2458                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2459                                  
  2460 000003D8 [B702]                  InPipePtr:	dw	Pipe1 ;; 320h for MSDOS 5.0 COMMAND.COM
  2461                                  			      ; 3EAh for MSDOS 6.22 COMMAND.COM
  2462 000003DA [0603]                  OutPipePtr:	dw	Pipe2 ;; 36Fh for MSDOS 5.0 COMMAND.COM
  2463                                  			      ; 439h for MSDOS 6.22 COMMAND.COM
  2464                                  
  2465                                  Exec_Block:	; label	byte	; the data block for exec calls
  2466 000003DC 0000                    EnvirSeg:	dw	0
  2467                                  Com_Ptr:	; label	dword
  2468 000003DE 8000                    		dw	80h	; point at unformatted parameters
  2469 000003E0 0000                    		dw	0
  2470                                  Com_Fcb1:	; label	dword
  2471 000003E2 5C00                    		dw	5Ch
  2472 000003E4 0000                    		dw	0
  2473                                  Com_Fcb2:	; label	dword
  2474 000003E6 6C00                    		dw	6Ch
  2475 000003E8 0000                    		dw	0
  2476                                  
  2477                                  ; variables passed to transient
  2478                                  TranVars:	; label	byte
  2479                                  		;dw	offset DATARES:HeadFix_Trap
  2480 000003EA [9200]                  		dw	HeadFix_Trap
  2481 000003EC 0000                    MySeg:		dw	0	; put our own segment here
  2482 000003EE 0000                    LTpa:		dw	0	; will store tpa segment here
  2483 000003F0 2F                      RSwitChar:	db	"/"
  2484 000003F1 5C                      RDirChar:	db	"\"
  2485                                  		;dw	offset DATARES:Issue_Exec_Call
  2486 000003F2 [8501]                  		dw	Issue_Exec_Call
  2487 000003F4 0000                    MySeg1:		dw	0
  2488                                  		;dw	offset DATARES:RemCheck_Trap
  2489 000003F6 [6A00]                  		dw	RemCheck_Trap
  2490 000003F8 0000                    MySeg2:		dw	0
  2491                                  
  2492                                  ; 14/08/2024 - PCDOS 7.1 COMMAND.COM
  2493                                  %if 0
  2494                                  ResTest: 	dw	0
  2495                                  %endif
  2496                                  
  2497 000003FA 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2498                                  
  2499                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  2500 000003FC 0000                    Y_Flag:		dw	0
  2501                                  
  2502                                  TranVarEnd:	; label	byte
  2503                                  
  2504 000003FE 0000                    OldErrNo:	dw	0
  2505                                  
  2506                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2507                                  ;  MsgBuffer is only used while a command is being executed.
  2508                                  ;  SafePathBuffer is no longer needed, since it is used for
  2509                                  ;  unsuccessful program launches.
  2510                                  
  2511                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2512                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2513                                  	;Bugbug: Why so big a buffer?
  2514                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2515 00000400 00<rep 50h>             		times	64+3+13 db 0		
  2516                                  
  2517                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2518                                  
  2519 00000450 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2520 00000454 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2521                                  
  2522                                  ;SR;
  2523                                  ; The three vars below have been added for a pure COMMAND.COM
  2524                                  
  2525 00000456 0000                    ResSize:	dw	0
  2526                                  
  2527                                  ;SR;
  2528                                  ; Moved the stack here from the code segment
  2529                                  ;
  2530                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2531                                  	
  2532                                  		;db	(80h - 3) dup (?)
  2533                                  align 2
  2534 00000458 00<rep 7Ch>             		times	124 db 0		
  2535                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:053Eh (offset RStack)
  2536                                  ; 05/06/2023
  2537                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Ah (offset RStack)
  2538                                  RStack:		; label	word
  2539 000004D4 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2540                                  				; resident code segments
  2541                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2542                                  
  2543                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2544                                  ; -------------------------------
  2545                                  
  2546                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2547                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2548                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2549                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2550                                  ;            given a command-line like "/L:3,500;4"
  2551                                  ; UmbUsed  - An array of characters, each of which is 1 if the UMB
  2552                                  ;            matching its index number was specified on the command-line;
  2553                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2554                                  ;            will be set to 1. All others will be set to 0.
  2555                                  ; UmbSize  - An array of words, each of which is interpreted as a size
  2556                                  ;            specified by the user for a UMB (in the above example, all
  2557                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2558                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2559                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2560                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2561                                  ;            for details).
  2562                                  
  2563                                  ; - MSDOS 6.0 COMMAND.COM -
  2564                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2565                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2566                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2567                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2568                                  ;; space problem (it's just such a nice round number, eh?).
  2569                                  
  2570                                  ; 05/06/2023
  2571                                  MAXUMB	equ	16
  2572                                  
  2573                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2574                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2575                                  
  2576 000004D6 00                      fInHigh:	db	0
  2577                                  
  2578                                  ; MSDOS 6.0 COMMAND.COM
  2579                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2580                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Dh (DATARES:060Dh)
  2581 000004D7 00                      fUmbTiny:	db	0
  2582 000004D8 0000                    SegLoad:	dw	0
  2583 000004DA 00                      UmbLoad:	db	0
  2584                                  
  2585                                  ; 19/07/2024
  2586                                  ; PCDOS 7.1 COMMAND.COM
  2587                                  %if 0
  2588                                  UmbUsed:	times MAXUMB db 0 ; db MAXUMB dup (?)
  2589                                  UmbSize:	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2590                                  %else
  2591                                  	; 19/07/2024 - Retro DOS v5.0 (& v4.2) COMMAND.COM
  2592                                  	UmbUsed equ MsgBuffer	; 16 bytes
  2593                                  	UmbSize equ UmbUsed+MAXUMB ; UmbUsed+16; 16 words
  2594                                  %endif
  2595                                  
  2596 000004DB 00                      fm_umb:		db	0
  2597 000004DC 00                      fm_strat:	db	0
  2598 000004DD 00                      fm_argc:	db	0
  2599                                  
  2600                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2601                                  ; UmbLoad is set to the UMB number given.
  2602                                  
  2603                                  ;*** MESSAGES
  2604                                  ;    and other translatable text
  2605                                  
  2606                                  ; include comrmsg.inc	; M00
  2607                                  ; ------------------------------
  2608                                  
  2609                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2610                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2611                                  
  2612                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2613                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0644h (DATARES:0644h)
  2614                                  
  2615 000004DE 41                      ABORT_CHAR:	db 'A'
  2616 000004DF 52                      RETRY_CHAR:	db 'R'
  2617 000004E0 49                      IGNORE_CHAR:	db 'I'
  2618 000004E1 46                      FAIL_CHAR:	db 'F'
  2619 000004E2 59                      YES_CHAR:	db 'Y'
  2620 000004E3 4E                      NO_CHAR:	db 'N'
  2621 000004E4 05                      REQ_ABORT:	db 5
  2622 000004E5 41626F7274              		db 'Abort'
  2623 000004EA 07                      REQ_RETRY:	db 7
  2624 000004EB 2C205265747279          		db ', Retry'
  2625 000004F2 08                      REQ_IGNORE:	db 8
  2626 000004F3 2C2049676E6F7265        		db ', Ignore'
  2627 000004FB 06                      REQ_FAIL:	db 6
  2628 000004FC 2C204661696C            		db ', Fail'
  2629 00000502 01                      REQ_END:	db 1
  2630 00000503 3F                      		db '?'
  2631 00000504 08                      MREAD:		db 8
  2632 00000505 72656164696E6700        		db 'reading', 0
  2633 0000050D 08                      MWRITE:		db 8
  2634 0000050E 77726974696E6700        		db 'writing', 0
  2635 00000516 0E                      MDRIVE:		db 14
  2636 00000517 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2636 00000520 2025320D0A         
  2637 00000525 0F                      MDEVICE:	db 15
  2638 00000526 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2638 0000052F 652025320D0A       
  2639 00000535 26                      MVOLSERIAL:	db 38
  2640 00000536 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2640 0000053F 7365727420766F6C75-
  2640 00000548 6D6520253120736572-
  2640 00000551 69616C2025322D2533-
  2640 0000055A 0D0A               
  2641 0000055C 25                      BADFATMSG:	db 37
  2642 0000055D 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2642 00000566 636174696F6E207461-
  2642 0000056F 626C65206261642C20-
  2642 00000578 64726976652025310D-
  2642 00000581 0A                 
  2643 00000582 15                      COMBAD:		db 21
  2644 00000583 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2644 0000058C 4F4D4D414E442E434F-
  2644 00000595 4D0D0A             
  2645 00000598 21                      PUTBACKMSG:	db 33
  2646 00000599 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2646 000005A2 736B20776974682025-
  2646 000005AB 3120696E2064726976-
  2646 000005B4 652025320D0A       
  2647 000005BA 21                      PROMPT:		db 33
  2648 000005BB 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2648 000005C4 206B657920746F2063-
  2648 000005CD 6F6E74696E7565202E-
  2648 000005D6 202E202E0D0A       
  2649 000005DC 1C                      ENDBATMES:	db 28
  2650 000005DD 0D0A                    		db 0Dh,0Ah
  2651 000005DF 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2651 000005E8 206261746368206A6F-
  2651 000005F1 622028592F4E293F   
  2652 000005F9 13                      EXECEMES:	db 19
  2653 000005FA 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2653 00000603 65637574652025310D-
  2653 0000060C 0A                 
  2654 0000060D 13                      EXEBAD:		db 19
  2655 0000060E 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2655 00000617 4558452066696C650D-
  2655 00000620 0A                 
  2656 00000621 22                      TOOBIG:		db 34
  2657 00000622 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2657 0000062B 6F6F2062696720746F-
  2657 00000634 2066697420696E206D-
  2657 0000063D 656D6F72790D0A     
  2658 00000644 16                      NOHANDMES:	db 22
  2659 00000645 0D0A                    		db 0Dh,0Ah
  2660 00000647 4E6F20667265652066-     		db 'No free file handles'
  2660 00000650 696C652068616E646C-
  2660 00000659 6573               
  2661 0000065B 1A                      RBADNAM:	db 26
  2662 0000065C 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2662 00000665 6E64206F722066696C-
  2662 0000066E 65206E616D650D0A   
  2663                                  ACCDENIED:	; 14/01/2023
  2664                                  		; 10/01/2023
  2665                                  ACCDEN:		;db 14
  2666                                  		;db 'Access denied '
  2667                                  		; 19/07/2024 - PCDOS 7.1
  2668 00000676 0D                      		db 13
  2669 00000677 416363657373206465-     		db 'Access denied'
  2669 00000680 6E696564           
  2670 00000684 19                      BMEMMES:	db 25
  2671 00000685 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2671 0000068E 616C6C6F636174696F-
  2671 00000697 6E206572726F72     
  2672 0000069E 26                      HALTMES:	db 38
  2673 0000069F 0D0A                    		db 0Dh,0Ah
  2674 000006A1 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2674 000006AA 616420434F4D4D414E-
  2674 000006B3 442C2073797374656D-
  2674 000006BC 2068616C7465640D0A 
  2675 000006C5 21                      FRETMES:	db 33
  2676 000006C6 0D0A                    		db 0Dh,0Ah,
  2677 000006C8 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2677 000006D1 61727420434F4D4D41-
  2677 000006DA 4E442C206578697469-
  2677 000006E3 6E670D0A           
  2678 000006E7 2E                      PATRICIDE:	db 46
  2679 000006E8 0D0A                    		db 0Dh,0Ah
  2680 000006EA 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  2680 000006F3 2070726F6365737320-
  2680 000006FC 61626F727465642C20-
  2680 00000705 63616E6E6F7420636F-
  2680 0000070E 6E74696E7565       
  2681 00000714 0D0A                    		db 0Dh,0Ah
  2682 00000716 02                      NEWLINE:	db 2
  2683 00000717 0D0A                    		db 0Dh, 0Ah
  2684                                  
  2685                                  ; 10/01/2023
  2686                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2687                                  ; 05/06/2023
  2688                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0880h
  2689                                  
  2690 00000719 [FD0B]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2691 0000071B 0100                    		dw 1
  2692 0000071D [B809]                  		dw PARSMSGPTRS		; parse	error messages
  2693 0000071F 0100                    		dw 1
  2694 00000721 [FD0B]                  		dw EXTMSGPTRS		; critical error messages
  2695 00000723 0100                    		dw 1
  2696 00000725 0000                    		dw 0			; File system error messages
  2697 00000727 0000                    		dw 0			; are not supported.
  2698 00000729 [8800]                  		dw MsgRetrv_Trap	; disk retriever routine
  2699 0000072B 0000                    MySeg3:		dw 0			; segment of retriever routine
  2700                                  
  2701                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2702                                  ; 05/06/2023
  2703                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0894h
  2704                                  
  2705 0000072D 13                      CRMSG0:		db 19
  2706 0000072E 57726974652070726F-     		db 'Write protect error'
  2706 00000737 74656374206572726F-
  2706 00000740 72                 
  2707 00000741 0C                      CRMSG1:		db 12
  2708 00000742 496E76616C69642075-     		db 'Invalid unit'
  2708 0000074B 6E6974             
  2709 0000074E 09                      CRMSG2:		db 9
  2710 0000074F 4E6F74207265616479      		db 'Not ready'
  2711 00000758 16                      CRMSG3:		db 22
  2712 00000759 496E76616C69642064-     		db 'Invalid device request'
  2712 00000762 657669636520726571-
  2712 0000076B 75657374           
  2713 0000076F 0A                      CRMSG4:		db 10
  2714 00000770 44617461206572726F-     		db 'Data error'
  2714 00000779 72                 
  2715 0000077A 21                      CRMSG5:		db 33
  2716 0000077B 496E76616C69642064-     		db 'Invalid device request parameters'
  2716 00000784 657669636520726571-
  2716 0000078D 756573742070617261-
  2716 00000796 6D6574657273       
  2717 0000079C 0A                      CRMSG6:		db 10
  2718 0000079D 5365656B206572726F-     		db 'Seek error'
  2718 000007A6 72                 
  2719 000007A7 12                      CRMSG7:		db 18
  2720 000007A8 496E76616C6964206D-     		db 'Invalid media type'
  2720 000007B1 656469612074797065 
  2721 000007BA 10                      CRMSG8:		db 16
  2722 000007BB 536563746F72206E6F-     		db 'Sector not found'
  2722 000007C4 7420666F756E64     
  2723 000007CB 1A                      CRMSG9:		db 26
  2724 000007CC 5072696E746572206F-     		db 'Printer out of paper error'
  2724 000007D5 7574206F6620706170-
  2724 000007DE 6572206572726F72   
  2725 000007E6 11                      CRMSG10:	db 17
  2726 000007E7 577269746520666175-     		db 'Write fault error'
  2726 000007F0 6C74206572726F72   
  2727 000007F8 10                      CRMSG11:	db 16
  2728 000007F9 52656164206661756C-     		db 'Read fault error'
  2728 00000802 74206572726F72     
  2729 00000809 0F                      CRMSG12:	db 15
  2730 0000080A 47656E6572616C2066-     		db 'General failure'
  2730 00000813 61696C757265       
  2731 00000819 11                      CRMSG13:	db 17
  2732 0000081A 53686172696E672076-     		db 'Sharing violation'
  2732 00000823 696F6C6174696F6E   
  2733 0000082B 0E                      CRMSG14:	db 14
  2734 0000082C 4C6F636B2076696F6C-     		db 'Lock violation'
  2734 00000835 6174696F6E         
  2735 0000083A 13                      CRMSG15:	db 19
  2736 0000083B 496E76616C69642064-     		db 'Invalid disk change'
  2736 00000844 69736B206368616E67-
  2736 0000084D 65                 
  2737 0000084E 0F                      CRMSG16:	db 15
  2738 0000084F 46434220756E617661-     		db 'FCB unavailable'
  2738 00000858 696C61626C65       
  2739 0000085E 19                      CRMSG17:	db 25
  2740 0000085F 53797374656D207265-     		db 'System resource exhausted'
  2740 00000868 736F75726365206578-
  2740 00000871 68617573746564     
  2741 00000878 12                      CRMSG18:	db 18
  2742 00000879 436F64652070616765-     		db 'Code page mismatch'
  2742 00000882 206D69736D61746368 
  2743 0000088B 0C                      CRMSG19:	db 12
  2744 0000088C 4F7574206F6620696E-     		db 'Out of input'
  2744 00000895 707574             
  2745 00000898 17                      CRMSG20:	db 23
  2746 00000899 496E73756666696369-     		db 'Insufficient disk space'
  2746 000008A2 656E74206469736B20-
  2746 000008AB 7370616365         
  2747                                  
  2748                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2749                                  ; 05/06/2023
  2750                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0A17h
  2751                                  
  2752 000008B0 [2D07]                  CRITMSGPTRS:	dw CRMSG0
  2753 000008B2 [4107]                  		dw CRMSG1
  2754 000008B4 [4E07]                  		dw CRMSG2
  2755 000008B6 [5807]                  		dw CRMSG3
  2756 000008B8 [6F07]                  		dw CRMSG4
  2757 000008BA [7A07]                  		dw CRMSG5
  2758 000008BC [9C07]                  		dw CRMSG6
  2759 000008BE [A707]                  		dw CRMSG7
  2760 000008C0 [BA07]                  		dw CRMSG8
  2761 000008C2 [CB07]                  		dw CRMSG9
  2762 000008C4 [E607]                  		dw CRMSG10
  2763 000008C6 [F807]                  		dw CRMSG11
  2764 000008C8 [0908]                  		dw CRMSG12
  2765 000008CA [1908]                  		dw CRMSG13
  2766 000008CC [2B08]                  		dw CRMSG14
  2767 000008CE [3A08]                  		dw CRMSG15
  2768 000008D0 [4E08]                  		dw CRMSG16
  2769 000008D2 [5E08]                  		dw CRMSG17
  2770 000008D4 [7808]                  		dw CRMSG18
  2771 000008D6 [8B08]                  		dw CRMSG19
  2772 000008D8 [9808]                  		dw CRMSG20
  2773                                  
  2774                                  		; 14/01/2023
  2775                                  ;DataresEnd:	;; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2776                                  		; 05/06/2023
  2777                                  DataresEnd:	; MSDOS 6.22 COMMAND.COM - DATARES:0A41h (RESGROUP:0A41h)
  2778                                  
  2779 000008DA 13                      PAERRMSG0:	db 19
  2780 000008DB 546F6F206D616E7920-     		db 'Too many parameters'
  2780 000008E4 706172616D65746572-
  2780 000008ED 73                 
  2781 000008EE 1A                      PAERRMSG1:	db 26
  2782 000008EF 526571756972656420-     		db 'Required parameter missing'
  2782 000008F8 706172616D65746572-
  2782 00000901 206D697373696E67   
  2783 00000909 0E                      PAERRMSG2:	db 14
  2784 0000090A 496E76616C69642073-     		db 'Invalid switch'
  2784 00000913 7769746368         
  2785 00000918 0F                      PAERRMSG3:	db 15
  2786 00000919 496E76616C6964206B-     		db 'Invalid keyword'
  2786 00000922 6579776F7264       
  2787 00000928 01                      PAERRMSG4:	db 1
  2788 00000929 20                      		db 20h
  2789 0000092A 24                      PAERRMSG5:	db 36
  2790 0000092B 506172616D65746572-     		db 'Parameter value not in allowed range'
  2790 00000934 2076616C7565206E6F-
  2790 0000093D 7420696E20616C6C6F-
  2790 00000946 7765642072616E6765 
  2791                                  PAERRMSG6:	; 10/01/2023
  2792 0000094F 1B                      PAERRMSG7:	db 27
  2793 00000950 506172616D65746572-     		db 'Parameter value not allowed'
  2793 00000959 2076616C7565206E6F-
  2793 00000962 7420616C6C6F776564 
  2794                                  ;PAERRMSG7:	db 27
  2795                                  ;		db 'Parameter value not allowed'
  2796 0000096B 1C                      PAERRMSG8:	db 28
  2797 0000096C 506172616D65746572-     		db 'Parameter format not correct'
  2797 00000975 20666F726D6174206E-
  2797 0000097E 6F7420636F72726563-
  2797 00000987 74                 
  2798 00000988 11                      PAERRMSG9:	db 17
  2799 00000989 496E76616C69642070-     		db 'Invalid parameter'
  2799 00000992 6172616D65746572   
  2800 0000099A 1D                      PAERRMSG10:	db 29
  2801 0000099B 496E76616C69642070-     		db 'Invalid parameter combination'
  2801 000009A4 6172616D6574657220-
  2801 000009AD 636F6D62696E617469-
  2801 000009B6 6F6E               
  2802                                  
  2803                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2804                                  ; 05/06/2023
  2805                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0B3Bh
  2806                                  
  2807 000009B8 [DA08]                  PARSMSGPTRS:	dw PAERRMSG0
  2808 000009BA [EE08]                  		dw PAERRMSG1
  2809 000009BC [0909]                  		dw PAERRMSG2
  2810 000009BE [1809]                  		dw PAERRMSG3
  2811 000009C0 [2809]                  		dw PAERRMSG4
  2812 000009C2 [2A09]                  		dw PAERRMSG5
  2813 000009C4 [4F09]                  		dw PAERRMSG6
  2814 000009C6 [4F09]                  		dw PAERRMSG7
  2815 000009C8 [6B09]                  		dw PAERRMSG8
  2816 000009CA [8809]                  		dw PAERRMSG9
  2817 000009CC [9A09]                  		dw PAERRMSG10
  2818                                  ; 21/04/2023
  2819                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2820                                  
  2821 000009CE 10                      INVLFUNCT:	db 16
  2822 000009CF 496E76616C69642066-     		db 'Invalid function'
  2822 000009D8 756E6374696F6E     
  2823 000009DF 0E                      FNOTFOUND:	db 14
  2824 000009E0 46696C65206E6F7420-     		db 'File not found'
  2824 000009E9 666F756E64         
  2825 000009EE 0E                      PNOTFOUND:	db 14
  2826 000009EF 50617468206E6F7420-     		db 'Path not found'
  2826 000009F8 666F756E64         
  2827 000009FD 13                      TOOMANYOF:	db 19
  2828 000009FE 546F6F206D616E7920-     		db 'Too many open files'
  2828 00000A07 6F70656E2066696C65-
  2828 00000A10 73                 
  2829                                  ; 14/01/2023
  2830                                  ;ACCDEN:	; 10/01/2023
  2831                                  ;ACCDENIED:	db 14
  2832                                  ;		db 'Access denied '
  2833 00000A11 0E                      INVHANDLE:	db 14
  2834 00000A12 496E76616C69642068-     		db 'Invalid handle'
  2834 00000A1B 616E646C65         
  2835 00000A20 1F                      MEMCBDEST:	db 31
  2836 00000A21 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2836 00000A2A 6E74726F6C20626C6F-
  2836 00000A33 636B73206465737472-
  2836 00000A3C 6F796564           
  2837 00000A40 13                      INSUFFMEM:	db 19
  2838 00000A41 496E73756666696369-     		db 'Insufficient memory'
  2838 00000A4A 656E74206D656D6F72-
  2838 00000A53 79                 
  2839 00000A54 1C                      INVMEMBLA:	db 28
  2840 00000A55 496E76616C6964206D-     		db 'Invalid memory block address'
  2840 00000A5E 656D6F727920626C6F-
  2840 00000A67 636B20616464726573-
  2840 00000A70 73                 
  2841 00000A71 13                      INVENVIRO:	db 19
  2842 00000A72 496E76616C69642045-     		db 'Invalid Environment'
  2842 00000A7B 6E7669726F6E6D656E-
  2842 00000A84 74                 
  2843 00000A85 0E                      INVFORMAT:	db 14
  2844 00000A86 496E76616C69642066-     		db 'Invalid format'
  2844 00000A8F 6F726D6174         
  2845 00000A94 1A                      INVFNPARM:	db 26
  2846 00000A95 496E76616C69642066-     		db 'Invalid function parameter'
  2846 00000A9E 756E6374696F6E2070-
  2846 00000AA7 6172616D65746572   
  2847 00000AAF 0C                      INVLDDATA:	db 12
  2848 00000AB0 496E76616C69642064-     		db 'Invalid data'
  2848 00000AB9 617461             
  2849 00000ABC 1B                      INVDRVSPC:	db 27
  2850 00000ABD 496E76616C69642064-     		db 'Invalid drive specification'
  2850 00000AC6 726976652073706563-
  2850 00000ACF 696669636174696F6E 
  2851 00000AD8 23                      ATRCURDIR:	db 35
  2852 00000AD9 417474656D70742074-     		db 'Attempt to remove current directory'
  2852 00000AE2 6F2072656D6F766520-
  2852 00000AEB 63757272656E742064-
  2852 00000AF4 69726563746F7279   
  2853 00000AFC 0F                      NOTSAMDEV:	db 15
  2854 00000AFD 4E6F742073616D6520-     		db 'Not same device'
  2854 00000B06 646576696365       
  2855 00000B0C 0D                      NOMOREFIL:	db 13
  2856 00000B0D 4E6F206D6F72652066-     		db 'No more files'
  2856 00000B16 696C6573           
  2857 00000B1A 0B                      FILEXISTS:	db 11
  2858 00000B1B 46696C652065786973-     		db 'File exists'
  2858 00000B24 7473               
  2859 00000B26 1B                      CANTMKDIR:	db 27
  2860 00000B27 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2860 00000B30 6B6520646972656374-
  2860 00000B39 6F727920656E747279 
  2861 00000B42 0E                      FAILINT24:	db 14
  2862 00000B43 4661696C206F6E2049-     		db 'Fail on INT 24'
  2862 00000B4C 4E54203234         
  2863 00000B51 15                      TOOMANYRD:	db 21
  2864 00000B52 546F6F206D616E7920-     		db 'Too many redirections'
  2864 00000B5B 726564697265637469-
  2864 00000B64 6F6E73             
  2865 00000B67 15                      DUPLREDIR:	db 21
  2866 00000B68 4475706C6963617465-     		db 'Duplicate redirection'
  2866 00000B71 207265646972656374-
  2866 00000B7A 696F6E             
  2867 00000B7D 10                      INVPASSWD:	db 16
  2868 00000B7E 496E76616C69642070-     		db 'Invalid password'
  2868 00000B87 617373776F7264     
  2869 00000B8E 11                      INVLDPARM:	db 17
  2870 00000B8F 496E76616C69642070-     		db 'Invalid parameter'
  2870 00000B98 6172616D65746572   
  2871 00000BA0 12                      NETDATFAU:	db 18
  2872 00000BA1 4E6574776F726B2064-     		db 'Network data fault'
  2872 00000BAA 617461206661756C74 
  2873 00000BB3 21                      FNOSUPNET:	db 33
  2874 00000BB4 46756E6374696F6E20-     		db 'Function not supported by network'
  2874 00000BBD 6E6F7420737570706F-
  2874 00000BC6 72746564206279206E-
  2874 00000BCF 6574776F726B       
  2875 00000BD5 27                      RSCNOTINS:	db 39
  2876 00000BD6 526571756972656420-     		db 'Required system component not installed'
  2876 00000BDF 73797374656D20636F-
  2876 00000BE8 6D706F6E656E74206E-
  2876 00000BF1 6F7420696E7374616C-
  2876 00000BFA 6C6564             
  2877                                  
  2878                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2879                                  ; 05/06/2023
  2880                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0D8Fh
  2881                                  
  2882 00000BFD [CE09]                  EXTMSGPTRS:	dw INVLFUNCT
  2883 00000BFF [DF09]                  		dw FNOTFOUND
  2884 00000C01 [EE09]                  		dw PNOTFOUND
  2885 00000C03 [FD09]                  		dw TOOMANYOF
  2886 00000C05 [7606]                  		dw ACCDENIED
  2887 00000C07 [110A]                  		dw INVHANDLE
  2888 00000C09 [200A]                  		dw MEMCBDEST
  2889 00000C0B [400A]                  		dw INSUFFMEM
  2890 00000C0D [540A]                  		dw INVMEMBLA
  2891 00000C0F [710A]                  		dw INVENVIRO
  2892 00000C11 [850A]                  		dw INVFORMAT
  2893 00000C13 [940A]                  		dw INVFNPARM
  2894 00000C15 [AF0A]                  		dw INVLDDATA
  2895 00000C17 0000                    		dw 0
  2896 00000C19 [BC0A]                  		dw INVDRVSPC
  2897 00000C1B [D80A]                  		dw ATRCURDIR
  2898 00000C1D [FC0A]                  		dw NOTSAMDEV
  2899 00000C1F [0C0B]                  		dw NOMOREFIL
  2900 00000C21 [2D07]                  		dw CRMSG0
  2901 00000C23 [4107]                  		dw CRMSG1
  2902 00000C25 [4E07]                  		dw CRMSG2
  2903 00000C27 [5807]                  		dw CRMSG3
  2904 00000C29 [6F07]                  		dw CRMSG4
  2905 00000C2B [7A07]                  		dw CRMSG5
  2906 00000C2D [9C07]                  		dw CRMSG6
  2907 00000C2F [A707]                  		dw CRMSG7
  2908 00000C31 [BA07]                  		dw CRMSG8
  2909 00000C33 [CB07]                  		dw CRMSG9
  2910 00000C35 [E607]                  		dw CRMSG10
  2911 00000C37 [F807]                  		dw CRMSG11
  2912 00000C39 [0908]                  		dw CRMSG12
  2913 00000C3B [1908]                  		dw CRMSG13
  2914 00000C3D [2B08]                  		dw CRMSG14
  2915 00000C3F [3A08]                  		dw CRMSG15
  2916 00000C41 [4E08]                  		dw CRMSG16
  2917 00000C43 [5E08]                  		dw CRMSG17
  2918 00000C45 [7808]                  		dw CRMSG18
  2919 00000C47 [8B08]                  		dw CRMSG19
  2920 00000C49 [9808]                  		dw CRMSG20
  2921 00000C4B 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  2922 00000C9B [1A0B]                  		dw FILEXISTS
  2923 00000C9D 0000                    		dw 0
  2924 00000C9F [260B]                  		dw CANTMKDIR
  2925 00000CA1 [420B]                  		dw FAILINT24
  2926 00000CA3 [510B]                  		dw TOOMANYRD
  2927 00000CA5 [670B]                  		dw DUPLREDIR
  2928 00000CA7 [7D0B]                  		dw INVPASSWD
  2929 00000CA9 [8E0B]                  		dw INVLDPARM
  2930 00000CAB [A00B]                  		dw NETDATFAU
  2931 00000CAD [B30B]                  		dw FNOSUPNET
  2932 00000CAF [D50B]                  		dw RSCNOTINS
  2933                                  ; ----------------------------------------------------------------------------
  2934                                  	; 17/04/2023
  2935                                  ExtMsgEnd:
  2936                                  
  2937                                  ; 21/04/2023
  2938                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  2939                                  
  2940                                  ; ----------------------------------------------------------------------------
  2941                                  
  2942                                  ; 20/04/2023
  2943                                  
  2944 00000CB1 90<rep Fh>              align 16
  2945                                  
  2946                                  ; ----------------------------------------------------------------------------
  2947                                  
  2948                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2949                                  ;; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  2950                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2951                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:0E50h (CODERES:0000h)
  2952                                  
  2953                                  ; ----------------------------------------------------------------------------
  2954                                  ; SEGMENT - CODERES
  2955                                  ; ----------------------------------------------------------------------------
  2956                                  
  2957                                  ; 11/01/2023
  2958                                  RCODE_START:	
  2959                                  
  2960                                  ; ----------------------------------------------------------------------------
  2961                                  ;***	EXEC error handling
  2962                                  ;
  2963                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  2964                                  ;	We examine the error code and select an appropriate message.
  2965                                  ; --------------------------
  2966                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  2967                                  ;	Condense the error scan?
  2968                                  ;	RBADNAM is checked by transient, no need here?
  2969                                  ;	Move below Ext_Exec.
  2970                                  ; ----------------------------------------------------------------------------
  2971                                  
  2972                                  Exec_Err:
  2973                                  ;SR;
  2974                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  2975                                  ; in order here
  2976                                  
  2977                                  ;	Bugbug:	can we use byte compares here?
  2978                                  ;	Might be able to use byte msg#s, too.
  2979                                  
  2980                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  2981                                  ;	Speed not high priority here.
  2982                                  
  2983                                  ;	Move this to transient.
  2984                                  
  2985                                  	; 10/01/2023
  2986                                  
  2987                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  2988 00000CC0 BA[5B06]                	mov	dx,RBADNAM
  2989 00000CC3 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  2990 00000CC5 741B                    	je	short GotExecEMes		; bad command
  2991                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  2992 00000CC7 BA[2106]                	mov	dx,TOOBIG
  2993 00000CCA 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  2994 00000CCC 7414                    	je	short GotExecEMes		; file not found
  2995                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  2996 00000CCE BA[0D06]                	mov	dx,EXEBAD
  2997 00000CD1 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  2998 00000CD3 740D                    	je	short GotExecEMes		; bad exe file
  2999                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  3000 00000CD5 BA[7606]                	mov	dx,ACCDEN
  3001 00000CD8 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  3002 00000CDA 7406                    	je	short GotExecEMes		; access denied
  3003                                  
  3004                                  Default_Message:
  3005                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  3006 00000CDC BA[F905]                	mov	dx,EXECEMES
  3007                                  						; default message
  3008 00000CDF BE[CE01]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  3009                                  						; get address of subst block
  3010                                  GotExecEMes:
  3011                                  	;mov	dx,bx				; DX = ptr to msg
  3012 00000CE2 E85106                  	call	RPrint ; invoke	RPrint
  3013 00000CE5 EB09                    	jmp	short NoExec
  3014                                  
  3015                                  ; ----------------------------------------------------------------------------
  3016                                  ;***	EXEC call
  3017                                  ;
  3018                                  ;	The transient has set up everything for an EXEC system call.
  3019                                  ;	For cleanliness, we issue the EXEC here in the resident 
  3020                                  ;	so that we may be able to recover cleanly upon success.
  3021                                  ;
  3022                                  ;	CS,DS,ES,SS = DATARES seg addr
  3023                                  ; ----------------------------------------------------------------------------
  3024                                  
  3025                                  Ext_Exec:
  3026                                  ;SR;
  3027                                  ; The words put on the stack by the stub will be popped off when we finally
  3028                                  ;jump to LodCom (by LodCom).
  3029                                  
  3030                                  	; 10/01/2023
  3031                                  	;int	21h			; do the exec
  3032                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  3033                                  Exec_Ret:
  3034 00000CE7 72D7                    	jc	short Exec_Err		; exec failed
  3035                                  
  3036                                  ;	The exec has completed. Retrieve the exit code.
  3037                                  
  3038                                  Exec_Wait:
  3039 00000CE9 B44D                    	mov	ah,4Dh
  3040                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  3041 00000CEB CD21                    	int	21h			; get the return code
  3042                                  	;mov	[cs:RetCode],ax
  3043                                  	; 11/01/2023
  3044 00000CED A3[3802]                	mov	[RetCode],ax
  3045                                  
  3046                                  ;	See if we can reload the transient. The external command
  3047                                  ;	may have overwritten part of the transient.
  3048                                  
  3049                                  NoExec:
  3050                                  ;SR;
  3051                                  ; ds = es = ss = DATARES when we jump to LodCom
  3052                                  ;
  3053 00000CF0 E97801                  	jmp	LodCom
  3054                                  
  3055                                  ; ----------------------------------------------------------------------------
  3056                                  ;***	Int 23 (ctrl-c) handler
  3057                                  ;
  3058                                  ;	This is the default system INT 23 handler. All processes
  3059                                  ;	(including COMMAND) get it by default. There are some
  3060                                  ;	games that are played: We ignore ^C during most of the
  3061                                  ;	INIT code. This is because we may perform an ALLOC and
  3062                                  ;	diddle the header! Also, if we are prompting for date/time
  3063                                  ;	in the init code, we are to treat ^C as empty responses.
  3064                                  ; ---------------------------
  3065                                  ;	Bugbug:	put init ctrl-c handling in init module.
  3066                                  ; ----------------------------------------------------------------------------
  3067                                  
  3068                                  ;SR;
  3069                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  3070                                  ;both these values off the stack now
  3071                                  ;
  3072                                  ;ContC	proc	far
  3073                                  
  3074                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3075                                  
  3076                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  3077                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  3078                                  ContC:
  3079 00000CF3 1F                      	pop	ds			; ds = DATARES
  3080                                  ;	assume	ds:DATARES
  3081                                  ;;	pop	word [OldDS]		; OldDS = old ds
  3082                                  
  3083 00000CF4 F606[B402]01            	test	byte [InitFlag],INITINIT ; 1
  3084                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  3085 00000CF9 740D                    	jz	short NotAtInit		; no
  3086 00000CFB F606[B402]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  3087                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  3088 00000D00 7404                    	jz	short CmdIret		; no, ignore ^C
  3089 00000D02 1F                      	pop	ds			; restore before jumping; M021
  3090                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  3091 00000D03 E92F0E                  	jmp	init_contc_specialcase
  3092                                  CmdIret:
  3093                                  ;SR;
  3094                                  ; Restore ds to its previous value
  3095                                  ;
  3096                                  
  3097                                  ;;	mov	ds,[OLdDS]		;
  3098 00000D06 1F                      	pop	ds
  3099 00000D07 CF                      	iret				; yes, ignore the ^C
  3100                                  
  3101                                  NotAtInit:
  3102 00000D08 F606[B402]04            	test	byte [InitFlag],INITCTRLC ; 4
  3103                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  3104 00000D0D 7411                    	jz	short NotInit 		; nope too.
  3105                                  
  3106                                  ;*	We are interrupting ourselves in this ^C handler. We need
  3107                                  ;	to set carry and return to the user sans flags only if the
  3108                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  3109                                  
  3110                                  	;cmp	ah,1
  3111                                  	;jb	short CmdIret
  3112                                  	; 19/07/2024
  3113 00000D0F 84E4                    	test	ah,ah
  3114 00000D11 74F3                    	jz	short CmdIret
  3115                                  
  3116 00000D13 80FC0C                  	cmp	ah,12
  3117 00000D16 77EE                    	ja	short CmdIret
  3118                                  
  3119 00000D18 1F                      	pop	ds			;restore ds to old value
  3120 00000D19 83C406                  	add	sp,6			; remove int frame
  3121 00000D1C F9                      	stc
  3122                                  
  3123                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  3124 00000D1D CA0200                  	retf	2			; remove those flags...
  3125                                  
  3126                                  NotInit:
  3127                                  
  3128                                  ;*	We have now received a ^C for some process (maybe ourselves
  3129                                  ;	but not at INIT).
  3130                                  ;	
  3131                                  ;	Note that we are running on the user's stack!!! Bad news if
  3132                                  ;	any of the system calls below go and issue another INT
  3133                                  ;	24... Massive stack overflow! Another bad point is that
  3134                                  ;	SavHand will save an already saved handle, thus losing a
  3135                                  ;	possible redirection...
  3136                                  ;	
  3137                                  ;	All we need to do is set the flag to indicate nested ^C. 
  3138                                  ;	The above code will correctly flag the ^C diring the
  3139                                  ;	message output and prompting while ignoring the ^C the rest
  3140                                  ;	of the time.
  3141                                  ;	
  3142                                  ;	Clean up: flush disk. If we are in the middle of a batch
  3143                                  ;	file, we ask if he wants to terminate it. If he does, then
  3144                                  ;	we turn off all internal flags and let the DOS abort.
  3145                                  
  3146 00000D20 800E[B402]04            	or	byte [InitFlag],INITCTRLC ; 4
  3147                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  3148 00000D25 FB                      	sti
  3149                                  
  3150                                  ;	push	cs			; el yucko! change the user's ds!!
  3151                                  ;	pop	ds
  3152                                  
  3153                                  ;	assume	ds:RESGROUP
  3154                                  
  3155 00000D26 58                      	pop	ax			; discard the old ds value
  3156                                  
  3157 00000D27 A1[4302]                	mov	ax,[SingleCom]
  3158 00000D2A 09C0                    	or	ax,ax
  3159 00000D2C 7506                    	jnz	short NoReset
  3160 00000D2E 50                      	push	ax
  3161 00000D2F B40D                    	mov	ah,DISK_RESET ; 0Dh
  3162 00000D31 CD21                    	int	21h			; reset disks in case files were open
  3163 00000D33 58                      	pop	ax
  3164                                  
  3165                                  NoReset:
  3166                                  
  3167                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  3168                                  ;	walk the entire active list and free each segment. Here,
  3169                                  ;	we just free the single batch segment.
  3170                                  
  3171 00000D34 F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
  3172 00000D3A 7452                    	jz	short ContCTerm
  3173 00000D3C 09C0                    	or	ax,ax
  3174 00000D3E 754E                    	jnz	short ContCTerm
  3175 00000D40 E88502                  	call	SavHand
  3176 00000D43 E89303                  	call	AskEnd			; ask if user wants to end batch
  3177                                  
  3178                                  ;	If the carry flag is clear, we do NOT free up the batch file
  3179                                  
  3180 00000D46 7340                    	jnc	short ContBatch
  3181 00000D48 8A0E[3B02]              	mov	cl,[EchoFlag]		; get current echo flag
  3182 00000D4C 53                      	push	bx
  3183                                  
  3184                                  ClearBatch:
  3185 00000D4D 8E06[E701]              	mov	es,[Batch]		; get batch segment
  3186                                  	;mov	di,20h
  3187 00000D51 8B3E2000                	mov	di,[BATCHSEGMENT.BatFile] ; get offset of batch file name
  3188                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  3189                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  3190 00000D55 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  3191                                  	; MSDOS 3.3 ([ES:4])
  3192                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  3193                                  	;
  3194                                  	; 19/07/2024
  3195                                  	;cmp	bx,0			; is a FOR in progress
  3196                                  	;je	short No_Bat_For	; no - don't deallocate
  3197 00000D5A 85DB                    	test	bx,bx
  3198 00000D5C 7408                    	jz	short No_Bat_For
  3199                                  
  3200 00000D5E 06                      	push	es			;
  3201 00000D5F 8EC3                    	mov	es,bx			; yes - free it up...
  3202 00000D61 B449                    	mov	ah,49h
  3203                                  	;mov	ah,DEALLOC ; 49h	;
  3204 00000D63 CD21                    	int	21h			;
  3205 00000D65 07                      	pop	es			; restore to batch segment
  3206                                  
  3207                                  No_Bat_For:
  3208                                  	;mov	cl,[es:1]
  3209 00000D66 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  3210                                  	;mov	bx,[es:3]
  3211 00000D6B 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  3212 00000D70 B449                    	mov	ah,49h
  3213                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  3214 00000D72 CD21                    	int	21h
  3215 00000D74 891E[E701]              	mov	[Batch],bx		; get ready to deallocate next batch
  3216 00000D78 FF0E[4C02]              	dec	word [Nest]		; is there another batch file?
  3217 00000D7C 75CF                    	jnz	short ClearBatch	; keep going until no batch file
  3218                                  
  3219                                  ;	We are terminating a batch file; restore the echo status
  3220                                  
  3221                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  3222 00000D7E 5B                      	pop	bx
  3223 00000D7F 880E[3B02]              	mov	[EchoFlag],cl		; reset echo status
  3224                                  	; 29/05/2018
  3225 00000D83 C606[B502]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  3226                                  
  3227                                  ContBatch:
  3228 00000D88 E8A805                  	call	crlf			; print out crlf before returning
  3229 00000D8B E86302                  	call	RestHand
  3230                                  
  3231                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  3232                                  
  3233                                  ContCTerm:
  3234 00000D8E 31C0                    	xor	ax,ax			; indicate no read
  3235 00000D90 89C5                    	mov	bp,ax
  3236                                  
  3237                                  ;	The following resetting of the state flags is good for the
  3238                                  ;	generalized batch processing.
  3239                                  
  3240 00000D92 A2[4802]                	mov	[IfFlag],al		; turn off iffing
  3241 00000D95 A2[4902]                	mov	[ForFlag],al		; turn off for processing
  3242 00000D98 E81C00                  	call	ResPipeOff
  3243 00000D9B 3906[4302]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  3244 00000D9F 7406                    	jz	short NoSetSing
  3245 00000DA1 C706[4302]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  3246                                  					;  pipe, batch, for
  3247                                  NoSetSing:
  3248                                  
  3249                                  ;	If we are doing an internal command, go through the reload process.
  3250                                  ;	If we are doing an external, let DOS abort the process.
  3251                                  ;	In both cases, we are now done with the ^C processing.
  3252                                  
  3253 00000DA7 8026[B402]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  3254 00000DAC 3806[3702]              	cmp	[ExtCom],al
  3255 00000DB0 7503                    	jnz	short DoDAb		; internal ^c
  3256 00000DB2 E94501                  	jmp	LodCom1
  3257                                  DoDAb:
  3258 00000DB5 F9                      	stc				; tell dos to abort
  3259                                  
  3260                                  ;SR;
  3261                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  3262                                  ;by setting carry and leaving flags on the stack
  3263                                  
  3264 00000DB6 CB                      	retf				; Leave flags on stack
  3265                                  
  3266                                  ;ContC	endp
  3267                                  
  3268                                  ;SR;
  3269                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  3270                                  ;both have ds = DATARES
  3271                                  
  3272                                  	; 11/01/2023
  3273                                  ResPipeOff:
  3274 00000DB7 50                      	push	ax
  3275 00000DB8 31C0                    	xor	ax,ax
  3276                                  	;xchg	al,[cs:PIPEFLAG]
  3277 00000DBA 8606[B502]              	xchg	al,[PipeFlag]
  3278 00000DBE 08C0                    	or	al,al
  3279 00000DC0 7404                    	jz	short NoPipePop
  3280                                  	;shr	byte [cs:ECHOFLAG],1
  3281 00000DC2 D02E[3B02]              	shr	byte [EchoFlag],1
  3282                                  NoPipePop:
  3283 00000DC6 58                      	pop	ax
  3284 00000DC7 C3                      	retn
  3285                                  
  3286                                  ;CODERES ends
  3287                                  
  3288                                  ;=============================================================================
  3289                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  3290                                  ;=============================================================================
  3291                                  ; 21/09/2018 - Retro DOS v3.0
  3292                                  
  3293                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  3294                                  ;	name	COMMAND2
  3295                                  
  3296                                  ;/*
  3297                                  ; *                      Microsoft Confidential
  3298                                  ; *                      Copyright (C) Microsoft Corporation 1991
  3299                                  ; *                      All Rights Reserved.
  3300                                  ; */
  3301                                  
  3302                                  ;
  3303                                  ;	Revision History
  3304                                  ;	================
  3305                                  ;
  3306                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  3307                                  ;			reserve memory by changing int 12h and then give it
  3308                                  ;			back to DOS by changing arenas in autoexec.bat.
  3309                                  ;			This makes command.com reload transient and this
  3310                                  ;			cannot be done at this stage.
  3311                                  ;
  3312                                  
  3313                                  ;CODERES segment public byte
  3314                                  
  3315                                  ;*	If we cannot allocate enough memory for the transient or there
  3316                                  ;	was some other allocation error, we display a message and
  3317                                  ;	then die.
  3318                                  
  3319                                  ;SR;
  3320                                  ; We will have to make sure that at this entry point and at FatalC, 
  3321                                  ;ds = DATARES. All jumps to these points are made from only within this file
  3322                                  ;and so we should be able to do this
  3323                                  
  3324                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3325                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  3326                                  
  3327                                  	;assume	ds:DATARES
  3328                                  BadMemErr:
  3329 00000DC8 BA[8406]                	mov	dx,BMEMMES			; DX = ptr to msg
  3330                                  FatalC:
  3331                                  	; 12/01/2023
  3332                                  ;;	push	cs
  3333                                  ;;	pop	ds
  3334                                  ;;	assume	ds:ResGroup
  3335                                  ;	invoke	RPrint
  3336                                  
  3337                                  	; 12/01/2023
  3338                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3339 00000DCB E86805                  	call	RPrint
  3340                                  
  3341                                  	; MSDOS 3.3
  3342                                  	;call	RDISPMSG
  3343                                  
  3344                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  3345                                  ;	we can't do anything else!
  3346                                  
  3347 00000DCE 803E[4002]00            	cmp	byte [PermCom],0
  3348 00000DD3 7410                    	je	short FatalRet
  3349                                  
  3350                                  ;	We are a permanent command. If we are in the process of the
  3351                                  ;	magic interrupt (Singlecom) then exit too.
  3352                                  
  3353 00000DD5 833E[4302]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  3354 00000DDA 7509                    	jne	short FatalRet			; must take int_2e exit
  3355                                  
  3356                                  ;	Permanent command. We can't do ANYthing except halt.
  3357                                  
  3358 00000DDC BA[9E06]                	mov	dx,HALTMES			; DX = ptr to msg
  3359                                  	;invoke	RPrint
  3360                                  	; 12/01/2023	
  3361                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3362 00000DDF E85405                  	call	RPrint	
  3363                                  	; MSDOS 3.3
  3364                                  	;call	RDISPMSG
  3365 00000DE2 FB                      	sti
  3366                                  Stall:
  3367 00000DE3 EBFE                    	jmp	short Stall			; crash the system nicely
  3368                                  
  3369                                  FatalRet:
  3370 00000DE5 BA[C506]                	mov	dx,FRETMES			; DX = ptr to msg
  3371                                  	;call	RDISPMSG
  3372                                  	; 12/01/2023	
  3373 00000DE8 E84B05                  	call	RPrint	
  3374                                  FatalRet2:
  3375 00000DEB 803E[4002]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  3376 00000DF0 7517                    	jne	short Ret_2e			; must be int_2e
  3377                                  
  3378                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3379                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3380                                  ;	case we decide to do that.)
  3381                                  
  3382 00000DF2 A1[DC01]                	mov	ax,[Parent]
  3383                                  	;mov	[16h],ax
  3384 00000DF5 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3385 00000DF8 A1[DE01]                	mov	ax,[OldTerm]
  3386                                  	;mov	[0Ah],ax
  3387 00000DFB A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3388 00000DFE A1[E001]                	mov	ax,[OldTerm+2]
  3389                                  	;mov	[0Ch],ax
  3390 00000E01 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3391 00000E04 B8004C                  	mov	ax,4C00h
  3392                                  	;mov	ax,(EXIT<<8) ; 4C00h		; return to lower level
  3393 00000E07 CD21                    	int	21h
  3394                                  Ret_2e:
  3395                                  ;SR;
  3396                                  ; We will ensure that ds = DATARES for all entries to this place
  3397                                  ;
  3398                                  
  3399                                  ;;	push	cs
  3400                                  ;;	pop	ds
  3401                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3402                                    	
  3403                                  ;	assume	ds:DATARES
  3404                                  
  3405                                  	;PUSH	CS
  3406                                  	;POP	DS
  3407                                  
  3408 00000E09 C706[4302]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3409 00000E0F 8E06[FA03]              	mov	es,[Res_Tpa]
  3410                                  	;mov	ah,49h	; 12/01/2023
  3411 00000E13 B449                    	mov	ah,DEALLOC
  3412 00000E15 CD21                    	int	21h			; free up space used by transient
  3413 00000E17 8B1E[DA01]              	mov	bx,[Save_Pdb]
  3414 00000E1B B450                    	mov	ah,50h
  3415                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3416 00000E1D CD21                    	int	21h			; current process is user
  3417 00000E1F A1[3802]                	mov	ax,[RetCode]
  3418 00000E22 803E[3702]00            	cmp	byte [ExtCom],0
  3419 00000E27 7502                    	jne	short GotECode
  3420 00000E29 31C0                    	xor	ax,ax			; internals always return 0
  3421                                  GotECode:
  3422 00000E2B C606[3702]01            	mov	byte [ExtCom],1		; force external
  3423                                  
  3424                                  ;SR; This is actually returning to the caller. However, the old code had
  3425                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3426                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3427                                  
  3428                                  	; 12/01/2023
  3429 00000E30 FF2E[D601]              	jmp	far [Int_2e_Ret]	; "iret"
  3430                                  
  3431                                  ;***	Int_2e, magic command executer
  3432                                  
  3433                                  Int_2e:
  3434                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3435                                  ;SR;
  3436                                  ;We are going to come here from the stub with the old ds and DATARES value
  3437                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3438                                  
  3439                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3440                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3441                                  
  3442 00000E34 1F                      	pop	ds			; ds = DATARES
  3443                                  	;assume	ds:DATARES
  3444 00000E35 58                      	pop	ax
  3445                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3446                                  
  3447                                  	;pop	word [cs:Int_2e_Ret]
  3448                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3449                                  	;pop	ax			; chuck flags
  3450 00000E36 8F06[D601]              	pop	word [Int_2e_Ret]
  3451 00000E3A 8F06[D801]              	pop	word [Int_2e_Ret+2]
  3452                                  	
  3453 00000E3E 83C402                  	add	sp,2
  3454                                  
  3455                                  ;;	push	cs
  3456                                  ;;	pop	es
  3457                                  
  3458 00000E41 1E                      	push	ds
  3459 00000E42 07                      	pop	es			; es = DATARES
  3460                                  ;	;mov	ds,OldDS
  3461 00000E43 8ED8                    	mov	ds,ax
  3462                                  	;assume	ds:nothing		; ds = old value
  3463                                  
  3464 00000E45 BF8000                  	mov	di,80h
  3465 00000E48 B94000                  	mov	cx,64
  3466                                  ;	Bugbug:	cld
  3467 00000E4B F3A5                    	rep	movsw
  3468 00000E4D B451                    	mov	ah,51h
  3469                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3470 00000E4F CD21                    	int	21h			; get user's header
  3471                                  	; 12/01/2023
  3472 00000E51 26891E[DA01]            	mov	[es:Save_Pdb],bx
  3473                                  	;mov	[cs:Save_Pdb],bx
  3474 00000E56 B450                    	mov	ah,50h
  3475                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3476                                  
  3477                                  ;;	mov	bx,cs
  3478                                  ;SR;
  3479                                  ;Set ds = DATARES because BadMemErr expects this
  3480                                  
  3481                                  	; 12/01/2023
  3482 00000E58 06                      	push	es
  3483 00000E59 1F                      	pop	ds
  3484                                  	;assume	ds:DATARES
  3485                                  
  3486 00000E5A 8CDB                    	mov	bx,ds			; es = our PSP now
  3487                                  	;mov	bx,cs
  3488                                  
  3489 00000E5C CD21                    	int	21h			; current process is me
  3490                                  	;mov	word [cs:SingleCom],81h
  3491                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3492                                  	; 12/01/2023
  3493 00000E5E C706[4302]8100          	mov	word [SingleCom],81h
  3494 00000E64 C606[3702]01            	mov	byte [ExtCom],1		; make sure this case forced
  3495                                  
  3496                                  ;SR;
  3497                                  ;We can enter LodCom directly after a command shell is terminated or we
  3498                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3499                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3500                                  ;be properly set. To fake this, we push dummy values here.
  3501                                  
  3502                                  	; 12/01/2023
  3503 00000E69 1E                      	push	ds			; old value of ds
  3504 00000E6A 1E                      	push	ds			; data seg value, ds = DATARES
  3505                                  LodCom: 				; termination handler
  3506 00000E6B 1F                      	pop	ds			; ds = DATARES
  3507                                  	;assume	ds:DATARES
  3508 00000E6C 83C402                  	add	sp,2
  3509                                  ;	;pop	OldDS			; store old ds
  3510                                  	;cmp	ExtCom,0
  3511 00000E6F 803E[3702]00            	cmp	byte [ExtCom],0
  3512                                  	;cmp	byte [cs:ExtCom],0
  3513                                  	;jne	short @f	 	; internal cmd - memory allocated
  3514                                  	; 16/04/2023
  3515 00000E74 7503                    	jne	short LodCom0 ; 24/09/2018
  3516 00000E76 E98100                  	jmp	LodCom1
  3517                                  	;je	short LodCom1 ; 25/09/2018	
  3518                                  ;@@:
  3519                                  LodCom0: ; 24/09/2018
  3520 00000E79 BBFFFF                  	mov	bx,0FFFFh
  3521 00000E7C B448                    	mov	ah,48h	; 12/01/2023
  3522                                  	;mov	ah,ALLOC ; 48h	
  3523 00000E7E CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3524                                  				; BX = number of 16-byte paragraphs desired
  3525 00000E80 E80A00                  	call	SetSize
  3526 00000E83 83C020                  	add	ax,20h
  3527 00000E86 39C3                    	cmp	bx,ax
  3528 00000E88 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3529                                  BadMemErrJ:
  3530 00000E8A E93BFF                  	jmp	BadMemErr		; not enough memory
  3531                                  
  3532                                  ;***	SetSize - get transient size in paragraphs
  3533                                  
  3534                                  SetSize:
  3535                                  	; 12/01/2023
  3536                                  	;;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3537                                  	;;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3538                                  	; 05/06/2023
  3539                                  	;mov	ax,0AFA4h		; MSDOS 6.22 COMMAND.COM
  3540 00000E8D B810AA                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3541 00000E90 B104                    	mov	cl,4
  3542 00000E92 D3E8                    	shr	ax,cl
  3543 00000E94 C3                      	retn
  3544                                  
  3545                                  MemOk:
  3546                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3547                                  
  3548 00000E95 B448                    	mov	ah,48h
  3549                                  	;mov	ah,ALLOC  ; 48h
  3550 00000E97 CD21                    	int	21h
  3551 00000E99 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3552                                  	;mov	byte [cs:ExtCom],0
  3553                                  	;mov	[cs:Res_Tpa],ax
  3554                                  	; 12/01/2023
  3555 00000E9B C606[3702]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3556 00000EA0 A3[FA03]                	mov	[Res_Tpa],ax		; save current tpa segment
  3557                                  
  3558 00000EA3 2500F0                  	and	ax,0F000h
  3559 00000EA6 050010                  	add	ax,1000h		; round up to next 64k boundary
  3560 00000EA9 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3561                                  
  3562                                  ;	Make sure that new boundary is within allocated range
  3563                                  
  3564                                  	;mov	dx,[cs:Res_Tpa]
  3565                                  	; 12/01/2023
  3566 00000EAB 8B16[FA03]              	mov	dx,[Res_Tpa]
  3567 00000EAF 01DA                    	add	dx,bx			; compute maximum address
  3568 00000EB1 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3569 00000EB3 7608                    	jbe	short Bad_Tpa
  3570                                  
  3571                                  ;	Must have 64K of usable space.
  3572                                  
  3573 00000EB5 29C2                    	sub	dx,ax			; compute the usable space
  3574 00000EB7 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3575 00000EBB 7303                    	jae	short LTpaSet
  3576                                  Bad_Tpa:
  3577                                  	;mov	ax,[cs:Res_Tpa]
  3578                                  	; 12/01/2023
  3579 00000EBD A1[FA03]                	mov	ax,[Res_Tpa]
  3580                                  LTpaSet:
  3581                                  	;mov	[cs:LTPA],ax
  3582                                  	;mov	ax,[cs:Res_Tpa]
  3583                                  	; 12/01/2023
  3584 00000EC0 A3[EE03]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3585 00000EC3 A1[FA03]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3586 00000EC6 01C3                    	add	bx,ax
  3587                                  	;mov	[cs:MemSiz],bx
  3588 00000EC8 891E[3302]              	mov	[MemSiz],bx
  3589 00000ECC E8BEFF                  	call	SetSize
  3590 00000ECF 29C3                    	sub	bx,ax
  3591                                  
  3592                                  	; MSDOS 6.0
  3593                                  
  3594                                  ;M038; Start of changes
  3595                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3596                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3597                                  ;running a program that changes arenas. This changes the largest block that
  3598                                  ;command.com gets and so changes the transient segment. So, command.com does
  3599                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3600                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3601                                  ;reload fails, hanging the system. To get around this we just copy the
  3602                                  ;transient from the previous address to the new address(if changed) and
  3603                                  ;then let command.com do the checksum. So, if the transient area is not
  3604                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3605                                  ;is not really corrupted and so this should work.
  3606                                  
  3607                                  	; 12/01/2023
  3608                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3609                                  
  3610 00000ED1 3B1E[2D02]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3611 00000ED5 7423                    	je	short LodCom1		; yes, dont copy
  3612                                  
  3613                                  ;Check if the new segment is above or below the current move. If the new
  3614                                  ;segment is above (i.e new block is larger than previous block), then we
  3615                                  ;have to move in the reverse direction
  3616                                  
  3617                                  	;;mov	cx,98C5h
  3618                                  	; 05/06/2023
  3619                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:106Ah (CODERES:021Ah)
  3620                                  	;mov	cx,0AF95h
  3621 00000ED7 B901AA                  	mov	cx,TRANSPACEEND		; cx = length to move
  3622 00000EDA 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3623 00000EDC 31F6                    	xor	si,si			; normal move
  3624 00000EDE 89F7                    	mov	di,si
  3625 00000EE0 FC                      	cld
  3626 00000EE1 EB06                    	jmp	short copy_trans
  3627                                  mov_down:
  3628 00000EE3 89CE                    	mov	si,cx			; reverse move, start from end
  3629 00000EE5 4E                      	dec	si
  3630 00000EE6 89F7                    	mov	di,si
  3631 00000EE8 FD                      	std
  3632                                  copy_trans:
  3633 00000EE9 1E                      	push	ds
  3634 00000EEA 06                      	push	es
  3635 00000EEB 8EC3                    	mov	es,bx			; dest segment
  3636 00000EED 8E1E[2D02]              	mov	ds,[TrnSeg]		; source segment
  3637                                  	;assume	ds:nothing
  3638                                  
  3639 00000EF1 F3A4                    	rep	movsb			; copy transient
  3640 00000EF3 FC                      	cld
  3641 00000EF4 07                      	pop	es
  3642 00000EF5 1F                      	pop	ds
  3643                                  	;assume	ds:DATARES
  3644                                  
  3645                                  ;M038; End of changes
  3646                                  
  3647                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3648                                  	; 12/01/2023
  3649 00000EF6 891E[2D02]              	mov	[TrnSeg],bx
  3650                                  
  3651                                  LodCom1:
  3652                                  ;;	mov	ax,cs
  3653                                  ;;	mov	ss,ax
  3654                                  ;SR; At this point ds = DATARES which is where the stack is located
  3655                                  
  3656                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3657                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3658 00000EFA 8CD8                    	mov	ax,ds
  3659 00000EFC 8ED0                    	mov	ss,ax
  3660                                  	;assume	ss:DATARES
  3661                                  	;;;mov	sp,offset DATARES:RStack
  3662                                  	;;mov	sp,53Eh
  3663                                  	; 05/06/2023
  3664                                  	;mov	sp,60Ah ; MSDOS 6.22 COMMAND.COM
  3665 00000EFE BC[D404]                	mov	sp,RStack
  3666                                  
  3667                                  ;;	mov	ds,ax
  3668                                  
  3669                                  	;assume	ds:DATARES
  3670                                  	
  3671                                  	; MSDOS 3.3
  3672                                  	;mov	ax,cs
  3673                                  	;mov	ss,ax
  3674                                  	;mov	sp,RSTACK
  3675                                  	;mov	ds,ax
  3676                                  
  3677 00000F01 E87B00                  	call	HeadFix			; close files, restore stdin, stdout
  3678 00000F04 31ED                    	xor	bp,bp			; flag command ok
  3679 00000F06 B8FFFF                  	mov	ax,-1
  3680 00000F09 8706[4502]              	xchg	ax,[VerVal]
  3681 00000F0D 83F8FF                  	cmp	ax,-1
  3682 00000F10 7404                    	je	short NoSetVer
  3683 00000F12 B42E                    	mov	ah,2Eh
  3684                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3685 00000F14 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3686                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3687                                  NoSetVer:
  3688 00000F16 833E[4302]FF            	cmp	word [SingleCom],-1
  3689 00000F1B 7503                    	jne	short NoSng
  3690 00000F1D E9CBFE                  	jmp	FatalRet2		; we have finished the single command
  3691                                  NoSng:
  3692 00000F20 E87201                  	call	ChkSum			; check the transient
  3693                                  	;cmp	dx,[Sum]
  3694                                  	;je	short HavCom		; transient ok
  3695                                  	; 12/01/2023
  3696 00000F23 7412                    	jz	short HavCom
  3697                                  Bogus_Com:
  3698 00000F25 C606[E601]01            	mov	byte [Loading],1	; flag DskErr routine
  3699 00000F2A E81E01                  	call	LoadCom
  3700                                  ChkSame:
  3701 00000F2D E86501                  	call	ChkSum
  3702                                  	;cmp	dx,[Sum]
  3703                                  	;je	short HavCom		; same command
  3704                                  	; 12/01/2023
  3705 00000F30 7405                    	jz	short HavCom
  3706                                  Also_Bogus:
  3707 00000F32 E85801                  	call	WrongCom
  3708 00000F35 EBF6                    	jmp	short ChkSame
  3709                                  
  3710                                  	; 12/01/2023
  3711                                  ;HavCom:
  3712                                  ;	; 25/09/2018
  3713                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3714                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3715                                  ;			; Return: AL = FFh unsupported subfunction
  3716                                  ;			; DL = current switch character
  3717                                  ;	mov     [RSWITCHAR],dl
  3718                                  ;	cmp     dl,'/'
  3719                                  ;	jnz     short USESLASH
  3720                                  ;	;mov	cl,'\'
  3721                                  ;	;mov	[RDIRCHAR],cl
  3722                                  ;	mov	byte [RDIRCHAR],'\'
  3723                                  ;USESLASH:
  3724                                  
  3725                                  HavCom:
  3726                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3727 00000F37 C606[E601]00            	mov	byte [Loading],0		; flag to DskErr
  3728                                  	;;;mov	si,offset DATARES:TranVars
  3729                                  	;;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3730                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3731                                  	;mov	si,51Dh		; MSDOS 6.22 COMMAND.COM
  3732 00000F3C BE[EA03]                	mov	si,TranVars
  3733                                  	;;;mov	di,offset TRANGROUP:HeadCall
  3734                                  	;;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3735                                  	; 05/06/2023
  3736                                  	;mov	di,0A303h	; MSDOS 6.22 COMMAND.COM
  3737 00000F3F BF[F19D]                	mov	di,HEADCALL
  3738 00000F42 8E06[2D02]              	mov	es,[TrnSeg]
  3739 00000F46 FC                      	cld
  3740                                  	;;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3741                                  	;mov	cx,533h		; MSDOS 6.22 COMMAND.COM	
  3742 00000F47 B9[FE03]                	mov	cx,TranVarEnd
  3743 00000F4A 29F1                    	sub	cx,si
  3744 00000F4C F3A4                    	rep	movsb			; transfer info to transient
  3745 00000F4E A1[3302]                	mov	ax,[MemSiz]
  3746 00000F51 A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3747                                  
  3748                                  ;***	TJmp - jump-off to transient
  3749                                  ;
  3750                                  ;	Public label so debugger can find this spot.
  3751                                  
  3752                                  TJmp:	; 12/01/2023
  3753 00000F54 FF2E[2B02]              	jmp	far [Trans]		; jmp dword ptr Trans
  3754                                  
  3755                                  ;***	TRemCheck - far version of RemCheck for transient
  3756                                  
  3757                                  TRemCheck:
  3758                                  	; 12/01/2023
  3759 00000F58 1F                      	pop	ds			; ds = DATARES
  3760 00000F59 83C402                  	add	sp,2			; discard old value of ds
  3761                                  
  3762 00000F5C E80100                  	call	RemCheck
  3763 00000F5F CB                      	retf
  3764                                  
  3765                                  ;***	RemCheck
  3766                                  ;
  3767                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3768                                  ;
  3769                                  ;	EXIT	ZR set if removeable media
  3770                                  ;		ZR clear if fixed media
  3771                                  ;
  3772                                  ;	USED	none
  3773                                  
  3774                                  	; 12/01/2023
  3775                                  RemCheck:
  3776 00000F60 50                      	push	ax
  3777 00000F61 53                      	push	bx
  3778 00000F62 89C3                    	mov	bx,ax
  3779 00000F64 B80844                  	mov	ax,4408h
  3780                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3781 00000F67 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3782 00000F69 7304                    	jnc	short rcCont		
  3783                                  
  3784                                  ;	If an error occurred, assume the media is non-removable.
  3785                                  ;	AX contains the non-zero error code from the int 21, so
  3786                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3787                                  ;	appear to be non-removable.				
  3788                                  					
  3789 00000F6B 09C0                    	or	ax,ax			
  3790 00000F6D EB05                    	jmp	short ResRegs
  3791                                  rcCont:
  3792 00000F6F 83E001                  	and	ax,1
  3793 00000F72 F7D0                    	not	ax
  3794                                  ResRegs:
  3795 00000F74 5B                      	pop	bx
  3796 00000F75 58                      	pop	ax
  3797 00000F76 C3                      	retn
  3798                                  
  3799                                  ;***	THeadFix
  3800                                  ;
  3801                                  ;	Far version of HeadFix, called from transient.
  3802                                  
  3803                                  THeadFix:
  3804                                  	; 12/01/2023
  3805 00000F77 1F                      	pop	ds			; ds = DATARES
  3806 00000F78 83C402                  	add	sp,2			; discard old ds value on stack
  3807                                  
  3808 00000F7B E80100                  	call	HeadFix
  3809 00000F7E CB                      	retf
  3810                                  
  3811                                  ;***	HeadFix
  3812                                  
  3813                                  	; 12/01/2023
  3814                                  HeadFix:
  3815 00000F7F E83101                  	call	SetVect			; set vectors to our values
  3816                                  
  3817                                  ;	Clean up header
  3818                                  
  3819                                  ;	Bugbug:	optimize:
  3820                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3821                                  
  3822 00000F82 31DB                    	xor	bx,bx			; BX = handle = 0
  3823 00000F84 8B0E[3D02]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3824                                  	;mov	dx,[18h] 
  3825 00000F88 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3826 00000F8C 38D1                    	cmp	cl,dl
  3827 00000F8E 7408                    	je	short Chk1		; stdin matches
  3828 00000F90 B43E                    	mov	ah,3Eh
  3829                                  	;mov	ah,CLOSE  ; 3Eh
  3830 00000F92 CD21                    	int	21h			; close stdin
  3831                                  	;mov	[18h],cl
  3832 00000F94 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  3833                                  Chk1:
  3834 00000F98 43                      	inc	bx			; BX = handle = 1
  3835 00000F99 38F5                    	cmp	ch,dh			
  3836 00000F9B 7408                    	je	short ChkOtherHand	; stdout matches
  3837 00000F9D B43E                    	mov	ah,3Eh
  3838                                  	;mov	ah,CLOSE
  3839 00000F9F CD21                    	int	21h			; close stdout
  3840                                  	;mov	[19h],ch
  3841 00000FA1 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  3842                                  ChkOtherHand:
  3843 00000FA5 83C304                  	add	bx,4			; skip handles 2,3,4
  3844 00000FA8 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  3845                                  					; (handles 0-4 already done)
  3846                                  CloseLoop:
  3847 00000FAB B43E                    	mov	ah,3Eh
  3848                                  	;mov	ah,CLOSE ; 3Eh
  3849 00000FAD CD21                    	int	21h			; close each handle
  3850 00000FAF 43                      	inc	bx			; BX = next handle
  3851 00000FB0 E2F9                    	loop	CloseLoop
  3852                                  
  3853                                  	; MSDOS 6.0
  3854                                  ;	Bugbug:	since this is for transient code, move it there
  3855                                  	
  3856                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3857                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  3858                                  
  3859                                  ;	M012: remove this CS -> DS. Must've been missed during
  3860                                  ;	purification.
  3861                                  ;;	push	ds			; save data segment
  3862                                  ;;	push	cs			; get local segment into DS
  3863                                  ;;	pop	ds			;
  3864 00000FB2 803E[6202]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  3865 00000FB7 750E                    	jne	short Append_Fix_End	; no - just exit
  3866 00000FB9 B807B7                  	mov	ax,0B707h
  3867                                  	;mov	ax,AppendSetState	; set the state of Append
  3868 00000FBC 8B1E[6002]              	mov	bx,[Append_State] 	; back to the original state
  3869 00000FC0 CD2F                    	int	2Fh			;
  3870 00000FC2 C606[6202]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  3871                                  Append_Fix_End: 			;
  3872                                  ;;	pop	ds			; get data segment back
  3873 00000FC7 C3                      	retn
  3874                                  
  3875                                  	; MSDOS 3.3
  3876                                  	;retn
  3877                                  
  3878                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  3879                                  ;
  3880                                  ;	ENTRY	nothing
  3881                                  ;
  3882                                  ;	EXIT	nothing
  3883                                  ;
  3884                                  ;	USED	flags
  3885                                  ;
  3886                                  ;	EFFECTS
  3887                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  3888                                  ;	  current program's stdin,stdout set to our stderr
  3889                                  ;
  3890                                  
  3891                                  ;SR;
  3892                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  3893                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  3894                                  
  3895                                  SavHand:
  3896                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  3897                                  
  3898                                  	; 12/01/2023
  3899                                  	;push	ds ; MSDOS 3.3
  3900                                  
  3901 00000FC8 53                      	push	bx			;preserve registers
  3902 00000FC9 50                      	push	ax
  3903                                  	; 12/01/2023
  3904 00000FCA 06                      	push	es
  3905 00000FCB 1E                      	push	ds			; save DATARES value
  3906                                  
  3907 00000FCC B451                    	mov	ah,51h
  3908                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3909 00000FCE CD21                    	int	21h			; BX = user's header seg addr
  3910 00000FD0 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  3911                                  	;lds	bx,[34h]	
  3912 00000FD2 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  3913 00000FD6 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  3914                                  	; 12/01/2023
  3915 00000FD8 07                      	pop	es			; es = DATARES
  3916 00000FD9 06                      	push	es			; save it back on stack
  3917 00000FDA 26A3[E401]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  3918                                  	;mov	[cs:HANDLE01],ax
  3919                                  
  3920                                  ;SR;
  3921                                  ; Use es to address Handle01 & our JFN_Table
  3922                                  
  3923                                  	; 12/01/2023
  3924                                  	;mov	al,[es:1Ah]
  3925 00000FDE 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  3926                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  3927 00000FE2 88C4                    	mov	ah,al			; AH = COMMAND stderr
  3928 00000FE4 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  3929                                  	; 12/01/2023
  3930 00000FE6 1F                      	pop	ds			; restore registers
  3931 00000FE7 07                      	pop	es
  3932 00000FE8 58                      	pop	ax
  3933 00000FE9 5B                      	pop	bx
  3934                                  	;pop	ds ; MSDOS 3.3
  3935 00000FEA C3                      	retn
  3936                                  
  3937                                  	;assume	ds:DATARES
  3938                                  GetComDsk2:
  3939 00000FEB E81F00                  	call	GetComDsk
  3940 00000FEE E909FF                  	jmp	LodCom1			; memory already allocated
  3941                                  
  3942                                  RestHand:
  3943 00000FF1 1E                      	push	ds
  3944 00000FF2 53                      	push	bx			; restore stdin, stdout to user
  3945 00000FF3 50                      	push	ax
  3946                                  	; 12/01/2023
  3947 00000FF4 B451                    	mov	ah,51h
  3948                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3949 00000FF6 CD21                    	int	21h			; point to user's header
  3950 00000FF8 A1[E401]                	mov	ax,[Handle01]
  3951 00000FFB 8EDB                    	mov	ds,bx
  3952                                  	;assume ds:NOTHING
  3953                                  	;lds	bx,[34h] 
  3954 00000FFD C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  3955 00001001 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  3956 00001003 58                      	pop	ax
  3957 00001004 5B                      	pop	bx
  3958 00001005 1F                      	pop	ds
  3959 00001006 C3                      	retn
  3960                                  
  3961                                  	;assume ds:DATARES,ss:DATARES
  3962                                  Hopeless:
  3963 00001007 BA[8205]                	mov	dx,COMBAD
  3964 0000100A E9BEFD                  	jmp	FatalC
  3965                                  
  3966                                  GetComDsk:
  3967 0000100D A0[3202]                	mov	al,[ComDrv]
  3968 00001010 E84DFF                  	call	RemCheck
  3969 00001013 75F2                    	jnz	short Hopeless		; non-removable media
  3970                                  GetComDsk3:
  3971 00001015 81FA[8205]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  3972 00001019 7503                    	jne	short GetComDsk4
  3973                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  3974                                  	; 12/01/2023
  3975                                  	;;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  3976                                  	; 05/06/2023
  3977                                  	;mov	dx,COMBAD ; (MSDOS 6.22 COMMAND.COM - RESGROUP:11B6h)
  3978                                  	;invoke	RPrint			; say COMMAND is invalid
  3979 0000101B E81803                  	call	RPrint
  3980                                  	;call	RDISPMSG
  3981                                  
  3982                                  GetComDsk4:
  3983                                  
  3984                                  ;	Bugbug:	there's always a drive here? No need to check?
  3985                                  
  3986 0000101E 803E[CD01]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  3987 00001023 7509                    	jne	short Users_Drive	; yes - use it
  3988 00001025 B419                    	mov	ah,19h
  3989                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  3990 00001027 CD21                    	int	21h
  3991 00001029 0441                    	add	al,"A"                  ; convert to ascii
  3992 0000102B A2[CD01]                	mov	[PutBackDrv],al		; put in message to print out
  3993                                  
  3994                                  Users_Drive:
  3995                                  	; 12/01/2023
  3996                                  	; MSDOS 6.0
  3997 0000102E BA[9805]                	mov	dx,PUTBACKMSG		; prompt for diskette
  3998                                  	;mov	si,offset DATARES:PutBackSubst
  3999                                  	;invoke	RPrint
  4000 00001031 BE[C701]                	mov	si,PutBackSubst		; containing COMMAND
  4001 00001034 E8FF02                  	call	RPrint
  4002                                  	;mov	dx,offset DATARES:Prompt
  4003                                  	;invoke	RPrint
  4004 00001037 BA[BA05]                	mov	dx,PROMPT		; "Press any key"
  4005 0000103A E8F902                  	call	RPrint
  4006                                  
  4007                                  	; MSDOS 3.3
  4008                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  4009                                  	;call	RDISPMSG
  4010                                  	;mov	dx,[PUTBACKSUBSTPTR]
  4011                                  	;mov	si,[COMSPEC_END]
  4012                                  	;mov	byte [si+1],'$'
  4013                                  	;call	RDISPMSG
  4014                                  	;mov	byte [si+1],0
  4015                                  	;mov	dx,PROMPT
  4016                                  	;call	RDISPMSG
  4017                                  
  4018                                  	;call	GetRawFlushedByte
  4019                                  	;retn
  4020                                  	; 12/01/2023
  4021                                  	;jmp	short GetRawFlushedByte
  4022                                  
  4023                                  ;***	GetRawFlushedByte - flush world and get raw input
  4024                                  
  4025                                  GetRawFlushedByte:
  4026                                  	; 12/01/2023
  4027 0000103D B8070C                  	mov	ax,0C07h
  4028                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  4029 00001040 CD21                    	int	21h			; get char without testing or echo
  4030 00001042 B8000C                  	mov	ax,0C00h
  4031                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  4032 00001045 CD21                    	int	21h
  4033                                  
  4034                                  ;	Bugbug:	get rid of this return and the following retz.
  4035                                  
  4036                                  LoadCom_retn:
  4037 00001047 C3                      	retn
  4038                                  
  4039                                  	; 21/04/2023
  4040                                  TryDoOpen:
  4041 00001048 E8C2FF                  	call	GetComDsk
  4042                                  	;jmp	short LoadCom
  4043                                  
  4044                                  ;***	LoadCom - load in transient
  4045                                  
  4046                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4047                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  4048                                  
  4049                                  LoadCom:
  4050                                  	;assume	ds:DATARES
  4051                                  	
  4052 0000104B 45                      	inc	bp				; flag command read
  4053                                  
  4054 0000104C BA[E901]                	mov	dx,ComSpec
  4055 0000104F B8003D                  	mov	ax,3D00h
  4056                                  	;mov	ax,OPEN<<8	; 3D00h
  4057 00001052 CD21                    	int	21h				; open command.com
  4058 00001054 730B                    	jnc	short ReadCom
  4059                                  	;cmp	ax,4
  4060 00001056 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  4061 00001059 75ED                    	jnz	short TryDoOpen
  4062 0000105B BA[4406]                	mov	dx,NOHANDMES
  4063 0000105E E96AFD                  	jmp	FatalC				; will never find a handle
  4064                                  
  4065                                  	; 21/04/2023
  4066                                  ;TryDoOpen:
  4067                                  	;call	GetComDsk
  4068                                  	;jmp	short LoadCom
  4069                                  
  4070                                  ReadCom:
  4071 00001061 89C3                    	mov	bx,ax				; BX = handle
  4072                                  	;mov	dx,offset RESGROUP:TranStart
  4073                                  	; 05/06/2023
  4074                                  	;mov	dx,26E0h ; MSDOS 6.22 COMMAND.COM
  4075 00001063 BA5025                  	mov	dx,TRANSTART
  4076 00001066 31C9                    	xor	cx,cx				; CX:DX = seek loc
  4077 00001068 B80042                  	mov	ax,4200h
  4078                                  	;mov	ax,LSEEK<<8	; 4200h
  4079 0000106B CD21                    	int	21h
  4080 0000106D 7210                    	jc	short WrongCom1
  4081                                  	; 12/01/2023
  4082                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  4083                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  4084                                  	; 05/06/2023
  4085                                  	;mov	cx,0AE95h		 ; MSDOS 6.22 COMMAND.COM
  4086 0000106F B901A9                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  4087 00001072 1E                      	push	ds
  4088 00001073 8E1E[2D02]              	mov	ds,[TrnSeg]
  4089                                  	;assume	ds:NOTHING
  4090 00001077 BA0001                  	mov	dx,100h
  4091 0000107A B43F                    	mov	ah,3Fh
  4092                                  	;mov	ah,READ	; 3Fh	
  4093 0000107C CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  4094                                  			; BX = file handle, CX = number of bytes to read
  4095                                  			; DS:DX -> buffer
  4096 0000107E 1F                      	pop	ds
  4097                                  	;assume	ds:DATARES
  4098                                  WrongCom1:
  4099 0000107F 9C                      	pushf
  4100 00001080 50                      	push	ax
  4101 00001081 B43E                    	mov	ah,3Eh
  4102                                  	;mov	ah,CLOSE ; 3Eh
  4103 00001083 CD21                    	int	21h			; close command.com
  4104 00001085 58                      	pop	ax
  4105 00001086 9D                      	popf
  4106 00001087 7204                    	jc	short WrongCom		; error on read
  4107 00001089 39C8                    	cmp	ax,cx
  4108                                  	;retz				; size matched
  4109 0000108B 74BA                    	jz	short LoadCom_retn
  4110                                  WrongCom:
  4111 0000108D BA[8205]                	mov	dx,COMBAD
  4112 00001090 E87AFF                  	call	GetComDsk
  4113 00001093 EBB6                    	jmp	short LoadCom		; try again
  4114                                  
  4115                                  ;***	ChkSum - compute transient checksum
  4116                                  
  4117                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4118                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  4119                                  	
  4120                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4121                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1239h
  4122                                  ChkSum:
  4123 00001095 1E                      	push	ds
  4124 00001096 8E1E[2D02]              	mov	ds,[TrnSeg]
  4125 0000109A BE0001                  	mov	si,100h
  4126                                  	;;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  4127                                  	;;mov	cx,87C2h ; MSDOS 5.0
  4128                                  	; 05/06/2023
  4129                                  	;mov	cx,9D53h ; MSDOS 6.22
  4130 0000109D B9[4198]                	mov	cx,TRANDATAEND-100h	; 3E44h (for original MSDOS 3.3!)
  4131                                  Check_Sum:
  4132 000010A0 FC                      	cld
  4133 000010A1 D1E9                    	shr	cx,1
  4134 000010A3 31D2                    	xor	dx,dx
  4135                                  Chk:
  4136 000010A5 AD                      	lodsw
  4137 000010A6 01C2                    	add	dx,ax
  4138 000010A8 83D200                  	adc	dx,0
  4139 000010AB E2F8                    	loop	Chk
  4140                                  
  4141                                  	; 04/05/2023
  4142 000010AD 1F                      	pop	ds
  4143                                  
  4144                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4145 000010AE 3B16[3502]              	cmp	dx,[Sum]
  4146                                  
  4147                                  	;pop	ds ; 04/05/2023
  4148 000010B2 C3                      	retn
  4149                                  
  4150                                  ;***	SetVect - set interrupt vectors
  4151                                  
  4152                                  SetVect:
  4153                                  	;mov	dx,offset DATARES:LodCom_Trap 
  4154                                  	; 12/01/2023
  4155 000010B3 BA[7E00]                	mov	dx,LodCom_Trap
  4156                                  	;mov	dx,LODCOM ; MSDOS 3.3
  4157 000010B6 B82225                  	mov	ax,2522h
  4158                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  4159 000010B9 89160A00                	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4160 000010BD 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4161 000010C1 CD21                    	int	21h
  4162                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  4163 000010C3 BA[4A00]                	mov	dx,Ctrlc_Trap
  4164                                  	;mov	dx,CONTC ; MSDOS 3.3
  4165 000010C6 FEC0                    	inc	al	; 23h
  4166 000010C8 CD21                    	int	21h
  4167                                  	;mov	dx,offset DATARES:CritErr_Trap
  4168 000010CA BA[5500]                	mov	dx,CritErr_Trap
  4169                                  	;mov	dx,CRITERR ; MSDOS 3.3
  4170 000010CD FEC0                    	inc	al	; 24h
  4171 000010CF CD21                    	int	21h
  4172 000010D1 C3                      	retn
  4173                                  
  4174                                  ; ---------------------------
  4175                                  
  4176                                  	; MSDOS 6.0
  4177                                  ;;SR;
  4178                                  ;We have this to take care of the extra values pushed on the stack by
  4179                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  4180                                  ;Lodcom1
  4181                                  
  4182                                  ;public	TrnLodCom1
  4183                                  	; 12/01/2023
  4184                                  TrnLodCom1:
  4185 000010D2 1F                      	pop	ds			; ds = DATARES
  4186 000010D3 83C402                  	add	sp,2
  4187                                  ;	pop	ds:OldDS
  4188 000010D6 E921FE                  	jmp	LodCom1
  4189                                  
  4190                                  ;=============================================================================
  4191                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  4192                                  ;=============================================================================
  4193                                  ; 22/09/2018 - Retro DOS v3.0
  4194                                  
  4195                                  ;	title	Localizable code for resident COMMAND
  4196                                  
  4197                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4198                                  
  4199                                  ; ----------------------------------------------------------------------------
  4200                                  ;***	AskEnd - ask user to confirm batch file termination
  4201                                  ;
  4202                                  ;	Confirm with user before freeing batch ...
  4203                                  ;
  4204                                  ;	ENTRY	nothing
  4205                                  ;
  4206                                  ;	EXIT	CY = set if batch termination is confirmed
  4207                                  ;
  4208                                  ;		CY = clear if batch should continue
  4209                                  ;
  4210                                  ;	USED	AX,DX,...
  4211                                  ;
  4212                                  ;	Bugbug:	move this to transient, copy to batch segment.
  4213                                  ;	Bugbug:	or move it to command1 1st.
  4214                                  ;
  4215                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  4216                                  ; ----------------------------------------------------------------------------
  4217                                  
  4218                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4219                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  4220                                  
  4221                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4222                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1279h (CODERES:0429h)
  4223                                  AskEnd:
  4224                                  	;assume	ds:DATARES
  4225                                  
  4226 000010D9 BA[DC05]                	mov	dx,ENDBATMES			; DX = message #
  4227 000010DC E85702                  	call	RPrint
  4228                                  	;call	RDISPMSG  ; MSDOS 3.3
  4229 000010DF B8010C                  	mov	ax,0C01h
  4230                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  4231 000010E2 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  4232                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  4233 000010E4 E8E802                  	call	CharToUpper			; change to upper case
  4234 000010E7 3A06[E304]              	cmp	al,[NO_CHAR]
  4235 000010EB 7407                    	je	short aeRet			; answer is no (CY is clear)
  4236 000010ED 3A06[E204]              	cmp	al,[YES_CHAR]
  4237 000010F1 75E6                    	jne	short AskEnd			; invalid response, try again
  4238 000010F3 F9                      	stc					; answer is yes
  4239                                  aeRet:	
  4240 000010F4 C3                      	retn
  4241                                  
  4242                                  ; ----------------------------------------------------------------------------
  4243                                  ;***	DskErr - critical error handler
  4244                                  ;
  4245                                  ;	Default critical error handler unless user intercepts int 24h.
  4246                                  ;
  4247                                  ;	ENTRY	int 24h
  4248                                  ;
  4249                                  ;	EXIT
  4250                                  ;
  4251                                  ;	USED
  4252                                  ;
  4253                                  ;	EFFECTS
  4254                                  ; ----------------------------------------------------------------------------
  4255                                  
  4256                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4257                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4258                                  
  4259                                  ;SR; 
  4260                                  ;The stub is going to push the old ds value and the resident data segment
  4261                                  ;onto the stack in that order. Get it off the stack
  4262                                  
  4263                                  ;DskErr	proc	far
  4264                                  DSKERR:
  4265                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4266                                  	; 12/01/2023
  4267 000010F5 1F                      	pop	ds			; ds = DATARES
  4268                                  	;assume ds:DATARES
  4269 000010F6 8F06[D404]              	pop	word [OldDS]		; save old ds value
  4270                                  
  4271                                  ;CRITERR: ; MSDOS 3.3
  4272 000010FA FB                      	sti
  4273                                  	; 12/01/2023
  4274                                  	;push	ds ; 25/09/2018
  4275 000010FB 06                      	push	es
  4276 000010FC 56                      	push	si
  4277 000010FD 51                      	push	cx
  4278 000010FE 57                      	push	di
  4279 000010FF 51                      	push	cx
  4280 00001100 50                      	push	ax
  4281                                  
  4282 00001101 1E                      	push	ds			;save our data segment
  4283                                  	;push	cs ; 25/09/2018
  4284 00001102 07                      	pop	es			;es = DATARES
  4285                                  
  4286 00001103 8EDD                    	mov	ds,bp
  4287                                  	;assume	ds:nothing
  4288                                  
  4289                                  	;mov	ax,[si].SDEVATT
  4290 00001105 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4291 00001108 268826[C301]            	mov	[es:CDevAt],ah
  4292                                  
  4293                                  	;push	cs
  4294                                  	;pop	es
  4295                                  
  4296 0000110D BF[B601]                	mov	di,DevName
  4297 00001110 B90800                  	mov	cx,8
  4298                                  	;add	si,SDEVNAME  ; add si,10
  4299 00001113 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4300                                  				
  4301 00001116 FC                      	cld
  4302 00001117 F3A4                    	rep	movsb
  4303 00001119 58                      	pop	ax
  4304 0000111A 59                      	pop	cx
  4305 0000111B 5F                      	pop	di
  4306                                  
  4307                                  ;	Stack still contains DS and ES.
  4308                                  
  4309                                  ;SR;
  4310                                  ;We need ds = DATARES for SavHand
  4311                                  
  4312                                  	 ;12/01/2023
  4313 0000111C 06                      	push	es
  4314 0000111D 1F                      	pop	ds
  4315                                  	;assume	ds:DATARES
  4316                                  
  4317                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4318 0000111E E8A7FE                  	call	SavHand
  4319                                  
  4320                                  	; 12/01/2023
  4321                                  	; 25/09/2018
  4322                                  	;;push	cs
  4323                                  	;push	es
  4324                                  	;pop	ds		; set up local data segment
  4325                                  	;assume	ds:resgroup
  4326                                  
  4327 00001121 52                      	push	dx
  4328 00001122 E80E02                  	call	crlf
  4329 00001125 5A                      	pop	dx
  4330                                  
  4331                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4332                                  
  4333 00001126 8826[3A02]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4334                                  
  4335                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4336                                  
  4337 0000112A 0441                    	add	al,'A'
  4338 0000112C A2[A301]                	mov	[DrvLet],al
  4339                                  
  4340                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4341                                  
  4342 0000112F F6C480                  	test	ah,80h
  4343 00001132 740A                    	jz	short NoHardE		; it's a disk-device error
  4344 00001134 F606[C301]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4345 00001139 7503                    	jnz	short NoHardE		; it's a character device
  4346 0000113B E9E801                  	jmp	FatErr			; it's a FAT error
  4347                                  
  4348                                  NoHardE:
  4349 0000113E BE[0405]                	mov	si,MREAD		; SI = "read" msg #
  4350 00001141 F6C401                  	test	ah,1
  4351 00001144 7403                    	jz	short SavMes		; it's a read error
  4352 00001146 BE[0D05]                	mov	si,MWRITE		; SI = "write" msg #
  4353                                  SavMes:
  4354 00001149 893E[FE03]              	mov	[OldErrNo],di		; save critical error code
  4355                                  
  4356                                  ;	Bugbug:	don't need to save/restore all here?
  4357                                  
  4358 0000114D 06                      	push	es
  4359                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4360                                  	;push	ds			; GetExtendedError likes to STOMP
  4361                                  	; 12/01/2023
  4362                                  	; (all registers are changed -in dos service- except bp) *
  4363                                  	;push	bp
  4364                                  	; 19/07/2024
  4365                                  	;push	si
  4366                                  	;push	dx
  4367 0000114E 51                      	push	cx
  4368 0000114F 53                      	push	bx
  4369                                  	; 05/06/2023
  4370 00001150 B459                    	mov	ah,59h ; *
  4371                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4372 00001152 CD21                    	int	21h
  4373 00001154 5B                      	pop	bx
  4374 00001155 59                      	pop	cx
  4375                                  	; 19/07/2024
  4376                                  	;pop	dx
  4377                                  	;pop	si
  4378                                  	; 12/01/2023
  4379                                  	;pop	bp
  4380                                  	; 19/07/2024
  4381                                  	;pop	ds
  4382 00001156 893E[D101]              	mov	[NeedVol],di		; save possible ptr to volume label
  4383 0000115A 8C06[D301]              	mov	[NeedVol+2],es
  4384 0000115E 07                      	pop	es
  4385                                  
  4386                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4387                                  
  4388                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4389                                  	;xor	ah,ah
  4390 0000115F 89C7                    	mov	di,ax			; DI = error code
  4391                                  
  4392                                  ; Bugbug: somewhat obsolete documentation?
  4393                                  ;
  4394                                  ; DI is now the correct error code. Classify things to see what we are
  4395                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4396                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4397                                  ; the like) are contiguous.
  4398                                  
  4399                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4400                                  ;	Check use of ErrCd_24, though.
  4401                                  
  4402 00001161 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4403 00001164 7303                    	jae	short HavCod
  4404                                  
  4405                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4406                                  ;	even though it's not a critical error?
  4407                                  
  4408 00001166 BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4409                                  
  4410                                  ; DI now has the mapped error code. Old style errors are:
  4411                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4412                                  ; New style errors are:
  4413                                  ;   FOOBAR
  4414                                  ; We need to figure out which the particular error belongs to.
  4415                                  
  4416                                  HavCod:
  4417 00001169 C606[D501]00            	mov	byte [ErrType],0	; assume old style
  4418 0000116E 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4419 00001171 7405                    	je	short SetStyle
  4420 00001173 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4421 00001176 7504                    	jne	short GotStyle
  4422                                  
  4423                                  SetStyle:
  4424                                  ;	Bugbug:	use INC
  4425                                  	;mov	byte [ErrType],1		; must be new type
  4426 00001178 FE06[D501]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4427                                  
  4428                                  GotStyle:
  4429 0000117C 893E[E201]              	mov	[ErrCd_24],di
  4430                                  	; 12/01/2023
  4431                                  	; 25/09/2018
  4432                                  	; MSDOS 6.0
  4433 00001180 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4434                                  	; MSDOS 3.3
  4435                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4436                                  
  4437                                  						; If the error message is unknown
  4438 00001183 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4439                                  
  4440                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4441                                  ; how to handle things
  4442                                  
  4443                                  ;input to IFSFUNC:    AL=1
  4444                                  ;		      BX=extended error number
  4445                                  ;
  4446                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4447                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4448                                  ;			   Abort, Retry, Ignore
  4449                                  ;			 1=<message>
  4450                                  ;			   Abort, Retry, Ignore
  4451                                  ;		      ES:DI=pointer to message text
  4452                                  ;		      carry set=>no message
  4453                                  
  4454 00001185 89C7                    	mov	di,ax			; retrieve correct extended error...
  4455 00001187 B80005                  	mov	ax,0500h		; is the redir there?
  4456 0000118A CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4457                                  			; Return: AL = 00h not installed, OK to install
  4458                                  			; 01h not installed, can't install
  4459                                  			; FFh installed
  4460 0000118C 3CFF                    	cmp	al,0FFh
  4461 0000118E 7529                    	jne	short NoHandler		; no, go to NoHandler
  4462                                  
  4463                                  	; 12/01/2023
  4464                                  	; MSDOS 6.0
  4465 00001190 53                      	push	bx
  4466 00001191 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4467 00001193 B80105                  	mov	ax,0501h
  4468 00001196 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4469 00001198 5B                      	pop	bx 
  4470 00001199 721E                    	jc	short NoHandler
  4471                                  	
  4472                                  	; MSDOS 3.3
  4473                                  	;mov     ax,di
  4474                                  	;mov     ah,5
  4475                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4476                                  	;jc      short NOHANDLER
  4477                                  
  4478                                  ;	Bugbug:	need to record error type?
  4479                                  
  4480 0000119B A2[D501]                	mov	[ErrType],al
  4481                                  
  4482 0000119E 1E                      	push	ds
  4483 0000119F 06                      	push	es
  4484 000011A0 1F                      	pop	ds
  4485 000011A1 89FA                    	mov	dx,di
  4486 000011A3 B9FFFF                  	mov	cx,-1			; find end of msg
  4487 000011A6 30C0                    	xor	al,al
  4488                                  
  4489 000011A8 FC                      	cld
  4490 000011A9 F2AE                    	repnz	scasb
  4491                                  
  4492                                  ;	Bugbug:	we can do better than this.
  4493                                  
  4494                                  	;mov	byte [di-1],'$'
  4495                                  	; 19/07/2024
  4496 000011AB 4F                      	dec	di
  4497 000011AC C60524                  	mov	byte [di],'$'
  4498                                  	
  4499                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4500                                  	
  4501 000011AF B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4502 000011B1 CD21                    	int	21h
  4503                                  
  4504                                  	;mov	byte [di-1],0			; restore terminal byte
  4505                                  	; 19/07/2024
  4506 000011B3 C60500                  	mov	byte [di],0
  4507                                  
  4508 000011B6 1F                      	pop	ds				; clean up and continue
  4509 000011B7 EB15                    	jmp	short CheckErrType
  4510                                  
  4511                                  ;*	Redir isn't available or doesn't recognize the error.
  4512                                  ;	Restore regs to unextended error.
  4513                                  
  4514                                  NoHandler:
  4515 000011B9 C606[D501]00            	mov	byte [ErrType],0
  4516                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4517 000011BE 8B3E[FE03]              	mov	di,[OldErrNo]
  4518 000011C2 893E[E201]              	mov	[ErrCd_24],di
  4519                                  
  4520                                  NormalError:
  4521                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4522                                  	; MSDOS 6.0
  4523 000011C6 83C713                  	add	di,ERROR_WRITE_PROTECT
  4524 000011C9 87FA                    	xchg	di,dx			; may need dx later
  4525 000011CB E88101                  	call	RPrintCrit		; print error type
  4526                                  
  4527                                  	; MSDOS 3.3
  4528                                  	;shl     di,1
  4529                                  	;mov     di,[CRMSGTBL+di]
  4530                                  	;xchg    di,dx
  4531                                  	;call    RDISPMSG
  4532                                  
  4533                                  CheckErrType:
  4534 000011CE 803E[D501]00            	cmp	byte [ErrType],0	; Check error style...
  4535 000011D3 7405                    	je	short ContOld
  4536 000011D5 E85B01                  	call	crlf			; if new style then done printing
  4537 000011D8 EB31                    	jmp	short Ask
  4538                                  
  4539                                  ContOld:
  4540                                  	; 12/01/2023
  4541                                  	; MSDOS 6.0
  4542 000011DA 46                      	inc	si			; DS:SI = ptr to asciiz string
  4543                                  
  4544                                  ;	Bugbug:	combine some of the following two sections?
  4545                                  
  4546                                  	; 12/01/2023
  4547 000011DB F606[C301]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4548                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4549 000011E0 740F                    	jz	short BlkErr
  4550                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4551                                  	;mov	dx,ChardevErr
  4552 000011E2 BA[2505]                	mov	dx,MDEVICE
  4553                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4554 000011E5 8936[A501]              	mov	[CharDevErrRw],si
  4555                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4556 000011E9 BE[A401]                	mov	si,CharDevErrSubst
  4557                                  
  4558 000011EC E84701                  	call	RPrint				; print the message
  4559 000011EF EB1A                    	jmp	short Ask			; don't ralph on command
  4560                                  
  4561                                  	; 12/01/2023
  4562                                  	; MSDOS 3.3
  4563                                  	;mov	dx,ERRMES
  4564                                  	;call	RDISPMSG
  4565                                  	;mov	dx,si
  4566                                  	;call	RDISPMSG
  4567                                  	;
  4568                                  	;test	byte [CDevAt],80h
  4569                                  	;jz	short BLKERR
  4570                                  	;mov	dx,CHARDEVERR	; " device "
  4571                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4572                                  	;int	21h		; DOS - PRINT STRING
  4573                                  	;			; DS:DX -> string terminated by "$"
  4574                                  	;jmp	short ASK
  4575                                  
  4576                                  BlkErr:
  4577                                  	; 12/01/2023
  4578                                  	; MSDOS 6.0
  4579                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4580                                  	;mov	dx,BlkDevErr
  4581 000011F1 BA[1605]                	mov	dx,MDRIVE
  4582                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4583 000011F4 8936[9E01]              	mov	[BlkDevErrRw],si
  4584                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4585 000011F8 BE[9D01]                	mov	si,BlkDevErrSubst
  4586 000011FB E83801                  	call	RPrint
  4587                                  
  4588                                  	; MSDOS 3.3
  4589                                  	;mov	dx,BLKDEVERR
  4590                                  	;call	RDISPMSG
  4591                                  
  4592 000011FE 803E[E601]00            	cmp	byte [Loading],0
  4593 00001203 7406                    	jz	short Ask
  4594 00001205 E8E9FD                  	call	RestHand
  4595 00001208 E9E0FD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4596                                  Ask:
  4597 0000120B 833E[E201]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4598 00001210 751E                    	jne	short Not15		; not error 15
  4599                                  
  4600                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4601                                  
  4602 00001212 51                      	push	cx
  4603                                  
  4604                                  ;	Bugbug:	does this push/pop need to be done?
  4605                                  
  4606 00001213 1E                      	push	ds
  4607 00001214 07                      	pop	es
  4608 00001215 C536[D101]              	lds	si,[NeedVol]
  4609                                  	;assume	ds:NOTHING
  4610 00001219 57                      	push	di
  4611 0000121A BF[B301]                	mov	di,VolName
  4612                                  	; 12/01/2023
  4613                                  	; MSDOS 6.0
  4614 0000121D B91000                  	mov	cx,16			; copy volume name & serial #
  4615                                  	; MSDOS 3.3
  4616                                  	;mov	cx,11			; copy volume name
  4617 00001220 FC                      	cld
  4618 00001221 F3A4                    	rep	movsb
  4619 00001223 5F                      	pop	di
  4620 00001224 06                      	push	es
  4621 00001225 1F                      	pop	ds
  4622 00001226 59                      	pop	cx
  4623                                  	;assume	ds:DATARES
  4624                                  	; 12/01/2023
  4625                                  	; MSDOS 6.0
  4626                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4627                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4628                                  	;mov	dx,NeedVolMsg
  4629 00001227 BA[3505]                	mov	dx,MVOLSERIAL
  4630 0000122A BE[AA01]                	mov	si,NeedVolSubst
  4631 0000122D E80601                  	call	RPrint
  4632                                  
  4633                                  	; MSDOS 3.3
  4634                                  	;mov	dx,NEEDVOLMSG
  4635                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4636                                  	;int	21h		; DOS - PRINT STRING
  4637                                  	;			; DS:DX -> string terminated by "$"
  4638                                  Not15:
  4639                                  ;*	Print abort, retry, ignore, fail message.
  4640                                  ;	Print only options that are valid.
  4641                                  
  4642                                  ;	Bugbug:	sizzle this.
  4643                                  
  4644                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4645 00001230 BA[E404]                	mov	dx,REQ_ABORT
  4646 00001233 E80001                  	call	RPrint
  4647                                  	;call	RDISPMSG
  4648 00001236 F606[3A02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4649 0000123B 7406                    	jz	short Try_Ignore
  4650 0000123D BA[EA04]                	mov	dx,REQ_RETRY
  4651 00001240 E8F300                  	call	RPrint
  4652                                  	;call	RDISPMSG
  4653                                  Try_Ignore:
  4654 00001243 F606[3A02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4655 00001248 7406                    	jz	short Try_Fail
  4656 0000124A BA[F204]                	mov	dx,REQ_IGNORE
  4657 0000124D E8E600                  	call	RPrint
  4658                                  	;call	RDISPMSG
  4659                                  Try_Fail:
  4660 00001250 F606[3A02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4661 00001255 7406                    	jz	short Term_Question
  4662 00001257 BA[FB04]                	mov	dx,REQ_FAIL
  4663 0000125A E8D900                  	call	RPrint
  4664                                  	;call	RDISPMSG
  4665                                  Term_Question:
  4666 0000125D BA[0205]                	mov	dx,REQ_END
  4667 00001260 E8D300                  	call	RPrint
  4668                                  	;call	RDISPMSG
  4669                                  
  4670                                  ;	If the /f switch was given, we fail all requests.
  4671                                  
  4672 00001263 F606[4702]FF            	test	byte [fFail],-1
  4673 00001268 741B                    	jz	short DoPrompt
  4674 0000126A B403                    	mov	ah,3				; signal fail
  4675 0000126C E9A800                  	jmp	EExit
  4676                                  
  4677                                  	; 16/04/2023
  4678                                  Abort_Process:
  4679 0000126F F606[B402]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  4680 00001274 745D                    	jz	short AbortCont			; no, handle it normally
  4681 00001276 803E[4002]00            	cmp	byte [PermCom],0		; are we top level process?
  4682 0000127B 744B                    	jz	short JustExit			; yes, just exit
  4683                                  
  4684 0000127D BA[E706]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  4685                                  	; 12/01/2023
  4686 00001280 E8B300                  	call	RPrint				; print it
  4687                                  	;call	RDISPMSG
  4688                                  DeadInTheWater:
  4689 00001283 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  4690                                  
  4691                                  DoPrompt:
  4692                                  	; 12/01/2023
  4693 00001285 B8010C                  	mov	ax,0C01h
  4694                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  4695 00001288 CD21                    	int	21h				; get response
  4696                                  
  4697 0000128A E8A600                  	call	crlf
  4698 0000128D E83F01                  	call	CharToUpper			; convert to upper case
  4699 00001290 B400                    	mov	ah,0				; return code for ignore
  4700 00001292 F606[3A02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  4701 00001297 7406                    	jz	short User_Retry
  4702 00001299 3A06[E004]              	cmp	al,[IGNORE_CHAR]		; ignore?
  4703                                  	;jz	short EExitJ
  4704                                  	; 16/04/2023
  4705 0000129D 7478                    	jz	short EExit
  4706                                  
  4707                                  ;	Bugbug:	optimize following code.
  4708                                  
  4709                                  User_Retry:
  4710 0000129F FEC4                    	inc	ah				; return code for retry
  4711 000012A1 F606[3A02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  4712 000012A6 7406                    	jz	short User_Abort
  4713 000012A8 3A06[DF04]              	cmp	al,[RETRY_CHAR]			; retry?
  4714                                  	;jz	short EExitJ
  4715                                  	; 16/04/2023
  4716 000012AC 7469                    	jz	short EExit
  4717                                  User_Abort:
  4718 000012AE FEC4                    	inc	ah				; return code for abort
  4719                                  						;  (abort always allowed)
  4720 000012B0 3A06[DE04]              	cmp	al,[ABORT_CHAR]			; abort?
  4721 000012B4 74B9                    	jz	short Abort_Process		; exit user program
  4722 000012B6 FEC4                    	inc	ah				; return code for fail
  4723 000012B8 F606[3A02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  4724 000012BD 7406                    	jz	short AskJ
  4725 000012BF 3A06[E104]              	cmp	al,[FAIL_CHAR]			; fail?
  4726                                  	;jz	short EExitJ
  4727                                  	; 16/04/2023
  4728 000012C3 7452                    	jz	short EExit
  4729                                  AskJ:
  4730 000012C5 E943FF                  	jmp	Ask
  4731                                  
  4732                                  	; 12/01/2023
  4733                                  ;EExitJ:
  4734                                  	;jmp	short EExit
  4735                                  
  4736                                  JustExit:
  4737                                  	;assume	ds:DATARES
  4738                                  	; 12/01/2023
  4739 000012C8 A1[DC01]                	mov	ax,[Parent]			; load real parent pid
  4740                                  	;mov	[16h],ax
  4741 000012CB A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  4742 000012CE B8FF4C                  	mov	ax,4CFFh
  4743                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  4744 000012D1 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  4745                                  				; AL = exit code
  4746                                  AbortCont:
  4747 000012D3 F606[3002]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  4748 000012D8 7405                    	jz	short Not_Batch_Abort
  4749 000012DA C606[3102]01            	mov	byte [Batch_Abort],1		; set flag for abort
  4750                                  
  4751                                  Not_Batch_Abort:
  4752 000012DF 8A16[B502]              	mov	dl,[PipeFlag]
  4753 000012E3 E8D1FA                  	call	ResPipeOff
  4754 000012E6 08D2                    	or	dl,dl
  4755 000012E8 740D                    	je	short CheckForA
  4756 000012EA 833E[4302]00            	cmp	word [SingleCom],0
  4757 000012EF 7406                    	je	short CheckForA
  4758 000012F1 C706[4302]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4759                                  
  4760                                  CheckForA:
  4761 000012F7 833E[E201]00            	cmp	word [ErrCd_24],0		; write protect?
  4762 000012FC 7407                    	je	short abortfor
  4763 000012FE 833E[E201]02            	cmp	word [ErrCd_24],2		; drive not ready?
  4764 00001303 7512                    	jne	short EExit			; don't abort the FOR
  4765                                  
  4766                                  abortfor:
  4767 00001305 C606[4902]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  4768 0000130A 833E[4302]00            	cmp	word [SingleCom],0
  4769 0000130F 7406                    	je	short EExit
  4770 00001311 C706[4302]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4771                                  
  4772                                  EExit:
  4773 00001317 88E0                    	mov	al,ah
  4774 00001319 89FA                    	mov	dx,di
  4775                                  RestHd:
  4776 0000131B E8D3FC                  	call    RestHand
  4777 0000131E 59                      	pop	cx
  4778 0000131F 5E                      	pop	si				; restore registers
  4779 00001320 07                      	pop	es
  4780                                  
  4781                                  	; 12/01/2023	
  4782                                  	; MSDOS 6.0
  4783                                  ;;	pop	ds
  4784                                  ;SR;
  4785                                  ;ds has to be got from the variable we saved it in
  4786                                  
  4787 00001321 8E1E[D404]               	mov	ds,[OldDS]			; restore old value of ds
  4788                                  
  4789                                  ;	pop	ds
  4790                                  ;	assume	ds:nothing
  4791                                  
  4792                                  	; MSDOS 3.3
  4793                                  	;pop	ds
  4794                                  
  4795 00001325 CF                      	iret
  4796                                  
  4797                                  FatErr:
  4798                                  	; 12/01/2023
  4799                                  	; MSDOS 6.0
  4800                                  	;mov	dx,offset DATARES:BadFatMsg
  4801                                  	;mov	si,offset DATARES:BadFatSubst
  4802 00001326 BA[5C05]                	mov	dx,BADFATMSG
  4803 00001329 BE[C401]                	mov	si,BadFatSubst
  4804 0000132C E80700                  	call	RPrint
  4805                                  
  4806                                  	; MSDOS 3.3
  4807                                  	;mov	dx,BADFATMSG
  4808                                  	;call	RDISPMSG
  4809                                  	;mov	dx,BLKDEVERR
  4810                                  	;call	RDISPMSG
  4811                                  
  4812 0000132F B002                    	mov	al,2				; abort
  4813 00001331 EBE8                    	jmp	short RestHd
  4814                                  
  4815                                  ;DskErr	endp
  4816                                  
  4817                                  	; MSDOS 6.0
  4818                                  ; ----------------------------------------------------------------------------
  4819                                  ;***	RPrint - print message
  4820                                  ;***	Crlf - display cr/lf
  4821                                  ;
  4822                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  4823                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  4824                                  ;		variable fields related to substitution blocks are set
  4825                                  ;
  4826                                  ;	EXIT	nothing
  4827                                  ;
  4828                                  ;	USED	flags
  4829                                  ;
  4830                                  ;	EFFECTS
  4831                                  ;	  Message is displayed on stdout.
  4832                                  ;
  4833                                  ;	NOTE
  4834                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  4835                                  ;	  be greater than number of substition blocks present.
  4836                                  ; ----------------------------------------------------------------------------
  4837                                  
  4838                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4839                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  4840                                  
  4841                                  crlf: 
  4842                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  4843                                  	; 14/01/2023
  4844 00001333 BA[1607]                	mov	dx,NEWLINE
  4845                                  
  4846                                  ;RPrint	proc
  4847                                  ;
  4848                                  ;	assume	ds:DATARES,ss:DATARES
  4849                                  ;
  4850                                  	; 14/01/2023
  4851                                  RPrint:
  4852                                  
  4853                                  ;	Bugbug:	do we need to save all reg's?
  4854                                  
  4855 00001336 56                      	push	si			; preserve registers
  4856 00001337 50                      	push	ax
  4857 00001338 53                      	push	bx
  4858 00001339 51                      	push	cx
  4859 0000133A 52                      	push	dx
  4860                                  
  4861 0000133B 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  4862 0000133D 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  4863 0000133F AC                      	lodsb				; AL = message length
  4864                                  					; DS:SI = ptr to message text
  4865 00001340 31C9                    	xor	cx,cx
  4866 00001342 88C1                    	mov	cl,al			; CX = message length
  4867 00001344 E303                    	jcxz	rpRet
  4868                                  
  4869 00001346 E81900                  	call	RDispMsg
  4870                                  
  4871 00001349 5A                      rpRet:	pop	dx
  4872 0000134A 59                      	pop	cx
  4873 0000134B 5B                      	pop	bx
  4874 0000134C 58                      	pop	ax
  4875 0000134D 5E                      	pop	si
  4876 0000134E C3                      	retn
  4877                                  
  4878                                  ;RPrint	endp
  4879                                  
  4880                                  	; 14/01/2023
  4881                                  ;	; MSDOS 3.3
  4882                                  ;CRLF:
  4883                                  ;	mov     dx,NEWLIN
  4884                                  ;
  4885                                  ;RDISPMSG: ; Display message/text
  4886                                  ;	; DS:DX = ($ terminated) Message/Text address 
  4887                                  ;	push    ax
  4888                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  4889                                  ;	clc
  4890                                  ;	int     21h             ; DOS - PRINT STRING
  4891                                  ;				; DS:DX -> string terminated by "$"
  4892                                  ;	pop     ax
  4893                                  ;	retn
  4894                                  
  4895                                  
  4896                                  	; MSDOS 6.0
  4897                                  ; ----------------------------------------------------------------------------
  4898                                  ;***	RPrintCrit - print critical error message
  4899                                  ;
  4900                                  ;	ENTRY	DX = extended error # (19-39)
  4901                                  ;
  4902                                  ;	EXIT	nothing
  4903                                  ;
  4904                                  ;	USED	flags
  4905                                  ;
  4906                                  ;	EFFECTS
  4907                                  ;	  Message is displayed on stdout
  4908                                  ; ----------------------------------------------------------------------------
  4909                                  
  4910                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4911                                  
  4912                                  ;RPrintCrit	proc
  4913                                  ;	assume	ds:DATARES,ss:DATARES
  4914                                  
  4915                                  	; 14/01/2023
  4916                                  RPrintCrit:
  4917 0000134F 52                      	push	dx			; preserve DX
  4918 00001350 87DA                    	xchg	bx,dx			; BX = extended error #
  4919                                  					; DX = saved BX
  4920 00001352 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  4921 00001355 D1E3                    	shl	bx,1			; BX = offset in word table
  4922 00001357 8B9F[B008]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  4923 0000135B 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  4924                                  					; BX = restored
  4925 0000135D E8D6FF                  	call	RPrint			; print the message
  4926 00001360 5A                      	pop	dx			; restore DX
  4927 00001361 C3                      	retn
  4928                                  
  4929                                  ;RPrintCrit	endp
  4930                                  
  4931                                  ; ----------------------------------------------------------------------------
  4932                                  ;***	RDispMsg - display message
  4933                                  ;
  4934                                  ;	Display message, with substitutions, for RPrint.
  4935                                  ;
  4936                                  ;	ENTRY	DS:SI = ptr to message text
  4937                                  ;		CX = message length
  4938                                  ;		DS:BX = ptr to substitution block, if any
  4939                                  ;
  4940                                  ;	EXIT	nothing
  4941                                  ;
  4942                                  ;	USED	AX,CX,DX,SI
  4943                                  ; ----------------------------------------------------------------------------
  4944                                  
  4945                                  ;RDispMsg	proc
  4946                                  ;	assume	ds:DATARES,ss:DATARES
  4947                                  
  4948                                  RDispMsg:
  4949                                  	; 14/01/2023
  4950                                  rdNextChar:
  4951 00001362 AC                      	lodsb				; AL = next char
  4952 00001363 3C25                    	cmp	al,'%'
  4953 00001365 7511                    	jne	short rdOutChar		; not a substitution
  4954 00001367 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  4955 00001369 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  4956 0000136C 80FA09                  	cmp	dl,9
  4957 0000136F 7307                    	jae	short rdOutChar		; not a substitution
  4958                                  
  4959                                  ;*	A substitution code %1 - %9 has been encountered.
  4960                                  ;	DL = 0-8, indicating %1-%9
  4961                                  ;	DS:BX = ptr to substitution block
  4962                                  
  4963 00001371 E80D00                  	call	SubstMsg		; display the substitution
  4964 00001374 46                      	inc	si			; SI = ptr past %n
  4965 00001375 49                      	dec	cx			; count extra character in %n
  4966 00001376 EB06                    	jmp	short rdCharDone
  4967                                  
  4968                                  ;*	Normal character output.
  4969                                  
  4970                                  rdOutChar:
  4971 00001378 88C2                    	mov	dl,al			; DL = char
  4972 0000137A B402                    	mov	ah,2			; AH = DOS Character Output code
  4973 0000137C CD21                    	int	21h			; call DOS
  4974                                  rdCharDone:
  4975 0000137E E2E2                    	loop	rdNextChar
  4976 00001380 C3                      	retn
  4977                                  
  4978                                  ;RDispMsg	endp
  4979                                  
  4980                                  ; ----------------------------------------------------------------------------
  4981                                  ;***	SubstMsg - display message substitution
  4982                                  ;
  4983                                  ;	Display a substitution string within a message.
  4984                                  ;	Substitution can be a char, an ASCIIZ string, or
  4985                                  ;	a word to be displayed as hex digits.
  4986                                  ;
  4987                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  4988                                  ;		DS:BX = ptr to substitution block
  4989                                  ;
  4990                                  ;	EXIT	nothing
  4991                                  ;
  4992                                  ;	USED	AX,DX
  4993                                  ; ----------------------------------------------------------------------------
  4994                                  
  4995                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4996                                  
  4997                                  ;SubstMsg	proc
  4998                                  ;	assume	ds:DATARES,ss:DATARES
  4999                                  	
  5000                                  	; 14/01/2023
  5001                                  SubstMsg:
  5002 00001381 53                      	push	bx			; preserve BX
  5003 00001382 51                      	push	cx			; preserve CX
  5004                                  
  5005                                  	;mov	al,size SUBST		; AL = size of substitution block
  5006 00001383 B003                    	mov	al,3
  5007 00001385 F6E2                    	mul	dl			; AX = offset of desired subst block
  5008 00001387 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  5009                                  
  5010                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  5011 00001389 8A07                    	mov	al,[bx]
  5012                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  5013 0000138B 8B5F01                  	mov	bx,[bx+1]
  5014                                  
  5015                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  5016                                  
  5017 0000138E FEC8                    	dec	al
  5018 00001390 7428                    	jz	short smChar
  5019 00001392 FEC8                    	dec	al
  5020 00001394 742C                    	jz	short smStr
  5021                                  
  5022                                  ;*	Hex number substitution.
  5023                                  
  5024                                  	;mov	ax,ds:[bx]		; AX = word value
  5025 00001396 8B07                    	mov	ax,[bx]
  5026 00001398 B90400                  	mov	cx,4			; CX = # digits to display
  5027                                  smDigit:
  5028 0000139B D1C0                    	rol	ax,1
  5029 0000139D D1C0                    	rol	ax,1
  5030 0000139F D1C0                    	rol	ax,1
  5031 000013A1 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  5032                                  
  5033 000013A3 50                      	push	ax			; save other digits
  5034 000013A4 240F                    	and	al,0Fh			; AL = binary digit
  5035 000013A6 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  5036 000013A8 3C39                    	cmp	al,'9'
  5037 000013AA 7602                    	jbe	short smDigit09		; it's 0-9
  5038                                  	;add	al,7
  5039 000013AC 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  5040                                  smDigit09:
  5041 000013AE 88C2                    	mov	dl,al			; DL = ascii digit
  5042 000013B0 B402                    	mov	ah,2
  5043 000013B2 CD21                    	int	21h			; output the ascii digit
  5044 000013B4 58                      	pop	ax			; restore all digits
  5045                                  
  5046 000013B5 E2E4                    	loop	smDigit
  5047                                  	;jmp	short smRet
  5048                                  	; 14/01/2023
  5049                                  smRet:	
  5050 000013B7 59                      	pop	cx
  5051 000013B8 5B                      	pop	bx
  5052 000013B9 C3                      	retn
  5053                                  
  5054                                  ;*	Char substitution.
  5055                                  
  5056                                  smChar:
  5057                                  	;mov	dl,ds:[bx]		; DL = char to output
  5058 000013BA 8A17                    	mov	dl,[bx]
  5059 000013BC B402                    	mov	ah,2
  5060 000013BE CD21                    	int	21h
  5061 000013C0 EBF5                    	jmp	short smRet
  5062                                  
  5063                                  ;*	String substitution.
  5064                                  
  5065                                  smStr:
  5066                                  	;mov	dl,ds:[bx]		; DL = next char
  5067 000013C2 8A17                    	mov	dl,[bx]
  5068 000013C4 08D2                    	or	dl,dl
  5069 000013C6 74EF                    	jz	short smRet		; null char - we're done
  5070 000013C8 B402                    	mov	ah,2
  5071 000013CA CD21                    	int	21h			; display char
  5072 000013CC 43                      	inc	bx			; DS:BX = ptr to next char
  5073 000013CD EBF3                    	jmp	short smStr
  5074                                  
  5075                                  ;smRet:	pop	cx
  5076                                  ;	pop	bx
  5077                                  ;	retn
  5078                                  
  5079                                  ;SubstMsg	endp
  5080                                  
  5081                                  	; MSDOS 6.0
  5082                                  ; ----------------------------------------------------------------------------
  5083                                  ;***	CharToUpper - convert character to uppercase
  5084                                  ;
  5085                                  ;	ENTRY	AL = char
  5086                                  ;
  5087                                  ;	EXIT	AL = uppercase char
  5088                                  ;
  5089                                  ;	USED	AX
  5090                                  ; ----------------------------------------------------------------------------
  5091                                  
  5092                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5093                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  5094                                  
  5095                                  ;CharToUpper	proc
  5096                                  ;	assume	ds:DATARES
  5097                                  CharToUpper:
  5098 000013CF 50                      	push	ax		; put char on stack as arg to int 2F
  5099 000013D0 B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  5100 000013D3 CD2F                    	int	2Fh
  5101 000013D5 44                      	inc	sp		; throw away old char on stack
  5102 000013D6 44                      	inc	sp
  5103 000013D7 C3                      	retn
  5104                                  
  5105                                  ;CharToUpper	endp
  5106                                  
  5107                                  	; 14/01/2023
  5108                                  ;	; MSDOS 3.3
  5109                                  ;CHARTOUPPER:
  5110                                  ;	cmp	al,80h
  5111                                  ;	jb	short CHARTOUPPER1
  5112                                  ;	sub	al,80h
  5113                                  ;	push	ds
  5114                                  ;	push	bx
  5115                                  ;	lds	bx,[UPPERCASETBL]
  5116                                  ;	add	bx,2
  5117                                  ;	xlat
  5118                                  ;	pop	bx
  5119                                  ;	pop	ds
  5120                                  ;	jmp	short CHARTOUPPER_RETN
  5121                                  ;CHARTOUPPER1:
  5122                                  ;	cmp	al,'a'
  5123                                  ;	jb	short CHARTOUPPER_RETN
  5124                                  ;	cmp	al,'z'
  5125                                  ;	ja	short CHARTOUPPER_RETN
  5126                                  ;	sub	al,20h
  5127                                  ;CHARTOUPPER_RETN:
  5128                                  ;	retn
  5129                                  
  5130                                  ;public	EndCode
  5131                                  ;EndCode label byte
  5132                                  
  5133                                  	; MSDOS 6.0
  5134                                  ; ----------------------------------------------------------------------------
  5135                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  5136                                  ;
  5137                                  ;	ENTRY	If we handle it -
  5138                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  5139                                  ;		  DL = operation =
  5140                                  ;		     0 = get extended error messages
  5141                                  ;		     1 = set extended error messages
  5142                                  ;		     2 = get parse error messages
  5143                                  ;		     3 = set parse error messages
  5144                                  ;		     4 = get critical error messages
  5145                                  ;		     5 = set critical error messages
  5146                                  ;		     6 = get file system error messages
  5147                                  ;		     7 = set file system error messages
  5148                                  ;		     8 = get disk retriever routine
  5149                                  ;		     9 = set disk retriever routine
  5150                                  ;		  ES:DI = address for 'set' operations
  5151                                  ;
  5152                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  5153                                  ;
  5154                                  ;	NOTE
  5155                                  ;	  This handler replaces the one that used to reside in DOS.
  5156                                  ;	  'Set' operations are ignored.
  5157                                  ;	  'File system error messages' are not supported.
  5158                                  ; ----------------------------------------------------------------------------
  5159                                  
  5160                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5161                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  5162                                  
  5163                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5164                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1588h (CODERES:0738h)
  5165                                  
  5166                                  ;SR;
  5167                                  ;At the int 2fh entry point we push the old ds value and the resident data
  5168                                  ;segment address. Get them off the stack
  5169                                  
  5170                                  ;MsgInt2fHandler proc	far
  5171                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5172                                  
  5173                                  	; 14/01/2023
  5174                                  MsgInt2fHandler:
  5175 000013D8 1F                      	pop	ds			; ds = DATARES
  5176                                  	;assume	ds:DATARES
  5177                                  ;	pop	word [OldDS]		; save old value of ds
  5178                                  
  5179 000013D9 3D2E12                  	cmp	ax,122Eh
  5180                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  5181                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  5182 000013DC 742A                    	je	short miOurs		; it's ours
  5183                                  
  5184                                  ;ifndef ROMDOS
  5185                                  	;cmp	ax,5500h
  5186 000013DE 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  5187                                  ;else
  5188                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  5189                                  ;endif	;ROMDOS
  5190 000013E1 741C                    	je	short fcOurs
  5191                                  
  5192                                  ;SR;
  5193                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  5194                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  5195                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  5196                                  ;current value of ds as it points at the data segment. So we do some kinky
  5197                                  ;stack manipulations.
  5198                                  
  5199 000013E3 50                      	push	ax
  5200 000013E4 50                      	push	ax			; create 2 words on stack for retf
  5201                                  
  5202 000013E5 55                      	push	bp
  5203 000013E6 50                      	push	ax
  5204                                  
  5205 000013E7 89E5                    	mov	bp,sp			; bp can be used to address stack
  5206                                  
  5207                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  5208                                  ;do a 'pop ds' at the end to restore our ds
  5209                                  
  5210 000013E9 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  5211 000013EC 894604                  	mov	[bp+4],ax
  5212                                  	
  5213                                  	;mov	ax,word ptr ds:Int2fHandler+2
  5214 000013EF A1[5204]                	mov	ax,[Int2fHandler+2]
  5215 000013F2 894608                  	mov	[bp+8],ax		; put segment address
  5216                                  	;mov	ax,word ptr ds:Int2fHandler
  5217 000013F5 A1[5004]                	mov	ax,[Int2fHandler]
  5218 000013F8 894606                  	mov	[bp+6],ax		; put offset address
  5219                                  
  5220 000013FB 58                      	pop	ax
  5221 000013FC 5D                      	pop	bp
  5222 000013FD 1F                      	pop	ds
  5223                                  
  5224 000013FE CB                      	retf				; chain on to next handler
  5225                                  
  5226                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  5227                                  
  5228                                  fcOurs:
  5229                                  
  5230                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  5231                                  
  5232 000013FF 58                      	pop	ax			; discard ds currently on stack
  5233 00001400 1E                      	push	ds			; store our data segment
  5234                                  
  5235                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  5236 00001401 BE[0400]                	mov	si,Int2f_Entry
  5237                                  
  5238 00001404 31C0                    	xor	ax,ax			; indicate COMMAND present
  5239 00001406 EB11                    	jmp	short miRet		; return to caller
  5240                                  
  5241                                  miOurs:
  5242 00001408 F6C201                  	test	dl,1
  5243 0000140B 750C                    	jnz	short miRet		; ignore 'set' operations
  5244                                  
  5245 0000140D 53                      	push	bx			; preserve BX
  5246 0000140E 89D3                    	mov	bx,dx
  5247 00001410 30FF                    	xor	bh,bh			; BX = index in word table
  5248 00001412 D1E3                    	shl	bx,1			; BX = index in dword table
  5249                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5250 00001414 C4BF[1907]              	les	di,[bx+MsgPtrLists]
  5251 00001418 5B                      	pop	bx			; restore BX
  5252                                  miRet:
  5253                                  ;	mov	ds,[OldDS]		; restore ds
  5254 00001419 1F                      	pop	ds
  5255                                  	;assume	ds:nothing
  5256                                  
  5257 0000141A CF                      	iret
  5258                                  
  5259                                  ;MsgInt2fHandler endp
  5260                                  
  5261                                  	; MSDOS 6.0
  5262                                  ; ----------------------------------------------------------------------------
  5263                                  ;***	MsgRetriever - message retrieval routine for utilities
  5264                                  ;
  5265                                  ;	Address of this routine is passed to utility programs via 
  5266                                  ;	message services int 2f. We try to find the desired message
  5267                                  ;	in memory or in our disk image.
  5268                                  ;
  5269                                  ;	ENTRY	AX = message #
  5270                                  ;		DI = offset in RESGROUP of msg ptr list
  5271                                  ;		ComSpec = asciiz pathname to our disk image
  5272                                  ;
  5273                                  ;	EXIT	CY clear for success
  5274                                  ;		ES:DI = ptr to count byte, followed by message text
  5275                                  ;
  5276                                  ;		CY set for failure
  5277                                  ;		ES,DI undefined
  5278                                  ;
  5279                                  ;	USED	flags
  5280                                  ;
  5281                                  ;	NOTE
  5282                                  ;	  The message # in AX is used to compute an offset into
  5283                                  ;	  the message ptr list pointed to by DI. The lists must
  5284                                  ;	  start with message # 1 and proceed through consecutive
  5285                                  ;	  message #'s.  
  5286                                  ;
  5287                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5288                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5289                                  ;	  valid message #.  ;M033
  5290                                  ;
  5291                                  ;	  List positions with no corresponding message text are
  5292                                  ;	  indicated by null pointers, which this routine detects.
  5293                                  ; ----------------------------------------------------------------------------
  5294                                  
  5295                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5296                                  
  5297                                  ;SR; This routine will be called directly by the utilities. So, we have
  5298                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5299                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5300                                  
  5301                                  ;MsgRetriever	proc	far
  5302                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5303                                  
  5304                                  	; 14/01/2023
  5305                                  MsgRetriever:
  5306 0000141B 1F                      	pop	ds			; ds = DATARES
  5307                                  	;assume	ds:DATARES
  5308                                  ;	pop	word [OldDS]		; save old ds
  5309                                  
  5310 0000141C 50                      	push	ax			; preserve registers
  5311 0000141D 53                      	push	bx
  5312 0000141E 51                      	push	cx
  5313 0000141F 52                      	push	dx
  5314 00001420 56                      	push	si
  5315                                  
  5316                                  ;;	push	ds
  5317                                  ;;	push	cs
  5318                                  ;;	pop	ds			; DS = DATARES seg addr
  5319                                  ;;	assume	ds:RESGROUP
  5320                                  ;;	push	cs
  5321                                  
  5322 00001421 1E                      	push	ds			; get es from ds
  5323 00001422 07                      	pop	es			; ES = DATARES seg addr
  5324                                  
  5325                                  ;	Begin modification M033.
  5326                                  
  5327                                  ;	Make sure msg # is valid.
  5328                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5329                                  
  5330                                  	;mov	bx,11
  5331 00001423 BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5332                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5333 00001426 81FF[B809]              	cmp	di,PARSMSGPTRS
  5334 0000142A 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5335                                  	;mov	bx,90
  5336 0000142C BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5337                                  chkmsgnum:
  5338 0000142F 39C3                    	cmp	bx,ax
  5339 00001431 725A                    	jc	short mrRet		; msg # too high, return carry
  5340                                  
  5341                                  ;	Msg # is valid.
  5342                                  
  5343                                  ;	End modification M033.
  5344                                  
  5345 00001433 48                      	dec	ax
  5346 00001434 D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5347 00001436 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5348                                  
  5349 00001438 81FF[5404]              	cmp	di,ResMsgEnd
  5350 0000143C 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5351                                  
  5352                                  ;*	Retrieve message from disk (or ROM) image.
  5353                                  ;	Read once to get the ptr to the message, then again for the message.
  5354                                  
  5355                                  ;ifndef	ROMDOS
  5356                                  	; 14/01/2023
  5357                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5358 0000143E BE[E901]                	mov	si,ComSpec
  5359 00001441 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5360 00001444 BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5361 00001447 B8006C                  	mov	ax,6C00h
  5362                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5363 0000144A CD21                    	int	21h				; call DOS
  5364 0000144C 723F                    	jc	short mrRet			; return failure
  5365                                  
  5366 0000144E 89C3                    	mov	bx,ax				; BX = file handle
  5367 00001450 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5368 00001452 31F6                    	xor	si,si				; SI = read count
  5369                                  mrRead:
  5370 00001454 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5371 00001458 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5372 0000145A B80042                  	mov	ax,4200h
  5373                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5374 0000145D CD21                    	int	21h				; call DOS
  5375 0000145F 721A                    	jc	short mrCloseFile		; handle error
  5376                                  
  5377                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5378 00001461 BA[0004]                	mov	dx,MsgBuffer
  5379 00001464 B94000                  	mov	cx,64				; CX = # bytes to read
  5380 00001467 B43F                    	mov	ah,3Fh
  5381                                  	;mov	ah,READ				; AH = 'Read File'
  5382 00001469 CD21                    	int	21h				; call DOS
  5383 0000146B 720E                    	jc	short mrCloseFile		; handle error
  5384                                  
  5385 0000146D 09F6                    	or	si,si				; (CY cleared)
  5386 0000146F 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5387 00001471 46                      	inc	si				; mark one read done
  5388 00001472 8B16[0004]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5389 00001476 09D2                    	or	dx,dx
  5390 00001478 75DA                    	jnz	short mrRead			; go read the message
  5391 0000147A F9                      	stc					; null ptr found- no msg
  5392                                  
  5393                                  mrCloseFile:
  5394 0000147B 9C                      	pushf				; save success/failure (CY)
  5395 0000147C B43E                    	mov	ah,3Eh
  5396                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5397 0000147E CD21                    	int	21h			; call DOS
  5398                                  ;	Bugbug: should we avoid this popf?
  5399 00001480 9D                      	popf				; CY = success/failure
  5400 00001481 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5401 00001483 EB08                    	jmp	short mrRet		; we're done
  5402                                  
  5403                                  ;else	;ROMDOS
  5404                                  ;
  5405                                  ;;	DI = ptr to msg ptr
  5406                                  ;
  5407                                  ;	mov	si,di			; SI = ptr to msg ptr
  5408                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5409                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5410                                  ;
  5411                                  ;;	ASSUME ES:NOTHING is still in effect.
  5412                                  ;
  5413                                  ;	push	ds
  5414                                  ;	pop	es				; ES = DATARES seg addr
  5415                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5416                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5417                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5418                                  ;	or	si,si
  5419                                  ;	jz	mrNoMsg			; null ptr- no message text
  5420                                  ;
  5421                                  ;	sub	si,100h			; SI = offset into image of msg
  5422                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5423                                  ;	mov	di,offset DATARES:MsgBuffer
  5424                                  ;	invoke	LoadFromROM
  5425                                  ;	clc					; success
  5426                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5427                                  ;	jmp	short mrRet
  5428                                  ;
  5429                                  ;mrNoMsg:
  5430                                  ;	stc
  5431                                  ;	jmp	short mrRet
  5432                                  ;
  5433                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5434                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5435                                  ;	assume	es:NOTHING
  5436                                  ;
  5437                                  ;endif	;ROMDOS
  5438                                  
  5439                                  ;*	Message ptr is in memory.
  5440                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5441                                  
  5442                                  mrInMem:
  5443                                  	; 14/01/2023
  5444 00001485 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5445 00001488 09FF                    	or	di,di			; (CY cleared)
  5446 0000148A 7501                    	jnz	short mrRet		; found message
  5447 0000148C F9                      	stc				; null ptr found - no message
  5448                                  mrRet:	
  5449 0000148D 5E                      	pop	si			; restore all registers
  5450 0000148E 5A                      	pop	dx
  5451 0000148F 59                      	pop	cx
  5452 00001490 5B                      	pop	bx
  5453 00001491 58                      	pop	ax
  5454                                  
  5455                                  ;	mov	ds,[OldDS]		; restore ds
  5456 00001492 1F                      	pop	ds
  5457                                  	;assume	ds:nothing
  5458                                  
  5459 00001493 CB                      	retf	; 21/04/2023
  5460                                  
  5461                                  ;MsgRetriever endp
  5462                                  
  5463                                  ; M003; Start of changes for UMB support
  5464                                  
  5465                                  ; ----------------------------------------------------------------------------
  5466                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5467                                  ;
  5468                                  ;	ENTRY	al = Saved alloc strat and link state
  5469                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5470                                  ;			b1 = 1 if link state to restore is Linked
  5471                                  ;
  5472                                  ;	EXIT	None
  5473                                  ;
  5474                                  ;	USED	ax, bx, cx
  5475                                  ; ----------------------------------------------------------------------------
  5476                                  
  5477                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5478                                  
  5479                                  ;public	Lh_OffUnlink
  5480                                  Lh_OffUnlink:	; proc	far
  5481                                  	; 14/01/2023
  5482 00001494 88C5                    	mov	ch,al
  5483 00001496 88C1                    	mov	cl,al
  5484                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5485                                  	;mov	ax,(ALLOCOPER<<8)
  5486 00001498 B80058                  	mov	ax,5800h
  5487 0000149B CD21                    	int	21h
  5488 0000149D 89C3                    	mov	bx,ax
  5489 0000149F D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5490 000014A1 80E180                  	and	cl,80h				; mask off b6-b0
  5491 000014A4 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5492 000014A7 08CB                    	or	bl,cl				; set HighFirst bit state
  5493                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5494                                  	;mov	ax,(ALLOCOPER<<8)|1
  5495 000014A9 B80158                  	mov	ax,5801h
  5496 000014AC CD21                    	int	21h				; set alloc strat
  5497                                  
  5498 000014AE 88EB                    	mov	bl,ch
  5499 000014B0 D0EB                    	shr	bl,1
  5500 000014B2 30FF                    	xor	bh,bh				; bx = linkstate
  5501                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5502                                  	;mov	ax,(ALLOCOPER<<8)|3
  5503 000014B4 B80358                  	mov	ax,5803h
  5504 000014B7 CD21                    	int	21h				; set linkstate
  5505                                  
  5506 000014B9 CB                      	retf
  5507                                  
  5508                                  ;Lh_OffUnlink endp
  5509                                  
  5510                                  ; M003; End of changes for UMB support
  5511                                  
  5512                                  ;public	EndCode
  5513                                  ; 14/01/2023
  5514                                  ;EndCode: ; label byte
  5515                                  ; 06/06/2023
  5516                                  ; 16/04/2023
  5517                                  ; 14/08/2024
  5518                                  ;EndCode equ ($-StartCode)+100h
  5519                                  
  5520                                  ; 06/06/2023
  5521                                  ;EndCode equ $-StartCode
  5522                                  
  5523                                  ; 14/08/2024
  5524                                  EndCode:
  5525                                  ENDCODE equ ($-StartCode)+100h	
  5526                                  
  5527                                  ;CODERES ends
  5528                                  ;	end
  5529                                  
  5530                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5531                                  
  5532                                  	;times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5533                                  	; 14/08/2024
  5534 000014BA 00<rep 6h>              	times	(((ENDCODE+15)>>4)<<4)-ENDCODE db 0
  5535                                  
  5536                                  ;align 16
  5537                                  
  5538                                  ;=============================================================================
  5539                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5540                                  ;=============================================================================
  5541                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5542                                  
  5543                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5544                                  
  5545                                  ;TITLE   COMMAND Initialization
  5546                                  
  5547                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5548                                  ;ENVIRONSIZ2 EQU 092H
  5549                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5550                                  
  5551                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5552                                  ; 23/09/2018
  5553                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5554                                  ; 14/01/2023
  5555                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5556                                  
  5557                                  ; ----------------------------------------------------------------------------
  5558                                  
  5559                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5560                                  
  5561                                  ; 06/06/2023
  5562                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5563                                  ;ENVIRONSIZ equ 160
  5564                                  
  5565                                  ENVSML	equ 256	; minimum environment size
  5566                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5567                                  MAX_COMSPEC equ 146
  5568                                  ECOMSPEC equ 14
  5569                                  
  5570                                  ; 14/01/2023
  5571                                  TAB_CHAR equ 09h
  5572                                  SPACE_CHAR equ 20h	
  5573                                  
  5574                                  ; 06/06/2023
  5575                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5576                                  ENVIRONSIZ equ 180	; SIZE Environment 
  5577                                  
  5578                                  ;----------------------------------------------------
  5579                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5580                                  ;----------------------------------------------------
  5581                                  ;Environment Struc	; Default COMMAND environment
  5582                                  ;
  5583                                  ;Env_PathString  db	"path="
  5584                                  ;Env_PathSpec	 db	"c:\msdos"
  5585                                  ;                db	0
  5586                                  ;Env_PrmptString db	"prompt="
  5587                                  ;Env_PrmptSpec   db	"$p$g"
  5588                                  ;                db	0
  5589                                  ;Env_ComString   db	"comspec="
  5590                                  ;Env_ComSpec     db	"\command.com"
  5591                                  ;		 db	134 dup (0)
  5592                                  ;
  5593                                  ;Environment ends
  5594                                  ;----------------------------------------------------
  5595                                  
  5596                                  ;-----------------------------------------------------------------------------
  5597                                  
  5598                                  ;-----------------------------------------------------------------------------
  5599                                  ; START OF INIT PORTION
  5600                                  ; This code is deallocated after initialization.
  5601                                  ;-----------------------------------------------------------------------------
  5602                                  
  5603                                  ;INIT	SEGMENT PUBLIC PARA
  5604                                  
  5605                                  ; 	EXTRN   HEADER:BYTE
  5606                                  ;	EXTRN   BADCOMLKMES:BYTE
  5607                                  
  5608                                  ;	PUBLIC  CONPROC
  5609                                  
  5610                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  5611                                  
  5612                                          ;ORG 0
  5613                                  ;ZERO = $
  5614                                  	; 23/09/2018
  5615                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  5616                                  
  5617                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5618                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  5619                                  
  5620                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5621                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1670h (CODERES:0820h)
  5622                                  ConProc:
  5623                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  5624 000014C0 BC[D404]                	mov	sp,RStack
  5625                                  
  5626                                  ; We need to set the PSP to us right at start because Carousel needs
  5627                                  ; to be lied to and it does not set PSP when it transfers control to
  5628                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  5629                                  ; command.com is also not lied to.
  5630                                  
  5631                                  	; 14/01/2023
  5632                                  	; MSDOS 6.0
  5633 000014C3 B450                            mov	ah,50h
  5634                                  	;mov	ah,SET_CURRENT_PDB
  5635 000014C5 8CC3                            mov	bx,es
  5636 000014C7 CD21                            int	21h
  5637                                  
  5638                                  	; 14/01/2023
  5639                                  	;mov	ah,30h 
  5640                                  	;;mov	ax,GET_VERSION<<8 ; 3000h
  5641                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5642 000014C9 B80030                  	mov	ax,3000h
  5643 000014CC CD21                    	int	21h
  5644                                  	;;;cmp	ax,EXPECTED_VERSION ; 1E03h
  5645                                  	;;cmp	ax,5
  5646                                  	;cmp	ax,EXPECTED_VERSION ; 0005h
  5647                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5648 000014CE 3D0616                  	cmp	ax,EXPECTED_VERSION ; 1606h
  5649 000014D1 7411                    	je	short okdos			; DOS version is ok
  5650                                  
  5651 000014D3 BA[881F]                	mov	dx,BADVERMSG			; DX = ptr to msg
  5652 000014D6 E85DFE                  	call	RPrint
  5653                                  
  5654                                  	; MSDOS 3.3
  5655                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  5656                                  	;int	21h             ; DOS - PRINT STRING
  5657                                  				; DS:DX -> string terminated by "$"
  5658 000014D9 8CC0                    	mov	ax,es
  5659 000014DB 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  5660                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  5661                                  Here:	
  5662 000014E0 74FE                    	jz	short Here			;  loop forever
  5663                                  	
  5664 000014E2 CD20                    	int	20h				; otherwise, exit
  5665                                  okdos:
  5666                                  	; 23/09/2018
  5667                                  
  5668                                  ;  Calculate and save the end of the INIT segment (which is also
  5669                                  ;  the beginning of TRANGROUP).
  5670                                  
  5671                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5672                                  	; MSDOS 3.3
  5673                                  	;mov	ah,65h
  5674                                  	;mov	al,2
  5675                                  	;mov	dx,-1
  5676                                  	;mov	bx,-1
  5677                                  	;mov	cx,5
  5678                                  	;mov	di,UCASE_ADDR
  5679                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  5680                                  	;		; AL = 02h : Get pointer to character translation table
  5681                                  	;		; BX = code page (-1 = current global code page)
  5682                                  	;		; DX = country ID (-1 = current country)
  5683                                  	;		; CX = amount of data to return
  5684                                  	;; ES:DI = pointer to output buffer
  5685                                  	;; Buffer offset :
  5686                                  	;;	00h -  byte,  country Id
  5687                                  	;;  	01h -  dword, pointer to uppercase table	
  5688                                  
  5689                                  	; 14/01/2023
  5690                                  	; MSDOS 6.0 (& MSDOS 3.3)
  5691                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  5692                                  	; 06/06/2023
  5693                                  	;mov	dx,26EFh     ; MSDOS 6.22 COMMAND.COM       	
  5694 000014E4 BA5F25                  	mov	dx,TRANSTART+15			; get end of init code
  5695                                  	; 27/09/2018
  5696                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  5697 000014E7 B104                    	mov	cl,4				; change to paragraphs
  5698 000014E9 D3EA                            shr	dx,cl				;
  5699 000014EB 8CC8                            mov     ax,cs                           ; get current segment
  5700 000014ED 01D0                            add     ax,dx                           ; calculate segment of end of init
  5701 000014EF A3[D01E]                        mov     [initend],ax			; save this
  5702                                  
  5703                                  	; 14/01/2023
  5704                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  5705                                  
  5706                                  ;  Check for /? on the command line. If found, display help text and exit.
  5707                                  ;  NOTE: this routine may terminate the program, never returning.
  5708                                  
  5709 000014F2 E8B006                  	call	CheckHelp
  5710                                  
  5711                                  ; We have to patch the segment values for the various interrupt entry points.
  5712                                  ; This is because we need to have the default addresses of the handlers in our
  5713                                  ; stub before the relocation is done. These values will then be changed once
  5714                                  ; the resident is relocated
  5715                                  
  5716 000014F5 E81A09                  	call	patch_segs
  5717                                  
  5718                                  ;  Turn APPEND off during initialization processing
  5719                                  
  5720                                  	; 14/01/2023
  5721 000014F8 B800B7                  	mov     ax,0B700h
  5722                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  5723 000014FB CD2F                    	int	2Fh				;
  5724                                  	;cmp	al,0				; append installed?
  5725 000014FD 08C0                    	or	al,al
  5726 000014FF 7418                    	jz	short set_msg_addr		; no - continue
  5727                                  	
  5728 00001501 B802B7                  	mov	ax,0B702h
  5729                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  5730 00001504 CD2F                    	int	2Fh				;
  5731                                  	;cmp	ax,-1				; append version correct?
  5732                                  	;jne	short set_msg_addr		; no - continue
  5733 00001506 40                      	inc	ax ; -1 -> 0
  5734 00001507 7510                    	jnz	short set_msg_addr        
  5735                                  	
  5736 00001509 B806B7                  	mov     ax,0B706h
  5737                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  5738 0000150C CD2F                    	int	2Fh				;
  5739 0000150E 891E[6002]                      mov     [Append_State],bx		; save append state
  5740                                         
  5741 00001512 31DB                    	xor	bx,bx                           ; clear out state
  5742 00001514 B807B7                  	mov	ax,0B707h
  5743                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  5744 00001517 CD2F                    	int	2Fh				; set everything off
  5745                                  
  5746                                  set_msg_addr:
  5747                                  	; 14/01/2023
  5748                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  5749                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  5750                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  5751                                  	; 06/06/2023
  5752                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:16CBh) 
  5753                                  	;mov	di,0A41h  ; mov di,PAERRMSG0 ; MSDOS 6.22 COMMAND.COM
  5754 00001519 BF[DA08]                	mov	di,DataresEnd
  5755 0000151C 893E[5404]              	mov	[ResMsgEnd],di			; save it
  5756                                  
  5757 00001520 E80109                          call    get_XMMAddr                     ; get XMM call address
  5758                                  
  5759                                  ; Check if this is the first instance of command.com. If not, we just exit
  5760                                  ; this routine without moving any code.
  5761                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  5762                                  ; stub. We just have to copy this over
  5763                                  	
  5764                                  ;ifndef ROMDOS
  5765 00001523 B80055                  	mov	ax,5500h
  5766                                  	;mov	ax,GET_COMMAND_STATE	
  5767                                  ;else
  5768                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  5769                                  ;endif ; ROMDOS
  5770                                  
  5771 00001526 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  5772                                  	;assume	ds:nothing
  5773                                  
  5774                                  	; 03/05/2023
  5775                                  	; Return:
  5776                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  5777                                  	;   DS:SI -> entry point table
  5778                                  
  5779                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  5780                                  
  5781 00001528 09C0                    	or	ax,ax
  5782 0000152A 750C                    	jnz	short first_com			; this is the first instance
  5783                                  
  5784                                  	; 14/01/2023
  5785 0000152C 268936[0C24]            	mov	[es:ResJmpTable],si		; save old stub jump table
  5786 00001531 268C1E[0E24]            	mov	[es:ResJmpTable+2],ds
  5787 00001536 EB06                    	jmp	short init_cntry
  5788                                  
  5789                                  first_com:
  5790 00001538 26C606[1024]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  5791                                  
  5792                                  init_cntry:
  5793                                  	; 14/01/2023
  5794 0000153E 06                      	push	es
  5795 0000153F 1F                      	pop	ds
  5796                                  	;assume	ds:RESGROUP
  5797                                  
  5798 00001540 B465                    	mov	ah,65h
  5799                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  5800 00001542 B004                    	mov	al,4				; get file ucase table
  5801 00001544 BAFFFF                  	mov	dx,-1				;
  5802                                  	;mov	bx,-1				;
  5803 00001547 89D3                    	mov	bx,dx
  5804 00001549 B90500                  	mov	cx,5				; number of bytes we want
  5805                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  5806 0000154C BF[5302]                	mov	di,FUCase_Addr
  5807 0000154F CD21                    	int	21h
  5808                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  5809                                  		; AL = function -
  5810                                  
  5811                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  5812                                  
  5813 00001551 1E                      	push	ds				;
  5814 00001552 B80063                  	mov	ax,6300h
  5815                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  5816 00001555 CD21                    	int	21h				;
  5817                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  5818                                  			
  5819 00001557 8CDB                    	mov	bx,ds				; get segment to bx
  5820 00001559 1F                      	pop	ds				;
  5821 0000155A 8936[5C02]              	mov	[Dbcs_Vector_Addr],si		; save address of
  5822 0000155E 891E[5E02]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  5823                                  
  5824                                  	;mov	ax,[16h]
  5825 00001562 A11600                  	mov	ax,[PDB.PARENT_PID]
  5826                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  5827 00001565 A3[DC01]                	mov	[Parent],ax			;  correctly.
  5828 00001568 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  5829 0000156B A3[DE01]                	mov	[OldTerm],ax
  5830 0000156E A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  5831 00001571 A3[E001]                	mov	[OldTerm+2],ax
  5832                                  
  5833                                  	; 14/01/2023
  5834                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  5835                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  5836                                  	; 06/06/2023
  5837                                  	;mov	ax,1679h	; MSDOS 6.22 COMMAND.COM
  5838                                  	;mov	ax,EndCode+15
  5839                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  5840                                  	; 14/01/2023
  5841                                  	;mov	cl,4				; ax = size of resident part of
  5842                                  	;shr	ax,cl				;  command in paragraphs. Add
  5843                                  	;mov	cx,cs				;  this to CS and you get the
  5844                                  	;add	ax,cx				;  segment of the TPA.
  5845                                  
  5846 00001574 8CC8                    	mov	ax,cs
  5847                                  	; 14/08/2024
  5848                                  	EndCodeParag equ (ENDCODE+15)>>4
  5849                                  	;add	ax,(EndCode+15)>>4
  5850 00001576 055C01                  	add	ax,EndCodeParag
  5851                                  	
  5852 00001579 A3[FA03]                	mov	[Res_Tpa],ax			; Temporarily save the TPA segment
  5853 0000157C 2500F0                  	and	ax,0F000h
  5854 0000157F 050010                  	add	ax,1000h			; Round up to next 64K boundary
  5855 00001582 7303                    	jnc	short TpaSet			; Memory wrap if carry set
  5856 00001584 A1[FA03]                	mov	ax,[Res_Tpa]
  5857                                  TpaSet:
  5858 00001587 A3[EE03]                	mov	[LTpa],ax			; Good enough for the moment
  5859                                  	;mov	ax,[2]
  5860 0000158A A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  5861                                  
  5862 0000158D 8C1E[F403]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  5863 00001591 8C1E[F803]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  5864 00001595 8C1E[EC03]              	mov	[MySeg],ds			;  use to call resident routines.
  5865                                  	; 19/04/2023
  5866                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  5867 00001599 8C1E[2B07]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  5868                                  
  5869 0000159D A3[3302]                	mov	[MemSiz],ax			; Needed for execing other programs
  5870                                  
  5871                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5872                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  5873                                  
  5874                                  ; First reallocate the COMMAND size to its memory image
  5875                                  	
  5876 000015A0 50                      	push	ax    
  5877                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  5878                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  5879                                  	;mov	bx,TRANSTART
  5880                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  5881                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  5882                                  	;add	bx,15 ; *			; round up the size
  5883                                  	; 06/06/2023
  5884                                  	;mov	bx,26E0h  ; MSDOS 6.22 COMMAND.COM ; mov bx,offset RESGROUP:TranStart
  5885                                  	;add	bx,0AF95h ; MSDOS 6.22 COMMAND.COM ; add bx,offset TRANGROUP:TranSpaceEnd
  5886                                  	;add	bx,15 ; *			; round up the size
  5887                                  
  5888                                  	; 03/05/2023
  5889                                  	;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  5890                                  	;add	bx,TRANSPACEEND
  5891                                  	; 06/06/2023
  5892                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  5893                                          ;mov	cl,4				;
  5894                                          ;shr	bx,cl				; size of command.com
  5895 000015A1 BBF60C                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4	
  5896                                  
  5897 000015A4 B44A                    	mov	ah,4Ah
  5898                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  5899 000015A6 CD21                            int     21h				;
  5900 000015A8 58                              pop     ax				;
  5901                                  	
  5902                                  ; Compute maximum size of environment
  5903                                  
  5904                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  5905                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  5906                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5907                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  5908                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  5909 000015A9 C706[C41E]5300          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  5910                                  					; 12+(((1B53h-1670h)+15)/16)-1 = 90	
  5911                                  ;
  5912                                  ; Compute minimum size of environment
  5913                                  ;
  5914                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  5915                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  5916 000015AF C706[C21E]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  5917                                  
  5918                                  	;;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  5919                                  	;;mov	dx,98D4h	; MSDOS 5.0 COMMAND.COM
  5920                                  	; 06/06/2023
  5921                                  	;;mov	dx,0AFA4h	; MSDOS 6.22 COMMAND.COM
  5922                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  5923                                  	;mov	cl,4				;  in paragraphs.
  5924                                  	;shr	dx,cl
  5925 000015B5 BAA10A                  	mov	dx,(TRANSPACEEND+15)>>4
  5926                                  
  5927 000015B8 8916[D21E]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  5928                                  
  5929 000015BC 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  5930 000015BE A3[2D02]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  5931                                  	;mov	ax,[2Ch]
  5932 000015C1 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  5933                                  
  5934                                  	; 14/01/2023
  5935                                          ; MSDOS 6.0
  5936                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5937 000015C4 A3[DC03]                	mov	[EnvirSeg],ax
  5938                                          
  5939                                  	; 21/01/2023
  5940 000015C7 09C0                    	or	ax,ax				; if there is no environment segment,
  5941 000015C9 7407                    	jz	short buildenv			; make one
  5942                                    
  5943                                  	; 21/01/2023
  5944                                  	; MSDOS 3.3 & MSDOS 5.0
  5945                                  	;;inc	byte [CHUCKENV]
  5946                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5947                                  	;inc	byte [AllocedEnv]		; Flag - old environment segment
  5948                                  	
  5949                                  	; MSDOS 3.3 & MSDOS 5.0
  5950                                  	; 06/06/2023
  5951                                  	;jmp	short environpassed
  5952                                  	
  5953                                  	; MSDOS 6.0
  5954                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM	
  5955 000015CB 803E[1024]00            	cmp	byte [FirstCom],0		; if this is the first command.com,
  5956 000015D0 7403                    	je	short environpassed		; do a merge job (make sure COMSPEC exists)
  5957                                  
  5958                                  	; MSDOS 6.0
  5959                                  
  5960                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  5961                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  5962                                  ; size and free this buffer. We need this buffer because we no longer have an
  5963                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  5964                                  ; given on the command line before we know the environment size. This routine
  5965                                  ; will not return in case of an allocation error. It will either exit or hang
  5966                                  ; depending on whether or not this is the first COMMAND.COM or not.
  5967                                  
  5968                                  	; 14/01/2023
  5969                                  buildenv:
  5970 000015D2 E8BC06                  	call	alloc_env                       ; try to allocate buffer
  5971                                  environpassed:
  5972                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  5973                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5974                                  	;mov	[EnvirSeg],ax
  5975                                  	;
  5976 000015D5 8EC0                    	mov	es,ax                           ; and it load into es.
  5977                                  	;assume	es:nothing
  5978                                  
  5979                                  gottheenvir:
  5980                                  
  5981                                  ; Initialize the command drive
  5982                                  
  5983                                  	; 14/01/2023
  5984                                  	; MSDOS 3.3 & MSDOS 6.0
  5985 000015D7 B419                    	mov	ah,19h
  5986                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  5987 000015D9 CD21                    	int	21h
  5988 000015DB FEC0                    	inc	al
  5989 000015DD A2[3202]                	mov	[ComDrv],al
  5990                                  
  5991                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  5992 000015E0 A05C00                          mov	al,[FCB]
  5993 000015E3 08C0                    	or	al,al
  5994 000015E5 7433                    	jz	short nocomdrv		; no drive specified
  5995                                  
  5996 000015E7 B43A                    	mov	ah,':'
  5997 000015E9 A2[3202]                	mov	[ComDrv],al
  5998 000015EC 0440                    	add	al,40h			; convert number to uppercase character
  5999                                  
  6000 000015EE FD                      	std
  6001                                  
  6002                                  	; MSDOS 6.0
  6003                                  	; 06/06/2023
  6004                                  	; MSDOS 6.22 - COMMAND.COM - RESGROUP:17B7h
  6005 000015EF 803E[881E]00            	cmp	byte [AllocedEnv],0	; if a new environment is being built,
  6006 000015F4 7420                    	je	short notwidenv		;  move the default comspec string in it
  6007                                  	; 14/01/2023
  6008                                  	; MSDOS 5.0 COMMAND.COM
  6009 000015F6 8B3E[AB1E]              	mov	di,[ComspOffset]
  6010 000015FA 26807D013A                      cmp	byte [es:di+1],':'	; drive specifier already exist?
  6011 000015FF 7415                            je	short notwidenv		; yes, must have been inherited that way
  6012                                  
  6013                                  	; 06/06/2023
  6014                                  	; MSDOS 3.3
  6015                                  	;;cmp	byte [CHUCKENV],0
  6016                                  	;;jne	short NOTWIDENV
  6017                                  	; 21/01/2021
  6018                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  6019                                   	;cmp	byte [AllocedEnv],0
  6020                                  	;ja	short notwidenv
  6021                                  
  6022 00001601 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  6023 00001602 06                      	push	es			;  the drivespec is in ax and is copied
  6024 00001603 1F                      	pop	ds			;  on to the front of the string.
  6025                                  
  6026                                  ; 06/06/2023
  6027                                  %if 0
  6028                                  	; 21/01/2023
  6029                                  	; 14/01/2023
  6030                                  	; MSDOS 5.0 COMMAND.COM
  6031                                  	; MSDOS 3.3
  6032                                  	; 23/09/2018
  6033                                  	; 30/04/2018
  6034                                  	;mov	di,159
  6035                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  6036                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  6037                                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  6038                                  	;mov	si,157
  6039                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  6040                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  6041                                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  6042                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  6043                                  	mov	cx,MAX_COMSPEC-2 ; 144
  6044                                  %endif
  6045                                  
  6046                                  	; MSDOS 6.0
  6047                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM - RESGROUP:17CCh
  6048 00001604 8DB58F00                        lea	si,[di+MAX_COMSPEC-3]	; lea si,[di+143]
  6049 00001608 8DBD9100                        lea	di,[di+MAX_COMSPEC-1]	; lea di,[di+145]
  6050                                  
  6051 0000160C B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  6052                                  
  6053 0000160F F3A4                    	rep	movsb
  6054 00001611 1F                      	pop	ds
  6055                                  
  6056                                  	; MSDOS 6.0
  6057                                  	; 06/06/2023
  6058 00001612 268945FF                	mov	[es:di-1],ax
  6059                                  
  6060                                  	; MSDOS 3.3
  6061                                  	;mov	[es:0Eh],ax
  6062                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  6063                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  6064                                  	; 14/01/2023
  6065                                  	; 06/06/2023
  6066                                  	;mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  6067                                  
  6068                                  	; MSDOS 3.3 & MSDOS 6.0
  6069                                  notwidenv:
  6070 00001616 FC                      	cld
  6071 00001617 A3[6A1E]                	mov	[AUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6072                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6073                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  6074                                  	
  6075                                  	; 22/07/2024
  6076                                  	; 06/06/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6077                                  	;mov	[KAUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6078                                  
  6079                                  nocomdrv:
  6080 0000161A E896FA                  	call	SetVect        ; Set the vectors
  6081                                  
  6082                                  ; parsing starts here
  6083                                  
  6084                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6085                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16C9h - CODERES:0989h)
  6086                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6087                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:17E8h - CODERES:0998h)
  6088                                  	; MSDOS 6.0
  6089 0000161D 0E                      	push	cs
  6090 0000161E 0E                      	push	cs
  6091 0000161F 1F                      	pop	ds
  6092 00001620 07                      	pop	es
  6093                                  	;assume ds:ResGroup,es:ResGroup
  6094                                  
  6095 00001621 BE8000                  	mov	si,80h				; get command line
  6096 00001624 AC                      	lodsb					; get length of line
  6097 00001625 89F7                    	mov	di,si				; get line position in di
  6098 00001627 30E4                    	xor	ah,ah				; ax = length of command line
  6099                                  
  6100                                  ; insure that the command line correctly ends with a cr
  6101                                  
  6102 00001629 01C7                    	add	di,ax				; go to end of command line
  6103 0000162B C6050D                          mov	byte [di],0Dh			; insert a carriage return
  6104 0000162E 31C9                    	xor	cx,cx				; clear cx
  6105 00001630 890E[841F]                      mov	[num_positionals],cx		; initialize positionals
  6106                                  
  6107                                  ; Scan the command line looking for the parameters
  6108                                  
  6109                                  Parse_command_line:
  6110                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  6111 00001634 BF[DA1E]                	mov	di,PARSE_COMMAND
  6112 00001637 8B0E[841F]              	mov	cx,[num_positionals]		; Get number of positionals
  6113 0000163B 31D2                    	xor	dx,dx				; clear dx
  6114 0000163D 8936[861F]                      mov	[old_parse_ptr],si		; save position before calling parser
  6115                                  	;call	dword ptr Init_Parse
  6116 00001641 FF1E[CE1E]              	call	far [Init_Parse]		; call parser
  6117 00001645 890E[841F]                      mov     [num_positionals],cx		; Save number of positionals
  6118                                  	; 29/01/2023
  6119                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  6120                                          ;cmp	ax,-1
  6121                                  	;jne	short t1
  6122                                  	; 10/06/2023
  6123 00001649 40                      	inc	ax	 ; cmp ax,-1
  6124 0000164A 7503                    	jnz	short t1 ; 0FFFFh -> 0
  6125                                  	; ax = 0
  6126 0000164C E93202                  	jmp     ArgsDone                        ; yes - exit
  6127                                  t1:	
  6128                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  6129                                  	;;cmp	ax,0
  6130                                  	;and	ax,ax
  6131                                  	; 10/06/2023
  6132 0000164F 48                      	dec	ax  ; cmp ax,0
  6133 00001650 7450                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  6134                                  
  6135                                  ; Before issuing error message - make sure switch is not /C
  6136                                  
  6137                                  parse_line_error:
  6138                                  	; 14/01/2023
  6139                                  	;push	si				; save line position
  6140                                  	;push	ax				; save error number
  6141                                  	;cmp	ax,3
  6142 00001652 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  6143                                          ;jnz	short parse_line_error_disp	; No - just issue message
  6144 00001655 7533                    	jne	short parse_line_error_disp2
  6145 00001657 56                      	push	si ; **				; save line position
  6146 00001658 50                      	push	ax ; *				; save error number
  6147 00001659 89F7                    	mov	di,si				; Get terminating pointer in DI
  6148 0000165B 8B36[861F]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  6149                                  
  6150                                  init_chk_delim:
  6151 0000165F 39FE                    	cmp	si,di				; at end of parsed parameter?
  6152 00001661 7425                            je	short parse_line_error_disp	; Yes - just display message
  6153 00001663 AC                      	lodsb					;
  6154 00001664 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  6155                                  	;cmp	al,space_chr ; 14/01/2023
  6156                                  	;;cmp	al,[space]			; Skip blank spaces
  6157 00001666 74F7                    	je	short init_chk_delim		;
  6158                                  	;cmp	al,9
  6159 00001668 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  6160 0000166A 74F3                    	je	short init_chk_delim		;
  6161                                  
  6162 0000166C 3A06[F003]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  6163 00001670 7516                            jne	short parse_line_error_disp	; No - just issue message
  6164 00001672 AC                      	lodsb					; Get the char after the switch
  6165                                  
  6166 00001673 E8A004                  	call	iupconv 			; upper case it
  6167                                  
  6168                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  6169                                          ;jne	short check_k_too ; MSDOS 6.0	;
  6170                                  	; 16/04/2023
  6171 00001676 3C43                    	cmp	al,'C' ; scswitch
  6172                                  	;jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  6173                                  	; 06/06/2023
  6174                                  	; MSDOS 6.22 COMMAND.COM
  6175 00001678 7505                    	jne	short check_k_too
  6176 0000167A 5A                      	pop	dx ; *				; even up stack
  6177 0000167B 5A                      	pop	dx ; **				; even up stack
  6178 0000167C E9B100                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  6179                                  
  6180                                  	; MSDOS 6.0
  6181                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6182                                  check_k_too:
  6183                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  6184                                          ;jne	short parse_line_error_disp	;
  6185                                  	; 06/06/2023
  6186 0000167F 3C4B                    	cmp	al,'K'
  6187 00001681 7505                    	jne	short parse_line_error_disp
  6188 00001683 5A                      	pop	dx ; *				; even up stack
  6189 00001684 5A                      	pop	dx ; **				; even up stack
  6190 00001685 E9A100                          jmp	SetKSwitch			; Yes - go set COMMAND /K
  6191                                  
  6192                                  parse_line_error_disp:
  6193                                  	; 14/01/2023
  6194 00001688 58                      	pop	ax ; *				; restore error number
  6195 00001689 5E                      	pop	si ; **				; restore line position
  6196                                  parse_line_error_disp2:
  6197 0000168A 89C2                    	mov	dx,ax				; get message number
  6198 0000168C E82B04                  	call	RPrintParse
  6199 0000168F E8A1FC                  	call	crlf
  6200 00001692 EBA0                            jmp     short Parse_command_line        ; continue parsing
  6201                                  
  6202                                  ; 16/04/2023
  6203                                  %if 1
  6204                                  SetMSwitch:
  6205                                          ;cmp	byte [ext_msg],1
  6206 00001694 803E[D51E]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6207                                  	; 16/04/2023
  6208                                  	;jnz	short setMswitchok		; no - set it
  6209                                  	;;mov	ax,1
  6210                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6211                                  	;jmp	parse_line_error                ; go issue error message
  6212                                  	; 16/04/2023
  6213 00001699 7458                    	je	short parse_line_error_j
  6214                                  setMswitchok:
  6215                                          ;mov	byte [ext_msg],1
  6216 0000169B C606[D51E]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6217                                  	; 06/06/2023
  6218 000016A0 EB92                    	jmp	short Parse_command_line	; keep parsing
  6219                                  %endif
  6220                                  
  6221                                  parse_cont:
  6222                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6223                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6224                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6225                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:1869h - CODERES:0A19h)
  6226                                  
  6227                                  	; MSDOS 6.0
  6228                                  
  6229                                  ; See if a switch was entered
  6230                                  ;
  6231                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6232                                  
  6233 000016A2 813E[7D1F][151F]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6234 000016A8 7433                    	je	short SetFSwitch		; yes go set fail switch
  6235 000016AA 813E[7D1F][091F]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6236 000016B0 743A                    	je	short SetPSwitch		; yes go set up PERMCOM
  6237 000016B2 813E[7D1F][211F]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6238 000016B8 745C                    	je	short SetDSwitch		; yes go set date switch
  6239 000016BA 813E[7D1F][461F]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6240 000016C0 746E                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6241                                  	; 06/06/2023
  6242                                  	; MSDOS 6.0 only!
  6243 000016C2 813E[7D1F][6C1F]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6244 000016C8 745F                            je	short SetKSwitch		; yes go set up SINGLECOM
  6245                                  	;
  6246 000016CA 813E[7D1F][2D1F]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6247 000016D0 746F                    	je	short SetESwitch		; yes go set up environment
  6248 000016D2 813E[7D1F][521F]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6249                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6250                                  	; 15/01/2023
  6251 000016D8 74BA                    	je	short SetMSwitch 
  6252 000016DA E98200                  	jmp	ChkOtherArgs		; Must be something else
  6253                                  
  6254                                  	; MSDOS 6.0
  6255                                  ;SetMSwitchjmp:
  6256                                  	;jmp	SetMSwitch
  6257                                  	
  6258                                  	; MSDOS 6.0
  6259                                  SetFSwitch:
  6260 000016DD 803E[4702]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6261                                  	; 16/04/2023
  6262                                  	;jne	short failok		; no - set it
  6263                                  	;;mov	ax,1
  6264                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6265                                          ;jmp	parse_line_error        ; go issue error 
  6266                                  	; 16/04/2023
  6267 000016E2 740F                    	je	short parse_line_error_j
  6268                                  
  6269                                  	; MSDOS 3.3 & MSDOS 6.0
  6270                                  failok:
  6271 000016E4 C606[4702]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6272                                  	; MSDOS 3.3
  6273                                  	;jmp	short CHKARG
  6274                                  	; MSDOS 6.0
  6275 000016E9 E948FF                  	jmp	Parse_command_line
  6276                                  
  6277                                  ;CHECKPSWITCH:
  6278                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6279                                  	;cmp	al,[letter_p]
  6280                                          ;jnz	short CHECKDSWITCH
  6281                                  
  6282                                  SetPSwitch:
  6283                                  
  6284                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6285                                  ; termination address.
  6286                                  
  6287                                  	; MSDOS 6.0
  6288 000016EC 803E[4002]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6289 000016F1 7406                    	jz	short permcomok		; no - set it
  6290                                  	; 16/04/2023
  6291                                  parse_line_error_j:
  6292                                          ;mov	ax,1
  6293 000016F3 B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6294 000016F6 E959FF                          jmp	parse_line_error	; go issue error 
  6295                                  
  6296                                  permcomok:
  6297                                  	; MSDOS 3.3 & MSDOS 6.0
  6298 000016F9 FE06[4002]              	inc	byte [PermCom]
  6299                                  	;mov	word [OLDTERM],LODCOM
  6300 000016FD C706[DE01][7E00]        	mov	word [OldTerm],LodCom_Trap
  6301                                  	;mov	[OLDTERM+2],ds
  6302 00001703 8C1E[E001]              	mov	[OldTerm+2],ds
  6303                                  
  6304                                  ; make sure that we display the date and time. if the flag was not
  6305                                  ; initialized, set it to indicate yes, do prompt.
  6306                                  
  6307                                  	; MSDOS 3.3
  6308                                  	;cmp	byte [PRDATTM],-1
  6309                                  	;jnz	short CHKARG
  6310                                  	;mov	byte [PRDATTM],0
  6311                                  	;jmp	short CHKARG
  6312                                  
  6313                                  	; MSDOS 6.0
  6314 00001707 803E[7B1E]FF            	cmp	byte [PRDATTM],-1
  6315 0000170C 7505                    	jne	short Parse_command_line_jmp
  6316 0000170E C606[7B1E]00            	mov	byte [PRDATTM],0
  6317                                  Parse_command_line_jmp:
  6318 00001713 E91EFF                  	jmp     Parse_command_line	; keep parsing
  6319                                  
  6320                                  ;COMRETURNSJ:
  6321                                  ;	; MSDOS 3.3
  6322                                  ;	JMP	ARGSDONE
  6323                                  
  6324                                  ;CHECKDSWITCH:
  6325                                  	;;cmp	al,'d'
  6326                                          ;cmp	al,[letter_d]
  6327                                  	;jnz	short CHECKCSWITCH
  6328                                  
  6329                                  SetDSwitch:
  6330                                  
  6331                                  ; Flag no date/time prompting.
  6332                                  
  6333                                  	; MSDOS 6.0
  6334 00001716 803E[D71E]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6335                                  	; 16/04/2023
  6336                                  	;jz	short setdateok		; no - set it
  6337                                          ;;mov	ax,1
  6338                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6339                                          ;jmp	parse_line_error	; go issue error message
  6340                                  	; 16/04/2023
  6341 0000171B 75D6                    	jnz	short parse_line_error_j
  6342                                  setdateok:
  6343 0000171D FE06[D71E]              	inc	byte  [dswitch]		; indicate /D entered
  6344                                  
  6345                                  	; MSDOS 3.3 & MSDOS 6.0
  6346 00001721 C606[7B1E]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6347                                  	; MSDOS 3.3
  6348                                  	;jmp	short CHKARG
  6349                                  	; MSDOS 6.0
  6350 00001726 E90BFF                  	jmp     Parse_command_line	; continue parsing
  6351                                  
  6352                                  	; 15/01/2023
  6353                                  	; MSDOS 6.0 
  6354                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6355                                  SetKSwitch:
  6356 00001729 C606[4102]00            	mov	byte [SemiPermCom],0
  6357 0000172E EB05                    	jmp	short SetSorKSwitch
  6358                                  
  6359                                  ;CHECKCSWITCH:
  6360                                  	;;cmp	al,'c'
  6361                                  	;cmp	al,[letter_c]
  6362                                          ;jnz	short CHECKESWITCH
  6363                                  
  6364                                  SetSSwitch:
  6365                                  ;SETCSWITCH:
  6366                                  
  6367                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6368                                  
  6369 00001730 C606[4002]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6370                                  SetSorKSwitch:	; 06/06/2023
  6371 00001735 8936[4302]              	mov	[SingleCom],si		; Point to the rest of the command line
  6372 00001739 C606[7B1E]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6373                                  ;COMRETURNSJ: ; 24/09/2018
  6374 0000173E E94001                  	jmp     ArgsDone
  6375                                  
  6376                                  ;CHECKESWITCH:
  6377                                  	;cmp	al,'e'
  6378                                  	;jnz	short CHKARG
  6379                                  
  6380                                  ; Look for environment-size setting switch
  6381                                  
  6382                                  ; The environment size is represented in decimal bytes and is
  6383                                  ; converted into paragraphs (rounded up to the next paragraph).
  6384                                  
  6385                                  SetESwitch:
  6386                                  	; MSDOS 6.0
  6387 00001741 803E[D61E]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6388                                  	; 16/04/2023
  6389                                  	;jz	short eswitchok		; no - set it
  6390                                  	;;mov	ax,1
  6391                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6392                                          ;jmp	parse_line_error	; go issue error message
  6393                                  	; 16/04/2023
  6394 00001746 75AB                    	jnz	short parse_line_error_j
  6395                                  eswitchok:
  6396 00001748 FE06[D61E]              	inc	byte [eswitch]		; indicate /E entered 	
  6397                                  
  6398                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6399                                  	; 15/01/2023 - Retro DOS v4.1 (& v4.1) - MSDOS 5.0 COMMAND.COM
  6400                                  	; MSDOS 6.0
  6401                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6402 0000174C BF[7F1F]                        mov	di,COMND1_ADDR
  6403 0000174F 8B1D                    	mov     bx,[di]				; into bx
  6404                                  
  6405 00001751 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6406 00001754 B104                    	mov	cl,4				; convert to pargraphs
  6407 00001756 D3EB                    	shr	bx,cl				; by right 4
  6408                                  
  6409 00001758 891E[C21E]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6410 0000175C E9D5FE                  	jmp	Parse_command_line		; continue parsing command line
  6411                                  
  6412                                  ; 16/04/2023
  6413                                  %if 0
  6414                                  SetMSwitch:
  6415                                          ;cmp	byte [ext_msg],1
  6416                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6417                                  	jnz	short setMswitchok		; no - set it
  6418                                  	;mov	ax,1
  6419                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6420                                  	jmp	parse_line_error                ; go issue error message
  6421                                  setMswitchok:
  6422                                          ;mov	byte [ext_msg],1
  6423                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6424                                  	jmp	Parse_command_line              ; keep parsing
  6425                                  %endif
  6426                                  
  6427                                  ;ArgsDoneJ:
  6428                                  	;jmp	ArgsDone
  6429                                  
  6430                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6431                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6432                                  
  6433                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6434                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:196Dh - CODERES:0B1Dh)
  6435                                  ChkOtherArgs:
  6436                                  
  6437                                  ; We have a non-switch character here.
  6438                                  
  6439                                  	; MSDOS 6.0
  6440 0000175F 1E                      	push	ds ; ****			;
  6441 00001760 56                      	push	si ; *** 			; save place in command line
  6442 00001761 C536[7F1F]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6443                                  	;assume	ds:nothing			;
  6444                                  
  6445 00001765 89F2                    	mov	dx,si				; put in dx also
  6446 00001767 B8023D                  	mov	ax,3D02h
  6447                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6448 0000176A CD21                    	int	21h
  6449 0000176C 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6450 0000176E 89C3                    	mov	bx,ax
  6451 00001770 B80044                  	mov	ax,4400h
  6452                                  	;mov	ax,IOCTL shl 8
  6453 00001773 CD21                    	int	21h
  6454 00001775 F6C280                  	test	dl,80h
  6455 00001778 7506                    	jnz	short IsaDevice
  6456                                  BadSetCon:
  6457 0000177A B43E                    	mov	ah,3Eh
  6458                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6459 0000177C CD21                    	int	21h
  6460 0000177E EB4E                    	jmp	short ChkSrchSpec
  6461                                  
  6462                                  	; 15/01/2023
  6463                                  IsaDevice:
  6464                                  	; MSDOS 3.3 & MSDOS 6.0
  6465 00001780 30F6                    	xor	dh,dh
  6466 00001782 80CA03                  	or	dl,3				; Make sure has CON attributes
  6467                                  	;mov	ax,(IOCTL shl 8) or 1
  6468 00001785 B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6469 00001788 CD21                    	int	21h
  6470                                  	;
  6471                                  	; 15/01/2023
  6472 0000178A 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6473                                  	; 25/09/2018
  6474                                  	;pop	dx ; *
  6475                                  	;pop	dx ; **
  6476                                  	;
  6477                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6478                                  	
  6479 0000178C 89DA                    	mov	dx,bx				; Save new handle
  6480                                  
  6481                                  	; MSDOS 6.0
  6482 0000178E 26803E[1124]01          	cmp	byte [es:DevFlag],1
  6483 00001794 742A                    	jz	short DevErr
  6484                                  
  6485                                  	; MSDOS 3.3
  6486                                          ;pop	bx ; *				; Throw away saved SI
  6487                                          ;pop	bx ; **				; Throw away saved CX
  6488                                  
  6489                                  	; MSDOS 3.3 & MSDOS 6.0
  6490 00001796 51                      	push	cx ; **
  6491 00001797 B90300                  	mov	cx,3
  6492 0000179A 31DB                    	xor	bx,bx
  6493                                  
  6494                                  	; 15/01/2023
  6495                                  rcclloop:
  6496 0000179C B43E                    	mov	ah,3Eh
  6497                                  	;mov	ah,CLOSE ; 3Eh
  6498 0000179E CD21                    	int	21h
  6499 000017A0 43                      	inc	bx
  6500 000017A1 E2F9                    	loop	rcclloop
  6501                                  
  6502 000017A3 89D3                    	mov	bx,dx				; New device handle
  6503 000017A5 B445                    	mov	ah,45h
  6504                                  	;mov	ah,XDUP ; 45h
  6505 000017A7 CD21                    	int	21h				; Dup to 0
  6506 000017A9 B445                    	mov	ah,45h
  6507                                  	;mov	ah,XDUP
  6508 000017AB CD21                    	int	21h				; Dup to 1
  6509 000017AD B445                    	mov	ah,45h
  6510                                  	;mov	ah,XDUP
  6511 000017AF CD21                    	int	21h				; Dup to 2
  6512 000017B1 B43E                    	mov	ah,3Eh
  6513                                  	;mov	ah,CLOSE
  6514 000017B3 CD21                    	int	21h				; Close initial handle
  6515                                  	
  6516 000017B5 59                      	pop	cx ; **
  6517                                  	
  6518                                  	; MSDOS 6.0
  6519 000017B6 5E                      	pop	si ; ***			; restore position of command line
  6520 000017B7 1F                      	pop	ds ; ****			;
  6521                                  
  6522                                  ; Register the fact that we already have redirected the output
  6523                                  ; and can not do it again
  6524                                  
  6525 000017B8 26FE06[1124]            	inc	byte [es:DevFlag]		
  6526 000017BD E974FE                  	jmp	Parse_command_line		; continue parsing
  6527                                  
  6528                                  	; MSDOS 3.3
  6529                                  	;jcxz	ARGSDONEJ2
  6530                                  	;jmp	CHKARG
  6531                                  
  6532                                  	; MSDOS 6.0
  6533                                  DevErr:
  6534 000017C0 5E                      	pop	si ; ***
  6535 000017C1 1F                      	pop	ds ; ****
  6536 000017C2 BA0100                  	mov	dx,1
  6537 000017C5 E8F202                          call	RPrintParse                     ; "Too many parameters"
  6538 000017C8 E868FB                          call	crlf
  6539 000017CB E966FE                  	jmp	Parse_command_line
  6540                                  
  6541                                  ChkSrchSpec:				; Not a device, so must be directory spec
  6542                                  	; MSDOS 6.0
  6543 000017CE 26803E[1224]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  6544 000017D4 74EA                            jz	short DevErr			; yes, error
  6545                                  	
  6546 000017D6 26FE06[1224]                    inc	byte [es:PathFlag]		; mark that we have a path
  6547                                  
  6548                                  ; We have to override the passed environment. Allocate a buffer for use now.
  6549                                  ; This buffer will later be replaced by a proper environment
  6550                                  
  6551                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  6552                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  6553                                  	; 06/06/2023
  6554                                  	;mov	ax,[ss:EnvirSeg]
  6555                                  	
  6556                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6557                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19E9h
  6558                                  	;
  6559                                  	; MSDOS 6.0
  6560 000017DB E8B304                  	call	alloc_env                       ; environment buffer
  6561                                  
  6562                                  ; 06/06/2023
  6563                                  %if 0
  6564                                  	; 15/01/2023
  6565                                  	; MSDOS 5.0
  6566                                  	cmp	byte [ss:AllocedEnv],1
  6567                                  	mov	byte [ss:AllocedEnv],0
  6568                                  	jne     short env_alloced
  6569                                  	call	alloc_env
  6570                                  	mov	[ss:EnvirSeg],ax
  6571                                  %endif
  6572                                  
  6573                                  env_alloced:
  6574                                  	; MSDOS 5.0 & MSDOS 6.0
  6575 000017DE 8EC0                    	mov	es,ax
  6576                                  	;assume	es:nothing
  6577 000017E0 56                      	push	si ; **				; remember location of file
  6578 000017E1 31C9                    	xor	cx,cx				; clear cx for counting
  6579                                  	
  6580                                  	; 15/01/2023
  6581                                  countloop:
  6582 000017E3 AC                      	lodsb					; get a character
  6583 000017E4 41                      	inc	cx				; increment counter
  6584                                          ;;cmp	al,0
  6585                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  6586                                  	;jne	short countloop			; no - keep counting
  6587 000017E5 08C0                    	or	al,al	
  6588 000017E7 75FA                    	jnz	short countloop
  6589                                  	; 06/03/2023
  6590                                  	; al = 0 ; (*) 
  6591                                  
  6592                                  	;;;;mov	al,[Space]
  6593                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  6594                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6595                                  	; 16/04/2023
  6596                                  	;mov	al,20h ; ' ' 
  6597 000017E9 4E                      	dec	si				; move back one
  6598                                          ;mov	[si],al				; put a space at end of line
  6599 000017EA C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  6600                                  
  6601                                  ; We now know how long the new pathspec for command.com is. Time to
  6602                                  ; figure out how long the current COMSPEC setting is, and then to move
  6603                                  ; all the environment data up, throwing that COMSPEC setting away, and
  6604                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  6605                                  ; where the filespec exists in the environment) is updated as well.
  6606                                  
  6607                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6608                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19FEh
  6609                                  
  6610                                  	; MSDOS 6.0
  6611 000017ED 51                      	push	cx ; * 				;
  6612 000017EE B90080                          mov	cx,ENVBIG ; 32768		;
  6613 000017F1 368B3E[AB1E]                    mov	di,[ss:ComspOffset]		; get location of COMSPEC
  6614                                          ;mov	al,0                            ;
  6615                                  	; 06/06/2023
  6616                                  	; al = 0 ; (*)
  6617 000017F6 F2AE                    	repne	scasb                           ; find the end of COMSPEC
  6618 000017F8 89FE                            mov	si,di                           ;
  6619                                  comp_endenv:					;
  6620 000017FA AE                      	scasb					; end of env?
  6621 000017FB 7404                    	je	short got_endenv		; yes
  6622 000017FD F2AE                    	repne	scasb				;
  6623 000017FF EBF9                    	jmp	short comp_endenv		;
  6624                                  got_endenv:					;
  6625 00001801 89F9                    	mov	cx,di				;
  6626 00001803 29F1                    	sub	cx,si				;
  6627 00001805 368B3E[AB1E]            	mov	di,[ss:ComspOffset]		;
  6628 0000180A 83EF08                  	sub	di,ComspStrLen	; sub di,8	;
  6629 0000180D 1E                      	push	ds ; +				;
  6630 0000180E 06                      	push	es				;
  6631 0000180F 1F                      	pop	ds				;
  6632 00001810 F3A4                    	rep	movsb				;
  6633 00001812 4F                      	dec	di				; copy in new COMSPEC=
  6634 00001813 0E                      	push	cs				;
  6635 00001814 1F                      	pop	ds				;
  6636                                          ;assume ds:RESGROUP			;
  6637                                  	;mov    si,offset RESGROUP:ComspString	;
  6638 00001815 BE[AD1E]                	mov	si,ComspString			; "COMSPEC=\COMMAND.COM"
  6639                                  	;mov	cx,ComspStrLen	; mov cx,8	;
  6640 00001818 B108                            mov	cl,ComspStrLen	; mov cl,8
  6641 0000181A F3A4                    	rep	movsb				;
  6642 0000181C 893E[AB1E]              	mov	[ComspOffset],di		;
  6643 00001820 1F                      	pop	ds ; + 				;
  6644                                          ;assume ds:nothing			;
  6645 00001821 59                      	pop	cx ; *				;
  6646                                  	;
  6647 00001822 5E                      	pop	si ; **				; get new comspec location back
  6648                                  
  6649                                  	;; MSDOS 3.3 COMMAND.COM
  6650                                  	;;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  6651                                  	;;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  6652                                  	;;mov	cl,4
  6653                                  	;;shr	ax,cl
  6654                                  	;;mov	dx,ds
  6655                                  	;;add	ax,dx
  6656                                  	;;mov	[ENVIRSEG],ax
  6657                                  	;;mov	es,ax
  6658                                  	;;;mov	al,' '
  6659                                  	;;mov	al,[SPACE_CHR]
  6660                                  	;;mov	[si-1],al
  6661                                  	;;pop	si ; **				; Remember location
  6662                                  	;;pop	cx ; *				; and count
  6663                                  	;;;mov	di,[ECOMLOC]
  6664                                  	;;mov	di,[COMSPOFFSET]
  6665                                  
  6666                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6667                                  	;; 15/01/2023
  6668                                  	;; MSDOS 5.0 COMMAND.COM
  6669                                  	;pop	si ; **
  6670                                  	;;mov	di,14
  6671                                  	;mov	di,ECOMSPEC ; mov di,0Eh
  6672                                  
  6673                                  ComtrLoop:
  6674                                  	; MSDOS 3.3 & MSDOS 6.0
  6675 00001823 AC                      	lodsb
  6676 00001824 49                      	dec	cx
  6677                                  	;;;;cmp	al,' '
  6678                                  	;;;cmp	al,[space_chr]
  6679                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  6680                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6681                                  	; 16/04/2023
  6682 00001825 3C20                    	cmp	al,20h ; ' ' ; space_chr
  6683 00001827 7405                    	je	short SetComsr
  6684                                  	; MSDOS 3.3
  6685                                  	;cmp	al,9
  6686                                  	;je	short SetComsr
  6687                                  	; MSDOS 3.3 & MSDOS 6.0
  6688 00001829 AA                      	stosb
  6689 0000182A E302                    	jcxz	SetComsr
  6690 0000182C EBF5                    	jmp	short ComtrLoop
  6691                                  
  6692                                  SetComsr:
  6693                                  	; 15/01/2023
  6694                                  	; MSDOS 6.0
  6695 0000182E 51                      	push	cx ; **
  6696 0000182F 0E                      	push	cs				; Get local segment
  6697 00001830 1F                      	pop	ds				;
  6698                                  	;assume	ds:ResGroup			;
  6699 00001831 1E                      	push	ds ; *
  6700                                  	;mov	si,offset ResGroup:ComSpect
  6701 00001832 BE[5C1E]                	mov	si,COMSPECT ; "\COMMAND.COM"
  6702 00001835 B90E00                  	mov	cx,14
  6703 00001838 268A45FF                	mov	al,[es:di-1]
  6704 0000183C 3A06[F103]              	cmp	al,[RDirChar]
  6705 00001840 7502                    	jne	short iNotRoot
  6706 00001842 46                      	inc	si				; Don't make a double /
  6707 00001843 49                      	dec	cx
  6708                                  	
  6709                                  	; MSDOS 3.3
  6710                                  	;push	si
  6711                                  	;push	cx
  6712                                  	;push	ds
  6713                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  6714                                  	;mov	cx,14
  6715                                  	;mov	al,[es:di-1]
  6716                                  	;call	PATHCHRCMPR
  6717                                  	;jnz	short INOTROOT			
  6718                                  	;inc	si				; Don't make a double /
  6719                                  	;dec	cx
  6720                                  
  6721                                  iNotRoot:
  6722                                  	; MSDOS 3.3 & MSDOS 6.0
  6723 00001844 F3A4                    	rep	movsb
  6724                                  
  6725                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  6726                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6727                                  	; MSDOS 6.0 
  6728 00001846 8B16[AB1E]              	mov	dx,[ComspOffset] ; [COMSPOFFSET]
  6729                                  	; 15/01/2023
  6730                                  	;;mov	dx,14
  6731                                  	;mov	dx,ECOMSPEC ; mov dx,0Eh ; MSDOS 5.0 COMMAND.COM
  6732                                  
  6733 0000184A 06                      	push	es
  6734 0000184B 1F                      	pop	ds
  6735                                  	;;mov	ax,OPEN shl 8
  6736                                  	;mov	ax,OPEN*256 ; 3D00h
  6737 0000184C B8003D                  	mov	ax,3D00h ; 15/01/2023
  6738 0000184F CD21                    	int	21h				; Open COMMAND.COM
  6739 00001851 1F                      	pop	ds ; *
  6740 00001852 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  6741 00001854 89C3                    	mov	bx,ax				; Handle
  6742 00001856 B43E                    	mov	ah,3Eh ; 15/01/2023
  6743                                  	;mov	ah,CLOSE ; 3Eh
  6744 00001858 CD21                    	int	21h				; Close COMMAND.COM
  6745                                  SetComsrRet:
  6746                                  	; 15/01/2023
  6747 0000185A 59                      	pop	cx ; **
  6748 0000185B 5E                      	pop	si ; ***
  6749                                  
  6750                                  	; MSDOS 6.0
  6751 0000185C 1F                      	pop	ds ; ****			;
  6752                                  	;assume	ds:ResGroup			;
  6753                                  	;
  6754 0000185D 0E                      	push	cs				; Make sure local ES is
  6755 0000185E 07                      	pop	es				;  restored
  6756 0000185F E9D2FD                  	jmp	Parse_command_line		; continue parsing command line
  6757                                  
  6758                                  	; MSDOS 3.3
  6759                                  ;ARGSDONEJ2:
  6760                                  	;jcxz	ARGSDONE
  6761                                  	;jmp	CHKARG
  6762                                  
  6763                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6764                                  SetComsrBad:
  6765                                  	; MSDOS 3.3 & MSDOS 6.0
  6766                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  6767 00001862 BA[1A20]                	mov	dx,BADCOMLKMES
  6768                                  
  6769                                  ;	Note: we're about to make a near call to TriageError, which
  6770                                  ;	lives in a different segment and group. Some linkers will
  6771                                  ;	generate a warning like "Possible fix-up overflow". We're
  6772                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  6773                                  ;	we're still all together.
  6774                                  
  6775                                  	; 16/01/2023
  6776                                  	;TRIAGEERROR equ TRANSTART+TriageError
  6777                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  6778                                  
  6779                                  	; 06/06/2023
  6780                                  	TRIAGEERROR equ TRANSTART+TriageError
  6781                                  	;(MSDOS 6.22 COMMAND.COM, 26E0h+333Ch)
  6782                                  
  6783                                  	;;call	50B2h ; MSDOS 5.0 COMMAND.COM
  6784                                  	;call	5A1Ch ; MSDOS 6.22 COMMAND.COM
  6785 00001865 E8(1A57)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  6786                                  				; in original MSDOS 3.3 COMMAND.COM
  6787                                  
  6788                                  			; TriageError procedure is at offset 50B2h
  6789                                  			; in original MSDOS 5.0 COMMAND.COM	
  6790 00001868 83F841                  	cmp	ax,65
  6791 0000186B 7503                    	jne	short doprt
  6792                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  6793 0000186D BA[4320]                	mov	dx,BADCOMACCMSG
  6794                                  doprt:
  6795 00001870 E8C3FA                  	call	RPrint
  6796                                  	;mov	si,offset ResGroup:ComSpect
  6797 00001873 BE[5C1E]                	mov     si,COMSPECT ; "\COMMAND.COM"
  6798                                  	;;mov	di,[ECOMLOC]
  6799                                  	; 06/06/2023
  6800 00001876 8B3E[AB1E]              	mov	di,[ComspOffset] ; MSDOS 6.22 COMMAND.COM
  6801                                  	; 16/01/2023
  6802                                  	;mov	di,ECOMSPEC ; mov di,0Eh ; MSDOS 5.0 COMMAND.COM
  6803 0000187A B90E00                  	mov	cx,14
  6804 0000187D F3A4                    	rep	movsb				; get my default back
  6805                                  
  6806 0000187F EBD9                    	jmp	short SetComsrRet
  6807                                  
  6808                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6809                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  6810                                  
  6811                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6812                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1A99h (CODERES:0C49h)
  6813                                  ArgsDone:
  6814                                  	; MSDOS 6.0
  6815 00001881 8E06[DC03]              	mov	es,[EnvirSeg]			; get environment back
  6816                                  	;assume	es:nothing			;
  6817                                  
  6818                                  	; MSDOS 3.3 & MSDOS 6.0
  6819 00001885 803E[4002]00                    cmp	byte [PermCom],0
  6820 0000188A 742E                            jz	short ComReturns
  6821                                  
  6822 0000188C 06                      	push	es				; Save environment pointer
  6823 0000188D B450                    	mov	ah,50h
  6824                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  6825 0000188F 8CDB                    	mov	bx,ds
  6826 00001891 8EC3                    	mov	es,bx
  6827 00001893 CD21                    	int	21h				; current process is me
  6828 00001895 BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  6829                                  	;;mov	ax,offset RESGROUP:LODCOM
  6830                                  	;mov	ax,LODCOM
  6831                                  	; 16/01/2023
  6832 00001898 B8[7E00]                	mov	ax,LodCom_Trap
  6833 0000189B AB                              stosw
  6834 0000189C 8CD8                            mov	ax,ds
  6835 0000189E AB                              stosw
  6836                                  	;;mov	ax,offset RESGROUP:CONTC
  6837                                  	;mov	ax,CONTC
  6838                                  	; 16/01/2023
  6839 0000189F B8[4A00]                	mov	ax,Ctrlc_Trap
  6840 000018A2 AB                              stosw
  6841 000018A3 8CD8                            mov	ax,ds
  6842 000018A5 AB                              stosw
  6843                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  6844                                  	;mov	ax,CRITERR
  6845                                  	; 16/01/2023
  6846 000018A6 B8[5500]                	mov	ax,CritErr_Trap
  6847 000018A9 AB                      	stosw
  6848 000018AA 8CD8                    	mov     ax,ds
  6849 000018AC AB                      	stosw
  6850                                  	;;mov	word ptr ds:16h,ds
  6851                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  6852 000018AD 8C1E1600                	mov	[PDB.PARENT_PID],ds
  6853                                          ;;mov	dx,offset RESGROUP:Int_2e
  6854                                  	;mov	dx,Int_2e
  6855                                          ; 16/01/2023
  6856 000018B1 BA[3F00]                	mov	dx,Int2e_Trap
  6857 000018B4 B82E25                  	mov	ax,252Eh
  6858                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  6859                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  6860 000018B7 CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  6861                                  			; AL = interrupt number
  6862                                  			; DS:DX = new vector to be used for specified interrupt
  6863 000018B9 07                              pop	es				; Remember environment
  6864                                  	
  6865                                  ComReturns:
  6866                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  6867 000018BA A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  6868                                  	; 16/01/2023
  6869 000018BD A3[DC01]                	mov	[Parent],ax			; Save parent
  6870                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  6871 000018C0 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  6872                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  6873 000018C4 A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  6874 000018C7 A3[3D02]                        mov	[Io_Save],ax		; Get the default stdin and out
  6875 000018CA 8C1E[E003]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  6876 000018CE 8C1E[E403]                      mov	[Com_Fcb1+2],ds
  6877 000018D2 8C1E[E803]              	mov	[Com_Fcb2+2],ds
  6878                                          ;mov	di,offset ResGroup:ComSpec
  6879 000018D6 BF[E901]                        mov	di,ComSpec
  6880                                  
  6881                                  	;;mov	si,[ECOMLOC]
  6882                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6883 000018D9 8B36[AB1E]              	mov	si,[ComspOffset]
  6884                                  	; 16/01/2023 - MSDOS 5.0 COMMAND.COM
  6885                                  	;mov	si,ECOMSPEC ; mov si,0Eh
  6886                                  
  6887 000018DD 803E[881E]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  6888                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  6889                                  	
  6890 000018E2 8CD8                    	mov	ax,ds				; Xchg es,ds
  6891 000018E4 06                      	push	es
  6892 000018E5 1F                      	pop	ds
  6893 000018E6 8EC0                    	mov	es,ax
  6894                                  
  6895                                  	; 06/06/2023
  6896 000018E8 7517                    	jne	short CopyComsp ; MSDOS 6.0
  6897                                  	; 16/01/2023	
  6898                                  	;je	short CopyComsp ; MSDOS 5.0
  6899                                  	;;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  6900                                  
  6901 000018EA 0E                              push	cs
  6902 000018EB 1F                              pop	ds
  6903                                  
  6904                                          ;mov	si,offset ResGroup:ComspString
  6905 000018EC BE[AD1E]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6906 000018EF 06                      	push	es
  6907 000018F0 57                      	push	di
  6908 000018F1 E8D701                  	call	IfindE
  6909 000018F4 89FE                    	mov	si,di
  6910 000018F6 06                      	push	es
  6911 000018F7 1F                      	pop	ds
  6912 000018F8 5F                      	pop	di
  6913 000018F9 07                      	pop	es
  6914 000018FA 7305                            jnc	short CopyComsp
  6915                                  
  6916                                  	; 06/06/2023
  6917                                  	; MSDOS 6.0
  6918                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1B04h
  6919                                  ComSpecNofnd:
  6920                                  	;;mov	si,offset ResGroup:ComspString
  6921                                  	;mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6922                                  	;add	si,ComspStrLen ; add si,8
  6923 000018FC BE[B51E]                	mov	si,ComspString+ComspStrLen
  6924                                  	
  6925                                  	;; 21/01/2023
  6926                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  6927                                  	;;mov	si,0Eh
  6928                                  	;mov	si,ECOMSPEC
  6929                                  	
  6930 000018FF 0E                      	push	cs
  6931 00001900 1F                      	pop	ds	
  6932                                  
  6933                                  	; 21/01/2023
  6934                                  ;COMSPECNOFND:
  6935                                  	; MSDOS 3.3
  6936                                          ;;mov	si,[es:ECOMLOC]
  6937                                          ;mov	si,[es:COMSPOFFSET]
  6938                                  	;;add	si,offset RESGROUP:PATHSTRING
  6939                                          ;add	si,PATHSTRING ; "PATH="
  6940                                  	;push	cs
  6941                                  	;pop	ds
  6942                                  
  6943                                  CopyComsp:
  6944                                  	; 21/01/2023
  6945                                  ;COPYCOMSP:
  6946                                  	; MSDOS 3.3 & MSDOS 6.0
  6947                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  6948                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  6949 00001901 26893E[C801]            	mov	[es:PutBackComSpec],di
  6950 00001906 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  6951 0000190A 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  6952                                  	;;add	es:PutBackComSpec.SubstPtr,2
  6953                                  	;add	word [es:PUTBACKSUBSTPTR],2
  6954 0000190C 268306[C801]02          	add	word [es:PutBackComSpec],2
  6955                                  CopyComspLoop:
  6956 00001912 AC                      	lodsb
  6957 00001913 AA                      	stosb
  6958 00001914 08C0                    	or	al,al
  6959 00001916 75FA                    	jnz	short CopyComspLoop
  6960                                  
  6961 00001918 26893E[2902]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  6962 0000191D 26FF0E[2902]            	dec	word [es:ComSpec_End]
  6963 00001922 268A26[3202]            	mov	ah,[es:ComDrv]
  6964 00001927 80C440                  	add	ah,'A'-1 ; 40h
  6965 0000192A 268826[CD01]            	mov	[es:PutBackDrv],ah		; save drive letter
  6966                                  
  6967                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  6968                                  	
  6969                                  	; MSDOS 6.0
  6970 0000192F E81002                  	call	setup_for_messages		; set up parse and extended error messages
  6971                                  
  6972                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  6973                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  6974                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  6975                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  6976                                  ; the data otherwise it is just the data.
  6977                                   
  6978 00001932 E8AF02                  	call	Setup_res_end			; put resident size in ResSize
  6979                                  
  6980 00001935 0E                      	push	cs
  6981 00001936 1F                      	pop	ds
  6982                                  	;assume	ds:RESGROUP
  6983                                  
  6984                                  ;Public EnvMaximum
  6985                                          ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6986                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  6987                                          ; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6988                                  		; MSDOS 6.22 COMMAND.COM - RESGROUP:1B53h
  6989                                  
  6990                                  	; 21/01/2023
  6991                                  	; MSDOS 6.0
  6992                                  	;;mov	si,offset RESGROUP:TranStart
  6993                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  6994                                  	; 06/06/2023
  6995                                  	;;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM
  6996                                  	;mov	si,TRANSTART
  6997                                  	;add	si,100h
  6998                                  	; 23/04/2023
  6999 00001937 BE5026                  	mov	si,TRANSTART+100h
  7000                                  
  7001                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  7002                                  	;;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  7003                                  	; 06/06/2023
  7004                                  	;;mov	cx,9D53h	; MSDOS 6.22 COMMAND.COM	
  7005 0000193A B9[4198]                	mov	cx,TRANDATAEND-100h
  7006                                  
  7007 0000193D FC                      	cld
  7008 0000193E D1E9                    	shr	cx,1
  7009 00001940 31D2                    	xor	dx,dx
  7010                                  Ichksum:
  7011 00001942 AD                      	lodsw
  7012 00001943 01C2                    	add	dx,ax
  7013 00001945 83D200                  	adc	dx,0
  7014 00001948 E2F8                    	loop	Ichksum
  7015                                  
  7016 0000194A 8916[3502]                      mov	[Sum],dx			; store checksum
  7017                                  
  7018 0000194E 803E[7B1E]00                    cmp     byte [PRDATTM],0
  7019 00001953 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  7020                                  	
  7021                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  7022                                  
  7023                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  7024                                  	; 21/01/2023
  7025                                  	;mov	bx,4
  7026 00001955 BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  7027 00001958 B448                    	mov	ah,48h
  7028                                  	;mov	ah,ALLOC                        ;
  7029 0000195A CD21                            int	21h                             ;
  7030 0000195C 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  7031 0000195E A3[E701]                        mov	[Batch],ax			; save batch segment
  7032                                  
  7033                                  NoBatchSeg:
  7034                                  	; 21/01/2023
  7035                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7036 00001961 8B1E[DC03]              	mov	bx,[EnvirSeg]			; get old environment segment
  7037 00001965 891E[C61E]              	mov	[OldEnv],bx			; save it
  7038 00001969 C706[C81E]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7039 0000196F 8EDB                    	mov	ds,bx
  7040                                  	;assume	ds:nothing
  7041                                  	
  7042 00001971 31F6                    	xor	si,si
  7043 00001973 89F7                    	mov	di,si
  7044                                  
  7045                                  ; This is the maximum allowed size for the environment
  7046                                  
  7047                                  	; 21/01/2023
  7048                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7049                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7050                                  	;;mov	[ss:EnvMax],bx
  7051                                  	;shl	bx,1
  7052                                  	;shl	bx,1
  7053                                  	;shl	bx,1
  7054                                  	;shl	bx,1
  7055 00001975 BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7056 00001978 36891E[C41E]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7057 0000197D 4B                      	dec	bx				; dec by one to leave room for double 0
  7058 0000197E 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7059                                  						; no environment size error.
  7060                                  ;public NxtStr
  7061                                  NxtStr:
  7062 00001980 E81E01                  	call	GetStrLen			; get the size of the current env string
  7063                                  
  7064                                  ;Bugbug: Can use ss here to address UsedEnv
  7065                                  
  7066 00001983 1E                      	push	ds                              ; get addressability to environment
  7067 00001984 0E                              push	cs                              ;                       counter
  7068 00001985 1F                              pop	ds                              ;
  7069                                  	;assume	ds:ResGroup
  7070 00001986 010E[C81E]                      add	[UsedEnv],cx			; add the string length to env size
  7071 0000198A 1F                      	pop	ds                              ;
  7072                                  	;assume	ds:nothing
  7073                                  	
  7074 0000198B 83F901                  	cmp	cx,1				; end of environment was encountered.
  7075 0000198E 7405                    	je	short EnvExit
  7076 00001990 29CB                    	sub	bx,cx
  7077                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7078                                  	; 21/01/2023
  7079 00001992 73EC                    	jae	short NxtStr
  7080 00001994 42                      	inc	dx				; out of env space msg must be displayed
  7081                                  	;jmp	short EnvExit
  7082                                  
  7083                                  ;OkCpyStr:
  7084                                  	;jmp	short NxtStr
  7085                                  
  7086                                  EnvExit:
  7087 00001995 0E                      	push	cs
  7088 00001996 1F                      	pop	ds
  7089                                  	;assume	ds:ResGroup
  7090 00001997 09D2                    	or	dx,dx				; dx will be non-zero if error
  7091 00001999 7406                    	jz	short EnvNoErr
  7092                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7093 0000199B BA[A01F]                	mov	dx,OUTENVMSG
  7094 0000199E E895F9                  	call 	RPrint
  7095                                  EnvNoErr:
  7096 000019A1 A1[C21E]                	mov	ax,[EnvSiz]			; env size previously set
  7097 000019A4 B104                    	mov	cl,4
  7098 000019A6 D3E0                    	shl	ax,cl				; get size in bytes
  7099 000019A8 3B06[C81E]              	cmp	ax,[UsedEnv]			; is it a new env?
  7100 000019AC 7706                    	ja	short st_envsize		; yes, store the size
  7101 000019AE A1[C81E]                	mov	ax,[UsedEnv]
  7102 000019B1 83C00F                  	add	ax,15				; round up
  7103                                  st_envsize:	
  7104 000019B4 D3E8                    	shr	ax,cl
  7105 000019B6 A3[C21E]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7106                                  
  7107                                  ;if MSVER
  7108                                  	;cmp	SingleCom,0
  7109                                  	;jnz	nophead 			; don't print header if SingleCom
  7110                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7111                                  	;call	RPrint
  7112                                  ;nophead:
  7113                                  ;endif
  7114                                  	; 21/01/2023
  7115                                  
  7116                                  	; MSDOS 3.3 & 6.0
  7117 000019B9 833E[E701]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7118 000019BE 7503                    	jnz     short DoDate		; yes - go initialize it
  7119 000019C0 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7120                                  
  7121                                  DoDate:
  7122                                  
  7123                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7124                                  
  7125 000019C3 A1[E701]                	mov	ax,[Batch]		; get batch segment
  7126 000019C6 C606[3B02]03            	mov	byte [EchoFlag],3	; set batch echo
  7127 000019CB C706[4C02]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7128 000019D1 8EC0                    	mov	es,ax
  7129                                  
  7130                                  ; initialize the segment
  7131                                  
  7132 000019D3 31FF                    	xor	di,di
  7133                                  	;;mov	al,0
  7134                                  	;mov	al,BATCHTYPE ; 0
  7135                                  	; 06/06/2023
  7136 000019D5 31C0                    	xor	ax,ax
  7137 000019D7 AA                      	stosb
  7138                                  	;mov	al,1			; initialize echo for batch exit
  7139                                  	;inc	al
  7140                                  	; 22/07/2024
  7141 000019D8 40                      	inc	ax
  7142 000019D9 AA                      	stosb
  7143                                  
  7144                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7145                                  
  7146                                  	;xor	ax,ax			; initialize to zero
  7147                                  	; 06/06/2023
  7148                                  	;dec	al ; ax = 0
  7149                                  	; 22/07/2024
  7150 000019DA 48                      	dec	ax
  7151                                  
  7152                                  	; 21/01/2023
  7153 000019DB AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7154                                  
  7155 000019DC AB                      	stosw				; batch segment of last job - batlast
  7156 000019DD AB                      	stosw				; segment for FOR
  7157 000019DE AA                      	stosb				; FOR flag
  7158 000019DF AB                      	stosw				; position in file - batseek
  7159 000019E0 AB                      	stosw
  7160                                  
  7161                                  ; clean out the parameters
  7162                                  
  7163                                  	;mov	ax,-1			; initialize to no parameters
  7164                                  	; 06/06/2023
  7165 000019E1 48                      	dec	ax ; ax = -1
  7166                                  
  7167 000019E2 B90A00                  	mov	cx,10
  7168 000019E5 F3AB                    	rep	stosw
  7169                                  
  7170                                  ; decide whether we should grab the default drive
  7171                                  
  7172 000019E7 803E[6A1E]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7173 000019EC 7509                    	jne	short NoAutSet
  7174 000019EE B419                    	mov	ah,19h	; 21/01/2023
  7175                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7176 000019F0 CD21                    	int	21h
  7177                                  	;;add	al,'A'
  7178                                  	;add	al,[letter_A] ; Ucasea
  7179                                  	;add	al,[ucasea] ; 21/01/2023
  7180                                  	; 21/01/2023
  7181 000019F2 0441                    	add	al,'A'
  7182 000019F4 A2[6A1E]                	mov	[AUTOBAT],al
  7183                                  	; 22/07/2024
  7184                                  	; 21/01/2023
  7185                                  	; 06/06/2023
  7186                                  	;mov	[KAUTOBAT],al
  7187                                  NoAutSet:
  7188                                  
  7189                                  ; copy in the batch file name (including nul)
  7190                                  
  7191                                  	;mov	si,offset ResGroup:AutoBat
  7192 000019F7 BE[6A1E]                	mov	si,AUTOBAT
  7193 000019FA B90800                  	mov	cx,8
  7194 000019FD F3A5                    	rep	movsw
  7195                                  	; 23/04/2023
  7196 000019FF A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7197                                  
  7198                                  	;mov	dx,offset ResGroup:AutoBat
  7199 00001A00 BA[6A1E]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7200                                  
  7201                                  	;;mov	ax,OPEN shl 8
  7202 00001A03 B8003D                  	mov	ax,3D00h ; 21/01/2023
  7203                                  	;mov	ax,OPEN*256 ; 3D00h	; open for read
  7204 00001A06 CD21                    	int	21h			; see if autoexec.bat exists
  7205 00001A08 7208                    	jc	short noabat
  7206 00001A0A 89C3                    	mov	bx,ax
  7207 00001A0C B43E                    	mov	ah,3Eh ; 21/01/2023
  7208                                  	;mov	ah,CLOSE  ; 3Eh
  7209 00001A0E CD21                    	int	21h
  7210                                  	;jmp	Drv0			; go process autoexec
  7211                                  	; 22/07/2024
  7212 00001A10 EB51                    	jmp	short Drv0
  7213                                  
  7214                                  noabat:
  7215 00001A12 50                      	push	ax
  7216 00001A13 E89400                  	call	Setup_Seg
  7217 00001A16 A3[861E]                	mov	[triage_add+2],ax
  7218 00001A19 58                      	pop	ax
  7219 00001A1A FF1E[841E]              	call	far [triage_add]	; get extended error
  7220 00001A1E 83F841                  	cmp	ax,65			; network access denied?
  7221                                  	;jne	short OPENERR		; no - go deallocate batch
  7222                                  	; 21/01/2023
  7223                                  	;;je	short AccDenErr
  7224                                  	; 22/07/2024
  7225 00001A21 7506                    	jne	short OpenErr 
  7226                                  	; 06/06/2023
  7227                                  	;je	short AccDenErr
  7228                                  
  7229                                  	; 21/01/2023
  7230                                  ;_ACCDENERROR:					; yes - put out message
  7231                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7232                                  ;	mov	dx,ACCDENERR
  7233                                  ;	call	RPRINT
  7234                                  
  7235                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7236                                  
  7237                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7238                                  
  7239                                  ; 22/07/2024
  7240                                  ; 06/06/2023
  7241                                  ; 21/01/2023
  7242                                  %if 0
  7243                                  
  7244                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7245                                  ; by Ellen to check only when in Korea. The country information
  7246                                  ; returned will overlay the old parse data area, but we don't care
  7247                                  ; since we won't need the parse information or country information.
  7248                                  ; We only care about the country code returned in BX.
  7249                                  
  7250                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7251                                  	; 06/06/2023
  7252                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1C5Eh
  7253                                  
  7254                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7255                                  	mov	dx,INTERNAT_INFO
  7256                                  	mov	ax,3800h
  7257                                  	;mov	ax,INTERNATIONAL<<8
  7258                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7259                                  	int	21h				;
  7260                                  	jc	short NoKabat 			; error - don't bother with it
  7261                                  	cmp	bx,52h
  7262                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7263                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7264                                  
  7265                                  	;mov	di,BatFile			; 3/3/kk
  7266                                  	mov	di,20h
  7267                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7268                                  	mov	si,KAUTOBAT
  7269                                  	mov	cx,8				; auto execution for the 3/3/kk
  7270                                  	rep	movsw				; non-english country	3/3/kk
  7271                                  	movsb					; move in carraige return to terminate string
  7272                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7273                                  	mov	dx,KAUTOBAT
  7274                                  	mov	ax,3D00h
  7275                                  	;mov	ax,OPEN<<8
  7276                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7277                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7278                                  	jc	short NoKabat 			; 3/3/kk
  7279                                  	mov	bx,ax				; 3/3/kk
  7280                                  	mov	ah,3Eh
  7281                                  	;mov	ah,CLOSE			; 3/3/kk
  7282                                  	int	21h				; 3/3/kk
  7283                                  	jmp	short Drv0			; 3/3/kk
  7284                                  
  7285                                  NoKabat:					; 3/3/kk
  7286                                  	call	far [triage_add]		; get extended error
  7287                                  	cmp	ax,65				; network access denied?
  7288                                  	jnz	short OpenErr 			; no - go deallocate batch
  7289                                  
  7290                                  	; 22/07/2024
  7291                                  %endif	; 06/06/2023 - Retro DOS 4.2 COMMAND.COM
  7292                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7293                                  
  7294                                  AccDenErr:					; yes - put out message
  7295                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7296 00001A23 BA[7606]                	mov	dx,ACCDEN
  7297 00001A26 E80DF9                  	call	RPrint
  7298                                  OpenErr:
  7299                                  ;OPENERR:
  7300 00001A29 8E06[E701]              	mov	es,[Batch]		; not found--turn off batch job
  7301 00001A2D B449                    	mov	ah,49h
  7302                                  	;mov	ah,DEALLOC ; 49h
  7303 00001A2F CD21                    	int	21h
  7304 00001A31 C706[E701]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7305 00001A37 C606[3B02]01            	mov	byte [EchoFlag],1
  7306 00001A3C C706[4C02]0000          	mov	word [Nest],0		; indicate no batch in progress
  7307                                  ;DoDttm:
  7308                                  	;mov	ax,offset TranGroup:Datinit
  7309 00001A42 B8[B133]                	mov	ax,DATINIT
  7310 00001A45 A3[7C1E]                	mov	[INITADD],ax
  7311                                  
  7312                                  	; MSDOS 6.0
  7313                                  ;;M004;;mov	ax,TrnSeg	
  7314                                  ;
  7315                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7316                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7317                                  ; M004; We use TranStart to get the start of the transient segment.
  7318                                  
  7319                                  	; 21/01/2023
  7320                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7321                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7322                                  	; 06/06/2023
  7323                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7324                                  	;
  7325                                  	;mov	ax,TRANSTART
  7326                                  	;mov	cl,4				; M004
  7327                                  	;shr	ax,cl				; get relative seg ; M004
  7328                                  	; 06/06/2023
  7329 00001A48 B85502                  	mov	ax,TRANSTART>>4	
  7330                                  
  7331 00001A4B 8CC9                    	mov	cx,cs
  7332 00001A4D 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7333                                  
  7334                                  	; 21/01/2023
  7335                                  	; MSDOS 3.3
  7336                                  	; 25/09/2018
  7337                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7338                                  
  7339                                  	; MSDOS 3.3 & MSDOS 6.0
  7340 00001A4F A3[7E1E]                	mov	[INITADD+2],ax
  7341                                  	;call	dword ptr InitAdd
  7342 00001A52 FF1E[7C1E]              	call	far [INITADD]
  7343                                  
  7344                                  NoDttm:
  7345                                  	; MSDOS 6.0
  7346                                  	; 21/01/2023
  7347                                  ;Copyright:
  7348                                  	;public	Copyright
  7349                                  ;	Bugbug:	remove Copyright label.
  7350                                  
  7351                                  ;if IBMVER
  7352 00001A56 833E[4302]00            	cmp	word [SingleCom],0
  7353 00001A5B 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7354                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7355 00001A5D BA[BB1F]                	mov	dx,COPYRIGHTMSG
  7356 00001A60 E8D3F8                  	call	RPrint
  7357                                  ;endif
  7358                                  	; 21/01/2023
  7359                                  	; MSDOS 3.3
  7360                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7361                                  	;jnz	short DRV0
  7362                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7363                                  	;call	RPRINT
  7364                                  ;DRV0:
  7365                                  	; MSDOS 3.3
  7366                                  	;mov	byte [INITFLAG],0
  7367                                  	;jmp	ENDINIT
  7368                                  
  7369                                  	; 21/01/2023
  7370                                  	; MSDOS 6.0
  7371                                  Drv0:						; Reset APPEND state
  7372 00001A63 1E                      	push	ds				; save data segment
  7373 00001A64 0E                      	push	cs				; Get local segment into DS
  7374 00001A65 1F                      	pop	ds				;
  7375 00001A66 B807B7                  	mov	ax,0B707h ; 21/01/2023
  7376                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7377 00001A69 8B1E[6002]              	mov	bx,[Append_State] 		;  back to the original state
  7378 00001A6D CD2F                    	int	2Fh				;
  7379 00001A6F 1F                      	pop	ds				; get data segment back
  7380                                  
  7381                                  ;Check FirstCom set previously to see if this is the first instance of
  7382                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7383                                  ;jump table from the previous stub to the current stub.
  7384                                  
  7385 00001A70 803E[1024]01            	cmp	byte [FirstCom],1		; first command.com?
  7386 00001A75 7424                    	jz	short move_code			; yes, move it
  7387                                  
  7388 00001A77 06                      	push	es
  7389 00001A78 1E                      	push	ds
  7390                                  
  7391 00001A79 1E                      	push	ds
  7392 00001A7A 07                      	pop	es
  7393                                  	;mov	di,offset DATARES:Int2f_Entry
  7394 00001A7B BF[0400]                	mov	di,Int2f_Entry	
  7395                                  
  7396                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7397                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7398                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7399 00001A7E 26C536[0C24]            	lds	si,[es:ResJmpTable]
  7400                                  
  7401                                  	;mov	cx,11
  7402                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7403                                  	;shl	cx,1
  7404                                  	;shl	cx,1				; size of table in bytes
  7405                                  	; 21/01/2023
  7406 00001A83 B92C00                  	mov	cx,44				; size of table in bytes
  7407                                  
  7408 00001A86 FC                      	cld
  7409 00001A87 F3A4                    	rep	movsb				; copy the jump table
  7410                                  
  7411                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7412                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7413                                  
  7414 00001A89 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7415 00001A8F 7206                    	jb	short res_low			; no, dont set flag
  7416                                  
  7417 00001A91 26C606[3400]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7418                                  res_low:
  7419 00001A97 1F                      	pop	ds
  7420 00001A98 07                      	pop	es
  7421 00001A99 EB03                    	jmp	short finish_init
  7422                                  
  7423                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7424                                  ;or to overlay the messages in the data segment if the user has not used the
  7425                                  ;/msg switch.
  7426                                  
  7427                                  move_code:
  7428 00001A9B E88D01                  	call	Move_res_code			; move the code
  7429                                  
  7430                                  finish_init:
  7431                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7432 00001A9E E916E8                  	jmp	EndInit
  7433                                  
  7434                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7435                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  7436                                  
  7437                                  GetStrLen:
  7438                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  7439                                  ;	Length is returned in CX
  7440                                  
  7441                                  	; MSDOS 3.3 & MSDOS 6.0
  7442 00001AA1 31C9                    	xor	cx,cx
  7443                                  NxtChar:
  7444 00001AA3 AC                      	lodsb
  7445 00001AA4 41                      	inc	cx
  7446 00001AA5 08C0                    	or	al,al
  7447 00001AA7 75FA                    	jnz	short NxtChar
  7448 00001AA9 C3                      	retn
  7449                                  
  7450                                  	; 29/01/2023
  7451                                  Setup_Seg:
  7452                                  
  7453                                  ; If the transient has been loaded in TranSeg, then we need to use that
  7454                                  ; segment for calls to routines in the transient area. Otherwise, the current
  7455                                  ; code segment is used
  7456                                  ; Segment returned in AX.
  7457                                  
  7458                                  	; MSDOS 3.3 & MSDOS 6.0
  7459 00001AAA A1[2D02]                	mov	ax,[TrnSeg]
  7460 00001AAD 803E[2F02]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  7461 00001AB2 7405                    	je	short setup_end
  7462                                  
  7463                                  ;06/06/2023
  7464                                  %if 0
  7465                                  	push	bx
  7466                                  	mov	bx,cs
  7467                                  	;mov	ax,offset ResGroup:TranStart
  7468                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7469                                  	; 06/06/2023
  7470                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7471                                  	;mov	ax,TRANSTART
  7472                                  	;shr	ax,1
  7473                                  	;shr	ax,1
  7474                                  	;shr	ax,1
  7475                                  	;shr	ax,1
  7476                                  	; 29/01/2023
  7477                                  	mov	ax,TRANSTART>>4
  7478                                  	add	ax,bx
  7479                                  	pop	bx
  7480                                  %endif
  7481                                  	; 06/06/2023
  7482 00001AB4 8CC8                    	mov	ax,cs
  7483 00001AB6 055502                  	add	ax,TRANSTART>>4
  7484                                  
  7485                                  setup_end:
  7486 00001AB9 C3                      	retn
  7487                                  
  7488                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7489                                  ;RPRINT:
  7490                                  	; MSDOS 3.3
  7491                                  	;push	ax
  7492                                  	;call	SETUP_SEG
  7493                                  	;mov	[PRINTADD+2], ax
  7494                                  	;;call	dword ptr PRINTADD
  7495                                  	;call	far [PRINTADD]
  7496                                  	;pop	ax
  7497                                  	;retn
  7498                                  
  7499                                  	; 29/01/2023
  7500                                  	; MSDOS 6.0
  7501                                  ;***	RPrintParse - display parse error message
  7502                                  ;
  7503                                  ;	ENTRY	DX = parse error #
  7504                                  ;
  7505                                  ;	EXIT	nothing
  7506                                  ;
  7507                                  ;	USED	flags
  7508                                  ;
  7509                                  ;	EFFECTS
  7510                                  ;	  Message is displayed on stdout.
  7511                                  
  7512                                  RPrintParse:	;proc
  7513                                  	;assume	ds:ResGroup,ss:ResGroup
  7514                                  
  7515 00001ABA 52                      	push	dx				; preserve DX
  7516 00001ABB 87DA                    	xchg	bx,dx				; bx = parse error #
  7517                                  						; dx = saved BX
  7518 00001ABD 4B                      	dec	bx				; bx = parse error index, from 0
  7519 00001ABE D1E3                    	shl	bx,1				; bx = offset in word table
  7520                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  7521 00001AC0 8B9F[B809]              	mov	bx,[bx+PARSMSGPTRS]
  7522 00001AC4 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  7523                                  						; bx = restored
  7524 00001AC6 E86DF8                  	call	RPrint				; print the message
  7525 00001AC9 5A                      	pop	dx				; restore DX
  7526 00001ACA C3                      	retn
  7527                                  
  7528                                  ;RPrintParse	endp
  7529                                  
  7530                                  	; 29/01/2023
  7531                                  ;PATHCHRCMPR:
  7532                                  	; MSDOS 3.3
  7533                                  	;push	dx
  7534                                  	;mov	dl,[slash_chr]
  7535                                  	;;cmp	byte [RSWITCHAR],'/'
  7536                                          ;cmp	[RSWITCHAR],dl
  7537                                  	;je	short RNOSLASHT
  7538                                  	;;cmp	al,'/'
  7539                                  	;cmp	al,dl
  7540                                  	;je	short RET41 ; zf = 1 
  7541                                  ;RNOSLASHT:
  7542                                          ;;cmp	al,'\'
  7543                                  	;cmp	al,[bslash_chr]
  7544                                  ;RET41:
  7545                                  	;pop	dx
  7546                                  	;retn
  7547                                  
  7548                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7549                                  IfindE:
  7550                                  	; MSDOS 3.3 & MSDOS 6.0
  7551 00001ACB E80300                  	call	ifind				; find the name
  7552                                  	;jc	short ifind2			; carry means not found
  7553                                  	;jmp	short Iscasb1 			; scan for = sign
  7554                                  	; 29/01/2023
  7555 00001ACE 733A                    	jnc	short Iscasb1
  7556                                  ifind2:
  7557 00001AD0 C3                      	retn
  7558                                  
  7559                                  	; 29/01/2023
  7560                                  
  7561                                  ; on return of find1, es:di points to beginning of name
  7562                                  
  7563                                  ifind:
  7564 00001AD1 FC                      	cld
  7565 00001AD2 E82700                  	call	Icount0				; cx = length of name
  7566 00001AD5 8E06[DC03]              	mov	es,[EnvirSeg]
  7567 00001AD9 31FF                    	xor	di,di
  7568                                  ifind1:
  7569 00001ADB 51                      	push	cx
  7570 00001ADC 56                      	push	si
  7571 00001ADD 57                      	push	di
  7572                                  ifind11:
  7573 00001ADE AC                      	lodsb
  7574 00001ADF E83400                  	call	iupconv
  7575 00001AE2 47                      	inc	di
  7576 00001AE3 263A45FF                	cmp	al,[es:di-1]
  7577 00001AE7 7502                    	jnz	short ifind12
  7578 00001AE9 E2F3                    	loop	ifind11
  7579                                  ifind12:
  7580 00001AEB 5F                      	pop	di
  7581 00001AEC 5E                      	pop	si
  7582 00001AED 59                      	pop	cx
  7583 00001AEE 74E0                    	jz	short ifind2
  7584 00001AF0 51                      	push	cx
  7585 00001AF1 E81A00                  	call	Iscasb2 			; scan for a nul
  7586 00001AF4 59                      	pop	cx
  7587                                  	;cmp	byte [es:di],0
  7588                                  	;jnz	short ifind1
  7589                                  	;stc					; indicate not found
  7590 00001AF5 26803D01                	cmp	byte [es:di],1
  7591 00001AF9 73E0                    	jnb	short ifind1
  7592                                  	; cf=1					; indicate not found
  7593                                  ;ifind2:
  7594 00001AFB C3                      	retn
  7595                                  
  7596                                  	; 29/01/2023
  7597                                  Icount0:
  7598 00001AFC 1E                      	push	ds
  7599 00001AFD 07                      	pop	es
  7600 00001AFE 89F7                    	mov	di,si
  7601                                  
  7602 00001B00 57                      	push	di				; count number of chars until "="
  7603 00001B01 E80600                  	call	Iscasb1
  7604                                  	; 25/09/2018
  7605                                  	;jmp	short Icountx
  7606                                  	;push	di				; count number of chars until nul
  7607                                  	;call	Iscasb2
  7608                                  ;Icountx:
  7609 00001B04 59                      	pop	cx
  7610 00001B05 29CF                    	sub	di,cx
  7611 00001B07 87F9                    	xchg	di,cx
  7612 00001B09 C3                      	retn
  7613                                  
  7614                                  Iscasb1:
  7615                                  	; 29/01/2023
  7616 00001B0A B03D                    	mov	al,"="
  7617                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  7618 00001B0C EB02                    	jmp	short Iscasbx
  7619                                  Iscasb2:
  7620 00001B0E 30C0                    	xor	al,al				; scan for a nul
  7621                                  Iscasbx:
  7622 00001B10 B90001                  	mov	cx,256 ; 100h
  7623 00001B13 F2AE                    	repnz	scasb
  7624 00001B15 C3                      	retn
  7625                                  
  7626                                  	; 29/01/2023
  7627                                  ;IUPCONV:
  7628                                  	; MSDOS 3.3
  7629                                          ;;cmp	al,"a"
  7630                                  	;cmp	al,[letter_a]
  7631                                          ;jb	short IRET22
  7632                                          ;;cmp	al,"z"
  7633                                          ;cmp	al,[letter_z]
  7634                                  	;ja	short IRET22
  7635                                          ;sub	al,20h			; Lower-case changed to upper-case
  7636                                  ;IRET22:
  7637                                  	;retn
  7638                                  
  7639                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7640                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  7641                                  
  7642                                  	; MSDOS 6.0
  7643                                  ; *****************************************************************
  7644                                  ; *
  7645                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  7646                                  ; *
  7647                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  7648                                  ; *		 the character in AL from the file upper case table
  7649                                  ; *		 in DOS if character if above ascii 128, else
  7650                                  ; *		 subtracts 20H if between "a" and "z".
  7651                                  ; *
  7652                                  ; * INPUT:	 DS	      set to resident
  7653                                  ; *		 AL	      char to be upper cased
  7654                                  ; *		 FUCASE_ADDR  set to the file upper case table
  7655                                  ; *
  7656                                  ; * OUTPUT:	 AL	      upper cased character
  7657                                  ; *
  7658                                  ; *****************************************************************
  7659                                  
  7660                                  iupconv:	;proc	near				
  7661                                  	;assume	ds:ResGroup			;
  7662                                  
  7663 00001B16 3C80                    	cmp	al,80h				; see if char is > ascii 128
  7664 00001B18 7210                    	jb	short other_fucase		; no - upper case math
  7665 00001B1A 2C80                    	sub	al,80h				; only upper 128 chars in table
  7666 00001B1C 1E                      	push	ds				;
  7667 00001B1D 53                      	push	bx				;
  7668                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  7669 00001B1E C51E[5402]              	lds     bx,[FUCase_Addr+1]
  7670 00001B22 83C302                  	add	bx,2				; skip over first word
  7671                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  7672 00001B25 D7                      	xlat
  7673 00001B26 5B                      	pop	bx				;
  7674 00001B27 1F                      	pop	ds				;
  7675 00001B28 EB0A                    	jmp	short iupconv_end		; we finished - exit
  7676                                  
  7677                                  other_fucase:					;
  7678                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  7679 00001B2A 3C61                    	cmp	al,'a'
  7680 00001B2C 7206                    	jb	short iupconv_end		;     subtract 20h to get
  7681                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  7682 00001B2E 3C7A                    	cmp	al,'z'
  7683 00001B30 7702                    	ja	short iupconv_end		;
  7684 00001B32 2C20                    	sub	al,20h				; Change lower-case to upper
  7685                                  iupconv_end:					;
  7686 00001B34 C3                      	retn
  7687                                  
  7688                                  ;iupConv endp
  7689                                  
  7690                                  	; 29/01/2023
  7691                                  init_contc_specialcase:
  7692                                  	; MSDOS 3.3 & MSDOS 6.0
  7693                                  						; This routine is called if control-C
  7694 00001B35 83C406                  	add	sp,6				;  is type during the date/time prompt
  7695 00001B38 56                      	push	si				;  at initialization time.  The desired
  7696 00001B39 89D6                    	mov	si,dx				;  response is to make it look like the
  7697 00001B3B C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  7698 00001B40 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  7699 00001B41 CF                      	iret					;  a <CR> in the user's buffer, and
  7700                                  						;  returning directly to the user.
  7701                                  						; In this case the user is TCODE.
  7702                                  
  7703                                  ; ----------------------------------------------------------------------------
  7704                                  
  7705                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7706                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  7707                                  
  7708                                  	; MSDOS 6.0
  7709                                  ; ****************************************************************
  7710                                  ; *
  7711                                  ; * ROUTINE:	 Setup_for_messages
  7712                                  ; *
  7713                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  7714                                  ; *		 messages as follows:
  7715                                  ; *
  7716                                  ; *		 IF /P and /MSG are entered
  7717                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  7718                                  ; *		 ELSE IF /P is entered
  7719                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  7720                                  ; *		    remove PARSE ERRORS from memory
  7721                                  ; *		 ELSE
  7722                                  ; *		    remove PARSE ERRORS from memory
  7723                                  ; *		 ENDIF
  7724                                  ; *
  7725                                  ; * INPUT:	 PERMCOM	Set up with user input
  7726                                  ; *		 EXT_MSG	Set up with user input
  7727                                  ; *		 System set up to retain PARSE ERRORS
  7728                                  ; *
  7729                                  ; * OUTPUT:	 registers unchanged
  7730                                  ; *
  7731                                  ; ****************************************************************
  7732                                  
  7733                                  setup_for_messages: ;proc near		
  7734                                  
  7735 00001B42 53                      	push	bx
  7736 00001B43 1E                      	push	ds				; save data segment
  7737 00001B44 06                      	push	es				; save environment segment
  7738 00001B45 50                      	push	ax				;
  7739 00001B46 52                      	push	dx				;
  7740 00001B47 57                      	push	di				;
  7741 00001B48 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  7742 00001B4A 8ED8                    	mov	ds,ax				;
  7743 00001B4C 8EC0                    	mov	es,ax				;
  7744                                  
  7745 00001B4E 803E[4002]00            	cmp	byte [PermCom],0		; was permcom set?
  7746 00001B53 743C                    	jz	short no_permcom		; No - don't worry about messages
  7747                                  
  7748                                  ;*	We're permanent. Install our message services int 2f handler.
  7749                                  
  7750 00001B55 06                      	push	es
  7751                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  7752 00001B56 B82F35                  	mov	ax,352Fh
  7753 00001B59 CD21                    	int	21h
  7754                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  7755                                  			; AL = interrupt number
  7756                                  			; Return: ES:BX = value of interrupt vector
  7757 00001B5B 891E[5004]              	mov	[Int2fHandler],bx
  7758 00001B5F 8C06[5204]              	mov	[Int2fHandler+2],es
  7759 00001B63 07                      	pop	es
  7760                                  
  7761                                  ;	DS = RESGROUP seg addr
  7762                                  
  7763                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  7764                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  7765                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  7766                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  7767                                  ; M005; call) goes off into space.
  7768                                  
  7769 00001B64 803E[1024]00            	cmp	byte [FirstCom],0		; M005
  7770 00001B69 7416                    	je	short no_msg_hook		; M005
  7771                                  ;
  7772                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  7773                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  7774                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  7775                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  7776                                  ; M005; segment matches the command.com PSP and then updates these segments
  7777                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  7778                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  7779                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  7780                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  7781                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  7782                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  7783                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  7784                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  7785                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  7786                                  ; M005; jump to the actual int 2fh entry point.
  7787                                  ;
  7788 00001B6B 1E                      	push	ds				; M005
  7789                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  7790 00001B6C BA[C300]                	mov     dx,Carousel_i2f_Hook
  7791 00001B6F 83EA10                  	sub	dx,10h				; renormalize offset; M005
  7792 00001B72 8CD8                    	mov	ax,ds				; M005
  7793 00001B74 40                      	inc	ax				; Relocated cs ; M005
  7794 00001B75 8ED8                    	mov	ds,ax				; M005
  7795                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  7796 00001B77 B82F25                  	mov	ax,252Fh
  7797 00001B7A CD21                    	int	21h
  7798                                  			; DOS - SET INTERRUPT VECTOR
  7799                                  			; AL = interrupt number
  7800                                  			; DS:DX = new vector to be used for specified interrupt
  7801 00001B7C 1F                      	pop	ds				; M005
  7802                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  7803 00001B7D 8C1E[C600]              	mov	[Carousel_i2f_Hook+3],ds
  7804                                  						; patch in the cs for jump
  7805                                  no_msg_hook:					; M005
  7806 00001B81 803E[D51E]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  7807 00001B86 7516                    	jne	short permcom_end		; no /msg - exit
  7808                                  
  7809                                  permcom_slash_msg:				; Keep messages in memory
  7810                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  7811 00001B88 BF[B10C]                	mov     di,ExtMsgEnd
  7812 00001B8B 893E[5404]              	mov	[ResMsgEnd],di			; save it
  7813 00001B8F EB0D                    	jmp	short permcom_end		; exit
  7814                                  
  7815                                  no_permcom:					
  7816                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  7817 00001B91 803E[D51E]01            	cmp	byte [ext_msg],1
  7818 00001B96 7506                    	jne	short permcom_end		; no - no error
  7819                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  7820 00001B98 BA0200                  	mov	dx,2
  7821 00001B9B E81CFF                  	call	RPrintParse
  7822                                  
  7823                                  permcom_end:
  7824 00001B9E 5F                      	pop	di				;
  7825 00001B9F 5A                      	pop	dx				;
  7826 00001BA0 58                      	pop	ax				;
  7827 00001BA1 07                      	pop	es				; get environment back
  7828 00001BA2 1F                      	pop	ds				;
  7829 00001BA3 5B                      	pop	bx
  7830                                  
  7831 00001BA4 C3                      	retn					;
  7832                                  
  7833                                  ;setup_for_messages	endp
  7834                                  
  7835                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7836                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  7837                                  
  7838                                  	; MSDOS 6.0
  7839                                  
  7840                                  ;***	CheckHelp - print help text and exit if /? is on command line
  7841                                  ;
  7842                                  ;	ENTRY	command-line tail at 81h
  7843                                  ;
  7844                                  ;	EXIT	return if /? not found
  7845                                  ;		terminate if /? found
  7846                                  ;
  7847                                  ;	USED	AX,BX,CX,DX,SI,DI
  7848                                  ;
  7849                                  ;	EFFECTS	Help text displayed if /? found on command line
  7850                                  
  7851                                  CheckHelp:	; proc
  7852                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  7853                                  
  7854 00001BA5 BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  7855                                  	;mov	di,offset RESGROUP:Parse_Command
  7856 00001BA8 BF[DA1E]                	mov	di,PARSE_COMMAND
  7857                                  					; ES:DI = ptr to primary parse block
  7858 00001BAB 31C9                    	xor	cx,cx			; CX = # positional param's found
  7859 00001BAD 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  7860                                  chParse:
  7861                                  	;call	dword ptr Init_Parse
  7862 00001BAF FF1E[CE1E]              	call	far [Init_Parse]	; call system parser
  7863                                  
  7864                                  	;;cmp	ax,END_OF_LINE
  7865                                  	;cmp	ax,-1 ; 0FFFFh	
  7866                                  	;je	short chRet		; end of command line, no /? found
  7867                                  	;;cmp	ax,RESULT_NO_ERROR
  7868                                  	;;cmp	ax,0
  7869                                  	;;je	short chWhich		; valid syntax element found
  7870                                  	;;jmp	short chParse		; go parse more
  7871                                  	;and	ax,ax ; cmp ax,0
  7872                                  	;jnz	short chParse ; jne
  7873                                  	; 10/06/2023
  7874 00001BB3 40                      	inc	ax	; cmp ax,-1
  7875 00001BB4 741B                    	jz	short chRet   ; 0FFFFh -> 0
  7876 00001BB6 48                      	dec	ax	; cmp ax,0
  7877 00001BB7 75F6                    	jnz	short chParse ; 1 -> 0
  7878                                  	; ax = 0
  7879                                  chWhich:
  7880                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  7881 00001BB9 813E[7D1F][601F]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  7882 00001BBF 7411                    	je	short chHelp		; /? found - display help & exit
  7883                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  7884 00001BC1 813E[7D1F][461F]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  7885                                  	; 06/06/2023
  7886 00001BC7 7408                    	je	short chRet		; /c found - ignore rest of line
  7887                                  	; 29/01/2023
  7888                                  	;jne	short chParse
  7889                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  7890                                  	; MSDOS 6.0
  7891                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  7892 00001BC9 813E[7D1F][6C1F]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  7893                                  	;je	short chRet		; /k found - ignore rest of line
  7894                                  	;jmp	short chParse		; anything else - ignore, keep looking
  7895                                  	; 06/06/2023
  7896 00001BCF 75DE                    	jne	short chParse
  7897                                  chRet:
  7898 00001BD1 C3                      	retn
  7899                                  chHelp:
  7900                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  7901 00001BD2 BE[DA23]                	mov	si,HelpMsgs
  7902                                  chHelpNext:
  7903 00001BD5 AD                      	lodsw					; AX = ptr to msg
  7904 00001BD6 09C0                    	or	ax,ax
  7905 00001BD8 7407                    	jz	short chHelpDone		; end of list - all done
  7906 00001BDA 89C2                    	mov	dx,ax				; DX = ptr to msg
  7907 00001BDC E857F7                  	call	RPrint				; display msg
  7908 00001BDF EBF4                    	jmp	short chHelpNext		; go do next msg
  7909                                  
  7910                                  chHelpDone:
  7911 00001BE1 CD20                    	int	20h				; terminate program
  7912                                  ;chRet:
  7913 00001BE3 C3                      	retn
  7914                                  
  7915                                  ;CheckHelp	endp
  7916                                  
  7917                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7918                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  7919                                  
  7920                                  	; MSDOS 6.0
  7921                                  
  7922                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  7923                                  ;
  7924                                  ; It determines based on 2 factors:
  7925                                  ;	1. Is this is the first COMMAND?
  7926                                  ;	2. Is COMMAND to be loaded into HIMEM?
  7927                                  ;   The strategy works as follows:
  7928                                  ;
  7929                                  ;	if (First COMMAND)
  7930                                  ;	then if (COMMAND in HIMEM)
  7931                                  ;		ResSize = resident_data;
  7932                                  ;	     else
  7933                                  ;		ResSize = resident_data + resident_code;
  7934                                  ;	else
  7935                                  ;	   ResSize = resident_data;
  7936                                  ;
  7937                                  ; Int 2fh calls have been added to determine whether or not we are the first
  7938                                  ; COMMAND and whether DOS is in HIMEM.
  7939                                  ;
  7940                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  7941                                  ;
  7942                                  ;	EXIT:  ResSize = resident size in low memory
  7943                                  ;
  7944                                  ;	REGISTERS AFFECTED: ax,cx,dx
  7945                                  ;
  7946                                  
  7947                                  GET_HMA_ADDR	equ	4A02h
  7948                                  
  7949                                  Setup_res_end:	;proc near
  7950                                  	
  7951 00001BE4 1E                      	push	ds
  7952 00001BE5 8CC8                    	mov	ax,cs
  7953 00001BE7 8ED8                    	mov	ds,ax				;ds = RESGROUP
  7954                                  	;assume	ds:RESGROUP
  7955                                  
  7956 00001BE9 8B0E[5404]              	mov	cx,[ResMsgEnd]			;set resident size = data
  7957                                  
  7958                                  ;ifndef	ROMDOS
  7959                                  
  7960                                  ;M042 -- Begin changes
  7961                                  ;If messages are to be kept behind, we need to round up the messages to
  7962                                  ;the next para boundary. This is because we have a dummy segment between the
  7963                                  ;data and the resident code segment so that the code segment starts on a
  7964                                  ;para boundary
  7965                                  
  7966                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  7967 00001BED 81F9[B10C]              	cmp	cx,ExtMsgEnd
  7968 00001BF1 7506                    	jne	short calc_res			;no, continue
  7969 00001BF3 83C10F                  	add	cx,15				;round up
  7970 00001BF6 83E1F0                  	and	cx,0FFF0h
  7971                                  calc_res:
  7972                                  
  7973                                  ;M042 -- End changes
  7974                                  
  7975                                  	; 18/07/2024
  7976                                  	;xor	ax,ax
  7977                                         	
  7978 00001BF9 803E[1024]01            	cmp	byte [FirstCom],1		;is it first command.com?
  7979                                  	;jne	short not_first			;no, do not keep code
  7980                                  	; 06/06/2023
  7981 00001BFE 751A                    	jne	short not_first2
  7982                                  
  7983                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  7984                                  ;bit 4 of dh is set
  7985                                  
  7986 00001C00 53                      	push	bx
  7987 00001C01 51                      	push	cx
  7988                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  7989 00001C02 B80633                  	mov	ax,3306h
  7990 00001C05 CD21                    	int	21h
  7991                                  		; DOS - 5+ Get TRUE Version Number
  7992                                  		; (BL major, BH minor, DL revision, DH flags)
  7993 00001C07 59                      	pop	cx
  7994                                  
  7995                                  ;bugbug: remove version check after testing
  7996                                  
  7997 00001C08 80FB05                  	cmp	bl,5				;bl has true version ; M013
  7998 00001C0B 7207                    	jb	short oldver
  7999                                  
  8000 00001C0D 31C0                    	xor	ax,ax
  8001 00001C0F 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  8002                                  	;pop	bx
  8003                                  	;jnz	short not_first			;DOS in HIMEM, code not
  8004                                  						;	resident
  8005                                  	; 29/01/2023
  8006 00001C12 7503                    	jnz	short not_first_pop
  8007                                  oldver:
  8008                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8009                                  	; 06/06/2023
  8010                                  	;;mov	ax,81Ah ; MSDOS 5.0 and MSDOS 6.22 COMMAND.COM
  8011                                  	; 06/06/2023
  8012                                  	; 29/01/2023
  8013                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  8014                                  	; 03/05/2023
  8015 00001C14 B8FA07                  	mov	ax,EndCode-RCODE_START	; 06/06/2023
  8016                                  
  8017                                  not_first_pop:
  8018                                  	; 29/01/2023
  8019 00001C17 5B                      	pop	bx
  8020                                  
  8021                                  not_first:
  8022                                  
  8023                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8024                                  
  8025 00001C18 01C1                    	add	cx,ax
  8026                                  
  8027                                  not_first2:	; 06/06/2023
  8028                                  
  8029                                  ;endif	;not ROMDOS
  8030                                  
  8031 00001C1A 83C10F                  	add	cx,15				;round up to next para
  8032 00001C1D D1E9                    	shr	cx,1
  8033 00001C1F D1E9                    	shr	cx,1
  8034 00001C21 D1E9                    	shr	cx,1
  8035 00001C23 D1E9                    	shr	cx,1				;ax = para size of res code
  8036 00001C25 890E[5604]              	mov	[ResSize],cx			;store resident size
  8037                                  
  8038 00001C29 1F                      	pop	ds
  8039                                  	;assume	ds:nothing
  8040 00001C2A C3                      	retn
  8041                                  
  8042                                  ;ifndef	ROMDOS
  8043                                  
  8044                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8045                                  
  8046                                  	; 29/01/2023
  8047                                  ;oldver:
  8048                                  ;	pop	bx
  8049                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8050                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8051                                  ;	; 29/01/2023
  8052                                  ;	mov	ax,EndCode-RCODE_START
  8053                                  ;	jmp	short not_first
  8054                                  
  8055                                  ;endif	;not ROMDOS
  8056                                  
  8057                                  ;setup_res_end	endp
  8058                                  
  8059                                  ;ifndef	ROMDOS
  8060                                  
  8061                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8062                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8063                                  
  8064                                  	; MSDOS 6.0
  8065                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8066                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8067                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8068                                  ; the correct resident size. When remaining low, we have to check if we 
  8069                                  ; need to overlay the messages part of the data segment which is determined
  8070                                  ; by the /msg switch.
  8071                                  ;
  8072                                  ;	ENTRY: ResMsgEnd = end of resident data
  8073                                  ;
  8074                                  ;	EXIT:  The resident code is either up high or in its final location
  8075                                  ;		down low.
  8076                                  ;
  8077                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8078                                  	
  8079                                  Move_res_code:	;proc near
  8080                                  
  8081 00001C2B 1E                      	push	ds
  8082 00001C2C 06                      	push	es
  8083                                  
  8084 00001C2D 8CC8                    	mov	ax,cs
  8085 00001C2F 8ED8                    	mov	ds,ax
  8086                                  	;assume	ds:RESGROUP
  8087                                  
  8088                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8089 00001C31 B80633                  	mov	ax,3306h
  8090 00001C34 CD21                    	int	21h				;DOS in HIMEM?
  8091                                  		; DOS - 5+ Get TRUE Version Number
  8092                                  		; (BL major, BH minor, DL revision, DH flags)
  8093                                  
  8094 00001C36 80E610                  	and	dh,10h				; M013
  8095 00001C39 750E                    	jnz	short move_high			;yes, move code high
  8096                                  
  8097                                  ;Check if messages have been discarded or not
  8098                                  
  8099                                  load_low:
  8100 00001C3B 1E                      	push	ds
  8101 00001C3C 07                      	pop	es				;es = RESGROUP
  8102 00001C3D 8B3E[5404]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8103                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8104                                  	;mov	bx,ExtMsgEnd
  8105                                  	; 29/01/2023
  8106 00001C41 81FF[B10C]              	cmp	di,ExtMsgEnd
  8107                                  	;cmp	di,bx				;are messages to be kept?
  8108 00001C45 7431                    	je	short no_move			;yes, dont move code
  8109                                  
  8110 00001C47 EB37                    	jmp	short setup_move		;es:di points at dest.
  8111                                  
  8112                                  move_high:
  8113                                  
  8114                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8115                                  ;We pass in bx the number of bytes we need
  8116                                  
  8117                                  	;mov	bx,offset CODERES:EndCode
  8118                                  	; 29/01/2023
  8119                                  	;;mov	bx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8120                                  	; 06/06/2023
  8121                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8122                                  	; 03/05/2023
  8123 00001C49 BBFA07                  	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8124                                  
  8125                                  ;M030;
  8126                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8127                                  
  8128 00001C4C BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8129                                  						;this ; M030
  8130 00001C4F B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8131 00001C52 CD2F                    	int	2Fh
  8132                                  
  8133                                  ;If the offset = 0xffff, then no HMA available
  8134                                  
  8135 00001C54 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8136 00001C57 C606[3400]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8137 00001C5C 7522                    	jne	short setup_move		;no error, es:di = memory
  8138                                  
  8139                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8140                                  	; 29/01/2023	
  8141 00001C5E FE0E[3400]              	dec	byte [ComInHMA] ; 1 -> 0
  8142                                  
  8143                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8144                                  ;ResSize to reflect this
  8145                                  
  8146 00001C62 8B0E[5404]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8147                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8148                                  	;;mov	ax,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8149                                  	;mov	ax,EndCode-RCODE_START
  8150                                  	;add	cx,ax
  8151                                  	; 06/06/2023
  8152                                  	; 29/01/2023
  8153                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8154                                  	;add	cx,15				;round up to next para
  8155                                  	; 03/05/2023
  8156 00001C66 81C10908                	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8157 00001C6A D1E9                    	shr	cx,1
  8158 00001C6C D1E9                    	shr	cx,1
  8159 00001C6E D1E9                    	shr	cx,1
  8160 00001C70 D1E9                    	shr	cx,1				;ax = para size of res code
  8161 00001C72 890E[5604]              	mov	[ResSize],cx			;store resident size
  8162 00001C76 EBC3                    	jmp	short load_low			;let code remain low
  8163                                  
  8164                                  no_move:
  8165                                  	; 05/05/2023
  8166                                  	;mov	cl,4
  8167 00001C78 83C70F                  	add	di,0Fh
  8168 00001C7B 83E7F0                  	and	di,0FFF0h			;round it to a para offset
  8169 00001C7E EB0B                    	jmp	short patch_up
  8170                                  
  8171                                  setup_move:
  8172                                  	;mov	si,offset RESGROUP:StartCode
  8173                                  	; 03/05/2023
  8174 00001C80 BE[C00C]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8175                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8176                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8177                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8178                                  	; 06/06/2023
  8179                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8180                                  	; 03/05/2023
  8181 00001C83 B9FA07                  	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8182                                  
  8183 00001C86 FC                      	cld
  8184 00001C87 57                      	push	di				;need di for patching offset
  8185 00001C88 F3A4                    	rep	movsb
  8186 00001C8A 5F                      	pop	di
  8187                                  
  8188                                  patch_up:
  8189 00001C8B E86901                  	call	patch_stub
  8190 00001C8E 07                      	pop	es
  8191 00001C8F 1F                      	pop	ds
  8192                                  	;assume	ds:nothing
  8193 00001C90 C3                      	retn
  8194                                  
  8195                                  ;Move_res_code endp
  8196                                  
  8197                                  ;else	;ROMDOS
  8198                                  ;
  8199                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8200                                  ;
  8201                                  ;Move_res_code	proc
  8202                                  ;
  8203                                  ;	push	es
  8204                                  ;
  8205                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8206                                  ;	call	patch_stub
  8207                                  ;
  8208                                  ;	pop	es
  8209                                  ;	ret
  8210                                  ;
  8211                                  ;Move_res_code	endp
  8212                                  ;
  8213                                  ;	assume	ds:NOTHING		; to match ending assume above
  8214                                  ;
  8215                                  ;endif	;ROMDOS
  8216                                  
  8217                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8218                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8219                                  
  8220                                  	; MSDOS 6.0
  8221                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8222                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8223                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8224                                  ; the contents of this temporary environment are copied to it. This routine
  8225                                  ; will not be called in case a valid environment is passed to command.com
  8226                                  ;
  8227                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8228                                  ;
  8229                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8230                                  ;
  8231                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8232                                  
  8233                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8234                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1F3Fh
  8235                                  
  8236                                  alloc_env:	;proc near
  8237                                  	;assume ds:nothing
  8238                                  	
  8239 00001C91 1E                              push    ds
  8240 00001C92 06                      	push	es
  8241 00001C93 56                      	push	si
  8242 00001C94 57                      	push	di
  8243                                  
  8244                                  ; 07/06/2023
  8245                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8246                                  ;%if 0
  8247                                  %if 1 
  8248 00001C95 16                              push    ss
  8249 00001C96 1F                              pop     ds
  8250                                  	;assume ds:RESGROUP
  8251                                  
  8252 00001C97 A1[DC03]                        mov     ax,[EnvirSeg]
  8253                                  
  8254 00001C9A 803E[881E]00                    cmp	byte [AllocedEnv],0
  8255 00001C9F 7403                            je	short alloc_cont
  8256 00001CA1 E94801                          jmp     alloc_done
  8257                                  
  8258                                  alloc_cont:
  8259 00001CA4 29FF                            sub     di,di                           ; default start
  8260                                          ;mov	bx,SIZE Environment             ; default size needed
  8261                                  	; 29/01/2023
  8262 00001CA6 BBB400                  	mov	bx,ENVIRONSIZ	; mov bx,180 ; 07/06/2023
  8263                                  
  8264 00001CA9 803E[1024]00                    cmp	byte [FirstCom],0		; first COMMAND.COM?
  8265 00001CAE 747E                            je	short alloc_seg			; no
  8266                                  
  8267                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  8268                                  ;   Record their respective locations and do not add the default vars.
  8269                                  
  8270 00001CB0 09C0                    	or      ax,ax
  8271 00001CB2 7476                    	jz	short alloc_new			; no previous environment
  8272                                  
  8273 00001CB4 8EC0                            mov     es,ax
  8274                                  	;assume es:nothing
  8275                                  
  8276                                  _find_path:
  8277 00001CB6 B000                            mov     al,0
  8278 00001CB8 29FF                            sub     di,di
  8279                                  comp_path:
  8280 00001CBA AE                              scasb                                   ; end of env?
  8281 00001CBB 7417                    	je	short _find_prompt		; yes
  8282 00001CBD 4F                              dec     di
  8283 00001CBE B90500                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  8284                                          ;mov	si,offset RESGROUP:PathString
  8285 00001CC1 BE[891E]                	mov	si,PathString	; "PATH="
  8286 00001CC4 F3A6                            repe    cmpsb
  8287 00001CC6 7407                            je	short got_path
  8288 00001CC8 B90001                          mov	cx,256
  8289 00001CCB F2AE                            repne   scasb                           ; find next NULL
  8290 00001CCD EBEB                            jmp     short comp_path
  8291                                  
  8292                                  got_path:
  8293 00001CCF C606[891E]00                    mov	byte [PathString],0		; don't add it
  8294                                  
  8295                                  _find_prompt:
  8296 00001CD4 29FF                            sub     di,di
  8297                                  comp_prompt:
  8298 00001CD6 AE                      	scasb                                   ; end of env?
  8299 00001CD7 7417                    	je	short find_comspec		; yes
  8300 00001CD9 4F                      	dec     di
  8301 00001CDA B90700                  	mov     cx,PrmptStrLen2	; mov cx,7
  8302                                  	;mov	si,offset RESGROUP:PrmptString
  8303 00001CDD BE[9F1E]                	mov	si,PrmptString	; "PROMPT=$P$G"   
  8304 00001CE0 F3A6                            repe    cmpsb
  8305 00001CE2 7407                            je	short got_prompt
  8306 00001CE4 B90001                          mov     cx,256
  8307 00001CE7 F2AE                            repne   scasb                           ; find next NULL
  8308 00001CE9 EBEB                            jmp	short comp_prompt
  8309                                  
  8310                                  got_prompt:
  8311 00001CEB C606[9F1E]00            	mov	byte [PrmptString],0		; don't add it
  8312                                  
  8313                                  find_comspec:
  8314 00001CF0 29FF                            sub     di,di
  8315                                  comp_comspec:
  8316 00001CF2 AE                              scasb                                   ; end of env?
  8317 00001CF3 7423                            je	short got_envend		; yes
  8318 00001CF5 4F                              dec     di
  8319 00001CF6 B90800                          mov	cx,ComspStrLen	; mov cx,8
  8320                                  	;mov	si,offset RESGROUP:ComspString
  8321 00001CF9 BE[AD1E]                	mov	si,ComspString	; "COMSPEC=\COMMAND.COM"
  8322 00001CFC F3A6                            repe    cmpsb
  8323 00001CFE 7407                            je	short got_comspec
  8324 00001D00 B90001                          mov     cx,256
  8325 00001D03 F2AE                            repne   scasb                           ; find next NULL
  8326 00001D05 EBEB                            jmp	short comp_comspec
  8327                                  
  8328                                  got_comspec:
  8329 00001D07 893E[AB1E]                      mov     [ComspOffset],di
  8330                                  
  8331                                  find_envend:
  8332 00001D0B 29FF                            sub     di,di
  8333 00001D0D B90080                          mov     cx,ENVBIG	; 32768		; max env size
  8334                                  comp_envend:
  8335 00001D10 49                              dec     cx                              ;
  8336 00001D11 AE                              scasb                                   ; end of env?
  8337 00001D12 7404                            je	short got_envend		; yes
  8338 00001D14 F2AE                            repne   scasb
  8339 00001D16 EBF8                            jmp	short comp_envend
  8340                                  
  8341                                  got_envend:
  8342 00001D18 4F                              dec     di
  8343                                  	; 07/06/2023
  8344 00001D19 8D9DB400                	lea     bx,[di+ENVIRONSIZ]		; add room for the basics
  8345                                  
  8346                                  ;   We want to fall through to alloc_new and set up default
  8347                                  ;   path and prompt ONLY IF this is the first process;  in all other
  8348                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  8349                                  
  8350 00001D1D 1E                              push    ds
  8351                                          ;mov	ds,ds:[PDB_Parent_Pid]
  8352 00001D1E 8E1E1600                        mov	ds,[PDB.PARENT_PID]
  8353                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  8354 00001D22 833E160000              	cmp	word [PDB.PARENT_PID],0
  8355 00001D27 1F                      	pop     ds
  8356 00001D28 7504                            jne	short alloc_seg			; no, we're not the first process
  8357                                                                                  ; so don't muck with the env.
  8358                                  alloc_new:
  8359 00001D2A FE06[881E]              	inc	byte [AllocedEnv]		; note we have virgin env.
  8360                                  
  8361                                  alloc_seg:
  8362                                  
  8363                                  ; Allocate default environment size
  8364                                  
  8365 00001D2E 89D9                            mov     cx,bx                           ; save byte-granular size in CX
  8366 00001D30 83C30F                          add     bx,15
  8367 00001D33 D1EB                            shr     bx,1
  8368 00001D35 D1EB                            shr     bx,1
  8369 00001D37 D1EB                            shr     bx,1
  8370 00001D39 D1EB                            shr     bx,1                            ; BX = # paras
  8371 00001D3B B448                    	mov	ah,ALLOC ; 48h
  8372 00001D3D CD21                    	int	21h
  8373 00001D3F 7303                            jnc	short init_ok
  8374 00001D41 E9AD00                          jmp     init_nomem                      ; insufficient memory, error
  8375                                  
  8376                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  8377                                  ; the new buffer
  8378                                  
  8379                                  init_ok:
  8380 00001D44 8EC0                    	mov	es,ax
  8381                                  	;assume	es:nothing                      ; es = temp env segment
  8382                                  
  8383 00001D46 09FF                    	or      di,di
  8384 00001D48 7412                            jz	short copy_path
  8385                                  
  8386 00001D4A 51                              push    cx
  8387 00001D4B 1E                              push    ds
  8388 00001D4C 8E1E[DC03]                      mov     ds,[EnvirSeg]
  8389                                          ;assume ds:nothing
  8390 00001D50 29F6                            sub     si,si
  8391 00001D52 89F9                            mov     cx,di
  8392 00001D54 29FF                            sub     di,di
  8393 00001D56 F3A4                            rep     movsb
  8394 00001D58 1F                              pop     ds
  8395                                          ;assume ds:RESGROUP
  8396 00001D59 59                              pop     cx
  8397 00001D5A 29F9                            sub     cx,di
  8398                                  
  8399                                  copy_path:
  8400                                  
  8401                                  ; First clear out (the rest of) the buffer
  8402                                  
  8403 00001D5C 57                              push    di
  8404 00001D5D 29C0                            sub     ax,ax
  8405 00001D5F F3AA                            rep     stosb
  8406 00001D61 5F                              pop     di
  8407                                  
  8408                                  ; Initialize the path string (PATH=) first
  8409                                  
  8410                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8411 00001D62 BE[891E]                	mov	si,PathString
  8412 00001D65 3804                            cmp     byte [si],al			; add it?
  8413 00001D67 744D                            je	short init_prompt		; no
  8414                                  	;;mov	cx,PathStrLen+1                 ;
  8415                                  	;mov	cx,6 ; db "PATH=",0
  8416                                          ; 14/08/2024
  8417 00001D69 B106                    	mov	cl,6
  8418 00001D6B F3A4                            rep     movsb                           ;
  8419 00001D6D 3806[881E]                      cmp     [AllocedEnv],al			; virgin env?
  8420 00001D71 7443                            je	short init_prompt		; no
  8421                                  
  8422                                  ; Establish a more reasonable default for the PATH
  8423                                  
  8424                                  	;mov	ah,GET_DEFAULT_DRIVE
  8425 00001D73 B419                    	mov	ah,19h
  8426 00001D75 CD21                    	int	21h
  8427 00001D77 0441                            add     al,'A'                          ; convert to letter
  8428 00001D79 A2[8F1E]                        mov     [DefPathString],al              ;
  8429 00001D7C A2[981E]                        mov     [DefPath2String],al             ; now our default paths are complete
  8430                                  
  8431 00001D7F B200                            mov     dl,0                            ; get dir for default drive
  8432 00001D81 1E                              push    ds                              ;
  8433 00001D82 06                              push    es                              ;
  8434 00001D83 1F                              pop     ds                              ;
  8435 00001D84 C6055C                          mov     byte [di],'\'			;
  8436 00001D87 8D7501                          lea     si,[di+1]                       ; set DS:SI -> available space
  8437                                  	;mov	ah,Current_Dir                  ;
  8438 00001D8A B447                            mov	ah,47h
  8439 00001D8C CD21                    	int     21h                             ;
  8440 00001D8E 1F                              pop     ds                              ;
  8441                                  
  8442                                  	;;mov	cx,DefPathStrLen+1              ;
  8443                                  	;mov	cx,9 ; db "C:\MSDOS",0
  8444                                  	; 14/08/2024 ; ch = 0
  8445 00001D8F B109                    	mov	cl,9
  8446                                  
  8447                                  	;mov	dx,offset RESGROUP:DefPathString
  8448 00001D91 BA[8F1E]                	mov	dx,DefPathString	; "C:\MSDOS"
  8449 00001D94 89D6                    	mov	si,dx                           ;
  8450                                          ;mov	ah,CHDir                        ;
  8451 00001D96 B43B                            mov	ah,3Bh
  8452 00001D98 CD21                    	int     21h                             ;
  8453 00001D9A 730D                            jnc	short init_setpath		; DefPathString exists!
  8454                                  
  8455                                  	;;mov	cx,DefPath2StrLen+1		;
  8456                                  	;mov	cx,7 ; db "C:\DOS",0
  8457                                  	; 14/08/2024 ; ch = 0
  8458 00001D9C B107                    	mov	cl,7
  8459                                  
  8460 00001D9E BA[981E]                	mov	dx,DefPath2String	; "C:\DOS"
  8461 00001DA1 89D6                            mov     si,dx                           ;
  8462                                          ;mov	ah,CHDir                        ;
  8463 00001DA3 B43B                            mov	ah,3Bh
  8464 00001DA5 CD21                            int     21h                             ;
  8465 00001DA7 720D                            jc	short init_prompt		; DefPath2String doesn't exist
  8466                                  
  8467                                  init_setpath:
  8468 00001DA9 89FA                            mov     dx,di                           ; success
  8469 00001DAB 1E                              push    ds                              ; so restore prev dir
  8470 00001DAC 06                              push    es                              ;
  8471 00001DAD 1F                              pop     ds                              ; DS:DX -> prev dir
  8472                                          ;mov	ah,CHDir                        ;
  8473 00001DAE B43B                            mov	ah,3Bh			
  8474 00001DB0 CD21                            int     21h                             ;
  8475 00001DB2 1F                              pop     ds                              ;
  8476                                  
  8477 00001DB3 4F                              dec     di                              ; then copy in DefPathString
  8478 00001DB4 F3A4                            rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  8479                                  
  8480                                  ; Initialize the default prompt
  8481                                  
  8482                                  init_prompt:
  8483 00001DB6 57                              push    di                              ;
  8484 00001DB7 29C0                            sub     ax,ax                           ;
  8485                                  	;mov	cx,64				; insure any data read in
  8486                                  	; 14/08/2024
  8487 00001DB9 B140                    	mov	cl,64  ; ch = 0
  8488 00001DBB F3AA                            rep     stosb                           ; from Current_Dir is zapped
  8489 00001DBD 5F                              pop     di                              ;
  8490                                  
  8491 00001DBE 3806[881E]              	cmp	[AllocedEnv],al			; virgin env?
  8492 00001DC2 740B                            je	short init_comspec		; no
  8493                                          ;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  8494 00001DC4 BE[9F1E]                        mov	si,PrmptString
  8495 00001DC7 3804                    	cmp     [si],al				; add it?
  8496 00001DC9 7404                            je      short init_comspec		; no
  8497                                  	;mov	cx,PrmptStrLen+1                ;
  8498 00001DCB B10C                            mov	cl,12  ; db "PROMPT=$P$G",0
  8499 00001DCD F3A4                    	rep     movsb                           ;
  8500                                  
  8501                                  ; Initialize the Comspec string
  8502                                  
  8503                                  init_comspec:
  8504 00001DCF 3906[AB1E]                      cmp	[ComspOffset],ax		; add it?
  8505 00001DD3 750E                            jne	short init_done			; no
  8506                                          ;lea	ax,[di+8]
  8507 00001DD5 8D4508                  	lea     ax,[di+ComspStrLen]             ;
  8508 00001DD8 A3[AB1E]                        mov	[ComspOffset],ax		;
  8509                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8510 00001DDB BE[AD1E]                        mov	si,ComspString
  8511                                  	;mov	cx,ComspStrLen2+1               ;
  8512 00001DDE B91500                          mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  8513 00001DE1 F3A4                    	rep     movsb                           ;
  8514                                  
  8515                                  init_done:
  8516 00001DE3 8CC0                            mov     ax,es                           ; return env seg in ax
  8517 00001DE5 A3[DC03]                        mov     [EnvirSeg],ax			; save env seg
  8518 00001DE8 FE06[881E]                      inc	byte [AllocedEnv]		; remember that *we* alloced it
  8519                                  %endif
  8520                                  
  8521                                  ; 07/06/2023
  8522                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  8523                                  ;%if 1
  8524                                  %if 0
  8525                                  	;mov	bx,10
  8526                                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  8527                                  	mov	ah,48h
  8528                                  	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  8529                                  			; BX = number of 16-byte paragraphs desired
  8530                                  	jc	short init_nomem
  8531                                  
  8532                                  init_ok:
  8533                                  	mov	es,ax
  8534                                  	;assume	es:nothing                      ; es = temp env segment
  8535                                  
  8536                                  	xor	di,di
  8537                                  	mov	ax,di
  8538                                  	;mov	cx,160
  8539                                  	mov	cx,ENVIRONSIZ
  8540                                          rep	stosb
  8541                                  
  8542                                  init_pathstr:
  8543                                  
  8544                                  ; Initialize the path string (PATH=) first
  8545                                  
  8546                                  	push	ss
  8547                                  	pop	ds
  8548                                  
  8549                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8550                                  	mov	si,PathString
  8551                                  	mov	di,0
  8552                                  init_cp_pathstr:
  8553                                  	lodsb
  8554                                  	stosb
  8555                                  	or	al,al
  8556                                  	jnz	short init_cp_pathstr
  8557                                  
  8558                                  ; Initialize the Comspec string
  8559                                  
  8560                                  init_comspec:
  8561                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8562                                          mov	si,ComspString
  8563                                  	; 05/05/2023
  8564                                  	mov	di,6
  8565                                  init_cp_compstr:
  8566                                  	lodsb
  8567                                  	stosb
  8568                                  	or	al,al
  8569                                  	jnz	short init_cp_compstr
  8570                                  
  8571                                  init_done:
  8572                                          mov     ax,es                           ; return env seg in ax
  8573                                          ;mov	[EnvirSeg],ax			; save env seg
  8574                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  8575                                  %endif	
  8576                                  
  8577                                  	; 29/01/2023
  8578                                  alloc_done:
  8579 00001DEC 5F                      	pop	di
  8580 00001DED 5E                      	pop	si
  8581 00001DEE 07                      	pop	es
  8582 00001DEF 1F                              pop     ds
  8583                                  	;assume	ds:nothing
  8584 00001DF0 C3                      	retn
  8585                                  
  8586                                  	; 29/01/2023
  8587                                  init_nomem:
  8588                                  
  8589                                  ;We call the error routine from here. This routine never returns. It either
  8590                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  8591                                  ;the system ( if it is the first COMMAND.COM ).
  8592                                  
  8593 00001DF1 E80000                  	call	Alloc_error
  8594                                  
  8595                                  ;Alloc_env	endp
  8596                                  
  8597                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  8598                                  ; check if this is a permanent or secondary command.com and take the 
  8599                                  ; appropriate action.
  8600                                  ;
  8601                                  ;	ENTRY:	ds = RESGROUP = DATARES
  8602                                  ;
  8603                                  ;	EXIT:	None - does not return
  8604                                  ;
  8605                                  ;	REGISTERS AFFECTED: Does not matter
  8606                                  ;
  8607                                  
  8608                                  ;public Alloc_error
  8609                                  Alloc_error:	;proc	near
  8610                                  
  8611                                  	;jmp	RESGROUP:BadMemErr
  8612                                  	; 29/01/2023
  8613 00001DF4 E9D1EF                  	jmp	BadMemErr	
  8614                                  	
  8615                                  ;Alloc_error	endp
  8616                                  
  8617                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8618                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  8619                                  
  8620                                  	; MSDOS 6.0
  8621                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  8622                                  ; the stub table of the various entry points in the resident code segment.
  8623                                  ; Some of them are interrupt entry points and some of them are entries from
  8624                                  ; the transient to the resident code segment.
  8625                                  ;
  8626                                  ;	ENTRY:	ds = RESGROUP
  8627                                  ;		es:di = segment:offset of final location of resident code
  8628                                  ;
  8629                                  ;	EXIT:	All segments and offsets patched into the stub table
  8630                                  ;
  8631                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  8632                                  
  8633                                  patch_stub:	;proc near
  8634                                  	;assume	ds:RESGROUP
  8635                                  	
  8636 00001DF7 06                      	push	es
  8637                                  
  8638 00001DF8 8CC3                    	mov	bx,es			;bx = resident code segment
  8639 00001DFA 89FA                    	mov	dx,di
  8640                                  	;mov	di,offset DATARES:Int2f_Entry
  8641 00001DFC BF[0400]                	mov	di,Int2f_Entry
  8642                                  	;mov	si,offset RESGROUP:Reloc_Table
  8643 00001DFF BE[F623]                	mov	si,Reloc_Table
  8644 00001E02 1E                      	push	ds
  8645 00001E03 07                      	pop	es			;es = RESGROUP = DATARES
  8646                                  
  8647                                  ;bx:dx = segment:offset of resident code segment
  8648                                  ;es:di = entry point table in stub
  8649                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  8650                                  
  8651                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  8652 00001E04 B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  8653                                  patchlp:
  8654 00001E07 AD                      	lodsw				;get current offset
  8655 00001E08 01D0                    	add	ax,dx			;offset it by code seg location 
  8656 00001E0A AB                      	stosw				;store offset
  8657 00001E0B 89D8                    	mov	ax,bx			
  8658 00001E0D AB                      	stosw				;store segment 
  8659 00001E0E E2F7                    	loop	patchlp
  8660                                  
  8661 00001E10 07                      	pop	es
  8662 00001E11 C3                      	retn
  8663                                  
  8664                                  ;Patch_stub	endp
  8665                                  
  8666                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8667                                  
  8668                                  	; MSDOS 6.0
  8669                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  8670                                  ; pointers that the stub uses to jump to the actual handler. These values 
  8671                                  ; are temporarily needed to handle these interrupts if they occur before
  8672                                  ; the resident is relocated to its final position and all the addresses of
  8673                                  ; the handlers have been updated.
  8674                                  ;
  8675                                  ;	ENTRY:	es = PSP segment = code segment
  8676                                  ;
  8677                                  ;	EXIT:	Current segment values patched into the jump table in the
  8678                                  ;		stub.
  8679                                  ;
  8680                                  ;	REGISTERS AFFECTED: ax, cx, di
  8681                                  
  8682                                  patch_segs:	;proc near
  8683                                  
  8684                                  	;mov	di,offset RESGROUP:Int2f_Entry
  8685 00001E12 BF[0400]                	mov	di,Int2f_Entry 
  8686 00001E15 B90400                  	mov	cx,4			;we have to patch 4 handlers
  8687 00001E18 83C702                  	add	di,2
  8688 00001E1B 8CC0                    	mov	ax,es
  8689                                  pseglp:
  8690 00001E1D AB                      	stosw				;store the segment value
  8691 00001E1E 83C702                  	add	di,2			;skip the next offset value
  8692 00001E21 E2FA                    	loop	pseglp
  8693                                  
  8694 00001E23 C3                      	retn
  8695                                  
  8696                                  ;Patch_segs	endp
  8697                                  
  8698                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8699                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  8700                                  
  8701                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8702                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:20D8h
  8703                                  
  8704                                  	; MSDOS 6.0
  8705                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  8706                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  8707                                  ; and is used by the stub when we have to jump to the resident in HMA
  8708                                  ;
  8709                                  ;	ENTRY:	ds = RESGROUP
  8710                                  ;
  8711                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  8712                                  ;
  8713                                  ;	REGISTERS AFFECTED:
  8714                                  ;
  8715                                  
  8716                                  get_XMMAddr:	;proc near
  8717                                  	;assume	ds:RESGROUP
  8718                                  
  8719 00001E24 06                      	push	es
  8720                                  
  8721                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  8722 00001E25 B80043                  	mov	ax,4300h
  8723 00001E28 CD2F                    	int	2Fh
  8724                                  		; - Multiplex - XMS - INSTALLATION CHECK
  8725                                  		; Return: AL = 80h XMS driver installed
  8726                                  		; AL <> 80h no driver
  8727 00001E2A 3C80                    	cmp	al,80h			; Q: installed
  8728 00001E2C 750D                    	jne	short cXMMexit		; N: set error, quit
  8729                                  ;
  8730                                  ; get the XMM control functions entry point, save it, we
  8731                                  ; need to call it later.
  8732                                  ;
  8733                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  8734 00001E2E B81043                  	mov	ax,4310h
  8735 00001E31 CD2F                    	int	2Fh
  8736                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  8737                                  		; Return: ES:BX -> driver entry point
  8738                                  
  8739 00001E33 891E[3000]              	mov	[XMMCallAddr], bx
  8740 00001E37 8C06[3200]              	mov	[XMMCallAddr+2],es
  8741                                  cXMMexit:
  8742 00001E3B 07                      	pop	es
  8743 00001E3C C3                      	retn				; done
  8744                                  
  8745                                  ;get_XMMAddr	endp
  8746                                  
  8747                                  ;=============================================================================
  8748                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  8749                                  ;=============================================================================
  8750                                  ; 24/09/2018 - Retro DOS v3.0
  8751                                  
  8752                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  8753                                  
  8754                                  ; TITLE	COMMAND Initialization messages
  8755                                  
  8756                                  ;INIT	SEGMENT PUBLIC PARA
  8757                                  
  8758                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8759                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8760                                  
  8761                                  	; 25/09/2018
  8762                                  	; (15 bytes filler)
  8763 00001E3D 00                      	db 0
  8764                                  	;db "25/9/2018 ETAN"
  8765                                  	; 30/01/2023
  8766                                  	;db "30/1/2023 ETAN"
  8767                                  	; 19/06/2023
  8768                                  	;db "19/6/2023 ETAN"
  8769                                  	; 31/07/2024
  8770 00001E3E 31342F382F32303234-     	db "14/8/2024 ETAN" ; 14/08/2024
  8770 00001E47 204554414E         
  8771 00001E4C 00                      	db 0
  8772                                  
  8773                                  ; 30/01/2023
  8774                                  %if 0
  8775                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  8776                                  	;dw 0
  8777                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  8778                                  	db 0Dh,0Ah
  8779                                  	db 0Dh,0Ah
  8780                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  8781                                  	db 0Dh,0Ah
  8782                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  8783                                  	db ' ',0Dh,0Ah
  8784                                  	db '                                                   ',
  8785                                  	db 0Dh,0Ah,0
  8786                                  
  8787                                  	times	43 db 20h
  8788                                  
  8789                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  8790                                  BADCOMLKMES:
  8791                                  	dw _152Fh
  8792                                  
  8793                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  8794                                  BADCOMACCMSG:
  8795                                  	dw _155Ah
  8796                                  
  8797                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  8798                                  ACCDENERR:
  8799                                  	dw _1593h
  8800                                  
  8801                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  8802                                  OUTENVMSG:
  8803                                  	dw _15A5h
  8804                                  
  8805                                  BADVERMSG:
  8806                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  8807                                  
  8808                                  BADENVSIZMSG:
  8809                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  8810                                  
  8811                                  HEADERPTR:
  8812                                  	dw COPYRIGHTMSG
  8813                                  %endif
  8814                                  
  8815                                  ; 30/01/2023
  8816                                  ;align 16
  8817                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8818                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  8819                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8820                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:2100h 
  8821                                  ICONDEV:
  8822 00001E4D 2F4445562F                      db '/DEV/'
  8823 00001E52 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  8824                                  BADCSPFL:
  8825 00001E5B 00                      	db 0
  8826                                  COMSPECT:
  8827 00001E5C 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  8827 00001E65 434F4D00           
  8828 00001E69 00                      	db 0
  8829                                  AUTOBAT:
  8830 00001E6A 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  8830 00001E73 45432E424154000D   
  8831                                  
  8832                                  ; 22/07/2024
  8833                                  ; 07/06/2023
  8834                                  ;KAUTOBAT:
  8835                                  ;	db 0,':\KAUTOEXEC.BAT',0,0Dh
  8836                                   
  8837                                  PRDATTM:
  8838 00001E7B FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  8839                                  INITADD:
  8840 00001E7C 00000000                	dd 0
  8841                                  print_add:
  8842 00001E80 [FD54]                  	dw Printf_Init
  8843 00001E82 0000                    	dw 0
  8844                                  triage_add:
  8845 00001E84 [F131]                  	dw Triage_Init
  8846 00001E86 0000                    	dw 0
  8847                                  ;CHUCKENV:
  8848                                  AllocedEnv:
  8849 00001E88 00                      	db 0
  8850                                  
  8851                                  ; 30/01/2023 - MSDOS 3.3
  8852                                  ;COMSPOFFSET:
  8853                                  ;ECOMLOC:
  8854                                  ;	;dw 0Eh
  8855                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  8856                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  8857                                  ;COMSPSTRING:
  8858                                  ;	db 'COMSPEC='
  8859                                  
  8860                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  8861                                  PathString:
  8862 00001E89 504154483D00            	db 'PATH=',0
  8863                                  PathStrLen equ $-PathString-1
  8864                                  ;;;
  8865                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8866                                  ; MSDOS 6.0
  8867                                  DefPathString:
  8868 00001E8F 433A5C4D53444F5300      	db 'C:\MSDOS',0
  8869                                  DefPathStrLen equ $-DefPathString-1
  8870                                  DefPath2String:
  8871 00001E98 433A5C444F5300          	db 'C:\DOS',0
  8872                                  DefPath2StrLen equ $-DefPath2String-1
  8873                                  
  8874                                  PrmptString:
  8875 00001E9F 50524F4D50543D2450-     	db 'PROMPT=$P$G',0
  8875 00001EA8 244700             
  8876                                  PrmptStrLen equ $-PrmptString-1
  8877                                  PrmptStrLen2 equ 7		; length of PROMPT=
  8878                                  ComspOffset:
  8879 00001EAB 0000                    	dw 0
  8880                                  ;;;
  8881                                  ComspString:
  8882 00001EAD 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  8882 00001EB6 434F4D4D414E442E43-
  8882 00001EBF 4F4D00             
  8883                                  ComspStrLen equ 8		; length of COMSPEC=
  8884                                  ComspStrLen2 equ $-ComspString-1
  8885                                  				; length of full COMSPEC
  8886                                  	; 29/01/2023
  8887                                  ;equal_sign:
  8888                                  ;equalsign:
  8889                                  ;	db '='
  8890                                  ;letter_a:
  8891                                  ;lcasea:
  8892                                  ;	db 'a'
  8893                                  ;letter_z:
  8894                                  ;lcasez:
  8895                                  ;	db 'z'
  8896                                  	; 30/01/2023
  8897                                  ;;slash_chr:
  8898                                  ;;	db '/'
  8899                                  ;;bslash_chr:
  8900                                  ;;	db '\'
  8901                                  ;space_chr:
  8902                                  ;;space:
  8903                                  ;	db 20h
  8904                                  ;;letter_p:
  8905                                  ;;	db 'p'
  8906                                  ;;letter_d:
  8907                                  ;;	db 'd'
  8908                                  ;;letter_c:
  8909                                  ;;	db 'c'
  8910                                  	; 16/04/2023
  8911                                  ; MSDOS 5.0 & MSDOS 6.0
  8912                                  ;scswitch:
  8913                                  ;	db 'C'		; Single command
  8914                                  ;;skswitch:
  8915                                  ;	db 'K' ; MSDOS 6.0
  8916                                  ;;letter_A:
  8917                                  ;ucasea: ; 21/01/2023 
  8918                                  ;	db 'A'
  8919                                  
  8920                                  	; 30/01/2023
  8921                                  EnvSiz:
  8922 00001EC2 0000                    	dw 0		; size user wants to allocate
  8923                                  EnvMax:
  8924 00001EC4 0000                    	dw 0		; maximum size allowed
  8925                                  OldEnv:
  8926 00001EC6 0000                    	dw 0		; envirseg at initialization
  8927                                  UsedEnv:
  8928 00001EC8 0000                    	dw 0		; amount of envirseg used
  8929                                  	; MSDOS 5.0 & MSDOS 6.0
  8930                                  PARS_MSG_OFF:
  8931 00001ECA 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  8932                                  PARS_MSG_SEG:
  8933 00001ECC 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  8934                                  
  8935                                  ;Do not separate the following two words. Used to call transient PARSE routine
  8936                                  
  8937                                  Init_Parse:
  8938                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  8939                                  init_p:
  8940 00001ECE [F954]                  	dw append_parse
  8941                                  initend:
  8942 00001ED0 0000                    	dw 0		; segment address of end of init
  8943                                  TrnSize:
  8944 00001ED2 0000                    	dw 0		; size of transient in paragraphs
  8945                                  
  8946                                  ; 23/07/2024 - Retro DOS v4.2 COMMAND.COM
  8947                                  ;%if 0
  8948                                  resetenv:
  8949                                  	;dw 0		; set if we need to setblck env at endinit
  8950                                  	; 23/07/2024
  8951 00001ED4 00                      	db 0
  8952                                  ;%endif
  8953                                  
  8954                                  ext_msg:
  8955 00001ED5 00                      	db 0		; set if /MSG switch entered
  8956                                  eswitch:
  8957 00001ED6 00                      	db 0		; set if /e was entered
  8958                                  dswitch:
  8959 00001ED7 00                      	db 0		; set if /d was entered
  8960                                  parsemes_ptr:
  8961 00001ED8 0000                    	dw 0		; word to store parse error number
  8962                                  
  8963                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8964                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h
  8965                                  
  8966                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8967                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:21A5h 
  8968                                  
  8969                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  8970                                  ;  The following parse control block is used for COMMAND. This block is
  8971                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  8972                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  8973                                  ;
  8974                                  ;  Anything on the command line after the /C switch will be passed to the
  8975                                  ;  executable command, so if /C is used, it must be specified last. The
  8976                                  ;  /MSG switch can only be specified if the /P switch is specified.
  8977                                  ;
  8978                                  ;  The /? switch causes help text to be displayed. Any other options
  8979                                  ;  on the command line are ignored. Command.com will not load if /?
  8980                                  ;  is specified.
  8981                                  
  8982                                  INTERNAT_INFO:		; used for country info after parsing is completed
  8983                                  PARSE_COMMAND:
  8984 00001EDA [DD1E]                  	dw COMMAND_PARMS
  8985 00001EDC 00                      	db 0			; no extra delimiter
  8986                                  COMMAND_PARMS:
  8987 00001EDD 0002                    	db 0,2			; 1 positional parm
  8988 00001EDF [F71E]                  	dw COMMAND_FILE
  8989 00001EE1 [F71E]                  	dw COMMAND_FILE
  8990                                          ; MSDOS 5.0
  8991                                  	;db 7			; 7 switches
  8992                                  	; MSDOS 6.0
  8993                                  	;db 8 			; 8 switches
  8994                                  	; 07/06/2023
  8995                                  	; MSDOS 6.22
  8996 00001EE3 09                      	db 9			; 9 switches
  8997 00001EE4 [001F]                  	dw COMMAND_SWITCH1
  8998 00001EE6 [0C1F]                  	dw COMMAND_SWITCH2
  8999 00001EE8 [181F]                  	dw COMMAND_SWITCH3
  9000 00001EEA [241F]                  	dw COMMAND_SWITCH4
  9001 00001EEC [3D1F]                  	dw COMMAND_SWITCH5
  9002 00001EEE [491F]                  	dw COMMAND_SWITCH6
  9003 00001EF0 [571F]                  	dw COMMAND_SWITCH7
  9004                                  	; 07/06/2023
  9005 00001EF2 [631F]                  	dw COMMAND_SWITCH8 ; MSDOS 6.0
  9006 00001EF4 [6F1F]                  	dw COMMAND_SWITCH9 ; MSDOS 6.22
  9007 00001EF6 00                      	db 0			; no keywords
  9008                                  
  9009                                  COMMAND_FILE:
  9010 00001EF7 0102                    	dw 0201h		; filespec - optional
  9011 00001EF9 0100                    	dw 1			; capitalize - file table
  9012 00001EFB [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9013 00001EFD [831F]                  	dw NO_VAL 		;
  9014 00001EFF 00                      	db 0			; no keywords
  9015                                  
  9016                                  COMMAND_SWITCH1:
  9017 00001F00 0000                    	dw 0			; no match flags
  9018 00001F02 0200                    	dw 2			; capitalize by char table
  9019 00001F04 [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9020 00001F06 [831F]                  	dw NO_VAL 		;
  9021 00001F08 01                      	db 1			; 1 keyword
  9022                                  COMMAND_P_SYN:
  9023 00001F09 2F5000                  	db '/P',0		; /P switch
  9024                                  
  9025                                  COMMAND_SWITCH2:
  9026 00001F0C 0000                    	dw 0			; no match flags
  9027 00001F0E 0200                    	dw 2			; capitalize by char table
  9028 00001F10 [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9029 00001F12 [831F]                  	dw NO_VAL 		;
  9030 00001F14 01                      	db 1			; 1 keyword
  9031                                  COMMAND_F_SYN:
  9032 00001F15 2F4600                  	db '/F',0		; /F switch
  9033                                  
  9034                                  COMMAND_SWITCH3:
  9035 00001F18 0000                    	dw 0			; no match flags
  9036 00001F1A 0200                    	dw 2			; capitalize by char table
  9037 00001F1C [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9038 00001F1E [831F]                  	dw NO_VAL 		;
  9039 00001F20 01                      	db 1			; 1 keyword
  9040                                  COMMAND_D_SYN:
  9041 00001F21 2F4400                  	db '/D',0		; /D switch
  9042                                  
  9043                                  COMMAND_SWITCH4:
  9044 00001F24 0080                    	dw 8000h		; numeric value - required
  9045 00001F26 0000                    	dw 0			; no function flags
  9046 00001F28 [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9047 00001F2A [301F]                  	dw COMMAND_E_VAL	; pointer to value list
  9048 00001F2C 01                      	db 1			; 1 keyword
  9049                                  COMMAND_E_SYN:
  9050 00001F2D 2F4500                  	db '/E',0		; /E switch
  9051                                  
  9052                                  COMMAND_E_VAL:
  9053 00001F30 01                      	db 1			;
  9054 00001F31 01                      	db 1			; 1 range
  9055 00001F32 01                      	db 1			; returned if result
  9056                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9057                                  	; MSDOS 5.0 COMMAND.COM
  9058                                  	; (RESGROUP:1F2Bh)
  9059 00001F33 A0000000                	dd 160	 ; ENVSML
  9060 00001F37 00800000                	dd 32768 ; ENVBIG
  9061 00001F3B 00                      	db 0			; no numeric values
  9062 00001F3C 00                      	db 0			; no string values
  9063                                  
  9064                                  COMMAND_SWITCH5:
  9065 00001F3D 0000                    	dw 0			; no match flags
  9066 00001F3F 0200                    	dw 2			; capitalize by char table
  9067 00001F41 [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9068 00001F43 [831F]                  	dw NO_VAL 		;
  9069 00001F45 01                      	db 1			; 1 keyword
  9070                                  COMMAND_C_SYN:
  9071 00001F46 2F4300                  	db '/C',0		; /C switch
  9072                                  
  9073                                  COMMAND_SWITCH6:
  9074 00001F49 0000                    	dw 0			; no match flags
  9075 00001F4B 0200                    	dw 2			; capitalize by char table
  9076 00001F4D [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9077 00001F4F [831F]                  	dw NO_VAL 		;
  9078 00001F51 01                      	db 1			; 1 keyword
  9079                                  COMMAND_M_SYN:
  9080 00001F52 2F4D534700              	db '/MSG',0		; /MSG switch
  9081                                  
  9082                                  COMMAND_SWITCH7:
  9083 00001F57 0000                    	dw 0			; no match flags
  9084 00001F59 0200                    	dw 2			; capitalize by char table
  9085 00001F5B [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9086 00001F5D [831F]                  	dw NO_VAL 		;
  9087 00001F5F 01                      	db 1			; 1 keyword
  9088                                  COMMAND_?_SYN:
  9089 00001F60 2F3F00                  	db '/?',0 		; /? switch
  9090                                  
  9091                                  	; 07/06/2023
  9092                                  	; MSDOS 6.0
  9093                                  COMMAND_SWITCH8:
  9094 00001F63 0000                    	dw 0			; no match flags
  9095 00001F65 0200                    	dw 2			; capitalize by char table
  9096 00001F67 [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9097 00001F69 [831F]                  	dw NO_VAL 		;
  9098 00001F6B 01                      	db 1			; 1 keyword
  9099                                  COMMAND_K_SYN:
  9100 00001F6C 2F4B00                  	db '/K',0		; /K switch
  9101                                  
  9102                                  	; 07/06/2023
  9103                                  	; MSDOS 6.22
  9104                                  COMMAND_SWITCH9:
  9105 00001F6F 0000                    	dw 0			; no match flags
  9106 00001F71 0200                    	dw 2			; capitalize by char table
  9107 00001F73 [7B1F]                  	dw COMND1_OUTPUT	; result buffer
  9108 00001F75 [831F]                  	dw NO_VAL 		;
  9109 00001F77 01                      	db 1			; 1 keyword
  9110                                  COMMAND_Y_SYN:
  9111 00001F78 2F5900                  	db '/Y',0		; /Y switch
  9112                                  
  9113                                  COMND1_OUTPUT:
  9114                                  COMND1_TYPE:
  9115 00001F7B 00                      	db 0			; type
  9116                                  COMND1_CODE:
  9117 00001F7C 00                      	db 0			; return value
  9118                                  COMND1_SYN:
  9119 00001F7D 0000                    	dw 0			; synonym pointer
  9120                                  COMND1_ADDR:
  9121 00001F7F 00000000                	dd 0			; numeric value / address
  9122                                  				; of string value
  9123                                  NO_VAL:
  9124 00001F83 00                      	db 0			; no values
  9125                                  num_positionals:
  9126 00001F84 0000                    	dw 0			; counter for positionals
  9127                                  old_parse_ptr:
  9128 00001F86 0000                    	dw 0			; SI position before calling parser
  9129                                  
  9130                                  	; 30/01/2023
  9131                                  ;***	INITIALIZATION MESSAGES
  9132                                  ;	-------------------------
  9133                                  ;	include	comimsg.inc	;M00
  9134                                  ;-----------------------------------------------------------------------------	
  9135                                  
  9136                                  BADVERMSG:
  9137 00001F88 17                      	db 23
  9138 00001F89 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9138 00001F92 20444F532076657273-
  9138 00001F9B 696F6E0D0A         
  9139                                  OUTENVMSG:
  9140 00001FA0 1A                      	db 26
  9141 00001FA1 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9141 00001FAA 7669726F6E6D656E74-
  9141 00001FB3 2073706163650D0A   
  9142                                  
  9143                                  ; 07/06/2023
  9144                                  ;COPYRIGHTMSG:
  9145                                  ;	db 94
  9146                                  ;	db 0Dh,0Ah
  9147                                  ;	db 0Dh,0Ah
  9148                                  ;	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9149                                  ;	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9150                                  
  9151                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9152                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:2286h
  9153                                  COPYRIGHTMSG:
  9154 00001FBB 5E                      	db 94
  9155 00001FBC 0D0A                    	db 0Dh,0Ah
  9156 00001FBE 0D0A                    	db 0Dh,0Ah
  9157 00001FC0 4D6963726F736F6674-     	db 'Microsoft(R) MS-DOS(R) Version 6.22',0Dh,0Ah
  9157 00001FC9 285229204D532D444F-
  9157 00001FD2 532852292056657273-
  9157 00001FDB 696F6E20362E32320D-
  9157 00001FE4 0A                 
  9158 00001FE5 202020202020202020-     	db '             (C)Copyright Microsoft Corp 1981-1994.',0Dh,0Ah
  9158 00001FEE 20202020284329436F-
  9158 00001FF7 70797269676874204D-
  9158 00002000 6963726F736F667420-
  9158 00002009 436F72702031393831-
  9158 00002012 2D313939342E0D0A   
  9159                                  
  9160                                  BADCOMLKMES:
  9161 0000201A 28                      	db 40
  9162 0000201B 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9162 00002024 20434F4D4D414E4420-
  9162 0000202D 736561726368206469-
  9162 00002036 726563746F72792062-
  9162 0000203F 61640D0A           
  9163                                  	; 07/06/2023
  9164                                  BADCOMACCMSG:
  9165 00002043 37                      	db 55
  9166 00002044 537065636966696564-     	db 'Specified COMMAND search directory bad, access denied',0Dh,0Ah
  9166 0000204D 20434F4D4D414E4420-
  9166 00002056 736561726368206469-
  9166 0000205F 726563746F72792062-
  9166 00002068 61642C206163636573-
  9166 00002071 732064656E6965640D-
  9166 0000207A 0A                 
  9167                                  HELPMSG1:
  9168 0000207B 38                      	db 56
  9169 0000207C 537461727473206120-     	db 'Starts a new copy of the MS-DOS command interpreter.',0Dh,0Ah
  9169 00002085 6E657720636F707920-
  9169 0000208E 6F6620746865204D53-
  9169 00002097 2D444F5320636F6D6D-
  9169 000020A0 616E6420696E746572-
  9169 000020A9 7072657465722E0D0A 
  9170 000020B2 0D0A                    	db 0Dh,0Ah
  9171                                  
  9172                                  ;HELPMSG2:
  9173                                  ;	db 70
  9174                                  ;	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9175                                  ;	db 0Dh,0Ah
  9176                                  ;	db 0Dh,0Ah
  9177                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9178                                  HELPMSG2:
  9179 000020B4 38                      	db 56
  9180 000020B5 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P [/MSG]]',0Dh,0Ah
  9180 000020BE 5B64726976653A5D70-
  9180 000020C7 6174685D205B646576-
  9180 000020D0 6963655D205B2F453A-
  9180 000020D9 6E6E6E6E6E5D205B2F-
  9180 000020E2 50205B2F4D53475D5D-
  9180 000020EB 0D0A               
  9181                                  HELPMSG3:
  9182 000020ED 2A                      	db 42
  9183 000020EE 20202020202020205B-     	db '        [/Y [/C command | /K command]]',0Dh,0Ah
  9183 000020F7 2F59205B2F4320636F-
  9183 00002100 6D6D616E64207C202F-
  9183 00002109 4B20636F6D6D616E64-
  9183 00002112 5D5D0D0A           
  9184 00002116 0D0A                    	db 0Dh,0Ah
  9185                                  
  9186                                  ;HELPMSG3:
  9187                                  HELPMSG4:
  9188 00002118 48                              db 72
  9189 00002119 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
  9189 00002122 5D7061746820202020-
  9189 0000212B 537065636966696573-
  9189 00002134 207468652064697265-
  9189 0000213D 63746F727920636F6E-
  9189 00002146 7461696E696E672043-
  9189 0000214F 4F4D4D414E442E434F-
  9189 00002158 4D20               
  9190 0000215A 66696C652E0D0A          	db 'file.',0Dh,0Ah
  9191                                  ;HELPMSG4:
  9192                                  HELPMSG5:
  9193 00002161 4D                      	db 77
  9194 00002162 202064657669636520-     	db '  device          Specifies the device to use for command input and '
  9194 0000216B 202020202020202020-
  9194 00002174 537065636966696573-
  9194 0000217D 207468652064657669-
  9194 00002186 636520746F20757365-
  9194 0000218F 20666F7220636F6D6D-
  9194 00002198 616E6420696E707574-
  9194 000021A1 20616E6420         
  9195 000021A6 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
  9196                                  ;HELPMSG5:
  9197                                  HELPMSG6:
  9198 000021AF 45                      	db 69
  9199 000021B0 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
  9199 000021B9 6E2020202020202020-
  9199 000021C2 536574732074686520-
  9199 000021CB 696E697469616C2065-
  9199 000021D4 6E7669726F6E6D656E-
  9199 000021DD 742073697A6520746F-
  9199 000021E6 206E6E6E6E6E206279-
  9199 000021EF 7465732E           
  9200 000021F3 0D0A                    	db 0Dh,0Ah
  9201                                  ;HELPMSG6:
  9202                                  HELPMSG7:
  9203 000021F5 4D                      	db 77
  9204 000021F6 20202F502020202020-     	db '  /P              Makes the new Command Interpreter permanent '
  9204 000021FF 202020202020202020-
  9204 00002208 4D616B657320746865-
  9204 00002211 206E657720436F6D6D-
  9204 0000221A 616E6420496E746572-
  9204 00002223 707265746572207065-
  9204 0000222C 726D616E656E7420   
  9205 00002234 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
  9205 0000223D 6974292E0D0A       
  9206                                  ;HELPMSG7:
  9207                                  HELPMSG8:
  9208                                  	;db 80
  9209                                  	;db '  /C string       Carries out the command specified by string, and '
  9210                                  	;db 'then stops.',0Dh,0Ah
  9211                                  	; 07/06/2023
  9212 00002243 46                      	db 70
  9213 00002244 20202F4D5347202020-     	db '  /MSG            Stores all error messages in memory (requires /P).'
  9213 0000224D 202020202020202020-
  9213 00002256 53746F72657320616C-
  9213 0000225F 6C206572726F72206D-
  9213 00002268 657373616765732069-
  9213 00002271 6E206D656D6F727920-
  9213 0000227A 287265717569726573-
  9213 00002283 202F50292E         
  9214 00002288 0D0A                    	db 0Dh,0Ah
  9215                                  ;HELPMSG8:
  9216                                  HELPMSG9:
  9217                                  	;db 78
  9218                                  	;db '  /MSG            Specifies that all error messages be stored in '
  9219                                  	;db 'memory. You',0Dh,0Ah
  9220                                  ;HELPMSG9:
  9221                                  	;db 56
  9222                                  	;db '                  need to specify /P with this switch.',0Dh,0Ah
  9223 0000228A 4A                      	db 74
  9224 0000228B 20202F592020202020-     	db '  /Y              Steps through the batch program specified by /C'
  9224 00002294 202020202020202020-
  9224 0000229D 537465707320746872-
  9224 000022A6 6F7567682074686520-
  9224 000022AF 62617463682070726F-
  9224 000022B8 6772616D2073706563-
  9224 000022C1 696669656420627920-
  9224 000022CA 2F43               
  9225 000022CC 206F72202F4B2E0D0A      	db ' or /K.',0Dh,0Ah
  9226                                  
  9227                                  	; 07/06/2023
  9228                                  HELPMSG10:
  9229 000022D5 3F                      	db 63
  9230 000022D6 20202F4320636F6D6D-     	db '  /C command      Executes the specified command and returns.',0Dh,0Ah
  9230 000022DF 616E64202020202020-
  9230 000022E8 457865637574657320-
  9230 000022F1 746865207370656369-
  9230 000022FA 6669656420636F6D6D-
  9230 00002303 616E6420616E642072-
  9230 0000230C 657475726E732E0D0A 
  9231                                  HELPMSG11:
  9232 00002315 4B                      	db 75
  9233 00002316 20202F4B20636F6D6D-     	db '  /K command      Executes the specified command and continues running.'
  9233 0000231F 616E64202020202020-
  9233 00002328 457865637574657320-
  9233 00002331 746865207370656369-
  9233 0000233A 6669656420636F6D6D-
  9233 00002343 616E6420616E642063-
  9233 0000234C 6F6E74696E75657320-
  9233 00002355 72756E6E696E672E   
  9234 0000235D 0D0A                    	db 0Dh,0Ah
  9235 0000235F 0D0A                    	db 0Dh,0Ah
  9236                                  HELPMSG12:
  9237 00002361 4C                      	db 76
  9238 00002362 546865202F5020616E-     	db 'The /P and /MSG switches may be used only when COMMAND is started'
  9238 0000236B 64202F4D5347207377-
  9238 00002374 697463686573206D61-
  9238 0000237D 792062652075736564-
  9238 00002386 206F6E6C7920776865-
  9238 0000238F 6E20434F4D4D414E44-
  9238 00002398 206973207374617274-
  9238 000023A1 6564               
  9239 000023A3 206279207573696E67-     	db ' by using',0Dh,0Ah
  9239 000023AC 0D0A               
  9240                                  HELPMSG13:
  9241 000023AE 2B                      	db 43
  9242 000023AF 746865205348454C4C-     	db 'the SHELL command in the CONFIG.SYS file.',0Dh,0Ah
  9242 000023B8 20636F6D6D616E6420-
  9242 000023C1 696E2074686520434F-
  9242 000023CA 4E4649472E53595320-
  9242 000023D3 66696C652E0D0A     
  9243                                  
  9244                                  HelpMsgs:
  9245 000023DA [7B20]                          dw HELPMSG1
  9246 000023DC [B420]                  	dw HELPMSG2
  9247 000023DE [ED20]                  	dw HELPMSG3
  9248 000023E0 [1821]                  	dw HELPMSG4
  9249 000023E2 [6121]                  	dw HELPMSG5
  9250 000023E4 [AF21]                  	dw HELPMSG6
  9251 000023E6 [F521]                  	dw HELPMSG7
  9252 000023E8 [4322]                  	dw HELPMSG8
  9253 000023EA [8A22]                  	dw HELPMSG9
  9254                                  
  9255                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9256 000023EC [D522]                  	dw HELPMSG10
  9257 000023EE [1523]                  	dw HELPMSG11
  9258 000023F0 [6123]                  	dw HELPMSG12
  9259 000023F2 [AE23]                  	dw HELPMSG13
  9260                                  
  9261                                  	; 23/04/2023
  9262 000023F4 0000                    	dw 0
  9263                                  
  9264                                  ;-----------------------------------------------------------------------------
  9265                                  
  9266                                  ;SR;
  9267                                  ; This table of offsets is used by the init code to calculate the new offsets
  9268                                  ;for these labels after the resident code has been relocated
  9269                                  
  9270                                  ;Reloc_Table:
  9271                                  	;dw offset CODERES:MsgInt2fHandler
  9272                                  	;dw offset CODERES:Int_2e
  9273                                  	;dw offset CODERES:ContC
  9274                                  	;dw offset CODERES:DskErr
  9275                                  	;dw offset CODERES:Exec_Ret
  9276                                  	;dw offset CODERES:TRemCheck
  9277                                  	;dw offset CODERES:TrnLodCom1
  9278                                  	;dw offset CODERES:LodCom
  9279                                  	;dw offset CODERES:MsgRetriever
  9280                                  	;dw offset CODERES:THeadFix
  9281                                  	;dw offset CODERES:Lh_OffUnlink	; M003
  9282                                  
  9283                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9284                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
  9285                                  
  9286                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9287                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26C1h
  9288                                  
  9289                                  Reloc_Table:			          ; MSDOS 5.0 - 6.22 CODERES address
  9290 000023F6 1807                    	dw MsgInt2fHandler - RCODE_START  ; 738h (RESGROUP:738h+X) *
  9291 000023F8 7401                    	dw Int_2e - RCODE_START		  ; 177h (RESGROUP:177h+X) *	
  9292 000023FA 3300                    	dw ContC - RCODE_START		  ; 035h (RESGROUP:035h+X) *
  9293 000023FC 3504                    	dw DSKERR - RCODE_START		  ; 445h (RESGROUP:445h+X) *
  9294 000023FE 2700                    	dw Exec_Ret - RCODE_START	  ; 029h (RESGROUP:029h+X) *
  9295 00002400 9802                    	dw TRemCheck - RCODE_START	  ; 2A3h (RESGROUP:2A3h+X) *
  9296 00002402 1204                    	dw TrnLodCom1 - RCODE_START	  ; 422h (RESGROUP:422h+X) *
  9297 00002404 AB01                    	dw LodCom - RCODE_START		  ; 1AEh (RESGROUP:1AEh+X) *
  9298 00002406 5B07                    	dw MsgRetriever - RCODE_START	  ; 77Bh (RESGROUP:77Bh+X) *
  9299 00002408 B702                    	dw THeadFix - RCODE_START	  ; 2C2h (RESGROUP:2C2h+X) *
  9300 0000240A D407                    	dw Lh_OffUnlink - RCODE_START	  ; 7F4h (RESGROUP:7F4h+X) *
  9301                                  
  9302                                  	; 07/06/2023
  9303                                  	; X = 0D40h for MSDOS 5.0 COMMAND.COM
  9304                                  	; X = 0E50h for MSDOS 6.22 COMMAND.COM
  9305                                  	;; example:
  9306                                  	;;	MsgIn2FHandler is at RESGROUP:1588h or at CODERES:0738h
  9307                                  	;;				(in MSDOS 6.22 COMMAND.COM)
  9308                                  
  9309                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
  9310                                  
  9311                                  ResJmpTable:
  9312 0000240C 00000000                	dd 0			; stores prev stub jump table addr
  9313                                  FirstCom:
  9314 00002410 00                      	db 0			; flag set if first command.com
  9315                                  DevFlag:
  9316 00002411 00                      	db 0
  9317                                  PathFlag:
  9318 00002412 00                      	db 0
  9319                                  
  9320                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
  9321                                  	;;times 13 db 0
  9322                                  
  9323                                  	; 07/06/2023
  9324                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26DEh
  9325                                  	;times 2 db 0
  9326                                  
  9327                                  ; 30/01/2023
  9328                                  coderes_end equ $
  9329                                  
  9330                                  ;INIT	ENDS
  9331                                  
  9332                                  ;	END
  9333                                  
  9334                                  ;-----------------------------------------------------------------------------
  9335                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
  9336                                  ;-----------------------------------------------------------------------------
  9337                                  
  9338                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
  9339                                  	; 30/01/2023
  9340 00002413 00                      db	0
  9341                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"		
  9342                                  	; 07/06/2023
  9343                                  ;db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2023]"
  9344 00002414 526574726F20444F53-     db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2024]" ; 21/07/2024
  9344 0000241D 2076342E3220434F4D-
  9344 00002426 4D414E442E434F4D20-
  9344 0000242F 6279204572646F6761-
  9344 00002438 6E2054616E205B3230-
  9344 00002441 32345D             
  9345 00002444 00                      db	0
  9346                                  
  9347                                  ;-----------------------------------------------------------------------------
  9348                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
  9349                                  ;-----------------------------------------------------------------------------
  9350                                  
  9351                                  ;TAIL    SEGMENT PUBLIC PARA
  9352                                  ;        ORG     0
  9353                                  ;TRANSTART LABEL WORD
  9354                                  ;TAIL    ENDS
  9355                                  
  9356                                  ;ALIGN 16  ; 25/09/2018
  9357                                  
  9358                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9359                                  
  9360                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
  9361                                  numbertomod equ (numbertodiv % 16)
  9362                                  
  9363                                  %if numbertomod>0 & numbertomod<16
  9364 00002445 00<rep Bh>              	times (16-numbertomod) db 0
  9365                                  %endif
  9366                                  
  9367                                  ; 30/01/2023
  9368                                  ;TRANSTART:
  9369                                  
  9370                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
  9371                                  ;	times	128 db 0	
  9372                                  
  9373                                  ;-----------------------------------------------------------------------------
  9374                                  ; SEGMENT - TRANSCODE
  9375                                  ;-----------------------------------------------------------------------------
  9376                                  
  9377                                  ;TRANGROUP: ; 21/04/2018
  9378                                  
  9379                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9380                                  ;-----------------------------------------------------------------------------
  9381                                  
  9382                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
  9383                                  
  9384                                  ; 21/04/2018 - Retro DOS v2.0
  9385                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
  9386                                  ; (these values must be changed when transcom.s source code is changed
  9387                                  ; and data offsets are changed)
  9388                                  ;
  9389                                  ; 30/04/2018
  9390                                  ; 29/04/2018
  9391                                  
  9392                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9393                                  ;COMMAND      EQU  012CH
  9394                                  ;DATINIT      EQU  2091H
  9395                                  ;HEADCALL     EQU  428FH
  9396                                  ;TRANSPACEEND EQU  4D5CH
  9397                                  ;TRANDATAEND  EQU  3F44H
  9398                                  
  9399                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9400                                  ;TRIAGE_INIT  EQU  1F15H
  9401                                  ;PRINTF_INIT  EQU  34E0H 
  9402                                  
  9403                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
  9404                                  
  9405                                  ;TPA	EQU  4293H
  9406                                  ;TRNLEN	EQU  04D6H
  9407                                  
  9408                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
  9409                                  ;COMMAND      EQU  012CH
  9410                                  ;DATINIT      EQU  206FH
  9411                                  ;HEADCALL     EQU  426FH
  9412                                  ; 09/01/2023
  9413                                  ;TRANSPACEEND EQU  4D3CH
  9414                                  ;TRANDATAEND  EQU  3F24H
  9415                                  ;TRIAGE_INIT  EQU  1EF3H
  9416                                  ;PRINTF_INIT  EQU  34BFH 
  9417                                  ;
  9418                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
  9419                                  
  9420                                  ;-----------------------------------------------------------------------------
  9421                                  ; ARENA.INC, MSDOS 6.0, 1991
  9422                                  ;-----------------------------------------------------------------------------
  9423                                  ; 13/10/2018 - Retro DOS 3.0
  9424                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9425                                  
  9426                                  ;BREAK <Memory arena structure>
  9427                                  
  9428                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  9429                                  
  9430                                  ; arena item
  9431                                  
  9432                                  struc ARENA
  9433 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
  9434 00000001 ????                      .owner:	resw 1		; owner of arena item
  9435 00000003 ????                      .size:	resw 1		; size in paragraphs of item
  9436                                  endstruc
  9437                                  
  9438                                  ;-----------------------------------------------------------------------------
  9439                                  ;START OF TRANSIENT PORTION
  9440                                  ;This code is loaded at the end of memory and may be overwritten by
  9441                                  ;memory-intensive user programs.
  9442                                  ;-----------------------------------------------------------------------------
  9443                                  
  9444                                  ; 16/04/2023
  9445                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
  9446                                  ; 29/09/2018
  9447                                  ; 31/01/2023 
  9448                                  ;TRANSTART:	; Offset 1660h in original MSDOS 3.3 COMMAND.COM
  9449                                  			
  9450                                  		; 09/01/2023
  9451                                  		; Offset 2320h in original MSDOS 5.0 COMMAND.COM
  9452                                  			
  9453                                  		; 07/06/2023
  9454                                  		; Offset 26E0h in original MSDOS 6.22 COMMAND.COM
  9455                                  
  9456                                  ; 25/09/2018
  9457                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
  9458                                  ;
  9459                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
  9460                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
  9461                                  ;
  9462                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
  9463                                  ;
  9464                                  ;
  9465                                  ;COMTRANS:
  9466                                  ;
  9467                                  ; 20/10/2018 - Retro DOS v3.0	
  9468                                  ;INCBIN	"TRANCOM3.BIN"
  9469                                  ;
  9470                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
  9471                                  ;
  9472                                  ; 29/04/2018
  9473                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
  9474                                  ;
  9475                                  ;TIMES BSS_SIZE db 0
  9476                                  ;
  9477                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
  9478                                  
  9479                                  ;COMMANDCOMSIZE equ $ - 100h
  9480                                  
  9481                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9482                                  ; ============================================================================
  9483                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
  9484                                  ; ============================================================================
  9485                                  
  9486                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22 COMMAND.COM)
  9487                                  
  9488                                  ; ----------------------------------------------------------------------------
  9489                                  ; START OF TRANSIENT PORTION
  9490                                  ; ----------------------------------------------------------------------------
  9491                                  ; SEGMENT - TRANSCODE
  9492                                  ; ----------------------------------------------------------------------------
  9493                                  
  9494                                  ; 18/04/2023
  9495                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
  9496                                  
  9497                                  ; 18/04/2023
  9498                                  ;-----------------------------------------------------------------------------
  9499                                  ; TRANSCODE segment offset 0
  9500                                  TRANSIENTSTART:
  9501                                  
  9502                                  	; 31/01/2023
  9503 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
  9504                                  
  9505                                  ;============================================================================
  9506                                  ; TCODE.ASM, MSDOS 6.0, 1991
  9507                                  ;============================================================================
  9508                                  ; 12/10/2018 - Retro DOS v3.0
  9509                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
  9510                                  
  9511                                  ;[ORG 100h]
  9512                                  
  9513                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
  9514                                  
  9515                                  ; ---------------------------------------------------------------------------
  9516                                  		
  9517                                  	; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9518                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:0100h)
  9519                                  
  9520                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9521                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0100h)
  9522                                  SETDRV:
  9523 00000100 B40E                    	mov	ah,0Eh
  9524                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
  9525 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
  9526                                  			; DL = new default drive number
  9527                                  			;		(0 = A, 1 = B, ..)
  9528                                  			; Return: AL = number of logical drives
  9529                                  
  9530                                  ; ---------------------------------------------------------------------------
  9531                                  
  9532                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
  9533                                  ; No registers (CS:IP) no flags, nothing.
  9534                                  
  9535                                  TCOMMAND:
  9536 00000104 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
  9537 00000109 B8FFFF                  	mov	ax,-1
  9538 0000010C 8706[4502]              	xchg	ax,[VerVal]
  9539 00000110 83F8FF                  	cmp	ax,-1
  9540 00000113 7404                    	je	short NOSETVER2
  9541 00000115 B42E                    	mov	ah,2Eh
  9542                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
  9543 00000117 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
  9544                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
  9545                                  NOSETVER2:
  9546 00000119 2EFF1E[F19D]            	call	far [cs:HEADCALL]   ; Make sure header fixed
  9547 0000011E 31ED                    	xor	bp,bp		    ; Flag transient not read
  9548 00000120 833E[4302]FF            	cmp	word [SingleCom],-1
  9549 00000125 7505                    	jne	short COMMAND
  9550                                  _$EXITPREP:
  9551 00000127 0E                      	push	cs
  9552 00000128 1F                      	pop	ds
  9553 00000129 E97025                  	jmp	_$EXIT		; Have finished the single command
  9554                                  
  9555                                  ; ---------------------------------------------------------------------------
  9556                                  ;
  9557                                  ; Main entry point from resident portion.
  9558                                  ;
  9559                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
  9560                                  ;   just beginning the processing of another command.
  9561                                  ;
  9562                                  ; ---------------------------------------------------------------------------
  9563                                  
  9564                                  ; We are not always sure of the state of the world at this time. We presume
  9565                                  ; worst case and initialize the relevant registers: segments and stack.
  9566                                  
  9567                                  COMMAND:
  9568 0000012C FC                      	cld
  9569 0000012D 8CC8                    	mov	ax,cs
  9570 0000012F FA                      	cli
  9571 00000130 8ED0                    	mov	ss,ax
  9572                                  	;mov	sp,offset TRANGROUP:STACK
  9573                                  				; 07/06/2023
  9574 00000132 BC[90A9]                	mov	sp,STACK	; 0AF24h for MSDOS 6.22 COMMAND.COM
  9575                                  				; 09854h for MSDOS 5.0 COMMAND.COM
  9576 00000135 FB                      	sti
  9577                                  		
  9578 00000136 8EC0                    	mov	es,ax
  9579                                  		
  9580                                  	; MSDOS 6.0
  9581 00000138 8ED8                    	mov	ds,ax		;AN000; set DS to transient
  9582                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
  9583                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
  9584                                  	; 31/01/2023
  9585 0000013A E8AF54                  	call	TSYSLOADMSG
  9586 0000013D C606[27A2]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
  9587                                  
  9588                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9589                                  	;mov	ds,[ss:RESSEG]
  9590                                  	; 31/01/2023
  9591 00000142 8E1E[F39D]              	mov	ds,[RESSEG]
  9592 00000146 36C606[CF9B]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
  9593 0000014C 36C606[529C]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
  9594                                  
  9595                                  ; If we have just loaded the transient, then we do NOT need to initialize the
  9596                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
  9597                                  ; I guess not: the only circumstances in which we reload the command processor
  9598                                  ; is after a transient program execution. In this case, we let the current
  9599                                  ; directory lie where it may.
  9600                                  
  9601 00000152 09ED                    	or	bp,bp		; See if just read
  9602 00000154 7409                    	jz	short TESTRDIR	; Not read, check user directory
  9603 00000156 36C706[D09B]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
  9604 0000015D EB17                    	jmp	short NOSETBUF
  9605                                  TESTRDIR:
  9606 0000015F 803E[3F02]00            	cmp	byte [RestDir],0
  9607 00000164 7410                    	jz	short NOSETBUF	; User directory OK
  9608 00000166 1E                      	push	ds
  9609                                  
  9610                                  ; We have an unusual situation to handle. The user *may* have changed his
  9611                                  ; directory as a result of an internal command that got aborted. Restoring it
  9612                                  ; twice may not help us: the problem may never go away. We just attempt it
  9613                                  ; once and give up.
  9614                                  
  9615 00000167 C606[3F02]00            	mov	byte [RestDir],0 ; Flag users dirs OK
  9616                                  
  9617                                  	; Restore users directory
  9618 0000016C 0E                      	push	cs
  9619 0000016D 1F                      	pop	ds
  9620 0000016E BA[D59C]                	mov	dx,USERDIR1
  9621 00000171 B43B                    	mov	ah,3Bh
  9622                                  	;mov	ah,CHDir ; 3Bh
  9623 00000173 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
  9624                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
  9625 00000175 1F                      	pop	ds
  9626                                  NOSETBUF:
  9627 00000176 803E[B602]00            	cmp	byte [PipeFiles],0
  9628 0000017B 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
  9629 0000017D 803E[B502]00            	cmp	byte [PipeFlag],0
  9630 00000182 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
  9631 00000184 E8B630                  	call	PIPEDEL
  9632                                  NOPCLOSE:
  9633                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
  9634                                  	; 31/01/2023
  9635 00000187 C606[3702]00            	mov	byte [ExtCom],0 ; Flag internal command
  9636 0000018C 8CC8                    	mov	ax,cs		; Get segment we're in
  9637 0000018E 8ED8                    	mov	ds,ax
  9638 00000190 50                      	push	ax
  9639                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
  9640 00000191 BA[90A9]                	mov	dx,INTERNATVARS ; 0AF24h for MSDOS 6.22 COMMAND.COM
  9641                                  				; 09854h for MSDOS 5.0 COMMAND.COM
  9642 00000194 B80038                  	mov	ax,3800h
  9643                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
  9644 00000197 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
  9645                                  			; get current-country info
  9646                                  			; DS:DX	-> buffer for returned info
  9647 00000199 58                      	pop	ax
  9648 0000019A 2B06[F59D]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
  9649 0000019E 53                      	push	bx
  9650 0000019F BB1000                  	mov	bx,16
  9651 000001A2 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
  9652 000001A4 5B                      	pop	bx
  9653 000001A5 09D2                    	or	dx,dx		; See if over 64K
  9654 000001A7 7403                    	jz	short SAVSIZ	; OK if not
  9655 000001A9 B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
  9656                                  SAVSIZ:
  9657                                  
  9658                                  ; AX is the number of bytes free in the buffer between the resident and the
  9659                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
  9660                                  
  9661 000001AC 3D0002                  	cmp	ax,512
  9662 000001AF 7603                    	jbe	short GOTSIZE
  9663                                  	;and	ax,~1FFh
  9664 000001B1 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
  9665                                  GOTSIZE:
  9666 000001B4 A3[129E]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
  9667 000001B7 8E1E[F39D]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
  9668                                  
  9669 000001BB F606[3B02]01            	test	byte [EchoFlag],1 
  9670 000001C0 741E                    	jz	short GETCOM	; Don't do the CRLF
  9671 000001C2 E85730                  	call	SINGLETEST
  9672 000001C5 7219                    	jb	short GETCOM
  9673 000001C7 F606[B502]FF            	test	byte [PipeFlag],0FFh ; -1
  9674 000001CC 7512                    	jnz	short GETCOM
  9675                                  				; G  Don't print prompt in FOR
  9676 000001CE F606[4902]FF            	test	byte [ForFlag],0FFh ; -1
  9677 000001D3 750B                    	jnz	short GETCOM
  9678                                  				; G  Don't print prompt if in batch
  9679 000001D5 F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1
  9680 000001DB 7503                    	jnz	short GETCOM
  9681 000001DD E84129                  	call	CRLF2
  9682                                  
  9683                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9684                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:01E0h
  9685                                  GETCOM:
  9686 000001E0 833E[4302]00            	cmp     word [SingleCom],0
  9687 000001E5 750D                    	jnz     short GETCOM2
  9688 000001E7 F706[E701]FFFF          	test    word [Batch],0FFFFh
  9689 000001ED 7505                    	jnz     short GETCOM2
  9690 000001EF 8026[FC03]EF            	and     byte [Y_Flag],0EFh ; Y/N question overwrite flag ; ~10h
  9691                                  
  9692                                  ;GETCOM:	; MSDOS 5.0 COMMAND.COM
  9693                                  GETCOM2:
  9694 000001F4 C606[4E02]00            	mov	byte [Call_Flag],0 ; G Reset call flags
  9695 000001F9 C606[4F02]00            	mov	byte [Call_Batch_Flag],0
  9696 000001FE B419                    	mov	ah,19h
  9697                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  9698 00000200 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
  9699 00000202 36A2[059E]              	mov	[ss:CURDRV],al
  9700 00000206 F606[B502]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
  9701 0000020B 7403                    	jz	short NOPIPE
  9702 0000020D E9F830                  	jmp	PIPEPROC	; Continue the pipeline
  9703                                  NOPIPE:
  9704 00000210 F606[3B02]01            	test	byte [EchoFlag],1
  9705 00000215 7417                    	jz	short NOPDRV	; No prompt if echo off
  9706 00000217 E80230                  	call	SINGLETEST
  9707 0000021A 7212                    	jb	short NOPDRV
  9708 0000021C F606[4902]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
  9709 00000221 750B                    	jnz	short NOPDRV
  9710 00000223 F706[E701]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
  9711 00000229 750D                    	jnz	short TESTFORBAT
  9712 0000022B E8B520                  	call	PRINT_PROMPT	; Prompt the user
  9713                                  NOPDRV:
  9714 0000022E F606[4902]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
  9715 00000233 7403                    	jz	short TESTFORBAT
  9716 00000235 E9760C                  	jmp	FORPROC		; Continue the FOR
  9717                                  
  9718                                  TESTFORBAT:
  9719 00000238 36C606[9E9D]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
  9720 0000023E C606[6402]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
  9721 00000243 C606[6302]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
  9722 00000248 C606[4802]00            	mov	byte [IfFlag],0	; no more ifs...
  9723 0000024D F706[E701]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
  9724 00000253 7441                    	jz	short ISNOBAT
  9725                                  
  9726                                  	; 31/01/2023
  9727                                  
  9728                                  	; MSDOS 6.0
  9729                                  
  9730                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
  9731                                  
  9732 00000255 06                      	push	es			;AN000; save ES
  9733 00000256 1E                      	push	ds			;AN000; save DS
  9734                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
  9735                                  	; 05/02/2023
  9736 00000257 B80219                  	mov	ax,1902h
  9737 0000025A 8E06[E701]              	mov	es,[Batch]		;AN000; get batch segment
  9738                                  	;mov	di,20h
  9739 0000025E BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
  9740 00000261 0E                      	push	cs			;AN000; get local segment to DS
  9741 00000262 1F                      	pop	ds			;AN000;
  9742                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
  9743 00000263 BA[529C]                	mov	dx,COMBUF
  9744 00000266 CD2F                    	int	2Fh			;AN000; call the shell
  9745                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
  9746                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
  9747                                  		; final filename element uppercased
  9748                                  		; DS:DX -> buffer for results
  9749                                  	;cmp	al,0FFh
  9750 00000268 3CFF                    	cmp	al,shell_action		;AN000; does shell have a commmand?
  9751 0000026A 1F                      	pop	ds			;AN000; restore DS
  9752 0000026B 07                      	pop	es			;AN000; restore ES
  9753 0000026C 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
  9754                                  
  9755                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9756 0000026E 1E                      	push	ds
  9757 0000026F E8D503                  	call	READBAT			; Continue BATCH
  9758 00000272 1F                      	pop	ds
  9759 00000273 C606[5202]00            	mov	byte [NullFlag],0	;G reset no command flag
  9760 00000278 F706[E701]FFFF          	test	word [Batch],0FFFFh
  9761 0000027E 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
  9762 00000280 8B1E[5002]              	mov	bx,[Next_Batch]
  9763                                  	; 31/01/2023
  9764 00000284 09DB                    	or	bx,bx
  9765                                  	;cmp	bx,0			;G see if there is a new batch file
  9766 00000286 740A                    	jz	short JDOCOM1		;G no - go do command
  9767 00000288 891E[E701]              	mov	[Batch],bx		;G get segment of next batch file
  9768 0000028C C706[5002]0000          	mov	word [Next_Batch],0	;G reset next batch
  9769                                  JDOCOM1:
  9770 00000292 0E                      	push	cs
  9771 00000293 1F                      	pop	ds
  9772                                  	;jmp	short DOCOM1
  9773                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9774 00000294 EB5D                    	jmp	short DOCOM0
  9775                                  ISNOBAT:
  9776 00000296 833E[4302]00            	cmp	word [SingleCom],0
  9777 0000029B 741D                    	jz	short REGCOM
  9778                                  	; 07/06/2023 - MSDOS 6.22 COMMAND.COM
  9779 0000029D 8B36[4102]              	mov	si,[SemiPermCom] ;  MSDOS 6.0
  9780                                  	;mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
  9781 000002A1 8736[4302]              	xchg	si,[SingleCom]
  9782 000002A5 BF[549C]                	mov	di,COMBUF+2
  9783 000002A8 31C9                    	xor	cx,cx
  9784                                  SINGLELOOP:
  9785 000002AA AC                      	lodsb
  9786 000002AB AA                      	stosb
  9787 000002AC 41                      	inc	cx
  9788 000002AD 3C0D                    	cmp	al,0Dh
  9789 000002AF 75F9                    	jnz	short SINGLELOOP
  9790 000002B1 49                      	dec	cx
  9791 000002B2 0E                      	push	cs
  9792 000002B3 1F                      	pop	ds
  9793 000002B4 880E[539C]              	mov	[COMBUF+1],cl
  9794                                  
  9795                                  ; do NOT issue a trailing CRLF...
  9796                                  
  9797                                  	;jmp	short DOCOM1
  9798                                  	; 07/06/2023
  9799                                  	; MSDOS 6.22 COMMAND.COM
  9800 000002B8 EB39                    	jmp	short DOCOM0
  9801                                  
  9802                                  	;nop
  9803                                  
  9804                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
  9805                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
  9806                                  
  9807                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9808                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02BBh
  9809                                  
  9810                                  ; We have a normal command.  
  9811                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
  9812                                  ; sometimes they aren't. At this point, we automatically close all spool
  9813                                  ; files and turn on truncation mode.
  9814                                  
  9815                                  REGCOM:
  9816                                  	;mov	ax,(ServerCall shl 8) + 9
  9817                                  	; 31/01/2023
  9818 000002BA B8095D                  	mov	ax,5D09h
  9819                                  	;mov	ax,(SERVERCALL<<8)+9
  9820 000002BD CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
  9821                                  	;mov	ax,(ServerCall shl 8) + 8
  9822 000002BF B8085D                  	mov	ax,5D08h
  9823                                  	;mov	ax,(SERVERCALL<<8)+8
  9824 000002C2 B201                    	mov	dl,1
  9825 000002C4 CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
  9826                                  			; DL = 00h redirected output is	combined
  9827                                  			;      01h redirected output placed in separate	jobs
  9828                                  			; start	new print job now
  9829 000002C6 0E                      	push	cs
  9830 000002C7 1F                      	pop	ds	; Need local segment to point to buffer
  9831 000002C8 BA[CF9B]                	mov	dx,UCOMBUF
  9832                                  
  9833                                  	; MSDOS 6.0
  9834                                  ;	Try to read interactive command line via DOSKey.
  9835                                  ;	If that fails, use DOS Buffered Keyboard Input.
  9836                                  
  9837                                  	; 31/01/2023
  9838 000002CB B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
  9839 000002CE CD2F                    	int	2Fh
  9840 000002D0 09C0                    	or	ax,ax
  9841 000002D2 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
  9842                                  
  9843 000002D4 B40A                    	mov	ah,0Ah
  9844                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
  9845 000002D6 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
  9846                                  			; DS:DX	-> buffer
  9847                                  GOTCOM:
  9848 000002D8 8A0E[CF9B]              	mov	cl,[UCOMBUF]
  9849 000002DC 30ED                    	xor	ch,ch
  9850 000002DE 83C103                  	add	cx,3
  9851 000002E1 BE[CF9B]                	mov	si,UCOMBUF
  9852 000002E4 BF[529C]                	mov	di,COMBUF
  9853 000002E7 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
  9854                                  
  9855                                  	; -------------
  9856                                  
  9857                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9858                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02EDh
  9859                                  
  9860 000002E9 E83528                  	call	CRLF2
  9861 000002EC 31C0                    	xor	ax,ax
  9862 000002EE EB06                    	jmp	short DOCOM2
  9863                                  	; -------------
  9864                                  
  9865                                  DOCOM:
  9866 000002F0 E82E28                  	call	CRLF2
  9867                                  
  9868                                  	; -------------
  9869                                  
  9870                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9871                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02F4h
  9872                                  DOCOM0:
  9873 000002F3 B80100                  	mov	ax,1
  9874                                  DOCOM2:
  9875 000002F6 1E                      	push	ds
  9876 000002F7 8E1E[F39D]              	mov     ds,[RESSEG]
  9877 000002FB A3[9B01]                	mov	[cox_Y_option],ax
  9878 000002FE 1F                      	pop	ds
  9879 000002FF BE[529C]                	mov	si,COMBUF
  9880 00000302 8A4C01                  	mov	cl,[si+1]
  9881 00000305 30ED                    	xor	ch,ch
  9882 00000307 83C602                  	add	si,2
  9883 0000030A E82501                  	call	get_cox_y_n_opt
  9884 0000030D 7303                    	jnc	short DOCOM1    ; YES answer
  9885                                  	; 07/06/2023
  9886                                  NULLCOMJ:
  9887 0000030F E90201                  	jmp	NULLCOM         ; NO answer
  9888                                  	; -------------
  9889                                  
  9890                                  	; MSDOS 5.0 & MSDOS 6.0 COMMAND.COM
  9891                                  DOCOM1:
  9892 00000312 E8932B                  	call	PRESCAN		; Cook the input buffer
  9893 00000315 7403                    	jz	short NOPIPEPROC
  9894 00000317 E96D2F                  	jmp	PIPEPROCSTRT	; Fire up the pipe
  9895                                  
  9896                                  	; 07/06/2023
  9897                                  ;NULLCOMJ:
  9898                                  	;jmp	NULLCOM
  9899                                  
  9900                                  NOPIPEPROC:
  9901 0000031A E86832                  	call	PARSELINE
  9902 0000031D 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
  9903                                  BADPARSE:
  9904 0000031F 0E                      	push	cs
  9905 00000320 1F                      	pop	ds
  9906 00000321 BA[F391]                	mov	dx,BADNAM_PTR	; 31/01/2023
  9907 00000324 E8E051                  	call	std_eprintf
  9908 00000327 E9DAFD                  	jmp	TCOMMAND
  9909                                  
  9910                                  OKPARSE:
  9911                                  	;test	byte [ARGV0_ARG_FLAGS],2
  9912                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
  9913                                  	; 01/02/2023
  9914 0000032A F606[43A2]02            	test	byte [ARG+ARGV_ELE.argflags],2
  9915 0000032F 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
  9916                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
  9917 00000331 833E[01A5]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
  9918 00000336 74D7                    	jz	short NULLCOMJ
  9919                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
  9920 00000338 833E[46A2]00            	cmp	word [ARG+ARGV_ELE.arglen],0
  9921 0000033D 74D0                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
  9922                                  
  9923 0000033F BE[549C]                	mov	si,COMBUF+2
  9924 00000342 BF[AB9F]                	mov	di,IDLEN
  9925                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9926                                  				; Make FCB with blank scan-off
  9927                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9928 00000345 B80129                  	mov	ax,2901h
  9929 00000348 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9930                                  			; DS:SI	-> string to parse
  9931                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9932                                  			; AL = bit mask	to control parsing
  9933                                  	;mov	bx,[ARG_ARGV]
  9934 0000034A 8B1E[41A2]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
  9935 0000034E 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
  9936 00000352 751B                    	jne	short DRVGD	; no, use default of zero...
  9937 00000354 8A17                    	mov	dl,[bx]		; pick-up drive letter
  9938                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
  9939                                  	;and	dl,~20h
  9940 00000356 80E2DF                  	and	dl,0DFh		; uppercase the sucker
  9941                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
  9942                                  	; 31/01/2023
  9943 00000359 80EA41                  	sub	dl,'A'
  9944 0000035C 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
  9945 0000035E 740C                    	je	short DRVBADJ	; It was invalid.
  9946                                  	;mov	di,[ARGV0_ARGSTARTEL]
  9947 00000360 8B3E[44A2]              	mov	di,[ARG+ARGV_ELE.argstartel]
  9948 00000364 803D00                  	cmp	byte [di],0	; is there actually a command there?
  9949 00000367 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
  9950 00000369 E994FD                  	jmp	SETDRV		; and set drive to new drive spec
  9951                                  DRVBADJ:
  9952 0000036C E93B2A                  	jmp	DRVBAD
  9953                                  DRVGD:
  9954 0000036F 8A05                    	mov	al,[di]
  9955 00000371 A2[119E]                	mov	[SPECDRV],al
  9956 00000374 B020                    	mov	al,' '
  9957 00000376 B90900                  	mov	cx,9
  9958 00000379 47                      	inc	di
  9959 0000037A F2AE                    	repne	scasb		; Count number of letters in command name
  9960 0000037C B008                    	mov	al,8
  9961 0000037E 28C8                    	sub	al,cl
  9962 00000380 A2[AB9F]                	mov	[IDLEN],al	; IDLEN is truly the length
  9963 00000383 BF8100                  	mov	di,81h
  9964 00000386 56                      	push	si
  9965 00000387 BE[549C]                	mov	si,COMBUF+2	; Skip over all leading delims
  9966 0000038A E8A127                  	call	scanoff
  9967                                  
  9968                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9969                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
  9970                                  
  9971                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9972                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0391h
  9973                                  
  9974                                  	; MSDOS 6.0
  9975                                  ;SR;
  9976                                  ; We are going to skip over the first char always. The logic is that the
  9977                                  ;command tail can never start from the first character. The code below is 
  9978                                  ;trying to figure out the command tail and copy it to the command line 
  9979                                  ;buffer in the PSP. However, if the first character happens to be a switch
  9980                                  ;character and the user given command line is a full 128 bytes, we try to
  9981                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
  9982                                  ;char overwrites the code and leads to a crash on future commands.
  9983                                  
  9984 0000038D 46                      	inc	si ;  MSDOS 6.0
  9985                                  
  9986                                  DO_SKIPCOM:
  9987 0000038E AC                      	lodsb			; move command line pointer over
  9988 0000038F E8A427                  	call	DELIM		; pathname -- have to do it ourselves
  9989 00000392 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
  9990 00000394 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
  9991 00000396 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
  9992 00000398 3A06[F79D]              	cmp	al,[SWITCHAR]	; specified command string
  9993 0000039C 75F0                    	jnz	short DO_SKIPCOM 
  9994                                  DO_SKIPPED:
  9995 0000039E 4E                      	dec	si
  9996 0000039F 31C9                    	xor	cx,cx
  9997                                  COMTAIL:
  9998 000003A1 AC                      	lodsb
  9999 000003A2 AA                      	stosb			; Move command tail to 80h
 10000 000003A3 3C0D                    	cmp	al,0Dh
 10001 000003A5 E0FA                    	loopne	COMTAIL
 10002 000003A7 4F                      	dec	di
 10003 000003A8 89FD                    	mov	bp,di
 10004 000003AA F6D1                    	not	cl
 10005 000003AC 880E8000                	mov	[80h],cl
 10006 000003B0 5E                      	pop	si
 10007                                  ;-----
 10008                                  ; Some of these comments are sadly at odds with this brave new code.
 10009                                  ;-----
 10010                                  ; If the command has 0 parameters must check here for
 10011                                  ; any switches that might be present.
 10012                                  ; SI -> first character after the command.
 10013                                  
 10014                                  	;mov	di,arg.argv[0].argsw_word
 10015                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10016 000003B1 8B3E[48A2]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10017 000003B5 893E[089E]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
 10018                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
 10019                                  				; s = argv[1];
 10020                                  	;mov	si,[ARGV1_ARGPOINTER]
 10021 000003B9 8B36[4CA2]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
 10022 000003BD 09F6                    	or	si,si		;   if (s == NULL)
 10023 000003BF 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
 10024 000003C1 89EE                    	mov	si,bp
 10025                                  DOPARSE:
 10026 000003C3 BF5C00                  	mov	di,FCB ; 5Ch
 10027                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10028                                  	; 01/02/2023
 10029 000003C6 B80129                  	mov	ax,2901h
 10030                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10031 000003C9 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10032                                  			; DS:SI	-> string to parse
 10033                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10034                                  			; AL = bit mask	to control parsing
 10035 000003CB A2[069E]                	mov	[PARM1],al	; Save result of parse
 10036                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
 10037                                  	;mov	di,[ARGV1_ARGSW_WORD]
 10038 000003CE 8B3E[53A2]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
 10039 000003D2 893E[0A9E]              	mov	[ARG1S],di
 10040                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
 10041                                  				; s = argv[2];
 10042                                  	;mov	si,[ARGV2_ARGPOINTER]
 10043 000003D6 8B36[57A2]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
 10044 000003DA 09F6                    	or	si,si		; if (s == NULL)
 10045 000003DC 7502                    	jnz	short DOPARSE2
 10046 000003DE 89EE                    	mov	si,bp		;     s = bp; (buffer end)
 10047                                  DOPARSE2:			
 10048 000003E0 BF6C00                  	mov	di,FCB+10h ; 6Ch
 10049                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10050 000003E3 B80129                  	mov	ax,2901h
 10051                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10052 000003E6 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10053                                  			; DS:SI	-> string to parse
 10054                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10055                                  			; AL = bit mask	to control parsing
 10056 000003E8 A2[079E]                	mov	[PARM2],al	; Save result
 10057                                  	;mov	di,[ARGV2_ARGSW_WORD]
 10058                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
 10059 000003EB 8B3E[5EA2]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
 10060 000003EF 893E[0C9E]              	mov	[ARG2S],di
 10061                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10062                                  	;mov	di,arg.argv[0].argsw_word
 10063 000003F3 8B3E[48A2]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10064 000003F7 F7D7                    	not	di		; ARGTS doesn't include the flags
 10065                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
 10066                                  	;and	di,arg.argswinfo	
 10067 000003F9 233E[03A5]              	and	di,[ARG+ARG_UNIT.argswinfo]
 10068 000003FD 893E[0E9E]              	mov	[ARGTS],di
 10069                                  
 10070 00000401 A0[AB9F]                	mov	al,[IDLEN]
 10071 00000404 8A16[119E]              	mov	dl,[SPECDRV]
 10072 00000408 08D2                    	or	dl,dl		; if a drive was specified...
 10073 0000040A 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
 10074 0000040C FEC8                    	dec	al		; (I don't know why -- old code did it)
 10075 0000040E E9EC28                  	jmp	FNDCOM		; otherwise, check internal com table
 10076                                  EXTERNALJ1:
 10077 00000411 E9EE29                  	jmp	EXTERNAL
 10078                                  NULLCOM:
 10079 00000414 8E1E[F39D]              	mov	ds,[RESSEG]
 10080 00000418 F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
 10081 0000041E 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
 10082 00000420 C606[5202]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
 10083                                  	;mov	byte [NullFlag],nullcommand ; 1
 10084                                  NOSETFLAG:
 10085 00000425 833E[4302]FF            	cmp	word [SingleCom],0FFFFh ; -1
 10086 0000042A 7403                    	je	short EXITJ
 10087 0000042C E9B1FD                  	jmp	GETCOM
 10088                                  EXITJ:
 10089 0000042F E9F5FC                  	jmp	_$EXITPREP
 10090                                  
 10091                                  ; 07/06/2023
 10092                                  ; ---------------------------------------------------------------------------
 10093                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 10094                                  ; -----------------------------------------
 10095                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 10096                                  ; ---------------------------------------------------------------------------
 10097                                  
 10098                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10099                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0436h
 10100                                  
 10101                                  get_cox_y_n_opt:
 10102 00000432 E339                    	jcxz	ccydp4		; empty	input buffer
 10103                                  ccydp0:
 10104 00000434 803C0D                  	cmp	byte [si],0Dh
 10105 00000437 7434                    	je	short ccydp4
 10106 00000439 803C0A                  	cmp	byte [si],0Ah
 10107 0000043C 742F                    	je	short ccydp4
 10108 0000043E 06                      	push	es
 10109 0000043F 8E06[F39D]              	mov	es,[RESSEG]
 10110 00000443 26A0[FC03]              	mov	al,[es:Y_Flag]
 10111 00000447 A810                    	test	al,10h		; bit 1	= 1 -> Y/N answer is needed
 10112 00000449 7421                    	jz	short ccydp3 ; cf=0 ; 07/06/2023
 10113 0000044B 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],1 ; (in) Batch file ?
 10114 00000451 7419                    	je	short ccydp3	; yes, don't check for ESCAPE
 10115 00000453 A840                    	test	al,40h		; ESCAPE status
 10116                                  				; (bit 4 is zero if Y/N	is escaped)
 10117 00000455 7417                    	jz	short ccydp5
 10118                                  ccydp1:
 10119 00000457 26F706[E701]FFFF        	test	word [es:Batch],0FFFFh
 10120 0000045E 740B                    	jz	short ccydp2
 10121 00000460 268E06[E701]            	mov	es,[es:Batch]
 10122                                  	;mov	byte [es:2],1 ; [es:BATCHSEGMENT.BatchEOF]
 10123 00000465 26C606020001            	mov	byte [es:BATCHSEGMENT.BatchEOF],1
 10124                                  ccydp2:
 10125 0000046B F9                      	stc
 10126                                  ccydp3:		; 07/06/2023 ; cf = 0
 10127 0000046C 07                      	pop	es
 10128                                  ccydp4:		; 07/06/2023 ; cf = 0
 10129 0000046D C3                      	retn
 10130                                  
 10131                                  ;ccydp3:
 10132                                  ;	pop	es
 10133                                  ;ccydp4:
 10134                                  ;	clc
 10135                                  ;	retn
 10136                                  
 10137                                  ccydp5:
 10138 0000046E 89F2                    	mov	dx,si
 10139 00000470 BB0200                  	mov	bx,2
 10140 00000473 B440                    	mov	ah,40h
 10141 00000475 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 10142                                  			; BX = file handle, CX = number	of bytes to write
 10143                                  			; DS:DX -> buffer
 10144 00000477 BA[1594]                	mov	dx,cox_Y_quest_ptr ; msg number	pointer	of ' [Y/N]?'
 10145                                  				   ; (is 1082)
 10146 0000047A E88A50                  	call	std_eprintf
 10147 0000047D 1E                      	push	ds
 10148 0000047E B83B04                  	mov	ax,1083	; cox_Y_answer number (overwrite Y/N answer letter)
 10149 00000481 B6FF                    	mov	dh,0FFh		; utility_msg_class
 10150 00000483 E86C51                  	call	TSYSGETMSG
 10151                                  	;mov	cx,'NY' ; MASM word format
 10152                                  	; NASM word format
 10153 00000486 B9594E                  	mov	cx,'YN'        ; 'YN' Yes/No (CL=Y)
 10154 00000489 7202                    	jc	short ccydp6
 10155 0000048B 8B0C                    	mov	cx,[si]
 10156                                  ccydp6:
 10157 0000048D 1F                      	pop	ds
 10158                                  ccydp7:
 10159 0000048E B408                    	mov	ah,8
 10160 00000490 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 10161                                  			; Return: AL = character
 10162 00000492 84C0                    	test	al,al
 10163 00000494 7510                    	jnz	short ccydp8
 10164 00000496 B408                    	mov	ah,8
 10165 00000498 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 10166                                  			; Return: AL = character
 10167 0000049A 3C3F                    	cmp	al,'?'
 10168 0000049C 75F0                    	jne	short ccydp7
 10169 0000049E 26800E[FC03]40          	or	byte [es:Y_Flag],40h ; bit 4, question flag
 10170 000004A4 EBB1                    	jmp	short ccydp1
 10171                                  ccydp8:
 10172 000004A6 3C1B                    	cmp	al,1Bh		; ESCAPE ?
 10173 000004A8 7509                    	jne	short ccydp9
 10174 000004AA 268026[FC03]EF          	and	byte [es:Y_Flag],0EFh ; (ESCAPE) Clear bit 4 ; ~10h
 10175                                  	;jmp	short ccydp12
 10176                                  	; 07/06/2023
 10177 000004B0 9C                      	pushf
 10178 000004B1 EB14                    	jmp	short ccydp12
 10179                                  ccydp9:
 10180 000004B3 24DF                    	and	al,0DFh		; uppercase
 10181 000004B5 38E8                    	cmp	al,ch		; NO character (N)
 10182 000004B7 7503                    	jne	short ccydp10
 10183 000004B9 F9                      	stc
 10184 000004BA EB04                    	jmp	short ccydp11	; cf = 1 -> overwrite NO answer
 10185                                  ccydp10:
 10186 000004BC 38C8                    	cmp	al,cl		; YES character	(Y)
 10187 000004BE 75CE                    	jne	short ccydp7
 10188                                  ccydp11:
 10189 000004C0 9C                      	pushf			; cf = 0 -> overwrite YES answer
 10190 000004C1 88C2                    	mov	dl,al
 10191 000004C3 B402                    	mov	ah,2
 10192 000004C5 CD21                    	int	21h	; DOS -	DISPLAY	OUTPUT
 10193                                  			; DL = character to send to standard output
 10194                                  	; 07/06/2023
 10195                                  	;popf
 10196                                  ccydp12:
 10197                                  	;pushf
 10198 000004C7 E85726                  	call	CRLF2
 10199 000004CA 9D                      	popf
 10200 000004CB 07                      	pop	es
 10201 000004CC C3                      	retn
 10202                                  
 10203                                  ;============================================================================
 10204                                  ; MSHALO.ASM, MSDOS 6.0, 1991
 10205                                  ;============================================================================
 10206                                  ; 12/10/2018 - Retro DOS v3.0
 10207                                  
 10208                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
 10209                                  
 10210                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
 10211                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
 10212                                  ;   there is a header that describes a block of rom program.  This header
 10213                                  ;   contains information needed to initialize a module and to provide PCDOS
 10214                                  ;   with a set of reserved names for execution.
 10215                                  ;
 10216                                  ;   This header has the following format:
 10217                                  ;
 10218                                  ;   rom_header	STRUC
 10219                                  ;	Signature1  DB	55h
 10220                                  ;	Signature2  DB	AAh
 10221                                  ;	rom_length  DB	?		; number of 512 byte pieces
 10222                                  ;	init_jmp    DB	3 dup (?)
 10223                                  ;	name_list   name_struc <>
 10224                                  ;   rom_header	ENDS
 10225                                  ;
 10226                                  ;   name_struc	STRUC
 10227                                  ;	name_len    DB	?
 10228                                  ;	name_text   DB	? DUP (?)
 10229                                  ;	name_jmp    DB	3 DUP (?)
 10230                                  ;   name_struc	ENDS
 10231                                  ;
 10232                                  ;   The name list is a list of names that are reserved by a particular section
 10233                                  ;   of a module.  This list of names is terminated by a null name (length
 10234                                  ;   is zero).
 10235                                  ;
 10236                                  ;   Consider now, the PCDOS action when a user enters a command:
 10237                                  ;
 10238                                  ;	COMMAND.COM has control.
 10239                                  ;	o   If location FFFFEh has FDh then
 10240                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
 10241                                  ;		    by AAh, stop scan if we get above or = F0000H
 10242                                  ;	o	When we've found one, compare the name entered by the user
 10243                                  ;		    with the one found in the rom.  If we have a match, then
 10244                                  ;		    set up the environment for execution and do a long jump
 10245                                  ;		    to the near jump after the found name.
 10246                                  ;	o	If no more names in the list, then continue scanning the module
 10247                                  ;		    for more 55h followed by AAh.
 10248                                  ;	o   We get to this point only if there is no matching name in the
 10249                                  ;		rom.  We now look on disk for the command.
 10250                                  ;
 10251                                  ;   This gives us the flexibility to execute any rom cartridge without having
 10252                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
 10253                                  ;   want to be invisible to the DOS should not have any names in their lists
 10254                                  ;   (i.e. they have a single null name).
 10255                                  ;
 10256                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 10257                                  ;   Clearly this version will be available on disk.  How does a user actually
 10258                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 10259                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 10260                                  ;   solution:
 10261                                  ;
 10262                                  ;   o	Keep things consistent and force the user to have his software named
 10263                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 10264                                  
 10265                                  struc ROM_HEADER
 10266 00000000 ??                          .signature1: resb 1
 10267 00000001 ??                          .signature2: resb 1
 10268 00000002 ??                          .rom_length: resb 1
 10269 00000003 ??????                      .init_jmp:	 resb 3
 10270 00000006 ??                          .name_list:	 resb 1
 10271                                      .size:
 10272                                  endstruc
 10273                                  
 10274                                  struc NAME_STRUC
 10275 00000000 ??                          .name_len:	resb 1
 10276 00000001 ??                          .name_text:	resb 1
 10277 00000002 ??????                      .name_jmp:	resb 3
 10278                                      .size:	
 10279                                  endstruc
 10280                                  
 10281                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 10282                                  
 10283                                  ; =============== S U B	R O U T	I N E =======================================
 10284                                  
 10285                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 10286                                  
 10287                                  ; 05/02/2023
 10288                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 10289                                  
 10290                                  ; 07/06/2023
 10291                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:04D5h
 10292                                  
 10293                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 10294                                  
 10295                                  ROM_SCAN:
 10296 000004CD 06                      	push	es
 10297 000004CE 56                      	push	si
 10298 000004CF 57                      	push	di
 10299 000004D0 51                      	push	cx
 10300 000004D1 50                      	push	ax
 10301 000004D2 53                      	push	bx
 10302                                  
 10303                                  	; check for PC Jr signature in rom
 10304                                  
 10305 000004D3 B800F0                  	mov	ax,0F000h
 10306 000004D6 8EC0                    	mov	es,ax
 10307 000004D8 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 10308 000004DE 7408                    	je	short SCAN_IT
 10309                                  NO_ROM:
 10310 000004E0 F8                      	clc
 10311                                  ROM_RET:
 10312 000004E1 5B                      	pop	bx
 10313 000004E2 58                      	pop	ax
 10314 000004E3 59                      	pop	cx
 10315 000004E4 5F                      	pop	di
 10316 000004E5 5E                      	pop	si
 10317 000004E6 07                      	pop	es
 10318 000004E7 C3                      	retn
 10319                                  
 10320                                  	; start scanning at C000h
 10321                                  SCAN_IT:
 10322 000004E8 B800C0                  	mov	ax,0C000h
 10323                                  SCAN_ONE:
 10324 000004EB 8EC0                    	mov	es,ax
 10325 000004ED 31FF                    	xor	di,di
 10326                                  
 10327                                  	; check for a valid header
 10328                                  SCAN_MODULE:
 10329 000004EF 26813D55AA              	cmp	word [es:di],0AA55h
 10330 000004F4 740A                    	je	short SCAN_LIST
 10331 000004F6 058000                  	add	ax,80h
 10332                                  SCAN_END:
 10333 000004F9 3D00F0                  	cmp	ax,0F000h
 10334 000004FC 72ED                    	jb	short SCAN_ONE
 10335 000004FE EBE0                    	jmp	short NO_ROM
 10336                                  
 10337                                  	; trundle down list of names
 10338                                  SCAN_LIST:
 10339                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 10340 00000500 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 10341 00000504 30FF                    	xor	bh,bh		; nothing in the high byte
 10342 00000506 D1E3                    	shl	bx,1
 10343 00000508 D1E3                    	shl	bx,1		; number of paragraphs
 10344 0000050A 83C37F                  	add	bx,7Fh
 10345 0000050D 83E380                  	and	bx,0FF80h	; round to 2k
 10346                                  	;mov	di,6
 10347                                  	; 05/05/2023
 10348 00000510 BF0600                  	mov	di,ROM_HEADER.name_list
 10349                                  	;nop
 10350                                  SCAN_NAME:
 10351 00000513 268A0D                  	mov	cl,[es:di]	; length of name
 10352 00000516 47                      	inc	di		; point to name
 10353 00000517 30ED                    	xor	ch,ch
 10354 00000519 09C9                    	or	cx,cx		; zero length name
 10355 0000051B 7504                    	jnz	short SCAN_TEST	; nope... compare
 10356 0000051D 01D8                    	add	ax,bx		; yep, skip to next block
 10357 0000051F EBD8                    	jmp	short SCAN_END
 10358                                  
 10359                                  	; compare a single name
 10360                                  SCAN_TEST:
 10361 00000521 89D6                    	mov	si,dx
 10362 00000523 46                      	inc	si
 10363 00000524 F3A6                    	repe	cmpsb		 ; compare name
 10364 00000526 7407                    	jz	short SCAN_FOUND ; success!
 10365                                  SCAN_NEXT:
 10366 00000528 01CF                    	add	di,cx		; failure, next name piece
 10367 0000052A 83C703                  	add	di,3
 10368 0000052D EBE4                    	jmp	short SCAN_NAME
 10369                                  
 10370                                  	; found a name. save entry location
 10371                                  SCAN_FOUND:	
 10372 0000052F 803C3F                  	cmp	byte [si],'?'
 10373 00000532 7405                    	je	short SCAN_SAVE
 10374 00000534 803C20                  	cmp	byte [si],' '
 10375 00000537 75EF                    	jne	short SCAN_NEXT
 10376                                  SCAN_SAVE:
 10377 00000539 2E8C06[A8A0]            	mov	[cs:ROM_CS],es
 10378 0000053E 2E893E[A6A0]            	mov	[cs:ROM_IP],di
 10379 00000543 F9                      	stc
 10380 00000544 EB9B                    	jmp	short ROM_RET
 10381                                  
 10382                                  ; ---------------------------------------------------------------------------
 10383                                  
 10384                                  ; execute a rom-placed body of code. allocate largest block
 10385                                  
 10386                                  ROM_EXEC:
 10387 00000546 BBFFFF                  	mov	bx,0FFFFh
 10388                                  	; 05/02/2023
 10389 00000549 B448                    	mov	ah,48h
 10390                                  	;mov	ah,ALLOC ; 48h
 10391 0000054B CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10392                                  			; BX = number of 16-byte paragraphs desired
 10393 0000054D B448                    	mov	ah,48h
 10394                                  	;mov	ah,ALLOC ; 48h
 10395 0000054F CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10396                                  			; BX = number of 16-byte paragraphs desired
 10397 00000551 53                      	push	bx
 10398 00000552 50                      	push	ax
 10399                                  
 10400                                  	; set terminate addresses
 10401                                  
 10402 00000553 B82225                  	mov	ax,2522h
 10403                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 10404                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 10405 00000556 1E                      	push	ds
 10406 00000557 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 10407                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 10408                                  	;mov	dx,131h ; MSDOS 3.3
 10409                                  	; 05/02/2023
 10410                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 10411 0000055C BA[E90C]                	mov	dx,Exec_Wait
 10412 0000055F CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 10413                                  			; AL = interrupt number
 10414                                  			; DS:DX	= new vector to	be used	for specified interrupt
 10415 00000561 8CDA                    	mov	dx,ds
 10416 00000563 8EC2                    	mov	es,dx
 10417 00000565 1F                      	pop	ds
 10418                                  		
 10419                                  	; and create program header and dup all jfn's
 10420                                  
 10421 00000566 5A                      	pop	dx
 10422 00000567 B455                    	mov	ah,55h
 10423                                  	;mov	ah,DUP_PDB ; 55h
 10424 00000569 CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 10425                                  			; DX = segment number at which to set up PSP
 10426                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 10427                                  		
 10428                                  	; set up dma address
 10429                                  
 10430 0000056B 8EDA                    	mov	ds,dx
 10431 0000056D BA8000                  	mov	dx,80h
 10432 00000570 B41A                    	mov	ah,1Ah
 10433                                  	;mov	ah,Set_DMA ; 1Ah
 10434 00000572 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 10435                                  			; DS:DX	-> disk	transfer buffer
 10436                                  
 10437                                  	; copy in environment info
 10438                                  
 10439 00000574 26A1[DC03]              	mov	ax,[es:EnvirSeg]
 10440                                  	;mov	[2Ch],ax
 10441 00000578 A32C00                  	mov	[PDB.ENVIRON],ax
 10442                                  
 10443                                  	; set up correct size of block
 10444                                  
 10445 0000057B 5B                      	pop	bx		; BX has size, DS has segment
 10446 0000057C 8CDA                    	mov	dx,ds
 10447 0000057E 01DA                    	add	dx,bx
 10448                                  	;mov	[2],dx
 10449 00000580 89160200                	mov	[PDB.BLOCK_LEN],dx
 10450                                  
 10451                                  	; change ownership of block
 10452                                  
 10453 00000584 8CDA                    	mov	dx,ds
 10454 00000586 4A                      	dec	dx
 10455 00000587 8EDA                    	mov	ds,dx
 10456 00000589 42                      	inc	dx	
 10457                                  	;mov	[1],dx
 10458 0000058A 89160100                	mov	[ARENA.owner],dx
 10459 0000058E 8EDA                    	mov	ds,dx
 10460                                  
 10461                                  	; set up correct stack
 10462                                  
 10463 00000590 81FB0010                	cmp	bx,1000h
 10464 00000594 7202                    	jb	short GOT_STACK
 10465 00000596 31DB                    	xor	bx,bx
 10466                                  GOT_STACK:
 10467 00000598 B104                    	mov	cl,4
 10468 0000059A D3E3                    	shl	bx,cl
 10469 0000059C 8CDA                    	mov	dx,ds
 10470 0000059E 8ED2                    	mov	ss,dx
 10471 000005A0 89DC                    	mov	sp,bx
 10472 000005A2 31C0                    	xor	ax,ax
 10473 000005A4 50                      	push	ax
 10474                                  
 10475                                  	; set up initial registers and go to the guy
 10476                                  
 10477 000005A5 F7D0                    	not	ax
 10478 000005A7 2EFF36[A8A0]            	push	word [cs:ROM_CS]
 10479 000005AC 2EFF36[A6A0]            	push	word [cs:ROM_IP]
 10480 000005B1 8EC2                    	mov	es,dx
 10481 000005B3 CB                      	retf	; far return
 10482                                  
 10483                                  ;============================================================================
 10484                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 10485                                  ;============================================================================
 10486                                  ; 12/10/2018 - Retro DOS v3.0
 10487                                  
 10488                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 10489                                  
 10490                                  ; =============== S U B	R O U T	I N E =======================================
 10491                                  
 10492                                  ;Break	<PromptBat - Open or wait for batch file>
 10493                                  
 10494                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10495                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 10496                                  
 10497                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10498                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:05BCh
 10499                                  
 10500                                  ; Open the batch file. If we cannot find the batch file. If the media is
 10501                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 10502                                  ; file. Leave segment registers alone.
 10503                                  
 10504                                  PROMPTBAT:
 10505 000005B4 E84808                  	call	BATOPEN
 10506 000005B7 7201                    	jc	short PROMPTBAT1
 10507 000005B9 C3                      	retn
 10508                                  PROMPTBAT1:
 10509                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10510                                  	; MSDOS 6.0 COMMAND.COM
 10511 000005BA 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 10512 000005BD 740A                    	je	short BAT_REMCHECK	;AN022;
 10513 000005BF 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 10514 000005C2 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 10515                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 10516 000005C4 E83500                  	call	output_batch_name
 10517 000005C7 EB13                    	jmp	short BATDIE		;AN022;
 10518                                  
 10519                                  	; 05/02/2023
 10520                                  	; MSDOS 3.3 COMMAND.COM
 10521                                  	;cmp	dx,ACCDENPTR
 10522                                  	;jz	short BATDIE
 10523                                  
 10524                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10525                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 10526 000005C9 2EFF1E[FD9D]            	call	far [cs:RCH_ADDR]	; DX has error number
 10527 000005CE 7417                    	jz	short ASKFORBAT		; Media is removable
 10528                                  
 10529                                  ; The media is not changeable. Turn everything off.
 10530                                  
 10531 000005D0 E83D0B                  	call	FOROFF
 10532 000005D3 E8E22E                  	call	PipeOff
 10533 000005D6 A2[4802]                	mov	[IfFlag],al	; No If in progress.	
 10534 000005D9 BA[ED91]                	mov	dx,BADBAT_PTR
 10535                                  BATDIE:
 10536 000005DC E8F003                  	call	BATCHOFF
 10537 000005DF 0E                      	push	cs
 10538 000005E0 1F                      	pop	ds
 10539                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 10540                                  	; 05/02/2023
 10541 000005E1 E8234F                  	call	std_eprintf	; MSDOS 6.0
 10542                                  	;call	STD_PRINTF	; MSDOS 3.3
 10543                                  
 10544                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 10545                                  
 10546 000005E4 E91DFB                  	jmp	TCOMMAND
 10547                                  
 10548                                  ; Ask the user to reinsert the batch file
 10549                                  
 10550                                  ASKFORBAT:
 10551 000005E7 1E                      	push	ds
 10552 000005E8 0E                      	push	cs
 10553 000005E9 1F                      	pop	ds
 10554                                  
 10555                                  	; MSDOS 6.0
 10556                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 10557 000005EA BA[F091]                	mov	dx,NEEDBAT_PTR
 10558                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 10559                                  	; 05/02/2023
 10560 000005ED E8174F                  	call	std_eprintf
 10561                                  	;mov	dx,offset trangroup:pausemes_ptr
 10562 000005F0 BA[6292]                	mov	dx,PAUSEMES_PTR
 10563                                  	;invoke std_eprintf		;AN000; get second part of message
 10564 000005F3 E8114F                  	call	std_eprintf
 10565                                  					;AN000; print it to stderr
 10566                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10567                                  	;call	STD_EPRINTF
 10568 000005F6 E82E00                  	call	GETKEYSTROKE
 10569 000005F9 1F                      	pop	ds
 10570 000005FA EBB8                    	jmp	short PROMPTBAT
 10571                                  
 10572                                  
 10573                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10574                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 10575                                  
 10576                                  	; MSDOS 6.0
 10577                                  ;****************************************************************
 10578                                  ;*
 10579                                  ;* ROUTINE:	Output_batch_name
 10580                                  ;*
 10581                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 10582                                  ;*
 10583                                  ;* INPUT:	DX - extended error number
 10584                                  ;*
 10585                                  ;* OUTPUT:	Ready to call print routine
 10586                                  ;*
 10587                                  ;****************************************************************
 10588                                  ;
 10589                                  ;public	output_batch_name		;AN022;
 10590                                  
 10591                                  output_batch_name:	;proc near	;AN022;
 10592                                  
 10593 000005FC 1E                      	push	ds			;AN022; save resident segment
 10594 000005FD 8E1E[E701]              	mov	ds,[Batch]		;AN022; get batch file segment
 10595                                  	;assume	DS:nothing		;AN022;
 10596                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 10597                                  	; 05/02/2023
 10598                                  	;mov	si,20h
 10599                                  	; 24/04/2023
 10600 00000601 BE2000                  	mov	si,BATCHSEGMENT.BatFile
 10601                                  	;invoke	dstrlen 		;AN022; get length of string
 10602 00000604 E8B52B                  	call	dstrlen
 10603                                  	;mov	di,offset Trangroup:bwdbuf
 10604                                  					;AN022; target for batch name
 10605 00000607 BF[2AA0]                	mov	di,BWDBUF
 10606 0000060A F3A4                    	rep	movsb			;AN022; move the name
 10607                                  
 10608 0000060C 0E                      	push	cs			;AN022; get local segment
 10609 0000060D 1F                      	pop	ds			;AN022;
 10610                                  	;assume	DS:trangroup		;AN022;
 10611                                  	; 05/02/2023
 10612 0000060E 8916[D091]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 10613                                  	;mov	byte [msg_disp_class],1
 10614 00000612 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 10615                                  					;AN022; set up extended error msg class
 10616                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 10617 00000617 BA[D091]                	mov	dx,extend_buf_ptr	
 10618                                  					;AN022; get extended message pointer
 10619                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 10620 0000061A C706[91A0][2AA0]        	mov	word [string_ptr_2],BWDBUF	
 10621                                  					;AN022; point to substitution
 10622                                  	;mov	byte [extend_buf_sub],1
 10623 00000620 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 10624                                  					;AN022; set up for one subst
 10625 00000625 1F                      	pop	ds			;AN022; restore data segment
 10626 00000626 C3                      	retn				;AN022; return
 10627                                  
 10628                                  ;output_batch_name    endp		;AN022;
 10629                                  
 10630                                  
 10631                                  ; =============== S U B	R O U T	I N E =======================================
 10632                                  
 10633                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 10634                                  
 10635                                  ; Read the next keystroke. Since there may be several characters in the queue
 10636                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 10637                                  ; AFTER waiting.
 10638                                  
 10639                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10640                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 10641                                  
 10642                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10643                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:062Fh
 10644                                  
 10645                                  GETKEYSTROKE:
 10646                                  	; 05/02/2023
 10647                                  	; MSDOS 3.3
 10648                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 10649                                  	;;mov	ax,0C08h
 10650                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 10651                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10652                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10653                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10654                                  	;;mov	ax,0C00h
 10655                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 10656                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10657                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10658                                  	;retn
 10659                                  
 10660                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10661                                  	; MSDOS 6.0
 10662 00000627 52                      	push	dx			;AN000;  3/3/KK
 10663                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 10664                                  					;AN000;  3/3/KK
 10665 00000628 B80263                  	mov	ax,6302h
 10666 0000062B CD21                    	int	21h			;AN000;  3/3/KK
 10667                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 10668                                  	
 10669 0000062D 52                      	push	dx			;AN000;  save interim state 3/3/KK
 10670                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10671                                  					;AN000;  3/3/KK
 10672 0000062E B80163                  	mov	ax,6301h
 10673 00000631 B201                    	mov	dl,1
 10674                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 10675 00000633 CD21                    	int	21h			;AN000;  3/3/KK
 10676                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 10677                                  		; DL = new mode
 10678                                  		; 00h return only full characters on DOS keyboard input functions
 10679                                  		; 01h return partially-formed characters also
 10680                                  	
 10681                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 10682 00000635 B8080C                  	mov	ax,0C08h
 10683 00000638 CD21                    	int	21h			; Get character with KB buffer flush
 10684                                  		; DOS - CLEAR KEYBOARD BUFFER
 10685                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10686                                  
 10687                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10688 0000063A B8000C                  	mov	ax,0C00h
 10689 0000063D CD21                    	int	21h
 10690                                  		; DOS - CLEAR KEYBOARD BUFFER
 10691                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10692                                  
 10693                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10694                                  					;AN000;  3/3/KK
 10695 0000063F B80163                  	mov	ax,6301h
 10696 00000642 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 10697 00000643 CD21                    	int	21h			;AN000;  3/3/KK
 10698 00000645 5A                      	pop	dx			;AN000;  3/3/KK
 10699                                  	
 10700 00000646 C3                      	retn
 10701                                  
 10702                                  ; =============== S U B	R O U T	I N E =======================================
 10703                                  
 10704                                  ; Break	<ReadBat - read 1 line from batch file>
 10705                                  
 10706                                  ; ReadBat - read a single line from the batch file. 
 10707                                  ; Perform all substitutions as appropriate.
 10708                                  
 10709                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10710                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 10711                                  
 10712                                  READBAT:
 10713                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 10714                                  		
 10715                                  	;mov	byte [Suppress],1
 10716                                  				; initialize line suppress status
 10717 00000647 C606[3C02]01            	mov	byte [Suppress],YES_ECHO
 10718 0000064C F606[3102]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 10719 00000651 751F                    	jnz	short TRYING_TO_ABORT
 10720 00000653 C606[3002]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 10721                                  
 10722                                  	; MSDOS 6.0
 10723                                  
 10724                                  ;M037; Start of changes
 10725                                  ; We check here if we have set the flag indicating that the batchfile is at
 10726                                  ;EOF. In this case, we do not want to continue with the normal processing.
 10727                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 10728                                  ;batch file gets closed etc. and then return as if everything is done.
 10729                                  
 10730                                  	; 05/02/2023
 10731 00000658 1E                      	push	ds
 10732 00000659 8E1E[E701]              	mov	ds,[Batch]
 10733                                  	;cmp	byte [2],0
 10734 0000065D 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 10735                                  				; are we at EOF in batchfile
 10736 00000662 1F                      	pop	ds
 10737 00000663 740A                    	jz	short CONTBAT	; no, continue normal processing
 10738                                  	;invoke	GetBatByt	; frees up batchseg
 10739 00000665 E8D303                  	call	GETBATBYT
 10740 00000668 26A2[549C]              	mov	[es:COMBUF+2],al
 10741                                  				; stuff CR into command buffer
 10742                                  				; as a dummy command
 10743                                  	;;invoke CrLf2		; print a CR-LF
 10744                                  	;call	CRLF2
 10745                                  	;;return		; done batch processing
 10746                                  	;retn
 10747                                  	; 24/04/2023
 10748 0000066C E9B224                  	jmp	CRLF2
 10749                                  
 10750                                  ;M037; End of changes
 10751                                  		
 10752                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10753                                  CONTBAT:
 10754 0000066F E842FF                  	call	PROMPTBAT
 10755                                  
 10756                                  TRYING_TO_ABORT:
 10757 00000672 BF[549C]                	mov	di,COMBUF+2
 10758                                  
 10759                                  ; Save position and try to scan for first non delimiter.
 10760                                  
 10761                                  TESTNOP:
 10762 00000675 8CD8                    	mov	ax,ds
 10763 00000677 8E1E[E701]              	mov	ds,[Batch]
 10764 0000067B FF360800                	push	word [BATCHSEGMENT.BatSeek]
 10765 0000067F FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 10766                                  				; save current location.
 10767 00000683 8ED8                    	mov	ds,ax
 10768 00000685 E84B06                  	call	SKIPDELIM	; skip to first non-delim
 10769                                  
 10770                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 10771                                  ; beginning and read the line.
 10772                                  
 10773 00000688 3C3A                    	cmp	al,':'		; is it a label?
 10774 0000068A 59                      	pop	cx
 10775 0000068B 5A                      	pop	dx		; restore position in bat file
 10776 0000068C 7431                    	jz	short NOPLINE	; yes, resync everything.
 10777 0000068E F706[E701]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10778 00000694 7438                    	jz	short RDBAT	; no, go read batch file
 10779                                  
 10780                                  	;cmp	al,'@'
 10781 00000696 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 10782 00000698 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 10783                                  	;mov	byte [Suppress],0
 10784 0000069A C606[3C02]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 10785 0000069F EB2D                    	jmp	short RDBAT	; go read batch file
 10786                                  	;nop
 10787                                  SET_BAT_POS:
 10788 000006A1 1E                      	push	ds
 10789 000006A2 8E1E[E701]              	mov	ds,[Batch]
 10790                                  	;mov	[8],dx
 10791 000006A6 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 10792                                  	;mov	[10],cx
 10793 000006AA 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 10794 000006AE 1F                      	pop	ds
 10795                                  	;;mov	ax,(LSEEK SHL 8) + 0
 10796                                  	; 05/02/2023
 10797 000006AF B80042                  	mov	ax,4200h
 10798                                  	;mov	ax,(LSEEK*256) ; 4200h ; seek back
 10799 000006B2 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 10800                                  			; AL = method: offset from beginning of	file
 10801                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 10802                                  	; 24/04/2023
 10803                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 10804 000006B4 26C706[B9A9]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 10805                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 10806 000006BB 31C9                    	xor	cx,cx		; Initialize line length to zero
 10807 000006BD EB0F                    	jmp	short RDBAT
 10808                                  
 10809                                  	;nop
 10810                                  
 10811                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 10812                                  ; We eat characters until a CR is seen.
 10813                                  
 10814                                  NOPLINE:
 10815 000006BF E80501                  	call	SKIPTOEOL
 10816 000006C2 E87603                  	call	GETBATBYT	; eat trailing LF
 10817                                  	;test	word [Batch],0FFFFh
 10818 000006C5 F706[E701]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10819 000006CB 75A8                    	jnz	short TESTNOP	; no, go get another line
 10820                                  READBAT_RETN:			; Hit EOF
 10821 000006CD C3                      	retn
 10822                                  
 10823                                  ; ---------------------------------------------------------------------------
 10824                                  
 10825                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 10826                                  ; input, we are to consider two special cases:
 10827                                  ;
 10828                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 10829                                  ;   %sym%	This is a symbol from the environment
 10830                                  
 10831                                  RDBAT:
 10832 000006CE E86A03                  	call	GETBATBYT
 10833 000006D1 41                      	inc	cx		; Inc the line length
 10834                                  
 10835                                  	; 05/02/2023
 10836                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 10837 000006D2 E83A22                  	call	testkanj
 10838 000006D5 740C                    	jz	short RDBAT1
 10839                                  	;cmp	cx,127
 10840 000006D7 83F97F                  	cmp	cx,COMBUFLEN-1
 10841 000006DA 7350                    	jnb	short TOOLONG
 10842 000006DC AA                      	stosb
 10843 000006DD E85B03                  	call    GETBATBYT
 10844 000006E0 41                      	inc	cx
 10845 000006E1 EB0A                    	jmp	short SAVBATBYT
 10846                                  RDBAT1:
 10847 000006E3 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10848 000006E7 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 10849                                  
 10850                                  ; See if we have a parameter character.
 10851                                  
 10852 000006E9 3C25                    	cmp	al,'%'		; Check for parameter
 10853 000006EB 7449                    	je	short NEEDPARM
 10854                                  
 10855                                  ; no parameter character. Store it as usual and see if we are done.
 10856                                  
 10857                                  SAVBATBYT:
 10858 000006ED AA                      	stosb			; End of line found?
 10859 000006EE 3C0D                    	cmp	al,0Dh
 10860 000006F0 75DC                    	jne	short RDBAT	; no, go for more
 10861                                  
 10862                                  ; We have read in an entire line. 
 10863                                  ; Decide whether we should echo the command line or not.
 10864                                  
 10865                                  FOUND_EOL:
 10866 000006F2 81EF[559C]              	sub	di,COMBUF+3
 10867 000006F6 89F8                    	mov	ax,di		; remember that we've not counted the CR
 10868 000006F8 26A2[539C]              	mov	[es:COMBUF+1],al
 10869                                  				; Set length of line
 10870 000006FC E83C03                  	call	GETBATBYT	; Eat linefeed
 10871 000006FF E8E906                  	call	BATCLOSE
 10872 00000702 803E[3C02]00            	cmp	byte [Suppress],NO_ECHO ; 0
 10873 00000707 7407                    	jz	short RESET
 10874 00000709 F606[3B02]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 10875 0000070E 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 10876                                  RESET:
 10877 00000710 0E                      	push	cs
 10878 00000711 1F                      	pop	ds		; Go back to local segment
 10879 00000712 74B9                    	jz	short READBAT_RETN ; no echoing here...
 10880                                  TRY_NEXTFLAG:
 10881 00000714 803E[5202]01            	cmp	byte [NullFlag],nullcommand ; 1
 10882                                  				;G was there a command last time?
 10883 00000719 7403                    	jz	short NO_CRLF_PRINT
 10884                                  				;G no - don't print crlf
 10885 0000071B E80324                  	call	CRLF2		;G Print out prompt
 10886                                  NO_CRLF_PRINT:
 10887 0000071E E8C21B                  	call	PRINT_PROMPT
 10888 00000721 0E                      	push	cs		;G change data segment
 10889 00000722 1F                      	pop	ds
 10890 00000723 BA[549C]                	mov	dx,COMBUF+2	; get command line for echoing
 10891 00000726 E85124                  	call	CRPRINT
 10892                                  	;call	CRLF2
 10893                                  	;retn
 10894                                  	; 06/02/2023
 10895 00000729 E9F523                  	jmp	CRLF2
 10896                                  
 10897                                  ; The line was too long. Eat remainder of input text up until the CR
 10898                                  
 10899                                  TOOLONG:
 10900 0000072C 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 10901 0000072E 7403                    	jz	short LTLCONT	; Yes, continue
 10902 00000730 E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 10903                                  LTLCONT:
 10904 00000733 AA                      	stosb			; Terminate the command
 10905 00000734 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 10906                                  
 10907                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 10908                                  
 10909                                  NEEDPARM:
 10910 00000736 E80203                  	call	GETBATBYT	; get next character
 10911 00000739 3C25                    	cmp	al,'%'		; Check for two consecutive %
 10912 0000073B 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 10913 0000073D 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 10914 0000073F 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 10915                                  
 10916                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 10917                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 10918                                  ; see if the <something> has a terminating % and then look up the contents
 10919                                  ; in the environment.
 10920                                  
 10921                                  PAROK:
 10922 00000741 2C30                    	sub	al,'0'
 10923 00000743 7239                    	jb	short NEEDENV	; look for parameter in the environment
 10924 00000745 3C09                    	cmp	al,9
 10925 00000747 7735                    	ja	short NEEDENV
 10926                                  
 10927                                  ; We have found %<number>. This is taken from the parameters in the
 10928                                  ; allocated batch area.
 10929                                  
 10930 00000749 98                      	cbw
 10931 0000074A 89C3                    	mov	bx,ax		; move index into AX
 10932 0000074C D1E3                    	shl	bx,1		; convert word index into byte ptr
 10933 0000074E 06                      	push	es
 10934 0000074F 8E06[E701]              	mov	es,[Batch]
 10935                                  
 10936                                  ; The structure of the batch area is:
 10937                                  ;
 10938                                  ;   BYTE    type of segment
 10939                                  ;   DWORD   offset for next line
 10940                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 10941                                  ;   ASCIZ   file name (with . and ..)
 10942                                  ;   BYTES   CR-terminated parameters
 10943                                  ;   BYTE    0 flag to indicate end of parameters
 10944                                  ;
 10945                                  ; Get pointer to BX'th argument
 10946                                  
 10947                                  	;;mov	si,[es:bx+0Bh]
 10948                                  	; 05/02/2023
 10949                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 10950 00000753 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 10951 00000757 07                      	pop	es
 10952                                  
 10953                                  ; Is there a parameter here?
 10954                                  
 10955 00000758 83FEFF                  	cmp	si,-1		; Check if parameter exists
 10956 0000075B 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 10957 0000075D E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 10958                                  
 10959                                  ; Copy in the found parameter from batch segment
 10960                                  
 10961                                  YES_THERE_IS:
 10962 00000760 1E                      	push	ds
 10963 00000761 8E1E[E701]              	mov	ds,[Batch]
 10964 00000765 49                      	dec	cx		; Don't count '%' in line length
 10965                                  COPYPARM:
 10966 00000766 AC                      	lodsb			; From resident segment
 10967 00000767 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 10968 00000769 740F                    	je	short ENDPARAM
 10969 0000076B 41                      	inc	cx		; Inc the line length
 10970 0000076C 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10971 00000770 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 10972 00000772 AA                      	stosb
 10973 00000773 EBF1                    	jmp	short COPYPARM
 10974                                  
 10975                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 10976                                  ; line. We need to make sure that the tooLong code isn't fooled into
 10977                                  ; believing that we are at EOL. Clobber AL too.
 10978                                  
 10979                                  LINETOOL:
 10980 00000775 30C0                    	xor	al,al
 10981 00000777 1F                      	pop	ds
 10982 00000778 EBB2                    	jmp	short TOOLONG
 10983                                  
 10984                                  ; We have copied in an entire parameter. Go back for more
 10985                                  
 10986                                  ENDPARAM:
 10987 0000077A 1F                      	pop	ds
 10988 0000077B E950FF                  	jmp	RDBAT
 10989                                  
 10990                                  ; We have found % followed by something other than 0-9. We presume that there
 10991                                  ; will be a following % character. In between is an environment variable that
 10992                                  ; we will fetch and replace in the batch line with its value.
 10993                                  
 10994                                  NEEDENV:
 10995                                  	; MSDOS 6.0 COMMAND.COM
 10996                                  	; 05/02/2023 
 10997 0000077E 49                      	dec     cx 		;AN070; Don't count "%"
 10998                                  
 10999                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11000 0000077F 1E                      	push	ds
 11001 00000780 57                      	push	di
 11002                                  				; temp spot for name
 11003 00000781 BF[AC9F]                	mov	di,ID
 11004 00000784 0430                    	add	al,'0'		; reconvert character
 11005 00000786 AA                      	stosb			; store it in appropriate place
 11006                                  
 11007                                  ; loop getting characters until the next % is found or until EOL
 11008                                  
 11009                                  GETENV1:
 11010 00000787 E8B102                  	call	GETBATBYT	; get the byte
 11011 0000078A AA                      	stosb			; store it
 11012 0000078B 3C0D                    	cmp	al,0Dh		; EOL?
 11013 0000078D 7514                    	jne	short GETENV15	; no, see if it the term char
 11014                                  
 11015                                  ; The user entered a string with a % but no trailing %. We copy the string.
 11016                                  
 11017 0000078F 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 11018 00000794 BE[AC9F]                	mov	si,ID 		; point to buffer
 11019 00000797 5F                      	pop	di		; point to line buffer
 11020 00000798 0E                      	push	cs
 11021 00000799 1F                      	pop	ds
 11022 0000079A E88B02                  	call	STRCPY
 11023                                  	; 05/02/2023
 11024 0000079D 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 11025                                  	; 24/04/2023
 11026                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 11027 0000079F 1F                      	pop	ds
 11028 000007A0 E94AFF                  	jmp	SAVBATBYT
 11029                                  GETENV15:
 11030 000007A3 3C25                    	cmp	al,'%'		; terminating %?
 11031 000007A5 75E0                    	jne	short GETENV1	; no, go suck out more characters
 11032                                  
 11033                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 11034                                  ; This was the source of bug #1.
 11035                                  ;	dec	cx		;AN070; Don't count "%"
 11036                                  
 11037 000007A7 B03D                    	mov	al,'='		; terminate  with =
 11038 000007A9 268845FF                	mov	[es:di-1],al
 11039                                  
 11040                                  ; ID now either has a =-terminated string which we are to find in the
 11041                                  ; environment or a non =-terminated string which will not be found in the
 11042                                  ; environment.
 11043                                  
 11044                                  GETENV2:
 11045 000007AD BE[AC9F]                	mov	si,ID
 11046 000007B0 0E                      	push	cs
 11047 000007B1 1F                      	pop	ds		; DS:SI points to name
 11048 000007B2 51                      	push	cx
 11049 000007B3 E8AF20                  	call	find_name_in_environment
 11050 000007B6 59                      	pop	cx
 11051 000007B7 06                      	push	es
 11052 000007B8 1F                      	pop	ds
 11053 000007B9 0E                      	push	cs
 11054 000007BA 07                      	pop	es
 11055 000007BB 89FE                    	mov	si,di
 11056 000007BD 5F                      	pop	di		; get back pointer to command line
 11057                                  
 11058                                  ; If the parameter was not found, there is no need to perform any replacement.
 11059                                  ; We merely pretend that we've copied the parameter.
 11060                                  
 11061 000007BE 7203                    	jc	short GETENV6
 11062                                  
 11063                                  ; ES:DI points to command line being built
 11064                                  ; DS:SI points either to nul-terminated environment object AFTER =
 11065                                  
 11066 000007C0 E86502                  	call	STRCPY		; (let RdBat handle overflow)
 11067                                  	; 24/04/2022
 11068                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 11069                                  GETENV6:
 11070 000007C3 1F                      	pop	ds
 11071 000007C4 E907FF                  	jmp	RDBAT		; go back to batch file
 11072                                  
 11073                                  ; =============== S U B	R O U T	I N E =======================================
 11074                                  
 11075                                  ;   SkipToEOL - read from batch file until end of line
 11076                                  
 11077                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11078                                  SKIPTOEOL:
 11079 000007C7 F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
 11080                                  	;jnz	short SKIPTOEOL1  	
 11081                                  	;retn			; no batch file in effect
 11082                                  	
 11083 000007CD 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 11084                                  SKIPTOEOL1:
 11085 000007CF E86902                  	call	GETBATBYT
 11086 000007D2 3C0D                    	cmp	al,0Dh		; eol character?
 11087 000007D4 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 11088                                  SKIPTOEOL2:
 11089 000007D6 C3                      	retn
 11090                                  
 11091                                  ; =============== S U B	R O U T	I N E =======================================
 11092                                  
 11093                                  ;Break	<Allocate and deallocate the transient portion>
 11094                                  
 11095                                  ; Free Transient. Modify ES,AX,flags
 11096                                  
 11097                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11098                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 11099                                  FREE_TPA:
 11100 000007D7 06                      	push	es
 11101 000007D8 8E06[F39D]              	mov	es,[RESSEG]
 11102 000007DC 268E06[FA03]            	mov	es,[es:Res_Tpa]
 11103 000007E1 B449                    	mov	ah,49h
 11104                                  	;mov	ah,DEALLOC ; 49h
 11105 000007E3 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11106                                  			; ES = segment address of area to be freed
 11107 000007E5 07                      	pop	es
 11108 000007E6 C3                      	retn
 11109                                  
 11110                                  ; =============== S U B	R O U T	I N E =======================================
 11111                                  
 11112                                  ; Allocate transient. Modify AX,BX,DX,flags
 11113                                  
 11114                                  	; 06/02/2023
 11115                                  ALLOC_TPA:
 11116 000007E7 06                      	push	es
 11117 000007E8 8E06[F39D]              	mov	es,[RESSEG]
 11118 000007EC BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 11119 000007EF B448                    	mov	ah,48h
 11120                                  	;mov	ah,ALLOC ; 48h
 11121 000007F1 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11122                                  			; BX = number of 16-byte paragraphs desired
 11123 000007F3 53                      	push	bx	  	; Save size of block
 11124 000007F4 B448                    	mov	ah,48h
 11125                                  	;mov	ah,ALLOC ; 48h
 11126 000007F6 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11127                                  			; BX = number of 16-byte paragraphs desired
 11128                                  
 11129                                  ; Attempt to align TPA on 64K boundary
 11130                                  
 11131 000007F8 5B                      	pop	bx		; Restore size of block
 11132 000007F9 26A3[FA03]              	mov	[es:Res_Tpa],ax
 11133                                  				; Save segment to beginning of block
 11134 000007FD A3[019E]                	mov	[TRAN_TPA],ax
 11135                                  
 11136                                  ; Is the segment already aligned on a 64K boundary
 11137                                  
 11138 00000800 89C2                    	mov	dx,ax		; Save segment
 11139 00000802 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 11140 00000805 7507                    	jnz	short CALC_TPA
 11141 00000807 89D0                    	mov	ax,dx
 11142 00000809 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 11143 0000080C 7523                    	jnz	short NOROUND
 11144                                  CALC_TPA:
 11145 0000080E 89D0                    	mov	ax,dx
 11146 00000810 2500F0                  	and	ax,0F000h
 11147 00000813 050010                  	add	ax,1000h	; Round up to next 64K boundary
 11148 00000816 7219                    	jc	short NOROUND	; Memory wrap if carry set
 11149                                  
 11150                                  ; Make sure that new boundary is within allocated range
 11151                                  
 11152 00000818 268B16[FA03]            	mov	dx,[es:Res_Tpa]
 11153 0000081D 01DA                    	add	dx,bx		; Compute maximum address
 11154 0000081F 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 11155 00000821 720E                    	jb	short NOROUND
 11156                                  
 11157                                  ; Make sure that we won't overwrite the transient
 11158                                  
 11159 00000823 8CCB                    	mov	bx,cs		; CS is beginning of transient
 11160 00000825 39C3                    	cmp	bx,ax
 11161 00000827 7208                    	jb	short NOROUND
 11162                                  
 11163                                  ; The area from the 64K boundary to the beginning of the transient must
 11164                                  ; be at least 64K.
 11165                                  
 11166 00000829 29C3                    	sub	bx,ax
 11167                                  	;cmp	bx,4096
 11168 0000082B 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 11169 0000082F 7304                    	jnb	short ROUNDDONE
 11170                                  NOROUND:
 11171 00000831 26A1[FA03]              	mov	ax,[es:Res_Tpa]
 11172                                  ROUNDDONE:
 11173 00000835 26A3[EE03]              	mov	[es:LTpa],ax	; Re-compute everything
 11174 00000839 A3[F59D]                	mov	[TPA],ax
 11175 0000083C 89C3                    	mov	bx,ax
 11176 0000083E 8CC8                    	mov	ax,cs
 11177 00000840 29D8                    	sub	ax,bx
 11178 00000842 53                      	push	bx
 11179 00000843 BB1000                  	mov	bx,16
 11180 00000846 F7E3                    	mul	bx
 11181 00000848 5B                      	pop	bx
 11182 00000849 09D2                    	or	dx,dx
 11183 0000084B 7403                    	jz	short SAVSIZ2
 11184 0000084D B8FFFF                  	mov	ax,-1
 11185                                  SAVSIZ2:
 11186                                  
 11187                                  ; AX is the number of bytes free in the buffer between the resident and the
 11188                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 11189                                  
 11190 00000850 3D0002                  	cmp	ax,512
 11191 00000853 7603                    	jbe	short GOTSIZE2
 11192                                  	;and	ax,~1FFh
 11193 00000855 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 11194                                  GOTSIZE2:
 11195 00000858 A3[129E]                	mov	[BYTCNT],ax
 11196 0000085B 07                      	pop	es
 11197 0000085C C3                      	retn
 11198                                  
 11199                                  ; =============== S U B	R O U T	I N E =======================================
 11200                                  
 11201                                  ;Break	<BatCom - enter a batch file>
 11202                                  
 11203                                  ; The exec search has determined that the user has requested a batch file for
 11204                                  ; execution. We parse the arguments, create the batch segment, and signal
 11205                                  ; batch processing.
 11206                                  
 11207                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11208                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 11209                                  
 11210                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11211                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0868h
 11212                                  BATCOM:	
 11213                                  
 11214                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 11215                                  
 11216                                  ; Batch parameters are read with ES set to segment of resident part
 11217                                  
 11218                                  	; MSDOS 6.0
 11219 0000085D 8E06[F39D]              	mov	es,[RESSEG]
 11220                                  	;ASSUME	ES:RESGROUP
 11221                                  	;cmp	byte [es:Call_Batch_Flag],1
 11222 00000861 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11223                                  					;AN043; If in CALL,
 11224 00000867 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 11225                                  	;invoke	IOSET			; Set up any redirection
 11226 00000869 E86128                  	call	IOSET
 11227                                  skip_ioset:				;AN043;
 11228 0000086C E868FF                  	call	FREE_TPA		; G
 11229                                  	;cmp	byte [es:Call_Batch_Flag],1
 11230 0000086F 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11231 00000875 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 11232                                  
 11233                                  	; 12/02/2023
 11234                                  	; MSDOS 3.3
 11235                                  	;call	IOSET
 11236                                  	;mov	es,[RESSEG]
 11237                                  	;call	FREE_TPA
 11238                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 11239                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 11240                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 11241                                  
 11242                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11243                                  
 11244                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 11245                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 11246                                  ; Don't execute if in call
 11247                                  
 11248 00000877 E89608                  	call	FOROFF
 11249                                  GETECHO:
 11250 0000087A E83B2C                  	call	PipeOff
 11251 0000087D 26A0[3B02]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 11252 00000881 2401                    	and	al,1			; Save current echo state
 11253                                  
 11254 00000883 50                      	push	ax
 11255 00000884 31C0                    	xor	ax,ax
 11256 00000886 26F706[E701]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 11257 0000088D 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 11258 0000088F 26A1[E701]              	mov	ax,[es:Batch] 		; Get current batch segment
 11259                                  	;cmp	byte [es:Call_Batch_Flag],1
 11260 00000893 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11261 00000899 7408                    	jz	short LEAVEBAT
 11262                                  
 11263                                  ;  We are in a chained batch file, save batlast from previous batch segment
 11264                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 11265                                  
 11266 0000089B 06                      	push	es
 11267 0000089C 8EC0                    	mov	es,ax		; Get current batch segment
 11268                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 11269                                  				; Get previous batch segment
 11270                                  	; 12/02/2023
 11271                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 11272 0000089E 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 11273 000008A2 07                      	pop	es
 11274                                  LEAVEBAT:
 11275 000008A3 50                      	push	ax		; Keep segment until new one created
 11276                                  	;cmp	byte [es:Call_Batch_Flag],1
 11277 000008A4 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11278 000008AA 7403                    	jz	short STARTBAT
 11279 000008AC E82001                  	call	BATCHOFF
 11280                                  
 11281                                  ; Find length of batch file
 11282                                  
 11283                                  STARTBAT:
 11284 000008AF 26C606[4F02]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 11285 000008B5 BE[1B9D]                	mov	si,EXECPATH
 11286                                  
 11287                                  	; 12/02/2023
 11288                                  	; MSDOS 6.0
 11289 000008B8 B811B7                  	mov	ax,0B711h
 11290                                  	;mov	ax,AppendTruename
 11291                                  				;AN042; Get the real path where the batch file
 11292 000008BB CD2F                    	int	2Fh		;AN042;    was found with APPEND
 11293 000008BD B44E                    	mov	ah,4Eh
 11294                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 11295 000008BF 89F2                    	mov	dx,si		;AN042; Get the string
 11296 000008C1 B91300                  	mov	cx,13h
 11297                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 11298 000008C4 CD21                    	int	21h		;AN042;
 11299                                  
 11300                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11301 000008C6 E8F328                  	call	dstrlen
 11302                                  ;
 11303                                  ; Allocate batch area:
 11304                                  ;   BYTE    type of segment
 11305                                  ;   WORD    segment of last batch file
 11306                                  ;   WORD    segment for FOR command
 11307                                  ;   BYTE    FOR flag state on entry to batch file
 11308                                  ;   DWORD   offset for next line
 11309                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 11310                                  ;   ASCIZ   file name (with . and ..)
 11311                                  ;   BYTES   CR-terminated parameters
 11312                                  ;   BYTE    0 flag to indicate end of parameters
 11313                                  ;
 11314                                  ; We allocate the maximum size for the command line and use setblock to shrink
 11315                                  ; later when we've squeezed out the extra
 11316                                  ;
 11317 000008C9 89CB                    	mov	bx,cx		; length of file name.
 11318                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 11319                                  	; 12/02/2023
 11320                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33) 
 11321                                  	; 25/04/2023
 11322 000008CB 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 11323                                  					; structure + max len + round up
 11324 000008CF 51                      	push	cx
 11325 000008D0 B104                    	mov	cl,4
 11326 000008D2 D3EB                    	shr	bx,cl		; convert to paragraphs
 11327 000008D4 53                      	push	bx		; Save size of batch segment
 11328 000008D5 B448                    	mov	ah,48h
 11329                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 11330 000008D7 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11331                                  				; BX = number of 16-byte paragraphs desired
 11332 000008D9 5B                      	pop	bx		; Get size of batch segment
 11333                                  
 11334                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 11335                                  ; the batch segment. This may not be true, however, in a multitasking system.
 11336                                  ; G This error will occur with nesting of batch files. We also need to
 11337                                  ; G make sure that we don't overlay the transient.
 11338                                  
 11339 000008DA 7221                    	jc	short MEM_ERROR	;G not enough memory - exit
 11340                                  
 11341 000008DC 50                      	push	ax		;G save batch segment
 11342 000008DD 01D8                    	add	ax,bx		;G get end of batch segment
 11343 000008DF 83C020                  	add	ax,20h		;G add some tpa work area
 11344 000008E2 8CCB                    	mov	bx,cs		;G get the transient segment
 11345                                  
 11346                                  	; MSDOS 6.0
 11347                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 11348                                  ; M006; batchseg is always above the transient. We need to change this code
 11349                                  ; M006; to only check for an overlap
 11350                                  
 11351                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 11352                                  	; 12/02/2023
 11353                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 11354                                  	;mov	dx,TRANSPACEEND		
 11355                                  	;add	dx,15		;round up para; M006
 11356 000008E4 BA10AA                  	mov	dx,TRANSPACEEND+15
 11357                                  
 11358 000008E7 D3EA                    	shr	dx,cl		;para size of transient; M006
 11359 000008E9 01DA                    	add	dx,bx		;dx = top of transient; M006
 11360                                  
 11361 000008EB 39D8                    	cmp	ax,bx		; M006
 11362 000008ED 7211                    	jb	short ENOUGH_MEM
 11363                                  				; Batchseg below transient
 11364                                  				; enough memory ; M006
 11365 000008EF 39D0                    	cmp	ax,dx		; M006
 11366 000008F1 770D                    	ja	short ENOUGH_MEM	
 11367                                  				; Batchseg above transient
 11368                                  				; enough memory ; M006
 11369                                  
 11370                                  ; M006; Batchseg overlaps transient -- insufficient memory
 11371                                  
 11372 000008F3 58                      	pop	ax		; restore ax; M006
 11373                                  
 11374                                  	; 12/02/2023
 11375                                  	; MSDOS 3.3
 11376                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 11377                                  ; M006;	pop	ax		;G get batch segment back
 11378                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 11379                                  
 11380                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11381 000008F4 06                      	push	es		;G no we're hitting the transient
 11382 000008F5 8EC0                    	mov	es,ax
 11383 000008F7 B80049                  	mov	ax,4900h
 11384                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 11385 000008FA CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11386                                  			; ES = segment address of area to be freed
 11387 000008FC 07                      	pop	es
 11388                                  MEM_ERROR:
 11389 000008FD E9B800                  	jmp	NO_MEMORY	;G Set up for message and exit
 11390                                  
 11391                                  ENOUGH_MEM:
 11392                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 11393                                  	; MSDOS 6.0
 11394 00000900 58                      	pop	ax		; restore ax; M006
 11395                                  
 11396                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11397 00000901 26A3[E701]              	mov	[es:Batch],ax
 11398 00000905 E8DFFE                  	call	ALLOC_TPA
 11399                                  
 11400                                  ; Initialize batch segment
 11401                                  
 11402 00000908 5A                      	pop	dx		; length of name
 11403 00000909 58                      	pop	ax		;G get saved batch segment back
 11404 0000090A 26FF06[4C02]            	inc	word [es:Nest]	;G increment # batch files in progress
 11405 0000090F 06                      	push	es
 11406 00000910 268E06[E701]            	mov	es,[es:Batch]
 11407                                  	;mov	byte [ES:0],0
 11408                                  				; signal batch file type
 11409 00000915 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 11410                                  	;;mov	[es:2],ax	; MSDOS 3.3
 11411                                  				;G save segment of last batch file
 11412                                  	;mov	[es:3],ax	; MSDOS 6.0
 11413 0000091B 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 11414 0000091F 1E                      	push	ds
 11415 00000920 8E1E[F39D]              	mov	ds,[RESSEG]	;G set to resident data
 11416                                  
 11417 00000924 31C0                    	xor	ax,ax
 11418 00000926 8A1E[4902]              	mov	bl,[ForFlag]	;G get the current FOR state
 11419                                  	;;mov	[es:6],bl	; MSDOS 3.3
 11420                                  				;G save it in the batch segment
 11421                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 11422 0000092A 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 11423 0000092F F6C3FF                  	test	bl,-1 ; 0FFh	;G are we in a FOR?
 11424 00000932 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 11425                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11426                                  	;mov	byte [ForFlag],0 ;G reset forflag
 11427                                  	; 26/07/2024
 11428 00000934 A2[4902]                	mov	[ForFlag],al ; 0
 11429 00000937 A1[4A02]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11430                                  FOR_NOT_ON:
 11431                                  	;;mov	[es:4],ax	; MSDOS 3.3
 11432                                  				;G save FOR segment in batch segment
 11433                                  	;mov	[es:5],ax	; MSDOS 6.0		
 11434 0000093A 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 11435 0000093E 31C0                    	xor	ax,ax
 11436 00000940 A3[4A02]                	mov	[ForPtr],ax	;G make sure for segment is not active
 11437 00000943 8A1E[3B02]              	mov	bl,[EchoFlag]
 11438 00000947 1F                      	pop	ds
 11439                                  	;mov	[es:1],bl 
 11440                                  				 ;G save echo state of parent
 11441 00000948 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 11442                                  ;SR;
 11443                                  ; Initialize the new BatchEOF flag we have added to 0
 11444                                  
 11445                                  	; MSDOS 6.0
 11446                                  	;mov	byte [es:2],0
 11447 0000094D 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 11448                                  
 11449                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 11450 00000953 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 11451                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 11452 00000957 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 11453                                  
 11454                                  ; Initialize pointers
 11455                                  
 11456 0000095B 48                      	dec	ax		; put -1 into AX
 11457                                  	;;mov	di,0Bh  ; MSDOS 3.3
 11458                                  				; point to parm area
 11459                                  	;mov	di,0Ch	; MSDOS 6.0
 11460 0000095C BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 11461 0000095F 89FB                    	mov	bx,di
 11462 00000961 B90A00                  	mov	cx,10
 11463 00000964 F3AB                    	rep stosw		; Init to no parms
 11464                                  
 11465                                  ; Move in batch file name
 11466                                  
 11467 00000966 89D1                    	mov	cx,dx
 11468 00000968 F3A4                    	rep	movsb
 11469                                  
 11470                                  ; Now copy the command line into batch segment, parsing the arguments along
 11471                                  ; the way. Segment will look like this:
 11472                                  ;
 11473                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 11474                                  ;
 11475                                  ; or, in the case of fewer arguments:
 11476                                  ;
 11477                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 11478                                  
 11479 0000096A BE[549C]                	mov	si,COMBUF+2
 11480                                  	;mov	cx,10		; at most 10 arguments
 11481                                  	; 07/06/2023
 11482 0000096D B10A                    	mov	cl,10
 11483                                  EACHPARM:
 11484 0000096F E8BC21                  	call	scanoff		; skip to argument
 11485                                  
 11486                                  ; AL is first non-delimiter. DS:SI points to char = AL
 11487                                  
 11488 00000972 3C0D                    	cmp	al,0Dh		; end of road?
 11489 00000974 741D                    	jz	short HAVPARM	; yes, no more arguments
 11490                                  
 11491                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 11492                                  
 11493 00000976 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 11494                                  
 11495                                  ; Go into allocated piece and stick in new argument pointer.
 11496                                  
 11497 00000978 26893F                  	mov	[es:bx],di	; store batch pointer
 11498 0000097B 83C302                  	add	bx,2		; advance arg counter
 11499                                  
 11500                                  ; Move the parameter into batch segment
 11501                                  
 11502                                  MOVPARM:
 11503 0000097E AC                      	lodsb			; get byte
 11504 0000097F E8B421                  	call	DELIM		; if delimiter
 11505 00000982 7407                    	jz	short ENDPARM	; then done with parm
 11506 00000984 AA                      	stosb			; store byte
 11507 00000985 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 11508 00000987 740A                    	jz	short HAVPARM	; but end of parm list, finish
 11509 00000989 EBF3                    	jmp	short MOVPARM
 11510                                  
 11511                                  ; We have copied a parameter up until the first separator.
 11512                                  ; Terminate it with CR.
 11513                                  
 11514                                  ENDPARM:
 11515 0000098B B00D                    	mov	al,0Dh
 11516 0000098D AA                      	stosb
 11517 0000098E E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 11518 00000990 49                      	dec	cx		; remember that we've seen one.	
 11519 00000991 EBDC                    	jmp	short EACHPARM
 11520                                  
 11521                                  ; We have parsed the entire line. Terminate the arg list
 11522                                  
 11523                                  HAVPARM:
 11524 00000993 30C0                    	xor	al,al		; Nul terminate the parms
 11525 00000995 AA                      	stosb
 11526                                  
 11527                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 11528                                  ; into paragraphs and setblock to the appropriate size
 11529                                  
 11530 00000996 8D5D0F                  	lea	bx,[di+15]
 11531 00000999 B104                    	mov	cl,4
 11532 0000099B D3EB                    	shr	bx,cl
 11533 0000099D B44A                    	mov	ah,4Ah
 11534                                  	;mov	ah,SETBLOCK ; 4Ah
 11535 0000099F CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 11536                                  			; ES = segment address of block	to change
 11537                                  			; BX = new size	in paragraphs
 11538 000009A1 07                      	pop	es
 11539 000009A2 06                      	push	es
 11540 000009A3 1F                      	pop	ds		; Simply batch FCB setup
 11541 000009A4 833E[4302]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 11542 000009A9 7506                    	jne	short NOBATSING
 11543 000009AB C706[4302]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 11544                                  
 11545                                  NOBATSING:
 11546                                  
 11547                                  ; Enter the batch file with the current echo state
 11548                                  
 11549 000009B1 58                      	pop	ax		; Get original echo state
 11550 000009B2 A2[3B02]                	mov	[EchoFlag],al	; restore it
 11551 000009B5 E94CF7                  	jmp	TCOMMAND
 11552                                  
 11553                                  ; The following is executed if there isn't enough memory for batch segment
 11554                                  
 11555                                  NO_MEMORY:
 11556 000009B8 5A                      	pop	dx		; even up our stack 
 11557 000009B9 58                      	pop	ax
 11558 000009BA 58                      	pop	ax
 11559 000009BB E829FE                  	call	ALLOC_TPA	; reallocate memory
 11560                                  
 11561                                  	; 12/02/2023
 11562                                  	; MSDOS 3.3
 11563                                  	;mov	dx,INSFMEMMESPTR
 11564                                  	;jmp	CERROR
 11565                                  
 11566                                  	; MSDOS 6.0
 11567                                  	;mov	byte [msg_disp_class],1
 11568 000009BE C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 11569                                  				;AN000; set up extended error msg class
 11570                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11571 000009C3 BA[D091]                	mov	dx,extend_buf_ptr
 11572                                  	;			;AC000; get extended message pointer
 11573                                  	;mov	word [extend_buf_ptr],8
 11574 000009C6 C706[D091]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 11575                                  				;AN000; get message number in control block
 11576 000009CC E9D324                  	jmp	cerror		;g print error message and go...
 11577                                  
 11578                                  ; =============== S U B	R O U T	I N E =======================================
 11579                                  
 11580                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11581                                  BATCHOFF:
 11582 000009CF 50                      	push	ax
 11583 000009D0 06                      	push	es
 11584 000009D1 1E                      	push	ds
 11585 000009D2 53                      	push	bx
 11586                                  
 11587 000009D3 2E8E06[F39D]            	mov	es,[cs:RESSEG]
 11588                                  	;mov	ds,[cs:RESSEG]
 11589                                  	; 26/07/2024
 11590 000009D8 06                      	push	es
 11591 000009D9 1F                      	pop	ds
 11592                                  
 11593 000009DA A1[E701]                	mov	ax,[Batch]	; Free the batch segment
 11594 000009DD 09C0                    	or	ax,ax
 11595 000009DF 7442                    	jz	short NOTFREE
 11596                                  
 11597 000009E1 06                      	push	es
 11598 000009E2 8EC0                    	mov	es,ax
 11599 000009E4 F606[3B02]01            	test	byte [EchoFlag],1
 11600                                  				;G Is echo on?
 11601 000009E9 7505                    	jnz	short ECHO_LAST_LINE
 11602                                  				;G Yes - echo last line in file
 11603                                  	;mov	byte [SUPPRESS],0
 11604 000009EB C606[3C02]00            	mov	byte [Suppress],NO_ECHO
 11605                                  				;G no - don't echo last line in file	
 11606                                  ECHO_LAST_LINE:
 11607                                  	;mov	bl,[es:1]
 11608 000009F0 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 11609                                  				; G get echo state
 11610 000009F5 881E[3B02]              	mov	[EchoFlag],bl
 11611                                  				; G  and restore it
 11612                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 11613                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 11614 000009F9 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 11615                                  				;G Get FOR segment
 11616 000009FE 891E[4A02]              	mov	[ForPtr],bx	;G  and restore it
 11617                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 11618                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 11619 00000A02 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 11620                                  				;G Get FOR flag
 11621 00000A07 881E[4902]              	mov	[ForFlag],bl
 11622                                  				;G  and restore it
 11623                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 11624                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 11625 00000A0B 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 11626                                  				;G  Get old batch segment
 11627                                  
 11628 00000A10 B449                    	mov	ah,49h
 11629                                  	;mov	ah,DEALLOC ; 49h
 11630 00000A12 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11631                                  			; ES = segment address of area to be freed
 11632 00000A14 07                      	pop	es
 11633 00000A15 891E[5002]              	mov	[Next_Batch],bx	;G reset batch segment	
 11634 00000A19 26FF0E[4C02]            	dec	word [es:Nest]
 11635 00000A1E 31C0                    	xor	ax,ax
 11636 00000A20 A3[E701]                	mov	[Batch],ax	; No batch in progress
 11637                                  NOTFREE:
 11638 00000A23 5B                      	pop	bx
 11639 00000A24 1F                      	pop	ds
 11640 00000A25 07                      	pop	es
 11641 00000A26 58                      	pop	ax
 11642 00000A27 C3                      	retn
 11643                                  
 11644                                  ; =============== S U B	R O U T	I N E =======================================
 11645                                  
 11646                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11647                                  
 11648                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 11649                                  ;	Entry : DS:SI ==> source string
 11650                                  ;		ES:DI ==> destination string
 11651                                  ;		CX = current length of destination string
 11652                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 11653                                  
 11654                                  	; 12/02/2023	
 11655                                  	; MSDOS 3.3
 11656                                  ;STRCPY:
 11657                                  	;push	ax
 11658                                  ;CCYCLE:
 11659                                  	;lodsb
 11660                                  	;stosb
 11661                                  	;or	al,al
 11662                                  	;jnz	short CCYCLE
 11663                                  	;pop	ax
 11664                                  	;retn
 11665                                  
 11666                                  ;Procedure StrCpy,NEAR
 11667                                  
 11668                                  	; 12/02/2023
 11669                                  	; MSDOS 6.0
 11670                                  STRCPY:
 11671 00000A28 50                      	push	ax
 11672                                  ccycle:
 11673 00000A29 AC                      	lodsb
 11674 00000A2A 41                      	inc	cx
 11675                                  	;cmp	cx,128
 11676 00000A2B 81F98000                	cmp	cx,COMBUFLEN
 11677                                  	;jb	short ccopy
 11678                                  	;stc			; set carry to signal error
 11679                                  	;jmp	short ccend
 11680                                  	; 12/02/2023
 11681 00000A2F F5                      	cmc
 11682 00000A30 7205                    	jc	short ccend
 11683                                  ccopy:
 11684 00000A32 AA                      	stosb
 11685 00000A33 08C0                    	or	al,al
 11686 00000A35 75F2                    	jnz	short ccycle
 11687                                  ccend:
 11688 00000A37 49                      	dec	cx		; discount extra byte
 11689 00000A38 4F                      	dec	di		; back up pointer
 11690 00000A39 58                      	pop	ax
 11691 00000A3A C3                      	retn			; return carry clear
 11692                                  
 11693                                  ;EndProc StrCpy
 11694                                  
 11695                                  ;============================================================================
 11696                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 11697                                  ;============================================================================
 11698                                  ; 12/10/2018 - Retro DOS v3.0
 11699                                  
 11700                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 11701                                  
 11702                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11703                                  
 11704                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 11705                                  
 11706                                  ; =============== S U B	R O U T	I N E =======================================
 11707                                  
 11708                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 11709                                  
 11710                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 11711                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 11712                                  ; AH, DX destroyed.
 11713                                  
 11714                                  GETBATBYT:
 11715 00000A3B 53                      	push	bx
 11716 00000A3C 51                      	push	cx
 11717 00000A3D 1E                      	push	ds
 11718 00000A3E F606[3102]FF            	test	byte [Batch_Abort],-1
 11719                                  	;jnz	short BATEOF
 11720                                  	; 14/02/2023
 11721 00000A43 7403                    	jz	short getbatbyt1
 11722 00000A45 E9D100                  	jmp	BATEOF
 11723                                  getbatbyt1:
 11724 00000A48 F706[E701]FFFF          	test	word [Batch],-1
 11725                                  	;jz	short BATEOF
 11726                                  	; 14/02/2023
 11727 00000A4E 7503                    	jnz	short getbatbyt2
 11728 00000A50 E9C600                  	jmp	BATEOF
 11729                                  getbatbyt2:
 11730 00000A53 06                      	push	es
 11731 00000A54 8E06[E701]              	mov	es,[Batch]
 11732                                  
 11733                                  	; MSDOS 6.0
 11734                                  ;M020;
 11735                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 11736                                  ;try to read from the batchfile again.
 11737                                  
 11738                                  	;cmp	byte [es:2],0
 11739 00000A58 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11740                                  				;already reached EOF?	;M020
 11741 00000A5E 7403                    	jz	short not_eof	;no, read batch file	;M020
 11742 00000A60 E99C00                  	jmp	At_EOF		;yes, no more reads	;M020
 11743                                  not_eof:						;M020
 11744                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11745                                  	;add	word [es:8],1	; MSDOS 6.0
 11746 00000A63 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 11747                                  	;adc	word [es:10],0	; MSDOS 6.0
 11748 00000A69 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 11749 00000A6F 07                      	pop	es
 11750                                  
 11751                                  ; See if we have bytes buffered...
 11752                                  
 11753 00000A70 8CC8                    	mov	ax,cs
 11754 00000A72 8ED8                    	mov	ds,ax
 11755 00000A74 8B1E[B9A9]              	mov	bx,[BATBUFPOS]
 11756 00000A78 83FBFF                  	cmp	bx,-1
 11757 00000A7B 7540                    	jnz	short UNBUF
 11758                                  
 11759                                  ; There are no bytes in the buffer. Let's try to fill it up.
 11760                                  
 11761 00000A7D BA[BBA9]                	mov	dx,BATBUF
 11762 00000A80 8B0E[7597]              	mov	cx,[BATBUFLEN] ; max to read.
 11763 00000A84 8B1E[E5A1]              	mov	bx,[BATHAND]
 11764                                  	; 14/02/2023
 11765 00000A88 B43F                    	mov	ah,3Fh
 11766                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 11767 00000A8A CD21                    	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 11768                                  			; BX = file handle,CX = number	of bytes to read
 11769                                  			; DS:DX	-> buffer
 11770                                  	; MSDOS 6.0
 11771 00000A8C 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 11772                                  	;invoke	get_ext_error_number	;AN022; get the error
 11773 00000A8E E8B117                  	call	get_ext_error_number
 11774 00000A91 1E                      	push	ds			;AN022; save local segment
 11775 00000A92 8E1E[F39D]              	mov	ds,[RESSEG]		;AN022; get resident segment
 11776                                  	;assume ds:resgroup		;AN022;
 11777 00000A96 89C2                    	mov	dx,ax			;AN022; put error in DX
 11778                                  	;invoke	output_batch_name	;AN022; set up to print the error
 11779 00000A98 E861FB                  	call	output_batch_name
 11780 00000A9B 1F                      	pop	ds			;AN022;
 11781                                  	;assume	ds:trangroup		;AN022;
 11782                                  	;invoke	std_eprintf		;AN022; print out the error
 11783 00000A9C E8684A                  	call	std_eprintf
 11784                                  	;mov	byte ptr combuf+2,end_of_line_in
 11785 00000A9F C606[549C]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 11786                                  	;				;AN022; terminate the batch line for parsing
 11787                                  	;mov	byte ptr combuf+3,end_of_line_out 
 11788 00000AA4 C606[559C]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 11789                                  	;				;AN022; terminate the batch line for output
 11790                                  ;M020;
 11791                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 11792                                  ;error is never hit (and it shouldn't be)
 11793                                  
 11794 00000AA9 8E1E[F39D]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 11795 00000AAD EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 11796                                  bat_read_ok:				;AN022;
 11797                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11798 00000AAF 89C1                    	mov	cx,ax
 11799                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 11800                                  	; 14/02/2023
 11801 00000AB1 E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 11802 00000AB3 890E[DBA9]              	mov	[BATBUFEND],cx
 11803 00000AB7 31DB                    	xor	bx,bx
 11804 00000AB9 891E[B9A9]              	mov	[BATBUFPOS],bx
 11805                                  
 11806                                  	; Buffered bytes!
 11807                                  UNBUF:
 11808 00000ABD 8A87[BBA9]              	mov	al,[BATBUF+bx]		; get next byte
 11809 00000AC1 43                      	inc	bx
 11810 00000AC2 3B1E[DBA9]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 11811 00000AC6 7203                    	jb	short SETBUFPOS
 11812 00000AC8 BBFFFF                  	mov	bx,-1
 11813                                  SETBUFPOS:
 11814 00000ACB 891E[B9A9]              	mov	[BATBUFPOS],bx
 11815 00000ACF 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 11816 00000AD1 7575                    	jne	short GETBYTEDONE
 11817                                  
 11818                                  ;We get here only when we hit an EOF
 11819                                  	
 11820                                  	; MSDOS 6.0
 11821                                  BATEOFDS:
 11822                                  ;SR;
 11823                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 11824                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 11825                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 11826                                  ;batch processing is turned off before the last line is processed and so 
 11827                                  ;this line would never be executed. 
 11828                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 11829                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 11830                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 11831                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 11832                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 11833                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 11834                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 11835                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 11836                                  ;during this call, and there was a CR-LF previously, we are going to fake
 11837                                  ;another redundant CR-LF. There is no work-around I can think of.
 11838                                  ; 	I would love to restructure this entire routine and its caller to
 11839                                  ;make the flow really easy to understand but I guess this will have to wait.
 11840                                  ;
 11841 00000AD3 06                      	push	es
 11842 00000AD4 8E06[F39D]              	mov	es,[RESSEG]
 11843                                  ;SR;
 11844                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 11845                                  ;or BatchEOF == 1 now), then do not do the LF check.
 11846                                  ;
 11847 00000AD8 268E06[E701]            	mov	es,[es:Batch]
 11848                                  	;cmp	byte [es:2],0
 11849 00000ADD 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11850 00000AE3 7516                    	jnz	short crpresent
 11851                                  
 11852                                  	;inc	byte [es:2]
 11853 00000AE5 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 11854                                  					;match the dec following
 11855 00000AEA 8B1E[DBA9]              	mov	bx,[BATBUFEND]
 11856 00000AEE 80BF[BAA9]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 11857 00000AF3 7406                    	je	short crpresent		;yes, no need to fake it
 11858                                  
 11859                                  	;add	byte [es:2],3
 11860 00000AF5 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 11861                                  					;BatchEOF == 4 to fake CR-LF
 11862                                  crpresent:
 11863                                  ;;	;pop	es
 11864                                  
 11865                                  	;ASSUME	DS:TranGroup
 11866                                  	; 14/02/2023
 11867 00000AFB 8E1E[F39D]              	mov	ds,[RESSEG]
 11868                                  	;ASSUME	DS:ResGroup
 11869                                  ;SR;
 11870                                  ; The shift operation is done here to replace the decrement. This is because
 11871                                  ;we can jump to this label directly from above when bogus calls are made to
 11872                                  ;this routine even after batch processing is turned off. The shift ensures
 11873                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 11874                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 11875                                  ;calls.
 11876                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 11877                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 11878                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 11879                                  ;turning batch processing off.
 11880                                  
 11881                                  At_EOF:					;new label added ;M020
 11882                                  	;shr	byte [es:2],1
 11883 00000AFF 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 11884                                  					;decrement the flag
 11885 00000B04 7412                    	jz	short turn_off		;zero,turn batch off
 11886                                  	;cmp	byte [es:2],1
 11887 00000B06 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 11888 00000B0C 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 11889                                  ;
 11890                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 11891                                  ;
 11892 00000B0E B00D                    	mov	al,0Dh			;return fake CR.
 11893 00000B10 07                      	pop	es
 11894 00000B11 EB35                    	jmp	short GETBYTEDONE
 11895                                  ret_lf:
 11896 00000B13 B00A                    	mov	al,0Ah			;return fake LF
 11897 00000B15 07                      	pop	es
 11898 00000B16 EB30                    	jmp	short GETBYTEDONE		
 11899                                  turn_off:
 11900 00000B18 07                      	pop	es
 11901                                  ;BATEOF:
 11902                                  	; MSDOS 3.3
 11903                                  ;TURN_OFF:
 11904                                  	;mov	ds,[RESSEG]
 11905                                  
 11906                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11907                                  BATEOF:
 11908 00000B19 E8B3FE                  	call	BATCHOFF
 11909 00000B1C E8CC02                  	call	BATCLOSE
 11910                                  
 11911                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 11912                                  
 11913                                  ;SR; BugBug
 11914                                  ; There is a good reason why this carriage return is being returned here. 
 11915                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 11916                                  ;of the way the caller is structured, a fake CR has to be returned again on
 11917                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 11918                                  ;results in an extra linefeed after the batchfile is run if the last line of
 11919                                  ;the batchfile already had a CR-LF. 
 11920                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 11921                                  ;the end-of-line. This CR is to mark the end-of-file.
 11922                                  
 11923 00000B1F B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 11924 00000B21 F606[3102]FF            	test	byte [Batch_Abort],-1
 11925 00000B26 C606[3102]00            	mov	byte [Batch_Abort],0
 11926 00000B2B 7407                    	jz	short CONT_GET_BYT
 11927 00000B2D BF[549C]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 11928 00000B30 31C9                    	xor	cx,cx			; zero line length
 11929 00000B32 EB14                    	jmp	short GETBYTEDONE
 11930                                  CONT_GET_BYT:
 11931 00000B34 833E[4302]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 11932 00000B39 750D                    	jne	short GETBYTEDONE
 11933 00000B3B 833E[4C02]00            	cmp	word [Nest],0		;G See if we have nested batch files
 11934 00000B40 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 11935 00000B42 C706[4302]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 11936                                  GETBYTEDONE:
 11937 00000B48 1F                      	pop	ds
 11938 00000B49 59                      	pop	cx
 11939 00000B4A 5B                      	pop	bx
 11940 00000B4B C3                      	retn
 11941                                  
 11942                                  ; ---------------------------------------------------------------------------
 11943                                  
 11944                                  ;break	<$If - conditional execution>
 11945                                  
 11946                                  	; 17/04/2023
 11947                                  ;IFERRORP:
 11948                                  ;	pop	ax
 11949                                  ;IFERROR:
 11950                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11951                                  ;FORERROR:
 11952                                  ;	mov	dx,SYNTMES_PTR
 11953                                  ;	jmp	cerror
 11954                                  
 11955                                  ; ---------------------------------------------------------------------------
 11956                                  
 11957                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11958                                  	;
 11959                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11960                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0B69h
 11961                                  _$IF:
 11962                                  	; MSDOS 6.0
 11963                                  ; Turn off any pipes in progress.
 11964 00000B4C 1E                      	push	ds			;AN004; save local DS
 11965 00000B4D 8E1E[F39D]              	mov	ds,[RESSEG]		;AN004; get resident segment
 11966                                  	;assume	ds:resgroup		;AN004;
 11967 00000B51 803E[B602]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 11968 00000B56 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 11969                                  	;invoke	PipeDel 		;AN004; turn off piping
 11970 00000B58 E8E226                  	call	PIPEDEL	
 11971                                  IFNoPipe:				;AN004;
 11972 00000B5B 1F                      	pop	ds			;AN004; get local DS back
 11973                                  	;assume	ds:trangroup		;AN004;
 11974                                  
 11975                                  	; MSDOS 3.3 (&MSDOS 6.0)
 11976 00000B5C C606[049E]00            	mov	byte [IFNOTFLAG],0
 11977 00000B61 C706[8DA8]0000          	mov	word [IF_NOT_COUNT],0
 11978 00000B67 BE8100                  	mov	si,81h
 11979                                  IFREENT:
 11980 00000B6A E8C11F                  	call	scanoff
 11981 00000B6D 3C0D                    	cmp	al,0Dh
 11982 00000B6F 743C                    	je	short IFERROR
 11983 00000B71 89F5                    	mov	bp,si
 11984 00000B73 BF[C395]                	mov	di,IFTAB		; Prepare to search if table	
 11985                                  	;mov	ch,0
 11986                                  	; 17/04/2023
 11987 00000B76 30ED                    	xor	ch,ch
 11988                                  IFINDCOM:
 11989 00000B78 89EE                    	mov	si,bp
 11990 00000B7A 8A0D                    	mov	cl,[di]
 11991 00000B7C 47                      	inc	di
 11992 00000B7D E33E                    	jcxz	IFSTRING
 11993 00000B7F EB02                    	jmp	short FIRSTCOMP
 11994                                  IFCOMP:
 11995 00000B81 7510                    	jnz	short IF_DIF
 11996                                  FIRSTCOMP:
 11997 00000B83 AC                      	lodsb
 11998 00000B84 268A25                  	mov	ah,[es:di]
 11999 00000B87 47                      	inc	di
 12000 00000B88 38E0                    	cmp	al,ah
 12001 00000B8A 7405                    	je	short IFLP
 12002 00000B8C 80CC20                  	or	ah,20h			; Try lower case
 12003 00000B8F 38E0                    	cmp	al,ah
 12004                                  IFLP:
 12005 00000B91 E2EE                    	loop	IFCOMP
 12006                                  IF_DIF:
 12007 00000B93 9F                      	lahf
 12008 00000B94 01CF                    	add	di,cx			; Bump to next position without affecting flags
 12009 00000B96 8B1D                    	mov	bx,[di]			; Get handler address
 12010 00000B98 47                      	inc	di
 12011 00000B99 47                      	inc	di
 12012 00000B9A 9E                      	sahf
 12013 00000B9B 75DB                    	jnz	short IFINDCOM
 12014 00000B9D AC                      	lodsb
 12015 00000B9E 3C0D                    	cmp	al,0Dh
 12016                                  IFERRJ:
 12017 00000BA0 740B                    	jz	short IFERROR
 12018 00000BA2 E8911F                  	call	DELIM
 12019 00000BA5 75D1                    	jnz	short IFINDCOM
 12020 00000BA7 E8841F                  	call	scanoff
 12021 00000BAA FFE3                    	jmp	bx
 12022                                  
 12023                                  	; 17/04/2023
 12024                                  IFERRORP:
 12025 00000BAC 58                      	pop	ax
 12026                                  IFERROR:
 12027                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 12028                                  FORERROR:
 12029 00000BAD BA[6892]                	mov	dx,SYNTMES_PTR
 12030 00000BB0 E9EF22                  	jmp	cerror
 12031                                  
 12032                                  IFNOT:
 12033 00000BB3 F616[049E]              	not	byte [IFNOTFLAG]
 12034 00000BB7 FF06[8DA8]              	inc	word [IF_NOT_COUNT]
 12035 00000BBB EBAD                    	jmp	short IFREENT
 12036                                  
 12037                                  ; We are comparing two strings for equality. First, find the end of the
 12038                                  ; first string.
 12039                                  
 12040                                  IFSTRING:
 12041 00000BBD 56                      	push	si			; save away pointer for later compare
 12042 00000BBE 31C9                    	xor	cx,cx			; count of chars in first string
 12043                                  FIRST_STRING:
 12044 00000BC0 AC                      	lodsb				; get character
 12045 00000BC1 3C0D                    	cmp	al,0Dh			; end of line?
 12046 00000BC3 74E7                    	jz	short IFERRORP		; yes => error
 12047 00000BC5 E86E1F                  	call	DELIM			; is it a delimiter?
 12048 00000BC8 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 12049 00000BCA 41                      	inc	cx			; remember 1 byte for the length
 12050 00000BCB EBF3                    	jmp	short FIRST_STRING 	; go back for more
 12051                                  EQUAL_CHECK:
 12052 00000BCD 3C3D                    	cmp	al,'='			; is char we have an = sign?
 12053 00000BCF 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 12054 00000BD1 3C0D                    	cmp	al,0Dh			; end of line?
 12055 00000BD3 74D7                    	je	short IFERRORP		; yes, syntax error
 12056 00000BD5 AC                      	lodsb				; get next char
 12057 00000BD6 EBF5                    	jmp	short EQUAL_CHECK
 12058                                  
 12059                                  ; The first = has been found. The next char had better be an = too.
 12060                                  
 12061                                  EQUAL_CHECK2:
 12062 00000BD8 AC                      	lodsb				; get potential = char
 12063 00000BD9 3C3D                    	cmp	al,'='			; is it good?	
 12064                                  	;jnz	short IFERRPJ		; no, error
 12065                                  	; 17/04/2023
 12066 00000BDB 75CF                    	jne	short IFERRORP
 12067                                  
 12068                                  ; Find beginning of second string.
 12069                                  
 12070 00000BDD E84E1F                  	call	scanoff
 12071 00000BE0 3C0D                    	cmp	al,0Dh
 12072                                  	;jz	short IFERRPJ
 12073                                  	; 17/04/2023
 12074 00000BE2 74C8                    	je	short IFERRORP
 12075 00000BE4 5F                      	pop	di
 12076                                  
 12077                                  ; DS:SI points to second string
 12078                                  ; CX has number of chars in first string
 12079                                  ; ES:DI points to first string
 12080                                  
 12081 00000BE5 F3A6                    	repe	cmpsb
 12082 00000BE7 7414                    	jz	short MATCH		; match found!
 12083                                  
 12084                                  ; No match. Let's find out what was wrong. The character that did not match
 12085                                  ; has been advanced over. Let's back up to it.
 12086                                  
 12087 00000BE9 4E                      	dec	si
 12088                                  
 12089                                  ; If it is EOL, then syntax error
 12090                                  
 12091 00000BEA 803C0D                  	cmp	byte [si],0Dh
 12092                                  	;jz	short IFERRJ
 12093                                  	; 17/04/2023
 12094 00000BED 74BE                    	je	short IFERROR
 12095                                  
 12096                                  ; Advance pointer over remainder of unmatched text to next delimiter
 12097                                  
 12098                                  SKIPSTRINGEND:
 12099 00000BEF AC                      	lodsb
 12100                                  NOTMATCH:
 12101 00000BF0 3C0D                    	cmp	al,0Dh
 12102                                  IFERRORJ2:
 12103                                  	;jz	short IFERRJ
 12104                                  	; 17/04/2023
 12105 00000BF2 74B9                    	jz	short IFERROR
 12106 00000BF4 E83F1F                  	call	DELIM
 12107 00000BF7 75F6                    	jnz	short SKIPSTRINGEND
 12108                                  
 12109                                  ; Signal that we did NOT have a match
 12110                                  
 12111 00000BF9 B0FF                    	mov	al,-1	 ; 0FFh
 12112 00000BFB EB37                    	jmp	short IFRET
 12113                                  
 12114                                  	; 17/04/2023
 12115                                  ;IFERRPJ:
 12116                                  	;jmp	IFERRORP
 12117                                  
 12118                                  ; The compare succeeded. Was the second string longer than the first?
 12119                                  ; We do this by seeing if the next char is a delimiter.
 12120                                  
 12121                                  MATCH:
 12122 00000BFD AC                      	lodsb
 12123 00000BFE E8351F                  	call	DELIM
 12124 00000C01 75ED                    	jnz	short NOTMATCH ; not same.
 12125 00000C03 30C0                    	xor	al,al
 12126 00000C05 EB2D                    	jmp	short IFRET
 12127                                  
 12128                                  ; ---------------------------------------------------------------------------
 12129                                  
 12130                                  IFEXISTS:
 12131                                  
 12132                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 12133                                  
 12134                                  ;MOREDELIM:
 12135 00000C07 AC                      	lodsb
 12136 00000C08 E82B1F                  	call	DELIM
 12137 00000C0B 75FA                    	jnz	short IFEXISTS
 12138                                  	;jnz	short MOREDELIM
 12139                                  
 12140 00000C0D BA[2AA0]                	mov	dx,DIRBUF
 12141 00000C10 B8001A                  	mov	ax,1A00h
 12142                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12143 00000C13 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12144                                  			; DS:DX	-> disk	transfer buffer
 12145 00000C15 BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 12146 00000C18 031E[8DA8]              	add	bx,[IF_NOT_COUNT]
 12147                                  	;mov	ax,ARG_ARGV
 12148                                  	;mov	ax,ARG+ARG_UNIT.argv
 12149 00000C1C B8[41A2]                	mov	ax,ARG
 12150 00000C1F E87C2A                  	call	argv_calc		; convert arg index to pointer
 12151 00000C22 8B17                    	mov	dx,[bx]
 12152                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12153                                  	;mov	cx,6
 12154 00000C24 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 12155 00000C27 B8004E                  	mov	ax,4E00h
 12156                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 12157 00000C2A CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12158                                  			; CX = search attributes
 12159                                  			; DS:DX	-> ASCIZ filespec
 12160                                  			; (drive,path, and wildcards allowed)
 12161 00000C2C 7204                    	jc	short IF_EX_C ; carry is how to determine error
 12162 00000C2E 30C0                    	xor	al,al
 12163 00000C30 EB02                    	jmp	short IFRET
 12164                                  
 12165                                  	;nop
 12166                                  IF_EX_C:
 12167 00000C32 B0FF                    	mov	al,-1	; 0FFh	; false 'n' fall through...
 12168                                  IFRET:
 12169 00000C34 F606[049E]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 12170 00000C39 7402                    	jz	short REALTEST
 12171 00000C3B F6D0                    	not	al
 12172                                  REALTEST:
 12173 00000C3D 08C0                    	or	al,al
 12174 00000C3F 7403                    	jz	short IFTRUE
 12175 00000C41 E9C0F4                  	jmp	TCOMMAND
 12176                                  
 12177                                  IFTRUE:
 12178 00000C44 E8E71E                  	call	scanoff
 12179 00000C47 89F1                    	mov	cx,si
 12180 00000C49 81E98100                	sub	cx,81h
 12181 00000C4D 280E8000                	sub	[80h],cl
 12182 00000C51 8A0E8000                	mov	cl,[80h]
 12183 00000C55 880E[539C]              	mov	[COMBUF+1],cl
 12184 00000C59 BF[549C]                	mov	di,COMBUF+2
 12185 00000C5C FC                      	cld
 12186 00000C5D F3A4                    	rep	movsb
 12187 00000C5F B00D                    	mov	al,0Dh
 12188 00000C61 AA                      	stosb
 12189                                  
 12190                                  ; Signal that an IF was done. 
 12191                                  ; This prevents the redirections from getting lost.
 12192                                  
 12193 00000C62 1E                      	push	ds
 12194 00000C63 8E1E[F39D]              	mov	ds,[RESSEG]
 12195 00000C67 C606[4802]FF            	mov	byte [IfFlag],-1
 12196 00000C6C 1F                      	pop	ds
 12197                                  
 12198                                  ; Go do the command
 12199                                  
 12200                                  	;jmp	DOCOM1 ; MSDOS 5.0 COMMAND.COM
 12201                                  	; 07/06/2023
 12202                                  	; Retro DOS v4.2 COMMAND.COM
 12203 00000C6D E983F6                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 12204                                  
 12205                                  ; ---------------------------------------------------------------------------
 12206                                  
 12207                                  IFERRORJ3:
 12208 00000C70 EB80                    	jmp	IFERRORJ2
 12209                                  
 12210                                  IFERLEV:
 12211 00000C72 B70A                    	mov	bh,10
 12212 00000C74 30DB                    	xor	bl,bl
 12213                                  GETNUMLP:
 12214 00000C76 AC                      	lodsb
 12215 00000C77 3C0D                    	cmp	al,0Dh
 12216 00000C79 74F5                    	je	short IFERRORJ3
 12217 00000C7B E8B81E                  	call	DELIM
 12218 00000C7E 740C                    	jz	short GOTNUM
 12219 00000C80 2C30                    	sub	al,'0'
 12220 00000C82 86C3                    	xchg	al,bl
 12221 00000C84 F6E7                    	mul	bh
 12222 00000C86 00D8                    	add	al,bl
 12223 00000C88 86C3                    	xchg	al,bl
 12224 00000C8A EBEA                    	jmp	short GETNUMLP
 12225                                  GOTNUM:
 12226 00000C8C 1E                      	push	ds
 12227 00000C8D 8E1E[F39D]              	mov	ds,[RESSEG]
 12228 00000C91 8A26[3802]              	mov	ah,[RetCode]
 12229 00000C95 1F                      	pop	ds
 12230 00000C96 30C0                    	xor	al,al
 12231 00000C98 38DC                    	cmp	ah,bl
 12232 00000C9A 7398                    	jnb	short IFRET
 12233 00000C9C FEC8                    	dec	al
 12234 00000C9E EB94                    	jmp	short IFRET
 12235                                  
 12236                                  ; ---------------------------------------------------------------------------
 12237                                  
 12238                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 12239                                  ; This is a NOP if no batch in progress.
 12240                                  
 12241                                  _SHIFT:
 12242 00000CA0 8E1E[F39D]              	mov	ds,[RESSEG]
 12243 00000CA4 A1[E701]                	mov	ax,[Batch]		; get batch pointer
 12244 00000CA7 09C0                    	or	ax,ax			; in batch mode?
 12245 00000CA9 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 12246                                  SHIFT_RETN:				; no, done.
 12247 00000CAB C3                      	retn
 12248                                  SHIFT1:
 12249 00000CAC 8EC0                    	mov	es,ax
 12250 00000CAE 8ED8                    	mov	ds,ax
 12251                                  
 12252                                  ; Now move the batch args down by 1 word
 12253                                  
 12254                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 12255                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 12256 00000CB0 BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 12257 00000CB3 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 12258 00000CB6 B90900                  	mov	cx,9			; move 9 parameters
 12259 00000CB9 F3A5                    	rep	movsw			; SHIFT down
 12260                                  
 12261                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 12262                                  ; We have copied it into the previous position.
 12263                                  
 12264 00000CBB 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 12265 00000CBE 74EB                    	je	short SHIFT_RETN ; No new parm
 12266                                  
 12267                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 12268                                  ; Assume, first, that there is no next argument.
 12269                                   
 12270 00000CC0 8B35                    	mov	si,[di]
 12271 00000CC2 C705FFFF                	mov	word [di],-1		; Assume no parm
 12272                                  
 12273                                  ; The parameters are CR separated. Scan for end of this parm.
 12274                                  
 12275                                  SKIPCRLP:
 12276 00000CC6 AC                      	lodsb
 12277 00000CC7 3C0D                    	cmp	al,0Dh
 12278 00000CC9 75FB                    	jne	short SKIPCRLP
 12279                                  
 12280                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 12281                                  ; are finished. There are no more parms and the pointer has been previously
 12282                                  ; initialized to indicate it.
 12283                                  
 12284 00000CCB 803C00                  	cmp	byte [si],0
 12285 00000CCE 74DB                    	jz	short SHIFT_RETN 	; End of parms
 12286 00000CD0 8935                    	mov	[di],si			; Pointer to next parm as %9
 12287 00000CD2 C3                      	retn
 12288                                  
 12289                                  ; =============== S U B	R O U T	I N E =======================================
 12290                                  
 12291                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 12292                                  ; returns char in AL, carry set -> eof
 12293                                  
 12294                                  SKIPDELIM:
 12295 00000CD3 F706[E701]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 12296 00000CD9 740A                    	jz	short SKIPERR
 12297 00000CDB E85DFD                  	call	GETBATBYT		; get a char
 12298 00000CDE E8551E                  	call	DELIM			; check for ignoreable chars
 12299 00000CE1 74F0                    	jz	short SKIPDELIM		; ignore this char.
 12300 00000CE3 F8                      	clc
 12301 00000CE4 C3                      	retn
 12302                                  SKIPERR:
 12303 00000CE5 F9                      	stc
 12304                                  GOTO_RETN:
 12305 00000CE6 C3                      	retn
 12306                                  
 12307                                  ; ---------------------------------------------------------------------------
 12308                                  
 12309                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 12310                                  ;  .com file. This routine strips the CALL off the command line, sets
 12311                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 12312                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 12313                                  ;  being CALLed.
 12314                                  
 12315                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12316                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 12317                                  
 12318                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12319                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0D01h
 12320                                  _$CALL:
 12321                                  
 12322                                  ;  strip off CALL from command line
 12323                                  
 12324                                  	;ASSUME DS:trangroup,ES:trangroup
 12325                                  
 12326 00000CE7 56                      	push	si
 12327 00000CE8 57                      	push	di
 12328 00000CE9 50                      	push	ax
 12329 00000CEA 51                      	push	cx
 12330 00000CEB BE[549C]                	mov	si,COMBUF+2
 12331 00000CEE E83D1E                  	call	scanoff			;get to first non-delimeter
 12332                                  	;add	si,4
 12333 00000CF1 83C604                  	add	si,length_call		;point to char past CALL
 12334 00000CF4 BF[549C]                	mov	di,COMBUF+2
 12335                                  	;mov	cx,124		
 12336 00000CF7 B97C00                  	mov	cx,COMBUFLEN-length_call 
 12337                                  					;get length of buffer
 12338 00000CFA F3A4                    	rep	movsb			;move it
 12339 00000CFC 59                      	pop	cx
 12340 00000CFD 58                      	pop	ax
 12341 00000CFE 5F                      	pop	di
 12342 00000CFF 5E                      	pop	si
 12343                                  
 12344                                  ;  set call flag to indicate call in progress
 12345                                  
 12346 00000D00 1E                      	push	ds
 12347 00000D01 8E1E[F39D]              	mov	ds,[RESSEG]
 12348 00000D05 C606[4E02]01            	mov	byte [Call_Flag],call_in_progress ; 1
 12349 00000D0A C606[4F02]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 12350                                  
 12351                                  ; Turn off any pipes in progress.
 12352                                  
 12353 00000D0F 803E[B602]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 12354 00000D14 7403                    	jz	short _NOPIPE
 12355 00000D16 E82425                  	call	PIPEDEL
 12356                                  _NOPIPE:
 12357 00000D19 1F                      	pop	ds
 12358 00000D1A C3                      	retn
 12359                                  
 12360                                  ; ---------------------------------------------------------------------------
 12361                                  
 12362                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12363                                  _GOTO:
 12364 00000D1B 8E1E[F39D]              	mov	ds,[RESSEG]
 12365 00000D1F F706[E701]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 12366 00000D25 74BF                    	jz	short GOTO_RETN
 12367 00000D27 31D2                    	xor	dx,dx
 12368 00000D29 1E                      	push	ds
 12369 00000D2A 8E1E[E701]              	mov	ds,[Batch]
 12370                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 12371 00000D2E 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 12372                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 12373 00000D32 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 12374                                  
 12375                                  	; MSDOS 6.0
 12376                                  ;M037
 12377                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 12378                                  ;
 12379 00000D36 C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 12380                                  					; clear eof indicator ;M037
 12381                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12382 00000D3B 1F                      	pop	ds
 12383                                  GOTOOPEN:
 12384 00000D3C E875F8                  	call	PROMPTBAT
 12385                                  	;mov	di,5Dh
 12386 00000D3F BF5D00                  	mov	di,FCB+1		; Get the label
 12387 00000D42 B90B00                  	mov	cx,11
 12388 00000D45 B020                    	mov	al,' '
 12389 00000D47 F2AE                    	repne	scasb
 12390 00000D49 7501                    	jnz	short NOINC
 12391 00000D4B 41                      	inc	cx
 12392                                  NOINC:
 12393 00000D4C 83E90B                  	sub	cx,11
 12394 00000D4F F7D9                    	neg	cx
 12395                                  	;mov	[cs:GOTOLEN],cx
 12396                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12397 00000D51 26890E[2AA0]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 12398                                  
 12399                                  ; At beginning of file. Skip to first non-delimiter char
 12400                                  
 12401 00000D56 E87AFF                  	call	SKIPDELIM
 12402 00000D59 721C                    	jb	short BADGOTO
 12403 00000D5B 3C3A                    	cmp	al,':'
 12404 00000D5D 7426                    	jz	short CHKLABEL
 12405                                  LABLKLP:				; Look for the label
 12406 00000D5F E8D9FC                  	call	GETBATBYT
 12407 00000D62 3C0A                    	cmp	al,0Ah
 12408 00000D64 7509                    	jne	short LABLKTST
 12409                                  
 12410                                  ; At beginning of line. Skip to first non-delimiter char
 12411                                  
 12412 00000D66 E86AFF                  	call	SKIPDELIM
 12413 00000D69 720C                    	jb	short BADGOTO
 12414 00000D6B 3C3A                    	cmp	al,':'
 12415 00000D6D 7416                    	je	short CHKLABEL
 12416                                  LABLKTST:
 12417 00000D6F F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1
 12418 00000D75 75E8                    	jnz	short LABLKLP
 12419                                  BADGOTO:
 12420 00000D77 E87100                  	call	BATCLOSE
 12421                                  
 12422                                  	; MSDOS 6.0
 12423                                  ;SR;
 12424                                  ; At this point we are terminating without freeing up any nested batch 
 12425                                  ;segments i.e if the error occurred within a called batch file. This routine
 12426                                  ;will traverse the linked list of batch segments and free all of them.
 12427                                  ;
 12428 00000D7A E8BB00                  	call	free_batch		; free up nested batch segments
 12429                                  
 12430                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12431 00000D7D 0E                      	push	cs
 12432 00000D7E 1F                      	pop	ds
 12433 00000D7F BA[6592]                	mov	dx,BADLAB_PTR
 12434 00000D82 E91D21                  	jmp	cerror
 12435                                  
 12436                                  ; Found the :.	Skip to first non-delimiter char
 12437                                  
 12438                                  CHKLABEL:
 12439 00000D85 E84BFF                  	call	SKIPDELIM
 12440 00000D88 72ED                    	jb	short BADGOTO
 12441 00000D8A BF5D00                  	mov	di,FCB+1 ; 5Dh
 12442                                  	;mov	cx,[cs:GOTOLEN]
 12443                                  	; 14/02/2023
 12444 00000D8D 268B0E[2AA0]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12445 00000D92 EB05                    	jmp	short GOTBYTE
 12446                                  
 12447                                  NEXTCHRLP:
 12448 00000D94 51                      	push	cx
 12449 00000D95 E8A3FC                  	call	GETBATBYT
 12450 00000D98 59                      	pop	cx
 12451                                  GOTBYTE:
 12452                                  	; 18/03/2023
 12453                                  	; 14/02/2023
 12454                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 12455 00000D99 E8731B                  	call	testkanj
 12456 00000D9C 7413                    	jz	short NOTKANJ1
 12457 00000D9E 263A05                  	cmp	al,[es:di]
 12458 00000DA1 75CC                    	jne	short LABLKTST
 12459 00000DA3 47                      	inc	di
 12460 00000DA4 49                      	dec	cx
 12461 00000DA5 E3C8                    	jcxz	LABLKTST
 12462 00000DA7 51                      	push	cx
 12463 00000DA8 E890FC                  	call	GETBATBYT
 12464 00000DAB 59                      	pop	cx
 12465 00000DAC 263A05                  	cmp	al,[es:di]
 12466 00000DAF EB0C                    	jmp	short KNEXTLABCHR
 12467                                  NOTKANJ1:
 12468                                  	; 14/02/2023
 12469                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 12470 00000DB1 0C20                    	or	al,20h
 12471 00000DB3 263A05                  	cmp	al,[es:di]
 12472                                  	;jne	short TRYUPPER
 12473                                  	;jmp	short NEXTLABCHR
 12474                                  	; 25/04/2023
 12475 00000DB6 7407                    	je	short NEXTLABCHR 
 12476                                  TRYUPPER:
 12477 00000DB8 2C20                    	sub	al,20h
 12478 00000DBA 263A05                  	cmp	al,[es:di]
 12479                                  KNEXTLABCHR:
 12480 00000DBD 75B0                    	jnz	short LABLKTST
 12481                                  NEXTLABCHR:
 12482 00000DBF 47                      	inc	di
 12483 00000DC0 E2D2                    	loop	NEXTCHRLP
 12484 00000DC2 E876FC                  	call	GETBATBYT
 12485                                  	; 14/02/2023
 12486 00000DC5 26833E[2AA0]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 12487                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 12488 00000DCB 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 12489 00000DCD 3C20                    	cmp	al,' '
 12490 00000DCF 779E                    	ja	short LABLKTST
 12491                                  GOTOCONT:
 12492 00000DD1 3C0D                    	cmp	al,0Dh
 12493 00000DD3 7407                    	je	short SKIPLFEED
 12494                                  TONEXTBATLIN:
 12495 00000DD5 E863FC                  	call	GETBATBYT
 12496 00000DD8 3C0D                    	cmp	al,0Dh
 12497 00000DDA 75F9                    	jne	short TONEXTBATLIN
 12498                                  SKIPLFEED:
 12499 00000DDC E85CFC                  	call	GETBATBYT
 12500                                  
 12501                                  	; MSDOS 6.0
 12502                                  ;SR;
 12503                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 12504                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 12505                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 12506                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 12507                                  ;all other cases, EOF will be hit while trying to read the next line and
 12508                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 12509                                  ;
 12510 00000DDF 06                      	push	es
 12511 00000DE0 8E06[E701]              	mov	es,[Batch]
 12512 00000DE4 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12513                                  					;invalidate fake CR-LF flag
 12514 00000DEA 07                      	pop	es
 12515                                  
 12516                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12517                                  	;call	BATCLOSE
 12518                                  	;retn
 12519                                  	; 14/02/2023
 12520                                  	;jmp	short BATCLOSE
 12521                                  
 12522                                  ; =============== S U B	R O U T	I N E =======================================
 12523                                  
 12524                                  BATCLOSE:
 12525 00000DEB 2E8B1E[E5A1]            	mov	bx,[cs:BATHAND]
 12526 00000DF0 83FB05                  	cmp	bx,5
 12527 00000DF3 7204                    	jb	short CLOSERETURN
 12528                                  	; 14/02/2023
 12529 00000DF5 B43E                    	mov	ah,3Eh
 12530                                  	;mov	ah,CLOSE ; 3Eh
 12531 00000DF7 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 12532                                  			; BX = file handle
 12533                                  CLOSERETURN:
 12534 00000DF9 C606[3002]00            	mov	byte [In_Batch],0 ; reset flag	
 12535 00000DFE C3                      	retn
 12536                                  
 12537                                  ; =============== S U B	R O U T	I N E =======================================
 12538                                  
 12539                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 12540                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 12541                                  
 12542                                  	; 14/02/2023
 12543                                  BATOPEN:
 12544 00000DFF 1E                      	push	ds
 12545 00000E00 8E1E[E701]              	mov	ds,[Batch]
 12546                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 12547                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 12548 00000E04 BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 12549 00000E07 B8003D                  	mov	ax,3D00h
 12550                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 12551 00000E0A CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 12552                                  			; DS:DX	-> ASCIZ filename
 12553                                  			; AL = access mode
 12554                                  			; 0 - read
 12555 00000E0C 721C                    	jc	short SETERRDL
 12556                                  	;mov	dx,[8]
 12557 00000E0E 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 12558                                  	;mov	cx,[10]
 12559 00000E12 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 12560 00000E16 1F                      	pop	ds
 12561                                  	;mov	[cs:BATHAND],ax
 12562 00000E17 26A3[E5A1]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12563 00000E1B 89C3                    	mov	bx,ax
 12564 00000E1D B80042                  	mov	ax,4200h
 12565                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 12566 00000E20 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 12567                                  			; AL = method: offset from beginning of	file
 12568                                  
 12569                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 12570                                  					; nuke batch buffer position
 12571 00000E22 26C706[B9A9]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12572                                  BATOPEN_RETN:
 12573 00000E29 C3                      	retn
 12574                                  
 12575                                  SETERRDL:
 12576 00000E2A 89D3                    	mov	bx,dx
 12577                                  	; MSDOS 6.0
 12578                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 12579                                  	; 14/02/2023
 12580 00000E2C E81314                  	call	get_ext_error_number
 12581 00000E2F 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 12582                                  
 12583                                  	; MSDOS 3.3
 12584                                  	;mov	dx,INSERTDSKPTR
 12585                                  	;call	GET_EXT_ERR_NUMBER
 12586                                  
 12587                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12588 00000E31 8A07                    	mov	al,[bx]			; Get drive spec
 12589 00000E33 2C40                    	sub	al,'@'	; sub al,40h	; A = 1
 12590 00000E35 1F                      	pop	ds
 12591 00000E36 F9                      	stc				; SUB mucked over carry
 12592 00000E37 C3                      	retn
 12593                                  
 12594                                  ; =============== S U B	R O U T	I N E =======================================
 12595                                  
 12596                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 12597                                  ;the batch and FOR segments until all of them are freed. It also restores
 12598                                  ;the old state of the EchoFlag.
 12599                                  ;
 12600                                  ;	ENTRY:	ds = RESGROUP
 12601                                  ;
 12602                                  ;	EXIT: 	All batch & FOR segments freed.
 12603                                  ;		EchoFlag restored to old state before batch process.
 12604                                  ;
 12605                                  ;	REGISTERS AFFECTED: bx, cx
 12606                                  
 12607                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12608                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 12609                                  
 12610                                  free_batch: ;proc near
 12611                                  	;assume	ds:RESGROUP,es:nothing
 12612                                  
 12613 00000E38 06                      	push	es
 12614 00000E39 8B1E[5002]              	mov	bx,[Next_Batch]
 12615 00000E3D 09DB                    	or	bx,bx
 12616 00000E3F 7431                    	jz	short fb_ret
 12617                                  _ClearBatch:
 12618 00000E41 8EC3                    	mov	es,bx			; get batch segment
 12619                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 12620 00000E43 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 12621                                  	;cmp	bx,0			; is a FOR in progress
 12622                                  	; 27/07/2024
 12623 00000E48 21DB                    	and	bx,bx
 12624 00000E4A 7408                    	jz	short no_bat_for	; no - don't deallocate
 12625 00000E4C 06                      	push	es			;
 12626 00000E4D 8EC3                    	mov	es,bx			; yes - free it up...
 12627 00000E4F B449                    	mov	ah,49h
 12628                                  	;mov	ah,DEALLOC		;
 12629 00000E51 CD21                    	int	21h			;
 12630 00000E53 07                      	pop	es			; restore to batch segment
 12631                                  no_bat_for:
 12632                                  	;mov	cl,[es:1]
 12633 00000E54 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 12634                                  					; get old echo flag
 12635                                  	;mov	bx,[es:3]
 12636 00000E59 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12637                                  					; get old batch segment
 12638 00000E5E B449                    	mov	ah,49h
 12639                                  	;mov	ah,DEALLOC		; free it up...
 12640 00000E60 CD21                    	int	21h
 12641                                  	; 14/02/2023
 12642                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 12643 00000E62 FF0E[4C02]              	dec	word [Nest]		; is there another batch file?
 12644 00000E66 75D9                    	jnz	short _ClearBatch	; keep going until no batch file
 12645                                  	
 12646 00000E68 880E[3B02]              	mov	[EchoFlag],cl		;restore echo status
 12647 00000E6C C706[E701]0000          	mov	word [Batch],0		;no batch process in progress
 12648                                  fb_ret:
 12649 00000E72 07                      	pop	es
 12650 00000E73 C3                      	ret
 12651                                  
 12652                                  ;free_batch endp
 12653                                  
 12654                                  ;============================================================================
 12655                                  ; TFOR.ASM, MSDOS 6.0, 1991
 12656                                  ;============================================================================
 12657                                  ; 10/10/2018 - Retro DOS v3.0
 12658                                  
 12659                                  ; All batch proccessing has DS set to segment of resident portion
 12660                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 12661                                  
 12662                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 12663                                  
 12664                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12665                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 12666                                  
 12667                                  ; ---------------------------------------------------------------------------
 12668                                  
 12669                                  	; 15/02/2023
 12670                                  FORTERM:
 12671                                  	; MSDOS 6.0
 12672 00000E74 0E                      	push	cs			;AN037; Get local segment into
 12673 00000E75 1F                      	pop	ds			;AN037;  DS, ES
 12674 00000E76 0E                      	push	cs			;AN037;
 12675 00000E77 07                      	pop	es			;AN037;
 12676                                  
 12677                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12678 00000E78 E89502                  	call	FOROFF
 12679                                  	;mov	ds,[cs:RESSEG]
 12680 00000E7B 268E1E[F39D]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 12681 00000E80 813E[4302]00FF          	cmp	word [SingleCom],0FF00h
 12682 00000E86 750F                    	jne	short BAT_CRLF
 12683 00000E88 833E[4C02]00            	cmp	word [Nest],0		;See if we have nested batch files
 12684 00000E8D 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 12685 00000E8F C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 12686 00000E95 EB12                    	jmp	short NOFORP2
 12687                                  BAT_CRLF:
 12688 00000E97 F606[3B02]01            	test	byte [EchoFlag],1 	; Is echo on?
 12689 00000E9C 740B                    	jz	short NOFORP2		; no - exit
 12690 00000E9E F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12691                                  					; print CRLF if in batch
 12692 00000EA4 7403                    	jz	short NOFORP2
 12693 00000EA6 E8781C                  	call	CRLF2
 12694                                  NOFORP2:
 12695 00000EA9 E958F2                  	jmp	TCOMMAND
 12696                                  
 12697                                  ; ---------------------------------------------------------------------------
 12698                                  
 12699                                  ;------
 12700                                  ;   For-loop processing. For loops are of the form:
 12701                                  ;	    for %<loop-variable> in (<list>) do <command>
 12702                                  ; where <command> may contain references of the form %<variable>, which are
 12703                                  ; later substituted with the items in <list>. The for-loop structure is
 12704                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 12705                                  ; <command> once for each item in <list>. All of the information needed for
 12706                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 12707                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 12708                                  ; a complete copy of the original command-line structure as parsed by
 12709                                  ; 'parseline', loop control variables, and a dma buffer for the
 12710                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 12711                                  ; processing has completed, this chunk of memory is returned to the system.
 12712                                  ;
 12713                                  ;   All of the previously defined variables, in 'datares', used for loop
 12714                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 12715                                  ;
 12716                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 12717                                  ; containing all of the other error messages.
 12718                                  ;
 12719                                  ;   Referencing the allocated for-loop structure is a little tricky.
 12720                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 12721                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 12722                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 12723                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 12724                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 12725                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 12726                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 12727                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 12728                                  ; instead of
 12729                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 12730                                  ; By using 'f', we pretend that we are actually referencing an allocated
 12731                                  ; structure, and the assembler coughs up the code we want. Notice that it
 12732                                  ; doesn't matter whether we put brackets around the location or not -- the
 12733                                  ; assembler is "smart" enough to know that we want an address instead of the
 12734                                  ; contents of that location.
 12735                                  ;
 12736                                  ;   Finally, there now exists the potential to easily implement nested loops.
 12737                                  ; One method would be to have a link field in each for-structure pointing to
 12738                                  ; its parent.  Variable references that couldn't be resolved in the local
 12739                                  ; frame would cause a search of prior frames. For-structures would still be
 12740                                  ; allocated and released in exactly the same fashion. The only limit on the
 12741                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 12742                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 12743                                  ; maintained in the resident data area. This structure would be an array of
 12744                                  ; control-variable names and pointers to for-structure blocks. This would
 12745                                  ; greatly speed up the resolution of non-local variable references. However,
 12746                                  ; since space in the resident is precious, we would have to compromise on a
 12747                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 12748                                  ; allocation and de-allocation would have to be modified slightly to take this
 12749                                  ; new structure into account.
 12750                                  ;
 12751                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 12752                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 12753                                  ; it may be easier to allocate it as part of 'for_segment'.
 12754                                  ;------
 12755                                  		; include fordata.asm
 12756                                  
 12757                                  ; Data structure definitions included by tfor.asm
 12758                                  
 12759                                  struc FOR_INFO
 12760 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 12761 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 12762 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 12763 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 12764 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 12765 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 12766 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 12767 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 12768                                    .size:
 12769                                  endstruc
 12770                                  					; ARG_UNIT.SIZE = 1348 (544h)
 12771                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 12772                                  _$FOR_EXIT:
 12773 00000EAC EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 12774                                  
 12775                                  ; ---------------------------------------------------------------------------
 12776                                  
 12777                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12778                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12779                                  	;	     & Retro DOS v4.2 COMMAND.COM (2024 modification)
 12780                                  FORPROC:
 12781 00000EAE A1[4A02]                	mov	ax,[ForPtr]
 12782 00000EB1 8ED8                    	mov	ds,ax
 12783 00000EB3 8EC0                    	mov	es,ax			; operate in for-info area
 12784                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 12785                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 12786 00000EB5 BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 12787                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 12788 00000EB8 B8001A                  	mov	ax,1A00h
 12789                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12790 00000EBB CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12791                                  			; DS:DX	-> disk	transfer buffer
 12792                                  FOR_BEGIN:
 12793                                  	;;cmp	word [545h],0
 12794                                  	;cmp	word [445h] ; 27/07/2024
 12795 00000EBD 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12796 00000EC2 7404                    	jz	short FOR_BEGIN1
 12797                                  					; non-zero for_expand equals FALSE
 12798                                  	;;inc	word [547h]
 12799                                  	;inc	word [447h] ; 27/07/2024
 12800 00000EC4 FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 12801                                  FOR_BEGIN1:
 12802                                  	;mov	bx,[447h] ; 27/07/2024
 12803 00000EC8 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 12804                                  	;cmp	bx,[449h] ; 27/07/2024
 12805 00000ECC 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 12806 00000ED0 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 12807                                  	;mov	ax,0
 12808 00000ED2 B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0 
 12809 00000ED5 E8C627                  	call	argv_calc		; compute argv[x] address
 12810                                  	;mov	cx,[bx+3]
 12811 00000ED8 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 12812 00000EDB 8B17                    	mov	dx,[bx]
 12813                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12814                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 12815 00000EDD F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 12816 00000EE1 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 12817 00000EE3 8B37                    	mov	si,[bx]
 12818                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 12819                                  
 12820                                  	;mov	al,[cs:LPAREN]
 12821                                  	; 15/02/2023
 12822                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 12823                                  	;mov	al,'('	; mov al,lparen
 12824                                  	;cmp	[si-1],	al		; If the current token is the first
 12825                                  	; 27/07/2024
 12826 00000EE5 807CFF28                	cmp	byte [si-1],'('
 12827 00000EE9 750A                    	jne	short FORSUB		;  one in the list and originally had
 12828 00000EEB 41                      	inc	cx			;  the opening paren as its first char,
 12829                                  					;  the argstartel ptr needs to be
 12830                                  					;  advanced passed it before the prefix
 12831                                  					;  length is computed.
 12832                                  	;mov	al,':'
 12833                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 12834                                  	; 27/07/2024
 12835 00000EEC 807C013A                	cmp	byte [si+1],':'
 12836 00000EF0 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 12837 00000EF2 83C102                  	add	cx,2			;  rest of the prefix as well.
 12838                                  FORSUB:
 12839 00000EF5 29D1                    	sub	cx,dx			; compute length of pathname prefix
 12840                                  	;;cmp	word [545h],0
 12841                                  	;cmp	word [445h],0 ; 27/07/2024
 12842 00000EF7 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12843                                  					; are we still expanding a name?
 12844 00000EFC 7416                    	jz	short FOR_FIND_NEXT
 12845                                  					; if so, get next matching filename
 12846                                  	;test	byte [bx+2],2
 12847 00000EFE F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 12848 00000F02 7505                    	jnz	short FOR_FIND_FIRST
 12849                                  					; should we expand THIS (new) arg?
 12850                                  	;mov	cx,[bx+5]
 12851                                  					; else, just copy all of it directly
 12852 00000F04 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 12853 00000F07 EB1D                    	jmp	short FOR_SMOOSH
 12854                                  
 12855                                  	;nop
 12856                                  	; 15/02/2023
 12857                                  FOR_FIND_FIRST:
 12858 00000F09 51                      	push	cx
 12859 00000F0A 31C9                    	xor	cx,cx
 12860 00000F0C B8004E                  	mov	ax,4E00h
 12861                                  	;mov	ax,Find_First*256 ; 4E00h
 12862 00000F0F CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12863                                  			; CX = search attributes
 12864                                  			; DS:DX	-> ASCIZ filespec
 12865                                  			; (drive,path, and wildcards allowed)
 12866 00000F11 59                      	pop	cx
 12867 00000F12 EB05                    	jmp	short FOR_RESULT
 12868                                  
 12869                                  	;nop
 12870                                  FOR_FIND_NEXT:
 12871 00000F14 B8004F                  	mov	ax,4F00h
 12872                                  	;mov	ax,Find_Next*256 ;4F00h
 12873 00000F17 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 12874                                  			; [DTA]	= data block from
 12875                                  			; last AH = 4Eh/4Fh call
 12876                                  FOR_RESULT:
 12877 00000F19 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 12878 00000F1C 7201                    	jc	short FOR_CHECK
 12879                                  	; 15/02/2023
 12880 00000F1E 40                      	inc	ax ; ax = 0
 12881                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 12882                                  FOR_CHECK:				; record success of findfirst/next
 12883                                  	;;mov	[545h],ax
 12884                                  	;mov	[445h],ax ; 27/07/2024
 12885 00000F1F A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 12886 00000F22 09C0                    	or	ax,ax			; anything out there?
 12887 00000F24 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 12888                                  FOR_SMOOSH:
 12889                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 12890 00000F26 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 12891                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 12892                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12893 00000F28 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 12894 00000F2B F3A4                    	rep	movsb			; arg, some days just the path prefix
 12895                                  					
 12896 00000F2D 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12897                                  					; if we're not expanding, we can
 12898 00000F32 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 12899                                  	; 15/02/2023
 12900                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 12901                                  	; 27/07/2024
 12902                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 12903 00000F34 BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 12904                                  FOR_MORE:
 12905                                  	;cmp	byte [si],0		; tack on matching filename
 12906                                  	;jz	short FOR_MAKE_COM
 12907                                  	;movsb
 12908                                  	;jnz	short FOR_MORE
 12909                                  	; 25/04/2023
 12910 00000F37 AC                      	lodsb
 12911 00000F38 AA                      	stosb
 12912 00000F39 08C0                    	or	al,al
 12913 00000F3B 75FA                    	jnz	short FOR_MORE
 12914                                  FOR_MAKE_COM:
 12915                                  	; 25/04/2023
 12916                                  	;xor	al,al			; tack a null byte onto the end
 12917                                  	;stosb				; of the substitute string
 12918 00000F3D 31C9                    	xor	cx,cx			; character count for command line
 12919 00000F3F F7D1                    	not	cx			; negate it -- take advantage of loopnz
 12920 00000F41 31DB                    	xor	bx,bx			; argpointer
 12921 00000F43 BF[549C]                	mov	di,COMBUF+2
 12922                                  	; 15/02/2023
 12923                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 12924                                  	; 27/07/2024
 12925                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 12926 00000F46 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 12927                                  	;;mov	dh,[64Bh]
 12928                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12929 00000F4A 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 12930                                  					; %<for-var> is replaced by [forbuf]
 12931 00000F4E 0E                      	push	cs			; time to form the <command> string
 12932 00000F4F 07                      	pop	es
 12933                                  	;assume ES:trangroup
 12934                                  	;mov	ax,FOR_INFO.FOR_ARGS
 12935 00000F50 B80000                  	mov	ax,0			; translate offset to pointer
 12936 00000F53 E84827                  	call	argv_calc
 12937                                  	;mov	si,[bx+9]
 12938 00000F56 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 12939                                  					; mov ptr passed beginning space
 12940 00000F59 46                      	inc	si
 12941                                  FOR_MAKE_LOOP:
 12942 00000F5A 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 12943 00000F5C 46                      	inc	si
 12944 00000F5D 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 12945 00000F5F 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 12946 00000F61 3834                    	cmp	[si],dh			; got the right <variable>?
 12947 00000F63 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 12948 00000F65 46                      	inc	si			; skip over <for-variable>
 12949                                  
 12950 00000F66 56                      	push	si
 12951                                  	; 15/02/2023
 12952                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 12953                                  	; 27/07/2024
 12954                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 12955 00000F67 BE4B04                  	mov	si,FOR_INFO.FORBUF
 12956                                  					; substitute the <item> for <variable>
 12957                                  					; to make a final <command> to execute
 12958                                  SLOOP:					
 12959 00000F6A AC                      	lodsb				; grab all those <item> bytes, and
 12960 00000F6B AA                      	stosb				; add 'em to the <command> string,
 12961 00000F6C 08C0                    	or	al,al			; until we run into a null
 12962 00000F6E E0FA                    	loopne	SLOOP
 12963 00000F70 4F                      	dec	di			; adjust length and <command> pointer
 12964 00000F71 41                      	inc	cx			; so we can overwrite the null
 12965 00000F72 5E                      	pop	si
 12966 00000F73 EBE5                    	jmp	short FOR_MAKE_LOOP
 12967                                  					; got back for more <command> bytes
 12968                                  FOR_STOSB:
 12969 00000F75 AA                      	stosb				; take a byte from the <command> arg
 12970 00000F76 49                      	dec	cx			; and put it into the <command> to be
 12971                                  					; executed (and note length, too)
 12972 00000F77 3C0D                    	cmp	al,0Dh
 12973 00000F79 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 12974                                  FOR_MADE_COM:
 12975 00000F7B F6D1                    	not	cl
 12976                                  	;mov	[cs:COMBUF+1],cl
 12977                                  	;mov	ds,[cs:RESSEG]
 12978                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 12979                                  	; MSDOS 5.0 COMMAND.COM
 12980 00000F7D 26880E[539C]            	mov	[es:COMBUF+1],cl
 12981 00000F82 268E1E[F39D]            	mov	ds,[es:RESSEG]
 12982                                  	;assume DS:resgroup
 12983 00000F87 F606[3B02]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 12984 00000F8C 742F                    	jz	short NOECHO3
 12985                                  	;cmp	byte [NullFlag],nullcommand
 12986 00000F8E 803E[5202]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 12987 00000F93 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 12988                                  
 12989 00000F95 E8891B                  	call	CRLF2		  	;G Print out prompt
 12990                                  NO_CRLF_PR:
 12991 00000F98 C606[5202]00            	mov	byte [NullFlag],0 	;G reset no command flag
 12992 00000F9D 0E                      	push	cs
 12993 00000F9E 1F                      	pop	ds
 12994 00000F9F 57                      	push	di
 12995 00000FA0 E84013                  	call	PRINT_PROMPT	  	;G Prompt the user
 12996 00000FA3 5F                      	pop	di
 12997                                  
 12998 00000FA4 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 12999 00000FA9 C706[91A0][549C]        	mov	word [string_ptr_2],COMBUF+2
 13000                                  	; 17/04/2023
 13001 00000FAF BA[9793]                	mov	dx,string_buf_ptr
 13002 00000FB2 E85A45                  	call	std_printf
 13003 00000FB5 26C645FF0D              	mov	byte [es:di-1],0Dh
 13004 00000FBA E933F3                  	jmp	DOCOM		  	; run silent, run deep...
 13005                                  NOECHO3:
 13006 00000FBD C606[5202]00            	mov	byte [NullFlag],0
 13007 00000FC2 0E                      	push	cs
 13008 00000FC3 1F                      	pop	ds
 13009                                  	;jmp	DOCOM1
 13010                                  	; 07/06/2023
 13011                                  	; Retro DOS v4.2 COMMAND.COM
 13012 00000FC4 E92CF3                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 13013                                  
 13014                                  FORNESTERRJ:				; no multi-loop processing... yet!
 13015 00000FC7 E84601                  	call	FOROFF
 13016 00000FCA E92901                  	jmp	FORNESTERR
 13017                                  
 13018                                  ; ---------------------------------------------------------------------------
 13019                                  
 13020                                  FORERRORJ:
 13021 00000FCD E9DDFB                  	jmp	FORERROR
 13022                                  
 13023                                  ; ---------------------------------------------------------------------------
 13024                                  
 13025                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 13026                                  
 13027                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 13028                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 13029                                  
 13030                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13031                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 13032                                  _$FOR:
 13033 00000FD0 8E06[F39D]              	mov	es,[RESSEG]
 13034 00000FD4 26803E[4902]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 13035 00000FDA 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 13036                                  
 13037                                  ; Turn off any pipes in progress.
 13038                                  
 13039 00000FDC 26803E[B602]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 13040 00000FE2 7403                    	jz	short NO_PIPE
 13041 00000FE4 E85622                  	call	PIPEDEL
 13042                                  NO_PIPE:
 13043 00000FE7 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 13044 00000FE9 E8F400                  	call	NEXTARG			; move to next argv[n]
 13045 00000FEC 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 13046 00000FEE 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 13047 00000FF0 75DB                    	jne	short FORERRORJ
 13048 00000FF2 89C5                    	mov	bp,ax			; save forloop variable
 13049 00000FF4 AC                      	lodsb
 13050 00000FF5 08C0                    	or	al,al			; and MUST end immediately...
 13051 00000FF7 75D4                    	jnz	short FORERRORJ
 13052 00000FF9 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 13053 00000FFC 72CF                    	jb	short FORERRORJ
 13054                                  	;and	ax,0DFDFh
 13055 00000FFE 25DFDF                  	and	ax,~2020h		; uppercase the letters
 13056                                  	; 15/02/2023
 13057                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 13058                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 13059                                  	;cmp	ax,in_word	; MSDOS 5.0
 13060 00001001 3D494E                  	cmp	ax,'IN'
 13061 00001004 75C7                    	jnz	short FORERRORJ
 13062 00001006 AC                      	lodsb
 13063                                  
 13064                                  	; 15/02/2023
 13065                                  	; MSDOS 3.3
 13066                                  	;or	al,al			; it, too, must end right away
 13067                                  	;jz	short CHECKLPAREN
 13068                                  	;cmp	al,[LPAREN]
 13069                                  	;jnz	short FORERRORJ
 13070                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 13071                                  	;add	word [bx],2
 13072                                  	;;add	word [bx+9],2
 13073                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 13074                                  	;;sub	word [bx+5],2
 13075                                  	;sub	word [bx+ARGV_ELE.arglen],2
 13076                                  	;mov	ax,[si-1]
 13077                                  	;jmp	short LPCHECK
 13078                                  
 13079                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13080                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 13081                                  
 13082                                  	; MSDOS 6.0
 13083                                  ; Compaq bug fix -- exit from this loop on error
 13084                                  
 13085 00001007 08C0                    	or	al,al
 13086 00001009 75C2                    	jne	short FORERRORJ		; jump on error
 13087                                  
 13088                                  ;	je	short CHECKLPAREN
 13089                                  ;
 13090                                  ; Not null. Perhaps there are no spaces between this and the (:
 13091                                  ;   FOR %i in(foo bar...
 13092                                  ; Check for the Lparen here
 13093                                  ;
 13094                                  ;;	cmp	al,lparen
 13095                                  ;;	jnz	short FORERRORJ
 13096                                  ;
 13097                                  ; The token was in(... We strip off the "in" part to simulate a separator
 13098                                  ; being there in the first place.
 13099                                  ;
 13100                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 13101                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 13102                                  ;;						; advance original string
 13103                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 13104                                  ;
 13105                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 13106                                  ; current value.
 13107                                  ;
 13108                                  ;;	mov	ax,[si-1]		; get lparen and next char
 13109                                  ;;	jmp	short LPCHECK
 13110                                  ;
 13111                                  ; end of Compaq bug fix
 13112                                  
 13113                                  ; ---------------------------------------------------------------------------
 13114                                  
 13115                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13116                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 13117                                  
 13118                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13119                                  CHECKLPAREN:
 13120 0000100B E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 13121 0000100E 72BD                    	jc	short FORERRORJ
 13122                                  LPCHECK:
 13123                                  	; 15/02/2023
 13124                                  	; MSDOS 5.0 (% MSDOS 6.0)
 13125                                  	;;cmp	al,[LPAREN]
 13126                                  	;cmp	al,lparen
 13127 00001010 3C28                    	cmp	al,'('
 13128 00001012 75B9                    	jne	short FORERRORJ
 13129 00001014 80FC00                  	cmp	ah,0
 13130 00001017 7410                    	je	short FOR_PAREN_TOKEN
 13131                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 13132                                  	;cmp	ah,rparen
 13133 00001019 80FC29                  	cmp	ah,')'
 13134 0000101C 7503                    	jne	short FOR_LIST_NOT_EMPTY
 13135 0000101E E953FE                  	jmp	FORTERM
 13136                                  FOR_LIST_NOT_EMPTY:
 13137                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 13138 00001021 FF07                    	inc	word [bx]		; Advance ptr past "("
 13139                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 13140 00001023 FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 13141 00001026 46                      	inc	si			; Inc si so check for ")" works
 13142 00001027 EB0D                    	jmp	short FOR_LIST
 13143                                  
 13144                                  	;nop
 13145                                  FOR_PAREN_TOKEN:
 13146 00001029 E8B400                  	call	NEXTARG			; what have we in our <list>?
 13147 0000102C 729F                    	jc	short FORERRORJ
 13148                                  	; 15/02/2023
 13149                                  	;;;cmp	ax,[RPAREN+1]
 13150                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 13151                                  	;cmp	ax,nullrparen
 13152 0000102E 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 13153 00001031 7503                    	jne	short FOR_LIST
 13154 00001033 E93EFE                  	jmp	FORTERM
 13155                                  
 13156                                  ;FORERORJJ:
 13157                                  	;jmp	FORERROR
 13158                                  
 13159                                  FOR_LIST:				; skip over rest of <list>
 13160 00001036 89D1                    	mov	cx,dx			; first arg of <list>
 13161                                  
 13162                                  SKIP_LIST:
 13163                                  	;add	si,[bx+5]
 13164 00001038 037705                  	add	si,[bx+ARGV_ELE.arglen]
 13165 0000103B 83EE03                  	sub	si,3			; si = ptr to last char of token
 13166                                  	; 15/02/2023
 13167                                  	;;mov	al,[RPAREN]
 13168                                  	;mov	al,rparen
 13169 0000103E B029                    	mov	al,')'
 13170 00001040 3804                    	cmp	[si],al			; Is this the last element in <list>
 13171 00001042 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 13172 00001044 E89900                  	call	NEXTARG			; No, get next arg <list>
 13173                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 13174                                  	;jmp	short SKIP_LIST
 13175                                  	; 15/02/2023
 13176 00001047 73EF                    	jnc	short SKIP_LIST
 13177                                  
 13178                                  	; 15/02/2023
 13179                                  FORERORJJ:
 13180 00001049 E961FB                  	jmp	FORERROR
 13181                                  
 13182                                  FOR_END_LIST:
 13183 0000104C 89D7                    	mov	di,dx			; record position of last arg in <list>
 13184 0000104E C60400                  	mov	byte [si],0		; Zap the rparen
 13185                                  	; 15/02/2023
 13186                                  	;;;cmp	ax,[RPAREN+1]
 13187                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 13188                                  	;cmp	ax,nullparen
 13189 00001051 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 13190 00001054 7401                    	je	short FOR_DO		; Yes, continue
 13191 00001056 47                      	inc	di			; No, inc position of last arg
 13192                                  FOR_DO:
 13193 00001057 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 13194 0000105A 72ED                    	jc	short FORERORJJ
 13195                                  	;and	ax,0DFDFh
 13196 0000105C 25DFDF                  	and	ax,~2020h		; uppercase the letters
 13197                                  	; 15/02/2023
 13198                                  	;;cmp	ax,[DO_WORD]
 13199                                  	;cmp	ax,do_word ; 4F44h
 13200 0000105F 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 13201 00001062 75E5                    	jne	short FORERORJJ
 13202 00001064 AC                      	lodsb
 13203 00001065 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 13204 00001067 75E0                    	jnz	short FORERORJJ
 13205                                  		
 13206 00001069 E87400                  	call	NEXTARG			; on to the beginning of <command>
 13207 0000106C 72DB                    	jc	short FORERORJJ		; null <command> not legal
 13208                                  
 13209 0000106E 50                      	push	ax
 13210 0000106F 53                      	push	bx
 13211 00001070 51                      	push	cx
 13212 00001071 52                      	push	dx			; preserve registers against disaster
 13213 00001072 57                      	push	di
 13214 00001073 56                      	push	si
 13215 00001074 55                      	push	bp
 13216 00001075 E85FF7                  	call	FREE_TPA		; need to make free memory, first
 13217 00001078 E89500                  	call	FOROFF
 13218                                  	;mov	bx,264
 13219 0000107B BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 13220 0000107E E84229                  	call	SAVE_ARGS		; extra bytes needed for for-info
 13221 00001081 9C                      	pushf
 13222 00001082 26A3[4A02]              	mov	[es:ForPtr],ax
 13223 00001086 E85EF7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 13224 00001089 9D                      	popf
 13225 0000108A 5D                      	pop	bp
 13226 0000108B 5E                      	pop	si
 13227 0000108C 5F                      	pop	di
 13228 0000108D 5A                      	pop	dx
 13229 0000108E 59                      	pop	cx
 13230 0000108F 5B                      	pop	bx
 13231 00001090 58                      	pop	ax
 13232 00001091 723C                    	jc	short FOR_ALLOC_ERR
 13233                                  
 13234 00001093 06                      	push	es			; save resgroup seg...
 13235 00001094 26FF36[4A02]            	push	word [es:ForPtr]
 13236 00001099 07                      	pop	es
 13237                                  	;assume es:for_segment
 13238 0000109A 49                      	dec	cx			; forproc wants min pointing before
 13239 0000109B 4F                      	dec	di			; first arg, max right at last one
 13240                                  	; 15/02/2023
 13241                                  	;;mov	[547h],cx
 13242                                  	; 27/07/2024
 13243                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 13244 0000109C 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 13245                                  	;;mov	[549h],di
 13246                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13247 000010A1 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 13248                                  	;;mov	[544h],dl
 13249                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13250 000010A6 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 13251                                  	;;mov	word [545h],0FFFFh ; -1
 13252                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13253 000010AB 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 13254                                  					; non-zero means FALSE
 13255 000010B2 89E8                    	mov	ax,bp
 13256                                  	;;mov	[64Bh],ah
 13257                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 13258 000010B4 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 13259 000010B9 07                      	pop	es
 13260                                  	;assume es:resgroup
 13261 000010BA 26FE06[4902]            	inc	byte [es:ForFlag]
 13262 000010BF 26833E[4302]FF          	cmp	word [es:SingleCom],-1
 13263 000010C5 7507                    	jne	short FOR_RET
 13264 000010C7 26C706[4302]00FF        	mov	word [es:SingleCom],0FF00h
 13265                                  FOR_RET:
 13266 000010CE C3                      	retn
 13267                                  
 13268                                  FOR_ALLOC_ERR:
 13269                                  	; 15/02/2023
 13270                                  	; MSDOS 3.3
 13271                                  	;mov	dx,INSFMEMMESPTR
 13272                                  	;jmp	CERROR
 13273                                  
 13274                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13275                                  	; MSDOS 6.0
 13276                                  	;mov	byte [msg_disp_class],1
 13277 000010CF C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 13278                                  					;AN000; set up extended error msg class
 13279                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 13280 000010D4 BA[D091]                	mov	dx,extend_buf_ptr
 13281                                  					;AC000; get extended message pointer
 13282                                  	;mov	word [extend_buf_ptr],8
 13283 000010D7 C706[D091]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 13284                                  					;AN000; get message number in control block
 13285 000010DD E9C21D                  	jmp	cerror
 13286                                  
 13287                                  
 13288                                  ; =============== S U B	R O U T	I N E =======================================
 13289                                  
 13290                                  NEXTARG:
 13291 000010E0 42                      	inc	dx			; next argv[n]
 13292                                  	;cmp	dx,[ARG_ARGVCNT]
 13293 000010E1 3B16[01A5]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 13294                                  					; make sure we don't run off end
 13295 000010E5 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 13296 000010E7 89D3                    	mov	bx,dx
 13297                                  	;mov	ax,ARG_ARGV
 13298                                  	;mov	ax,ARG+ARG_UNIT.argv
 13299 000010E9 B8[41A2]                	mov	ax,ARG
 13300 000010EC E8AF25                  	call	argv_calc		; convert array index to pointer
 13301 000010EF 8B37                    	mov	si,[bx]			; load pointer to argstring
 13302                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13303 000010F1 AD                      	lodsw				; and load first two chars
 13304 000010F2 F8                      	clc
 13305 000010F3 C3                      	retn
 13306                                  NEXTARG_ERR:
 13307 000010F4 F9                      	stc
 13308 000010F5 C3                      	retn
 13309                                  
 13310                                  ; ---------------------------------------------------------------------------
 13311                                  
 13312                                  FORNESTERR:
 13313 000010F6 1E                      	push	ds
 13314 000010F7 8E1E[F39D]              	mov	ds,[RESSEG]
 13315                                  	;ASSUME DS:RESGROUP
 13316 000010FB BA[2E93]                	mov	dx,FORNESTMES_PTR
 13317 000010FE 813E[4302]00FF          	cmp	word [SingleCom],0FF00h
 13318 00001104 7506                    	jne	short NOFORP3
 13319 00001106 C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 13320                                  NOFORP3:
 13321 0000110C 1F                      	pop	ds
 13322 0000110D E9921D                  	jmp	cerror
 13323                                  
 13324                                  ; =============== S U B	R O U T	I N E =======================================
 13325                                  
 13326                                  ; General routine called to free the for segment. We also clear the forflag
 13327                                  ; too. Change no registers.
 13328                                  
 13329                                  FOROFF:
 13330 00001110 50                      	push	ax
 13331 00001111 06                      	push	es
 13332 00001112 2E8E06[F39D]            	mov	es,[cs:RESSEG]
 13333 00001117 26A1[4A02]              	mov	ax,[es:ForPtr]
 13334 0000111B 09C0                    	or	ax,ax
 13335 0000111D 7408                    	jz	short FREEDONE
 13336 0000111F 06                      	push	es
 13337 00001120 8EC0                    	mov	es,ax
 13338                                  	; 15/02/2023
 13339 00001122 B449                    	mov	ah,49h
 13340                                  	;mov	ah,DEALLOC ; 49h
 13341 00001124 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 13342                                  			; ES = segment address of area to be freed
 13343 00001126 07                      	pop	es
 13344                                  FREEDONE:
 13345 00001127 26C706[4A02]0000        	mov	word [es:ForPtr],0
 13346 0000112E 26C606[4902]00          	mov	byte [es:ForFlag],0
 13347 00001134 07                      	pop	es
 13348 00001135 58                      	pop	ax
 13349 00001136 C3                      	retn
 13350                                  
 13351                                  ;============================================================================
 13352                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 13353                                  ;============================================================================
 13354                                  ; 09/10/2018 - Retro DOS v3.0
 13355                                  
 13356                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 13357                                  
 13358                                  ; ---------------------------------------------------------------------------
 13359                                  
 13360                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13361                                  
 13362                                  %if 0
 13363                                  
 13364                                  ; The DIR command displays the contents of a directory.
 13365                                  ;
 13366                                  ; ****************************************************************
 13367                                  ; *
 13368                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 13369                                  ; *
 13370                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 13371                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 13372                                  ; *		 If an error occurs issue and error message and
 13373                                  ; *		 transfer control to CERROR.
 13374                                  ; *
 13375                                  ; * INPUT:	 command line at offset 81H
 13376                                  ; *
 13377                                  ; * OUTPUT:	 none
 13378                                  ; *
 13379                                  ; ****************************************************************
 13380                                  
 13381                                  CATALOG:
 13382                                  	; MSDOS 3.3
 13383                                  
 13384                                  	;mov	ax,ARG_ARGV
 13385                                  	;mov	ax,ARG+ARG_UNIT.argv
 13386                                  	mov	ax,ARG
 13387                                  	mov	dx,0FFFFh
 13388                                  	xor	cx,cx
 13389                                  	xor	si,si
 13390                                  DIR1:
 13391                                  	;cmp	cx,[ARG_ARGVCNT]
 13392                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 13393                                  	jnb	short DIR6 ; No more arguments
 13394                                  	mov	bx,cx
 13395                                  	call	ARGV_CALC
 13396                                  	;or	si,[bx+7]
 13397                                  	or	si,[bx+ARGV_ELE.argsw_word]
 13398                                  	test	si,7FFCh  ; test si,~8003
 13399                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 13400                                  	;test	byte [bx+2],1
 13401                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 13402                                  	jz	short DIR3
 13403                                  	jmp	short DIR5
 13404                                  DIR2:
 13405                                  	mov	dx,BADPARMPTR
 13406                                  	jmp	CERROR
 13407                                  DIR3:
 13408                                  	or	cx,cx
 13409                                  	jnz	short DIR4	
 13410                                  	;cmp	word [bx+5],3
 13411                                  	cmp	word [bx+ARGV_ELE.arglen],3
 13412                                  	jz	short DIR5
 13413                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 13414                                  	add	word [bx],3
 13415                                  	;add	word [bx+9],3
 13416                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 13417                                  	;add	word [bx+3],3
 13418                                  	add	word [bx+ARGV_ELE.argstartel],3
 13419                                  	;sub	word [bx+5],3
 13420                                  	sub	word [bx+ARGV_ELE.arglen],3
 13421                                  DIR4:
 13422                                  	cmp	dx,0FFFFh
 13423                                  	jnz	short DIR2
 13424                                  	mov	dx,bx
 13425                                  DIR5:
 13426                                  	inc	cx
 13427                                  	jmp	short DIR1
 13428                                  DIR6:
 13429                                  	mov	[COMSW],si
 13430                                  	push	dx
 13431                                  	xor	al,al
 13432                                  	cmp	dx,0FFFFh
 13433                                  	jz	short DIR7
 13434                                  	mov	bx,dx
 13435                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 13436                                  	mov	di,[bx]
 13437                                  	cmp	byte [di+1],':'
 13438                                  	jnz	short DIR7
 13439                                  	mov	al,[di]
 13440                                  	or	al,20h		; Lowercase drive name	
 13441                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 13442                                  DIR7:
 13443                                  	;mov	[5CH],al
 13444                                  	mov	[FCB],al
 13445                                  	call	OKVOLARG
 13446                                  	mov	al,'?'		; *.* is default file spec.
 13447                                  	;mov	di,5Dh
 13448                                  	mov	di,FCB+1
 13449                                  	mov	cx,11
 13450                                  	rep stosb
 13451                                  
 13452                                  ; Begin by processing any switches that may have been specified.
 13453                                  ; BITS will contain any information about switches that was
 13454                                  ; found when the command line was parsed.
 13455                                  
 13456                                  	mov	ax,[COMSW]	; Get switches from command
 13457                                  	mov	[_BITS],ax	; initialize switches
 13458                                  	mov	word [COMSW],0	; initialize flags
 13459                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 13460                                  	;test	al,1
 13461                                  	test	al,SWITCHW	; /W ?
 13462                                  	;mov	al,1
 13463                                  	mov	al,NORMPERLIN
 13464                                  	jz	short DIR8
 13465                                  	;mov	al,5
 13466                                  	mov	al,WIDEPERLIN
 13467                                  DIR8:
 13468                                  	mov	[LINLEN],al	; Set number of entries per line
 13469                                  	mov	[LINCNT],al
 13470                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 13471                                  	mov	dx,DIRBUF
 13472                                  	mov	ah,Set_DMA ; 1Ah
 13473                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13474                                  			; DS:DX	-> disk	transfer buffer
 13475                                  	;mov	dl,[5Ch]
 13476                                  	mov	dl,[FCB]
 13477                                  	call	SAVUDIR
 13478                                  	pop	bx
 13479                                  	cmp	bx,0FFFFh
 13480                                  	jz	short DIR9
 13481                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13482                                  	mov	dx,[bx]
 13483                                  
 13484                                  ; The user may have specified a device. Search for the path and see if the
 13485                                  ; attributes indicate a device.
 13486                                  
 13487                                  	mov	ah,Find_First ; 4Eh
 13488                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13489                                  			; CX = search attributes
 13490                                  			; DS:DX	-> ASCIZ filespec
 13491                                  			; (drive,path, and wildcards allowed)
 13492                                  	jc	short DIR10
 13493                                  			; Check device atrribute..
 13494                                  	;test	byte [DIRBUF_ATTRIB2],40h
 13495                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 13496                                  	; 14/10/2018
 13497                                  	;test	byte [DIRBUF+21],40h
 13498                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 13499                                  	jz	short DIR10	; no, go do normal operation
 13500                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 13501                                  DIR9:
 13502                                  	jmp	short DOHEADER
 13503                                  DIR10:
 13504                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 13505                                  	mov	dx,[bx]
 13506                                  	mov	ah,CHDir ; 3Bh
 13507                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13508                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13509                                  	jnc	short DOHEADER
 13510                                  	;mov	si,[bx+3]
 13511                                  	mov	si,[bx+ARGV_ELE.argstartel]
 13512                                  	cmp	dx,si
 13513                                  	jz	short DIR_NO_DRIVE
 13514                                  	xor	cl,cl
 13515                                  	xchg	cl,[si]
 13516                                  	mov	ah,CHDir ; 3Bh
 13517                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13518                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13519                                  	xchg	cl,[si]
 13520                                  	jnc	short DIR_NO_DRIVE
 13521                                  	mov	al,[si-1]
 13522                                  	call	PATHCHRCMP
 13523                                  	jnz	short DIR11
 13524                                  	mov	al,[si-2]
 13525                                  	call	PATHCHRCMP
 13526                                  	jz	short DIR12
 13527                                  	xchg	cl,[si-1]
 13528                                  	mov	ah,CHDir ; 3Bh
 13529                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13530                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13531                                  	xchg	cl,[si-1]
 13532                                  	jnc	short DIR_NO_DRIVE
 13533                                  DIR11:
 13534                                  	mov	ch,':'
 13535                                  	cmp	ch,[si-1]
 13536                                  	jnz	short DIR12
 13537                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 13538                                  	mov	cx,[bx]
 13539                                  	xchg	cx,si
 13540                                  	sub	cx,si
 13541                                  	cmp	cx,2
 13542                                  	jz	short DIR_NO_DRIVE
 13543                                  DIR12:
 13544                                  	mov	dx,BADCDPTR
 13545                                  	;test	byte [bx+2],4
 13546                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13547                                  	jnz	short DIRERROR
 13548                                  DIRNF:
 13549                                  	mov	dx,FNOTFOUNDPTR
 13550                                  DIRERROR:
 13551                                  	jmp	CERROR
 13552                                  DIR_NO_DRIVE:
 13553                                  	cmp	word [si],'..'
 13554                                  	jnz	short DOREALPARSE
 13555                                  	cmp	byte [si+2],0
 13556                                  	jnz	short DOREALPARSE
 13557                                  	inc	word [COMSW]
 13558                                  	jmp	short DOHEADER
 13559                                  DOREALPARSE:
 13560                                  	mov	di,FCB ; 5Ch	
 13561                                  	;mov	ax,290Eh
 13562                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 13563                                  	int	21h	; DOS -	PARSE FILENAME
 13564                                  			; DS:SI	-> string to parse
 13565                                  			; ES:DI	-> buffer to fill with unopened	FCB
 13566                                  			; AL = bit mask	to control parsing
 13567                                  	cmp	byte [si],0
 13568                                  	jz	short DOHEADER
 13569                                  	dec	word [COMSW]
 13570                                  DOHEADER:
 13571                                  		
 13572                                  ; Display the header
 13573                                  
 13574                                  	push	bx
 13575                                  	call	BUILD_DIR_STRING
 13576                                  	mov	dx,DIRBUF
 13577                                  	mov	[VOL_DIR],dx
 13578                                  	mov	dx,DIRHEADPTR
 13579                                  	call	PRINTF_CRLF
 13580                                  	pop	bx
 13581                                  	cmp	bx,0FFFFh
 13582                                  	jz	short DOSEARCH
 13583                                  
 13584                                  ; If there were chars left after parse or device, then invalid file name
 13585                                  
 13586                                  	cmp	word [COMSW],0
 13587                                  	jz	short DOSEARCH	; nothing left; good parse
 13588                                  	jl	short DIRNFFIX	; not .. => error file not found
 13589                                  	call	RESTUDIR
 13590                                  	mov	dx,BADCDPTR
 13591                                  	jmp	CERROR		; was .. => error directory not found
 13592                                  DIRNFFIX:
 13593                                  	call	RESTUDIR
 13594                                  	jmp	short DIRNF
 13595                                  
 13596                                  ; We are assured that everything is correct. Let's go and search. Use
 13597                                  ; attributes that will include finding directories. Perform the first search
 13598                                  ; and reset our directory afterward.
 13599                                  
 13600                                  DOSEARCH:
 13601                                  	;mov	byte [55h],0FFh
 13602                                  	mov	byte [FCB-7],0FFh
 13603                                  	;mov	byte [5Bh],10h
 13604                                  	mov	byte [FCB-1],10h
 13605                                  
 13606                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 13607                                  ; the directory information as an extended FCB. We must bias all fetches into
 13608                                  ; DIRBUF by 8 (Extended FCB part + drive)
 13609                                  
 13610                                  	mov	ah,Dir_Search_First ; 11h
 13611                                  	mov	dx,FCB-7 ; 55h
 13612                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 13613                                  			; DS:DX	-> FCB
 13614                                  
 13615                                  ; Restore the user's directory. We preserve, though, the return from the
 13616                                  ; previous system call for later checking.
 13617                                  
 13618                                  FOUND_FIRST_FILE:
 13619                                  	push	ax		; save return state
 13620                                  	call	RESTUDIR	; restore user's dir	
 13621                                  	pop	ax		; get return state back
 13622                                  
 13623                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 13624                                  ; no more.
 13625                                  
 13626                                  DIRSTART:
 13627                                  	inc	al		; 0FFh = file not found
 13628                                  	jnz	short DISPLAY	; Either an error or we are finished
 13629                                  	jmp	CHKCNT
 13630                                  DISPLAY:
 13631                                  	inc	word [FILECNT]	; Keep track of how many we find
 13632                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 13633                                  	;call	SHONAME
 13634                                  	call	DISPLAYNAME
 13635                                  	;test	byte [_BITS],1
 13636                                  	test	byte [_BITS],SWITCHW ; W switch set?
 13637                                  	jz	short DIRTEST	; If so, no size, date, or time
 13638                                  	jmp	NEXENT
 13639                                  DIRTEST:
 13640                                  	;test	byte [DIRBUF_ATTRIB1],10h
 13641                                  	; 14/10/2018
 13642                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 13643                                  	;test	byte [DIRBUF+19],10h
 13644                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 13645                                  	jz	short FILEENT
 13646                                  	mov	dx,DMESPTR
 13647                                  	call	STD_PRINTF
 13648                                  	jmp	short NOFSIZ
 13649                                  FILEENT:
 13650                                  	;mov	dx,[DIRBUF_FSIZ_L]
 13651                                  	;mov	dx,[DIRBUF+36]
 13652                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 13653                                  	mov	[FILESIZE_L],dx
 13654                                  	;mov	dx,[DIRBUF_FSIZ_H]
 13655                                  	;mov	dx,[DIRBUF+38]
 13656                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 13657                                  	mov	[FILESIZE_H],dx
 13658                                  	mov	dx,FSIZEMESPTR
 13659                                  	call	STD_PRINTF	; Print size of file
 13660                                  NOFSIZ:
 13661                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 13662                                  	;mov	ax,[DIRBUF+32]
 13663                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 13664                                  	or	ax,ax
 13665                                  	jz	short NEXENT	; Skip if no date
 13666                                  	mov	di,CHARBUF
 13667                                  	push	ax
 13668                                  	mov	ax,'  '
 13669                                  	stosw
 13670                                  	pop	ax
 13671                                  	mov	bx,ax
 13672                                  	and	ax,1Fh		; Get day
 13673                                  	mov	dl,al
 13674                                  	mov	ax,bx
 13675                                  	mov	cl,5
 13676                                  	shr	ax,cl		; Align month
 13677                                  	and	al,0Fh		; Get month
 13678                                  	mov	dh,al
 13679                                  	mov	cl,bh
 13680                                  	shr	cl,1		; Align year
 13681                                  	xor	ch,ch
 13682                                  	add	cx,80		; Relative 1980
 13683                                  	cmp	cl,100
 13684                                  	jb	short MILLENIUM
 13685                                  	sub	cl,100
 13686                                  MILLENIUM:
 13687                                  	call	DATE_CXDX
 13688                                  	;mov	cx,[DIRBUF_FTIME]
 13689                                  	;mov	cx,[DIRBUF+30]
 13690                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 13691                                  	jcxz	PRBUF		; Time field present?
 13692                                  	mov	ax,2020h
 13693                                  	stosw
 13694                                  	shr	cx,1
 13695                                  	shr	cx,1
 13696                                  	shr	cx,1
 13697                                  	shr	cl,1
 13698                                  	shr	cl,1		; Hours in CH, minutes in CL
 13699                                  	mov	bl,[TIME_24]
 13700                                  	or	bl,80h		; Tell P_TIME called from DIR
 13701                                  	call	P_TIME		; Don't care about DX, never used with DIR
 13702                                  PRBUF:
 13703                                  	xor	ax,ax
 13704                                  	stosb
 13705                                  	mov	dx,CHARBUF
 13706                                  	mov	[STRING_PTR_2],dx
 13707                                  	mov	dx,STRINGBUF2PTR
 13708                                  	call	STD_PRINTF
 13709                                  NEXENT:
 13710                                  	dec	byte [LINCNT]
 13711                                  	jnz	short SAMLIN
 13712                                  NEXLIN:
 13713                                  	mov	al,[LINLEN]
 13714                                  	mov	[LINCNT],al
 13715                                  	call	CRLF2
 13716                                  	dec	byte [LINPERPAG]
 13717                                  	jnz	short SCROLL
 13718                                  	;test	byte [_BITS],2
 13719                                  	test	byte [_BITS],SWITCHP ; P switch present?
 13720                                  	jz	short SCROLL	; If not, just continue
 13721                                  	mov	byte [LINPERPAG],23
 13722                                  	call	PAUSE
 13723                                  	jmp	short SCROLL
 13724                                  SAMLIN:
 13725                                  	mov	dx,TABPTR	; Output a tab
 13726                                  	call	STD_PRINTF
 13727                                  SCROLL:
 13728                                  	mov	ah,Dir_Search_Next ; 12h
 13729                                  	;mov	dx,55h
 13730                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 13731                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 13732                                  			; DS:DX	-> FCB
 13733                                  			; Return: AL = status
 13734                                  	jmp	DIRSTART
 13735                                  CHKCNT:
 13736                                  	test	word [FILECNT],0FFFFh ; -1
 13737                                  	jnz	short TRAILER
 13738                                  	jmp	DIRNF
 13739                                  TRAILER:
 13740                                  	mov	al,[LINLEN]
 13741                                  	cmp	al,[LINCNT]
 13742                                  	jz	short MMESSAGE
 13743                                  	call	CRLF2
 13744                                  MMESSAGE:
 13745                                  	mov	dx,DIRMESPTR
 13746                                  	mov	si,[FILECNT]
 13747                                  	mov	[DIR_NUM],si
 13748                                  	call	STD_PRINTF
 13749                                  DTFREE:
 13750                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 13751                                  	;mov	dl,[5Ch]
 13752                                  	mov	dl,[FCB]
 13753                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 13754                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 13755                                  	cmp	ax,-1
 13756                                  	jnz	short DTFREE1
 13757                                  DTRET:
 13758                                  	retn
 13759                                  DTFREE1:
 13760                                  	mul	cx
 13761                                  	mul	bx
 13762                                  	mov	[BYTES_FREE],ax
 13763                                  	mov	[BYTES_FREE+2],dx
 13764                                  	mov	dx,BYTEMESPTR
 13765                                  	jmp	STD_PRINTF
 13766                                  
 13767                                  ; =============== S U B	R O U T	I N E =======================================
 13768                                  
 13769                                  SHONAME:
 13770                                  DISPLAYNAME:
 13771                                  	; MSDOS 3.3
 13772                                  	mov	di,CHARBUF
 13773                                  	mov	cx,8
 13774                                  	rep	movsb
 13775                                  	mov	al,' '
 13776                                  	stosb
 13777                                  	mov	cx,3
 13778                                  	rep	movsb
 13779                                  	xor	ax,ax
 13780                                  	stosb
 13781                                  	push	dx
 13782                                  	mov	dx,CHARBUF
 13783                                  	mov	[STRING_PTR_2],dx
 13784                                  	mov	dx,STRINGBUF2PTR
 13785                                  	call	STD_PRINTF
 13786                                  	pop	dx
 13787                                  	retn
 13788                                  
 13789                                  %endif
 13790                                  
 13791                                  ;============================================================================
 13792                                  ; DIR.ASM, MSDOS 6.0, 1991
 13793                                  ;============================================================================
 13794                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13795                                  
 13796                                  	; MSDOS 6.0
 13797                                  %if 0
 13798                                  
 13799                                  ;***	DIR.ASM - DIR internal command
 13800                                  
 13801                                  comment	% =================================================================
 13802                                  
 13803                                  This module replaces TCMD1A.ASM.  The old module was titled 
 13804                                  "PART4 COMMAND Transient routines".
 13805                                  
 13806                                  From residual documentation, I surmise that TCMD.ASM originally
 13807                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 13808                                  VER.  The file seems to have been successively split:
 13809                                  
 13810                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 13811                                  
 13812                                  TCMD1A.ASM contained only the DIR command.
 13813                                  
 13814                                  Usage:
 13815                                  ------
 13816                                  
 13817                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 13818                                  
 13819                                  DIR /?
 13820                                  
 13821                                  
 13822                                  <filespec> may include any or none of:  drive; directory path;
 13823                                             wildcarded filename.  If drive or directory path are
 13824                                  	   omitted, the current defaults are used.  If the
 13825                                  	   file name or extension is omitted, wildcards are
 13826                                  	   assumed.
 13827                                  
 13828                                  /w	Wide listing format.  Files are displayed in compressed
 13829                                  	'name.ext' format.  Subdirectory files are enclosed in
 13830                                  	brackets, '[dirname]'.
 13831                                  
 13832                                  /p	Paged, or prompted listing.  A screenful is displayed
 13833                                  	at a time.  The name of the directory being listed appears
 13834                                  	at the top of each page.
 13835                                  
 13836                                  	Bugbug:  pages nead to be uniform length..?
 13837                                  
 13838                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 13839                                  	listed in compressed 'name.ext' format, one per line,
 13840                                  	without additional information.  Good for making batch
 13841                                  	files or for piping.  When used with /s, complete
 13842                                  	pathnames are listed.
 13843                                  
 13844                                  /s	Descend subdirectory tree.  Performs command on current
 13845                                  	or specified directory, then for each subdirectory below
 13846                                  	that directory.  Directory header and footer is displayed
 13847                                  	for each directory where matching files are found, unless
 13848                                  	used with /b.  /b suppresses headers and footers.
 13849                                  
 13850                                  	Tree is explored depth first, alphabetically within the
 13851                                  	same level.
 13852                                  
 13853                                  	Bugbug:  hidden directories aren't searched.
 13854                                  
 13855                                  /l	Display file names, extensions and paths in lowercase.	;M010
 13856                                  
 13857                                  /c	Display file compression ratio, if the file is on a MagicDrv
 13858                                  	compressed volume.
 13859                                  
 13860                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 13861                                  	extension).  A sort order may be specified after /o.  Any of
 13862                                  	the following characters may be used: nedsgc (name, extension,
 13863                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 13864                                  	a '-' before any letter causes a downward sort on that field.
 13865                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 13866                                  	then within each extension sort by date and time in reverse
 13867                                  	chronological order.
 13868                                  
 13869                                  /a	Attribute selection.  Without /a, hidden and system files
 13870                                  	are suppressed from the listing.  With /a alone, all files
 13871                                  	are listed.  An attribute list may follow /a, consisting of
 13872                                  	any of the following characters:  hsdar (hidden, system,
 13873                                  	directory, archive, read-only).  A '-' before any letter
 13874                                  	means 'not' that attribute.  E.g., /ar-d means files that
 13875                                  	are marked read-only and are not directory files.  Note
 13876                                  	that hidden or system files may be included in the listing.
 13877                                  	They are suppressed without /a but are treated like any other
 13878                                  	attribute with /a.
 13879                                  
 13880                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 13881                                  
 13882                                  /h has been removed.					;M008
 13883                                  
 13884                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 13885                                  	DIR command line.  Any command line options may be specified
 13886                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 13887                                  	A filespec may be specified in DIRCMD and will be used unless
 13888                                  	a filespec is specified on the command line.  Any switch
 13889                                  	specified in DIRCMD may be overridden on the command line.
 13890                                  	If the original DIR default action is desired for a particular
 13891                                  	switch, the switch letter may be preceded by a '-' on the
 13892                                  	command line.  E.g.,
 13893                                  
 13894                                  	  /-w	use long listing format
 13895                                  	  /-p	don't page the listing
 13896                                  	  /-b	don't use bare format
 13897                                  	  /-s	don't descend subdirectory tree
 13898                                  	  /-o	display files in disk order
 13899                                  	  /-a	suppress hidden and system files
 13900                                  
 13901                                  Notes:
 13902                                  ------
 13903                                  
 13904                                  For sorted listings, file entries are loaded into the TPA buffer, which
 13905                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 13906                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 13907                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 13908                                  a flag byte which is made zero when the entry is loaded, and made one
 13909                                  when the entry is used.
 13910                                  
 13911                                  Revision History
 13912                                  ================
 13913                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 13914                                  				in the absence of ANSI.SYS
 13915                                  
 13916                                  M007	sa	8/1/90		Allow /p/b combination
 13917                                  
 13918                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 13919                                  				to internally handle /? message.
 13920                                  
 13921                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 13922                                  
 13923                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 13924                                  				first FCB with the drive number when the drive
 13925                                  				letter in the command line is preceded by a
 13926                                  				switch.  Now dir manually loads the drive
 13927                                  				number after parsing.
 13928                                  
 13929                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 13930                                  				from the ROM BIOS.
 13931                                  
 13932                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 13933                                  				a subdirectory having len(pathname)>MAXPATH.
 13934                                  				Just skip over that subdirectory.
 13935                                  
 13936                                  M028	dbo	9/24/90		When country=US, sort by strict character
 13937                                  				byte value, rather than collating table.
 13938                                  				This to match MS-DOS Shell's sort order.
 13939                                  
 13940                                  ========================================================================= %
 13941                                  
 13942                                  %endif
 13943                                  
 13944                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22)
 13945                                  ;ifdef DBLSPACE_HOOKS
 13946                                  NUM_DIR_SWS	equ	16	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13947                                  ;else
 13948                                  ; 16/02/2023 - Retro DOS v4.0 (v4.1) COMMAND.COM (MSDOS 5.0)
 13949                                  ;NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13950                                  ;endif
 13951                                  
 13952                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13953                                  ;
 13954                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 13955                                  ;		(order is hard-coded; see OnOffSw)
 13956                                  ;		Inmem is set when entries are loaded in memory.
 13957                                  
 13958                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13959                                  ;mask.wide  equ 1
 13960                                  ;mask.pagd  equ 2
 13961                                  ;mask.subd  equ 4
 13962                                  ;mask.bare  equ 8
 13963                                  ;mask.lcase equ 16
 13964                                  ;mask.inmem equ 32
 13965                                  
 13966                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 13967                                  ;ifdef DBLSPACE_HOOKS
 13968                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1,cratio:1
 13969                                  ;else
 13970                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13971                                  ;endif
 13972                                  mask.cratio equ 1
 13973                                  mask.wide   equ 2
 13974                                  mask.pagd   equ 4
 13975                                  mask.subd   equ 8
 13976                                  mask.bare   equ 16
 13977                                  mask.lcase  equ 32
 13978                                  mask.inmem  equ 64
 13979                                  ;
 13980                                  mask.dev    equ 1
 13981                                  mask.baddir equ 2	
 13982                                  
 13983                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 13984                                  
 13985                                  ; 05/06/2023
 13986                                  ;ifdef DBLSPACE_HOOKS
 13987                                  NUM_ORDER_LTRS	equ	6	; length of sort order letter list
 13988                                  CRATIO_ORDER	equ	6	; position of 'C' in ORDER_LTRS
 13989                                  ;else
 13990                                  ;NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 13991                                  ;endif
 13992                                  
 13993                                  ;ResultBuffer	struc		; structure of parse result buffer
 13994                                  ;ValueType	db	?
 13995                                  ;ValueTag	db	?
 13996                                  ;SynPtr		dw	?
 13997                                  ;ValuePtr	dd	?
 13998                                  ;ResultBuffer	ends
 13999                                  
 14000                                  ;ErrorRec	record	baddir:1,dev:1
 14001                                  ;
 14002                                  ;		Error bits are:
 14003                                  ;		  Invalid directory format
 14004                                  ;		  File is device
 14005                                  
 14006                                  ;EntryStruc	struc			; our private directory entry structure
 14007                                  ;used		db	?		; =0 until entry used, then =1
 14008                                  ;filename	db	8 dup (?)	; filename
 14009                                  ;fileext	db	3 dup (?)	; extension
 14010                                  ;fileattr	db	?		; file attributes
 14011                                  ;filetime	dw	?		; file time
 14012                                  ;filedate	dw	?		; file date
 14013                                  ;filesize	dd	?		; file size
 14014                                  ; 05/06/2023
 14015                                  ;;ifdef DBLSPACE_HOOKS
 14016                                  ;compratio	db	?		; compression ratio
 14017                                  ;;endif
 14018                                  ;EntryStruc	ends
 14019                                  
 14020                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 14021                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 14022                                  ;	push	ax
 14023                                  ;	endm
 14024                                  
 14025                                  ;	public	Catalog		; our entry point
 14026                                  ;
 14027                                  ;	break	<DIR (Catalog) principal routines>
 14028                                  ;
 14029                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 14030                                  ; ---------------------------------------------------------------------------
 14031                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 14032                                  
 14033                                  ;----------------------------------------------------------------------------
 14034                                  ;----------------------------------------------------------------------------
 14035                                  
 14036                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14037                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 14038                                  
 14039                                  ;***	Catalog - DIR command main routine
 14040                                  ;
 14041                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 14042                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 14043                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 14044                                  ;		Tpa = TPA buffer seg addr
 14045                                  ;		BytCnt = # bytes in TPA buffer
 14046                                  ;
 14047                                  ;	EXIT	nothing
 14048                                  ;
 14049                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14050                                  ;
 14051                                  ;	ERROR EXITS
 14052                                  ;
 14053                                  ;	  Errors are handled by setting up error message pointers
 14054                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 14055                                  ;	   the environment variable, however, are handled by printing
 14056                                  ;	   an error message and continuing.
 14057                                  ;
 14058                                  ;	EFFECTS
 14059                                  ;
 14060                                  ;	  Directory listing is displayed (on standard output).
 14061                                  ;	  APPEND is disabled. HeadFix routine is expected to
 14062                                  ;	   restore APPEND state.
 14063                                  ;	  Working directory may be changed. The user's default
 14064                                  ;	   directory is saved and flagged for restoration by RestUDir
 14065                                  ;	   during COMMAND cycle.
 14066                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 14067                                  ;
 14068                                  ;	NOTES
 14069                                  ;
 14070                                  ;	  ES = TRANGROUP seg addr except when used to address the
 14071                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 14072                                  
 14073                                  	; 16/02/2023
 14074                                  
 14075                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14076                                  ;----------------------------------------------------------------------------
 14077                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:1167h
 14078                                  
 14079                                  CATALOG:
 14080                                  	; 07/06/2023
 14081                                  	; MSDOS 6.22 COMMAND COM feature only !
 14082 00001137 E82B0A                  	call    screen_f_set	; set display parameters for video/text mode
 14083                                  	;			; (different depending on scr width/columns)
 14084 0000113A E8C900                  	call	SetDefaults
 14085 0000113D E8ED00                  	call	ParseEnvironment
 14086 00001140 E80501                  	call	ParseCmdLine
 14087 00001143 7303                    	jnc	short catalog1	; no parse error
 14088                                  	;jmp	catErr		; error msg is set up
 14089                                  	; 07/06/2023
 14090                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMANBD.COM
 14091 00001145 E9B100                  	jmp	catExtErr2 
 14092                                  catalog1:
 14093 00001148 E82E01                  	call	SetOptions
 14094 0000114B E80401                  	call	SetCollatingTable
 14095                                  
 14096                                  ;	Drive # to operate on has already been placed in FCB by
 14097                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 14098                                  
 14099                                  	;;;test	Bits,mask bare
 14100                                  	;;test 	word [_Bits],8
 14101                                  	;test	byte [_Bits],8
 14102                                  	; 07/06/2023
 14103 0000114E F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 14104 00001153 750A                    	jnz	short catalog2	; don't display volume info for /b
 14105                                  	;invoke	OkVolArg	; find & display volume info
 14106 00001155 E85C10                  	call	OkVolArg
 14107                                  	;sub	byte [LeftOnpage],2
 14108 00001158 832E[1B9E]02            	sub	word [LeftOnPage],2
 14109                                  				; record display lines used by volume info
 14110 0000115D EB14                    	jmp	short catCrunch
 14111                                  
 14112                                  ;	OkVolArg side effects:
 14113                                  ;	APPEND is disabled;
 14114                                  ;	DTA established at DirBuf;
 14115                                  ;	Filename fields in FCB are wildcarded.
 14116                                  
 14117                                  catalog2:
 14118                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 14119                                  
 14120                                  	;invoke	DisAppend	; disable APPEND
 14121 0000115F E81F10                  	call	DisAppend
 14122                                  
 14123                                  	;mov	dx,offset TRANGROUP:DirBuf
 14124 00001162 BA[2AA0]                	mov	dx,DIRBUF
 14125 00001165 B41A                    	mov	ah,1Ah
 14126                                  	;mov	ah,Set_DMA
 14127 00001167 CD21                    	int	21h		; set DTA
 14128                                  
 14129                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 14130                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 14131                                  	; 28/07/2024
 14132 00001169 BF5D00                  	mov	di,FCB+1 ; 5Dh
 14133 0000116C B03F                    	mov	al,'?'		; AL = wildcard character
 14134 0000116E B90B00                  	mov	cx,11
 14135 00001171 F3AA                    	rep	stosb		; wildcard filename field
 14136                                  
 14137                                  catCrunch:
 14138 00001173 E86A01                  	call	CrunchPath	; crunch pathname to get directory and filename
 14139 00001176 724B                    	jc	short catRecErr	; handle recorded or extended error
 14140                                  
 14141                                  ;	User's directory has been saved, we've changed to specified directory.
 14142                                  ;	ComSw = error bits for later use
 14143                                  ;	FCB contains parsed filename
 14144                                  
 14145                                  	;cmp	byte [COMSW],0
 14146 00001178 833E[089E]00            	cmp	word [COMSW],0
 14147 0000117D 7544                    	jne	short catRecErr	; handle recorded error
 14148                                  
 14149 0000117F E8B801                  	call	InstallCtrlC	; install control-C handler
 14150                                  
 14151                                  	; 07/06/2023
 14152                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14153                                  	; MSDOS 6.0 (DBLSPACE/DRVSPACE)
 14154                                  
 14155                                   	;test	word [_Bits],1	; mask.cratio
 14156 00001182 F606[7CA0]01            	test	byte [_Bits],mask.cratio ; compression ratio wanted?
 14157 00001187 740A                    	jz      short catalog4
 14158 00001189 E8350A                  	call    OpenCVF         ; yes, try to open CVF file
 14159 0000118C 7305                    	jnc     short catalog4
 14160                                  
 14161                                  	;and	word [_Bits],0FFFEh ; not (mask cratio)
 14162 0000118E 8026[7CA0]FE            	and	byte [_Bits],~mask.cratio ; 0FEh
 14163                                  
 14164                                  catalog4:	; 07/06/2023
 14165 00001193 E89309                  	call	ZeroTotals	; zero grand totals
 14166 00001196 E88304                  	call	ListDir		; list main directory
 14167                                  	;jc	short catExtErr
 14168                                  	; 07/06/2023
 14169                                  	; MSDOS 6.22 COMMAND.COM
 14170 00001199 724E                    	jc      short catExtErr1
 14171                                  
 14172                                  	;;;test	Bits,mask subd
 14173                                  	;;test	word [_Bits],4
 14174                                  	;test	byte [_Bits],4
 14175                                  	; 07/06/2023
 14176 0000119B F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0 
 14177 000011A0 7405                    	jz	short catalog3	; subdirectories option not set
 14178 000011A2 E8AD01                  	call	ListSubds	; list subdirectories
 14179                                  	;jc	short catExtErr
 14180                                  	; 07/06/2023
 14181                                  	; MSDOS 6.22 COMMAND.COM
 14182 000011A5 7242                    	jc      short catExtErr1
 14183                                  
 14184                                  catalog3:
 14185                                  ;	Check if any files were found.
 14186                                  
 14187                                  	;;;test	Bits,mask bare
 14188                                  	;;test	word [_Bits],8
 14189                                  	;test	byte [_Bits],8
 14190                                  	; 07/06/2023
 14191 000011A7 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 14192 000011AC 750A                    	jnz	short catRet	; don't bother for bare format
 14193                                  
 14194 000011AE A1[239E]                	mov	ax,[FileCntTotal]
 14195 000011B1 09C0                    	or	ax,ax
 14196 000011B3 7421                    	jz	short catNoFiles ; no files found
 14197                                  
 14198 000011B5 E8D202                  	call	DisplayTotals	; display trailing grand totals
 14199                                  	;jmp	short catRet	; all done
 14200                                  	; 25/04/2023
 14201                                  	; 07/06/2023
 14202                                  catRet:
 14203                                  	;retn	; MSDOS 5.0 COMMAND.COM
 14204                                  	
 14205                                  	; 07/06/2023
 14206                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14207                                  
 14208                                  	;test	word [_Bits],1	; mask.cratio
 14209 000011B8 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 14210 000011BD 7403                    	jz      short catRetn
 14211 000011BF E81C0B                  	call    CloseCVF
 14212                                  catRetn:
 14213 000011C2 C3                      	retn
 14214                                  
 14215                                  catRecErr:
 14216                                  
 14217                                  ;	ComSw may have error bit set. If not, do extended error.
 14218                                  
 14219                                  	;;;test	ComSw,mask dev
 14220                                  	;;test	word [COMSW],1
 14221                                  	;test	byte [COMSW],1
 14222 000011C3 F606[089E]01            	test	byte [COMSW],mask.dev
 14223 000011C8 750C                    	jnz	short catNoFiles 
 14224                                  				; filename is device, respond 'file not found'
 14225                                  	;;test	ComSw,mask baddir
 14226                                  	;;test	word [COMSW],2
 14227                                  	;test	byte [COMSW],2
 14228 000011CA F606[089E]02            	test	byte [COMSW],mask.baddir
 14229                                  	;jz	short catExtErr	; no ComSw error bits, must be extended error
 14230                                  	; 07/06/2023
 14231                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM 
 14232 000011CF 7418                    	jz	short catExtErr1
 14233                                  
 14234                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 14235                                  				; invalid directory
 14236 000011D1 BA[0B93]                	mov	dx,badcd_ptr
 14237                                  	;jmp	short catErr
 14238                                  	; 07/06/2023
 14239                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14240 000011D4 EB23                    	jmp	short catExtErr2	
 14241                                  
 14242                                  catNoFiles:
 14243                                  
 14244                                  ;	Display header and force 'file not found' message.
 14245                                  
 14246 000011D6 E89A07                  	call	DisplayHeader
 14247 000011D9 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 14248 000011DC C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 14249 000011E1 BA[D091]                	mov	dx,extend_buf_ptr
 14250 000011E4 A3[D091]                	mov	[extend_buf_ptr],ax
 14251                                  	;jmp	short catErr
 14252                                  	; 07/06/2023
 14253                                  	; MSDOS 6.22 COMMAND.COM
 14254 000011E7 EB10                    	jmp	short catExtErr2
 14255                                  
 14256                                  catExtErr:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 14257                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 14258                                  catExtErr1:
 14259                                  
 14260                                  ;	DOS has returned an error status. Get the extended error#, and
 14261                                  ;	set up an error message, changing 'No more files' error 
 14262                                  ;	to 'File not found' error.
 14263                                  
 14264 000011E9 E84610                  	call	Set_Ext_Error_Msg
 14265 000011EC 833E[D091]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 14266                                  	;jne	short catalog4  ; catErr ; MSDOS 5.0 COMMAND.COM
 14267                                  	; 07/06/2023
 14268                                  	; MSDOS 6.22 COMMAND.COM
 14269 000011F1 7506                    	jne	short catExtErr2	
 14270                                  
 14271 000011F3 C706[D091]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 14272                                  
 14273                                  ;catalog4:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 14274                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 14275                                  catExtErr2:
 14276                                  	;test	word [_Bits],1	; mask.cratio
 14277 000011F9 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 14278                                  				; close Compressed Volume File if cratio
 14279 000011FE 7403                    	jz      short catErr
 14280 00001200 E8DB0A                  	call    CloseCVF
 14281                                  
 14282                                  ;	Error exit. Error message information has been set up
 14283                                  ;	for Std_EPrintf.
 14284                                  
 14285                                  catErr:
 14286 00001203 E99C1C                  	jmp	cerror		; go to COMMAND error recycle point
 14287                                  
 14288                                  	; 25/04/2023
 14289                                  ;catRet:
 14290                                  	;retn
 14291                                  
 14292                                  ; ---------------------------------------------------------------------------
 14293                                  
 14294                                  ;***	SetDefaults - set default pathname, options
 14295                                  ;
 14296                                  ;	ENTRY	DS = TRANGROUP seg addr
 14297                                  ;
 14298                                  ;	EXIT	nothing
 14299                                  ;
 14300                                  ;	USED	AX,DI
 14301                                  ;
 14302                                  ;	EFFECTS
 14303                                  ;	  SrcBuf = '*',EOL - default pathname
 14304                                  ;	  PathPos = ptr to pathname
 14305                                  ;	  PathCnt = length of pathname
 14306                                  
 14307                                  	; 16/02/2023
 14308                                  SetDefaults:
 14309 00001206 BF[12A1]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 14310 00001209 893E[80A0]              	mov	[PathPos],di		; PathPos = ptr to pathname
 14311                                  	;mov	al,STAR
 14312 0000120D B02A                    	mov	al,'*'
 14313 0000120F AA                      	stosb
 14314                                  	;mov	al,END_OF_LINE_IN
 14315 00001210 B00D                    	mov	al,0Dh ; cr
 14316 00001212 AA                      	stosb				; SrcBuf = '*',0Dh
 14317 00001213 C706[7EA0]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 14318                                  
 14319 00001219 31C0                    	xor	ax,ax			; AX = 0
 14320 0000121B A3[089E]                	mov	[COMSW],ax		; = no error
 14321 0000121E A3[7CA0]                	mov	[_Bits],ax		; = options off
 14322 00001221 A2[AFA0]                	mov	[DestBuf],al		; = no sort
 14323 00001224 C606[84A0]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 14324 00001229 A2[85A0]                	mov	[AttrSelect],al		; exclude hidden, system files
 14325                                  peRet:	; 25/04/2023
 14326 0000122C C3                      	retn
 14327                                  
 14328                                  ; ---------------------------------------------------------------------------
 14329                                  
 14330                                  ;***	ParseEnvironment - find and parse our environment variable
 14331                                  ;
 14332                                  ;	Find our environment variable and parse it. If a parse
 14333                                  ;	error occurs, issue an error message. The parse results
 14334                                  ;	up to the error will still have effect. Always leave
 14335                                  ;	the option variables in a useable state.
 14336                                  ;
 14337                                  ;	ENTRY	DS = TRANGROUP seg addr
 14338                                  ;
 14339                                  ;	EXIT	nothing
 14340                                  ;
 14341                                  ;	USED	AX,BX,CX,DX,SI,DI
 14342                                  ;
 14343                                  ;	EFFECTS
 14344                                  ;
 14345                                  ;	  Bits may contain new option settings.
 14346                                  ;	  DestBuf may contain new series of sort codes.
 14347                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14348                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14349                                  ;	  PathPos, PathCnt updated for new pathname.
 14350                                  ;
 14351                                  ;	  If a parse error occurred, an error message will be issued.
 14352                                  
 14353                                  	; 16/02/2023
 14354                                  ParseEnvironment:
 14355 0000122D E8A203                  	call	GetEnvValue		; get environment variable value
 14356 00001230 72FA                    	jc	short peRet		; name not found in environment
 14357                                  
 14358                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 14359                                  
 14360 00001232 E80E05                  	call	Parse_Line		; parse environment value
 14361 00001235 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14362                                  	;cmp	ax,END_OF_LINE
 14363 00001238 74F2                    	je	short peRet		; successful completion
 14364                                  
 14365                                  ;	Some kind of parse error occurred.
 14366                                  ;	We're set up for a Std_EPrintf call.
 14367                                  
 14368 0000123A E8CA42                  	call	std_eprintf		; display the parse error
 14369                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 14370                                  					; restore default msg class
 14371 0000123D C606[CE91]FF            	mov	byte [msg_disp_class],0FFh ; -1
 14372                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 14373 00001242 BA[1294]                	mov	dx,errparsenv_ptr
 14374                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 14375                                  	;call	Printf_Crlf
 14376                                  	; 25/04/2023
 14377                                  	;retn
 14378 00001245 E9B942                  	jmp	Printf_Crlf
 14379                                  					;M008;Internal handling of /? removed
 14380                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 14381                                  	; 25/04/2023
 14382                                  ;peRet:
 14383                                  	;retn
 14384                                  
 14385                                  ; ---------------------------------------------------------------------------
 14386                                  
 14387                                  ;***	ParseCmdLine - parse and record command line parameters
 14388                                  ;
 14389                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 14390                                  ;		DS, ES, CS = TRANGROUP seg addr
 14391                                  ;
 14392                                  ;	EXIT	CY = set if parse error occurred
 14393                                  ;
 14394                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 14395                                  ;		AX = system parser error code
 14396                                  ;		DX = ptr to message block
 14397                                  ;
 14398                                  ;	USED	AX,BX,CX,DX,SI,DI
 14399                                  ;
 14400                                  ;	EFFECTS
 14401                                  ;
 14402                                  ;	  Bits may contain new option settings.
 14403                                  ;	  DestBuf may contain new series of sort codes.
 14404                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14405                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14406                                  ;	  PathPos, PathCnt updated for new pathname.
 14407                                  ;
 14408                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 14409                                  ;	  Msg_Disp_Class = parse error class
 14410                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 14411                                  ;	  Message block (see DX) is set up for parse error message
 14412                                  
 14413                                  	; 16/02/2023
 14414                                  ParseCmdLine:
 14415 00001248 BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 14416 0000124B E8F504                  	call	Parse_Line		; parse cmd line tail
 14417 0000124E 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14418                                  	;;cmp	ax,END_OF_LINE
 14419                                  	; 25/04/2023
 14420                                  	;je	short pcOk		; parse completed successfully
 14421                                  
 14422                                  ;	A parse error occurred. We're all set up for message output.
 14423                                  
 14424                                  	; 25/04/2023
 14425                                  	; cf = 1 (ax < 0FFFFh)
 14426                                  	;stc		   		; return failure
 14427                                  	;jmp	short pcRet
 14428                                  	; 25/04/2023
 14429                                  	;retn
 14430                                  pcOk:
 14431                                  	; 25/04/2023
 14432                                  	;cf = 0 (ax = 0FFFFh)
 14433                                  	;clc				; return success
 14434                                  pcRet:
 14435 00001251 C3                      	retn
 14436                                  
 14437                                  ; ---------------------------------------------------------------------------
 14438                                  
 14439                                  ;***	SetCollatingTable - set up character collating table for sorting
 14440                                  ;
 14441                                  ;	If country is other than USA, try to get a collating table
 14442                                  ;	for character sorting. For USA, use straight byte values.
 14443                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 14444                                  ;	by straight byte values in the USA for better performance.
 14445                                  ;
 14446                                  ;	ENTRY	ES = TRANGROUP seg addr
 14447                                  ;
 14448                                  ;	EXIT	nothing
 14449                                  ;
 14450                                  ;	USED	AX,BX,CX,DX,DI
 14451                                  ;
 14452                                  ;	EFFECTS
 14453                                  ;
 14454                                  ;	  If collating table is set -
 14455                                  ;	    CountryPtrId = 6.
 14456                                  ;	    CountryPtr points to collating table.
 14457                                  ;
 14458                                  ;	  Otherwise -
 14459                                  ;	    CountryPtrId = 0.
 14460                                  
 14461                                  SetCollatingTable:
 14462                                  
 14463                                  ;	Begin modification M028
 14464                                  
 14465                                  	;mov	dx,offset TRANGROUP:InternatVars
 14466                                  	;			; DS:DX = ptr to international info buffer
 14467 00001252 BA[90A9]                	mov	dx,INTERNATVARS
 14468 00001255 B80038                  	mov	ax,3800h
 14469                                  	;mov	ax,INTERNATIONAL << 8
 14470                                  	;;mov	ax,INTERNATIONAL shl 8
 14471                                  				; AX = 'Get current country info'
 14472 00001258 CD21                    	int	21h		; call DOS
 14473 0000125A 7217                    	jc	short scNoTable	; error - so don't collate
 14474                                  
 14475                                  ;	BX = country code
 14476                                  
 14477 0000125C 83FB01                  	cmp	bx,1
 14478 0000125F 7412                    	je	short scNoTable	; we're in USA, don't collate
 14479                                  
 14480                                  ;	End modification M028
 14481                                  
 14482                                  ;*	Country code is other than USA. Try to get a collating table.
 14483                                  
 14484 00001261 B80665                  	mov	ax,6506h
 14485                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 14486                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 14487                                  				; AH = 'Get Extended Country Info'
 14488                                  				; AL = 'Get Pointer to Collating Table'
 14489 00001264 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 14490 00001267 B90500                  	mov	cx,5		; CX = length of info buffer
 14491 0000126A 89DA                    	mov	dx,bx		; DX = country ID = default
 14492                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 14493 0000126C BF[B0A9]                	mov	di,CountryPtrInfo
 14494                                  				; ES:DI = ptr to info buffer
 14495 0000126F CD21                    	int	21h		; call DOS
 14496 00001271 7305                    	jnc	short scRet	; success
 14497                                  
 14498                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 14499                                  
 14500                                  scNoTable:			;M028
 14501 00001273 C606[B0A9]00            	mov	byte [CountryPtrId],0
 14502                                  scRet:
 14503 00001278 C3                      	retn
 14504                                  
 14505                                  ; ---------------------------------------------------------------------------
 14506                                  
 14507                                  ;***	SetOptions - check and set options
 14508                                  ;
 14509                                  ;	ENTRY	nothing
 14510                                  ;
 14511                                  ;	EXIT	nothing
 14512                                  ;
 14513                                  ;	USED	AX,BX,CX,DX
 14514                                  ;
 14515                                  ;	EFFECTS
 14516                                  ;
 14517                                  ;	  Bits may contain modified option settings.
 14518                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 14519                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 14520                                  ;	  PerLine is set according to /w presence.
 14521                                  
 14522                                  	; 16/02/2023
 14523                                  
 14524                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14525                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:12BEh
 14526                                  
 14527                                  SetOptions:
 14528                                  
 14529                                  ;	If bare listing requested, cancel wide listings.
 14530                                  
 14531                                  	;;;test	Bits,mask bare
 14532                                  	;;test	word [_Bits],8
 14533                                  	;test	byte [_Bits],8
 14534                                  	; 07/06/2023
 14535 00001279 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 14536 0000127E 7411                    	jz	short setopts1
 14537                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 14538                                  	;;and	word [_Bits],0FFFEh
 14539                                  	;;and	byte [_Bits],0FEh
 14540                                  	; 07/06/2023
 14541 00001280 8026[7CA0]FD            	and	byte [_Bits],~mask.wide ; 0FDh ; MSDOS 6.0
 14542                                  
 14543                                  ;setopts1:	; MSDOS 5.0 COMMAND.COM
 14544                                  	; 07/06/2023
 14545                                   	; MSDOS 6.22 COMMAND.COM
 14546                                  setopts0:
 14547                                  	;test	word [_Bits],12h  ; (mask bare) or (mask wide)
 14548 00001285 F606[7CA0]12            	test	byte [_Bits],(mask.bare|mask.wide)
 14549 0000128A 7405                    	jz      short setopts1
 14550                                  	;and 	word [_Bits],0FFFEh ; not mask cratio
 14551 0000128C 8026[7CA0]FE            	and	byte [_Bits],~mask.cratio
 14552                                  
 14553                                  setopts1:
 14554                                  ;	Set # lines per display page.
 14555                                  
 14556                                  ;M01  Obtain screen height from ROM BIOS data area
 14557                                  ;
 14558                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 14559                                  
 14560 00001291 1E                      	push	ds
 14561                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 14562 00001292 B84000                  	mov	ax,40h
 14563 00001295 8ED8                    	mov	ds,ax			;
 14564                                  	;Assume	DS:ROMBIOS_DATA
 14565                                  
 14566                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 14567 00001297 A08400                  	mov	al,[84h]
 14568 0000129A 1F                      	pop	ds			;
 14569                                  	;Assume	DS:Trangroup
 14570                                  
 14571 0000129B 08C0                    	or	al,al			; If zero specified
 14572 0000129D 7502                    	jnz	short setopts2		;
 14573                                  
 14574                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 14575 0000129F B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 14576                                  setopts2:
 14577 000012A1 30E4                    	xor	ah,ah
 14578                                  setopts3:
 14579 000012A3 FEC0                    	inc	al			; height + 1 ;M018
 14580                                  
 14581 000012A5 A3[08A2]                	mov	[LinPerPag],ax		; set the rows now
 14582                                  
 14583                                  ; Now the console driver can change the rows if it knows better (M01 end)
 14584                                  
 14585                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 14586                                  					; IOCTL for handles
 14587 000012A8 B80C44                  	mov	ax,440Ch
 14588                                  	;mov	bx,STDOUT		; handle #
 14589 000012AB BB0100                  	mov	bx,1
 14590                                  	;mov	ch,IOC_SC		; screen
 14591 000012AE B503                    	mov	ch,3
 14592                                  	;mov	cl,get_generic		; get display info
 14593 000012B0 B17F                    	mov	cl,7Fh
 14594 000012B2 BA[F8A1]                	mov	dx,Display_Ioctl	; info block
 14595 000012B5 CD21                    	int	21h			; call DOS
 14596                                  
 14597 000012B7 A1[08A2]                	mov	ax,[LinPerPag]		; AX = # lines per page
 14598 000012BA A3[1B9E]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 14599                                  
 14600                                  ;	Set # entries per line.
 14601                                  
 14602                                  	;mov	byte [PerLine],NORMPERLIN
 14603                                  					; # entries per line without /w
 14604 000012BD C606[1A9E]01            	mov	byte [PerLine],1
 14605                                  	;;;test	Bits,mask wide
 14606                                  	;;test	word [_Bits],1
 14607                                  	;test	byte [_Bits],1
 14608                                  	; 07/06/2023
 14609 000012C2 F606[7CA0]02            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 14610 000012C7 7405                    	jz	short setopts4
 14611                                  	;mov	byte [PerLine],WIDEPERLIN
 14612                                  					; # entries per line with /w
 14613 000012C9 C606[1A9E]05            	mov	byte [PerLine],5
 14614                                  setopts4:
 14615                                  				;M011;start;The following code checks if a drive
 14616                                  				;letter has been parsed into SrcBuf, and if
 14617                                  				;so, the correct drive number is loaded into
 14618                                  				;the first FCB, at offset 5C.
 14619                                  
 14620                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 14621 000012CE 803E[13A1]3A            	cmp	byte [SrcBuf+1],':'
 14622 000012D3 750A                    	jne	short soRet
 14623                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 14624 000012D5 A0[12A1]                	mov	al,[SrcBuf]
 14625                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 14626 000012D8 24DF                    	and	al,0DFh ; ~20h ; not 20h
 14627 000012DA 2C40                    	sub	al,'@'	; 40h			; convert to 1-based number (1=A)
 14628 000012DC A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 14629                                  						;M011;end
 14630                                  soRet:
 14631 000012DF C3                      	retn
 14632                                  
 14633                                  ; ---------------------------------------------------------------------------
 14634                                  
 14635                                  ;***	CrunchPath - analyze supplied or default pathname
 14636                                  ;
 14637                                  ;	ENTRY	PathPos = ptr to pathname buffer
 14638                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 14639                                  ;		Pathname in buffer must end in delimiter (like CR) and
 14640                                  ;		 must have space for another char after the delimiter.
 14641                                  ;
 14642                                  ;	EXIT	CY = clear if no error
 14643                                  ;		We are changed to directory found in pathname
 14644                                  ;		Previous directory ready to be restored via RestUDir
 14645                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 14646                                  ;
 14647                                  ;		If error occurred,
 14648                                  ;		CY = set
 14649                                  ;		ComSw = error bits (see ErrorRec)
 14650                                  ;		If ComSw not set,
 14651                                  ;		Ready for DOS Get Extended Error call
 14652                                  
 14653                                  	; 16/02/2023
 14654                                  CrunchPath:
 14655 000012E0 E80102                  	call	FileIsDevice
 14656 000012E3 7507                    	jne	short crpath1	; not a device, skip ahead
 14657                                  	;;;or	ComSw,mask dev	; signal file is device
 14658                                  	;;or	word [COMSW],1
 14659                                  	;or	byte [COMSW],1
 14660 000012E5 800E[089E]01            	or	byte [COMSW],mask.dev
 14661 000012EA EB2F                    	jmp	short cpErr	; return error
 14662                                  crpath1:
 14663 000012EC FF36[80A0]              	push	word [PathPos]	; save ptr to pathname
 14664 000012F0 C606[88A0]FF            	mov	byte [DirFlag],-1
 14665                                  				; tell PathCrunch not to parse file into FCB
 14666 000012F5 E8D218                  	call	PathCrunch	; change to directory in pathname
 14667 000012F8 C606[88A0]00            	mov	byte [DirFlag],0
 14668                                  				; reset our little flag
 14669 000012FD 5E                      	pop	si		; SI = ptr to pathname
 14670 000012FE 7208                    	jc	short cpNoDir	; didn't find directory path
 14671 00001300 741A                    	jz	short cpRet	; found directory path w/ no filename
 14672                                  				;  - leave wildcard default in FCB and return
 14673                                  
 14674                                  ;*	We found a directory, and there was a filename attached.
 14675                                  ;	DestTail = ptr to ASCIIZ filename
 14676                                  
 14677 00001302 8B36[ACA0]              	mov	si,[DestTail]	; SI = ptr to filename
 14678 00001306 EB28                    	jmp	short cpFile	; go parse the file into FCB
 14679                                  
 14680                                  ;*	PathCrunch failed to find a directory in the pathname.
 14681                                  ;
 14682                                  ;	Msg_Numb = error code
 14683                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 14684                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 14685                                  
 14686                                  cpNoDir:
 14687 00001308 A1[25A2]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 14688 0000130B 09C0                    	or	ax,ax
 14689 0000130D 750C                    	jnz	short cpErr	  ; error occurred - return it
 14690 0000130F 803E[AAA0]00            	cmp	byte [DestIsDir],0
 14691 00001314 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 14692                                  crpath3:
 14693                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 14694                                  	;;or	word [COMSW],2
 14695                                  	;or	byte [COMSW],2
 14696 00001316 800E[089E]02            	or	byte [COMSW],mask.baddir
 14697                                  	;jmp	short cpErr	  ; return error
 14698                                  	; 16/02/2023
 14699                                  cpErr:
 14700 0000131B F9                      	stc			  ; return error
 14701                                  cpRet:
 14702 0000131C C3                      	retn
 14703                                  
 14704                                  cpMaybe:
 14705                                  ;	SI = ptr to pathname
 14706                                  
 14707                                  	;cmp	byte [si+1],COLON_CHAR
 14708 0000131D 807C013A                	cmp	byte [si+1],':'
 14709 00001321 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 14710 00001323 AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 14711                                  crpath2:
 14712 00001324 813C2E2E                	cmp	word [si],".."
 14713 00001328 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 14714 0000132A 807C0200                	cmp	byte [si+2],0
 14715                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 14716                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 14717                                  	;;;or	word [COMSW],2
 14718                                  	;;or	byte [COMSW],2
 14719                                  	;or	byte [COMSW],mask.baddir
 14720                                  	;jmp	short cpErr	  ; return error
 14721                                  	; 16/02/2023
 14722 0000132E 74E6                    	je	short crpath3
 14723                                  
 14724                                  ;	The preceding code was taken from the old DIR routine.
 14725                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 14726                                  ;	occurring when we're at the root directory. Too bad it
 14727                                  ;	doesn't handle problems with "..\..", etc.
 14728                                  
 14729                                  ;	We're ready to parse a filename into the FCB.
 14730                                  ;	SI = ptr to ASCIIZ filename
 14731                                  
 14732                                  cpFile:	
 14733 00001330 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 14734 00001333 B80E29                  	mov	ax,290Eh
 14735                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14736                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 14737                                  				; wildcards already in FCB used as defaults
 14738 00001336 CD21                    	int	21h
 14739 00001338 F8                      	clc			; return success
 14740                                  	;jmp	short cpRet
 14741                                  	; 16/02/2023
 14742 00001339 C3                      	retn
 14743                                  
 14744                                  ;cpErr:
 14745                                  ;	stc			; return error
 14746                                  ;cpRet:
 14747                                  ;	retn
 14748                                  
 14749                                  ; ---------------------------------------------------------------------------
 14750                                  
 14751                                  ;***	InstallCtrlC - install our private control-C handler
 14752                                  ;
 14753                                  ;	Put our control-c handler in front of command.com's default
 14754                                  ;	handler, to make sure the user's default directory gets restored.
 14755                                  ;	This shouldn't be necessary, but, for now, there are situations
 14756                                  ;	where the TDATA segment is left in a modified state when a
 14757                                  ;	control-c occurs.  This means that the transient will be
 14758                                  ;	reloaded, and the user's directory cannot be restored.
 14759                                  ;
 14760                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 14761                                  ;
 14762                                  ;	ENTRY	nothing
 14763                                  ;
 14764                                  ;	EXIT	nothing
 14765                                  ;
 14766                                  ;	USED	AX,BX,DX
 14767                                  ;
 14768                                  ;	EFFECTS
 14769                                  ;
 14770                                  ;	  CtrlCHandler address placed in int 23 vector.
 14771                                  ;
 14772                                  ;	NOTE
 14773                                  ;
 14774                                  ;	  Command.com's basic control-c handler will be restored
 14775                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 14776                                  
 14777                                  	; 16/02/2023
 14778                                  InstallCtrlC:
 14779 0000133A 06                      	push	es			; preserve ES
 14780 0000133B B82335                  	mov	ax,3523h
 14781                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 14782                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 14783 0000133E CD21                    	int	21h
 14784 00001340 891E[B5A9]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 14785 00001344 8C06[B7A9]              	mov	[OldCtrlCHandler+2],es	 
 14786 00001348 07                      	pop	es			; restore ES
 14787                                  
 14788 00001349 BA[341B]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 14789 0000134C B82325                  	mov	ax,2523h
 14790                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 14791                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 14792 0000134F CD21                    	int	21h
 14793 00001351 C3                      	retn
 14794                                  
 14795                                  ; ---------------------------------------------------------------------------
 14796                                  
 14797                                  ;***	ListSubds - search and list files in subdirectories
 14798                                  ;
 14799                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 14800                                  ;		FCB is still set up for file searches
 14801                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 14802                                  ;
 14803                                  ;	EXIT	CY = clear if no error
 14804                                  ;		FileCnt = # files found & displayed
 14805                                  ;		FileSiz = total size of files found
 14806                                  ;
 14807                                  ;		If error,
 14808                                  ;		CY = set
 14809                                  ;		Ready for DOS Get Extended Error call
 14810                                  ;
 14811                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14812                                  ;
 14813                                  ;	EFFECTS
 14814                                  ;
 14815                                  ;	  FileCntTotal, FileSizTotal are updated.
 14816                                  ;	  Subdirectories may be listed on standard output device.
 14817                                  ;
 14818                                  ;	NOTES
 14819                                  ;
 14820                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 14821                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 14822                                  ;	   Each name is stored ASCIIZ.
 14823                                  
 14824                                  	; 16/02/2023
 14825                                  ListSubds:
 14826                                  	;invoke	SetRest1		; make sure user's dir gets restored
 14827 00001352 E8DC1E                  	call	SetRest1
 14828                                  
 14829 00001355 BB[6CA1]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 14830                                  lsNode:
 14831 00001358 C60700                  	mov	byte [bx],0		; start with null child name
 14832                                  lsLoop:
 14833 0000135B E81002                  	call	FindNextChild		; search for next subdirectory
 14834 0000135E 7235                    	jc	short lsErr		; search failed - examine error
 14835                                  
 14836 00001360 89DA                    	mov	dx,bx			; DX = ptr to child's name
 14837 00001362 E8A904                  	call	ChangeDir		; enter child directory
 14838                                  
 14839                                  					; M023;start
 14840 00001365 7306                    	jnc	short lstsd1		; check for error
 14841                                  	;cmp	ax,3
 14842 00001367 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 14843 0000136A 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 14844                                  	;jmp	short lsRet		; no, other error: DIR must fail
 14845                                  	; 16/02/2023			; M023;end
 14846 0000136C C3                      	retn
 14847                                  lstsd1:	
 14848 0000136D 53                      	push	bx
 14849 0000136E E8AB02                  	call	ListDir			; list the directory
 14850 00001371 5B                      	pop	bx
 14851                                  
 14852                                  ;	Note we're ignoring errors returned here.
 14853                                  
 14854 00001372 89DF                    	mov	di,bx			; DI = ptr to child's name
 14855 00001374 B90D00                  	mov	cx,13			; CX = max name length w/ null
 14856 00001377 30C0                    	xor	al,al			; AL = zero byte to look for
 14857 00001379 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 14858 0000137B 53                      	push	bx			; save ptr to child's name
 14859 0000137C 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 14860 0000137E E8D7FF                  	call	lsNode			; recurse from new node
 14861 00001381 5B                      	pop	bx			; BX = ptr to child's name
 14862 00001382 9C                      	pushf				; save error condition
 14863                                  	
 14864                                  	;;shove	0
 14865                                  	;mov	ax,0
 14866 00001383 29C0                    	sub	ax,ax ; 0
 14867 00001385 50                      	push	ax
 14868                                  	;shove	".."
 14869 00001386 B82E2E                  	mov	ax,'..'  ; 2E2Eh
 14870 00001389 50                      	push	ax
 14871 0000138A 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 14872 0000138C E87F04                  	call	ChangeDir		; return to parent directory
 14873 0000138F 58                      	pop	ax			; restore stack
 14874 00001390 58                      	pop	ax
 14875                                  
 14876 00001391 9D                      	popf				; restore error condition from child
 14877                                  	;jc	short lsRet		; return error
 14878                                  	;jmp	short lsLoop		; look for more children
 14879                                  	; 16/02/2023
 14880 00001392 73C7                    	jnc	short lsLoop
 14881 00001394 C3                      	retn
 14882                                  lsErr:
 14883 00001395 E8AA0E                  	call	get_ext_error_number	; AX = extended error code
 14884                                  	;cmp	ax,2
 14885 00001398 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 14886 0000139B 7406                    	je	short lsRet		; file not found, we're ok
 14887                                  	;cmp	ax,18
 14888 0000139D 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 14889 000013A0 7401                    	je	short lsRet		; no more files, we're ok
 14890 000013A2 F9                      	stc				; return other errors
 14891                                  lsRet:	
 14892 000013A3 C3                      	retn
 14893                                  
 14894                                  ; ---------------------------------------------------------------------------
 14895                                  
 14896                                  	;break	<DIR support routines>
 14897                                  
 14898                                  ;***	SUPPORT ROUTINES
 14899                                  
 14900                                  ; ----------------------
 14901                                  
 14902                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 14903                                  ;
 14904                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 14905                                  ;		BX = ptr to last child's name
 14906                                  ;		BP = ptr to temp child's name
 14907                                  ;
 14908                                  ;	EXIT	nothing
 14909                                  ;
 14910                                  ;	USED	AX,CX,SI,DI
 14911                                  ;
 14912                                  ;	EFFECTS
 14913                                  ;
 14914                                  ;	  Filename pointed to by BP may be changed.
 14915                                  ;
 14916                                  ;	NOTES
 14917                                  ;
 14918                                  ;	  Potential filename replaces temp filename if:
 14919                                  ;	   it's a subdirectory file;
 14920                                  ;	   it doesn't start with a '.';
 14921                                  ;	   it's alphanumerically greater than last child's name;
 14922                                  ;	   and it's alphanumerically less than temp name.
 14923                                  
 14924                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14925                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14926                                  CheckChild:
 14927                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 14928 000013A4 F606[3FA0]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 14929 000013A9 741D                    	jz	short ccRet	; not a subdirectory file- return
 14930                                  
 14931                                  	; 16/02/2023
 14932 000013AB BE[48A0]                	mov	si,DIRBUF+FIND_BUF.PNAME
 14933 000013AE 803C2E                  	cmp	byte [si],'.'
 14934                                  	;;cmp	DirBuf.find_buf_pname,'.'
 14935                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 14936 000013B1 7415                    	je	short ccRet	; starts with a dot- return
 14937                                  
 14938                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14939                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14940 000013B3 89DF                    	mov	di,bx
 14941 000013B5 E86D04                  	call	CmpAscz		; compare candidate to last child's name
 14942 000013B8 760E                    	jna	short ccRet	; it's not above it- return
 14943                                  
 14944                                  	; 07/06/2023
 14945                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14946                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14947                                  	; si = DIRBUF+FIND_BUF.PNAME
 14948 000013BA 89EF                    	mov	di,bp
 14949 000013BC E86604                  	call	CmpAscz		; compare candidate to temp name
 14950 000013BF 7307                    	jnb	short ccRet	; it's not below it- return
 14951                                  
 14952                                  ;	New kid is alright. Copy to temp.
 14953                                  
 14954                                  	; 07/06/2023
 14955                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14956                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14957                                  	; si = DIRBUF+FIND_BUF.PNAME
 14958 000013C1 89EF                    	mov	di,bp
 14959 000013C3 B90D00                  	mov	cx,13
 14960 000013C6 F3A4                    	rep	movsb
 14961                                  ccRet:
 14962 000013C8 C3                      	retn
 14963                                  
 14964                                  ; ---------------------------------------------------------------------------
 14965                                  
 14966                                  ;***	CmpEntry - compare one directory entry to another in sort order
 14967                                  ;
 14968                                  ;	Compare one directory entry against another according to
 14969                                  ;	the sort codes in DestBuf. One or more comparisons
 14970                                  ;	may be made of file name, extension, time/date, and
 14971                                  ;	size.  Comparisons may be made for upward or downward
 14972                                  ;	sort order.
 14973                                  ;
 14974                                  ;	ENTRY	ES:BX = ptr to entry to compare
 14975                                  ;		ES:BP = ptr to entry to be compared against
 14976                                  ;		DestBuf contains sort codes (see DestBuf)
 14977                                  ;		DS = TRANGROUP seg addr
 14978                                  ;
 14979                                  ;	EXIT	BX = unchanged
 14980                                  ;		BP = unchanged
 14981                                  ;		Condition flags set for same, above, or below
 14982                                  ;		 comparing BX entry against BP entry.
 14983                                  ;		 'Same, above, below' translate to 'same, after, before'.
 14984                                  ;
 14985                                  ;	USED:	AX,CX,DX,SI,DI
 14986                                  
 14987                                  	; 16/02/2023
 14988                                  CmpEntry:
 14989 000013C9 BE[AFA0]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 14990                                  ceLoop:
 14991 000013CC 31C0                    	xor	ax,ax		; AX = 0
 14992 000013CE 8A04                    	mov	al,[si]		; AL = sort code
 14993 000013D0 08C0                    	or	al,al
 14994 000013D2 741C                    	jz	short ceDone	; sort code is zero, we're done
 14995 000013D4 46                      	inc	si		; DS:SI = ptr to next sort code
 14996 000013D5 56                      	push	si		; save ptr to next sort code
 14997 000013D6 FEC8                    	dec	al
 14998 000013D8 D0E0                    	shl	al,1
 14999                                  	;sal	al,1		; AX = index into cmp call table
 15000                                  				; CY set for downward sort order
 15001 000013DA 89C6                    	mov	si,ax		; SI = index into cmp call table
 15002 000013DC 2E8B84[F113]            	mov	ax,[cs:si+FieldCmps]
 15003                                  				; AX = addr of compare routine
 15004 000013E1 7204                    	jc	short ceDn	; downwards sort - go swap entries
 15005 000013E3 FFD0                    	call	ax 		; do upwards sort
 15006 000013E5 EB06                    	jmp	short ceNs
 15007                                  ceDn:
 15008 000013E7 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 15009 000013E9 FFD0                    	call	ax		; do sort
 15010 000013EB 87DD                    	xchg	bx,bp		; swap ptrs back
 15011                                  ceNs:
 15012 000013ED 5E                      	pop	si		; SI = ptr to next sort code
 15013 000013EE 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 15014                                  ceDone:
 15015                                  
 15016                                  ;	Get here either from unequal compare or sort code = 0.
 15017                                  ;	In the latter case, condition codes indicate equality,
 15018                                  ;	which is correct.
 15019                                  
 15020 000013F0 C3                      	retn
 15021                                  
 15022                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15023                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 15024                                  
 15025                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 15026                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:144Eh)
 15027                                  
 15028                                  FieldCmps:		; call table of entry comparisons
 15029 000013F1 [FD13]                  	dw	CmpName
 15030 000013F3 [0814]                  	dw	CmpExt
 15031 000013F5 [4614]                  	dw	CmpTime
 15032 000013F7 [6214]                  	dw	CmpSize
 15033 000013F9 [6714]                  	dw	CmpType
 15034                                  	; 05/06/2023 - Retro DOS 4.2 COMMAND.COM
 15035 000013FB [7514]                  	dw	CmpCratio
 15036                                  
 15037                                  ; ---------------------------------------------------------------------------
 15038                                  
 15039                                  ;***	CmpName - compare file name of two entries
 15040                                  ;***	CmpExt - compare extension of two entries
 15041                                  ;
 15042                                  ;	ENTRY	ES:BX = ptr to one entry
 15043                                  ;		ES:BP = ptr to another entry
 15044                                  ;
 15045                                  ;	EXIT	BX = unchanged
 15046                                  ;		BP = unchanged
 15047                                  ;		Condition flags set for same, above, or below
 15048                                  ;		comparing BX entry to BP entry.
 15049                                  ;
 15050                                  ;	USED:	AX,CX,DX,SI,DI
 15051                                  
 15052                                  	; 16/02/2023
 15053                                  CmpName:
 15054 000013FD 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 15055 000013FF 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 15056                                  	;;add	si,filename	; ES:SI = ptr to BX name
 15057                                  	;add	si,1
 15058                                  	; 25/04/2023
 15059 00001401 46                      	inc	si
 15060                                  	;;add	di,filename	; ES:DI = ptr to BP name
 15061                                  	;add	di,1
 15062                                  	; 25/04/2023
 15063 00001402 47                      	inc	di
 15064                                  	;mov	cx,size filename
 15065                                  				; CX = length of name
 15066 00001403 B90800                  	mov	cx,8
 15067 00001406 EB0C                    	jmp	short CmpStr
 15068                                  
 15069                                  CmpExt:
 15070                                  	; 07/06/2023
 15071                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 15072                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 15073                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 15074                                  	;add	si,9
 15075                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 15076                                  	;add	di,9
 15077                                  	;
 15078 00001408 BE0900                  	mov	si,9
 15079 0000140B 89F7                    	mov	di,si ; mov di,9
 15080 0000140D 01DE                    	add	si,bx
 15081 0000140F 01EF                    	add	di,bp
 15082                                  	;
 15083                                  	;mov	cx,size fileext	; CX = length of extension field
 15084 00001411 B90300                  	mov	cx,3
 15085                                  
 15086                                  ;	Bugbug:	use symbol for subfunction code.
 15087                                  
 15088                                  CmpStr:	
 15089 00001414 803E[B0A9]06            	cmp	byte [CountryPtrId],6
 15090 00001419 7527                    	jne	short cnNoCollTable
 15091                                  				; no collating table available
 15092                                  
 15093                                  ;*	Compare strings using collating table.
 15094                                  ;
 15095                                  ;	ES:SI = ptr to 1st string
 15096                                  ;	ES:DI = ptr to 2nd string
 15097                                  ;	CX = length
 15098                                  
 15099 0000141B 55                      	push	bp		; preserve BP
 15100 0000141C 53                      	push	bx		; preserve BX
 15101 0000141D 1E                      	push	ds		; preserve DS
 15102 0000141E C51E[B1A9]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 15103                                  	;assume	ds:NOTHING
 15104 00001422 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 15105 00001424 43                      	inc	bx
 15106 00001425 43                      	inc	bx		; DS:BX = ptr to collating values
 15107                                  				; DS:[BX]-2 = size of table
 15108 00001426 31C0                    	xor	ax,ax		; AX = 0 for starters
 15109                                  
 15110                                  ;	Bugbug:	Investigate removing collating table length checks.
 15111                                  
 15112                                  cnNextChar:
 15113 00001428 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 15114 0000142B 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 15115 0000142C 39E8                    	cmp	ax,bp		; compare to collating table length
 15116 0000142E 7301                    	jae	short cn1 	; char not in table
 15117 00001430 D7                      	xlat				
 15118                                  cn1:				; AL = AX = collating value
 15119 00001431 89C2                    	mov	dx,ax		; DX = collating value from 2nd string
 15120                                  	;lods	byte ptr es:[si]
 15121 00001433 26AC                    	es	lodsb		; AL = AX = char from 1st string
 15122                                  				; ES:SI = ptr to next char 1st string
 15123 00001435 39E8                    	cmp	ax,bp		; compare to collating table length
 15124 00001437 7301                    	jae	short cn2	; char not in table
 15125 00001439 D7                      	xlat				
 15126                                  cn2:				; AL = AX = collating value
 15127 0000143A 39D0                    	cmp	ax,dx		; compare collating values
 15128 0000143C E1EA                    	loope	cnNextChar	; until unequal or no more left
 15129                                  
 15130 0000143E 1F                      	pop	ds		; restore DS
 15131                                  	;assume	ds:TRANGROUP
 15132 0000143F 5B                      	pop	bx		; restore BX
 15133 00001440 5D                      	pop	bp		; restore BP
 15134 00001441 C3                      	retn
 15135                                  
 15136                                  ;*	If no collating table is available, simply compare raw ASCII values.
 15137                                  ;	Don't we wish we could just do this all the time?  Sigh.
 15138                                  
 15139                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15140                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 15141                                  cnNoCollTable:
 15142                                  	;repe	cmps byte ptr es:[si],[di]
 15143                                  				;db 0F3h,26h,0A6h,0C3h
 15144 00001442 F3                      	repe	; 0F3h
 15145 00001443 26                      	es	; 26h
 15146 00001444 A6                      	cmpsb	; 0A6h
 15147 00001445 C3                      	retn	; 0C3h
 15148                                  
 15149                                  ; ---------------------------------------------------------------------------
 15150                                  
 15151                                  ;***	CmpTime - compare entries by date/time
 15152                                  ;
 15153                                  ;	ENTRY	ES:BX = ptr to one entry
 15154                                  ;		ES:BP = ptr to another entry
 15155                                  ;
 15156                                  ;	EXIT	BX = unchanged
 15157                                  ;		BP = unchanged
 15158                                  ;		Condition flags set for same, above, or below
 15159                                  ;		 comparing BX entry to BP entry.
 15160                                  ;
 15161                                  ;	USED:	CX,SI,DI
 15162                                  ;
 15163                                  ;	NOTE	Filetime and filedate fields in our private entry
 15164                                  ;		structure must be adjacent and in that order.
 15165                                  
 15166                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15167                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15168                                  CmpTime:
 15169 00001446 89DE                    	mov	si,bx
 15170 00001448 89EF                    	mov	di,bp
 15171                                  	;add	si,filedate + size filedate - 1
 15172 0000144A 83C610                  	add	si,16 ; 15+2-1
 15173                                  	;add	di,filedate + size filedate - 1
 15174 0000144D 83C710                  	add	di,16 ; 15+2-1
 15175                                  	; 07/06/2023
 15176 00001450 BE1000                  	mov	si,16
 15177                                  CmpST2:		; 07/06/2023
 15178 00001453 89F7                    	mov	di,si	; mov di,16
 15179 00001455 01DE                    	add	si,bx
 15180 00001457 01EF                    	add	di,bp
 15181                                  
 15182                                  	;mov	cx,size filetime + size filedate
 15183 00001459 B90400                  	mov	cx,4 ; 2+2
 15184 0000145C FD                      	std
 15185                                  	;repe	cmps byte ptr es:[si],[di]
 15186                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 15187 0000145D F3                      	repe	; 0F3h
 15188 0000145E 26                      	es	; 26h
 15189 0000145F A6                      	cmpsb	; 0A6h
 15190                                  	
 15191 00001460 FC                      	cld	; 0FCh
 15192 00001461 C3                      	retn	; 0C3h
 15193                                  
 15194                                  ; ---------------------------------------------------------------------------
 15195                                  
 15196                                  ;***	CmpSize - compare entries by size
 15197                                  ;
 15198                                  ;	ENTRY	ES:BX = ptr to one entry
 15199                                  ;		ES:BP = ptr to another entry
 15200                                  ;
 15201                                  ;	EXIT	BX = unchanged
 15202                                  ;		BP = unchanged
 15203                                  ;		Condition flags set for same, above, or below
 15204                                  ;		 comparing BX entry to BP entry.
 15205                                  ;
 15206                                  ;	USED:	CX,SI,DI
 15207                                  
 15208                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15209                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15210                                  CmpSize:
 15211                                  	;mov	si,bx
 15212                                  	;mov	di,bp
 15213                                  	;;add	si,filesize + size filesize - 1
 15214                                  	;add	si,20  ; 17+4-1
 15215                                  	;;add	di,filesize + size filesize - 1
 15216                                  	;add	di,20  ; 17+4-1
 15217                                  	; 07/06/2023
 15218 00001462 BE1400                  	mov	si,20
 15219                                  	;;;
 15220 00001465 EBEC                    	jmp	short CmpST2 ; 07/06/2023
 15221                                  	;;;
 15222                                  ;CmpST2:
 15223                                  ;	mov	di,si	; mov di,20
 15224                                  ;	add	si,bx
 15225                                  ;	add	di,bp
 15226                                  ;
 15227                                  ;	;mov	cx,size filesize
 15228                                  ;	mov	cx,4
 15229                                  ;	std
 15230                                  ;	;repe	cmps byte ptr es:[si],[di]
 15231                                  ;				;db 0F3h,26h,0A6h
 15232                                  ;	repe	; 0F3h
 15233                                  ;	es	; 26h
 15234                                  ;	cmpsb	; 0A6h
 15235                                  ;
 15236                                  ;	cld
 15237                                  ;	retn
 15238                                  
 15239                                  ; ---------------------------------------------------------------------------
 15240                                  
 15241                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 15242                                  ;
 15243                                  ;	ENTRY	ES:BX = ptr to one entry
 15244                                  ;		ES:BP = ptr to another entry
 15245                                  ;
 15246                                  ;	EXIT	BX = unchanged
 15247                                  ;		BP = unchanged
 15248                                  ;		Condition flags set for same, above, or below
 15249                                  ;		 comparing BX entry to BP entry.
 15250                                  ;
 15251                                  ;	USED:	AX
 15252                                  
 15253                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15254                                  CmpType:
 15255                                  	;mov	al,es:[bx].fileattr
 15256 00001467 268A470C                	mov	al,[es:bx+12]
 15257                                  	;mov	ah,es:[bp].fileattr
 15258 0000146B 268A660C                	mov	ah,[es:bp+12]
 15259                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 15260                                  	;and	ax,1010h
 15261 0000146F 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 15262 00001472 38C4                    	cmp	ah,al
 15263 00001474 C3                      	retn
 15264                                  
 15265                                  ; ---------------------------------------------------------------------------
 15266                                  
 15267                                  ;***	CmpCratio - compare entries by compression ratio
 15268                                  ;
 15269                                  ;	ENTRY	ES:BX = ptr to one entry
 15270                                  ;		ES:BP = ptr to another entry
 15271                                  ;
 15272                                  ;	EXIT	BX = unchanged
 15273                                  ;		BP = unchanged
 15274                                  ;		Condition flags set for same, above, or below
 15275                                  ;		 comparing BX entry to BP entry.
 15276                                  ;
 15277                                  ;	USED:	AX
 15278                                  
 15279                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 15280                                  CmpCratio:
 15281                                  	;mov	al,es:[bx].compratio
 15282 00001475 268A4715                	mov	al,[es:bx+21]	
 15283                                  	;cmp	al,es:[bp].compratio
 15284 00001479 263A4615                	cmp     al,[es:bp+21]
 15285 0000147D C3                      	retn
 15286                                  
 15287                                  ; ---------------------------------------------------------------------------
 15288                                  
 15289                                  ;***	DefaultAttr - set default attribute conditions
 15290                                  ;
 15291                                  ;	ENTRY	nothing
 15292                                  ;
 15293                                  ;	EXIT	CY clear
 15294                                  ;
 15295                                  ;	USED
 15296                                  ;
 15297                                  ;	EFFECTS
 15298                                  ;
 15299                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 15300                                  
 15301                                  	; 16/02/2023
 15302                                  DefaultAttr:
 15303                                  	;mov	byte [AttrSpecified],6
 15304 0000147E C606[84A0]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 15305                                  					; specify H and S
 15306 00001483 C606[85A0]00            	mov	byte [AttrSelect],0	; H and S must be off
 15307 00001488 F8                      	clc				; return success
 15308                                  dtRet:	; 18/02/2023
 15309 00001489 C3                      	retn
 15310                                  
 15311                                  ; ---------------------------------------------------------------------------
 15312                                  
 15313                                  ;***	DisplayTotals - display grand total stats
 15314                                  ;
 15315                                  ;	If we searched subdirectories, display the total # files found
 15316                                  ;	 and total size of files found.
 15317                                  ;	Display disk space remaining.
 15318                                  ;
 15319                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 15320                                  ;		Bits contains setting of /s
 15321                                  ;		FCB contains drive #
 15322                                  ;
 15323                                  ;	EXIT	nothing
 15324                                  ;
 15325                                  ;	USES	AX,DX
 15326                                  ;		FileSiz
 15327                                  
 15328                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15329                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 15330                                  
 15331                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15332                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:14F1h
 15333                                  
 15334                                  DisplayTotals:
 15335                                  	;;;test	Bits,mask subd
 15336                                  	;;test	word [_Bits],4
 15337                                  	;test	byte [_Bits],4
 15338                                  	; 07/06/2023
 15339 0000148A F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 15340 0000148F 7432                    	jz	short dtFree		; no subdirectories- do bytes free
 15341                                  
 15342 00001491 E88D16                  	call	CRLF2			; start on new line
 15343 00001494 E82204                  	call	UseLine
 15344                                  
 15345 00001497 BA[0F94]                	mov	dx,total_ptr
 15346 0000149A E87240                  	call	std_printf		; "Total:",cr,lf
 15347 0000149D E81904                  	call	UseLine
 15348                                  	;;;
 15349                                  	; 07/06/2023
 15350                                  	; MSDOS 6.22 COMMAND.COM
 15351                                  	;test	word [_Bits],1		; mask.cratio
 15352 000014A0 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 15353 000014A5 740E                    	jz      short dtCntSize
 15354 000014A7 A1[2F9E]                	mov     ax,[ccluUsedTotal]
 15355 000014AA A3[2D9E]                	mov     [ccluUsedDir],ax
 15356 000014AD BE[399E]                	mov     si,csecUsedTotal
 15357 000014B0 BF[359E]                	mov     di,csecUsedDir
 15358 000014B3 A5                      	movsw
 15359 000014B4 A5                      	movsw
 15360                                  dtCntSize:    
 15361                                  	;;;
 15362 000014B5 A1[239E]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 15363 000014B8 BE[279E]                	mov	si,FileSizTotal
 15364 000014BB BF[1F9E]                	mov	di,FileSiz
 15365 000014BE A5                      	movsw
 15366 000014BF A5                      	movsw				; move total size to size variable
 15367 000014C0 E8FC05                  	call	DisplayCntSiz		; display file count & size &
 15368                                  dtFree: 				;   (maybe) compression ratio
 15369 000014C3 B436                    	mov	ah,36h
 15370                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 15371 000014C5 8A165C00                	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 15372 000014C9 CD21                    	int	21h			; call DOS
 15373 000014CB 83F8FF                  	cmp	ax,-1			; check 'invalid drive' return code
 15374 000014CE 74B9                    	jz	short dtRet		; can't get drive space - return
 15375 000014D0 F7E1                    	mul	cx
 15376 000014D2 F7E3                    	mul	bx
 15377 000014D4 A3[9AA0]                	mov	[Bytes_Free],ax
 15378 000014D7 8916[9CA0]              	mov	[Bytes_Free+2],dx
 15379 000014DB BA[1E92]                	mov	dx,bytmes_ptr
 15380 000014DE E82E40                  	call	std_printf		; "nnn bytes free",cr,lf
 15381                                  	;call	UseLine
 15382                                  ;dtRet:
 15383                                  	;retn
 15384                                  	; 18/02/2023
 15385 000014E1 E9D503                  	jmp	UseLine
 15386                                  
 15387                                  ; ---------------------------------------------------------------------------
 15388                                  
 15389                                  ;***	FileIsDevice - see if file looks like a device
 15390                                  ;
 15391                                  ;	ENTRY	PathPos = ptr to pathname
 15392                                  ;		PathCnt = length of pathname w/o terminating char
 15393                                  ;		DirBuf is DOS DTA
 15394                                  ;
 15395                                  ;	EXIT	ZR = set if file looks like a device
 15396                                  ;
 15397                                  ;	USED	AX,BX,CX,DX,DI
 15398                                  ;
 15399                                  ;	EFFECTS
 15400                                  ;
 15401                                  ;	  DTA buffer holds results of Find First function
 15402                                  ;
 15403                                  ;	NOTES
 15404                                  ;
 15405                                  ;	  We try to flag devices in two ways. First, we try
 15406                                  ;	  the DOS Find First function. It returns attribute bit 6
 15407                                  ;	  set on a successful find if it identifies a device name.
 15408                                  ;	  Unfortunately, it returns 'path not found' for a device
 15409                                  ;	  name terminated with colon, such as "CON:". So, we look
 15410                                  ;	  for any colon in the pathname after the 2nd character,
 15411                                  ;	  and flag the pathname as a device if we find one.
 15412                                  
 15413                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15414                                  FileIsDevice:
 15415 000014E4 8B16[80A0]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 15416                                  
 15417 000014E8 89D7                    	mov	di,dx
 15418 000014EA 033E[7EA0]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 15419 000014EE 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 15420 000014F0 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 15421                                  
 15422 000014F2 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 15423 000014F4 B44E                    	mov	ah,4Eh
 15424                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 15425 000014F6 CD21                    	int	21h	 	 ; call DOS
 15426 000014F8 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 15427 000014FA 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 15428                                  
 15429                                  ;	Found a dir entry, see if Find First thinks it's a device.
 15430                                  
 15431                                  	;test	byte [DIRBUF+21],40h
 15432 000014FC F606[3FA0]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 15433 00001501 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 15434 00001503 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 15435                                  	;jmp	short piRet
 15436                                  	; 25/04/2023
 15437                                  piRet:
 15438 00001505 C3                      	retn
 15439                                  
 15440                                  ;	Device attribute not returned by Find First function. But
 15441                                  ;	let's check for a colon anywhere in the pathname after the
 15442                                  ;	second byte.
 15443                                  ;
 15444                                  ;	DI = ptr to byte after pathname
 15445                                  
 15446                                  piCol:
 15447 00001506 4F                      	dec	di		 ; DI = ptr to last char in pathname
 15448 00001507 B03A                    	mov	al,':'
 15449                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 15450 00001509 8B0E[7EA0]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 15451 0000150D 49                      	dec	cx
 15452 0000150E 49                      	dec	cx		 ; ignore 1st two chars of pathname
 15453 0000150F 09C9                    	or	cx,cx
 15454 00001511 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 15455 00001513 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 15456 00001515 FD                      	std			 ; scan downward
 15457 00001516 F2AE                    	repne	scasb
 15458 00001518 FC                      	cld			 ; restore default upward direction
 15459                                  
 15460                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 15461                                  ;piRet:
 15462 00001519 C3                      	retn
 15463                                  
 15464                                  ;FileIsDevice endp
 15465                                  
 15466                                  ; ---------------------------------------------------------------------------
 15467                                  
 15468                                  ;***	FindFirst - find first directory entry to display
 15469                                  ;***	FindNext - find next directory entry to display
 15470                                  ;
 15471                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 15472                                  ;		AttrSpecified, AttrSelect are set
 15473                                  ;
 15474                                  ;	EXIT	CY = clear if successful
 15475                                  ;		BX = offset in TPA buffer of directory entry found
 15476                                  ;
 15477                                  ;		If unsuccessful,
 15478                                  ;		CY = set
 15479                                  ;		AX = DOS error code
 15480                                  ;		DOS Get Extended Error call will get error code
 15481                                  ;
 15482                                  ;		NOTE: if entries were loaded into TPA, AX contains
 15483                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 15484                                  ;		but DOS Get Extended Error call WON'T return the correct
 15485                                  ;		error. That's ok, because we'll see the value in AX
 15486                                  ;		and recognize it as a non-error condition.
 15487                                  ;
 15488                                  ;	USED	AX,CX,DX,SI,DI
 15489                                  ;
 15490                                  ;	EFFECTS
 15491                                  ;
 15492                                  ;	  Entries in memory may be marked as output.
 15493                                  ;	  If not sorted, entry is loaded at TPA.
 15494                                  ;
 15495                                  ;	NOTES
 15496                                  ;
 15497                                  ;	  If we don't find a qualifying file, we return after the final
 15498                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 15499                                  ;	   indicate an appropriate condition.
 15500                                  
 15501                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15502                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15503                                  
 15504                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15505                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1585h
 15506                                  	
 15507                                  FindFirst:
 15508                                  	;mov	ax,offset TRANGROUP:GetFirst
 15509 0000151A B8[F115]                	mov	ax,GetFirst
 15510 0000151D EB03                    	jmp	short ffFindEntry
 15511                                  
 15512                                  	; 18/02/2023
 15513                                  FindNext:
 15514                                  	;mov	ax,offset TRANGROUP:GetNext
 15515 0000151F B8[FF15]                	mov	ax,GetNext
 15516                                  
 15517                                  ;	AX = address of correct disk get routine to use.
 15518                                  
 15519                                  ffFindEntry:
 15520 00001522 06                      	push	es			; save TRANGROUP seg addr
 15521                                  	;;;test	Bits,mask inmem
 15522                                  	;;test	word [_Bits],20h
 15523                                  	;test	byte [_Bits],20h
 15524                                  	; 07/06/2023
 15525 00001523 F606[7CA0]40            	test	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0
 15526 00001528 7405                    	jz	short ffDisk		; entries not in memory, search disk
 15527                                  
 15528                                  ;	Entries are loaded in memory to sort out. Find the first one.
 15529                                  ;	There will always be one, or LoadEntries would've failed.
 15530                                  
 15531 0000152A E81A00                  	call	FindInMem		; find first entry in TPA
 15532 0000152D EB16                    	jmp	short ffRet		; return what TPA search returns
 15533                                  
 15534                                  ;	Get entry from disk.
 15535                                  
 15536                                  ffDisk:
 15537 0000152F FFD0                    	call	ax			; get entry from disk
 15538 00001531 720E                    	jc	short ffGetErr		; get & return error
 15539 00001533 8E06[F59D]              	mov	es,[TPA]		; ES = seg addr of TPA
 15540 00001537 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 15541 00001539 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 15542 0000153B E85F01                  	call	LoadEntry		; load entry to TPA
 15543 0000153E F8                      	clc				; return success
 15544 0000153F EB04                    	jmp	short ffRet
 15545                                  
 15546                                  ffGetErr:
 15547 00001541 E8FE0C                  	call	 get_ext_error_number	; AX = DOS error code
 15548 00001544 F9                      	stc
 15549                                  ffRet:
 15550 00001545 07                      	pop	es			; ES = TRANGROUP seg addr again
 15551 00001546 C3                      	retn
 15552                                  
 15553                                  ; ---------------------------------------------------------------------------
 15554                                  
 15555                                  ;***	FindInMem - find next directory entry in TPA buffer
 15556                                  ;
 15557                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 15558                                  ;
 15559                                  ;	EXIT	BX = offset in TPA of entry found
 15560                                  ;
 15561                                  ;		If no more files,
 15562                                  ;		CY = set
 15563                                  ;		AX = DOS 'no more files' error code
 15564                                  ;
 15565                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 15566                                  ;
 15567                                  ;	EFFECTS
 15568                                  ;
 15569                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 15570                                  
 15571                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15572                                  FindInMem:
 15573 00001547 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 15574 0000154B 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 15575 0000154D FC                      	cld				; make sure default string direction is up
 15576                                  	
 15577 0000154E E86D00                  	call	FindOneInMem		; locate an entry
 15578 00001551 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 15579                                  
 15580                                  ;	BX = ptr to entry in TPA
 15581                                  
 15582                                  fiBest:
 15583 00001553 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 15584                                  fiNext:
 15585 00001555 E87300                  	call	FindNextInMem		; locate next entry
 15586 00001558 720C                    	jc	short fiFound		; no more, best entry so far wins
 15587                                  
 15588                                  ;	BX = ptr to next entry
 15589                                  
 15590 0000155A E86CFE                  	call	CmpEntry		; compare it to best found so far (BP)
 15591 0000155D 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 15592 0000155F EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 15593                                  
 15594                                  fiNoMore:
 15595                                  
 15596                                  ;	No more entries available in TPA. Set up 'no more files' error.
 15597                                  
 15598                                  	;mov	ax,18
 15599 00001561 B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 15600 00001564 F9                      	stc				; return error
 15601                                  	;jmp	short fiRet
 15602                                  	; 18/02/2023
 15603 00001565 C3                      	retn
 15604                                  
 15605                                  fiFound:
 15606 00001566 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 15607 00001568 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 15608 0000156C F8                      	clc				; return success
 15609                                  fiRet:
 15610 0000156D C3                      	retn
 15611                                  
 15612                                  ; ---------------------------------------------------------------------------
 15613                                  
 15614                                  ;***	FindNextChild - find next subdirectory in current directory
 15615                                  ;
 15616                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 15617                                  ;		DirBuf is established DTA
 15618                                  ;
 15619                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 15620                                  ;
 15621                                  ;		If failure,
 15622                                  ;		CY = set
 15623                                  ;		DOS Get Extended Error call will get error
 15624                                  ;
 15625                                  ;	USED	AX,CX,DX,SI,DI,BP
 15626                                  ;
 15627                                  ;	EFFECTS
 15628                                  ;
 15629                                  ;	  DirBuf is used for find first/next calls.
 15630                                  ;
 15631                                  ;	NOTES
 15632                                  ;
 15633                                  ;	  We keep on checking files until DOS returns an error. If
 15634                                  ;	  the error is 'no more files' and the temp filename is not
 15635                                  ;	  the initial high tag, copy the temp to the child's name spot
 15636                                  ;	  and return success. Otherwise, send the error back to caller.
 15637                                  ;
 15638                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 15639                                  
 15640                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15641                                  FindNextChild:
 15642 0000156E 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 15643                                  	;shove	00FFh			; temp filename = high tag
 15644 00001571 B8FF00                  	mov	ax,0FFh
 15645 00001574 50                      	push	ax
 15646 00001575 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 15647                                  	;shove	"*"	
 15648 00001577 B02A                    	mov	al,'*'  ; ax = 002Ah
 15649 00001579 50                      	push	ax
 15650                                  	;;shove	".*" 
 15651                                  	;mov	ax,"*."
 15652                                  	;mov	ax,2E2Ah
 15653 0000157A B42E                    	mov	ah,'.'
 15654 0000157C 50                      	push	ax
 15655 0000157D E87D05                  	call	GetDriveLtr		; AX = "d:"
 15656 00001580 50                      	push	ax
 15657 00001581 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 15658                                  
 15659                                  ;	See that the stack is restored properly at the end of this proc.
 15660                                  
 15661                                  	;mov	cx,10h
 15662 00001583 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15663 00001586 B44E                    	mov	ah,4Eh
 15664                                  	;mov	ah,Find_First
 15665 00001588 CD21                    	int	21h			; DOS- Find First matching file
 15666 0000158A 722C                    	jc	short fcRet		; return error
 15667                                  
 15668 0000158C E815FE                  	call	CheckChild		; check child against last, temp
 15669                                  fcNext:	
 15670                                  	;mov	cx,10h
 15671 0000158F B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15672 00001592 B44F                    	mov	ah,4Fh
 15673                                  	;mov	ah,Find_Next
 15674 00001594 CD21                    	int	21h			; DOS- Find Next matching file
 15675 00001596 7205                    	jc	short fcErr		; examine error
 15676                                  
 15677 00001598 E809FE                  	call	CheckChild		; check child against last, temp
 15678 0000159B EBF2                    	jmp	short fcNext		; go find another child
 15679                                  
 15680                                  fcErr:
 15681 0000159D E8A20C                  	call	get_ext_error_number	; AX = extended error code
 15682                                  	;cmp	ax,18
 15683 000015A0 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 15684 000015A3 7512                    	jne	short fcNope		; some other error- return it
 15685                                  
 15686                                  ;	We ran out of files. See if we qualified at least one.
 15687                                  
 15688 000015A5 807E00FF                	cmp	byte [bp],0FFh
 15689 000015A9 740C                    	je	short fcNope		; temp filename is unused- no child
 15690                                  
 15691                                  ;	Move temp filename to child name position.
 15692                                  
 15693 000015AB 89EE                    	mov	si,bp			; SI = ptr to temp filename
 15694 000015AD 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 15695                                  fcMove:
 15696 000015AF AC                      	lodsb				; AL = next byte of filename
 15697 000015B0 AA                      	stosb				; store byte
 15698 000015B1 08C0                    	or	al,al
 15699 000015B3 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 15700 000015B5 EBF8                    	jmp	short fcMove		; go move another byte
 15701                                  fcNope:
 15702 000015B7 F9                      	stc				; return error
 15703                                  fcRet:
 15704 000015B8 9F                      	lahf
 15705 000015B9 83C414                  	add	sp,20			; restore stack
 15706 000015BC 9E                      	sahf
 15707 000015BD C3                      	retn
 15708                                  
 15709                                  ; ---------------------------------------------------------------------------
 15710                                  
 15711                                  ;***	FindOneInMem - find the first available entry in TPA
 15712                                  ;***	FindNextInMem - find the next available entry in TPA
 15713                                  ;
 15714                                  ;	ENTRY	ES = TPA seg addr
 15715                                  ;		BX = ptr to entry in TPA
 15716                                  ;
 15717                                  ;	EXIT	BX = ptr to entry found
 15718                                  ;		CY = set if no more entries available in TPA
 15719                                  ;
 15720                                  ;	USED	AL
 15721                                  
 15722                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15723                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15724                                  FindOneInMem:
 15725 000015BE 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 15726 000015C1 3C01                    	cmp	al,1
 15727 000015C3 7406                    	je	short FindNextInMem	; entry has already been used
 15728 000015C5 3CFF                    	cmp	al,0FFh
 15729 000015C7 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 15730                                  
 15731                                  ;	BX = ptr to entry that hasn't been output yet.
 15732                                  
 15733 000015C9 F8                      	clc				; return success
 15734 000015CA C3                      	retn
 15735                                  
 15736                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15737                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:163Ah
 15738                                  FindNextInMem:
 15739                                  	; 07/06/2023
 15740                                  	;add	bx,21 ; MSDOS 5.0
 15741                                  	; 07/06/2023
 15742 000015CB 83C316                  	add	bx,22 ; MSDOS 6.0  ; size EntryStruc (22 = 21 + compratio)
 15743                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 15744 000015CE EBEE                    	jmp	short FindOneInMem	; go look at it
 15745                                  foNoMore:
 15746 000015D0 F9                      	stc				; ran out of entries, return failure
 15747 000015D1 C3                      	retn
 15748                                  
 15749                                  ; ---------------------------------------------------------------------------
 15750                                  
 15751                                  ;***	GetEnvValue - get value of our environment variable
 15752                                  ;
 15753                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 15754                                  ;
 15755                                  ;	EXIT	CY = set if environment variable not in environment
 15756                                  ;
 15757                                  ;		Otherwise:
 15758                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 15759                                  ;
 15760                                  ;	USED	AX,BX,CX,DX,DI
 15761                                  ;		(We assume the (almost) worst, since we don't know about
 15762                                  ;		Find_Name_In_Environment.)
 15763                                  ;
 15764                                  ;	EFFECTS
 15765                                  ;
 15766                                  ;	  ScanBuf is loaded with value text
 15767                                  
 15768                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15769                                  GetEnvValue:
 15770 000015D2 06                      	push	es				; save ES
 15771                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 15772 000015D3 BE[9B94]                	mov	si,DirEnvVar	; "DIRCMD="
 15773                                  	;invoke	Find_Name_In_Environment
 15774 000015D6 E88C12                  	call	find_name_in_environment
 15775 000015D9 7214                    	jc	short geRet			; name not found in environment
 15776                                  
 15777                                  ;	ES:DI = ptr to value of environment variable
 15778                                  ;	We're assuming DS, CS, and SS are unchanged.
 15779                                  
 15780 000015DB 1E                      	push	ds
 15781 000015DC 06                      	push	es
 15782 000015DD 1F                      	pop	ds
 15783 000015DE 07                      	pop	es
 15784                                  
 15785                                  	;assume	ds:nothing
 15786                                  
 15787                                  ;	DS = seg addr of environment variable value (in environment segment)
 15788                                  ;	ES = TRANGROUP seg addr
 15789                                  
 15790 000015DF 89FE                    	mov	si,di				; DS:SI = ptr to value string
 15791                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 15792 000015E1 BF[6CA1]                	mov	di,ScanBuf
 15793                                  geLoop:
 15794                                  ;@@:	
 15795 000015E4 AC                      	lodsb
 15796 000015E5 08C0                    	or	al,al
 15797 000015E7 AA                      	stosb
 15798                                  	;loopnz	@B		; move the string, including trailing null
 15799 000015E8 E0FA                    	loopnz	geLoop
 15800                                  
 15801 000015EA 06                      	push	es
 15802 000015EB 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 15803                                  	;assume	ds:TRANGROUP
 15804                                  
 15805                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 15806 000015EC BE[6CA1]                	mov	si,ScanBuf
 15807                                  geRet:
 15808 000015EF 07                      	pop	es				; restore ES
 15809 000015F0 C3                      	retn
 15810                                  
 15811                                  ; ---------------------------------------------------------------------------
 15812                                  
 15813                                  ;***	GetFirst - get first directory entry from disk
 15814                                  ;
 15815                                  ;	ENTRY	DOS DTA established at DirBuf
 15816                                  ;		FCB contains drive # and filename
 15817                                  ;		Current directory (on selected drive) is the one to search
 15818                                  ;		AttrSpecified & AttrSelect masks set
 15819                                  ;
 15820                                  ;	EXIT	CY = clear if success
 15821                                  ;		DirBuf contains extended FCB for file found
 15822                                  ;
 15823                                  ;		If unsuccessful,
 15824                                  ;		CY = set
 15825                                  ;		Ready for DOS Get Extended Error call
 15826                                  ;
 15827                                  ;	USED	AX,DX
 15828                                  ;
 15829                                  ;	EFFECTS
 15830                                  ;
 15831                                  ;	  FCB-7 = 0FFh to mark extended FCB
 15832                                  ;	  FCB-1 = attribute mask to find all files
 15833                                  ;	  These fields should remain unmodified for GetNext calls.
 15834                                  ;
 15835                                  ;***	GetNext - get next directory entry from disk
 15836                                  ;
 15837                                  ;	ENTRY	As for GetFirst, plus
 15838                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 15839                                  ;
 15840                                  ;	EXIT	As for GetFirst
 15841                                  ;
 15842                                  ;	USED	AX,DX
 15843                                  
 15844                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15845                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15846                                  
 15847                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15848                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1660h
 15849                                  GetFirst:
 15850                                  	;mov	byte [55h],0FFh	; -1
 15851 000015F1 C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 15852                                  	;mov	byte [5Bh],16h
 15853 000015F6 C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 15854                                  					; find any file
 15855                                  	; 07/06/2023
 15856                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 15857 000015FB B411                    	mov	ah,11h
 15858                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 15859                                  	; 07/06/2023
 15860                                  	;int	21h			; call DOS
 15861                                  	;shl	al,1			; CY = set if error
 15862                                  	;jc	short gfRet		; return error
 15863                                  	;jmp	short gfFound		; go look at attr's
 15864                                  	; 07/06/2023
 15865 000015FD EB02                    	jmp	short GetFrstNxt
 15866                                  GetNext:
 15867                                  	; 07/06/2023
 15868                                  	;;mov	dx,55h
 15869                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 15870 000015FF B412                    	mov	ah,12h
 15871                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 15872                                  GetFrstNxt:
 15873                                  	; 07/06/2023
 15874 00001601 BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 15875                                  	;
 15876 00001604 CD21                    	int	21h			; call DOS
 15877 00001606 D0E0                    	shl	al,1			; CY = set if error
 15878 00001608 7211                    	jc	short gfRet		; return error
 15879                                  
 15880                                  ;*	Found an entry. Check attributes.
 15881                                  gfFound:
 15882                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 15883                                  	;mov	al,[DIRBUF+19]
 15884 0000160A A0[3DA0]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 15885 0000160D 8A26[84A0]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 15886 00001611 20E0                    	and	al,ah			; AL = pertinent attr's of file
 15887 00001613 2226[85A0]              	and	ah,[AttrSelect]		; AH = attr settings to match
 15888 00001617 38E0                    	cmp	al,ah
 15889 00001619 75E4                    	jne	short GetNext		; attr's don't match, look for another
 15890                                  gfRet:
 15891 0000161B C3                      	retn
 15892                                  
 15893                                  ; ---------------------------------------------------------------------------
 15894                                  
 15895                                  ;***	ListDir - search for and list files in the current directory
 15896                                  ;
 15897                                  ;	List header, files, and trailer for current directory on selected
 15898                                  ;	drive. Header & trailer are listed if at least one file is found.
 15899                                  ;	If no qualifying files are found, no display output occurs.
 15900                                  ;
 15901                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 15902                                  ;		FCB contains selected drive # and filename spec
 15903                                  ;		Option bits, attribute masks, and sort codes set up
 15904                                  ;
 15905                                  ;	EXIT	CY = clear if no error
 15906                                  ;		FileCnt = # files found & displayed
 15907                                  ;
 15908                                  ;		If error,
 15909                                  ;		CY = set
 15910                                  ;		Ready for DOS Get Extended Error call
 15911                                  ;
 15912                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15913                                  ;		FileSiz
 15914                                  ;
 15915                                  ;	EFFECTS
 15916                                  ;
 15917                                  ;	  FileCntTotal, FileSizTotal are updated.
 15918                                  ;	  Files found are listed. A directory header and trailer are
 15919                                  ;	   displayed only if files are found.
 15920                                  
 15921                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15922                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 15923                                  
 15924                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 15925                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1694h
 15926                                  ListDir:
 15927 0000161C 31C0                    	xor	ax,ax ; 0
 15928 0000161E A3[1D9E]                	mov	[FileCnt],ax		; zero file count
 15929 00001621 A3[1F9E]                	mov	[FileSiz],ax		; zero file size accumulator
 15930 00001624 A3[219E]                	mov	[FileSiz+2],ax
 15931                                  
 15932                                  	; 08/06/2023
 15933                                  	; MSDOS 6.0
 15934                                  ;ifdef DBLSPACE_HOOKS
 15935 00001627 A3[2D9E]                	mov	[ccluUsedDir],ax 	; zero count clusters used
 15936 0000162A A3[359E]                	mov	[csecUsedDir],ax	; zero count compressed sectors used
 15937 0000162D A3[379E]                	mov	[csecUsedDir+2],ax
 15938                                  ;endif	
 15939                                  	;cmp	byte [DestBuf],0	; check for sort code
 15940                                  	; 31/07/2024
 15941 00001630 3806[AFA0]              	cmp	[DestBuf],al ; 0
 15942 00001634 740A                    	je	short ld1		; no sort
 15943 00001636 E83000                  	call	LoadEntries		; load entries for sorted listing
 15944 00001639 7305                    	jnc	short ld1		; no error - continue
 15945 0000163B E8040C                  	call	get_ext_error_number	; AX = DOS error code
 15946                                  	; 19/02/2023
 15947                                  	;stc
 15948 0000163E EB12                    	jmp	short ldErr		; return error
 15949                                  ld1:
 15950 00001640 E8D7FE                  	call	FindFirst		; find first file
 15951 00001643 720D                    	jc	short ldErr		; not found, return error
 15952                                  
 15953                                  ;	BX = offset in TPA buffer of entry found
 15954                                  
 15955 00001645 E82B03                  	call	DisplayHeader		; if at least one file, display header
 15956                                  ldNext:
 15957 00001648 E8F902                  	call	DisplayFile		; display the file entry
 15958                                  ;ldNext:
 15959 0000164B E8D1FE                  	call	FindNext		; find another file
 15960 0000164E 7202                    	jc	short ldErr		; not found
 15961                                  	;call	DisplayFile		; display entry
 15962                                  	;jmp	short ldNext		; go find another one
 15963                                  	; 19/02/2023
 15964 00001650 EBF6                    	jmp	short ldNext
 15965                                  ldErr:
 15966                                  	;cmp	ax,2
 15967 00001652 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 15968 00001655 7407                    	je	short ldDone		; file not found, we're done
 15969                                  	;cmp	ax,18
 15970 00001657 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 15971 0000165A 7402                    	je	short ldDone		; no more files, we're done
 15972 0000165C F9                      	stc
 15973                                  	;jmp	short ldRet
 15974                                  	; 19/02/2023
 15975 0000165D C3                      	retn
 15976                                  ldDone:
 15977 0000165E 833E[1D9E]00            	cmp	word [FileCnt],0
 15978                                  	;je	short ld2		; no files found, just return
 15979                                  	; 25/04/2023
 15980 00001663 7403                    	jz	short ldRet
 15981 00001665 E84704                  	call	DisplayTrailer		; display trailing info
 15982                                  	; 08/06/2023
 15983                                  	; cf=0
 15984                                  ;ld2:	
 15985                                  	;clc				; return success
 15986                                  ldRet:
 15987 00001668 C3                      	retn
 15988                                  
 15989                                  ; ---------------------------------------------------------------------------
 15990                                  
 15991                                  ;***	LoadEntries - attempt to load entries from current directory
 15992                                  ;
 15993                                  ;	Load all qualifying directory entries from the current directory
 15994                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 15995                                  ;	other than 'no more files', return to caller with carry flag set.
 15996                                  ;	If we run out of buffer space, display a message that we haven't
 15997                                  ;	enough memory to sort this directory, but return without error.
 15998                                  ;	Other routines know whether or not entries have been loaded by
 15999                                  ;	the 'inmem' flag bit, which we set here.
 16000                                  ;
 16001                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 16002                                  ;	this allows sorting over 3000 entries in a directory.
 16003                                  ;
 16004                                  ;	ENTRY	Tpa = buffer seg addr
 16005                                  ;		BytCnt = buffer length, in bytes
 16006                                  ;		Current directory (on selected drive) is the one to load
 16007                                  ;		FCB contains drive # and filespec
 16008                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 16009                                  ;
 16010                                  ;	EXIT	CY = set if error
 16011                                  ;		If error, DOS Get Extended Error will get error info
 16012                                  ;
 16013                                  ;	USED	AX,CX,DX,SI,DI
 16014                                  ;
 16015                                  ;	EFFECTS
 16016                                  ;
 16017                                  ;	  Inmem bit of Bits = set if load succeeded.
 16018                                  ;	  Tpa buffer contains directory entries.
 16019                                  ;	  Byte after last entry = 0FFh.
 16020                                  
 16021                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16022                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16023                                  LoadEntries:
 16024 00001669 06                      	push	es			; save TRANGROUP seg addr
 16025 0000166A 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 16026 0000166E 31FF                    	xor	di,di			; ES:DI = destination ptr
 16027                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 16028                                  	; MSDOS 5.0
 16029                                  	;;and	word [_Bits],0FFDFh
 16030                                  	;and	byte [_Bits],0DFh	; not 20h
 16031                                  	; 08/06/2023
 16032                                  	;and	byte [_Bits],0BFh	; ~20h ; MSDOS 6.0
 16033 00001670 8026[7CA0]BF            	and	byte [_Bits],~mask.inmem ; 0BFh ; MSDOS 6.0
 16034                                  
 16035 00001675 E879FF                  	call	GetFirst		; look for first file
 16036 00001678 7221                    	jc	short leRet		; return any error
 16037 0000167A E82000                  	call	LoadEntry		; load entry into TPA
 16038                                  leNext:
 16039 0000167D E87FFF                  	call	GetNext			; get another file
 16040 00001680 720F                    	jc	short leLoaded		; assume any error is no more files
 16041 00001682 A1[129E]                	mov	ax,[BYTCNT]		; AX = size of TPA
 16042 00001685 29F8                    	sub	ax,di			; AX = bytes left in TPA
 16043                                  	; 08/06/2023
 16044                                  	;;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 16045                                  	;cmp	ax,23 ; 21+2 ; MSDOS 5.0
 16046 00001687 83F818                  	cmp	ax,24 ; 22+2 ; MSDOS 6.0
 16047 0000168A 720E                    	jb	short leOk		; not enough memory left, give up
 16048 0000168C E80E00                  	call	LoadEntry		; load entry into TPA
 16049 0000168F EBEC                    	jmp	short leNext		; go get another file
 16050                                  
 16051                                  leLoaded:
 16052 00001691 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 16053                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 16054                                  	; MSDOS 5.0
 16055                                  	;;or	word [_Bits],20h
 16056                                  	;or	byte [_Bits],20h
 16057                                  	; 08/06/2023
 16058                                  	;or	byte [_Bits],40h	; MSDOS 6.0
 16059 00001695 800E[7CA0]40            	or	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0 
 16060                                  	; 25/04/2023
 16061                                  	; cf = 0
 16062                                  leOk:
 16063 0000169A F8                      	clc				; return no error
 16064                                  leRet:
 16065 0000169B 07                      	pop	es			; ES = TRANGROUP seg addr again
 16066 0000169C C3                      	retn
 16067                                  
 16068                                  ; ---------------------------------------------------------------------------
 16069                                  
 16070                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 16071                                  ;
 16072                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 16073                                  ;		DirBuf contains extended FCB of entry to load
 16074                                  ;
 16075                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 16076                                  ;
 16077                                  ;	USED	AX,CX,SI
 16078                                  ;
 16079                                  ;	NOTES
 16080                                  ;
 16081                                  ;	  I could've used symbolic offsets and sizes of fields from
 16082                                  ;	   the dir_entry struc to do this, but this is time-critical,
 16083                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 16084                                  ;	   as well as our private directory entry structure.
 16085                                  ;
 16086                                  ;	  We force a zero size for subdirectory files. A zero size is
 16087                                  ;	   ordinarily returned for subdirectories, but with Novell
 16088                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 16089                                  
 16090                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16091                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 16092                                  	
 16093                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16094                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:171Ch
 16095                                  LoadEntry:
 16096                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 16097 0000169D BE[32A0]                	mov	si,DIRBUF+8
 16098 000016A0 30C0                    	xor	al,al				; AL = 0
 16099 000016A2 AA                      	stosb					; 'used' byte = false
 16100 000016A3 B90B00                  	mov	cx,11
 16101 000016A6 F3A4                    	rep	movsb				; transfer filename & extension
 16102 000016A8 AC                      	lodsb					; AL = attrib byte
 16103 000016A9 AA                      	stosb					; store attrib byte
 16104                                  	;add	si,10 ; 22-11-1
 16105                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 16106 000016AA 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 16107 000016AD A5                      	movsw					; transfer time
 16108 000016AE A5                      	movsw					; transfer date
 16109                                  
 16110                                  ; 08/06/2023
 16111                                  ; MSDOS 5.0
 16112                                  %if 0
 16113                                  	inc	si				; skip alloc unit
 16114                                  	inc	si
 16115                                  	;and	al,10h
 16116                                  	and	al,ATTR_DIRECTORY
 16117                                  	jnz	short leSetDirSize		; force zero size for subdir
 16118                                  	movsw
 16119                                  	movsw					; transfer size
 16120                                  	retn
 16121                                  leSetDirSize:
 16122                                  	xor	ax,ax ; 0
 16123                                  	stosw
 16124                                  	stosw					; store zero size
 16125                                  	retn
 16126                                  %endif
 16127                                  
 16128                                  ; 08/06/2023
 16129                                  ; MSDOS 6.0
 16130                                  %if 1
 16131                                  ;ifdef DBLSPACE_HOOKS
 16132 000016AF 88C1                    	mov	cl,al				; attrib to cl
 16133 000016B1 AD                      	lodsw					; allocation unit (cluster
 16134                                  	;and	cl,10h
 16135 000016B2 80E110                  	and	cl,ATTR_DIRECTORY
 16136 000016B5 751E                    	jnz	short leSetDirSize		; force zero size for subdir
 16137 000016B7 A5                      	movsw
 16138 000016B8 A5                      	movsw					; transfer size
 16139                                  	
 16140                                  	;;test	word [_Bits],1
 16141                                  	;test	word [_Bits],mask.cratio	; compression ratio report?
 16142 000016B9 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 16143 000016BE 7504                    	jnz	short leCalcRatio		; yup
 16144                                  
 16145 000016C0 31C0                    	xor	ax,ax
 16146 000016C2 AA                      	stosb					; dummy compression ratio
 16147 000016C3 C3                      	retn
 16148                                  leCalcRatio:
 16149 000016C4 E83106                  	call	CalcCompRatio			; takes cluster in AX
 16150 000016C7 09C0                    	or	ax,ax				;   returns ratio in AX
 16151 000016C9 740E                    	jz	short leNoRatio			; 0 means couldn't calculate
 16152 000016CB FECC                    	dec	ah				; pack 1.0 - 16.0 comp ratio
 16153 000016CD B104                    	mov	cl,4				;   into 2 nibbles.  Store
 16154 000016CF D2E4                    	shl	ah,cl				;   1-16 as 0-15 in hi nibble,
 16155 000016D1 08E0                    	or	al,ah				;   tenths (0-9) in low nibble
 16156 000016D3 AA                      	stosb
 16157 000016D4 C3                      	retn
 16158                                  leSetDirSize:
 16159 000016D5 31C0                    	xor	ax,ax ; 0
 16160 000016D7 AB                      	stosw
 16161 000016D8 AB                      	stosw					; store zero size
 16162                                  leNoRatio:
 16163 000016D9 FEC8                    	dec	al				; al = FFh = special invalid
 16164 000016DB AA                      	stosb					; compression ratio
 16165 000016DC C3                      	retn
 16166                                  ;endif
 16167                                  %endif
 16168                                  
 16169                                  ; ---------------------------------------------------------------------------
 16170                                  
 16171                                  ;***	NoOrder - turn sorting off
 16172                                  ;
 16173                                  ;	ENTRY	nothing
 16174                                  ;
 16175                                  ;	EXIT	CY clear
 16176                                  ;
 16177                                  ;	USED	AX
 16178                                  ;
 16179                                  ;	EFFECTS
 16180                                  ;
 16181                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 16182                                  
 16183                                  	; 19/02/2023
 16184                                  NoOrder:
 16185 000016DD C606[AFA0]00            	mov	byte [DestBuf],0
 16186                                  				; no sort
 16187 000016E2 F8                      	clc			; no error
 16188 000016E3 C3                      	retn
 16189                                  
 16190                                  ; ---------------------------------------------------------------------------
 16191                                  
 16192                                  ;***	OnOffSw - record occurence of on/off option switch
 16193                                  ;
 16194                                  ;	ENTRY	DI = index into word list of switches
 16195                                  ;
 16196                                  ;	EXIT	CY clear
 16197                                  ;
 16198                                  ;	USED	AX,CX
 16199                                  ;
 16200                                  ;	EFFECTS
 16201                                  ;
 16202                                  ;	  Bits modified to indicate option state.
 16203                                  
 16204                                  	; 19/02/2023
 16205                                  OnOffSw:
 16206 000016E4 89F9                    	mov	cx,di		; CX = index into word list of options
 16207 000016E6 D1E9                    	shr	cx,1
 16208 000016E8 D1E9                    	shr	cx,1		; CX = bit position of option
 16209 000016EA B80100                  	mov	ax,1		
 16210 000016ED D3E0                    	shl	ax,cl		; AX = bit mask of option
 16211 000016EF F7C70200                	test	di,2		; check if it is a negated option
 16212 000016F3 7405                    	jz	short oo1	; it's negated
 16213                                  	;or	Bits,ax		; turn option on
 16214 000016F5 0906[7CA0]              	or	[_Bits],ax
 16215                                  	;jmp	short ooRet
 16216                                  	; 19/02/2023
 16217                                  	;cf=0
 16218 000016F9 C3                      	retn
 16219                                  oo1:	
 16220 000016FA F7D0                    	not	ax		; AX = complemented bit mask of option
 16221                                  	;and	Bits,ax		; turn option off
 16222 000016FC 2106[7CA0]              	and	[_Bits],ax
 16223                                  ooRet:
 16224                                  	; 19/02/2023
 16225                                  	;cf=0
 16226                                  	;clc			; always return success
 16227 00001700 C3                      	retn
 16228                                  
 16229                                  ; ---------------------------------------------------------------------------
 16230                                  
 16231                                  ;***	ParseAttr - parse and record /A option
 16232                                  ;
 16233                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 16234                                  ;
 16235                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 16236                                  ;
 16237                                  ;		For parse error, we set up for Std_EPrintf call:
 16238                                  ;		AX = parse error code, like system parser
 16239                                  ;		DX = ptr to message block
 16240                                  ;
 16241                                  ;	USED	AX,CX,DX,DI
 16242                                  ;
 16243                                  ;	EFFECTS
 16244                                  ;
 16245                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 16246                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 16247                                  ;
 16248                                  ;	  For parse error, we set up for Std_EPrintf call:
 16249                                  ;	  Msg_Disp_Class = parse error message class
 16250                                  ;	  Message block (see DX) is set up for parse error message
 16251                                  
 16252                                  	; 19/02/2023
 16253                                  ParseAttr:
 16254 00001701 56                      	push	si			; save SI
 16255 00001702 C606[84A0]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 16256                                  
 16257                                  ;	Each /A invocation starts by assuming all files are to be listed.
 16258                                  
 16259                                  	;;mov	si,word ptr [bx].ValuePtr
 16260                                  					; SI = ptr to string after /A
 16261                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16262 00001707 8B7704                  	mov	si,[bx+4]
 16263                                  paLoop:	
 16264 0000170A BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 16265 0000170D AC                      	lodsb				; AL = next char in string
 16266 0000170E 08C0                    	or	al,al
 16267                                  	;jz	short paOk		; it's terminating null, we're done
 16268                                  	; 19/02/2023
 16269 00001710 742F                    	jz	short paRet ; cf=0
 16270 00001712 3C2D                    	cmp	al,'-'
 16271 00001714 7502                    	jne	short pa1		; not '-', go look for letter
 16272 00001716 4A                      	dec	dx			; DX = 0 (for negated attribute)
 16273 00001717 AC                      	lodsb				; AL = next char
 16274                                  pa1:	
 16275                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 16276                                  					; DI = ptr to attrib letter list
 16277 00001718 BF[6897]                	mov	di,AttrLtrs ; "RHSvDA"
 16278                                  	;mov	cx,6
 16279 0000171B B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 16280 0000171E F2AE                    	repne	scasb			; look for our letter in the list
 16281 00001720 751B                    	jne	short paErr		; not found, return error
 16282                                  
 16283 00001722 F7D1                    	not	cx
 16284                                  	;add	cx,6
 16285 00001724 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 16286                                  
 16287                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 16288                                  ;	starting from bit 0.
 16289                                  
 16290                                  ;	Record this attribute bit in AttrSpecified.
 16291                                  
 16292 00001727 B001                    	mov	al,1
 16293 00001729 D2E0                    	shl	al,cl			; AL = mask for our bit
 16294 0000172B 0806[84A0]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 16295                                  
 16296                                  ;	Record the selected state for this attribute in AttrSelect.
 16297                                  ;	DX = 0 or 1, the selected state for this attribute.
 16298                                  
 16299 0000172F F6D0                    	not	al			; AL = mask for all other bits
 16300 00001731 2006[85A0]              	and	[AttrSelect],al		; clear our bit
 16301 00001735 D2E2                    	shl	dl,cl			; DL = our bit state in position
 16302 00001737 0816[85A0]              	or	[AttrSelect],dl		; set selected attr state
 16303 0000173B EBCD                    	jmp	short paLoop		; go look at next char
 16304                                  
 16305                                  ;	The attribute letter string is invalid.
 16306                                  
 16307                                  paErr:	
 16308 0000173D E8CE03                  	call	SetupParamError		; set message up for Std_EPrintf
 16309 00001740 F9                      	stc		   		; return error
 16310                                  	; 19/02/2023
 16311                                  	;jmp	short paRet
 16312                                  ;paOk:
 16313                                  	;clc				; return success		
 16314                                  paRet:	
 16315 00001741 5E                      	pop	si			; restore SI
 16316 00001742 C3                      	retn
 16317                                  
 16318                                  ; ---------------------------------------------------------------------------
 16319                                  
 16320                                  ;***	ParseLine - parse a line of text
 16321                                  ;
 16322                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 16323                                  ;	error occurs.
 16324                                  ;
 16325                                  ;	ENTRY	DS:SI = ptr to text
 16326                                  ;		CS, DS, ES = TRANGROUP seg addr
 16327                                  ;
 16328                                  ;	EXIT	AX = last return code from system parser
 16329                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 16330                                  ;
 16331                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 16332                                  ;		DX = ptr to message block
 16333                                  ;
 16334                                  ;	USED	BX,CX,DX,SI,DI
 16335                                  ;
 16336                                  ;	EFFECTS
 16337                                  ;
 16338                                  ;	  Bits may contain new option settings.
 16339                                  ;	  DestBuf may contain new series of sort codes.
 16340                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 16341                                  ;	  SrcBuf may contain a new default pathname/filespec.
 16342                                  ;	  PathPos, PathCnt updated for new pathname.
 16343                                  ;
 16344                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 16345                                  ;	  Msg_Disp_Class = parse error class
 16346                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 16347                                  ;	  Message block (see DX) is set up for parse error message
 16348                                  
 16349                                  	; 19/02/2023
 16350                                  Parse_Line:
 16351                                  	; 04/05/2023
 16352 00001743 BF[3698]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 16353 00001746 31C9                    	xor	cx,cx			; CX = # positionals found
 16354                                  plPars:
 16355 00001748 E8BE0F                  	call	Parse_With_Msg		; call parser
 16356 0000174B 83F8FF                  	cmp	ax,-1
 16357                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 16358 0000174E 7411                    	je	short plRet		; EOL encountered, return
 16359 00001750 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 16360 00001753 750C                    	jne	short plRet		; parse error occurred, return
 16361                                  
 16362                                  ;	Parse call succeeded. We have a filespec or a switch.
 16363                                  ;	DX = ptr to result buffer
 16364                                  
 16365 00001755 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 16366 00001757 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 16367 0000175A 7406                    	je	short plFil		; we have a filespec
 16368                                  
 16369 0000175C E87500                  	call	ParseSwitch		; else we have a switch
 16370                                  	;jc	short plRet		; error parsing switch, return
 16371                                  	;jmp	short plPars		; parse more
 16372                                  	; 19/02/2023
 16373 0000175F 73E7                    	jnc	short plPars
 16374                                  plRet:
 16375 00001761 C3                      	retn	
 16376                                  plFil:	
 16377 00001762 E8D200                  	call	CopyPathname		; copy pathname into our buffer
 16378 00001765 EBE1                    	jmp	short plPars		; parse more
 16379                                  ;plRet:
 16380                                  ;	retn
 16381                                  
 16382                                  ; ---------------------------------------------------------------------------
 16383                                  
 16384                                  ;***	ParseOrder - parse and record /O option
 16385                                  ;
 16386                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 16387                                  ;
 16388                                  ;	EXIT	CY = set if error occurs parsing order
 16389                                  ;
 16390                                  ;		For parse error, we set up for Std_EPrintf call:
 16391                                  ;		AX = parse error code, like system parser
 16392                                  ;		DX = ptr to message block
 16393                                  ;
 16394                                  ;	USED	AX,CX,DX,DI
 16395                                  ;
 16396                                  ;	EFFECTS
 16397                                  ;
 16398                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 16399                                  ;
 16400                                  ;	  For parse error, we set up for Std_EPrintf call:
 16401                                  ;	  Msg_Disp_Class = parse error message class
 16402                                  ;	  Message block (see DX) is set up for parse error message
 16403                                  
 16404                                  	; 19/02/2023 - Retro DOS v4.0 COMMAND.COM
 16405                                  	;
 16406                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16407                                  	; MSDOS 6.22 COMMAND.COM
 16408                                  ParseOrder:
 16409 00001767 56                      	push	si			; save SI
 16410 00001768 53                      	push	bx			; save ptr to result buffer
 16411                                  
 16412                                  	;;mov	si,word ptr [bx].ValuePtr
 16413                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16414 00001769 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 16415                                  	;mov	bx,offset TRANGROUP:DestBuf
 16416                                  	; 08/06/2023
 16417 0000176C BB[AFA0]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 16418 0000176F 8A04                    	mov	al,[si]			; AL = 1st char of order string
 16419 00001771 08C0                    	or	al,al
 16420 00001773 750E                    	jnz	short poLtr		; not NUL, go parse letters
 16421                                  
 16422                                  ;	We have /O alone. Set standard sort order.
 16423                                  ;	Note hardwired dependency on character order in OrderLtrs.
 16424                                  
 16425 00001775 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 16426 00001778 43                      	inc	bx
 16427 00001779 C60701                  	mov	byte [bx],1		; then by name
 16428 0000177C 43                      	inc	bx
 16429 0000177D C60702                  	mov	byte [bx],2		; then by extension
 16430 00001780 43                      	inc	bx
 16431 00001781 EB2F                    	jmp	short poOk		; return success
 16432                                  
 16433                                  ;	We have /O<something>. Parse sort order letters.
 16434                                  
 16435                                  poLtr:	
 16436 00001783 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 16437 00001785 AC                      	lodsb				; AL = next sort order letter
 16438 00001786 08C0                    	or	al,al
 16439 00001788 7428                    	jz	short poOk		; NUL found, return success
 16440                                  
 16441 0000178A 3C2D                    	cmp	al,'-'
 16442 0000178C 7503                    	jne	short po1		; not '-', go look for letter
 16443 0000178E B280                    	mov	dl,80h			; DL = downward sort mask
 16444 00001790 AC                      	lodsb				; AL = next char
 16445                                  po1:
 16446                                  	;mov	di,offset TRANGROUP:OrderLtrs
 16447                                  	; 08/06/2023
 16448 00001791 BF[6E97]                	mov	di,OrderLtrs ;"NEDSGC"	; DI = ptr to list of letters
 16449                                  	; (NUM_ORDER_LTRS = 6 for MSDOS 6.22 COMMAND.COM)
 16450                                  	; ((N,E,D,S,G for MSDOS 5.0 and N,E,D,S,G,C for MSDOS 6.22)) 
 16451                                  	;mov	cx,6 ; 08/06/2023
 16452 00001794 B90600                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 16453 00001797 F2AE                    	repne	scasb			; look for our letter in the list
 16454 00001799 7510                    	jne	short poErr		; not found, return error
 16455                                  
 16456 0000179B F7D9                    	neg	cx
 16457                                  	;add	cx,6 ; 08/06/2023
 16458 0000179D 83C106                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 16459                                  
 16460 000017A0 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 16461 000017A2 880F                    	mov	[bx],cl			; store sort order code in buffer
 16462 000017A4 43                      	inc	bx			; BX = ptr to next spot in buffer
 16463                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 16464 000017A5 81FB[06A1]              	cmp	bx,EndDestBuf
 16465                                  	;jae	short poErr		; too many letters
 16466                                  	;
 16467                                  	;jmp	short poLtr		; go look at next char
 16468                                  	; 19/02/2023
 16469 000017A9 72D8                    	jb	short poLtr
 16470                                  
 16471                                  ;	The sort order string is invalid.  
 16472                                  
 16473                                  poErr:
 16474 000017AB 5B                      	pop	bx			; BX = ptr to result buffer
 16475 000017AC E85F03                  	call	SetupParamError		; set message up for Std_EPrintf
 16476 000017AF F9                      	stc				; return failure
 16477 000017B0 EB04                    	jmp	short poRet
 16478                                  poOk:	
 16479 000017B2 C60700                  	mov	byte [bx],0		; mark end of sort code list
 16480 000017B5 5B                      	pop	bx			; BX = ptr to result buffer
 16481                                  	; 19/02/2023
 16482                                  	;cf=0
 16483                                  	;clc				; return success
 16484                                  poRet:
 16485 000017B6 5E                      	pop	si			; restore SI
 16486 000017B7 C3                      	retn
 16487                                  
 16488                                  ; ---------------------------------------------------------------------------
 16489                                  ; MSDOS 6.0
 16490                                  	; 08/06/2023
 16491                                  
 16492                                  ;ifdef DBLSPACE_HOOKS
 16493                                  
 16494                                  ;***	ParseRatio - parse and record /C[H] option
 16495                                  ;
 16496                                  ;	ENTRY	BX = ptr to system parser result buffer for /C occurence
 16497                                  ;		DI = index into word list of switches
 16498                                  ;
 16499                                  ;	EXIT	CY = set if error occurs parsing order
 16500                                  ;
 16501                                  ;		For parse error, we set up for Std_EPrintf call:
 16502                                  ;		AX = parse error code, like system parser
 16503                                  ;		DX = ptr to message block
 16504                                  ;
 16505                                  ;	USED	AX,CX,DX,DI
 16506                                  ;
 16507                                  ;	EFFECTS
 16508                                  ;
 16509                                  ;	  Bits modified to indicate option state.
 16510                                  ;	  fUseHostSize is set to zero for /C, non-zero for /CH.
 16511                                  ;
 16512                                  ;	  For parse error, we set up for Std_EPrintf call:
 16513                                  ;	  Msg_Disp_Class = parse error message class
 16514                                  ;	  Message block (see DX) is set up for parse error message
 16515                                  
 16516                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16517                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:184Ch
 16518                                  
 16519                                  ParseRatio:	;proc
 16520 000017B8 E829FF                  	call	OnOffSw			; turn on option bit
 16521 000017BB 56                      	push	si			; save SI
 16522                                  	;;mov	si,word ptr [bx].ValuePtr
 16523                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16524 000017BC 8B7704                  	mov	si,[bx+4]		; SI = ptr to possible H option
 16525 000017BF 8A04                    	mov	al,[si] 		; AL = null or 'H'
 16526 000017C1 08C0                    	or	al,al
 16527 000017C3 740A                    	jz	short prDone		; if null, no H option to check
 16528 000017C5 3C48                    	cmp	al,'H' 			; only H is allowed, make sure that's
 16529 000017C7 7406                    	je	short prDone		;   what it is
 16530 000017C9 E84203                  	call	SetupParamError		; set message up for Std_EPrintf
 16531 000017CC F9                      	stc				; return failure
 16532 000017CD EB03                    	jmp	short prRet
 16533                                  prDone:
 16534 000017CF A2[909E]                	mov	[fUseHostSize],al	; set Host cluster size flag
 16535                                  	; 08/06/2023
 16536                                  	;clc
 16537                                  	;;cf = 0
 16538                                  prRet:	
 16539 000017D2 5E                      	pop	si
 16540 000017D3 C3                      	retn
 16541                                  
 16542                                  ;ParseRatio	;endp
 16543                                  ;endif
 16544                                  
 16545                                  ; ---------------------------------------------------------------------------
 16546                                  
 16547                                  ;***	ParseSwitch - parse a switch
 16548                                  ;
 16549                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16550                                  ;		     a switch
 16551                                  ;
 16552                                  ;	EXIT	CY = set if parse error occurred
 16553                                  ;
 16554                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 16555                                  ;		AX = parse error code, like system parser
 16556                                  ;		DX = ptr to message block
 16557                                  ;
 16558                                  ;	USED	AX,BX,DX
 16559                                  ;
 16560                                  ;	EFFECTS
 16561                                  ;
 16562                                  ;	  Bits may contain new option settings.
 16563                                  ;	  DestBuf may contain new series of sort codes.
 16564                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 16565                                  ;
 16566                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 16567                                  ;	  Msg_Disp_Class = parse error class
 16568                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 16569                                  ;	  Message block (see DX) is set up for parse error message
 16570                                  
 16571                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16572                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 16573                                  
 16574                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16575                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1869h
 16576                                  ParseSwitch:
 16577 000017D4 51                      	push	cx			; save CX
 16578 000017D5 57                      	push	di			; save DI
 16579                                  
 16580                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 16581                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 16582 000017D6 8B4702                  	mov	ax,[bx+2]
 16583                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 16584 000017D9 BF[8D98]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 16585                                  	; 08/06/2023
 16586                                  	; (NUM_DIR_SWS = 16 for MSDOS 6.0)
 16587                                  	;mov	cx,16
 16588 000017DC B91000                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 16589 000017DF FC                      	cld				; scan direction = upward
 16590 000017E0 F2AF                    	repne	scasw			; locate synonym ptr in list
 16591                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 16592 000017E2 81EF[8F98]              	sub	di,Dir_Sw_Ptrs+2
 16593                                  
 16594                                  ;	DI = index into word list of synonym ptrs
 16595                                  
 16596 000017E6 2EFF95[EE17]            	call	word [cs:di+SwHandler]	; use same index into call table
 16597                                  
 16598 000017EB 5F                      	pop	di			; restore DI
 16599 000017EC 59                      	pop	cx			; restore CX
 16600                                  
 16601 000017ED C3                      	retn
 16602                                  
 16603                                  ; ---------------------------------------------------------------------------
 16604                                  
 16605                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 16606                                  ;	Simple on/off switches must occur first in both lists, and must be
 16607                                  ;	  in order of option bits in Bits, starting with bit 0.
 16608                                  
 16609                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16610                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 16611                                  
 16612                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16613                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1883h
 16614                                  SwHandler:
 16615                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 16616                                  		; ifdef DBLSPACE_HOOKS
 16617 000017EE [E416]                  	dw	OnOffSw 	; /-C
 16618 000017F0 [B817]                  	dw	ParseRatio	; /C[H]
 16619                                  	;	; endif	
 16620 000017F2 [E416]                  	dw	OnOffSw		; /-W
 16621 000017F4 [E416]                  	dw	OnOffSw		; /W
 16622 000017F6 [E416]                  	dw	OnOffSw		; /-P
 16623 000017F8 [E416]                  	dw	OnOffSw		; /P
 16624 000017FA [E416]                  	dw	OnOffSw		; /-S
 16625 000017FC [E416]                  	dw	OnOffSw		; /S
 16626 000017FE [E416]                  	dw	OnOffSw		; /-B
 16627 00001800 [E416]                  	dw	OnOffSw		; /B
 16628 00001802 [E416]                  	dw	OnOffSw		; /-L	;M010
 16629 00001804 [E416]                  	dw	OnOffSw		; /L	;M010
 16630 00001806 [DD16]                  	dw	NoOrder		; /-O
 16631 00001808 [6717]                  	dw	ParseOrder	; /O
 16632 0000180A [7E14]                  	dw	DefaultAttr	; /-A
 16633 0000180C [0117]                  	dw	ParseAttr	; /A
 16634                                  
 16635                                  ; ---------------------------------------------------------------------------
 16636                                  
 16637                                  	;break	<DIR utility routines>
 16638                                  
 16639                                  ;***	UTILITY ROUTINES
 16640                                  ; ---------------------- 
 16641                                  
 16642                                  ; ---------------------------------------------------------------------------
 16643                                  
 16644                                  ;***	ChangeDir - change directory on target drive
 16645                                  ;
 16646                                  ;	ENTRY	FCB contains drive #
 16647                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 16648                                  ;
 16649                                  ;	EXIT	Changed current directory on drive
 16650                                  ;
 16651                                  ;		If error,
 16652                                  ;		CY = set
 16653                                  ;		DOS Get Extended Error call will get error
 16654                                  ;
 16655                                  ;	USED	AX,DX,SI,DI
 16656                                  ;
 16657                                  ;	EFFECTS
 16658                                  ;
 16659                                  ;	  DirBuf is used to build "d:string".
 16660                                  
 16661                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16662                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 16663                                  
 16664                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16665                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:18A3h
 16666                                  ChangeDir:
 16667                                  	;mov	di,offset TRANGROUP:DirBuf
 16668 0000180E BF[2AA0]                	mov	di,DIRBUF
 16669 00001811 E8E902                  	call	GetDriveLtr	; AX = "d:"
 16670 00001814 AB                      	stosw			; put drive specifier in buffer
 16671 00001815 89D6                    	mov	si,dx		; SI = ptr to argument string
 16672                                  cdLoop:
 16673 00001817 AC                      	lodsb
 16674 00001818 AA                      	stosb			; move byte to buffer
 16675 00001819 08C0                    	or	al,al
 16676 0000181B 75FA                    	jne	short cdLoop	; continue until null transferred
 16677                                  
 16678                                  	;mov	dx,offset TRANGROUP:DirBuf
 16679 0000181D BA[2AA0]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 16680                                  	;mov	ah,CHDir
 16681 00001820 B43B                    	mov	ah,3Bh
 16682 00001822 CD21                    	int	21h		; change directory
 16683 00001824 C3                      	retn			; return what CHDIR returns
 16684                                  
 16685                                  ; ---------------------------------------------------------------------------
 16686                                  
 16687                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 16688                                  ;
 16689                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 16690                                  ;		ES:DI = ptr to another ASCIIZ string
 16691                                  ;
 16692                                  ;	EXIT	flags set after REPE CMPSB
 16693                                  ;
 16694                                  ;	USED	AL,CX,SI,DI
 16695                                  ;
 16696                                  ;	NOTES
 16697                                  ;
 16698                                  ;	Maximum run of comparison is length of DS:SI string.
 16699                                  ;	This ensures that two identical strings followed by
 16700                                  ;	random characters will compare correctly.
 16701                                  
 16702                                  	; 19/02/2023
 16703                                  CmpAscz:
 16704                                  	; 07/06/2023
 16705 00001825 56                      	push	si ; *
 16706                                  	;
 16707 00001826 57                      	push	di
 16708                                  
 16709 00001827 89F7                    	mov	di,si
 16710 00001829 30C0                    	xor	al,al
 16711 0000182B B9FFFF                  	mov	cx,0FFFFh
 16712 0000182E F2AE                    	repne	scasb
 16713 00001830 F7D1                    	not	cx
 16714                                  
 16715 00001832 5F                      	pop	di
 16716 00001833 F3A6                    	repe	cmpsb
 16717                                  
 16718                                  	; 07/06/2023
 16719 00001835 5E                      	pop	si ; *
 16720                                  	;
 16721 00001836 C3                      	retn
 16722                                  
 16723                                  ; ---------------------------------------------------------------------------
 16724                                  
 16725                                  ;***	CopyPathname - copy pathname to our buffer
 16726                                  ;
 16727                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16728                                  ;		     a filespec
 16729                                  ;
 16730                                  ;	EXIT	nothing
 16731                                  ;
 16732                                  ;	USED	AX
 16733                                  ;
 16734                                  ;	EFFECTS
 16735                                  ;
 16736                                  ;	  SrcBuf may contain a new pathname/filespec.
 16737                                  ;	  PathPos, PathCnt updated for new pathname.
 16738                                  
 16739                                  	; 19/02/2023
 16740                                  CopyPathname:
 16741 00001837 56                      	push	si
 16742                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 16743                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 16744 00001838 C57704                  	lds	si,[bx+4]
 16745                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 16746 0000183B E8B719                  	call	Move_To_SrcBuf
 16747 0000183E 5E                      	pop	si
 16748 0000183F C3                      	retn
 16749                                  
 16750                                  ; ---------------------------------------------------------------------------
 16751                                  
 16752                                  ;***	CountFile - update counters with current file
 16753                                  ;
 16754                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16755                                  ;
 16756                                  ;	EXIT	nothing
 16757                                  ;
 16758                                  ;	USED	AX,DX
 16759                                  ;
 16760                                  ;	EFFECTS
 16761                                  ;
 16762                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16763                                  
 16764                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16765                                  CountFile:
 16766 00001840 06                      	push	es			; save TRANGROUP seg addr
 16767 00001841 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 16768                                  
 16769 00001845 FF06[1D9E]              	inc	word [FileCnt]		; # files this directory
 16770 00001849 FF06[239E]              	inc	word [FileCntTotal]	; # files total
 16771 0000184D 7504                    	jnz	short cntf1
 16772 0000184F FF06[259E]              	inc	word [FileCntTotal+2]
 16773                                  cntf1:
 16774                                  	;mov	ax,word ptr es:[bx].filesize
 16775                                  					; AX = low word of file size
 16776                                  	;mov	dx,word ptr es:[bx].filesize+2
 16777                                  					; DX = high word of file size
 16778 00001853 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 16779 00001857 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 16780 0000185B 0106[1F9E]              	add	[FileSiz],ax
 16781 0000185F 1116[219E]              	adc	[FileSiz+2],dx		; size of this directory
 16782 00001863 0106[279E]              	add	[FileSizTotal],ax
 16783 00001867 1116[299E]              	adc	[FileSizTotal+2],dx	; total size of files listed
 16784                                  
 16785 0000186B 07                      	pop	es			; ES = TRANGROUP seg addr again
 16786                                  dbRet:	; 19/02/2023
 16787 0000186C C3                      	retn
 16788                                  
 16789                                  ; ---------------------------------------------------------------------------
 16790                                  
 16791                                  ;***	DisplayBare - display filename in bare format
 16792                                  ;
 16793                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16794                                  ;
 16795                                  ;	EXIT	DX = # char's displayed, including dot
 16796                                  ;
 16797                                  ;	USED	AX,CX,SI,DI
 16798                                  ;
 16799                                  ;	EFFECTS
 16800                                  ;
 16801                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 16802                                  ;	  If /s is on, complete pathname is displayed.
 16803                                  ;
 16804                                  ;	NOTE
 16805                                  ;
 16806                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 16807                                  
 16808                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16809                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 16810                                  
 16811                                  
 16812                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16813                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1900h
 16814                                  
 16815                                  DisplayBare:
 16816                                  ;	Suppress . and .. files from bare listing.
 16817                                  
 16818 0000186D 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 16819 0000186F 8E1E[F59D]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 16820                                  	;assume	ds:NOTHING
 16821                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 16822 00001873 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 16823 00001877 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 16824                                  	;assume	ds:TRANGROUP
 16825 00001879 74F1                    	je	short dbRet		; it's . or .. - don't display
 16826                                  
 16827                                  	;;;test	Bits,mask subd
 16828                                  	;;test	word [_Bits],4
 16829                                  	;test	byte [_Bits],4
 16830                                  	; 08/06/2023
 16831 0000187B F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 16832 00001880 7431                    	jz	short dbNameExt		; not /s - display filename only
 16833                                  
 16834                                  	;invoke	Build_Dir_String
 16835 00001882 E8170B                  	call	build_dir_string
 16836                                  	;mov	di,offset TRANGROUP:BwdBuf
 16837 00001885 BF[2AA0]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 16838                                     
 16839                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16840                                  	;;test	word [_Bits],10h
 16841                                  	;test	byte [_Bits],10h
 16842                                  	; 08/06/2023
 16843 00001888 F606[7CA0]20            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 16844                                  	;jz	@F			;M010;lowercase not needed
 16845 0000188D 7405                    	jz	short dbare1
 16846 0000188F 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 16847 00001891 E8C002                  	call	LowercaseString		;M010;path string is in BwdBuf
 16848                                  dbare1:
 16849                                  ;@@:	
 16850                                  	;xor	al,al			; AL = 0
 16851                                  	; 19/02/2023
 16852 00001894 31C0                    	xor	ax,ax
 16853 00001896 B9FFFF                  	mov	cx,0FFFFh
 16854 00001899 FC                      	cld
 16855 0000189A F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 16856 0000189C 4F                      	dec	di			; ES:DI = ptr to null byte
 16857                                  
 16858 0000189D 26807DFF5C              	cmp	byte [es:di-1],'\'
 16859                                  	;je	@F
 16860 000018A2 7403                    	je	short dbare2		; already terminated w/ '\'
 16861                                  
 16862                                  	;mov	ax,'\'			; AX = '\',0
 16863 000018A4 B05C                    	mov	al,'\'
 16864 000018A6 AB                      	stosw				; add to dir string
 16865                                  ;@@:
 16866                                  dbare2:
 16867                                  	;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 16868 000018A7 C706[91A0][2AA0]        	mov	word [string_ptr_2],BWDBUF
 16869                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 16870 000018AD BA[9793]                	mov	dx,string_buf_ptr
 16871                                  	;invoke	Std_Printf		; display device & directory path
 16872 000018B0 E85C3C                  	call	std_printf
 16873                                  dbNameExt:
 16874 000018B3 E82D00                  	call	DisplayDotForm		; display name.ext
 16875                                  	;invoke	CrLf2			; display cr/lf
 16876 000018B6 E86812                  	call	CRLF2
 16877                                  	; 19/02/2023
 16878                                  	;call	UseLine			;M007;Allow /p with /b
 16879                                  ;dbRet:
 16880                                  	;retn
 16881                                  
 16882                                  	; 19/02/2023
 16883                                  	;jmp	short UseLine
 16884                                  
 16885                                  ; ---------------------------------------------------------------------------
 16886                                  
 16887                                  ;***	UseLine - use a display line, start a new page if none left
 16888                                  ;
 16889                                  ;	ENTRY	nothing
 16890                                  ;
 16891                                  ;	EXIT	nothing
 16892                                  ;
 16893                                  ;	USED	flags
 16894                                  
 16895                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16896                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 16897                                  UseLine:
 16898 000018B9 FF0E[1B9E]              	dec	word [LeftOnPage]
 16899 000018BD 833E[1B9E]02            	cmp	word [LeftOnPage],2
 16900 000018C2 771E                    	ja	short ulRet
 16901                                  	; 19/02/2023
 16902                                  	;call	EndPage
 16903                                  ;ulRet:
 16904                                  	;retn
 16905                                  
 16906                                  	; 19/02/2023
 16907                                  	;jmp	short EndPage
 16908                                  
 16909                                  ; ---------------------------------------------------------------------------
 16910                                  
 16911                                  ;***	EndPage - end the current display page
 16912                                  ;
 16913                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16914                                  ;		Current directory (on selected drive) is the one being listed
 16915                                  ;		Bits contains /p setting
 16916                                  ;
 16917                                  ;	EXIT	LeftOnPage = # lines left for next page
 16918                                  ;
 16919                                  ;	USED	AX,DX
 16920                                  ;
 16921                                  ;	EFFECTS
 16922                                  ;
 16923                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 16924                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 16925                                  
 16926                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16927                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 16928                                  
 16929                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16930                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1BADh
 16931                                  EndPage:
 16932                                  	;;;test	Bits,mask pagd
 16933                                  	;;test	word [_Bits],2
 16934                                  	;test	byte [_Bits],2
 16935                                  	; 08/06/2023
 16936 000018C4 F606[7CA0]04            	test	byte [_Bits],mask.pagd ; 4 ; MSDOS 6.0
 16937 000018C9 7410                    	jz	short epNew		; paged display isn't enabled
 16938                                  
 16939 000018CB 53                      	push	bx			; save BX
 16940 000018CC 51                      	push	cx			; save CX
 16941                                  
 16942                                  	;invoke	Pause			; "Press any key to continue..."
 16943 000018CD E83506                  	call	PAUSE
 16944                                  
 16945                                  	;invoke	Build_Dir_String
 16946 000018D0 E8C90A                  	call	build_dir_string
 16947                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 16948 000018D3 BA[1B94]                	mov	dx,dircont_ptr
 16949                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 16950 000018D6 E8283C                  	call	Printf_Crlf
 16951                                  
 16952 000018D9 59                      	pop	cx			; restore CX
 16953 000018DA 5B                      	pop	bx			; restore BX
 16954                                  epNew:	
 16955 000018DB A1[08A2]                	mov	ax,[LinPerPag]		; AX = # lines per page
 16956 000018DE 48                      	dec	ax			; AX = # lines till next EndPage
 16957 000018DF A3[1B9E]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 16958                                  ulRet:	
 16959                                  	; 19/02/2023
 16960 000018E2 C3                      	retn
 16961                                  
 16962                                  ; ---------------------------------------------------------------------------
 16963                                  
 16964                                  ;***	DisplayDotForm - display filename in compressed dot format
 16965                                  ;
 16966                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 16967                                  ;	if the filename has a nonblank extension.
 16968                                  ;
 16969                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16970                                  ;
 16971                                  ;	EXIT	DX = # char's displayed, including dot
 16972                                  ;
 16973                                  ;	USED	AX,CX,SI,DI
 16974                                  ;
 16975                                  ;	EFFECTS
 16976                                  ;
 16977                                  ;	  Filename is displayed in name.ext format.
 16978                                  ;
 16979                                  ;	NOTE
 16980                                  ;
 16981                                  ;	  We allow for bogus filenames that have blanks embedded
 16982                                  ;	  in the name or extension.
 16983                                  
 16984                                  ;	Bugbug:	might be a good performance gain if we buffered
 16985                                  ;	up the output and used DOS function 9.
 16986                                  
 16987                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16988                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 16989                                  
 16990                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16991                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1953h
 16992                                  DisplayDotForm:
 16993 000018E3 1E                      	push	ds			; save TRANGROUP seg addr
 16994 000018E4 06                      	push	es			; save ES
 16995 000018E5 2EA1[F59D]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 16996 000018E9 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 16997                                  	;assume	ds:nothing
 16998 000018EB 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 16999                                  
 17000                                  	; 08/06/2023
 17001                                  	;mov	di,bx			; ES:DI = ptr to entry
 17002                                  	;;;add	di,filename + size filename - 1
 17003                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 17004                                  	;;mov	cx,size filename	; CX = length of name field
 17005                                  	;mov	cx,8
 17006                                  	; 08/06/2023
 17007 000018ED B90800                  	mov	cx,8
 17008 000018F0 89CF                    	mov	di,cx
 17009 000018F2 01DF                    	add	di,bx
 17010                                  
 17011 000018F4 B020                    	mov	al,' '
 17012 000018F6 FD                      	std				; scan down
 17013 000018F7 F3AE                    	repe	scasb			; scan for nonblank
 17014                                  
 17015                                  ;	Assume file name has at least one character.
 17016                                  
 17017 000018F9 41                      	inc	cx			; CX = # chars in name
 17018 000018FA 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 17019                                  
 17020 000018FC 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17021                                  	;;add	si,filename		; DS:SI = ptr to name
 17022                                  	;add	si,1 
 17023                                  	;		; add si,EntryStruc.filename
 17024                                  	; 25/04/2023
 17025 000018FE 46                      	inc	si
 17026                                  NextNameChar:
 17027 000018FF FC                      	cld
 17028 00001900 AC                      	lodsb				; AL = next char
 17029                                  
 17030                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 17031                                  	;;test	word [ss:_Bits],10h
 17032                                  	;test	byte [ss:_Bits],10h
 17033                                  	; 08/06/2023
 17034 00001901 36F606[7CA0]20          	test	byte [ss:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17035                                  	;jz	short @F		;M010;lowercase not required
 17036 00001907 7403                    	jz	short ddf1
 17037 00001909 E83D02                  	call	LowerCase		;M010;filename char is in AL
 17038                                  ddf1:
 17039                                  ;@@:	
 17040                                  	;invoke	Print_Char		; display it
 17041 0000190C E83E0A                  	call	PRINT_CHAR
 17042 0000190F E2EE                    	loop	NextNameChar
 17043                                  
 17044                                  ;	Now do extension.
 17045                                  
 17046 00001911 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 17047                                  	;add	di,fileext + size fileext - 1
 17048 00001913 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 17049                                  	;mov	cx,size fileext		; CX = length of ext field
 17050 00001916 B90300                  	mov	cx,3
 17051 00001919 B020                    	mov	al,' '
 17052 0000191B FD                      	std				; scan down
 17053 0000191C F3AE                    	repe	scasb			; scan for nonblank
 17054 0000191E 7420                    	je	short ddDone		; no nonblank chars in ext
 17055                                  
 17056 00001920 41                      	inc	cx			; CX = # chars in ext
 17057 00001921 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 17058 00001923 42                      	inc	dx			;      including dot
 17059                                  
 17060 00001924 B02E                    	mov	al,'.'
 17061 00001926 E8240A                  	call	PRINT_CHAR
 17062 00001929 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17063                                  	;add	si,fileext		; DS:SI = ptr to ext
 17064 0000192B 83C609                  	add	si,9
 17065                                  
 17066                                  NextExtChar:
 17067 0000192E FC                      	cld
 17068 0000192F AC                      	lodsb				; AL = next char
 17069                                  
 17070                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 17071                                  	;;test	word [cs:_Bits],10h
 17072                                  	;test	byte [cs:_Bits],10h
 17073                                  	; 08/06/2023
 17074 00001930 2EF606[7CA0]20          	test	byte [cs:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17075                                  	;jz	short @F		;M010;lowercase not required
 17076 00001936 7403                    	jz	short ddf2
 17077 00001938 E80E02                  	call	LowerCase		;M010;fileext char is in AL
 17078                                  ;@@:	
 17079                                  ddf2:
 17080                                  	;invoke	Print_Char		; display it
 17081 0000193B E80F0A                  	call	PRINT_CHAR
 17082 0000193E E2EE                    	loop	NextExtChar
 17083                                  ddDone:
 17084 00001940 07                      	pop	es			; restore ES
 17085 00001941 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17086                                  	;assume	ds:TRANGROUP
 17087 00001942 FC                      	cld				; leave direction flag = up
 17088 00001943 C3                      	retn
 17089                                  
 17090                                  ; ---------------------------------------------------------------------------
 17091                                  
 17092                                  ;***	DisplayFile - display file entry, update counters
 17093                                  ;
 17094                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17095                                  ;		Bits contains /w, /p settings
 17096                                  ;
 17097                                  ;	EXIT	nothing
 17098                                  ;
 17099                                  ;	USED	AX,CX,DX,SI,DI,BP
 17100                                  ;
 17101                                  ;	EFFECTS
 17102                                  ;
 17103                                  ;	  Entry is displayed.
 17104                                  ;	  If not /b,
 17105                                  ;	    Cursor is left at end of entry on screen.
 17106                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 17107                                  ;	  If /b,
 17108                                  ;	    Cursor is left at beginning of next line.
 17109                                  ;	    Cnt's and Siz's aren't updated.
 17110                                  
 17111                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17112                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 17113                                  	
 17114                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17115                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:19B9h
 17116                                  
 17117                                  DisplayFile:
 17118                                  	;;;test	Bits,mask bare
 17119                                  	;;test	word [_Bits],8
 17120                                  	;test	byte [_Bits],8
 17121                                  	; 08/06/2023
 17122 00001944 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 17123 00001949 7405                    	jz	short dfNorm		; not /b - do normal display
 17124                                  
 17125 0000194B E81FFF                  	call	DisplayBare		; display file in bare format
 17126 0000194E EB22                    	jmp	short dfRet
 17127                                  dfNorm:	
 17128 00001950 E88200                  	call	DisplayNext		; pos'n cursor for next entry
 17129                                  	;;;test	Bits,mask wide
 17130                                  	;;test	word [_Bits],1
 17131                                  	;test	byte [_Bits],1
 17132                                  	; 08/06/2023
 17133 00001953 F606[7CA0]02            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 17134 00001958 7405                    	jz	short dfFull		; full format
 17135 0000195A E87401                  	call	DisplayWide		; wide format
 17136 0000195D EB10                    	jmp	short dfCnt
 17137                                  dfFull:	
 17138 0000195F E83E00                  	call	DisplayName		; display filename & extension
 17139 00001962 E89700                  	call	DisplayTheRest		; display size, date, time
 17140                                  	
 17141                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 17142                                  	; MSDOS 6.0
 17143                                  ;ifdef DBLSPACE_HOOKS
 17144                                  	;;test	Bits,mask cratio
 17145                                  	;test	word [_Bits],1
 17146 00001965 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 17147                                  					; display compression ratio
 17148 0000196A 7403                    	jz	short dfCnt
 17149 0000196C E81A01                  	call	DisplayCompRatio
 17150                                  ;endif
 17151                                  
 17152                                  dfCnt:
 17153 0000196F E8CEFE                  	call	CountFile		; update file counters
 17154                                  dfRet:
 17155                                  dhRet:	; 19/02/2023
 17156 00001972 C3                      	retn
 17157                                  
 17158                                  ; ---------------------------------------------------------------------------
 17159                                  
 17160                                  ;***	DisplayHeader - display directory header of working directory
 17161                                  ;
 17162                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 17163                                  ;		LeftOnPage = # lines left on display page
 17164                                  ;
 17165                                  ;	EXIT	nothing
 17166                                  ;
 17167                                  ;	ERROR EXIT
 17168                                  ;
 17169                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 17170                                  ;	   specification" if there's a problem obtaining the current
 17171                                  ;	   directory pathname.
 17172                                  ;
 17173                                  ;	USED	AX,DX,SI,DI
 17174                                  ;
 17175                                  ;	EFFECTS
 17176                                  ;
 17177                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 17178                                  ;	   we are using for the DTA) contains the directory string.
 17179                                  ;	  LeftOnPage is adjusted.
 17180                                  
 17181                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17182                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17183                                  
 17184                                  DisplayHeader:
 17185                                  	;;;test	Bits,mask bare
 17186                                  	;;test	word [_Bits],8
 17187                                  	;test	byte [_Bits],8
 17188                                  	; 08/06/2023
 17189 00001973 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 17190 00001978 75F8                    	jnz	short dhRet		; /b - don't display header
 17191                                  
 17192                                  	;;;test	Bits,mask subd
 17193                                  	;;test	word [_Bits],4
 17194                                  	;test	byte [_Bits],4
 17195                                  	; 08/06/2023
 17196 0000197A F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 17197 0000197F 7408                    	jz	short dhNorm		; not /s
 17198                                  
 17199                                  ;	For subdirectory listings, put a blank line before the header.
 17200                                  
 17201                                  	;invoke	Crlf2			; start with a blank line
 17202 00001981 E89D11                  	call	CRLF2
 17203 00001984 E832FF                  	call	UseLine
 17204 00001987 EB05                    	jmp	short dhCom
 17205                                  dhNorm:
 17206 00001989 B020                    	mov	al,' ' ; 20h
 17207                                  	;mov	al,BLANK		; if not /s, precede by a blank
 17208 0000198B E8BF09                  	call	PRINT_CHAR		; print a leading blank
 17209                                  dhCom:
 17210 0000198E E80B0A                  	call	build_dir_string
 17211 00001991 BA[1793]                	mov	dx,dirhead_ptr
 17212 00001994 E8783B                  	call	std_printf		; print header & cr/lf
 17213 00001997 E81FFF                  	call	UseLine
 17214 0000199A E88411                  	call	CRLF2			; another cr/lf
 17215                                  	;call	UseLine
 17216                                  ;dhRet:
 17217                                  	;retn
 17218                                  
 17219                                  	; 19/02/2023
 17220 0000199D E919FF                  	jmp	UseLine
 17221                                  
 17222                                  ; ---------------------------------------------------------------------------
 17223                                  
 17224                                  ;***	DisplayName - display file name & extension
 17225                                  ;
 17226                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17227                                  ;
 17228                                  ;	EXIT	nothing
 17229                                  ;
 17230                                  ;	USED	AX,CX,DX,SI,DI
 17231                                  ;
 17232                                  ;	EFFECTS
 17233                                  ;
 17234                                  ;	  Filename & extension are displayed in spread format.
 17235                                  ;	  Cursor is left at end of extension.
 17236                                  
 17237                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17238                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17239                                  
 17240                                  DisplayName:
 17241 000019A0 1E                      	push	ds			; save TRANGROUP seg addr
 17242 000019A1 8E1E[F59D]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 17243                                  	;assume	ds:nothing
 17244 000019A5 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17245                                  	;;add	si,filename		; DS:SI = ptr to filename
 17246                                  	;add	si,1  ; EntryStruc.filename
 17247                                  	; 08/06/2023
 17248 000019A7 46                      	inc	si
 17249 000019A8 BF[5B9F]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 17250                                  
 17251 000019AB B90800                  	mov	cx,8
 17252 000019AE FC                      	cld
 17253 000019AF F3A4                    	rep	movsb			; move filename to CharBuf
 17254 000019B1 B020                    	mov	al,' '
 17255 000019B3 AA                      	stosb				; add a blank
 17256                                  	;mov	cx,3
 17257                                  	; 08/06/2023
 17258 000019B4 B103                    	mov	cl,3
 17259 000019B6 F3A4                    	rep	movsb			; add extension
 17260 000019B8 30C0                    	xor	al,al
 17261 000019BA AA                      	stosb				; add a NULL
 17262                                  
 17263 000019BB 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17264                                  	;assume	ds:TRANGROUP
 17265                                  
 17266                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 17267                                  	;;test	word [_Bits],10h
 17268                                  	;test	byte [_Bits],10h
 17269                                  	; 08/06/2023
 17270 000019BC F606[7CA0]20            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17271 000019C1 7406                    	jz	short dn1		;M010;lowercase not required
 17272 000019C3 BE[5B9F]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 17273 000019C6 E88B01                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 17274                                  dn1:	
 17275 000019C9 C706[91A0][5B9F]        	mov	word [string_ptr_2],CHARBUF
 17276 000019CF BA[9793]                	mov	dx,string_buf_ptr
 17277                                  	;call	std_printf		; print filename & extension
 17278                                  	;retn
 17279                                  	; 19/02/2023
 17280 000019D2 E93A3B                  	jmp	std_printf
 17281                                  
 17282                                  ; ---------------------------------------------------------------------------
 17283                                  
 17284                                  ;***	DisplayNext - move display cursor to next entry position
 17285                                  ;
 17286                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 17287                                  ;		LeftOnPage = # lines can still be printed for this page
 17288                                  ;		FileCnt = # files in this dir displayed before this one
 17289                                  ;		Bits contains /w setting
 17290                                  ;
 17291                                  ;	EXIT	nothing
 17292                                  ;
 17293                                  ;	USED	AX,DX
 17294                                  ;
 17295                                  ;	EFFECTS
 17296                                  ;
 17297                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 17298                                  ;	   displayed.
 17299                                  ;	  LeftOnPage may be updated.
 17300                                  
 17301                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17302                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17303                                  	
 17304                                  DisplayNext:
 17305 000019D5 833E[1D9E]00            	cmp	word [FileCnt],0
 17306 000019DA 7415                    	je	short dn1st		; 1st file in directory
 17307 000019DC 803E[199E]00            	cmp	byte [LeftOnLine],0
 17308 000019E1 7E08                    	jng	short dnEol	; jle	; no more room on this line
 17309                                  
 17310                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 17311                                  ;	we still have room for more on this line.
 17312                                  ;	Tab to next position.
 17313                                  
 17314 000019E3 BA[A693]                	mov	dx,tab_ptr
 17315 000019E6 E8263B                  	call	std_printf
 17316 000019E9 EB0C                    	jmp	short dnDone
 17317                                  dnEol:	
 17318                                  ;	Start this entry on a new line.
 17319                                  
 17320 000019EB E83311                  	call	CRLF2		; start on new line
 17321 000019EE E8C8FE                  	call	UseLine
 17322                                  dn1st:
 17323 000019F1 A0[1A9E]                	mov	al,[PerLine]
 17324 000019F4 A2[199E]                	mov	[LeftOnLine],al	; reset # entries left on line
 17325                                  
 17326                                  dnDone:
 17327 000019F7 FE0E[199E]              	dec	byte [LeftOnLine]
 17328                                  				; reflect the entry about to be displayed
 17329 000019FB C3                      	retn
 17330                                  
 17331                                  ; ---------------------------------------------------------------------------
 17332                                  
 17333                                  ;***	DisplayTheRest - display file size/dir, date, time
 17334                                  ;
 17335                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17336                                  ;		Display cursor is at end of file extension
 17337                                  ;
 17338                                  ;	EXIT	nothing
 17339                                  ;
 17340                                  ;	USED	AX,CX,DX,SI,DI,BP
 17341                                  ;
 17342                                  ;	EFFECTS
 17343                                  ;
 17344                                  ;	  File size, date, & time are displayed.
 17345                                  
 17346                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17347                                  
 17348                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17349                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1A7Ch
 17350                                  DisplayTheRest:
 17351 000019FC 06                      	push	es			; save TRANGROUP seg addr
 17352 000019FD 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 17353 00001A01 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 17354                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 17355                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 17356 00001A03 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 17357 00001A08 7415                    	jz	short drNonDir		; not a directory file
 17358                                  
 17359                                  ;	For a directory file, display <DIR> instead of size.
 17360                                  
 17361 00001A0A BA[A993]                	mov	dx,dmes_ptr
 17362 00001A0D E8FF3A                  	call	std_printf
 17363                                  	; 08/06/2023
 17364                                  	;jmp	short drCom
 17365                                  
 17366                                  	; 08/06/2023
 17367                                  	; MSDOS 6.22 COMMAND.COM (disassembled source code)
 17368 00001A10 F606[9393]40            	test    byte [screen_f_1],40h	; 80 columns ?
 17369 00001A15 7406                    	jz      short dr_0      	; no
 17370 00001A17 BA[AC93]                	mov     dx,space_4_ptr		; 4 space chars
 17371 00001A1A E8F23A                  	call    std_printf
 17372                                  dr_0:
 17373 00001A1D EB16                    	jmp	short drCom		; skip to common fields
 17374                                  
 17375                                  drNonDir:
 17376                                  ;	For a non-directory file, display file size.
 17377                                  
 17378                                  	;;mov	dx,word ptr es:[bp].filesize
 17379                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 17380 00001A1F 268B5611                	mov	dx,[es:bp+17]
 17381 00001A23 8916[8DA0]              	mov	[File_Size_Low],dx
 17382                                  	;;mov	dx,word ptr es:[bp].filesize+2
 17383                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 17384 00001A27 268B5613                	mov	dx,[es:bp+19]
 17385 00001A2B 8916[8FA0]              	mov	[File_Size_High],dx
 17386 00001A2F BA[8993]                	mov	dx,disp_file_size_ptr
 17387 00001A32 E8DA3A                  	call	std_printf
 17388                                  drCom:
 17389                                  ;	For all files, display date & time.
 17390                                  
 17391                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 17392                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 17393 00001A35 268B460F                	mov	ax,[es:bp+15]
 17394 00001A39 09C0                    	or	ax,ax			; test for null date (DOS 1.x)
 17395 00001A3B 7448                    	jz	short drDone		; no date, skip date/time display
 17396 00001A3D 89C3                    	mov	bx,ax			; BX = date word
 17397 00001A3F 83E01F                  	and	ax,1Fh			; AX = day of month
 17398 00001A42 88C2                    	mov	dl,al			; DL = day of month
 17399 00001A44 89D8                    	mov	ax,bx			; AX = date word
 17400 00001A46 B105                    	mov	cl,5
 17401 00001A48 D3E8                    	shr	ax,cl			; shift day out
 17402 00001A4A 240F                    	and	al,0Fh			; AL = month
 17403 00001A4C 88C6                    	mov	dh,al			; DH = month
 17404 00001A4E 88F9                    	mov	cl,bh
 17405 00001A50 D0E9                    	shr	cl,1			; CL = year - 1980
 17406 00001A52 30ED                    	xor	ch,ch			; CX = year - 1980
 17407 00001A54 83C150                  	add	cx,80			; CX = 2-digit year
 17408 00001A57 80F964                  	cmp	cl,100
 17409 00001A5A 7203                    	jb	short dr_1		; not year 2000 yet, skip ahead
 17410 00001A5C 80E964                  	sub	cl,100			; adjust for 21st century
 17411                                  dr_1:	
 17412 00001A5F 86F2                    	xchg	dh,dl			; DX = month/day
 17413 00001A61 890E[EA93]              	mov	[DirDat_Yr],cx		; move year to msg block
 17414 00001A65 8916[EC93]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 17415                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 17416                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 17417 00001A69 268B4E0D                	mov	cx,[es:bp+13]
 17418 00001A6D E310                    	jcxz	drPrint			; no time field - go print
 17419 00001A6F D1E9                    	shr	cx,1
 17420 00001A71 D1E9                    	shr	cx,1
 17421 00001A73 D1E9                    	shr	cx,1			; CH = hours
 17422 00001A75 D0E9                    	shr	cl,1
 17423 00001A77 D0E9                    	shr	cl,1			; CL = minutes
 17424 00001A79 86E9                    	xchg	ch,cl			; CX = hr/min
 17425 00001A7B 890E[F593]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 17426                                  drPrint:
 17427 00001A7F BA[E593]                	mov	dx,dirdattim_ptr
 17428 00001A82 E88A3A                  	call	std_printf		; print date & time
 17429                                  drDone:
 17430 00001A85 07                      	pop	es			; ES = TRANGROUP seg addr again	
 17431 00001A86 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 17432                                  ;dtrRet:
 17433                                  	; 19/02/2023
 17434 00001A88 C3                      	retn
 17435                                  
 17436                                  ; ---------------------------------------------------------------------------
 17437                                  ; MSDOS 6.0
 17438                                  
 17439                                  ;ifdef DBLSPACE_HOOKS
 17440                                  
 17441                                  ;***	DisplayCompRatio - display compression ratio
 17442                                  ;
 17443                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17444                                  ;
 17445                                  ;	EXIT	nothing
 17446                                  ;
 17447                                  ;	USED	AX,CX,DX
 17448                                  ;
 17449                                  ;	EFFECTS
 17450                                  ;
 17451                                  ;	  File compression ratio is displayed.
 17452                                  
 17453                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17454                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1B09h
 17455                                  
 17456                                  DisplayCompRatio:	;proc
 17457 00001A89 06                      	push	es			; save TRANGROUP seg addr
 17458 00001A8A 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 17459                                  	;;mov	al,es:[bx].compratio
 17460                                  	;mov	al,[es:bx+EntryStruc.compratio]
 17461 00001A8E 268A4715                	mov	al,[es:bx+15h]
 17462 00001A92 3CFF                    	cmp	al,0FFh			; invalid/no compression ratio?
 17463 00001A94 7417                    	je	short dcrRet
 17464                                  
 17465 00001A96 88C4                    	mov	ah,al			; unpack compression ratio
 17466 00001A98 B104                    	mov	cl,4
 17467 00001A9A D2EC                    	shr	ah,cl			; isolate whole number portion
 17468 00001A9C FEC4                    	inc	ah			; 0-15 = 1-16
 17469 00001A9E 240F                    	and	al,0Fh 			; isolate tenths
 17470                                  
 17471 00001AA0 8826[98A0]              	mov	[Dir_CRatio_1],ah
 17472 00001AA4 A2[99A0]                	mov	[Dir_CRatio_2],al
 17473                                  	;mov	dx,offset TRANGROUP:DirCompRatio_Ptr
 17474                                  	;invoke	Std_Printf
 17475 00001AA7 BA[5594]                	mov	dx,DirCompRatio_Ptr
 17476 00001AAA E8623A                  	call	std_printf	
 17477                                  dcrRet:
 17478 00001AAD 07                      	pop	es
 17479                                  dtrRet:		; 08/06/2023
 17480 00001AAE C3                      	retn
 17481                                  
 17482                                  ;DisplayCompRatio	;endp
 17483                                  
 17484                                  ;endif
 17485                                  
 17486                                  ; ---------------------------------------------------------------------------
 17487                                  
 17488                                  ;***	DisplayTrailer - display trailing lines for directory listing
 17489                                  ;
 17490                                  ;	ENTRY	LeftOnPage = # lines left on display page
 17491                                  ;		FileCnt = # files listed
 17492                                  ;		FileSiz = total size of files listed
 17493                                  ;
 17494                                  ;	EXIT	nothing
 17495                                  ;
 17496                                  ;	USED
 17497                                  ;
 17498                                  ;	EFFECTS
 17499                                  ;
 17500                                  ;	  Trailing info lines are displayed
 17501                                  
 17502                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17503                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17504                                  
 17505                                  DisplayTrailer:
 17506                                  	;;;test	Bits,mask bare
 17507                                  	;;test	word [_Bits],8
 17508                                  	;test	byte [_Bits],8
 17509                                  	; 08/06/2023
 17510 00001AAF F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 17511 00001AB4 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 17512                                  
 17513 00001AB6 E86810                  	call	CRLF2			; start on new line
 17514 00001AB9 E8FDFD                  	call	UseLine
 17515 00001ABC A1[1D9E]                	mov	ax,[FileCnt]		; AX = # files found
 17516                                  
 17517                                  ;	DisplayTotals uses this entry point.
 17518                                  ;
 17519                                  DisplayCntSiz:
 17520                                  ;	AX = # files
 17521                                  ;	FileSiz = dword total size of files
 17522                                  
 17523 00001ABF A3[96A0]                	mov	[Dir_Num],ax		; load # files
 17524 00001AC2 BA[1092]                	mov	dx,dirmes_ptr		; DX = ptr to message block
 17525 00001AC5 E8473A                  	call	std_printf		; "nnn File(s)"
 17526                                  
 17527 00001AC8 BA[0194]                	mov	dx,bytes_ptr
 17528 00001ACB E8413A                  	call	std_printf		; "nnn bytes",cr,lf
 17529                                  	; 19/02/2023
 17530                                  	;call	UseLine
 17531                                  ;dtrRet:
 17532                                  	;retn
 17533                                  
 17534                                  	; 19/02/2023
 17535 00001ACE E9E8FD                  	jmp	UseLine
 17536                                  
 17537                                  ; ---------------------------------------------------------------------------
 17538                                  
 17539                                  ;***	DisplayWide - display filename in wide format
 17540                                  ;
 17541                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17542                                  ;
 17543                                  ;	EXIT	nothing
 17544                                  ;
 17545                                  ;	USED	AX,CX,DX,SI,DI
 17546                                  ;
 17547                                  ;	EFFECTS
 17548                                  ;
 17549                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 17550                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 17551                                  
 17552                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17553                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 17554                                  
 17555                                  DisplayWide:
 17556 00001AD1 1E                      	push	ds			; save TRANGROUP seg addr
 17557 00001AD2 8E1E[F59D]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 17558                                  	;assume	ds:nothing
 17559                                  
 17560                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 17561                                  	;test	byte [bx+EntryStruc.fileattr],10h
 17562 00001AD6 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 17563 00001ADA 9C                      	pushf	; 03/08/2024
 17564 00001ADB 7405                    	jz	short dw1		; not a subdirectory file
 17565 00001ADD B05B                    	mov	al,'['
 17566 00001ADF E86B08                  	call	PRINT_CHAR		; prefix subdirectory
 17567                                  dw1:	
 17568 00001AE2 E8FEFD                  	call	DisplayDotForm		; display name.ext
 17569                                  
 17570                                  ;	DX = # chars displayed in name.ext
 17571                                  
 17572                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 17573                                  	;test	byte [bx+EntryStruc.fileattr],10h
 17574                                  	; 03/08/2024
 17575                                  	;test	byte [bx+12],ATTR_DIRECTORY
 17576 00001AE5 9D                      	popf	; 03/08/2024
 17577 00001AE6 7405                    	jz	short dw2		; not a subdirectory file
 17578 00001AE8 B05D                    	mov	al,']'
 17579 00001AEA E86008                  	call	PRINT_CHAR		; postfix subdirectory
 17580                                  dw2:
 17581                                  ;	Pad field with blanks.
 17582                                  
 17583                                  	;mov	cx,size filename + size fileext + 1
 17584 00001AED B90C00                  	mov	cx,12 ; 8+3+1
 17585                                  					; CX = field size
 17586 00001AF0 29D1                    	sub	cx,dx			; CX = # pad char's
 17587 00001AF2 E307                    	jcxz	dwDone
 17588 00001AF4 B020                    	mov	al,' '
 17589                                  dw3:	
 17590 00001AF6 E85408                  	call	PRINT_CHAR
 17591 00001AF9 E2FB                    	loop	dw3
 17592                                  dwDone:	
 17593 00001AFB 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17594                                  	;assume	ds:TRANGROUP
 17595 00001AFC C3                      	retn
 17596                                  
 17597                                  ; ---------------------------------------------------------------------------
 17598                                  
 17599                                  ;***	GetDriveLtr - get target drive letter
 17600                                  ;
 17601                                  ;	ENTRY	FCB contains drive #
 17602                                  ;
 17603                                  ;	EXIT	AX = "d:"
 17604                                  ;
 17605                                  ;	USED	nothing
 17606                                  
 17607                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17608                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 17609                                  GetDriveLtr:
 17610 00001AFD A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 17611 00001B00 08C0                    	or	al,al
 17612 00001B02 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 17613 00001B04 A0[059E]                	mov	al,[CURDRV]	; AL = current drive #
 17614 00001B07 FEC0                    	inc	al		; AL = 1-based drive #
 17615                                  gdl1:	
 17616 00001B09 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 17617 00001B0B B43A                    	mov	ah,':'		; AX = "d:"
 17618 00001B0D C3                      	retn
 17619                                  
 17620                                  ; ---------------------------------------------------------------------------
 17621                                  
 17622                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 17623                                  ;
 17624                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 17625                                  ;	for system parser calls. Set up a message substitution block,
 17626                                  ;	etc. for invalid value strings. I copied the procedure from
 17627                                  ;	Setup_Parse_Error_Msg.
 17628                                  ;
 17629                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 17630                                  ;		
 17631                                  ;
 17632                                  ;	EXIT	AX = system parser error return code for bad param format
 17633                                  ;		DX = ptr to message description block for Std_EPrintf
 17634                                  ;
 17635                                  ;	USED	SI
 17636                                  ;
 17637                                  ;	EFFECTS
 17638                                  ;
 17639                                  ;	  Msg_Disp_Class = parse error message class
 17640                                  ;	  Message block (see DX) is set up for parse error message
 17641                                  
 17642                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17643                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 17644                                  SetupParamError:
 17645 00001B0E B80900                  	mov	ax,9			; parse error #
 17646 00001B11 C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 17647                                  	;mov	byte [msg_disp_class],2
 17648 00001B16 A3[D091]                	mov	[extend_buf_ptr],ax
 17649                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17650 00001B19 8B7704                  	mov	si,[bx+4]
 17651 00001B1C 8936[91A0]              	mov	[string_ptr_2],si
 17652 00001B20 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 17653                                  	;mov	byte [extend_buf_sub],1
 17654 00001B25 BA[D091]                	mov	dx,extend_buf_ptr
 17655 00001B28 C3                      	retn
 17656                                  
 17657                                  ; ---------------------------------------------------------------------------
 17658                                  
 17659                                  ;***	ZeroTotals - zero grand total file count, size
 17660                                  ;
 17661                                  ;	ENTRY	nothing
 17662                                  ;
 17663                                  ;	EXIT	nothing
 17664                                  ;
 17665                                  ;	USED	AX
 17666                                  ;
 17667                                  ;	EFFECTS
 17668                                  ;
 17669                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 17670                                  ;
 17671                                  ;	NOTES
 17672                                  ;
 17673                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 17674                                  
 17675                                  ; 05/06/2023
 17676                                  ;ifdef DBLSPACE_HOOKS
 17677                                  ;csecSIZE EQU size csecUsed + size csecUsedDir + size csecUsedTotal
 17678                                  ;ccluSIZE EQU size ccluUsed + size ccluUsedDir + size ccluUsedTotal
 17679                                  ;endif
 17680                                  
 17681                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17682                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h
 17683                                  
 17684                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17685                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C08h	
 17686                                  ZeroTotals:
 17687 00001B29 BF[239E]                	mov	di,FileCntTotal
 17688                                  
 17689                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17690                                  	;;mov	cx,size FileCntTotal+size FileSizTotal
 17691                                  	;mov	cx,8
 17692                                  	;ifdef DBLSPACE_HOOKS
 17693                                  	;mov	cx,size FileCntTotal+size FileSizTotal+csecSIZE+ccluSIZE
 17694                                  	;endif
 17695 00001B2C B91A00                  	mov	cx,26
 17696                                  
 17697 00001B2F 30C0                    	xor	al,al
 17698 00001B31 F3AA                    	rep	stosb
 17699 00001B33 C3                      	retn	
 17700                                  
 17701                                  ; ---------------------------------------------------------------------------
 17702                                  
 17703                                  ;***	CtrlCHandler - our own control-c handler
 17704                                  ;
 17705                                  ;	Make sure user's default directory gets restored. See notes
 17706                                  ;	at InstallCtrlCHandler.
 17707                                  ;
 17708                                  ;	ENTRY	control-c
 17709                                  ;
 17710                                  ;	EXIT	to OldCtrlCHandler
 17711                                  ;
 17712                                  ;	USED	DS,flags
 17713                                  ;
 17714                                  ;	EFFECTS
 17715                                  ;
 17716                                  ;	  Restore user's default directory.
 17717                                  ;
 17718                                  ;	NOTES
 17719                                  ;
 17720                                  ;	  This handler is only installed after calling PathCrunch,
 17721                                  ;	  which sets UserDir1, so the restoration will work.
 17722                                  ;
 17723                                  ;	  The original control-c vector will be restored, whether
 17724                                  ;	  or not this one is invoked, in the HeadFix routine.
 17725                                  
 17726                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17727                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 17728                                  
 17729                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17730                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C13h ; *
 17731                                  
 17732                                  CtrlCHandler:	;proc far
 17733                                  
 17734                                  ;SR;
 17735                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 17736                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 17737                                  ;
 17738 00001B34 1E                      	push	ds
 17739 00001B35 0E                      	push	cs
 17740 00001B36 1F                      	pop	ds			; DS = TRANGROUP seg addr
 17741 00001B37 50                      	push	ax
 17742 00001B38 53                      	push	bx ; *
 17743 00001B39 52                      	push	dx
 17744 00001B3A E8A101                  	call	CloseCVF ; * 		; close CVF file if open
 17745 00001B3D E89E0E                  	call	RestUDir		; restore user's default directory
 17746 00001B40 5A                      	pop	dx
 17747 00001B41 5B                      	pop	bx ; *
 17748 00001B42 58                      	pop	ax
 17749 00001B43 1F                      	pop	ds
 17750 00001B44 2EFF2E[B5A9]            	jmp	far [cs:OldCtrlCHandler]
 17751                                  					; go to previous int 23 handler
 17752                                  
 17753                                  ; ---------------------------------------------------------------------------
 17754                                  
 17755                                  ;M010;start
 17756                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 17757                                  ;
 17758                                  ;	ENTRY	AL = character to be displayed
 17759                                  ;
 17760                                  ;	EXIT	AL is lowercase
 17761                                  ;
 17762                                  ;	USED	nothing
 17763                                  
 17764                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17765                                  LowerCase:
 17766 00001B49 3C41                    	cmp	al,'A'		; ensure AL is in range 'A'-'Z'
 17767 00001B4B 7206                    	jb	short lcRet
 17768 00001B4D 3C5A                    	cmp	al,'Z'
 17769 00001B4F 7702                    	ja	short lcRet
 17770                                  
 17771 00001B51 0C20                    	or	al,20h		; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 17772                                  lcRet:
 17773 00001B53 C3                      	retn
 17774                                  
 17775                                  ; ---------------------------------------------------------------------------
 17776                                  
 17777                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 17778                                  ;
 17779                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 17780                                  ;		ES = DS
 17781                                  ;
 17782                                  ;	EXIT	nothing
 17783                                  ;	
 17784                                  ;	USED	AL,SI
 17785                                  
 17786                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17787                                  LowercaseString:
 17788 00001B54 57                      	push	di			; save di
 17789 00001B55 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 17790 00001B57 FC                      	cld
 17791                                  NextChar: 
 17792 00001B58 AC                      	lodsb				; get character from string into al
 17793 00001B59 08C0                    	or	al,al			; are we at end of string?
 17794 00001B5B 7406                    	jz	short EndOfString
 17795                                  
 17796 00001B5D E8E9FF                  	call	LowerCase		; convert character to lowercase
 17797 00001B60 AA                      	stosb				; store character back into buffer
 17798 00001B61 EBF5                    	jmp	short NextChar		; repeat until end of string
 17799                                  
 17800                                  EndOfString:
 17801 00001B63 5F                      	pop	di			; restore di
 17802 00001B64 C3                      	retn
 17803                                  
 17804                                  ;M010;end
 17805                                  
 17806                                  
 17807                                  ; 08/06/2023
 17808                                  ; ---------------------------------------------------------------------------
 17809                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 17810                                  ; -----------------------------------------
 17811                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 17812                                  ; ---------------------------------------------------------------------------
 17813                                  
 17814                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17815                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C44h
 17816                                  screen_f_set:
 17817                                  	; set dir display parameters depending on screen width (# of columns)
 17818 00001B65 1E                      	push	ds
 17819 00001B66 B84000                  	mov	ax,40h
 17820 00001B69 8ED8                    	mov	ds,ax
 17821 00001B6B 833E4A0028              	cmp	word [4Ah],40	; Check ROMBIOS DATA colums per row
 17822                                  				; value (80 or 40)
 17823 00001B70 1F                      	pop	ds
 17824 00001B71 7527                    	jnz	short columns_80 ; 80 columns per line (video mode 3)
 17825 00001B73 8026[9393]BF            	and	byte [screen_f_1],0BFh ; ~40h
 17826 00001B78 C706[9493]0A0A          	mov	word [screen_f_2],0A0Ah ; 10 bytes (file size field)
 17827 00001B7E 8026[1A92]BF            	and	byte [screen_f_3],0BFh
 17828 00001B83 8026[0B94]BF            	and	byte [screen_f_4],0BFh
 17829 00001B88 C706[0C94]0A0A          	mov	word [screen_f_5],0A0Ah ; 10 bytes (file size field)
 17830 00001B8E 8026[2892]BF            	and	byte [screen_f_6],0BFh
 17831 00001B93 C706[2992]1C1C          	mov	word [screen_f_7],1C1Ch ; 28 bytes (free bytes field)
 17832                                  	;jmp	short screen_f_set_retn
 17833 00001B99 C3                      	retn
 17834                                  columns_80:
 17835 00001B9A 800E[9393]40            	or	byte [screen_f_1],40h
 17836 00001B9F C706[9493]0E0E          	mov	word [screen_f_2],0E0Eh ; 14 bytes (file size field)
 17837 00001BA5 800E[1A92]40            	or	byte [screen_f_3],40h
 17838 00001BAA 800E[0B94]40            	or	byte [screen_f_4],40h
 17839 00001BAF C706[0C94]0E0E          	mov	word [screen_f_5],0E0Eh ; 14 bytes (file size field)
 17840 00001BB5 800E[2892]40            	or	byte [screen_f_6],40h
 17841 00001BBA C706[2992]2020          	mov	word [screen_f_7],2020h ; 32 bytes (free bytes field)
 17842                                  screen_f_set_retn:
 17843 00001BC0 C3                      	retn
 17844                                  
 17845                                  ;============================================================================
 17846                                  ; CRATIO.ASM, MSDOS 6.0, 1992
 17847                                  ;============================================================================
 17848                                  ; 08/06/2023 - Retro DOS v4.2
 17849                                  
 17850                                  ; The code to calculate compression ratios requires access to the drive's
 17851                                  ; (DOS) FAT and MagicDrv FAT regions.  Two buffers are used (one for each
 17852                                  ; FAT type).  pbufDOSFAT and pbufMDFAT contain the offset to the buffers,
 17853                                  ; segFATBuf contains the segment (both buffers are in the same segment).
 17854                                  ; The buffers are of variable size: cFATEntries contains the size of the
 17855                                  ; buffers in terms of the number of FAT entries they can contain.
 17856                                  
 17857                                  ; ---------------------------------------------------------------------------
 17858                                  
 17859                                  ;***	OpenCVF - open Compressed Volume File for compression ratio report
 17860                                  ;
 17861                                  ;	ENTRY
 17862                                  ;		FCB setup with drive for DIR
 17863                                  ;
 17864                                  ;	EXIT	If successful, CY clear, CVF file open, fhCVF has file handle,
 17865                                  ;		szCVF has \0 terminated CVF file name, MDBPB loaded.
 17866                                  ;
 17867                                  ;		If unsuccessful, CY set
 17868                                  ;
 17869                                  ;	USED	AX, BX, CX, DX, SI, DI
 17870                                  
 17871                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17872                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1CA1h
 17873                                  OpenCVF:
 17874 00001BC1 B8FFFF                  	mov	ax,-1
 17875 00001BC4 A3[3D9E]                	mov	[fhCVF],ax		;indicate CVF not open
 17876 00001BC7 A3[939E]                	mov	[entInBuf],ax		;  and no FAT entries in buffers
 17877                                  
 17878 00001BCA 8A165C00                	mov	dl,[FCB] ; mov dl,5Ch	;target drive of DIR cmd
 17879 00001BCE 08D2                    	or	dl,dl			;default drive?
 17880 00001BD0 7404                    	jz	short ocvf_default
 17881 00001BD2 FECA                    	dec	dl			;no, from 1=A to 0=A
 17882 00001BD4 EB04                    	jmp	short ocvf_swap_info
 17883                                  
 17884                                  ocvf_default:
 17885 00001BD6 8A16[059E]              	mov	dl,[CURDRV]		;0=A, 1=B, ...
 17886                                  
 17887                                  ocvf_swap_info:
 17888 00001BDA B8114A                  	mov	ax,4A11h ; multMagicDrv	;magicdrv Int 2Fh multiplex ID
 17889 00001BDD BB0100                  	mov	bx,1	 ; MD_DRIVE_MAP	;get drive swap info
 17890 00001BE0 CD2F                    	int	2fh
 17891                                  
 17892 00001BE2 09C0                    	or	ax,ax			;0 if okay
 17893 00001BE4 7573                    	jnz	short ocvf_error
 17894                                  
 17895 00001BE6 F6C380                  	test	bl,80h 			;80h set if compressed volume
 17896 00001BE9 746E                    	jz	short ocvf_error
 17897                                  
 17898 00001BEB 80E37F                  	and	bl,7Fh 			;bl = host drive, bh = seq #
 17899                                  
 17900                                  	; The CVF may have been mounted from a swapped host drive, in which
 17901                                  	; case the host drive returned in BL is the original host (now
 17902                                  	; swapped with a CVF).	Make a second drive swap info call on the
 17903                                  	; returned host to see if it must be accessed by a different drive
 17904                                  	; letter.
 17905                                  
 17906 00001BEE 53                      	push	bx
 17907 00001BEF 52                      	push	dx			;save dl, orig drive letter
 17908                                  
 17909 00001BF0 B8114A                  	mov	ax,4A11h ; mov ax,multMagicDrv
 17910 00001BF3 88DA                    	mov	dl,bl
 17911 00001BF5 BB0100                  	mov	bx,1	 ; mov bx,MD_DRIVE_MAP
 17912 00001BF8 CD2F                    	int	2fh
 17913                                  
 17914 00001BFA 5A                      	pop	dx
 17915 00001BFB 59                      	pop	cx			;bx from 1st drive swap info call
 17916                                  
 17917 00001BFC 09C0                    	or	ax,ax			;0 if okay
 17918 00001BFE 7559                    	jnz	short ocvf_error
 17919                                  
 17920 00001C00 80E37F                  	and	bl,7Fh
 17921 00001C03 87D9                    	xchg	bx,cx			;bx = 1st, cx = 2nd swap results
 17922                                  
 17923 00001C05 38CA                    	cmp	dl,cl			;2nd swap info call return orig drive?
 17924 00001C07 7402                    	je	short ocvf_got_host	;yes, 1st swap info call returned host
 17925                                  
 17926 00001C09 88CB                    	mov	bl,cl			;no, use swapped host, orig seq #
 17927                                  ocvf_got_host:
 17928                                  	; Build the filename of the Compressed Volume File
 17929                                  
 17930                                  	;mov	di,offset TRANGROUP:szCVF
 17931                                  					;CVF name buffer
 17932 00001C0B BF[3F9E]                	mov	di,szCVF
 17933                                  
 17934 00001C0E 88D8                    	mov	al,bl
 17935 00001C10 0441                    	add	al,'A'
 17936 00001C12 B43A                    	mov	ah,':'
 17937 00001C14 FC                      	cld
 17938 00001C15 AB                      	stosw				; drive:
 17939                                  
 17940                                  	;mov	si,offset TRANGROUP:sCVFRoot
 17941                                  					; \name.
 17942 00001C16 BE[0499]                	mov	si,sCVFRoot	; "\DBLSPACE"
 17943                                  	;mov	cx,cbCVFRoot
 17944 00001C19 B90A00                  	mov	cx,10
 17945 00001C1C F3A4                    	rep	movsb
 17946                                  
 17947 00001C1E 83C703                  	add	di,3			; point past extension
 17948 00001C21 30C0                    	xor	al,al
 17949 00001C23 FD                      	std
 17950 00001C24 AA                      	stosb				; null terminate
 17951                                  
 17952 00001C25 88F8                    	mov	al,bh			; seq #
 17953 00001C27 B30A                    	mov	bl,10
 17954                                  	;mov	cx,3			; 3 digit ext/seq #
 17955 00001C29 B103                    	mov	cl,3
 17956                                  ;@@:
 17957 00001C2B 30E4                    ocvf_1:	xor	ah,ah			; convert seq # to ascii
 17958 00001C2D F6F3                    	div	bl			;   and store as CVF extension
 17959 00001C2F 80C430                  	add	ah,'0'
 17960 00001C32 86E0                    	xchg	ah,al
 17961 00001C34 AA                      	stosb
 17962 00001C35 88E0                    	mov	al,ah
 17963                                  	;loop	@b
 17964 00001C37 E2F2                    	loop	ocvf_1
 17965                                  
 17966 00001C39 FC                      	cld
 17967                                  
 17968                                  	; Now open the Compressed Volume File
 17969                                  
 17970                                  	; 08/06/2023
 17971                                  	; MSDOS 6.22 COMMAND.COM code only !
 17972                                  	;;;
 17973 00001C3A BF[3F9E]                	mov	di,szCVF ; *
 17974 00001C3D C745045256              	mov	word [di+4],5652h ; 'RV' (DRVSPACE)
 17975 00001C42 B8003D                  	mov	ax,3D00h
 17976                                  	;mov	dx,szCVF
 17977 00001C45 89FA                    	mov	dx,di ; *
 17978 00001C47 CD21                    	int	21h     ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17979                                  			; DS:DX -> ASCIZ filename
 17980                                  			; AL = access mode
 17981                                  			; 0 - read
 17982 00001C49 7310                    	jnb     short ocvf_2
 17983 00001C4B C74504424C              	mov	word [di+4],4C42h ; 'BL' (DBLSPACE)
 17984                                  	;;;
 17985                                  
 17986                                  	;mov	ax,(OPEN shl 8) or 00h 	;compatibility mode/read access
 17987 00001C50 B8003D                  	mov	ax,3D00h
 17988                                  	;;mov	dx,offset TRANGROUP:szCVF
 17989                                  	;mov	dx,szCVF
 17990 00001C53 89FA                    	mov	dx,di ; *
 17991 00001C55 CD21                    	int	21h
 17992                                  	;jc	short ocvf_error
 17993                                  	; 18/06/2023
 17994 00001C57 7302                    	jnc	short ocvf_2
 17995                                  ocvf_error:	; 18/06/2023
 17996 00001C59 F9                      	stc				;indicate failure
 17997 00001C5A C3                      	retn
 17998                                  ocvf_2:
 17999 00001C5B A3[3D9E]                	mov	[fhCVF],ax		; success, save CVF file handle
 18000                                  
 18001                                  	; Read the extended MagicDrv BPB
 18002                                  
 18003 00001C5E 89C3                    	mov	bx,ax
 18004                                  	;mov	ah,READ
 18005 00001C60 B43F                    	mov	ah,3Fh
 18006                                  	;mov	cx,size MD_BPB
 18007 00001C62 B94000                  	mov	cx,64
 18008                                  	;mov	dx,offset TRANGROUP:MDBPB
 18009 00001C65 BA[4F9E]                	mov	dx,MDBPB
 18010 00001C68 CD21                    	int	21h
 18011 00001C6A 7204                    	jc	short ocvf_error1
 18012                                  
 18013 00001C6C 39C8                    	cmp	ax,cx			; get it all?
 18014 00001C6E 7405                    	je	short ocvf_pick_cluster_size
 18015                                  					; yes...
 18016                                  ocvf_error1:
 18017 00001C70 E86B00                  	call	CloseCVF
 18018                                  	; 18/06/2023
 18019                                  ;ocvf_error:
 18020 00001C73 F9                      	stc				;indicate failure
 18021                                  	;jmp	short ocvf_ret
 18022 00001C74 C3                      	retn
 18023                                  
 18024                                  	; Determine the cluster size to use for ratio calculation
 18025                                  
 18026                                  ocvf_pick_cluster_size:
 18027 00001C75 803E[909E]00            	cmp	byte [fUseHostSize],0 	; user want Host drive cluster size?
 18028 00001C7A 7411                    	je	short ovcf_use_CVF_size	; no, use CVF cluster size
 18029                                  
 18030                                  	;mov	ah,Get_Drive_Data	; get the host drive cluster size
 18031 00001C7C B41C                    	mov	ah,1Ch
 18032 00001C7E 8A16[3F9E]              	mov	dl,[szCVF]
 18033                                  	;sub	dl,40h	
 18034 00001C82 80EA40                  	sub	dl,'A'-1		; 1 = A, 2 = B, ...
 18035 00001C85 1E                      	push	ds
 18036 00001C86 CD21                    	int	21h
 18037 00001C88 1F                      	pop	ds
 18038                                  
 18039 00001C89 3CFF                    	cmp	al,0FFh			; host drive cluster size in AL if okay,
 18040 00001C8B 7503                    	jne	short ovcf_set_size	;   failed = 0FFh
 18041                                  
 18042                                  ovcf_use_CVF_size:
 18043                                  	;mov	al,[MDBPB.dos_bpb.csecPerClu]
 18044 00001C8D A0[5C9E]                	mov	al,[MDBPB+0Dh]		; using CVF cluster size
 18045                                  
 18046                                  ovcf_set_size:
 18047 00001C90 A2[8F9E]                	mov	[csecPerCluster],al
 18048                                  
 18049                                  	; Lastly, setup the FAT buffers
 18050                                  ocvf_set_buf:
 18051 00001C93 A1[129E]                	mov	ax,[BYTCNT]		; if >= 32k TPA space available,
 18052 00001C96 A3[149E]                	mov	[savBytCnt],ax		;   setup larger FAT buffers
 18053 00001C99 3D0080                  	cmp	ax,32*1024  ; 8000h
 18054 00001C9C 7318                    	jae	short ocvf_big_buf
 18055                                  
 18056                                  	; small TPA, use small resident buffers
 18057                                  
 18058                                  	;mov	word ptr [cFATEntries],cRES_FAT_ENTRIES
 18059 00001C9E C706[919E]2000          	mov	word [cFATEntries],32 ; cRES_FAT_ENTRIES
 18060 00001CA4 8C1E[959E]              	mov	[segFATBuf],ds
 18061                                  	;mov	word ptr [pbufDOSFAT],offset TRANGROUP:bufDOSFAT
 18062                                  	;mov	word ptr [pbufMDFAT],offset TRANGROUP:bufMDFAT
 18063 00001CA8 C706[979E][9B9E]        	mov	word [pbufDOSFAT],bufDOSFAT
 18064 00001CAE C706[999E][DB9E]        	mov	word [pbufMDFAT],bufMDFAT
 18065                                  	;jmp	short ocvf_success
 18066                                  	; 08/06/2023
 18067                                  	; cf = 1
 18068 00001CB4 F8                      	clc
 18069 00001CB5 C3                      	retn
 18070                                  
 18071                                  ocvf_big_buf:
 18072                                  	;mov	bx,cBIG_FAT_ENTRIES
 18073 00001CB6 BB0001                  	mov	bx,256
 18074 00001CB9 891E[919E]              	mov	[cFATEntries],bx
 18075                                  
 18076 00001CBD D1E3                    	shl	bx,1			; 6 bytes per entry (2 for DOS FAT, 4 MD FAT)
 18077 00001CBF 89D9                    	mov	cx,bx			; entries * 2
 18078 00001CC1 D1E3                    	shl	bx,1
 18079 00001CC3 01CB                    	add	bx,cx			; bx = # entries * 6
 18080                                  
 18081 00001CC5 29D8                    	sub	ax,bx			; reduce TPA size by size of FAT buffers
 18082 00001CC7 2500FE                  	and	ax,0FE00h		; init code rounds BytCnt down to multiple of
 18083 00001CCA A3[129E]                	mov	[BYTCNT],ax		;   512 bytes -- a no-op with some buf sizes.
 18084                                  
 18085 00001CCD 8B1E[F59D]              	mov	bx,[TPA]		; buffers in the TPA
 18086 00001CD1 891E[959E]              	mov	[segFATBuf],bx
 18087 00001CD5 A3[979E]                	mov	[pbufDOSFAT],ax		; DOS FAT buffer offset
 18088 00001CD8 01C8                    	add	ax,cx			;   + DOS FAT buffer size
 18089 00001CDA A3[999E]                	mov	[pbufMDFAT],ax 		;   = MD FAT buffer offset
 18090                                  	; 08/06/2023
 18091                                  	; cf = 0
 18092                                  ;ocvf_success:
 18093                                  	;clc				;indicate success
 18094                                  ocvf_ret:
 18095 00001CDD C3                      	retn
 18096                                  
 18097                                  ; ---------------------------------------------------------------------------
 18098                                  
 18099                                  ;***	CloseCVF - close Compressed Volume File
 18100                                  ;
 18101                                  ;	ENTRY	fhCVF has file handle
 18102                                  ;
 18103                                  ;	EXIT
 18104                                  ;
 18105                                  ;	USED	AX, BX, CX, DX
 18106                                  
 18107                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18108                                  CloseCVF:
 18109 00001CDE 8B1E[3D9E]              	mov	bx,[fhCVF]		; -1 unless file is open
 18110 00001CE2 83FBFF                  	cmp	bx,-1 ; 0FFFFh
 18111 00001CE5 7410                    	je	short ccvf_ret
 18112                                  
 18113                                  	;mov	ah,CLOSE
 18114 00001CE7 B43E                    	mov	ah,3Eh
 18115 00001CE9 CD21                    	int	21h
 18116                                  
 18117 00001CEB C706[3D9E]FFFF          	mov	word [fhCVF],-1 ; 0FFFFh ; don't try to close again
 18118                                  
 18119 00001CF1 A1[149E]                	mov	ax,[savBytCnt]		; 'deallocate' DOS & MD FAT buffers
 18120 00001CF4 A3[129E]                	mov	[BYTCNT],ax		;   by restoring old TPA byte count
 18121                                  ccvf_ret:
 18122 00001CF7 C3                      	retn
 18123                                  
 18124                                  ; ---------------------------------------------------------------------------
 18125                                  
 18126                                  ;***	CalcCompRatio - calculate file compression ratio
 18127                                  ;
 18128                                  ;	ENTRY	AX = starting cluster of file to get compression ratio of
 18129                                  ;
 18130                                  ;	EXIT	AX = compression ratio.  Example: a ratio of 2.7 to 1.0
 18131                                  ;		     will return AH = 02h & AL = 07h
 18132                                  ;		ccluUsed set to # DOS clusters used by file
 18133                                  ;		csecUsed set to # compressed sectors used by file
 18134                                  ;		ccluUsedDir, ccluUsedTotal, csecUsedDir, csecUsedTotal updated
 18135                                  ;	USED	none
 18136                                  
 18137                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18138                                  CalcCompRatio:
 18139 00001CF8 53                      	push	bx
 18140 00001CF9 51                      	push	cx
 18141 00001CFA 52                      	push	dx
 18142 00001CFB 06                      	push	es
 18143 00001CFC 8E06[959E]              	mov	es,[segFATBuf]		; es is pointer to FAT buffers
 18144                                  	;assume	es:nothing
 18145                                  
 18146 00001D00 31DB                    	xor	bx,bx			; zero count of sectors & clusters used
 18147 00001D02 891E[2B9E]              	mov	[ccluUsed],bx
 18148 00001D06 891E[319E]              	mov	[csecUsed],bx
 18149 00001D0A 891E[339E]              	mov	[csecUsed+2],bx
 18150                                  ccr_next:
 18151 00001D0E 83F802                  	cmp	ax,2			; sanity check the DOS FAT value
 18152 00001D11 7250                    	jb	short ccr_screwy
 18153                                  
 18154 00001D13 83F8F0                  	cmp	ax,0FFF0h		; end of file?
 18155 00001D16 7352                    	jae	short ccr_eof
 18156                                  
 18157 00001D18 E84701                  	call	CheckFATBuffers 	; make sure buffers contain target
 18158 00001D1B 7246                    	jc	short ccr_screwy	;   FAT entries
 18159                                  
 18160 00001D1D E82901                  	call	GetMDFATEntry		; returns corresponding entry in BX:CX
 18161 00001D20 7241                    	jc	short ccr_screwy
 18162                                  
 18163 00001D22 D1E3                    	shl	bx,1			; used bit to CY
 18164 00001D24 733D                    	jnc	short ccr_screwy	; better be used!
 18165                                  
 18166 00001D26 88FD                    	mov	ch,bh			; save uncompressed count
 18167                                  
 18168 00001D28 D1E3                    	shl	bx,1			; get count into position
 18169 00001D2A 81E3000F                	and	bx,0F00h		; bh = count of compressed sectors used
 18170 00001D2E 86FB                    	xchg	bh,bl			; bx = count
 18171 00001D30 43                      	inc	bx			; 0 - 15 means 1 - 16 used
 18172                                  
 18173 00001D31 011E[319E]              	add	[csecUsed],bx
 18174 00001D35 8316[339E]00            	adc	word [csecUsed+2],0
 18175                                  
 18176 00001D3A 89C2                    	mov	dx,ax			; save cluster # in dx
 18177                                  
 18178 00001D3C 88E8                    	mov	al,ch			; uncompressed count to al
 18179 00001D3E B103                    	mov	cl,3
 18180 00001D40 D2E8                    	shr	al,cl			; get uncompressed count into position
 18181 00001D42 83E00F                  	and	ax,000Fh		; ax = uncompressed count (0 - 15)
 18182 00001D45 4B                      	dec	bx			; bx = compressed count (0 - 15)
 18183 00001D46 39D8                    	cmp	ax,bx			; if the compressed cnt > uncompressed
 18184                                  	;jae	@f			;   fudge a little and use the larger
 18185 00001D48 7302                    	jae	short ccr_1 ; jnb
 18186 00001D4A 89D8                    	mov	ax,bx
 18187                                  ;@@:	
 18188                                  ccr_1:
 18189 00001D4C 8A0E[8F9E]              	mov	cl,[csecPerCluster]	; round up to the number of clusters
 18190 00001D50 30ED                    	xor	ch,ch			;   required for uncompressed
 18191 00001D52 01C8                    	add	ax,cx			;   sectors
 18192 00001D54 F6F1                    	div	cl
 18193 00001D56 30E4                    	xor	ah,ah
 18194 00001D58 0106[2B9E]              	add	[ccluUsed],ax
 18195                                  
 18196 00001D5C 89D0                    	mov	ax,dx			; restore cluster #
 18197 00001D5E E8A900                  	call	GetDOSFATEntry		; retuns next DOS FAT entry in AX
 18198                                  	;jc	short ccr_screwy
 18199                                  	;jmp	short ccr_next
 18200                                  	; 08/06/2023
 18201 00001D61 73AB                    	jnc	short ccr_next
 18202                                  ccr_screwy:
 18203 00001D63 31C0                    	xor	ax,ax			; something screwy happened, set
 18204                                  					;   ratio to 0.0 and exit
 18205                                  ccr_ret:
 18206 00001D65 07                      	pop	es
 18207 00001D66 5A                      	pop	dx
 18208 00001D67 59                      	pop	cx
 18209 00001D68 5B                      	pop	bx
 18210 00001D69 C3                      	retn
 18211                                  
 18212                                  	; Reached the end-of-file, now calculate the ratio as the
 18213                                  	; number of DOS sectors used / number of compressed sectors used.
 18214                                  
 18215                                  ccr_eof:
 18216 00001D6A A1[2B9E]                	mov	ax,[ccluUsed]
 18217 00001D6D 0106[2D9E]              	add	[ccluUsedDir],ax	; update cluster used totals
 18218 00001D71 0106[2F9E]              	add	[ccluUsedTotal],ax
 18219                                  
 18220 00001D75 8B0E[339E]              	mov	cx,[csecUsed+2]
 18221 00001D79 8B1E[319E]              	mov	bx,[csecUsed]		; cx:bx = # compressed sectors used
 18222                                  
 18223 00001D7D 011E[359E]              	add	[csecUsedDir],bx	; update sector used totals
 18224 00001D81 110E[379E]              	adc	[csecUsedDir+2],cx
 18225 00001D85 011E[399E]              	add	[csecUsedTotal],bx
 18226 00001D89 110E[3B9E]              	adc	[csecUsedTotal+2],cx
 18227                                  
 18228 00001D8D E80200                  	call	ComputeRatio		; ax=clusters used, cx:bx=sectors used
 18229                                  
 18230 00001D90 EBD3                    	jmp	short ccr_ret
 18231                                  
 18232                                  	; 08/06/2023
 18233                                  ;ccr_screwy:
 18234                                  ;	xor	ax,ax			; something screwy happened, set
 18235                                  ;					;   ratio to 0.0 and exit
 18236                                  ;ccr_ret:
 18237                                  ;	pop	es
 18238                                  ;	pop	dx
 18239                                  ;	pop	cx
 18240                                  ;	pop	bx
 18241                                  ;	retn
 18242                                  
 18243                                  ; ---------------------------------------------------------------------------
 18244                                  
 18245                                  ;***	ComputeRatio - calculate ratio of compressed sectors used to
 18246                                  ;		       (would be) DOS sectors used
 18247                                  ;
 18248                                  ;	Entry
 18249                                  ;		AX = DOS clusters used, cx:bx = compressed sectors used
 18250                                  ;	Exit
 18251                                  ;		ah = whole portion, al = tenths
 18252                                  ;
 18253                                  ;	Used	BX, CX, DX
 18254                                  
 18255                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18256                                  ComputeRatio:
 18257 00001D92 56                      	push	si
 18258 00001D93 57                      	push	di
 18259                                  
 18260 00001D94 89DE                    	mov	si,bx
 18261 00001D96 89CF                    	mov	di,cx			; save cx:bx in di:si
 18262                                  
 18263 00001D98 8A1E[8F9E]              	mov	bl,[csecPerCluster]
 18264 00001D9C 30FF                    	xor	bh,bh
 18265 00001D9E F7E3                    	mul	bx			; dx:ax = # DOS sectors used
 18266 00001DA0 89F3                    	mov	bx,si			; restore bx
 18267                                  
 18268 00001DA2 E83800                  	call	Div32			; dx:ax = quotient, cx:bx = remainder
 18269                                  
 18270 00001DA5 50                      	push	ax			; save quotient
 18271                                  
 18272 00001DA6 89D8                    	mov	ax,bx			; if no remainder, tenths will be 0
 18273 00001DA8 09C8                    	or	ax,cx			;   which is in AX so skip following
 18274 00001DAA 7423                    	jz	short cr_got_tenths	;   (happens frequently)
 18275                                  
 18276                                  	; Multiply the reminder by 10, add half the divisor so result is
 18277                                  	; rounded up, and divide again to get tenths digit
 18278                                  
 18279 00001DAC 89C8                    	mov	ax,cx
 18280 00001DAE 31D2                    	xor	dx,dx
 18281 00001DB0 89D9                    	mov	cx,bx
 18282 00001DB2 BB0A00                  	mov	bx,10
 18283 00001DB5 F7E3                    	mul	bx
 18284 00001DB7 91                      	xchg	ax,cx
 18285 00001DB8 F7E3                    	mul	bx
 18286 00001DBA 01CA                    	add	dx,cx			; dx:ax = remainder * 10
 18287                                  
 18288 00001DBC 89F9                    	mov	cx,di
 18289 00001DBE 89F3                    	mov	bx,si
 18290 00001DC0 D1E9                    	shr	cx,1
 18291 00001DC2 D1DB                    	rcr	bx,1			; cx:bx = 1/2 divisor
 18292 00001DC4 01D8                    	add	ax,bx
 18293 00001DC6 11CA                    	adc	dx,cx			; dx:ax = remainder * 10 + 1/2 divisor
 18294                                  
 18295 00001DC8 89F9                    	mov	cx,di
 18296 00001DCA 89F3                    	mov	bx,si
 18297                                  
 18298 00001DCC E80E00                  	call	Div32
 18299                                  
 18300                                  cr_got_tenths:
 18301 00001DCF 5B                      	pop	bx			; original quotient
 18302 00001DD0 88DC                    	mov	ah,bl
 18303                                  
 18304 00001DD2 3C0A                    	cmp	al,10			; if the tenths rounded up to the
 18305 00001DD4 7204                    	jb	short cr_exit 		;   next whole number, adjust the
 18306                                  					;   whole number part and 0 the
 18307 00001DD6 FEC4                    	inc	ah			;   tenths  (i.e. round 1.97 to 2.0)
 18308 00001DD8 30C0                    	xor	al,al
 18309                                  cr_exit:
 18310 00001DDA 5F                      	pop	di
 18311 00001DDB 5E                      	pop	si
 18312                                  
 18313 00001DDC C3                      	retn
 18314                                  
 18315                                  ; --------------------------------------------------------------------------- 
 18316                                  
 18317                                  ;***	Div32 - 32 bit divide for computing ratios
 18318                                  ;
 18319                                  ;	Entry	DX:AX = dividend, CX:BX = divisor
 18320                                  ;
 18321                                  ;	Exit	DX:AX = quotient, CX:BX = reminder
 18322                                  
 18323                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18324                                  Div32:
 18325 00001DDD E322                    	jcxz	d32_16bit		; differently if 16bit divisor
 18326                                  
 18327 00001DDF 56                      	push	si
 18328 00001DE0 57                      	push	di
 18329                                  
 18330                                  	; Brute force divide by subtraction. This is okay because worse case
 18331                                  	; the dividend will only be 16 times greater, and typically about 2
 18332                                  	; times
 18333                                  
 18334 00001DE1 31F6                    	xor	si,si
 18335 00001DE3 89F7                    	mov	di,si			; di:si is quotient
 18336                                  ;@@:
 18337                                  div32_1:
 18338 00001DE5 29D8                    	sub	ax,bx			; subtract divisor
 18339 00001DE7 19CA                    	sbb	dx,cx
 18340 00001DE9 7208                    	jc	short d32_too_far
 18341                                  
 18342 00001DEB 83C601                  	add	si, 1			; accumulate quotient
 18343 00001DEE 83D700                  	adc	di, 0
 18344                                  	;jmp	short @b
 18345 00001DF1 EBF2                    	jmp	short div32_1
 18346                                  
 18347                                  d32_too_far:
 18348 00001DF3 01D8                    	add	ax,bx			; fix the last subtraction
 18349 00001DF5 11CA                    	adc	dx,cx
 18350                                  
 18351 00001DF7 89F9                    	mov	cx,di
 18352 00001DF9 89F3                    	mov	bx,si			; dx:ax = remainder, cx:bx = quoient
 18353                                  
 18354 00001DFB 93                      	xchg	ax,bx
 18355 00001DFC 87D1                    	xchg	dx,cx			; dx:ax = quoient, cx:bx = remainder
 18356                                  
 18357 00001DFE 5F                      	pop	di
 18358 00001DFF 5E                      	pop	si
 18359                                  
 18360 00001E00 C3                      	retn
 18361                                  
 18362                                  d32_16bit:
 18363 00001E01 F7F3                    	div	bx			; divide dx:ax by bx
 18364                                  
 18365 00001E03 89D3                    	mov	bx,dx			; remainder to cx:bx
 18366 00001E05 31D2                    	xor	dx,dx			; quotient to dx:ax
 18367 00001E07 89D1                    	mov	cx,dx
 18368 00001E09 C3                      	retn
 18369                                  
 18370                                  ; --------------------------------------------------------------------------- 
 18371                                  
 18372                                  ;***	GetDOSFATEntry - returns next cluster in file's FAT chain
 18373                                  ;
 18374                                  ;	Entry	AX = current cluster number
 18375                                  ;		ES = segment of FAT buffer
 18376                                  ;		Entry should be in FAT buffer
 18377                                  ;
 18378                                  ;	Exit	AX = next cluster number
 18379                                  ;		CY set if error
 18380                                  ;
 18381                                  ;	Uses	BX
 18382                                  
 18383                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18384                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1EF2h
 18385                                  GetDOSFATEntry:
 18386 00001E0A 2B06[939E]              	sub	ax,[entInBuf]		; calc entry # in buffer
 18387 00001E0E 7212                    	jc	short gdf_ret 		; CY already set for error
 18388                                  
 18389 00001E10 89C3                    	mov	bx,ax
 18390                                  
 18391                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 18392 00001E12 803E[8C9E]00            	cmp	byte [MDBPB+3Dh],0
 18393 00001E17 750A                    	jnz	short gdf_12		; go do 12
 18394                                  
 18395 00001E19 D1E3                    	shl	bx,1			; offset = entry * 2
 18396 00001E1B 031E[979E]              	add	bx,[pbufDOSFAT]
 18397 00001E1F 268B07                  	mov	ax,[es:bx]
 18398                                  	; 08/06/2023
 18399                                  	; cf = 0
 18400                                  ;gdf_success:
 18401                                  	;clc				; success
 18402                                  gdf_ret:
 18403 00001E22 C3                      	retn
 18404                                  
 18405                                  gdf_12:
 18406 00001E23 D1EB                    	shr	bx,1
 18407 00001E25 01C3                    	add	bx,ax			; offset to entry = entry * 1.5
 18408 00001E27 031E[979E]              	add	bx,[pbufDOSFAT]
 18409                                  
 18410                                  ;	ES:BX points to the word containing the desired 12 bit FAT entry.
 18411                                  ;	For odd entries, the upper 12 bits are valid, for even entries
 18412                                  ;	the low 12 bits are valid.  odd: OOOx  even: xEEE
 18413                                  
 18414 00001E2B A801                    	test	al,1			; is current entry odd?
 18415                                  
 18416 00001E2D 268B07                  	mov	ax,[es:bx]		; word with FAT entry
 18417 00001E30 7505                    	jnz	short gdf_odd
 18418                                  
 18419 00001E32 25FF0F                  	and	ax,0FFFh		; keep low 12 bits for even
 18420 00001E35 EB08                    	jmp	short gdf_testEOF
 18421                                  
 18422                                  gdf_odd:
 18423 00001E37 89CB                    	mov	bx,cx			; (save cx in bx)
 18424 00001E39 B104                    	mov	cl,4
 18425 00001E3B D3E8                    	shr	ax,cl			; upper 12 bits for odd
 18426 00001E3D 89D9                    	mov	cx,bx			; (restore cx)
 18427                                  
 18428                                  gdf_testEOF:
 18429 00001E3F 3DF00F                  	cmp	ax,0FF0h		; valid entry?
 18430                                  	;jb	short gdf_success
 18431 00001E42 F5                      	cmc	; cf = 1 <--> cf = 0
 18432 00001E43 73DD                    	jnc	short gdf_ret	
 18433                                  
 18434 00001E45 80CCF0                  	or	ah,0F0h			; caller expects 16 bit special values
 18435                                  	;jmp	short gdf_success
 18436                                  	; cf = 0
 18437 00001E48 C3                      	retn
 18438                                  
 18439                                  ; --------------------------------------------------------------------------- 
 18440                                  
 18441                                  ;***	GetMDFATEntry - returns requested MD FAT entry
 18442                                  ;
 18443                                  ;	Entry	AX = current DOS cluster number
 18444                                  ;		ES = segment of FAT buffer
 18445                                  ;		Entry should be in FAT buffer
 18446                                  ;
 18447                                  ;	Exit	BX:CX = corresponding MD FAT entry
 18448                                  ;		CY set if error
 18449                                  ;
 18450                                  ;	Uses	None
 18451                                  
 18452                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18453                                  GetMDFATEntry:
 18454 00001E49 89C3                    	mov	bx,ax
 18455 00001E4B 2B1E[939E]              	sub	bx,[entInBuf]		; calc entry # in buffer
 18456 00001E4F 7210                    	jc	short gmf_ret 		; CY already set for error return
 18457                                  
 18458 00001E51 D1E3                    	shl	bx,1
 18459 00001E53 D1E3                    	shl	bx,1			; * 4 bytes per MDFAT entry
 18460                                  
 18461 00001E55 031E[999E]              	add	bx,[pbufMDFAT]
 18462 00001E59 268B0F                  	mov	cx,[es:bx]
 18463 00001E5C 268B5F02                	mov	bx,[es:bx+2]
 18464                                  
 18465 00001E60 F8                      	clc
 18466                                  gmf_ret:
 18467 00001E61 C3                      	retn
 18468                                  
 18469                                  ; --------------------------------------------------------------------------- 
 18470                                  
 18471                                  ;***	CheckFATBuffers - check that target FAT entry is in FAT buffers.  If
 18472                                  ;			  not, fill the buffers starting with the requested
 18473                                  ;			  entry.
 18474                                  ;
 18475                                  ;	ENTRY	AX = FAT entry #
 18476                                  ;		ES = segment of FAT buffers
 18477                                  ;
 18478                                  ;	EXIT	FAT buffers contain target entry, or CY set if error
 18479                                  ;		entInBuf updated
 18480                                  ;
 18481                                  ;	USED	BX
 18482                                  
 18483                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18484                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1F4Bh
 18485                                  
 18486                                  CheckFATBuffers:
 18487 00001E62 89C3                    	mov	bx,ax
 18488 00001E64 2B1E[939E]              	sub	bx,[entInBuf]
 18489 00001E68 7208                    	jb	short cfb_load_fat
 18490                                  
 18491 00001E6A 2B1E[919E]              	sub	bx,[cFATEntries]
 18492 00001E6E 7302                    	jae	short cfb_load_fat ; jnb
 18493                                  
 18494 00001E70 F8                      	clc
 18495 00001E71 C3                      	retn
 18496                                  
 18497                                  	; Desired entry isn't in the FAT buffers, reload the buffers to
 18498                                  	; include it
 18499                                  
 18500                                  cfb_load_fat:
 18501 00001E72 50                      	push	ax
 18502 00001E73 51                      	push	cx
 18503 00001E74 52                      	push	dx
 18504                                  
 18505                                  	; Start with the DOS FAT buffer
 18506                                  
 18507 00001E75 31C9                    	xor	cx,cx			; zero high offset to FAT file position
 18508                                  
 18509                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 18510 00001E77 803E[8C9E]00            	cmp	byte [MDBPB+3Dh],0
 18511 00001E7C 7509                    	jnz	short cfb_12		; go do 12
 18512                                  
 18513 00001E7E A3[939E]                	mov	[entInBuf],ax		; this entry is first
 18514                                  
 18515 00001E81 D1E0                    	shl	ax,1			; 2 bytes per cluster #
 18516 00001E83 D1D1                    	rcl	cx,1			; cx:ax = offset to FAT entry
 18517                                  
 18518 00001E85 EB0B                    	jmp	short cfb_common
 18519                                  
 18520                                  cfb_12:
 18521                                  	;and	al,not 1 ; 0FEh		; start with even # entry
 18522 00001E87 24FE                    	and	al,~1
 18523 00001E89 A3[939E]                	mov	[entInBuf],ax
 18524                                  
 18525 00001E8C 89C3                    	mov	bx,ax
 18526 00001E8E D1EB                    	shr	bx,1
 18527 00001E90 01D8                    	add	ax,bx			; ax = offset to FAT entry
 18528                                  					;      (entry # * 1.5)
 18529                                  cfb_common:
 18530 00001E92 89C3                    	mov	bx,ax			; cx:bx = offset to FAT entry
 18531                                  
 18532                                  	;mov	ax,[MDBPB.csecMDReserved] ; # magicDrv reserved sectors
 18533 00001E94 A1[769E]                	mov	ax,[MDBPB+27h]
 18534                                  	;add	ax,[MDBPB.dos_bpb.csecReserved]
 18535 00001E97 0306[5D9E]              	add	ax,[MDBPB+0Eh]
 18536                                  
 18537                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 18538 00001E9B F726[5A9E]              	mul	word [MDBPB+0Bh]	; DX:AX = DOS FAT file origin
 18539 00001E9F 01D8                    	add	ax,bx
 18540 00001EA1 11CA                    	adc	dx,cx			; DX:AX = file offset to read from
 18541                                  
 18542 00001EA3 8B0E[919E]              	mov	cx,[cFATEntries]	; size to read
 18543 00001EA7 D1E1                    	shl	cx,1
 18544 00001EA9 8B1E[979E]              	mov	bx,[pbufDOSFAT]		; es:bx = location to read
 18545                                  
 18546 00001EAD E83500                  	call	ReadCVFile
 18547 00001EB0 722F                    	jc	short cfb_error
 18548                                  
 18549                                  	; Now read the corresponding MagicDrv FAT entries
 18550                                  
 18551                                  	;mov	ax,[MDBPB.secMDFATStart]
 18552 00001EB2 A1[739E]                	mov	ax,[MDBPB+24h]
 18553 00001EB5 40                      	inc	ax
 18554                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 18555 00001EB6 F726[5A9E]              	mul	word [MDBPB+0Bh]	; DX:AX = MDFAT file offset
 18556                                  
 18557 00001EBA 8B1E[939E]              	mov	bx,[entInBuf]
 18558 00001EBE 31C9                    	xor	cx,cx			; CX:BX = 32 bit cluster #
 18559                                  	;add	bx,[MDBPB.cluFirstData]
 18560 00001EC0 031E[7C9E]              	add	bx,[MDBPB+2Dh]
 18561 00001EC4 11C9                    	adc	cx,cx			; CX:BX = MDFAT entry #
 18562                                  
 18563 00001EC6 D1E3                    	shl	bx,1
 18564 00001EC8 D1D1                    	rcl	cx,1
 18565 00001ECA D1E3                    	shl	bx,1
 18566 00001ECC D1D1                    	rcl	cx,1			; * 4 bytes per MDFAT entry
 18567                                  
 18568 00001ECE 01D8                    	add	ax,bx
 18569 00001ED0 11CA                    	adc	dx,cx			; DX:AX = file offset of MDFAT entry
 18570                                  
 18571 00001ED2 8B0E[919E]              	mov	cx,[cFATEntries]
 18572 00001ED6 D1E1                    	shl	cx,1
 18573 00001ED8 D1E1                    	shl	cx,1			; size to read
 18574 00001EDA 8B1E[999E]              	mov	bx,[pbufMDFAT]		; es:bx = location to read into
 18575                                  
 18576 00001EDE E80400                  	call	ReadCVFile
 18577                                  	;jnc	short cfb_ret ; cf = 0 ; 08/06/2023
 18578                                  	; 08/06/2023
 18579                                  	; cf = 1
 18580                                  cfb_error:
 18581                                  	;stc
 18582                                  cfb_ret:
 18583 00001EE1 5A                      	pop	dx
 18584 00001EE2 59                      	pop	cx
 18585 00001EE3 58                      	pop	ax
 18586 00001EE4 C3                      	retn
 18587                                  
 18588                                  ; --------------------------------------------------------------------------- 
 18589                                  
 18590                                  ;***	ReadCVFile - read from the Compressed Volume File
 18591                                  ;
 18592                                  ;	Entry	DX:AX file offset, ES:BX buffer location, CX length in bytes
 18593                                  ;
 18594                                  ;	Exit	CY set if error, else data read
 18595                                  ;
 18596                                  ;	Uses	AX, BX, CX, DX
 18597                                  
 18598                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18599                                  ReadCVFile:
 18600 00001EE5 53                      	push	bx			; save buffer loc
 18601 00001EE6 51                      	push	cx			; save read length
 18602                                  
 18603 00001EE7 89D1                    	mov	cx,dx
 18604 00001EE9 89C2                    	mov	dx,ax			; cx:dx = file offset of fat entry
 18605                                  	;mov	ax,(LSEEK shl 8) or 0
 18606 00001EEB B80042                  	mov	ax,4200h
 18607 00001EEE 8B1E[3D9E]              	mov	bx,[fhCVF]
 18608 00001EF2 CD21                    	int	21h
 18609 00001EF4 720E                    	jc	short rcf_ret 		; CY set for error return
 18610                                  
 18611                                  	;mov	ah,READ
 18612 00001EF6 B43F                    	mov	ah,3Fh
 18613 00001EF8 59                      	pop	cx			; read length
 18614 00001EF9 5A                      	pop	dx			; buffer loc offset
 18615 00001EFA 1E                      	push	ds
 18616 00001EFB 06                      	push	es
 18617 00001EFC 1F                      	pop	ds			; buffer loc segment
 18618 00001EFD CD21                    	int	21h
 18619 00001EFF 1F                      	pop	ds
 18620 00001F00 7202                    	jc	short rcf_ret 		; CY set for error return
 18621                                  
 18622 00001F02 39C8                    	cmp	ax,cx			; read it all?
 18623                                  	;je	short rcf_ret 		; yes, CY clear
 18624                                  	; 08/06/2023	
 18625                                  	; ax < cx
 18626                                  	;stc				; end-of-file?
 18627                                  rcf_ret:
 18628 00001F04 C3                      	retn
 18629                                  
 18630                                  ;============================================================================
 18631                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 18632                                  ;============================================================================
 18633                                  ; 09/10/2018 - Retro DOS v3.0
 18634                                  
 18635                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 18636                                  
 18637                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18638                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 18639                                  
 18640                                  ; =============== S U B	R O U T	I N E =======================================
 18641                                  
 18642                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18643                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1FF4h
 18644                                  PAUSE:
 18645 00001F05 BA[6292]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 18646 00001F08 E80436                  	call	std_printf
 18647 00001F0B E819E7                  	call	GETKEYSTROKE
 18648                                  	;call	CRLF2
 18649                                  	;retn
 18650                                  	; 19/02/2023
 18651 00001F0E E9100C                  	jmp	CRLF2
 18652                                  
 18653                                  ; ---------------------------------------------------------------------------
 18654                                  
 18655                                  ;****************************************************************
 18656                                  ;*
 18657                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 18658                                  ;*
 18659                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 18660                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 18661                                  ;*		up an error message and transfer control to CERROR.
 18662                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 18663                                  ;*		entered or SLASHP_ERASE if /P entered.
 18664                                  ;*
 18665                                  ;* INPUT:	command line at offset 81H
 18666                                  ;*
 18667                                  ;* OUTPUT:	if no error:
 18668                                  ;*		FCB at 5ch set up with filename(s) entered
 18669                                  ;*		Current directory set to entered directory
 18670                                  ;*
 18671                                  ;****************************************************************
 18672                                  
 18673                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18674                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 18675                                  
 18676                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18677                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2001h
 18678                                  ERASE:
 18679                                  	; MSDOS 6.0
 18680                                  
 18681                                  	;assume	ds:trangroup,es:trangroup
 18682                                  
 18683 00001F11 BE8100                  	mov	si,81h		;AC000; get command line
 18684 00001F14 C706[089E]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 18685 00001F1A BF[2B98]                	mov	di,PARSE_ERASE
 18686                                  				;AN000; Get address of PARSE_ERASE
 18687 00001F1D 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18688                                  erase_scan:
 18689 00001F1F 31D2                    	xor	dx,dx		;AN000;
 18690 00001F21 E8E507                  	call	Parse_With_Msg	;AC018; call parser
 18691                                  	
 18692                                  	;cmp	ax,-1  ; 0FFFFh
 18693                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 18694                                  	;je	short good_line	;AN000; yes - done parsing
 18695                                  	;;cmp	ax,0
 18696                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 18697                                  	;and	ax,ax		;AC000; did we have an error?
 18698                                  	;jnz	short errj2	;AC000; yes exit
 18699                                  	; 10/06/2023
 18700 00001F24 40                      	inc	ax  ; cmp ax,-1
 18701 00001F25 743C                    	jz	short good_line ; 0FFFFh -> 0
 18702 00001F27 48                      	dec	ax  ; cmp ax,0	
 18703 00001F28 7566                    	jnz	short errj2  ; 1 -> 0
 18704                                  	; ax = 0
 18705                                  
 18706 00001F2A 813E[E3A9][9E97]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 18707                                  				;AN000; was /P entered?
 18708 00001F30 741C                    	je	short set_erase_prompt
 18709                                  				;AN000; yes - go set prompt
 18710                                  ;
 18711                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 18712                                  ;
 18713 00001F32 56                      	push	si		;AC000; save position in line
 18714 00001F33 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18715                                  				;AC000; get address of filespec
 18716                                  	;cmp	byte [si+1],colon_char
 18717 00001F37 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 18718 00001F3B 750B                    	jne	short erase_drive_ok
 18719                                  				;AC000; no - continue
 18720                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 18721 00001F3D 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 18722 00001F41 7505                    	jne	short erase_drive_ok
 18723                                  				;AC000; no - continue
 18724 00001F43 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 18725                                  				;AN022; get message number in control block
 18726 00001F46 EB3D                    	jmp	short extend_setup
 18727                                  				;AC000; exit
 18728                                  erase_drive_ok:
 18729 00001F48 E8AA12                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 18730 00001F4B 5E                      	pop	si		;AC000; get position back
 18731 00001F4C EBD1                    	jmp	short erase_scan
 18732                                  				;AN000; continue parsing
 18733                                  set_erase_prompt:
 18734 00001F4E 833E[089E]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 18735 00001F53 7408                    	jz	short ok_to_set_erase_prompt
 18736                                  				;AN018; no go set switch
 18737                                  	;mov	ax,1
 18738 00001F55 B80100                  	mov	ax,MoreArgs_Ptr 
 18739                                  				;AN018; set up too many arguments
 18740 00001F58 E8BD07                  	call	setup_parse_error_msg
 18741                                  				;AN018; set up an error message
 18742 00001F5B EB33                    	jmp	short errj2	;AN018; exit
 18743                                  
 18744                                  ok_to_set_erase_prompt: 	;AN018;
 18745 00001F5D FF06[089E]              	inc	word [COMSW]	;AN000; indicate /p specified
 18746 00001F61 EBBC                    	jmp	short erase_scan
 18747                                  				;AN000; continue parsing
 18748                                  good_line:			;G  We know line is good
 18749 00001F63 E8640C                  	call	PathCrunch
 18750 00001F66 730D                    	jnc	short checkdr
 18751 00001F68 A1[25A2]                	mov	ax,[Msg_Numb]	;AN022; get message number
 18752                                  	;cmp	ax,0		;AN022; was message flag set?
 18753 00001F6B 09C0                    	or	ax,ax
 18754 00001F6D 7516                    	jnz	short extend_setup
 18755                                  				;AN022; yes - print out message
 18756                                  	;cmp	byte [DestIsDir],0
 18757 00001F6F 3806[AAA0]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 18758 00001F73 750D                    	jnz	short badpath_err
 18759                                  				;AC022; see if they should have
 18760                                  checkdr:
 18761 00001F75 833E[089E]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 18762 00001F7A 7403                    	jz	short notest2j	;AN000; no - go to notest2
 18763 00001F7C E9061B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 18764                                  notest2j:
 18765 00001F7F E99E1A                  	jmp	notest2
 18766                                  
 18767                                  badpath_err:			;AN022; "Path not found" message
 18768 00001F82 B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 18769                                  				;AN022; set up error number
 18770                                  extend_setup:			;AN022;
 18771                                  	;mov	byte [msg_disp_class],1
 18772 00001F85 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 18773                                  				;AN022; set up extended error msg class
 18774 00001F8A BA[D091]                	mov	dx,extend_buf_ptr
 18775                                  				;AC022; get extended message pointer
 18776 00001F8D A3[D091]                	mov	[extend_buf_ptr],ax
 18777                                  				;AN022; get message number in control block
 18778                                  errj2:				;AC022; exit jump
 18779 00001F90 E90F0F                  	jmp	cerror		;AN022;
 18780                                  
 18781                                  ; ---------------------------------------------------------------------------
 18782                                  
 18783                                  ; ****************************************************************
 18784                                  ; *
 18785                                  ; * ROUTINE:	 CRENAME - rename file(s)
 18786                                  ; *
 18787                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 18788                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 18789                                  ; *		 Make sure the second filespec only contains a
 18790                                  ; *		 filename. If both openands are valid, attempt
 18791                                  ; *		 to rename the file.
 18792                                  ; *
 18793                                  ; * INPUT:	 command line at offset 81H
 18794                                  ; *
 18795                                  ; * OUTPUT:	 none
 18796                                  ; *
 18797                                  ; ****************************************************************
 18798                                  
 18799                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18800                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18801                                  CRENAME:
 18802                                  	; MSDOS 6.0
 18803                                  	;assume	ds:trangroup,es:trangroup
 18804                                  
 18805 00001F93 BE8100                  	mov	si,81h		;AC000; Point to command line
 18806 00001F96 BF[AD98]                	mov	di,PARSE_RENAME
 18807                                  				;AN000; Get address of PARSE_RENAME
 18808 00001F99 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18809 00001F9B 31D2                    	xor	dx,dx		;AN000;
 18810 00001F9D E86907                  	call	Parse_With_Msg	;AC018; call parser
 18811                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 18812 00001FA0 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 18813                                  ;	jz	short crename_no_parse_error
 18814                                  				;AC000; no - continue
 18815 00001FA2 752C                    	jnz	short crename_parse_error
 18816                                  				;AC000; Yes, fail. (need long jump)
 18817                                  ;
 18818                                  ;  Get first file name returned from parse into our buffer
 18819                                  ;
 18820                                  crename_no_parse_error:
 18821 00001FA4 56                      	push	si		;AN000; save position in line
 18822 00001FA5 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18823                                  				;AN000; get address of filespec
 18824 00001FA9 E84912                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 18825 00001FAC 5E                      	pop	si		;AN000; restore position in line
 18826                                  
 18827 00001FAD 31D2                    	xor	dx,dx		;AN000; clear dx
 18828 00001FAF E85707                  	call	Parse_With_Msg	;AC018; call parser
 18829                                  	;cmp	ax,RESULT_NO_ERROR
 18830 00001FB2 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 18831 00001FB4 751A                    	jnz	short crename_parse_error
 18832                                  				;AN000; Yes, fail.
 18833                                  ;
 18834                                  ;  Check the second file name for drive letter colon
 18835                                  ;
 18836 00001FB6 56                      	push	si		;AN000; save position in line
 18837 00001FB7 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18838                                  				;AC000; get address of path
 18839                                  	;mov	al,':'		;AC000;
 18840                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 18841 00001FBB 807C013A                	cmp	byte [si+1],':'
 18842 00001FBF 7511                    	jnz	short ren_no_drive
 18843                                  				;AN000; Yes, error
 18844                                  	;mov	byte [msg_disp_class],2
 18845 00001FC1 C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 18846                                  				;AN000; set up parse error msg class
 18847 00001FC6 BA[D091]                	mov	dx,extend_buf_ptr
 18848                                  				;AC000; get extended message pointer
 18849                                  	;mov	word [extend_buf_ptr],0Ah
 18850 00001FC9 C706[D091]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 18851                                  				;AN000; get "Invalid parameter" message number
 18852 00001FCF 5E                      	pop	si		;AN000;
 18853                                  crename_parse_error:		;AC022;
 18854 00001FD0 EB64                    	jmp	short errj	;AC000;
 18855                                  
 18856                                  ;  Get second file name returned from parse into the fCB. Save
 18857                                  ;  character after file name so we can later check to make sure it
 18858                                  ;  isn't a path character.
 18859                                  
 18860                                  ren_no_drive:
 18861 00001FD2 BF6C00                  	mov	di,FCB+10h ; 6Ch
 18862                                  				;AC000; set up to parse second file name
 18863                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 18864 00001FD5 B80129                  	mov	ax,2901h
 18865 00001FD8 CD21                    	int	21h		;AC000; do the function
 18866 00001FDA AC                      	lodsb			;AC000; Load char after filename
 18867 00001FDB A2[A2A0]                	mov	[One_Char_Val],al
 18868                                  				;AN000; save char after filename
 18869 00001FDE 5E                      	pop	si		;AN000; get line position back
 18870                                  ;
 18871                                  ; We have source and target. See if any args beyond.
 18872                                  ;
 18873 00001FDF BF[AD98]                	mov	di,PARSE_RENAME
 18874                                  				;AC000; get address of parse_rename
 18875 00001FE2 E80E07                  	call	parse_check_eol ;AC000; are we at end of line?
 18876 00001FE5 75E9                    	jnz	short crename_parse_error
 18877                                  				;AN000; no, fail.
 18878 00001FE7 E8E00B                  	call	PathCrunch
 18879 00001FEA BA[E191]                	mov	dx,BADCPMES_PTR
 18880 00001FED 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 18881 00001FEF 730F                    	jnc	short notest3
 18882 00001FF1 A1[25A2]                	mov	ax,[Msg_Numb]	;AN022; get message number
 18883                                  	;cmp	ax,0		;AN022; was message flag set?
 18884 00001FF4 21C0                    	and	ax,ax ; 0 ?
 18885 00001FF6 758D                    	jnz	short extend_setup
 18886                                  				;AN022; yes - print out message
 18887                                  	;cmp	byte [DestIsDir],0
 18888 00001FF8 3806[AAA0]              	cmp	[DestIsDir],al	; No CHDIRs worked
 18889 00001FFC 7402                    	jz	short notest3 	; see if they should have
 18890 00001FFE EB82                    	Jmp	badpath_err	;AC022; set up error
 18891                                  notest3:
 18892 00002000 A0[A2A0]                	mov	al,[One_Char_Val]
 18893                                  				;AN000; move char into AX
 18894 00002003 BA[FF91]                	mov	dx,INORNOT_PTR 
 18895                                  				; Load invalid fname error ptr
 18896 00002006 E8B30B                  	call	pathchrcmp	; Is the char in al a path sep?
 18897 00002009 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 18898                                  				;  filename only.
 18899                                  	;mov	ah,FCB_Rename
 18900 0000200B B417                    	mov	ah,17h
 18901 0000200D BA5C00                  	mov	dx,FCB ; 5Ch
 18902 00002010 CD21                    	int	21h
 18903 00002012 3CFF                    	cmp	al,0FFh		; Did an error occur??
 18904 00002014 7506                    	jne	short renameok
 18905                                  
 18906 00002016 E82902                  	call	get_ext_error_number
 18907                                  				;AN022; get extended error
 18908 00002019 50                      	push	ax		;AC022; Save results
 18909 0000201A B0FF                    	mov	al,0FFh		; Restore original error state
 18910                                  renameok:
 18911 0000201C 50                      	push	ax
 18912 0000201D E8BE09                  	call	RestUDir
 18913 00002020 58                      	pop	ax
 18914 00002021 FEC0                    	inc	al
 18915                                  	;;retnz
 18916                                  	;jz	short rn1
 18917                                  	;retn	
 18918 00002023 7514                    	jnz	short ret56
 18919                                  rn1:
 18920 00002025 58                      	pop	ax		;AC022; get the error number back
 18921 00002026 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 18922                                  				;AN022; error file not found?
 18923 00002029 7408                    	je	short use_renerr
 18924                                  				;AN022; yes - use generic error message
 18925 0000202B 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 18926                                  				;AN022; error file not found?
 18927 0000202E 7403                    	je	short use_renerr
 18928                                  				;AN022; yes - use generic error message
 18929 00002030 E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 18930                                  
 18931                                  use_renerr:
 18932 00002033 BA[DE91]                	mov	dx,RENERR_PTR	;AC022;
 18933                                  errj:
 18934 00002036 E9690E                  	jmp	cerror
 18935                                  ret56:
 18936                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023	
 18937 00002039 C3                      	retn
 18938                                  
 18939                                  ; ---------------------------------------------------------------------------
 18940                                  
 18941                                  ;****************************************************************
 18942                                  ;*
 18943                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 18944                                  ;*		standard output device
 18945                                  ;*
 18946                                  ;* SYNTAX:	TYPE filespec
 18947                                  ;*
 18948                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 18949                                  ;*		1Ah and display the contents to STDOUT.
 18950                                  ;*
 18951                                  ;* INPUT:	command line at offset 81H
 18952                                  ;*
 18953                                  ;* OUTPUT:	none
 18954                                  ;*
 18955                                  ;****************************************************************
 18956                                  
 18957                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18958                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18959                                  TYPEFIL:
 18960                                  	; MSDOS 6.0	
 18961                                  	;assume	ds:trangroup,es:trangroup
 18962                                  
 18963 0000203A BE8100                  	mov	si,81h
 18964 0000203D BF[1998]                	mov	di,PARSE_MRDIR
 18965                                  				;AN000; Get address of PARSE_MRDIR
 18966 00002040 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18967 00002042 31D2                    	xor	dx,dx		;AN000;
 18968 00002044 E8C206                  	call	Parse_With_Msg	;AC018; call parser
 18969                                  	;cmp	ax,RESULT_NO_ERROR
 18970 00002047 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 18971 00002049 751E                    	jnz	short typefil_parse_error
 18972                                  				;AN000; yes - issue error message
 18973                                  
 18974 0000204B 56                      	push	si		;AC000; save position in line
 18975 0000204C C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18976                                  				;AC000; get address of filespec
 18977 00002050 E8A211                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 18978 00002053 5E                      	pop	si		;AC000; get position back
 18979 00002054 BF[1998]                	mov	di,PARSE_MRDIR
 18980                                  				;AC000; get address of parse_mrdir
 18981 00002057 E89906                  	call	parse_check_eol ;AC000; are we at end of line?
 18982                                  	;jz	short gottarg 	;AC000; yes - continue
 18983                                  	; 20/02/2023
 18984                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 18985                                  	;jmp	cerror
 18986 0000205A 750D                    	jnz	short typefil_parse_error
 18987                                  gottarg:
 18988 0000205C E8DD0F                  	call	SETPATH
 18989 0000205F F606[AEA0]02            	test	byte [DestInfo],00000010b ; 2
 18990                                  				; Does the filespec contain wildcards
 18991 00002064 7406                    	jz	short nowilds 	; No, continue processing
 18992 00002066 BA[FF91]                	mov	dx,INORNOT_PTR	; Yes, report error
 18993                                  	; 20/02/2023
 18994                                  typefil_parse_error:
 18995 00002069 E9360E                  	jmp	cerror
 18996                                  nowilds:
 18997                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 18998 0000206C B8006C                  	mov	ax,6C00h
 18999                                  	;mov	bx,read_open_mode ; 0
 19000                                  				;AN000; get open mode for TYPE
 19001 0000206F 31C9                    	xor	cx,cx		;AN000; no special files
 19002 00002071 89CB                    	mov	bx,cx ; 20/02/2023
 19003 00002073 BA0101                  	mov	dx,101h
 19004                                  	;mov	dx,read_open_flag ; 101h
 19005                                  				;AN000; set up open flags
 19006 00002076 BE[12A1]                	mov	si,SrcBuf	;AN030; get file name
 19007 00002079 CD21                    	int	21h
 19008 0000207B 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 19009                                  
 19010                                  typerr: 			;AN022;
 19011 0000207D 0E                      	push	cs		;AN022; make sure we have local segment
 19012 0000207E 1F                      	pop	ds		;AN022;
 19013 0000207F E8B001                  	call	Set_Ext_Error_Msg ;AN022;
 19014 00002082 C706[91A0][12A1]        	mov	word [string_ptr_2],SrcBuf 
 19015                                  				;AC022; get address of failed string
 19016                                  	;mov	byte [extend_buf_sub],1
 19017 00002088 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 19018                                  				;AC022; put number of subst in control block
 19019 0000208D E9120E                  	jmp	cerror		;AC022; exit
 19020                                  
 19021                                  typecont:
 19022 00002090 89C3                    	mov	bx,ax		;AC000; get Handle
 19023                                  ;M043
 19024                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 19025                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 19026                                  ;indicate it is a device.
 19027                                  ;
 19028                                  	;mov	ax,(IOCTL shl 8) or 0
 19029 00002092 B80044                  	mov	ax,4400h
 19030 00002095 CD21                    	int	21h
 19031                                  
 19032 00002097 F6C280                  	test	dl,80h		;is it a device?
 19033 0000209A 7408                    	jz	short not_device
 19034                                  				;no, a file
 19035                                  
 19036 0000209C C706[DFA9]FFFF          	mov	word [TypeFilSiz+2],-1 ; 0FFFFh
 19037                                  				;indicate it is a device
 19038 000020A2 EB17                    	jmp	short dotype
 19039                                  not_device:
 19040                                  ;SR;
 19041                                  ; Find the filesize by seeking to the end and then reset file pointer to
 19042                                  ;start of file
 19043                                  
 19044                                  	;mov	ax,(LSEEK shl 8) or 2
 19045 000020A4 B80242                  	mov	ax,4202h
 19046 000020A7 31D2                    	xor	dx,dx
 19047 000020A9 89D1                    	mov	cx,dx		;seek  to end of file
 19048 000020AB CD21                    	int	21h
 19049                                  
 19050 000020AD A3[DDA9]                	mov	[TypeFilSiz],ax
 19051 000020B0 8916[DFA9]              	mov	[TypeFilSiz+2],dx ;store filesize
 19052                                  	;mov	ax,(LSEEK shl 8) or 0
 19053 000020B4 B80042                  	mov	ax,4200h
 19054 000020B7 31D2                    	xor	dx,dx
 19055 000020B9 CD21                    	int	21h	        ;reset file pointer to start
 19056                                  dotype:				;M043
 19057 000020BB C606[D6A1]00            	mov	byte [zflag],0 	; Reset ^Z flag
 19058 000020C0 8E1E[F59D]              	mov	ds,[TPA]
 19059 000020C4 31D2                    	xor	dx,dx
 19060                                  	;ASSUME	DS:NOTHING
 19061                                  typelp:
 19062 000020C6 2E803E[D6A1]00          	cmp	byte [cs:zflag],0
 19063                                  				;AC050; Is the ^Z flag set?
 19064                                  	;retnz			; Yes, return
 19065                                  	; 17/04/2023
 19066 000020CC 7401                    	jz	short tf1
 19067 000020CE C3                      	retn
 19068                                  tf1:
 19069 000020CF 2E8B0E[129E]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 19070                                  
 19071                                  ;Update the filesize left to read
 19072                                  
 19073 000020D4 2E833E[DFA9]FF          	cmp	word [cs:TypeFilSiz+2],-1
 19074                                  				;is it a device? M043
 19075 000020DA 7431                    	je	short typ_read	;yes, just read from it; M043
 19076                                  
 19077 000020DC 2E833E[DFA9]00          	cmp	word [cs:TypeFilSiz+2],0
 19078                                  				;more than 64K left?
 19079 000020E2 740D                    	jz	short lt64k	;no, do word subtraction
 19080 000020E4 2E290E[DDA9]            	sub	[cs:TypeFilSiz],cx
 19081 000020E9 2E831E[DFA9]00          	sbb	word [cs:TypeFilSiz+2],0
 19082                                  				;update filesize
 19083 000020EF EB1C                          	jmp	short typ_read	;do the read
 19084                                  lt64k:
 19085 000020F1 2E3B0E[DDA9]            	cmp	cx,[cs:TypeFilSiz]
 19086                                  				;readsize <= buffer?
 19087 000020F6 7610                    	jbe	short gtbuf	; yes, just update readsize
 19088                                  
 19089                                  ;Buffer size is larger than bytes to read
 19090                                  
 19091 000020F8 2E8B0E[DDA9]            	mov	cx,[cs:TypeFilSiz]
 19092 000020FD E361                    	jcxz	typelp_ret
 19093 000020FF 2EC706[DDA9]0000        	mov	word [cs:TypeFilSiz],0
 19094 00002106 EB05                    	jmp	short typ_read
 19095                                  gtbuf:
 19096 00002108 2E290E[DDA9]            	sub	[cs:TypeFilSiz],cx
 19097                                  				;update filesize remaining
 19098                                  typ_read:
 19099                                  	;mov	ah,read
 19100 0000210D B43F                    	mov	ah,3Fh
 19101 0000210F CD21                    	int	21h
 19102 00002111 7303                    	jnc	short tf2	;M043
 19103 00002113 E967FF                  	jmp	typerr		;M043
 19104                                  tf2:				;M043
 19105                                  ;M043;	jc	typerr		;AN022; Exit if error
 19106                                  
 19107 00002116 89C1                    	mov	cx,ax
 19108 00002118 E346                    	jcxz	typelp_ret	;AC000; exit if nothing read
 19109 0000211A 1E                      	push	ds
 19110 0000211B 07                      	pop	es		; Check to see if a ^Z was read.
 19111                                  	;assume es:nothing
 19112 0000211C 31FF                    	xor	di,di
 19113 0000211E 50                      	push	ax
 19114 0000211F B01A                    	mov	al,1Ah
 19115 00002121 F2AE                    	repnz	scasb
 19116 00002123 58                      	pop	ax
 19117 00002124 91                      	xchg	ax,cx
 19118                                  	;cmp	ax,0
 19119 00002125 21C0                    	and	ax,ax
 19120 00002127 7506                    	jnz	short foundz	; Yes, handle it
 19121 00002129 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 19122 0000212D 750A                    	jnz	short typecont2	; No ^Z, continue
 19123                                  foundz:
 19124 0000212F 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 19125 00002131 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 19126 00002132 0E                      	push	cs		;  will be typed.
 19127 00002133 07                      	pop	es
 19128                                  	;assume es:trangroup
 19129 00002134 26F616[D6A1]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 19130                                  typecont2:			;  will quit after this write.
 19131 00002139 53                      	push	bx
 19132 0000213A BB0100                  	mov	bx,1
 19133                                  	;mov	ah,Write
 19134 0000213D B440                    	mov	ah,40h
 19135 0000213F CD21                    	int	21h
 19136 00002141 5B                      	pop	bx
 19137 00002142 720C                    	jc	short Error_outputj
 19138 00002144 39C8                    	cmp	ax,cx
 19139 00002146 7503                    	jnz	short tf3	;M043
 19140 00002148 E97BFF                  	jmp	typelp		;M043
 19141                                  tf3:				;M043
 19142                                  ;M043;	jz	short typelp
 19143 0000214B 49                      	dec	cx
 19144 0000214C 39C8                    	cmp	ax,cx
 19145                                  	;;retz			; One less byte OK (^Z)
 19146                                  	;jnz	short Error_outputj
 19147                                  ;tf4:
 19148                                  	;retn
 19149 0000214E 7410                    	jz	short typelp_ret ; 20/02/2023
 19150                                  
 19151                                  Error_outputj:
 19152 00002150 BB0100                  	mov	bx,1
 19153                                  	;mov	ax,IOCTL SHL 8
 19154 00002153 B80044                  	mov	ax,4400h
 19155 00002156 CD21                    	int	21h
 19156 00002158 F6C280                  	test	dl,80h
 19157                                  	;test	dl,devid_ISDEV
 19158                                  	;;retnz			; If device, no error message
 19159                                  	;jnz	short tf4
 19160 0000215B 7503                    	jnz	short typelp_ret
 19161 0000215D E9420A                  	jmp	error_output
 19162                                  typelp_ret:
 19163 00002160 C3                      	retn
 19164                                  
 19165                                  ; ---------------------------------------------------------------------------
 19166                                  
 19167                                  ; VOLUME command displays the volume ID on the specified drive
 19168                                  
 19169                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19170                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19171                                  	; 10/06/2023
 19172                                  VOLUME:
 19173                                  	; MSDOS 6.0
 19174 00002161 BE8100                  	mov	si,81h
 19175 00002164 BF[0798]                	mov	di,PARSE_VOL
 19176                                  				;AN000; Get address of PARSE_VOL
 19177 00002167 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 19178 00002169 31D2                    	xor	dx,dx		;AN000;
 19179 0000216B E89B05                  	call	Parse_With_Msg	;AC018; call parser
 19180                                  
 19181                                  	;cmp	ax,-1 ; 0FFFFh
 19182                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 19183                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 19184                                  	;;cmp	ax,RESULT_NO_ERROR
 19185                                  	;;cmp	ax,0		;AC000; did we have an error?
 19186                                  	;or	ax,ax ; 0?
 19187                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 19188                                  	; 10/06/2023
 19189 0000216E 40                      	inc	ax  ; cmp ax,-1
 19190 0000216F 7443                    	jz	short OkVolArg ; 0FFFFh -> 0
 19191 00002171 48                      	dec	ax  ; cmp ax,0
 19192 00002172 750A                    	jnz	short badvolarg ; 1 -> 0
 19193                                  	; ax = 0
 19194                                  
 19195                                  ; We have parsed off the drive. See if there are any more chars left
 19196                                  
 19197 00002174 BF[0798]                	mov	di,PARSE_VOL
 19198                                  				;AC000; get address of parse_vol
 19199 00002177 31D2                    	xor	dx,dx		;AC000;
 19200 00002179 E87705                  	call	parse_check_eol ;AC000; call parser
 19201 0000217C 7436                    	jz	short OkVolArg	;AC000; yes, end of road
 19202                                  
 19203                                  ; The line was not interpretable. Report an error.
 19204                                  
 19205                                  badvolarg:
 19206 0000217E E9210D                  	jmp	cerror
 19207                                  
 19208                                  ; ---------------------------------------------------------------------------
 19209                                  
 19210                                  ;***	DisAppend - disable APPEND
 19211                                  ;
 19212                                  ;	ENTRY	nothing
 19213                                  ;
 19214                                  ;	EXIT	nothing
 19215                                  ;
 19216                                  ;	USED	AX,BX
 19217                                  ;
 19218                                  ;	EFFECTS
 19219                                  ;
 19220                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 19221                                  ;	  after the command finishes, by the HeadFix routine.
 19222                                  ;
 19223                                  ;	NOTE
 19224                                  ;
 19225                                  ;	  This routine must not be called more than once during a single
 19226                                  ;	  command cycle. The second call would permanently disable APPEND.
 19227                                  
 19228                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19229                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 19230                                  	
 19231                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19232                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2289h
 19233                                  
 19234                                  	; MSDOS 6.0
 19235                                  DisAppend:
 19236 00002181 1E                      	push	ds			; save DS
 19237 00002182 06                      	push	es			; save ES
 19238 00002183 57                      	push	di
 19239                                  
 19240                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 19241 00002184 B800B7                  	mov	ax,0B700h
 19242 00002187 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19243 00002189 08C0                    	or	al,al
 19244 0000218B 7423                    	jz	short daRet		; APPEND not installed, return
 19245                                  
 19246                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 19247 0000218D B802B7                  	mov	ax,0B702h
 19248 00002190 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19249 00002192 83F8FF                  	cmp	ax,0FFFFh
 19250 00002195 7519                    	jne	short daRet		; it's not a local version, return
 19251                                  
 19252                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 19253 00002197 B806B7                  	mov	ax,0B706h
 19254 0000219A CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19255                                  
 19256 0000219C 8E1E[F39D]              	mov	ds,[RESSEG]		; DS = resident seg addr
 19257                                  
 19258 000021A0 891E[6002]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 19259 000021A4 C606[6202]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 19260                                  
 19261 000021A9 31DB                    	xor	bx,bx			; BX = APPEND state = off
 19262                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 19263 000021AB B807B7                  	mov	ax,0B707h
 19264 000021AE CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19265                                  daRet:	
 19266 000021B0 5F                      	pop	di
 19267 000021B1 07                      	pop	es			; restore ES
 19268 000021B2 1F                      	pop	ds			; restore DS
 19269                                  
 19270 000021B3 C3                      	retn
 19271                                  
 19272                                  ; ---------------------------------------------------------------------------
 19273                                  
 19274                                  ; Find the Volume ID on the disk.
 19275                                  
 19276                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19277                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19278                                  	
 19279                                  	; MSDOS 6.0
 19280                                  OkVolArg:
 19281 000021B4 E8CAFF                  	call	DisAppend		; disable APPEND
 19282 000021B7 E86709                  	call	CRLF2
 19283                                  	;mov	al,blank			
 19284 000021BA B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 19285 000021BC E88E01                  	call	PRINT_CHAR		;AN051;  before volume message
 19286 000021BF 1E                      	push	ds
 19287 000021C0 07                      	pop	es
 19288                                  
 19289                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 19290                                  ; of volume_id ONLY.
 19291                                  
 19292 000021C1 BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 19293 000021C4 B0FF                    	mov	al,-1 ; 0FFh		; Tag to indicate Extention
 19294 000021C6 AA                      	stosb
 19295 000021C7 31C0                    	xor	ax,ax			; Zero padding to volume label
 19296 000021C9 AB                      	stosw
 19297 000021CA AB                      	stosw
 19298 000021CB AA                      	stosb
 19299 000021CC B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 19300 000021CE AA                      	stosb
 19301 000021CF 47                      	inc	di			; Skip drive byte; it is already set
 19302 000021D0 B90B00                  	mov	cx,11			; fill in remainder of file
 19303 000021D3 B03F                    	mov	al,'?'
 19304 000021D5 F3AA                    	rep	stosb
 19305                                  
 19306                                  ; Set up transfer address (destination of search first information)
 19307                                  
 19308 000021D7 BA[2AA0]                	mov	dx,DIRBUF
 19309                                  	;mov	ah,Set_DMA
 19310 000021DA B41A                    	mov	ah,1Ah
 19311 000021DC CD21                    	int	21h
 19312                                  
 19313                                  ; Do the search
 19314                                  
 19315 000021DE BA5500                  	mov	dx,FCB-7 ; 55h
 19316                                  	;mov	ah,Dir_Search_First
 19317 000021E1 B411                    	mov	ah,11h
 19318 000021E3 CD21                    	int	21h
 19319                                  
 19320                                  ;********************************
 19321                                  ; Print volume ID info
 19322                                  
 19323 000021E5 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 19324 000021E6 A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 19325 000021E9 0440                    	add	al,'@'  ; add al,40h
 19326 000021EB 3C40                    	cmp	al,'@'
 19327 000021ED 7505                    	jne	short drvok
 19328 000021EF A0[059E]                	mov	al,[CURDRV]
 19329                                  	;add	al,capital_A
 19330 000021F2 0441                    	add	al,'A'
 19331                                  drvok:
 19332 000021F4 A2[A4A0]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 19333 000021F7 58                      	pop	ax			;AC000; get return code back
 19334 000021F8 08C0                    	or	al,al			;AC000; volume label found?
 19335 000021FA 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 19336 000021FC BA[CB92]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 19337 000021FF EB13                    	jmp	short print_serial	;AC000; go print it
 19338                                  
 19339                                  Get_vol_name:
 19340 00002201 BF[5B9F]                	mov	di,CHARBUF
 19341 00002204 89FA                    	mov	dx,di
 19342 00002206 BE[32A0]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 19343 00002209 B90B00                  	mov	cx,11			;AN000;  3/3/KK
 19344 0000220C F3A4                    	rep	movsb			;AN000;  3/3/KK
 19345                                  
 19346 0000220E 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 19347 00002210 AA                      	stosb
 19348 00002211 BA[D992]                	mov	dx,VolMes_Ptr		;AC000; set up message
 19349                                  
 19350                                  print_serial:
 19351                                  
 19352                                  ; Attempt to get the volume serial number from the disk. If an error
 19353                                  ; occurs, do not print volume serial number.
 19354                                  
 19355 00002214 52                      	push	dx			;AN000; save message offset
 19356                                  	;mov	ax,(GetSetMediaID SHL 8)
 19357 00002215 B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 19358 00002218 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 19359 0000221C BA[0AA2]                	mov	dx,vol_ioctl_buf	;AN000;target buffer
 19360 0000221F CD21                    	int	21h			;AN000; do the call
 19361                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 19362                                  			; AL = 00h get serial number / 01h set serial number
 19363                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 19364                                  			; DS:DX -> disk info
 19365 00002221 5A                      	pop	dx			;AN000; get message offset back
 19366 00002222 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 19367 00002224 E8E832                  	call	std_printf		;AC000; go print volume message
 19368                                  	;mov	al,blank				
 19369 00002227 B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 19370 00002229 E82101                  	call	PRINT_CHAR		;AN051;  before volume message
 19371 0000222C BA[F292]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 19372                                  printvol_end:
 19373 0000222F E9DD32                  	jmp	std_printf		;AC000; go print and exit
 19374                                  
 19375                                  ; ---------------------------------------------------------------------------
 19376                                  
 19377                                  ;****************************************************************
 19378                                  ;*
 19379                                  ;* ROUTINE:	Set_ext_error_msg
 19380                                  ;*
 19381                                  ;* FUNCTION:	Sets up extended error message for printing
 19382                                  ;*
 19383                                  ;* INPUT:	return from INT 21
 19384                                  ;*
 19385                                  ;* OUTPUT:	extended error message set up in extended error
 19386                                  ;*		buffer.
 19387                                  ;*
 19388                                  ;****************************************************************
 19389                                  	
 19390                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19391                                  
 19392                                  	; MSDOS 6.0
 19393                                  Set_Ext_Error_Msg:			;AN000;
 19394 00002232 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 19395 00002235 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 19396                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 19397 0000223A BA[D091]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 19398 0000223D A3[D091]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 19399 00002240 F9                      	stc				;AN000; make sure carry is set
 19400 00002241 C3                      	retn				;AN000; return
 19401                                  
 19402                                  ; ---------------------------------------------------------------------------
 19403                                  
 19404                                  ;****************************************************************
 19405                                  ;*
 19406                                  ;* ROUTINE:	Get_ext_error_number
 19407                                  ;*
 19408                                  ;* FUNCTION:	Does get extended error function call
 19409                                  ;*
 19410                                  ;* INPUT:	return from INT 21
 19411                                  ;*
 19412                                  ;* OUTPUT:	AX - extended error number
 19413                                  ;*
 19414                                  ;****************************************************************
 19415                                  
 19416                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19417                                  
 19418                                  	; MSDOS 6.0
 19419                                  get_ext_error_number:			;AN022;
 19420                                  
 19421                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 19422                                  					;AN022; save registers
 19423 00002242 53                      	push	bx
 19424 00002243 51                      	push	cx
 19425 00002244 52                      	push	dx
 19426 00002245 56                      	push	si
 19427 00002246 57                      	push	di
 19428 00002247 55                      	push	bp
 19429 00002248 06                      	push	es
 19430 00002249 1E                      	push	ds
 19431                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 19432 0000224A B459                    	mov	ah,59h
 19433 0000224C 31DB                    	xor	bx,bx			;AN022; clear BX
 19434 0000224E CD21                    	int	21h			;AN022;
 19435                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 19436                                  			; BX = version code (0000h for DOS 3.x)
 19437                                  
 19438                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 19439                                  					;AN022; restore registers
 19440 00002250 1F                      	pop	ds
 19441 00002251 07                      	pop	es
 19442 00002252 5D                      	pop	bp
 19443 00002253 5F                      	pop	di
 19444 00002254 5E                      	pop	si
 19445 00002255 5A                      	pop	dx
 19446 00002256 59                      	pop	cx
 19447 00002257 5B                      	pop	bx
 19448                                  
 19449 00002258 C3                      	retn				;AN022; return
 19450                                  
 19451                                  ;============================================================================
 19452                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 19453                                  ;============================================================================
 19454                                  ; 08/10/2018 - Retro DOS v3.0
 19455                                  
 19456                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 19457                                  
 19458                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 19459                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 19460                                  
 19461                                  ; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19462                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 2361h
 19463                                  
 19464                                  ; ---------------------------------------------------------------------------
 19465                                  
 19466                                  ; MSDOS 6.0
 19467                                  ;***	Version - display DOS version
 19468                                  ;
 19469                                  ;	SYNTAX	ver [/debug]
 19470                                  ;
 19471                                  ;		/debug - display additional DOS configuration info
 19472                                  ;
 19473                                  ;	ENTRY	command-line tail is in PSP
 19474                                  ;
 19475                                  ;	EXIT	if successful, nothing
 19476                                  ;		if parse fails,
 19477                                  ;		  parse error message is set up (for Std_EPrintf)
 19478                                  ;		    AX = system parser error code
 19479                                  ;		    DX = ptr to message block
 19480                                  ;		  we jump to CError
 19481                                  ;
 19482                                  ;	EFFECTS
 19483                                  ;	  If parse fails, a parse error message is displayed.
 19484                                  ;	  Otherwise, version message is displayed.
 19485                                  ;	  If /debug is specified, additional DOS info is displayed.
 19486                                  
 19487                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19488                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19489                                  VERSION:
 19490                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 19491                                  
 19492                                  ;	Parse command line for /debug switch.
 19493                                  
 19494 00002259 BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 19495 0000225C BF[CA98]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 19496 0000225F 31C9                    	xor	cx,cx			; CX = # positional param's found
 19497 00002261 E8A504                  	call	Parse_With_Msg
 19498                                  
 19499 00002264 B301                    	mov	bl,1			; BL = flag = /debug present
 19500                                  	;cmp	ax,RESULT_NO_ERROR
 19501                                  	;cmp	ax,0
 19502                                  	;je	short verPrintVer	; something parsed - must be /debug
 19503 00002266 09C0                    	or	ax,ax
 19504 00002268 740A                    	jz	short verPrintVer 
 19505 0000226A FECB                    	dec	bl			; BL = flag = no /debug present
 19506                                  	;cmp	ax,END_OF_LINE ; -1
 19507 0000226C 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 19508                                  
 19509                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 19510                                  %if 0
 19511                                  	je	short verPrintVer	; reached end of line - ok
 19512                                  %else
 19513 0000226F 7414                    	je	short not_truever_sw
 19514                                  %endif
 19515                                  
 19516                                  ;	The parse failed. Error message has been set up.
 19517                                  
 19518 00002271 E92E0C                  	jmp	cerror
 19519                                  
 19520                                  verPrintVer:
 19521                                  
 19522                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 19523                                  %if 1
 19524                                  check_t_switch:
 19525 00002274 813E[E3A9][EA98]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 19526 0000227A 7509                    	jne	short not_truever_sw
 19527 0000227C BA[0E99]                	mov	dx,RD4CMD_VER_MSG
 19528 0000227F B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 19529 00002281 CD21                    	int	21h
 19530 00002283 EB43                    	jmp	short verDone
 19531                                  not_truever_sw:
 19532                                  %endif
 19533 00002285 53                      	push	bx			; save /debug flag
 19534 00002286 E89808                  	call	CRLF2
 19535 00002289 E83F00                  	call	PRINT_VERSION
 19536 0000228C E89208                  	call	CRLF2
 19537 0000228F 5B                      	pop	bx   			; BL = /debug flag
 19538 00002290 08DB                    	or	bl,bl
 19539 00002292 7434                    	jz	short verDone		; /debug is false - we're done
 19540                                  
 19541                                  ;*	For /debug, display DOS internal revision and DOS location
 19542                                  ;	(low memory, HMA, or ROM).
 19543                                  
 19544                                  ;	Bugbug:	use symbols for bitmasks below.
 19545                                  
 19546                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 19547 00002294 B80633                  	mov	ax,3306h
 19548 00002297 CD21                    	int	21h
 19549                                  		; DOS - 5+ Get TRUE Version Number
 19550                                  		; (BL major, BH minor, DL revision, DH flags)
 19551 00002299 88D0                    	mov	al,dl			;revision number in dl; M013
 19552 0000229B 88F7                    	mov	bh,dh			;flags in dh now; M013
 19553                                  ;M032	and	al,7			; AL = DOS internal revision
 19554 0000229D 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 19555                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 19556 0000229F 7602                    	jbe	short ver1
 19557 000022A1 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 19558                                  ;@@:
 19559                                  ver1:
 19560 000022A3 0441                    	add	al,'A' ; 41h		; AL = DOS internal rev letter
 19561 000022A5 A2[A2A0]                	mov	[One_Char_Val],al
 19562 000022A8 BA[2994]                	mov	dx,dosrev_ptr
 19563 000022AB E86132                  	call	std_printf		; print DOS internal revision
 19564                                  
 19565 000022AE B104                    	mov	cl,4
 19566 000022B0 D2EF                    	shr	bh,cl			; CY = DOS in ROM
 19567 000022B2 7209                    	jc	short verRom
 19568 000022B4 D0EF                    	shr	bh,1			; CY = DOS in HMA
 19569 000022B6 720A                    	jc	short verHma
 19570                                  
 19571                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 19572                                  
 19573                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 19574 000022B8 BA[3D94]                	mov	dx,DosLow_Ptr
 19575 000022BB EB08                    	jmp	short verPrintLoc
 19576                                  verRom: 
 19577                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 19578 000022BD BA[3794]                	mov	dx,DosRom_Ptr
 19579 000022C0 EB03                    	jmp	short verPrintLoc
 19580                                  verHma: 
 19581                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 19582 000022C2 BA[3A94]                	mov	dx,DosHma_Ptr
 19583                                  verPrintLoc:
 19584 000022C5 E84732                  	call	std_printf
 19585                                  verDone:
 19586 000022C8 E95608                  	jmp	CRLF2
 19587                                  
 19588                                  ; 21/02/2023
 19589                                  ;	; MSDOS 3.3
 19590                                  ;VERSION:
 19591                                  ;	call	CRLF2
 19592                                  ;	call	PRINT_VERSION
 19593                                  ;	jmp	CRLF2
 19594                                  
 19595                                  ; =============== S U B	R O U T	I N E =======================================
 19596                                  
 19597                                  	; 21/02/2023 - Retro DOS v4.0
 19598                                  PRINT_VERSION:
 19599                                  	;mov	ah,GET_VERSION ; 30h
 19600 000022CB B430                    	mov	ah,30h
 19601 000022CD CD21                    	int	21h	; DOS -	GET DOS	VERSION
 19602                                  			; Return: AL = major version number (00h for DOS 1.x)
 19603 000022CF 50                      	push	ax
 19604 000022D0 30E4                    	xor	ah,ah
 19605 000022D2 A3[9EA0]                	mov	[Major_Ver_Num],ax
 19606 000022D5 58                      	pop	ax
 19607 000022D6 86E0                    	xchg	ah,al
 19608 000022D8 30E4                    	xor	ah,ah
 19609 000022DA A3[A0A0]                	mov	[Minor_Ver_Num],ax
 19610 000022DD BA[B292]                	mov	dx,VerMes_Ptr
 19611 000022E0 E92C32                  	jmp	std_printf
 19612                                  
 19613                                  ; =============== S U B	R O U T	I N E =======================================
 19614                                  
 19615                                  	; 21/02/2023 - Retro DOS v4.0
 19616                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19617                                  PRINT_PROMPT:
 19618 000022E3 1E                      	push	ds
 19619 000022E4 0E                      	push	cs
 19620 000022E5 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 19621 000022E6 06                      	push	es
 19622 000022E7 E87805                  	call	find_prompt	; Look for prompt string
 19623 000022EA 7206                    	jc	short PP0	; Can't find one
 19624 000022EC 26803D00                	cmp	byte [es:di],0
 19625 000022F0 7524                    	jnz	short PP1
 19626                                  PP0:				; Use default prompt
 19627 000022F2 E86700                  	call	PRINT_DRIVE
 19628 000022F5 B03E                    	mov	al,'>'
 19629                                  	;mov	al,SYM
 19630 000022F7 E85300                  	call	PRINT_CHAR
 19631 000022FA EB36                    	jmp	short PP5
 19632                                  ;PP1:
 19633                                  ;	mov	al,[es:di]	; Get a char
 19634                                  ;	inc	di
 19635                                  ;	or	al,al
 19636                                  ;	jz	short PP5	; Nul terminated
 19637                                  ;	; 21/02/2023
 19638                                  ;	cmp	al,'$' ; 24h
 19639                                  ;	;cmp	al,[DOLLAR]	; Meta character
 19640                                  ;	jz	short PP2	; Nope
 19641                                  ;	call	PRINT_CHAR
 19642                                  ;	jmp	short PP1
 19643                                  PP2:
 19644 000022FC 268A05                  	mov	al,[es:di]
 19645 000022FF 47                      	inc	di
 19646                                  	;mov	bx,CLSSTRING+2	; "[2J"
 19647 00002300 BB[9895]                	mov	bx,PROMPT_TABLE-3
 19648 00002303 08C0                    	or	al,al
 19649 00002305 742B                    	jz	short PP5
 19650                                  PP3:
 19651 00002307 83C303                  	add	bx,3
 19652                                  	; 21/02/2023
 19653 0000230A E82C06                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 19654                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 19655 0000230D 3A07                    	cmp	al,[bx]
 19656 0000230F 7416                    	jz	short PP4
 19657 00002311 803F00                  	cmp	byte [bx],0
 19658 00002314 75F1                    	jnz	short PP3
 19659                                  	;jmp	short PP1
 19660                                  	; 21/02/2023
 19661                                  PP1:
 19662 00002316 268A05                  	mov	al,[es:di]	; Get a char
 19663 00002319 47                      	inc	di
 19664 0000231A 08C0                    	or	al,al
 19665 0000231C 7414                    	jz	short PP5	; Nul terminated
 19666                                  	; 21/02/2023
 19667 0000231E 3C24                    	cmp	al,'$' ; 24h
 19668                                  	;cmp	al,[DOLLAR]	; Meta character
 19669 00002320 74DA                    	jz	short PP2	; Nope
 19670 00002322 E82800                  	call	PRINT_CHAR
 19671 00002325 EBEF                    	jmp	short PP1
 19672                                  PP4:
 19673 00002327 06                      	push	es
 19674 00002328 57                      	push	di
 19675 00002329 0E                      	push	cs
 19676 0000232A 07                      	pop	es
 19677 0000232B FF5701                  	call	word [bx+1]
 19678 0000232E 5F                      	pop	di
 19679 0000232F 07                      	pop	es
 19680 00002330 EBE4                    	jmp	short PP1
 19681                                  PP5:
 19682 00002332 07                      	pop	es		; Restore segments
 19683 00002333 1F                      	pop	ds
 19684 00002334 C3                      	retn
 19685                                  
 19686                                  ; ---------------------------------------------------------------------------
 19687                                  
 19688                                  PRINT_BACK:
 19689                                  	; 21/02/2023
 19690 00002335 BA[AF93]                	mov	dx,dback_ptr
 19691 00002338 E9D431                  	jmp	std_printf
 19692                                  
 19693                                  ; ---------------------------------------------------------------------------
 19694                                  
 19695                                  PRINT_EQ:
 19696 0000233B B03D                    	mov	al,'='
 19697 0000233D EB0E                    	jmp	short PRINT_CHAR
 19698                                  
 19699                                  ; ---------------------------------------------------------------------------
 19700                                  
 19701                                  PRINT_ESC:
 19702 0000233F B01B                    	mov	al,1Bh
 19703 00002341 EB0A                    	jmp	short PRINT_CHAR
 19704                                  
 19705                                  ; ---------------------------------------------------------------------------
 19706                                  
 19707                                  	; 21/02/2023
 19708                                  PRINT_G:
 19709                                  	;mov	al,[RABRACKET]
 19710 00002343 B03E                    	mov	al,'>' ; 3Eh
 19711 00002345 EB06                    	jmp	short PRINT_CHAR
 19712                                  
 19713                                  ; ---------------------------------------------------------------------------
 19714                                  
 19715                                  	; 21/02/2023
 19716                                  PRINT_L:
 19717                                  	;mov	al,[LABRACKET]
 19718 00002347 B03C                    	mov	al,'<' ; 3Ch
 19719 00002349 EB02                    	jmp	short PRINT_CHAR
 19720                                  
 19721                                  ; ---------------------------------------------------------------------------
 19722                                  
 19723                                  	; 21/02/2023
 19724                                  Print_B:
 19725                                  	;mov	al,[VBAR]
 19726 0000234B B07C                    	mov	al,'|' ; 7Ch
 19727                                  
 19728                                  ; =============== S U B	R O U T	I N E =======================================
 19729                                  
 19730                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19731                                  PRINT_CHAR:
 19732                                  	; MSDOS 6.0
 19733                                  
 19734                                  ;	Bugbug:	Why bother with ds,es here?
 19735                                  		
 19736 0000234D 06                      	push	es
 19737 0000234E 1E                      	push	ds
 19738 0000234F 07                      	pop	es
 19739 00002350 57                      	push	di
 19740 00002351 52                      	push	dx
 19741 00002352 88C2                    	mov	dl,al		;AC000; Get char into al
 19742                                  	;mov	ah,STD_CON_OUTPUT
 19743                                  				;AC000; print the char to stdout
 19744 00002354 B402                    	mov	ah,2
 19745 00002356 CD21                    	int	21h		;AC000;
 19746 00002358 5A                      	pop	dx
 19747 00002359 5F                      	pop	di
 19748 0000235A 07                      	pop	es
 19749 0000235B C3                      	retn
 19750                                  
 19751                                  ; ---------------------------------------------------------------------------
 19752                                  
 19753                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19754                                  PRINT_DRIVE:
 19755                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 19756 0000235C B419                    	mov	ah,19h
 19757 0000235E CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 19758 00002360 0441                    	add	al,'A'
 19759                                  	;add	al,[CAPITAL_A]
 19760                                  	;call	PRINT_CHAR
 19761                                  	;retn
 19762                                  	; 21/02/2023
 19763 00002362 EBE9                    	jmp	short PRINT_CHAR
 19764                                  
 19765                                  ; ---------------------------------------------------------------------------
 19766                                  
 19767                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19768                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 19769                                  
 19770                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19771                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2460h
 19772                                  
 19773                                  build_dir_for_prompt:
 19774 00002364 30D2                    	xor	dl,dl
 19775 00002366 BE[2AA0]                	mov	si,BWDBUF
 19776 00002369 89F7                    	mov	di,si
 19777 0000236B A0[059E]                	mov	al,[CURDRV]
 19778 0000236E 0441                    	add	al,'A'
 19779 00002370 B43A                    	mov	ah,':'
 19780 00002372 AB                      	stosw
 19781 00002373 A0[F89D]                	mov	al,[DIRCHAR]
 19782 00002376 AA                      	stosb
 19783 00002377 87F7                    	xchg	si,di
 19784 00002379 893E[91A0]              	mov	[string_ptr_2],di
 19785                                  	;mov	ah,CURRENT_DIR ; 47h
 19786 0000237D B447                    	mov	ah,47h
 19787 0000237F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 19788                                  			; DL = drive (0=default,1=A,etc.)
 19789                                  			; DS:SI	points to 64-byte buffer area
 19790                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 19791 00002381 BA[9793]                	mov	dx,string_buf_ptr
 19792 00002384 7303                    	jnc	short doprint
 19793                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 19794 00002386 BA[5F92]                	mov	dx,BADCURDRV
 19795                                  doprint:
 19796                                  	;call	std_printf
 19797                                  	;retn
 19798 00002389 E98331                  	jmp	std_printf
 19799                                  
 19800                                  ; =============== S U B	R O U T	I N E =======================================
 19801                                  
 19802                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19803                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 19804                                  
 19805                                  build_dir_for_chdir:
 19806 0000238C E80D00                  	call	build_dir_string
 19807 0000238F BA[2AA0]                	mov	dx,DIRBUF
 19808 00002392 8916[91A0]              	mov	[string_ptr_2],dx
 19809                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 19810                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 19811 00002396 BA[9793]                	mov	dx,string_buf_ptr
 19812                                  	;call	std_printf
 19813                                  	;retn
 19814                                  	; 21/02/2023
 19815                                  	;jmp	short doprint
 19816 00002399 E97331                  	jmp	std_printf
 19817                                  
 19818                                  ; =============== S U B	R O U T	I N E =======================================
 19819                                  
 19820                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19821                                  build_dir_string:
 19822 0000239C 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 19823 000023A0 88D0                    	mov	al,dl
 19824 000023A2 0440                    	add	al,'@'	; 40h
 19825 000023A4 3C40                    	cmp	al,'@'
 19826 000023A6 7506                    	jne	short gotdrive
 19827 000023A8 0206[059E]              	add	al,[CURDRV]
 19828 000023AC FEC0                    	inc	al
 19829                                  gotdrive:
 19830 000023AE 50                      	push	ax
 19831 000023AF BE[2DA0]                	mov	si,BWDBUF+3
 19832                                  	;mov	ah,CURRENT_DIR ; 47h
 19833 000023B2 B447                    	mov	ah,47h
 19834 000023B4 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 19835                                  			; DL = drive (0=default,1=A,etc.)
 19836                                  			; DS:SI	points to 64-byte buffer area
 19837 000023B6 7305                    	jnc	short dpbisok
 19838 000023B8 0E                      	push	cs
 19839 000023B9 1F                      	pop	ds
 19840 000023BA E9ED09                  	jmp	DRVBAD
 19841                                  dpbisok:
 19842 000023BD BF[2AA0]                	mov	di,BWDBUF
 19843 000023C0 89FA                    	mov	dx,di
 19844 000023C2 58                      	pop	ax
 19845 000023C3 B43A                    	mov	ah,':'
 19846 000023C5 AB                      	stosw
 19847 000023C6 A0[F89D]                	mov	al,[DIRCHAR]
 19848 000023C9 AA                      	stosb
 19849 000023CA C3                      	retn
 19850                                  
 19851                                  ; ---------------------------------------------------------------------------
 19852                                  
 19853                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19854                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 19855                                  
 19856                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19857                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:24C9h
 19858                                  PATH:
 19859                                  	; MSDOS 6.0
 19860 000023CB 30C0                    	xor	al,al			;AN049; Set up holding buffer
 19861 000023CD BF[219B]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 19862 000023D0 AA                      	stosb				;AN049; Initialize PATH to null
 19863 000023D1 4F                      	dec	di			;AN049; point to the start of buffer
 19864 000023D2 E8DE0C                  	call	PGETARG 		; Pre scan for arguments
 19865 000023D5 7460                    	jz	short disppath		; Print the current path
 19866                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 19867 000023D7 3C3B                    	cmp	al,';' ; 3Bh
 19868 000023D9 7503                    	jne	short pathslp 		;AC049;
 19869 000023DB 46                      	inc	si			;AN049; point past semicolon
 19870 000023DC EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 19871                                  pathslp:					; Get the user specified path
 19872 000023DE AC                      	lodsb				; Get a character
 19873 000023DF 3C0D                    	cmp	al,0Dh
 19874                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 19875 000023E1 7434                    	je	short path_eol		;AC049; yes - end of command
 19876 000023E3 E82905                  	call	testkanj		;See if DBCS
 19877 000023E6 7405                    	jz	short notkanj2		;No - continue
 19878 000023E8 AA                      	stosb				;AC049; Yes - store the first byte
 19879 000023E9 AC                      	lodsb				;skip second byte of DBCS
 19880                                  path_hold:				;AN049;
 19881 000023EA AA                      	stosb				;AC049; Store a byte in the PATH buffer
 19882 000023EB EBF1                    	jmp	short pathslp		;continue parsing
 19883                                  notkanj2:
 19884 000023ED E84905                  	call	UPCONV			;upper case the character
 19885                                  
 19886 000023F0 3C3B                    	cmp	al,';' ; 3Bh
 19887                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 19888 000023F2 74F6                    	je	short path_hold		;AC049; go store it
 19889 000023F4 E83F07                  	call	DELIM			;delimiter?
 19890 000023F7 75F1                    	jnz	short path_hold		;AC049; no - go store character
 19891                                  scan_white:				;AN049; make sure were at EOL
 19892 000023F9 AC                      	lodsb				;AN049; get a character
 19893 000023FA 3C0D                    	cmp	al,0Dh
 19894                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 19895 000023FC 7419                    	je	short path_eol		;AN049; yes - go set path
 19896 000023FE 3C20                    	cmp	al,' ' ; 20h
 19897                                  	;cmp	al,blank		;AN049; whitespace?
 19898 00002400 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 19899                                  	;cmp	al,9
 19900 00002402 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 19901 00002404 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 19902                                  
 19903 00002406 BA[D091]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 19904                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 19905 00002409 C706[D091]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 19906                                  	;mov	byte [msg_disp_class],2		
 19907                                  					;AN049; set up parse error msg class
 19908 0000240F C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 19909 00002414 E98B0A                  	jmp	cerror			;AN049;
 19910                                  path_eol:				;AN049; Parsing was clean
 19911 00002417 30C0                    	xor	al,al			;AN049; null terminate the PATH
 19912 00002419 AA                      	stosb				;AN049;    buffer
 19913 0000241A E84004                  	call	find_path		;AN049; Find PATH in environment
 19914 0000241D E81404                  	call	delete_path		;AC049; Delete any offending name
 19915 00002420 E8CA04                  	call	scan_double_null	;AC049; Scan to end of environment
 19916 00002423 E89A04                  	call	move_name		;AC049; move in PATH=
 19917 00002426 BE[219B]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 19918                                  store_path:				;AN049; Store the PATH in the environment
 19919 00002429 AC                      	lodsb				;AN049; Get a character
 19920                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 19921 0000242A 20C0                    	and	al,al ; al=0 ?
 19922 0000242C 7405                    	jz	short got_paths		;AN049; yes - exit
 19923 0000242E E82A05                  	call	store_char		;AN049; no - store character
 19924 00002431 EBF6                    	jmp	short store_path	;AN049; continue
 19925                                  got_paths:				;AN049; we're finished
 19926 00002433 31C0                    	xor	ax,ax			;	null terminate the PATH in
 19927 00002435 AB                      	stosw				;    	the environment
 19928 00002436 C3                      	retn
 19929                                  disppath:
 19930 00002437 E82304                  	call	find_path		;AN049;
 19931 0000243A E80300                  	call	print_path
 19932                                  	;call	CRLF2
 19933                                  	;retn
 19934                                  	; 21/02/2023
 19935 0000243D E9E106                  	jmp	CRLF2
 19936                                  
 19937                                  ; =============== S U B	R O U T	I N E =======================================
 19938                                  
 19939                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19940                                  print_path:
 19941 00002440 26803D00                	cmp	byte [es:di],0
 19942 00002444 750A                    	jnz	short path1
 19943                                  path0:
 19944 00002446 BA[2593]                	mov	dx,NULLPATH_PTR
 19945 00002449 0E                      	push	cs
 19946 0000244A 07                      	pop	es
 19947 0000244B 0E                      	push	cs
 19948 0000244C 1F                      	pop	ds
 19949 0000244D E9BF30                  	jmp	std_printf
 19950                                  path1:
 19951 00002450 06                      	push	es
 19952 00002451 1F                      	pop	ds
 19953 00002452 83EF05                  	sub	di,5
 19954 00002455 89FE                    	mov	si,di
 19955 00002457 E8AD04                  	call	SCASB2		; Look for null
 19956                                  	;cmp	cx,0FFh ; 255
 19957                                  	; 21/02/2023
 19958                                  	;ch = 0
 19959 0000245A 80F9FF                  	cmp	cl,255
 19960 0000245D 74E7                    	je	short path0
 19961 0000245F 0E                      	push	cs
 19962 00002460 07                      	pop	es
 19963 00002461 BF[87A7]                	mov	di,Arg_Buf
 19964                                  	;mov	dx,100h ; 256
 19965                                  	;sub	dx,cx
 19966                                  	;xchg	dx,cx
 19967                                  	; 21/02/2023
 19968 00002464 F6D9                    	neg	cl ; 256-cl
 19969 00002466 F3A4                    	rep	movsb
 19970 00002468 BA[6D93]                	mov	dx,arg_buf_ptr
 19971 0000246B 0E                      	push	cs
 19972 0000246C 1F                      	pop	ds
 19973 0000246D E99F30                  	jmp	std_printf
 19974                                  
 19975                                  ; ---------------------------------------------------------------------------
 19976                                  
 19977                                  ; ****************************************************************
 19978                                  ; *
 19979                                  ; * ROUTINE:	 CLS
 19980                                  ; *
 19981                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 19982                                  ; *		 installed, send a control string to clear the
 19983                                  ; *		 screen.
 19984                                  ; *
 19985                                  ; * INPUT:	 command line at offset 81H
 19986                                  ; *
 19987                                  ; * OUTPUT:	 none
 19988                                  ; *
 19989                                  ; ****************************************************************
 19990                                  
 19991                                  	; MSDOS 6.0
 19992                                  
 19993                                  ANSI_installed	equ 0FFh
 19994                                  
 19995                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19996                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19997                                  CLS:
 19998                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 19999                                  	;mov	ah,1Ah
 20000                                  	;mov	al,0			;AN000;
 20001 00002470 B8001A                  	mov	ax,1A00h
 20002 00002473 CD2F                    	int	2Fh			;AN000;
 20003                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 20004                                  		; Return: AL = FFh if installed
 20005 00002475 3CFF                    	cmp	al,ANSI_installed	;AN000;
 20006 00002477 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 20007                                  
 20008                                  check_lines:
 20009                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 20010 00002479 B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 20011                                  	;mov	bx,stdout		;AN000; lines for stdout
 20012 0000247C BB0100                  	mov	bx,1   ; handle
 20013                                  	;;mov	ch,ioc_sc		;AN000; type is display
 20014                                  	;mov	ch,3   ; CON device	
 20015                                  	;;mov	cl,get_generic		;AN000; get information
 20016                                  	;mov	cl,7Fh ; minor function, get display info
 20017                                  	; 25/04/2023
 20018 0000247F B97F03                  	mov	cx,037Fh
 20019 00002482 BA[F8A1]                	mov	dx,Display_Ioctl	;AN000;
 20020 00002485 CD21                    	int	21h			;AN000;
 20021 00002487 720A                    	jc	short no_variable	;AN000; function had error, use default
 20022                                  		; 21/02/2023
 20023                                  		; ds:dx = parameter block
 20024                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 20025                                  		; offset 00h  byte  level (0 for DOS 4.0)
 20026                                  		;   	 01h  byte  reserved
 20027                                  		;   	 02h  word  length of following data
 20028                                  		;   	 04h  word  control flags
 20029                                  		;	       bit 0 set for blink, clear for intensity
 20030                                  		;	       bits 1 to 15 reserved
 20031                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 20032                                  		;   	 07h  byte  reserved
 20033                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 20034                                  		;   	 0Ah  word  pixel columns
 20035                                  		;   	 0Ch  word  pixel rows
 20036                                  		;   	 0Eh  word  character columns
 20037                                  		;   	 10h  word  character rows
 20038                                  	
 20039                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 20040                                  	;				;AN000; get number of rows returned
 20041                                  	;mov	dh,al			;AN000; set number of rows
 20042                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 20043                                  	;				;AN000; get number of columns returned
 20044                                  	;mov	dl,al			;AN000; set number of columns
 20045                                  	; 21/02/2023
 20046 00002489 8A16[06A2]              	mov	dl,[display_width]
 20047 0000248D 8A36[08A2]              	mov	dh,[LinPerPag]
 20048 00002491 EB3B                    	jmp	short regcls		;AN000; go do cls
 20049                                  
 20050                                  no_variable:
 20051                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 20052                                  	;mov	bx,1
 20053                                  	; bx = 1
 20054                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 20055 00002493 B80044                  	mov	ax,4400h
 20056 00002496 CD21                    	int	21h			;AC000;
 20057 00002498 F6C280                  	test	dl,80h
 20058                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 20059 0000249B 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 20060 0000249D F6C210                  	test	dl,10h
 20061                                  	;test	dl,devid_SPECIAL	;AC000;
 20062 000024A0 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 20063                                  
 20064                                  ansicls:
 20065 000024A2 E85200                  	call	ansi_cls		;AN000; clear the screen
 20066 000024A5 EB2C                    	jmp	short cls_ret		;AN000; exit
 20067                                  
 20068                                  ; Get video mode
 20069                                  
 20070                                  cls_normal:				;AC000;
 20071                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 20072 000024A7 B40F                    	mov	ah,0Fh
 20073                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 20074 000024A9 CD10                    	int	10h
 20075 000024AB 3C03                    	cmp	al,3
 20076                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 20077 000024AD 760A                    	jbe	short DoAlpha
 20078 000024AF 3C07                    	cmp	al,7
 20079                                  	;cmp	al,video_bw		;AC000; see if black & white card
 20080 000024B1 7406                    	je	short DoAlpha
 20081                                  
 20082                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 20083                                  ; be just as bogus and set the mode that we just got. This will blank the
 20084                                  ; screen too.
 20085                                  
 20086                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 20087 000024B3 B400                    	mov	ah,0
 20088                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 20089 000024B5 CD10                    	int	10h
 20090 000024B7 EB1A                    	jmp	short cls_ret		;AC000; exit
 20091                                  
 20092                                  DoAlpha:
 20093                                  
 20094                                  ; Get video mode and number of columns to scroll
 20095                                  
 20096                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 20097                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 20098                                  ;M01   area
 20099                                  ;M01   Commented out code here is the original
 20100                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 20101                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 20102                                  ;M01	mov	dl,ah
 20103                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 20104                                  
 20105                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 20106                                  
 20107 000024B9 1E                      	push	ds
 20108                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 20109 000024BA B84000                  	mov	ax,40h
 20110 000024BD 8ED8                    	mov	ds,ax			;  *			M01
 20111                                  
 20112                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 20113 000024BF 8A164A00                	mov	dl,[4Ah]
 20114                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 20115 000024C3 8A368400                	mov	dh,[84h]
 20116 000024C7 1F                      	pop	ds			;			M01
 20117                                  
 20118 000024C8 08F6                    	or	dh,dh			; Q:ZERO		M01
 20119 000024CA 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 20120                                  
 20121                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 20122                                  	; 25/04/2023
 20123 000024CC B619                    	mov	dh,25
 20124                                  regcls:
 20125 000024CE FEC6                    	inc	dh			; height+1		M018
 20126 000024D0 E80100                  	call	reg_cls 		; go clear the screen
 20127                                  cls_ret:
 20128 000024D3 C3                      	retn				; exit
 20129                                  
 20130                                  ; ---------------------------------------------------------------------------
 20131                                  
 20132                                  ; MSDOS 6.0
 20133                                  
 20134                                  ; ****************************************************************
 20135                                  ; *
 20136                                  ; * ROUTINE:	 REG_CLS
 20137                                  ; *
 20138                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 20139                                  ; *
 20140                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 20141                                  ; *		 DH = NUMBER OF ROWS
 20142                                  ; *
 20143                                  ; * OUTPUT:	 none
 20144                                  ; *
 20145                                  ; ****************************************************************
 20146                                  
 20147                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20148                                  reg_cls:
 20149                                  ; Set overscan to black.
 20150                                  
 20151 000024D4 FECE                    	dec	dh			; decrement rows and columns
 20152 000024D6 FECA                    	dec	dl			;  to zero base
 20153 000024D8 52                      	push	dx			; save rows,columns
 20154                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 20155 000024D9 B40B                    	mov	ah,0Bh
 20156 000024DB 31DB                    	xor	bx,bx
 20157                                  	;int	video_io_int		; do int 10h - BIOS video IO
 20158 000024DD CD10                    	int	10h
 20159 000024DF 5A                      	pop	dx			;  restore rows,colums
 20160                                  
 20161 000024E0 31C0                    	xor	ax,ax			; zero out ax
 20162 000024E2 89C1                    	mov	cx,ax			;  and cx
 20163                                  
 20164                                  ; Scroll active page
 20165                                  
 20166                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 20167 000024E4 B406                    	mov	ah,6
 20168                                  	;mov	bh,video_attribute	; attribute for blank line
 20169 000024E6 B707                    	mov	bh,7
 20170 000024E8 30DB                    	xor	bl,bl			; set BL to 0
 20171                                  	;int	video_io_int		; do int 10h - BIOS video IO
 20172 000024EA CD10                    	int	10h
 20173                                  
 20174                                  ; Seek to cursor to 0,0
 20175                                  
 20176                                  ;M022 following two lines added
 20177                                  	;mov	ah,get_video_state	; get current video page in BH
 20178 000024EC B40F                    	mov	ah,0Fh
 20179                                  	;int	video_io_int
 20180 000024EE CD10                    	int	10h
 20181                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 20182 000024F0 B402                    	mov	ah,2
 20183 000024F2 31D2                    	xor	dx,dx			; row and column 0
 20184                                  ;M022	mov	bh,0
 20185                                  	;int	video_io_int		; do into 10h - BIOS video IO
 20186 000024F4 CD10                    	int	10h
 20187                                  
 20188 000024F6 C3                      	retn
 20189                                  
 20190                                  ; ---------------------------------------------------------------------------
 20191                                  
 20192                                  ; MSDOS 6.0
 20193                                  
 20194                                  ; ****************************************************************
 20195                                  ; *
 20196                                  ; * ROUTINE:	 ANSI_CLS
 20197                                  ; *
 20198                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 20199                                  ; *		 to STDOUT.
 20200                                  ; *
 20201                                  ; * INPUT:	 none
 20202                                  ; *
 20203                                  ; * OUTPUT:	 none
 20204                                  ; *
 20205                                  ; ****************************************************************
 20206                                  
 20207                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20208                                  ansi_cls:			;AC000;
 20209 000024F7 BE[9695]                	mov	si,CLSSTRING
 20210                                  			; db 4,1Bh,'[2J'
 20211 000024FA AC                      	lodsb
 20212 000024FB 88C1                    	mov	cl,al	; al = 4
 20213 000024FD 30ED                    	xor	ch,ch
 20214                                  	;mov	ah,Raw_CON_IO
 20215 000024FF B406                    	mov	ah,6
 20216                                  clrloop:
 20217 00002501 AC                      	lodsb
 20218 00002502 88C2                    	mov	dl,al
 20219 00002504 CD21                    	int	21h
 20220                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 20221 00002506 E2F9                    	loop	clrloop
 20222 00002508 C3                      	retn
 20223                                  
 20224                                  ;============================================================================
 20225                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 20226                                  ;============================================================================
 20227                                  ; 08/10/2018 - Retro DOS v3.0
 20228                                  
 20229                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 20230                                  
 20231                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 20232                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 20233                                  
 20234                                  ; ---------------------------------------------------------------------------
 20235                                  
 20236                                  ; ****************************************************************
 20237                                  ; *
 20238                                  ; * ROUTINE:	 CTTY - Change console
 20239                                  ; *
 20240                                  ; * SYNTAX:	 CTTY device
 20241                                  ; *
 20242                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 20243                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 20244                                  ; *		 STDERR. This routine returns to LODCOM1.
 20245                                  ; *
 20246                                  ; * INPUT:	 command line at offset 81H
 20247                                  ; *
 20248                                  ; * OUTPUT:	 none
 20249                                  ; *
 20250                                  ; ****************************************************************
 20251                                  
 20252                                  	; 21/02/2023 - Retro DOS v4.0
 20253                                  	; 08/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 20254                                  	; 10/06/2023
 20255                                  CTTY:
 20256                                  	; MSDOS 6.0
 20257 00002509 1E                      	push	ds			;AN000; Get local ES
 20258 0000250A 07                      	pop	es			;AN000;
 20259 0000250B BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 20260 0000250E BF[B898]                	mov	di,PARSE_CTTY
 20261                                  					;AC000; Get address of PARSE_CTTY
 20262 00002511 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 20263 00002513 31D2                    	xor	dx,dx			;AC000;
 20264 00002515 E84125                  	call	cmd_parse		;AC000; call parser
 20265                                  
 20266                                  	;cmp	ax,-1 ; 0FFFFh
 20267                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 20268                                  	;je	short ctty_error	;AN000; yes - error
 20269                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 20270                                  	;and	ax,ax ; ax > 0 ?
 20271                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 20272                                  	; 10/06/2023
 20273 00002518 40                      	inc	ax  ; cmp ax,-1
 20274 00002519 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 20275 0000251B 48                      	dec	ax  ; cmp ax,0
 20276 0000251C 7531                    	jnz	short ctty_error  ; 1 -> 0
 20277                                  	; ax = 0
 20278                                  
 20279 0000251E 56                      	push	si			;AN000; save position in line
 20280 0000251F C536[E5A9]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 20281 00002523 BF[12A1]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 20282                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 20283 00002526 AC                      	lodsb				;AN000; get a char from buffer
 20284 00002527 AA                      	stosb				;AN000; store in srcbuf
 20285                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 20286 00002528 08C0                    	or	al,al ; al = 0 ?
 20287 0000252A 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 20288                                  					;AN000; no - keep moving
 20289 0000252C 5E                      	pop	si			;AN000; get line position back
 20290 0000252D BF[B898]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 20291 00002530 E8C001                  	call	parse_check_eol 	;AN000; are we at end of line?
 20292                                  	;jz	short nocolon 		;AN000; yes - continue
 20293                                  	; 21/02/2023
 20294 00002533 751A                    	jnz	short ctty_error
 20295                                  ;ctty_error:
 20296                                  	;jmp	short isbaddev		;AC000; yes - exit
 20297                                  
 20298                                  	; 21/02/2023
 20299                                  	; MSDOS 3.3
 20300                                  	;call	SETPATH
 20301                                  	;dec	si
 20302                                  	;dec	si
 20303                                  	;cmp	byte [si],':'
 20304                                  	;jnz	short NOCOLON
 20305                                  	;mov	byte [si],0
 20306                                  nocolon:
 20307                                  	; 21/02/2023
 20308                                  	; MSDOS 6.0
 20309 00002535 BA[12A1]                	mov	dx,SrcBuf
 20310                                  ;NOCOLON:
 20311                                  	; MSDOS 3.3 & MSDOS 6.0
 20312                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 20313                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 20314 00002538 B8023D                  	mov	ax,3D02h ; 21/02/2023
 20315 0000253B CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 20316                                  			; DS:DX	-> ASCIZ filename
 20317                                  			; AL = access mode
 20318                                  			; 2 - read & write
 20319 0000253D 7210                    	jc	short isbaddev
 20320 0000253F 89C3                    	mov	bx,ax
 20321                                  	;mov	ax,IOCTL*256 ; 4400h
 20322 00002541 B80044                  	mov	ax,4400h
 20323 00002544 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 20324                                  			; BX = file or device handle
 20325 00002546 F6C280                  	test	dl,80h
 20326 00002549 750C                    	jnz	short devisok
 20327                                  closedev:
 20328                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 20329 0000254B B43E                    	mov	ah,3Eh
 20330 0000254D CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20331                                  			; BX = file handle
 20332                                  ctty_error:
 20333                                  isbaddev:
 20334 0000254F BA[2B93]                	mov	dx,BADDEV_PTR
 20335 00002552 E8BA2F                  	call	std_printf
 20336 00002555 EB40                    	jmp	short resret
 20337                                  
 20338                                  	;nop
 20339                                  devisok:
 20340                                  	; 21/02/2023
 20341                                  	; MSDOS 6.0
 20342 00002557 52                      	push	dx		;AN007; save device info
 20343                                  	; 08/06/2023
 20344 00002558 A1[B293]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 20345                                  	;mov	dh,util_msg_class
 20346 0000255B B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 20347 0000255D 53                      	push	bx		;AN021; save handle
 20348 0000255E E89130                  	call	TSYSGETMSG	;AN021; get the address of the message
 20349 00002561 89F2                    	mov	dx,si		;AN021; get address into dx
 20350                                  	;mov	ax,(Write shl 8)
 20351 00002563 B80040                  	mov	ax,4000h	;AN007; write to device
 20352 00002566 B90200                  	mov	cx,2		;AN007; write two bytes
 20353 00002569 CD21                    	int	21h		;AN007;
 20354 0000256B 5B                      	pop	bx		;AN021; get back handle
 20355 0000256C 5A                      	pop	dx		;AN007; get back device info
 20356 0000256D 72DC                    	jc	short closedev	;AN007; if error, quit
 20357                                  
 20358                                  	; MSDOS 3.3 & MSDOS 6.0
 20359 0000256F 30F6                    	xor	dh,dh
 20360 00002571 80CA03                  	or	dl,3
 20361                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 20362                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 20363 00002574 B80144                  	mov	ax,4401h
 20364 00002577 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 20365                                  			; BX = device handle,DH = 0
 20366                                  			; DL = device information to set 
 20367                                  			;	(bits 0-7 from	function 0)
 20368 00002579 53                      	push	bx
 20369 0000257A B90300                  	mov	cx,3
 20370 0000257D 31DB                    	xor	bx,bx
 20371                                  iclloop:			; Close basic handles
 20372                                  	;mov	ah,CLOSE ; 3Eh
 20373 0000257F B43E                    	mov	ah,3Eh
 20374 00002581 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20375                                  			; BX = file handle
 20376 00002583 43                      	inc	bx
 20377 00002584 E2F9                    	loop	iclloop
 20378 00002586 5B                      	pop	bx		; Get handle
 20379                                  	;mov	ah,XDUP ; 45h
 20380 00002587 B445                    	mov	ah,45h
 20381 00002589 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20382                                  			; BX = file handle to duplicate
 20383                                  	;mov	ah,XDUP ; 45h
 20384 0000258B B445                    	mov	ah,45h
 20385 0000258D CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20386                                  			; BX = file handle to duplicate
 20387                                  	;mov	ah,XDUP ; 45h
 20388 0000258F B445                    	mov	ah,45h
 20389 00002591 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20390                                  			; BX = file handle to duplicate
 20391                                  	;mov	ah,CLOSE ; 3Eh
 20392 00002593 B43E                    	mov	ah,3Eh
 20393 00002595 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20394                                  			; BX = file handle
 20395                                  resret:
 20396 00002597 8E1E[F39D]              	mov	ds,[RESSEG]
 20397 0000259B 1E                      	push	ds
 20398                                  	;mov	ax,[18h]
 20399 0000259C A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 20400 0000259F A3[3D02]                	mov	[Io_Save],ax
 20401                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 20402                                  	;;mov	ax,LODCOM1
 20403                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 20404                                  	;mov	ax,175h ; MSDOS 6.0
 20405 000025A2 B8[7400]                	mov	ax,TrnLodCom1_Trap
 20406 000025A5 50                      	push	ax
 20407                                  
 20408 000025A6 CB                      	retf		; Far return
 20409                                  
 20410                                  ; ---------------------------------------------------------------------------
 20411                                  
 20412                                  ;****************************************************************
 20413                                  ;*
 20414                                  ;* ROUTINE:	CHCP - Change code page internal command
 20415                                  ;*		(added DOS 3.30 07/21/86)
 20416                                  ;*
 20417                                  ;* SYNTAX:	CHCP [xxx]
 20418                                  ;*		where xxx is a valid code page
 20419                                  ;*
 20420                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 20421                                  ;*		6402H to set the code page to xxxx. If no parameters
 20422                                  ;*		are specified, CHCP will use INT 21H function 6401H
 20423                                  ;*		to get global code page and display it to the user.
 20424                                  ;*
 20425                                  ;* INPUT:	command line at offset 81H
 20426                                  ;*
 20427                                  ;* OUTPUT:	none
 20428                                  ;*
 20429                                  ;****************************************************************
 20430                                  
 20431                                  NLSFUNC_installed equ  0FFh
 20432                                  set_global_cp	  equ  2
 20433                                  get_global_cp	  equ  1
 20434                                  
 20435                                  	; 21/02/2023 - Retro DOS v4.0
 20436                                  	; 09/06/2023 - Retro DOS v4.2 COMMAND.COM
 20437                                  	; 10/06/2023
 20438                                  CHCP:
 20439                                  	; MSDOS 6.0
 20440 000025A7 1E                      	push	ds		;AN000; Get local ES
 20441 000025A8 07                      	pop	es		;AN000;
 20442 000025A9 BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 20443 000025AC BF[C497]                	mov	di,PARSE_CHCP
 20444                                  				;AN000; Get address of PARSE_CHCP
 20445 000025AF 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 20446 000025B1 31D2                    	xor	dx,dx		;AC000;
 20447 000025B3 E85301                  	call    Parse_With_Msg	;AC018; call parser
 20448                                  
 20449                                  	;cmp	ax,-1
 20450                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 20451                                  	;;jne	short setcp	;AC000; no go get number & set code page
 20452                                  	;je	short getcp	;AC000; yes - no parm - get code page
 20453                                  ;setcp:
 20454                                  	;;cmp	ax,0
 20455                                  	;;cmp	ax,RESULT_NO_ERROR
 20456                                  	;			;AN000; did we have an error?
 20457                                  	;;jne	short cp_error	;AC018; yes - go issue message
 20458                                  	;and	ax,ax ; ax > 0 ?
 20459                                  	;jnz	short cp_error	
 20460                                  	; 10/06/2023
 20461 000025B6 40                      	inc	ax  ; cmp ax,-1	
 20462 000025B7 745C                    	jz	short getcp ; 0FFFFh -> 0
 20463 000025B9 48                      	dec	ax  ; cmp ax,0
 20464 000025BA 7556                    	jnz	short cp_error ; 1 -> 0
 20465                                  	; ax = 0
 20466                                  
 20467                                  	;;push	cx		;AN000; save positional count
 20468                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 20469                                  	;;mov	cx,[bx]		;AN000;  into cx
 20470                                  	;;mov	[system_cpage],cx
 20471                                  	;			;AN000; save user input number
 20472                                  	;;pop	cx		;AC000; restore positional count
 20473                                  	;; 21/02/2023
 20474                                  	;mov	di,[bx]
 20475                                  	;mov	[system_cpage],di
 20476                                  	; 09/06/2023	
 20477 000025BC 8B1E[E5A9]              	mov	bx,[PARSE1_ADDR]
 20478 000025C0 891E[8BA0]              	mov	[system_cpage],bx
 20479                                  	;
 20480 000025C4 BF[C497]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 20481 000025C7 E82901                  	call	parse_check_eol ;AN000; are we at end of line?
 20482 000025CA 7546                    	jnz	short cp_error	;AC000; no - exit
 20483                                  okset:
 20484                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 20485                                  	;mov	ah,14h
 20486                                  	;mov	al,0		;AN000;
 20487 000025CC B80014                  	mov	ax,1400h
 20488 000025CF CD2F                    	int	2Fh		;AN000;
 20489                                  	;cmp	al,0FFh
 20490 000025D1 3CFF                    	cmp	al,NLSFUNC_installed
 20491                                  				;AN000;
 20492 000025D3 7405                    	je	short got_NLS 	;AN000; Yes - continue
 20493 000025D5 BA[5992]                	mov	dx,NLSFUNC_PTR
 20494                                  				;AN000; no - set up error message
 20495 000025D8 EB38                    	jmp	short cp_error	;AN000; error exit
 20496                                  
 20497                                  	; 21/02/2023
 20498                                  got_NLS:
 20499                                  	; MSDOS 6.0
 20500 000025DA 8B1E[8BA0]              	mov	bx,[system_cpage]
 20501                                  				;AN000; get user input code page
 20502                                  ;SET_CP_TBL_NUM:
 20503                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 20504                                  	;
 20505                                  	; MSDOS 3.3 & MSDOS 6.0
 20506                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 20507                                  	;mov	ah,66h
 20508                                  	;;mov	al,set_global_cp 
 20509                                  	;mov	al,2		;minor - set
 20510                                  	; 26/04/2023
 20511 000025DE B80266                  	mov	ax,6602h
 20512 000025E1 CD21                    	int	21h
 20513                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 20514                                  		; BX = active code page
 20515                                  		; DX = system code page (active page at boot time)
 20516                                  
 20517 000025E3 733F                    	jnc	short chcp_return
 20518                                  				;no error - exit
 20519                                  
 20520 000025E5 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 20521 000025E8 7515                    	jnz	short chcp_other_error
 20522                                  
 20523                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 20524 000025EA B459                    	mov	ah,59h
 20525 000025EC 31DB                    	xor	bx,bx
 20526 000025EE CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 20527                                  			; BX = version code (0000h for DOS 3.x)
 20528                                  
 20529 000025F0 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 20530 000025F3 7505                    	jne	short no_countrysys ; 26/04/2023
 20531                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 20532 000025F5 BA[5C92]                	mov	dx,INV_CODE_PAGE
 20533                                  	;jmp	cerror
 20534 000025F8 EB18                    	jmp	short cp_error
 20535                                  
 20536                                  	; 21/02/2023
 20537                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 20538                                  no_countrysys:
 20539                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 20540                                  ;					;AN000; set up extended error msg class
 20541                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 20542                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 20543                                  					;AN000; get message number in control block
 20544 000025FA BA[4694]                	mov	dx,NoCntry_Ptr
 20545 000025FD EB13                    	jmp	short cp_error
 20546                                  
 20547                                  chcp_other_error:		; end of p716
 20548                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 20549 000025FF B459                    	mov	ah,59h
 20550 00002601 31DB                    	xor	bx,bx
 20551 00002603 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 20552                                  			; BX = version code (0000h for DOS 3.x)
 20553 00002605 83F841                  	cmp	ax,65		;was it access denied?
 20554 00002608 7505                    	jne	short none_set	;no - assume all failed
 20555 0000260A BA[3D92]                	mov	dx,cp_not_all_ptr
 20556                                  				;set up message
 20557                                  	;jmp	cerror		;AC000; error exit
 20558 0000260D EB03                    	jmp     short cp_error
 20559                                  none_set:
 20560 0000260F BA[2F92]                	mov	dx,cp_not_set_ptr
 20561                                  				;set up message
 20562                                  cp_error:
 20563 00002612 E98D08                  	jmp	cerror		;exit
 20564                                  getcp:
 20565                                  	;;mov	ah,GETSETCDPG ; 66h
 20566                                  	;mov	ah,66h		;get/set global code page function	
 20567                                  	;;mov	al,get_global_cp ; 1
 20568                                  	;mov	al,1		;minor - get
 20569                                  	; 26/04/2023
 20570 00002615 B80166                  	mov	ax,6601h
 20571 00002618 CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 20572 0000261A 891E[8BA0]              	mov	[system_cpage],bx
 20573                                  				;get active cp for output
 20574 0000261E BA[4B92]                	mov	dx,cp_active_ptr
 20575 00002621 E8EB2E                  	call	std_printf	;print it out
 20576                                  chcp_return:
 20577 00002624 C3                      	retn
 20578                                  
 20579                                  ; ---------------------------------------------------------------------------
 20580                                  
 20581                                  ; ****************************************************************
 20582                                  ; *
 20583                                  ; * ROUTINE:	 TRUENAME
 20584                                  ; *
 20585                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 20586                                  ; *		 Parses the command line. If a path is found, set
 20587                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 20588                                  ; *		 set SRCXNAME to the drive letter. If no path
 20589                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 20590                                  ; *		 current directory. Use the NAME TRANSLATE system
 20591                                  ; *		 call to get the real name and  then display the 
 20592                                  ; *		 real name. If an error occurs issue an error
 20593                                  ; *		 message and transfer control to  CERROR.
 20594                                  ; *
 20595                                  ; * INPUT:	 command line at offset 81H
 20596                                  ; *
 20597                                  ; * OUTPUT:	 none
 20598                                  ; *
 20599                                  ; ****************************************************************
 20600                                  
 20601                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20602                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 20603                                  
 20604                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20605                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2741h
 20606                                  
 20607                                  TRUENAME:				;AN000; TRUENAME entry point
 20608 00002625 1E                      	push	ds			;AN000; Get local ES
 20609 00002626 07                      	pop	es			;AN000;
 20610 00002627 BE8100                  	mov	si,81h			;AN000; Get command line
 20611 0000262A BF[2298]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 20612 0000262D 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 20613 0000262F 31D2                    	xor	dx,dx			;AN000;
 20614 00002631 E8D500                  	call	Parse_With_Msg		;AC018; call parser
 20615                                  
 20616 00002634 BF[219B]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 20617                                  	;cmp	ax,0FFFFh
 20618                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 20619                                  	;je	short tn_eol		;AN000; yes - go process
 20620                                  	;; 22/02/2023
 20621                                  	;;cmp	ax,0
 20622                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 20623                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 20624                                  	;and	ax,ax ; ax = 0 ?
 20625                                  	;jnz	short tn_parse_error ; no, parse error	
 20626                                  	; 10/06/2023
 20627 00002637 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 20628 00002638 7433                    	jz	short tn_eol ; ah = 0 ; *
 20629 0000263A 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 20630 0000263B 752D                    	jnz	short tn_parse_error
 20631                                  	
 20632                                  	;cmp	byte [PARSE1_TYPE],6
 20633 0000263D 803E[E1A9]06            	cmp	byte [PARSE1_TYPE],result_drive
 20634                                  					;AN000; was a drive entered?
 20635                                  	;je	short tn_drive		;AN000; yes - go process
 20636                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 20637                                  	; 23/02/2023
 20638 00002642 7512                    	jne	short tn_filespec
 20639                                  
 20640                                  ;tn_eol: 
 20641                                  ;	;mov	ah,0			;AN000; no parameters on line
 20642                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 20643                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 20644                                  ;	mov	al,'.'
 20645                                  ;	stosw				;AN000; store in srcxname
 20646                                  ;	jmp	short tn_doit		;AN000; go do command
 20647                                  
 20648                                  tn_drive:				;AN000; a drive was entered
 20649 00002644 56                      	push	si			;AN000; save position in line
 20650 00002645 BE[E5A9]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 20651 00002648 AC                      	lodsb				;AN000; get the drive number
 20652 00002649 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 20653 0000264B AA                      	stosb				;AN000; store it in srcxname
 20654                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 20655 0000264C B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 20656 0000264F AB                      	stosw				;AN000;  store in srcxname
 20657                                  	;mov	al,0
 20658 00002650 B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 20659 00002652 AA                      	stosb				;AN000;
 20660 00002653 5E                      	pop	si			;AN000; get line position back
 20661 00002654 EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 20662                                  
 20663                                  tn_filespec:				;AN000; a filespec was entered
 20664 00002656 56                      	push	si			;AN000; save position in line
 20665 00002657 C536[E5A9]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 20666                                  
 20667                                  tn_move_filename:			;AN000; put filespec in srcxname
 20668 0000265B AC                      	lodsb				;AN000; get a char from buffer
 20669 0000265C AA                      	stosb				;AN000; store in srcxname
 20670                                  	;;cmp	al,0
 20671                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 20672 0000265D 08C0                    	or	al,al ; al = 0 ?
 20673 0000265F 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 20674 00002661 5E                      	pop	si			;AN000; get line position back
 20675                                  
 20676                                  tn_check_eol:				;AN000; make sure no extra parms
 20677 00002662 BF[2298]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 20678 00002665 E88B00                  	call	parse_check_eol 	;AN000; are we at end of line?
 20679 00002668 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 20680                                  tn_parse_error: 			;AN000; A parse error occurred
 20681 0000266A E93508                  	jmp	cerror			;AN000; Go to error routine
 20682                                  
 20683                                  tn_eol: 
 20684                                  	;23/02/2023
 20685                                  	;;mov	ah,0			;AN000; no parameters on line
 20686                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 20687                                  	;;mov	al,dot_chr		;AN000;   for current dir
 20688                                  	;mov	al,'.'
 20689                                  	; 10/06/2023
 20690                                  	;mov	ax,002Eh
 20691                                  	; ah = 0 ; *
 20692 0000266D B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 20693                                  	;	
 20694 0000266F AB                      	stosw				;AN000; store in srcxname
 20695                                  	; 23/02/2023
 20696                                  	;jmp	short tn_doit		;AN000; go do command
 20697                                  
 20698                                  tn_doit:				;AN000;
 20699 00002670 BE[219B]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 20700 00002673 BF[529C]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 20701 00002676 B460                    	mov	ah,xNameTrans		;AN000; do name translate call
 20702                                  	;mov	ah,60h
 20703 00002678 CD21                    	int	21h			;AN000;
 20704 0000267A 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 20705                                  
 20706 0000267C E8B3FB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 20707 0000267F C706[91A0][219B]        	mov	word [string_ptr_2],SRCXNAME
 20708                                  					;AN000; get address of failed string
 20709                                  	;mov	byte [extend_buf_sub],1
 20710 00002685 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 20711                                  					;AN000; put number of subst in control block
 20712 0000268A E91508                  	jmp	cerror			;AN000; Go to error routine
 20713                                  
 20714                                  tn_print_xname: 			;AN000;
 20715 0000268D C706[91A0][529C]        	mov	word [string_ptr_2],COMBUF
 20716                                  					;AN000; Set up address of combuf
 20717 00002693 BA[9793]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 20718 00002696 E88804                  	call	CRLF2			;AN000; print a crlf
 20719                                  	;call	Printf_Crlf		;AN000; print it out
 20720                                  	;retn				;AN000;
 20721                                  	; 23/02/2023
 20722 00002699 E9652E                  	jmp	Printf_Crlf
 20723                                  
 20724                                  ; ---------------------------------------------------------------------------
 20725                                  
 20726                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20727                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 20728                                  
 20729                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20730                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:27C3h
 20731                                  _$EXIT:
 20732                                  	; MSDOS 6.0
 20733 0000269C 1E                      	push	ds			;AN000; save data segment
 20734 0000269D 8E1E[F39D]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 20735                                  	;assume	ds:resgroup		;AN000;
 20736                                  
 20737 000026A1 803E[4002]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 20738 000026A6 740A                    	jz	short free_com		;AN045; no - free everything
 20739                                  
 20740                                  ;	We're a permanent command.
 20741                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 20742                                  
 20743 000026A8 833E[4302]FF            	cmp	word [SingleCom],-1	;M034
 20744 000026AD 7412                    	je	short no_reset		;M034 ; exit singlecom
 20745 000026AF E952DA                  	jmp	TCOMMAND		;permanent command, recycle
 20746                                  
 20747                                  free_com:
 20748                                  	;mov	ax,(multdos shl 8 or message_2f)
 20749 000026B2 B82E12                  	mov	ax,122Eh		;AN060; reset parse message pointers
 20750                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 20751 000026B5 B205                    	mov	dl,5
 20752 000026B7 8B3E[5802]              	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 20753 000026BB 8E06[5A02]              	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 20754 000026BF CD2F                    	int	2Fh			;AN000; go set it
 20755                                  no_reset:				;AN045;
 20756 000026C1 1F                      	pop	ds			;AN000; restore local data segment
 20757                                  	;assume	ds:trangroup		;AN000;
 20758                                  ;M040
 20759                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 20760                                  ;this, restores user dir if flag is set and resets the flag.
 20761                                  
 20762                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 20763 000026C2 E80C03                  	call	RestUDir1
 20764 000026C5 8E06[F39D]              	mov	es,[RESSEG]
 20765                                  	;assume	es:resgroup
 20766                                  
 20767 000026C9 26A1[DC01]              	mov	ax,[es:Parent]
 20768                                  	;mov	[es:16h],ax
 20769                                  	;mov	[es:PDB_Parent_PID],ax
 20770 000026CD 26A31600                	mov	[es:PDB.PARENT_PID],ax
 20771 000026D1 26A1[DE01]              	mov	ax,[es:OldTerm]
 20772                                  	;mov	[es:0Ah],ax
 20773                                  	;mov	[es:PDB_Exit],ax
 20774 000026D5 26A30A00                	mov	[es:PDB.EXIT],ax
 20775 000026D9 26A1[E001]              	mov	ax,[es:OldTerm+2]
 20776                                  	;mov	[es:0Ch],ax
 20777                                  	;mov	[es:PDB_Exit+2],ax
 20778 000026DD 26A30C00                	mov	[es:PDB.EXIT+2],ax
 20779                                  
 20780 000026E1 06                      	push	es
 20781 000026E2 8E06[019E]              	mov	es,[TRAN_TPA]
 20782                                  	;mov	ah,DEALLOC
 20783 000026E6 B449                    	mov	ah,49h
 20784 000026E8 CD21                    	int	21h			; Now running in "free" space
 20785 000026EA 07                      	pop	es
 20786                                  
 20787                                  	;mov	ah,Exit
 20788 000026EB B44C                    	mov	ah,4Ch
 20789                                  	;mov	al,byte ptr RetCode
 20790 000026ED 26A0[3802]              	mov	al,[es:RetCode]
 20791 000026F1 CD21                    	int	21h
 20792                                  
 20793                                  ; ---------------------------------------------------------------------------
 20794                                  
 20795                                  ; MSDOS 6.0
 20796                                  ; ****************************************************************
 20797                                  ; *
 20798                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 20799                                  ; *
 20800                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 20801                                  ; *		 If not end of line, set up to print parse
 20802                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 20803                                  ; *		 EXPECTED!
 20804                                  ; *
 20805                                  ; * INPUT:	 DS:SI	  last output from parser
 20806                                  ; *		 ES:DI	  points to parse block
 20807                                  ; *		 CX	  last output from parser
 20808                                  ; *
 20809                                  ; * OUTPUT:	 AX	  parser return code
 20810                                  ; *
 20811                                  ; *		 if end of line found
 20812                                  ; *		     zero flag set
 20813                                  ; *		 else
 20814                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 20815                                  ; *
 20816                                  ; ****************************************************************
 20817                                  
 20818                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20819                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 20820                                  
 20821                                  parse_check_eol:
 20822 000026F3 31D2                    	xor	dx,dx			;AN000;
 20823 000026F5 8936[89A0]              	mov	[parse_last],si 	;AN018; save start of parameter
 20824 000026F9 E85D23                  	call	cmd_parse		;AN000; call parser
 20825 000026FC 3CFF                    	cmp	al,-1 ; 0FFh
 20826                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 20827 000026FE 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 20828                                  	;cmp	ax,0
 20829                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 20830 00002700 21C0                    	and	ax,ax ; ax = 0 ?
 20831 00002702 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 20832 00002704 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 20833                                  ok_to_setup_pmsg:
 20834 00002705 E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 20835                                  parse_good_eol:
 20836                                  parse_msg_good:	; 23/02/2023
 20837 00002708 C3                      	retn				;AN000;
 20838                                  
 20839                                  ; ---------------------------------------------------------------------------
 20840                                  
 20841                                  ; MSDOS 6.0
 20842                                  ; ****************************************************************
 20843                                  ; *
 20844                                  ; * ROUTINE:	 PARSE_WITH_MSG
 20845                                  ; *
 20846                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 20847                                  ; *		 message is set up.
 20848                                  ; *
 20849                                  ; * INPUT:	 DS:SI	  last output from parser
 20850                                  ; *		 ES:DI	  points to parse block
 20851                                  ; *		 CX	  last output from parser
 20852                                  ; *
 20853                                  ; * OUTPUT:	 AX	  parser return code
 20854                                  ; *
 20855                                  ; *		 if no error
 20856                                  ; *		     outputs from parser
 20857                                  ; *		 else
 20858                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 20859                                  ; *		     error message set up for STD_PRINTF
 20860                                  ; *
 20861                                  ; ****************************************************************
 20862                                  
 20863                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20864                                  Parse_With_Msg:
 20865 00002709 8936[89A0]              	mov	[parse_last],si 	;AN018; save start of parameter
 20866 0000270D E84923                  	call	cmd_parse		;AN018; call parser
 20867 00002710 3CFF                    	cmp	al,-1 ; 0FFh
 20868                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 20869 00002712 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 20870                                  	;cmp	ax,0
 20871                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 20872 00002714 09C0                    	or	ax,ax ; ax = 0 ?
 20873 00002716 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 20874                                  	; 23/02/2023
 20875                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 20876                                  ;parse_msg_good:
 20877                                  	;retn				;AN018;
 20878                                  	; 23/02/2023
 20879                                  	;jmp	short setup_parse_error_msg	
 20880                                  
 20881                                  ; ---------------------------------------------------------------------------
 20882                                  
 20883                                  ; MSDOS 6.0
 20884                                  ; ****************************************************************
 20885                                  ; *
 20886                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 20887                                  ; *
 20888                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 20889                                  ; *		 message is set up.
 20890                                  ; *
 20891                                  ; * INPUT:	 AX	     Parse error number
 20892                                  ; *		 SI	     Set to past last parameter
 20893                                  ; *		 Parse_last  Set to start of last parameter
 20894                                  ; *
 20895                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 20896                                  ; *		 error message set up for STD_PRINTF
 20897                                  ; *
 20898                                  ; ****************************************************************
 20899                                  
 20900                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20901                                  setup_parse_error_msg:
 20902 00002718 C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 20903                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 20904 0000271D BA[D091]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 20905 00002720 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 20906                                  					;AC018; terminate the parameter string
 20907 00002723 A3[D091]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 20908 00002726 83F802                  	cmp	ax,2
 20909                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 20910 00002729 740D                    	je	short setup_parse_msg_ret
 20911                                  					;AN018;    no subst
 20912 0000272B 8B36[89A0]              	mov	si,[parse_last] 	;AC018; get start of parameter
 20913 0000272F 8936[91A0]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 20914 00002733 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 20915                                  					;AC018; put number of subst in control block
 20916                                  	;mov	byte [extend_buf_sub],1
 20917                                  setup_parse_msg_ret:
 20918 00002738 46                      	inc	si			;AN018; make sure zero flag not set
 20919 00002739 C3                      	retn				;AC018;
 20920                                  
 20921                                  ;============================================================================
 20922                                  ; TENV.ASM, MSDOS 6.0, 1991
 20923                                  ;============================================================================
 20924                                  ; 08/10/2018 - Retro DOS v3.0
 20925                                  
 20926                                  ; TITLE	Part6 COMMAND Transient routines.
 20927                                  
 20928                                  ;	Environment utilities and misc. routines
 20929                                  
 20930                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 20931                                  
 20932                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 20933                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 20934                                  
 20935                                  ; ---------------------------------------------------------------------------
 20936                                  
 20937                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20938                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20939                                  ADD_PROMPT:
 20940 0000273A E8FC00                  	call	delete_prompt	; Delete any existing prompt
 20941 0000273D E8AD01                  	call	scan_double_null
 20942                                  
 20943                                  ADD_PROMPT2:
 20944 00002740 56                      	push	si
 20945 00002741 E89B01                  	call	GETARG
 20946 00002744 5E                      	pop	si
 20947 00002745 7501                    	jnz	short ADD_PROMPT3
 20948                                  ADD_PROMPT_RETN:
 20949 00002747 C3                      	retn
 20950                                  ADD_PROMPT3:			; Pre scan for arguments
 20951 00002748 E87501                  	call	move_name	; Move in name
 20952 0000274B E89101                  	call	GETARG
 20953 0000274E 56                      	push	si
 20954 0000274F EB53                    	jmp	short ADD_NAME
 20955                                  
 20956                                  ;break	The SET command
 20957                                  
 20958                                  ; Input: DS:SI points to a CR terminated string
 20959                                  ; Output: carry flag is set if no room
 20960                                  ;	  otherwise name is added to environment
 20961                                  
 20962                                  DISP_ENVJ:
 20963 00002751 E9BC00                  	jmp	DISP_ENV
 20964                                  
 20965                                  ADD_NAME_TO_ENVIRONMENT:
 20966 00002754 E88801                  	call	GETARG
 20967 00002757 74F8                    	jz	short DISP_ENVJ
 20968                                  
 20969                                  ; check if line contains exactly one equals sign
 20970                                  
 20971 00002759 31DB                    	xor	bx,bx		; = count is 0
 20972 0000275B 56                      	push	si		; Save pointer to beginning of line
 20973                                  EQLP:
 20974 0000275C AC                      	lodsb			; Get a char
 20975 0000275D 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 20976 0000275F 740F                    	je	short QUEQ	
 20977 00002761 3C3D                    	cmp	al,'='		; Look for = sign	
 20978 00002763 75F7                    	jne	short EQLP	; not there, get next char
 20979 00002765 FEC3                    	inc	bl		; Otherwise increment EQ count
 20980 00002767 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 20981 0000276A 75F0                    	jne	short EQLP
 20982 0000276C FEC7                    	inc	bh		; Set BH=1 means no parameters
 20983 0000276E EBEC                    	jmp	short EQLP	; And look for more
 20984                                  QUEQ:
 20985 00002770 5E                      	pop	si		; Restore beginning of line
 20986 00002771 FECB                    	dec	bl		; Zero flag means only one EQ
 20987 00002773 7406                    	jz	short ONEQ	; Good line
 20988 00002775 BA[6892]                	mov	dx,SYNTMES_PTR
 20989 00002778 E92707                  	jmp	cerror
 20990                                  ONEQ:
 20991 0000277B 53                      	push	bx
 20992 0000277C E8BD00                  	call	delete_name_in_environment
 20993 0000277F 5B                      	pop	bx
 20994 00002780 FECF                    	dec	bh
 20995 00002782 74C3                    	jz	short ADD_PROMPT_RETN
 20996 00002784 E86601                  	call	scan_double_null
 20997 00002787 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 20998 00002789 E83401                  	call	move_name
 20999 0000278C 56                      	push	si
 21000 0000278D 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 21001                                  				;  env var name
 21002                                  		
 21003                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 21004                                  ; necessary in the resident for re-reading the transient. Let's look for
 21005                                  ; COMSPEC=
 21006                                  
 21007 0000278F C606[7497]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 21008 00002794 BE[9394]                	mov	si,COMSPECSTR ; "COMSPEC="
 21009 00002797 B90400                  	mov	cx,4
 21010 0000279A F3A7                    	repe	cmpsw
 21011 0000279C 7504                    	jnz	short NOT_COMSPEC
 21012                                  				; Zero set => exact match
 21013 0000279E FE06[7497]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 21014                                  	;mov	byte [COMSPEC_FLAG],1
 21015                                  NOT_COMSPEC:
 21016 000027A2 89DF                    	mov	di,bx		; Load ptr to end of env var name
 21017                                  ADD_NAME:
 21018 000027A4 5E                      	pop	si		; Add the value of the new env var
 21019 000027A5 56                      	push	si		;  to the environment.
 21020                                  ADD_NAME1:
 21021 000027A6 AC                      	lodsb
 21022 000027A7 3C0D                    	cmp	al,13 ; 0Dh
 21023 000027A9 7405                    	je	short ADD_NAME_RET
 21024 000027AB E8AD01                  	call	store_char
 21025 000027AE EBF6                    	jmp	short ADD_NAME1
 21026                                  ADD_NAME_RET:
 21027 000027B0 5E                      	pop	si
 21028 000027B1 803E[7497]00            	cmp	byte [comspec_flag],0
 21029                                  				; If the new env var is comspec,	
 21030                                  ADD_NAME_JZ_RET:
 21031 000027B6 748F                    	jz	short ADD_PROMPT_RETN 
 21032                                  				;  copy the value into the
 21033                                  				;  comspec var in the resident
 21034                                  
 21035                                  ; We have changed the COMSPEC variable. We need to update the resident
 21036                                  ; pieces necessary to reread in the info. First, skip all delimiters
 21037                                  
 21038 000027B8 E87303                  	call	scanoff
 21039 000027BB 8E06[F39D]              	mov	es,[RESSEG]	;  comspec var in the resident
 21040                                  
 21041                                  ; Make sure that the printer knows where the beginning of the string is
 21042                                  
 21043 000027BF BF[E901]                	mov	di,ComSpec
 21044 000027C2 89FB                    	mov	bx,di
 21045                                  
 21046                                  ; Generate drive letter for display
 21047                                  
 21048 000027C4 31C0                    	xor	ax,ax		;g assume no drive first
 21049 000027C6 26A2[3202]              	mov	[es:ComDrv],al
 21050                                  	; 23/02/2023
 21051                                  	; MSDOS 6.0 (& 5.0)
 21052 000027CA 50                      	push	ax		;AN000; 3/3/KK
 21053 000027CB 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 21054 000027CD E83F01                  	call	testkanj	;AN000; 3/3/KK	
 21055 000027D0 58                      	pop	ax		;AN000; 3/3/KK
 21056 000027D1 7518                    	jnz	short _GOTDRIVE
 21057                                  	;
 21058 000027D3 807C013A                	cmp	byte [si+1],':'	; drive specified?
 21059 000027D7 7512                    	jne	short _GOTDRIVE
 21060 000027D9 8A04                    	mov	al,[si]		; get his specified drive
 21061                                  	; 23/02/2023
 21062 000027DB E85B01                  	call	UPCONV
 21063                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 21064 000027DE 2C41                    	sub	al,'A'		; convert to 0-based
 21065 000027E0 83C702                  	add	di,2
 21066 000027E3 FEC0                    	inc	al		; convert to 1-based number
 21067 000027E5 26A2[3202]              	mov	[es:ComDrv],al
 21068                                  
 21069                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 21070                                  ; done here..
 21071                                  	;add	al,40h
 21072 000027E9 0440                    	add	al,'A'-1
 21073                                  _GOTDRIVE:
 21074                                  	; 23/02/2023
 21075                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 21076                                  	;mov	[es:PUTBACKSUBSTPTR],di
 21077                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 21078 000027EB 26893E[C801]            	mov	[es:PutBackComSpec],di
 21079                                  				;g point to beginning of name after drive
 21080                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 21081                                  	;mov	[es:PUTBACKDRV],al
 21082                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 21083 000027F0 26A2[CD01]              	mov	[es:PutBackDrv],al
 21084                                  
 21085                                  ; Copy chars until delim      	
 21086                                  
 21087 000027F4 89DF                    	mov	di,bx
 21088                                  COPY_COMSPEC:
 21089 000027F6 AC                      	lodsb
 21090 000027F7 E83C03                  	call	DELIM
 21091 000027FA 7407                    	jz	short COPYDONE
 21092 000027FC 3C0D                    	cmp	al,13 ; 0Dh
 21093 000027FE 7403                    	je	short COPYDONE
 21094 00002800 AA                      	stosb
 21095 00002801 EBF3                    	jmp	short COPY_COMSPEC
 21096                                  COPYDONE:
 21097 00002803 30C0                    	xor	al,al		; Null terminate the string and quit
 21098 00002805 AA                      	stosb
 21099                                  	;mov	byte [comspec_flag],0
 21100 00002806 A2[7497]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 21101 00002809 4F                      	dec	di
 21102 0000280A 26893E[2902]            	mov	[es:ComSpec_End],di
 21103 0000280F C3                      	retn
 21104                                  
 21105                                  DISP_ENV:
 21106 00002810 8E1E[F39D]              	mov	ds,[RESSEG]
 21107 00002814 8E1E[DC03]              	mov	ds,[EnvirSeg]
 21108                                  	; assume ds:nothing
 21109 00002818 31F6                    	xor	si,si
 21110                                  PENVLP:
 21111 0000281A 803C00                  	cmp	byte [si],0
 21112 0000281D 7497                    	jz	short ADD_NAME_JZ_RET
 21113 0000281F BF[87A7]                	mov	di,Arg_Buf
 21114                                  PENVLP2:
 21115 00002822 AC                      	lodsb
 21116 00002823 AA                      	stosb
 21117 00002824 08C0                    	or	al,al
 21118 00002826 75FA                    	jnz	short PENVLP2
 21119 00002828 BA[6D93]                	mov	dx,arg_buf_ptr
 21120 0000282B 1E                      	push	ds
 21121 0000282C 06                      	push	es
 21122 0000282D 1F                      	pop	ds
 21123                                  	; assume ds:nothing
 21124 0000282E E8D02C                  	call	Printf_Crlf
 21125 00002831 1F                      	pop	ds
 21126 00002832 EBE6                    	jmp	short PENVLP
 21127                                  
 21128                                  ; =============== S U B	R O U T	I N E =======================================
 21129                                  
 21130                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21131                                  delete_path:
 21132 00002834 BE[8794]                	mov	si,PATH_TEXT ; "PATH="
 21133 00002837 EB03                    	jmp	short delete_name_in_environment
 21134                                  
 21135                                  ; =============== S U B	R O U T	I N E =======================================
 21136                                  
 21137                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21138                                  delete_prompt:
 21139 00002839 BE[8C94]                	mov	si,PROMPT_TEXT ; "PROMPT="
 21140                                  
 21141                                  ; ---------------------------------------------------------------------------
 21142                                  
 21143                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21144                                  delete_name_in_environment:
 21145                                  
 21146                                  ; Input: DS:SI points to a "=" terminated string
 21147                                  ; Output: carry flag is set if name not found
 21148                                  ;	  otherwise name is deleted
 21149                                  
 21150 0000283C 56                      	push	si
 21151 0000283D 1E                      	push	ds
 21152 0000283E E82C00                  	call	FIND		; ES:DI points to name
 21153 00002841 7217                    	jc	short del1
 21154 00002843 89FE                    	mov	si,di		; Save it
 21155 00002845 E8BF00                  	call	SCASB2		; Scan for the nul
 21156 00002848 87F7                    	xchg	si,di
 21157                                  ;SR;
 21158                                  ; If we have only one env string, then the double null is lost when the last
 21159                                  ;string is deleted and we have an invalid empty environment with only a
 21160                                  ;single null. To avoid this, we will look for the double null case and then
 21161                                  ;move an extra null char.
 21162                                  ; Bugbug: The only possible problem is that the last pathstring
 21163                                  ;will be followed by a triple null. Is this really a problem?
 21164                                  
 21165                                  	; MSDOS 6.0
 21166 0000284A 26803C00                	cmp	byte [es:si],0	;null char?
 21167 0000284E 7501                    	jnz	short not_dnull	;no, we are at a double null
 21168 00002850 4E                      	dec	si		;point at the double null
 21169                                  not_dnull:
 21170                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21171 00002851 E86901                  	call	GETENVSIZ
 21172 00002854 29F1                    	sub	cx,si
 21173 00002856 06                      	push	es
 21174 00002857 1F                      	pop	ds		; ES:DI points to name
 21175                                  				; DS:SI points to next name
 21176 00002858 F3A4                    	rep	movsb
 21177                                  del1:
 21178 0000285A 1F                      	pop	ds
 21179 0000285B 5E                      	pop	si
 21180                                  find_retn:
 21181 0000285C C3                      	retn
 21182                                  
 21183                                  ; =============== S U B	R O U T	I N E =======================================
 21184                                  
 21185                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21186                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 21187                                  find_path:
 21188 0000285D BE[8794]                	mov	si,PATH_TEXT ; "PATH="
 21189 00002860 EB03                    	jmp	short find_name_in_environment
 21190                                  
 21191                                  ; =============== S U B	R O U T	I N E =======================================
 21192                                  
 21193                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21194                                  find_prompt:
 21195 00002862 BE[8C94]                	mov	si,PROMPT_TEXT ; "PROMPT="
 21196                                  
 21197                                  ; ---------------------------------------------------------------------------
 21198                                  
 21199                                  find_name_in_environment:
 21200                                  
 21201                                  ; Input: DS:SI points to a "=" terminated string
 21202                                  ; Output: ES:DI points to the arguments in the environment
 21203                                  ;	  zero is set if name not found
 21204                                  ;	  carry flag is set if name not valid format
 21205                                  
 21206 00002865 E80500                  	call	FIND		; Find the name
 21207 00002868 72F2                    	jc	short find_retn	; Carry means not found	
 21208 0000286A E99600                  	jmp	SCASB1		; Scan for = sign
 21209                                  
 21210                                  ; ---------------------------------------------------------------------------
 21211                                  	;nop
 21212                                  
 21213                                  ; =============== S U B	R O U T	I N E =======================================
 21214                                  
 21215                                  ; On return of FIND1, ES:DI points to beginning of name
 21216                                  
 21217                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21218                                  FIND:
 21219 0000286D FC                      	cld
 21220 0000286E E84100                  	call	COUNT0		; CX = Length of name
 21221 00002871 8E06[F39D]              	mov	es,[RESSEG]
 21222                                  	;assume es:RESGROUP
 21223 00002875 268E06[DC03]            	mov	es,[es:EnvirSeg]
 21224                                  	;assume es:NOTHING
 21225 0000287A 31FF                    	xor	di,di
 21226                                  find1:	
 21227 0000287C 51                      	push	cx
 21228 0000287D 56                      	push	si
 21229 0000287E 57                      	push	di
 21230                                  find11:
 21231 0000287F AC                      	lodsb
 21232                                  	; 23/02/2023 
 21233                                  	; MSDOS 6.0 (& 5.0)
 21234 00002880 E88C00                  	call	testkanj	
 21235 00002883 740F                    	jz	short notkanj3
 21236 00002885 4E                      	dec	si
 21237 00002886 AD                      	lodsw
 21238 00002887 47                      	inc	di
 21239 00002888 47                      	inc	di
 21240 00002889 263B45FE                	cmp	ax,[es:di-2]
 21241 0000288D 7511                    	jne	short find12
 21242 0000288F 49                      	dec	cx
 21243 00002890 E2ED                    	loop	find11
 21244 00002892 EB0C                    	jmp	short find12
 21245                                  notkanj3:
 21246 00002894 E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 21247                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 21248 00002897 47                      	inc	di
 21249 00002898 263A45FF                	cmp	al,[es:di-1]
 21250 0000289C 7502                    	jne	short find12
 21251 0000289E E2DF                    	loop	find11
 21252                                  find12:
 21253 000028A0 5F                      	pop	di
 21254 000028A1 5E                      	pop	si
 21255 000028A2 59                      	pop	cx
 21256 000028A3 74B7                    	jz	short find_retn
 21257 000028A5 51                      	push	cx
 21258 000028A6 E85E00                  	call	SCASB2		; Scan for a nul
 21259 000028A9 59                      	pop	cx
 21260 000028AA 26803D00                	cmp	byte [es:di],0
 21261 000028AE 75CC                    	jnz	short find1
 21262 000028B0 F9                      	stc			; Indicate not found
 21263 000028B1 C3                      	retn
 21264                                  
 21265                                  ; =============== S U B	R O U T	I N E =======================================
 21266                                  
 21267                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21268                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 21269                                  COUNT0:
 21270 000028B2 1E                      	push	ds
 21271 000028B3 07                      	pop	es
 21272                                  	;assume es:nothing
 21273 000028B4 89F7                    	mov	di,si
 21274                                  ;COUNT1:
 21275 000028B6 57                      	push	di		; Count number of chars until "="
 21276 000028B7 E84900                  	call	SCASB1
 21277                                  	; 23/02/2023
 21278                                  ;	jmp	short COUNTX
 21279                                  ;COUNT2:
 21280                                  ;	push	di		; Count number of chars until nul
 21281                                  ;	call	SCASB2
 21282                                  ;COUNTX:
 21283 000028BA 59                      	pop	cx
 21284 000028BB 29CF                    	sub	di,cx
 21285 000028BD 87F9                    	xchg	di,cx
 21286                                  move_name_retn:
 21287 000028BF C3                      	retn
 21288                                  
 21289                                  ; =============== S U B	R O U T	I N E =======================================
 21290                                  
 21291                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21292                                  move_name:
 21293 000028C0 803C0D                  	cmp	byte [si],13 ; 0Dh
 21294 000028C3 74FA                    	je	short move_name_retn
 21295 000028C5 AC                      	lodsb
 21296                                  	; 23/02/2023 
 21297                                  	; MSDOS 6.0 (& 5.0)
 21298 000028C6 E84600                  	call	testkanj		
 21299 000028C9 7409                    	jz	short notkanj1
 21300 000028CB E88D00                  	call	store_char
 21301 000028CE AC                      	lodsb
 21302 000028CF E88900                  	call	store_char
 21303 000028D2 EBEC                    	jmp	short move_name
 21304                                  notkanj1: 
 21305 000028D4 E86200                  	call	UPCONV
 21306                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 21307 000028D7 E88100                  	call	store_char
 21308 000028DA 3C3D                    	cmp	al,'='
 21309 000028DC 75E2                    	jne	short move_name
 21310                                  getarg_retn:
 21311 000028DE C3                      	retn
 21312                                  
 21313                                  ; =============== S U B	R O U T	I N E =======================================
 21314                                  
 21315                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21316                                  GETARG:
 21317 000028DF BE8000                  	mov	si,80h
 21318 000028E2 AC                      	lodsb
 21319 000028E3 08C0                    	or	al,al
 21320 000028E5 74F7                    	jz	short getarg_retn
 21321 000028E7 E84402                  	call	scanoff
 21322 000028EA 3C0D                    	cmp	al,13 ; 0Dh
 21323                                  sdn_retn:
 21324 000028EC C3                      	retn
 21325                                  
 21326                                  ; =============== S U B	R O U T	I N E =======================================
 21327                                  
 21328                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 21329                                  ; there is NO double NULL, merely a string that is empty.
 21330                                  
 21331                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21332                                  scan_double_null:
 21333 000028ED 8E06[F39D]              	mov	es,[RESSEG]
 21334 000028F1 268E06[DC03]            	mov	es,[es:EnvirSeg]
 21335 000028F6 31FF                    	xor	di,di
 21336                                  
 21337                                  ; Top cycle-point. If the string here is empty, then we are done
 21338                                  
 21339                                  sdn1:
 21340 000028F8 26803D00                	cmp	byte [es:di],0	; nul string?
 21341 000028FC 74EE                    	jz	short sdn_retn	; yep, all done
 21342 000028FE E80600                  	call	SCASB2
 21343 00002901 EBF5                    	jmp	short sdn1
 21344                                  
 21345                                  ; =============== S U B	R O U T	I N E =======================================
 21346                                  
 21347                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21348                                  SCASB1:
 21349 00002903 B03D                    	mov	al,'='		; Scan for an =
 21350 00002905 EB02                    	jmp	short SCASBX
 21351                                  
 21352                                  ; =============== S U B	R O U T	I N E =======================================
 21353                                  
 21354                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21355                                  SCASB2:
 21356 00002907 30C0                    	xor	al,al		; Scan for a nul
 21357                                  
 21358                                  ; ---------------------------------------------------------------------------
 21359                                  
 21360                                  	; 23/02/2023
 21361                                  SCASBX:
 21362 00002909 B90001                  	mov	cx,256
 21363 0000290C F2AE                    	repne	scasb
 21364 0000290E C3                      	retn
 21365                                  
 21366                                  ; =============== S U B	R O U T	I N E =======================================
 21367                                  
 21368                                  ; MSDOS 6.0
 21369                                  
 21370                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 21371                                  
 21372                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21373                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 21374                                  testkanj:
 21375 0000290F 1E                      	push	ds			;AN000;  3/3/KK
 21376 00002910 56                      	push	si			;AN000;  3/3/KK
 21377 00002911 50                      	push	ax			;AN000;  3/3/KK
 21378 00002912 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 21379 00002917 C536[5C02]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 21380                                  ktlop:					;AN000;  3/3/KK
 21381 0000291B 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 21382 0000291E 740E                    	je	short notlead 		;AN000;  3/3/KK
 21383 00002920 58                      	pop	ax			;AN000;  3/3/KK
 21384 00002921 50                      	push	ax			;AN000;  3/3/KK
 21385 00002922 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 21386 00002924 7208                    	jb	short notlead 		;AN000;  3/3/KK
 21387 00002926 46                      	inc	si			;AN000;  3/3/KK
 21388 00002927 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 21389 00002929 7607                    	jbe	short islead		;AN000;  3/3/KK
 21390 0000292B 46                      	inc	si			;AN000;  3/3/KK
 21391 0000292C EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 21392                                  notlead:				;AN000;  3/3/KK
 21393 0000292E 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 21394 00002930 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 21395                                  islead: 				;AN000;  3/3/KK
 21396 00002932 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 21397 00002934 40                      	inc	ax			;AN000;  3/3/KK
 21398                                  ktret:					;AN000;  3/3/KK
 21399 00002935 58                      	pop	ax			;AN000;  3/3/KK
 21400 00002936 5E                      	pop	si			;AN000;  3/3/KK
 21401 00002937 1F                      	pop	ds			;AN000;  3/3/KK
 21402 00002938 C3                      	retn				;AN000;  3/3/KK
 21403                                  
 21404                                  ; =============== S U B	R O U T	I N E =======================================
 21405                                  
 21406                                  ; MSDOS 6.0
 21407                                  
 21408                                  ; ****************************************************************
 21409                                  ; *
 21410                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 21411                                  ; *
 21412                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 21413                                  ; *		 the character in AL from the file upper case table
 21414                                  ; *		 in DOS if character if above  ascii 128, else
 21415                                  ; *		 subtracts 20H if between "a" and "z".
 21416                                  ; *
 21417                                  ; * INPUT:	 AL	      char to be upper cased
 21418                                  ; *		 FUCASE_ADDR  set to the file upper case table
 21419                                  ; *
 21420                                  ; * OUTPUT:	 AL	      upper cased character
 21421                                  ; *
 21422                                  ; ****************************************************************
 21423                                  
 21424                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21425                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 21426                                  
 21427                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21428                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2A6Eh
 21429                                  UPCONV:
 21430 00002939 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 21431 0000293B 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 21432 0000293D 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 21433 0000293F 1E                      	push	ds			;AN000;
 21434 00002940 53                      	push	bx			;AN000;
 21435 00002941 8E1E[F39D]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 21436                                  	;lds	bx,dword ptr FUCase_Addr+1
 21437 00002945 C51E[5402]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 21438 00002949 83C302                  	add	bx,2			;AN000;  skip over first word
 21439                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 21440 0000294C D7                      	xlat
 21441 0000294D 5B                      	pop	bx			;AN000;
 21442 0000294E 1F                      	pop	ds			;AN000;
 21443                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 21444                                  	; 10/06/2023
 21445                                  upconv_end:
 21446                                  	; 24/02/2023
 21447 0000294F C3                      	retn
 21448                                  oth_fucase:				;AN000;
 21449 00002950 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 21450 00002952 72FB                    	jb	short upconv_end	;AC000;    subtract 20h to get
 21451 00002954 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 21452 00002956 77F7                    	ja	short upconv_end	;AC000;
 21453 00002958 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 21454                                  ;upconv_end:	; 10/06/2023		;AN000;
 21455 0000295A C3                      	retn
 21456                                  
 21457                                  ; ---------------------------------------------------------------------------
 21458                                  
 21459                                  ; MSDOS 3.3
 21460                                  
 21461                                  	; 24/02/2023
 21462                                  ;UPCONV_MAPCALL:
 21463                                  	;			; If between "a" and "z"
 21464                                  	;cmp	al,[small_a]
 21465                                  	;jb	short UPCONV_END
 21466                                  	;cmp	al,[small_z]
 21467                                  	;ja	short UPCONV_END
 21468                                  	;sub	al,20h		; Change lower-case to upper
 21469                                  ;UPCONV_END:
 21470                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 21471                                  	;			  ; 	  for (current) country
 21472                                  	;retn
 21473                                  
 21474                                  ; =============== S U B	R O U T	I N E =======================================
 21475                                  
 21476                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 21477                                  
 21478                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21479                                  store_char:
 21480 0000295B 51                      	push	cx
 21481 0000295C 53                      	push	bx
 21482                                  
 21483                                  	; 24/02/2023
 21484                                  	;;16/10/2018
 21485                                  	; MSDOS 6.0
 21486 0000295D 06                      	push	es		;AN056;*
 21487 0000295E 1E                      	push	ds		;AN056; Save local DS
 21488 0000295F 8E1E[F39D]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 21489 00002963 8E06[DC03]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 21490 00002967 1F                      	pop	ds		;AN056; Get local segment back
 21491                                  
 21492                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21493 00002968 E85200                  	call	GETENVSIZ
 21494 0000296B 89CB                    	mov	bx,cx		; Save room for double nul
 21495 0000296D 83EB02                  	sub	bx,2
 21496 00002970 39DF                    	cmp	di,bx
 21497 00002972 723F                    	jb	short store1
 21498 00002974 50                      	push	ax
 21499 00002975 51                      	push	cx
 21500 00002976 53                      	push	bx		; Save Size of environment
 21501 00002977 E85DDE                  	call	FREE_TPA
 21502 0000297A 5B                      	pop	bx
 21503 0000297B 83C302                  	add	bx,2		; Recover true environment size
 21504                                  
 21505 0000297E 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K
 21506 00002982 7203                    	jb	short envsiz_ok
 21507                                  bad_env_size:			;AN056;
 21508 00002984 F9                      	stc
 21509 00002985 EB16                    	jmp	short envnoset
 21510                                  	;nop
 21511                                  envsiz_ok:
 21512 00002987 B104                    	mov	cl,4
 21513 00002989 D3EB                    	shr	bx,cl		; Convert back to paragraphs
 21514 0000298B 43                      	inc	bx
 21515                                  	; 24/02/2023
 21516                                  	; MSDOS 6.0
 21517 0000298C 8CC1                    	mov	cx,es		;AN056; Get environment segment
 21518 0000298E 01D9                    	add	cx,bx		;AN056; Add in size of environment
 21519 00002990 83C120                  	add	cx,20h		;AN056; Add in some TPA
 21520 00002993 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 21521 00002995 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 21522 00002997 73EB                    	jnb	short bad_env_size
 21523                                  				;AN056; Yes - don't do it!!!
 21524                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21525 00002999 B44A                    	mov	ah,4Ah
 21526                                  	;mov	ah,SETBLOCK ; 4Ah
 21527 0000299B CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21528                                  			; ES = segment address of block	to change
 21529                                  			; BX = new size	in paragraphs
 21530                                  envnoset:
 21531 0000299D 9C                      	pushf
 21532 0000299E 06                      	push	es
 21533 0000299F 8E06[F39D]              	mov	es,[RESSEG]
 21534 000029A3 E841DE                  	call	ALLOC_TPA
 21535 000029A6 07                      	pop	es
 21536 000029A7 9D                      	popf
 21537 000029A8 59                      	pop	cx
 21538 000029A9 58                      	pop	ax
 21539                                  	; 10/06/2023
 21540 000029AA 7307                    	jnc	short store1
 21541                                  	; 24/02/2023
 21542 000029AC 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 21543                                  	;jnc	short store1
 21544 000029AD BA[E791]                	mov	dx,ENVERR_PTR
 21545 000029B0 E9EF04                  	jmp	cerror
 21546                                  store1:	
 21547 000029B3 AA                      	stosb
 21548 000029B4 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 21549                                  	; 24/02/2023
 21550 000029B9 07                      	pop	es ; MSDOS 6.0	;AN056;*
 21551 000029BA 5B                      	pop	bx
 21552 000029BB 59                      	pop	cx
 21553 000029BC C3                      	retn
 21554                                  
 21555                                  ; =============== S U B	R O U T	I N E =======================================
 21556                                  
 21557                                  	; 24/02/2023
 21558                                  GETENVSIZ:
 21559                                  
 21560                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 21561                                  ;ES has environment segment
 21562                                  ;Size returned in CX, all other registers preserved
 21563                                  
 21564 000029BD 06                      	push	es
 21565 000029BE 50                      	push	ax
 21566 000029BF 8CC0                    	mov	ax,es
 21567 000029C1 48                      	dec	ax		;Point at arena
 21568 000029C2 8EC0                    	mov	es,ax
 21569                                  	;mov	ax,[es:3]
 21570 000029C4 26A10300                	mov	ax,[es:ARENA.size]
 21571 000029C8 B104                    	mov	cl,4
 21572 000029CA D3E0                    	shl	ax,cl		;Convert to bytes
 21573 000029CC 89C1                    	mov	cx,ax
 21574 000029CE 58                      	pop	ax
 21575 000029CF 07                      	pop	es
 21576                                  getenvsiz_retn:
 21577 000029D0 C3                      	retn
 21578                                  
 21579                                  ; =============== S U B	R O U T	I N E =======================================
 21580                                  
 21581                                  	; 24/02/2023
 21582                                  RestUDir1:
 21583 000029D1 1E                      	push	ds
 21584 000029D2 8E1E[F39D]              	mov	ds,[RESSEG]
 21585 000029D6 803E[3F02]00            	cmp	byte [RestDir],0
 21586 000029DB 1F                      	pop	ds
 21587 000029DC 74F2                    	jz	short getenvsiz_retn
 21588                                  
 21589                                  ; =============== S U B	R O U T	I N E =======================================
 21590                                  
 21591                                  	; 24/02/2023
 21592                                  RestUDir:
 21593 000029DE BA[D59C]                	mov	dx,USERDIR1
 21594 000029E1 B43B                    	mov	ah,3Bh
 21595                                  	;mov	ah,CHDir ; 3Bh
 21596 000029E3 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21597                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21598 000029E5 30C0                    	xor	al,al
 21599                                  	;call	SETREST
 21600                                  	;retn
 21601                                  	; 24/02/2023
 21602 000029E7 E94908                  	jmp	SETREST
 21603                                  
 21604                                  ;============================================================================
 21605                                  ; TENV2.ASM, MSDOS 6.0, 1991
 21606                                  ;============================================================================
 21607                                  ; 07/10/2018 - Retro DOS v3.0
 21608                                  
 21609                                  ; TITLE	Part6 COMMAND Transient routines.
 21610                                  
 21611                                  ;	Environment utilities and misc. routines
 21612                                  
 21613                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 21614                                  
 21615                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21616                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 21617                                  
 21618                                  ; ---------------------------------------------------------------------------
 21619                                  
 21620                                  ; ****************************************************************
 21621                                  ; *
 21622                                  ; * ROUTINE:	 $CHDIR
 21623                                  ; *
 21624                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 21625                                  ; *		 line. If path is found, CHDIR to path. If a drive
 21626                                  ; *		 letter is found, get and display the current dir
 21627                                  ; *		 of the specified drive. If nothing is found, get
 21628                                  ; *		 and display the current dir of the default drive.
 21629                                  ; *
 21630                                  ; * INPUT:	 command line at offset 81H
 21631                                  ; *
 21632                                  ; * OUTPUT:	 none
 21633                                  ; *
 21634                                  ; ****************************************************************
 21635                                  
 21636                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21637                                  
 21638                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21639                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B21h
 21640                                  _$CHDIR:
 21641                                  	; MSDOS 6.0
 21642 000029EA BE8100                  	mov	si,81h
 21643 000029ED BF[2298]                	mov	di,PARSE_CHDIR
 21644                                  				;AN000; Get address of PARSE_CHDIR
 21645 000029F0 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 21646 000029F2 31D2                    	xor	dx,dx		;AN000;
 21647 000029F4 E812FD                  	call	Parse_With_Msg	;AC018; call parser
 21648                                  	
 21649                                  	;cmp	ax,-1
 21650                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 21651                                  	;je	short bwdj	; No args
 21652                                  	;;cmp	ax,0
 21653                                  	;;cmp	ax,RESULT_NO_ERROR
 21654                                  	;			;AC000; did we have an error?
 21655                                  	;or	ax,ax ; ax = 0 ?
 21656                                  	;jnz	short ChDirErr	;AC018; yes - exit
 21657                                  	
 21658                                  	; 10/06/2023
 21659 000029F7 40                      	inc	ax	; cmp ax,-1
 21660 000029F8 7414                    	jz	short bwdj ; 0FFFFh -> 0
 21661 000029FA 48                      	dec	ax	; cmp ax,0
 21662 000029FB 756D                    	jnz	short ChDirErr ; 1 -> 0
 21663                                  	; ax = 0
 21664                                  
 21665                                  	;cmp	byte [PARSE1_TYPE],6
 21666 000029FD 803E[E1A9]06            	cmp	byte [PARSE1_TYPE],result_drive
 21667                                  				;AC000; was a drive entered?
 21668 00002A02 7511                    	jne	short REALCD	; no
 21669                                  
 21670                                  ; D: was found. See if there is anything more.
 21671                                  
 21672 00002A04 BF[2298]                	mov	di,PARSE_CHDIR
 21673                                  				;AC000; get address of parse_chdir
 21674 00002A07 31D2                    	xor	dx,dx		;AC000;
 21675 00002A09 E8E7FC                  	call	parse_check_eol ;AC000; call parser
 21676 00002A0C 755C                    	jnz	short ChDirErr	;AC000;
 21677                                  bwdj:
 21678 00002A0E E87BF9                  	call	build_dir_for_chdir
 21679                                  				; Drive only specified
 21680 00002A11 E80D01                  	call	CRLF2
 21681                                  chdir_retn:
 21682 00002A14 C3                      	retn
 21683                                  
 21684                                  	; 24/02/2023
 21685                                  	; MSDOS 3.3
 21686                                  	;mov	ax,[COMSW]
 21687                                  	;or	ax,[ALLSWITCH]
 21688                                  	;mov	dx,BADPARMPTR
 21689                                  	;jnz	short CHDIR_ERR
 21690                                  	;mov	si,81h
 21691                                  	;call	SCANOFF
 21692                                  	;cmp	al,0Dh		; are we at end of line?
 21693                                  	;je	short BWDJ	; No args
 21694                                  	;inc	si
 21695                                  	;lodsb
 21696                                  	;cmp	al,':'
 21697                                  	;jne	short REALCD
 21698                                  	;push	si
 21699                                  	;call	SCANOFF
 21700                                  	;pop	si
 21701                                  	;cmp	al,0Dh		; was a drive entered?
 21702                                  	;jne	short REALCD	; no
 21703                                  ;BWDJ:
 21704                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 21705                                  	;call	CRLF2
 21706                                  ;CHDIR_RETN:
 21707                                  	;retn
 21708                                  
 21709                                  	; 24/02/2023
 21710                                  	; MSDOS 6.0
 21711                                  REALCD:
 21712 00002A15 56                      	push	si		;AN000; save position in line
 21713 00002A16 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 21714                                  				;AN000; get address of filespec
 21715 00002A1A E8D807                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 21716 00002A1D 5E                      	pop	si		;AN000; restore position in line
 21717 00002A1E BF[2298]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 21718 00002A21 31D2                    	xor	dx,dx		;AC000;
 21719 00002A23 E8CDFC                  	call	parse_check_eol ;AC000; call parser
 21720 00002A26 7542                    	jnz	short ChDirErr	;AC000;
 21721                                  	
 21722 00002A28 E81106                  	call	SETPATH
 21723 00002A2B F606[AEA0]02            	test	byte [DestInfo],2
 21724 00002A30 7518                    	jnz	short BadChDir
 21725                                  
 21726                                  	; 26/04/2023
 21727 00002A32 B43B                    	mov	ah,3Bh
 21728                                  	;mov	ah,CHDir
 21729 00002A34 CD21                    	int	21h
 21730 00002A36 73DC                    	jnc	short chdir_retn
 21731                                  	
 21732 00002A38 E807F8                  	call	get_ext_error_number
 21733                                  				;AN022; get the extended error
 21734 00002A3B 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21735                                  				;AN022; see if path not found
 21736 00002A3E 740A                    	je	short BadChDir	;AN022; yes - issue old message
 21737                                  ;SR;
 21738                                  ; We want to issue "Invalid Directory" message even if the path is valid
 21739                                  ;but is not a directory. The extended error returns "Access denied" which
 21740                                  ;is kind of confusing. Issue the old message if access denied error is 
 21741                                  ;returned
 21742                                  
 21743 00002A40 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21744 00002A43 7405                    	je	short BadChDir
 21745                                  	
 21746 00002A45 E89E00                  	call	set_ext_error_subst ;AN022;
 21747 00002A48 EB20                    	jmp	short ChDirErr	;AN022;
 21748                                  
 21749                                  BadChDir:
 21750 00002A4A BA[0B93]                	mov	dx,badcd_ptr
 21751                                  ;ChDirErr:
 21752                                  ;	call	std_eprintf
 21753                                  ;mkdir_retn:
 21754                                  	;retn
 21755                                  	; 24/02/2023
 21756 00002A4D EB1B                    	jmp	short ChDirErr	;AN022;
 21757                                  
 21758                                  	; 24/02/2023
 21759                                  	; MSDOS 3.3
 21760                                  ;REALCD:
 21761                                  	;call	SETPATH
 21762                                  	;test	byte [DESTINFO],2
 21763                                  	;jnz	short BADCHDIR
 21764                                  	;mov	ah,CHDir ; 3Bh
 21765                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21766                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 21767                                  	;jnc	short CHDIR_RETN
 21768                                  ;BADCHDIR:
 21769                                  	;mov	dx,BADCDPTR
 21770                                  ;CHDIR_ERR:
 21771                                  	;call	STD_EPRINTF
 21772                                  ;MKDIR_RETN:
 21773                                  	;retn
 21774                                  
 21775                                  ; =============== S U B	R O U T	I N E =======================================
 21776                                  
 21777                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21778                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 21779                                  
 21780                                  	; 11/06/2023 - Retro DOS v4.2
 21781                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B8Ch
 21782                                  _$MKDIR:
 21783                                  	; MSDOS 6.0
 21784 00002A4F E86300                  	call	SETRMMK
 21785 00002A52 7216                    	jc	short MkDirErr
 21786                                  
 21787 00002A54 B439                    	mov	ah,39h
 21788                                  	;mov	ah,MKDIR
 21789 00002A56 CD21                    	int	21h
 21790 00002A58 7313                    	jnc	short mkdir_retn
 21791                                  
 21792 00002A5A E8E5F7                  	call	get_ext_error_number	
 21793                                  				;AN022; get the extended error
 21794 00002A5D 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21795                                  				;AN022; see if path not found
 21796 00002A60 742A                    	je	short MD_other_err
 21797                                  				;AN022; yes - issue old message
 21798 00002A62 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21799                                  				;AN022; access denied?
 21800 00002A65 7407                    	je	short badmderr	;AN022; yes - see if file exists
 21801                                  	
 21802 00002A67 E87C00                  	call	set_ext_error_subst
 21803                                  				;AN022;
 21804                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 21805                                  	; 24/02/2023
 21806                                  ChDirErr:
 21807                                  MkDirErr:
 21808                                  RmDirErr:
 21809 00002A6A E89A2A                  	call	std_eprintf
 21810                                  mkdir_retn:
 21811                                  rmdir_retn:
 21812 00002A6D C3                      	retn
 21813                                  	
 21814                                  badmderr:
 21815 00002A6E BA[219B]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 21816 00002A71 B41A                    	mov	ah,1Ah
 21817                                  	;mov	ah,Set_DMA	;AN006;
 21818 00002A73 CD21                    	int	21h		;AN006;
 21819                                  	
 21820 00002A75 B44E                    	mov	ah,4Eh
 21821                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 21822                                  	;mov	cx,10h
 21823 00002A77 B91000                  	mov	cx,ATTR_DIRECTORY
 21824                                  				;AN006;   search for directory
 21825 00002A7A CD21                    	int	21h		;AN006;
 21826 00002A7C 720E                    	jc	short MD_other_err
 21827                                  				;AN006; doesn't exist - must be something else
 21828                                  	;;mov	dl,SRCXNAME.find_buf_attr
 21829                                  				;AN006; we found a file/dir
 21830                                  	;mov	dl,[SRCXNAME+21] 
 21831 00002A7E 8A16[369B]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 21832 00002A82 F6C210                  	test	dl,ATTR_DIRECTORY
 21833                                  				;AN006; was it a directory?
 21834 00002A85 7405                    	jz	short MD_other_err
 21835                                  				;AN006; no - must have been a file
 21836 00002A87 BA[FE93]                	mov	dx,MD_EXISTS_PTR
 21837                                  				;AN006; set up already exists error
 21838 00002A8A EBDE                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 21839                                  MD_other_err:			;AN006;
 21840 00002A8C BA[0E93]                	mov	dx,badmkd_ptr
 21841                                  ;MkDirErr:
 21842                                  	;call	std_eprintf
 21843                                  	;retn
 21844                                  	; 24/02/2023
 21845 00002A8F EBD9                    	jmp	short MkDirErr
 21846                                  
 21847                                  	; 24/02/2023
 21848                                  	; MSDOS 3.3
 21849                                  	;call	SETRMMK
 21850                                  	;jb	short MKDIRERR
 21851                                  	;mov	ah,MKDIR ; 39h
 21852                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 21853                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 21854                                  	;jnc	short MKDIR_RETN
 21855                                  	;mov	dx,BADMKDPTR
 21856                                  	;call	GET_EXT_ERR_NUMBER
 21857                                  ;MKDIRERR:
 21858                                  	;call	STD_EPRINTF
 21859                                  	;retn
 21860                                  
 21861                                  ; =============== S U B	R O U T	I N E =======================================
 21862                                  
 21863                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21864                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 21865                                  	; 11/06/2023 - Retro DOS v4.2
 21866                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2C00h
 21867                                  _$RMDIR:
 21868 00002A91 E82100                  	call	SETRMMK
 21869 00002A94 72D4                    	jb	short RmDirErr
 21870 00002A96 7518                    	jnz	short badrderr
 21871                                  
 21872 00002A98 B43A                    	mov	ah,3Ah
 21873                                  	;mov	ah,RMDIR ; 3Ah
 21874 00002A9A CD21                    	int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 21875                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 21876 00002A9C 73CF                    	jnc	short rmdir_retn ; 24/02/2023
 21877                                  
 21878                                  	; 24/02/2023
 21879                                  	; MSDOS 6.0
 21880 00002A9E E8A1F7                  	call	get_ext_error_number
 21881                                  				;AN022; get the extended error
 21882 00002AA1 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21883                                  				;AN022; see if path not found
 21884 00002AA4 740A                    	je	short badrderr	;AN022; yes - issue old message
 21885 00002AA6 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21886                                  				;AN022; access denied?
 21887 00002AA9 7405                    	je	short badrderr	;AN022; yes - issue old message
 21888                                  
 21889 00002AAB E83800                  	call	set_ext_error_subst
 21890                                  				;AN022;
 21891 00002AAE EBBA                    	jmp	short RmDirErr	;AC022; yes - go print it
 21892                                  
 21893                                  	; MSDOS 6.0
 21894                                  badrderr:
 21895                                  	; 24/02/2023
 21896 00002AB0 BA[1193]                	mov	dx,badrmd_ptr
 21897 00002AB3 EBB5                    	jmp	short RmDirErr
 21898                                  ;RmDirErr:
 21899                                  	;call	std_eprintf
 21900                                  ;;rmdir_retn
 21901                                  	;retn
 21902                                  
 21903                                  	; 24/02/2023
 21904                                  	; MSDOS 3.3
 21905                                  	;mov	dx,BADRMDPTR
 21906                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 21907                                  ;RMDIRERR:
 21908                                  	;call	STD_EPRINTF
 21909                                  ;RMDIR_RETN:
 21910                                  	;retn
 21911                                  
 21912                                  ; =============== S U B	R O U T	I N E =======================================
 21913                                  
 21914                                  ; 	<Common MkDir/RmDir set up code>
 21915                                  ;****************************************************************
 21916                                  ;*
 21917                                  ;* ROUTINE:	SETRMMK
 21918                                  ;*
 21919                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 21920                                  ;*		commands. Parses the command line for a required
 21921                                  ;*		filespec.
 21922                                  ;*
 21923                                  ;* INPUT:	command line at offset 81H
 21924                                  ;*
 21925                                  ;* OUTPUT:	carry clear
 21926                                  ;*		    DS:DX points to ASCIIZ argument
 21927                                  ;*		carry set
 21928                                  ;*		    DS:DX has error message pointer
 21929                                  ;*
 21930                                  ;****************************************************************
 21931                                  
 21932                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21933                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 21934                                  	; 11/06/2023 - Retro DOS v4.2
 21935                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2BCEh
 21936                                  SETRMMK:
 21937                                  	; MSDOS 6.0
 21938 00002AB5 BE8100                  	mov	si,81h
 21939 00002AB8 BF[1998]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 21940 00002ABB 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 21941 00002ABD 31D2                    	xor	dx,dx		;AN000;
 21942                                  	;invoke	Parse_With_Msg	;AC000; call parser
 21943 00002ABF E847FC                  	call	Parse_With_Msg
 21944                                  	;cmp	ax,0
 21945                                  	;cmp	ax,RESULT_NO_ERROR
 21946 00002AC2 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 21947 00002AC4 7519                    	jnz	short noargerr	;AC000; yes - exit
 21948                                  
 21949 00002AC6 BF[219B]                	mov	di,SRCXNAME
 21950                                  				;AN000; get address of srcxname
 21951 00002AC9 57                      	push	di		;AN000; save address
 21952 00002ACA 56                      	push	si		;AN000; save position in line
 21953 00002ACB C536[E5A9]              	lds	si,[PARSE1_ADDR]
 21954                                  				;AN000; get address of path
 21955                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 21956 00002ACF AC                      	lodsb			;get a char from buffer
 21957 00002AD0 AA                      	stosb			;AN000; store in srcxname
 21958                                  	;cmp	al,0
 21959                                  	;cmp	al,END_OF_LINE_OUT
 21960 00002AD1 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 21961 00002AD3 75FA                    	jnz	short mrdir_move_filename
 21962                                  				;AC000; no - keep moving
 21963 00002AD5 5E                      	pop	si		;AN000; get line position back
 21964                                  
 21965                                  ; we have scanned an argument.	See if any args beyond.
 21966                                  
 21967 00002AD6 BF[1998]                	mov	di,PARSE_MRDIR
 21968 00002AD9 E817FC                  	call	parse_check_eol ;AC000; are we at end of line?
 21969 00002ADC 5A                      	pop	dx		;AC000; get address of SRCXNAME
 21970                                  	;retz			;yes - return no error
 21971 00002ADD 7406                    	jz	short setrmmk_retn
 21972                                  noargerr:
 21973 00002ADF BA[D091]                	mov	dx,extend_buf_ptr
 21974                                  				;AC000; get extended message pointer
 21975 00002AE2 31C0                    	xor	ax,ax
 21976 00002AE4 F9                      	stc
 21977                                  setrmmk_retn:
 21978 00002AE5 C3                      	retn
 21979                                  
 21980                                  	; 24/02/2023
 21981                                  	; MSDOS 3.3
 21982                                  ;SETRMMK:
 21983                                  	;mov	si,81h
 21984                                  	;call	SCANOFF
 21985                                  	;cmp	al,0Dh
 21986                                  	;je	short NOARGERR
 21987                                  	;mov	dx,si
 21988                                  ;SETRMMK1:
 21989                                  	;lodsb
 21990                                  	;call	DELIM
 21991                                  	;jz	short SETRMMK3
 21992                                  	;cmp	al,0Dh
 21993                                  	;jne	short SETRMMK1
 21994                                  	;mov	byte [si-1],0
 21995                                  ;SETRMMK2:
 21996                                  	;retn
 21997                                  ;SETRMMK3:
 21998                                  	;mov	byte [si-1],0
 21999                                  	;push	si
 22000                                  	;call	SCANOFF
 22001                                  	;pop	si
 22002                                  	;cmp	al,0Dh
 22003                                  	;je	short SETRMMK2
 22004                                  ;NOARGERR:
 22005                                  	;mov	dx,BADARGSPTR
 22006                                  	;xor	ax,ax
 22007                                  	;stc
 22008                                  ;SETRMMK_RETN:
 22009                                  	;retn
 22010                                  
 22011                                  ; =============== S U B	R O U T	I N E =======================================
 22012                                  
 22013                                  ; MSDOS 6.0
 22014                                  
 22015                                  ;****************************************************************
 22016                                  ;*
 22017                                  ;* ROUTINE:	Set_ext_error_subst
 22018                                  ;*
 22019                                  ;* FUNCTION:	Sets up substitution for extended error
 22020                                  ;*
 22021                                  ;* INPUT:	AX - extended error number
 22022                                  ;*		DX - offset of string
 22023                                  ;*
 22024                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 22025                                  ;*
 22026                                  ;****************************************************************
 22027                                  
 22028                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22029                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 22030                                  set_ext_error_subst:
 22031                                  	;mov	byte [msg_disp_class],1
 22032 00002AE6 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 22033                                  					;AN022; set up extended error msg class
 22034 00002AEB 8916[91A0]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 22035                                  	;mov	byte [extend_buf_sub],1
 22036 00002AEF C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 22037                                  	;AN022; put number of subst in control block
 22038 00002AF4 BA[D091]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 22039 00002AF7 A3[D091]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 22040                                  savudir_err_retn: ; 24/02/2023
 22041 00002AFA C3                      	retn				;AN022; return
 22042                                  
 22043                                  ; =============== S U B	R O U T	I N E =======================================
 22044                                  
 22045                                  ; <SavUDir - preserve the users current directory on a particular drive>
 22046                                  
 22047                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 22048                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 22049                                  ;   buffer
 22050                                  ;
 22051                                  ;   Inputs:	DL has 1-based drive number
 22052                                  ;		ES:DI has destination buffer (SavUDir1 only)
 22053                                  ;   Outputs:	Carry Clear
 22054                                  ;		    DS = TranGroup
 22055                                  ;		Carry Set
 22056                                  ;		    AX has error code
 22057                                  ;   Registers Modified: AX, SI
 22058                                  
 22059                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22060                                  SAVUDIR:
 22061 00002AFB BF[D59C]                	mov	di,USERDIR1
 22062                                  ; --------------
 22063                                  SAVUDIR1:
 22064 00002AFE 88D0                    	mov	al,dl
 22065 00002B00 0440                    	add	al,'@' ; 40h
 22066 00002B02 3C40                    	cmp	al,'@' ; 40h
 22067 00002B04 7506                    	jne	short GOTUDRV
 22068 00002B06 0206[059E]              	add	al,[CURDRV]
 22069 00002B0A FEC0                    	inc	al		; A = 1
 22070                                  GOTUDRV:
 22071 00002B0C AA                      	stosb
 22072 00002B0D 8A26[F89D]              	mov	ah,[DIRCHAR]
 22073 00002B11 B03A                    	mov	al,':' ; 3Ah
 22074 00002B13 AB                      	stosw
 22075 00002B14 06                      	push	es
 22076 00002B15 1F                      	pop	ds
 22077 00002B16 89FE                    	mov	si,di
 22078 00002B18 B447                    	mov	ah,47h ; 24/02/2023
 22079                                  	;mov	ah,CURRENT_DIR	; 47h
 22080 00002B1A CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 22081                                  			; DL = drive (0=default,1=A,etc.)
 22082                                  			; DS:SI	points to 64-byte buffer area
 22083 00002B1C 72DC                    	jc	short savudir_err_retn ; 24/02/2023
 22084 00002B1E 0E                      	push	cs
 22085 00002B1F 1F                      	pop	ds
 22086 00002B20 C3                      	retn
 22087                                  
 22088                                  ; =============== S U B	R O U T	I N E =======================================
 22089                                  
 22090                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22091                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 22092                                  CRLF2:
 22093 00002B21 52                      	push	dx
 22094 00002B22 BA[B293]                	mov	dx,acrlf_ptr
 22095 00002B25 1E                      	push	ds
 22096 00002B26 0E                      	push	cs
 22097 00002B27 1F                      	pop	ds
 22098 00002B28 E8E429                  	call	std_printf
 22099 00002B2B 1F                      	pop	ds
 22100 00002B2C 5A                      	pop	dx
 22101 00002B2D C3                      	retn
 22102                                  
 22103                                  ; =============== S U B	R O U T	I N E =======================================
 22104                                  
 22105                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 22106                                  ; may NOT be TRANGROUP
 22107                                  
 22108                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22109                                  scanoff:
 22110 00002B2E AC                      	lodsb
 22111 00002B2F E80400                  	call	DELIM
 22112 00002B32 74FA                    	jz	short scanoff
 22113 00002B34 4E                      	dec	si		; Point to first non-delimiter
 22114                                  scanoff_retn:
 22115 00002B35 C3                      	retn
 22116                                  
 22117                                  ; =============== S U B	R O U T	I N E =======================================
 22118                                  
 22119                                  ; Input:    AL is character to classify
 22120                                  ; Output:   Z set if delimiter
 22121                                  ;	    NZ set otherwise
 22122                                  ; Registers modified: none
 22123                                  
 22124                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22125                                  DELIM:
 22126 00002B36 3C20                    	cmp	al,' '	 ;20h
 22127 00002B38 74FB                    	je	short scanoff_retn
 22128 00002B3A 3C3D                    	cmp	al,'='  ; 3Dh
 22129 00002B3C 74F7                    	je	short scanoff_retn
 22130 00002B3E 3C2C                    	cmp	al,','	; 2Ch
 22131 00002B40 74F3                    	je	short scanoff_retn
 22132 00002B42 3C3B                    	cmp	al,';'	 ;3Bh
 22133 00002B44 74EF                    	je	short scanoff_retn
 22134 00002B46 3C09                    	cmp	al,9		; Check for TAB character
 22135 00002B48 74EB                    	je	short scanoff_retn
 22136 00002B4A 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 22137 00002B4C C3                      	retn
 22138                                  
 22139                                  
 22140                                  ; =============== S U B	R O U T	I N E =======================================
 22141                                  
 22142                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22143                                  FCB_TO_ASCZ:			
 22144                                  	; Convert DS:SI to ASCIZ ES:DI
 22145 00002B4D B90800                  	mov	cx,8
 22146                                  MAINNAME:
 22147 00002B50 AC                      	lodsb
 22148 00002B51 3C20                    	cmp	al,' ' ; 20h
 22149 00002B53 7401                    	jz	short SKIPSPC
 22150 00002B55 AA                      	stosb
 22151                                  SKIPSPC:
 22152 00002B56 E2F8                    	loop	MAINNAME
 22153 00002B58 AC                      	lodsb
 22154 00002B59 3C20                    	cmp	al,' '
 22155 00002B5B 740F                    	je	short GOTNAME
 22156 00002B5D 88C4                    	mov	ah,al
 22157                                  	; 24/02/2023
 22158 00002B5F B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 22159                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 22160                                  	;stosb
 22161                                  	;xchg	al,ah
 22162                                  	;stosb
 22163                                  	; 24/02/2023
 22164 00002B61 AB                      	stosw
 22165 00002B62 B102                    	mov	cl,2
 22166                                  EXTNAME:
 22167 00002B64 AC                      	lodsb
 22168 00002B65 3C20                    	cmp	al,' '
 22169 00002B67 7403                    	je	short GOTNAME
 22170 00002B69 AA                      	stosb
 22171 00002B6A E2F8                    	loop	EXTNAME
 22172                                  GOTNAME:
 22173 00002B6C 30C0                    	xor	al,al
 22174 00002B6E AA                      	stosb
 22175                                  STRCOMP_RETN:
 22176 00002B6F C3                      	retn
 22177                                  
 22178                                  ; =============== S U B	R O U T	I N E =======================================
 22179                                  
 22180                                  ; Compare ASCIZ DS:SI with ES:DI.
 22181                                  ; SI,DI destroyed.
 22182                                  
 22183                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22184                                  STRCOMP:	
 22185 00002B70 A6                      	cmpsb
 22186 00002B71 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 22187 00002B73 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?	
 22188                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 22189                                  	;jmp	short STRCOMP	; Equal so far, keep going
 22190                                  	; 24/02/2023
 22191 00002B77 75F7                    	jnz	short STRCOMP
 22192 00002B79 C3                      	retn
 22193                                  
 22194                                  ; =============== S U B	R O U T	I N E =======================================
 22195                                  
 22196                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22197                                  CRPRINT:
 22198 00002B7A 50                      	push	ax
 22199                                  	;mov	al,13	; 0Dh
 22200 00002B7B B00D                    	mov	al,0Dh
 22201 00002B7D 51                      	push	cx
 22202 00002B7E 57                      	push	di
 22203 00002B7F 89D7                    	mov	di,dx
 22204 00002B81 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 22205 00002B84 06                      	push	es
 22206 00002B85 1E                      	push	ds
 22207 00002B86 07                      	pop	es
 22208 00002B87 F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 22209 00002B89 C645FF00                	mov	byte [di-1],0	; nul terminate the string
 22210 00002B8D 07                      	pop	es
 22211 00002B8E 8916[91A0]              	mov	[string_ptr_2],dx
 22212                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 22213 00002B92 BA[9793]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 22214 00002B95 E87729                  	call	std_printf
 22215                                  	;mov	byte [di-1],13
 22216 00002B98 C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 22217 00002B9C 7204                    	jb	short error_output
 22218 00002B9E 5F                      	pop	di
 22219 00002B9F 59                      	pop	cx
 22220 00002BA0 58                      	pop	ax
 22221 00002BA1 C3                      	retn
 22222                                  
 22223                                  ; ---------------------------------------------------------------------------
 22224                                  
 22225                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22226                                  error_output:
 22227 00002BA2 0E                      	push	cs
 22228 00002BA3 1F                      	pop	ds
 22229 00002BA4 8E06[F39D]              	mov	es,[RESSEG]
 22230 00002BA8 BA[E491]                	mov	dx,NOSPACE_PTR
 22231 00002BAB 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 22232 00002BB1 7406                    	jz	short go_to_error
 22233 00002BB3 E80209                  	call	PipeOff
 22234 00002BB6 BA[3193]                	mov	dx,PIPEEMES_PTR
 22235                                  go_to_error:
 22236 00002BB9 E9E602                  	jmp	cerror
 22237                                  
 22238                                  ; =============== S U B	R O U T	I N E =======================================
 22239                                  
 22240                                  ;---- Mod for path invocation ----
 22241                                  
 22242                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22243                                  pathchrcmp:
 22244                                  	; 18/03/2023	
 22245                                  	;push	ax
 22246                                  	;mov	ah,'/' ; 2Fh
 22247                                  	;cmp	[SWITCHAR],ah
 22248 00002BBC 803E[F79D]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 22249 00002BC1 7404                    	je	short noslasht
 22250 00002BC3 3C2F                    	cmp	al,'/'
 22251 00002BC5 7402                    	je	short pccont
 22252                                  noslasht:
 22253 00002BC7 3C5C                    	cmp	al,'\' ; 5Ch
 22254                                  pccont:	
 22255                                  	;pop	ax
 22256 00002BC9 C3                      	retn
 22257                                  
 22258                                  ; =============== S U B	R O U T	I N E =======================================
 22259                                  
 22260                                  ; PATHCRUNCH -
 22261                                  ;
 22262                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 22263                                  ;       PathPos = ptr to string with pathname in it
 22264                                  ;       PathCnt = length of string
 22265                                  ;
 22266                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 22267                                  ;       PathCnt = length left in string
 22268                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 22269                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 22270                                  ;       If path crunched successfully,
 22271                                  ;         CY = clear
 22272                                  ;         Current directory is changed to directory in pathname
 22273                                  ;         UserDir1 contains previous directory for use by RestUDir
 22274                                  ;         RestDir = nonzero to flag later restoration of user's dir
 22275                                  ;         DestTail = ptr to beginning of filename
 22276                                  ;         If filename found in pathname,
 22277                                  ;           ZR = clear
 22278                                  ;           FCB filename fields contain filename
 22279                                  ;         If filename not found (pure directory path),
 22280                                  ;           ZR = set
 22281                                  ;           FCB filename fields are wildcarded with ?'s
 22282                                  ;       If pathcrunch failed (no ChDir's worked),
 22283                                  ;         CY = set
 22284                                  ;         Msg_Numb = extended error code
 22285                                  ;
 22286                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 22287                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 22288                                  ;       with the filename wildcarded.
 22289                                  
 22290                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 22291                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 22292                                  
 22293                                  	; 11/06/2023 - Retro DOS v4.2
 22294                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2D11h
 22295                                  PathCrunch:
 22296                                  	; MSDOS 6.0
 22297 00002BCA C706[25A2]0000          	mov     word [Msg_Numb],0
 22298                                  				;AN022; Set up message flag
 22299                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22300                                  	;mov	dl,[5Ch]
 22301 00002BD0 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 22302 00002BD4 E824FF                  	call	SAVUDIR		; save current directory in UserDir1
 22303                                  	; MSDOS 6.0
 22304 00002BD7 7233                     	jc	short pcrunch_cderrj
 22305                                  				;AN022; if error on current dir - report
 22306 00002BD9 E86004                  	call	SETPATH		; scan past switches, whitespace
 22307                                  
 22308                                  ;       DX = ptr to pathname, NULL-terminated
 22309                                  ;       PathPos = ptr to byte after NULL at end of pathname
 22310                                  
 22311                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22312 00002BDC F606[AEA0]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 22313 00002BE1 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 22314                                  
 22315                                  	;mov	ah,CHDir ; 3Bh
 22316 00002BE3 B43B                    	mov	ah,3Bh
 22317 00002BE5 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22318                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22319                                  	; MSDOS 6.0
 22320 00002BE7 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 22321                                  	
 22322 00002BE9 E856F6                  	call	get_ext_error_number    ;AN022; get the extended error
 22323 00002BEC 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 22324 00002BEF 741E                    	je	short trypeel		;AC022;    keep trying
 22325 00002BF1 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 22326 00002BF4 7419                    	je	short trypeel		;AC022;    keep trying
 22327 00002BF6 A3[25A2]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 22328 00002BF9 E99C00                  	jmp	peelfail                ;AN022; exit with other error
 22329                                  
 22330                                  	; MSDOS 3.3
 22331                                  	;jc	short trypeel
 22332                                  chdir_worked:
 22333                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22334 00002BFC E83206                  	call	SetRest1	; set 'Restore Directory' flag true
 22335 00002BFF B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 22336 00002C01 BF5D00                  	mov	di,5Dh  ; FCB+1
 22337 00002C04 B90B00                  	mov	cx,11
 22338 00002C07 F3AA                    	rep	stosb
 22339 00002C09 30C0                    	xor	al,al		; return carry clear, zero set
 22340 00002C0B C3                      	retn
 22341                                  
 22342                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 22343 00002C0C E98100                  	jmp	pcrunch_cderr	;AN022;
 22344                                  
 22345                                  trypeel:
 22346 00002C0F 8B36[80A0]              	mov	si,[PathPos]
 22347 00002C13 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 22348 00002C14 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 22349                                  	; 25/02/2023
 22350                                  	; MSDOS 5.0 (& 6.0)
 22351 00002C17 803E[40A2]00            	cmp	byte [KPARSE],0
 22352 00002C1C 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 22353                                  	
 22354 00002C1E E89BFF                  	call	pathchrcmp
 22355 00002C21 7475                    	jz	short peelfail	; Trailing '/'
 22356                                  delstrt:
 22357 00002C23 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 22358 00002C25 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 22359 00002C27 52                      	push	dx		; save ptr to pathname
 22360                                  delloop:
 22361 00002C28 39CE                    	cmp	si,cx
 22362                                  	;jz	short BADRET
 22363                                  	; 25/02/2023
 22364 00002C2A 7413                    	je	short gotdele	; no char's left, we have what we have
 22365 00002C2C AC                      	lodsb			; AL = next char of pathname
 22366 00002C2D E8DFFC                  	call	testkanj
 22367 00002C30 7403                    	jz	short notkanj8	; not Kanji, move along
 22368 00002C32 46                      	inc	si
 22369 00002C33 EBF3                    	jmp	short delloop	
 22370                                  
 22371                                  	; 25/02/2023
 22372                                  	; MSDOS 3.3
 22373                                  	;mov	al,[si]
 22374                                  	;call	PATHCHRCMP
 22375                                  	;jz	short TRYCD
 22376                                  	;dec	si
 22377                                  	;jmp	short delloop
 22378                                  
 22379                                  notkanj8:
 22380 00002C35 E884FF                  	call	pathchrcmp
 22381 00002C38 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 22382 00002C3A 89F2                    	mov	dx,si
 22383 00002C3C 4A                      	dec	dx		; DX = ptr to last delimiter found	
 22384 00002C3D EBE9                    	jmp	short delloop	; go look for more
 22385                                  
 22386                                  	; 25/02/2023
 22387                                  	; MSDOS 5.0 (& 6.0)
 22388                                  gotdele:
 22389 00002C3F 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 22390 00002C41 5A                      	pop	dx		; DX = ptr to pathname
 22391 00002C42 39D6                    	cmp	si,dx
 22392 00002C44 7454                    	je	short badret	; didn't find path delim
 22393 00002C46 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 22394 00002C48 89D6                    	mov	si,dx		; SI = ptr to pathname
 22395                                  delloop2:			; Set value of KPARSE
 22396 00002C4A 39CE                    	cmp	si,cx
 22397 00002C4C 7412                    	je	short trycd	; roll up till SI meets CX
 22398 00002C4E C606[40A2]00            	mov	byte [KPARSE],0
 22399 00002C53 AC                      	lodsb
 22400 00002C54 E8B8FC                  	call	testkanj
 22401 00002C57 74F1                    	jz	short delloop2
 22402 00002C59 46                      	inc	si
 22403 00002C5A FE06[40A2]              	inc	byte [KPARSE]
 22404 00002C5E EBEA                    	jmp	short delloop2
 22405                                  
 22406                                  trycd:
 22407 00002C60 50                      	push	ax
 22408                                  	; 25/02/2023
 22409 00002C61 B02E                    	mov	al,'.'
 22410                                  	;mov	al,[DOT_CHR]	; AL = '.'
 22411                                  	; MSDOS 6.0
 22412 00002C63 384401                  	cmp	[si+1],al	; check for '.' after path delim
 22413                                  				;M019; allow continuation if '. ' or 
 22414                                  				;M019; '..' is not found.
 22415 00002C66 7509                    	jne	short trycd1	;M019; '.' not found
 22416 00002C68 384402                  	cmp	[si+2],al	;M019; check for '..'
 22417 00002C6B 7404                    	je	short trycd1	;M019; found '..'
 22418 00002C6D 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 22419                                  trycd1:	
 22420 00002C71 58                      	pop     ax
 22421 00002C72 7424                    	jz	short peelfail	; if . or .., pure cd should have worked
 22422                                  
 22423                                  	; 25/02/2023
 22424                                  	; MSDOS 3.3
 22425                                  	;cmp	[si+1],	al	; check for '.' after path delim
 22426                                  	;pop	ax
 22427                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 22428                                  
 22429                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22430 00002C74 8A44FF                  	mov	al,[si-1]
 22431 00002C77 3C3A                    	cmp	al,':' 		; Special case d:\file
 22432 00002C79 741F                    	je	short badret
 22433                                  	; 25/02/2023
 22434                                  	; MSDOS 6.0
 22435 00002C7B 803E[40A2]00            	cmp	byte [KPARSE],0
 22436 00002C80 7505                    	jnz	short notdoublesl
 22437 00002C82 E837FF                  	call	pathchrcmp
 22438                                  	;jnz	short notdoublesl
 22439                                  				; Last char is 2nd KANJI byte, might be '\'
 22440                                  	; 25/02/2023
 22441 00002C85 7411                    	jz	short peelfail 
 22442                                  ;peelfail:
 22443                                  	;stc
 22444                                  	;retn
 22445                                  
 22446                                  notdoublesl:
 22447 00002C87 C60400                  	mov	byte [si],0
 22448                                  	;mov	ah,CHDir ; 3Bh
 22449 00002C8A B43B                    	mov	ah,3Bh
 22450 00002C8C CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22451                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22452 00002C8E 7320                    	jnc	short cdsucc
 22453                                  
 22454                                  	; 25/02/2023
 22455                                  	; MSDOS 6.0
 22456                                  pcrunch_cderr:
 22457 00002C90 E8AFF5                  	call	get_ext_error_number
 22458                                  				;AN022; get the extended error
 22459 00002C93 A3[25A2]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 22460 00002C96 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 22461                                  peelfail: ; 25/02/2023
 22462 00002C98 F9                      	stc			;AN022; set up carry flag
 22463                                  pcrunch_retn:
 22464 00002C99 C3                      	retn
 22465                                  
 22466                                  badret:
 22467                                  	; MSDOS 3.3 & MSDOS 6.0
 22468 00002C9A 8A04                    	mov	al,[si]
 22469 00002C9C E81DFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 22470 00002C9F F9                      	stc
 22471 00002CA0 75F7                    	jnz	short pcrunch_retn
 22472 00002CA2 30DB                    	xor	bl,bl
 22473 00002CA4 865C01                  	xchg	bl,[si+1]
 22474                                  	;mov	ah,CHDir ; 3Bh
 22475 00002CA7 B43B                    	mov	ah,3Bh
 22476 00002CA9 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22477                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22478                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 22479                                  	; 25/02/2023
 22480 00002CAB 72E3                    	jc	short pcrunch_cderr
 22481                                  				;AN022; go to error exit 
 22482 00002CAD 885C01                  	mov	[si+1],bl
 22483                                  cdsucc:
 22484 00002CB0 E87E05                  	call	SetRest1
 22485 00002CB3 46                      	inc	si		; Reset zero
 22486 00002CB4 8936[ACA0]              	mov	[DestTail],si
 22487                                  	; 25/02/2023
 22488                                  	; MSDOS 6.0
 22489 00002CB8 9C                      	pushf			;AN015; save flags
 22490 00002CB9 803E[88A0]FF            	cmp	byte [DirFlag],-1
 22491                                  				;AN015; don't do parse if in DIR
 22492 00002CBE 7408                    	je	short pcrunch_end
 22493                                  				;AN015;
 22494                                  	; MSDOS 3.3 & MSDOS 6.0
 22495 00002CC0 BF5C00                  	mov	di,FCB  ; 5Ch
 22496                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 22497 00002CC3 B80229                  	mov	ax,2902h	
 22498 00002CC6 CD21                    	int	21h		; Parse with default drive
 22499                                  			; DOS -	PARSE FILENAME
 22500                                  			; DS:SI	-> string to parse
 22501                                  			; ES:DI	-> buffer to fill with unopened	FCB
 22502                                  			; AL = bit mask	to control parsing
 22503                                  	; MSDOS 3.3
 22504                                  	;retn
 22505                                  
 22506                                  pcrunch_end:
 22507 00002CC8 9D                      	popf			;AN015; get flags back
 22508 00002CC9 C3                      	retn
 22509                                  
 22510                                  ;============================================================================
 22511                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 22512                                  ;============================================================================
 22513                                  ; 05/10/2018 - Retro DOS v3.0
 22514                                  
 22515                                  ;TITLE	Part7 COMMAND Transient Routines
 22516                                  
 22517                                  ;	More misc routines
 22518                                  
 22519                                  ;---------------------------
 22520                                  ; We can get rid of this switch processing code if we can take
 22521                                  ; care of the remaining two calls to switch, later in the file.
 22522                                  ; However, I have not checked whether or not any other files use
 22523                                  ; switch -- after all, it IS public!
 22524                                  ;---------------------------
 22525                                  
 22526                                  ; 14/06/2023
 22527                                  SWCOUNT	EQU 8	; MSDOS 6.22		; Length of switch_list
 22528                                  ; 28/03/2023
 22529                                  ;SWCOUNT  EQU  6  ; MSDOS 6.0 (& MSDOS 5.0)
 22530                                  ;;SWCOUNT EQU  5  ; MSDOS 3.3	
 22531                                  
 22532                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 22533                                  
 22534                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 22535                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 22536                                  
 22537                                  ; ---------------------------------------------------------------------------
 22538                                  
 22539                                  	; 25/02/2023
 22540                                  RETSW:
 22541 00002CCA 93                      	xchg	ax,bx		; Put switches in AX
 22542 00002CCB C3                      	retn
 22543                                  
 22544                                  ; =============== S U B	R O U T	I N E =======================================
 22545                                  
 22546                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22547                                  	; 11/06/2023 - Retro DOS 4.2 COMMAND.COM
 22548                                  SWITCH:
 22549 00002CCC 31DB                    	xor	bx,bx		; Initialize - no switches set
 22550                                  SWLOOP:
 22551 00002CCE E85DFE                  	call	scanoff		; Skip any delimiters
 22552 00002CD1 3A06[F79D]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 22553 00002CD5 75F3                    	jnz	short RETSW	; No -- we're finished
 22554 00002CD7 81CB0080                	or	bx,8000h
 22555                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 22556 00002CDB 46                      	inc	si		; Skip over the switch character
 22557 00002CDC E84FFE                  	call	scanoff
 22558 00002CDF 3C0D                    	cmp	al,0Dh
 22559 00002CE1 74E7                    	je	short RETSW	; Oops
 22560 00002CE3 46                      	inc	si
 22561                                  
 22562                                  	; Convert lower case input to upper case
 22563                                  
 22564 00002CE4 E852FC                  	call	UPCONV
 22565                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 22566                                  
 22567 00002CE7 BF[6097]                	mov	di,switch_list	; "-Y?VBAPW" (for MSDOS 6.22) ; 11/06/2023
 22568                                  				; "?VBAPW" (for MSDOS 6.0)
 22569                                  				; ("VBAPW" (for MSDOS 3.3))
 22570                                  	; 11/06/2023
 22571                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2E33h
 22572 00002CEA B90800                  	mov	cx,8  ; MSDOS 6.22	   	
 22573                                  	;mov	cx,6  ; MSDOS 6.0 (& MSDOS 5.0)
 22574                                  	;;mov	cx,5  ; MSDOS 3.3
 22575                                  	;;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 22576                                  		
 22577                                  	;nop
 22578                                  		
 22579 00002CED F2AE                    	repne	scasb		; Look for matching switch
 22580 00002CEF 7507                    	jnz	short BADSW
 22581 00002CF1 B80100                  	mov	ax,1
 22582 00002CF4 D3E0                    	shl	ax,cl		; Set a bit for the switch
 22583 00002CF6 09C3                    	or	bx,ax
 22584                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 22585 00002CF8 EBD4                    	jmp	short SWLOOP
 22586                                  ;BADSW:
 22587                                  	;jmp	short SWLOOP
 22588                                  ;DRVBAD:
 22589                                  ;	mov	dx,baddrv_ptr
 22590                                  ;	jmp	cerror
 22591                                  EXTERNALJ:
 22592 00002CFA E90501                  	jmp	EXTERNAL
 22593                                  FNDCOM:				; search the internal command table
 22594 00002CFD 08C0                    	or	al,al		; Get real length of first arg
 22595 00002CFF 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 22596                                  				;  to be external.
 22597                                  ; barryf code starts here
 22598                                  
 22599 00002D01 E82703                  	call	test_append	; see if APPEND installed
 22600 00002D04 7429                    	jz	short CONTCOM	; not loaded
 22601                                  
 22602                                  APPEND_INTERNAL:
 22603 00002D06 8A0E[AB9F]              	mov	cl,[IDLEN]
 22604 00002D0A B500                    	mov	ch,0
 22605 00002D0C 890E[80A0]              	mov	[PathPos],cx
 22606                                  	
 22607                                  	; 25/02/2023	
 22608                                  	; MSDOS 6.0
 22609 00002D10 FE06[27A2]              	inc 	byte [append_exec]
 22610                                  				;AN041; set APPEND to ON
 22611 00002D14 E8B603                  	call	IOSET		; re-direct the o'l io
 22612                                  
 22613 00002D17 BE[AB9F]                	mov	si,IDLEN	; address command name, DS already set	
 22614 00002D1A BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 22615                                  		
 22616                                  	; MSDOS 6.0
 22617 00002D1D BF[F954]                	mov	di,append_parse
 22618                                  				;AN010; Get the entry point for PARSE for APPEND
 22619                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22620 00002D20 B801AE                  	mov	ax,0AE01h
 22621 00002D23 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 22622                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 22623                                  			; DX = FFFFh, DS:SI -> buffer
 22624                                  			; Return: buffer at DS:SI filled with a	length byte
 22625                                  			; followed by the uppercase internal command
 22626                                  			; to execute (if length not 0)
 22627                                  	; 25/02/2023
 22628                                  	; INT 2Fh
 22629                                  	; 	AX = AE01h
 22630                                  	; entry:
 22631                                  	; 	DX = magic value FFFFh
 22632                                  	; 	CH = 00h
 22633                                  	; 	CL = length of command name
 22634                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 22635                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 22636                                  	; return:
 22637                                  	;	DS:SI buffer updated
 22638                                  	;	if length byte is nonzero, the following bytes contain
 22639                                  	;	the uppercase internal command to execute and the command line
 22640                                  	; 	buffer contains the command's parameters
 22641                                  	;	(the first DS:[SI] bytes are ignored)
 22642                                  	;
 22643                                  	; Format of COMMAND.COM command line buffer:
 22644                                  	;	Offset  Size    Description
 22645                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 22646                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 22647                                  	;	N BYTEs command line text, terminated by 0Dh
 22648                                  	;
 22649                                  	; Format of command name buffer:
 22650                                  	;	Offset  Size    Description
 22651                                  	;	00h     BYTE    length of command name
 22652                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 22653                                  
 22654 00002D25 803E[AB9F]00            	cmp	byte [IDLEN],0 ; execute requested
 22655 00002D2A 7503                    	jne	short CONTCOM
 22656 00002D2C E9A300                  	jmp	CMD_DONE
 22657                                  
 22658                                  	;nop
 22659                                  CONTCOM:			; continue with internal scan
 22660 00002D2F BF[DF95]                	mov	di,COMTAB
 22661 00002D32 31C9                    	xor	cx,cx
 22662                                  FINDCOM:
 22663 00002D34 BE[AC9F]                	mov	si,ID		; pointer to command argument
 22664 00002D37 8A0D                    	mov	cl,[di]		; load length of internal command
 22665 00002D39 47                      	inc	di		; advance past length
 22666 00002D3A E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 22667 00002D3C 3A0E[AB9F]              	cmp	cl,[IDLEN]	; that of the command argument
 22668 00002D40 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 22669 00002D42 890E[80A0]              	mov	[PathPos],cx	; store length of command
 22670 00002D46 F3A6                    	repe	cmpsb
 22671                                  ABCD:					
 22672 00002D48 9F                      	lahf			; save the good ol' flags
 22673 00002D49 01CF                    	add	di,cx		; skip over remaining internal, if any
 22674 00002D4B 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 22675 00002D4D A2[039E]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 22676 00002D50 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 22677 00002D51 8B1D                    	mov	bx,[di]		; load internal command address
 22678 00002D53 47                      	inc	di		; skip over the puppy
 22679 00002D54 47                      	inc	di
 22680                                  		
 22681                                  	; MSDOS 6.0
 22682 00002D55 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 22683 00002D57 47                      	inc	di
 22684 00002D58 47                      	inc	di
 22685 00002D59 9E                      	sahf			; remember those flags?
 22686 00002D5A 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 22687                                  
 22688                                  ; All messages get redirected.
 22689                                  
 22690 00002D5C 803E[27A2]00            	cmp     byte [append_exec],0
 22691                                  				;AN041; APPEND just executed?
 22692 00002D61 7503                    	jnz 	short DONT_SET_IO
 22693                                  				;AN041; Yes - this junk is already set
 22694 00002D63 E86703                  	call	IOSET		; re-direct the ol' i/o
 22695                                  
 22696                                  DONT_SET_IO:			;AN041;
 22697                                  
 22698                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 22699                                  ; respond to /? only if it is the only command-line argument.
 22700                                  
 22701 00002D66 A1[089E]                	mov	ax,[COMSW]	; AX = switches after command
 22702 00002D69 0B06[0E9E]              	or	ax,[AllSwitch]	; AX = all switches
 22703                                  	;and	ax,SwitchQues	
 22704 00002D6D 83E020                  	and	ax,20h
 22705 00002D70 7426                    	jz	short DRIVE_CHECK
 22706                                  				; /? not in command line
 22707 00002D72 F606[039E]04            	test	byte [CHKDRV],4	
 22708                                  	;test	byte [CHKDRV],fLimitHelp
 22709 00002D77 7407                    	jz	short DO_HELP	; /? allowed in combination
 22710                                  
 22711                                  ; Make sure /? is the only argument on the command line.
 22712                                  
 22713 00002D79 833E[01A5]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 22714 00002D7E 7518                    	jne	short DRIVE_CHECK
 22715                                  				; /? not only arg - ignore
 22716                                  
 22717                                  ; Note: this is all the check we need, even against things like /??.
 22718                                  ; Our argv parser breaks /?? into two args, /? and ?.
 22719                                  
 22720                                  DO_HELP:
 22721                                  ; DX = ptr to word list of msg #s, terminated by zero word
 22722                                  
 22723 00002D80 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 22724                                      	;mov	ax,no_subst	; AL = no subst's code
 22725 00002D82 B80000                  	mov	ax,0
 22726 00002D85 50                      	push	ax		; build subst block on stack
 22727                                  
 22728                                  NEXT_HELP_MSG:
 22729 00002D86 AD                      	lodsw			; AX = help msg # or zero
 22730 00002D87 09C0                    	or	ax,ax
 22731 00002D89 7409                    	jz	short HELP_DONE
 22732 00002D8B 50                      	push	ax		; SS:SP = ptr to subst block
 22733                                  				; (msg # and no_subst byte)
 22734                                  ;; We assume DS = SS.
 22735                                  	
 22736 00002D8C 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 22737 00002D8E E87E27                  	call	std_printf	; display help message	
 22738 00002D91 58                      	pop	ax		; remove msg # from stack
 22739 00002D92 EBF2                    	jmp	short NEXT_HELP_MSG
 22740                                  
 22741                                  HELP_DONE:
 22742 00002D94 58                      	pop	ax		; clean up stack
 22743 00002D95 E96CD3                  	jmp	TCOMMAND	
 22744                                  
 22745                                  	; 25/02/2023
 22746                                  	; MSDOS 3.3
 22747                                  	;sahf			; remember those flags?
 22748                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 22749                                  	;call	IOSET		; re-direct the ol' i/o
 22750                                  
 22751                                  DRIVE_CHECK:
 22752 00002D98 F606[039E]01            	test	byte [CHKDRV],1
 22753                                  	;test	byte [CHKDRV],FCHECKDRIVE 
 22754                                  				; did we wanna check those drives?
 22755 00002D9D 7411                    	jz	short NOCHECK
 22756 00002D9F A0[069E]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 22757 00002DA2 0A06[079E]              	or	al,[PARM2]	; us whether those drives were OK
 22758 00002DA6 3CFF                    	cmp	al,-1
 22759 00002DA8 7506                    	jne	short NOCHECK
 22760                                  	;jmp	DRVBAD
 22761                                  	; 25/02/2023
 22762                                  DRVBAD:
 22763 00002DAA BA[2C92]                	mov	dx,baddrv_ptr
 22764 00002DAD E9F200                  	jmp	cerror
 22765                                  
 22766                                  ; The user may have omitted the space between the command and its arguments.
 22767                                  ; We need to copy the remainder of the user's command line into the buffer.
 22768                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 22769                                  ; into the command line at 80.
 22770                                  
 22771                                  NOCHECK:
 22772 00002DB0 E85B02                  	call	cmd_copy
 22773                                  SWITCHECK:
 22774                                  	;test	byte [CHKDRV],2
 22775 00002DB3 F606[039E]02            	test	byte [CHKDRV],fSwitchAllowed 
 22776                                  				; Does the command take switches
 22777 00002DB8 7516                    	jnz	short REALWORK	; Yes, process the command
 22778 00002DBA E82F00                  	call	noswit		; No, check to see if any switches
 22779 00002DBD 7511                    	jnz	short REALWORK	; None, process the command
 22780                                  
 22781                                  	; MSDOS 6.0
 22782                                  	;mov	byte [msg_disp_class],2
 22783 00002DBF C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 22784                                  				;AN000; set up parse error msg class
 22785 00002DC4 BA[D091]                	mov	dx,extend_buf_ptr	
 22786                                  				;AC000; get extended message pointer
 22787                                  	;mov	word [extend_buf_ptr],3
 22788 00002DC7 C706[D091]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 22789                                  				;AN000; get "Invalid switch" message number
 22790 00002DCD E9D200                  	jmp	cerror		; Print error and chill out...
 22791                                  
 22792                                  	; 25/02/2023
 22793                                  	; MSDOS 3.3
 22794                                  	;mov	dx,BADPARMPTR
 22795                                  	;jmp	CERROR
 22796                                  
 22797                                  REALWORK:
 22798 00002DD0 FFD3                    	call	bx		; do some real work, at last
 22799                                  
 22800                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 22801                                  ; otherwise, go get another command.
 22802                                  
 22803                                  CMD_DONE:
 22804 00002DD2 0E                      	push	cs		; g  restore data segment
 22805 00002DD3 1F                      	pop	ds		; g
 22806 00002DD4 1E                      	push	ds
 22807 00002DD5 8E1E[F39D]              	mov	ds,[RESSEG]	; g  save data segment
 22808                                  	;cmp	byte [Call_Flag],1
 22809                                  				; G  Is a call in progress?
 22810 00002DD9 803E[4E02]01            	cmp	byte [Call_Flag],call_in_progress
 22811 00002DDE C606[4E02]00            	mov	byte [Call_Flag],0
 22812                                  				; G  Either way, reset flag
 22813 00002DE3 1F                      	pop	ds		; g  get data segment back
 22814 00002DE4 7403                    	jz	short INCALL	; G
 22815 00002DE6 E91BD3                  	jmp	TCOMMAND	; chill out...
 22816                                  INCALL:
 22817                                  	;jmp	DOCOM1
 22818                                  	; 11/06/2023
 22819                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 22820 00002DE9 E907D5                  	jmp	DOCOM0
 22821                                  
 22822                                  ; =============== S U B	R O U T	I N E =======================================
 22823                                  
 22824                                  	; 25/02/2023
 22825                                  noswit:
 22826 00002DEC 57                      	push	di		; Save di
 22827 00002DED BF8100                  	mov	di,81h		; di = ptr to command args
 22828 00002DF0 BE8000                  	mov	si,80h		; Get address of length of command args
 22829 00002DF3 AC                      	lodsb			; Load length
 22830 00002DF4 88C1                    	mov	cl,al		; Move length to cl
 22831 00002DF6 30ED                    	xor	ch,ch		; Zero ch
 22832 00002DF8 2EA0[F79D]              	mov	al,[cs:SWITCHAR] ; al = switch character
 22833                                  	;cmp	al,0		; Turn off ZF
 22834                                  	; 25/02/2023
 22835 00002DFC 20C0                    	and	al,al
 22836 00002DFE F2AE                    	repne	scasb		; Scan for a switch character and return
 22837 00002E00 5F                      	pop	di		;  with ZF set if one was found
 22838 00002E01 C3                      	retn
 22839                                  
 22840                                  ; ---------------------------------------------------------------------------
 22841                                  
 22842                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22843                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 22844                                  
 22845                                  EXTERNAL:
 22846 00002E02 E82602                  	call	test_append	; check to see if append installed
 22847 00002E05 7403                    	jz	short NOT_BARRYF
 22848                                  				; no - truly external command
 22849 00002E07 E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 22850                                  
 22851                                  NOT_BARRYF:
 22852 00002E0A 2EC606[049E]00          	mov	byte [cs:FILTYP],0
 22853 00002E10 2E8A16[119E]            	mov	dl,[cs:SPECDRV]
 22854 00002E15 2E8816[AB9F]            	mov	[cs:IDLEN],dl
 22855 00002E1A 2EC606[A5A0]00          	mov	byte [cs:ROM_CALL],0
 22856 00002E20 52                      	push	dx
 22857 00002E21 BA[AB9F]                	mov	dx,IDLEN
 22858 00002E24 E8A6D6                  	call	ROM_SCAN
 22859 00002E27 5A                      	pop	dx
 22860                                  	;jnc	short POSTSAVE
 22861 00002E28 7305                    	jnc	short DO_SCAN
 22862 00002E2A 2EFE06[A5A0]            	inc	byte [cs:ROM_CALL]
 22863                                  	;jmp	short POSTSAVE
 22864                                  
 22865                                  	;nop
 22866                                  DO_SCAN:
 22867                                  POSTSAVE:
 22868 00002E2F BF[1B9D]                	mov	di,EXECPATH
 22869 00002E32 C60500                  	mov	byte [di],0	; Initialize to current directory
 22870                                  	
 22871 00002E35 2E803E[A5A0]00          	cmp	byte [cs:ROM_CALL],0
 22872                                  	;jz	short RESEARCH
 22873                                  	; 25/02/2023
 22874                                  	;jmp	short NEOEXECUTE
 22875 00002E3B 750F                    	jnz	short NEOEXECUTE	
 22876                                  
 22877                                  	;nop
 22878                                  RESEARCH:
 22879 00002E3D E87008                  	call	path_search	; find the mother (result in execpath)
 22880 00002E40 09C0                    	or	ax,ax		; did we find anything?
 22881                                  	;jz	short BADCOMJ45	; null means no (sob)
 22882                                  	; 25/02/2023
 22883 00002E42 7459                    	jz	short BADCOM
 22884 00002E44 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 22885                                  				; fuckin' sixteen-bit machine ought
 22886                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 22887                                  				; DISPLACEMENT!!
 22888                                  	;;jmp	short NEOEXECUTE
 22889                                  	;jmp	short EXECUTE	
 22890                                  	; 25/02/2023
 22891 00002E47 7D03                    	jnl	short EXECUTE ; jge
 22892                                  
 22893                                  	; 02H is .bat
 22894                                  
 22895                                  	;nop
 22896                                  BATCOMJ:
 22897 00002E49 E911DA                  	jmp	BATCOM
 22898                                  
 22899                                  	; 25/02/2023
 22900                                  ;BADCOMJ45:
 22901                                  	;jmp	short BADCOM
 22902                                  
 22903                                  	;nop
 22904                                  EXECUTE:
 22905                                  NEOEXECUTE:
 22906 00002E4C E87E02                  	call	IOSET
 22907                                  
 22908                                  ; MSDOS 6.0
 22909                                  ;M051
 22910                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 22911                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 22912                                  ;After a close, this would still leave one open active resulting in sharing
 22913                                  ;errors on subsequent opens of the redirected file.
 22914                                  
 22915                                  LH_EXECUTE:			;M051	
 22916 00002E4F 8E06[019E]              	mov	es,[TRAN_TPA]
 22917                                  	;mov	ah,DEALLOC ; 49h
 22918 00002E53 B449                    	mov	ah,49h
 22919 00002E55 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 22920                                  			; ES = segment address of area to be freed
 22921                                  				; Now running in "free" space
 22922 00002E57 8E06[F39D]              	mov	es,[RESSEG]
 22923 00002E5B 26FE06[3702]            	inc	byte [es:ExtCom] ; Indicate external command
 22924 00002E60 26C606[3F02]00          	mov	byte [es:RestDir],0 
 22925                                  				; Since USERDIR1 is in transient, insure
 22926                                  				; this flag value for re-entry to COMMAND
 22927                                  	; MSDOS 6.0
 22928 00002E66 BE[1B9D]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 22929 00002E69 BF[0004]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 22930                                  	;mov	cx,LENMSGORPATHBUF
 22931 00002E6C B95000                  	mov	cx,80
 22932 00002E6F FC                      	cld
 22933 00002E70 F3A4                    	rep	movsb		; copy program pathname to resident
 22934                                  
 22935                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22936 00002E72 BF5C00                  	mov	di,FCB ; 5Ch
 22937 00002E75 89FE                    	mov	si,di
 22938                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 22939 00002E77 B152                    	mov	cl,82 ; 25/02/2023
 22940 00002E79 F3A5                    	rep	movsw		; Transfer parameters to resident header
 22941                                  	
 22942                                  	; 25/02/2023
 22943                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 22944                                  	; MSDOS 6.0 (& 5.0)
 22945                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 22946 00002E7B BA[0004]                	mov	dx,SafePathBuffer
 22947 00002E7E 06                      	push	es
 22948 00002E7F 1F                      	pop	ds
 22949                                  
 22950                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 22951 00002E80 BB[DC03]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 22952                                  	;mov	ax,EXEC*256 ; 4B00h
 22953 00002E83 B8004B                  	mov	ax,4B00h
 22954                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 22955 00002E86 2EF606[A5A0]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 22956 00002E8C 7403                    	jz	short OK_EXEC
 22957 00002E8E E9B5D6                  	jmp	ROM_EXEC
 22958                                  
 22959                                  OK_EXEC:
 22960                                  
 22961                                  ; we are now running in free space. Anything we do from here on may get
 22962                                  ; trashed. Move the stack (also in free space) to allocated space because
 22963                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 22964                                  
 22965 00002E91 8CC1                    	mov	cx,es
 22966 00002E93 8ED1                    	mov	ss,cx
 22967 00002E95 BC[D404]                	mov	sp,RStack
 22968                                  	; MSDOS 3.3
 22969                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 22970                                  	; 25/02/2023
 22971                                  	; MSDOS 6.0
 22972 00002E98 2EFF2E[F99D]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 22973                                  
 22974                                  ; ---------------------------------------------------------------------------
 22975                                  
 22976                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22977                                  BADCOM:
 22978 00002E9D 0E                      	push	cs
 22979 00002E9E 1F                      	pop	ds
 22980 00002E9F BA[F391]                	mov	dx,BADNAM_PTR
 22981                                  cerror:		
 22982 00002EA2 E86226                  	call	std_eprintf
 22983 00002EA5 E95CD2                  	jmp	TCOMMAND
 22984                                  
 22985                                  ; =============== S U B	R O U T	I N E =======================================
 22986                                  
 22987                                  ; Prescan converts the input buffer into a canonicalized form.
 22988                                  ; All redirections and pipes are removed.
 22989                                  
 22990                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22991                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 22992                                  
 22993                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 22994                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2FFBh
 22995                                  
 22996                                  PRESCAN:
 22997 00002EA8 31C9                    	xor	cx,cx
 22998 00002EAA 8E06[F39D]              	mov	es,[RESSEG]
 22999 00002EAE BE[549C]                	mov	si,COMBUF+2
 23000 00002EB1 89F7                    	mov	di,si
 23001                                  COUNTQUOTES:
 23002 00002EB3 AC                      	lodsb			; get a byte
 23003 00002EB4 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 23004 00002EB6 7504                    	jne	short COUNTEND	; no, try for end of road
 23005 00002EB8 FEC5                    	inc	ch		; bump count
 23006 00002EBA EBF7                    	jmp	short COUNTQUOTES
 23007                                  				; go get next char
 23008                                  COUNTEND:
 23009 00002EBC 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 23010 00002EBE 75F3                    	jne	short COUNTQUOTES
 23011                                  				; no, go back for next char
 23012                                  	; 26/02/2023
 23013                                  	; MSDOS 5.0 (& 6.0)
 23014 00002EC0 51                      	push	cx		; save count
 23015 00002EC1 89FE                    	mov	si,di		; restore pointer to begining
 23016                                  KanjiScan:
 23017 00002EC3 AC                      	lodsb			; get a byte
 23018 00002EC4 E848FA                  	call	testkanj	; is it a leadin byte
 23019 00002EC7 740F                    	jz	short KanjiQuote
 23020                                  				; no, check for quotes
 23021 00002EC9 88C4                    	mov	ah,al		; save leadin
 23022 00002ECB AC                      	lodsb			; get trailing byte
 23023 00002ECC 3D2020                  	cmp	ax,2020h
 23024                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 23025 00002ECF 75F2                    	jne	short KanjiScan	; no, go get next
 23026 00002ED1 C744FE2020              	mov	word [si-2],2020h
 23027                                  				; replace with spaces
 23028 00002ED6 EBEB                    	jmp	short KanjiScan	; go get next char
 23029                                  	
 23030                                  KanjiQuote:
 23031 00002ED8 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 23032 00002EDA 750D                    	jne	short KanjiEnd	; no, check for end
 23033 00002EDC FECD                    	dec	ch		; drop count
 23034 00002EDE 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 23035                                  KanjiQuoteLoop:
 23036 00002EE0 AC                      	lodsb			; get next byte
 23037 00002EE1 3C22                    	cmp	al,22h	; '"'	; is it another quote
 23038 00002EE3 75FB                    	jne	short KanjiQuoteLoop
 23039                                  				; no, get another
 23040 00002EE5 FECD                    	dec	ch		; yes, drop count
 23041 00002EE7 EBDA                    	jmp	short KanjiScan	; go get next char
 23042                                  KanjiEnd:
 23043 00002EE9 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 23044 00002EEB 75D6                    	jne	short KanjiScan	; go back to beginning
 23045 00002EED 59                      	pop	cx		; get back original count
 23046                                  	; 26/04/2023
 23047 00002EEE 89FE                    	mov	si,di		; restore pointer to beginning
 23048                                  	
 23049                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23050                                  PRESCANLP:
 23051 00002EF0 AC                      	lodsb
 23052                                  	; 26/02/2023
 23053 00002EF1 E81BFA                  	call	testkanj
 23054 00002EF4 740C                    	jz	short NOTKANJ6
 23055                                  	; MSDOS 6.0
 23056 00002EF6 8805                    	mov	[di],al
 23057 00002EF8 47                      	inc	di		; fake STOSB into DS
 23058 00002EF9 AC                      	lodsb			; grab second byte
 23059 00002EFA 8805                    	mov	[di],al		; fake stosb into DS
 23060 00002EFC FEC1                    	inc	cl
 23061 00002EFE FEC1                    	inc	cl
 23062 00002F00 EBEE                    	jmp	short PRESCANLP
 23063                                  
 23064                                  NOTKANJ6:
 23065                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23066 00002F02 3C22                    	cmp	al,'"'	; 22h	; " character
 23067 00002F04 7510                    	jne	short TRYGREATER
 23068 00002F06 FECD                    	dec	ch
 23069 00002F08 740C                    	jz	short TRYGREATER
 23070                                  QLOOP:
 23071 00002F0A 8805                    	mov	[di],al
 23072 00002F0C 47                      	inc	di
 23073 00002F0D FEC1                    	inc	cl
 23074 00002F0F AC                      	lodsb
 23075 00002F10 3C22                    	cmp	al,'"'		; " character
 23076 00002F12 75F6                    	jne	short QLOOP
 23077 00002F14 FECD                    	dec	ch
 23078                                  TRYGREATER:
 23079 00002F16 3C3E                    	cmp	al,'>' ; 3Eh
 23080                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 23081                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 23082 00002F18 7557                    	jne	short NOOUT
 23083                                  
 23084                                  ; We have found a ">" char. We need to see if there is another ">"
 23085                                  ; following it.
 23086                                  
 23087 00002F1A 3804                    	cmp	[si],al
 23088 00002F1C 7506                    	jne	short NOAPPND
 23089 00002F1E AC                      	lodsb
 23090 00002F1F 26FE06[6302]            	inc	byte [es:Re_Out_App] ; Flag >>
 23091                                  NOAPPND:
 23092                                  ; Now we attempt to find the file name. First, scan off all whitespace
 23093                                  
 23094 00002F24 E807FC                  	call	scanoff
 23095                                  
 23096                                  	; 26/02/2023
 23097                                  	; MSDOS 6.0
 23098 00002F27 3C3C                    	cmp	al,'<' ; 3Ch
 23099                                  	;cmp	al,labracket	;AN040; was there no filename?
 23100 00002F29 7404                    	je	short REOUT_ERRSET
 23101                                  				;AN040; yes - set up error
 23102                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23103 00002F2B 3C0D                    	cmp	al,0Dh
 23104 00002F2D 750D                    	jnz	short GOTREOFIL
 23105                                  
 23106                                  ; There was no file present. Set us up at end-of-line.
 23107                                  
 23108                                  REOUT_ERRSET:			;AN040; set up for an error
 23109 00002F2F C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 23110 00002F32 26C706[6402]0900        	mov	word [es:Re_OutStr],9
 23111                                  				; Cause an error later
 23112 00002F39 E9A900                  	jmp	PRESCANEND
 23113                                  
 23114                                  GOTREOFIL:
 23115 00002F3C 57                      	push	di
 23116                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 23117 00002F3D BF[6402]                	mov	di,Re_OutStr
 23118 00002F40 89FB                    	mov	bx,di
 23119 00002F42 06                      	push	es
 23120                                  
 23121                                  	; 26/02/2023
 23122                                  	; MSDOS 6.0
 23123                                  SETREOUTSTR:			; Get the output redirection name
 23124                                  				; MSKK06 07/14/89
 23125 00002F43 51                      	push	cx		; save cx
 23126 00002F44 B94D00                  	mov	cx,64+13	; CX = max string length
 23127                                  SETREOUTSTR_LOOP:
 23128 00002F47 AC                      	lodsb
 23129 00002F48 3C0D                    	cmp	al,0Dh
 23130 00002F4A 741A                    	je	short GOTRESTR_J
 23131 00002F4C E8E7FB                  	call	DELIM
 23132 00002F4F 7415                    	jz	short GOTRESTR_J
 23133 00002F51 3A06[F79D]              	cmp	al,[SWITCHAR]
 23134 00002F55 740F                    	je	short GOTRESTR_J
 23135 00002F57 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 23136 00002F59 7413                    	je	short PIPEERRSYNJ5_J
 23137                                  				;AN033; Yes - get out quick - or system crashes
 23138 00002F5B 3C3C                    	cmp	al,'<' ; 3Ch
 23139                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 23140 00002F5D 7404                    	je	short ABRACKET_TERM
 23141                                  				;AN002; yes - end of string
 23142 00002F5F 3C3E                    	cmp	al,'>' ; 3Eh
 23143                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 23144 00002F61 7506                    	jne	short NO_ABRACKET
 23145                                  				;AN002; no - not end of string
 23146                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 23147 00002F63 4E                      	dec	si		;AN002; back up over symbol
 23148 00002F64 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 23149                                  GOTRESTR_J:
 23150 00002F66 59                      	pop	cx		; MSKK06 07/14/89
 23151 00002F67 EB58                    	jmp	short GOTRESTR	;AN002; go process it
 23152                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 23153 00002F69 AA                      	stosb			; store it into resgroup
 23154 00002F6A E2DB                    	loop	SETREOUTSTR_LOOP
 23155                                  				; MSKK06 07/14/89
 23156 00002F6C EBF8                    	jmp	short GOTRESTR_J
 23157                                  PIPEERRSYNJ5_J:
 23158 00002F6E 59                      	pop	cx		; recover CX
 23159 00002F6F EB4B                    	jmp	short PIPEERRSYNJ5
 23160                                  
 23161                                  	; 26/02/2023
 23162                                  ;	; MSDOS 3.3
 23163                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 23164                                  ;	lodsb
 23165                                  ;	cmp	al,0Dh
 23166                                  ;	jz	short GOTRESTR
 23167                                  ;	call	DELIM
 23168                                  ;	jz	short GOTRESTR
 23169                                  ;	cmp	al,[SWITCHAR]
 23170                                  ;	je	short GOTRESTR
 23171                                  ;	cmp	al,'"'
 23172                                  ;	jne	short NO_ABRACKET
 23173                                  ;	dec	ch
 23174                                  ;NO_ABRACKET:
 23175                                  ;	stosb
 23176                                  ;	jmp	short SETREOUTSTR_LOOP
 23177                                  
 23178                                  NOOUT:
 23179                                  	; 26/02/2023
 23180                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23181 00002F71 3C3C                    	cmp	al, '<' ; 3Ch
 23182                                  	;cmp	al,labracket	; MSDOS 6.0
 23183                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 23184 00002F73 7523                    	jne	short CHKPIPE
 23185 00002F75 89F3                    	mov	bx,si		; Save loc of "<"
 23186 00002F77 E8B4FB                  	call	scanoff
 23187                                  	; MSDOS 6.0
 23188 00002F7A 3C3E                    	cmp	al,'>' ; 3Eh
 23189                                  	;cmp	al,rabracket	;AN040; was there no filename?
 23190 00002F7C 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 23191                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23192 00002F7E 3C0D                    	cmp	al,0Dh
 23193 00002F80 750B                    	jne	short GOTREIFIL
 23194                                  REIN_ERRSET:			;AN040; set up for error
 23195 00002F82 C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 23196 00002F85 C706[9E9D]0900          	mov	word [RE_INSTR],9 
 23197                                  				; Cause an error later
 23198 00002F8B EB58                    	jmp	short PRESCANEND
 23199                                  GOTREIFIL:
 23200 00002F8D 57                      	push	di
 23201 00002F8E BF[9E9D]                	mov	di,RE_INSTR
 23202 00002F91 89FB                    	mov	bx,di
 23203 00002F93 06                      	push	es
 23204 00002F94 0E                      	push	cs
 23205 00002F95 07                      	pop	es		; store in TRANGROUP
 23206                                  	; 26/04/2023
 23207                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 23208 00002F96 EBAB                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 23209                                  				; Get the input redirection name
 23210                                  CHKPIPE:
 23211 00002F98 88C4                    	mov	ah,al
 23212                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23213 00002F9A 80FC7C                  	cmp	ah,'|' ; 7Ch
 23214                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 23215                                  	;je	short ISPIPE3
 23216                                  	;; MSDOS 6.0
 23217                                  	;cmp	ah,'|' ; 7Ch
 23218                                  	;;cmp	al,vbar ; 7Ch
 23219                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 23220 00002F9D 7539                    	jne	short CONTPRESCAN
 23221                                  ISPIPE3:
 23222                                  ; Only push the echo flag if we are entering the pipe for the first time.
 23223                                  
 23224 00002F9F 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23225 00002FA5 7505                    	jne	short NOECHOPUSH
 23226 00002FA7 26D026[3B02]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 23227                                  NOECHOPUSH:
 23228 00002FAC 26FE06[B502]            	inc	byte [es:PipeFlag]
 23229 00002FB1 E87AFB                  	call	scanoff
 23230 00002FB4 3C0D                    	cmp	al,0Dh
 23231 00002FB6 7404                    	je	short PIPEERRSYNJ5
 23232                                  	; 26/02/2023
 23233 00002FB8 3C7C                    	cmp	al,'|' ; 7Ch
 23234                                  	;cmp	al,ALTPIPECHR ; 7Ch
 23235                                  	;je	short PIPEERRSYNJ5
 23236                                  	;; MSDOS 6.0
 23237                                  	;cmp	al,'|' ; 7Ch
 23238                                  	;;cmp	al,vbar ; 7Ch
 23239                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 23240 00002FBA 751C                    	jne	short CONTPRESCAN
 23241                                  
 23242                                  PIPEERRSYNJ5:
 23243 00002FBC 06                      	push	es
 23244 00002FBD 1F                      	pop	ds
 23245 00002FBE E99C02                  	jmp	PIPEERRSYN
 23246                                  
 23247                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 23248                                  ; than just a : in the redir string.
 23249                                  
 23250                                  GOTRESTR:
 23251 00002FC1 86E0                    	xchg	ah,al
 23252 00002FC3 B03A                    	mov	al,':' ; 3Ah
 23253 00002FC5 29FB                    	sub	bx,di		; compute negative of number of chars
 23254 00002FC7 83FBFF                  	cmp	bx,-1		; is there just a :?
 23255 00002FCA 7407                    	je	short NOTRAILCOL ; yep, don't change
 23256 00002FCC 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 23257 00002FD0 7501                    	jne	short NOTRAILCOL
 23258 00002FD2 4F                      	dec	di		; Back up over trailing ':'
 23259                                  NOTRAILCOL:
 23260 00002FD3 30C0                    	xor	al,al
 23261 00002FD5 AA                      	stosb			; NUL terminate the string
 23262 00002FD6 07                      	pop	es
 23263 00002FD7 5F                      	pop	di		; Remember the start
 23264                                  CONTPRESCAN:
 23265 00002FD8 8825                    	mov	[di],ah		; "delete" the redirection string
 23266 00002FDA 47                      	inc	di
 23267 00002FDB 80FC0D                  	cmp	ah,0Dh
 23268 00002FDE 7405                    	je	short PRESCANEND
 23269 00002FE0 FEC1                    	inc	cl
 23270 00002FE2 E90BFF                  	jmp	PRESCANLP
 23271                                  PRESCANEND:
 23272 00002FE5 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23273 00002FEB 7414                    	jz	short ISNOPIPE
 23274                                  
 23275                                  	; 11/06/2023
 23276                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:314Ah
 23277                                  	;mov	di,48Ah		; PipeStr ; RESGROUP:EndInit+160
 23278                                  	;mov	[es:488h],di	; [es:PipePtr],di
 23279                                  				; (RESGROUP:EndInit+158)
 23280                                  	; 26/02/2023
 23281                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 23282                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 23283                                  	;;			; (EndInit+160]
 23284                                  	;mov	di,offset RESGROUP:PIPESTR
 23285 00002FED BF[5703]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 23286                                  
 23287                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 23288                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 23289 00002FF0 26893E[5503]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 23290                                  	
 23291 00002FF5 BE[549C]                	mov	si,COMBUF+2
 23292 00002FF8 E833FB                  	call	scanoff
 23293                                  PIPESETLP:			; Transfer the pipe into the resident
 23294 00002FFB AC                      	lodsb			; pipe buffer
 23295 00002FFC AA                      	stosb
 23296 00002FFD 3C0D                    	cmp	al,0Dh
 23297 00002FFF 75FA                    	jnz	short PIPESETLP
 23298                                  ISNOPIPE:
 23299 00003001 880E[539C]              	mov	[COMBUF+1],cl
 23300 00003005 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23301 0000300B 0E                      	push	cs
 23302 0000300C 07                      	pop	es
 23303 0000300D C3                      	retn
 23304                                  
 23305                                  ; =============== S U B	R O U T	I N E =======================================
 23306                                  
 23307                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23308                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 23309                                  cmd_copy:
 23310 0000300E BE[549C]                	mov	si,COMBUF+2
 23311 00003011 E81AFB                  	call	scanoff		; advance past separators...
 23312 00003014 0336[80A0]              	add	si,[PathPos]
 23313 00003018 BF8100                  	mov	di,81h
 23314 0000301B 31C9                    	xor	cx,cx
 23315                                  cmdcopy:
 23316 0000301D AC                      	lodsb
 23317 0000301E AA                      	stosb
 23318 0000301F 3C0D                    	cmp	al,0Dh
 23319 00003021 7403                    	je	short copy_done
 23320 00003023 41                      	inc	cx
 23321 00003024 EBF7                    	jmp	short cmdcopy
 23322                                  copy_done:
 23323 00003026 880E8000                	mov	[80h],cl
 23324 0000302A C3                      	retn
 23325                                  
 23326                                  ; =============== S U B	R O U T	I N E =======================================
 23327                                  
 23328                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23329                                  test_append:
 23330 0000302B BB[529C]                	mov	bx,COMBUF	; barry can address
 23331 0000302E BE[AB9F]                	mov	si,IDLEN	; address command name, DS already set 	
 23332 00003031 BAFFFF                  	mov	dx,-1
 23333 00003034 B800AE                  	mov	ax,0AE00h
 23334 00003037 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 23335                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 23336                                  			; DX = FFFFh,[BX -> command line
 23337                                  			; Return: AL = FFh if this command is a TSR extension 
 23338                                  			;		   to COMMAND.COM
 23339                                  			; AL = 00h if the command should be executed as	usual
 23340                                  	;cmp	al,0
 23341 00003039 08C0                    	or	al,al ; 25/02/2023
 23342 0000303B C3                      	retn
 23343                                  
 23344                                  	; 25/02/2023
 23345                                  	; INT 2Fh
 23346                                  	; 	AX = AE00h
 23347                                  	; entry:
 23348                                  	; 	DX = magic value FFFFh
 23349                                  	; 	CH = FFh
 23350                                  	; 	CL = length of command line tail
 23351                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 23352                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 23353                                  	; return:
 23354                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 23355                                  	;	AL = 00h if the command should be executed as usual
 23356                                  	;
 23357                                  	; Format of COMMAND.COM command line buffer:
 23358                                  	;	Offset  Size    Description
 23359                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 23360                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 23361                                  	;	N BYTEs command line text, terminated by 0Dh
 23362                                  	;
 23363                                  	; Format of command name buffer:
 23364                                  	;	Offset  Size    Description
 23365                                  	;	00h     BYTE    length of command name
 23366                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 23367                                  
 23368                                  ;============================================================================
 23369                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 23370                                  ;============================================================================
 23371                                  ; 05/10/2018 - Retro DOS v3.0
 23372                                  
 23373                                  ;	More misc routines
 23374                                  
 23375                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 23376                                  
 23377                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23378                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 23379                                  
 23380                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23381                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3199h
 23382                                  
 23383                                  ; =============== S U B	R O U T	I N E =======================================
 23384                                  
 23385                                  SETPATH:
 23386                                  
 23387                                  ; ENTRY PathPos = ptr to string
 23388                                  ;       PathCnt = length of string
 23389                                  ;
 23390                                  ; EXIT  PathPos = ptr to string after pathname
 23391                                  ;       PathCnt = length of rest of string
 23392                                  ;       DX = ptr to pathname in string, made ASCIIZ
 23393                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 23394                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 23395                                  ;
 23396                                  ;       A null character is dropped at the end of the pathname. If the
 23397                                  ;       character in that spot previously was CR, it is copied into the
 23398                                  ;       following byte. So there must be at least two two character 
 23399                                  ;       positions in the buffer following the pathname.
 23400                                  
 23401                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23402                                  	
 23403                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23404                                  	; MSDOS 6.0
 23405                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 23406                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 23407                                  
 23408                                  	; 26/02/2023
 23409                                  	; MSDOS 3.3
 23410                                  	;mov	si,80h
 23411                                  	;lodsb
 23412                                  	;xor	ah,ah
 23413                                  	;mov	[PATCNT],ax
 23414                                  	;mov	[PATHPOS],si
 23415                                  GETPATH:
 23416                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23417 0000303C C606[AEA0]00            	mov	byte [DestInfo],0
 23418 00003041 C606[AAA0]00            	mov	byte [DestIsDir],0
 23419 00003046 8B36[80A0]              	mov	si,[PathPos]	; SI = ptr to string
 23420 0000304A 8B0E[7EA0]              	mov	cx,[PathCnt]	; CX = string length
 23421 0000304E 89F2                    	mov	dx,si		; DX = ptr to string
 23422 00003050 E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 23423 00003052 51                      	push	cx		; save string length
 23424 00003053 56                      	push	si		; save ptr to string
 23425 00003054 E875FC                  	call	SWITCH
 23426                                  
 23427                                  ;       After Switch, SI has been scanned past any switches, and
 23428                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 23429                                  
 23430 00003057 A3[82A0]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 23431 0000305A 5B                      	pop	bx		; BX = ptr to original string
 23432 0000305B 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 23433 0000305D 59                      	pop	cx		; CX = string length
 23434 0000305E 01D9                    	add	cx,bx		; CX = string length from current SI
 23435 00003060 89F2                    	mov	dx,si		; DX = ptr to current string
 23436                                  SKIPPATH:
 23437                                  	; 26/02/2023
 23438                                  	; MSDOS 6.0
 23439 00003062 C606[40A2]00            	mov	byte [KPARSE],0
 23440                                  SKIPPATH2:
 23441 00003067 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 23442 00003069 49                      	dec	cx		; CX = length left after next char
 23443 0000306A AC                      	lodsb			; AL = next char of string
 23444                                  				; SI = ptr to char after this one
 23445                                  	; 26/02/2023
 23446 0000306B E8A1F8                  	call	testkanj
 23447 0000306E 7408                    	jz	short TESTPPSEP
 23448 00003070 49                      	dec	cx
 23449 00003071 46                      	inc	si
 23450 00003072 FE06[40A2]              	inc	byte [KPARSE]
 23451 00003076 EBEF                    	jmp	short SKIPPATH2
 23452                                  TESTPPSEP:
 23453 00003078 E841FB                  	call	pathchrcmp	; compare AL to path delimiter char
 23454 0000307B 7504                    	jnz	short TESTPMETA	; it's not a path delim
 23455 0000307D FE06[AAA0]              	inc	byte [DestIsDir]
 23456                                  				; DestIsDir = 1, signalling path char
 23457                                  TESTPMETA:
 23458 00003081 3C3F                    	cmp	al,'?'
 23459 00003083 7505                    	jne	short TESTPSTAR	; char is not '?'
 23460 00003085 800E[AEA0]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 23461                                  TESTPSTAR:
 23462 0000308A 3C2A                    	cmp	al,'*'
 23463                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 23464 0000308C 7505                    	jne	short TESTPDELIM ; char is not '*'
 23465 0000308E 800E[AEA0]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 23466                                  TESTPDELIM:
 23467 00003093 E8A0FA                  	call	DELIM		; compare AL to all delimiters
 23468 00003096 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 23469 00003098 3A06[F79D]              	cmp	al,[SWITCHAR]
 23470 0000309C 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 23471                                  PATHDONEDEC:
 23472 0000309E 4E                      	dec	si		; SI = ptr to char after pathname
 23473                                  PATHDONE:
 23474 0000309F 30C0                    	xor	al,al		; AL = NULL
 23475 000030A1 8604                    	xchg	al,[si]		; place NULL after pathname
 23476 000030A3 46                      	inc	si		; SI = ptr to byte after NULL
 23477 000030A4 3C0D                    	cmp	al,0Dh		; were we at end of line?
 23478 000030A6 7502                    	jne	short NOPSTORE	; not EOL, finish up
 23479 000030A8 8804                    	mov	[si],al		; save EOL after NULL
 23480                                  NOPSTORE:
 23481 000030AA 8936[80A0]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 23482 000030AE 890E[7EA0]              	mov	[PathCnt],cx	; PathCnt = length of string left
 23483                                  SETPATH_RETN:
 23484 000030B2 C3                      	retn
 23485                                  
 23486                                  ; ---------------------------------------------------------------------------
 23487                                  
 23488                                  PGETARG:
 23489 000030B3 BE8000                  	mov	si,80h
 23490 000030B6 AC                      	lodsb
 23491 000030B7 08C0                    	or	al,al
 23492 000030B9 74F7                    	jz	short SETPATH_RETN
 23493 000030BB E80300                  	call	PSCANOFF
 23494 000030BE 3C0D                    	cmp	al,0Dh
 23495 000030C0 C3                      	retn
 23496                                  
 23497                                  ; ---------------------------------------------------------------------------
 23498                                  
 23499                                  PSCANOFF:
 23500 000030C1 AC                      	lodsb
 23501 000030C2 E871FA                  	call	DELIM
 23502 000030C5 7504                    	jnz	short PSCANOFFD
 23503 000030C7 3C3B                    	cmp	al,';' ; 3Bh
 23504 000030C9 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 23505                                  PSCANOFFD:
 23506 000030CB 4E                      	dec	si		; Point to first non-delimiter
 23507 000030CC C3                      	retn
 23508                                  
 23509                                  ; =============== S U B	R O U T	I N E =======================================
 23510                                  
 23511                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23512                                  IOSET:
 23513                                  	; ALL REGISTERS PRESERVED
 23514 000030CD 1E                      	push	ds
 23515 000030CE 52                      	push	dx
 23516 000030CF 50                      	push	ax
 23517 000030D0 53                      	push	bx
 23518 000030D1 51                      	push	cx
 23519 000030D2 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 23520 000030D7 803E[B502]00            	cmp	byte [PipeFlag],0
 23521 000030DC 750D                    	jne	short NOREDIR
 23522 000030DE F606[4802]FF            	test	byte [IfFlag],0FFh
 23523 000030E3 7506                    	jnz	short NOREDIR
 23524 000030E5 E88C00                  	call	TESTDOREIN
 23525 000030E8 E80600                  	call	TESTDOREOUT
 23526                                  NOREDIR:
 23527 000030EB 59                      	pop	cx
 23528 000030EC 5B                      	pop	bx
 23529 000030ED 58                      	pop	ax
 23530 000030EE 5A                      	pop	dx
 23531 000030EF 1F                      	pop	ds
 23532                                  IOSET_RETN:	; 06/08/2024
 23533 000030F0 C3                      	retn
 23534                                  
 23535                                  ; =============== S U B	R O U T	I N E =======================================
 23536                                  
 23537                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23538                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 23539                                  	; 06/08/2024
 23540                                  TESTDOREOUT:
 23541 000030F1 803E[6402]00            	cmp	byte [Re_OutStr],0
 23542                                  	;je	short NOREOUT  ; MSDOS 3.3
 23543                                  	; 26/02/2023
 23544                                  	;jne	short REOUTEXISTS
 23545                                  	;jmp	NOREOUT
 23546                                  	; 06/08/2024
 23547 000030F6 74F8                    	jz	short IOSET_RETN
 23548                                  REOUTEXISTS:
 23549 000030F8 803E[6302]00            	cmp	byte [Re_Out_App],0
 23550 000030FD 745D                    	je	short REOUTCRT
 23551                                  
 23552 000030FF BA[6402]                	mov	dx,Re_OutStr
 23553                                  
 23554                                  	; 26/02/2023
 23555                                  	; MSDOS 6.0
 23556                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 23557 00003102 B8023D                  	mov	ax,3D02h
 23558                                  	; MSDOS 3.3
 23559                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 23560                                  
 23561                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23562 00003105 50                      	push	ax
 23563 00003106 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23564                                  			; DS:DX	-> ASCIZ filename
 23565                                  			; AL = access mode
 23566                                  			; 1 - write
 23567 00003108 5B                      	pop	bx
 23568 00003109 724B                    	jc	short OpenWriteError
 23569                                  
 23570                                  	; 26/02/2023
 23571                                  	; MSDOS 6.0
 23572 0000310B 89C3                    	mov	bx,ax
 23573                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 23574 0000310D B80044                  	mov	ax,4400h
 23575 00003110 CD21                    	int	21h			;AN035;
 23576                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 23577                                  			; BX = file or device handle
 23578 00003112 F6C280                  	test	dl,80h
 23579                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 23580 00003115 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 23581                                  	
 23582                                  	;mov	ax,(LSEEK SHL 8) OR 2
 23583 00003117 B80242                  	mov	ax,4202h
 23584 0000311A B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 23585 0000311D 89CA                    	mov	dx,cx			;AC011;
 23586 0000311F CD21                    	int	21h
 23587                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 23588                                  			; AL = method: offset from end of file
 23589 00003121 0E                      	push	cs			;AN011; Get transient seg to DS
 23590 00003122 1F                      	pop	ds			;AN011;
 23591                                  
 23592                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 23593 00003123 B8003F                  	mov	ax,3F00h
 23594 00003126 B90100                  	mov	cx,1			;AN011;  file into one_char_val
 23595 00003129 BA[A2A0]                	mov	dx,One_Char_Val		;AN011;
 23596 0000312C CD21                    	int	21h			;AN011;
 23597                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 23598                                  			; BX = file handle, CX = number of bytes to read
 23599                                  			; DS:DX -> buffer
 23600 0000312E 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 23601 00003130 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 23602 00003132 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 23603                                  
 23604 00003134 803E[A2A0]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 23605 00003139 8E1E[F39D]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 23606 0000313D 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 23607                                  
 23608                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 23609 0000313F B80142                  	mov	ax,4201h
 23610 00003142 B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 23611                                  setreout_p:	; 26/02/2023
 23612 00003145 89CA                    	mov	dx,cx			;AN011;
 23613 00003147 CD21                    	int	21h			;AN011;
 23614 00003149 EB20                    	jmp	short SET_REOUT
 23615                                  reout_0_length: 			;AN017; We have a 0 length file
 23616                                  	; ds = cs ; 26/02/2023
 23617                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 23618                                  					;AN017; Get resident segment back
 23619                                  	; 26/02/2023
 23620 0000314B 8E1E[F39D]              	mov	ds,[RESSEG]
 23621                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 23622 0000314F B80042                  	mov	ax,4200h
 23623 00003152 31C9                    	xor	cx,cx			;AN017; Offset is 0
 23624                                  	;mov	dx,cx			;AN017;
 23625                                  	;int	21h			;AN017;
 23626                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 23627                                  	; 26/02/2023
 23628 00003154 EBEF                    	jmp	short setreout_p
 23629                                  
 23630                                  	; 26/02/2023
 23631                                  	; MSDOS 3.3
 23632                                  	;xor	dx,dx
 23633                                  	;xor	cx,cx
 23634                                  	;mov	bx,ax
 23635                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 23636                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 23637                                  	;		; AL = method: offset from end of file
 23638                                  	;jmp	short SET_REOUT
 23639                                  
 23640                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23641                                  OpenWriteError:
 23642                                  	;cmp	ax,5
 23643 00003156 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 23644 00003159 F9                      	stc
 23645                                  	;;je	short REDIRERR ; MSDOS 3.3
 23646                                  	; 26/02/2023
 23647                                  	;jnz	short REOUTCRT
 23648                                  	;jmp	REDIRERR
 23649 0000315A 743B                    	je	short REDIRERR
 23650                                  
 23651                                  REOUTCRT:
 23652 0000315C BA[6402]                	mov	dx,Re_OutStr
 23653 0000315F 31C9                    	xor	cx,cx
 23654                                  	;mov	ah,CREAT ; 3Ch
 23655 00003161 B43C                    	mov	ah,3Ch
 23656 00003163 50                      	push	ax
 23657 00003164 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 23658                                  			; CX = attributes for file
 23659                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 23660 00003166 5B                      	pop	bx
 23661                                  	;jc	short REDIRERR ; MSDOS 3.3
 23662                                  	; 26/02/2023
 23663                                  	;jnc	short NOREDIRERR
 23664                                  	;jmp	REDIRERR
 23665 00003167 722E                    	jc	short REDIRERR
 23666                                  
 23667                                  NOREDIRERR:
 23668 00003169 89C3                    	mov	bx,ax
 23669                                  SET_REOUT:
 23670                                  
 23671                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 23672                                  ; spot. We invalidate the new JFN we got.
 23673                                  
 23674 0000316B B0FF                    	mov	al,0FFh
 23675                                  	;xchg	al,[bx+18h]
 23676 0000316D 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23677 00003170 A21900                  	mov	[PDB.JFN_TABLE+1],al
 23678                                  	; 06/08/2024
 23679                                  NOREOUT:
 23680                                  ;IOSET_RETN:	; 17/04/2023
 23681 00003173 C3                      	retn
 23682                                  
 23683                                  ; =============== S U B	R O U T	I N E =======================================
 23684                                  
 23685                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23686                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 23687                                  	; 06/08/2024
 23688                                  TESTDOREIN:
 23689 00003174 2E803E[9E9D]00          	cmp	byte [cs:RE_INSTR],0
 23690                                  	;jz	short IOSET_RETN
 23691                                  	; 06/08/2024
 23692 0000317A 74F7                    	jz	short NOREOUT
 23693 0000317C 1E                      	push	ds
 23694 0000317D 0E                      	push	cs
 23695 0000317E 1F                      	pop	ds
 23696 0000317F BA[9E9D]                	mov	dx,RE_INSTR
 23697                                  	;mov	ax,OPEN*256 ; 3D00h
 23698 00003182 B8003D                  	mov	ax,3D00h
 23699 00003185 89C3                    	mov	bx,ax
 23700 00003187 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23701                                  			; DS:DX	-> ASCIZ filename
 23702                                  			; AL = access mode
 23703                                  			; 0 - read
 23704 00003189 1F                      	pop	ds
 23705                                  
 23706 0000318A 720B                    	jc	short REDIRERR
 23707                                  
 23708 0000318C 89C3                    	mov	bx,ax
 23709 0000318E B0FF                    	mov	al,0FFh
 23710                                  
 23711                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 23712                                  ; spot. We invalidate the new JFN we got.
 23713                                  
 23714                                  	;xchg	al,[bx+18h]
 23715 00003190 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23716 00003193 A21800                  	mov	[PDB.JFN_TABLE],al
 23717 00003196 C3                      	retn
 23718                                  
 23719                                  ; ---------------------------------------------------------------------------
 23720                                  
 23721                                  ; We had some kind of error on the redirection. Figure out what the
 23722                                  ; appropriate message should be; BX has the system call that failed
 23723                                  
 23724                                  REDIRERR:
 23725 00003197 0E                      	push	cs
 23726 00003198 1F                      	pop	ds
 23727 00003199 E82E00                  	call	TriageError  ; MSDOS 6.0
 23728                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23729                                  
 23730                                  ; At this point, we have recognized the network-generated access denied error.
 23731                                  ; The correct message is in DX
 23732                                  
 23733 0000319C 83F841                  	cmp	ax,65
 23734 0000319F 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 23735 000031A1 80FF3D                  	cmp	bh,OPEN ; 3Dh
 23736 000031A4 7406                    	je	short OpenError
 23737 000031A6 BA[EA91]                	mov	dx,FULLDIR_PTR
 23738                                  _CERRORJ:
 23739 000031A9 E9F6FC                  	jmp	cerror
 23740                                  
 23741                                  OpenError:
 23742                                  ; The system call was an OPEN. Report either file not found or path not found.
 23743                                  
 23744                                  	; 26/02/2023
 23745                                  	; MSDOS 6.0
 23746                                  	;mov	byte [cs:msg_disp_class],1
 23747 000031AC 2EC606[CE91]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 23748                                  				;AN000; set up extended error msg class
 23749 000031B2 BA[D091]                	mov	dx,extend_buf_ptr
 23750                                  				;AC000; get extended message pointer
 23751 000031B5 2EA3[D091]              	mov	[cs:extend_buf_ptr],ax
 23752                                  				;AN000; get message number in control block
 23753 000031B9 E9E6FC                  	jmp	cerror
 23754                                  
 23755                                  	; 26/02/2023
 23756                                  	; MSDOS 3.3
 23757                                  	;mov	dx,FNOTFOUNDPTR
 23758                                  	;;cmp	ax,2
 23759                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 23760                                  	;je	short _CERRORJ
 23761                                  	;mov	dx,ACCDENPTR
 23762                                  	;;cmp	ax,5 ; Access denied error
 23763                                  	;cmp	ax,ERROR_ACCESS_DENIED
 23764                                  	;je	short _CERRORJ
 23765                                  	;	; ERROR_PATH_NOT_FOUND
 23766                                  	;mov	dx,PNOTFOUNDPTR
 23767                                  	;jmp	CERROR
 23768                                  
 23769                                  ; =============== S U B	R O U T	I N E =======================================
 23770                                  
 23771                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 23772                                  ; registers
 23773                                  
 23774                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 23775                                  dstrlen:
 23776 000031BC 50                      	push	ax
 23777 000031BD 31C9                    	xor	cx,cx
 23778 000031BF FC                      	cld
 23779                                  dloop:
 23780 000031C0 AC                      	lodsb
 23781 000031C1 41                      	inc	cx
 23782 000031C2 08C0                    	or	al,al
 23783 000031C4 75FA                    	jnz	short dloop
 23784 000031C6 29CE                    	sub	si,cx
 23785 000031C8 58                      	pop	ax
 23786                                  TRIAGEERR_RETN:
 23787 000031C9 C3                      	retn
 23788                                  
 23789                                  ; =============== S U B	R O U T	I N E =======================================
 23790                                  
 23791                                  ;Break	<Extended error support>
 23792                                  
 23793                                  TriageError:  ; MSDOS 6.0
 23794                                  
 23795                                  ; TriageError will examine the return from a carry-set system call and
 23796                                  ; return the correct error if applicable.
 23797                                  ;
 23798                                  ;   Inputs:	outputs from a carry-settable system call
 23799                                  ;		No system calls may be done in the interrim
 23800                                  ;   Outputs:	If carry was set on input
 23801                                  ;		   carry set on output
 23802                                  ;		   DX contains trangroup offset to printf message
 23803                                  ;		else
 23804                                  ;		   No registers changed
 23805                                  
 23806                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 23807                                  
 23808                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23809                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 23810                                  
 23811                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23812                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 333Ch
 23813                                  
 23814                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 23815 000031CA 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 23816 000031CC 9C                      	pushf
 23817 000031CD 53                      	push	bx
 23818 000031CE 51                      	push	cx
 23819 000031CF 56                      	push	si
 23820 000031D0 57                      	push	di
 23821 000031D1 55                      	push	bp
 23822 000031D2 06                      	push	es
 23823 000031D3 1E                      	push	ds
 23824 000031D4 50                      	push	ax
 23825 000031D5 52                      	push	dx
 23826 000031D6 B459                    	mov	ah,59h
 23827                                  	;mov	ah,GETEXTENDEDERROR
 23828 000031D8 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 23829                                  			; BX = version code (0000h for DOS 3.x)
 23830 000031DA 59                      	pop	cx
 23831 000031DB 5B                      	pop	bx		; restore original AX
 23832 000031DC BA[F691]                	mov	dx,ACCDEN_PTR
 23833 000031DF 83F841                  	cmp	ax,65		; network access denied?
 23834 000031E2 7404                    	je	short NoMove	; Yes, return it.
 23835 000031E4 89D8                    	mov	ax,bx
 23836 000031E6 89CA                    	mov	dx,cx
 23837                                  NoMove:
 23838 000031E8 1F                      	pop	ds
 23839 000031E9 07                      	pop	es
 23840 000031EA 5D                      	pop	bp
 23841 000031EB 5F                      	pop	di
 23842 000031EC 5E                      	pop	si
 23843 000031ED 59                      	pop	cx
 23844 000031EE 5B                      	pop	bx
 23845 000031EF 9D                      	popf
 23846 000031F0 C3                      	retn
 23847                                  
 23848                                  ; =============== S U B	R O U T	I N E =======================================
 23849                                  
 23850                                  	; Far call from resident portion/segment of COMMAND.COM
 23851                                  
 23852                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 23853                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 23854                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3363h
 23855                                  
 23856                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23857                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23858                                  Triage_Init:
 23859 000031F1 E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 23860                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23861 000031F4 CB                      	retf
 23862                                  
 23863                                  ; =============== S U B	R O U T	I N E =======================================
 23864                                  
 23865                                  ; MSDOS 6.0
 23866                                  
 23867                                  ; ****************************************************************
 23868                                  ; *
 23869                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 23870                                  ; *
 23871                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 23872                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 23873                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 23874                                  ; *
 23875                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 23876                                  ; *		 ES    points to TRANGROUP
 23877                                  ; *
 23878                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 23879                                  ; *		 PATHCNT set to length of string
 23880                                  ; *		 PATHPOS set to start of SRCBUF
 23881                                  ; *		 CX,AX	 changed
 23882                                  ; *
 23883                                  ; ****************************************************************
 23884                                  
 23885                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23886                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 23887                                  Move_To_SrcBuf:
 23888 000031F5 56                      	push	si			;AN000;  save si,di
 23889 000031F6 57                      	push	di			;AN000;
 23890 000031F7 51                      	push	cx			;AN000;
 23891 000031F8 BF[12A1]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 23892 000031FB 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 23893 000031FD 89C8                    	mov	ax,cx			;AN000; clear ax
 23894 000031FF 57                      	push	di			;AN000; save start of srcbuf
 23895 00003200 AC                      	lodsb				;AN000; get a character from DS:SI
 23896                                  mts_get_chars:				;AN000;
 23897                                  	;cmp	al,0			;AN000; was it a null char?
 23898 00003201 20C0                    	and 	al,al ; al = 0 ?
 23899 00003203 7405                    	jz	short mts_end_string	;AN000; yes - exit
 23900 00003205 AA                      	stosb				;AN000; no - store it in srcbuf
 23901 00003206 41                      	inc	cx			;AN000; increment length count
 23902 00003207 AC                      	lodsb				;AN000; get a character from DS:SI
 23903 00003208 EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 23904                                  mts_end_string: 			;AN000; we've reached the end of line
 23905                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 23906 0000320A B00D                    	mov	al,0Dh
 23907 0000320C AA                      	stosb				;AN000;
 23908 0000320D 5F                      	pop	di			;AN000; restore start of srcbuf
 23909 0000320E 0E                      	push	cs			;AN000; set DS to local segment
 23910 0000320F 1F                      	pop	ds			;AN000;
 23911 00003210 890E[7EA0]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 23912 00003214 893E[80A0]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 23913 00003218 59                      	pop	cx			;AN000; restore cx,di,si
 23914 00003219 5F                      	pop	di			;AN000;
 23915 0000321A 5E                      	pop	si			;AN000;
 23916 0000321B C3                      	retn				;AN000; exit
 23917                                  
 23918                                  ;============================================================================
 23919                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 23920                                  ;============================================================================
 23921                                  ; 03/10/2018 - Retro DOS v3.0
 23922                                  
 23923                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 23924                                  
 23925                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23926                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 23927                                  
 23928                                  ; =============== S U B	R O U T	I N E =======================================
 23929                                  
 23930                                  	; 26/02/2023
 23931                                  SINGLETEST:
 23932 0000321C 1E                      	push	ds
 23933 0000321D 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 23934 00003222 833E[4302]00            	cmp	word [SingleCom],0
 23935 00003227 7406                    	jz	short TESTDONE
 23936 00003229 813E[4302]FFEF          	cmp	word [SingleCom],0EFFFh
 23937                                  TESTDONE:
 23938 0000322F 1F                      	pop	ds
 23939 00003230 C3                      	retn
 23940                                  
 23941                                  ; =============== S U B	R O U T	I N E =======================================
 23942                                  
 23943                                  	; 26/02/2023
 23944                                  SetRest1:
 23945 00003231 B001                    	mov	al,1
 23946                                  
 23947                                  ; ---------------------------------------------------------------------------
 23948                                  
 23949                                  SETREST:
 23950 00003233 1E                      	push	ds
 23951 00003234 8E1E[F39D]              	mov	ds,[RESSEG]
 23952 00003238 A2[3F02]                	mov	[RestDir],al
 23953 0000323B 1F                      	pop	ds
 23954 0000323C C3                      	retn
 23955                                  
 23956                                  ; =============== S U B	R O U T	I N E =======================================
 23957                                  
 23958                                  ; Note that we need to handle the same thing that RestDir handles: the
 23959                                  ; requirement that we try only once to restore the user's environment after
 23960                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 23961                                  ; disappear, we just give up.
 23962                                  
 23963                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 23964                                  	;
 23965                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23966                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33AFh
 23967                                  PIPEDEL:
 23968 0000323D 1E                      	push	ds
 23969 0000323E 52                      	push	dx
 23970 0000323F 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 23971                                  	;mov	dx,3EAh	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33B1h
 23972                                  	;;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 23973                                  			; Pipe1 = offset RESGROUP:EndInit
 23974 00003244 BA[B702]                	mov	dx,Pipe1	; Clean up in case ^C
 23975                                  	;mov	ah,Unlink ; 41h
 23976 00003247 B441                    	mov	ah,41h
 23977 00003249 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 23978                                  			; DS:DX	-> ASCIZ pathname of file to delete
 23979                                  			;		(no wildcards allowed)
 23980                                  
 23981                                  	;mov	dx,439h	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33BDh
 23982                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 23983                                  			; Pipe2 = offset RESGROUP:EndInit+79
 23984 0000324B BA[0603]                	mov	dx,Pipe2
 23985                                  	;mov	ah,Unlink ; 41h
 23986 0000324E B441                    	mov	ah,41h
 23987 00003250 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 23988                                  			; DS:DX	-> ASCIZ pathname of file to delete
 23989                                  			;		(no wildcards allowed)
 23990 00003252 5A                      	pop	dx
 23991 00003253 E86202                  	call	PipeOff
 23992 00003256 C606[B602]00            	mov	byte [PipeFiles],0
 23993 0000325B 1F                      	pop	ds
 23994 0000325C C3                      	retn
 23995                                  
 23996                                  ; ---------------------------------------------------------------------------
 23997                                  
 23998                                  	; 26/02/2023
 23999                                  PIPEERRSYN:
 24000 0000325D BA[6892]                	mov	dx,SYNTMES_PTR
 24001 00003260 E8DAFF                  	call	PIPEDEL
 24002 00003263 0E                      	push	cs
 24003 00003264 1F                      	pop	ds
 24004 00003265 E93AFC                  	jmp	cerror
 24005                                  
 24006                                  ; ---------------------------------------------------------------------------
 24007                                  
 24008                                  	; 26/02/2023
 24009                                  PIPERR:
 24010 00003268 9C                      	pushf
 24011 00003269 E85EFF                  	call    TriageError
 24012                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 24013 0000326C 50                      	push	ax		; Save results from TriageError
 24014 0000326D 52                      	push	dx
 24015 0000326E BA[3193]                	mov	dx,PIPEEMES_PTR
 24016 00003271 E8C9FF                  	call	PIPEDEL
 24017 00003274 0E                      	push	cs
 24018 00003275 1F                      	pop	ds
 24019 00003276 E88E22                  	call	std_eprintf
 24020 00003279 5A                      	pop	dx		; Restore results from TriageError
 24021 0000327A 58                      	pop	ax
 24022 0000327B 9D                      	popf
 24023 0000327C 83F841                  	cmp	ax,65
 24024 0000327F 7503                    	jne	short TCOMMANDJ
 24025 00003281 E91EFC                  	jmp	cerror
 24026                                  
 24027                                  TCOMMANDJ:
 24028 00003284 E97DCE                  	jmp	TCOMMAND
 24029                                  
 24030                                  ; ---------------------------------------------------------------------------
 24031                                  
 24032                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24033                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24034                                  PIPEPROCSTRT:
 24035 00003287 8E1E[F39D]              	mov	ds,[RESSEG]
 24036 0000328B FE06[B602]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 24037                                  
 24038                                  	; MSDOS 6.0
 24039 0000328F 06                      	push	es
 24040 00003290 57                      	push	di
 24041 00003291 1E                      	push	ds
 24042 00003292 56                      	push	si
 24043                                  	
 24044 00003293 1E                      	push	ds
 24045 00003294 06                      	push	es
 24046 00003295 1F                      	pop	ds			;ds = TRANGROUP
 24047 00003296 BE[F698]                	mov	si,TempVarName		;ds:si = "TEMP="
 24048                                  
 24049                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 24050                                  ;so the routine is not really general
 24051                                  
 24052 00003299 E8C9F5                  	call	find_name_in_environment
 24053                                  					;es:di points at path
 24054 0000329C 1F                      	pop	ds			;ds = DATARES again
 24055 0000329D 721F                    	jc	short no_temp_path
 24056                                  	
 24057 0000329F 1E                      	push	ds
 24058 000032A0 06                      	push	es
 24059 000032A1 1F                      	pop	ds
 24060 000032A2 07                      	pop	es			;swap ds and es
 24061 000032A3 89FE                    	mov	si,di			;ds:si points at path
 24062                                  	
 24063 000032A5 E8AA02                  	call	skip_white		;skip white space chars
 24064                                  
 24065                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 24066                                  
 24067 000032A8 E8B302                  	call	copy_pipe_path		;copy the pipe path
 24068                                  	
 24069                                  ;Check if the TEMP path is valid
 24070                                  
 24071 000032AB 06                      	push	es
 24072 000032AC 1F                      	pop	ds			;ds = DATARES
 24073                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 24074                                  	;;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 24075                                  	;mov	dx,3EAh	; MSDOS 6.22 - offset EndInit
 24076 000032AD BA[B702]                	mov	dx,Pipe1
 24077                                  	;mov	ax,(CHMOD shl 8) or 0
 24078 000032B0 B80043                  	mov	ax,4300h
 24079 000032B3 CD21                    	int	21h
 24080 000032B5 7207                    	jc	short no_temp_path
 24081                                  	
 24082 000032B7 F7C11000                	test	cx,10h			;is it a directory?
 24083 000032BB 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 24084                                  	
 24085 000032BD F9                      	stc				;no, indicate fail
 24086                                  no_temp_path:
 24087 000032BE 5E                      	pop	si
 24088 000032BF 1F                      	pop	ds
 24089 000032C0 5F                      	pop	di
 24090 000032C1 07                      	pop	es
 24091 000032C2 730B                    	jnc	short crt_temp		;path found, create tempfiles
 24092                                  
 24093                                  	; 27/02/2023
 24094                                  	; MSDOS 3.3
 24095                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 24096                                  	;				; Get current drive
 24097                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 24098                                  	;add	al,[cs:CAPITAL_A]
 24099                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 24100                                  	;mov	bx,PIPE1
 24101                                  	;mov	[bx],al
 24102                                  	;xor	ah,ah			; nul terminate path names
 24103                                  	;mov	byte [PIPE1+3],ah
 24104                                  	;mov	byte [PIPE2+3],ah
 24105                                  
 24106                                  	; MSDOS 6.0
 24107                                  ;SR;
 24108                                  ; We want to create temp files in the current directory rather than in the 
 24109                                  ;root of the drive. This is because the number of files that can be present
 24110                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 24111                                  
 24112                                  	;mov	ah,'.'
 24113                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 24114                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 24115                                  	;xor	ah,ah
 24116                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 24117                                  	;mov	[Pipe2+1],ah		;create files in current dir
 24118                                  	; 27/02/2023
 24119 000032C4 B92E00                  	mov	cx,002Eh
 24120 000032C7 890E[B702]              	mov	[Pipe1],cx
 24121 000032CB 890E[0603]              	mov	[Pipe2],cx
 24122                                  crt_temp:
 24123                                  	; MSDOS 6.0
 24124                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 24125                                  	;;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 24126                                  	;mov	dx,3EAh ; MSDOS 6.22 COMMAND.COM	
 24127 000032CF BA[B702]                	mov	dx,Pipe1
 24128                                  	; MSDOS 3.3
 24129                                  	;mov	dx,bx
 24130                                  	
 24131                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24132 000032D2 31C9                    	xor	cx,cx
 24133                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 24134 000032D4 B45A                    	mov	ah,5Ah
 24135 000032D6 CD21                    	int	21h
 24136                                  		; DOS -	3+ - CREATE UNIQUE FILE
 24137                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 24138                                  		; receive generated filename
 24139                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 24140 000032D8 728E                    	jc	short PIPERR	; Couldn't create
 24141                                  
 24142 000032DA 89C3                    	mov	bx,ax
 24143                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 24144 000032DC B43E                    	mov	ah,3Eh
 24145 000032DE CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24146                                  			; BX = file handle
 24147                                  	;;;mov	dx,PIPE2
 24148                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 24149                                  	;mov	dx,439h ; MSDOS 6.22 COMMAND.COM
 24150 000032E0 BA[0603]                	mov	dx,Pipe2
 24151                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 24152 000032E3 B45A                    	mov	ah,5Ah
 24153 000032E5 CD21                    	int	21h
 24154                                  		; DOS -	3+ - CREATE UNIQUE FILE
 24155                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 24156                                  		; receive generated filename
 24157                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 24158                                  	; 17/04/2023
 24159                                  	;jc	short PIPERR
 24160                                  	; 27/02/2023
 24161 000032E7 7303                    	jnc	short pps1
 24162 000032E9 E97CFF                  	jmp	PIPERR
 24163                                  pps1:
 24164 000032EC 89C3                    	mov	bx,ax
 24165 000032EE B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 24166 000032F0 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24167                                  				; BX = file handle
 24168                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 24169 000032F2 E87FFE                  	call	TESTDOREIN
 24170                                  	;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24171 000032F5 8B36[5503]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 24172 000032F9 833E[4302]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 24173 000032FE 7506                    	jne	short NOSINGP
 24174 00003300 C706[4302]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 24175                                  NOSINGP:
 24176 00003306 EB29                    	jmp	short FIRSTPIPE
 24177                                  
 24178                                  ; ---------------------------------------------------------------------------
 24179                                  
 24180                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24181                                  	; 11/06/2026 - Retro DOS v4.2 COMMAND.COM
 24182                                  PIPEPROC:
 24183 00003308 8026[3B02]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 24184                                  	;;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24185 0000330D 8B36[5503]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 24186 00003311 AC                      	lodsb
 24187                                  	; 27/02/2023
 24188 00003312 3C7C                    	cmp	al,'|'		
 24189                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 24190                                  	;je	short ISPIPE1	; Yes
 24191                                  	;cmp	al,'|'
 24192                                  	;;cmp	al,[cs:VBAR]
 24193 00003314 7403                    	je	short ISPIPE1
 24194 00003316 E98400                  	jmp	PIPEEND		; Pipe done
 24195                                  ISPIPE1:
 24196 00003319 8B16[D803]              	mov	dx,[InPipePtr]	; Get the input file name
 24197                                  	;mov	ax,OPEN*256 ; 3D00h
 24198 0000331D B8003D                  	mov	ax,3D00h
 24199 00003320 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 24200                                  			; DS:DX	-> ASCIZ filename
 24201                                  			; AL = access mode
 24202                                  			; 0 - read
 24203                                  PIPEERRJ:
 24204 00003322 7303                    	jnc	short NO_PIPEERR
 24205 00003324 E941FF                  	jmp	PIPERR		; Lost the pipe file
 24206                                  NO_PIPEERR:
 24207 00003327 89C3                    	mov	bx,ax
 24208 00003329 B0FF                    	mov	al,0FFh
 24209                                  	;xchg	al,[bx+18h]
 24210 0000332B 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 24211 0000332E A21800                  	mov	[PDB.JFN_TABLE],al	; Redirect
 24212                                  FIRSTPIPE:
 24213 00003331 BF[549C]                	mov	di,COMBUF+2
 24214 00003334 31C9                    	xor	cx,cx
 24215 00003336 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 24216 00003339 7503                    	jne	short PIPEOK1
 24217                                  PIPEERRSYNJ:
 24218 0000333B E91FFF                  	jmp	PIPEERRSYN
 24219                                  PIPEOK1:
 24220                                  	;;;mov	al,[cs:VBAR]
 24221                                  	; 27/02/2023
 24222                                  	;;mov	al,vbar
 24223                                  	;mov	al,'|'
 24224                                  	;cmp	[si],al		; '||'
 24225                                  	;je	short PIPEERRSYNJ
 24226 0000333E 803C7C                  	cmp	byte [si],'|'
 24227                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 24228 00003341 74F8                    	je	short PIPEERRSYNJ
 24229                                  PIPECOMLP:
 24230 00003343 AC                      	lodsb
 24231 00003344 AA                      	stosb
 24232                                  	; 27/02/2023
 24233 00003345 E8C7F5                  	call	testkanj
 24234 00003348 7405                    	jz	short NOTKANJ5
 24235 0000334A A4                      	movsb
 24236                                  ;  Added following 2 commands to the fix pipe bug.
 24237 0000334B 41                      	inc	cx		;AN000;  3/3/KK
 24238 0000334C 41                      	inc	cx		;AN000;  3/3/KK
 24239 0000334D EBF4                    	jmp	short PIPECOMLP
 24240                                  NOTKANJ5:
 24241 0000334F 3C0D                    	cmp	al,0Dh
 24242 00003351 7438                    	je	short LASTPIPE
 24243 00003353 41                      	inc	cx
 24244                                  	; 27/02/2023
 24245 00003354 3C7C                    	cmp	al,'|'
 24246                                  	;cmp	al,ALTPIPECHR
 24247                                  	;je	short ISPIPE2
 24248                                  	;;cmp	al,[cs:VBAR]
 24249                                  	;cmp	al,vbar
 24250 00003356 75EB                    	jne	short PIPECOMLP
 24251                                  ISPIPE2:
 24252 00003358 26C645FF0D              	mov	byte [es:di-1],0Dh
 24253 0000335D 49                      	dec	cx
 24254                                  	;mov	[cs:COMBUF+1],cl
 24255                                  	; 27/02/2023
 24256 0000335E 26880E[539C]            	mov	[es:COMBUF+1],cl
 24257 00003363 4E                      	dec	si
 24258                                  	;;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 24259                                  	; 11/06/2023 - MSDOS 6.22 COMMAND.COM
 24260                                  	;mov	[488h],si ; [PipePtr] = [EndInit+158]
 24261 00003364 8936[5503]              	mov	[PipePtr],si		; On to next pipe element
 24262                                  			; mov [EndInit+158],si
 24263 00003368 8B16[DA03]              	mov	dx,[OutPipePtr]
 24264 0000336C 51                      	push	cx
 24265 0000336D 31C9                    	xor	cx,cx
 24266                                  	;mov	ax,CREAT*256 ; 3C00h
 24267 0000336F B8003C                  	mov	ax,3C00h
 24268 00003372 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 24269                                  			; CX = attributes for file
 24270                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 24271 00003374 59                      	pop	cx
 24272 00003375 72AB                    	jc	short PIPEERRJ		; Lost the file
 24273 00003377 89C3                    	mov	bx,ax
 24274 00003379 B0FF                    	mov	al,0FFh
 24275                                  	;xchg	al,[bx+18h]
 24276 0000337B 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 24277 0000337E A21900                  	mov	[PDB.JFN_TABLE+1],al
 24278 00003381 8716[D803]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 24279 00003385 8916[DA03]              	mov	[OutPipePtr],dx
 24280 00003389 EB0D                    	jmp	short PIPECOM
 24281                                  LASTPIPE:
 24282                                  	;mov	[cs:COMBUF+1],cl 
 24283                                  	; 27/02/2023
 24284 0000338B 26880E[539C]            	mov	[es:COMBUF+1],cl
 24285 00003390 4E                      	dec	si
 24286                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 24287                                  	;mov	[488h],si ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24288 00003391 8936[5503]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 24289                                  		; mov [EndInit+158],si
 24290 00003395 E859FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 24291                                  PIPECOM:
 24292 00003398 0E                      	push	cs
 24293 00003399 1F                      	pop	ds
 24294 0000339A E97DCF                  	jmp	NOPIPEPROC	; Process the pipe element
 24295                                  PIPEEND:
 24296 0000339D E89DFE                  	call	PIPEDEL
 24297 000033A0 813E[4302]00F0          	cmp	word [SingleCom],0F000h
 24298 000033A6 7506                    	jnz	short NOSINGP2
 24299 000033A8 C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 24300                                  NOSINGP2:
 24301 000033AE E953CD                  	jmp	TCOMMAND
 24302                                  
 24303                                  ; =============== S U B	R O U T	I N E =======================================
 24304                                  
 24305                                  ; Date and time are set during initialization and use
 24306                                  ; this routines since they need to do a long return
 24307                                  
 24308                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24309                                  DATINIT:
 24310 000033B1 2E8C1E[F39D]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 24311 000033B6 06                      	push	es
 24312 000033B7 1E                      	push	ds		; Going to use the previous stack
 24313 000033B8 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 24314 000033BA 8EC0                    	mov	es,ax
 24315 000033BC 8ED8                    	mov	ds,ax
 24316 000033BE E82B22                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 24317 000033C1 BA[90A9]                	mov	dx,INTERNATVARS
 24318 000033C4 B80038                  	mov	ax,3800h
 24319                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 24320 000033C7 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 24321                                  			; get current-country info
 24322                                  			; DS:DX	-> buffer for returned info
 24323                                  	; 20/10/2018
 24324 000033C9 C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 24325 000033CF C606[529C]80            	mov	byte [COMBUF],128 ; Init COMBUF
 24326 000033D4 C706[539C]010D          	mov	word [COMBUF+1],0D01h
 24327 000033DA E80600                  	call	DATE
 24328 000033DD E86200                  	call	CTIME
 24329 000033E0 1F                      	pop	ds
 24330 000033E1 07                      	pop	es
 24331 000033E2 CB                      	retf	; far return
 24332                                  
 24333                                  ; =============== S U B	R O U T	I N E =======================================
 24334                                  
 24335                                  ; MSDOS 6.0
 24336                                  
 24337                                  ; ****************************************************************
 24338                                  ; *
 24339                                  ; * ROUTINE:	 DATE - Set system date
 24340                                  ; *
 24341                                  ; * FUNCTION:	 If a date is specified, set the system date,
 24342                                  ; *		 otherwise display the current system date and
 24343                                  ; *		 prompt the user for a new date.  If an invalid
 24344                                  ; *		 date is specified, issue an error message and
 24345                                  ; *		 prompt for a new date.  If the user enters
 24346                                  ; *		 nothing when prompted for a date, terminate.
 24347                                  ; *
 24348                                  ; * INPUT:	 command line at offset 81H
 24349                                  ; *
 24350                                  ; * OUTPUT:	 none
 24351                                  ; *
 24352                                  ; ****************************************************************
 24353                                  
 24354                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24355                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 24356                                  
 24357                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24358                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:356Eh
 24359                                  DATE:
 24360 000033E3 BE8100                  	mov	si,81h			; Accepting argument for date inline
 24361 000033E6 BF[E397]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24362 000033E9 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 24363 000033EB 31D2                    	xor	dx,dx			;AN000;
 24364 000033ED E86916                  	call	cmd_parse		;AC000; call parser
 24365                                  
 24366                                  	; 27/02/2023
 24367                                  	;cmp	ax,-1
 24368                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24369                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 24370                                  	;;cmp	ax,0
 24371                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24372                                  	;;jne	short DATERR		;AN000; yes - go issue message
 24373                                  	; 26/04/2023
 24374                                  	;or	ax,ax ; ax = 0 ?
 24375                                  	;jnz	short DATERR
 24376                                  	;;jmp	short COMDAT		;AC000; we have a date
 24377                                  	; 11/06/2023
 24378 000033F0 40                      	inc	ax  ; cmp ax,-1
 24379 000033F1 7428                    	jz	short PRMTDAT ; 0FFFFh -> 0
 24380 000033F3 48                      	dec	ax  ; cmp ax,0
 24381 000033F4 7541                    	jnz	short DATERR ; 1 -> 0
 24382                                  	; ax = 0
 24383                                  
 24384                                  	; 27/02/2023
 24385                                  COMDAT:
 24386 000033F6 8B0E[EDA9]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 24387 000033FA 8A36[EFA9]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 24388 000033FE 8A16[F0A9]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 24389 00003402 51                      	push	cx			;AC000; save date
 24390 00003403 52                      	push	dx			;AC000;
 24391 00003404 B90100                  	mov	cx,1			;AC000; set 1 positional entered
 24392 00003407 31D2                    	xor	dx,dx			;AN029;
 24393 00003409 E84D16                  	call	cmd_parse		;AN029; call parser
 24394 0000340C 3CFF                    	cmp	al,0FFh ; -1
 24395                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 24396 0000340E 5A                      	pop	dx			;AC000; retrieve date
 24397 0000340F 59                      	pop	cx			;AC000;
 24398 00003410 7525                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 24399                                  	; 26/04/2023
 24400                                  	;mov	ah,SET_DATE		;yes - set date
 24401 00003412 B42B                    	mov	ah,2Bh
 24402 00003414 CD21                    	int	21h
 24403                                  			; DOS - SET CURRENT DATE
 24404                                  			; DL = day, DH = month, CX = year
 24405                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 24406 00003416 08C0                    	or	al,al
 24407 00003418 751D                    	jnz	short DATERR
 24408                                  date_end:
 24409 0000341A C3                      	retn
 24410                                  
 24411                                  PRMTDAT:
 24412                                  	; Print "Current date is
 24413 0000341B E81508                  	call	GetDate 		;AN000; get date for output
 24414                                  
 24415 0000341E 86F2                    	xchg	dh,dl			;AN000; switch month & day
 24416 00003420 890E[7E92]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 24417 00003424 8916[8092]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 24418 00003428 BA[6E92]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 24419 0000342B E8E120                  	call	std_printf
 24420                                  
 24421                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 24422                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 24423                                  
 24424                                  GET_NEW_DATE:				;AN000;
 24425 0000342E E8BC00                  	call	GETDAT			;AC000; prompt user for date
 24426                                  	
 24427                                  	; 11/06/2023
 24428                                  	;cmp	ax,0FFFFh ; -1
 24429                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24430                                  	;je	short date_end		;AC000; yes - exit
 24431                                  	; 26/04/2023
 24432                                  	;;cmp	ax,0
 24433                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24434                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 24435                                  	;; 27/02/2023
 24436                                  	;;jz	short COMDAT
 24437                                  	; 26/04/2023
 24438                                  	;and	ax,ax ; 0 ?
 24439                                  	;jz	short COMDAT
 24440                                  
 24441                                  	; 11/06/2023
 24442 00003431 40                      	inc	ax  ; cmp ax,-1
 24443 00003432 74E6                    	jz	short date_end ; 0FFFFh -> 0
 24444 00003434 48                      	dec	ax  ; cmp ax,0
 24445 00003435 74BF                    	jz	short COMDAT ; 1 -> 0
 24446                                  	; ax > 0
 24447                                  
 24448                                  ;COMDAT:
 24449                                  ;	....
 24450                                  DATERR:
 24451 00003437 E8E7F6                  	call	CRLF2			;AN028; print out a blank line
 24452 0000343A BA[6B92]                	mov	dx,BADDAT_PTR
 24453 0000343D E8CF20                  	call	std_printf
 24454 00003440 EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 24455                                  
 24456                                  ; =============== S U B	R O U T	I N E =======================================
 24457                                  
 24458                                  ; MSDOS 6.0
 24459                                  
 24460                                  ; TIME gets and sets the time
 24461                                  
 24462                                  ; ****************************************************************
 24463                                  ; *
 24464                                  ; * ROUTINE:	 TIME - Set system time
 24465                                  ; *
 24466                                  ; * FUNCTION:	 If a time is specified, set the system time,
 24467                                  ; *		 otherwise display the current system time and
 24468                                  ; *		 prompt the user for a new time.  If an invalid
 24469                                  ; *		 time is specified, issue an error message and
 24470                                  ; *		 prompt for a new time.  If the user enters
 24471                                  ; *		 nothing when prompted for a time, terminate.
 24472                                  ; *
 24473                                  ; * INPUT:	 command line at offset 81H
 24474                                  ; *
 24475                                  ; * OUTPUT:	 none
 24476                                  ; *
 24477                                  ; ****************************************************************
 24478                                  
 24479                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24480                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 24481                                  
 24482                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24483                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:35D7h
 24484                                  CTIME:
 24485 00003442 BE8100                  	mov	si,81h			; Accepting argument for time inline
 24486 00003445 BF[F597]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 24487 00003448 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 24488 0000344A 31D2                    	xor	dx,dx			;AN000;
 24489 0000344C E80A16                  	call	cmd_parse		;AC000; call parser
 24490                                  	
 24491                                  	; 27/02/2023
 24492                                  	;cmp	ax,-1
 24493                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24494                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 24495                                  	;;cmp	ax,0
 24496                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24497                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 24498                                  	;and	ax,ax ; ax = 0 ?
 24499                                  	;jnz	short TIMERR
 24500                                  	;;jmp	short COMTIM		;AC000; we have a time
 24501                                  	; 11/06/2023
 24502 0000344F 40                      	inc	ax  ; cmp ax,-1
 24503 00003450 742C                    	jz	short PRMTTIM ; 0FFFFh -> 0
 24504 00003452 48                      	dec	ax  ; cmp ax,0
 24505 00003453 7548                    	jnz	short TIMERR ; 1 -> 0
 24506                                  	; ax = 0
 24507                                  	
 24508                                  	; 27/02/2023
 24509                                  COMTIM:
 24510 00003455 8A2E[F5A9]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 24511 00003459 8A0E[F6A9]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 24512 0000345D 8A36[F7A9]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 24513 00003461 8A16[F8A9]              	mov	dl,[TIME_FRACTION]	;AC000;
 24514 00003465 51                      	push	cx			;AC000; save time
 24515 00003466 52                      	push	dx			;AC000;
 24516 00003467 B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 24517 0000346A 31D2                    	xor	dx,dx			;AN029;
 24518 0000346C E8EA15                  	call	cmd_parse		;AN029; call parser
 24519 0000346F 3CFF                    	cmp	al, -1
 24520                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 24521 00003471 5A                      	pop	dx			;AC000; retieve time
 24522 00003472 59                      	pop	cx			;AC000;
 24523 00003473 7528                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 24524                                  SAVTIM:
 24525                                  	;mov	ah,SET_TIME
 24526 00003475 B42D                    	mov	ah,2Dh
 24527 00003477 CD21                    	int	21h
 24528 00003479 08C0                    	or	al,al
 24529 0000347B 7520                    	jnz	short TIMERR		;AC000; if an error occured, try again
 24530                                  time_end:
 24531 0000347D C3                      	retn
 24532                                  
 24533                                  PRMTTIM:
 24534                                  	;Printf "Current time is ... "
 24535                                  
 24536                                  	;mov	ah,Get_Time		;AC000; get the current time
 24537 0000347E B42C                    	mov	ah,2Ch
 24538 00003480 CD21                    	int	21h			;AC000;   Get time in CX:DX
 24539 00003482 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 24540 00003484 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 24541 00003486 890E[A092]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 24542 0000348A 8916[A292]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 24543 0000348E BA[9B92]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 24544 00003491 E87B20                  	call	std_printf
 24545                                  
 24546                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 24547                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 24548                                  
 24549                                  GET_NEW_TIME:
 24550 00003494 E8AE00                  	call	GETTIM			;AC000;
 24551                                  	
 24552                                  	; 11/06/2023
 24553                                  	;cmp	ax,-1
 24554                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24555                                  	;je	short time_end		;AC000;
 24556                                  	;;cmp	ax,0
 24557                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24558                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 24559                                  	;or	ax,ax  ; ax = 0 ?
 24560                                  	;;jnz	short TIMERR
 24561                                  	; 27/02/2023
 24562                                  	;jz	short COMTIM
 24563                                  
 24564                                  	; 11/06/2023
 24565 00003497 40                      	inc	ax  ; cmp ax,-1
 24566 00003498 74E3                    	jz	short time_end ; 0FFFFh -> 0
 24567 0000349A 48                      	dec	ax  ; cmp ax,0
 24568 0000349B 74B8                    	jz	short COMTIM ; 1 -> 0
 24569                                  	; ax > 0
 24570                                  
 24571                                  ;COMTIM:
 24572                                  ;	....
 24573                                  TIMERR:
 24574 0000349D E881F6                  	call	CRLF2			;AN028; print out a blank line
 24575 000034A0 BA[9892]                	mov	dx,BadTim_Ptr
 24576 000034A3 E86920                  	call	std_printf		; Print error message
 24577 000034A6 EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 24578                                  
 24579                                  ; =============== S U B	R O U T	I N E =======================================
 24580                                  
 24581                                  ; MSDOS 6.0
 24582                                  
 24583                                  ; Set the special flag in the INIT flag to the value in CX.
 24584                                  
 24585                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24586                                  SetInitFlag:
 24587 000034A8 8E1E[F39D]              	mov	ds,[RESSEG]
 24588                                  
 24589 000034AC 8026[B402]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 24590                                  	;and	byte [InitFlag],0FDh
 24591 000034B1 080E[B402]              	or	byte [InitFlag],cl
 24592 000034B5 0E                      	push	cs
 24593 000034B6 1F                      	pop	ds
 24594 000034B7 C3                      	retn
 24595                                  
 24596                                  ; =============== S U B	R O U T	I N E =======================================
 24597                                  
 24598                                  ; MSDOS 6.0
 24599                                  
 24600                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24601                                  PipeOff:
 24602 000034B8 1E                      	push	ds
 24603 000034B9 50                      	push	ax
 24604 000034BA 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 24605 000034BF 30C0                    	xor	al,al
 24606 000034C1 8606[B502]              	xchg	[PipeFlag],al
 24607 000034C5 08C0                    	or	al,al
 24608 000034C7 7404                    	jz	short PipeOffDone
 24609 000034C9 D02E[3B02]              	shr	byte [EchoFlag],1
 24610                                  PipeOffDone:
 24611 000034CD 58                      	pop	ax
 24612 000034CE 1F                      	pop	ds
 24613 000034CF C3                      	retn
 24614                                  
 24615                                  ; =============== S U B	R O U T	I N E =======================================
 24616                                  
 24617                                  ; MSDOS 6.0
 24618                                  
 24619                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24620                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24621                                  PRINT_TIME:
 24622                                  	;mov	ah,Get_Time
 24623 000034D0 B42C                    	mov	ah,2Ch
 24624 000034D2 CD21                    	int	21h			; Get time in CX:DX
 24625                                  
 24626 000034D4 06                      	push	es
 24627 000034D5 0E                      	push	cs
 24628 000034D6 07                      	pop	es
 24629 000034D7 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 24630 000034D9 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 24631 000034DB 2E890E[DC93]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 24632 000034E0 2E8916[DE93]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 24633 000034E5 BA[D793]                	mov	dx,promtim_ptr		;AC000; set up message for output
 24634 000034E8 E82420                  	call	std_printf
 24635                                  
 24636                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 24637                                  					;AC000; reset hour, minutes, seconds, and hundredths
 24638                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 24639                                  					;AC000;  pointers in control block
 24640 000034EB 07                      	pop	es
 24641 000034EC C3                      	retn
 24642                                  
 24643                                  ; =============== S U B	R O U T	I N E =======================================
 24644                                  
 24645                                  ; MSDOS 6.0
 24646                                  
 24647                                  ; ****************************************************************
 24648                                  ; *
 24649                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 24650                                  ; *
 24651                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 24652                                  ; *		 INFORMATION and issues the "Enter new date"
 24653                                  ; *		 message with the proper date format. COMBUF
 24654                                  ; *		 is reset to get a date from the command line.
 24655                                  ; *		 The PARSE_DATE blocks are then reset and the
 24656                                  ; *		 PARSE function call is issued.
 24657                                  ; *
 24658                                  ; * INPUT:	 NONE
 24659                                  ; *
 24660                                  ; * OUTPUT:	 COMBUF
 24661                                  ; *		 PARSER RETURN CODES
 24662                                  ; *
 24663                                  ; ****************************************************************
 24664                                  
 24665                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24666                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 24667                                  
 24668                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24669                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:368Ch
 24670                                  GETDAT:
 24671                                  	;mov	ax,(International SHL 8)
 24672 000034ED B80038                  	mov	ax,3800h
 24673                                  					; Determine what format the date
 24674 000034F0 BA5C00                  	mov	dx,5Ch			;  should be entered in and
 24675 000034F3 CD21                    	int	21h			;  print a message describing it
 24676                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 24677                                  			; get current-country info
 24678                                  			; DS:DX -> buffer for returned info
 24679 000034F5 89D6                    	mov	si,dx
 24680 000034F7 AD                      	lodsw
 24681 000034F8 2E8B16[B593]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 24682 000034FD 48                      	dec	ax
 24683 000034FE 780C                    	js	short printformat
 24684 00003500 2E8B16[B893]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 24685 00003505 7405                    	jz	short printformat
 24686 00003507 2E8B16[BB93]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 24687                                  printformat:
 24688 0000350C 89D0                    	mov	ax,dx			;AN000; get message number of format
 24689                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 24690 0000350E B6FF                    	mov	dh,-1 ; 0FFh
 24691 00003510 E8DF20                  	call	TSYSGETMSG		;AN000; get the address of the message
 24692 00003513 2E8936[8F92]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 24693 00003518 BA[8A92]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 24694 0000351B E8F11F                  	call	std_printf
 24695                                  	;mov	word [cs:NewDat_Format],no_subst
 24696                                  					;AN000; reset subst block
 24697 0000351E 2EC706[8F92]0000        	mov	word [cs:NewDat_Format],0
 24698                                  
 24699                                  	; 28/02/2023
 24700 00003525 BF[E397]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24701                                  ; 28/02/2023
 24702                                  gettim_p:	
 24703                                  	;mov	ah,Std_Con_String_Input
 24704 00003528 B40A                    	mov	ah,0Ah
 24705 0000352A BA[529C]                	mov	dx,COMBUF
 24706 0000352D B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 24707 00003530 E875FF                  	call	SetInitFlag		;  prompting for date.
 24708 00003533 CD21                    	int	21h			; Get input line
 24709 00003535 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 24710 00003537 E86EFF                  	call	SetInitFlag		;  prompting for date.
 24711 0000353A E8E4F5                  	call	CRLF2
 24712                                  	; 28/02/2023
 24713                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24714                                  ;gettim_p: ; 28/02/2023
 24715 0000353D BE[549C]                	mov	si,COMBUF+2
 24716                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 24717 00003540 31D2                    	xor	dx,dx			;AN000;
 24718                                  	;call	cmd_parse		;AC000; call parser
 24719                                  	;retn
 24720                                  	; 28/02/2023
 24721 00003542 E91415                  	jmp	cmd_parse
 24722                                  
 24723                                  ; =============== S U B	R O U T	I N E =======================================
 24724                                  
 24725                                  ; MSDOS 6.0
 24726                                  
 24727                                  ; ****************************************************************
 24728                                  ; *
 24729                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 24730                                  ; *
 24731                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 24732                                  ; *		 INFORMATION and issues the "Enter new time"
 24733                                  ; *		 message. COMBUF is reset to get a time from the
 24734                                  ; *		 command line. The PARSE_TIME blocks are then
 24735                                  ; *		 reset and the PARSE function call is issued.
 24736                                  ; *
 24737                                  ; * INPUT:	 NONE
 24738                                  ; *
 24739                                  ; * OUTPUT:	 COMBUF
 24740                                  ; *		 PARSER RETURN CODES
 24741                                  ; *
 24742                                  ; ****************************************************************
 24743                                  
 24744                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24745                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 24746                                  
 24747                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24748                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:36E7h
 24749                                  GETTIM:
 24750 00003545 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 24751 00003547 BA[A992]                	mov	dx,NewTim_Ptr
 24752 0000354A E8C21F                  	call	std_printf
 24753                                  
 24754                                  	; 28/02/2023
 24755 0000354D BF[F597]                	mov	di,PARSE_TIME
 24756 00003550 EBD6                    	jmp	short gettim_p
 24757                                  
 24758                                  ; 28/02/2023
 24759                                  ;	;mov	ah,Std_Con_String_Input
 24760                                  ;	mov	ah,0Ah
 24761                                  ;	mov	dx,COMBUF
 24762                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 24763                                  ;	call	SetInitFlag		;  prompting for time.
 24764                                  ;	int	21h			; Get input line
 24765                                  ;	; 28/02/2023
 24766                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 24767                                  ;	call	SetInitFlag		;  prompting for time.
 24768                                  ;	call	CRLF2
 24769                                  ;	; 28/02/2023
 24770                                  ;	;mov	si,COMBUF+2
 24771                                  ;	; 28/02/2023
 24772                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 24773                                  ;	; 28/02/2023
 24774                                  ;	jmp	short gettim_p	
 24775                                  ;	; 28/02/2023
 24776                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 24777                                  ;	;xor	dx,dx			;AN000;
 24778                                  ;	;call	cmd_parse		;AC000; call parser
 24779                                  ;	;retn
 24780                                  
 24781                                  
 24782                                  ; =============== S U B	R O U T	I N E =======================================
 24783                                  
 24784                                  ; MSDOS 6.0
 24785                                  
 24786                                  ;Skip_white: Skips over the whitespace chars that could be present after
 24787                                  ;the '=' sign in the environment variable before the actual path.
 24788                                  ;
 24789                                  ;	ENTRY:	ds:si = arguments of the environment variable
 24790                                  ;
 24791                                  ;	EXIT:	ds:si = start of the path
 24792                                  ;
 24793                                  ;	REGISTERS AFFECTED: ax
 24794                                  
 24795                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24796                                  skip_white:
 24797 00003552 FC                      	cld
 24798                                  skw_lp:
 24799 00003553 AC                      	lodsb
 24800 00003554 3C20                    	cmp	al,' '			;blank char?
 24801 00003556 74FB                    	jz	short skw_lp		;yes, skip it
 24802 00003558 3C09                    	cmp	al,9			;tab char?
 24803 0000355A 74F7                    	jz	short skw_lp		;yes, skip it
 24804 0000355C 4E                      	dec	si			;point at first non-white
 24805 0000355D C3                      	retn
 24806                                  
 24807                                  ; =============== S U B	R O U T	I N E =======================================
 24808                                  
 24809                                  ; MSDOS 6.0
 24810                                  
 24811                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 24812                                  ;variable into the path buffers Pipe1 & Pipe2.
 24813                                  ;
 24814                                  ;	ENTRY:	ds:si = path to be copied
 24815                                  ;		es = RESGROUP
 24816                                  ;
 24817                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 24818                                  ;
 24819                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 24820                                  
 24821                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24822                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 24823                                  
 24824                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24825                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:371Eh
 24826                                  copy_pipe_path:
 24827 0000355E B9FFFF                  	mov	cx,0FFFFh ; 65535
 24828 00003561 30C0                    	xor	al,al
 24829                                  
 24830 00003563 89F7                    	mov	di,si
 24831 00003565 06                      	push	es			;save es
 24832 00003566 1E                      	push	ds
 24833 00003567 07                      	pop	es			;es:di = path to be copied
 24834                                  	
 24835 00003568 FC                      	cld
 24836 00003569 57                      	push	di
 24837 0000356A F2AE                    	repnz	scasb			;look for the null char
 24838 0000356C 5F                      	pop	di
 24839                                  
 24840 0000356D 07                      	pop	es			;es = RESGROUP again
 24841                                  
 24842 0000356E F7D1                    	not	cx			;length including the null
 24843                                  
 24844                                  	;;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 24845                                  	;;mov	di,3EAh ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24846                                  	;mov	di,offset DATARES:Pipe1
 24847 00003570 BF[B702]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 24848 00003573 57                      	push	di
 24849 00003574 51                      	push	cx			
 24850 00003575 F3A4                    	rep	movsb			;copy path into Pipe1
 24851 00003577 59                      	pop	cx
 24852 00003578 5F                      	pop	di
 24853                                  
 24854 00003579 1E                      	push	ds
 24855 0000357A 06                      	push	es
 24856 0000357B 1F                      	pop	ds			;ds:si = Pipe1
 24857 0000357C 89FE                    	mov	si,di
 24858                                  	;;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 24859                                  	;;mov	di,439h ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24860                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 24861 0000357E BF[0603]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 24862 00003581 F3A4                    	rep	movsb			;copy path into Pipe2
 24863 00003583 1F                      	pop	ds
 24864 00003584 C3                      	retn
 24865                                  
 24866                                  ;============================================================================
 24867                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 24868                                  ;============================================================================
 24869                                  ; 03/10/2018 - Retro DOS v3.0
 24870                                  
 24871                                  ;----------------------------------------------------------------------------
 24872                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 24873                                  ; argv[argvcnt] array. The most important difference between this array and
 24874                                  ; the tradition UNIX format is the extra cparse information included with
 24875                                  ; each argument element.
 24876                                  ;---------------
 24877                                  ; ENTRY:
 24878                                  ;	BL	     special delimiter for cparse -- not implemented)
 24879                                  ;---------------
 24880                                  ; EXIT:
 24881                                  ;	CF	    set if error
 24882                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 24883                                  ;	argv[]	    array of cparse flags and pointers to arguments
 24884                                  ;	argvcnt     argument count
 24885                                  ;---------------
 24886                                  ; NOTE(S):
 24887                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 24888                                  ;	*   Parseflags record contains cparse flags, as follows:
 24889                                  ;		sw_flag 	--	was this arg a switch?
 24890                                  ;		wildcard	--	whether or not it contained a * or ?
 24891                                  ;		path_sep	--	maybe it was a pathname
 24892                                  ;		unused		--	for future expansion
 24893                                  ;		special_delim	--	was there an initial special delimiter?
 24894                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 24895                                  ;	*   Relationship between input, cparse output, and comtail can be
 24896                                  ;	    found in the following chart. Despite the claim of the cparse
 24897                                  ;	    documentation that, "Token buffer always starts d: for non switch
 24898                                  ;	    tokens", such is not the case (see column two, row two).
 24899                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 24900                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 24901                                  ;	    STARTEL addresses) will be null. This is clearly just a
 24902                                  ;	    documentation error.
 24903                                  ;	*   cparse also returns a switch code in BP for each switch it
 24904                                  ;	    recognizes on the command line.
 24905                                  ;	*   arglen for each token does NOT include the terminating null.
 24906                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 24907                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 24908                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 24909                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 24910                                  ;	    line parsing may result in slightly different behavior than
 24911                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 24912                                  ;
 24913                                  ;	    Input		    Cparse		Command Line (80H)
 24914                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 24915                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 24916                                  ;	foo.bat 		foo.bat 		foo.bat
 24917                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 24918                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 24919                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 24920                                  
 24921                                  ; =============== S U B	R O U T	I N E =======================================
 24922                                  
 24923                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 24924                                  
 24925                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24926                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 24927                                  
 24928                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24929                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 24930                                  
 24931                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 24932                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 24933                                  
 24934                                  PARSELINE:
 24935 00003585 50                      	push	ax			; most of these are clobbered
 24936 00003586 53                      	push	bx			; by cparse...
 24937 00003587 51                      	push	cx
 24938 00003588 52                      	push	dx
 24939 00003589 57                      	push	di
 24940 0000358A 56                      	push	si
 24941 0000358B 9C                      	pushf
 24942                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 24943 0000358C C706[07A8]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 24944 00003592 31C0                    	xor	ax,ax
 24945                                  	;;mov	cx,1348
 24946                                  	; 27/07/2024
 24947                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 24948 00003594 B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 24949 00003597 A2[95A0]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 24950 0000359A BF[41A2]                	mov	di,ARG
 24951 0000359D F3AA                    	rep	stosb
 24952                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 24953 0000359F C706[85A7][05A5]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 24954                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 24955                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 24956 000035A5 A3[03A5]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 24957                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 24958                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 24959 000035A8 A3[01A5]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 24960 000035AB BE[549C]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 24961                                  
 24962                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 24963                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 24964                                  ; otherwise. This is done so that commands can get arg pointers into their
 24965                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 24966                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 24967                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 24968                                  ; the command to be repeated or the transient part of command has been
 24969                                  ; reloaded.
 24970                                  
 24971 000035AE 1E                      	push	ds
 24972 000035AF 8E1E[F39D]              	mov	ds,[RESSEG]
 24973                                  	;cmp	byte [ForFlag],0
 24974 000035B3 3806[4902]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 24975 000035B7 1F                      	pop	ds
 24976 000035B8 7510                    	jnz	short PCONT
 24977                                  	;mov	di,ARG_ARGFORCOMBUF
 24978 000035BA BF[05A6]                	mov	di,ARG+ARG_UNIT.argforcombuf
 24979 000035BD 30ED                    	xor	ch,ch
 24980 000035BF 8A0E[539C]              	mov	cl,[COMBUF+1]
 24981 000035C3 FEC1                    	inc	cl
 24982 000035C5 F3A4                    	rep	movsb
 24983                                  	;mov	si,ARG_ARGFORCOMBUF
 24984 000035C7 BE[05A6]                	mov	si,ARG+ARG_UNIT.argforcombuf
 24985                                  PCONT:
 24986 000035CA BF[87A7]                	mov	di,TPBUF	; destination is temporary token buffer
 24987 000035CD B320                    	mov	bl,' '		; no special delimiter, for now
 24988                                  PARSELOOP:
 24989 000035CF 8936[09A8]              	mov	[COMPTR],si	; save ptr into original command buffer
 24990 000035D3 31ED                    	xor	bp,bp		; switch information put here by cparse
 24991 000035D5 C606[23A2]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 24992 000035DA E851F5                  	call	scanoff		; skip leading blanks...
 24993 000035DD E8B412                  	call	cparse		; byte off a token (args in SI, DI, BL)
 24994 000035E0 730B                    	jnb	short MORE_PRSE
 24995 000035E2 09ED                    	or	bp,bp		; Check for trailing switch character
 24996 000035E4 7403                    	jz	short PARSEDONE
 24997 000035E6 E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 24998                                  				;   typical cause of this is that a
 24999                                  				;   switch char IMMEDIATELY preceeds
 25000                                  				;   the CR. We have an argument, but it
 25001                                  				;   is sort of an error.
 25002                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 25003                                  	; 01/03/2023
 25004                                  PARSEDONE:
 25005 000035E9 9D                      	popf
 25006 000035EA F8                      	clc
 25007 000035EB EB0C                    	jmp	short PARSE_EXIT
 25008                                  
 25009                                  MORE_PRSE:
 25010 000035ED C606[95A0]02            	mov	byte [cpyflag],2
 25011                                  				; tell CPARSE that 1st token is done
 25012 000035F2 E80B00                  	call	newarg		; add to argv array (CX has char count)
 25013 000035F5 73D8                    	jnb	short PARSELOOP	; was everything OK?
 25014                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 25015                                  	; 01/03/2023
 25016                                  ;PARSEDONE:
 25017                                  	;popf
 25018                                  	;clc
 25019                                  	;jmp	short PARSE_EXIT
 25020                                  
 25021                                  PARSE_ERROR:			; error entry (er, exit) point
 25022 000035F7 9D                      	popf
 25023 000035F8 F9                      	stc
 25024                                  PARSE_EXIT:			; depend on not changing CF
 25025 000035F9 5E                      	pop	si
 25026 000035FA 5F                      	pop	di
 25027 000035FB 5A                      	pop	dx
 25028 000035FC 59                      	pop	cx
 25029 000035FD 5B                      	pop	bx
 25030 000035FE 58                      	pop	ax
 25031 000035FF C3                      	retn
 25032                                  
 25033                                  ; =============== S U B	R O U T	I N E =======================================
 25034                                  
 25035                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 25036                                  ;
 25037                                  ; ENTRY:
 25038                                  ;   BH			argflags
 25039                                  ;   CX			character count in argstring
 25040                                  ;   DI			pointer to argstring
 25041                                  ;   comptr		ptr to starting loc of current token in original command
 25042                                  ;   [STARTEL]		cparse's answer to where the last element starts
 25043                                  ; EXIT:
 25044                                  ;   argbufptr		points to next free section of argbuffer
 25045                                  ;   arg.argbuf		contains null-terminated argument strings
 25046                                  ;   arg.argvcnt 	argument count
 25047                                  ;   arg.argv[]		array of flags and pointers
 25048                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 25049                                  ;   CF			set if error
 25050                                  ;   AL			carry set:  error code; otherwise, zero
 25051                                  
 25052                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25053                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25054                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM 
 25055                                  	;	     & Retro DOS v4.2 COMMAND.COM (2024 modification)
 25056                                  newarg:
 25057 00003600 53                      	push	bx
 25058 00003601 51                      	push	cx
 25059 00003602 52                      	push	dx
 25060 00003603 57                      	push	di
 25061 00003604 56                      	push	si
 25062 00003605 9C                      	pushf
 25063 00003606 E86200                  	call	arg_switch		; if it's a switch, record switch info
 25064                                  					; LEAVE SWITCH ON COMMAND LINE!!
 25065                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 25066                                  
 25067                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 25068 00003609 833E[01A5]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 25069 0000360E 7D50                    	jge	short to_many_args	; exceeded array limits
 25070 00003610 88FE                    	mov	dh,bh			
 25071                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 25072 00003612 8B1E[01A5]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 25073                                  	;inc	word [ARG_ARGVCNT]
 25074 00003616 FF06[01A5]              	inc	word [ARG+ARG_UNIT.argvcnt]
 25075                                  	;mov	ax,ARG_ARGV
 25076 0000361A B8[41A2]                	mov	ax,ARG+ARG_UNIT.argv
 25077 0000361D E87E00                  	call	argv_calc		; convert offset to pointer
 25078                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 25079                                  	;mov	word [bx+7],0
 25080 00003620 C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 25081                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 25082                                  	;mov	[bx+5],cx
 25083 00003625 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 25084                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 25085                                  	;mov	[bx+2],dh
 25086 00003628 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 25087 0000362B 8B36[85A7]              	mov	si,[ARGBUF_PTR]
 25088                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 25089                                  	;mov	[bx+ARGV_ELE.argpointer],si
 25090 0000362F 8937                    	mov	[bx],si			
 25091 00003631 0336[E7A1]              	add	si,[STARTEL]		; save startel from new location
 25092 00003635 29FE                    	sub	si,di			; form pointer into argbuf
 25093                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 25094                                  	;mov	[bx+3],si
 25095 00003637 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 25096 0000363A 8B36[09A8]              	mov	si,[COMPTR]
 25097                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 25098                                  	;mov	[bx+9],si
 25099 0000363E 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 25100 00003641 89FE                    	mov	si,di			; now save argstring in argbuffer
 25101 00003643 8B3E[85A7]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 25102                                  
 25103                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25104                                  ; PCDOS 7.1 COMMAND.COM
 25105                                  %if 0
 25106                                  	add	di,cx			; sure we're not about to run off
 25107                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 25108                                  	;;cmp	di,ARG_ARGBUF+255
 25109                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 25110                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25111                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 25112                                  	sub	di,cx
 25113                                  %else
 25114                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25115                                  	;mov	bx,ARG_ARGBUF+127
 25116 00003647 BB[84A5]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25117 0000364A 29FB                    	sub	bx,di	; sure we're not about to run off
 25118 0000364C 39CB                    	cmp	bx,cx
 25119 0000364E 7302                    	jnb	short newarg_@
 25120 00003650 89D9                    	mov	cx,bx	
 25121                                  %endif
 25122                                  
 25123                                  newarg_@:	; 27/07/2024
 25124 00003652 FC                      	cld
 25125 00003653 F3A4                    	rep	movsb
 25126 00003655 B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 25127 00003657 AA                      	stosb
 25128 00003658 893E[85A7]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 25129                                  newarg_done:
 25130 0000365C 9D                      	popf
 25131 0000365D F8                      	clc
 25132 0000365E EB05                    	jmp	short newarg_exit
 25133                                  
 25134                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25135                                  ; PCDOS 7.1 COMMAND.COM
 25136                                  %if 0
 25137                                  to_many_args:
 25138                                  	mov	ax,1
 25139                                  	jmp	short newarg_error
 25140                                  buf_oflow:
 25141                                  	mov	ax,2
 25142                                  %else
 25143                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25144                                  ;buf_oflow:
 25145                                  ;	; 27/07/2024
 25146                                  ;	; PCDOS 7.1 COMMAND.COM
 25147                                  ;	sub	di,cx
 25148                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 25149                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25150                                  ;	sub	cx,di
 25151                                  ;	jmp     short newarg_@
 25152                                  to_many_args:
 25153 00003660 B80100                  	mov	ax,1
 25154                                  %endif
 25155                                  
 25156                                  newarg_error:
 25157 00003663 9D                      	popf
 25158 00003664 F9                      	stc
 25159                                  newarg_exit:
 25160 00003665 5E                      	pop	si
 25161 00003666 5F                      	pop	di
 25162 00003667 5A                      	pop	dx
 25163 00003668 59                      	pop	cx
 25164 00003669 5B                      	pop	bx
 25165 0000366A C3                      	retn
 25166                                  
 25167                                  ; =============== S U B	R O U T	I N E =======================================
 25168                                  
 25169                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 25170                                  ; event that it is, and we can recognize
 25171                                  ;
 25172                                  ; ENTRY:
 25173                                  ;   As in <newarg>.
 25174                                  ; EXIT:
 25175                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 25176                                  ; NOTE(S):
 25177                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 25178                                  ;	on the order of definition in the <switch_list> variable and the
 25179                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 25180                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 25181                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 25182                                  ;   *	The <switch_list> declared below is redundant to one declared in
 25183                                  ;	TDATA.ASM, and used in TCODE.ASM.
 25184                                  ;   *	An ugly routine.
 25185                                  
 25186                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 25187                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25188                                  arg_switch:
 25189 0000366B 50                      	push	ax
 25190 0000366C 53                      	push	bx
 25191 0000366D 51                      	push	cx
 25192 0000366E 57                      	push	di
 25193 0000366F 9C                      	pushf
 25194 00003670 F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 25195 00003673 741C                    	jz	short arg_no_switch0
 25196 00003675 833E[07A8]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 25197 0000367A 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 25198 0000367C 8B1E[07A8]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 25199                                  	;mov	ax,offset TRANGROUP:arg.argv
 25200                                  	;mov	ax,ARG_ARGV
 25201 00003680 B8[41A2]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 25202 00003683 E81800                  	call	argv_calc
 25203                                  	;or	[BX].argsw_word,BP
 25204                                  	;or	[bx+7],bp
 25205 00003686 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 25206                                  	;or	arg.argswinfo,BP
 25207                                  	;or	[ARG_ARGSWINFO],bp
 25208 00003689 092E[03A5]              	or	[ARG+ARG_UNIT.argswinfo],bp
 25209                                  arg_yes_switch:
 25210 0000368D 9D                      	popf
 25211 0000368E F9                      	stc
 25212 0000368F EB08                    	jmp	short arg_switch_exit
 25213                                  
 25214                                  arg_no_switch0:
 25215                                  	;mov	ax,[ARG_ARGVCNT]
 25216 00003691 A1[01A5]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 25217 00003694 A3[07A8]                	mov	[LASTARG],ax
 25218                                  arg_no_switch1:
 25219 00003697 9D                      	popf
 25220 00003698 F8                      	clc
 25221                                  arg_switch_exit:
 25222 00003699 5F                      	pop	di
 25223 0000369A 59                      	pop	cx
 25224 0000369B 5B                      	pop	bx
 25225 0000369C 58                      	pop	ax
 25226 0000369D C3                      	retn
 25227                                  
 25228                                  ; =============== S U B	R O U T	I N E =======================================
 25229                                  
 25230                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 25231                                  ; the supplied array.  Method used for computing the address is:
 25232                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 25233                                  ; ENTRY:
 25234                                  ;   AX	    --	    base of array
 25235                                  ;   BX	    --	    array index
 25236                                  ; EXIT:
 25237                                  ;   BX	    --	    byte offset
 25238                                  
 25239                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 25240                                  argv_calc:
 25241 0000369E 50                      	push	ax		; Save base
 25242 0000369F 88D8                    	mov	al,bl		; al = array index
 25243                                  	;mov	bl,11
 25244 000036A1 B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 25245 000036A3 F6E3                    	mul	bl		; ax = base offset
 25246 000036A5 5B                      	pop	bx		; Get base
 25247 000036A6 01D8                    	add	ax,bx		; Add in base offset
 25248 000036A8 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 25249 000036A9 C3                      	retn
 25250                                  
 25251                                  ; ---------------------------------------------------------------------------
 25252                                  	
 25253                                  	;db 0Ah dup(0)
 25254                                  	;times 10 db 0
 25255                                  
 25256 000036AA 90<rep 6h>              align 16
 25257                                  
 25258                                  ;============================================================================
 25259                                  ; PATH1.ASM, MSDOS 6.0, 1991
 25260                                  ;============================================================================
 25261                                  ; 03/10/2018 - Retro DOS v3.0
 25262                                  
 25263                                  ;----------------------------------------------------------------------------
 25264                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 25265                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 25266                                  ;    given a pathname, attempts to find a corresponding executable or batch
 25267                                  ;    file on disk. Directories specified in the user's search path will be
 25268                                  ;    searched for a matching file, if a match is not found in the current
 25269                                  ;    directory and if the pathname is actually only an MSDOS filename.
 25270                                  ;    <Path_Search> assumes that the parsed command name can be found in
 25271                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 25272                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 25273                                  ;    information could be placed in argv[0], or <Path_Search> could be
 25274                                  ;    (easily) modified to make no assumptions about where its input is found.
 25275                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 25276                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 25277                                  ;    allocated memory. This is handy for for-loop processing, and anything
 25278                                  ;    else that wants to save the whole shebang and then process other command
 25279                                  ;    lines.
 25280                                  ;
 25281                                  ; Alan L, OS/MSDOS				    August 15, 1983
 25282                                  ;
 25283                                  ; ENTRY:
 25284                                  ;   <Path_Search>:	    argv[0].
 25285                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 25286                                  ; EXIT:
 25287                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 25288                                  ;   <Save_Args>:	    success flag, segment address of new memory
 25289                                  ; NOTE(S):
 25290                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 25291                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 25292                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 25293                                  ;	does not function as specified; see <Parseline> for more details.
 25294                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 25295                                  ;	need to know about. This extra information is stored in a switch_flag
 25296                                  ;	word with each command-line argument; the switches themselves will not
 25297                                  ;	appear in the resulting arg structure.
 25298                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 25299                                  ;----------------------------------------------------------------------------
 25300                                  
 25301                                  ; =============== S U B	R O U T	I N E =======================================
 25302                                  
 25303                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 25304                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 25305                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 25306                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 25307                                  ; have a match, either in the current working directory if we were handed
 25308                                  ; a filename, or in the specified directory, given a pathname. If this call
 25309                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 25310                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 25311                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 25312                                  ; either the first invocation of search or on one of the succeeding calls
 25313                                  ; sets up the appropriate information for copying the successful pathname
 25314                                  ; prefix (if any) into the result buffer, followed by the successful filename
 25315                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 25316                                  ;
 25317                                  ; ENTRY:
 25318                                  ;   argv[0]		--	command name and associated information
 25319                                  ; EXIT:
 25320                                  ;   AX			--	non-zero indicates type of file found
 25321                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 25322                                  ; NOTE(S):
 25323                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 25324                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 25325                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 25326                                  ;	if search returns an .exe or .bat.
 25327                                  ;   5)	Clobbers dma address.
 25328                                  
 25329                                  PBUFLEN 	EQU	128		; length of EXECPATH
 25330                                  PATH_SEP_CHAR	EQU	';'
 25331                                  
 25332                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 25333                                  
 25334                                  	;special_delim equ 128
 25335                                  	;path_sep equ 4
 25336                                  	;wildcard equ 2
 25337                                  	;sw_flag  equ 1
 25338                                  
 25339                                  ;----------------------------------------------------------------------------
 25340                                  
 25341                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 25342                                  
 25343                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25344                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 25345                                  
 25346                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25347                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 387Bh
 25348                                  
 25349                                  path_search:
 25350 000036B0 53                      	push	bx
 25351 000036B1 51                      	push	cx
 25352 000036B2 52                      	push	dx		; could use a "stack 'em" instruction
 25353 000036B3 56                      	push	si
 25354 000036B4 57                      	push	di
 25355 000036B5 55                      	push	bp
 25356 000036B6 9C                      	pushf
 25357                                  
 25358                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 25359                                  	;test	byte [ARGV0_ARG_FLAGS],3
 25360 000036B7 F606[43A2]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 25361 000036BC 7403                    	jz	short path_search_ok
 25362                                  path_failure_jmp:
 25363 000036BE E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 25364                                  
 25365                                  path_search_ok:
 25366 000036C1 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 25367 000036C4 BA[0BA8]                	mov	dx,FBUF		; clobber old dma value with
 25368 000036C7 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 25369 000036CA CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 25370                                  			; DS:DX	-> disk	transfer buffer
 25371 000036CC 06                      	push	es
 25372 000036CD E88DF1                  	call	find_path	; get a handle (ES:DI) on user path
 25373 000036D0 8C06[36A8]              	mov	[pathinfo+0],es	; and squirrel it away
 25374 000036D4 893E[38A8]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 25375 000036D8 893E[3AA8]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 25376 000036DC 07                      	pop	es
 25377                                  	
 25378 000036DD BB8000                  	mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 25379 000036E0 BE[1B9D]                	mov	si,EXECPATH
 25380 000036E3 E88002                  	call	STRIP
 25381 000036E6 72D6                    	jc	short path_failure_jmp ; if possible, of course
 25382                                  		
 25383 000036E8 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 25384 000036EA C706[8BA8][2C92]        	mov	word [search_error],baddrv_ptr
 25385 000036F0 E89F01                  	call	PSEARCH		; must do at least one search
 25386 000036F3 09C0                    	or	ax,ax		; find anything?
 25387 000036F5 7469                    	jz	short path_noinit
 25388                                  				; failure ... search farther
 25389 000036F7 89C5                    	mov	bp,ax		; success... save filetype code
 25390 000036F9 BF[1B9D]                	mov	di,EXECPATH
 25391                                  	;mov	si,ds:arg.argv[0].argpointer
 25392                                  	;mov	si,[ARG_ARGV]
 25393 000036FC 8B36[41A2]              	mov	si,[ARG+ARGV_ELE.argpointer]
 25394                                  	;mov	cx,ds:arg.argv[0].argstartel
 25395                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 25396 00003700 8B0E[44A2]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 25397 00003704 29F1                    	sub	cx,si		; compute prefix bytes to copy
 25398                                  
 25399                                  ; We have the number of bytes in the prefix (up to the final component).
 25400                                  ; We need to form the complete pathname including leading drive and current
 25401                                  ; directory.
 25402                                  ;
 25403                                  ; Is there a drive letter present?
 25404                                  
 25405 00003706 B43A                    	mov	ah,':'
 25406 00003708 83F902                  	cmp	cx,2		; room for drive letter?
 25407 0000370B 7205                    	jb	short adddrive	; no, stick it in
 25408 0000370D 386401                  	cmp	[si+1],	ah	; colon present?
 25409 00003710 7408                    	je	short movedrive	; yes, just move it
 25410                                  adddrive:
 25411 00003712 A0[059E]                	mov	al,[CURDRV]	; get current drive
 25412 00003715 0441                    	add	al,'A'		; convert to uppercase letter
 25413 00003717 AB                      	stosw			; store d:
 25414 00003718 EB05                    	jmp	short checkpath
 25415                                  
 25416                                  movedrive:
 25417 0000371A AD                      	lodsw			; move d:
 25418 0000371B AB                      	stosw
 25419 0000371C 83E902                  	sub	cx,2		; 2 bytes less to move
 25420                                  checkpath:
 25421 0000371F 0C20                    	or	al,20h
 25422 00003721 88C2                    	mov	dl,al
 25423                                  	;sub	dl,60h
 25424 00003723 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 25425                                  
 25426                                  ; Stick in beginning path char
 25427                                  
 25428 00003726 A0[3CA8]                	mov	al,[psep_char]
 25429 00003729 AA                      	stosb
 25430                                  
 25431                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 25432                                  ; Otherwise, get current dir for DL.
 25433                                  
 25434 0000372A 83F901                  	cmp	cx,1		; is there room for path char?
 25435 0000372D 720A                    	jb	short addpath	; no, go add path
 25436 0000372F AC                      	lodsb
 25437 00003730 49                      	dec	cx
 25438 00003731 3A06[3CA8]              	cmp	al,[psep_char]	; is there a path separator?
 25439 00003735 741C                    	je	short movepath	; yes, go move remainder of path
 25440 00003737 41                      	inc	cx
 25441 00003738 4E                      	dec	si		; undo the lodsb
 25442                                  addpath:
 25443 00003739 56                      	push	si
 25444 0000373A 89FE                    	mov	si,di		; remainder of buffer
 25445 0000373C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25446 0000373F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25447                                  			; DL = drive (0=default,1=A,etc.)
 25448                                  			; DS:SI	points to 64-byte buffer area
 25449                                  
 25450                                  ; The previous current dir will succeed a previous find_first already worked.
 25451                                  ;
 25452                                  ; Find end of string.
 25453                                  
 25454 00003741 89F7                    	mov	di,si
 25455 00003743 5E                      	pop	si
 25456 00003744 A0[3CA8]                	mov	al,[psep_char]
 25457 00003747 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 25458 0000374A 7407                    	jz	short movepath	; yes, no need for path char
 25459                                  scanend:
 25460                                  	;cmp	byte [di],0	; end of string?
 25461                                  	;jz	short foundend
 25462                                  	;inc	di
 25463                                  	;jmp	short scanend
 25464                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 25465 0000374C 47                      	inc	di
 25466 0000374D 803D00                  	cmp	byte [di],0
 25467 00003750 75FA                    	jnz	short scanend
 25468                                  
 25469                                  ; Stick in a trailing path char.
 25470                                  
 25471                                  foundend:
 25472 00003752 AA                      	stosb
 25473                                  
 25474                                  ; Move remaining part of path. Skip leading path char if present.
 25475                                  
 25476                                  movepath:
 25477 00003753 3804                    	cmp	[si],al		; first char a path char?
 25478 00003755 7502                    	jne	short copypath
 25479                                  	; 26/04/2023
 25480 00003757 46                      	inc	si		; move past leading char
 25481 00003758 49                      	dec	cx		; drop from count
 25482                                  copypath:
 25483 00003759 E302                    	jcxz	_copydone	; no chars to move!
 25484 0000375B F3A4                    	rep	movsb
 25485                                  _copydone:
 25486 0000375D E9A100                  	jmp	path_success
 25487                                  				; run off and form complete pathname
 25488                                  path_noinit:
 25489                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 25490                                  	;test	byte [ARGV0_ARG_FLAGS],4
 25491 00003760 F606[43A2]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 25492 00003765 751B                    	jnz	short path_failure
 25493                                  				; complete pathname specified ==> fail
 25494                                  	;mov	bh,';'
 25495 00003767 B73B                    	mov	bh,PATH_SEP_CHAR
 25496                                  				; semicolon terminates pathstring
 25497                                  	;mov	dx,ds:arg.argv[0].argstartel
 25498                                  				; this is where the last element starts
 25499                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 25500 00003769 8B16[44A2]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 25501                                  	;sub	dx,ds:arg.argv[0].argpointer
 25502                                  				; form pointer into EXECPATH,
 25503                                  	;sub	dx,[ARG_ARGV]
 25504 0000376D 2B16[41A2]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 25505 00003771 81C2[1B9D]              	add	dx,EXECPATH	; skipping over drive spec, if any
 25506                                  path_loop:
 25507 00003775 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 25508 00003778 89C5                    	mov	bp,ax		; save filetype code
 25509 0000377A 9F                      	lahf			; save flags, just in case
 25510 0000377B 09ED                    	or	bp,bp		; did path_crunch find anything?
 25511 0000377D 7508                    	jnz	short path_found
 25512 0000377F 9E                      	sahf			; see? needed those flags, after all!
 25513 00003780 73F3                    	jnc	short path_loop	; is there anything left to the path?
 25514                                  path_failure:
 25515 00003782 31C0                    	xor	ax,ax
 25516 00003784 E98700                  	jmp	path_exit
 25517                                  
 25518                                  path_found:				; pathinfo[] points to winner
 25519 00003787 BF[1B9D]                	mov	di,EXECPATH
 25520                                  	;mov	cx,pathinfo[4]
 25521 0000378A 8B0E[3AA8]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 25522                                  	;mov	si,pathinfo[2]
 25523 0000378E 8B36[38A8]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 25524                                  
 25525                                  ;	BAS Nov 20/84
 25526                                  ;   Look at the pathname and expand . and .. if they are the first element
 25527                                  ;   in the pathname (after the drive letter)
 25528                                  
 25529 00003792 06                      	push	es
 25530                                  	;push	pathinfo[0]
 25531 00003793 FF36[36A8]              	push	word [pathinfo+0]
 25532 00003797 07                      	pop	es
 25533                                  ;SR;
 25534                                  ; Oops! Gets fooled if path= \;..
 25535                                  ; We should also check if a drive letter is really present
 25536                                  ;
 25537 00003798 26807C022E              	cmp	byte [es:si+2],'.'
 25538                                  				; Look for Current dir at start of path
 25539 0000379D 7534                    	jne	short path_cpy
 25540                                  
 25541                                  	; 18/03/2023
 25542                                  	; MSDOS 6.0
 25543 0000379F 26807C013A              	cmp	byte [es:si+1],':'
 25544                                  				; does path have drive letter?
 25545 000037A4 752D                    	jne	short path_cpy	; no, copy the path string
 25546                                  
 25547 000037A6 51                      	push	cx		; Save pointer to end of string
 25548                                  	;mov	al,[es:si]
 25549                                  	;mov	[di],al		; Copy drive letter, :, and root char
 25550                                  	;mov	al,[es:si+1]	; to EXECPATH
 25551                                  	;mov	[di+1],al
 25552                                  	; 05/05/2023
 25553 000037A7 268B04                  	mov	ax,[es:si]
 25554 000037AA 8905                    	mov	[di],ax
 25555 000037AC A0[3CA8]                	mov	al,[psep_char]
 25556 000037AF 884502                  	mov	[di+2],	al
 25557 000037B2 56                      	push	si		; Save pointer to begining of string
 25558 000037B3 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 25559 000037B6 80CA20                  	or	dl,20h
 25560                                  	;sub	dl,60h
 25561 000037B9 80EA60                  	sub	dl,'a'-1
 25562 000037BC 89FE                    	mov	si,di		; pointer to EXECPATH
 25563 000037BE 83C603                  	add	si,3		; Don't wipe out drive and root info
 25564 000037C1 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25565 000037C4 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25566                                  			; DL = drive (0=default,1=A,etc.)
 25567                                  			; DS:SI	points to 64-byte buffer area
 25568 000037C6 E8F3F9                  	call	dstrlen		; Determine length of present info
 25569 000037C9 01CE                    	add	si,cx		; Don't copy over drive and root info
 25570 000037CB 4E                      	dec	si
 25571 000037CC 89F7                    	mov	di,si		; Point to end of target string
 25572 000037CE 5E                      	pop	si		; Restore pointer to begining of string
 25573 000037CF 83C603                  	add	si,3		; Point past drive letter, :, .
 25574 000037D2 59                      	pop	cx		; Restore pointer to end of string
 25575                                  path_cpy:
 25576 000037D3 07                      	pop	es
 25577 000037D4 29F1                    	sub	cx,si		; yields character count
 25578 000037D6 1E                      	push	ds		; time to switch segments
 25579 000037D7 FF36[36A8]              	push	word [pathinfo+0]
 25580                                  				; string lives in this segment
 25581 000037DB 1F                      	pop	ds
 25582 000037DC FC                      	cld
 25583                                  
 25584                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25585                                  	; MSDOS 5.0 (& MSDOS 5.0)
 25586                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 25587                                  kloop:
 25588 000037DD AC                      	lodsb			;AN000;  3/3/KK
 25589 000037DE AA                      	stosb			;AN000;  3/3/KK
 25590 000037DF E82DF1                  	call	testkanj	;AN000;  3/3/KK
 25591 000037E2 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 25592 000037E4 49                      	dec	cx		;AN000;  3/3/KK
 25593 000037E5 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 25594 000037E7 A4                      	movsb			;AN000;  3/3/KK
 25595 000037E8 49                      	dec	cx		;AN000;  3/3/KK
 25596 000037E9 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 25597 000037EC 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 25598                                  popdone:			;AN000;  3/3/KK
 25599 000037EE 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 25600 000037EF A0[3CA8]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 25601 000037F2 EB0C                    	jmp	short path_store
 25602                                  				;AN000;  3/3/KK
 25603                                  _notkanj1:
 25604                                  	; 26/04/2023
 25605 000037F4 E2E7                    	loop	kloop
 25606 000037F6 1F                      	pop	ds		; return to our segment
 25607 000037F7 4F                      	dec	di		; overwrite terminator
 25608 000037F8 A0[3CA8]                	mov	al,[psep_char]	; with a pathname separator
 25609 000037FB 3A45FF                  	cmp	al,[di-1]
 25610 000037FE 7401                    	je	short path_success
 25611                                  path_store:
 25612 00003800 AA                      	stosb
 25613                                  path_success:
 25614 00003801 BE[3EA8]                	mov	si,search_best_buf
 25615 00003804 31C9                    	xor	cx,cx
 25616                                  path_succ_loop:
 25617 00003806 AC                      	lodsb			; append winning filename to path
 25618 00003807 AA                      	stosb			; (including terminating null)
 25619 00003808 08C0                    	or	al,al
 25620 0000380A 75FA                    	jnz	short path_succ_loop
 25621 0000380C 89E8                    	mov	ax,bp		; retrieve filetype code
 25622                                  path_exit:
 25623 0000380E 9D                      	popf
 25624 0000380F 5D                      	pop	bp
 25625 00003810 5F                      	pop	di
 25626 00003811 5E                      	pop	si		; chill out...
 25627 00003812 5A                      	pop	dx
 25628 00003813 59                      	pop	cx
 25629 00003814 5B                      	pop	bx
 25630 00003815 C3                      	retn
 25631                                  
 25632                                  ; =============== S U B	R O U T	I N E =======================================
 25633                                  
 25634                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 25635                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 25636                                  ;
 25637                                  ; ENTRY:
 25638                                  ; EXIT:
 25639                                  ; NOTE(S):
 25640                                  ;   *	Uses <psep_char>, defined in <path_search>.
 25641                                  
 25642                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25643                                  STORE_PCHAR:
 25644 00003816 50                      	push	ax
 25645 00003817 B02F                    	mov	al,'/'		; is the pathname-element separator
 25646 00003819 E8A0F3                  	call	pathchrcmp	; a regular slash?
 25647 0000381C 7402                    	jz	short STORE_SLASH
 25648                                  				; if yes, remember slash
 25649 0000381E B05C                    	mov	al,'\'
 25650                                  	; 18/03/2023
 25651                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 25652                                  	;pop	ax
 25653                                  	;retn
 25654                                  STORE_SLASH:
 25655 00003820 A2[3CA8]                	mov	[psep_char],al
 25656 00003823 58                      	pop	ax
 25657 00003824 C3                      	retn
 25658                                  
 25659                                  ; =============== S U B	R O U T	I N E =======================================
 25660                                  
 25661                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 25662                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 25663                                  ; additional separator to use for breaking up the path-string. Null is the
 25664                                  ; default. Once the user-string has been formed, search is invoked to see
 25665                                  ; what's out there.
 25666                                  ;
 25667                                  ; ENTRY:
 25668                                  ;   BH			--	additional terminator character
 25669                                  ;   SI			--	pointer into pathstring to be dissected
 25670                                  ;   DX			--	pointer to stripped filename
 25671                                  ; EXIT:
 25672                                  ;   AX			--	non-zero (file type), zero (nothing found)
 25673                                  ;   SI			--	moves along pathstring from call to call
 25674                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 25675                                  ;   [tpbuf]		--	clobbered
 25676                                  ; NOTE(S):
 25677                                  ;   *	Implicit in this code is the ability to specify when to search
 25678                                  ;	the current directory (if at all) through the PATH defined by
 25679                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 25680                                  ;	current directory before the bin and etc directories of drive c).
 25681                                  
 25682                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25683                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 25684                                  
 25685                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25686                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:39FEh
 25687                                  	
 25688                                  path_crunch:
 25689 00003825 53                      	push	bx
 25690 00003826 51                      	push	cx
 25691 00003827 52                      	push	dx
 25692 00003828 57                      	push	di
 25693 00003829 56                      	push	si
 25694                                  	;pushf	; ** ; 18/03/2023
 25695 0000382A E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 25696 0000382D BF[87A7]                	mov	di,TPBUF	; destination of concatenated string
 25697 00003830 8B36[3AA8]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 25698 00003834 8936[38A8]              	mov	[pathinfo+2],si	; becomes "old" pointer
 25699 00003838 1E                      	push	ds		; save old segment pointer
 25700 00003839 FF36[36A8]              	push	word [pathinfo+0]
 25701                                  				; replace with pointer to userpath's
 25702 0000383D 1F                      	pop	ds		; segment
 25703                                  	; 26/04/2023
 25704 0000383E 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK
 25705                                  path_cr_copy:
 25706 00003840 AC                      	lodsb			; get a pathname byte
 25707 00003841 08C0                    	or	al,al		; check for terminator(s)
 25708 00003843 7414                    	jz	short path_seg	; null terminates segment & pathstring
 25709 00003845 38F8                    	cmp	al,bh
 25710 00003847 7410                    	je	short path_seg	; BH terminates a pathstring segment
 25711                                  	;
 25712                                  	; 18/03/2023
 25713                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 25714 00003849 E8C3F0                  	call	testkanj	;AN000; 3/3/KK
 25715 0000384C 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 25716 0000384E AA                      	stosb			;AN000; 3/3/KK
 25717 0000384F A4                      	movsb			;AN000; 3/3/KK
 25718 00003850 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK
 25719 00003852 EBEC                    	jmp	short path_cr_copy
 25720                                  _notkanj2:
 25721 00003854 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 25722                                  	;
 25723 00003856 AA                      	stosb
 25724 00003857 EBE7                    	jmp	short path_cr_copy
 25725                                  
 25726                                  path_seg:
 25727 00003859 1F                      	pop	ds		; restore old data segment
 25728 0000385A 8936[3AA8]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 25729 0000385E 88C3                    	mov	bl,al		; remember if we saw null or not...
 25730                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 25731 00003860 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 25732 00003862 81FF[87A7]              	cmp	di,TPBUF	; was there really anything in pathstr?
 25733 00003866 7421                    	je	short path_cr_leave
 25734                                  				; if nothing was copied, pathstr empty
 25735                                  path_cr_look:
 25736 00003868 A0[3CA8]                	mov	al,[psep_char]	; form complete pathname
 25737                                  	;
 25738                                  	; 18/03/2023
 25739                                  	; MSDOS 6.0
 25740 0000386B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 25741 0000386D 7505                    	jnz	short path_cr_store
 25742                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 25743                                  	;
 25744 0000386F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 25745 00003872 7401                    	je	short path_cr_l1
 25746                                  path_cr_store:
 25747 00003874 AA                      	stosb
 25748                                  path_cr_l1:
 25749 00003875 89D6                    	mov	si,dx
 25750                                  path_cr_l2:
 25751 00003877 AC                      	lodsb			; tack the stripped filename onto
 25752 00003878 AA                      	stosb			; the end of the path, up to and
 25753 00003879 08C0                    	or	al,al		; including the terminating null
 25754 0000387B 75FA                    	jnz	short path_cr_l2
 25755 0000387D BA[87A7]                	mov	dx,TPBUF	; and look for an appropriate file...
 25756 00003880 C706[8BA8][2893]        	mov	word [search_error],BADPMES_PTR
 25757                                  	;invoke search
 25758 00003886 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 25759                                  
 25760                                  	; 18/03/2023
 25761                                  ;path_cr_leave:
 25762                                  	;or	bl,bl		; did we finish off the pathstring?
 25763                                  	;jz	short path_cr_empty
 25764                                  	;			; null in BL means all gone...
 25765                                  	;popf	; **		; otherwise, plenty left
 25766                                  	;clc
 25767                                  	;jmp	short path_cr_exit
 25768                                  ;path_cr_empty:
 25769                                  	;popf	; **
 25770                                  	;stc
 25771                                  ;path_cr_exit:
 25772                                  
 25773                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25774                                  path_cr_leave:
 25775                                  	;popf ; ** ; 18/03/2023
 25776 00003889 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 25777                                  
 25778                                  path_cr_exit:
 25779 0000388C 5E                      	pop	si
 25780 0000388D 5F                      	pop	di
 25781 0000388E 5A                      	pop	dx
 25782 0000388F 59                      	pop	cx
 25783 00003890 5B                      	pop	bx
 25784 00003891 C3                      	retn
 25785                                  
 25786                                  ;============================================================================
 25787                                  ; PATH2.ASM, MSDOS 6.0, 1991
 25788                                  ;============================================================================
 25789                                  ; 02/10/2018 - Retro DOS v3.0
 25790                                  
 25791                                  ;----------------------------------------------------------------------------
 25792                                  ;   SEARCH, when given a pathname, attempts to find a file with
 25793                                  ; one of the following extensions: .com, .exe, .bat (highest to
 25794                                  ; lowest priority). Where conflicts arise, the extension with
 25795                                  ; the highest priority is favored.
 25796                                  ; ENTRY:
 25797                                  ;   DX		--	pointer to null-terminated pathname
 25798                                  ;   fbuf	--	dma buffer for findfirst/next
 25799                                  ; EXIT:
 25800                                  ;   AX		--	8)  file found with .com extension
 25801                                  ;			4)  file found with .exe extension
 25802                                  ;			2)  file found with .bat extension
 25803                                  ;			0)  no such file to be found
 25804                                  ;   (if AX is non-zero:)
 25805                                  ;   [search_best]	identical to AX
 25806                                  ;   [search_best_buf]	null-terminated filename
 25807                                  ; NOTES:
 25808                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 25809                                  ;---------------
 25810                                  ; CONSTANTS:
 25811                                  ;---------------
 25812                                  SEARCH_FILE_NOT_FOUND	EQU	0
 25813                                  SEARCH_COM		EQU	8
 25814                                  SEARCH_EXE		EQU	4
 25815                                  SEARCH_BAT		EQU	2
 25816                                  FNAME_LEN		EQU	8
 25817                                  FNAME_MAX_LEN		EQU	13
 25818                                  DOT			EQU	'.'
 25819                                  WILDCHAR		EQU	'?'
 25820                                  
 25821                                  
 25822                                  ; =============== S U B	R O U T	I N E =======================================
 25823                                  
 25824                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 25825                                  
 25826                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25827                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 25828                                  
 25829                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25830                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3A73h
 25831                                  PSEARCH:
 25832 00003892 51                      	push	cx
 25833 00003893 52                      	push	dx
 25834 00003894 57                      	push	di
 25835 00003895 56                      	push	si
 25836                                  	;pushf	; ** ; 18/03/2023
 25837 00003896 52                      	push	dx		; check drivespec (save pname ptr)
 25838 00003897 89D7                    	mov	di,dx		; working copy of pathname
 25839 00003899 BE[4BA8]                	mov	si,search_curdir_buf
 25840 0000389C 31D2                    	xor	dx,dx		; zero means current drive
 25841 0000389E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 25842 000038A2 7508                    	jne	short SEARCH_DIR_CHECK
 25843 000038A4 8A15                    	mov	dl,[di]		; get the drive byte
 25844 000038A6 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 25845 000038A9 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 25846                                  SEARCH_DIR_CHECK:
 25847 000038AC B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25848 000038AF CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25849                                  			; DL = drive (0=default,1=A,etc.)
 25850                                  			; DS:SI	points to 64-byte buffer area
 25851 000038B1 5A                      	pop	dx		; directory? If we can't we'll
 25852 000038B2 724C                    	jc	short SEARCH_INVALID_DRIVE
 25853                                  				; assume it's a bad drive...
 25854 000038B4 B91300                  	mov	cx,search_attr	; 13h
 25855                                  				; filetypes to search for
 25856 000038B7 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 25857 000038BA CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 25858                                  			; CX = search attributes
 25859                                  			; DS:DX	-> ASCIZ filespec
 25860                                  			; (drive,path, and wildcards allowed)
 25861 000038BC 7249                    	jc	short SEARCH_NO_FILE
 25862 000038BE C606[3DA8]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 25863 000038C3 C606[3EA8]00            	mov	byte [search_best_buf],ANULL
 25864                                  				; 0 ; nothing's been found, yet
 25865                                  SEARCH_LOOP:
 25866 000038C8 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 25867 000038CB 3A06[3DA8]              	cmp	al,[search_best]
 25868                                  				; better than what we've found so far?
 25869 000038CF 7E13                    	jle	short SEARCH_NEXT
 25870                                  				; no, look for another
 25871 000038D1 A2[3DA8]                	mov	[search_best],al
 25872                                  				; found something... save its code
 25873                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 25874                                  	;mov	si,FBUF_PNAME
 25875 000038D4 BE[29A8]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 25876 000038D7 BF[3EA8]                	mov	di,search_best_buf
 25877 000038DA B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25878 000038DD FC                      	cld
 25879 000038DE F3A4                    	rep	movsb		; save complete pathname representation
 25880 000038E0 3C08                    	cmp	al,SEARCH_COM	; 8
 25881                                  				; have we found the best of all?
 25882 000038E2 740A                    	je	short SEARCH_DONE
 25883                                  SEARCH_NEXT:			; keep on looking
 25884 000038E4 B91300                  	mov	cx,search_attr ; 13h
 25885 000038E7 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 25886 000038EA CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 25887                                  			; [DTA]	= data block from
 25888                                  			; last AH = 4Eh/4Fh call
 25889 000038EC 73DA                    	jnc	short SEARCH_LOOP
 25890                                  SEARCH_DONE:			; it's all over with...
 25891 000038EE A0[3DA8]                	mov	al,[search_best]
 25892                                  				; pick best to return with
 25893                                  	; 18/03/2023
 25894                                  	; MSDOS 6.0
 25895 000038F1 803E[F7A1]01            	cmp	byte [ext_entered],1
 25896                                  				;AN005; Did user request a specific ext?
 25897 000038F6 7411                    	je	short SEARCH_EXIT
 25898                                  				;AN005; no - exit
 25899 000038F8 A0[F7A1]                	mov	al,[ext_entered]
 25900                                  				;AN005; yes - get the real file type back
 25901 000038FB A2[3DA8]                	mov	[search_best],al
 25902                                  				;AN005; save the real file type
 25903                                  	;
 25904 000038FE EB09                    	jmp	short SEARCH_EXIT
 25905                                  
 25906                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 25907 00003900 8B16[8BA8]              	mov	dx,[search_error]
 25908                                  				; appropriate error message
 25909 00003904 E8081C                  	call	std_printf	; and pretend no file found
 25910                                  
 25911                                  SEARCH_NO_FILE:			; couldn't find a match
 25912                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 25913                                  	; 18/03/2023
 25914 00003907 31C0                    	xor	ax,ax
 25915                                  SEARCH_EXIT:
 25916                                  	;popf	; ** ; 18/03/2023
 25917 00003909 5E                      	pop	si
 25918 0000390A 5F                      	pop	di
 25919 0000390B 5A                      	pop	dx
 25920 0000390C 59                      	pop	cx
 25921 0000390D C3                      	retn
 25922                                  
 25923                                  ; =============== S U B	R O U T	I N E =======================================
 25924                                  
 25925                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 25926                                  ;
 25927                                  ; ENTRY:
 25928                                  ;   fbuf    --	dma buffer containing filename
 25929                                  ; EXIT:
 25930                                  ;   AX	    --	file code, as given in search header
 25931                                  ; NOTE(S):
 25932                                  ;   *	Implicit assumption that NULL == search_file_not_found
 25933                                  
 25934                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25935                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25936                                  SEARCH_FTYPE:
 25937 0000390E 57                      	push	di
 25938 0000390F 56                      	push	si
 25939                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 25940                                  	; 18/02/2023
 25941 00003910 31C0                    	xor	ax,ax ; ax = 0		
 25942                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 25943                                  	;mov	di,FBUF_PNAME
 25944 00003912 BF[29A8]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 25945 00003915 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25946 00003918 FC                      	cld
 25947 00003919 F2AE                    	repnz	scasb		; search for the terminating null
 25948 0000391B 7535                    	jnz	short FTYPE_EXIT
 25949                                  				; weird... no null byte at end
 25950 0000391D 83EF05                  	sub	di,5		; . + E + X + T + NULL
 25951                                  
 25952                                  	; Compare .COM
 25953                                  
 25954 00003920 BE[5497]                	mov	si,comext ; ".COM"
 25955 00003923 89F8                    	mov	ax,di
 25956 00003925 A7                      	cmpsw
 25957 00003926 7508                    	jnz	short FTYPE_EXE
 25958 00003928 A7                      	cmpsw
 25959 00003929 7505                    	jnz	short FTYPE_EXE
 25960                                  	;mov	ax,8
 25961 0000392B B80800                  	mov	ax,SEARCH_COM	; success!
 25962 0000392E EB22                    	jmp	short FTYPE_EXIT
 25963                                  
 25964                                  	; Compare .EXE
 25965                                  FTYPE_EXE:			; still looking... now for '.exe'
 25966 00003930 89C7                    	mov	di,ax
 25967 00003932 BE[5897]                	mov	si,exeext ; ".EXE"
 25968 00003935 A7                      	cmpsw
 25969 00003936 7508                    	jnz	short FTYPE_BAT
 25970 00003938 A7                      	cmpsw
 25971 00003939 7505                    	jnz	short FTYPE_BAT
 25972                                  	;mov	ax,4
 25973 0000393B B80400                  	mov	ax,SEARCH_EXE	; success!
 25974 0000393E EB12                    	jmp	short FTYPE_EXIT
 25975                                  
 25976                                  	; Compare .BAT
 25977                                  FTYPE_BAT:			; still looking... now for '.bat'
 25978 00003940 89C7                    	mov	di,ax
 25979 00003942 BE[5C97]                	mov	si,batext ; ".BAT"
 25980 00003945 A7                      	cmpsw
 25981 00003946 7508                    	jnz	short FTYPE_FAIL
 25982 00003948 A7                      	cmpsw
 25983 00003949 7505                    	jnz	short FTYPE_FAIL
 25984                                  	;mov	ax,2
 25985 0000394B B80200                  	mov	ax,SEARCH_BAT	; success!
 25986 0000394E EB02                    	jmp	short FTYPE_EXIT
 25987                                  
 25988                                  FTYPE_FAIL:			; file doesn't match what we need
 25989                                  	;mov	ax,ANULL ; 0
 25990                                  	; 18/03/2023
 25991 00003950 29C0                    	sub	ax,ax  ; ax = 0
 25992                                  FTYPE_EXIT:
 25993                                  	; 18/03/2023
 25994                                  	; MSDOS 6.0
 25995 00003952 803E[F7A1]01            	cmp	byte [ext_entered],1
 25996                                  				;AN005; was an extension entered?
 25997 00003957 740A                    	jz	short FTYPE_DONE
 25998                                  				;AN005; no - exit
 25999                                  	;cmp	ax,ANULL	;AN005; was any match found
 26000 00003959 21C0                    	and	ax,ax  ; ax = 0 ?
 26001 0000395B 7406                    	jz	short FTYPE_DONE
 26002                                  				;AN005; no - exit
 26003 0000395D A2[F7A1]                	mov	[ext_entered],al
 26004                                  				;AN005; save the match type found
 26005 00003960 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 26006                                  FTYPE_DONE:
 26007 00003963 5E                      	pop	si
 26008 00003964 5F                      	pop	di
 26009 00003965 C3                      	retn
 26010                                  
 26011                                  ; =============== S U B	R O U T	I N E =======================================
 26012                                  
 26013                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 26014                                  ; replacing any extension with wildcards.
 26015                                  ;
 26016                                  ; ENTRY:
 26017                                  ;	BX	--	maximum length of destination buffer
 26018                                  ;	DS:SI	--	address of destination buffer
 26019                                  ;	argv[0] --	command name to be stripped
 26020                                  ; EXIT:
 26021                                  ;	CF	--	set if failure, clear if successful
 26022                                  ; NOTE(S):
 26023                                  
 26024                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26025                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26026                                  STRIP:
 26027 00003966 50                      	push	ax
 26028 00003967 53                      	push	bx
 26029 00003968 51                      	push	cx
 26030 00003969 52                      	push	dx
 26031 0000396A 57                      	push	di
 26032 0000396B 56                      	push	si
 26033                                  	;pushf	; ** ; 18/03/2023
 26034                                  		
 26035                                  	; 05/05/2023
 26036                                  	; MSDOS 6.0
 26037 0000396C C606[F7A1]01            	mov	byte [ext_entered],1
 26038                                  				;AN005; assume no extension on file name
 26039                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26040                                  	;mov	dx,[ARG_ARGV]
 26041                                  	;mov	dx,ds:arg.argv[0].argpointer
 26042                                  				; save pointer to beginning of argstring
 26043                                  	;mov	dx,[ARGV0_ARGPOINTER]
 26044 00003971 8B16[41A2]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 26045                                  	;mov	di,ds:arg.argv[0].argstartel
 26046                                  				; beginning of last pathname element
 26047                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 26048 00003975 8B3E[44A2]              	mov	di,[ARG+ARGV_ELE.argstartel]
 26049 00003979 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 26050 0000397C 743D                    	je	short STRIP_ERROR
 26051 0000397E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 26052                                  	;add	cx,ds:arg.argv[0].arglen
 26053                                  	;add	cx,[ARGV0_ARGLEN]
 26054 00003980 030E[46A2]              	add	cx,[ARG+ARGV_ELE.arglen]
 26055 00003984 29F9                    	sub	cx,di		; and then find length of last element
 26056 00003986 41                      	inc	cx		; include null as well
 26057 00003987 B02E                    	mov	al,'.'
 26058                                  	;mov	al,DOT		; let's find the filetype extension
 26059 00003989 FC                      	cld
 26060 0000398A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 26061                                  
 26062                                  	; 18/03/2023
 26063                                  	; MSDOS 6.0
 26064 0000398C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 26065 0000398E B000                    	mov	al,0 ; 18/03/2023
 26066                                  	;mov	byte [ext_entered],0
 26067 00003990 A2[F7A1]                	mov	[ext_entered],al
 26068                                  				;AN005; we found an extension
 26069                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 26070                                  	;mov	al,0
 26071 00003993 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 26072                                  PROCESS_EXT:
 26073                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26074 00003995 89F9                    	mov	cx,di		; pointer to end of argstring yields
 26075 00003997 29D1                    	sub	cx,dx		; number of bytes to be copied
 26076 00003999 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 26077 0000399C 39D9                    	cmp	cx,bx
 26078 0000399E 7F1B                    	jg	short STRIP_ERROR
 26079                                  				; if not, we must have a bad pathname
 26080 000039A0 89F7                    	mov	di,si		; destination buffer
 26081 000039A2 89D6                    	mov	si,dx		; source is beginning of pathname
 26082 000039A4 FC                      	cld
 26083 000039A5 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 26084                                  
 26085                                  	; 18/03/2023
 26086                                  	; MSDOS 6.0
 26087 000039A7 803E[F7A1]01            	cmp	byte [ext_entered],1
 26088                                  				;AN005; if an extension was entered
 26089 000039AC 750A                    	jne	short SKIP_WILDS ; cf = 1 ; 12/06/2023
 26090                                  				;AN005;    don't set up wildcard ext.
 26091                                  
 26092                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26093 000039AE 4F                      	dec	di		; overwrite null or dot
 26094 000039AF AA                      	stosb			; with a dot
 26095 000039B0 B03F                    	mov	al,'?'
 26096                                  	;mov	al,WILDCHAR	; now add wildcards
 26097 000039B2 AA                      	stosb
 26098 000039B3 AA                      	stosb
 26099 000039B4 AA                      	stosb
 26100 000039B5 B000                    	mov	al,0
 26101                                  	;mov	al,ANULL	; and a terminating null	
 26102 000039B7 AA                      	stosb
 26103                                  SKIP_WILDS:
 26104                                  	;popf	; ** ; 18/03/2023
 26105 000039B8 F8                      	clc
 26106 000039B9 EB01                    	jmp	short STRIP_EXIT ; chill out...
 26107                                  
 26108                                  STRIP_ERROR:
 26109                                  	;popf	; ** ; 18/03/2023
 26110 000039BB F9                      	stc
 26111                                  STRIP_EXIT:
 26112 000039BC 5E                      	pop	si
 26113 000039BD 5F                      	pop	di
 26114 000039BE 5A                      	pop	dx
 26115 000039BF 59                      	pop	cx
 26116 000039C0 5B                      	pop	bx
 26117 000039C1 58                      	pop	ax
 26118 000039C2 C3                      	retn
 26119                                  
 26120                                  ; =============== S U B	R O U T	I N E =======================================
 26121                                  
 26122                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 26123                                  ;
 26124                                  ; structure in newly allocated memory. The argv[] structure is found at the
 26125                                  ; beginning of this area. The caller indicates how much extra space is
 26126                                  ; needed in the resulting structure; Save_Args returns a segment number and
 26127                                  ; an offset into that area, indicating where the caller may preserve its own
 26128                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 26129                                  ; ENTRY:
 26130                                  ;   BX	    --	size (in bytes) of extra area to allocate
 26131                                  ; EXIT:
 26132                                  ;   AX	    --	segment of new area.
 26133                                  ;   CF	    --	set if unable to save a copy.
 26134                                  ; NOTE(S):
 26135                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 26136                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 26137                                  ;	paragraphs.
 26138                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 26139                                  ;	as the caller of Save_Args requests.
 26140                                  ;   3)	AX is undefined if CF indicates an error.
 26141                                  
 26142                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26143                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26144                                  SAVE_ARGS:
 26145 000039C3 53                      	push	bx
 26146 000039C4 51                      	push	cx
 26147 000039C5 52                      	push	dx
 26148 000039C6 57                      	push	di
 26149 000039C7 56                      	push	si
 26150 000039C8 55                      	push	bp
 26151                                  	; 01/05/2023
 26152                                  	; 26/04/2023
 26153                                  	;pushf ; **
 26154                                  	;add	bx,1363		; space for arg structure, round up
 26155 000039C9 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 26156                                  			; 1092+15 ; 31/07/2024
 26157 000039CD B104                    	mov	cl,4		; to paragraph size and convert
 26158 000039CF D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 26159 000039D1 B80048                  	mov	ax,ALLOC*256 ; 4800h
 26160 000039D4 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 26161                                  			; BX = number of 16-byte paragraphs desired
 26162 000039D6 7241                    	jc	short SAVE_ERROR ; ***
 26163 000039D8 89C5                    	mov	bp,ax		; save segment id
 26164 000039DA 06                      	push	es		; save TRANGROUP address
 26165 000039DB 8EC0                    	mov	es,ax		; switch to new memory segment
 26166                                  	; assume es:nothing
 26167                                  	;mov	cx,1348		; get back structure size
 26168 000039DD B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092 ; 31/07/2024
 26169 000039E0 31FF                    	xor	di,di		; destination is new memory area
 26170                                  	;mov	si,ARG_ARGV
 26171 000039E2 BE[41A2]                	mov	si,ARG		; source is arg structure
 26172                                  	; 09/08/2024
 26173 000039E5 56                      	push	si
 26174 000039E6 F3A4                    	rep	movsb		; move that sucker!
 26175                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 26176                                  	;mov	cx,[ARG_ARGVCNT]
 26177 000039E8 8B0E[01A5]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 26178 000039EC 31C0                    	xor	ax,ax		; base address for argv_calc
 26179                                  
 26180                                  ;	Bugbug:	What did they mean by this?
 26181                                  ;	Note that the replacement line produces exactly the same code.
 26182                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 26183                                  ;	mov	SI, OFFSET TRANGROUP:arg
 26184                                  
 26185                                  	;;mov	si,ARG_ARGV
 26186                                  	;mov	si,ARG
 26187                                  	; 09/08/2024
 26188 000039EE 5E                      	pop	si
 26189                                  SAVE_PTR_LOOP:
 26190 000039EF 49                      	dec	cx		; exhausted all args?
 26191 000039F0 7C24                    	jl	short SAVE_DONE
 26192 000039F2 89CB                    	mov	bx,cx		; get arg index and
 26193 000039F4 E8A7FC                  	call	argv_calc	; convert to a pointer
 26194                                  	;mov	dx,ds:arg.argv[bx].argpointer
 26195                                  	;mov	dx,[ARG_ARGV+bx]
 26196 000039F7 8B97[41A2]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 26197 000039FB 29F2                    	sub	dx,si		; adjust argpointer
 26198                                  	;mov	es:argv[BX].argpointer,dx
 26199                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 26200 000039FD 268917                  	mov	[es:bx],dx
 26201                                  	;mov	dx,ds:arg.argv[bx].argstartel
 26202                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 26203 00003A00 8B97[44A2]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 26204 00003A04 29F2                    	sub	dx,si		; and adjust argstartel
 26205                                  	;mov	es:argv[bx].argstartel,dx
 26206                                  	;mov	[es:bx+3],dx
 26207 00003A06 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 26208                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 26209                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 26210 00003A0A 8B97[4AA2]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 26211 00003A0E 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 26212                                  	;mov	es:argv[bx].arg_ocomptr,dx
 26213                                  	;mov	[es:bx+9],dx
 26214 00003A10 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 26215 00003A14 EBD9                    	jmp	short SAVE_PTR_LOOP
 26216                                  SAVE_DONE:
 26217 00003A16 07                      	pop	es		; back we go to TRANGROUP
 26218                                  	; assume es:nothing
 26219 00003A17 89E8                    	mov	ax,bp		; restore segment id
 26220                                  	; 26/04/2023
 26221                                  	; cf = 0 ; *
 26222                                  	;jmp	short SAVE_OK
 26223                                  
 26224                                  	; 26/04/2023
 26225                                  ;SAVE_ERROR:
 26226                                  ;	; 26/04/2023
 26227                                  ;	;popf ; **
 26228                                  ;	stc
 26229                                  ;	jmp	short SAVE_EXIT
 26230                                  
 26231                                  SAVE_OK:
 26232                                  	; 26/04/2023
 26233                                  	;popf ; **
 26234                                  	; 26/04/2023
 26235                                  	; cf = 0 ; *
 26236                                  	;clc
 26237                                  SAVE_EXIT:
 26238                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 26239 00003A19 5D                      	pop	bp
 26240 00003A1A 5E                      	pop	si
 26241 00003A1B 5F                      	pop	di
 26242 00003A1C 5A                      	pop	dx
 26243 00003A1D 59                      	pop	cx
 26244 00003A1E 5B                      	pop	bx
 26245                                  answ_no:	; 26/04/2023
 26246 00003A1F C3                      	retn
 26247                                  
 26248                                  ;============================================================================
 26249                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 26250                                  ;============================================================================
 26251                                  ; 02/10/2018 - Retro DOS v3.0
 26252                                  
 26253                                  ; Title	COMMAND Language midifiable Code Transient
 26254                                  
 26255                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 26256                                  
 26257                                  ; =============== S U B	R O U T	I N E =======================================
 26258                                  
 26259                                  ; ****************************************************************
 26260                                  ; *
 26261                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 26262                                  ; *
 26263                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 26264                                  ; *		 user for Y/N if necessary. If an error occurs,
 26265                                  ; *		 set up an error message and go to CERROR.
 26266                                  ; *
 26267                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 26268                                  ; *		 Current directory set to entered directory
 26269                                  ; *
 26270                                  ; * OUTPUT:	 none
 26271                                  ; *
 26272                                  ; ****************************************************************
 26273                                  ;
 26274                                  ; ARE YOU SURE prompt when deleting *.*
 26275                                  
 26276                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26277                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26278                                  notest2:
 26279 00003A20 B90B00                  	mov	cx,11
 26280 00003A23 BE5D00                  	mov	si,FCB+1 ; 5Dh
 26281                                  ambspec:
 26282 00003A26 AC                      	lodsb
 26283 00003A27 3C3F                    	cmp	al,'?'
 26284 00003A29 7502                    	jne	short allfil
 26285 00003A2B E2F9                    	loop	ambspec
 26286                                  allfil:
 26287                                  	; 19/03/2023
 26288                                  	;cmp	cx,0
 26289 00003A2D 09C9                    	or	cx,cx
 26290 00003A2F 752E                    	jnz	short noprmpt
 26291                                  askagn:	
 26292 00003A31 BA[AF92]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 26293 00003A34 E8D81A                  	call	std_printf
 26294 00003A37 BE8000                  	mov	si,80h
 26295 00003A3A 89F2                    	mov	dx,si
 26296 00003A3C C7047800                	mov	word [si],120	; zero length
 26297                                  	;mov	ax,0C0Ah
 26298 00003A40 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 26299 00003A43 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 26300                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 26301 00003A45 AD                      	lodsw
 26302 00003A46 08E4                    	or	ah,ah
 26303 00003A48 74E7                    	jz	short askagn
 26304 00003A4A E8E1F0                  	call	scanoff
 26305                                  	; 19/03/2023
 26306                                  	; MSDOS 6.0
 26307 00003A4D E80C02                  	call	char_in_xlat	; Convert to upper case
 26308                                  	;retc			; return if function not supported
 26309                                  	; 19/03/2023
 26310                                  	;jnc	short check_yn
 26311                                  ;answ_no:
 26312                                  	;retn
 26313 00003A50 72CD                    	jc	short answ_no
 26314                                  
 26315                                  	; 19/03/2023
 26316                                  	; AL = 0 if it was (country depended) NO character
 26317                                  	; AL = 1 if it was (country depenced) YES character
 26318                                  
 26319                                  	; MSDOS 3.3
 26320                                  	;call	UPCONV
 26321                                  
 26322                                  	; 19/03/2023	
 26323                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26324                                  	;cmp	al,[CAPITAL_N]
 26325                                  	;jne	short CHECK_Y
 26326                                  	;retn
 26327                                  ;CHECK_Y:
 26328                                  	;cmp	al,[CAPITAL_Y]
 26329                                  	;pushf
 26330                                  	;call	CRLF2
 26331                                  	;popf
 26332                                  	;jne	short ASKAGN
 26333                                  
 26334                                  check_yn:
 26335                                  	; 19/03/2023
 26336                                  	;cmp	al,0	; NO character
 26337 00003A52 08C0                    	or	al,al
 26338 00003A54 74C9                    	jz	short answ_no
 26339                                  	;cmp	al,1	 ;YES character
 26340 00003A56 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 26341 00003A58 9C                      	pushf
 26342 00003A59 E8C5F0                  	call	CRLF2
 26343 00003A5C 9D                      	popf
 26344 00003A5D 75D2                    	jnz	short askagn
 26345                                  noprmpt:
 26346 00003A5F B413                    	mov	ah,FCB_Delete ; 13h
 26347 00003A61 BA5C00                  	mov	dx,FCB ; 5Ch
 26348 00003A64 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 26349                                  			; DS:DX	-> FCB with filename field filled with
 26350                                  			; template for deletion ('?' wildcard allowed,but not '*')
 26351                                  			; Return: AL = 00h file	found,FFh file	not found
 26352 00003A66 FEC0                    	inc	al
 26353 00003A68 7403                    	jz	short eraerr
 26354                                  	; 26/04/2023
 26355                                  	;call	RestUDir
 26356                                  ;answ_no:
 26357                                  	;retn
 26358 00003A6A E971EF                  	jmp	RestUDir ; 26/04/2023
 26359                                  
 26360                                  	; 19/03/2023
 26361                                  	; MSDOS 6.0
 26362                                  eraerr:
 26363                                  	;invoke	set_ext_error_msg
 26364                                  				;AN022; set up the extended error
 26365 00003A6D E8C2E7                  	call	Set_Ext_Error_Msg
 26366 00003A70 52                      	push	dx		;AN022; save message
 26367                                  	;invoke	RESTUDIR
 26368 00003A71 E86AEF                  	call	RestUDir
 26369 00003A74 5A                      	pop	dx		;AN022; restore message
 26370                                  	
 26371 00003A75 833E[D091]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 26372                                  				;AN022; convert no more files to
 26373 00003A7A 7506                    	jne	short cerrorj2	;AN022;  file not found
 26374 00003A7C C706[D091]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 26375                                  				;AN000; get message number in control block
 26376                                  cerrorj2:
 26377 00003A82 E91DF4                  	jmp	cerror
 26378                                  	
 26379                                  	; 19/03/2023
 26380                                  	; MSDOS 3.3
 26381                                  ;ERAERR:	
 26382                                  	;mov	ah,Set_DMA ; 1Ah
 26383                                  	;mov	dx,FCB ; 5Ch
 26384                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 26385                                  	;			; DS:DX	-> disk	transfer buffer
 26386                                  	;mov	ah,Dir_Search_First ; 11h
 26387                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 26388                                  	;			; DS:DX	-> FCB
 26389                                  	;push	ax
 26390                                  	;call	RESTUDIR
 26391                                  	;pop	ax
 26392                                  	;mov	dx,FNOTFOUNDPTR
 26393                                  	;inc	al
 26394                                  	;jz	short CERRORJ
 26395                                  	;mov	dx,ACCDENPTR
 26396                                  	;jmp	CERROR
 26397                                  
 26398                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26399                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 26400                                  
 26401                                  ; ****************************************************************
 26402                                  ; *
 26403                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 26404                                  ; *
 26405                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 26406                                  ; *		 user for Y/N where necessary. If an error occurs
 26407                                  ; *		 set up and error message and transfer control
 26408                                  ; *		 to CERROR.
 26409                                  ; *
 26410                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 26411                                  ; *		 Current directory set to entered directory
 26412                                  ; *
 26413                                  ; * OUTPUT:	 none
 26414                                  ; *
 26415                                  ; ****************************************************************
 26416                                  
 26417                                  	; 19/03/2023
 26418                                  slashp_erase:				;AN000; entry point
 26419                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 26420 00003A85 E814E9                  	call	build_dir_string
 26421                                  
 26422 00003A88 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 26423                                  	;mov	dx,offset trangroup:destdir
 26424 00003A8A BA[E79F]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 26425 00003A8D CD21                    	int	21h			;AN000;
 26426                                  
 26427                                  	;mov	ah,11h
 26428 00003A8F B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 26429 00003A91 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 26430 00003A94 CD21                    	int	21h			;AN000;
 26431 00003A96 FEC0                    	inc	al			;AN000; did an error occur
 26432                                  	;jz	short eraerr		;AN022; go to error exit
 26433                                  	; 26/04/2023
 26434 00003A98 7502                    	jnz	short delete_prompt_loop
 26435                                  
 26436                                  	; 26/04/2023
 26437                                  stop_del:
 26438 00003A9A EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 26439                                  
 26440                                  delete_prompt_loop:			;AN000;
 26441                                  	;mov	si,offset trangroup:destdir+1
 26442 00003A9C BE[E89F]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 26443                                  	;mov	di,offset trangroup:dest
 26444 00003A9F BF[B79F]                	mov	di,DEST			;AN000; set up dest as target
 26445 00003AA2 A0[F89D]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 26446 00003AA5 AA                      	stosb				;AN000;   of DEST
 26447                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 26448 00003AA6 E8A4F0                  	call	FCB_TO_ASCZ
 26449                                  
 26450                                  slashp_askagn:				;AN000;
 26451 00003AA9 E875F0                  	call	CRLF2			;AN000; print out carriage return, line feed
 26452                                  	;mov	dx,offset trangroup:bwdbuf
 26453 00003AAC BA[2AA0]                	mov	dx,BWDBUF		;AN000; print out current directory string
 26454 00003AAF 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 26455 00003AB1 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 26456                                  					;AN000; see if only D:\,0
 26457 00003AB5 7504                    	jnz	short not_del_root	;AN000; no continue
 26458 00003AB7 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 26459                                  					;AN000; yes, get rid of \ ;
 26460                                  not_del_root:				;AN000;
 26461 00003ABB 8916[91A0]              	mov	[string_ptr_2],dx 	;AN000;
 26462                                  	;mov	dx,offset trangroup:string_buf_ptr
 26463 00003ABF BA[9793]                	mov	dx,string_buf_ptr	;AN000;
 26464                                  	;invoke	std_printf		;AN000;
 26465 00003AC2 E84A1A                  	call	std_printf
 26466                                  	;mov	dx,offset trangroup:dest
 26467 00003AC5 BA[B79F]                	mov	dx,DEST			;AN000; print out file name string
 26468 00003AC8 8916[91A0]              	mov	[string_ptr_2],dx 	;AN000;
 26469                                  	;mov	dx,offset trangroup:string_buf_ptr
 26470 00003ACC BA[9793]                	mov	dx,string_buf_ptr	;AN000;
 26471                                  	;invoke	std_printf		;AN000;
 26472 00003ACF E83D1A                  	call	std_printf
 26473                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 26474 00003AD2 BA[AC92]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 26475                                  	;invoke	std_printf		;AN000;
 26476 00003AD5 E8371A                  	call	std_printf
 26477                                  
 26478                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 26479                                  ;;M029	mov	dx,si			;AN000;
 26480                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 26481                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 26482                                  ;;M029	int	21h			;AN000; get input from the user
 26483                                  ;;M029	lodsw				;AN000;
 26484                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 26485                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 26486                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 26487                                  
 26488                                  ;	Get a single character input.
 26489                                  
 26490                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 26491                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 26492 00003AD8 B8010C                  	mov	ax,0C01h
 26493 00003ADB CD21                    	int	21h			;M029
 26494                                  
 26495 00003ADD E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 26496                                  	;retc				;AN000; return if function not supported
 26497                                  	; 19/03/2023
 26498 00003AE0 7301                    	jnc	short slashp_check_yn
 26499                                  slashp_ans_no:
 26500 00003AE2 C3                      	retn
 26501                                  
 26502                                  slashp_check_yn:
 26503                                  	; 19/03/2023
 26504                                  	; AL = 0 if it was (country depended) NO character
 26505                                  	; AL = 1 if it was (country depenced) YES character
 26506                                  
 26507                                  	;cmp	al,capital_n		;AN000; was it no?
 26508                                  	;cmp	al,0
 26509 00003AE3 20C0                    	and	al,al ; 0
 26510 00003AE5 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 26511                                  	;cmp	al,capital_y		;AN000; was it yes?
 26512                                  	;cmp	al,1
 26513 00003AE7 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 26514                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 26515                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 26516                                  	; 19/03/2023
 26517 00003AE9 75BE                    	jnz	short slashp_askagn
 26518                                  
 26519                                  delete_this_file:			;AN000;
 26520 00003AEB B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 26521                                  	;mov	dx,offset trangroup:destdir
 26522 00003AED BA[E79F]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 26523 00003AF0 CD21                    	int	21h			;AN000;
 26524 00003AF2 FEC0                    	inc	al			;AN000; did an error occur?
 26525 00003AF4 7511                    	jnz	short next_del_file	;AN000; no - get next file
 26526                                  ;
 26527                                  ;M041; Begin changes
 26528                                  ; We got an error deleting the file. If this is access denied, we can go on
 26529                                  ;to the next file after printing an error message.
 26530                                  ;
 26531                                  	;invoke	Get_ext_error_number	;see what error we got
 26532 00003AF6 E849E7                  	call	get_ext_error_number
 26533 00003AF9 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 26534                                  					;is it access denied?
 26535 00003AFC 759C                    	jne	short stop_del		;no, some other error
 26536                                  	;invoke	CrLf2			;print a CR-LF
 26537 00003AFE E820F0                  	call	CRLF2
 26538                                  	;invoke set_ext_error_msg	;error message
 26539 00003B01 E82EE7                  	call	Set_Ext_Error_Msg
 26540                                  	;invoke	std_eprintf		;"Access denied"
 26541 00003B04 E8001A                  	call	std_eprintf
 26542                                  	; 26/04/2023
 26543                                  	;jmp	short next_del_file	;try next file
 26544                                  	; 26/04/2023
 26545                                  ;stop_del:
 26546                                  ;;
 26547                                  ;;M041; End changes
 26548                                  ;;
 26549                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 26550                                  
 26551                                  next_del_file:				;AN000;
 26552                                  ;
 26553                                  ; M050 - begin
 26554                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 26555                                  ;       with /protect+ and /light+ makes it intercept all
 26556                                  ;       deletes. This hook does not save and restore the DTA correctly.
 26557                                  ;       They save the DWORD in a WORD by mistake! They save both the
 26558                                  ;       segment and the offset in the SAME variable (WORD)!!!
 26559                                  ;
 26560 00003B07 B41A                    	mov	ah,Set_DMA ; 1Ah
 26561                                  	;mov	dx,offset trangroup:destdir
 26562 00003B09 BA[E79F]                	mov	dx,DESTDIR
 26563 00003B0C CD21                    	int	21h
 26564                                  ;
 26565                                  ; M050 - end
 26566                                  
 26567 00003B0E B412                    	mov	ah,Dir_Search_Next ; 12h
 26568                                  					;AN000; search for another file
 26569 00003B10 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 26570 00003B13 CD21                    	int	21h			;AN000;
 26571 00003B15 FEC0                    	inc	al			;AN000; was a file found?
 26572                                  	;jz	short slash_p_exit	;AN000; no - exit
 26573                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 26574                                  	; 26/04/2023
 26575 00003B17 7583                    	jnz	short delete_prompt_loop
 26576                                  
 26577                                  slash_p_exit:
 26578                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 26579 00003B19 E826E7                  	call	get_ext_error_number
 26580 00003B1C 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 26581 00003B1F 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 26582 00003B21 E961E4                  	jmp	extend_setup		;AN022; go issue error message
 26583                                  
 26584                                  good_erase_exit:
 26585                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 26586 00003B24 E8B7EE                  	call	RestUDir
 26587                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 26588                                  	;retn				;AN000; exit
 26589                                  	; 19/03/2023
 26590 00003B27 E9F7EF                  	jmp	CRLF2
 26591                                  
 26592                                  ; =============== S U B	R O U T	I N E =======================================
 26593                                  
 26594                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 26595                                  
 26596                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26597                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26598                                  _ECHO:
 26599 00003B2A E89900                  	call	ON_OFF
 26600 00003B2D 7212                    	jb	short DOEMES
 26601 00003B2F 8E1E[F39D]              	mov	ds,[RESSEG]
 26602 00003B33 7506                    	jnz	short ECH_OFF
 26603 00003B35 800E[3B02]01            	or	byte [EchoFlag],1
 26604 00003B3A C3                      	retn
 26605                                  
 26606                                  ECH_OFF:
 26607 00003B3B 8026[3B02]FE            	and	byte [EchoFlag],0FEh
 26608 00003B40 C3                      	retn
 26609                                  
 26610                                  	; 19/03/2023
 26611                                  	; MSDOS 6.0 (& MSDOS 5.0)
 26612                                  ;CERRORJ:
 26613                                  	;jmp	cerror
 26614                                  
 26615                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 26616                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 26617                                  
 26618                                  DOEMES:
 26619                                  	; 19/03/2023
 26620                                  	; MSDOS 6.0
 26621                                  	;cmp	cl,0		;AC000; was anything on the line?
 26622 00003B41 20C9                    	and	cl,cl
 26623 00003B43 7409                    	jz	short PECHO	; just display current state.
 26624 00003B45 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 26625 00003B48 E82FF0                  	call	CRPRINT
 26626 00003B4B E9D3EF                  	jmp	CRLF2
 26627                                  
 26628                                  	; 19/03/2023
 26629                                  	; MSDOS 3.3
 26630                                  	;call	MOVE_TO_FIRST_ARG
 26631                                  	;jz	short PECHO
 26632                                  	;mov	dx,82h
 26633                                  	;call	CRPRINT
 26634                                  	;jmp	CRLF2
 26635                                  
 26636                                  PECHO:
 26637                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26638 00003B4E 8E1E[F39D]              	mov	ds,[RESSEG]
 26639 00003B52 8A1E[3B02]              	mov	bl,[EchoFlag]
 26640 00003B56 0E                      	push	cs
 26641 00003B57 1F                      	pop	ds
 26642 00003B58 80E301                  	and	bl,1
 26643 00003B5B BA[5393]                	mov	dx,EchoMes_Ptr
 26644 00003B5E EB24                    	jmp	short PYN
 26645                                  
 26646                                  ; ---------------------------------------------------------------------------
 26647                                  
 26648                                  	; 19/03/2023
 26649                                  	; MSDOS 3.3
 26650                                  CERRORJ:
 26651 00003B60 E93FF3                  	jmp	cerror
 26652                                  
 26653                                  ; =============== S U B	R O U T	I N E =======================================
 26654                                  
 26655                                  	; 19/03/2023
 26656                                  	; MSDOS 3.3
 26657                                  ;MOVE_TO_FIRST_ARG:
 26658                                  	;mov	si,81h
 26659                                  	;call	SCANOFF
 26660                                  	;cmp	al,0Dh
 26661                                  	;retn
 26662                                  
 26663                                  ; =============== S U B	R O U T	I N E =======================================
 26664                                  
 26665                                  CNTRLC:
 26666 00003B63 E86000                  	call	ON_OFF
 26667 00003B66 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 26668 00003B69 720C                    	jc	short PCNTRLC
 26669 00003B6B 7505                    	jnz	short CNTRLC_OFF
 26670 00003B6D B201                    	mov	dl,1
 26671 00003B6F CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 26672                                  			; AL = 00h get state / 01h set state / 02h set AND get
 26673                                  			; DL = 00h for OFF or 01h for ON
 26674 00003B71 C3                      	retn
 26675                                  
 26676                                  ; ---------------------------------------------------------------------------
 26677                                  
 26678                                  CNTRLC_OFF:
 26679 00003B72 30D2                    	xor	dl,dl
 26680 00003B74 CD21                    	int	21h		; Turn off ^C check
 26681 00003B76 C3                      	retn
 26682                                  
 26683                                  ; ---------------------------------------------------------------------------
 26684                                  
 26685                                  PCNTRLC:
 26686                                  	; 19/03/2023
 26687                                  	; MSDOS 6.0
 26688                                  	;cmp	cl,0		;AC000; rest of line blank?
 26689 00003B77 08C9                    	or	cl,cl
 26690 00003B79 75E5                    	jnz	short CERRORJ 	; no, oops!
 26691                                  
 26692                                  	; 19/03/2023
 26693                                  	; MSDOS 3.3
 26694                                  	;call	MOVE_TO_FIRST_ARG
 26695                                  	;jnz	short CERRORJ
 26696                                  ;pccont:
 26697                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26698 00003B7B 30C0                    	xor	al,al
 26699 00003B7D CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 26700 00003B7F 88D3                    	mov	bl,dl
 26701 00003B81 BA[3793]                	mov	dx,CtrlcMes_Ptr
 26702                                  
 26703                                  ; ---------------------------------------------------------------------------
 26704                                  
 26705                                  PYN:	; write "ON" or "OFF" state 
 26706                                  
 26707                                  	; 26/04/2023
 26708                                  	; 19/03/2023
 26709                                  	; MSDOS 3.3
 26710                                  	;call	STD_PRINTF
 26711                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 26712                                  	;or	bl,bl
 26713                                  	;jnz	short PRINTVAL
 26714                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 26715                                  	
 26716                                  	; 26/04/2023
 26717                                  	; 19/03/2023
 26718                                  	; MSDOS 6.0
 26719 00003B84 BE[6493]                	mov	si,ONMES_PTR
 26720 00003B87 08DB                    	or	bl,bl
 26721 00003B89 7503                    	jnz	short PRINTVAL
 26722 00003B8B BE[6193]                	mov	si,OFFMES_PTR
 26723                                  PRINTVAL:
 26724                                  	; 19/03/2023
 26725                                  	; MSDOS 3.3
 26726                                  	;jmp	STD_PRINTF
 26727                                  
 26728                                  	; 19/03/2023
 26729                                  	; MSDOS 6.0
 26730 00003B8E 52                      	push	dx		;AN000; save offset of message block
 26731 00003B8F 89D3                    	mov	bx,dx		;AN000; save offset value
 26732 00003B91 AD                      	lodsw			;AN000; get message number of on or off
 26733 00003B92 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 26734                                  				;AN000; this is a utility message
 26735 00003B94 E85B1A                  	call	TSYSGETMSG	;AN000; get the address of the message
 26736                                  	;add	bx,5
 26737 00003B97 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 26738                                  	
 26739 00003B9A 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 26740 00003B9C 5A                      	pop	dx		;AN000; get message back
 26741 00003B9D E86F19                  	call	std_printf	;AC000; go print message
 26742 00003BA0 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 26743 00003BA4 C3                      	retn			;AN000; exit
 26744                                  
 26745                                  ; =============== S U B	R O U T	I N E =======================================
 26746                                  
 26747                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 26748                                  VERIFY:
 26749 00003BA5 E81E00                  	call	ON_OFF
 26750 00003BA8 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 26751 00003BAB 720A                    	jc	short PVERIFY
 26752 00003BAD 7503                    	jnz	short VER_OFF
 26753 00003BAF CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 26754                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 26755 00003BB1 C3                      	retn
 26756                                  
 26757                                  ; ---------------------------------------------------------------------------
 26758                                  
 26759                                  VER_OFF:
 26760 00003BB2 FEC8                    	dec	al
 26761 00003BB4 CD21                    	int	21h		; Turn off verify after write
 26762 00003BB6 C3                      	retn
 26763                                  
 26764                                  ; ---------------------------------------------------------------------------
 26765                                  
 26766                                  PVERIFY:
 26767                                  	; 19/03/2023
 26768                                  	; MSDOS 6.0
 26769                                  	;cmp	cl,0		;AC000; is rest of line blank?
 26770 00003BB7 20C9                    	and	cl,cl
 26771 00003BB9 75A5                    	jnz	short CERRORJ 	; nope...
 26772                                  
 26773                                  	 ;19/03/2023
 26774                                  	; MSDOS 3.3
 26775                                  	;call	MOVE_TO_FIRST_ARG
 26776                                  	;jnz	short CERRORJ
 26777                                  
 26778 00003BBB B454                    	mov	ah,Get_Verify_On_Write ; 54h
 26779 00003BBD CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 26780                                  				; Return: AL = 00h if flag OFF
 26781                                  				; AL = 01h if flag ON
 26782 00003BBF 88C3                    	mov	bl,al
 26783 00003BC1 BA[4593]                	mov	dx,VeriMes_Ptr
 26784 00003BC4 EBBE                    	jmp	short PYN
 26785                                  
 26786                                  ; =============== S U B	R O U T	I N E =======================================
 26787                                  
 26788                                  ; ****************************************************************
 26789                                  ; *
 26790                                  ; * ROUTINE:	 ON_OFF
 26791                                  ; *
 26792                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 26793                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 26794                                  ; *		 routines.
 26795                                  ; *
 26796                                  ; * INPUT:	 command line at offset 81H
 26797                                  ; *		 PARSE_BREAK control block
 26798                                  ; *
 26799                                  ; * OUTPUT:	 If carry is clear
 26800                                  ; *		    If ON is found
 26801                                  ; *		       Zero flag set
 26802                                  ; *		    If OFF is found
 26803                                  ; *		       Zero flag clear
 26804                                  ; *		 If carry set
 26805                                  ; *		    If nothing on command line
 26806                                  ; *		       CL set to zero
 26807                                  ; *		    If error
 26808                                  ; *		       CL contains error value from parse
 26809                                  ; *
 26810                                  ; ****************************************************************
 26811                                  
 26812                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26813                                  ON_OFF:
 26814 00003BC6 BE8100                  	mov	si,81h
 26815                                  
 26816                                  	; 19/03/2023
 26817                                  	; MSDOS 3.3
 26818                                  	;call	SCANOFF		; scan off leading blanks & equal
 26819                                  	;cmp	al,0Dh		; are we at end of line?
 26820                                  	;je	short BAD_ONF	; yes, return error
 26821                                  	;lodsw
 26822                                  	;or	ax,2020h	; convert to lowercase
 26823                                  	;cmp	ax,6E6Fh ;'on'
 26824                                  	;je	short ON_CHECK
 26825                                  	;cmp	ax,666Fh ;'of'
 26826                                  	;jne	short BAD_ONF
 26827                                  	;lodsb
 26828                                  	;or	al,20h		; convert to lowercase		
 26829                                  	;cmp	al,66h	 ; 'f'
 26830                                  	;jne	short BAD_ONF	
 26831                                  	;or	al,66h ; or al,'f'
 26832                                  	;jmp	short OFF_CHECK
 26833                                  ;ON_CHECK:
 26834                                  	;xor	al,al
 26835                                  ;OFF_CHECK:
 26836                                  	;lahf
 26837                                  	;mov	bx,ax
 26838                                  	;call	SCANOFF		; scan off leading blanks & equal
 26839                                  	;cmp	al,0Dh		; are we at end of line?	
 26840                                  	;jne	short BAD_ONF	; no, return error
 26841                                  	;mov	ax,bx
 26842                                  	;sahf
 26843                                  	;clc
 26844                                  	;retn
 26845                                  
 26846                                  	; 19/03/2023
 26847                                  	; MSDOS 6.0
 26848                                  scan_on_off:			;AN032; scan off leading blanks & equal
 26849 00003BC9 AC                      	lodsb			;AN032; get a char
 26850                                  	;cmp	al,blank	;AN032; if whitespace
 26851 00003BCA 3C20                    	cmp	al,20h
 26852 00003BCC 74FB                    	je	short scan_on_off
 26853                                  				;AN032;    keep scanning
 26854 00003BCE 3C09                    	cmp	al,tab_chr	;AN032; if tab
 26855                                  	;cmp	al,09h
 26856 00003BD0 74F7                    	je	short scan_on_off
 26857                                  				;AN032;    keep scanning
 26858                                  	;cmp	al,equal_chr	;AN032; if equal char
 26859 00003BD2 3C3D                    	cmp	al,'=' ; 3Dh
 26860 00003BD4 7401                    	je	short parse_on_off
 26861                                  				;AN032;    start parsing
 26862 00003BD6 4E                      	dec	si		;AN032; if none of above - back up
 26863                                  
 26864                                  parse_on_off:			;AN032;    and start parsing
 26865 00003BD7 BF[A197]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26866 00003BDA 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 26867 00003BDC 31D2                    	xor	dx,dx		;AN000;
 26868 00003BDE E8780E                  	call	cmd_parse	;AC000; call parser
 26869                                  	;cmp	ax,-1 ; 0FFFFh
 26870 00003BE1 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 26871 00003BE4 742E                    	je	short BADONF	;AC000; yes, return error
 26872                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 26873                                  	;cmp	ax,0
 26874 00003BE6 21C0                    	and	ax,ax ; ax = 0 ?
 26875 00003BE8 7404                    	jz	short on_off_there
 26876                                  				;AN000; no - continue
 26877 00003BEA 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 26878 00003BEC EB26                    	jmp	short BADONF	;AN000; return error
 26879                                  
 26880                                  on_off_there:
 26881 00003BEE 803E[E2A9]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 26882                                  				;AN014; was a valid positional present?
 26883 00003BF3 7505                    	jnz	short good_on_off
 26884                                  				;AN014; yes - continue
 26885 00003BF5 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 26886                                  	;mov	cx,10 ; 0Ah
 26887 00003BF8 EB1A                    	jmp	short BADONF	;AN014; return error
 26888                                  
 26889                                  good_on_off:			;AN014;
 26890 00003BFA 31C0                    	xor	ax,ax		;AC000; set up return code for
 26891 00003BFC 0A06[E2A9]              	or	al,[PARSE1_CODE]
 26892                                  				;AC000;    ON or OFF in AX
 26893 00003C00 9C                      	pushf			;AN000; save flags
 26894 00003C01 BF[A197]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26895 00003C04 31D2                    	xor	dx,dx		;AN000;
 26896 00003C06 E8500E                  	call	cmd_parse	;AN000; call parser
 26897 00003C09 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 26898                                  	;cmp	ax,-1 ; 0FFFFh
 26899 00003C0C 7503                    	jne	short BADONF_flags
 26900                                  				;AN000; NO, return error
 26901 00003C0E 9D                      	popf			;AN000; restore flags
 26902 00003C0F F8                      	clc			;AC000; no error
 26903                                  	;jmp	short on_off_end
 26904                                  				;AN000; return to caller
 26905                                  	; 26/04/2023
 26906 00003C10 C3                      	retn
 26907                                  
 26908                                  BADONF_flags:
 26909 00003C11 89C1                    	mov	cx,ax
 26910 00003C13 9D                      	popf
 26911                                  
 26912                                  ; ---------------------------------------------------------------------------
 26913                                  
 26914                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 26915                                  ; and return the error
 26916                                  
 26917                                  BADONF:
 26918 00003C14 BA[1493]                	mov	dx,bad_on_off_ptr
 26919 00003C17 F9                      	stc
 26920                                  on_off_end:
 26921 00003C18 C3                      	retn
 26922                                  
 26923                                  ;============================================================================
 26924                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 26925                                  ;============================================================================
 26926                                  ; 02/10/2018 - Retro DOS v3.0
 26927                                  
 26928                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 26929                                  
 26930                                  ; =============== S U B	R O U T	I N E =======================================
 26931                                  
 26932                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26933                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 26934                                  	
 26935                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26936                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3E20h
 26937                                  PRINT_DATE:
 26938                                  	; 20/03/2023
 26939                                  	; MSDOS 3.3
 26940                                  	;push	es
 26941                                  	;push	di
 26942                                  	;push	cs
 26943                                  	;pop	es
 26944                                  	;mov	di,ARG_BUF
 26945                                  	;mov	ah,Get_Date ; 2Ah
 26946                                  	;int	21h	; DOS -	GET CURRENT DATE
 26947                                  	;		; Return: DL = day,DH = month,	CX = year
 26948                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 26949                                  	;cbw
 26950                                  	;call	GETDATE
 26951                                  	;call	P_DATE
 26952                                  	;xor	al,al
 26953                                  	;stosb
 26954                                  	;mov	dx,ARG_BUF_PTR
 26955                                  	;call	STD_PRINTF
 26956                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 26957                                  	;pop	es ; !!??!! 
 26958                                  	;pop	di
 26959                                  	;retn
 26960                                  
 26961                                  	; 20/03/2023
 26962                                  	; MSDOS 6.0
 26963 00003C19 06                      	push	es
 26964 00003C1A 57                      	push	di
 26965 00003C1B 0E                      	push	cs
 26966 00003C1C 07                      	pop	es
 26967 00003C1D E81300                  	call	GetDate 		; get date
 26968 00003C20 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26969 00003C22 890E[CE93]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 26970 00003C26 8916[D093]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 26971 00003C2A BA[BE93]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 26972 00003C2D E8DF18                  	call	std_printf
 26973                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 26974                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 26975 00003C30 5F                      	pop	di			;AC000; restore di,es
 26976 00003C31 07                      	pop	es			;AC000;
 26977 00003C32 C3                      	retn
 26978                                  
 26979                                  ; ---------------------------------------------------------------------------
 26980                                  
 26981                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26982                                  
 26983                                  ;GETDATE:
 26984                                  	; 21/03/2023
 26985                                  	; MSDOS 3.3
 26986                                  	;mov	si,ax
 26987                                  	;shl	si,1
 26988                                  	;add	si,ax
 26989                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 26990                                  	;mov	bx,cx
 26991                                  	;mov	cx,3
 26992                                  	;rep	movsb
 26993                                  	;mov	al,' '
 26994                                  	;stosb
 26995                                  	;retn
 26996                                  
 26997                                  	; 21/03/2023
 26998                                  	; MSDOS 6.0
 26999                                  
 27000                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 27001                                  ; for output. Date will be returned in CX,DX.
 27002                                  
 27003                                  GetDate:
 27004 00003C33 BF[87A7]                	mov	di,Arg_Buf		;AC000; target for day of week
 27005 00003C36 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 27006 00003C38 CD21                    	int	21h			;AC000; Get date in CX:DX
 27007 00003C3A 98                      	cbw				;AC000;
 27008 00003C3B 51                      	push	cx			;AN000; save date returned in
 27009 00003C3C 52                      	push	dx			;AN000;  CX:DX
 27010 00003C3D 89C6                    	mov	si,ax
 27011 00003C3F D1E6                    	shl	si,1
 27012 00003C41 01C6                    	add	si,ax			; SI=AX*3
 27013 00003C43 89F1                    	mov	cx,si			;AN000; save si
 27014 00003C45 A1[8792]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 27015 00003C48 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 27016 00003C4A 57                      	push	di			;AN000; save argument buffer
 27017 00003C4B E8A419                  	call	TSYSGETMSG		;AN000; get the address of the message
 27018 00003C4E 5F                      	pop	di			;AN000; retrieve argument buffer
 27019 00003C4F 01CE                    	add	si,cx			;AC000; get day of week
 27020 00003C51 B90300                  	mov	cx,3
 27021 00003C54 F3A4                      	rep	movsb
 27022 00003C56 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 27023 00003C58 AA                      	stosb
 27024 00003C59 5A                      	pop	dx			;AN000; get back date
 27025 00003C5A 59                      	pop	cx			;AN000;
 27026 00003C5B C3                      	retn
 27027                                  
 27028                                  ; =============== S U B	R O U T	I N E =======================================
 27029                                  
 27030                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27031                                  
 27032                                  	; MSDOS 6.0
 27033                                  
 27034                                  ; This routine determines whether the character in AL is a
 27035                                  ; Yes or No character. On return, if AL=0, the character is
 27036                                  ; No, if AL=1, the character is Yes.
 27037                                  
 27038                                  ;	assume	ds:trangroup
 27039                                  
 27040                                  char_in_xlat:	; proc	near
 27041                                  	; 21/03/2023
 27042 00003C5C 88C2                    	mov	dl,al			;AC000; get character into DX
 27043 00003C5E 30F6                    	xor	dh,dh			;AC000;
 27044                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 27045 00003C60 B82365                  	mov	ax,6523h
 27046 00003C63 CD21                    	int	21h			;AC000;
 27047 00003C65 C3                      	retn
 27048                                  
 27049                                  ;char_in_xlat	endp
 27050                                  
 27051                                  ;============================================================================
 27052                                  ; TENV.ASM, MSDOS 6.0, 1991
 27053                                  ;============================================================================
 27054                                  ; 02/10/2018 - Retro DOS v3.0
 27055                                  
 27056                                  ;	Environment utilities and misc. routines
 27057                                  
 27058                                  ; MSDOS 6.0
 27059                                  ; ****************************************************************
 27060                                  ; *
 27061                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 27062                                  ; *
 27063                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 27064                                  ; *		 the character in AL from the file upper case table
 27065                                  ; *		 in DOS if character if above  ascii 128, else
 27066                                  ; *		 subtracts 20H if between "a" and "z".
 27067                                  ; *
 27068                                  ; * INPUT:	 AL	      char to be upper cased
 27069                                  ; *		 FUCASE_ADDR  set to the file upper case table
 27070                                  ; *
 27071                                  ; * OUTPUT:	 AL	      upper cased character
 27072                                  ; *
 27073                                  ; ****************************************************************
 27074                                  ;
 27075                                  ;assume	ds:trangroup				;AN000;
 27076                                  ;
 27077                                  ;upconv	proc	near				;AN000;
 27078                                  ;
 27079                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 27080                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 27081                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 27082                                  ;	push	ds				;AN000;
 27083                                  ;	push	bx				;AN000;
 27084                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 27085                                  ;assume	ds:resgroup				;AN000;
 27086                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 27087                                  ;	add	bx,2				;AN000;  skip over first word
 27088                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 27089                                  ;	pop	bx				;AN000;
 27090                                  ;	pop	ds				;AN000;
 27091                                  ;assume	ds:trangroup				;AN000;
 27092                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 27093                                  ;
 27094                                  ;oth_fucase:					;AN000;
 27095                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 27096                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 27097                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 27098                                  ;	ja	upconv_end			;AC000;
 27099                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 27100                                  ;
 27101                                  ;upconv_end:					;AN000;
 27102                                  ;	ret
 27103                                  ;
 27104                                  ;upconv	endp					;AN000;
 27105                                  
 27106                                  ;============================================================================
 27107                                  ; COPY.ASM, MSDOS 6.0, 1991
 27108                                  ;============================================================================
 27109                                  ; 01/10/2018 - Retro DOS v3.0
 27110                                  
 27111                                  ;	title	COMMAND COPY routines.
 27112                                  
 27113                                  ;/*
 27114                                  ; *                      Microsoft Confidential
 27115                                  ; *                      Copyright (C) Microsoft Corporation 1991
 27116                                  ; *                      All Rights Reserved.
 27117                                  ; */
 27118                                  
 27119                                  ;***	COPY.ASM
 27120                                  
 27121                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 27122                                  
 27123                                  
 27124                                  ;***	MODIFICATION HISTORY
 27125                                  
 27126                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 27127                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 27128                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 27129                                  ;	     to tokens which begin with path characters so that PARSELINE
 27130                                  ;	     will work correctly.
 27131                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 27132                                  ;	     individual tokens. That distinction is no longer needed for
 27133                                  ;	     FOR loop processing.
 27134                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 27135                                  ;	     1 when Cparse is called from COPY.
 27136                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 27137                                  ;	     mod. It now is conditional on flag like previous mod.
 27138                                  ;11/21/83 NP  Added printf
 27139                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 27140                                  ;	     be added to a token.
 27141                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 27142                                  ;	     NOTE: DestHand is the destination handle. There are two
 27143                                  ;	     special values: -1 meaning destination was never opened and
 27144                                  ;	     0 which means that the destination has been openned and
 27145                                  ;	     closed.
 27146                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 27147                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 27148                                  ;	     lost on large and multiple file (wildcard) copies.
 27149                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 27150                                  ;	     destination are not equal.
 27151                                  ;
 27152                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 27153                                  ;	     first source file AND we run out of disk space before
 27154                                  ;	     completing the concatenation, restore the first source
 27155                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 27156                                  ;
 27157                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 27158                                  ;		instead of compatibility mode. This gives lesser sharing
 27159                                  ;		violations when files are opened for read on a copy.
 27160                                  
 27161                                  ; ---------------------------------------------------------------------------
 27162                                  ;***	COPY CODE
 27163                                  ; ---------------------------------------------------------------------------
 27164                                  
 27165                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 27166                                  
 27167                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27168                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 27169                                  
 27170                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27171                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3E6Dh
 27172                                  
 27173                                  COPY:
 27174                                  	; 	Initialize internal variables.
 27175                                  
 27176 00003C66 31C0                    	xor	ax,ax		; AX = 0
 27177 00003C68 A3[93A0]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 27178 00003C6B A3[C3A1]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 27179 00003C6E A3[0FA1]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 27180 00003C71 A2[109E]                	mov	[CFLAG],al	; 'destination file created' = false
 27181 00003C74 A3[169E]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 27182 00003C77 A3[0C9E]                	mov	[DestSwitch],ax	; destination switches = none
 27183 00003C7A A3[E7A1]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 27184 00003C7D A3[ACA0]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 27185 00003C80 A2[119E]                	mov	[DestClosed],al	; 'destination file closed' = false
 27186 00003C83 A2[ABA0]                	mov	[DestSiz],al	; length of destination pathname = 0
 27187 00003C86 A2[0EA1]                	mov	[SrcSiz],al	; length of source pathname = 0
 27188 00003C89 A2[AEA0]                	mov	[DestInfo],al	; destination pathname flags = none
 27189 00003C8C A2[11A1]                	mov	[SrcInfo],al	; source pathname flags = none
 27190 00003C8F A2[C5A1]                	mov	[INEXACT],al	; 'inexact copy' = false
 27191 00003C92 A2[AAA0]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 27192 00003C95 A2[0DA1]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 27193 00003C98 A2[D59C]                	mov	[USERDIR1],al	; saved working directory = null
 27194 00003C9B A2[C6A1]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 27195 00003C9E A2[049E]                	mov	[RDEOF],al	; 'read end of file' = false
 27196 00003CA1 A3[69A1]                	mov	[SRCHAND],ax	; source handle = 0
 27197 00003CA4 A3[CEA1]                	mov	[CPDATE],ax	; copy date = 0
 27198 00003CA7 A3[D0A1]                	mov	[CPTIME],ax	; copy time = 0
 27199 00003CAA A2[6BA1]                	mov	[SRCISDEV],al	; 'source is device' = false
 27200                                  	; 23/03/2023
 27201                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 27202 00003CAD A2[D6A1]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 27203 00003CB0 A3[D2A1]                	mov	[OFilePtr_Lo],ax
 27204 00003CB3 A3[D4A1]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 27205 00003CB6 A2[CAA1]                	mov	[TERMREAD],al	; 'terminate read' = false
 27206 00003CB9 A2[86A0]                	mov	[comma],al	; '"+,," found' = false
 27207 00003CBC A2[87A0]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 27208 00003CBF A2[24A2]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 27209 00003CC2 A3[0E9E]                	mov	[AllSwitch],ax	; all switches = none
 27210 00003CC5 A2[079E]                	mov	[ArgC],al	; source/dest argument count = 0
 27211 00003CC8 A2[CCA1]                	mov	[PLUS],al	; '"+" in command line' = false
 27212 00003CCB A2[C7A1]                	mov	[BINARY],al	; 'binary copy' = false
 27213 00003CCE A2[CBA1]                	mov	[ASCII],al	; 'ascii copy' = false
 27214 00003CD1 A3[1D9E]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 27215 00003CD4 A3[C8A1]                	mov	[WRITTEN],ax	; 'destination written to' = false
 27216 00003CD7 A2[069E]                	mov	[Concat],al	; 'concatenating' = false
 27217 00003CDA A2[0AA1]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 27218 00003CDD A3[0BA1]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 27219                                  	
 27220                                  	; 12/06/2023
 27221                                  	; MSDOS 6.22 COMMAND.COM
 27222                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27223 00003CE0 A2[E3A1]                	mov     [cox_dest_file], al ; MSDOS 6.22
 27224 00003CE3 A2[E4A1]                	mov     [cox_src_file], al  ; MSDOS 6.22
 27225                                  
 27226                                  	;	Initialize buffers with double-nulls.
 27227                                  
 27228 00003CE6 A3[6CA1]                	mov	[ScanBuf],ax
 27229 00003CE9 A3[AFA0]                	mov	[DestBuf],ax
 27230 00003CEC A3[12A1]                	mov	[SrcBuf],ax
 27231 00003CEF A3[70A0]                	mov	[SDIRBUF],ax
 27232 00003CF2 A3[2AA0]                	mov	[DIRBUF],ax
 27233 00003CF5 A3[E79F]                	mov	[DestFcb],ax
 27234                                  
 27235 00003CF8 A2[CDA1]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 27236                                  		
 27237 00003CFB 48                      	dec	ax ; -1		; AX = 0FFFFh
 27238 00003CFC A3[06A1]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 27239 00003CFF A2[189E]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 27240 00003D02 A2[09A1]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 27241 00003D05 A2[AAA0]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 27242                                  
 27243                                  	; 12/06/2023
 27244                                  	; Retro DOS v4.2 COMMAND.COM
 27245                                  	; MSDOS 6.22 COMMAND.COM code only !
 27246                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27247                                  	;
 27248 00003D08 E8F106                  	call	init_copycmd_option ; MSDOS 6.22 
 27249                                  		
 27250 00003D0B BE8100                  	mov	si,81h		; SI = ptr to command line
 27251                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 27252                                  	; 23/03/2023
 27253 00003D0E B32B                    	mov	bl,'+'
 27254 00003D10 FE06[23A2]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 27255 00003D14 C606[95A0]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 27256                                  
 27257                                  	;*	Scan the command line for destination information.
 27258                                  
 27259                                  DESTSCAN:
 27260 00003D19 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 27261 00003D1B BF[6CA1]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 27262                                  	; 23/03/2023
 27263 00003D1E 8936[89A0]              	mov	[parse_last],si		;AN018; save cmd line ptr
 27264 00003D22 E86F0B                  	call	cparse			; parse next object
 27265 00003D25 9C                      	pushf	; (*)			; save CParse flags
 27266 00003D26 FE06[CDA1]              	inc	byte [objcnt]		; count object
 27267 00003D2A F6C780                  	test	bh,80h
 27268 00003D2D 7405                    	jz	short NOCOPY		; no "+" delimiter
 27269 00003D2F C606[CCA1]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 27270                                  NOCOPY:
 27271 00003D34 F6C701                  	test	bh,1
 27272 00003D37 747D                    	jz	short TESTP2		; not a switch
 27273                                  
 27274                                  	;	Found a switch.
 27275                                  
 27276                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 27277                                  	;
 27278                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27279                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F43h
 27280                                  CHK_CP_SWITCH:
 27281                                  	; MSDOS 6.0
 27282 00003D39 F7C51000                	test	bp,10h
 27283                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 27284 00003D3D 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 27285                                  	;test	word [AllSwitch],10h
 27286 00003D3F F606[0E9E]10            	test	byte [AllSwitch],10h
 27287                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 27288 00003D44 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 27289                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 27290                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 27291 00003D46 81CD0040                	or	bp,4000h
 27292                                  NOT_SLASHV:
 27293                                  	; ****************************************
 27294                                  	; 12/06/2023
 27295                                  	; Retro DOS v4.2 COMMAND.COM
 27296                                  	; MSDOS 6.22 COMMAND.COM code only !
 27297                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27298                                  	; ****************************************
 27299                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F55h
 27300                                  	;
 27301 00003D4A F7C54000                	test    bp,40h			; negative Y (-Y) switch flag
 27302 00003D4E 7417                    	jz	short CHK_SLASHY0
 27303                                  	;
 27304                                  	;test	word [AllSwitch],40h
 27305 00003D50 F606[0E9E]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 27306 00003D55 7507                    	jnz	short NOT_SLASHY1	; N flag
 27307                                  	;test	word [AllSwitch],80h
 27308 00003D57 F606[0E9E]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 27309 00003D5C 7404                    	jz	short NOT_SLASHY2
 27310                                  NOT_SLASHY1:
 27311 00003D5E 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 27312                                  NOT_SLASHY2:				; Set up bad switch
 27313 00003D62 C606[E2A1]00            	mov	byte [cox_y_override],0	; cox_y setting will be used
 27314                                  CHK_SLASHY0:
 27315 00003D67 F7C58000                	test    bp,80h
 27316 00003D6B 742B                    	jz      short CHK_SLASHY4	; not a /Y switch
 27317                                  	;
 27318 00003D6D 8A04                    	mov	al,[si]
 27319 00003D6F 3C79                    	cmp	al,'y'
 27320 00003D71 740A                    	je	short CHK_SLASHY1
 27321 00003D73 3C59                    	cmp	al,'Y'
 27322 00003D75 7406                    	je	short CHK_SLASHY1
 27323 00003D77 81CD0040                	or	bp,4000h		; FBadSwitch
 27324                                  	;				; Set up bad switch
 27325 00003D7B EB1B                    	jmp	short CHK_SLASHY4
 27326                                  CHK_SLASHY1:
 27327 00003D7D C60420                  	mov	byte [si],20h ; ' '
 27328 00003D80 46                      	inc	si
 27329                                  	;test	word [AllSwitch],40h
 27330 00003D81 F606[0E9E]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 27331 00003D86 7507                    	jnz	short CHK_SLASHY2	; N flag
 27332                                  	;test	word [AllSwitch],80h
 27333 00003D88 F606[0E9E]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 27334 00003D8D 7404                    	jz	short CHK_SLASHY3
 27335                                  CHK_SLASHY2:
 27336 00003D8F 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 27337                                  	;				; Set up bad switch
 27338                                  CHK_SLASHY3:
 27339 00003D93 C606[E2A1]01            	mov	byte [cox_y_override],1
 27340                                  CHK_SLASHY4:
 27341                                  	; ****************************************
 27342                                  	; 12/06/2023
 27343                                  ;NOT_SLASHV:
 27344                                  	;or	[DestSwitch],bp		; assume destination
 27345                                  	;or	[AllSwitch],bp		; keep tabs on all switches
 27346                                  
 27347                                  	; 12/06/2023
 27348                                  	; Retro DOS v4.2 COMMAND.COM
 27349                                  	; MSDOS 6.22 COMMAND.COM -TRANGROUP:3FA7h
 27350 00003D98 092E[0C9E]              	or	[DestSwitch],bp		; set [DestSwitch] SwitchY flag to 1
 27351 00003D9C 092E[0E9E]              	or	[AllSwitch],bp		; set [AllSwitch] SwitchY flag to 1
 27352                                  	;test	bp,~SwitchCopy		; Bad switch?
 27353 00003DA0 F7C5237F                	test	bp,7F23h ; MSDOS 6.22	; ~SwitchCopy ; not SwitchCopy
 27354 00003DA4 740A                    	jz	short NOT_BAD_SWITCH	; Switches are okay
 27355                                  
 27356                                  	; 12/06/2023
 27357                                  	; 23/03/2023
 27358                                  	; MSDOS 6.0
 27359                                  	;;test	bp,not SwitchCopy	;AN018; Bad switch?
 27360                                  	;test	bp,7FE3h ; test bp,~SwitchCopy
 27361                                  	;jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 27362                                  	
 27363 00003DA6 9D                      	popf	; (*)			;AN018; fix up stack
 27364 00003DA7 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 27365 00003DAA E86BE9                  	call	setup_parse_error_msg	;AN018; setup to print the message
 27366 00003DAD E9F2F0                  	jmp	cerror			;AC018; exit
 27367                                  NOT_BAD_SWITCH:
 27368 00003DB0 9D                      	popf				; restore CParse flags
 27369 00003DB1 7233                    	jc	short CHECKDONE		; found CR
 27370 00003DB3 E963FF                  	jmp	DESTSCAN		; continue scanning for destination
 27371                                  TESTP2:
 27372 00003DB6 9D                      	popf	; (*)			; restore CParse flags
 27373 00003DB7 722D                    	jc	short CHECKDONE		; found CR
 27374 00003DB9 F6C780                  	test	bh,80h
 27375 00003DBC 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 27376 00003DBE FE06[079E]              	inc	byte [ArgC]		; count independent pathname args
 27377                                  GOTPLUS:
 27378 00003DC2 56                      	push	si			; save cmd line ptr
 27379 00003DC3 A1[E7A1]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 27380 00003DC6 BE[6CA1]                	mov	si,ScanBuf		; SI = ptr to path string
 27381 00003DC9 29F0                    	sub	ax,si			; AX = offset of last element
 27382 00003DCB BF[AFA0]                	mov	di,DestBuf		; DI = ptr to destination buf
 27383 00003DCE 01F8                    	add	ax,di			; AX = ptr to last element in
 27384                                  					;  destination path buffer
 27385 00003DD0 A3[ACA0]                	mov	[DestTail],ax		; save ptr to last element
 27386 00003DD3 880E[ABA0]              	mov	[DestSiz],cl		; save path string length
 27387 00003DD7 41                      	inc	cx			; CX = mov length (incl null)
 27388 00003DD8 F3A4                    	rep	movsb			; DestBuf = possible destination path
 27389 00003DDA 883E[AEA0]              	mov	[DestInfo],bh		; save CParse info flags
 27390                                  	;mov	word [DestSwitch],0	; clear destination switches
 27391                                  	; 10/08/2024
 27392 00003DDE 890E[0C9E]              	mov	[DestSwitch],cx ; 0
 27393 00003DE2 5E                      	pop	si			; SI = ptr into cmd line again
 27394 00003DE3 E933FF                  	jmp	DESTSCAN		;AC018; continue scanning for dest
 27395                                  
 27396                                  CHECKDONE:
 27397                                  	;	We reached the CR. The destination scan is finished.
 27398                                  
 27399                                  	;	Disallow "copy file1+" as file overwriting itself.
 27400                                  	;
 27401                                  	;	(Note that "copy file1+file2+" will be accepted, and
 27402                                  	;	equivalent to "copy file1+file2".)
 27403                                  
 27404                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 27405                                  	;	through this check, since the switch would count
 27406                                  	;	as another object in ObjCnt.
 27407                                  
 27408 00003DE6 803E[CCA1]01            	cmp	byte [PLUS],1		; "+" with
 27409 00003DEB 7514                    	jnz	short CDCONT
 27410 00003DED 803E[079E]01            	cmp	byte [ArgC],1		; one arg,
 27411 00003DF2 750D                    	jnz	short CDCONT
 27412 00003DF4 803E[CDA1]02            	cmp	byte [objcnt],2		; two objects..
 27413 00003DF9 7506                    	jnz	short CDCONT
 27414 00003DFB BA[F991]                	mov	dx,OVERWR_PTR
 27415 00003DFE E9AE07                  	jmp	COPYERR			; is file overwrite
 27416                                  
 27417                                  CDCONT:
 27418 00003E01 A0[CCA1]                	mov	al,[PLUS]		; AL = '"+" occurred'
 27419 00003E04 A2[069E]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 27420 00003E07 D0E0                    	shl	al,1
 27421 00003E09 D0E0                    	shl	al,1
 27422 00003E0B A2[C5A1]                	mov	[INEXACT],al		; therefore making an inexact copy
 27423                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 27424 00003E0E A0[079E]                	mov	al,[ArgC]		; AL = # independent arguments
 27425                                  
 27426                                  	; 23/03/2023
 27427                                  	; MSDOS 3.3		
 27428                                  	;or	al,al
 27429                                  	;jz	short CERROR4J
 27430                                  	; MSDOS 6.0
 27431 00003E11 08C0                    	or	al,al
 27432 00003E13 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 27433                                  		
 27434 00003E15 BA[D091]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27435 00003E18 C706[D091]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 27436                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 27437 00003E1E EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 27438                                  
 27439                                  	; more than 0 args; check if too many
 27440                                  TRY_TOO_MANY:
 27441 00003E20 3C02                    	cmp	al,2
 27442 00003E22 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 27443                                  
 27444                                  	; 23/03/2023
 27445                                  	; MSDOS 6.0
 27446 00003E24 BA[D091]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27447 00003E27 C706[D091]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 27448                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 27449                                  CERROR_PARSEJ:
 27450 00003E2D C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 27451                                  					; parse error message	
 27452                                  CERROR4J:
 27453 00003E32 E96DF0                  	jmp	cerror
 27454                                  
 27455                                  ACOUNTOK:
 27456 00003E35 BD[AAA0]                	mov	bp,DestVars		; BP = base of dest variables
 27457                                  
 27458 00003E38 3C01                    	cmp	al,1
 27459 00003E3A 7520                    	jnz	short GOT2ARGS
 27460                                  
 27461                                  	;	Only one independent pathname argument on command line.
 27462                                  	;	Set destination to d:*.*, where d: is current drive.
 27463                                  
 27464                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 27465                                  	;	The two files would be appended as d:file1, rather than x:file1.
 27466                                  
 27467 00003E3C A0[059E]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 27468                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 27469                                  	; 23/03/2023
 27470 00003E3F 0441                    	add	al,'A'
 27471 00003E41 B43A                    	mov	ah,':'			; AX = "d:"
 27472                                  	;mov	byte [bp+1],2
 27473 00003E43 C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 27474                                  
 27475 00003E47 BF[AFA0]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 27476 00003E4A AB                      	stosw				; store "d:"
 27477                                  		
 27478 00003E4B C706[0C9E]0000          	mov	word [DestSwitch],0	; clear destination switches
 27479                                  	;mov	byte [bp+4],2		
 27480 00003E51 C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 27481                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 27482                                  	;mov	byte [bp+0],0		
 27483 00003E55 C6460000                	mov	byte [bp],0
 27484 00003E59 E8090A                  	call	SETSTARS		; add wildcards
 27485                                  GOT2ARGS:
 27486                                  	;	If destination pathname is "d:", add full wildcard filename
 27487                                  
 27488                                  	;cmp	byte [bp+1],2
 27489 00003E5C 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 27490 00003E60 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 27491 00003E62 B03A                    	mov	al,':'  ; 3Ah
 27492 00003E64 3806[B0A0]              	cmp	byte [DestBuf+1],al
 27493 00003E68 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 27494                                  	;or	byte [bp+4],2
 27495 00003E6A 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 27496 00003E6E BF[B1A0]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 27497                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 27498                                  	;mov	byte [bp+0],0		
 27499 00003E71 C6460000                	mov	byte [bp],0
 27500 00003E75 E8ED09                  	call	SETSTARS		; add wildcards
 27501                                  NOTSHORTDEST:
 27502                                  	;	If destination pathname ends with "\", try to make
 27503                                  	;	sure it's "d:\".
 27504                                  
 27505                                  	;mov	di,[bp+2]
 27506 00003E78 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 27507 00003E7B 803D00                  	cmp	byte [di],0
 27508 00003E7E 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 27509                                  
 27510 00003E80 BA[0B93]                	mov	dx,badcd_ptr
 27511 00003E83 B03A                    	mov	al,':'
 27512 00003E85 3845FE                  	cmp	[di-2],al
 27513 00003E88 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 27514                                  	;mov	byte [bp+0],2
 27515                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 27516 00003E8A C6460002                	mov	byte [bp],2
 27517                                  	;or	byte [bp+4],6
 27518 00003E8E 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 27519                                  					  ;  path character
 27520 00003E92 E8D009                  	call	SETSTARS		; add wildcards
 27521                                  CHKSWTCHES:
 27522                                  	;	We have enough information about the destination for now.
 27523                                  
 27524                                  	;	Turn on verify if requested. Save the current verify flag.
 27525                                  
 27526                                  	; 23/03/2023
 27527                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 27528                                  	;mov	dx,BADPARMPTR
 27529                                  	
 27530 00003E95 A1[0E9E]                	mov	ax,[AllSwitch]		; AX = all switch flags
 27531                                  
 27532                                  	; 23/03/2023
 27533                                  	; MSDOS 3.3
 27534                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 27535                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 27536                                  	;jnz	short CERROR4J
 27537                                  	
 27538                                  	; 23/03/2023
 27539                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27540                                  	;test	ax,SwitchV ; 10h
 27541                                  	; 18/04/2023
 27542                                  	;test	ax,10h
 27543 00003E98 A810                    	test	al,10h  ; test al,SwitchV
 27544 00003E9A 7414                    	jz	short NOVERIF		; no /v, no verify
 27545                                  
 27546 00003E9C B454                    	mov	ah,Get_Verify_On_Write ; 54h
 27547 00003E9E CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 27548                                  				; Return: AL = 00h if flag OFF
 27549                                  				; AL = 01h if flag ON
 27550 00003EA0 1E                      	push	ds
 27551 00003EA1 8E1E[F39D]              	mov	ds,[RESSEG]
 27552 00003EA5 30E4                    	xor	ah,ah
 27553 00003EA7 A3[4502]                	mov	[VerVal],ax		; save current verify flag
 27554 00003EAA 1F                      	pop	ds
 27555 00003EAB B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 27556 00003EAE CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 27557                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 27558                                  NOVERIF:
 27559                                  	;*	Scan for first source.
 27560                                  
 27561 00003EB0 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27562 00003EB2 BE8100                  	mov	si,81h			; SI = ptr into command line
 27563                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 27564                                  	; 23/03/2023
 27565 00003EB5 B32B                    	mov	bl,'+' ; 2Bh
 27566                                  SCANFSRC:
 27567 00003EB7 BF[6CA1]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27568 00003EBA E8D709                  	call	cparse			; parse first source pathname
 27569 00003EBD F6C701                  	test	bh,1			; switch?
 27570 00003EC0 75F5                    	jnz	short SCANFSRC		; yes, try again
 27571 00003EC2 092E[0C9E]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 27572                                  
 27573                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 27574                                  
 27575                                  	; 23/03/2023
 27576 00003EC6 F7C50800                	test	bp,8
 27577                                  	;test	bp,SWITCHB
 27578 00003ECA 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 27579 00003ECC 803E[069E]00            	cmp	byte [Concat],0
 27580 00003ED1 7405                    	jz	short NOSETCASC		; we're not concatenating
 27581 00003ED3 C606[CBA1]04            	mov	byte [ASCII],4
 27582                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 27583                                  NOSETCASC:
 27584 00003ED8 E82604                  	call	SOURCE_SET		; set source variables
 27585 00003EDB E84400                  	call	FRSTSRC			; set up first source copy
 27586 00003EDE E99500                  	jmp	FIRSTENT		; jump into the copy loop
 27587                                  
 27588                                  ; ---------------------------------------------------------------------------
 27589                                  
 27590                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27591                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 27592                                  ENDCOPY:
 27593                                  	;*	End of the road. Close destination, display # files
 27594                                  	;	copied (meaning # destinations), and go back to main
 27595                                  	;	transient COMMAND code.
 27596                                  
 27597 00003EE1 E83203                  	call	CLOSEDEST
 27598                                  ENDCOPY2:
 27599 00003EE4 BA[0292]                	mov	dx,copied_ptr
 27600 00003EE7 8B36[1D9E]              	mov	si,[FileCnt]
 27601 00003EEB 8936[93A0]              	mov	[Copy_num],si
 27602 00003EEF E81D16                  	call	std_printf
 27603 00003EF2 E90FC2                  	jmp	TCOMMAND		; stack could be messed up
 27604                                  
 27605                                  ; ---------------------------------------------------------------------------
 27606                                  
 27607                                  SRCNONEXIST:
 27608                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 27609                                  	;	Otherwise, say 'file not found' and quit.
 27610                                  
 27611 00003EF5 803E[069E]00            	cmp	byte [Concat],0
 27612 00003EFA 7543                    	jne	short NEXTSRC		; concatenating - go on to next source
 27613                                  
 27614                                  	; 24/03/2023
 27615                                  	; MSDOS 3.3
 27616                                  	;mov	dx,SRCBUF
 27617                                  	;mov	[STRING_PTR_1],dx
 27618                                  	;mov	dx,STRINGBUF1PTR
 27619                                  	;call	STD_PRINTF
 27620                                  	;mov	dx,FNOTFOUNDPTR
 27621                                  	;jmp	COPYERR
 27622                                  
 27623                                  	; 24/*03/2023
 27624                                  	; MSDOS 6.0
 27625                                  	;	Set up error message.
 27626 00003EFC C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 27627                                  				  	; extended error msg
 27628 00003F01 BA[D091]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27629 00003F04 C706[D091]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 27630                                  					; 'file not found' msg#
 27631 00003F0A C706[91A0][12A1]        	mov	word [string_ptr_2],SrcBuf
 27632                                  					; point at bad pathname
 27633 00003F10 C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27634                                  					; 1 substitution
 27635 00003F15 E99706                  	jmp	COPYERR			; print msg and clean up
 27636                                  
 27637                                  ; ---------------------------------------------------------------------------
 27638                                  
 27639                                  SOURCEPROC:
 27640                                  
 27641                                  	;*	Preparatory processing for each source file.
 27642                                  	;	Called at FrstSrc for first source file.
 27643                                  
 27644 00003F18 E8E603                  	call	SOURCE_SET		; set source variables & ascii/binary
 27645 00003F1B 803E[069E]00            	cmp	byte [Concat],0
 27646 00003F20 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 27647                                  
 27648                                  ; ---------------------------------------------------------------------------
 27649                                  
 27650                                  FRSTSRC:
 27651 00003F22 31C0                    	xor	ax,ax
 27652 00003F24 A2[109E]                	mov	[CFLAG],al		; 'destination not created'
 27653 00003F27 A3[169E]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 27654 00003F2A A2[119E]                	mov	[DestClosed],al		; 'destination not closed'
 27655                                  
 27656                                  LEAVECFLAG:
 27657 00003F2D 8936[C3A1]              	mov	[SRCPT],si		; save cmd-line ptr
 27658 00003F31 BF[D59C]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 27659                                  						;   current dir
 27660 00003F34 BD[0DA1]                	mov	bp,SrcVars		; BP = base of source variables
 27661 00003F37 E8DB07                  	call	BUILDPATH		; cd to source dir, figure
 27662                                  						;   out stuff about source
 27663 00003F3A 8B36[0FA1]              	mov	si,[SrcTail]		; SI = ptr to source filename
 27664 00003F3E C3                      	retn
 27665                                  
 27666                                  ; ---------------------------------------------------------------------------
 27667                                  
 27668                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27669                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27670                                  NEXTSRC:
 27671                                  	;*	Next source. Come here after handling each pathname.
 27672                                  	;	We're done unless there are additional source pathnames
 27673                                  	;	to be appended.
 27674                                  	;
 27675                                  	;	Note that all files matching an ambiguous pathname
 27676                                  	;	are processed before coming here.
 27677                                  
 27678 00003F3F 803E[CCA1]00            	cmp	byte [PLUS],0
 27679                                  	;jne	short MORECP		; copying "+" sources - keep going
 27680                                  	; 26/04/2023
 27681                                  ;ENDCOPYJ2:
 27682                                  	;jmp	short ENDCOPY
 27683 00003F44 749B                    	je	short ENDCOPY
 27684                                  MORECP:
 27685 00003F46 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27686 00003F48 8B36[C3A1]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 27687                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 27688 00003F4C B32B                    	mov	bl,'+' ; 2Bh
 27689                                  SCANSRC:
 27690 00003F4E BF[6CA1]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27691 00003F51 E84009                  	call	cparse			; parse first source name
 27692                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 27693                                  	; 26/04/2023
 27694 00003F54 728B                    	jb	short ENDCOPY
 27695                                  
 27696 00003F56 F6C780                  	test	bh,80h
 27697                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 27698                                  	; 26/04/2023
 27699 00003F59 7486                    	jz	short ENDCOPY
 27700                                  
 27701 00003F5B F6C701                  	test	bh,1
 27702 00003F5E 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 27703                                  
 27704                                  	;	ScanBuf contains the next source pathname.
 27705                                  
 27706 00003F60 E8B5FF                  	call	SOURCEPROC		; prepare this source
 27707 00003F63 803E[86A0]01            	cmp	byte [comma],1		; was +,, found last time?
 27708 00003F68 7507                    	jnz	short NOSTAMP		;  no - try for a file
 27709 00003F6A C606[87A0]01            	mov	byte [plus_comma],1	; yes - set flag
 27710 00003F6F EB84                    	jmp	short SRCNONEXIST	; we know we won't find it
 27711                                  
 27712                                  NOSTAMP:
 27713 00003F71 C606[87A0]00            	mov	byte [plus_comma],0	; reset +,, flag
 27714                                  
 27715                                  ; ---------------------------------------------------------------------------
 27716                                  
 27717                                  FIRSTENT:
 27718                                  
 27719                                  ;M047
 27720                                  ; The only case we need to worry about is when the source is wildcarded and
 27721                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 27722                                  ;concatenation. We check for this case.
 27723                                  ;
 27724                                  ;NB: This change has been backed out and replaced by M048. This is not the
 27725                                  ;right place to do this check.
 27726                                  
 27727                                  	;	This is where we enter the loop with the first source.
 27728                                  
 27729 00003F76 BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 27730 00003F79 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27731 00003F7C CD21                    	int	21h		; DOS -	PARSE FILENAME
 27732                                  				; DS:SI	-> string to parse
 27733                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27734                                  				; AL = bit mask	to control parsing
 27735 00003F7E 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 27736 00003F81 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 27737 00003F83 A1[12A1]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 27738 00003F86 80FC3A                  	cmp	ah,':'
 27739 00003F89 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 27740 00003F8B B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 27741                                  DRVSPEC1:
 27742 00003F8D 0C20                    	or	al,20h			; AL = lowercase drive letter
 27743 00003F8F 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 27744                                  	;mov	[5Ch],al
 27745 00003F91 A25C00                  	mov	[FCB],al		; put drive id in FCB
 27746                                  
 27747                                  	;	FCB contains drive and filename to search.
 27748                                  		
 27749 00003F94 B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'
 27750 00003F96 E86D01                  	call	SEARCH
 27751                                  SRCHDONE:
 27752 00003F99 9C                      	pushf				; save flags from Search
 27753 00003F9A E834EA                  	call	RestUDir1		; restore users current directory
 27754 00003F9D 9D                      	popf				; restore flags from search
 27755 00003F9E 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 27756 00003FA0 E952FF                  	jmp	SRCNONEXIST		; didn't find the source
 27757                                  
 27758                                  NEXTAMBIG0:
 27759 00003FA3 30C0                    	xor	al,al
 27760 00003FA5 8606[189E]              	xchg	al,[FRSTSRCH]
 27761 00003FA9 08C0                    	or	al,al
 27762 00003FAB 740B                    	jz	short NEXTAMBIG
 27763                                  SETNMEL:
 27764 00003FAD B90C00                  	mov	cx,12
 27765 00003FB0 BF[70A0]                	mov	di,SDIRBUF
 27766 00003FB3 BE[2AA0]                	mov	si,DIRBUF
 27767 00003FB6 F3A4                    	rep	movsb			; save very first source name
 27768                                  NEXTAMBIG:
 27769 00003FB8 30C0                    	xor	al,al
 27770 00003FBA A2[C6A1]                	mov	[NOWRITE],al		; turn off nowrite
 27771 00003FBD 8B3E[0FA1]              	mov	di,[SrcTail]
 27772 00003FC1 BE[2BA0]                	mov	si,DIRBUF+1
 27773 00003FC4 E886EB                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 27774                                  ;MELDO:
 27775                                  	; ****************************************
 27776                                  	; 12/06/2023
 27777                                  	; Retro DOS v4.2 COMMAND.COM
 27778                                  	; MSDOS 6.22 COMMAND.COM code only !
 27779                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27780                                  	; ****************************************
 27781                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:41DBh
 27782                                  MELDO0:
 27783 00003FC7 803E[E2A1]00            	cmp	byte [cox_y_override],0 ; /Y switch override (question) enabled ?
 27784 00003FCC 746C                    	jz	short MELDO ; no
 27785                                  	; ----------------------
 27786                                  	; yes
 27787 00003FCE E85406                  	call	BUILDDEST
 27788 00003FD1 BE[12A1]                	mov	si,SrcBuf
 27789 00003FD4 BF[219B]                	mov	di,SRCXNAME
 27790                                  	;mov	ah,60h
 27791 00003FD7 B460                    	mov	ah,xNameTrans ; 60h
 27792 00003FD9 CD21                    	int	21h	; DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING
 27793                                  			; DS:SI -> ASCIZ relative path string or directory name
 27794                                  			; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
 27795 00003FDB E8A308                  	call	COMPNAME
 27796 00003FDE 7540                    	jnz	short MELDO1    	; different file names
 27797 00003FE0 803E[069E]00            	cmp	byte [Concat],0
 27798 00003FE5 7539                    	jnz	short MELDO1		; concatenating
 27799                                  	; "File cannot be copied onto itself"
 27800 00003FE7 BA[7B93]                	mov	dx,file_name_ptr
 27801 00003FEA E82215                  	call	std_printf
 27802 00003FED E831EB                  	call	CRLF2
 27803 00003FF0 BA[F991]                	mov	dx,OVERWR_PTR
 27804 00003FF3 E9B905                  	jmp	COPYERR
 27805                                  ;MELDO1:
 27806                                  	;cmp	byte [CFLAG],0		; destination file created flag
 27807                                  	;jnz	short MELDO		; yes, new (created) file
 27808                                  	;				; no, overwrite question (must be confirmed)
 27809                                  	;call	get_answer_YNA
 27810                                  	;jb	short MELDO2    	; answer is no
 27811                                  	;cmp	byte [Concat],0
 27812                                  	;jnz	short MELDO
 27813                                  	;cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 27814                                  	;jnz	short DOREAD    	; yes
 27815                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 27816                                  MELDO2:
 27817 00003FF6 803E[0AA1]00            	cmp	byte [MELCOPY],0	; is 'Mel Hallerman copy' false ?
 27818 00003FFB 7507                    	jnz	short MELDO3    	; no (, it is true)
 27819 00003FFD 803E[069E]00            	cmp	byte [Concat],0
 27820 00004002 7408                    	jz	short MELDO4
 27821                                  MELDO3:
 27822 00004004 C606[119E]01            	mov	byte [DestClosed],1
 27823 00004009 E9D5FE                  	jmp	ENDCOPY
 27824                                  MELDO4:
 27825 0000400C E8EB00                  	call	SEARCHNEXT
 27826 0000400F 74A7                    	jz	short NEXTAMBIG
 27827 00004011 803E[E4A1]00            	cmp	byte [cox_src_file],0
 27828                                  	;jz	short MELDO5
 27829                                  	;jmp	NEXTSRC
 27830                                  	; 18/06/2023
 27831 00004016 7505                    	jnz	short NEXTSRCJ
 27832                                  MELDO5:
 27833 00004018 C606[119E]01            	mov	byte [DestClosed],1
 27834                                  NEXTSRCJ:	; 18/06/2023
 27835 0000401D E91FFF                  	jmp	NEXTSRC
 27836                                  
 27837                                  	; 12/06/2023
 27838                                  MELDO1:
 27839 00004020 803E[109E]00            	cmp	byte [CFLAG],0		; destination file created flag
 27840 00004025 7513                    	jnz	short MELDO     	; yes, new (created) file
 27841                                  					; no, overwrite question (must be confirmed)
 27842 00004027 E81803                  	call	get_answer_YNA
 27843 0000402A 72CA                    	jb	short MELDO2    	; answer is no
 27844 0000402C 803E[069E]00            	cmp	byte [Concat],0
 27845 00004031 7507                    	jnz	short MELDO
 27846 00004033 803E[E3A1]00            	cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 27847 00004038 7517                    	jnz	short DOREAD    	; yes
 27848                                  	; 12/06/2023
 27849                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 27850                                  
 27851                                  	; ****************************************
 27852                                  	; 12/06/2023
 27853                                  MELDO:
 27854 0000403A 803E[069E]00            	cmp	byte [Concat],0
 27855 0000403F 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 27856 00004041 F606[11A1]02            	test	byte [SrcInfo],2	; wildcard - show name
 27857 00004046 7409                    	jz	short DOREAD
 27858                                  SHOWCPNAM:
 27859                                  	; 25/03/2023
 27860                                  	; MSDOS 3.3
 27861                                  	;mov	dx,SRCBUF
 27862                                  	;mov	[STRING_PTR_2],dx
 27863                                  	;mov	dx,STRINGBUF2PTR
 27864                                  	;call	STD_PRINTF
 27865                                  	;call	CRLF2
 27866                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 27867                                  	; MSDOS 6.0 (& MSDOS 5.0
 27868 00004048 BA[7B93]                	mov	dx,file_name_ptr
 27869 0000404B E8C114                  	call	std_printf
 27870 0000404E E8D0EA                  	call	CRLF2
 27871                                  DOREAD:
 27872 00004051 E8C300                  	call	DOCOPY
 27873 00004054 803E[069E]00            	cmp	byte [Concat],0
 27874 00004059 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 27875                                  
 27876 0000405B E8B801                  	call	CLOSEDEST		; close current destination
 27877 0000405E 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 27878                                  
 27879 00004060 C606[109E]00            	mov	byte [CFLAG],0		; 'destination not created'
 27880                                  NODCLOSE:
 27881 00004065 803E[069E]00            	cmp	byte [Concat],0
 27882 0000406A 740A                    	jz	short NOFLUSH
 27883                                  
 27884                                  ;	Concatenating - flush output between source files so LostErr
 27885                                  ;	stuff works correctly.
 27886                                  
 27887                                  	;invoke	FlshFil  ; MSDOS 6.0
 27888                                  	; 25/03/2023
 27889 0000406C E80304                  	call	FlshFil
 27890                                  	;call	FLUSHFIL ; MSDOS 3.3
 27891                                  
 27892 0000406F F606[0AA1]FF            	test	byte [MELCOPY],0FFh
 27893                                  	;jz	short NOFLUSH
 27894                                  	;jmp	short DOMELCOPY
 27895                                  	; 25/03/2023
 27896 00004074 750D                    	jnz	short DOMELCOPY
 27897                                  NOFLUSH:
 27898 00004076 E88100                  	call	SEARCHNEXT		; try next match
 27899 00004079 75A2                    	jnz	short NEXTSRCJ		; not found - finished with 
 27900                                  					;   this source spec
 27901 0000407B C606[119E]00            	mov	byte [DestClosed],0	; 'destination not closed'
 27902 00004080 E935FF                  	jmp	NEXTAMBIG		; do next ambig match
 27903                                  
 27904                                  DOMELCOPY:
 27905 00004083 803E[0AA1]FF            	cmp	byte [MELCOPY],0FFh
 27906 00004088 740D                    	je	short CONTMEL
 27907 0000408A 8B36[C3A1]              	mov	si,[SRCPT]
 27908 0000408E 8936[0BA1]              	mov	[MELSTART],si
 27909 00004092 C606[0AA1]FF            	mov	byte [MELCOPY],0FFh
 27910                                  
 27911                                  CONTMEL:
 27912 00004097 31ED                    	xor	bp,bp
 27913 00004099 8B36[C3A1]              	mov	si,[SRCPT]
 27914                                  	;mov	bl,[PLUS_CHR]
 27915                                  	; 25/03/2023
 27916 0000409D B32B                    	mov	bl,'+'
 27917                                  SCANSRC2:
 27918 0000409F BF[6CA1]                	mov	di,ScanBuf
 27919 000040A2 E8EF07                  	call	cparse
 27920 000040A5 F6C780                  	test	bh,80h
 27921 000040A8 742F                    	jz	short NEXTMEL		; no "+" - go back to start
 27922 000040AA F6C701                  	test	bh,1
 27923 000040AD 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 27924 000040AF E866FE                  	call	SOURCEPROC
 27925 000040B2 E81CE9                  	call	RestUDir1
 27926 000040B5 BF[AB9F]                	mov	di,DESTFCB2
 27927 000040B8 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27928 000040BB CD21                    	int	21h		; DOS -	PARSE FILENAME
 27929                                  				; DS:SI	-> string to parse
 27930                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27931                                  				; AL = bit mask	to control parsing
 27932 000040BD BB[71A0]                	mov	bx,SDIRBUF+1
 27933 000040C0 BE[AC9F]                	mov	si,DESTFCB2+1
 27934 000040C3 8B3E[0FA1]              	mov	di,[SrcTail]
 27935                                  
 27936 000040C7 E81C06                  	call	BUILDNAME
 27937                                  
 27938 000040CA 803E[069E]00            	cmp	byte [Concat],0
 27939 000040CF 7405                    	je	short MELDOJ		; not concatenating - continue
 27940                                  
 27941                                  	;	Yes, turn off nowrite because this part of the code 
 27942                                  	;	is only reached after the first file has been dealt with.
 27943                                  
 27944 000040D1 C606[C6A1]00            	mov	byte [NOWRITE],0
 27945                                  MELDOJ:
 27946 000040D6 E961FF                  	jmp	MELDO
 27947                                  	; 18/06/2023
 27948                                  ;NEXTSRCJ:
 27949                                  	;jmp	NEXTSRC
 27950                                  
 27951                                  NEXTMEL:
 27952 000040D9 E83A01                  	call	CLOSEDEST
 27953 000040DC 31C0                    	xor	ax,ax
 27954 000040DE A2[109E]                	mov	[CFLAG],al
 27955 000040E1 A3[169E]                	mov	[NXTADD],ax
 27956 000040E4 A2[119E]                	mov	[SPECDRV],al
 27957 000040E7 8B36[0BA1]              	mov	si,[MELSTART]
 27958 000040EB 8936[C3A1]              	mov	[SRCPT],si
 27959 000040EF E80800                  	call	SEARCHNEXT
 27960 000040F2 7403                    	jz	short SETNMELJ
 27961 000040F4 E9EDFD                  	jmp	ENDCOPY2
 27962                                  SETNMELJ:
 27963 000040F7 E9B3FE                  	jmp	SETNMEL
 27964                                  
 27965                                  ; ---------------------------------------------------------------------------
 27966                                  
 27967                                  SEARCHNEXT:
 27968 000040FA B412                    	mov	ah,Dir_Search_Next ; 12h
 27969 000040FC F606[11A1]02            	test	byte [SrcInfo],2
 27970 00004101 7503                    	jnz	short SEARCH		; do search-next if ambig
 27971 00004103 08E4                    	or	ah,ah			; reset zero flag
 27972 00004105 C3                      	retn
 27973                                  
 27974                                  ; ---------------------------------------------------------------------------
 27975                                  
 27976                                  SEARCH:
 27977 00004106 50                      	push	ax
 27978 00004107 B41A                    	mov	ah,Set_DMA ; 1Ah
 27979 00004109 BA[2AA0]                	mov	dx,DIRBUF	; put result of search in dirbuf
 27980 0000410C CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27981                                  			; DS:DX	-> disk	transfer buffer
 27982 0000410E 58                      	pop	ax		; restore search first/next command
 27983 0000410F BA5C00                  	mov	dx,FCB ; 5Ch
 27984 00004112 CD21                    	int	21h		; Do the search
 27985 00004114 08C0                    	or	al,al
 27986 00004116 C3                      	retn
 27987                                  
 27988                                  ; ---------------------------------------------------------------------------
 27989                                  
 27990                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27991                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27992                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4335h
 27993                                  DOCOPY:
 27994 00004117 BE[12A1]                	mov	si,SrcBuf	; do name translate of source
 27995 0000411A BF[219B]                	mov	di,SRCXNAME	; save for name comparison
 27996 0000411D B460                    	mov	ah,xNameTrans ; 60h
 27997                                  	;mov	ah,60h
 27998 0000411F CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 27999                                  			; DS:SI	-> ASCIZ relative path string or directory name
 28000                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 28001 00004121 C606[049E]00            	mov	byte [RDEOF],0	; no EOF yet
 28002                                  
 28003                                  	; MSDOS 6.0
 28004                                  	;mov	ax,ExtOpen shl 8	; open the file
 28005                                  	; 26/03/2023
 28006 00004126 B8006C                  	mov	ax,6C00h
 28007                                  ;M046
 28008                                  ; For reads, the sharing mode should be deny none so that any process can
 28009                                  ;open this file again in any other sharing mode. This is mainly to allow
 28010                                  ;multiple command.com's to access the same file without getting sharing
 28011                                  ;violations
 28012                                  ;
 28013                                  	;mov	bx,deny_none|read_open_mode
 28014 00004129 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 28015 0000412C 31C9                    	xor	cx,cx			; no special files
 28016                                  	;mov	dx,read_open_flag	; set up open flags
 28017 0000412E BA0101                  	mov	dx,101h
 28018 00004131 CD21                    	int	21h
 28019                                  	; 26/03/2023
 28020 00004133 7230                    	jc	short Error_On_Source
 28021                                  	;jnc	short OPENOK
 28022                                  
 28023                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 28024                                  	;	They asked for it...
 28025                                  
 28026                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 28027                                  
 28028                                  	; 26/03/2023
 28029                                  	; MSDOS 3.3
 28030                                  	;mov	dx,SRCBUF
 28031                                  	;mov	ax,OPEN*256 ; 3D00h
 28032                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 28033                                  	;			; DS:DX	-> ASCIZ filename
 28034                                  	;			; AL = access mode
 28035                                  	;			; 0 - read
 28036                                  	;jnc	short OPENOK
 28037                                  	;call	GET_EXT_ERR_NUMBER
 28038                                  	;pushf
 28039                                  	;cmp	ax,65
 28040                                  	;jnz	short DOCOPY_ERR
 28041                                  	;mov	dx,ACCDENPTR
 28042                                  	;call	STD_PRINTF
 28043                                  ;DOCOPY_ERR:
 28044                                  	;popf
 28045                                  	;retn
 28046                                  
 28047                                  	; 26/03/2023
 28048                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28049                                  OPENOK:
 28050 00004135 89C3                    	mov	bx,ax
 28051 00004137 891E[69A1]              	mov	[SRCHAND],bx		; save handle
 28052 0000413B B80057                  	mov	ax,File_Times*256 ; 5700h
 28053 0000413E CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 28054                                  				; BX = file handle
 28055                                  
 28056 00004140 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 28057                                  
 28058 00004142 8916[CEA1]              	mov	[CPDATE],dx		; save date
 28059 00004146 890E[D0A1]              	mov	[CPTIME],cx		; save time
 28060                                  
 28061                                  	; MSDOS 6.0
 28062                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 28063                                  	; 26/04/2023
 28064                                  No_Copy_Xa:
 28065                                  	; 26/03/2023
 28066                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 28067                                  
 28068                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28069 0000414A B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 28070 0000414D CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28071                                  				; BX = file or device handle
 28072                                  	;and	dl,devid_ISDEV ; 80h
 28073                                  	; 18/04/2023
 28074 0000414F 80E280                  	and	dl,80h ; devid_ISDEV
 28075 00004152 8816[6BA1]              	mov	[SRCISDEV],dl		; set source info
 28076 00004156 7436                    	jz	short COPYLP		; source not a device
 28077 00004158 803E[C7A1]00            	cmp	byte [BINARY],0
 28078 0000415D 742F                    	je	short COPYLP		; ascii device ok
 28079 0000415F BA[3493]                	mov	dx,INBDEV_PTR		; cannot do binary input
 28080 00004162 E94A04                  	jmp	COPYERR
 28081                                  
 28082                                  Error_On_Source:			;AN022; we have a BAD error
 28083 00004165 E8CAE0                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 28084 00004168 C706[91A0][12A1]        	mov	word [string_ptr_2],SrcBuf
 28085                                  				;AN022; get address of failed string
 28086 0000416E C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1
 28087                                  				;AN022; put number of subst in control block
 28088 00004173 E89113                  	call	std_eprintf		;AN022; print it
 28089                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 28090 00004176 8B1E[69A1]              	mov	bx,[SRCHAND]
 28091                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 28092                                  	;je	short No_Close_Src	;AN022; no - don't close
 28093 0000417A 09DB                    	or	bx,bx
 28094 0000417C 7403                    	jz	short No_Close_Src
 28095                                  	;call	CLOSESRC		;AN022; clean up
 28096                                  	; 26/03/2023
 28097 0000417E E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 28098                                  No_Close_Src:				;AN022;
 28099 00004181 803E[109E]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 28100 00004186 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 28101 00004188 E956FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 28102                                  EndCopyJ3:				;AN022;
 28103 0000418B E956FD                  	jmp	ENDCOPY2		;AN022;
 28104                                  
 28105                                  	; 26/04/2023
 28106                                  ;No_Copy_Xa:
 28107                                  ;	; 26/03/2023
 28108                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 28109                                  ;
 28110                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 28111                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 28112                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28113                                  ;				; BX = file or device handle
 28114                                  ;	;and	dl,devid_ISDEV ; 80h
 28115                                  ;	; 18/04/2023
 28116                                  ;	and	dl,80h ; devid_ISDEV
 28117                                  ;	mov	[SRCISDEV],dl		; set source info
 28118                                  ;	jz	short COPYLP		; source not a device
 28119                                  ;	cmp	byte [BINARY],0
 28120                                  ;	je	short COPYLP		; ascii device ok
 28121                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 28122                                  ;	jmp	COPYERR
 28123                                  
 28124                                  COPYLP:
 28125                                  	; 26/03/2023
 28126 0000418E 8B1E[69A1]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 28127 00004192 8B0E[129E]              	mov	cx,[BYTCNT]
 28128 00004196 8B16[169E]              	mov	dx,[NXTADD]
 28129 0000419A 29D1                    	sub	cx,dx			; compute available space
 28130 0000419C 750E                    	jnz	short GOTROOM
 28131 0000419E E8D102                  	call	FlshFil   ; MSDOS 6.0
 28132                                  	;call	FLUSHFIL  ; MSDOS 3.3
 28133 000041A1 803E[CAA1]00            	cmp	byte [TERMREAD],0
 28134 000041A6 7565                    	jne	short CLOSESRC		; give up
 28135 000041A8 8B0E[129E]              	mov	cx,[BYTCNT]
 28136                                  GOTROOM:
 28137 000041AC 1E                      	push	ds
 28138 000041AD 8E1E[F59D]              	mov	ds,[TPA]
 28139 000041B1 B43F                    	mov	ah,READ ; 3Fh
 28140 000041B3 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 28141                                  				; BX = file handle,CX = number of bytes to read
 28142                                  				; DS:DX	-> buffer
 28143 000041B5 1F                      	pop	ds
 28144                                  	;jc	short CLOSESRC	; MSDOS 3.3
 28145                                  	; 26/03/2023
 28146 000041B6 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 28147 000041B8 89C1                    	mov	cx,ax			; get count
 28148 000041BA E351                    	jcxz	CLOSESRC		; no more to read
 28149 000041BC 803E[6BA1]00            	cmp	byte [SRCISDEV],0
 28150 000041C1 7507                    	jne	short NOTESTA		; is a device, ascii mode
 28151 000041C3 803E[CBA1]00            	cmp	byte [ASCII],0
 28152 000041C8 741B                    	je	short BINREAD
 28153                                  NOTESTA:
 28154 000041CA 89CA                    	mov	dx,cx
 28155 000041CC 8B3E[169E]              	mov	di,[NXTADD]
 28156 000041D0 B01A                    	mov	al,1Ah
 28157 000041D2 06                      	push	es
 28158 000041D3 8E06[F59D]              	mov	es,[TPA]		; scan for EOF
 28159 000041D7 F2AE                    	repne	scasb
 28160 000041D9 07                      	pop	es
 28161 000041DA 7505                    	jnz	short USEALL
 28162 000041DC FE06[049E]              	inc	byte [RDEOF]
 28163 000041E0 41                      	inc	cx
 28164                                  USEALL:
 28165 000041E1 29CA                    	sub	dx,cx
 28166 000041E3 89D1                    	mov	cx,dx
 28167                                  BINREAD:
 28168 000041E5 030E[169E]              	add	cx,[NXTADD]
 28169 000041E9 890E[169E]              	mov	[NXTADD],cx
 28170 000041ED 3B0E[129E]              	cmp	cx,[BYTCNT]		; is buffer full?
 28171 000041F1 720C                    	jb	short TESTDEV		; if not, we may have found eof
 28172                                  	; 26/03/2023
 28173 000041F3 E87C02                  	call	FlshFil
 28174                                  	;call	FLUSHFIL
 28175 000041F6 803E[CAA1]00            	cmp	byte [TERMREAD],0
 28176 000041FB 7510                    	jne	short CLOSESRC		; give up
 28177 000041FD EB8F                    	jmp	short COPYLP
 28178                                  TESTDEV:
 28179 000041FF 803E[6BA1]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 28180 00004204 7407                    	je	short CLOSESRC
 28181 00004206 803E[049E]00            	cmp	byte [RDEOF],0
 28182 0000420B 7481                    	je	short COPYLP		; on device, go till ^Z
 28183                                  CLOSESRC:
 28184 0000420D 8B1E[69A1]              	mov	bx,[SRCHAND]
 28185                                  CLOSESRC2:
 28186 00004211 B43E                    	mov	ah,CLOSE ; 3Eh
 28187 00004213 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28188                                  				; BX = file handle
 28189                                  CLOSESRCDEST_RETN:
 28190 00004215 C3                      	retn
 28191                                  
 28192                                  ; ---------------------------------------------------------------------------
 28193                                  
 28194                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28195                                  CLOSEDEST:
 28196                                  
 28197                                  	;	We are called to close the destination.
 28198                                  	;	We need to note whether or not there is any internal data left
 28199                                  	;	to be flushed out.
 28200                                  
 28201 00004216 803E[119E]00            	cmp	byte [DestClosed],0
 28202 0000421B 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 28203 0000421D A0[0C9E]                	mov	al,[DestSwitch]
 28204 00004220 E8E803                  	call	SETASC			; check for b or a switch
 28205 00004223 742E                    	jz	short BINCLOS		;   on destination
 28206 00004225 8B1E[169E]              	mov	bx,[NXTADD]
 28207                                  ;
 28208                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 28209                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 28210                                  ;just return without appending a ^Z incorrectly for the first file (since we
 28211                                  ;are concatenating now). Also, in case it is a single file copy, we will
 28212                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 28213                                  ;performance overhead on single ASCII file copies which now always involve
 28214                                  ;2 writes instead of 1 before. Is this really that important?
 28215                                  ;
 28216                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 28217                                  ;M048;	jne	short PutZ
 28218                                  
 28219                                  	; 26/03/2023
 28220                                  	; MSDOS 3.3
 28221                                  	;cmp	bx,[BYTCNT]		; is memory full?
 28222                                  	;jne	short PUTZ
 28223                                  
 28224                                  	; 26/03/2023
 28225 00004229 E83902                  	call	TRYFLUSH		; flush (and double-check for concat)	
 28226 0000422C 7402                    	jz	short NOCONC
 28227                                  CONCHNG:
 28228 0000422E F9                      	stc
 28229 0000422F C3                      	retn
 28230                                  
 28231                                  NOCONC:	
 28232 00004230 31DB                    	xor	bx,bx
 28233                                  PUTZ:
 28234 00004232 1E                      	push	ds
 28235 00004233 8E1E[F59D]              	mov	ds,[TPA]
 28236 00004237 C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 28237 0000423B 1F                      	pop	ds
 28238 0000423C FF06[169E]              	inc	word [NXTADD]	; make sure our ^z gets written	
 28239 00004240 C606[C6A1]00            	mov	byte [NOWRITE],0
 28240 00004245 A1[C8A1]                	mov	ax,[WRITTEN]
 28241 00004248 0306[169E]              	add	ax,[NXTADD]
 28242 0000424C 7205                    	jc	short BINCLOS	; > 1
 28243 0000424E 83F801                  	cmp	ax,1
 28244 00004251 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 28245                                  BINCLOS:
 28246 00004253 E80F02                  	call	TRYFLUSH
 28247 00004256 75D6                    	jnz	short CONCHNG
 28248                                  
 28249                                  	; 26/04/2023
 28250 00004258 833E[C8A1]00            	cmp	word [WRITTEN],0
 28251                                  	; 26/03/2023
 28252 0000425D 7503                    	jnz	short NO_FORGET
 28253                                  FORGETITJ:
 28254                                  	;jz	short FORGETIT	; never wrote nothing
 28255                                  	; 26/03/2023
 28256 0000425F E98500                  	jmp	FORGETIT ; 18/04/2023
 28257                                  NO_FORGET:			; wrote something
 28258 00004262 8B1E[06A1]              	mov	bx,[DESTHAND]
 28259 00004266 8B0E[D0A1]              	mov	cx,[CPTIME]
 28260 0000426A 8B16[CEA1]              	mov	dx,[CPDATE]
 28261 0000426E 803E[C5A1]00            	cmp	byte [INEXACT],0 ; copy not exact?
 28262 00004273 7431                    	je	short DODCLOSE	; if no, copy date & time
 28263 00004275 B42C                    	mov	ah,Get_Time ; 2Ch
 28264 00004277 CD21                    	int	21h		; DOS -	GET CURRENT TIME
 28265                                  				; Return: CH = hours,CL = minutes,DH = seconds
 28266                                  				; DL = hundredths of seconds
 28267 00004279 D0E1                    	shl	cl,1
 28268 0000427B D0E1                    	shl	cl,1		; left justify min in cl
 28269 0000427D D1E1                    	shl	cx,1
 28270 0000427F D1E1                    	shl	cx,1
 28271 00004281 D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 28272 00004283 D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 28273 00004285 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 28274 00004287 51                      	push	cx		; save packed time
 28275 00004288 B42A                    	mov	ah,Get_Date ; 2Ah
 28276 0000428A CD21                    	int	21h		; DOS -	GET CURRENT DATE
 28277                                  				; Return: DL = day,DH = month,	CX = year
 28278                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 28279 0000428C 81E9BC07                	sub	cx,1980
 28280 00004290 86E9                    	xchg	ch,cl
 28281 00004292 D1E1                    	shl	cx,1		; year to high 7 bits
 28282 00004294 D0E6                    	shl	dh,1		; month to high 3 bits
 28283 00004296 D0E6                    	shl	dh,1
 28284 00004298 D0E6                    	shl	dh,1
 28285 0000429A D0E6                    	shl	dh,1
 28286 0000429C D0E6                    	shl	dh,1		; most sig bit of month in carry
 28287 0000429E 80D500                  	adc	ch,0		; put that bit next to year
 28288 000042A1 08F2                    	or	dl,dh		; or low three of month into day
 28289 000042A3 88EE                    	mov	dh,ch		; get year and high bit of month
 28290 000042A5 59                      	pop	cx
 28291                                  DODCLOSE:
 28292 000042A6 83FB00                  	cmp	bx,0
 28293 000042A9 7E36                    	jle	short CLOSEDONE
 28294 000042AB B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 28295 000042AE CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 28296                                  				; BX = file handle,CX = time to be set
 28297                                  				; DX = date to be set
 28298                                  	; 26/03/2023
 28299                                  	; MSDOS 6.0
 28300 000042B0 721A                    	jc	short Cleanup_Err ;AN022; handle error
 28301                                  
 28302                                  	;	See if the destination has *anything* in it.
 28303                                  	;	If not, just close and delete it.
 28304                                  
 28305 000042B2 B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 28306 000042B5 31D2                    	xor	dx,dx
 28307 000042B7 89D1                    	mov	cx,dx
 28308 000042B9 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28309                                  			; AL = method: offset from end of file
 28310                                  	;	DX:AX is file size
 28311                                  
 28312 000042BB 09C2                    	or	dx,ax
 28313 000042BD 9C                      	pushf
 28314 000042BE B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 28315 000042C1 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28316                                  			; BX = file or device handle
 28317 000042C3 52                      	push	dx		; save them away
 28318 000042C4 B43E                    	mov	ah,CLOSE ; 3Eh
 28319 000042C6 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28320                                  			; BX = file handle
 28321 000042C8 5A                      	pop	dx
 28322                                  
 28323                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 28324                                  	; MSDOS 6.0
 28325 000042C9 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 28326 000042CB 9D                      	popf			;AN022; get the flags back
 28327                                  Cleanup_Err: 			;AN022;
 28328 000042CC E85A00                  	call	CleanUpErr	;AN022; attempt to delete the target
 28329                                  	; 26/03/2023
 28330                                  	;call	DestDelete	;AN022; attempt to delete the target
 28331                                  	;jmp	short FILECLOSED
 28332                                  	;			;AN022; close the file
 28333                                  	; 26/03/2023
 28334                                  DestDel_fclosed:
 28335 000042CF E82700                  	call	DestDelete
 28336                                  FILECLOSED:
 28337 000042D2 FE06[119E]              	inc	byte [DestClosed]
 28338                                  RET50:
 28339 000042D6 F8                      	clc
 28340 000042D7 C3                      	retn
 28341                                  	
 28342                                  Close_Cont:			;AN022; no error - co
 28343                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28344 000042D8 9D                      	popf
 28345 000042D9 7506                    	jnz	short CLOSEDONE
 28346 000042DB F7C28000                	test	dx,80h		; is the destination a device?
 28347                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 28348                                  	;call	DestDelete
 28349                                  	;jmp	short FILECLOSED
 28350                                  	; 26/03/2023
 28351 000042DF 74EE                    	jz	short DestDel_fclosed
 28352                                  CLOSEDONE:
 28353 000042E1 FF06[1D9E]              	inc	word [FileCnt]
 28354                                  	; 26/03/2023
 28355 000042E5 EBEB                    	jmp	short FILECLOSED
 28356                                  	
 28357                                  ;FILECLOSED:
 28358                                  ;	inc	byte [DestClosed]
 28359                                  ;RET50:
 28360                                  	;clc
 28361                                  	;retn
 28362                                  
 28363                                  FORGETIT:
 28364 000042E7 8B1E[06A1]              	mov	bx,[DESTHAND]
 28365 000042EB E8B8FF                  	call	DODCLOSE	 ; close the dest
 28366 000042EE E80800                  	call	DestDelete
 28367 000042F1 C706[1D9E]0000          	mov	word [FileCnt],0 ; no files transferred
 28368 000042F7 EBDD                    	jmp	short RET50
 28369                                  
 28370                                  ; ---------------------------------------------------------------------------
 28371                                  
 28372                                  	; 26/03/2023
 28373                                  DestDelete:
 28374 000042F9 BA[AFA0]                	mov	dx,DestBuf
 28375 000042FC B441                    	mov	ah,Unlink ; 41h
 28376 000042FE CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 28377                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 28378                                  			;		(no wildcards allowed)
 28379 00004300 C3                      	retn
 28380                                  
 28381                                  ; ---------------------------------------------------------------------------
 28382                                  
 28383                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28384                                  SOURCE_SET:
 28385 00004301 56                      	push	si
 28386 00004302 A1[E7A1]                	mov	ax,[STARTEL]
 28387 00004305 BE[6CA1]                	mov	si,ScanBuf	; adjust to copy
 28388 00004308 29F0                    	sub	ax,si
 28389 0000430A BF[12A1]                	mov	di,SrcBuf
 28390 0000430D 01F8                    	add	ax,di
 28391 0000430F A3[0FA1]                	mov	[SrcTail],ax
 28392 00004312 880E[0EA1]              	mov	[SrcSiz],cl	; save its size
 28393 00004316 41                      	inc	cx		; include the nul
 28394 00004317 F3A4                    	rep	movsb		; save this source
 28395 00004319 883E[11A1]              	mov	[SrcInfo],bh	; save info about it
 28396 0000431D 5E                      	pop	si
 28397 0000431E 89E8                    	mov	ax,bp		; switches so far
 28398 00004320 E8E802                  	call	SETASC		; set a,b switches accordingly
 28399 00004323 E8A6E9                  	call	SWITCH		; get any more switches on this arg
 28400                                  	;call	SETASC		; set
 28401                                  	;retn
 28402                                  	; 26/03/2023
 28403 00004326 E9E202                  	jmp	SETASC
 28404                                  
 28405                                  ; =============== S U B	R O U T	I N E =======================================
 28406                                  
 28407                                  ; MSDOS 6.0
 28408                                  
 28409                                  ;****************************************************************
 28410                                  ;*
 28411                                  ;* ROUTINE:	CleanupErr
 28412                                  ;*
 28413                                  ;* FUNCTION:	Issues extended error message for destination
 28414                                  ;*		if not alreay issued
 28415                                  ;*
 28416                                  ;* INPUT:	return from INT 21
 28417                                  ;*
 28418                                  ;* OUTPUT:	none
 28419                                  ;*
 28420                                  ;****************************************************************
 28421                                  
 28422                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28423                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28424                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 28425                                  CleanUpErr:	;proc near		;AN022;
 28426                                  
 28427 00004329 803E[24A2]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 28428 0000432E 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 28429 00004330 E8FFDE                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 28430 00004333 C706[91A0][AFA0]        	mov	word [string_ptr_2],DestBuf 
 28431                                  					;AN022; get address of failed string
 28432 00004339 C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 28433                                  					;AN022; put number of subst in control block
 28434 0000433E E8C611                  	call	std_eprintf		;AN022; issue the error message
 28435                                  CleanupErr_Cont:			;AN022;
 28436                                  getansw_8:	; 12/06/2023
 28437 00004341 C3                      	retn				;AN022; return to caller
 28438                                  
 28439                                  ;CleanUpErr	endp			;AN022;
 28440                                  
 28441                                  
 28442                                  ; 12/06/2023
 28443                                  ; ---------------------------------------------------------------------------
 28444                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 28445                                  ; -----------------------------------------
 28446                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 28447                                  ; ---------------------------------------------------------------------------
 28448                                  
 28449                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28450                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:456Dh
 28451                                  
 28452                                  get_answer_YNA:
 28453 00004342 C606[E3A1]00            	mov	byte [cox_dest_file],0	; clear validation flag
 28454 00004347 B80043                  	mov	ax,4300h
 28455 0000434A BA[AFA0]                	mov	dx,DestBuf
 28456 0000434D CD21                    	int	21h		; DOS -	2+ - GET FILE ATTRIBUTES
 28457                                  				; DS:DX	-> ASCIZ file name or directory
 28458                                  				; name without trailing	slash
 28459                                  	;jnc	short getansw_1
 28460                                  	;jmp	getansw_5
 28461                                  	; 12/06/2023
 28462 0000434F F5                      	cmc
 28463 00004350 73EF                    	jnc	short getansw_8 
 28464                                  getansw_1:
 28465 00004352 FE06[E3A1]              	inc	byte [cox_dest_file]	; valid destination file
 28466 00004356 8D36[D7A1]              	lea	si,cox_sublist_buff
 28467 0000435A C7040B00                	mov	word [si],11		; sublist size, 11 bytes
 28468 0000435E C74402[AFA0]            	mov	word [si+2],DestBuf	; sublist value	(pointer)
 28469 00004363 8C5C04                  	mov	[si+4],ds		; sublist segment
 28470                                  	;mov	byte [si+6],1		; sub id (N of %N)
 28471 00004366 C6440710                	mov	byte [si+7],10h		; data type flags
 28472                                  	;mov	byte [si+8],0		; maximum length (chars)
 28473                                  	;mov	byte [si+9],0		; minimum length (chars)
 28474                                  	;mov	byte [si+10],0		; pad field character (0)
 28475                                  	; 12/06/2023
 28476 0000436A 31C9                    	xor	cx,cx
 28477 0000436C 894C08                  	mov	[si+8],cx ; 0
 28478 0000436F 884C0A                  	mov	[si+10],cl ; 0
 28479 00004372 FEC1                    	inc	cl
 28480 00004374 884C06                  	mov	[si+6],cl ; 1	
 28481                                  
 28482                                  	; 12/06/2023
 28483                                  	;lea	si,cox_sublist_buff
 28484 00004377 B84F04                  	mov	ax,1103			; message number
 28485                                  					; 'Overwrite %1 (Yes/No/All)?'
 28486 0000437A BB0200                  	mov	bx,2			; std error (file handle = 2)
 28487                                  	; 12/06/2023
 28488                                  	;mov	cx,1			; byte count
 28489                                  	; cx = 1
 28490                                  	;mov	dh,0FFh			; message class	(utility)
 28491                                  	;xor	dl,dl			; control flag = 0
 28492 0000437D 31D2                    	xor	dx,dx
 28493 0000437F FECE                    	dec	dh  ; dh = 0FFh
 28494 00004381 E85614                  	call	SYSDISPMSG
 28495                                  	; 12/06/2023
 28496                                  	;xor	bx,bx
 28497                                  	; bh = 0
 28498                                  getansw_2:
 28499 00004384 B8080C                  	mov	ax,0C08h
 28500 00004387 CD21                    	int	21h		; DOS -	CLEAR KEYBOARD BUFFER
 28501                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 28502                                  	;cmp	al,0
 28503                                  	;jz	short getansw_2
 28504                                  	; 12/06/2023
 28505 00004389 20C0                    	and	al,al
 28506 0000438B 74F7                    	jz	short getansw_2
 28507 0000438D 3C0D                    	cmp	al,0Dh
 28508 0000438F 743B                    	je	short getansw_4
 28509 00004391 88C3                    	mov	bl,al
 28510 00004393 88C2                    	mov	dl,al
 28511 00004395 B82065                  	mov	ax,6520h
 28512 00004398 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 28513                                  				; AL = function	-
 28514 0000439A 3A16[AC6E]              	cmp	dl,[_Y_es]		; 'Y' ?
 28515 0000439E 740C                    	je	short getansw_3
 28516 000043A0 3A16[AD6E]              	cmp	dl,[_N_o]		; 'N' ?
 28517 000043A4 7406                    	je	short getansw_3
 28518 000043A6 3A16[AE6E]              	cmp	dl,[_A_ll]		; 'A' ?
 28519 000043AA 75D8                    	jne	short getansw_2
 28520                                  getansw_3:
 28521 000043AC 88DF                    	mov	bh,bl
 28522 000043AE 53                      	push	bx
 28523 000043AF 881E[AB6E]              	mov	[MSG_1104],bl
 28524 000043B3 B440                    	mov	ah,40h
 28525 000043B5 BB0200                  	mov	bx,2			; std error (file handle = 2)
 28526 000043B8 B90100                  	mov	cx,1			; byte count
 28527 000043BB BA[AB6E]                	mov	dx,MSG_1104
 28528 000043BE CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28529                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 28530 000043C0 B440                    	mov	ah,40h
 28531 000043C2 C606[AB6E]08            	mov	byte [MSG_1104],8	; backspace (move cursor to back)
 28532 000043C7 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28533                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 28534 000043C9 5B                      	pop	bx
 28535 000043CA EBB8                    	jmp	short getansw_2
 28536                                  getansw_4:
 28537                                  	;cmp	bh,0
 28538                                  	;jz	short getansw_2
 28539                                  	; 12/06/2023
 28540 000043CC 08FF                    	or	bh,bh
 28541 000043CE 74B4                    	jz	short getansw_2
 28542 000043D0 88FA                    	mov	dl,bh
 28543 000043D2 B82065                  	mov	ax,6520h
 28544 000043D5 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 28545                                  				; AL = function	-
 28546 000043D7 52                      	push	dx
 28547 000043D8 B82E04                  	mov	ax,1070			; message number
 28548 000043DB BB0200                  	mov	bx,2			; std error (file handle = 2)
 28549 000043DE 31C9                    	xor	cx,cx
 28550                                  	;mov	dh,0FFh			; message class	(utility)
 28551                                  	;xor	dl,dl
 28552                                  	; 12/06/2023
 28553 000043E0 31D2                    	xor	dx,dx
 28554 000043E2 FECE                    	dec	dh  ; dh = 0FFh
 28555 000043E4 E8F313                  	call	SYSDISPMSG
 28556 000043E7 5A                      	pop	dx
 28557 000043E8 3A16[AC6E]              	cmp	dl,[_Y_es]
 28558 000043EC 740B                    	jz	short getansw_5
 28559 000043EE 3A16[AD6E]              	cmp	dl,[_N_o]
 28560 000043F2 7406                    	jz	short getansw_6
 28561 000043F4 C606[E2A1]00            	mov	byte [cox_y_override],0
 28562                                  	; 12/06/2023
 28563                                  	;jmp	short $+2
 28564                                  getansw_5:
 28565                                  	; 12/06/2023
 28566                                  	;clc
 28567                                  	; cf = 0
 28568                                  	;jmp	short getansw_7
 28569                                  	; 12/06/2023
 28570 000043F9 C3                      	retn
 28571                                  getansw_6:
 28572                                  gcpcmdo_2:	; 12/06/2023
 28573                                  gecpcmd_3:	; 12/06/2023
 28574 000043FA F9                      	stc
 28575                                  getansw_7:
 28576 000043FB C3                      	retn
 28577                                  
 28578                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28579                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:463Ah
 28580                                  init_copycmd_option:
 28581 000043FC C606[E2A1]01            	mov	byte [cox_y_override],1 ; suppress copy overwrite confirmation
 28582 00004401 06                      	push	es
 28583 00004402 8E06[F39D]              	mov	es,[RESSEG]
 28584 00004406 268E06[DC03]            	mov	es,[es:EnvirSeg]
 28585 0000440B 8D36[FC98]              	lea	si,copycmd		; "COPYCMD="
 28586 0000440F B90800                  	mov	cx,8
 28587 00004412 E83500                  	call	getenv_copycmd
 28588 00004415 7216                    	jc	short icpcmd_3
 28589 00004417 E82000                  	call	get_copycmd_option	; copycmd=/Y or copycmd=/-Y
 28590 0000441A 720F                    	jc	short icpcmd_2
 28591 0000441C 47                      	inc	di			; skip '/'
 28592 0000441D 268A05                  	mov	al,[es:di]
 28593 00004420 24DF                    	and	al,0DFh			; convert to uppercase
 28594 00004422 3C59                    	cmp	al,'Y'
 28595 00004424 7505                    	jnz	short icpcmd_2
 28596                                  icpcmd_1:
 28597 00004426 C606[E2A1]00            	mov	byte [cox_y_override],0	; clear copy overwrite question/confirmation
 28598                                  					; (don't suppress)
 28599                                  icpcmd_2:
 28600 0000442B 07                      	pop	es
 28601 0000442C C3                      	retn
 28602                                  icpcmd_3:				; ...
 28603 0000442D 8E06[F39D]              	mov	es,[RESSEG]
 28604 00004431 803E[9B01]00            	cmp	byte [cox_Y_option],0	; default (/Y) switch option (1 = enabled)
 28605 00004436 74F3                    	jz	short icpcmd_2
 28606 00004438 EBEC                    	jmp	short icpcmd_1
 28607                                  
 28608                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28609                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4679h
 28610                                  get_copycmd_option:
 28611 0000443A 26803D00                	cmp	byte [es:di],0
 28612 0000443E 74BA                    	jz	short gcpcmdo_2
 28613 00004440 26803D2F                	cmp	byte [es:di],'/'
 28614 00004444 7403                    	jz	short gcpcmdo_1
 28615 00004446 47                      	inc	di
 28616 00004447 EBF1                    	jmp	short get_copycmd_option
 28617                                  gcpcmdo_1:
 28618                                  	; 12/06/2023
 28619                                  	;clc
 28620                                  	; cf = 0
 28621                                  	;jmp	short gcpcmdo_3
 28622                                  	; 12/06/2023
 28623 00004449 C3                      	retn
 28624                                  	; 12/06/2023
 28625                                  ;gcpcmdo_2:
 28626                                  ;	stc
 28627                                  ;gcpcmdo_3:
 28628                                  ;	retn
 28629                                  
 28630                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28631                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:468Dh
 28632                                  getenv_copycmd:
 28633 0000444A 31FF                    	xor	di,di
 28634 0000444C 30C0                    	xor	al,al
 28635                                  gecpcmd_1:
 28636                                  	;cmp	byte [es:di],0
 28637                                  	; 12/06/2023
 28638 0000444E 263805                  	cmp	[es:di],al ; 0
 28639 00004451 74A7                    	jz	short gecpcmd_3
 28640 00004453 51                      	push	cx
 28641 00004454 56                      	push	si
 28642 00004455 F3A6                    	repe	cmpsb
 28643 00004457 5E                      	pop	si
 28644 00004458 59                      	pop	cx
 28645 00004459 7409                    	jz	short gecpcmd_2 ; cf = 0
 28646 0000445B 51                      	push	cx
 28647 0000445C B90080                  	mov	cx,32768
 28648 0000445F F2AE                    	repne	scasb	; al = 0
 28649 00004461 59                      	pop	cx
 28650 00004462 EBEA                    	jmp	short gecpcmd_1
 28651                                  gecpcmd_2:
 28652                                  	;clc
 28653                                  	; 12/06/2023
 28654                                  	; cf = 0
 28655                                  	;jmp	short gecpcmd_4
 28656                                  	; 12/06/2023
 28657 00004464 C3                      	retn
 28658                                  	; 12/06/2023
 28659                                  ;gecpcmd_3:
 28660                                  ;	stc
 28661                                  ;gecpcmd_4:
 28662                                  ;	retn
 28663                                  
 28664                                  ;============================================================================
 28665                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 28666                                  ;============================================================================
 28667                                  ; 01/10/2018 - Retro DOS v3.0
 28668                                  
 28669                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 28670                                  
 28671                                  ; =============== S U B	R O U T	I N E =======================================
 28672                                  
 28673                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 28674                                  ;
 28675                                  ;	EXIT	ZR set if concatenate flag unchanged
 28676                                  
 28677                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28678                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 28679                                  
 28680                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28681                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46ADh
 28682                                  TRYFLUSH:
 28683 00004465 A0[069E]                	mov	al,[Concat]
 28684 00004468 50                      	push	ax
 28685                                  	;call	FLUSHFIL
 28686 00004469 E80600                  	call	FlshFil
 28687 0000446C 58                      	pop	ax
 28688 0000446D 3A06[069E]              	cmp	al,[Concat]
 28689 00004471 C3                      	retn
 28690                                  
 28691                                  ; =============== S U B	R O U T	I N E =======================================
 28692                                  
 28693                                  	; 26/03/2023
 28694                                  	; MSDOS 3.3
 28695                                  ;FLUSHFIL:
 28696                                  	;mov	al,[BINARY]
 28697                                  	;mov	ah,[ASCII]
 28698                                  	;push	ax
 28699                                  	;call	FLSHFIL
 28700                                  	;pop	ax
 28701                                  	;mov	[ASCII],ah
 28702                                  	;mov	[BINARY],al
 28703                                  	;retn
 28704                                  
 28705                                  ; =============== S U B	R O U T	I N E =======================================
 28706                                  
 28707                                  ;***	Flshfil - write out any data remaining in copy buffer.
 28708                                  ;
 28709                                  ;	Inputs:
 28710                                  ;	  [NXTADD] = No. of bytes to write
 28711                                  ;	  [CFLAG] <> 0 if file has been created
 28712                                  ;	Outputs:
 28713                                  ;	  [NXTADD] = 0
 28714                                  
 28715                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28716                                  	;
 28717                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 28718                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46BAh
 28719                                  FlshFil:
 28720 00004472 C606[CAA1]00            	mov	byte [TERMREAD],0
 28721 00004477 803E[109E]00            	cmp	byte [CFLAG],0
 28722 0000447C 7403                    	jz	short NotExists
 28723 0000447E E99600                  	jmp	Exists
 28724                                  NotExists:
 28725 00004481 E8A101                  	call	BUILDDEST		; find out all about the destination
 28726 00004484 E8FA03                  	call	COMPNAME		; source and dest. the same?
 28727 00004487 7519                    	jnz	short ProcDest		; if not, go ahead
 28728 00004489 803E[6BA1]00            	cmp	byte [SRCISDEV],0
 28729 0000448E 7512                    	jnz	short ProcDest		; same name on device ok
 28730 00004490 803E[069E]00            	cmp	byte [Concat],0		; concatenation?
 28731 00004495 BA[F991]                	mov	dx,OVERWR_PTR
 28732                                  	;je	short COPERR		; not concatenating - overwrite error
 28733                                  	; 26/03/2023
 28734 00004498 7503                    	jne	short No_Concat_Err
 28735 0000449A E91201                  	jmp	COPYERR
 28736                                  	
 28737                                  No_Concat_Err:	; concatenating
 28738 0000449D C606[C6A1]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 28739                                  ProcDest:
 28740                                  	; MSDOS 6.0
 28741                                  	;mov	ax,(ExtOpen<<8)		; open the file
 28742                                  	; 26/03/2023
 28743 000044A2 B8006C                  	mov	ax,6C00h
 28744 000044A5 BE[AFA0]                	mov	si,DestBuf		; get file name
 28745                                  ;M046
 28746                                  ; For writes, we want to deny writes by anyone else at the same time that we
 28747                                  ;are writing to it. For instance, on a network, 2 workstations could try
 28748                                  ;writing to the same file. Also, because we opened the source file with
 28749                                  ;DENY NONE, it is fine if the source and destination files are the same as
 28750                                  ;would happen when we append to an existing file.
 28751                                  
 28752                                  	; 26/03/2023
 28753                                  	;mov	bx,deny_write|write_open_mode
 28754 000044A8 BB2100                  	mov	bx,21h			; get open mode for copy; M046
 28755 000044AB 31C9                    	xor	cx,cx			; no special files
 28756                                  	;mov	dx,write_open_flag	; set up open flags
 28757 000044AD BA0101                  	mov	dx,101h	
 28758                                  
 28759 000044B0 803E[C6A1]00            	cmp	byte [NOWRITE],0
 28760 000044B5 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 28761                                  	;mov	dx,creat_open_flag	; set up create flags
 28762 000044B7 BA1201                  	mov	dx,112h
 28763                                  
 28764                                  	; 26/03/2023
 28765                                  	; MSDOS 3.3
 28766                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 28767                                  	;cmp	byte [NOWRITE],0
 28768                                  	;jne	short DODESTOPEN
 28769                                  	;mov	ah,CREAT ; 3Ch
 28770                                  	;xor	cx,cx
 28771                                  ;DODESTOPEN:
 28772                                  	;mov	dx,DESTBUF
 28773                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 28774                                  	;		; CX = attributes for file
 28775                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 28776                                  
 28777                                  ; 26/03/2023
 28778                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 28779                                  ;	;mov	dx,FULDIRPTR
 28780                                  ;	;call	GET_EXT_ERR_NUMBER
 28781                                  ;	;jc	short COPERR
 28782                                  ;
 28783                                  ;	; 01/10/2018
 28784                                  ;	;jnc	short DEST_OPEN_OKAY
 28785                                  ;		
 28786                                  ;	;mov	dx,FULDIRPTR
 28787                                  ;	;call	GET_EXT_ERR_NUMBER
 28788                                  ;	;jmp	short COPERR
 28789                                  ;
 28790                                  ;	jc	short DEST_OPEN_ERROR
 28791                                  
 28792                                  	; 26/03/2023
 28793                                  DoDestOpen:
 28794 000044BA CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 28795                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 28796                                  			; BH = flags
 28797                                  			; CX = create attribute
 28798                                  			; DL = action if file exists/does not exists
 28799                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 28800                                  
 28801                                  ;	We assume that the error is normal.
 28802                                  ;	TriageError will correct the DX value appropriately.
 28803                                  	
 28804 000044BC 7311                    	jnc	short Dest_Open_Okay
 28805                                  Xa_Set_Error:				;AN030; error occurred on XA
 28806 000044BE E871DD                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 28807                                  
 28808                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 28809                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 28810                                  Ext_Err_Set:				;AN030;
 28811 000044C1 C706[91A0][AFA0]        	mov	word [string_ptr_2],DestBuf
 28812                                  					;AN000; get address of failed string
 28813 000044C7 C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 28814                                  					;AN030; put number of subst in control block
 28815                                  CopErrJ2:				;AN030;
 28816 000044CC E9E000                  	jmp	COPYERR			;AN030; go issue message
 28817                                  
 28818                                  ;DEST_OPEN_OKAY:
 28819                                  	; 26/03/2023
 28820                                  Dest_Open_Okay:
 28821 000044CF A3[06A1]                	mov	[DESTHAND],ax		; save handle
 28822 000044D2 C606[109E]01            	mov	byte [CFLAG],1		; destination now exists
 28823 000044D7 89C3                    	mov	bx,ax
 28824 000044D9 B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 28825 000044DC CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 28826                                  			   	; BX = file or device handle
 28827                                  
 28828 000044DE 8816[08A1]              	mov	[DESTISDEV],dl		; set dest info
 28829                                  	; 18/04/2023
 28830 000044E2 F6C280                  	test	dl,80h
 28831                                  	;test	dl,devid_ISDEV
 28832 000044E5 7430                    	jz	short Exists		; Dest not a device
 28833                                  
 28834                                  ;	Destination is device.
 28835                                  
 28836 000044E7 A0[0C9E]                	mov	al,[DestSwitch]
 28837                                  	; 26/03/2023
 28838 000044EA 240C                    	and	al,0Ch
 28839                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 28840 000044EC 7509                    	jnz	short TestBoth
 28841 000044EE A0[CBA1]                	mov	al,[ASCII]		; neither set, use current setting
 28842 000044F1 0A06[C7A1]              	or	al,[BINARY]
 28843 000044F5 7416                    	jz	short ExSetA		; neither set, default to ascii
 28844                                  TestBoth:
 28845 000044F7 7A1E                    	jpe	short Exists		; both are set, ignore
 28846 000044F9 A808                    	test	al,8
 28847                                  	;test	al,SWITCHB
 28848 000044FB 741A                    	jz	short Exists
 28849                                  	;mov	ax,(IOCTL shl 8) or 1
 28850 000044FD B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 28851 00004500 30F6                    	xor	dh,dh
 28852                                  	; 18/04/2023
 28853 00004502 80CA20                  	or	dl,20h
 28854                                  	;or	dl,devid_RAW
 28855 00004505 8816[08A1]              	mov	[DESTISDEV],dl
 28856 00004509 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 28857                                  			; BX = device handle,DH = 0
 28858                                  			; DL = device information to set (bits 0-7 from	function 0)
 28859 0000450B EB0A                    	jmp	short Exists
 28860                                  
 28861                                  	; 26/03/2023
 28862                                  	; 01/10/2018 - Retro DOS v3.0 modification
 28863                                  ;DEST_OPEN_ERROR:
 28864                                  	;mov	dx,FULDIRPTR
 28865                                  	;call	GET_EXT_ERR_NUMBER
 28866                                  ;COPERR:
 28867                                  	; 26/03/2023
 28868                                  ;CopyErrj:
 28869                                  	;jmp	short COPYERR
 28870                                  
 28871                                  ExSetA:
 28872                                  ;	What we read in may have been in binary mode, flag zapped write OK
 28873                                  
 28874 0000450D C606[CBA1]04            	mov	byte [ASCII],4
 28875                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 28876 00004512 800E[C5A1]04            	or	byte [INEXACT],4
 28877                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 28878                                  Exists:
 28879 00004517 803E[C6A1]00            	cmp	byte [NOWRITE],0
 28880 0000451C 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 28881 0000451E 803E[87A0]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 28882 00004523 741D                    	jz	short NoChecking
 28883 00004525 E85903                  	call	COMPNAME		; source and dest. the same?
 28884 00004528 7518                    	jnz	short NoChecking	; if not, go ahead
 28885 0000452A 803E[6BA1]00            	cmp	byte [SRCISDEV],0
 28886 0000452F 7511                    	jne	short NoChecking	; same name on device ok
 28887                                  
 28888                                  ;	At this point we know in append (would have gotten overwrite error
 28889                                  ;	on first destination create otherwise), and user trying to specify
 28890                                  ;	destination which has been scribbled already (if dest had been named
 28891                                  ;	first, NoWrite would be set).
 28892                                  
 28893 00004531 BA[FC91]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 28894                                  	;invoke	Std_EprintF		;ac022;
 28895                                  	; 26/03/2023
 28896 00004534 E8D00F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 28897                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 28898 00004537 C706[169E]0000          	mov	word [NXTADD],0		; set return
 28899 0000453D FE06[CAA1]              	inc	byte [TERMREAD]		; tell read to give up
 28900                                  Ret60:
 28901 00004541 C3                      	retn
 28902                                  
 28903                                  NoChecking:
 28904 00004542 8B1E[06A1]              	mov	bx,[DESTHAND]		; get handle
 28905 00004546 31C9                    	xor	cx,cx
 28906 00004548 870E[169E]              	xchg	cx,[NXTADD]
 28907 0000454C E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 28908 0000454E FF06[C8A1]              	inc	word [WRITTEN]		; flag that we wrote something
 28909 00004552 803E[C6A1]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 28910 00004557 7514                    	jnz	short SeekEnd
 28911 00004559 31D2                    	xor	dx,dx
 28912 0000455B 1E                      	push	ds
 28913 0000455C 8E1E[F59D]              	mov	ds,[TPA]
 28914 00004560 B440                    	mov	ah,Write ; 40h
 28915 00004562 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28916                                  			; BX = file handle,CX = number of bytes to write,DS:DX -> buffer
 28917 00004564 1F                      	pop	ds
 28918 00004565 BA[E491]                	mov	dx,NOSPACE_PTR
 28919                                  	;jc	short COPERRP		; failure
 28920                                  	; 26/03/2023
 28921                                  	; MSDOS 6.0
 28922 00004568 7326                    	jnc	short NoChecking2
 28923 0000456A E951FF                  	jmp	Xa_Set_Error
 28924                                  
 28925                                  	; 18/04/2023
 28926                                  	; 26/03/2023
 28927                                  SeekEnd:
 28928 0000456D 31D2                    	xor	dx,dx
 28929 0000456F 87D1                    	xchg	dx,cx
 28930                                  	;mov	ax,(LSEEK shl 8) or 1
 28931 00004571 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 28932 00004574 CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28933                                  				; AL = method: offset from present location
 28934                                  
 28935                                  	; 26/03/2023
 28936                                  	; MSDOS 6.0
 28937                                  
 28938                                  ;	Save the file pointer in DX:AX to restore the file
 28939                                  ;	with in case the copy should fail.
 28940                                  
 28941 00004576 A3[D2A1]                	mov	[OFilePtr_Lo],ax
 28942 00004579 8916[D4A1]              	mov	[OFilePtr_Hi],dx
 28943                                  
 28944                                  	; 26/03/2023
 28945                                  	; MSDOS 3.3  MSDOS 6.0
 28946                                  
 28947 0000457D 803E[049E]00            	cmp	byte [RDEOF],0
 28948 00004582 740B                    	jz	short Retz60
 28949                                  
 28950                                  ;	^Z has been read - we must set the file size to the current
 28951                                  ;	file pointer location
 28952                                  
 28953 00004584 B440                    	mov	ah,Write ; 40h
 28954 00004586 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28955                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28956                                  
 28957                                  	; 26/03/2023
 28958                                  	; MSDOS 6.0
 28959 00004588 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 28960                                  
 28961                                  ;	Make note that ^Z was removed, in case the
 28962                                  ;	copy should fail and we need to restore the file.
 28963                                  
 28964 0000458A C606[D6A1]1A            	mov	byte [OCtrlZ],1Ah
 28965                                  Retz60:
 28966 0000458F C3                      	retn
 28967                                  
 28968                                  NoChecking2:
 28969 00004590 29C1                    	sub	cx,ax
 28970 00004592 74AD                    	jz	short Ret60		; wrote all supposed to
 28971                                  	; 18/04/2023
 28972 00004594 F606[08A1]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 28973                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 28974 00004599 7414                    	jz	short COPYERR		; is a file, error
 28975 0000459B F606[08A1]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 28976                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 28977 000045A0 750A                    	jnz	short DevWrtErr	; is a raw device, error
 28978 000045A2 803E[C5A1]00            	cmp	byte [INEXACT],0
 28979 000045A7 7598                    	jnz	short Ret60		; inexact so ok
 28980 000045A9 49                      	dec	cx
 28981                                  ;Retz60:
 28982 000045AA 7495                    	jz	short Ret60		; wrote one byte less (the ^z)
 28983                                  
 28984                                  DevWrtErr:
 28985 000045AC BA[6793]                	mov	dx,DEVWMES_PTR
 28986                                  	; 26/03/2023
 28987                                  COPYERR:
 28988                                  	;invoke	Std_EPrintF		;AC022;
 28989 000045AF E8550F                  	call	std_eprintf  ; MSDOS 6.0
 28990                                  	;call	STD_PRINTF   ; MSDOS 3.3
 28991                                  CopErrP:
 28992 000045B2 FE06[119E]              	inc	byte [DestClosed]
 28993 000045B6 803E[109E]00            	cmp	byte [CFLAG],0
 28994 000045BB 7448                    	jz	short EndCopyJ		; never actually got it open
 28995 000045BD 8B1E[06A1]              	mov	bx,[DESTHAND]
 28996 000045C1 83FB00                  	cmp	bx,0
 28997 000045C4 7E33                    	jle	short NoClose
 28998                                  
 28999                                  ;	Check to see if we should save part of the destination file.
 29000                                  
 29001                                  	; 26/03/2023
 29002                                  	; MSDOS 6.0
 29003 000045C6 8B0E[D4A1]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 29004 000045CA 8B16[D2A1]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 29005                                  			
 29006 000045CE 89C8                    	mov	ax,cx
 29007 000045D0 09D0                    	or	ax,dx
 29008 000045D2 7421                    	jz	short ceClose		; null file ptr means nothing to save
 29009                                  
 29010                                  ;	Destination was also the first source. Do the best we can to
 29011                                  ;	restore it. Truncate it back to the size we took from it (which
 29012                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 29013                                  ;	file). If a Ctrl-Z was originally read, put it back.
 29014                                  
 29015 000045D4 B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 29016 000045D7 CD21                    	int	21h
 29017                                  
 29018 000045D9 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 29019 000045DB B440                    	mov	ah,Write ; 40h
 29020 000045DD CD21                    	int	21h			; truncate file
 29021                                  
 29022 000045DF 803E[D6A1]00            	cmp	byte [OCtrlZ],0
 29023 000045E4 7408                    	je	short ceClose0		; no ctrl-z removed from original
 29024 000045E6 41                      	inc	cx			; CX = # bytes to write = 1
 29025 000045E7 BA[D6A1]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 29026 000045EA B440                    	mov	ah,Write ; 40h
 29027 000045EC CD21                    	int	21h			; write ctrl-z
 29028                                  ceClose0:
 29029 000045EE B43E                    	mov	ah,CLOSE ; 3Eh
 29030 000045F0 CD21                    	int	21h			; close it
 29031                                  ;;	;mov	byte [CFLAG],0
 29032 000045F2 E9ECF8                  	jmp	ENDCOPY			; and go home
 29033                                  
 29034                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29035                                  ceClose:
 29036 000045F5 B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 29037 000045F7 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 29038                                  				; BX = file handle
 29039                                  NoClose:
 29040 000045F9 BA[AFA0]                	mov	dx,DestBuf
 29041 000045FC B441                    	mov	ah,Unlink ; 41h 	; and delete it
 29042 000045FE CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 29043                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 29044 00004600 C606[109E]00            	mov	byte [CFLAG],0
 29045                                  EndCopyJ:
 29046 00004605 E9D9F8                  	jmp	ENDCOPY
 29047                                  
 29048                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 29049 00004608 E9B3FE                  	jmp	Xa_Set_Error
 29050                                  
 29051                                  ;============================================================================
 29052                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 29053                                  ;============================================================================
 29054                                  ; 01/10/2018 - Retro DOS v3.0
 29055                                  
 29056                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 29057                                  
 29058                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29059                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 29060                                  
 29061                                  ; =============== S U B	R O U T	I N E =======================================
 29062                                  
 29063                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 29064                                  ;
 29065                                  ;	Given switch vector in AX,
 29066                                  ;	  Set Ascii flag if /a is set
 29067                                  ;	  Clear Ascii flag if /b is set
 29068                                  ;	  Binary set if /b specified
 29069                                  ;	  Leave Ascii unchanged if neither or both are set
 29070                                  ; 	Also sets Inexact if Ascii is ever set. 
 29071                                  ;	AL = Ascii on exit, flags set
 29072                                  
 29073                                  	; 26/03/2023
 29074                                  SETASC:
 29075                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 29076 0000460B 240C                    	and	al,0Ch ; 4+8
 29077 0000460D 7A10                    	jpe	short LOADSW	; even parity - both or neither
 29078 0000460F 50                      	push	ax
 29079                                  	;and	al,SWITCHB  ; 8
 29080 00004610 2408                    	and	al,8
 29081 00004612 A2[C7A1]                	mov	[BINARY],al
 29082 00004615 58                      	pop	ax
 29083                                  	;and	al,SWITCHA
 29084 00004616 2404                    	and	al,4	
 29085 00004618 A2[CBA1]                	mov	[ASCII],al
 29086 0000461B 0806[C5A1]              	or	[INEXACT],al
 29087                                  LOADSW:
 29088 0000461F A0[CBA1]                	mov	al,[ASCII]
 29089 00004622 08C0                    	or	al,al
 29090 00004624 C3                      	retn
 29091                                  
 29092                                  ; =============== S U B	R O U T	I N E =======================================
 29093                                  
 29094                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29095                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 29096                                  BUILDDEST:
 29097 00004625 803E[AAA0]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 29098 0000462A 750C                    	jnz	short KNOWABOUTDEST	; figuring already done
 29099 0000462C BF[D59C]                	mov	di,USERDIR1
 29100 0000462F BD[AAA0]                	mov	bp,DestVars
 29101 00004632 E8E000                  	call	BUILDPATH
 29102 00004635 E899E3                  	call	RestUDir1
 29103                                  
 29104                                  ;	We now know all about the destination
 29105                                  
 29106                                  KNOWABOUTDEST:
 29107 00004638 30C0                    	xor	al,al
 29108 0000463A 8606[09A1]              	xchg	al,[FIRSTDEST]
 29109 0000463E 08C0                    	or	al,al
 29110 00004640 7503                    	jnz	short FIRSTDST
 29111 00004642 E98D00                  	jmp	NOFIRSTDEST
 29112                                  
 29113                                  FIRSTDST:
 29114                                  ;	Create an fcb of the original dest.
 29115                                  
 29116 00004645 8B36[ACA0]              	mov	si,[DestTail]
 29117 00004649 BF[E79F]                	mov	di,DestFcb
 29118 0000464C B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 29119 0000464F CD21                    	int	21h		; DOS -	PARSE FILENAME
 29120                                  				; DS:SI	-> string to parse
 29121                                  				; ES:DI	-> buffer to fill with unopened	FCB
 29122                                  				; AL = bit mask	to control parsing
 29123 00004651 803C00                  	cmp	byte [si],0
 29124 00004654 7406                    	jz	short GOODPARSE
 29125                                  
 29126                                  	; 27/03/2023	
 29127                                  	; MSDOS 6.0
 29128                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 29129                                  	
 29130 00004656 BA[EA91]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 29131 00004659 E953FF                  	jmp	COPYERR			;AN052;
 29132                                  GOODPARSE:
 29133 0000465C A1[AFA0]                	mov	ax,[DestBuf]		; AX = possible "d:"
 29134 0000465F 80FC3A                  	cmp	ah,':'
 29135 00004662 7402                    	jz	short DRVSPEC4
 29136 00004664 B040                    	mov	al,'@'  ; 40h
 29137                                  DRVSPEC4:
 29138                                  ;	AX = "d:" for following FCB drive computation
 29139                                  
 29140 00004666 8A0E[CBA1]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 29141 0000466A 0C20                    	or	al,20h
 29142 0000466C 2C60                    	sub	al,60h
 29143 0000466E A2[E79F]                	mov	[DestFcb],al		; store drive # in FCB
 29144                                  
 29145                                  ;*	Figure out what copy mode we're in.
 29146                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 29147                                  ;	+n stands for additional sources delimited by +'s.
 29148                                  ;
 29149                                  ;	copy a b	not concatenating
 29150                                  ;	copy a *	not concatenating
 29151                                  ;	copy * a	concatenating
 29152                                  ;	copy * *	not concatenating
 29153                                  ;	copy a+n b	concatenating
 29154                                  ;	copy *+n a	concatenating
 29155                                  ;	copy *+n *	concatenating, Mel Hallerman style
 29156                                  
 29157                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 29158                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 29159                                  
 29160 00004671 A0[AEA0]                	mov	al,[DestInfo]		; AL = destination CParse flags
 29161 00004674 8A26[11A1]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 29162 00004678 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 29163 0000467B 08C0                    	or	al,al
 29164 0000467D 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 29165                                  
 29166                                  ;	Destination is wildcarded.
 29167                                  	
 29168 0000467F 38E0                    	cmp	al,ah
 29169 00004681 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 29170                                  
 29171                                  ;	Source and destination are both wildcarded.
 29172                                  
 29173 00004683 803E[CCA1]00            	cmp	byte [PLUS],0
 29174 00004688 7408                    	jz	short NOTMELCOPY	; no +'s in source
 29175                                  
 29176                                  ;	Source and destination are wildcarded, and source includes +'s.
 29177                                  ;	It's Mel Hallorman copy time.
 29178                                  
 29179 0000468A FE06[0AA1]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 29180 0000468E 30C0                    	xor	al,al
 29181 00004690 EB06                    	jmp	short SETCONC
 29182                                  
 29183                                  NOTMELCOPY:
 29184 00004692 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 29185 00004694 20E0                    	and	al,ah
 29186 00004696 D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 29187                                  					;   (implies concatenation)
 29188                                  SETCONC:
 29189 00004698 0A06[CCA1]              	or	al,[PLUS]		; "+" always infers concatenation
 29190                                  
 29191                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 29192                                  
 29193 0000469C A2[069E]                	mov	[Concat],al
 29194 0000469F D0E0                    	shl	al,1
 29195 000046A1 D0E0                    	shl	al,1
 29196 000046A3 A2[C5A1]                	mov	[INEXACT],al		; concatenation -> inexact copy
 29197 000046A6 803E[C7A1]00            	cmp	byte [BINARY],0
 29198 000046AB 7525                    	jne	short NOFIRSTDEST 	; explicit binary copy
 29199                                  
 29200                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 29201                                  	; MSDOS 6.0 (MSDOS 5.0)
 29202                                  	;mov	[ASCII],al		; otherwise, concatenate in ascii mode
 29203                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:48FAh
 29204 000046AD 0806[CBA1]              	or	[ASCII],al
 29205                                  
 29206 000046B1 08C9                    	or	cl,cl
 29207 000046B3 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly
 29208 000046B5 08C0                    	or	al,al
 29209 000046B7 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 29210                                  
 29211                                  ;	At this point there may already be binary read data in the read
 29212                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 29213                                  ;	amount of data in the buffer correctly.
 29214                                  
 29215 000046B9 8B0E[169E]              	mov	cx,[NXTADD]
 29216 000046BD E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 29217 000046BF B01A                    	mov	al,1Ah
 29218 000046C1 06                      	push	es
 29219 000046C2 31FF                    	xor	di,di
 29220 000046C4 8E06[F59D]              	mov	es,[TPA]
 29221 000046C8 F2AE                    	repne	scasb			; scan for EOF
 29222 000046CA 07                      	pop	es
 29223 000046CB 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 29224 000046CD 4F                      	dec	di			; point at ^z
 29225 000046CE 893E[169E]              	mov	[NXTADD],di		; new buffer length
 29226                                  
 29227                                  NOFIRSTDEST:
 29228 000046D2 BB[2BA0]                	mov	bx,DIRBUF+1		; Source of replacement chars
 29229 000046D5 803E[069E]00            	cmp	byte [Concat],0
 29230 000046DA 7403                    	jz	short GOTCHRSRC		; Not a concat
 29231 000046DC BB[71A0]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 29232                                  GOTCHRSRC:
 29233 000046DF BE[E89F]                	mov	si,DestFcb+1		; Original dest name
 29234 000046E2 8B3E[ACA0]              	mov	di,[DestTail]		; Where to put result
 29235                                  
 29236                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 29237                                  
 29238                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29239                                  BUILDNAME:
 29240 000046E6 B90800                  	mov	cx,8
 29241                                  BUILDMAIN:
 29242 000046E9 AC                      	lodsb
 29243 000046EA 3C3F                    	cmp	al,'?'
 29244 000046EC 7502                    	jne	short NOTAMBIG
 29245 000046EE 8A07                    	mov	al,[bx]
 29246                                  NOTAMBIG:
 29247 000046F0 3C20                    	cmp	al,' '
 29248 000046F2 7401                    	je	short NOSTORE
 29249 000046F4 AA                      	stosb
 29250                                  NOSTORE:
 29251 000046F5 43                      	inc	bx
 29252 000046F6 E2F1                    	loop	BUILDMAIN
 29253 000046F8 B103                    	mov	cl,3
 29254                                  	;mov	al,' ' ; 20h
 29255                                  	;cmp	[si],al
 29256                                  	; 27/03/2023
 29257 000046FA 803C20                  	cmp	byte [si],20h ; ' '
 29258 000046FD 7412                    	je	short ENDDEST		; No extension
 29259                                  	;mov	al,[DOT_CHR]
 29260                                  	; 27/03/2023
 29261 000046FF B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 29262 00004701 AA                      	stosb
 29263                                  BUILDEXT:
 29264 00004702 AC                      	lodsb
 29265 00004703 3C3F                    	cmp	al,'?'
 29266 00004705 7502                    	jne	short NOTAMBIGE
 29267 00004707 8A07                    	mov	al,[bx]
 29268                                  NOTAMBIGE:
 29269 00004709 3C20                    	cmp	al,' '
 29270 0000470B 7401                    	je	short NOSTOREE
 29271 0000470D AA                      	stosb
 29272                                  NOSTOREE:
 29273 0000470E 43                      	inc	bx
 29274 0000470F E2F1                    	loop	BUILDEXT
 29275                                  ENDDEST:
 29276 00004711 30C0                    	xor	al,al
 29277 00004713 AA                      	stosb				; NUL terminate
 29278 00004714 C3                      	retn
 29279                                  
 29280                                  ; =============== S U B	R O U T	I N E =======================================
 29281                                  
 29282                                  	; 28/03/2023
 29283                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29284                                  	;
 29285                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29286                                  BUILDPATH:
 29287 00004715 F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 29288 00004719 7543                    	jnz	short NOTPFILE		; If ambig don't bother with open
 29289 0000471B 89EA                    	mov	dx,bp			; Set DX to spec
 29290 0000471D 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 29291                                  
 29292                                  	; 27/03/2023
 29293                                  	; MSDOS 6.0
 29294 00004720 57                      	push	di			;AN000;
 29295 00004721 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 29296                                  	;mov	bx,deny_none|read_open_mode
 29297 00004724 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 29298 00004727 31C9                    	xor	cx,cx			;AN000; no special files
 29299 00004729 89D6                    	mov	si,dx			;AN030; get file name offset
 29300                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 29301 0000472B BA0101                  	mov	dx,101h
 29302 0000472E CD21                    	INT	21h
 29303 00004730 5F                      	pop	di			;AN000;
 29304 00004731 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 29305 00004733 E80CDB                  	call	get_ext_error_number	;AN022; get the extended error
 29306                                  	;cmp	ax,2
 29307 00004736 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 29308 00004739 7423                    	jz	short NOTPFILE		;AN022;
 29309                                  	;cmp	ax,3
 29310 0000473B 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 29311 0000473E 741E                    	jz	short NOTPFILE		;AN022;
 29312                                  	;cmp	ax,5
 29313 00004740 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 29314 00004743 7419                    	jz	short NOTPFILE		;AN022;
 29315 00004745 E93DD8                  	jmp	extend_setup		;AN022; exit with error
 29316                                  
 29317                                  	; 27/03/2023
 29318                                  	; MSDOS 3.3
 29319                                  	;mov	ax,OPEN*256 ; 3D00h
 29320                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 29321                                  	;			; DS:DX	-> ASCIZ filename
 29322                                  	;			; AL = access mode
 29323                                  	;			; 0 - read
 29324                                  	;jc	short NOTPFILE
 29325                                  
 29326                                  PURE_FILE:
 29327 00004748 89C3                    	mov	bx,ax
 29328 0000474A B80044                  	mov	ax,IOCTL*256 ; 4400h
 29329 0000474D CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 29330                                  				; BX = file or device handle
 29331 0000474F B43E                    	mov	ah,CLOSE ;3Eh
 29332 00004751 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 29333                                  				; BX = file handle
 29334                                  	; 18/04/2023
 29335 00004753 F6C280                  	test	dl,80h
 29336                                  	;test	dl,devid_ISDEV ; test dl,80h
 29337 00004756 7553                    	jnz	short ISADEV
 29338 00004758 F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 29339 0000475C 744D                    	jz	short ISADEV
 29340                                  NOTPFILE:
 29341 0000475E 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 29342                                  	
 29343                                  	; 27/03/2023
 29344                                  	; MSDOS 6.0
 29345 00004761 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 29346 00004764 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 29347                                  
 29348 00004766 80FE3A                  	cmp	dh,':'
 29349 00004769 7402                    	je	short DRVSPEC5
 29350                                  SET_DRIVE_SPEC:
 29351 0000476B B240                    	mov	dl,'@' ; 40h
 29352                                  DRVSPEC5:
 29353 0000476D 80CA20                  	or	dl,20h
 29354 00004770 80EA60                  	sub	dl,60h		; A = 1
 29355 00004773 E888E3                  	call	SAVUDIR1
 29356                                  	
 29357                                  	; 27/03/2023
 29358                                  	; MSDOS 6.0
 29359 00004776 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 29360 00004778 E8C7DA                  	call	get_ext_error_number	;AN022; get the extended error
 29361 0000477B E907D8                  	jmp	extend_setup		;AN022; exit with error
 29362                                  
 29363                                  CURDIR_OK:
 29364 0000477E 89EA                    	mov	dx,bp
 29365                                  	;add	dx,5
 29366 00004780 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 29367                                  	;mov	bh,[bp+4]
 29368 00004783 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 29369 00004786 80E706                  	and	bh,6
 29370 00004789 80FF06                  	cmp	bh,6			; Ambig and path ?
 29371 0000478C 7518                    	jne	short CHECKAMB		; jmp if no
 29372                                  	;mov	si,[bp+2]
 29373 0000478E 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 29374 00004791 B33A                    	mov	bl,':'
 29375 00004793 385CFE                  	cmp	[si-2],bl
 29376 00004796 7506                    	jne	short KNOWNOTSPEC
 29377                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 29378                                  					; Know is d:/file
 29379                                  	;mov	byte [bp+0],2
 29380 00004798 C6460002                	mov	byte [bp],2
 29381 0000479C EB05                    	jmp	short DOPCDJ
 29382                                  KNOWNOTSPEC:
 29383                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 29384                                  					; Know is path/file
 29385                                  	;mov	byte [bp+0],1
 29386 0000479E C6460001                	mov	byte [bp],1
 29387 000047A2 4E                      	dec	si
 29388                                  DOPCDJ:
 29389 000047A3 E98300                  	jmp	DOPCD
 29390                                  CHECKAMB:
 29391 000047A6 80FF02                  	cmp	bh,2
 29392 000047A9 7505                    	jnz	short CHECKCD
 29393                                  ISSIMPFILE:
 29394                                  ISADEV:
 29395                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 29396                                  	;mov	byte [bp+0],0
 29397 000047AB C6460000                	mov	byte [bp],0
 29398 000047AF C3                      	retn
 29399                                  CHECKCD:
 29400 000047B0 E87EEA                  	call	SetRest1
 29401 000047B3 B43B                    	mov	ah,CHDir ; 3Bh
 29402 000047B5 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 29403                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 29404 000047B7 7239                    	jb	short NOTPDIR
 29405 000047B9 89D7                    	mov	di,dx
 29406 000047BB 31C0                    	xor	ax,ax
 29407 000047BD 89C1                    	mov	cx,ax
 29408 000047BF 49                      	dec	cx
 29409                                  	; 14/06/2023
 29410                                  	;repne	scasb	 ; MSDOS 3.3
 29411                                  
 29412                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29413                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 29414                                  	; MSDOS 6.0
 29415                                  Kloop:					;AN000;  3/3/KK
 29416 000047C0 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 29417 000047C3 47                      	inc	di			;AN000;  3/3/KK
 29418 000047C4 08C0                    	or	al,al			;AN000;  3/3/KK
 29419 000047C6 740C                    	jz	short DONE		;AN000;  3/3/KK
 29420 000047C8 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 29421 000047CA E842E1                  	call	testkanj		;AN000;  3/3/KK
 29422 000047CD 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 29423 000047CF 47                      	inc	di			;AN000;  3/3/KK
 29424 000047D0 FEC4                    	inc	ah			;AN000;  3/3/KK
 29425 000047D2 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 29426                                  DONE:
 29427 000047D4 4F                      	dec	di
 29428 000047D5 A0[F89D]                	mov	al,[DIRCHAR]
 29429                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 29430                                  	;mov	byte [bp+0],2
 29431 000047D8 C6460002                	mov	byte [bp],2
 29432                                  	; 27/03/2023
 29433                                  	; MSDOS 6.0
 29434 000047DC 08E4                    	or	ah,ah			;AN000; 3/3/KK
 29435 000047DE 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK
 29436                                  					;this is the trailing byte of ECS code
 29437                                  	;
 29438 000047E0 3A45FF                  	cmp	al,[di-1]
 29439 000047E3 7405                    	jz	short GOTSRCSLSH
 29440                                  _STORE_PCHAR:
 29441 000047E5 AA                      	stosb
 29442                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 29443                                  	;mov	byte [bp+0],1
 29444 000047E6 C6460001                	mov	byte [bp],1
 29445                                  GOTSRCSLSH:
 29446                                  	;or	byte [bp+4],6
 29447 000047EA 804E0406                	or 	byte [bp+VARSTRUC.INFO],6
 29448 000047EE E87400                  	call	SETSTARS
 29449                                  NOTPDIR_RETN:
 29450 000047F1 C3                      	retn
 29451                                  
 29452                                  	; 28/03/2023
 29453                                  NOTPDIR:
 29454                                  	; MSDOS 6.0
 29455 000047F2 E84DDA                  	call	get_ext_error_number	;AN022; get the extended error
 29456                                  	;cmp	ax,3
 29457 000047F5 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 29458 000047F8 7405                    	je	short NOTPDIR_TRY	;AN022;
 29459                                  	;cmp	ax,5
 29460 000047FA 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 29461 000047FD 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 29462                                  NOTPDIR_TRY:
 29463                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29464                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 29465                                  	;mov	byte [bp+0],0
 29466 000047FF C6460000                	mov	byte [bp],0
 29467                                  	;mov	bh,[bp+4]
 29468 00004803 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 29469 00004806 F6C704                  	test	bh,4
 29470 00004809 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 29471                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 29472                                  	;mov	byte [bp+0],2
 29473 0000480B C6460002                	mov	byte [bp],2
 29474                                  	;mov	si,[bp+2]
 29475 0000480F 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 29476 00004812 803C00                  	cmp	byte [si],0
 29477 00004815 744B                    	je	short BADCDERRJ2	; Trailing '/'
 29478                                  	;mov	bl,[DOT_CHR]
 29479                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 29480                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 29481 00004817 B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 29482 00004819 381C                    	cmp	[si],bl
 29483 0000481B 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 29484 0000481D B33A                    	mov	bl,':'  ; 3Ah
 29485 0000481F 385CFE                  	cmp	[si-2],bl
 29486 00004822 7405                    	je	short DOPCD		; Know d:/file
 29487                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 
 29488                                  					; Know path/file
 29489                                  	;mov	byte [bp+0],1
 29490 00004824 C6460001                	mov	byte [bp],1
 29491 00004828 4E                      	dec	si			; Point at last '/'
 29492                                  DOPCD:
 29493 00004829 30DB                    	xor	bl,bl
 29494 0000482B 861C                    	xchg	bl,[si]			; Stick in a NUL
 29495 0000482D E801EA                  	call	SetRest1
 29496                                  
 29497                                  	; 28/03/2023
 29498                                  	; MSDOS 6.0 (& MSDOS 5.0)
 29499 00004830 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 29500 00004832 771B                    	ja	short LookBack		;AN000;  3/3/KK
 29501 00004834 56                      	push	si			;AN000;  3/3/KK
 29502 00004835 51                      	push	cx			;AN000;  3/3/KK
 29503 00004836 89F1                    	mov	cx,si			;AN000;  3/3/KK
 29504 00004838 89D6                    	mov	si,dx			;AN000;  3/3/KK
 29505                                  Kloop2: 				;AN000;  3/3/KK
 29506 0000483A AC                      	lodsb				;AN000;  3/3/KK
 29507 0000483B E8D1E0                  	call	testkanj		;AN000;  3/3/KK
 29508 0000483E 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 29509 00004840 AC                      	lodsb				;AN000;  3/3/KK
 29510 00004841 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 29511 00004843 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 29512 00004845 59                      	pop	cx			;AN000;  3/3/KK
 29513 00004846 5E                      	pop	si			;AN000;  3/3/KK
 29514 00004847 EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 29515                                  					;		 trailing path sep
 29516                                  NotKanj4:				;AN000;  3/3/KK
 29517 00004849 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 29518 0000484B 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 29519 0000484D 59                      	pop	cx			;AN000;  3/3/KK
 29520 0000484E 5E                      	pop	si			;AN000;  3/3/KK
 29521                                  LookBack:				;AN000;  3/3/KK
 29522                                  	; 28/03/2023
 29523                                  	; MSDOS 3.3 & MSDOS 6.0
 29524 0000484F 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 29525 00004852 740E                    	je	short BADCDERRJ2
 29526                                  DoCdr:
 29527 00004854 B43B                    	mov	ah,CHDir ; 3Bh
 29528 00004856 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 29529                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 29530 00004858 861C                    	xchg	bl,[si]
 29531 0000485A 7395                    	jnc	short NOTPDIR_RETN
 29532                                  	
 29533                                  	; 28/03/2023
 29534                                  	; MSDOS 3.3
 29535                                  ;BADCDERRJ2:
 29536                                  	;stc
 29537                                  	;jmp	BADCDERR
 29538                                  
 29539                                  	; 28/03/2023
 29540                                  	; MSDOS 6.0 (& MSDOS 5.0)
 29541 0000485C E8E3D9                  	call	get_ext_error_number	;AN022; get the extended error
 29542                                  EXTEND_SETUPJ:				;AN022;
 29543 0000485F E923D7                  	jmp	extend_setup		;AN022; go issue the error message
 29544                                  BADCDERRJ2:
 29545 00004862 E91DD7                  	jmp	badpath_err		;AC022; go issue path not found message
 29546                                  
 29547                                  ; =============== S U B	R O U T	I N E =======================================
 29548                                  
 29549                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29550                                  SETSTARS:
 29551                                  	;mov	[bp+2],di
 29552 00004865 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 29553                                  	;add	byte [bp+1],12
 29554 00004868 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 29555                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 29556                                  	; 28/03/2023
 29557                                  	; MSDOS 6.0
 29558 0000486C B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 29559                                  	;mov	ax,'?.' ; dot_qmark
 29560                                  
 29561 0000486F B90800                  	mov	cx,8
 29562 00004872 F3AA                    	rep	stosb
 29563 00004874 86C4                    	xchg	al,ah
 29564 00004876 AA                      	stosb
 29565 00004877 86C4                    	xchg	al,ah
 29566 00004879 B103                    	mov	cl,3
 29567 0000487B F3AA                    	rep	stosb
 29568 0000487D 30C0                    	xor	al,al
 29569 0000487F AA                      	stosb
 29570 00004880 C3                      	retn
 29571                                  
 29572                                  ; =============== S U B	R O U T	I N E =======================================
 29573                                  
 29574                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29575                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29576                                  COMPNAME:
 29577 00004881 BE[AFA0]                	mov	si,DestBuf	; do name translate of target
 29578 00004884 BF[789B]                	mov	di,TRGXNAME	; save for name comparison
 29579 00004887 B460                    	mov	ah,xNameTrans ; 60h
 29580                                  	;mov	ah,60h
 29581 00004889 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 29582                                  			; DS:SI	-> ASCIZ relative path string or directory name
 29583                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 29584 0000488B BE[219B]                	mov	si,SRCXNAME	; get name translate of source
 29585 0000488E BF[789B]                	mov	di,TRGXNAME	; get name translate of target
 29586                                  	;call	STRCOMP
 29587                                  	;retn
 29588                                  	; 28/03/2023
 29589 00004891 E9DCE2                  	jmp	STRCOMP
 29590                                  
 29591                                  ;============================================================================
 29592                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 29593                                  ;============================================================================
 29594                                  ; 30/09/2018 - Retro DOS v3.0
 29595                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29596                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29597                                  
 29598                                  ;-----------------------------------------------------------------------;
 29599                                  ; ENTRY:								;
 29600                                  ;	DS:SI	Points input buffer					;
 29601                                  ;	ES:DI	Points to the token buffer				;
 29602                                  ;	BL	Special delimiter for this call 			;
 29603                                  ;		    Always checked last 				;
 29604                                  ;		    set it to space if there is no special delimiter	;
 29605                                  ; EXIT: 								;
 29606                                  ;	DS:SI	Points to next char in the input buffer 		;
 29607                                  ;	ES:DI	Points to the token buffer				;
 29608                                  ;	[STARTEL] Points to start of last element of path in token	;
 29609                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 29610                                  ;	CX	Character count 					;
 29611                                  ;	BH	Condition Code						;
 29612                                  ;			Bit 1H of BH set if switch character		;
 29613                                  ;				Token buffer contains char after	;
 29614                                  ;				switch character			;
 29615                                  ;				BP has switch bits set (ORing only)	;
 29616                                  ;			Bit 2H of BH set if ? or * in token		;
 29617                                  ;				if * found element ? filled		;
 29618                                  ;			Bit 4H of BH set if path sep in token		;
 29619                                  ;			Bit 80H of BH set if the special delimiter	;
 29620                                  ;			   was skipped at the start of this token	;
 29621                                  ;		Token buffer always starts d: for non switch tokens	;
 29622                                  ;	CARRY SET							;
 29623                                  ;	    if CR on input						;
 29624                                  ;		token buffer not altered				;
 29625                                  ;									;
 29626                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 29627                                  ; MODIFIES:								;
 29628                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 29629                                  ;									;
 29630                                  ;-----------------------------------------------------------------------;
 29631                                  
 29632                                  ; Modifications to cparse: recognition of right and left parentheses
 29633                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 29634                                  ;
 29635                                  ; Both modifications were installed in the course of adding a coherent
 29636                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 29637                                  ; structure for command-line arguments. This parser relies on cparse to
 29638                                  ; recognize individual tokens.
 29639                                  ;
 29640                                  ; To process for-loops correctly, parentheses must therefore be
 29641                                  ; recognized as tokens. The upper-case conversion code was removed so
 29642                                  ; that commands (such as for and echo) would be able to use the "original"
 29643                                  ; text of the command line.
 29644                                  ;
 29645                                  ; Note also the modification to prevent the automatic conversion of colons
 29646                                  ; into spaces WITHIN THE SOURCE TEXT!
 29647                                  ;
 29648                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 29649                                  ; on the command line.
 29650                                  ;
 29651                                  ; Alan L, OS/MSDOS				    14 August 1983
 29652                                  
 29653                                  ; ---------------------------------------------------------------------------
 29654                                  
 29655                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 29656                                  
 29657                                  ;FSWITCH	EQU	8000h
 29658                                  ;FBADSWITCH	EQU	4000h
 29659                                  
 29660                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 29661                                  
 29662                                  ; =============== S U B	R O U T	I N E =======================================
 29663                                  		
 29664                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29665                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 29666                                  
 29667                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29668                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 4AE3h
 29669                                  cparse:
 29670 00004894 31C0                    	xor	ax,ax
 29671 00004896 893E[E7A1]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 29672 0000489A A2[EAA1]                	mov	[ELPOS],al		; Start in 8 char prefix
 29673                                  	; MSDOS 3.3
 29674                                  	;mov	[SOURCE],al		
 29675                                  	; MSDOS 6.0
 29676 0000489D A2[EBA1]                	mov	[SKPDEL], al		; No skip delimiter yet
 29677 000048A0 88C7                    	mov	bh,al			; Init nothing
 29678 000048A2 9C                      	pushf				; save flags
 29679 000048A3 57                      	push	di			; save the token buffer addrss
 29680 000048A4 31C9                    	xor	cx,cx			; no chars in token buffer
 29681 000048A6 880E[86A0]              	mov	[comma],cl		; reset comma flag
 29682                                  moredelim:
 29683 000048AA AC                      	lodsb
 29684 000048AB E888E2                  	call	DELIM
 29685 000048AE 751D                    	jnz	short SCANCDONE
 29686 000048B0 3C20                    	cmp	al,' '
 29687 000048B2 74F6                    	jz	short moredelim
 29688 000048B4 3C09                    	cmp	al,9
 29689 000048B6 74F2                    	jz	short moredelim
 29690                                  	;xchg	al,[SOURCE]
 29691                                  	; 28/03/2023
 29692 000048B8 8606[EBA1]              	xchg	al,[SKPDEL]
 29693 000048BC 08C0                    	or	al,al
 29694 000048BE 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 29695 000048C0 F6C780                  	test	bh,80h			; has a special char been found?
 29696 000048C3 7405                    	jz	short no_comma		; no - just exit
 29697 000048C5 C606[86A0]01            	mov	byte [comma],1		; set comma flag
 29698                                  no_comma:
 29699 000048CA E92A01                  	jmp	x_done			; Nul argument
 29700                                  
 29701                                  SCANCDONE:
 29702                                  	; 28/03/2023
 29703                                  	; MSDOS 6.0
 29704                                  	; -----------------------------------
 29705                                  	; Mod to avoid upper-case conversion.
 29706                                  	; -----------------------------------
 29707                                  	; MSDOS 3.3
 29708                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 29709                                  	;jnz	short cpcont1		; 3/3/KK
 29710                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 29711                                  cpcont1:
 29712                                  	; -----------------------------------
 29713                                  	; 28/03/2023
 29714 000048CD 38D8                    	cmp	al,bl			; Special delimiter?
 29715 000048CF 7505                    	jne	short nospec
 29716 000048D1 80CF80                  	or	bh,80h
 29717 000048D4 EBD4                    	jmp	short moredelim
 29718                                  nospec:
 29719 000048D6 3C0D                    	cmp	al,0Dh			; a CR?
 29720 000048D8 7503                    	jne	short ncperror
 29721 000048DA E91501                  	jmp	cperror
 29722                                  ncperror:
 29723 000048DD 3A06[F79D]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 29724 000048E1 7503                    	jne	short na_switch		; yes, process...
 29725 000048E3 E91401                  	jmp	a_switch
 29726                                  na_switch:
 29727 000048E6 B23A                    	mov	dl,':'
 29728 000048E8 3814                    	cmp	[si],dl
 29729 000048EA 751D                    	jne	short anum_chard	; Drive not specified
 29730                                  	; 28/03/2023
 29731                                  	; MSDOS 6.0 
 29732 000048EC 803E[95A0]01            	cmp	byte [cpyflag],1	; 3/3/KK
 29733 000048F1 7503                    	jne	short cpcont2		; 3/3/KK
 29734 000048F3 E843E0                  	call	UPCONV			; 3/3/KK
 29735                                  cpcont2:
 29736 000048F6 E85901                  	call	move_char
 29737 000048F9 AC                      	lodsb				; Get the ':'
 29738 000048FA E85501                  	call	move_char
 29739 000048FD 893E[E7A1]              	mov	[STARTEL],di
 29740 00004901 C606[E9A1]00            	mov	byte [ELCNT],0
 29741 00004906 E9B300                  	jmp	anum_test
 29742                                  anum_chard:
 29743 00004909 893E[E7A1]              	mov	[STARTEL],di
 29744 0000490D C606[E9A1]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 29745 00004912 803E[95A0]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 29746 00004917 751D                    	jnz	short anum_char		; No, don't add drive spec.
 29747 00004919 E8A0E2                  	call	pathchrcmp		; Starts with a pathchar?
 29748 0000491C 7518                    	jnz	short anum_char		; no
 29749 0000491E 50                      	push	ax
 29750 0000491F A0[059E]                	mov	al,[CURDRV]		; Insert drive spec
 29751                                  	;add	al,[CAPITAL_A]
 29752                                  	; 28/03/2023
 29753                                  	; MSDOS 6.0
 29754 00004922 0441                    	add	al,'A' ; 41h
 29755 00004924 E82B01                  	call	move_char
 29756 00004927 B03A                    	mov	al,':' ; 3Ah
 29757 00004929 E82601                  	call	move_char
 29758 0000492C 58                      	pop	ax
 29759 0000492D 893E[E7A1]              	mov	[STARTEL],di
 29760 00004931 C606[E9A1]00            	mov	byte [ELCNT],0
 29761                                  anum_char:
 29762                                  	; 28/03/2023
 29763                                  	; MSDOS 6.0
 29764 00004936 E8D6DF                  	call	testkanj		;AC048			
 29765 00004939 7406                    	jz	short NOTKANJ		;AC048;
 29766 0000493B E81401                  	call	move_char
 29767 0000493E AC                      	lodsb
 29768 0000493F EB78                    	jmp	short notspecial
 29769                                  
 29770                                  NOTKANJ:				;AN048; If not kanji
 29771 00004941 803E[95A0]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 29772 00004946 7503                    	jne	short TESTDOT 		;AN048;
 29773 00004948 E8EEDF                  	call	UPCONV			;AN048; upper case the char
 29774                                  TESTDOT:
 29775                                  	; 28/03/2023
 29776                                  	;cmp	al,dot_chr  ; 2Eh
 29777 0000494B 3C2E                    	cmp	al,'.'
 29778 0000494D 7509                    	jne	short testquest
 29779 0000494F FE06[EAA1]              	inc	byte [ELPOS] 		; flag in extension
 29780 00004953 C606[E9A1]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 29781                                  testquest:
 29782 00004958 3C3F                    	cmp	al,'?'  ; 3Fh
 29783 0000495A 7503                    	jnz	short testsplat
 29784 0000495C 80CF02                  	or	bh,2
 29785                                  testsplat:
 29786                                  	;cmp	al,[STAR]
 29787 0000495F 3C2A                    	cmp	al,star	; 2Ah
 29788                                  	; 27/04/2023
 29789                                  	;cmp	al,'*' 
 29790 00004961 7530                    	jne	short testpath
 29791 00004963 80CF02                  	or	bh,2
 29792 00004966 803E[23A2]00            	cmp	byte [expand_star],0
 29793 0000496B 7504                    	jne	short expand_filename
 29794 0000496D EB24                    	jmp	short testpath
 29795                                  
 29796                                  BADPERR2J:
 29797                                  	;jmp	BADPERR2
 29798                                  	; 28/03/2023
 29799                                  	; MSDOS 6.0
 29800 0000496F EB75                    	jmp	short BADPERR2
 29801                                  
 29802                                  expand_filename:
 29803 00004971 B407                    	mov	ah,7
 29804 00004973 803E[EAA1]00            	cmp	byte [ELPOS],0
 29805 00004978 7402                    	jz	short gotelcnt
 29806 0000497A B402                    	mov	ah,2
 29807                                  gotelcnt:
 29808 0000497C B03F                    	mov	al,'?'
 29809 0000497E 2A26[E9A1]              	sub	ah,[ELCNT]
 29810 00004982 72EB                    	jb	short BADPERR2J
 29811 00004984 86E1                    	xchg	ah,cl
 29812 00004986 E309                    	jcxz	testpathx
 29813                                  qmove:
 29814 00004988 86E1                    	xchg	ah,cl
 29815 0000498A E8C500                  	call	move_char
 29816 0000498D 86E1                    	xchg	ah,cl
 29817 0000498F E2F7                    	loop	qmove
 29818                                  testpathx:
 29819 00004991 86E1                    	xchg	ah,cl
 29820                                  testpath:
 29821 00004993 E826E2                  	call	pathchrcmp
 29822 00004996 7521                    	jnz	short notspecial
 29823 00004998 80CF04                  	or	bh,4
 29824 0000499B 803E[23A2]00            	cmp	byte [expand_star],0
 29825 000049A0 7405                    	jz	short no_err_check
 29826 000049A2 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 29827 000049A5 7545                    	jnz	short BADPERR
 29828                                  no_err_check:
 29829 000049A7 893E[E7A1]              	mov	[STARTEL],di	  	; New element
 29830 000049AB FF06[E7A1]              	inc	word [STARTEL]	  	; Point to char after /
 29831 000049AF C606[E9A1]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 29832 000049B4 C606[EAA1]00            	mov	byte [ELPOS],0
 29833                                  notspecial:
 29834 000049B9 E89600                  	call	move_char		; just an alphanum string
 29835                                  anum_test:
 29836 000049BC AC                      	lodsb
 29837                                  
 29838                                  	; 28/03/2023
 29839                                  	; MSDOS 6.0
 29840                                  	; -----------------------------------
 29841                                  	; Mod to avoid upper-case conversion.
 29842                                  	; -----------------------------------
 29843                                  	; MSDOS 3.3
 29844                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 29845                                  	;jnz	short cpcont3		; 3/3/KK
 29846                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 29847                                  cpcont3:
 29848                                  	; -----------------------------------
 29849                                  
 29850 000049BD E876E1                  	call	DELIM
 29851 000049C0 7435                    	jz	short x_done
 29852 000049C2 3C0D                    	cmp	al,0Dh
 29853 000049C4 7431                    	je	short x_done
 29854 000049C6 3A06[F79D]              	cmp	al,[SWITCHAR]
 29855 000049CA 742B                    	je	short x_done
 29856 000049CC 38D8                    	cmp	al,bl
 29857 000049CE 7427                    	je	short x_done
 29858 000049D0 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 29859                                  	; 28/03/2023
 29860                                  	; MSDOS 3.3
 29861                                  	;jnz	short ANUM_CHARJ 
 29862                                  	; MSDOS 6.0
 29863 000049D2 7403                    	je	short FOO15
 29864 000049D4 E95FFF                  	jmp	anum_char
 29865                                  
 29866                                  ; Modification made for parseline.
 29867                                  ; Why would it be necessary to change colons to spaces? In this
 29868                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 29869                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 29870                                  
 29871                                  FOO15:
 29872 000049D7 803E[95A0]02            	cmp	byte [cpyflag],2
 29873 000049DC 7505                    	jnz	short cpcont4
 29874 000049DE E87100                  	call	move_char
 29875 000049E1 EBD9                    	jmp	short anum_test
 29876                                  cpcont4:
 29877 000049E3 46                      	inc	si			; Skip the ':'
 29878 000049E4 EB11                    	jmp	short x_done
 29879                                  
 29880                                  	; 28/03/2023
 29881                                  ;ANUM_CHARJ:
 29882                                  	;jmp	anum_char
 29883                                  
 29884                                  BADPERR2:
 29885 000049E6 BA[E191]                	mov	dx,BADCPMES_PTR
 29886 000049E9 E9B6E4                  	jmp	cerror
 29887                                  
 29888                                  BADPERR:
 29889                                  	; 28/03/2023
 29890                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 29891                                  BADCDERR:
 29892                                  	; MSDOS 6.0
 29893 000049EC BA[0B93]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 29894 000049EF E9B0E4                  	jmp	cerror			;AC022;  message
 29895                                  	
 29896                                  cperror:
 29897 000049F2 4E                      	dec	si			; adjust the pointer
 29898 000049F3 5F                      	pop	di			; retrieve token buffer address
 29899 000049F4 9D                      	popf				; restore flags
 29900 000049F5 F9                      	stc				; set the carry bit
 29901 000049F6 C3                      	retn
 29902                                  
 29903                                  x_done:
 29904 000049F7 4E                      	dec	si			; adjust for next round
 29905                                  
 29906                                  ; Mod to recognize right and left parens as integral tokens.
 29907                                  ;x_done2:
 29908 000049F8 EB51                    	jmp	short out_token
 29909                                  
 29910                                  a_switch:
 29911 000049FA 80CF01                  	or	bh,1			; Indicate switch
 29912                                  	;or	bp,FSWITCH ; 8000h
 29913                                  	; 28/03/2023
 29914 000049FD 81CD0080                	or	bp,8000h
 29915 00004A01 E82AE1                  	call	scanoff
 29916 00004A04 46                      	inc	si
 29917                                  	; 28/03/2023
 29918                                  	; MSDOS 6.0
 29919 00004A05 E807DF                  	call	testkanj		;AN057; See if DBCS lead byte
 29920 00004A08 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 29921 00004A0A E84500                  	call	move_char		;AN057; DBCS - store first byte
 29922 00004A0D AC                      	lodsb				;AN057; get second byte
 29923 00004A0E E84100                  	call	move_char		;AN057; store second byte
 29924                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 29925 00004A11 81CD0040                	or	bp,4000h
 29926 00004A15 EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 29927                                  a_switch_notkanj:			;AN057;
 29928 00004A17 3C0D                    	cmp	al,0Dh
 29929 00004A19 7509                    	jne	short Store_swt
 29930 00004A1B B000                    	mov	al,0
 29931 00004A1D AA                      	stosb
 29932                                  	;or	bp,FBADSWITCH ; 4000h
 29933 00004A1E 81CD0040                	or	bp,4000h
 29934 00004A22 EBCE                    	jmp	short cperror		; Trailing switch character error
 29935                                  					;   BP = fSwitch but no switch
 29936                                  					;   bit is set (unknown switch)
 29937                                  Store_swt:
 29938 00004A24 E82B00                  	call	move_char		; store the character
 29939                                  
 29940                                  ; This upconv call must stay. It is used to identify copy-switches
 29941                                  ; on the command line, and won't store anything into the output buffer.
 29942                                  
 29943                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 29944                                  	; 28/03/2023
 29945 00004A27 E80FDF                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 29946                                  	
 29947 00004A2A 06                      	push	es
 29948 00004A2B 57                      	push	di
 29949 00004A2C 51                      	push	cx
 29950 00004A2D 0E                      	push	cs
 29951 00004A2E 07                      	pop	es
 29952                                  	; 28/03/2023
 29953                                  	; MSDOS 3.3
 29954                                  	;;mov	di,SWITCH_LIST ; "VBAPW"
 29955                                  	; MSDOS 6.0
 29956                                  	;mov	di,switch_list ; "?VBAPW"
 29957                                  	; 14/06/*2023
 29958                                  	; MSDOS 6.22
 29959 00004A2F BF[6097]                	mov	di,switch_list ; "-Y?VBAPW"
 29960                                  
 29961                                  	; MSDOS 3.3
 29962                                  	;mov	cx,SWCOUNT ; 5
 29963                                  	; MSDOS 6.0
 29964                                  	;mov	cx,6  ; SWCOUNT = 6
 29965                                  	; 14/06/2023
 29966                                  	; MSDOS 6.22
 29967 00004A32 B90800                  	mov	cx,8  ; SWCOUNT = 8
 29968                                  
 29969                                  	;or	bp,FBADSWITCH  ; 4000h
 29970 00004A35 81CD0040                	or	bp,4000h
 29971 00004A39 F2AE                    	repne	scasb
 29972 00004A3B 750B                    	jnz	short out_tokenp
 29973                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 29974 00004A3D 81E5FFBF                	and	bp,0BFFFh
 29975 00004A41 B80100                  	mov	ax,1
 29976 00004A44 D3E0                    	shl	ax,cl
 29977 00004A46 09C5                    	or	bp,ax
 29978                                  out_tokenp:
 29979 00004A48 59                      	pop	cx
 29980 00004A49 5F                      	pop	di
 29981 00004A4A 07                      	pop	es
 29982                                  out_token:
 29983 00004A4B B000                    	mov	al,0			; null at the end
 29984 00004A4D AA                      	stosb
 29985 00004A4E 5F                      	pop	di			; restore token buffer pointer
 29986 00004A4F 9D                      	popf
 29987 00004A50 F8                      	clc				; clear carry flag
 29988 00004A51 C3                      	retn
 29989                                  
 29990                                  ; =============== S U B	R O U T	I N E =======================================
 29991                                  
 29992                                  	; 28/03/2023
 29993                                  move_char:
 29994 00004A52 AA                      	stosb				; store char in token buffer
 29995 00004A53 41                      	inc	cx			; increment char count
 29996 00004A54 FE06[E9A1]              	inc	byte [ELCNT]		; increment element count for * substi
 29997 00004A58 C3                      	retn
 29998                                  
 29999                                  ;============================================================================
 30000                                  ; PARSE.ASM, MSDOS 6.0, 1991
 30001                                  ;============================================================================
 30002                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30003                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30004                                  
 30005                                  ; -----------------------------
 30006                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 30007                                  ; -----------------------------
 30008                                  
 30009                                  ;**** Equation field
 30010                                  ;-------- Character code definition
 30011                                  
 30012                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 30013                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 30014                                  $P_Period	   equ	"."             ;AN020;
 30015                                  $P_Slash	   equ	"/"             ;AN020;
 30016                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 30017                                  $P_Comma	   equ	","             ;AN000;
 30018                                  $P_Switch	   equ	"/"             ;AN000;
 30019                                  $P_Keyword	   equ	"="             ;AN000;
 30020                                  $P_Colon	   equ	":"             ;AN000;
 30021                                  $P_Plus 	   equ	"+"             ;AN000;
 30022                                  $P_Minus	   equ	"-"             ;AN000;
 30023                                  $P_Rparen	   equ	")"             ;AN000;
 30024                                  $P_Lparen	   equ	"("             ;AN000;
 30025                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 30026                                  $P_DQuote	   equ	'"'             ;AN000;
 30027                                  $P_NULL 	   equ	0		;AN000;
 30028                                  $P_TAB		   equ	9		;AN000;
 30029                                  $P_CR		   equ	0Dh		;AN000;
 30030                                  $P_LF		   equ	0Ah		;AN000;
 30031                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 30032                                  
 30033                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 30034                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 30035                                  
 30036                                  $P_error_filespec  equ  1
 30037                                  
 30038                                  ;----------------------------------------------------------------------------
 30039                                  ; PARMS LABEL	BYTE
 30040                                  ;	DW	PARMSX
 30041                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 30042                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30043                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 30044                                  ;				; TYPICAL ARE ";", "="
 30045                                  ;				; "," & WHITESPACE ALWAYS
 30046                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30047                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 30048                                  ;----------------------------------------------------------------------------
 30049                                  
 30050                                  struc $P_PARMS_BLK			;AN000;
 30051 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 30052 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 30053 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 30054                                  endstruc 				;AN000;
 30055                                  
 30056                                  $P_Len_PARMS	   equ	4		;AN000;
 30057                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 30058                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 30059                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 30060                                  
 30061                                  ;----------------------------------------------------------------------------
 30062                                  ; PARMSX LABEL	BYTE
 30063                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 30064                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 30065                                  ;	:				; REPEATS maxp-1 TIMES
 30066                                  ;	DB	maxs			; # OF SWITCHES
 30067                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 30068                                  ;	:				; REPEATS maxs-1 TIMES
 30069                                  ;	DB	maxk			; # OF KEYWORD
 30070                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 30071                                  ;	:				; REPEATS maxk-1 TIMES
 30072                                  ;----------------------------------------------------------------------------
 30073                                  
 30074                                  struc $P_PARMSX_BLK			;AN000;
 30075 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 30076 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 30077 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 30078                                  endstruc				;AN000;
 30079                                  
 30080                                  ; 31/03/2023
 30081                                  ;----------------------------------------------------------------------------
 30082                                  ; << Control field definition >>
 30083                                  ;
 30084                                  ;CONTROL   LABEL   BYTE
 30085                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 30086                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 30087                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 30088                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 30089                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 30090                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 30091                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 30092                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 30093                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 30094                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 30095                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 30096                                  ;				; 0002H=REPEATS ALLOWED
 30097                                  ;				; 0001H=OPTIONAL
 30098                                  ;	   DW FUNCTION_FLAGS
 30099                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 30100                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 30101                                  ;				; 0010H=REMOVE ":" AT END
 30102                                  ; (tm10)			; 0020H=colon is not necessary for switch
 30103                                  ;
 30104                                  ;	   DW RESULT		; RESULT BUFFER
 30105                                  ;	   DW VALUES		; VALUE LISTS
 30106                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 30107                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 30108                                  ;	   :
 30109                                  ;
 30110                                  ;Note:
 30111                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 30112                                  ;      DATE bit simalteniously.
 30113                                  ;
 30114                                  ;      The parser examins each bit along with the following priority.
 30115                                  ;
 30116                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 30117                                  ;      FILE SPEC -> SIMPLE STRING.
 30118                                  ;
 30119                                  ;
 30120                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 30121                                  ;      in the result buffer is capitalized.
 30122                                  ;
 30123                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 30124                                  ;
 30125                                  ;
 30126                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 30127                                  ;      switch, for example, '/A', then STRING points to;
 30128                                  ;
 30129                                  ;		DB    1 	; number of following synonyms
 30130                                  ;		DB   '/A',0
 30131                                  ;
 30132                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 30133                                  ;
 30134                                  ;		DB    1 	; number of following synonyms
 30135                                  ;		DB   'CODEPAGE=',0
 30136                                  ;
 30137                                  ;
 30138                                  ;    - "..." must consist of upper case characters only because the parser
 30139                                  ;      performs pattern matching after converting input to upper case (by
 30140                                  ;      using the current country upper case table)
 30141                                  ;
 30142                                  ;
 30143                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 30144                                  ;      example /A and /B, the format will be;
 30145                                  ;
 30146                                  ;		DB    2 	; number of following synonyms
 30147                                  ;		DB    '/A',0
 30148                                  ;		DB    '/B',0
 30149                                  ;----------------------------------------------------------------------------
 30150                                  
 30151                                  ;**** Match_Flags
 30152                                  
 30153                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 30154                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 30155                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 30156                                  $P_Date_S	   equ	1000h		;AN000; Date string
 30157                                  $P_Time_S	   equ	0800h		;AN000; Time string
 30158                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 30159                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 30160                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 30161                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 30162                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 30163                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 30164                                  $P_Optional	   equ	0001h		;AN000; Optional
 30165                                  
 30166                                  ;**** Function flags
 30167                                  
 30168                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 30169                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 30170                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 30171                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 30172                                  
 30173                                  ;-------------------------------- Control block structure
 30174                                  struc $P_CONTROL_BLK
 30175 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 30176 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 30177 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 30178 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 30179 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 30180 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 30181                                  endstruc
 30182                                  
 30183                                  ; 31/03/2023
 30184                                  ;----------------------------------------------------------------------------
 30185                                  ;
 30186                                  ;VALUES LABEL	BYTE
 30187                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 30188                                  ;	+-
 30189                                  ;	| DB	nrng		; NUMBER OF RANGES
 30190                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 30191                                  ;	| +DD	X,Y		; RANGE OF VALUES
 30192                                  ;	|	:
 30193                                  ;	| DB	nnval		; NUMBER OF CHOICES
 30194                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 30195                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 30196                                  ;	|	:
 30197                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 30198                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 30199                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 30200                                  ;	+-	:
 30201                                  ;
 30202                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 30203                                  ;
 30204                                  ;Note:
 30205                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 30206                                  ;      when no choice lists are provided.
 30207                                  ;
 30208                                  ;    - STRING must consist of upper case characters only because the parser
 30209                                  ;      performs pattern matching after converting input to upper case (by
 30210                                  ;      using the current country upper case table)
 30211                                  ;----------------------------------------------------------------------------
 30212                                  
 30213                                  $P_nval_None	equ 0		;AN000; no value list ID
 30214                                  $P_nval_Range	equ 1		;AN000; range list ID
 30215                                  $P_nval_Value	equ 2		;AN000; value list ID
 30216                                  $P_nval_String	equ 3		;AN000; string list ID
 30217                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 30218                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 30219                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 30220                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 30221                                  
 30222                                  struc $P_VAL_LIST
 30223 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 30224 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 30225 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 30226 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 30227 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 30228                                  endstruc
 30229                                  
 30230                                  ; 31/03/2023
 30231                                  ;----------------------------------------------------------------------------
 30232                                  ;
 30233                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 30234                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 30235                                  ;					;	1=NUMBER, 2=LIST INDEX,
 30236                                  ;					;	3=STRING, 4=COMPLEX,
 30237                                  ;					;	5=FILESPEC, 6=DRIVE
 30238                                  ;					;	7=DATE, 8=TIME
 30239                                  ;					;	9=QUOTED STRING
 30240                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 30241                                  ;
 30242                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 30243                                  ;
 30244                                  ;       +-
 30245                                  ;       | DD	n			; VALUE IF NUMBER
 30246                                  ;       | or
 30247                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 30248                                  ;       |				; (ES presents Segment address)
 30249                                  ;       | or
 30250                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 30251                                  ;       | or
 30252                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 30253                                  ;       | or
 30254                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 30255                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 30256                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 30257                                  ;       | or
 30258                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 30259                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 30260                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 30261                                  ;       |	DB HUNDREDTHS ;(0-99)
 30262                                  ;       +-
 30263                                  ;
 30264                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 30265                                  ;      list.
 30266                                  ;
 30267                                  ;      YEAR: If the input value for the year is less than 100, parser
 30268                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 30269                                  ;	     the year value, he returns 1987.
 30270                                  ;----------------------------------------------------------------------------
 30271                                  
 30272                                  ;-------------------------------- Result block structure
 30273                                  struc $P_RESULT_BLK;
 30274 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 30275 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 30276 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 30277 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 30278                                  endstruc
 30279                                  
 30280                                  ;**** values for the type field in the result block
 30281                                  
 30282                                  $P_EOL		 equ 0		;AN000; End of line
 30283                                  $P_Number	 equ 1		;AN000; Number
 30284                                  $P_List_Idx	 equ 2		;AN000; List Index
 30285                                  $P_String	 equ 3		;AN000; String
 30286                                  $P_Complex	 equ 4		;AN000; Complex
 30287                                  $P_File_Spec	 equ 5		;AN000; File Spec
 30288                                  $P_Drive	 equ 6		;AN000; Drive
 30289                                  $P_Date_F	 equ 7		;AN000; Date
 30290                                  $P_Time_F	 equ 8		;AN000; Time
 30291                                  $P_Quoted_String equ 9		;AN000; Quoted String
 30292                                  
 30293                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 30294                                  
 30295                                  ;**** Return code
 30296                                  ;
 30297                                  ; following return code will be returned in the AX register.
 30298                                  
 30299                                  $P_No_Error	 equ 0		;AN000; No error
 30300                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 30301                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 30302                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 30303                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 30304                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 30305                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 30306                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 30307                                  $P_Syntax	 equ 9		;AN000; Syntax error
 30308                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 30309                                  
 30310                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 30311                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 30312                                  $P_Neg		 equ 02h	;AN000; Negative value
 30313                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 30314                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 30315                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 30316                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 30317                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 30318                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 30319                                  
 30320                                  ;-------- Masks
 30321                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 30322                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 30323                                  
 30324                                  ;-------------
 30325                                  
 30326                                  struc $P_DOS_TBL
 30327 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 30328 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 30329 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 30330                                  endstruc
 30331                                  
 30332                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 30333                                  				;AN000; following parameters are set
 30334                                  				;AN000; to get casemap table.
 30335                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 30336                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 30337                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 30338                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 30339                                  				; By this call following information
 30340                                  				; is returned.
 30341                                  
 30342                                  ; 03/04/2023
 30343                                  ;-------------------------------- country dependent information
 30344                                  
 30345                                  $P_DOS_Get_CDI	equ 3800h
 30346                                  
 30347                                  struc $P_CDI
 30348 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 30349 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 30350 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 30351 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 30352 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 30353 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 30354 0000000E ??                      		resb 1		;AN000;
 30355 0000000F ??                      		resb 1		;AN000;
 30356 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 30357 00000011 ????????                		resw 2		;AN000;
 30358 00000015 ????                    		resb 2		;AN000;
 30359 00000017 <res Ah>                		resw 5		;AN000;
 30360                                  endstruc
 30361                                  
 30362                                  $P_Date_MDY	equ 0		;AN000;
 30363                                  $P_Date_DMY	equ 1		;AN000;
 30364                                  $P_Date_YMD	equ 2		;AN000;
 30365                                  
 30366                                  ; ----------------------------
 30367                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 30368                                  ; ----------------------------
 30369                                  
 30370                                  ;***********************************************************************
 30371                                  ; SysParse;
 30372                                  ;
 30373                                  ;  Function : Parser Entry
 30374                                  ;
 30375                                  ;  Input: DS:SI -> command line
 30376                                  ;	  ES:DI -> parameter block
 30377                                  ;	  psdata_seg -> psdata.inc
 30378                                  ;	  CX = operand ordinal
 30379                                  ;
 30380                                  ;	  Note:  ES is the segment containing all the control blocks defined
 30381                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 30382                                  ;		 is in DS.
 30383                                  ;
 30384                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 30385                                  ;		    invalid value list. But this parser does NOT implement
 30386                                  ;		    this feature. Therefore CY always zero.
 30387                                  ;
 30388                                  ;	   CY = 0   AX = return code
 30389                                  ;		    BL = terminated delimiter code
 30390                                  ;		    CX = new operand ordinal
 30391                                  ;		    SI = set past scaned operand
 30392                                  ;		    DX = selected result buffer
 30393                                  ;
 30394                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 30395                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 30396                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 30397                                  ;
 30398                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 30399                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 30400                                  ;
 30401                                  ;-------- Modification History -----------------------------------------
 30402                                  ;
 30403                                  ;  4/04/87 : Created by K. K,
 30404                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 30405                                  ;	   : JMP SHORT assemble error (tm02)
 30406                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 30407                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 30408                                  ;	     DateSW equ 1)	      (tm04)
 30409                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 30410                                  ;				      (tm05) in PSDATA.INC
 30411                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 30412                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 30413                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 30414                                  ;	     value-list block	      (tm07)
 30415                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 30416                                  ;	     switch (keyword) or not. If there is, backup si for next call
 30417                                  ;	     (tm08)
 30418                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 30419                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 30420                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 30421                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 30422                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 30423                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 30424                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 30425                                  ;					  (tm12)
 30426                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 30427                                  ;					  (tm13)
 30428                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 30429                                  ;					  (tm14)
 30430                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 30431                                  ;					  (tm15)
 30432                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 30433                                  ;
 30434                                  ;  7/24/87 : Quoted strings being returned with quotes.
 30435                                  ;
 30436                                  ;  7/28/87 : Kerry S (;AN018;)
 30437                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 30438                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 30439                                  ;	     affected: $P_Chk_SW_Control.
 30440                                  ;
 30441                                  ;  7/29/87 : Kerry S (;AN019;)
 30442                                  ;	     Now allow the optional bit in match flags for switches.  This
 30443                                  ;	     allows the switch to be encountered with a value or without a
 30444                                  ;	     value and no error is returned.
 30445                                  ;
 30446                                  ;
 30447                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 30448                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 30449                                  ;	     within a date response, instead of checking just for the one
 30450                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 30451                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 30452                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 30453                                  ;
 30454                                  ;  9/1/87  : Kerry S (;AN021)
 30455                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 30456                                  ;	     the command line with the string in the control block the
 30457                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 30458                                  ;	     on the command line and assuming a match.	This allowed a shorter
 30459                                  ;	     string on the command line than in the synonym list in the control
 30460                                  ;	     block.  I put in a test for a null in the control block so the
 30461                                  ;	     string in the control block must be the same length as the string
 30462                                  ;	     preceeding the colon or equal on the command line.
 30463                                  ;
 30464                                  ;  8/28/87 : Kerry S (;AN022;)
 30465                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 30466                                  ;	     problems for people who included it themselves in a segment other
 30467                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 30468                                  ;	     segment.
 30469                                  ;
 30470                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 30471                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 30472                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 30473                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 30474                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 30475                                  ;	     BL be used if TIME is being parsed.
 30476                                  ;
 30477                                  ;  9/24/87 : Ed K
 30478                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 30479                                  ;	     invocations with their normally expanded code; made comments
 30480                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 30481                                  ;
 30482                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 30483                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 30484                                  ;	     pointed to by non-existant CONTROL.
 30485                                  ;
 30486                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 30487                                  ;	     A quoted text string can be framed only by double quote.  Remove
 30488                                  ;	     support to frame quoted text string with single quote.
 30489                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 30490                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 30491                                  ;	     single quote in PROC prologues are left as is for history reasons.
 30492                                  ;
 30493                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 30494                                  ;	     quote chars within a quoted string is supposed to be reported as
 30495                                  ;	     one quote character, but is reported as two quotes.  This changed
 30496                                  ;	     two instructions in PROC $P_Quoted_Str.
 30497                                  ;
 30498                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 30499                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 30500                                  ;
 30501                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 30502                                  ;
 30503                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 30504                                  ;	     psdata buffer should have psdata_seg.
 30505                                  ;
 30506                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 30507                                  ;	     positional missing.
 30508                                  ;
 30509                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 30510                                  ;	     as a line delimiter, should use carriage return.
 30511                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 30512                                  ;
 30513                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 30514                                  ;
 30515                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 30516                                  ;	     endless loop since SI is returned still pointing to start
 30517                                  ;	     of that parm.
 30518                                  ;
 30519                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 30520                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 30521                                  ;	     when tried to fix it on previous version, changed similar
 30522                                  ;	     but wrong place.
 30523                                  ;
 30524                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 30525                                  ;	     delimiters between hours, minutes, seconds for time. And period
 30526                                  ;	     and comma are valid delimiters between seconds and 100th second.
 30527                                  ;
 30528                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 30529                                  ;	     in a filespec, then flag an error.
 30530                                  ;
 30531                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 30532                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 30533                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 30534                                  ;  -->	     local parser data. Why were some references to local data changed
 30535                                  ;	     to do this before, but not all ?????
 30536                                  ;
 30537                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 30538                                  ;
 30539                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 30540                                  ;
 30541                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 30542                                  ;
 30543                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 30544                                  ;
 30545                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 30546                                  ;	     separator in TIME before hundredths field.
 30547                                  ;
 30548                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 30549                                  ;			strings as keywords.
 30550                                  ;
 30551                                  ;***********************************************************************
 30552                                  
 30553                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30554                                  cmd_parse:
 30555                                  	;call	sysparse
 30556                                  	;retn
 30557                                  
 30558                                  ; -----------------------------------
 30559                                  
 30560                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30561                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 30562                                  
 30563                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30564                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4CABh
 30565                                  sysparse:
 30566 00004A59 2EC706[4E99]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 30567 00004A60 2E890E[D899]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 30568 00004A65 2E8926[DA99]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 30569 00004A6A 2E8936[DC99]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 30570                                  $P_Redo_Time:				;AN039; try to parse time again
 30571 00004A6F FC                      	cld				;AN000; confirm forward direction
 30572 00004A70 2E890E[4199]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 30573                                  	;mov	word [cs:$P_RC],$P_No_Error
 30574 00004A75 2EC706[4399]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 30575 00004A7C 2EC706[5699]0000        	mov	word [cs:$P_Found_SYNONYM],0
 30576                                  					;AC034; initalize synonym pointer
 30577 00004A83 2EC706[4799]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 30578                                  
 30579                                  ;M029 -- Begin changes
 30580                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 30581                                  ;entry to SysParse. This is in the non-checksum region and any program that
 30582                                  ;corrupts this table but does not corrupt the checksum region will leave
 30583                                  ;command.com parsing in an inconsistent state.
 30584                                  ; NB: The special characters string has been hardcoded here. If any change
 30585                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 30586                                  
 30587 00004A8A 2EC706[139A]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 30588 00004A91 2EC706[159A]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 30589 00004A98 2EC706[179A]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 30590 00004A9F 2EC706[199A]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 30591                                  
 30592                                  ;M029 -- End of changes
 30593                                  
 30594 00004AA6 E82209                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 30595 00004AA9 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 30596                                  
 30597                                  ;--------------------------- End of Line
 30598                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 30599 00004AAB B8FFFF                  	mov	ax,0FFFFh
 30600 00004AAE 53                      	push	bx			;AN000;
 30601                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 30602 00004AAF 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 30603                                  	
 30604                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 30605 00004AB2 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 30606 00004AB5 7304                    	jae	short $P_Fin		;AN000; positional found.
 30607                                  
 30608                                  	;mov	ax,2
 30609 00004AB7 B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 30610                                  	; 27/04/2023
 30611 00004ABA F8                      	clc
 30612                                  $P_Fin: 				;AN000;
 30613 00004ABB 5B                      	pop	bx			;AN000;
 30614                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 30615                                  	; 27/04/2023
 30616                                  	; cf = 0
 30617                                  	;clc
 30618 00004ABC C3                      	retn
 30619                                  
 30620                                  ;---------------------------
 30621                                  $P_Start:				;AN000;
 30622 00004ABD 2E8936[5099]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034; save ptr to command line for later use by complex,
 30623 00004AC2 53                      	push	bx			;AN000; quoted string or file spec.
 30624 00004AC3 57                      	push	di			;AN000;
 30625 00004AC4 55                      	push	bp			;AN000;
 30626 00004AC5 8D1E[5899]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 30627 00004AC9 2EF606[4F99]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 30628                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 30629 00004ACF 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 30630                                  $P_Pack_Loop:				;AN000;
 30631 00004AD1 AC                      	lodsb				;AN000; Pick a operand from buffer
 30632 00004AD2 E8A909                  	call	$P_Chk_Switch		;AN000; Check switch character
 30633 00004AD5 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 30634                                  
 30635 00004AD7 E81309                  	call	$P_Chk_EOL		;AN000; Check EOL character
 30636 00004ADA 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 30637                                  
 30638 00004ADC E84009                  	call	$P_Chk_Delim		;AN000; Check delimiter
 30639 00004ADF 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 30640                                  
 30641 00004AE1 2EF606[4F99]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 30642                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 30643 00004AE7 7505                    	jnz	short $P_Pack_End_backup_si
 30644                                  					;AN000; (tm08)
 30645 00004AE9 E8DF08                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 30646 00004AEC EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 30647                                  
 30648                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 30649 00004AEE 2EF606[4F99]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 30650                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 30651 00004AF4 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 30652                                  
 30653 00004AF6 4E                      	dec	si			;AN000; (tm08)
 30654 00004AF7 EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 30655                                  $P_PL01:				;AN000;
 30656 00004AF9 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 30657                                  	;cmp	al,'='
 30658 00004AFC 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 30659 00004AFE 7506                    	jne	short $P_PL00 		;AN000; then
 30660                                  
 30661 00004B00 2E800E[4F99]01          	or	byte [cs:$P_Flags2],$P_equ
 30662                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 30663                                  $P_PL00:				;AN000;
 30664 00004B06 43                      	inc	bx			;AN000; ready to see next byte
 30665 00004B07 E89F09                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 30666 00004B0A 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 30667                                  
 30668 00004B0C AC                      	lodsb				;AN000; if yes, store
 30669 00004B0D 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 30670 00004B10 43                      	inc	bx			;AN000; update pointer
 30671 00004B11 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 30672                                  
 30673                                  $P_Pack_End_BY_EOL:			;AN000;
 30674 00004B13 4E                      	dec	si			;AN000; backup si pointer
 30675                                  $P_Pack_End:				;AN000;
 30676 00004B14 2E8936[4599]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 30677                                  	;mov	byte [cs:bx],0
 30678 00004B19 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 30679 00004B1D 2E891E[5499]            	mov	[cs:$P_Save_EOB],bx
 30680                                  					;AC034; 3/17/87 keep the address for later use of complex
 30681                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 30682 00004B22 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 30683 00004B25 8D36[5899]              	lea	si,$P_STRING_BUF	;AC034;
 30684                                  	;cmp	byte [cs:si],'/'
 30685 00004B29 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 30686 00004B2D 7442                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 30687                                  
 30688 00004B2F 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 30689 00004B33 7408                    	je	short $P_Positional_Manager
 30690                                  					;M005;if so, process as one!
 30691 00004B35 2EF606[4F99]01          	test	byte [cs:$P_Flags2],$P_equ
 30692                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 30693 00004B3B 7556                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 30694                                  
 30695                                  $P_Positional_Manager:			;AN000; else process as positional
 30696                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30697 00004B3D 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30698 00004B41 30E4                    	xor	ah,ah			;AN000; ax = maxp
 30699 00004B43 2E3906[4199]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 30700 00004B48 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 30701                                  
 30702 00004B4A 2EA1[4199]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 30703 00004B4E D1E0                    	shl	ax,1			;AN000; ax = ax*2
 30704 00004B50 43                      	inc	bx			;AC035; add '2' to
 30705 00004B51 43                      	inc	bx			;AC035;  BX reg
 30706                                  					;AN000; now bx points to 1st CONTROL
 30707 00004B52 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 30708 00004B54 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 30709 00004B57 E88000                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 30710 00004B5A EB61                    	jmp	short $P_Return_to_Caller
 30711                                  					;AN000; and return to the caller
 30712                                  $P_Too_Many_Error:			;AN000;
 30713                                  	;mov	word [cs:$P_RC],1
 30714 00004B5C 2EC706[4399]0100        	mov	word [cs:$P_RC],$P_Too_Many
 30715                                  					;AC034; set exit code
 30716 00004B63 EB58                    	jmp	short $P_Return_to_Caller
 30717                                  					;AN000; and return to the caller
 30718                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30719                                  %if 0
 30720                                  $P_SW_Manager:				;AN000;
 30721                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30722                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30723                                  	xor	ah,ah			;AN000; ax = maxp
 30724                                  	inc	ax			;AN000;
 30725                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 30726                                  	add	bx,ax			;AN000; now bx points to maxs
 30727                                  	mov	cl,[es:bx]		;AN000;
 30728                                  	xor	ch,ch			;AN000; cx = maxs
 30729                                  	or	cx,cx			;AN000; at least one switch ?
 30730                                  	jz	short $P_SW_Not_Found 	;AN000;
 30731                                  	inc	bx			;AN000; now bx points to 1st CONTROL address
 30732                                  %else
 30733                                  $P_get_max_ptr:
 30734                                  	;mov	al,[es:bx+1]		; get maxp
 30735 00004B65 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30736 00004B69 30E4                    	xor	ah,ah			; ax = maxp
 30737 00004B6B 40                      	inc	ax
 30738 00004B6C D1E0                    	shl	ax,1			; ax = (ax+1)*2
 30739 00004B6E 01C3                    	add	bx,ax			; now bx points to maxs
 30740 00004B70 C3                      	retn
 30741                                  
 30742                                  $P_SW_Manager:
 30743 00004B71 E8F1FF                  	call	$P_get_max_ptr
 30744 00004B74 268A0F                  	mov	cl,[es:bx]
 30745 00004B77 30ED                    	xor	ch,ch			; cx = maxs
 30746                                  					; at least one switch ?
 30747 00004B79 E30F                    	jcxz	$P_SW_Not_Found 	; no
 30748 00004B7B 43                      	inc	bx			; now bx points to 1st CONTROL address
 30749                                  %endif
 30750                                  
 30751                                  $P_SW_Mgr_Loop: 			;AN000;
 30752 00004B7C 53                      	push	bx			;AN000;
 30753 00004B7D 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 30754 00004B80 E8B700                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 30755 00004B83 5B                      	pop	bx			;AN000;
 30756 00004B84 7337                    	jnc	short $P_Return_to_Caller
 30757                                  					;AN000; if the CONTROL is for the switch, exit
 30758 00004B86 43                      	inc	bx			;AC035; add '2' to
 30759 00004B87 43                      	inc	bx			;AC035;  BX reg
 30760                                  					;AN000; else bx points to the next CONTROL
 30761 00004B88 E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 30762                                  $P_SW_Not_Found:			;AN000;
 30763                                  	;mov	word [cs:$P_RC],3
 30764 00004B8A 2EC706[4399]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 30765                                  					;AC034; here no CONTROL for the switch has
 30766 00004B91 EB2A                    	jmp	short $P_Return_to_Caller0
 30767                                  					;AN000; not been found, means error.
 30768                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30769                                  %if 0
 30770                                  $P_Key_Manager: 			;AN000;
 30771                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30772                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30773                                  	xor	ah,ah			;AN000; ax = maxp
 30774                                  	inc	ax			;AN000;
 30775                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 30776                                  	add	bx,ax			;AN000; now bx points to maxs
 30777                                  	mov	al,[es:bx]		;AN000;
 30778                                  	xor	ah,ah			;AN000; ax = maxs
 30779                                  	shl	ax,1			;AN000;
 30780                                  	inc	ax			;AN000; ax = ax*2+1
 30781                                  	add	bx,ax			;AN000; now bx points to maxk
 30782                                  	mov	cl,[es:bx]		;AN000;
 30783                                  	xor	ch,ch			;AN000; cx = maxk
 30784                                  	or	cx,cx			;AN000; at least one keyword ?
 30785                                  	jz	short $P_Key_Not_Found	;AN000;
 30786                                  	inc	bx			;AN000; now bx points to 1st CONTROL
 30787                                  %else
 30788                                  $P_Key_Manager:
 30789 00004B93 E8CFFF                  	call	$P_get_max_ptr
 30790 00004B96 268A07                  	mov	al,[es:bx]
 30791 00004B99 30E4                    	xor	ah,ah			; ax = maxs
 30792 00004B9B D1E0                    	shl	ax,1
 30793 00004B9D 40                      	inc	ax			; ax = ax*2+1
 30794 00004B9E 01C3                    	add	bx,ax			; now bx points to maxk
 30795 00004BA0 268A0F                  	mov	cl,[es:bx]
 30796 00004BA3 30ED                    	xor	ch,ch			; cx = maxk
 30797                                  					; at least one keyword ?
 30798 00004BA5 E30F                    	jcxz	$P_Key_Not_Found
 30799 00004BA7 43                      	inc	bx			; now bx points to 1st CONTROL
 30800                                  %endif
 30801                                  
 30802                                  $P_Key_Mgr_Loop:			;AN000;
 30803 00004BA8 53                      	push	bx			;AN000;
 30804 00004BA9 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 30805 00004BAC E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 30806 00004BAF 5B                      	pop	bx			;AN000;
 30807 00004BB0 730B                    	jnc	short $P_Return_to_Caller
 30808                                  					;AN000; if the CONTROL is for the keyword, exit
 30809 00004BB2 43                      	inc	bx			;AC035; add '2' to
 30810 00004BB3 43                      	inc	bx			;AC035;  BX reg
 30811                                  					;AN000; else bx points to the next CONTROL
 30812 00004BB4 E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 30813                                  $P_Key_Not_Found:			;AN000;
 30814                                  	;mov	word [cs:$P_RC],4
 30815 00004BB6 2EC706[4399]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 30816                                  					;AC034; here no CONTROL for the keyword has
 30817                                  $P_Return_to_Caller0:
 30818                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 30819 00004BBD 5D                      	pop	bp			;AN000;
 30820 00004BBE 5F                      	pop	di			;AN000;
 30821 00004BBF 5B                      	pop	bx			;AN000;
 30822 00004BC0 2E8B0E[4199]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 30823 00004BC5 2EA1[4399]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 30824 00004BC9 2E8B36[4599]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 30825 00004BCE 2E8B16[4799]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 30826 00004BD3 2E8A1E[4999]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 30827                                  $P_Single_Exit: 			;AN000;
 30828 00004BD8 F8                      	clc				;AN000;
 30829 00004BD9 C3                      	retn				;AN000;
 30830                                  
 30831                                  ;***********************************************************************
 30832                                  ; $P_Chk_Pos_Control
 30833                                  ;
 30834                                  ; Function: Parse CONTROL block for a positional
 30835                                  ;
 30836                                  ; Input:     ES:BX -> CONTROL block
 30837                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30838                                  ;
 30839                                  ; Output:    None
 30840                                  ;
 30841                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 30842                                  ;
 30843                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 30844                                  ;***********************************************************************
 30845                                  
 30846                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30847                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 30848                                  
 30849                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30850                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E35h
 30851                                  $P_Chk_Pos_Control:
 30852 00004BDA 50                      	push	ax			;AN000;
 30853                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 30854 00004BDB 268B07                  	mov	ax,[es:bx]		;AN000;
 30855                                  	;test	ax,2
 30856 00004BDE A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 30857 00004BE1 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 30858                                  
 30859 00004BE3 2EFF06[4199]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 30860                                  $P_CPC00:				;AN000;
 30861                                  	;cmp	byte [cs:si],0
 30862 00004BE8 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 30863 00004BEC 7516                    	jne	short $P_CPC01		;AN000;
 30864                                  
 30865                                  	;test	ax,1
 30866 00004BEE A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 30867 00004BF1 7509                    	jnz	short $P_CPC02		;AN000;
 30868                                  
 30869 00004BF3 2EC706[4399]0200        	mov	word [cs:$P_RC],$P_Op_Missing ; 2
 30870                                  					;AC034; no, then error	 3/17/87
 30871 00004BFA EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 30872                                  $P_CPC02:				;AN000;
 30873                                  	; 27/04/2023
 30874                                  	;push	ax ; *			;AN000;
 30875                                  	;
 30876                                  	;;mov	al,3
 30877                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 30878                                  	;;mov	ah,0FFh
 30879                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 30880                                  	; 31/03/2023
 30881 00004BFC B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30882 00004BFF E89500                  	call	$P_Fill_Result		;AN000;
 30883                                  	; 27/04/2023
 30884                                  	;pop	ax ; *			;AN000;
 30885 00004C02 EB03                    	jmp	short $P_CPC_Exit	;AN000;
 30886                                  $P_CPC01:				;AN000;
 30887 00004C04 E81101                  	call	$P_Check_Match_Flags	;AN000;
 30888                                  $P_CPC_Exit:				;AN000;
 30889 00004C07 58                      	pop	ax			;AN000;
 30890 00004C08 C3                      	retn				;AN000;
 30891                                  
 30892                                  ;***********************************************************************
 30893                                  ; $P_Chk_Key_Control
 30894                                  ;
 30895                                  ; Function: Parse CONTROL block for a keyword
 30896                                  ;
 30897                                  ; Input:     ES:BX -> CONTROL block
 30898                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30899                                  ;
 30900                                  ; Output:    CY = 1 : not match
 30901                                  ;
 30902                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30903                                  ;
 30904                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30905                                  ;***********************************************************************
 30906                                  
 30907                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30908                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30909                                  $P_Chk_Key_Control:			;AN000;
 30910 00004C09 F9                      	stc				;AN000;this logic works when the KeySW
 30911 00004C0A C3                      	retn				;AN000;is reset.
 30912                                  
 30913                                  ;***********************************************************************
 30914                                  ; $P_Search_KEYorSW:
 30915                                  ;
 30916                                  ; Function: Seach specified keyword or switch from CONTROL
 30917                                  ;
 30918                                  ; Input:     ES:BX -> CONTROL block
 30919                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30920                                  ;
 30921                                  ; Output:    CY = 1 : not match
 30922                                  ;
 30923                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 30924                                  ;***********************************************************************
 30925                                  
 30926                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30927                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30928                                  $P_Search_KEYorSW:
 30929 00004C0B 55                      	push	bp			;AN000;
 30930 00004C0C 51                      	push	cx			;AN000;
 30931 00004C0D 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 30932                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 30933                                  	; 14/06/2023
 30934                                  	;xor	ch,ch			;AN000; and set it to cx
 30935                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30936 00004C11 08C9                    	or	cl,cl
 30937 00004C13 740E                    	jz	short $P_KEYorSW_Not_Found
 30938                                  					;AN000; then indicate not found by CY
 30939 00004C15 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 30940                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 30941                                  $P_KEYorSW_Loop:			;AN000;
 30942 00004C19 E8E703                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 30943 00004C1C 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 30944 00004C1E E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 30945 00004C21 E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 30946                                  $P_KEYorSW_Not_Found:			;AN000;
 30947 00004C23 F9                      	stc				;AN000; indicate not found in synonym list
 30948 00004C24 EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 30949                                  $P_KEYorSW_Found:			;AN000;
 30950 00004C26 2E892E[5699]            	mov	[cs:$P_Found_SYNONYM],bp
 30951                                  					;AC034; set synonym pointer
 30952                                  	; 27/04/2023
 30953                                  	; cf = 0
 30954                                  	;clc				;AN000; indicate found
 30955                                  $P_KEYorSW_Exit:			;AN000;
 30956 00004C2B 59                      	pop	cx			;AN000;
 30957 00004C2C 5D                      	pop	bp			;AN000;
 30958 00004C2D C3                      	retn				;AN000;
 30959                                  
 30960                                  ;***********************************************************************
 30961                                  ; $P_MoveBP_NUL
 30962                                  ;***********************************************************************
 30963                                  
 30964                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30965                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30966                                  $P_MoveBP_NUL:
 30967                                  $P_MBP_Loop:				;AN000;
 30968                                  	;cmp	byte [es:bp+0],0
 30969 00004C2E 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 30970 00004C33 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 30971 00004C35 45                      	inc	bp			;AN000; until
 30972 00004C36 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 30973                                  $P_MBP_Exit:				;AN000;
 30974 00004C38 45                      	inc	bp			;AN000; bp points to next to NULL
 30975 00004C39 C3                      	retn				;AN000;
 30976                                  
 30977                                  ;***********************************************************************
 30978                                  ; $P_Chk_SW_Control
 30979                                  ;
 30980                                  ; Function: Parse CONTROL block for a switch
 30981                                  ;
 30982                                  ; Input:     ES:BX -> CONTROL block
 30983                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30984                                  ;
 30985                                  ; Output:    CY = 1 : not match
 30986                                  ;
 30987                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30988                                  ;
 30989                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30990                                  ;***********************************************************************
 30991                                  
 30992                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30993                                  	;
 30994                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30995                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E9Ah
 30996                                  $P_Chk_SW_Control:
 30997 00004C3A 2E800E[4F99]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 30998                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 30999 00004C40 E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 31000 00004C43 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 31001                                  
 31002 00004C45 2E8026[4F99]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 31003                                  	;and	byte [cs:$P_Flags2],0EFh
 31004                                  					;AC034; reset the indicator previously set
 31005 00004C4B 50                      	push	ax			;AN000;       /switch:
 31006 00004C4C 2EA1[5299]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 31007 00004C50 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 31008 00004C52 2E0106[5099]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 31009 00004C57 58                      	pop	ax			;AN000;
 31010                                  
 31011 00004C58 2E8B36[5299]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 31012                                  	;cmp	byte [cs:si],0
 31013 00004C5D 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 31014 00004C61 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 31015                                  
 31016                                  	;cmp	byte [cs:si],':'
 31017 00004C63 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 31018                                  					;AN000; if no, the switch terminated by colon ?
 31019 00004C68 7509                    	jne	short $P_Chk_if_data_required
 31020                                  					;AN000; if yes,
 31021                                  
 31022 00004C6A 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31023                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 31024 00004C71 EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 31025                                  
 31026                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 31027                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 31028                                  	; 27/04/2023
 31029 00004C73 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 31030 00004C77 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 31031                                  
 31032                                  	;;test	word [es:bx],1 ; $P_Optional
 31033                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 31034 00004C79 26F60701                	test	byte [es:bx],$P_Optional
 31035                                  					;AN019; see if no value is valid
 31036 00004C7D 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 31037                                  
 31038 00004C7F 2EC706[4399]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 31039                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 31040 00004C86 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 31041                                  
 31042                                  $P_CSW00:				;AN000;
 31043 00004C88 E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 31044 00004C8B F8                      	clc				;AN000; indicate match
 31045                                  	;jmp	short $P_Chk_SW_Single_Exit
 31046 00004C8C C3                      	retn	; 31/03/2023		;AN000;
 31047                                  	; 31/03/2023
 31048                                  ;$P_Chk_SW_Err0: 			;AN000;
 31049                                  ;	stc				;AN000; not found in switch synonym list
 31050                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 31051                                  ;	retn	; 31/03/2023		;AN000;
 31052                                  	
 31053                                  $P_Chk_SW_Exit: 			;AN000;
 31054 00004C8D 50                      	push	ax			;AN000;
 31055                                  	; 31/03/2023
 31056 00004C8E B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31057                                  	;;mov	al,3
 31058                                  	;;mov	ah,0FFh
 31059                                  	;mov	al,$P_String		;AN000; set
 31060                                  	;mov	ah,$P_No_Tag		;AN000;    result
 31061 00004C91 E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 31062 00004C94 58                      	pop	ax			;AN000;
 31063 00004C95 F8                      	clc				;AN000;
 31064                                  	; 31/03/2023
 31065                                  $P_Chk_SW_Err0:
 31066                                  $P_Chk_SW_Single_Exit:			;AN000;
 31067 00004C96 C3                      	retn				;AN000;
 31068                                  
 31069                                  ;***********************************************************************
 31070                                  ; $P_Fill_Result
 31071                                  ;
 31072                                  ; Function: Fill the result buffer
 31073                                  ;
 31074                                  ; Input:    AH = Item tag
 31075                                  ;	    AL = type
 31076                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 31077                                  ;		  AL = 2: DX has index(offset) into value list
 31078                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 31079                                  ;		  AL = 7: DX has year, CL has month and CH has date
 31080                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 31081                                  ;			  amd CH has hundredths
 31082                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 31083                                  ;	    ES:BX -> CONTROL block
 31084                                  ;
 31085                                  ; Output:   None
 31086                                  ;
 31087                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 31088                                  ;
 31089                                  ; Vars: $P_DX(W)
 31090                                  ;***********************************************************************
 31091                                  
 31092                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31093                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31094                                  $P_Fill_Result:
 31095 00004C97 57                      	push	di			;AN000;
 31096 00004C98 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 31097                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 31098 00004C9C 2E893E[4799]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 31099                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 31100                                  	;;mov	[es:di],al		;AN000; store type
 31101                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 31102                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 31103                                  	; 31/03/2023
 31104 00004CA1 268905                  	mov	[es:di],ax
 31105 00004CA4 50                      	push	ax			;AN000;
 31106 00004CA5 2EA1[5699]              	mov	ax,[cs:$P_Found_SYNONYM]
 31107                                  					;AC034; if yes,
 31108 00004CA9 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 31109                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 31110 00004CAD 58                      	pop	ax			;AN000;
 31111                                  $P_RLT04:				;AN000;
 31112                                  	;cmp	al,1
 31113 00004CAE 3C01                    	cmp	al,$P_Number		;AN000; if number
 31114 00004CB0 750A                    	jne	short $P_RLT00		;AN000;
 31115                                  $P_RLT02:				;AN000;
 31116 00004CB2 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 31117                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 31118 00004CB6 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 31119                                  	;mov	[es:di+6],cx		;AN000;	number
 31120 00004CBA EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 31121                                  $P_RLT00:				;AN000;
 31122                                  	;cmp	al,2
 31123 00004CBC 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 31124 00004CBE 7506                    	jne	short $P_RLT01		;AN000;
 31125 00004CC0 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 31126                                  	;mov	[es:di+4],dx		;AN000; then store list index
 31127 00004CC4 EB50                    	jmp	short $P_RLT_Exit	;AN000;
 31128                                  $P_RLT01:				;AN000;
 31129                                  	;cmp	al,7
 31130 00004CC6 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 31131 00004CC8 74E8                    	je	short $P_RLT02		;AN000;
 31132                                  	;cmp	al,8
 31133 00004CCA 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 31134 00004CCC 74E4                    	je	short $P_RLT02		;AN000;
 31135                                  	;cmp	al,6
 31136 00004CCE 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 31137 00004CD0 7506                    	jne	short $P_RLT03		;AN000;
 31138                                  
 31139 00004CD2 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 31140                                  	;mov	[es:di+4],dl		;AN000; store drive number
 31141 00004CD6 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 31142                                  
 31143                                  $P_RLT03:				;AN000;
 31144                                  	;cmp	al,4
 31145 00004CD8 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 31146 00004CDA 750F                    	jne	short $P_RLT05		;AN000;
 31147                                  
 31148 00004CDC 2EA1[5099]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 31149 00004CE0 40                      	inc	ax			;AN000; skip left Parentheses
 31150 00004CE1 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 31151                                  	;mov	[es:di+4],ax		;AN000; store offset
 31152 00004CE5 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 31153                                  	;mov	[es:di+6],ds		;AN000; store segment
 31154 00004CE9 EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 31155                                  
 31156                                  $P_RLT05:				;AN000;
 31157                                  ;------------------------  AL = 3, 5, or 9
 31158 00004CEB 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 31159                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 31160 00004CEF 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 31161                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 31162                                  
 31163 00004CF3 50                      	push	ax			;AN000;
 31164 00004CF4 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 31165                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 31166 00004CF9 7404                    	jz	short $P_RLT_CAP00	;AN000;
 31167                                  
 31168                                  	;mov	al,4
 31169 00004CFB B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 31170 00004CFD EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 31171                                  
 31172                                  $P_RLT_CAP00:				;AN000;
 31173 00004CFF 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 31174                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 31175 00004D04 7405                    	jz	short $P_RLT_CAP01	;AN000;
 31176                                  
 31177                                  	;mov	al,2
 31178 00004D06 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 31179                                  $P_RLT_CAP02:				;AN000;
 31180 00004D08 E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 31181                                  $P_RLT_CAP01:				;AN000;
 31182 00004D0B 58                      	pop	ax			;AN000;
 31183 00004D0C 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 31184                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 31185 00004D11 7403                    	jz	short $P_RLT_Exit	;AN000;
 31186                                  
 31187 00004D13 E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 31188                                  $P_RLT_Exit:				;AN000;
 31189 00004D16 5F                      	pop	di			;AN000;
 31190 00004D17 C3                      	retn				;AN000;
 31191                                  
 31192                                  ;***********************************************************************
 31193                                  ; $P_Check_Match_Flags
 31194                                  ;
 31195                                  ; Function:  Check the mutch_flags and make the exit code and set the
 31196                                  ;	     result buffer
 31197                                  ;
 31198                                  ;	    Check for types in this order:
 31199                                  ;		Complex
 31200                                  ;		Date
 31201                                  ;		Time
 31202                                  ;		Drive
 31203                                  ;		Filespec
 31204                                  ;		Quoted String
 31205                                  ;		Simple String
 31206                                  ;
 31207                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31208                                  ;	     ES:BX -> CONTROL block
 31209                                  ;
 31210                                  ; Output:    None
 31211                                  ;
 31212                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 31213                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 31214                                  ;	     $P_Drive_Format
 31215                                  ;***********************************************************************
 31216                                  
 31217                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31218                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31219                                  $P_Check_Match_Flags:
 31220 00004D18 2EC606[1C9A]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 31221                                  					;AN033;AC034;; clear filespec error flag.
 31222 00004D1E 50                      	push	ax			;AN000;
 31223                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 31224 00004D1F 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 31225 00004D22 09C0                    	or	ax,ax			;AC035; test ax for zero
 31226 00004D24 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 31227 00004D26 50                      	push	ax			;AN000; (tm12)
 31228 00004D27 53                      	push	bx			;AN000; (tm12)
 31229 00004D28 52                      	push	dx			;AN000; (tm12)
 31230 00004D29 57                      	push	di			;AN000; (tm12)
 31231 00004D2A 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31232                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 31233                                  	; 31/03/2023
 31234 00004D31 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31235                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 31236                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 31237 00004D34 E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 31238 00004D37 5F                      	pop	di			;AN000; (tm12)
 31239 00004D38 5A                      	pop	dx			;AN000; (tm12)
 31240 00004D39 5B                      	pop	bx			;AN000; (tm12)
 31241 00004D3A 58                      	pop	ax			;AN000; (tm12)
 31242                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 31243                                  	; 31/03/2023
 31244                                  $P_Bridge:	; 18/04/2023		;AN000;
 31245 00004D3B E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 31246                                  $P_Mat: 				;AN000; (tm12)
 31247                                  $P_Match01:				;AN000;
 31248                                  	;test	ax,1000h
 31249 00004D3E A90010                  	test	ax,$P_Date_S		;AN000; Date string
 31250 00004D41 7412                    	jz	short $P_Match02	;AN000;
 31251 00004D43 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31252                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31253 00004D4A E85403                  	call	$P_Date_Format		;AN000; do process
 31254 00004D4D 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31255                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31256                                  	; 18/04/2023
 31257 00004D53 75E6                    	jne	short $P_Bridge		;AN000;
 31258                                  $P_Match02:				;AN000;
 31259                                  	;test	ax,800h
 31260 00004D55 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 31261 00004D58 7412                    	jz	short $P_Match03	;AN000;
 31262 00004D5A 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31263                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31264 00004D61 E85404                  	call	$P_Time_Format		;AN000; do process
 31265 00004D64 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31266                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31267                                  	;jne	short $P_Bridge		;AN000; (tm09)
 31268                                  	;jmp	short $P_Match03	;AN025; (tm09)
 31269                                  	; 31/03/2023
 31270 00004D6A 756E                    	jne	short $P_Match_Exit
 31271                                  ;$P_Bridge:				;AN000;
 31272                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 31273                                  $P_Match03:				;AN000;
 31274                                  	;test	ax,8000h
 31275 00004D6C A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 31276 00004D6F 7412                    	jz	short $P_Match04	;AN000;
 31277 00004D71 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31278                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31279 00004D78 E82701                  	call	$P_Value		;AN000; do process
 31280 00004D7B 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31281                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31282 00004D81 7557                    	jne	short $P_Match_Exit	;AN000;
 31283                                  $P_Match04:				;AN000;
 31284                                  	;test	ax,4000h
 31285 00004D83 A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 31286 00004D86 7412                    	jz	short $P_Match05	;AN000;
 31287 00004D88 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31288                                  					;AC034; assume no error
 31289 00004D8F E8EC00                  	call	$P_SValue		;AN000; do process
 31290 00004D92 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31291                                  					;AC034; if error, examine the next type
 31292 00004D98 7540                    	jne	short $P_Match_Exit	;AN000;
 31293                                  $P_Match05:				;AN000;
 31294                                  	;test	ax,100h
 31295 00004D9A A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 31296 00004D9D 7415                    	jz	short $P_Match06	;AN000;
 31297 00004D9F 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31298                                  					;AC034; assume no error
 31299 00004DA6 E85C05                  	call	$P_File_Format		;AN000; 1st, call file format
 31300 00004DA9 E8DD05                  	call	$P_Drive_Format 	;AN000; check drive format, next
 31301 00004DAC 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31302                                  					;AC034; if error, examinee the next type
 31303 00004DB2 7526                    	jne	short $P_Match_Exit	;AN000;
 31304                                  $P_Match06:				;AN000;
 31305                                  	;test	ax,200h
 31306 00004DB4 A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 31307 00004DB7 7412                    	jz	short $P_Match07	;AN000;
 31308 00004DB9 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31309                                  					;AC034; assume no error
 31310 00004DC0 E84205                  	call	$P_File_Format		;AN000; do process
 31311 00004DC3 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31312                                  					;AC034; if error, examine the next type
 31313 00004DC9 750F                    	jne	short $P_Match_Exit	;AN000;
 31314                                  $P_Match07:				;AN000;
 31315                                  $P_Match08:				;AN000;
 31316                                  	;test	ax,2000h
 31317 00004DCB A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 31318 00004DCE 740A                    	jz	short $P_Match09	;AN000;
 31319 00004DD0 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31320                                  					;AC034; assume no error
 31321 00004DD7 E8C501                  	call	$P_Simple_String	;AN000; do process
 31322                                  $P_Match09:				;AN000;
 31323                                  $P_Match_Exit:				;AN000;
 31324 00004DDA 2E833E[1C9A]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 31325                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 31326 00004DE0 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 31327 00004DE2 2E833E[4399]00          	cmp	word [cs:$P_RC],$P_No_Error
 31328                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 31329 00004DE8 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 31330 00004DEA 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31331                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 31332                                  $P_Match2_Exit: 			;AN033;
 31333 00004DF1 58                      	pop	ax			;AN000;
 31334 00004DF2 C3                      	retn
 31335                                  
 31336                                  ;***********************************************************************
 31337                                  ; $P_Remove_Colon;
 31338                                  ;
 31339                                  ; Function: Remove colon at end
 31340                                  ;
 31341                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 31342                                  ;
 31343                                  ; Output:   None
 31344                                  ;
 31345                                  ; Use:	$P_Chk_DBCS
 31346                                  ;***********************************************************************
 31347                                  
 31348                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31349                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31350                                  $P_Remove_Colon:
 31351 00004DF3 50                      	push	ax			;AN000;
 31352 00004DF4 56                      	push	si			;AN000;
 31353                                  $P_RCOL_Loop:				;AN000;
 31354 00004DF5 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31355 00004DF8 08C0                    	or	al,al			;AN000; end of string ?
 31356 00004DFA 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 31357                                  
 31358 00004DFC 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 31359 00004DFE 750E                    	jne	short $P_RCOL00		;AN000;
 31360                                  
 31361                                  	;cmp	byte [cs:si+1],0
 31362 00004E00 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 31363 00004E05 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 31364                                  
 31365 00004E07 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 31366                                  	; 31/03/2023
 31367                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 31368                                  $P_RCOL_Exit:
 31369 00004E0B 5E                      	pop	si
 31370 00004E0C 58                      	pop	ax
 31371 00004E0D C3                      	retn
 31372                                  
 31373                                  $P_RCOL00:				;AN000;
 31374 00004E0E E89806                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 31375 00004E11 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 31376                                  
 31377 00004E13 46                      	inc	si			;AN000; if yes, skip trailing byte
 31378                                  $P_RCOL01:				;AN000;
 31379 00004E14 46                      	inc	si			;AN000; si points to next byte
 31380 00004E15 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 31381                                  
 31382                                  	; 31/03/2023
 31383                                  ;$P_RCOL_Exit:				;AN000;
 31384                                  	;pop	si			;AN000;
 31385                                  	;pop	ax			;AN000;
 31386                                  	;retn
 31387                                  
 31388                                  ;***********************************************************************
 31389                                  ; $P_Do_CAPS_String;
 31390                                  ;
 31391                                  ; Function: Perform capitalization along with the file case map table
 31392                                  ;	    or character case map table.
 31393                                  ;
 31394                                  ; Input:    AL = 2 : Use character table
 31395                                  ;	    AL = 4 : Use file table
 31396                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 31397                                  ;
 31398                                  ; Output:   None
 31399                                  ;
 31400                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 31401                                  ;***********************************************************************
 31402                                  
 31403                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31404                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31405                                  $P_Do_CAPS_String:
 31406 00004E17 56                      	push	si			;AN000;
 31407 00004E18 52                      	push	dx			;AN000;
 31408 00004E19 88C2                    	mov	dl,al			;AN000; save info id
 31409                                  $P_DCS_Loop:				;AN000;
 31410 00004E1B 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 31411 00004E1E E88806                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 31412 00004E21 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 31413                                  
 31414 00004E23 08C0                    	or	al,al			;AN000; end of string ?
 31415 00004E25 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 31416                                  
 31417 00004E27 E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 31418 00004E2A 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 31419 00004E2D EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 31420                                  $P_DCS00:				;AN000;
 31421 00004E2F 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 31422                                  $P_DCS01:				;AN000;
 31423 00004E30 46                      	inc	si			;AN000; si point to next byte
 31424 00004E31 EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 31425                                  $P_DCS_Exit:				;AN000;
 31426 00004E33 5A                      	pop	dx			;AN000;
 31427 00004E34 5E                      	pop	si			;AN000;
 31428 00004E35 C3                      	retn
 31429                                  
 31430                                  ;***********************************************************************
 31431                                  ; $P_Do_CAPS_Char;
 31432                                  ;
 31433                                  ; Function: Perform capitalization along with the file case map table
 31434                                  ;	    or character case map table.
 31435                                  ;
 31436                                  ; Input:    DL = 2 : Use character table
 31437                                  ;	    DL = 4 : Use file table
 31438                                  ;	    AL = character to be capitalized
 31439                                  ;
 31440                                  ; Output:   None
 31441                                  ;
 31442                                  ; Use:	INT 21h /w AH=65h
 31443                                  ;***********************************************************************
 31444                                  
 31445                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31446                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31447                                  $P_Do_CAPS_Char:
 31448 00004E36 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 31449 00004E38 730B                    	jae	short $P_DCC_Go		;AN000;
 31450                                  
 31451 00004E3A 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 31452 00004E3C 723F                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 31453                                  
 31454 00004E3E 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 31455 00004E40 773B                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 31456                                  
 31457 00004E42 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 31458                                  	;jmp	short $P_CAPS_Ret	;AN000;
 31459                                  	; 18/04/2023
 31460 00004E44 C3                      	retn
 31461                                  
 31462                                  $P_DCC_Go:				;AN000;
 31463 00004E45 53                      	push	bx			;AN000;
 31464 00004E46 06                      	push	es			;AN000;
 31465 00004E47 57                      	push	di			;AN000;
 31466                                  	; 18/04/2023
 31467 00004E48 8D3E[0E9A]              	lea	di,$P_File_CAP_Ptr	;AC034;
 31468 00004E4C 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 31469 00004E4F 7404                    	je	short $P_DCC00		;AN000;
 31470                                  	; 27/04/2023
 31471 00004E51 8D3E[099A]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 31472                                  $P_DCC00:				;AN000;
 31473 00004E55 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 31474 00004E58 7416                    	je	short $P_DCC01		;AN000; if no,
 31475                                  
 31476                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 31477                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 31478                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 31479                                  
 31480 00004E5A 50                      	push	ax			;AN000; get CAPS table thru DOS call
 31481 00004E5B 51                      	push	cx			;AN000;
 31482 00004E5C 52                      	push	dx			;AN000;
 31483 00004E5D 0E                      	push	cs			;AC036; pass current base seg into
 31484                                  					;(Note: this used to push CS. BUG...
 31485 00004E5E 07                      	pop	es			;AN000;   ES reg, required for
 31486                                  					;get extended country information
 31487                                  	; 31/03/2023
 31488 00004E5F B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 31489                                  	;mov	ah,65h
 31490 00004E61 88D0                    	mov	al,dl			;AN000; upper case table
 31491                                  	;mov	bx,-1 ; 0FFFFh
 31492                                  	;mov	cx,5
 31493                                  	;mov	dx,-1
 31494 00004E63 BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 31495 00004E66 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 31496                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31497 00004E69 89DA                    	mov	dx,bx
 31498                                  	;mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 31499                                  					;DI already set to point to buffer
 31500 00004E6B CD21                    	int	21h			;AN000; es:di point to buffer that
 31501                                  					;now has been filled in with info
 31502 00004E6D 5A                      	pop	dx			;AN000;
 31503 00004E6E 59                      	pop	cx			;AN000;
 31504 00004E6F 58                      	pop	ax			;AN000;
 31505                                  
 31506                                  $P_DCC01:				;AN000;
 31507                                  
 31508                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 31509                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 31510                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 31511                                  
 31512                                  	;mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 31513                                  	;;mov	bx,[cs:di+1]		;AN000; get offset of table
 31514                                  	;mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 31515                                  	;;mov	es,[cs:di+3]		;AN000; get segment of table
 31516                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31517                                  	;les	bx,[cs:di+1]
 31518 00004E70 2EC45D01                	les	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 31519                                  	;
 31520 00004E74 43                      	inc	bx			;AC035; add '2' to
 31521 00004E75 43                      	inc	bx			;AC035;  BX reg
 31522                                  					;AN000; skip length field
 31523 00004E76 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 31524                                  	;xlat	es:[bx] 		;AN000; perform case map
 31525                                  	; 31/03/2023
 31526 00004E78 26D7                    	es	xlat
 31527                                  
 31528 00004E7A 5F                      	pop	di			;AN000;
 31529 00004E7B 07                      	pop	es			;AN000;
 31530 00004E7C 5B                      	pop	bx			;AN000;
 31531                                  $P_CAPS_Ret:				;AN000;
 31532 00004E7D C3                      	retn
 31533                                  
 31534                                  ;***********************************************************************
 31535                                  ; $P_Value / $P_SValue
 31536                                  ;
 31537                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 31538                                  ;	     and make result buffer.
 31539                                  ;	     $P_SValue is an entry point for the signed value
 31540                                  ;	     and this will simply call $P_Value after the handling
 31541                                  ;	     of the sign character, "+" or "-"
 31542                                  ;
 31543                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31544                                  ;	     ES:BX -> CONTROL block
 31545                                  ;
 31546                                  ; Output:    None
 31547                                  ;
 31548                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 31549                                  ;
 31550                                  ; Vars: $P_RC(W), $P_Flags(RW)
 31551                                  ;***********************************************************************
 31552                                  
 31553                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31554                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31555                                  $P_SValue:
 31556 00004E7E 50                      	push	ax			;AN000;
 31557                                  	;or	byte [cs:$P_Flags2],80h
 31558 00004E7F 2E800E[4F99]80          	or	byte [cs:$P_Flags2],$P_Signed
 31559                                  					;AC034; indicate a signed numeric
 31560                                  	;and	byte [cs:$P_Flags2],0FDh
 31561 00004E85 2E8026[4F99]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 31562                                  					;AC034; assume positive value
 31563 00004E8B 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 31564 00004E8E 3C2B                    	cmp	al,'+' ; 2Bh
 31565                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 31566 00004E90 740A                    	je	short $P_SVal00		;AN000;
 31567                                  
 31568 00004E92 3C2D                    	cmp	al,'-' ; 2Dh
 31569                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 31570 00004E94 7507                    	jne	short $P_Sval01		;AN000; else
 31571                                  
 31572 00004E96 2E800E[4F99]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 31573                                  					;AC034; set this is negative value
 31574                                  $P_SVal00:				;AN000;
 31575 00004E9C 46                      	inc	si			;AN000; skip sign char
 31576                                  $P_Sval01:				;AN000;
 31577 00004E9D E80200                  	call	$P_Value		;AN000; and process value
 31578 00004EA0 58                      	pop	ax			;AN000;
 31579                                  $P_Check_OVF_ok: ; 11/08/2024
 31580 00004EA1 C3                      	retn				;AN000;
 31581                                  
 31582                                  ;***********************************************************************
 31583                                  
 31584                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31585                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 31586                                  
 31587                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31588                                  	; MSDOS 6.2 COMMAND.COM - TRANGROUP:5119h
 31589                                  
 31590                                  	; 11/08/2024
 31591                                  $P_Value:
 31592 00004EA2 50                      	push	ax			;AN000;
 31593 00004EA3 51                      	push	cx			;AN000;
 31594 00004EA4 52                      	push	dx			;AN000;
 31595 00004EA5 56                      	push	si			;AN000;
 31596 00004EA6 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 31597 00004EA8 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 31598 00004EAA 53                      	push	bx			;AN000; save control pointer
 31599                                  $P_Value_Loop:				;AN000;
 31600 00004EAB 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31601 00004EAE 08C0                    	or	al,al			;AN000; end of line ?
 31602 00004EB0 7436                    	jz	short $P_Value00	;AN000;
 31603                                  
 31604 00004EB2 E8DF00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 31605 00004EB5 722D                    	jc	short $P_Value_Err0	;AN000;
 31606                                  
 31607                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31608                                  %if 0
 31609                                  	xor	ah,ah			;AN000;
 31610                                  	mov	bp,ax			;AN000; save binary number
 31611                                  	shl	dx,1			;AN000; to have 2*x
 31612                                  	rcl	cx,1			;AN000; shift left w/ carry
 31613                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31614                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31615                                  
 31616                                  	mov	bx,dx			;AN000; save low(2*x)
 31617                                  	mov	ax,cx			;AN000; save high(2*x)
 31618                                  	shl	dx,1			;AN000; to have 4*x
 31619                                  	rcl	cx,1			;AN000; shift left w/ carry
 31620                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31621                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31622                                  
 31623                                  	shl	dx,1			;AN000; to have 8*x
 31624                                  	rcl	cx,1			;AN000; shift left w/ carry
 31625                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31626                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31627                                  
 31628                                  	add	dx,bx			;AN000; now have 10*x
 31629                                  	adc	cx,ax			;AN000; 32bit ADD
 31630                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31631                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31632                                  
 31633                                  	add	dx,bp			;AN000; Add the current one degree decimal
 31634                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 31635                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31636                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31637                                  
 31638                                  	inc	si			;AN000; update pointer
 31639                                  	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 31640                                  %else
 31641 00004EB7 30E4                    	xor	ah,ah
 31642 00004EB9 89C5                    	mov	bp,ax			; save binary number
 31643 00004EBB E81C00                  	call	$P_Check_OVF_shl32	; check Overflow (after shl32)
 31644 00004EBE 89D3                    	mov	bx,dx			; save low(2*x)
 31645 00004EC0 89C8                    	mov	ax,cx			; save high(2*x)
 31646 00004EC2 E81500                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 31647 00004EC5 E81200                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 31648 00004EC8 01DA                    	add	dx,bx			; now have 10*x
 31649 00004ECA 11C1                    	adc	cx,ax			; 32bit ADD
 31650 00004ECC E80F00                  	call	$P_Check_OVF_@		; check OverFlow
 31651 00004ECF 01EA                    	add	dx,bp			; Add the current one degree decimal
 31652 00004ED1 83D100                  	adc	cx,0			; if carry, add 1 to high 16bit
 31653 00004ED4 E80700                  	call	$P_Check_OVF_@		; check Overflow
 31654 00004ED7 46                      	inc	si			; update pointer
 31655 00004ED8 EBD1                    	jmp	short $P_Value_Loop	; loop until NULL encountered
 31656                                  
 31657                                  $P_Check_OVF_shl32:
 31658 00004EDA D1E2                    	shl	dx,1
 31659 00004EDC D1D1                    	rcl	cx,1
 31660                                  $P_Check_OVF_@:
 31661 00004EDE E8A100                  	call	$P_Check_OVF
 31662                                  	;jc	short $P_Value_Err0_@
 31663                                  	;retn
 31664                                  	; 11/08/2024
 31665 00004EE1 73BE                    	jnc	short $P_Check_OVF_ok
 31666                                  
 31667                                  $P_Value_Err0_@:
 31668                                  	;inc	sp
 31669                                  	;inc	sp
 31670                                  	; 11/08/2024
 31671 00004EE3 5B                      	pop	bx
 31672                                  %endif
 31673                                  
 31674                                  $P_Value_Err0:				;AN000;
 31675 00004EE4 5B                      	pop	bx			;AN000;
 31676 00004EE5 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 31677                                  
 31678                                  $P_Value00:				;AN000;
 31679 00004EE8 5B                      	pop	bx			;AN000; restore control pointer
 31680 00004EE9 2EF606[4F99]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 31681                                  					;AC034; here cx,dx = 32bit value
 31682 00004EEF 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 31683                                  
 31684 00004EF1 F7D1                    	not	cx			;AN000; +
 31685 00004EF3 F7D2                    	not	dx			;AN000; |- Make 2's complement
 31686 00004EF5 83C201                  	add	dx,1			;AN000; |
 31687 00004EF8 83D100                  	adc	cx,0			;AN000; +
 31688                                  $P_Value01:				;AN000; / nval =0
 31689 00004EFB 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31690                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 31691 00004EFF 268A04                  	mov	al,[es:si]		;AN000; get nval
 31692 00004F02 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 31693 00004F04 7505                    	jne	short $P_Value02	;AN000;
 31694                                  
 31695                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 31696                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 31697                                  	; 31/03/2023
 31698 00004F06 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 31699 00004F09 EB6F                    	jmp	short $P_Value_Exit	;AN000;
 31700                                  
 31701                                  $P_Value02:				;AN000; / nval = 1
 31702 00004F0B 46                      	inc	si			;AN000;
 31703 00004F0C 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 31704 00004F0F 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 31705 00004F11 745D                    	je	short $P_Value03	;AN000; (tm07)
 31706                                  
 31707 00004F13 46                      	inc	si			;AN000; si points to 1st item_tag
 31708                                  $P_Val02_Loop:				;AN000;
 31709 00004F14 2EF606[4F99]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 31710                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 31711 00004F1A 751E                    	jnz	short $P_Val02_Sign	;AN000;
 31712                                  
 31713 00004F1C 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 31714                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 31715 00004F20 723B                    	jb	short $P_Val02_Next	;AN000;
 31716 00004F22 7706                    	ja	short $P_Val_In		;AN000;
 31717                                  
 31718 00004F24 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 31719                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 31720 00004F28 7233                    	jb	short $P_Val02_Next	;AN000;
 31721                                  
 31722                                  $P_Val_In:				;AN000;
 31723 00004F2A 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 31724                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 31725 00004F2E 772D                    	ja	short $P_Val02_Next	;AN000;
 31726 00004F30 7224                    	jb	short $P_Val_Found	;AN000;
 31727                                  
 31728 00004F32 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 31729                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 31730 00004F36 7725                    	ja	short $P_Val02_Next	;AN000;
 31731                                  
 31732 00004F38 EB1C                    	jmp	short $P_Val_Found	;AN000;
 31733                                  
 31734                                  $P_Val02_Sign:				;AN000;
 31735 00004F3A 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 31736                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 31737 00004F3E 7C1D                    	jl	short $P_Val02_Next	;AN000;
 31738 00004F40 7F06                    	jg	short $P_SVal_In	;AN000;
 31739                                  
 31740 00004F42 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 31741                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 31742 00004F46 7C15                    	jl	short $P_Val02_Next	;AN000;
 31743                                  
 31744                                  $P_SVal_In:				;AN000;
 31745 00004F48 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 31746                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 31747 00004F4C 7F0F                    	jg	short $P_Val02_Next	;AN000;
 31748 00004F4E 7C06                    	jl	short $P_Val_Found	;AN000;
 31749                                  
 31750 00004F50 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 31751                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 31752 00004F54 7F07                    	jg	short $P_Val02_Next	;AN000;
 31753                                  
 31754                                  	;jmp	short $P_Val_Found	;AN000;
 31755                                  	; 27/04/2023
 31756                                  $P_Val_Found:				;AN000;
 31757 00004F56 B001                    	mov	al,$P_Number ; 1	;AN000;
 31758 00004F58 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31759 00004F5B EB1D                    	jmp	short $P_Value_Exit	;AN000;
 31760                                  
 31761                                  $P_Val02_Next:				;AN000;
 31762 00004F5D 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 31763 00004F60 FEC8                    	dec	al			;AN000; loop nrng times in AL
 31764 00004F62 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 31765                                  					; / Not found
 31766 00004F64 2EC706[4399]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 31767                                  	;mov	word [cs:$P_RC],6	;AC034;
 31768                                  	
 31769                                  	;mov	al,$P_Number ; 1	;AN000;
 31770                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31771                                  	; 31/03/2023
 31772 00004F6B B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 31773 00004F6E EB0A                    	jmp	short $P_Value_Exit	;AN000;
 31774                                  
 31775                                  	; 27/04/2023
 31776                                  ;$P_Val_Found:				;AN000;
 31777                                  	;mov	al,$P_Number ; 1	;AN000;
 31778                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31779                                  	;jmp	short $P_Value_Exit	;AN000;
 31780                                  
 31781                                  $P_Value03:				;AN000; / nval = 2
 31782                                  $P_Value04:				;AN000; / nval = 3 or else
 31783                                  $P_Value_Err:				;AN000;
 31784 00004F70 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 31785                                  					;AC034;
 31786                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31787                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31788                                  	; 31/03/2023
 31789 00004F77 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31790                                  $P_Value_Exit:				;AN000;
 31791 00004F7A E81AFD                  	call	$P_Fill_Result		;AN000;
 31792 00004F7D 5E                      	pop	si			;AN000;
 31793 00004F7E 5A                      	pop	dx			;AN000;
 31794 00004F7F 59                      	pop	cx			;AN000;
 31795 00004F80 58                      	pop	ax			;AN000;
 31796 00004F81 C3                      	retn				;AN000;
 31797                                  
 31798                                  ;***********************************************************************
 31799                                  ; $P_Check_OVF
 31800                                  ;
 31801                                  ; Function:  Check if overflow is occurred with consideration of
 31802                                  ;	     signed or un-signed numeric value
 31803                                  ;
 31804                                  ; Input:     Flag register
 31805                                  ;
 31806                                  ; Output:    CY = 1  :	Overflow
 31807                                  ;
 31808                                  ; Vars:     $P_Flags(R)
 31809                                  ;***********************************************************************
 31810                                  
 31811                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31812                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31813                                  $P_Check_OVF:
 31814 00004F82 9C                      	pushf				;AN000;
 31815 00004F83 2EF606[4F99]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 31816                                  					;AC034; is it negative value ?
 31817 00004F89 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 31818 00004F8B 9D                      	popf				;AN000; by the CY bit
 31819 00004F8C C3                      	retn				;AN000;
 31820                                  $P_COVF:				;AN000;
 31821 00004F8D 9D                      	popf				;AN000; else,
 31822 00004F8E 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 31823 00004F90 F8                      	clc				;AN000; indicate it with CY bit
 31824 00004F91 C3                      	retn				;AN000; CY=0 means no overflow
 31825                                  $P_0099Err:	; 31/03/2023
 31826                                  $P_COVF00:				;AN000;
 31827 00004F92 F9                      	stc				;AN000; and CY=1 means overflow
 31828                                  $P_0099Err2:	; 31/03/2023
 31829 00004F93 C3                      	retn				;AN000;
 31830                                  
 31831                                  ;***********************************************************************
 31832                                  ; $P_0099;
 31833                                  ;
 31834                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 31835                                  ;
 31836                                  ; Input:     AL = character code
 31837                                  ;
 31838                                  ; Output:    CY = 1 : AL is not number
 31839                                  ;	     CY = 0 : AL contains binary value
 31840                                  ;***********************************************************************
 31841                                  
 31842                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31843                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31844                                  $P_0099:
 31845 00004F94 3C30                    	cmp	al,"0"                  ;AN000;
 31846                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 31847                                  	; 31/03/2023
 31848 00004F96 72FB                    	jb	short $P_0099Err2
 31849                                  
 31850 00004F98 3C39                    	cmp	al,"9"                  ;AN000;
 31851 00004F9A 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 31852                                  
 31853 00004F9C 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 31854                                  	; 31/03/2023
 31855                                  	;clc				;AN000; indicate no error
 31856 00004F9E C3                      	retn				;AN000;
 31857                                  	 ;31/03/2023
 31858                                  ;$P_0099Err:				;AN000;
 31859                                  ;	stc				;AN000; indicate error
 31860                                  ;	retn				;AN000;
 31861                                  
 31862                                  ;***********************************************************************
 31863                                  ; $P_Simple_String
 31864                                  ;
 31865                                  ; Function:  See value list for the simple string
 31866                                  ;	     and make result buffer.
 31867                                  ;
 31868                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31869                                  ;	     ES:BX -> CONTROL block
 31870                                  ;
 31871                                  ; Output:    None
 31872                                  ;
 31873                                  ; Use:	$P_Fill_Result, $P_String_Comp
 31874                                  ;
 31875                                  ; Vars: $P_RC(W)
 31876                                  ;***********************************************************************
 31877                                  
 31878                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31879                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31880                                  $P_Simple_String:
 31881 00004F9F 50                      	push	ax			;AN000;
 31882 00004FA0 53                      	push	bx			;AN000;
 31883 00004FA1 52                      	push	dx			;AN000;
 31884 00004FA2 57                      	push	di			;AN000;
 31885 00004FA3 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31886                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 31887 00004FA7 268A05                  	mov	al,[es:di]		;AN000; get nval
 31888 00004FAA 08C0                    	or	al,al			;AN000; no value list ?
 31889 00004FAC 7502                    	jnz	short $P_Sim00		;AN000; then
 31890                                  	; 31/03/2023
 31891                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31892 00004FAE EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 31893                                  $P_Sim00:				;AN000;
 31894 00004FB0 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 31895 00004FB2 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 31896                                  
 31897 00004FB4 47                      	inc	di			;AN000;
 31898 00004FB5 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 31899 00004FB8 B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 31900 00004FBA F6E4                    	mul	ah			;AN000;  Skip nrng field
 31901 00004FBC 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 31902 00004FBD 01C7                    	add	di,ax			;AN000; di points to nnval
 31903 00004FBF 268A05                  	mov	al,[es:di]		;AN000; get nnval
 31904 00004FC2 B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 31905 00004FC4 F6E4                    	mul	ah			;AN000; Skip nnval field
 31906 00004FC6 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 31907 00004FC7 01C7                    	add	di,ax			;AN000; di points to nstrval
 31908 00004FC9 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 31909 00004FCC 47                      	inc	di			;AC035; add '2' to
 31910 00004FCD 47                      	inc	di			;AC035;  DI reg
 31911                                  					;AN000; di points to 1st string in list
 31912                                  $P_Sim_Loop:				;AN000;
 31913 00004FCE 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 31914 00004FD1 E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 31915 00004FD4 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 31916                                  
 31917 00004FD6 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 31918 00004FD9 FEC8                    	dec	al			;AN000; loop nstval times in AL
 31919 00004FDB 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 31920                                  					;AN000; / Not found
 31921 00004FDD 2EC706[4399]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 31922                                  	;mov	[cs:$P_RC],8		;AC034;
 31923                                  	; 31/03/2023
 31924                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31925 00004FE4 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 31926                                  $P_Sim_Found:				;AN000;
 31927 00004FE6 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 31928 00004FEA B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 31929 00004FEC 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 31930 00004FEF EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 31931                                  $P_Sim01:				;AN000;
 31932 00004FF1 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31933                                  	;mov	word [cs:$P_RC],9	;AC034;
 31934                                  $P_Sim_Exit:
 31935                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31936                                  ;$P_Sim_Exit:				;AN000;
 31937                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31938                                  	; 31/03/2023
 31939 00004FF8 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31940                                  $P_Sim_Exit0:				;AN000;
 31941 00004FFB E899FC                  	call	$P_Fill_Result		;AN000;
 31942 00004FFE 5F                      	pop	di			;AN000;
 31943 00004FFF 5A                      	pop	dx			;AN000;
 31944 00005000 5B                      	pop	bx			;AN000;
 31945 00005001 58                      	pop	ax			;AN000;
 31946 00005002 C3                      	retn				;AN000;
 31947                                  
 31948                                  ;***********************************************************************
 31949                                  ; $P_String_Comp:
 31950                                  ;
 31951                                  ; Function:  Compare two string
 31952                                  ;
 31953                                  ; Input:     psdata_seg:SI -> 1st string
 31954                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 31955                                  ;	     ES:BX -> CONTROL block
 31956                                  ;
 31957                                  ; Output:    CY = 1 if not match
 31958                                  ;
 31959                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 31960                                  ;
 31961                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 31962                                  ;***********************************************************************
 31963                                  
 31964                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31965                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31966                                  $P_String_Comp:
 31967 00005003 50                      	push	ax			;AN000;
 31968 00005004 55                      	push	bp			;AN000;
 31969 00005005 52                      	push	dx			;AN000;
 31970 00005006 56                      	push	si			;AN000;
 31971 00005007 B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 31972                                  $P_SCOM_Loop:				;AN000;
 31973 00005009 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 31974 0000500C E89A04                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 31975 0000500F 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 31976                                  
 31977 00005011 E822FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 31978                                  	
 31979 00005014 2EF606[4F99]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 31980                                  					;AC034; keyword search ?
 31981 0000501A 740D                    	jz	short $P_SCOM04		;AN000;
 31982                                  
 31983                                  	;cmp	al,'=' ; 3Dh
 31984 0000501C 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 31985 0000501E 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 31986                                  
 31987 00005020 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 31988 00005025 7562                    	jne	short $P_SCOM_Differ	;AN021;
 31989                                  
 31990 00005027 EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 31991                                  
 31992                                  $P_SCOM04:				;AN000;
 31993 00005029 2EF606[4F99]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h 
 31994                                  					;AC034; switch search ?
 31995 0000502F 740E                    	jz	short $P_SCOM03		;AN000;
 31996                                  
 31997 00005031 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 31998 00005033 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 31999                                  
 32000 00005035 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 32001 0000503A 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 32002                                  
 32003                                  $P_SCOM05:				;AN000;   found a match
 32004 0000503C 46                      	inc	si			;AN000; si points to just after "=" or ":"
 32005 0000503D EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 32006                                  
 32007                                  $P_SCOM03:				;AN000;
 32008 0000503F 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 32009 00005043 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 32010                                  
 32011 00005045 08C0                    	or	al,al			;AN000; end of line
 32012 00005047 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 32013                                  
 32014 00005049 46                      	inc	si			;AN000; update operand pointer
 32015 0000504A 45                      	inc	bp			;AN000;    and synonym pointer
 32016 0000504B EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 32017                                  
 32018                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 32019 0000504D 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 32020 00005051 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 32021                                  
 32022 00005053 46                      	inc	si			;AN000; else, load next byte
 32023 00005054 2E8A04                  	mov	al,[cs:si]		;AN000; and
 32024 00005057 45                      	inc	bp			;AN000;
 32025 00005058 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 32026 0000505C 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 32027                                  
 32028 0000505E 46                      	inc	si			;AN000; else update operand pointer
 32029 0000505F 45                      	inc	bp			;AN000; 	and synonym pointer
 32030                                  $P_SCOM01:				;AN000;
 32031 00005060 EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 32032                                  
 32033                                  $P_SCOM_Differ0:			;AN000;
 32034 00005062 2EF606[4F99]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h
 32035                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 32036 00005068 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 32037                                  
 32038                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 32039                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 32040                                  	; 03/04/2023
 32041 0000506A 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 32042 0000506F 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 32043                                  
 32044 00005071 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 32045 00005076 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 32046                                  
 32047                                  $P_not_applicable:			;AN000;(tm10)
 32048                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32049                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 32050                                  	; 03/04/2023
 32051 00005078 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32052 0000507C 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 32053                                  
 32054 0000507E 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 32055 00005080 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 32056                                  
 32057 00005082 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 32058                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 32059                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 32060                                  	; 01/04/2023
 32061 00005087 740E                    	je	short $P_SCOM_Same
 32062                                  $P_SCOM_Differ:
 32063 00005089 F9                      	stc
 32064 0000508A EB10                    	jmp	short $P_SCOM_Exit
 32065                                  
 32066                                  $P_SCOM02:				;AN000;
 32067 0000508C 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 32068 0000508E 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 32069                                  
 32070                                  	;cmp	byte [es:bp],':'
 32071 00005090 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 32072                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 32073                                  	; 01/04/2023
 32074 00005095 75F2                    	jne	short $P_SCOM_Differ
 32075                                  ;$P_SCOM_Differ: 			;AN000;
 32076                                  	;stc				;AN000; indicate not found
 32077                                  	;jmp	short $P_SCOM_Exit	;AN000;
 32078                                  
 32079                                  $P_SCOM_Same:				;AN000;
 32080 00005097 2E8936[5299]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 32081                                  	; 01/04/2023
 32082                                  	;clc
 32083                                  	; cf = 0			;AN000; indicate found
 32084                                  $P_SCOM_Exit:				;AN000;
 32085 0000509C 5E                      	pop	si			;AN000;
 32086 0000509D 5A                      	pop	dx			;AN000;
 32087 0000509E 5D                      	pop	bp			;AN000;
 32088 0000509F 58                      	pop	ax			;AN000;
 32089 000050A0 C3                      	retn				;AN000;
 32090                                  
 32091                                  ;***********************************************************************
 32092                                  ; $P_Date_Format
 32093                                  ;
 32094                                  ; Function:  Convert a date string to DOS date format for int 21h
 32095                                  ;	     with format validation.
 32096                                  ;
 32097                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32098                                  ;	     ES:BX -> CONTROL block
 32099                                  ;
 32100                                  ; Output:    None
 32101                                  ;
 32102                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 32103                                  ;
 32104                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 32105                                  ;***********************************************************************
 32106                                  
 32107                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32108                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32109                                  	; 11/08/2024
 32110                                  $P_Date_Format:
 32111 000050A1 50                      	push	ax			;AN000;
 32112 000050A2 51                      	push	cx			;AN000;
 32113 000050A3 52                      	push	dx			;AN000;
 32114 000050A4 56                      	push	si			;AN000;
 32115 000050A5 53                      	push	bx			;AN000;
 32116 000050A6 56                      	push	si			;AN000;
 32117 000050A7 E8A400                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 32118                                  	; 03/04/2023
 32119                                  	;pop	si			;AN000;
 32120                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 32121                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 32122                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 32123 000050AA 31F6                    	xor	si,si
 32124 000050AC 2E8936[019A]            	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 32125 000050B1 2E8936[039A]            	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 32126                                  	; 11/08/2024
 32127 000050B6 2E8936[059A]            	mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 32128 000050BB 5E                      	pop	si
 32129 000050BC E8A900                  	call	$P_Get_DecNum		;AN000; get 1st number
 32130                                  	;jc	short $P_DateF_Err0	;AN000;-----------------------+
 32131                                  	; 11/08/2024
 32132 000050BF 727A                    	jc	short $P_DateF_Error
 32133 000050C1 2EA3[019A]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 32134 000050C5 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 32135 000050C7 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 32136 000050C9 E89C00                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 32137 000050CC 726D                    	jc	short $P_DateF_Error	;AN000; 		      |
 32138 000050CE 2EA3[039A]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 32139 000050D2 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 32140 000050D4 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 32141 000050D6 E88F00                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 32142                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 32143 000050D9 7260                    	jc	short $P_DateF_Error	;AN000;
 32144 000050DB 2EA3[059A]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 32145 000050DF 08DB                    	or	bl,bl			;AN000; end of line ?
 32146 000050E1 7558                    	jnz	short $P_DateF_Error	;AN000;
 32147                                  $P_DateF_YMD:				;AN000;
 32148 000050E3 2E8B1E[DF99]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 32149                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 32150 000050E8 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 32151 000050EB 7422                    	je	short $P_DateF00	;AN000;
 32152 000050ED 2EA1[019A]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 32153 000050F1 08E4                    	or	ah,ah			;AN000;
 32154 000050F3 7546                    	jnz	short $P_DateF_Error	;AN000;
 32155 000050F5 88C1                    	mov	cl,al			;AN000; set month
 32156 000050F7 2EA1[039A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32157 000050FB 08E4                    	or	ah,ah			;AN000; if overflow, error.
 32158 000050FD 753C                    	jnz	short $P_DateF_Error	;AN000;
 32159 000050FF 88C5                    	mov	ch,al			;AN000; set date
 32160 00005101 2E8B16[059A]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 32161 00005106 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 32162 00005109 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 32163 0000510B 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 32164                                  $P_DateF01:				;AN000;
 32165 0000510D EB19                    	jmp	short $P_DateF02	;AN000;
 32166                                  $P_DateF00:				;AN000; / here format = YMD
 32167 0000510F 2E8B16[019A]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 32168 00005114 2EA1[039A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32169 00005118 08E4                    	or	ah,ah			;AN000; if overflow, error
 32170 0000511A 751F                    	jnz	short $P_DateF_Error	;AN000;
 32171                                  
 32172 0000511C 88C1                    	mov	cl,al			;AN000; set month
 32173 0000511E 2EA1[059A]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 32174 00005122 08E4                    	or	ah,ah			;AN000; if overflow, error
 32175 00005124 7515                    	jnz	short $P_DateF_Error	;AN000;
 32176 00005126 88C5                    	mov	ch,al			;AN000; set date
 32177                                  $P_DateF02:				;AN000;
 32178 00005128 83FA64                  	cmp	dx,100			;AN000; year is less that 100 ?
 32179 0000512B 7304                    	jae	short $P_DateF03	;AN000;
 32180 0000512D 81C26C07                	add	dx,1900 		;AN000; set year 19xx
 32181                                  $P_DateF03:				;AN000;
 32182 00005131 5B                      	pop	bx			;AN000; recover CONTROL block
 32183 00005132 5E                      	pop	si			;AN000; recover string pointer
 32184                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32185                                  	;mov	al,$P_Date_F ; 7	;AN000;   result
 32186                                  	; 03/04/2023
 32187 00005133 B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 32188 00005136 E85EFB                  	call	$P_Fill_Result		;AN000;        buffer
 32189 00005139 EB0F                    	jmp	short $P_Date_Format_Exit
 32190                                  					;AN000;	to Date
 32191                                  $P_DateF_Error: 			;AN000;
 32192 0000513B 5B                      	pop	bx			;AN000; recover CONTROL block
 32193 0000513C 5E                      	pop	si			;AN000; recover string pointer
 32194                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32195                                  	;mov	al,$P_String ; 3	;AN000;   result
 32196                                  	; 03/04/2023
 32197 0000513D B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32198 00005140 E854FB                  	call	$P_Fill_Result		;AN000; 	buffer
 32199                                  					;AN000; to string
 32200 00005143 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 32201                                  					;AC034; indicate syntax error
 32202                                  $P_Date_Format_Exit:			;AN000;
 32203 0000514A 5A                      	pop	dx			;AN000;
 32204 0000514B 59                      	pop	cx			;AN000;
 32205 0000514C 58                      	pop	ax			;AN000;
 32206 0000514D C3                      	retn				;AN000;
 32207                                  
 32208                                  ;***********************************************************************
 32209                                  ; $P_Set_CDI:
 32210                                  ;
 32211                                  ; Function: Read CDI from DOS if it has not been read yet
 32212                                  ;
 32213                                  ; Input:    None
 32214                                  ;
 32215                                  ; Output:   psdata_seg:SI -> CDI
 32216                                  ;
 32217                                  ; Use:	INT 21h w/ AH = 38h
 32218                                  ;***********************************************************************
 32219                                  
 32220                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32221                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32222                                  $P_Set_CDI:
 32223                                  	; 18/04/2023
 32224 0000514E 8D36[DF99]              	lea	si,$P_Country_Info	;AC034;
 32225                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 32226 00005152 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 32227                                  					;AN000; already read ?
 32228                                  	;je	short $P_Read_CDI	;AN000;
 32229                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 32230                                  	; 03/04/2023
 32231 00005156 750F                    	jne	short $P_Set_CDI_Exit
 32232                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 32233 00005158 1E                      	push	ds			;AN000;
 32234 00005159 52                      	push	dx			;AN000;
 32235 0000515A 50                      	push	ax			;AN000;
 32236 0000515B 0E                      	push	cs			;AC023;
 32237 0000515C 1F                      	pop	ds			;AN000; set segment register
 32238                                  	;mov	ax,3800h
 32239 0000515D B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 32240 00005160 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 32241 00005162 CD21                    	int	21h			;AN000;
 32242 00005164 58                      	pop	ax			;AN000;
 32243 00005165 5A                      	pop	dx			;AN000;
 32244 00005166 1F                      	pop	ds			;AN000;
 32245                                  $P_Set_CDI_Exit:			;AN000;
 32246 00005167 C3                      	retn				;AN000;
 32247                                  
 32248                                  ;***********************************************************************
 32249                                  ; $P_Get_DecNum:
 32250                                  ;
 32251                                  ; Function:  Read a character code from psdata_seg:SI until specified delimiter
 32252                                  ;	     or NULL encountered. And make a decimal number.
 32253                                  ;
 32254                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32255                                  ;
 32256                                  ; Output:    BL = delimiter code or NULL
 32257                                  ;	     AX = Decimal number
 32258                                  ;	     SI advanced to the next number
 32259                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 32260                                  ;
 32261                                  ; Use:	$P_0099
 32262                                  ;***********************************************************************
 32263                                  
 32264                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32265                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32266                                  $P_Get_DecNum:
 32267 00005168 51                      	push	cx			;AN000;
 32268 00005169 52                      	push	dx			;AN000;
 32269 0000516A 31C9                    	xor	cx,cx			;AN000; cx will have final value
 32270                                  $P_GetNum_Loop: 			;AN000;
 32271 0000516C 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32272 0000516F 08C0                    	or	al,al			;AN000; end of line ?
 32273 00005171 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 32274 00005173 2E803E[DE99]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 32275 00005179 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 32276                                  
 32277                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 32278                                  	;cmp	bl,$P_colon_period
 32279 0000517B 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 32280 0000517E 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 32281                                  
 32282 00005180 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 32283 00005182 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 32284                                  
 32285                                  	; 03/04/2023
 32286 00005184 EB08                    	jmp	short $P_Do_Time_Delim1
 32287                                  ;$P_Do_Time_Delim1:			;AN000;
 32288                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 32289                                  	;je	short $P_GetNum01	;AC023; yes, exit
 32290                                  	;
 32291                                  	;jmp	short $P_Neither_Delims ;AN023;
 32292                                  
 32293                                  $P_Do_Date_Delims:			;AN000;
 32294                                  ;Regardless of the date delimiter character specified in the country
 32295                                  ;dependent information, check for the presence of any one of these
 32296                                  ;three field delimiters: "-", "/", or ".".
 32297 00005186 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 32298 00005188 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 32299                                  
 32300 0000518A 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 32301 0000518C 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 32302                                  
 32303                                  $P_Do_Time_Delim1:  ; 03/04/2023
 32304 0000518E 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 32305 00005190 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 32306                                  
 32307                                  $P_Neither_Delims:			;AN023;
 32308 00005192 E8FFFD                  	call	$P_0099 		;AN000; convert it to binary
 32309 00005195 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 32310                                  
 32311 00005197 B400                    	mov	ah,0			;AN000;
 32312 00005199 91                      	xchg	ax,cx			;AN000;
 32313 0000519A BA0A00                  	mov	dx,10			;AN000;
 32314 0000519D F7E2                    	mul	dx			;AN000; ax = ax * 10
 32315 0000519F 09D2                    	or	dx,dx			;AN000; overflow
 32316 000051A1 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 32317                                  
 32318 000051A3 01C8                    	add	ax,cx			;AN000;
 32319 000051A5 720C                    	jc	short $P_GetNum_Exit	;AN000;
 32320                                  
 32321 000051A7 91                      	xchg	ax,cx			;AN000;
 32322 000051A8 46                      	inc	si			;AN000;
 32323 000051A9 EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 32324                                  
 32325                                  $P_GetNum00:				;AN000;
 32326 000051AB 88C3                    	mov	bl,al			;AN000; set bl to NULL
 32327                                  	;03/04/2023
 32328                                  	; cf=0
 32329                                  	;clc				;AN000; indicate no error
 32330 000051AD EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 32331                                  
 32332                                  $P_GetNum01:				;AN000;
 32333 000051AF 46                      	inc	si			;AN000; si points to next number
 32334                                  	;03/04/2023
 32335                                  	; cf=0
 32336                                  	;clc				;AN000; indicate no error
 32337 000051B0 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 32338                                  
 32339                                  $P_GetNum02:				;AN000;
 32340 000051B2 F9                      	stc				;AN000; indicate error
 32341                                  $P_GetNum_Exit: 			;AN000;
 32342 000051B3 89C8                    	mov	ax,cx			;AN000;return value
 32343 000051B5 5A                      	pop	dx			;AN000;
 32344 000051B6 59                      	pop	cx			;AN000;
 32345 000051B7 C3                      	retn				;AN000;
 32346                                  
 32347                                  ;***********************************************************************
 32348                                  ; $P_Time_Format
 32349                                  ;
 32350                                  ; Function:  Convert a time string to DOS time format for int 21h
 32351                                  ;	     with format validation.
 32352                                  ;
 32353                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32354                                  ;	     ES:BX -> CONTROL block
 32355                                  ;
 32356                                  ; Output:    None
 32357                                  ;
 32358                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 32359                                  ;
 32360                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 32361                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 32362                                  ;***********************************************************************
 32363                                  
 32364                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32365                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32366                                  	; 12/08/2024
 32367                                  $P_Time_Format:				;AN000;
 32368 000051B8 50                      	push	ax			;AN000;
 32369 000051B9 51                      	push	cx			;AN000;
 32370 000051BA 52                      	push	dx			;AN000;
 32371 000051BB 56                      	push	si			;AN000;
 32372 000051BC 53                      	push	bx			;AN000;
 32373 000051BD 56                      	push	si			;AN000;
 32374 000051BE E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 32375                                  					; information before process
 32376                                  	;test	byte [cs:si+11h], 1
 32377 000051C1 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 32378                                  					;AN000; 24 hour system
 32379 000051C6 5E                      	pop	si			;AN000;
 32380 000051C7 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 32381 000051C9 E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 32382                                  $P_TimeF00:				;AN000;
 32383                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 32384                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 32385                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 32386                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 32387                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 32388                                  	; 03/04/2023
 32389 000051CC 31DB                    	xor	bx,bx
 32390 000051CE 2E891E[019A]            	mov	[cs:$P_1st_Val],bx ; 0
 32391 000051D3 2E891E[039A]            	mov	[cs:$P_2nd_Val],bx ; 0
 32392 000051D8 2E891E[059A]            	mov	[cs:$P_3rd_Val],bx ; 0
 32393 000051DD 2E891E[079A]            	mov	[cs:$P_4th_Val],bx ; 0
 32394                                  	;inc	bl
 32395                                  	;mov	[cs:$P_Got_Time],bl ; 1
 32396                                  
 32397                                  	;mov	bl,$P_colon_period
 32398                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 32399                                  					; delimiters between hours,
 32400                                  					;  minutes,seconds
 32401                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 32402 000051E2 FEC3                    	inc	bl ; bl = 1
 32403 000051E4 2E881E[DE99]            	mov	[cs:$P_Got_Time],bl ; 1
 32404                                  	;
 32405 000051E9 E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 32406                                  	;jc	short $P_TimeF_Err0	;AN000;
 32407                                  	; 12/08/2024
 32408 000051EC 725A                    	jc	short $P_TimeF_Error
 32409 000051EE 2EA3[019A]              	mov	[cs:$P_1st_Val],ax	;AC034;
 32410 000051F2 08DB                    	or	bl,bl			;AN000; end of line ?
 32411 000051F4 7478                    	jz	short $P_TimeF_Rlt	;AN000;
 32412 000051F6 E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 32413                                  	;jc	short $P_TimeF_Err0	;AC038; if OK
 32414                                  	; 12/08/2024
 32415 000051F9 724D                    	jc	short $P_TimeF_Error
 32416 000051FB 2EA3[039A]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 32417 000051FF 08DB                    	or	bl,bl			;AN000; end of line ?
 32418 00005201 746B                    	jz	short $P_TimeF_Rlt	;AN000;
 32419 00005203 B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 32420 00005205 E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 32421                                  	;jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 32422                                  	; 12/08/2024
 32423 00005208 723E                    	jc	short $P_TimeF_Error
 32424 0000520A 2EA3[059A]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 32425 0000520E 08DB                    	or	bl,bl			;AN000; end of line ?
 32426 00005210 754F                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 32427                                  					;AN039;   GO TO 4TH NUMBER
 32428                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 32429 00005212 2EF606[4E99]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 32430                                  					;AN039;    BEEN REPEATED?
 32431 00005218 7554                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 32432                                  					;AN039;   the end of line
 32433                                  					;AN039; no, time has not been repeated
 32434 0000521A 2E8B36[4599]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 32435                                  					;AN039;   in command line
 32436 0000521F 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 32437                                  					;AN039; look at delimiter
 32438                                  					;AN039;   from command line
 32439 00005223 7549                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 32440                                  					;AN039;  really end of line
 32441                                  					;AN039; is comma before hundredths,
 32442                                  					;AN039;   redo TIME
 32443 00005225 C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 32444                                  					;AN039; change that ambiguous
 32445                                  					;AN039;    comma to a decimal point
 32446                                  					;AN039;     parse can understand
 32447 00005229 2EC706[4E99]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 32448                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 32449 00005230 2E800E[4E99]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 32450                                  					;AN039; is being repeated
 32451 00005236 2E8B0E[D899]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 32452 0000523B 2E8B26[DA99]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 32453                                  					;AN039;   OF STACK FROM SP
 32454 00005240 2E8B36[DC99]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 32455                                  					;AN039;   PARSE POINTER FROM SI
 32456 00005245 E927F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 32457                                  
 32458                                  	; 12/08/2024
 32459                                  $P_TimeF_Error: 			;AN000;
 32460                                  $P_TimeF_Err:				;AN000;
 32461 00005248 5B                      	pop	bx			;AN000; recover CONTROL block
 32462 00005249 5E                      	pop	si			;AN000; recover string pointer
 32463                                  	;mov	ah,$P_No_Tag		;AN000; set
 32464                                  	;mov	al,$P_String		;AN000;     result
 32465                                  	; 03/04/2023
 32466 0000524A B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32467 0000524D E847FA                  	call	$P_Fill_Result		;AN000; 	  buffer
 32468                                  					;AN000; to string
 32469 00005250 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 32470                                  					;AC034; return syntax error
 32471                                  $P_Time_Format_Exit:			;AN000;
 32472 00005257 2EC606[DE99]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 32473 0000525D 5A                      	pop	dx			;AN000;
 32474 0000525E 59                      	pop	cx			;AN000;
 32475 0000525F 58                      	pop	ax			;AN000;
 32476 00005260 C3                      	retn
 32477                                  
 32478                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 32479 00005261 E804FF                  	call	$P_Get_DecNum		;AN000; get 4th number
 32480                                  $P_TimeF_Err0:				;AN000; Bridge
 32481 00005264 72E2                    	jc	short $P_TimeF_Error	;AN000;
 32482                                  	;
 32483 00005266 2EA3[079A]              	mov	[cs:$P_4th_Val],ax	;AC034;
 32484 0000526A 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 32485 0000526C 75DA                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 32486                                  $P_TimeF_Rlt:				;AN000;
 32487 0000526E 2EA1[019A]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 32488 00005272 08E4                    	or	ah,ah			;AN000; if overflow then error
 32489 00005274 75D2                    	jnz	short $P_TimeF_Err	;AN000;
 32490                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 32491 00005276 2EF606[4E99]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 32492 0000527C 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 32493                                  					;since "AM" was specified,
 32494 0000527E 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 32495 00005280 77C6                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 32496 00005282 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 32497 00005284 30C0                    	xor	al,al			;AN038; set hour = zero
 32498                                  $P_Time_notAM:				;AN038;
 32499                                  	;test	byte [cs:$P_Flags2],$P_Time12
 32500 00005286 2EF606[4F99]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 32501 0000528C 740C                    	jz	short $P_TimeSkip00	;AN000; then
 32502 0000528E 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 32503 00005290 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 32504 00005292 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 32505 00005294 72B2                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 32506 00005296 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 32507 00005298 77AE                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 32508                                  $P_TimeSkip00:				;AN000;
 32509 0000529A 88C2                    	mov	dl,al			;AN000; set hour
 32510 0000529C 2EA1[039A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32511 000052A0 08E4                    	or	ah,ah			;AN000; if overflow then error
 32512 000052A2 75A4                    	jnz	short $P_TimeF_Err	;AN000;
 32513 000052A4 88C6                    	mov	dh,al			;AN000; set minute
 32514 000052A6 2EA1[059A]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 32515 000052AA 08E4                    	or	ah,ah			;AN000; if overflow then error
 32516 000052AC 759A                    	jnz	short $P_TimeF_Err	;AN000;
 32517 000052AE 88C1                    	mov	cl,al			;AN000; set second
 32518 000052B0 2EA1[079A]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 32519 000052B4 08E4                    	or	ah,ah			;AN000; if overflow then error
 32520 000052B6 7590                    	jnz	short $P_TimeF_Err	;AN000;
 32521 000052B8 88C5                    	mov	ch,al			;AN000; set hundredth
 32522 000052BA 5B                      	pop	bx			;AN000; recover CONTROL block
 32523 000052BB 5E                      	pop	si			;AN000; recover string pointer
 32524                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32525                                  	;mov	al,$P_Time_F ; 8 	;AN000;   result
 32526                                  	; 03/04/2023
 32527 000052BC B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 32528 000052BF E8D5F9                  	call	$P_Fill_Result		;AN000;        buffer
 32529 000052C2 EB93                    	jmp	short $P_Time_Format_Exit
 32530                                  					;AN000; to time
 32531                                  
 32532                                  ;***********************************************************************
 32533                                  ; $P_Time_2412:
 32534                                  ;
 32535                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 32536                                  ;
 32537                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32538                                  ;
 32539                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 32540                                  ;	     or "pm"
 32541                                  ;
 32542                                  ; Vars:  $P_Flags(W)
 32543                                  ;***********************************************************************
 32544                                  
 32545                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32546                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32547                                  $P_Time_2412:				;AN000;
 32548 000052C4 50                      	push	ax			;AN000;
 32549 000052C5 56                      	push	si			;AN000;
 32550                                  $P_T12_Loop:				;AN000;
 32551 000052C6 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 32552 000052C9 46                      	inc	si			;AN000;     si
 32553 000052CA 08C0                    	or	al,al			;AN000;       to
 32554 000052CC 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 32555                                  
 32556 000052CE 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 32557                                  	;or	al,20h
 32558 000052D2 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 32559 000052D4 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 32560 000052D6 7425                    	je	short $P_T1200		;AN000;
 32561                                  
 32562 000052D8 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 32563 000052DA 7413                    	je	short $P_T1201		;AN000;
 32564                                  
 32565 000052DC 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 32566 000052DE 751A                    	jne	short $P_T12_Exit	;AN000;
 32567                                  
 32568 000052E0 4E                      	dec	si			;AN000;
 32569 000052E1 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 32570                                  	;or	al,20h
 32571 000052E5 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 32572 000052E7 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 32573 000052E9 7412                    	je	short $P_T1200		;AN000;
 32574                                  
 32575 000052EB 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 32576                                  	;je	short $P_T1201		;AN000; go process "a"
 32577                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 32578                                  	; 05/04/2023
 32579 000052ED 750B                    	jne	short $P_T12_Exit
 32580                                  
 32581                                  ;$P_T1200:				;AN000; "P" found
 32582                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 32583                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 32584                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 32585                                  
 32586                                  $P_T1201:				;AN000; "A" found
 32587                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 32588 000052EF 2E800E[4E99]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 32589                                  $P_Tclr_chr:				;AN038;
 32590 000052F5 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 32591                                  $P_T12_Exit:				;AN000;
 32592 000052FA 5E                      	pop	si			;AN000;
 32593 000052FB 58                      	pop	ax			;AN000;
 32594 000052FC C3                      	retn				;AN000;
 32595                                  
 32596                                  	; 05/04/2023
 32597                                  $P_T1200:				;AN000; "P" found
 32598                                  	;or	byte [cs:$P_Flags2],$P_Time12
 32599 000052FD 2E800E[4F99]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 32600 00005303 EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 32601                                  
 32602                                  ;***********************************************************************
 32603                                  ; $P_File_Format;
 32604                                  ;
 32605                                  ; Function:  Check if the input string is valid file spec format.
 32606                                  ;	     And set the result buffer.
 32607                                  ;
 32608                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32609                                  ;	     ES:BX -> CONTROL block
 32610                                  ;
 32611                                  ; Output:    None
 32612                                  ;
 32613                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 32614                                  ;
 32615                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 32616                                  ;	$P_SaveSI_Cmpx(R)
 32617                                  ;***********************************************************************
 32618                                  
 32619                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32620                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 32621                                  
 32622                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32623                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:55B4h
 32624                                  $P_File_Format:
 32625 00005305 50                      	push	ax			;AN000;
 32626 00005306 57                      	push	di			;AN000;
 32627 00005307 56                      	push	si			;AN000;
 32628 00005308 2E8B3E[5099]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 32629 0000530D 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32630 00005310 08C0                    	or	al,al			;AN000; end of line ?
 32631 00005312 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 32632 00005314 E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 32633 00005317 7523                    	jne	short $P_FileF03	;AN000; if yes,
 32634 00005319 2EC606[1C9A]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 32635                                  					;AN033;AC034;; set error flag- bad char.
 32636 0000531F 5E                      	pop	si			;AN033;
 32637 00005320 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 32638 00005324 5F                      	pop	di			;AN033;
 32639 00005325 EB3E                    	jmp	short $P_FileF02	;AN033;
 32640                                  $P_FileF_Err:				;AN000;
 32641 00005327 5E                      	pop	si			;AN000;
 32642 00005328 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 32643 0000532C 5F                      	pop	di			;AN000;
 32644                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 32645                                  	;test	word [es:bx],1		;AN000; is it optional ?
 32646 0000532D 26F60701                	test	byte [es:bx],$P_Optional ; 1
 32647 00005331 7532                    	jnz	short $P_FileF02	;AN000;
 32648 00005333 2EC706[4399]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 32649                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 32650 0000533A EB29                    	jmp	short $P_FileF02	;AN000;
 32651                                  $P_FileF03:				;AN000;
 32652 0000533C 58                      	pop	ax			;AN000; discard save si
 32653 0000533D 56                      	push	si			;AN000; save new si
 32654                                  $P_FileF_Loop1: 			;AN000;
 32655 0000533E 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 32656 00005341 08C0                    	or	al,al			;AN000; end of line ?
 32657 00005343 741E                    	jz	short $P_FileF_RLT	;AN000;
 32658 00005345 E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 32659 00005348 740B                    	jz	short $P_FileF00	;AN000;
 32660 0000534A E85C01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 32661 0000534D 7302                    	jnc	short $P_FileF01	;AN000;
 32662 0000534F 47                      	inc	di			;AN000; if yes, skip next byte
 32663 00005350 46                      	inc	si			;AN000;
 32664                                  $P_FileF01:				;AN000;
 32665 00005351 47                      	inc	di			;AN000;
 32666 00005352 46                      	inc	si			;AN000;
 32667 00005353 EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 32668                                  $P_FileF00:				;AN000;
 32669 00005355 2EA2[4999]              	mov	[cs:$P_Terminator],al	;AC034;
 32670 00005359 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 32671 0000535D 47                      	inc	di			;AN000;
 32672 0000535E 2E893E[4599]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 32673                                  $P_FileF_RLT:				;AN000;
 32674 00005363 5E                      	pop	si			;AN000;
 32675 00005364 5F                      	pop	di			;AN000;
 32676                                  $P_FileF02:				;AN000;
 32677 00005365 58                      	pop	ax			;AN000; (tm14)
 32678                                  	;;test	ax,200h
 32679                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 32680                                  	; 05/04/2023
 32681 00005366 F6C402                  	test	ah,($P_File_Spc>>8)
 32682 00005369 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 32683 0000536B 50                      	push	ax			;AN000; (tm14)
 32684                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32685                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 32686                                  	; 05/04/2023
 32687 0000536C B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 32688 0000536F E825F9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 32689 00005372 58                      	pop	ax			;AN000;
 32690                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 32691 00005373 C3                      	retn				;AN000;
 32692                                  
 32693                                  ;***********************************************************************
 32694                                  ; $P_FileSp_Chk
 32695                                  ;
 32696                                  ; Function:  Check if the input byte is one of file special characters
 32697                                  ;
 32698                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32699                                  ;	     AL = character code to be examineed
 32700                                  ;
 32701                                  ; Output:    ZF = 1 , AL is one of special characters
 32702                                  ;***********************************************************************
 32703                                  
 32704                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32705                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32706                                  $P_FileSp_Chk:
 32707 00005374 53                      	push	bx			;AN000;
 32708 00005375 51                      	push	cx			;AN000;
 32709                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 32710 00005376 8D1E[139A]              	lea	bx,$P_FileSp_Char ; '[]|<>+=;"'
 32711 0000537A B90900                  	mov	cx,$P_FileSp_Len ; 9
 32712                                  	;mov	cx,9			;AN000; load length of it
 32713                                  $P_FileSp_Loop: 			;AN000;
 32714 0000537D 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 32715 00005380 7404                    	je	short $P_FileSp_Exit	;AN000;
 32716 00005382 43                      	inc	bx			;AN000;
 32717 00005383 E2F8                    	loop	$P_FileSp_Loop		;AN000;
 32718 00005385 41                      	inc	cx			;AN000; reset ZF
 32719                                  $P_FileSp_Exit: 			;AN000;
 32720 00005386 59                      	pop	cx			;AN000;
 32721 00005387 5B                      	pop	bx			;AN000;
 32722 00005388 C3                      	retn				;AN000;
 32723                                  
 32724                                  ;***********************************************************************
 32725                                  ; $P_Drive_Format;
 32726                                  ;
 32727                                  ; Function:  Check if the input string is valid drive only format.
 32728                                  ;	     And set the result buffer.
 32729                                  ;
 32730                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32731                                  ;	     ES:BX -> CONTROL block
 32732                                  ;
 32733                                  ; Output:    None
 32734                                  ;
 32735                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 32736                                  ;
 32737                                  ; Vars: $P_RC(W)
 32738                                  ;***********************************************************************
 32739                                  
 32740                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32741                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32742                                  $P_Drive_Format:
 32743 00005389 50                      	push	ax			;AN000;
 32744 0000538A 52                      	push	dx			;AN000;
 32745 0000538B 2E8A04                  	mov	al,[cs:si]		;AN000;
 32746 0000538E 08C0                    	or	al,al			;AN000; if null string
 32747 00005390 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 32748 00005392 E81401                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 32749 00005395 722A                    	jc	short $P_Drv_Err	;AN000;
 32750                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 32751 00005397 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 32752 0000539C 740D                    	je	short $P_DrvF00		;AN000;
 32753                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32754                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 32755 0000539E 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 32756 000053A2 741D                    	jz	short $P_Drv_Err	;AN000;
 32757 000053A4 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 32758 000053A9 7516                    	jne	short $P_Drv_Err	;AN000;
 32759                                  $P_DrvF00:				;AN000;
 32760 000053AB 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 32761 000053AD 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 32762 000053AF 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 32763 000053B1 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 32764 000053B3 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 32765 000053B5 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 32766 000053B7 88C2                    	mov	dl,al			;AN000; set
 32767                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 32768                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 32769                                  	; 05/04/2023
 32770 000053B9 B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 32771 000053BC E8D8F8                  	call	$P_Fill_Result		;AN000; 	       to drive
 32772 000053BF EB07                    	jmp	short $P_Drv_Exit	;AN000;
 32773                                  $P_Drv_Err:				;AN000;
 32774 000053C1 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 32775                                  	;mov	word [cs:$P_RC],9	;AC034;
 32776                                  $P_Drv_Exit:				;AN000;
 32777 000053C8 5A                      	pop	dx			;AN000;
 32778 000053C9 58                      	pop	ax			;AN000;
 32779 000053CA C3                      	retn				;AN000;
 32780                                  
 32781                                  ;***********************************************************************
 32782                                  ; $P_Skip_Delim;
 32783                                  ;
 32784                                  ; Function: Skip delimiters specified in the PARMS list, white space
 32785                                  ;	    and comma.
 32786                                  ;
 32787                                  ; Input:    DS:SI -> Command String
 32788                                  ;	    ES:DI -> Parameter List
 32789                                  ;
 32790                                  ; Output:   CY = 1 if the end of line encounterd
 32791                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 32792                                  ;	    AL = Last examineed character
 32793                                  ;
 32794                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 32795                                  ;
 32796                                  ; Vars:     $P_Flags(R)
 32797                                  ;***********************************************************************
 32798                                  
 32799                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32800                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32801                                  $P_Skip_Delim:				;AN000;
 32802                                  $P_Skip_Delim_Loop:			;AN000;
 32803 000053CB AC                      	lodsb				;AN000;
 32804 000053CC E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 32805 000053CF 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 32806                                  
 32807 000053D1 E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 32808 000053D4 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 32809                                  
 32810 000053D6 2EF606[4F99]20          	test	byte [cs:$P_Flags2],$P_Extra
 32811                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 32812 000053DC 74ED                    	jz	short $P_Skip_Delim_Loop
 32813                                  					;AN000; if no, loop
 32814 000053DE 2EF606[4F99]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 32815                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 32816                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 32817                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 32818                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 32819                                  	; 05/04/2023
 32820 000053E4 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 32821                                  $P_Exit_At_Extra:			;AN000;
 32822                                  	; cf = 0
 32823                                  	;clc				;AN000; indicate extra delim
 32824 000053E6 C3                      	retn				;AN000;
 32825                                  
 32826                                  $P_Skip_Delim_CY:			;AN000;
 32827 000053E7 F9                      	stc				;AN000; indicate EOL
 32828 000053E8 EB01                    	jmp	short $P_Skip_Delim_Exit
 32829                                  					;AN000;
 32830                                  $P_Skip_Delim_NCY:			;AN000;
 32831 000053EA F8                      	clc				;AN000; indicate non delim
 32832                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 32833 000053EB 4E                      	dec	si ; *			;AN000;  backup index pointer
 32834 000053EC C3                      	retn				;AN000;
 32835                                  	; 05/04/2023
 32836                                  ;$P_Exit_At_Extra:			;AN000;
 32837                                  	;clc				;AN000; indicate extra delim
 32838                                  	;retn				;AN000;
 32839                                  
 32840                                  ;***********************************************************************
 32841                                  ; $P_Chk_EOL;
 32842                                  ;
 32843                                  ; Function: Check if AL is one of End of Line characters.
 32844                                  ;
 32845                                  ; Input:    AL = character code
 32846                                  ;	    ES:DI -> Parameter List
 32847                                  ;
 32848                                  ; Output:   ZF = 1 if one of End of Line characters
 32849                                  ;***********************************************************************
 32850                                  
 32851                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32852                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32853                                  $P_Chk_EOL:
 32854 000053ED 53                      	push	bx			;AN000;
 32855 000053EE 51                      	push	cx			;AN000;
 32856 000053EF 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 32857 000053F1 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32858 000053F3 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 32859 000053F5 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32860 000053F7 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 32861                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 32862 000053FC 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 32863 000053FE 31DB                    	xor	bx,bx			;AN000;
 32864 00005400 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32865                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 32866 00005404 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 32867 00005407 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 32868                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 32869 0000540B 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 32870 0000540D 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 32871 0000540F 268A09                  	mov	cl,[es:bx+di]		;AN000;
 32872                                  $P_Chk_EOL_Loop:			;AN000;
 32873 00005412 43                      	inc	bx			;AN000;
 32874 00005413 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 32875 00005416 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32876 00005418 E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 32877                                  $P_Chk_EOL_NZ:				;AN000;
 32878 0000541A 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 32879                                  $P_Chk_EOL_Exit:			;AN000;
 32880 0000541C 59                      	pop	cx			;AN000;
 32881 0000541D 5B                      	pop	bx			;AN000;
 32882 0000541E C3                      	retn				;AN000;
 32883                                  
 32884                                  ;***********************************************************************
 32885                                  ; $P_Chk_Delim;
 32886                                  ;
 32887                                  ; Function: Check if AL is one of delimiter characters.
 32888                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 32889                                  ;	    blanks.
 32890                                  ;
 32891                                  ; Input:    AL = character code
 32892                                  ;	    DS:SI -> Next Character
 32893                                  ;	    ES:DI -> Parameter List
 32894                                  ;
 32895                                  ; Output:   ZF = 1 if one of delimiter characters
 32896                                  ;	    SI points to the next character
 32897                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 32898                                  ;***********************************************************************
 32899                                  
 32900                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32901                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32902                                  	; 12/08/2024
 32903                                  $P_Chk_Delim:
 32904 0000541F 53                      	push	bx			;AN000;
 32905 00005420 51                      	push	cx			;AN000;
 32906 00005421 2EC606[4999]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 32907                                  					;AC034; Assume terminated by space
 32908 00005427 2E8026[4F99]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 32909                                  					;AC034;
 32910 0000542D 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 32911 0000542F 7434                    	je	short $P_Chk_Delim_Exit	;AN000;
 32912                                  
 32913 00005431 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 32914 00005433 7430                    	je	short $P_Chk_Delim_Exit	;AN000;
 32915                                  
 32916 00005435 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 32917 00005437 742F                    	je	short $P_Chk_Delim_Exit0
 32918                                  					;AN000;
 32919                                  $P_Chk_Delim00: 			;AN000;
 32920 00005439 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 32921 0000543B 750C                    	jne	short $P_Chk_Delim01	;AN000;
 32922 0000543D 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 32923                                  					;AN000; 2nd byte of DBCS Space ?
 32924 00005440 7507                    	jne	short $P_Chk_Delim01	;AN000;
 32925 00005442 B020                    	mov	al,$P_Space ; 20h	;AN000;
 32926 00005444 46                      	inc	si			;AN000; make si point to next character
 32927 00005445 38C0                    	cmp	al,al			;AN000; Set ZF
 32928 00005447 EB1C                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32929                                  
 32930                                  $P_Chk_Delim01: 			;AN000;
 32931                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 32932 00005449 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 32933                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 32934 0000544E 7215                    	jb	short $P_Chk_Delim_Exit	;AN000;
 32935                                  
 32936 00005450 31C9                    	xor	cx,cx			;AN000;
 32937 00005452 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32938                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 32939                                  	;or	cx,cx			;AN000; No extra Delim character ?
 32940                                  	;jz	short $P_Chk_Delim_NZ	;AN000;
 32941                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 32942 00005456 E30B                    	jcxz	$P_Chk_Delim_NZ
 32943                                  
 32944 00005458 BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 32945                                  $P_Chk_Delim_Loop:			;AN000;
 32946 0000545B 43                      	inc	bx			;AN000;
 32947 0000545C 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 32948 0000545F 7407                    	je	short $P_Chk_Delim_Exit0
 32949                                  					;AN000;
 32950 00005461 E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 32951                                  
 32952                                  $P_Chk_Delim_NZ:			;AN000;
 32953 00005463 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 32954                                  $P_Chk_Delim_Exit:			;AN000;
 32955 00005465 59                      	pop	cx			;AN000;
 32956 00005466 5B                      	pop	bx			;AN000;
 32957 00005467 C3                      	retn				;AN000;
 32958                                  
 32959                                  $P_Chk_Delim_Exit0:			;AN000;
 32960 00005468 2EA2[4999]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 32961 0000546C 2EF606[4F99]01          	test	byte [cs:$P_Flags2],$P_equ
 32962                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 32963 00005472 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 32964                                  
 32965 00005474 2E800E[4F99]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 32966                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 32967                                  $P_No_Set_Extra:			;AN027;
 32968 0000547A 38C0                    	cmp	al,al			;AN000; set ZF
 32969 0000547C EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32970                                  
 32971                                  ;***********************************************************************
 32972                                  ; $P_Chk_Switch;
 32973                                  ;
 32974                                  ; Function: Check if AL is the switch character not in first position of
 32975                                  ;	    $P_STRING_BUF
 32976                                  ;
 32977                                  ; Input:    AL = character code
 32978                                  ;	    BX = current pointer within $P_String_Buf
 32979                                  ;	    SI =>next char on command line (following the one in AL)
 32980                                  ;
 32981                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 32982                                  ;		 position, and has no chance of being part of a date string,
 32983                                  ;		 i.e. should be treated as a delimiter.
 32984                                  ;
 32985                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 32986                                  ;		 position, or is a slash but may be part of a date string, i.e.
 32987                                  ;		 should not be treated as a delimiter.
 32988                                  ;
 32989                                  ; Vars:  $P_Terminator(W)
 32990                                  ;
 32991                                  ; Use:	 $P_0099
 32992                                  ;***********************************************************************
 32993                                  
 32994                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32995                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32996                                  $P_Chk_Switch:
 32997                                  	; 18/04/2023
 32998 0000547E 8D2E[5899]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 32999                                  
 33000 00005482 39EB                    	cmp	bx,bp			;AN000;
 33001 00005484 7418                    	je	short $P_STRUC_L2	;AN000;
 33002                                  
 33003 00005486 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 33004 00005488 7512                    	jne	short $P_STRUC_L5	;AN000;
 33005                                  
 33006 0000548A F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 33007 0000548B 50                      	push	ax			;AN020;save input char
 33008 0000548C 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 33009 00005490 E801FB                  	call	$P_0099 		;AN020;return carry set if not numeric
 33010 00005493 7205                    	jc	short $P_STRUC_L7	;AN000;
 33011                                  
 33012 00005495 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 33013 00005497 E8FAFA                  	call	$P_0099			;AN020;return carry set if not numeric
 33014                                  $P_STRUC_L7:				;AN000;
 33015 0000549A 58                      	pop	ax			;AN020;restore AL to input char
 33016                                  	;jmp	short $P_STRUC_L1	;AN000;
 33017                                  	; 18/04/2023
 33018 0000549B C3                      	retn
 33019                                  
 33020                                  $P_STRUC_L5:				;AN000;
 33021 0000549C F8                      	clc				;AN020;not a slash
 33022                                  	;jmp	short $P_STRUC_L1	;AN000;
 33023                                  	 ;18/04/2023
 33024 0000549D C3                      	retn
 33025                                  
 33026                                  $P_STRUC_L2:				;AN000;
 33027 0000549E 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 33028                                  	;jne	short $P_STRUC_L12	;AN000;
 33029                                  	; 18/04/2023
 33030 000054A0 75FA                    	jne	short $P_STRUC_L5
 33031                                  
 33032 000054A2 2E800E[4F99]40          	or	byte [cs:$P_Flags2],$P_SW
 33033                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 33034                                  	; 18/04/2023
 33035                                  ;$P_STRUC_L12:				;AN000;
 33036                                  	;clc				;AN020;CF=0 indicating first char
 33037                                  $P_STRUC_L1:				;AN000;
 33038 000054A8 C3                      	retn				;AN000;
 33039                                  
 33040                                  ;**************************************************************************
 33041                                  ; $P_Chk_DBCS:
 33042                                  ;
 33043                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 33044                                  ;
 33045                                  ;  Input:
 33046                                  ;	  AL	= Code to be examineed
 33047                                  ;
 33048                                  ;  Output:
 33049                                  ;	  If CF is on then a lead byte of DBCS
 33050                                  ;
 33051                                  ; Use: INT 21h w/AH=63
 33052                                  ;
 33053                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 33054                                  ;***************************************************************************
 33055                                  
 33056                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33057                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33058                                  	; 12/08/2024
 33059                                  $P_Chk_DBCS:
 33060 000054A9 1E                      	push	ds			;AN000;
 33061 000054AA 56                      	push	si			;AN000;
 33062 000054AB 53                      	push	bx			;AN000; (tm11)
 33063 000054AC 2E833E[4C99]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 33064                                  					;AC034; ALREADY SET ?
 33065 000054B2 7527                    	jne	short $P_DBCS00		;AN000;
 33066 000054B4 50                      	push	ax			;AN000;
 33067 000054B5 1E                      	push	ds			;AN000; (tm11)
 33068 000054B6 51                      	push	cx			;AN000;
 33069 000054B7 52                      	push	dx			;AN000;
 33070 000054B8 57                      	push	di			;AN000;
 33071 000054B9 55                      	push	bp			;AN000;
 33072 000054BA 06                      	push	es			;AN000;
 33073 000054BB 31F6                    	xor	si,si			;AN000;
 33074 000054BD 8EDE                    	mov	ds,si			;AN000;
 33075                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 33076 000054BF B80063                  	mov	ax,6300h
 33077 000054C2 CD21                    	int	21h			;AN000;
 33078 000054C4 8CDB                    	mov	bx,ds			;AN000; (tm11)
 33079 000054C6 09DB                    	or	bx,bx			;AN000; (tm11)
 33080 000054C8 07                      	pop	es			;AN000;
 33081 000054C9 5D                      	pop	bp			;AN000;
 33082 000054CA 5F                      	pop	di			;AN000;
 33083 000054CB 5A                      	pop	dx			;AN000;
 33084 000054CC 59                      	pop	cx			;AN000;
 33085 000054CD 1F                      	pop	ds			;AN000; (tm11)
 33086 000054CE 58                      	pop	ax			;AN000;
 33087 000054CF 7424                    	jz	short $P_NON_DBCS	;AN000;
 33088                                  $P_DBCS02:				;AN000;
 33089 000054D1 2E8936[4A99]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 33090 000054D6 2E891E[4C99]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 33091                                  $P_DBCS00:				;AN000;
 33092                                  	;mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 33093                                  	;mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 33094                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 33095 000054DB 2EC536[4A99]            	lds	si,[cs:$P_DBCSEV_OFF]
 33096                                  $P_DBCS_LOOP:				;AN000;
 33097 000054E0 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 33098 000054E3 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 33099 000054E5 3A04                    	cmp	al,[si] 		;AN000;
 33100 000054E7 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 33101 000054E9 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 33102 000054EC 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 33103 000054EE F9                      	stc				;AN000; if yes, indicate DBCS and exit
 33104 000054EF EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 33105                                  $P_DBCS01:				;AN000;
 33106 000054F1 46                      	inc	si			;AC035; add '2' to
 33107 000054F2 46                      	inc	si			;AC035;  SI reg
 33108                                  					;AN000; get next vector
 33109 000054F3 EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 33110                                  
 33111                                  $P_NON_DBCS:				;AN000;
 33112                                  	; 18/04/2023
 33113                                  	; cf=0
 33114                                  	;clc				;AN000; indicate SBCS
 33115                                  $P_DBCS_EXIT:				;AN000;
 33116 000054F5 5B                      	pop	bx			;AN000; (tm11)
 33117 000054F6 5E                      	pop	si			;AN000;
 33118 000054F7 1F                      	pop	ds			;AN000;
 33119 000054F8 C3                      	retn				;AN000;
 33120                                  
 33121                                  ;============================================================================
 33122                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 33123                                  ;============================================================================
 33124                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33125                                  
 33126                                  ; ****************************************************************
 33127                                  ; *
 33128                                  ; * ROUTINE:	 CMD_PARSE
 33129                                  ; *
 33130                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 33131                                  ; *		 SYSPARSE.
 33132                                  ; *
 33133                                  ; * INPUT:	 inputs to SYSPARSE
 33134                                  ; *
 33135                                  ; * OUTPUT:	 outputs from SYSPARSE
 33136                                  ; *
 33137                                  ; ****************************************************************
 33138                                  
 33139                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33140                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 33141                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33142                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:57BBh
 33143                                  ;cmd_parse:
 33144                                  	;call	sysparse		;AN000;
 33145                                  	;retn				;AN000;
 33146                                  	; 06/04/2023
 33147                                  	;jmp	sysparse
 33148                                  
 33149                                  append_parse:
 33150 000054F9 E85DF5                  	call	sysparse		;AN010;
 33151 000054FC CB                      	retf				;AN010;
 33152                                  
 33153                                  ;============================================================================
 33154                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 33155                                  ;============================================================================
 33156                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33157                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33158                                  
 33159                                  ; ----------------------------
 33160                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 33161                                  ; ----------------------------
 33162                                  
 33163                                  ;; Replacable parameters are described by a sublist structure
 33164                                  
 33165                                  struc $M_SUBLIST_STRUC		;;AN000;;
 33166 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33167 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33168 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33169 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 33170 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33171 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33172 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33173 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33174                                  endstruc
 33175                                  
 33176                                  ; ---------------------------------------------------------------------------
 33177                                  ; ---------------------------------------------------------------------------
 33178                                  
 33179                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33180                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 33181                                  
 33182                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33183                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57C3h
 33184                                  
 33185                                  Printf_Init:
 33186 000054FD E80F00                  	call	std_printf
 33187 00005500 CB                      	retf
 33188                                  
 33189                                  Printf_Crlf:
 33190 00005501 E80B00                  	call	std_printf
 33191                                  	;call	CRLF2
 33192                                  	;retn
 33193                                  	; 07/04/2023
 33194 00005504 E91AD6                  	jmp	CRLF2
 33195                                  
 33196                                  ;****************************************************************
 33197                                  ;*
 33198                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 33199                                  ;*
 33200                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 33201                                  ;*		Set up substitutions if utility message.  Make
 33202                                  ;*		sure any changes to message variables in TDATA
 33203                                  ;*		are reset to avoid reloading the transient.
 33204                                  ;*
 33205                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 33206                                  ;*		Msg_Cont_Flag	-  set to control flags
 33207                                  ;*		DS	points to transient segment
 33208                                  ;*
 33209                                  ;*		if utility message:
 33210                                  ;*		DX	points to a block with message number
 33211                                  ;*			(word), number of substitutions (byte),
 33212                                  ;*			followed by substitution list if there
 33213                                  ;*			are substitutions.  If substitutions
 33214                                  ;*			are not in transient segment they must
 33215                                  ;*			be set.
 33216                                  ;*		else
 33217                                  ;*		AX	set to message number
 33218                                  ;*
 33219                                  ;* OUTPUT:	none
 33220                                  ;*
 33221                                  ;****************************************************************
 33222                                  
 33223                                  std_eprintf:
 33224 00005507 C706[1F9B]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 33225 0000550D EB06                    	jmp	short new_printf		;AC000;
 33226                                  
 33227                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33228                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 33229                                  
 33230                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33231                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57D6h
 33232                                  	; 12/08/2024
 33233                                  std_printf:
 33234 0000550F C706[1F9B]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 33235                                  
 33236                                  new_printf:
 33237 00005515 50                      	push	ax				;AN000;save registers
 33238 00005516 53                      	push	bx				;AN000;
 33239 00005517 51                      	push	cx				;AN000;
 33240 00005518 06                      	push	es				;AN000;get local ES
 33241 00005519 1E                      	push	ds				;AN000;
 33242 0000551A 07                      	pop	es				;AN000;
 33243 0000551B 57                      	push	di				;AN000;
 33244 0000551C 56                      	push	si				;AN000;
 33245 0000551D 52                      	push	dx				;AN000;
 33246                                  
 33247                                  	; 07/04/2023
 33248                                  	;mov	word [print_err_flag],0		;AN000;
 33249 0000551E 31C9                    	xor	cx,cx
 33250 00005520 890E[28A2]              	mov	[print_err_flag],cx ; 0
 33251                                  
 33252 00005524 89D6                    	mov	si,dx				;AN000;Get offset of message number
 33253 00005526 AD                      	lodsw					;AN000;load message number
 33254                                  	; 15/06/2023
 33255                                  	;push	ax				;AN000;save it
 33256                                  	;lodsb					;AN000;get number of substitutions
 33257                                  	;mov	cl,al				;AN000;set up CX as # of subst
 33258                                  	;; 07/04/2023
 33259                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 33260                                  	;pop	ax				;AN000;get message number back
 33261                                  	; 15/06/2023
 33262 00005527 8A0C                    	mov	cl,[si]
 33263 00005529 46                      	inc	si
 33264                                  
 33265                                  	;cmp	cx,0				;AN000;Any substitutions?
 33266                                  	; 07/04/2023
 33267                                  	;and	cx,cx
 33268                                  	;jz	short ready_to_print		;AN000;No - continue
 33269                                  	; 12/08/2024
 33270 0000552A E35C                    	jcxz	ready_to_print
 33271                                  
 33272 0000552C BF[2AA2]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 33273 0000552F 57                      	push	di				;AN061; save it
 33274 00005530 51                      	push	cx				;AN061; save number of subst
 33275                                  
 33276                                  move_subst:
 33277 00005531 51                      	push	cx				;AN061;save number of subst
 33278 00005532 89F3                    	mov	bx,si				;AN061;save start of sublist
 33279                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 33280                                  	; 07/04/2023
 33281 00005534 B10B                    	mov	cl,parm_block_size ; 11
 33282 00005536 F3A4                    	rep	movsb				;AN061;move sublist
 33283                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 33284 00005538 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 33285                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 33286 0000553C 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 33287                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 33288                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 33289 0000553E 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 33290                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 33291                                  	;mov	word [bx+4],0			;AN061;
 33292 00005541 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 33293                                  
 33294                                  move_subst_cont:				;AN061;
 33295 00005544 59                      	pop	cx				;AN061;get number of subst back
 33296 00005545 E2EA                    	loop	move_subst			;AN061;move cx sublists
 33297                                  
 33298 00005547 59                      	pop	cx				;AN061;get number of subst
 33299 00005548 50                      	push	ax				;AN061;save message number
 33300 00005549 803E[CE91]FF            	cmp	byte [msg_disp_class],util_msg_class
 33301                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 33302 0000554E 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 33303                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 33304 00005550 C606[24A2]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 33305 00005555 BF[D091]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 33306 00005558 31C0                    	xor	ax,ax				;AN061;clear ax register
 33307 0000555A AB                      	stosw					;AN061;clear out message number
 33308 0000555B AA                      	stosb					;AN061;clear out subst count
 33309                                  
 33310                                  check_fix:					;AN061;
 33311 0000555C 58                      	pop	ax				;AN061;get message number back
 33312 0000555D 5F                      	pop	di				;AN061;get start of sublists
 33313 0000555E 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 33314 00005560 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 33315 00005562 51                      	push	cx				;AN061;save number of subst
 33316                                  
 33317                                  set_subst:					;AN061;store the segment of the subst
 33318 00005563 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 33319                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 33320 00005567 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 33321 00005569 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 33322                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 33323                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 33324 0000556D 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 33325 0000556F 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 33326                                  	;mov	word [bx+4],cs			;AN061;set segment value
 33327                                  
 33328                                  subst_seg_set:					;AN061;
 33329 00005572 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 33330 00005575 E2EC                    	loop	set_subst			;AN061;loop CX times
 33331 00005577 59                      	pop	cx				;AN061;get number of subst back
 33332                                  
 33333 00005578 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 33334 0000557A 817F02[91A0]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 33335                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 33336 0000557F 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 33337                                  	; 01/05/2023
 33338 00005581 8B16[91A0]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 33339 00005585 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 33340                                  						;AN061;put it into the subst block
 33341                                  	;mov	[bx+2],dx
 33342                                  
 33343                                  ready_to_print:
 33344 00005588 8B1E[1F9B]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 33345 0000558C 8A16[CF91]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 33346 00005590 8A36[CE91]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 33347 00005594 C606[CF91]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 33348                                  						;AN061;reset flags to avoid
 33349 00005599 C606[CE91]FF            	mov	byte [msg_disp_class],util_msg_class
 33350                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 33351                                  
 33352 0000559E 1E                      	push	ds				;AN026;
 33353 0000559F 06                      	push	es				;AN026;
 33354                                  
 33355 000055A0 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 33356                                  
 33357 000055A3 07                      	pop	es				;AN026; restore registers
 33358 000055A4 1F                      	pop	ds				;AN026;
 33359                                  
 33360 000055A5 7303                    	jnc	short print_success		;AN000; everything went okay
 33361 000055A7 A3[28A2]                	mov	[print_err_flag],ax		;AN000;
 33362                                  
 33363                                  print_success:
 33364 000055AA 5A                      	pop	dx				;AN061;restore dx
 33365 000055AB 5E                      	pop	si				;AN000;restore registers
 33366 000055AC 5F                      	pop	di				;AN000;
 33367 000055AD 07                      	pop	es				;AN000;restore registers
 33368 000055AE 59                      	pop	cx				;AN000;
 33369 000055AF 5B                      	pop	bx				;AN000;
 33370 000055B0 58                      	pop	ax				;AN000;
 33371 000055B1 833E[28A2]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 33372 000055B6 7501                    	jnz	short print_err			;AN000;
 33373                                  
 33374 000055B8 C3                      	retn					;AC000;
 33375                                  
 33376                                  print_err:
 33377 000055B9 0E                      	push	cs
 33378 000055BA 07                      	pop	es
 33379 000055BB 833E[1F9B]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 33380 000055C0 7503                    	jne	short not_stderr		;AN026;no - continue
 33381 000055C2 E93FAB                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 33382                                  
 33383                                  not_stderr:
 33384 000055C5 A1[28A2]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 33385 000055C8 8E06[F39D]              	mov	es,[RESSEG]			; No, set up for error, load the
 33386                                  						;  right error msg, and jmp to cerror.
 33387 000055CC 26F606[B502]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 33388 000055D2 7408                    	jz	short _go_to_error
 33389 000055D4 E8E1DE                  	call	PipeOff
 33390 000055D7 BA[3193]                	mov	dx,PIPEEMES_PTR
 33391 000055DA EB0B                    	jmp	short print_err_exit		;AC000;
 33392                                  
 33393                                  _go_to_error:
 33394 000055DC C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 33395                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 33396 000055E1 BA[D091]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 33397 000055E4 A3[D091]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 33398                                  
 33399                                  print_err_exit: 				;AC000;
 33400 000055E7 0E                      	push	cs
 33401 000055E8 07                      	pop	es
 33402 000055E9 E9B6D8                  	jmp	cerror
 33403                                  
 33404                                  ;****************************************************************
 33405                                  ;*
 33406                                  ;* ROUTINE:	TSYSLOADMSG
 33407                                  ;*
 33408                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 33409                                  ;*		names since these routines are also used in the
 33410                                  ;*		resident.
 33411                                  ;*
 33412                                  ;* INPUT:	Inputs to SYSLOADMSG
 33413                                  ;*
 33414                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 33415                                  ;*
 33416                                  ;****************************************************************
 33417                                  
 33418                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33419                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33420                                  TSYSLOADMSG:
 33421 000055EC 53                      	push	bx				;AN000;
 33422 000055ED E80800                  	call	SYSLOADMSG			;AN000; call routine
 33423 000055F0 5B                      	pop	bx				;AN000;
 33424 000055F1 C3                      	retn					;AN000; exit
 33425                                  
 33426                                  ;****************************************************************
 33427                                  ;*
 33428                                  ;* ROUTINE:	TSYSGETMSG
 33429                                  ;*
 33430                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 33431                                  ;*		names since these routines are also used in the
 33432                                  ;*		resident.
 33433                                  ;*
 33434                                  ;* INPUT:	Inputs to SYSGETMSG
 33435                                  ;*
 33436                                  ;* OUTPUT:	Outputs from SYSGETMSG
 33437                                  ;*
 33438                                  ;****************************************************************
 33439                                  
 33440                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33441                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33442                                  TSYSGETMSG:
 33443 000055F2 51                      	push	cx				;AN000;
 33444 000055F3 E8B500                  	call	SYSGETMSG			;AN000; call routine
 33445 000055F6 59                      	pop	cx				;AN000;
 33446 000055F7 C3                      	retn					;AN000; exit
 33447                                  
 33448                                  ;============================================================================
 33449                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 33450                                  ;============================================================================
 33451                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33452                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33453                                  
 33454                                  ; ---------------------------------------------------------------------------
 33455                                  ; MODULE NAME: MSGSERV.SAL
 33456                                  ;
 33457                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 33458                                  ;
 33459                                  ; FUNCTION: This module incorporates all the messages services and
 33460                                  ;	    is called upon at build time to INCLUDE the code requested
 33461                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 33462                                  ;
 33463                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 33464                                  ;	    requested procedure.
 33465                                  ;
 33466                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 33467                                  ;	    function requested.
 33468                                  ;
 33469                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 33470                                  ;
 33471                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 33472                                  ;
 33473                                  ; INTERNAL REFERENCES: (list of included subroutines)
 33474                                  ;
 33475                                  ;	- SYSLOADMSG
 33476                                  ;	- SYSDISPMSG
 33477                                  ;	- SYSGETMSG
 33478                                  ;
 33479                                  ; EXTERNAL REFERENCES: None
 33480                                  ;
 33481                                  ; NOTES: At build time, some modules must be included. These are only included
 33482                                  ;	 once using assembler switches. Other logic is included at the request
 33483                                  ;	 of the utility.
 33484                                  ;
 33485                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 33486                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 33487                                  ;	 storage and multiple EQUates.
 33488                                  ;
 33489                                  ; REVISION HISTORY: Created MAY 1987
 33490                                  ;
 33491                                  ;     Label: DOS - - Message Retriever
 33492                                  ;	     (c) Copyright 1988 Microsoft
 33493                                  ; ---------------------------------------------------------------------------
 33494                                  
 33495                                  ;	Revision History
 33496                                  ;	================
 33497                                  ;
 33498                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 33499                                  ;				$M_DISPLAY_H_STRING to properly
 33500                                  ;				handle Ctrl-Z being passed
 33501                                  ;
 33502                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 33503                                  ;				these routines are no longer assembled.
 33504                                  ;
 33505                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 33506                                  ;				CR-LF string also gets reinitialized
 33507                                  ;				on every cycle.
 33508                                  ;
 33509                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 33510                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 33511                                  
 33512                                  ; ---------------------------------------------------------------------------
 33513                                  
 33514                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33515                                  
 33516                                  ;;; Replacable parameters are described by a sublist structure
 33517                                  ;
 33518                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 33519                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33520                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33521                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33522                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 33523                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33524                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33525                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33526                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33527                                  ;endstruc
 33528                                  
 33529                                  ;; Each class will be defined by this structure.
 33530                                  
 33531                                  struc $M_CLASS_ID		;;AN000;;
 33532 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 33533 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 33534 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 33535                                   .size:
 33536                                  endstruc
 33537                                  
 33538                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 33539                                  
 33540                                  ;; Each message will be defined by this structure.
 33541                                  
 33542                                  struc $M_ID			;;AN000;;
 33543 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 33544 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 33545                                   .size:	
 33546                                  endstruc
 33547                                  
 33548                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 33549                                  
 33550                                  ; ---------------------------
 33551                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33552                                  ; ---------------------------
 33553                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 33554                                  
 33555                                  ; --------------------------- 
 33556                                  
 33557                                  ; 07/04/2023
 33558                                  $M_NUM_CLS equ 3
 33559                                  
 33560                                  ;; Resident data area definition of variables
 33561                                  
 33562                                  struc $M_RES_ADDRS			;;AN000;;
 33563 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 33564 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 33565 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 33566 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 33567 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 33568 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 33569 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 33570 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 33571 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 33572 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 33573 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 33574 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 33575 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 33576 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 33577 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 33578 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 33579 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 33580 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 33581 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 33582 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 33583 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 33584 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 33585 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 33586                                   .size:
 33587                                  endstruc				;;AN000;;
 33588                                  
 33589                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 33590                                  
 33591                                  ;; Important fields of the Get Country Information call
 33592                                  
 33593                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 33594 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 33595                                  					;;AN000;; Go past first part of struc
 33596 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 33597 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 33598 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 33599 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 33600 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 33601 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 33602 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 33603 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 33604 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 33605                                  endstruc				;;AN000;;
 33606                                  
 33607                                  ; ---------------------------------------------------------------------------
 33608                                  
 33609                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33610                                  ;;
 33611                                  ;;	PROC NAME: SYSLOADMSG
 33612                                  ;;
 33613                                  ;;	FUNCTION:
 33614                                  ;;	INPUTS:
 33615                                  ;;
 33616                                  ;;	OUTPUTS:
 33617                                  ;;
 33618                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33619                                  
 33620                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33621                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 33622                                  
 33623                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33624                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:58CBh
 33625                                  
 33626                                  SYSLOADMSG:
 33627 000055F8 50                      	push	ax				;;AN000;
 33628 000055F9 53                      	push	bx				;;AN000;
 33629 000055FA 52                      	push	dx				;;AN000;
 33630 000055FB 06                      	push	es				;;AN000;
 33631 000055FC 57                      	push	di				;;AN000;
 33632 000055FD 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 33633 000055FF 8EC1                    	mov	es,cx				;;AN000;
 33634 00005601 31FF                    	xor	di,di				;;AN000;
 33635 00005603 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33636 00005606 B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 33637 00005608 CD2F                    	int	2Fh				;;AN000;; Private interface
 33638                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33639                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 33640                                  		; Return: ES:DI -> error table
 33641                                  	
 33642 0000560A 8C06[279A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 33643                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 33644 0000560E 893E[259A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 33645                                  	;mov	[$M_RT+8],di			;;AN000;;
 33646                                  
 33647 00005612 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33648 00005615 B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 33649 00005617 CD2F                    	int	2Fh				;;AN000;; Private interface
 33650                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33651                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 33652                                  		; ES:DI -> error table
 33653                                  
 33654 00005619 8C06[2F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 33655                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 33656 0000561D 893E[2D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 33657                                  	;mov	[$M_RT+16],di			;;AN000;;
 33658                                  
 33659 00005621 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33660 00005624 B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 33661 00005626 CD2F                    	int	2Fh				;;AN000;; Private interface
 33662                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33663                                  		; DL = subfunction - get ??? error table
 33664                                  		; ES:DI -> error table
 33665                                  
 33666 00005628 8C06[3F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 33667                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 33668 0000562C 893E[3D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 33669                                  	;mov	[$M_RT+32],di			;;AN000;;
 33670                                  
 33671 00005630 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33672 00005633 B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 33673 00005635 CD2F                    	int	2Fh					     ;;AN001;; Private interface
 33674                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33675                                  		; DL = subfunction - get ??? error table
 33676                                  		; ES:DI -> error table
 33677                                  
 33678 00005637 8C06[239A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 33679                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 33680 0000563B 893E[219A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 33681                                  	;mov	[$M_RT+4],di			;;AN001;;
 33682                                  
 33683 0000563F E8673B                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 33684                                  						;;AN000;;
 33685 00005642 8C06[1F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 33686                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 33687 00005646 893E[1D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 33688                                  	;mov	[$M_RT+0],di			;;AN000;;
 33689 0000564A 8C06[3B9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 33690                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 33691 0000564E 893E[399A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 33692                                  	;mov	[$M_RT+28],di			;;AN000;;
 33693                                  
 33694 00005652 E8723B                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 33695                                  
 33696 00005655 8C06[339A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 33697                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 33698 00005659 893E[319A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 33699                                  	;mov	[$M_RT+20],di			;;AN000;;
 33700                                  
 33701 0000565D B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33702 00005660 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 33703 00005662 CD2F                    	int	2Fh				;;AN001;; Private interface
 33704                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33705                                  		; DL = subfunction - get ??? error table
 33706                                  		; ES:DI -> error table
 33707                                  
 33708 00005664 8C06[479A]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 33709                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 33710 00005668 893E[459A]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 33711                                  	;mov	[$M_RT+40],di			;;AN001;;
 33712                                  
 33713                                  ;M016; M020
 33714                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 33715                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 33716                                  
 33717 0000566C C706[609A]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 33718                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 33719 00005672 C606[A99A]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 33720                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 33721 00005677 C706[659A]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 33722                                  	;mov	word [$M_RT+72],0		; M020
 33723 0000567D C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 33724                                  	;mov	word [$M_RT+74],10		; M020
 33725                                  
 33726                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 33727                                  	; --------------------------
 33728                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 33729                                  	; --------------------------
 33730                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 33731                                  
 33732                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 33733 00005683 E8C03A                  	call    $M_CLS_3			; Get addressibility to class F
 33734 00005686 893E[499A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 33735                                  	;mov	[$M_RT+44],di
 33736                                  	
 33737 0000568A E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 33738                                  
 33739                                  	; 15/04/2023
 33740                                  	;clc					;;AN000;; Make sure carry is clear
 33741                                  	;jc	short $MIF20
 33742                                  	
 33743 0000568D 5F                      	pop	di				;;AN000;; Restore REGS
 33744 0000568E 07                      	pop	es				;;AN000;;
 33745 0000568F 5A                      	pop	dx				;;AN000;;
 33746 00005690 5B                      	pop	bx				;;AN000;;
 33747 00005691 58                      	pop	ax				;;AN000;;
 33748                                  	;jmp	short $MEN20
 33749                                  	; 15/04/2023
 33750 00005692 C3                      	retn
 33751                                  
 33752                                  	; 15/04/2023
 33753                                  ;$MIF20:
 33754                                  	;add	sp,10				;;AN000;;
 33755                                  	;stc					;;AN000;; Reset carry flag
 33756                                  ;$MEN20:
 33757                                  	;retn					;;AN000;;
 33758                                  
 33759                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33760                                  ;;
 33761                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 33762                                  ;;
 33763                                  ;;  Function:	Get the DBCS vector and save it for later use
 33764                                  ;;
 33765                                  ;;  Inputs:	None
 33766                                  ;;
 33767                                  ;;  Outputs:	None
 33768                                  ;;
 33769                                  ;;  Regs Changed:
 33770                                  ;;
 33771                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33772                                  
 33773                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33774                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33775                                  $M_GET_DBCS_VEC:
 33776 00005693 50                      	push	ax				;;AN000;; Save character to check
 33777 00005694 56                      	push	si				;;AN000;;
 33778 00005695 1E                      	push	ds				;;AN000;;
 33779 00005696 B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 33780 00005699 CD21                    	int	21h				;;AN000;; Get environment pointer
 33781 0000569B 1E                      	push	ds				;;AN000;; Get environment pointer
 33782 0000569C 07                      	pop	es				;;AN000;; Get environment pointer
 33783 0000569D 1F                      	pop	ds				;;AN000;; Get environment pointer
 33784 0000569E 7208                    	jc	short $MIF23
 33785                                  	
 33786 000056A0 8936[599A]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 33787                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 33788 000056A4 8C06[5B9A]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 33789                                  	;mov	word [$M_RT+62],es		;;AN000;;
 33790                                  $MIF23:
 33791 000056A8 5E                      	pop	si				;;AN000;;
 33792 000056A9 58                      	pop	ax				;;AN000;; Retrieve character to check
 33793 000056AA C3                      	retn					;;AN000;; Return
 33794                                  
 33795                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33796                                  ;;
 33797                                  ;;  Proc Name:	SYSGETMSG
 33798                                  ;;
 33799                                  ;;  Function:	The GET service returns the segment, offset and size of the
 33800                                  ;;		message text to the caller based on a message number.
 33801                                  ;;		The GET function will not display the message thus assumes
 33802                                  ;;		caller will handle replaceable parameters.
 33803                                  ;;
 33804                                  ;;  Inputs:
 33805                                  ;;
 33806                                  ;;  Outputs:
 33807                                  ;;
 33808                                  ;;  Psuedocode:
 33809                                  ;;		Call $M_GET_MSG_ADDRESS
 33810                                  ;;		IF MSG_NUM exists THEN
 33811                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 33812                                  ;;		   CARRY_FLAG = 0
 33813                                  ;;		ELSE
 33814                                  ;;		   CARRY_FLAG = 1
 33815                                  ;;		ENDIF
 33816                                  ;;
 33817                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33818                                  
 33819                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33820                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33821                                  
 33822                                  	utility_msg_class equ 0FFh ; 18/04/2023
 33823                                  
 33824                                  SYSGETMSG:
 33825                                  	;; Save registers needed later
 33826 000056AB 50                      	push	ax				;;AN000;; Save changed regs
 33827 000056AC 06                      	push	es				;;AN000;;
 33828 000056AD 57                      	push	di				;;AN000;;
 33829 000056AE 55                      	push	bp				;;AN000;;
 33830                                  
 33831 000056AF E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33832 000056B2 720D                    	jc	short $MIF31
 33833                                  	
 33834 000056B4 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 33835                                  	;clc					;;AN000;;
 33836 000056B7 7404                    	je	short $MIF32			;;AN000;;
 33837                                  	; 15/06/2023
 33838 000056B9 F8                      	clc	
 33839                                  
 33840 000056BA 06                      	push	es				;;AN000;;
 33841                                  	;pop	ds				;;AN000;;
 33842 000056BB EB01                    	jmp	short $MEN32
 33843                                  $MIF32:
 33844 000056BD 0E                      	push	cs				;;AN000;;			
 33845                                  	;pop	ds				;;AN000;;
 33846                                  $MEN32:
 33847                                  	; 07/04/2023
 33848 000056BE 1F                      	pop	ds
 33849 000056BF 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 33850                                  $MIF31:
 33851 000056C1 5D                      	pop	bp				;;AN000;; Restore changed regs
 33852 000056C2 5F                      	pop	di				;;AN000;;
 33853 000056C3 07                      	pop	es				;;AN000;;
 33854 000056C4 58                      	pop	ax				;;AN000;;
 33855 000056C5 C3                      	retn					;;AN000;; Return
 33856                                  
 33857                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33858                                  ;;
 33859                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 33860                                  ;;
 33861                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 33862                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 33863                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 33864                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 33865                                  ;;	REGS CHANGED: ES,DI,CX
 33866                                  ;;
 33867                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33868                                  
 33869                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33870                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33871                                  $M_GET_MSG_ADDRESS:
 33872 000056C6 56                      	push	si				;;AN000;;
 33873 000056C7 53                      	push	bx				;;AN000;;
 33874 000056C8 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 33875 000056CA 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 33876                                  $MDO36:
 33877 000056CC 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 33878 000056CF 7508                    	jne	short $MIF37			;;AN000;; No
 33879                                  
 33880                                  	; 07/04/2023
 33881                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33882 000056D1 8BBC[499A]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 33883                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 33884 000056D5 89FB                    	mov	bx,di				;;AN000;;
 33885 000056D7 EB21                    	jmp	short $MEN37
 33886                                  $MIF37:
 33887 000056D9 F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 33888 000056DC 7406                    	jz	short $MIF39
 33889                                  	
 33890                                  	; 07/04/2023
 33891                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33892 000056DE C4BC[2D9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 33893                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 33894                                  
 33895                                  	; 07/04/2023
 33896                                  	;mov	bx,es ; *			;;AN000;;
 33897 000056E2 EB14                    	jmp	short $MEN39
 33898                                  $MIF39:
 33899 000056E4 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 33900 000056E7 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 33901                                  
 33902 000056E9 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 33903 000056EC 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 33904                                  
 33905                                  	; 07/04/2023
 33906                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33907 000056EE C4BC[399A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 33908                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 33909                                  	
 33910                                  	; 07/04/2023
 33911                                  	;mov	bx,es ; *			;;AN000;;
 33912 000056F2 EB04                    	jmp	short $MEN41
 33913                                  $MIF41:
 33914                                  	; 07/04/2023
 33915                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33916 000056F4 C4BC[1D9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 33917                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 33918                                  	
 33919                                  	; 07/04/2023
 33920                                  	;mov	bx,es ; *			;;AN000;;
 33921                                  $MEN41:
 33922                                  $MEN39:
 33923                                  	; 07/04/2023
 33924 000056F8 8CC3                    	mov	bx,es ; *
 33925                                  $MEN37:						;;AN000;;
 33926 000056FA 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 33927 000056FD 7515                    	jne	short $MIF46			;;AN000;; No
 33928                                  
 33929 000056FF 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 33930 00005702 7503                    	jne	short $MIF47			;;AN000;; No
 33931 00005704 F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 33932                                  	; 07/04/2023
 33933                                  	;jmp	short $MEN47 ; **-
 33934 00005705 EB1B                    	jmp	short $MEN36 ; **-
 33935                                  $MIF47:
 33936 00005707 A3[659A]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],ax
 33937                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 33938 0000570A B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 33939 0000570D BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 33940 00005710 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 33941                                  	; 28/04/2023
 33942                                  	; 07/04/2023
 33943                                  	;clc	; **+				;;AN000;;
 33944                                  ;$MEN47:
 33945                                  	;jmp	short $MEN46 ; ***
 33946 00005712 EB0A                    	jmp	short $MEN47 ; ***
 33947                                  $MIF46:
 33948                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 33949 00005714 21DB                    	and	bx,bx ; 0 ?
 33950 00005716 7403                    	jz	short $MIF51			;;AN000;; No
 33951                                  	
 33952 00005718 E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 33953                                  $MIF51:
 33954 0000571B 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 33955                                  	; 07/04/2023
 33956                                  	;clc					;;AN000;;
 33957                                  ;$MEN46:
 33958                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 33959                                  $MEN47:	; 07/04/2023	; **+
 33960 0000571E 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 33961                                  	;jnz	short $MXL2			;;AN000;; Yes
 33962                                  	;jmp	short $MDO36
 33963                                  	; 07/04/2023
 33964 00005720 74AA                    	jz	short $MDO36	
 33965                                  $MXL2:
 33966                                  $MEN36:
 33967 00005722 9C                      	pushf 					;;AN006;; Save the flag state
 33968                                  	
 33969 00005723 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 33970                                  	;jne	short $MIF56			;;AN006;; No
 33971                                  	; 28/04/2023
 33972 00005726 752A                    	jne	short $M_MYRET	
 33973                                  
 33974 00005728 52                      	push	dx				;;AN006;; Save all needed registers
 33975 00005729 55                      	push	bp				;;AN006;;
 33976 0000572A 51                      	push	cx				;;AN006;;
 33977 0000572B 06                      	push	es				;;AN006;;
 33978 0000572C 57                      	push	di				;;AN006;;
 33979 0000572D 50                      	push	ax				;;AN006;;
 33980                                  
 33981 0000572E B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 33982 00005731 CD2F                    	int	2Fh				;;AN006;;
 33983                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 33984                                  		; Return: AL = 00h not installed, OK to install
 33985                                  		; 01h not installed, can't install
 33986                                  		; FFh installed
 33987                                  
 33988 00005733 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 33989 00005735 58                      	pop	ax				;;AN006;; Restore msg number
 33990 00005736 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 33991                                  
 33992 00005738 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 33993 0000573A B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 33994 0000573D CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 33995                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 33996                                  
 33997                                  	;jmp	short $MEN57			;;AN006;;
 33998                                  	; 28/04/2023
 33999 0000573F 720B                    	jc	short $MEN57
 34000                                  $MIF60:
 34001 00005741 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 34002 00005744 E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 34003                                  $MEN60:
 34004 00005747 5D                      	pop	bp				;;AN006;; Restore other Regs
 34005 00005748 5A                      	pop	dx				;;AN006;;
 34006                                  $MIF56:
 34007                                  	; 07/04/2023
 34008                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34009 00005749 EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 34010                                  
 34011                                  $MIF57:
 34012 0000574B F9                      	stc					;;AN006;; Carry conditon
 34013                                  $MEN57:
 34014                                  	; 28/04/2023
 34015                                  	;jnc	short $MIF60			;;AN006;;
 34016                                  
 34017 0000574C 5F                      	pop	di				;;AN006;;
 34018 0000574D 07                      	pop	es				;;AN006;; Restore old pointer
 34019 0000574E 59                      	pop	cx				;;AN006;;
 34020 0000574F EBF6                    	jmp	short $MEN60
 34021                                  
 34022                                  ;$MIF60:
 34023                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 34024                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 34025                                  ;$MEN60:
 34026                                  ;	pop	bp				;;AN006;; Restore other Regs
 34027                                  ;	pop	dx				;;AN006;;
 34028                                  ;$MIF56:
 34029                                  ;	; 07/04/2023
 34030                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34031                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 34032                                  
 34033                                  ; 07/04/2023
 34034                                  ; ---------------------------
 34035                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 34036                                  ; ---------------------------
 34037                                  	; $M_POPF macro
 34038                                  	;jmp	short $+3
 34039                                  m_popf_iret:
 34040 00005751 CF                      	iret
 34041                                  $M_MYRET:
 34042 00005752 0E                      	push	cs
 34043 00005753 E8FBFF                  	call	m_popf_iret
 34044                                  	;;; end macro	
 34045                                  ; ---------------------------
 34046                                  
 34047 00005756 5B                      	pop	bx				;;AN000;;
 34048 00005757 5E                      	pop	si				;;AN000;;
 34049 00005758 C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 34050                                  
 34051                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34052                                  
 34053                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34054                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34055                                  $M_SET_LEN_IN_CX:			
 34056 00005759 57                      	push	di				;;AN006;; Save position
 34057 0000575A 50                      	push	ax				;;AN006;;
 34058 0000575B B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 34059 0000575E 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 34060 00005760 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 34061 00005762 F7D1                    	not	cx				;;AN006;; Change decrement into number
 34062 00005764 49                      	dec	cx				;;AN006;; Don't include the zero
 34063 00005765 58                      	pop	ax				;;AN006;;
 34064 00005766 5F                      	pop	di				;;AN006;; Restore position
 34065 00005767 C3                      	retn					;;AN006;;
 34066                                  
 34067                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34068                                  ;;
 34069                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 34070                                  ;;
 34071                                  ;;	FUNCTION:  To scan thru message headers until message is found
 34072                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 34073                                  ;;		   CX contains the number of messages in class
 34074                                  ;;		   DH contains the message class
 34075                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 34076                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 34077                                  ;;
 34078                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34079                                  
 34080                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34081                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34082                                  $M_FIND_SPECIFIED_MSG:
 34083 00005768 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 34084 0000576B 751F                    	jne	short $MIF64
 34085 0000576D 833E[459A]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 34086                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 34087                                  	; 15/06/2023
 34088 00005772 7418                    	je	short $MIF64
 34089                                  
 34090 00005774 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 34091 00005777 750B                    	jne	short $MIF65
 34092                                  	
 34093 00005779 50                      	push	ax				;;AN004;; Reset the special message number
 34094 0000577A A1[659A]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 34095                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 34096 0000577D FF1E[459A]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 34097                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 34098 00005781 58                      	pop	ax				;;AN004;; Reset the special message number
 34099                                  	; 28/04/2023
 34100 00005782 EB04                    	jmp	short $MEN65
 34101                                  	; 18/04/2023
 34102                                  	;jmp	short $MEN64
 34103                                  $MIF65:
 34104 00005784 FF1E[459A]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 34105                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 34106                                  $MEN65:
 34107                                  	; 28/04/2023
 34108 00005788 7344                    	jnc	short $MIF75
 34109                                  	;
 34110 0000578A EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 34111                                  $MIF64:
 34112 0000578C 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 34113 0000578E 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 34114 00005791 7406                    	je	short $MIF69
 34115                                  	
 34116 00005793 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 34117                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 34118 00005797 EB09                    	jmp	short $MEN69
 34119                                  $MIF69:
 34120                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 34121                                  	;cmp	[cs:di+0],dh
 34122 00005799 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 34123 0000579C 7504                    	jne	short $MIF71
 34124                                  
 34125 0000579E 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 34126                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 34127                                  $MIF71:						;;AN001;;
 34128                                  $MEN69:
 34129 000057A2 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 34130                                  	; 02/05/2023
 34131                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 34132                                  $MEN64:
 34133                                  	;jnc	short $MIF75
 34134                                  	; 28/04/2023
 34135                                  	; (or instruction clears carry flag)
 34136                                  	;clc					;;AN004;; No, reset carry
 34137                                  $MDO76:
 34138 000057A5 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 34139 000057A7 7417                    	jz	short $MEN76
 34140                                  
 34141 000057A9 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 34142 000057AC 7405                    	je	short $MIF78
 34143                                  
 34144                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 34145 000057AE 263B05                  	cmp	ax,[es:di]
 34146 000057B1 EB03                    	jmp	short $MEN78
 34147                                  $MIF78:
 34148                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 34149 000057B3 2E3B05                  	cmp	ax,[cs:di]
 34150                                  $MEN78:
 34151                                  	;jne	short $MIF76
 34152                                  	;jmp	short $MSR76
 34153                                  	; 07/04/2023
 34154 000057B6 740B                    	je	short $MSR76 ; *
 34155                                  $MIF76:
 34156 000057B8 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 34157 000057B9 7405                    	jz	short $MEN76
 34158                                  
 34159 000057BB 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 34160 000057BE EBE5                    	jmp	short $MDO76			;;AN000;;
 34161                                  $MEN76:
 34162 000057C0 F9                      	stc					;;AN000;;
 34163                                  ;$MSR76:	; 07/04/2023
 34164                                  	;jc	short $MIF86			;;AN000;;
 34165                                  	; 07/04/2023
 34166                                  	;jc	short $MIF91
 34167 000057C1 EB11                    	jmp	short $MIF91 ;*
 34168                                  $MSR76:	; 07/04/2023 ; *	
 34169 000057C3 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 34170                                  	; 07/04/2023
 34171                                  	;clc					;;AN001;;
 34172 000057C6 7502                    	jne	short $MIF87
 34173                                  
 34174 000057C8 0E                      	push	cs				;;AN000;;
 34175 000057C9 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 34176                                  $MIF87:
 34177                                  	;add	di,[es:di+2]
 34178 000057CA 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 34179                                  $MIF86:
 34180                                  ;$MIF75:
 34181                                  	; 02/05/2023
 34182                                  	;jc	short $MIF91
 34183                                  $MIF75:	; 28/04/2023
 34184 000057CE 30ED                    	xor	ch,ch				;;AN000;;
 34185 000057D0 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 34186 000057D3 47                      	inc	di				;;AN000;; Increment past length
 34187                                  $MIF91:
 34188 000057D4 C606[5F9A]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 34189                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 34190 000057D9 C3                      	retn					;;AN000;; Return
 34191                                  
 34192                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34193                                  ;;
 34194                                  ;;  Proc Name:	SYSDISPMSG
 34195                                  ;;
 34196                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 34197                                  ;;		requested by the caller. It also provides function to display
 34198                                  ;;		messages when handles are not applicable (ie. DOS function calls
 34199                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 34200                                  ;;		defined previous to entry.
 34201                                  ;;
 34202                                  ;;		It is assumes that a PRELOAD function has already determined
 34203                                  ;;		the addressibilty internally to the message retriever services.
 34204                                  ;;  Inputs:
 34205                                  ;;
 34206                                  ;;  Outputs:
 34207                                  ;;
 34208                                  ;;  Psuedocode:
 34209                                  ;;		Save registers needed later
 34210                                  ;;		Get address of the message requested
 34211                                  ;;		IF Message number exists THEN
 34212                                  ;;		  IF replacable parameters were specified THEN
 34213                                  ;;		     Display message with replacable parms
 34214                                  ;;		  ELSE
 34215                                  ;;		     Display string without replacable parms
 34216                                  ;;		  ENDIF
 34217                                  ;;		  IF character input was requested THEN
 34218                                  ;;		     Wait for character input
 34219                                  ;;		  ENDIF
 34220                                  ;;		  Clear CARRY FLAG
 34221                                  ;;		ELSE
 34222                                  ;;		   Set CARRY FLAG
 34223                                  ;;		ENDIF
 34224                                  ;;		Return
 34225                                  ;;
 34226                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34227                                  
 34228                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34229                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 34230                                  	;
 34231                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34232                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5ACBh
 34233                                  SYSDISPMSG:
 34234                                  	;; Save registers and values needed later
 34235 000057DA 50                      	push	ax				;;AN000;; Save changed REGs
 34236 000057DB 53                      	push	bx				;;AN000;;
 34237 000057DC 51                      	push	cx				;;AN000;;
 34238 000057DD 55                      	push	bp				;;AN000;;
 34239 000057DE 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 34240 000057DF 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 34241 000057E0 52                      	push	dx				;;AN000;; Save Input/Class request
 34242                                  
 34243 000057E1 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 34244 000057E3 891E[5D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 34245                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 34246 000057E7 8836[629A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 34247                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 34248                                  
 34249                                  	;; Get address of the message requested
 34250 000057EB E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 34251                                  
 34252 000057EE 09C9                    	or	cx,cx				;;AN000;; Was message found?
 34253 000057F0 7427                    	jz	short $MIF93
 34254                                  						;;AN000;; Yes, Message address in ES:DI
 34255                                  	
 34256                                  	;; Test if replacable parameters were specified
 34257 000057F2 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 34258 000057F4 7505                    	jnz	short $MIF94
 34259                                  
 34260                                  	;; Display string without replacable parms
 34261 000057F6 E82800                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 34262 000057F9 EB03                    	jmp	short $MEN94
 34263                                  $MIF94:
 34264                                  	;; Display message with replacable parms
 34265 000057FB E88B01                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 34266                                  $MEN94:
 34267 000057FE 7214                    	jc	short $MIF97
 34268 00005800 5A                      	pop	dx				;;AN000;; Get Input/Class request
 34269 00005801 E8FC00                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 34270 00005804 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 34271 00005805 5F                      	pop	di				;;AN000;;
 34272                                  	
 34273                                  ; 15/06/2023 - MSDOS 5.0
 34274                                  ;	;jmp	short $MEN97 ; ***
 34275                                  ;	; 08/04/2023
 34276                                  ;	;jmp	short $MEN93 ; **
 34277                                  ;
 34278                                  ;	; 08/04/2023
 34279                                  ;;$MEN93:
 34280                                  ;	jc	short $MIF104
 34281                                  
 34282                                  	; 15/06/2023 Retro DOS v4.2 COMMAND.COM
 34283                                   	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5AF7h
 34284                                  
 34285                                  	; MSDOS 6.0 (MSDOS 6.22)
 34286                                  	; Test if character input was requested	;;AN000;;
 34287 00005806 08D2                    	or	dl,dl
 34288 00005808 7403                    	jz	short $MIF98
 34289                                  	;jz	short $MEN98 ; *
 34290                                  
 34291 0000580A E88B05                  	call	$M_WAIT_FOR_INPUT	; MSDOS 6.0 (to 6.22)
 34292                                  	; cf = 0 ; *
 34293                                  $MIF98:
 34294                                  	;jmp	short $MEN97
 34295                                  	;;jc	short $MIF104 ; *
 34296                                  $MEN98:
 34297                                  ;$MEN97:
 34298 0000580D 5D                      	pop	bp				;;AN000;;
 34299 0000580E 59                      	pop	cx				;;AN000;;
 34300 0000580F 5B                      	pop	bx				;;AN000;;
 34301                                  	; 15/06/2023
 34302                                  	;pop	ax	; MSDOS 5.0		;;AN000;;
 34303 00005810 83C402                  	add	sp,2	; MSDOS 6.0 (to 6.22)
 34304 00005813 C3                      	retn
 34305                                   
 34306                                  $MIF97:
 34307                                  	; 08/04/2023
 34308                                  	;add	sp,6				;;AN000;;
 34309                                  	;stc					;;AN000;; Reset carry flag
 34310                                  ;$MEN97: ; ***
 34311                                  	;jmp	short $MEN93
 34312                                  	; 08/04/2023
 34313                                  	;jmp	short $MIF104
 34314                                  	; 08/04/2023
 34315 00005814 83C40E                  	add	sp,14 ; 6+8
 34316 00005817 F9                      	stc
 34317 00005818 C3                      	retn
 34318                                  $MIF93:
 34319                                  	; 08/04/2023 - 15/06/2023
 34320                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 34321                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 34322                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5B06h
 34323 00005819 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 34324 0000581A 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 34325 0000581B 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 34326                                  	;stc	; * 				;;AN000;; Set carry flag
 34327                                  	; 08/04/2023
 34328                                  	;jmp	short $MIF104 ; *
 34329                                  
 34330                                  ;$MEN93: ; **
 34331                                  ;	jc	short $MIF104
 34332                                  ;$MEN97: ; 08/04/2023
 34333                                  ;	pop	bp				;;AN000;;
 34334                                  ;	pop	cx				;;AN000;;
 34335                                  ;	pop	bx				;;AN000;;
 34336                                  ;	pop	ax				;;AN000;;
 34337                                  ;	;jmp	short $MEN104
 34338                                  ;	; 08/04/2023
 34339                                  ;	retn
 34340                                  
 34341                                  $MIF104: ; *
 34342 0000581C 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 34343 0000581F F9                      	stc					;;AN000;;
 34344                                  $MEN104:
 34345 00005820 C3                      	retn					;;AN000;; Return
 34346                                  
 34347                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34348                                  ;;
 34349                                  ;;	PROC NAME: $M_DISPLAY_STRING
 34350                                  ;;
 34351                                  ;;	FUNCTION:  Will display or write string
 34352                                  ;;	INPUTS:    ES:DI points to beginning of message
 34353                                  ;;		   CX contains the length of string to write (if applicable)
 34354                                  ;;	OUTPUTS:   None
 34355                                  ;;	REGS Revised: None
 34356                                  ;;
 34357                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34358                                  
 34359                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34360                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34361                                  $M_DISPLAY_STRING:
 34362 00005821 50                      	push	ax				;;AN000;;
 34363 00005822 53                      	push	bx				;;AN000;;
 34364 00005823 52                      	push	dx				;;AN000;;
 34365 00005824 8B1E[5D9A]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 34366                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 34367                                  	
 34368 00005828 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 34369 0000582B 7505                    	jne	short $MIF107
 34370                                  
 34371 0000582D E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 34372 00005830 EB03                    	jmp	short $MEN107
 34373                                  $MIF107:
 34374 00005832 E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 34375                                  $MEN107:
 34376 00005835 730D                    	jnc	short $MIF110
 34377                                  	
 34378 00005837 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 34379                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 34380                                  	; 08/04/2023
 34381 00005839 31DB                    	xor	bx,bx
 34382 0000583B CD21                    	int	21h				;;AN000;;
 34383                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 34384                                  		; BX = version code (0000h for DOS 3.x)
 34385 0000583D 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 34386                                  $MEN110: ; 08/04/2023 ; ***
 34387 0000583F 83C406                  	add	sp,6				;;AN000;; Clean up stack
 34388 00005842 F9                      	stc					;;AN000;; Flag that there was an error
 34389                                  	;jmp	short $MEN110 ; ****
 34390                                  	; 08/04/2023
 34391 00005843 C3                      	retn
 34392                                  $MIF110:
 34393                                  	;cmp	bx,$M_NO_HANDLE
 34394 00005844 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 34395 00005847 7409                    	je	short $MIF112 ; *  ; cf = 0
 34396 00005849 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 34397 0000584B 7405                    	je	short $MIF113 ; ** ; cf = 0
 34398 0000584D E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 34399                                  	;add	sp,6				;;AN001;; Clean up stack
 34400                                  	;stc					;;AN001;; Flag that there was an error
 34401                                  	; 08/04/2023
 34402 00005850 EBED                    	jmp	short $MEN110 ; ***
 34403                                  	; 08/04/2023
 34404                                  ;$MIF112:
 34405                                  ;$MEN110: ; ****
 34406                                  	;jc	short $MIF117
 34407                                  $MIF112: ; 08/04/2023	; *
 34408                                  $MIF113:	; **
 34409 00005852 5A                      	pop	dx				;;AN000;; Restore regs
 34410 00005853 5B                      	pop	bx				;;AN000;;
 34411 00005854 58                      	pop	ax				;;AN000;;
 34412                                  $MIF117:
 34413 00005855 C3                      	retn
 34414                                  
 34415                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34416                                  ;;
 34417                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 34418                                  ;;
 34419                                  ;;	FUNCTION:  Will display a $ terminated string
 34420                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 34421                                  ;;	OUTPUTS:   None
 34422                                  ;;	REGS USED: AX,DX
 34423                                  ;;
 34424                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34425                                  
 34426                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34427                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34428                                  $M_DISPLAY_$_STRING:
 34429 00005856 1E                      	push	ds				;;AN000;;
 34430 00005857 06                      	push	es				;;AN000;;
 34431 00005858 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 34432                                  
 34433                                  	; 08/04/2023
 34434 00005859 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 34435                                  
 34436                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 34437 0000585B 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 34438 0000585E 7518                    	jne	short $MIF119			;;AN000;; No
 34439                                  	
 34440                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 34441 00005860 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 34442 00005863 CD21                    	int	21h				;;AN000;; Write character
 34443                                  		; DOS - DISPLAY OUTPUT
 34444                                  		; DL = character to send to standard output
 34445 00005865 1F                      	pop	ds				;;AN000;;
 34446 00005866 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 34447 00005868 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 34448 0000586B 1E                      	push	ds				;;AN000;;
 34449 0000586C 06                      	push	es				;;AN000;;
 34450 0000586D 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 34451 0000586E 7316                    	jnc	short $MIF120 ; *
 34452                                  
 34453 00005870 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 34454 00005874 CD21                    	int	21h				;;AN000;; Write character
 34455                                  		; DOS - DISPLAY OUTPUT
 34456                                  		; DL = character to send to standard output
 34457                                  	; 08/04/2023
 34458                                  	;clc					;;AN000;; Clear the DBCS indicator
 34459                                  ;$MIF120:
 34460 00005876 EB0D                    	jmp	short $MEN119
 34461                                  $MIF119:
 34462                                  	; 08/04/2023
 34463                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 34464                                  ;$MDO123:
 34465 00005878 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 34466                                  	;jz	short $MEN123
 34467                                  	; 18/04/2023
 34468 0000587A 740A                    	jz	short $MIF120 ; cf = 0
 34469                                  $MDO123: ; 08/04/2023
 34470 0000587C 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 34471 0000587F CD21                    	int	21h				;;AN002;; Display the character
 34472                                  		; DOS - DISPLAY OUTPUT
 34473                                  		; DL = character to send to standard output
 34474 00005881 47                      	inc	di				;;AN002;; Set pointer to next character
 34475 00005882 49                      	dec	cx				;;AN002;; Count this character
 34476 00005883 75F7                    	jnz	short $MDO123
 34477                                  ;$MEN123:
 34478                                  $MEN119:
 34479 00005885 F8                      	clc					;;AN000;;Char functions used don't return carry as error
 34480                                  $MIF120: ; 08/04/2023 ; *
 34481 00005886 1F                      	pop	ds				;;AN000;;
 34482 00005887 C3                      	retn
 34483                                  
 34484                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34485                                  ;;
 34486                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 34487                                  ;; truncates it at the Ctrl-Z if any present.
 34488                                  ;;
 34489                                  ;;	ENTRY:	ds:dx = String to be displayed
 34490                                  ;;		cx = number of chars to be displayed
 34491                                  ;;
 34492                                  ;;	EXIT:	cx = number of chars to be displayed
 34493                                  ;;
 34494                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34495                                  
 34496                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34497                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34498                                  scan_ctrlz:
 34499 00005888 57                      	push	di
 34500 00005889 50                      	push	ax
 34501 0000588A 06                      	push	es
 34502 0000588B 53                      	push	bx
 34503                                  
 34504 0000588C 89D7                    	mov	di,dx
 34505 0000588E 1E                      	push	ds
 34506 0000588F 07                      	pop	es   			;es:di points at string
 34507                                  
 34508 00005890 89CB                    	mov	bx,cx			;save current count
 34509                                  
 34510 00005892 B01A                    	mov	al,1Ah	; Ctrl-Z
 34511 00005894 FC                      	cld
 34512 00005895 F2AE                    	repne	scasb			;find first Ctrl-Z
 34513 00005897 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 34514                                  
 34515 00005899 29CB                    	sub	bx,cx
 34516 0000589B 4B                      	dec	bx			;bx = new count to display
 34517                                  noCtrlZ:
 34518 0000589C 89D9                    	mov	cx,bx			;cx = actual display count
 34519                                  
 34520 0000589E 5B                      	pop	bx
 34521 0000589F 07                      	pop	es
 34522 000058A0 58                      	pop	ax
 34523 000058A1 5F                      	pop	di
 34524                                  $MIF127:	; 08/04/2023
 34525 000058A2 C3                      	retn
 34526                                  
 34527                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34528                                  ;;
 34529                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 34530                                  ;;
 34531                                  ;;	FUNCTION:  Will display a string to a specified handle
 34532                                  ;;	INPUTS:    ES:DI points to beginning of message
 34533                                  ;;		   CX contains the number of bytes to write
 34534                                  ;;		   BX contains the handle to write to
 34535                                  ;;	OUPUTS:    None
 34536                                  ;;	REGS USED: AX,DX
 34537                                  ;;
 34538                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34539                                  
 34540                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34541                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34542                                  $M_DISPLAY_H_STRING:
 34543 000058A3 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 34544 000058A5 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 34545 000058A7 74F9                    	jz	short $MIF127
 34546                                  	
 34547 000058A9 1E                      	push	ds			;;AN000;;
 34548 000058AA 06                      	push	es			;;AN000;;
 34549 000058AB 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34550                                  	
 34551 000058AC B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34552 000058AE 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 34553                                  
 34554 000058B0 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 34555 000058B3 7528                    	jne	short $MIF128		;;AN000;; No
 34556                                  
 34557 000058B5 CD21                    	int	21h			;;AN000;; Write character
 34558                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34559                                  		; BX = file handle, CX = number of bytes to writ
 34560                                  
 34561 000058B7 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34562 000058B8 50                      	push	ax			;;AN000;;
 34563 000058B9 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 34564 000058BC E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 34565 000058BF 58                      	pop	ax			;;AN000;;
 34566 000058C0 1E                      	push	ds			;;AN000;;
 34567 000058C1 06                      	push	es			;;AN000;;
 34568 000058C2 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34569 000058C3 7306                    	jnc	short $MIF129
 34570                                  	
 34571 000058C5 F8                      	clc				;;AN000;; Clear the DBCS indicator
 34572 000058C6 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34573 000058C8 42                      	inc	dx			;;AN000;; Point to next character
 34574 000058C9 CD21                    	int	21h			;;AN000;; Write character
 34575                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34576                                  		; BX = file handle, CX = number of bytes to write, 
 34577                                  $MIF129:
 34578                                  ;SR;
 34579                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 34580                                  ;0 chars written making the caller think there was an error writing. To 
 34581                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 34582                                  ;the char was written, thus fooling the caller.
 34583                                  
 34584 000058CB 9C                      	pushf				;save flags
 34585 000058CC 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 34586 000058D0 7502                    	jne	short m_popf_j		;no, continue
 34587                                  
 34588 000058D2 89C8                    	mov	ax,cx			;yes, fake as if it was written
 34589                                  m_popf_j:
 34590                                  	; 08/04/2023
 34591                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34592 000058D4 EB01                    	jmp	short m_popf		;restore flags
 34593                                  
 34594                                  ; 07/04/2023
 34595                                  ; ---------------------------
 34596                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 34597                                  ; ---------------------------
 34598                                  	; $M_POPF macro
 34599                                  	;jmp	short $+3
 34600                                  intret:
 34601 000058D6 CF                      	iret
 34602                                  m_popf:
 34603 000058D7 0E                      	push	cs
 34604 000058D8 E8FBFF                  	call	intret
 34605                                  	;;; end macro	
 34606                                  ; ---------------------------
 34607                                  
 34608 000058DB EB18                    	jmp	short $MEN128
 34609                                  
 34610                                  $MIF128:
 34611                                  ;SR;
 34612                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 34613                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 34614                                  
 34615 000058DD 55                      	push	bp			; M007
 34616 000058DE 51                      	push	cx
 34617 000058DF E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 34618 000058E2 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 34619 000058E4 59                      	pop	cx			;get old count back ;M007
 34620                                  	
 34621 000058E5 CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 34622                                  	;jnc	short chk_count		;no error, adjust return count
 34623                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 34624                                  	; 08/04/2023
 34625 000058E7 720B                    	jc	short m_cnt_ok
 34626                                  ;M007
 34627                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 34628                                  ;return count will be much less and if this returns to the caller we can get
 34629                                  ;spurious error messages. We check here if the count returned is same as
 34630                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 34631                                  ;case, we fake it as if all bytes have been written. If the return count
 34632                                  ;does not match either count, then we had some other disk error (such as
 34633                                  ;insufficient disk space) and we pass it through
 34634                                  
 34635                                  chk_count:
 34636 000058E9 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 34637 000058EB 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 34638 000058ED 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 34639 000058EF F8                      	clc				;no error either way ;M007
 34640 000058F0 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 34641 000058F2 89C8                    	mov	ax,cx			;return old count ;M007
 34642                                  m_cnt_ok:				; M007
 34643 000058F4 5D                      	pop	bp			; M007
 34644                                  $MEN128:
 34645 000058F5 1F                      	pop	ds			;;AN000;;
 34646                                  ;$MIF127: ; 08/04/2023
 34647 000058F6 C3                      	retn
 34648                                  
 34649                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34650                                  ;;
 34651                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 34652                                  ;;
 34653                                  ;;	FUNCTION:  Will set registers for extended error #39
 34654                                  ;;	INPUTS:    None
 34655                                  ;;	OUPUTS:    AX,BX,CX set
 34656                                  ;;	REGS USED:
 34657                                  ;;
 34658                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34659                                  
 34660                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34661                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 34662                                  
 34663                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34664                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5BFAh
 34665                                  
 34666                                  $M_GET_EXT_ERR_39:
 34667 000058F7 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 34668                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 34669 000058FA BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 34670                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 34671 000058FD B501                    	mov	ch,1			;AN001;
 34672 000058FF C3                      	retn				;AN001;
 34673                                  
 34674                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34675                                  ;;
 34676                                  ;;	PROC NAME: $M_ADD_CRLF
 34677                                  ;;
 34678                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 34679                                  ;;	INPUTS:    DX contains the Input/Class requested
 34680                                  ;;	OUTPUTS:   None
 34681                                  ;;	REGS Revised: CX,ES,DI
 34682                                  ;;
 34683                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34684                                  
 34685                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34686                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34687                                  $M_ADD_CRLF:
 34688                                  	;cmp	dh,0FFh
 34689 00005900 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 34690 00005903 7411                    	je	short $MIF134		;;AN004;; Yes
 34691 00005905 F6C680                  	test	dh,80h ; $M_NO_CRLF_MASK ;;AN004;; Are we to supress the CR LF?
 34692 00005908 750C                    	jnz	short $MIF135
 34693                                  					;;AN004;; No	
 34694 0000590A 1E                      	push	ds			;;AN004;;
 34695 0000590B 07                      	pop	es			;;AN004;; Set ES to data segment
 34696 0000590C 8D3E[609A]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 34697                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 34698 00005910 B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 34699 00005913 E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 34700                                  $MIF135:
 34701                                  $MIF134:
 34702 00005916 C3                      	retn				;;AN004;; Return
 34703                                  
 34704                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34705                                  ;;
 34706                                  ;;	PROC NAME: $M_IS_IT_DBCS
 34707                                  ;;
 34708                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 34709                                  ;;	INPUTS:    AL contains the byte to be checked
 34710                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 34711                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 34712                                  ;;	REGS USED: All restored
 34713                                  ;;
 34714                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34715                                  
 34716                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34717                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34718                                  $M_IS_IT_DBCS:
 34719 00005917 06                      	push	es			;;AN000;; Save Extra Segment register
 34720 00005918 57                      	push	di			;;AN000;; Save DI register
 34721                                  
 34722 00005919 C43E[599A]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 34723                                  	;les	di,[$M_RT+60]		;;AN000;;
 34724 0000591D 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 34725 0000591F 7417                    	jz	short $MIF138		;;AN000;; No
 34726                                  $MDO139:
 34727 00005921 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 34728                                  					;;AN000;; Is this the terminating flag?
 34729 00005925 F8                      	clc				;;AN000;;
 34730 00005926 7410                    	jz	short $MEN139
 34731                                  					;;AN000;; No
 34732 00005928 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 34733 0000592B 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 34734 0000592D 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 34735 00005931 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 34736                                  					;;AN000;; Yes
 34737 00005933 F9                      	stc				;;AN000;; Set carry flag
 34738                                  $MIF141:
 34739 00005934 47                      	inc	di			;;AN000;;
 34740 00005935 47                      	inc	di			;;AN000;;
 34741 00005936 EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 34742                                  $MEN139:
 34743                                  $MIF138:
 34744 00005938 5F                      	pop	di			;;AN000;; Restore DI register
 34745 00005939 07                      	pop	es			;;AN000;; Restore Extra Segment register
 34746 0000593A C3                      	retn				;;AN000;; Return
 34747                                  
 34748                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34749                                  ;;
 34750                                  ;;	PROC NAME: $M_CONVERT2ASC
 34751                                  ;;
 34752                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 34753                                  ;;	INPUTS: DX:AX contains the number to be converted
 34754                                  ;;		$M_RT_DIVISOR contains the divisor
 34755                                  ;;	OUTPUTS: CX contains the number of characters
 34756                                  ;;		Top of stack  --> Last character
 34757                                  ;;				     . . .
 34758                                  ;;		Bot of stack  --> First character
 34759                                  ;;	REGS USED:
 34760                                  ;;
 34761                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34762                                  
 34763                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34764                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34765                                  $M_CONVERT2ASC:
 34766 0000593B 8F06[639A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34767                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 34768                                  	
 34769 0000593F 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 34770 00005941 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 34771 00005942 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 34772                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 34773 00005943 F736[679A]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34774                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 34775 00005947 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 34776                                  						;;AN000;;  and save reduced High Word in BX
 34777 00005948 F736[679A]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34778                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 34779                                  
 34780 0000594C 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 34781 0000594F 7605                    	jna	short $MIF146			;;AN000;; 0-9
 34782 00005951 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 34783 00005954 EB03                    	jmp	short $MEN146
 34784                                  $MIF146:
 34785 00005956 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 34786                                  $MEN146:
 34787 00005959 52                      	push	dx				;;AN000;; Save the digit on the stack
 34788 0000595A 41                      	inc	cx				;;AN000;; Count that digit
 34789 0000595B 09C0                    	or	ax,ax				;;AN000;; Are we done?
 34790 0000595D 7504                    	jnz	short $MLL149			;;AN000;; No
 34791 0000595F 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 34792 00005961 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 34793                                  $MLL149:
 34794 00005963 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 34795                                  ; 28/04/2023
 34796 00005966 740A                    	je	short $MIF153
 34797                                  ;	jne	short $MIF150			;;AN000;; No
 34798                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34799                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34800                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34801                                  ;	;jne	short $MIF151
 34802                                  ;	; 09/04/2023
 34803                                  ;	jne	short $MEN150
 34804                                  ;						;;AN000;; Yes
 34805                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34806                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34807                                  ;	inc	cx				;;AN000;;
 34808                                  ;$MIF151:
 34809                                  ;	jmp	short $MEN150
 34810                                  
 34811                                  $MIF150:
 34812                                  	; 15/06/2023 (6)
 34813                                  	; MSDOS 6.0
 34814                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 34815                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34816                                  	; 15/06/2023 (7)
 34817                                  	; MSDOS 6.22
 34818                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 34819 00005968 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34820                                  
 34821                                  ; 28/04/2023
 34822 0000596B 7405                    	je	short $MIF153
 34823                                  ;	jne	short $MIF154			;;AN000;; No
 34824                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34825                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34826                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34827                                  ;	;jne	short $MIF155			;;AN000;; No
 34828                                  ;	; 09/04/2023
 34829                                  ;	jne	short $MEN154
 34830                                  ;						;;AN000;; Yes
 34831                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34832                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34833                                  ;	inc	cx				;;AN000;;
 34834                                  ;$MIF155:
 34835                                  ;	jmp	short $MEN154
 34836                                  
 34837                                  $MIF154:
 34838                                  	; 15/06/2023 (9)
 34839                                  	; MSDOS 6.0
 34840                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh
 34841                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34842                                  	; 15/06/2023 (11)
 34843                                  	; MSDOS 6.22
 34844                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah
 34845 0000596D 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34846 00005970 750B                    	jne	short $MIF158			;;AN000;; No
 34847                                  ; 28/04/2023
 34848                                  $MIF153:
 34849                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34850 00005972 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34851                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34852 00005976 7505                    	jne	short $MIF159			;;AN000;; No
 34853                                  						;;AN000;; Yes
 34854 00005978 FF36[709A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34855                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34856 0000597C 41                      	inc	cx				;;AN000;;
 34857                                  $MIF159:
 34858                                  $MIF158:
 34859                                  $MEN154:
 34860                                  $MEN150:					;;AN000;;
 34861 0000597D 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 34862                                  						;;AN000;;  and Revised Low Word
 34863 0000597E 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34864                                  	; 28/04/2023
 34865 00005980 EBC1                    	jmp	short $MDO145
 34866                                  ;$MEN145:
 34867                                  	; 28/04/2023
 34868                                  	;xor	ax,ax				;;AN000;; Reset remainder
 34869                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 34870 00005982 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34871 00005984 FF36[639A]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34872                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 34873 00005988 C3                      	retn					;;AN000;; Return
 34874                                  
 34875                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34876                                  ;;
 34877                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 34878                                  ;;
 34879                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 34880                                  ;;	INPUTS:    ES:DI points to beginning of message
 34881                                  ;;		   DS:SI points to first sublist structure in chain
 34882                                  ;;		   BX contains the handle to write to (if applicable)
 34883                                  ;;		   CX contains the length of string to write (before substitutions)
 34884                                  ;;		   BP contains the count of replacables
 34885                                  ;;
 34886                                  ;;	OUTPUTS:
 34887                                  ;;	REGS USED: All
 34888                                  ;;
 34889                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34890                                  
 34891                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34892                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 34893                                  
 34894                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34895                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:54DBh
 34896                                  
 34897                                  $M_DISPLAY_MESSAGE:
 34898                                  ; $DO						;;AN000;; Note: DS:SI -> message
 34899                                  $MDO165:
 34900 00005989 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 34901 0000598B 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 34902                                  ;; $IF NZ					;;AN000;; No
 34903 0000598D 741F                    	jz	short $MIF166			;;AN000;; Yes
 34904                                  	;mov	ah,"%"				;;AN000;; Prepare to scan for %
 34905                                  	;mov	al,0				;;AN004;;
 34906                                  	; 12/08/2024
 34907 0000598F B80025                  	mov	ax,2500h
 34908                                  ;; $DO						;;AN000;; Scan through string until %
 34909                                  $MDO167:
 34910 00005992 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 34911                                  ;; $LEAVE E,AND					;;AN000;; No
 34912 00005995 750A                    	jne	short $MLL168
 34913 00005997 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 34914                                  ;; $LEAVE NE,AND				;;AN000;; No
 34915 0000599B 7404                    	je	short $MLL168
 34916                                  
 34917 0000599D 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 34918                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 34919 0000599F 750D                    	jne	short $MEN167 ; 12/08/2024
 34920                                  $MLL168:
 34921 000059A1 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 34922 000059A4 E870FF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 34923                                  ;;; $IF C					;;AN004;; Yes
 34924 000059A7 7301                    	jnc	short $MIF169
 34925 000059A9 47                      	inc	di				;;AN004;; Increment past second part
 34926                                  ;;; $ENDIF					;;AN004;;
 34927                                  $MIF169:
 34928 000059AA 47                      	inc	di				;;AN000;; Next character in string
 34929 000059AB 42                      	inc	dx				;;AN000;; Size = Size + 1
 34930                                  	;dec	cx				;;AN000;; Decrement total size
 34931                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 34932                                  	;jnz	short $MDO167
 34933                                  	; 12/08/2024
 34934 000059AC E2E4                    	loop	$MDO167
 34935                                  $MEN167:
 34936                                  ;; $ENDIF					;;AN000;;
 34937                                  $MIF166:
 34938 000059AE 56                      	push	si				;;AN000;; Save beginning of sublists
 34939 000059AF 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 34940 000059B1 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 34941                                  ;; $IF NZ					;;AN000;; Yes
 34942 000059B3 7431                    	jz	short $MIF173
 34943 000059B5 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 34944                                  
 34945                                  ;; Search through sublists to find applicable one
 34946                                  
 34947 000059B6 833E[659A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34948                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34949                                  ;;; $IF E					;;AN000;; No
 34950 000059BB 7529                    	jne	short $MIF174
 34951                                  ;;; $SEARCH					;;AN000;;
 34952                                  $MDO175:
 34953                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 34954 000059BD 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 34955                                  	;mov	al,[si+6]
 34956 000059C0 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 34957                                  	; 28/04/2023					
 34958 000059C2 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 34959                                  ;;; $EXITIF E					;;AN000;;
 34960                                  	;jne	short $MIF175
 34961                                  ;;; $ORELSE					;;AN000;; No
 34962                                  	;jmp	short $MSR175
 34963                                  	; 28/04/2023
 34964 000059C6 741E                    	je	short $MSR175
 34965                                  $MIF175:
 34966 000059C8 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 34967                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 34968 000059CA 7504                    	jne	short $MLL178
 34969 000059CC 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 34970                                  ;;; $LEAVE Z					;;AN000;; No
 34971 000059CE 7404                    	jz	short $MEN175
 34972                                  $MLL178:
 34973                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 34974                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 34975                                  	;;add	si,[si+0]
 34976 000059D0 0334                    	add	si,[si]
 34977                                  ;;; ENDLOOP					;;AN000;; Yes
 34978 000059D2 EBE9                    	jmp	short $MDO175
 34979                                  $MEN175:
 34980 000059D4 803E[629A]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 34981                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 34982                                  ;;;; $IF E					;;AN004;; Yes
 34983 000059D9 7508                    	jne	short $MIF180
 34984 000059DB 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 34985 000059DC 42                      	inc	dx				;;AN000;;  at the end of the message
 34986 000059DD 49                      	dec	cx				;;AN000;; Adjust message length
 34987 000059DE 49                      	dec	cx				;;AN000;;
 34988 000059DF 4F                      	dec	di				;;AN000;; Adjust ending address of message
 34989 000059E0 4F                      	dec	di				;;AN000;;
 34990                                  ;;;; $ELSE					;;AN004;; No
 34991 000059E1 EB03                    	jmp	short $MEN180
 34992                                  $MIF180:
 34993 000059E3 BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 34994                                  ;;;; $ENDIF					;;AN004;;
 34995                                  $MEN180:
 34996                                  ;;; $ENDSRCH					;;AN000;;
 34997                                  $MSR175:
 34998                                  ;; $ENDIF					;;AN000;;
 34999                                  $MIF174:
 35000                                  ; $ENDIF					;;AN000;;
 35001                                  $MIF173:
 35002                                  ;; Prepare and display this part of message
 35003                                  
 35004 000059E6 57                      	push	di				;;AN000;; Save pointer to replace number
 35005 000059E7 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 35006 000059E9 E835FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 35007 000059EC 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 35008 000059ED 59                      	pop	cx				;;AN000;; Clean up stack in case error
 35009                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 35010                                  	;jnc	short $MXL3
 35011                                  	;jmp	$MEN165
 35012                                  	; 02/05/2023
 35013 000059EE 7214                    	jc	short $MEN165
 35014                                  $MXL3:
 35015 000059F0 51                      	push	cx				;;AN000;;
 35016                                  
 35017                                  ;; Save and reset pointer registers
 35018                                  
 35019 000059F1 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 35020                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 35021 000059F3 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 35022                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 35023                                  ; $IF NE					;;AN000;; No
 35024 000059F7 7412                    	je	short $MIF187			;;AN000;; Yes			
 35025 000059F9 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 35026                                  ;; $IF NZ					;;AN000;; No
 35027 000059FB 7406                    	jz	short $MIF188			;;AN000;; Yes
 35028 000059FD 49                      	dec	cx				;;AN000;; Decrement total size (%)
 35029 000059FE 49                      	dec	cx				;;AN000;; Decrement total size (#)
 35030 000059FF 47                      	inc	di				;;AN000;; Go past %
 35031 00005A00 47                      	inc	di				;;AN000;; Go past replace number
 35032                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 35033                                  	;jmp	short $MEN188
 35034                                  	; 28/04/2023
 35035 00005A01 EB15                    	jmp	short $MEN187
 35036                                  $MIF188:
 35037 00005A03 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 35038                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 35039                                  $MEN188:
 35040                                  ; $ELSE 					;;AN000;;
 35041                                  	;jmp	short $MEN187
 35042                                  	; 28/04/2023
 35043                                  	; zf = 1
 35044                                  	;jmp	short $MEN165 
 35045                                  
 35046                                  ; 28/04/2023
 35047                                  $MXL4:
 35048                                  $MLL214:
 35049                                  $MEN165:
 35050 00005A04 C706[659A]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 35051                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 35052                                  						;;AN000;; Reset message number to null
 35053 00005A0A C3                      	retn					;;AN000;; Return
 35054                                  
 35055                                  $MIF187:
 35056 00005A0B 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 35057                                  ;; $IF Z					;;AN004;; No
 35058                                  	;jnz	short $MIF192
 35059                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 35060                                  ;; $ELSE					;;AN000;; No
 35061                                  	;jmp	short $MEN192
 35062                                  	; 28/04/2023
 35063 00005A0D 74F4                    	jz	short $MIF188
 35064                                  $MIF192:
 35065 00005A0F 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 35066                                  ;;; $IF Z					;;AN004;; No
 35067 00005A12 7502                    	jnz	short $MIF194
 35068 00005A14 31C9                    	xor	cx,cx				;;AN004;;
 35069                                  ;;; $ENDIF					;;AN000;;
 35070                                  $MIF194:
 35071 00005A16 09FF                    	or	di,di				;;AN004;; Turn ZF off
 35072                                  ;; $ENDIF					;;AN000;;
 35073                                  $MEN192:
 35074                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 35075                                  $MEN187:
 35076                                  ; $LEAVE Z					;;AN000;;
 35077 00005A18 74EA                    	jz	short $MEN165
 35078                                  	;
 35079 00005A1A 55                      	push	bp				;;AN000;; Save the replace count
 35080 00005A1B 57                      	push	di				;;AN000;; Save location to complete message
 35081 00005A1C 06                      	push	es				;;AN000;;
 35082 00005A1D 51                      	push	cx				;;AN000;; Save size of the rest of the message
 35083 00005A1E 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 35084                                  
 35085                                  ;; Determine what action is required on parameter
 35086                                  
 35087 00005A20 833E[659A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 35088                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 35089                                  ; $IF E						;;AN000;;
 35090 00005A25 753B                    	jne	short $MIF199
 35091                                  
 35092                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 35093 00005A27 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35094                                  	;test	byte [si+7],0Fh			;;AN000;;
 35095                                  ;; $IF Z					;;AN000;;
 35096 00005A2B 7508                    	jnz	short $MIF200
 35097                                  
 35098                                  ;; Character type requested
 35099                                  
 35100                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 35101 00005A2D C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35102                                  	;les	di,[si+2]
 35103 00005A30 E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 35104                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 35105 00005A33 EB28                    	jmp	short $MEN200
 35106                                  $MIF200:
 35107                                  ;; ENDIF					;;AN000;;
 35108                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35109 00005A35 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35110                                  	;test	byte [si+7],0Dh			;;AN000;;
 35111                                  ;; $IF Z,OR					;;AN000;;
 35112 00005A39 740C                    	jz	short $MLL202
 35113                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 35114 00005A3B F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35115                                  	;test	byte [si+7],0Eh			;;AN000;;
 35116                                  ;;; $IF Z,OR					;;AN000;;
 35117 00005A3F 7406                    	jz	short $MLL202
 35118                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 35119 00005A41 F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 35120                                  	;test	byte [si+7],0Ch			;;AN000;;
 35121                                  ;;;; $IF Z 					;;AN000;;
 35122 00005A45 7508                    	jnz	short $MIF202
 35123                                  $MLL202:
 35124                                  
 35125                                  ;; Numeric type requested
 35126                                  
 35127                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 35128 00005A47 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35129                                  	;les	di,[si+2]
 35130 00005A4A E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 35131                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 35132 00005A4D EB0E                    	jmp	short $MEN202
 35133                                  $MIF202:
 35134                                  ;;;; ENDIF					;;AN000;;
 35135                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 35136 00005A4F F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 35137                                  	;test	byte [si+7],0Bh			;;AN000;;
 35138                                  ;;;; $IF E					;;AN000;;
 35139 00005A53 7505                    	jnz	short $MIF204
 35140                                  
 35141                                  ;; Date type requested
 35142                                  
 35143 00005A55 E8EC01                  	call	$M_DATE_REPLACE			;;AN000;;
 35144                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 35145 00005A58 EB03                    	jmp	short $MEN204
 35146                                  $MIF204:					;;AN000;;
 35147                                  
 35148                                  ;; Time type requested (Default if we have not matched until here)
 35149                                  
 35150 00005A5A E89E02                  	call	$M_TIME_REPLACE			;;AN000;;
 35151                                  
 35152                                  ;;;; $ENDIF					;;AN000;;
 35153                                  $MEN204:
 35154                                  ;;; $ENDIF					;;AN000;;
 35155                                  $MEN202:
 35156                                  ;; $ENDIF					;;AN000;;
 35157                                  $MEN200:
 35158                                  
 35159                                  ;; With the replace information of the Stack, display the replaceable field
 35160                                  
 35161 00005A5D E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 35162                                  
 35163                                  ;; None of the above - Extended/Parse replace
 35164                                  ; $ELSE 					;;AN000;;
 35165 00005A60 EB03                    	jmp	short $MEN199
 35166                                  $MIF199:
 35167 00005A62 E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 35168                                  ; $ENDIF					;;AN000;;
 35169                                  $MEN199:
 35170                                  
 35171                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 35172                                  
 35173                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 35174 00005A65 7207                    	jc	short $MIF211
 35175                                  	;
 35176 00005A67 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 35177 00005A68 07                      	pop	es				;;AN000;; Get address of the rest of the message
 35178 00005A69 5F                      	pop	di				;;AN000;;
 35179 00005A6A 5D                      	pop	bp				;;AN000;; Get replacment count
 35180 00005A6B 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 35181                                  ; $ELSE						;;AN000;;
 35182 00005A6C EB03                    	jmp	short $MEN211
 35183                                  $MIF211:
 35184 00005A6E 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 35185                                  	; 28/04/2023
 35186                                  	;stc					;;AN000;;
 35187                                  ; $ENDIF					;;AN000;;
 35188                                  $MEN211:
 35189 00005A71 833E[659A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 35190                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 35191                                  ; $ENDDO NE,OR					;;AN000;;
 35192 00005A76 758C                    	jne	short $MLL214
 35193                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 35194                                  	; 10/04/2023
 35195                                  	;jc	short $MXL4
 35196 00005A78 E90EFF                  	jmp	$MDO165
 35197                                  
 35198                                  ; 28/04/2023
 35199                                  ;$MXL4:
 35200                                  ;$MLL214:
 35201                                  ;$MEN165:
 35202                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 35203                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 35204                                  ;						;;AN000;; Reset message number to null
 35205                                  ;	retn					;;AN000;; Return
 35206                                  
 35207                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35208                                  ;;
 35209                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 35210                                  ;;
 35211                                  ;;	FUNCTION:
 35212                                  ;;	INPUTS:
 35213                                  ;;	OUPUTS:
 35214                                  ;;
 35215                                  ;;	REGS USED:
 35216                                  ;;
 35217                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35218                                  
 35219                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35220                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35221                                  
 35222                                  $M_EXT_PAR_REPLACE:
 35223 00005A7B 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35224 00005A7D A1[659A]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 35225                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 35226 00005A80 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35227                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 35228 00005A86 E8B2FE                  	call	$M_CONVERT2ASC			;;AN000;;
 35229                                  $MDO215:
 35230 00005A89 58                      	pop	ax				;;AN000;; Get character in register
 35231 00005A8A 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35232                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 35233 00005A8E 43                      	inc	bx				;;AN000;; Increase buffer count
 35234 00005A8F 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 35235 00005A92 7503                    	jne	short $MIF216			;;AN000;; No
 35236 00005A94 E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35237                                  $MIF216:
 35238 00005A97 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 35239 00005A99 75EE                    	jnz	short $MDO215
 35240                                  
 35241 00005A9B B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 35242 00005A9E 8987[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 35243                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 35244 00005AA2 43                      	inc	bx				;;AN000;; Increase buffer count
 35245 00005AA3 43                      	inc	bx				;;AN000;; Increase buffer count
 35246                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35247                                  	;retn					;;AN000::
 35248                                  	; 11/04/2023
 35249                                  	;jmp	$M_FLUSH_BUF
 35250                                  
 35251                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35252                                  ;;
 35253                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 35254                                  ;;
 35255                                  ;;	FUNCTION: Display the contents of the temporary buffer
 35256                                  ;;	INPUTS: DI contains the number of bytes to display
 35257                                  ;;	OUTPUTS: BX reset to zero
 35258                                  ;;
 35259                                  ;;	REGS USED:
 35260                                  ;;
 35261                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35262                                  	
 35263                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35264                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 35265                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35266                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5E95h
 35267                                  $M_FLUSH_BUF:
 35268 00005AA4 51                      	push	cx				;;AN000;; Save changed regs
 35269 00005AA5 06                      	push	es				;;AN000;;
 35270 00005AA6 57                      	push	di				;;AN000;;
 35271 00005AA7 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 35272 00005AA8 07                      	pop	es				;;AN000;;
 35273 00005AA9 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 35274 00005AAB 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 35275 00005AAD 8D3E[699A]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35276                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 35277 00005AB1 E86DFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 35278 00005AB4 7204                    	jc	short $MIF314
 35279 00005AB6 5F                      	pop	di				;;AN000;; No, Restore changed regs
 35280 00005AB7 07                      	pop	es				;;AN000;;
 35281 00005AB8 59                      	pop	cx				;;AN000;;
 35282                                  	;jmp	short $MEN314
 35283                                  	; 11/04/2023
 35284 00005AB9 C3                      	retn
 35285                                  $MIF314:
 35286 00005ABA 83C406                  	add	sp,6				;;AN000;; Fix stack
 35287 00005ABD F9                      	stc					;;AN000;;
 35288                                  $MEN314:
 35289 00005ABE C3                      	retn					;;AN000;; Return
 35290                                  
 35291                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35292                                  ;;
 35293                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35294                                  
 35295                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35296                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 35297                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35298                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5DD6h
 35299                                  $M_DISPLAY_REPLACE:
 35300 00005ABF 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 35301                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 35302 00005AC1 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 35303                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 35304 00005AC5 7511                    	jne	short $MIF276
 35305                                  	
 35306 00005AC7 C787[699A]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 35307                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 35308                                  	
 35309 00005ACD 43                      	inc	bx				;;AN000;; Increment count
 35310 00005ACE 43                      	inc	bx				;;AN000;; Increment count
 35311                                  	
 35312 00005ACF C687[699A]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h ; $M_SPACE
 35313                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 35314                                  	
 35315 00005AD4 43                      	inc	bx				;;AN000;; Increment count
 35316 00005AD5 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 35317                                  $MIF276:
 35318 00005AD8 5D                      	pop	bp				;;AN000;; Remember the return address
 35319 00005AD9 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 35320 00005ADB 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 35321                                  
 35322 00005ADD 880E[5F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 35323                                  	;mov	[$M_RT+66],cl
 35324                                  	
 35325                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 35326 00005AE1 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 35327                                  	;mov	al,[si+9]
 35328                                  	
 35329 00005AE4 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 35330 00005AE6 761E                    	jna	short $MIF278
 35331 00005AE8 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 35332 00005AEA 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 35333                                  	
 35334                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 35335 00005AEC F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 35336                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 35337 00005AF0 7414                    	jz	short $MIF279			;;AN000;; No
 35338                                  $MDO280:
 35339                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 35340 00005AF2 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35341                                  	;mov	al,[si+0Ah]
 35342 00005AF5 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35343                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 35344                                  	
 35345 00005AF9 43                      	inc	bx				;;AN000;;
 35346 00005AFA 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 35347 00005AFD 7503                    	jne	short $MIF281
 35348 00005AFF E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35349                                  $MIF281:
 35350 00005B02 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 35351 00005B04 75EC                    	jnz	short $MDO280
 35352                                  $MIF279:
 35353                                  $MIF278:
 35354                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 35355 00005B06 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 35356                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 35357 00005B0A 740C                    	je	short $MIF286
 35358                                  	
 35359                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 35360 00005B0C 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 35361                                  	;;cmp	byte [si+8],cl
 35362 00005B0F 7307                    	jnb	short $MIF287
 35363                                  
 35364                                  	; 03/05/2023
 35365                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 35366                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35367                                  	;;sub	cl,[si+8]
 35368 00005B11 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 35369                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 35370                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35371                                  	;;mov	cl,[si+8]
 35372                                  	; 03/05/2023
 35373 00005B13 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35374 00005B16 28CA                    	sub	dl,cl
 35375                                  $MIF287:
 35376                                  $MIF286:
 35377 00005B18 09C9                    	or	cx,cx				;;AN000;;
 35378 00005B1A 7424                    	jz	short $MIF290			;;AN000;;
 35379                                  $MDO291:
 35380                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 35381 00005B1C F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35382                                  	;test	byte [si+7],0Fh			;;AN000;;
 35383 00005B20 750C                    	jnz	short $MIF292
 35384                                  
 35385                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 35386 00005B22 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35387                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 35388 00005B26 7406                    	jz	short $MIF292			;;AN000;; No
 35389                                  
 35390 00005B28 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 35391 00005B2B 47                      	inc	di				;;AN000;; Next character in string
 35392 00005B2C EB01                    	jmp	short $MEN292
 35393                                  $MIF292:
 35394 00005B2E 58                      	pop	ax				;;AN000;; Get character in register
 35395                                  $MEN292:
 35396                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 35397 00005B2F 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35398                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 35399                                  	; 03/05/2023
 35400 00005B33 43                      	inc	bx				;;AN000;; Increase buffer count
 35401 00005B34 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 35402 00005B37 7503                    	jne	short $MIF295			;;AN000;;
 35403 00005B39 E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35404                                  $MIF295:
 35405 00005B3C FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 35406 00005B3E 75DC                    	jnz	short $MDO291
 35407                                  $MIF290:
 35408                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 35409 00005B40 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 35410                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 35411 00005B44 7518                    	jnz	short $MIF299			;;AN000;; Yes
 35412 00005B46 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 35413 00005B48 7414                    	jz	short $MIF300
 35414                                  $MDO301:
 35415                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 35416 00005B4A 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35417                                  	;mov	al,[si+0Ah]
 35418                                  
 35419                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 35420 00005B4D 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35421                                  	; 03/05/2023
 35422                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 35423                                  
 35424 00005B51 43                      	inc	bx				;;AN000;;
 35425 00005B52 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 35426 00005B55 7503                    	jne	short $MIF302			;;AN000;; No
 35427                                  						;;AN000;; Yes
 35428 00005B57 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35429                                  $MIF302:
 35430 00005B5A FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 35431 00005B5C 75EC                    	jnz	short $MDO301			;;AN000;;
 35432                                  $MIF300:
 35433                                  $MIF299:
 35434                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 35435 00005B5E F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35436                                  	;test	byte [si+7],0Fh			;;AN000;;
 35437 00005B62 7506                    	jnz	short $MIF307
 35438                                  	
 35439                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 35440 00005B64 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35441                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 35442                                  	; 11/04/2023
 35443                                  	;jz	short $MIF307			;;AN000;;
 35444                                  	;jmp	short $MEN307			;;AN000;;
 35445 00005B68 750C                    	jnz	short $MEN307
 35446                                  $MIF307:
 35447 00005B6A 08D2                    	or	dl,dl				;;AN000;;
 35448 00005B6C 7408                    	jz	short $MIF309			;;AN000;;
 35449                                  $MDO310:
 35450 00005B6E 8F06[639A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 35451                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 35452 00005B72 FECA                    	dec	dl				;;AN000;; Are we done?
 35453 00005B74 75F8                    	jnz	short $MDO310
 35454                                  $MIF309:
 35455                                  $MEN307:
 35456 00005B76 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 35457 00005B79 55                      	push	bp				;;AN000;; Restore the return address
 35458 00005B7A C3                      	retn					;;AN000;;
 35459                                  
 35460                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35461                                  ;;
 35462                                  ;;	PROC NAME: $M_CHAR_REPLACE
 35463                                  ;;
 35464                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 35465                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35466                                  ;;		ES:DI contains the VALUE from SUBLIST
 35467                                  ;;	OUTPUTS: CX contains number of characters on stack
 35468                                  ;;		 Top of stack  --> Last character
 35469                                  ;;					. . .
 35470                                  ;;		 Bot of stack  --> First character
 35471                                  ;;
 35472                                  ;;	OTHER REGS Revised: AX
 35473                                  ;;
 35474                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35475                                  
 35476                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35477                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35478                                  $M_CHAR_REPLACE:
 35479 00005B7B 5D                      	pop	bp				;;AN000;; Save return address
 35480                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 35481 00005B7C F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 35482                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 35483 00005B80 7512                    	jnz	short $MIF317			;;AN000;; No
 35484 00005B82 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 35485 00005B85 50                      	push	ax				;;AN000;; Put it on the stack
 35486 00005B86 41                      	inc	cx				;;AN000;; Increase the count
 35487 00005B87 E88DFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 35488 00005B8A 7306                    	jnc	short $MIF318
 35489 00005B8C 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 35490 00005B90 50                      	push	ax				;;AN000;; Put it on the stack
 35491 00005B91 F8                      	clc					;;AN000;; Clear the carry
 35492                                  $MIF318:
 35493 00005B92 EB0D                    	jmp	short $MEN317
 35494                                  $MIF317:
 35495                                  $MDO321:
 35496 00005B94 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 35497 00005B97 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 35498 00005B99 7404                    	jz	short $MEN321			;;AN000;; Yes
 35499 00005B9B 47                      	inc	di				;;AN000;; Next character
 35500 00005B9C 41                      	inc	cx				;;AN000;; Increment the count
 35501 00005B9D EBF5                    	jmp	short $MDO321
 35502                                  $MEN321:
 35503 00005B9F 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 35504                                  $MEN317:
 35505 00005BA1 55                      	push	bp				;;AN000;; Restore return address
 35506 00005BA2 C3                      	retn					;;AN000;;	
 35507                                  
 35508                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35509                                  ;;
 35510                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 35511                                  ;;
 35512                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 35513                                  ;;		  and prepare to display
 35514                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35515                                  ;;		ES:DI contains the VALUE from SUBLIST
 35516                                  ;;	OUTPUTS: CX contains number of characters on stack
 35517                                  ;;		 Top of stack  --> Last character
 35518                                  ;;					. . .
 35519                                  ;;		 Bot of stack  --> First character
 35520                                  ;;	OTHER REGS Revised: BX,DX,AX
 35521                                  ;;
 35522                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35523                                  
 35524                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35525                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35526                                  $M_BIN2ASC_REPLACE:
 35527 00005BA3 5D                      	pop	bp				;;AN000;; Save return address
 35528 00005BA4 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35529 00005BA6 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 35530 00005BA8 C706[679A]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 35531                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 35532                                  
 35533 00005BAE 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 35534                                  
 35535                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 35536 00005BB0 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35537                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 35538 00005BB4 7511                    	jnz	short $MIF325			;;AN000;; No
 35539                                  	
 35540 00005BB6 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 35541                                  
 35542                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35543 00005BB9 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35544                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 35545 00005BBD 753D                    	jnz	short $MIF326			;;AN000;; No
 35546                                  			 
 35547 00005BBF A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 35548 00005BC1 7433                    	jz	short $MIF327			;;AN000;; No
 35549                                  						;;AN000;; Yes				
 35550                                  	; 12/04/2023
 35551                                  	;inc	bx				;;AN000;; Remember that it was negative
 35552 00005BC3 247F                    	and	al,01111111b			;;AN000;; Make it positive
 35553                                  
 35554                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 35555                                  	;jmp	short $MIF327
 35556 00005BC5 EB2E                    	jmp	short $MIF350 ; inc bx
 35557                                  
 35558                                  ; 12/04/2023
 35559                                  %if 0
 35560                                  
 35561                                  $MIF327:
 35562                                  $MIF335:	; 12/04/2023
 35563                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35564                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35565                                  $MIF326:
 35566                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35567                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35568                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35569                                  	jnz	short $MIF330			;;AN000;; No
 35570                                  						;;AN000;; Yes
 35571                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35572                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35573                                  $MIF330:
 35574                                  	jmp	short $MEN325
 35575                                  
 35576                                  %endif
 35577                                  
 35578                                  $MIF325:
 35579                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 35580 00005BC7 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35581                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 35582 00005BCB 7513                    	jnz	short $MIF333			;;AN000;; No
 35583                                  						;;AN000;; Yes
 35584 00005BCD 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 35585                                  
 35586                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35587 00005BD0 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35588                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35589 00005BD4 7526                    	jnz	short $MIF334			;;AN000;; No
 35590                                  						;;AN000;; Yes
 35591 00005BD6 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 35592 00005BD9 741B                    	jz	short $MIF335			;;AN000;; No
 35593                                  						;;AN000;; Yes
 35594                                  	; 12/04/2023
 35595                                  	;inc	bx				;;AN000;; Remember that it was negative
 35596 00005BDB 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 35597                                  
 35598                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35599                                  	;jmp	short $MIF335
 35600 00005BDE EB15                    	jmp	short $MIF350 ; inc bx
 35601                                  
 35602                                  ; 12/04/2023
 35603                                  %if 0
 35604                                  
 35605                                  $MIF335:
 35606                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35607                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35608                                  $MIF334:
 35609                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 35610                                  	jnz	short $MIF338
 35611                                  
 35612                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35613                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35614                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35615                                  	jnz	short $MIF338			;;AN000;; No
 35616                                  						;;AN000;; Yes
 35617                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35618                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35619                                  $MIF338:
 35620                                  	jmp	short $MEN333			;;AN000;;
 35621                                  %endif
 35622                                  
 35623                                  $MIF333:
 35624 00005BE0 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 35625 00005BE3 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 35626                                  
 35627                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35628 00005BE7 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35629                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35630 00005BEB 750F                    	jnz	short $MIF341			;;AN000;; No
 35631                                  						;;AN000;; Yes
 35632 00005BED F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 35633 00005BF0 7404                    	jz	short $MIF342			;;AN000;; No
 35634                                  						;;AN000;; Yes
 35635                                  	; 12/04/2023
 35636                                  	;inc	bx				;;AN000;; Remember that it was negative
 35637 00005BF2 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 35638                                  	
 35639                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35640                                  $MIF350:
 35641 00005BF5 43                      	inc	bx
 35642                                  $MIF342:
 35643                                  	; 12/04/2023
 35644                                  $MIF327:
 35645                                  $MIF335:
 35646 00005BF6 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35647                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35648                                  $MIF341:
 35649                                  $MIF326:
 35650                                  	; 18/04/2023
 35651                                  $MIF334:
 35652                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35653 00005BFC F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35654                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35655 00005C00 7506                    	jnz	short $MIF345			;;AN000;; No
 35656                                  						;;AN000;; Yes
 35657 00005C02 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35658                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35659                                  
 35660                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35661                                  	; ****************************************
 35662                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5F64h
 35663                                  $MIF345:
 35664                                  	; *** (Disassembled MSDOS 6.22 COMMAND.COM source code.)
 35665                                  $MEN333:
 35666 00005C08 F6440740                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],40h
 35667                                  	;test	byte [si+7],40h		; MSDOS 6.22
 35668                                  				; (Custom/International flag for thousand separator)
 35669 00005C0C 7428                    	jz	short $MEN325
 35670 00005C0E 50                      	push	ax			; MSDOS 6.22
 35671 00005C0F 52                      	push	dx
 35672 00005C10 B438                    	mov	ah,38h	 ; International
 35673 00005C12 30C0                    	xor	al,al
 35674 00005C14 8D16[699A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35675 00005C18 CD21                    	int	21h		; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 35676                                  				; get current-country info
 35677                                  				; DS:DX -> buffer for returned info
 35678 00005C1A 7305                    	jnb	short $MEN341		; (use country depended thousand separator)
 35679 00005C1C C606[709A]2C            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','
 35680                                  $MEN341:
 35681 00005C21 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35682                                  	;mov	al,[si+0Ah]		; (save pad character)
 35683 00005C24 89C7                    	mov	di,ax
 35684 00005C26 5A                      	pop	dx
 35685 00005C27 58                      	pop	ax
 35686 00005C28 C6440A2C                	mov	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','  ; $M_COMMA
 35687                                  	;mov	byte [si+0Ah],','	; (comma is needed for converting procedure)
 35688 00005C2C E80CFD                  	call	$M_CONVERT2ASC
 35689 00005C2F 89F8                    	mov	ax,di
 35690 00005C31 88440A                  	mov	[si+$M_SUBLIST_STRUC.$M_S_PAD],al
 35691                                  	;mov	[si+0Ah],al		; (restore pad character)
 35692 00005C34 EB03                    	jmp	short $MEN345		; MSDOS 6.22
 35693                                  	; *** (end of disassembled MSDOS 6.22 COMMAND.COM source code porehion) 
 35694                                  	; ****************************************
 35695                                  ;$MIF345:
 35696                                  ;$MEN333:
 35697                                  $MEN325:
 35698 00005C36 E802FD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 35699                                  $MEN345: 	; 15/06/2023 - MSDOS 6.22
 35700 00005C39 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 35701 00005C3B 7405                    	jz	short $MIF349			;;AN000;; No
 35702                                  						;;AN000;; Yes
 35703 00005C3D 31D2                    	xor	dx,dx				;;AN000;;
 35704 00005C3F B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 35705 00005C41 52                      	push	dx				;;AN000;;
 35706                                  $MIF349:
 35707 00005C42 55                      	push	bp				;;AN000;; Restore return address
 35708 00005C43 C3                      	retn					;;AN000;; Return
 35709                                  
 35710                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35711                                  ;;
 35712                                  ;;	PROC NAME: $M_DATE_REPLACE
 35713                                  ;;
 35714                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 35715                                  ;;		  country format and prepare to display
 35716                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35717                                  ;;		ES:DI points at VALUE from SUBLIST
 35718                                  ;;	OUTPUTS: CX contains number of characters on stack
 35719                                  ;;		 Top of stack  --> Last character
 35720                                  ;;					. . .
 35721                                  ;;		 Bot of stack  --> First character
 35722                                  ;;	OTHER REGS Revised: DX,AX
 35723                                  ;;
 35724                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35725                                  
 35726                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35727                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35728                                  $M_DATE_REPLACE:
 35729 00005C44 5D                      	pop	bp				;;AN000;; Save return address
 35730                                  
 35731 00005C45 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35732                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35733                                  	
 35734 00005C4B E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 35735                                  						;;AN000;; All O.K.?
 35736 00005C4E 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 35737                                  	; 12/04/2023
 35738                                  	;xor	ax,ax				;;AN000;; Reset AX value
 35739                                  	
 35740                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 35741                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 35742                                  	;jne	short $MIF351
 35743                                  	; 12/04/2023
 35744 00005C50 A1[699A]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35745 00005C53 09C0                    	or	ax,ax
 35746 00005C55 751D                    	jnz	short $MIF351
 35747                                  
 35748 00005C57 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 35749 00005C5A E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35750                                  
 35751 00005C5D FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35752                                  	;push	word [$M_RT+87]			;;AN000;;
 35753                                  	
 35754 00005C61 41                      	inc	cx				;;AN000;; Increment count
 35755 00005C62 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 35756                                  
 35757 00005C64 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35758                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35759 00005C67 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35760                                  	
 35761 00005C6A FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35762                                  	;push	word [$M_RT+87]			;;AN000;;
 35763                                  
 35764 00005C6E 41                      	inc	cx				;;AN000;; Increment count
 35765 00005C6F 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35766                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35767                                  	; 12/04/2023
 35768                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35769 00005C72 EB3C                    	jmp	short $MIF354 ; **
 35770                                  $MIF351:
 35771                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 35772                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 35773                                  	;jne	short $MIF353
 35774                                  	; 12/04/2023
 35775                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35776 00005C74 48                      	dec	ax 
 35777 00005C75 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 35778                                  
 35779 00005C77 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 35780 00005C7A E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35781                                  
 35782 00005C7D FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35783                                  	;push	word [$M_RT+87]			;;AN000;;
 35784                                  	
 35785 00005C81 41                      	inc	cx				;;AN000;; Increment count
 35786 00005C82 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 35787                                  
 35788 00005C84 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35789                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35790 00005C87 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35791                                  
 35792 00005C8A FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35793                                  	;push	word [$M_RT+87]			;;AN000;;
 35794                                  
 35795 00005C8E 41                      	inc	cx				;;AN000;;
 35796                                  	      
 35797 00005C8F 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35798                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35799                                  
 35800                                  	; 12/04/2023
 35801                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35802 00005C92 EB1C                    	jmp	short $MIF354 ; **
 35803                                  	; 12/04/2023
 35804                                  $MIF352:
 35805                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 35806 00005C94 48                      	dec	ax
 35807                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 35808                                  	;xor	ax,ax
 35809                                  	;jmp	short $MIF355
 35810                                  	; 12/04/2023
 35811 00005C95 751C                    	jnz	short $MIF355
 35812                                  $MIF353:
 35813                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 35814                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 35815                                  	;jne	short $MIF355
 35816                                  
 35817 00005C97 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35818                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35819 00005C9A E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35820                                  	
 35821 00005C9D FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35822                                  	;push	word [$M_RT+87]			;;AN000;;
 35823                                  
 35824 00005CA1 41                      	inc	cx				;;AN000;;
 35825                                  
 35826 00005CA2 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35827                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35828 00005CA5 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35829                                  	
 35830 00005CA8 FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35831                                  	;push	word [$M_RT+87]			;;AN000;;
 35832                                  	
 35833 00005CAC 41                      	inc	cx				;;AN000;;
 35834                                  
 35835 00005CAD E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 35836                                  	; 12/04/2023
 35837                                  $MIF354:
 35838 00005CB0 E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 35839                                  $MIF355:
 35840 00005CB3 55                      	push	bp				;;AN000;; Restore return address
 35841 00005CB4 C3                      	retn					;;AN000;; Return
 35842                                  
 35843                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35844                                  ;;
 35845                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35846                                  
 35847                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35848                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35849                                  $M_GET_DATE:
 35850                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35851                                  	;mov	al,0 				;;AN000;; Get current country info
 35852                                  	; 12/04/2023
 35853 00005CB5 B80038                  	mov	ax,3800h
 35854                                  	;
 35855 00005CB8 8D16[699A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35856                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35857 00005CBC CD21                    	int	21h				;;AN000;;
 35858 00005CBE 730B                    	jnc	short $MIF357
 35859                                  	;
 35860 00005CC0 C706[699A]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 35861                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 35862 00005CC6 C606[749A]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 35863                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 35864                                  $MIF357:
 35865 00005CCB C3                      	retn					;;AN000;;
 35866                                  
 35867                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35868                                  ;;
 35869                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35870                                  
 35871                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35872                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35873                                  $M_YEAR:
 35874 00005CCC 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35875                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 35876                                  
 35877                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 35878 00005CCF F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35879                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 35880 00005CD3 7508                    	jnz	short $MIF359			;;AN000;; No
 35881                                  						;;AN000;; Yes
 35882 00005CD5 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35883 00005CD8 7603                    	jna	short $MIF360			;;AN000;;
 35884 00005CDA B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35885                                  $MIF360:
 35886                                  $MIF359:
 35887 00005CDD C3                      	retn					;;AN000;;
 35888                                  
 35889                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35890                                  ;;
 35891                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35892                                  
 35893                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35894                                  $M_CONVERTDATE:
 35895                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 35896 00005CDE 8F06[699A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35897                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35898 00005CE2 880E[5F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35899                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35900 00005CE6 E852FC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35901 00005CE9 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 35902 00005CEA 3A0E[5F9A]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35903 00005CEE 7505                    	jne	short $MIF363			;;AN000;; No
 35904 00005CF0 B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35905 00005CF3 50                      	push	ax				;;AN000;; Save it
 35906 00005CF4 41                      	inc	cx				;;AN000;; Count it
 35907                                  $MIF363:
 35908 00005CF5 41                      	inc	cx				;;AN000;; Restore CX
 35909 00005CF6 FF36[699A]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35910                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35911 00005CFA C3                      	retn
 35912                                  
 35913                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35914                                  ;;
 35915                                  ;;	PROC NAME: $M_TIME_REPLACE
 35916                                  ;;
 35917                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 35918                                  ;;		  and prepare to display
 35919                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35920                                  ;;		ES:DI points at VALUE from SUBLIST
 35921                                  ;;	OUTPUTS: CX contains number of characters on stack
 35922                                  ;;		 Top of stack  --> Last character
 35923                                  ;;					. . .
 35924                                  ;;		 Bot of stack  --> First character
 35925                                  ;;	REGS USED: BP,CX,AX
 35926                                  ;;
 35927                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35928                                  
 35929                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35930                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35931                                  	; 13/08/2024							     ;;
 35932                                  $M_TIME_REPLACE:
 35933 00005CFB 5D                      	pop	bp				;;AN000;; Save return address
 35934                                  
 35935 00005CFC C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35936                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35937                                  
 35938 00005D02 E87700                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 35939                                  
 35940                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35941 00005D05 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 35942                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35943 00005D09 741A                    	jz	short $MIF365			;;AN000;; No
 35944                                  						;;AN000;; Yes
 35945 00005D0B 803E[7A9A]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35946                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35947 00005D10 7513                    	jne	short $MIF366			;;AN000;; No
 35948                                  						;;AN000;; Yes
 35949 00005D12 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35950                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35951 00005D15 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 35952 00005D17 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 35953 00005D19 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 35954 00005D1B 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 35955                                  $MLL367:
 35956 00005D1D B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 35957                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 35958                                  	;inc	cx				;;AN000;;
 35959                                  	;jmp	short $MEN367			;;AN000;;
 35960                                  	; 12/04/2023
 35961 00005D1F EB02                    	jmp	short $MEN367 ; *
 35962                                  $MIF367:
 35963 00005D21 B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 35964                                  $MEN367:	; * ; 12/04/2023
 35965 00005D23 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 35966 00005D24 41                      	inc	cx				;;AN000;;
 35967                                  ;$MEN367:
 35968                                  $MIF366:
 35969                                  $MIF365:					;;AN000;;
 35970 00005D25 31C0                    	xor	ax,ax				;;AN000;;
 35971                                  	;xor	dx,dx				;;AN000;;
 35972                                  	; 13/08/2024
 35973 00005D27 99                      	cwd	; PCDOS 7.1 COMMAND.COM
 35974                                  	
 35975                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35976 00005D28 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35977                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35978 00005D2C 740B                    	jz	short $MIF372			;;AN000;;
 35979                                  
 35980 00005D2E 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35981                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 35982 00005D31 E8AAFF                  	call	$M_CONVERTTIME			;;AN000;;
 35983                                  
 35984 00005D34 FF36[729A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 35985                                  	;push	word [$M_RT+85]			;;AN000;;
 35986 00005D38 41                      	inc	cx				;;AN000;;
 35987                                  $MIF372:
 35988                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35989 00005D39 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35990                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35991 00005D3D 7506                    	jnz	short $MLL374			;;AN000;; No
 35992                                  
 35993                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 35994 00005D3F F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35995                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 35996 00005D43 740B                    	jz	short $MIF374			;;AN000;; No
 35997                                  $MLL374:
 35998 00005D45 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35999                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 36000 00005D48 E893FF                  	call	$M_CONVERTTIME			;;AN000;;
 36001                                  
 36002 00005D4B FF36[769A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 36003                                  	;push	word [$M_RT+89]			;;AN000;;
 36004 00005D4F 41                      	inc	cx				;;AN000;;
 36005                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 36006 00005D50 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 36007                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 36008 00005D53 E888FF                  	call	$M_CONVERTTIME			;;AN000;;
 36009                                  
 36010 00005D56 FF36[769A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 36011                                  	;push	word [$M_RT+89]			;;AN000;;
 36012 00005D5A 41                      	inc	cx				;;AN000;;
 36013                                  
 36014 00005D5B 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 36015                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 36016                                  
 36017                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 36018 00005D5E F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 36019                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 36020 00005D62 7413                    	jz	short $MIF376			;;AN000;; No
 36021                                  
 36022 00005D64 803E[7A9A]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 36023                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 36024 00005D69 750C                    	jne	short $MIF377			;;AN000;; No
 36025                                  
 36026 00005D6B 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 36027 00005D6D 7C02                    	jnge	short $MIF378 ; jl
 36028 00005D6F 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 36029                                  $MIF378:
 36030                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 36031                                  	;jne	short $MIF380			;;AN000;; No
 36032                                  	; 12/04/2023
 36033 00005D71 20C0                    	and	al,al
 36034 00005D73 7502                    	jnz	short $MIF380	
 36035 00005D75 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 36036                                  $MIF380:
 36037                                  $MIF377:
 36038                                  $MIF376:
 36039 00005D77 E8C1FB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 36040 00005D7A 55                      	push	bp				;;AN000;; Restore return address
 36041 00005D7B C3                      	retn					;;AN000;; Return
 36042                                  
 36043                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36044                                  ;;
 36045                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36046                                  
 36047                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36048                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36049                                  $M_GET_TIME:
 36050                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 36051                                  	;mov	al,0 				;;AN000;; Get current country info
 36052                                  	; 12/04/2023
 36053 00005D7C B80038                  	mov	ax,3800h
 36054                                  	;
 36055 00005D7F 8D16[699A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 36056                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 36057 00005D83 CD21                    	int	21h				;;AN000;;
 36058 00005D85 7310                    	jnc	short $MIF384
 36059                                  
 36060 00005D87 C706[7A9A]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 36061                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 36062 00005D8D C606[769A]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 36063                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 36064 00005D92 C606[729A]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 36065                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 36066                                  $MIF384:
 36067 00005D97 C3                      	retn					;;AN000;;
 36068                                  
 36069                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36070                                  ;;
 36071                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36072                                  
 36073                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36074                                  
 36075                                  ; 12/04/2023 
 36076                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 36077                                  %if 0
 36078                                  $M_CONVERTTIME:
 36079                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 36080                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 36081                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 36082                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 36083                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 36084                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 36085                                  	dec	cx				;;AN000;; Test if size only grew by 1
 36086                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 36087                                  	jne	short $MIF386			;;AN000;; No
 36088                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 36089                                  	push	ax				;;AN000;; Save it
 36090                                  	inc	cx				;;AN000;; Count itount it
 36091                                  $MIF386:
 36092                                  	inc	cx				;;AN000;; Restore CX
 36093                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 36094                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 36095                                  	retn
 36096                                  %endif
 36097                                  
 36098                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36099                                  ;;
 36100                                  ;;	PROC NAME: $M_WAIT_FOR_INPUT
 36101                                  ;;
 36102                                  ;;	FUNCTION:  To accept keyed input and return extended key value
 36103                                  ;;		   in AX register
 36104                                  ;;	INPUTS:    DL contains the DOS function requested for input
 36105                                  ;;	OUTPUTS:   AX contains the extended key value that was read
 36106                                  ;;	REGS USED:
 36107                                  ;;
 36108                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36109                                  
 36110                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36111                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6123h
 36112                                  $M_WAIT_FOR_INPUT:
 36113 00005D98 51                      	push	cx				;;AN000;; Save CX
 36114 00005D99 52                      	push	dx				;;AN000;; Save DX
 36115 00005D9A 1E                      	push	ds				;;AN000;; Save Data segment
 36116                                  
 36117 00005D9B 80FAC0                  	cmp	dl,0C0h ; DOS_CLR_KEYB_BUF_MASK	;;AN001;; Are we to clear the keyboard buffer?
 36118 00005D9E 7608                    	jna	short $MIF388	; jbe		;;AN001;; No,
 36119                                  						;;AN001;; Yes,
 36120 00005DA0 88D0                    	mov	al,dl				;;AN001;; Mov function into AL
 36121 00005DA2 240F                    	and	al,0Fh	; LOW_NIB_MASK		;;AN001;; Mask out the C in high nibble
 36122 00005DA4 B40C                    	mov	ah,0Ch	; DOS_CLR_KEYB_BUF 	;;AN001;; Set input function
 36123 00005DA6 EB02                    	jmp	short $MEN388
 36124                                  $MIF388:
 36125 00005DA8 88D4                    	mov	ah,dl				;;AN000;; Put DOS function in AH
 36126                                  $MEN388:
 36127 00005DAA 06                      	push	es				;;AN000;; Get output buffer segment
 36128 00005DAB 1F                      	pop	ds				;;AN000;;
 36129 00005DAC 89FA                    	mov	dx,di				;;AN000;; Get output buffer offset in case needed
 36130 00005DAE CD21                    	int	21h				;;AN000;; Get keyboard input
 36131 00005DB0 1F                      	pop	ds				;;AN000;;
 36132 00005DB1 80FA0A                  	cmp	dl,0Ah	; DOS_BUF_KEYB_INP	;;AN000;;
 36133                                  	;clc					;;AN000;;
 36134 00005DB4 7412                    	je	short $MIF391
 36135 00005DB6 E85EFB                  	call	$M_IS_IT_DBCS			;;AN000;; Is this character DBCS?
 36136 00005DB9 730B                    	jnc	short $MIF392
 36137 00005DBB 88C1                    	mov	cl,al				;;AN000;; Save first character
 36138 00005DBD 88D4                    	mov	ah,dl				;;AN001;; Get back function
 36139 00005DBF CD21                    	int	21h				;;AN000;; Get keyboard input
 36140 00005DC1 88CC                    	mov	ah,cl				;;AN000;; Retrieve first character AX = xxxx
 36141 00005DC3 F8                      	clc					;;AN000;; Clear carry condition
 36142 00005DC4 EB02                    	jmp	short $MEN392
 36143                                  $MIF392:
 36144 00005DC6 B400                    	mov	ah,0				;;AN000;; AX = 00xx where xx is SBCS
 36145                                  $MEN392:
 36146                                  $MIF391:
 36147                                  	;jc	short $MIF396 ; 15/06/2023
 36148 00005DC8 5A                      	pop	dx				;;AN000;;
 36149 00005DC9 59                      	pop	cx				;;AN000;;
 36150                                  	;jmp	short $MEN396
 36151 00005DCA C3                      	retn
 36152                                  
 36153                                  	; 15/06/2023
 36154                                  ;$MIF396:
 36155                                  	;add	sp,4				;;AN000;;
 36156                                  	;stc					;;AN000;; Reset carry flag
 36157                                  ;$MEN396:
 36158                                  	;retn					;;AN000;; Return
 36159                                  
 36160                                  ; ----------------------------
 36161                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 36162                                  ; ----------------------------
 36163                                  ; include msgdcl.inc
 36164                                  ; ----------------------------
 36165                                  
 36166                                  ;============================================================================
 36167                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 36168                                  ;============================================================================
 36169                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36170                                  
 36171                                  ;****************************************************************************
 36172                                  ;
 36173                                  ; This file contains routines needed to parse and implement user-given
 36174                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 36175                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 36176                                  ; the variables in highvar.inc, for use by the rest of the routines.
 36177                                  ;
 36178                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 36179                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 36180                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 36181                                  ;    DH/LH module opts
 36182                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 36183                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 36184                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 36185                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 36186                                  ; available during the load.
 36187                                  ;
 36188                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 36189                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 36190                                  ; upper-memory block which was not specified by the user... in addition, if
 36191                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 36192                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 36193                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 36194                                  ; free any UMBs so allocated.
 36195                                  ;
 36196                                  ; When a device driver loads, there is the additional problem of allocating its
 36197                                  ; initial load site; this should be restricted to the first UMB specified on
 36198                                  ; the command-line.  The function FreezeUM temporarily allocates all remaining
 36199                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 36200                                  ; UMB.  Then the initial allocation may be made, and a call to UnFreeze will
 36201                                  ; return any so-allocated memory elements to FREE, for the true load.  Note
 36202                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 36203                                  ;
 36204                                  ;****************************************************************************
 36205                                  
 36206                                  ;___PROCEDURES_______________________________________________________________
 36207                                  ;
 36208                                  ;   AddrToUmb   - converts a segment address in AX to its appropriate UMB #
 36209                                  ;   BigFree     - makes ES:0 point to the largest free MCB in UMB given as AL
 36210                                  ;   FixMem      - scans the UM chain and concatenates adjacent free MCBs
 36211                                  ;   FreezeUM    - Marks FROZEN all UM elements now FREE, save those in load UMB
 36212                                  ;   GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36213                                  ;   GetLoadUMB  - Returns the load UMB number in AL (-1 if not specified)
 36214                                  ;   GetSize     - Returns the UMB in AL's minimum size (0 if not specified)
 36215                                  ;   GetXNum     - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36216                                  ;   HideUMBs    - links UMBs and hides upper-memory as appropriate
 36217                                  ;   InitVar     - initializes all the variables used in ParseVar and HideUMBs
 36218                                  ;   NextMCB     - moves an MCB pointer forward to the next MCB
 36219                                  ;   ParseVar    - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36220                                  ;   PrTable     - produces a printout of the variables in highvar.inc
 36221                                  ;   StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36222                                  ;   StoLoadUMB  - Overrides the load UMB number with what's in AL
 36223                                  ;   UmbHead     - returns in AX the address of the first UMB block (0x9FFF)
 36224                                  ;   UnFreeze    - Marks FROZEN elements as FREE
 36225                                  ;
 36226                                  ;___VARIABLES________________________________________________________________
 36227                                  ;
 36228                                  ;   gnradix     - After a call to GetXNum, is 16 or 10, depending on the # read
 36229                                  ;
 36230                                  ;   Internal:
 36231                                  ;___PROCEDURES_______________________________________________________________
 36232                                  ;
 36233                                  ;   convUMB     - checks after GetXNum to convert an address to a UMB number
 36234                                  ;   findUMB     - makes ES:0 point to the first MCB in UMB given as AL
 36235                                  ;   fm_link     - links UMBs not already linked in
 36236                                  ;   fm_unlink   - unlinks UMBs if fm_umb is set to 0
 36237                                  ;   frezMCB     - marks as 8+FROZEN the MCB at ES:0
 36238                                  ;   hideMCB     - marks as HIDDEN the MCB at ES:0
 36239                                  ;   hideUMB     - marks as HIDDEN all FREE elements in UMB passed as AL
 36240                                  ;   hideUMB?    - hides as appropriate the UMB in CL
 36241                                  ;   hl_unlink   - unlinks UMBs if fm_umb is set to 0; restores strategy too
 36242                                  ;   incArgc     - increments fm_argc, for use with LH command-line parsing
 36243                                  ;   isEOL       - returns with ZF set iff AL contains CR or LF, or 0
 36244                                  ;   isFreeMCB   - returns with ZF set if current MCB (ES:0) is FREE
 36245                                  ;   isFrozMCB   - returns with ZF set if current MCB (ES:0) is FROZEN
 36246                                  ;   isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36247                                  ;   isSysMCB    - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 36248                                  ;   isTiny      - returns with ZF set if user didn't specify /S
 36249                                  ;   isWhite     - returns with ZF set iff AL contains whitespace (or "=")
 36250                                  ;   loadLow     - returns AL==0 if UMB0 == 0, else AL==1
 36251                                  ;   mul32       - multiplies the number in DX:AX by gnradix
 36252                                  ;   parseL      - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36253                                  ;   setUMBs     - links umbs and sets allocation strategy for a load
 36254                                  ;   shrinkMCB   - breaks an MCB into two pieces, the lowest one's size==AX
 36255                                  ;   stowSiz     - marks a given UMB as having a given minimum size
 36256                                  ;   stowUMB     - marks a given UMB as used, if it hasn't been so marked before
 36257                                  ;   toDigit     - converts a character-digit to its binary counterpart
 36258                                  ;   toPara      - divides DX:AX by 16; result in AX only
 36259                                  ;   toUpper     - accepts one argument (probly a register), and upper-cases it.
 36260                                  ;   unHideMCB   - marks as FREE the MCB at ES:0
 36261                                  ;   unMarkUMB   - marks a given UMB as unused, even if previously marked used
 36262                                  ;
 36263                                  ;****************************************************************************
 36264                                  
 36265                                  ;DOS_CHECK_STRATEGY equ 5800h ; Int 21h, Func 58h, Svc 0 = check alloc strat
 36266                                  ;DOS_SET_STRATEGY   equ 5801h ; Int 21h, Func 58h, Svc 1 = set alloc strategy
 36267                                  ;DOS_CHECK_UMBLINK  equ 5802h ; Int 21h, Func 58h, Svc 2 = check link state
 36268                                  ;DOS_SET_UMBLINK    equ 5803h ; Int 21h, Func 58h, Svc 3 = set link state
 36269                                  ;DOS_GET_DOS_LISTS  equ   52h ; Int 21h, Func 52h = return list of lists
 36270                                  ;DOS_UMB_HEAD       equ   8Ch ; Offset from ES (after func52h) to get UMBHead
 36271                                  
 36272                                  ; -----------------------------------------------------------------------------
 36273                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 36274                                  ; -----------------------------------------------------------------------------
 36275                                  ; ENTRY:       None
 36276                                  ; EXIT:        Variables listed in highvar.inc are initialized
 36277                                  ; ERROR EXIT:  None
 36278                                  ; USES:        Flags, variables in highvar.inc
 36279                                  ; -----------------------------------------------------------------------------
 36280                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 36281                                  ; are largely ignored, but it is initialized nonetheless.
 36282                                  ; -----------------------------------------------------------------------------
 36283                                  
 36284                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36285                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:615Fh
 36286                                  InitVar:	; proc	near
 36287                                  	;push	ax
 36288                                  	;push	cx
 36289                                  	;push	di
 36290 00005DCB 06                      	push	es ; * es = ds
 36291 00005DCC 8E06[F39D]              	mov	es,[RESSEG]		;Point ES into appropriate data segment
 36292 00005DD0 31C0                    	xor	ax,ax
 36293                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 36294                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 36295 00005DD2 26A3[D604]              	mov	[es:fInHigh],ax ; 16/06/2023
 36296 00005DD6 26A3[D804]              	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 36297 00005DDA 26C606[DA04]FF          	mov	byte [es:UmbLoad],0FFh	;UNSPECIFIED
 36298                                  					;Later is the # of the 1st spec'd UMB
 36299 00005DE0 26A2[DD04]              	mov	[es:fm_argc],al		;Start with zero args having been read
 36300                                  
 36301 00005DE4 FC                      	cld
 36302                                  
 36303 00005DE5 B91000                  	mov	cx,16 ; MAXUMB		;For each entry
 36304 00005DE8 BF[0004]                	mov	di,UmbUsed		;on the UmbUsed array,
 36305 00005DEB F3AA                    	rep	stosb			;	Store 0
 36306                                  
 36307                                  	;mov	cx,16 ; MAXUMB		;Okay... for each entry
 36308 00005DED B110                    	mov	cl,16
 36309 00005DEF BF[1004]                	mov	di,UmbSize		;on the UmbSize array,
 36310 00005DF2 F3AB                    	rep	stosw			;	Store 0
 36311                                  
 36312 00005DF4 07                      	pop	es ; * es = ds
 36313                                  	;pop	di
 36314                                  	;pop	cx
 36315                                  	;pop	ax
 36316 00005DF5 C3                       	retn
 36317                                  
 36318                                  ;InitVar endp
 36319                                  
 36320                                  ; -----------------------------------------------------------------------------
 36321                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 36322                                  ; -----------------------------------------------------------------------------
 36323                                  ; ENTRY   : None
 36324                                  ; EXIT    : None
 36325                                  ; ERROR   : None
 36326                                  ; USES    : Flags, fm_umb, fm_strat
 36327                                  ; -----------------------------------------------------------------------------
 36328                                  
 36329                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36330                                  FixMem:
 36331                                  	;push	ax
 36332                                  	;push	bx
 36333                                  	;push	cx
 36334                                  	;push	dx
 36335 00005DF6 06                      	push	es
 36336                                  
 36337 00005DF7 E84900                  	call	fm_link			; Link in UMBs
 36338                                  
 36339 00005DFA E82302                  	call	UmbHead			; Get first upper-memory MCB address (0x9FFF)
 36340 00005DFD 723F                    	jc	short fmX		; (if couldn't get it, leave now).
 36341                                  
 36342 00005DFF 8EC0                    	mov	es,ax			; It returns in AX, so move it to ES.
 36343                                  
 36344                                  ; - Walk MCB Chain ------------------------------------------------------------
 36345                                  
 36346 00005E01 31D2                    	xor	dx,dx			; We're keeping the address of the last MCB
 36347 00005E03 89D1                    	mov 	cx,dx			; in CX... and the last owner
 36348 00005E05 42                      	inc	dx			; in dx as we go through the loop:
 36349                                  
 36350                                  ; ------------------------------------------
 36351                                  ; FM10--DX  = last MCB's owner's PSP address
 36352                                  ;       CX  = last MCB's address (segment)
 36353                                  ; ------------------------------------------
 36354                                  
 36355                                  fm10:	
 36356 00005E06 26A00000                	mov	al,[es:arena_signature]	; if 'Z', don't repeat loop
 36357                                  	;mov	al,[es:0]
 36358 00005E0A 268B1E0100              	mov	bx,[es:arena_owner]	; if not zero, do nothing
 36359                                  	;mov	bx,[es:1]
 36360 00005E0F 09D3                    	or	bx,dx			; dx was owner of previous MCB
 36361 00005E11 7516                    	jnz	short fm30		; If not both zero, don't cat.
 36362                                  
 36363                                  ; - Coalesce memory blocks at ES:00 and CX:00 ---------------------------------
 36364                                  
 36365                                  fm20:	
 36366 00005E13 268B1E0300              	mov	bx,[es:arena_size]	; Grab this block's Size,
 36367                                  	;mov	bx,[es:3]
 36368 00005E18 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 36369 00005E1A 26A20000                	mov	[es:arena_signature], al ; & move the SECOND sig here
 36370                                  	;mov	[es:0],al
 36371                                  
 36372 00005E1E 26031E0300              	add	bx,[es:arena_size]	; Size += first MCB's size
 36373                                  	;add	bx,1			; And add one for the header
 36374 00005E23 43                      	inc	bx
 36375 00005E24 26891E0300              	mov	[es:arena_size],bx	; Write the size
 36376                                  
 36377                                  	; ---------------------------------------------------------------------
 36378                                  fm30:	
 36379 00005E29 8CC1                    	mov	cx,es			; Put this address on the stack
 36380 00005E2B 268B160100              	mov	dx,[es:arena_owner]	; And remember its owner
 36381                                  	;mov	dx,[es:1]
 36382                                  
 36383                                  	;NextMCB es,bx			; Move to the next MCB
 36384                                  	
 36385 00005E30 8CC3                    	mov	bx,es
 36386                                  	;add	bx,[es:3]
 36387 00005E32 26031E0300              	add	bx,[es:arena_size]
 36388 00005E37 43                      	inc	bx
 36389 00005E38 8EC3                    	mov	es,bx
 36390                                  
 36391                                  	;cmp	al,'Z'	; cmp al,5Ah
 36392 00005E3A 3C5A                    	cmp	al,arena_signature_end
 36393 00005E3C 75C8                    	jnz	short fm10		; If signature != 'Z', there are more.
 36394                                  fmX:	
 36395 00005E3E E81900                  	call	fm_unlink		; Unlink UMBs
 36396                                  
 36397 00005E41 07                      	pop	es
 36398                                  	;pop	dx
 36399                                  	;pop	cx
 36400                                  	;pop	bx
 36401                                  	;pop	ax
 36402 00005E42 C3                      	retn
 36403                                  
 36404                                  ; -----------------------------------------------------------------------------
 36405                                  ; 16/06/2023
 36406                                  
 36407                                  ;INT 21h - DOS 5+ - GET OR SET UMB LINK STATE
 36408                                  ; .......................................................
 36409                                  ;     AH = 58h
 36410                                  ;     AL = subfunction
 36411                                  ;	02h get UMB link state
 36412                                  ;	    Return:
 36413                                  ;		AL = current link state
 36414                                  ;		  00h - UMBs not part of DOS memory chain
 36415                                  ;		  01h - UMBs in DOS memory chain
 36416                                  ;	03h set UMB link state
 36417                                  ;	    BX = new link state
 36418                                  ;		0000h - remove UMBs from DOS memory chain
 36419                                  ;		0001h - add UMBs to DOS memory chain
 36420                                  ;
 36421                                  ;Return: CF clear if successful
 36422                                  ;	CF set on error
 36423                                  ;	AX = error code (01h) (see #01680)
 36424                                  ; .......................................................
 36425                                  
 36426                                  ; -----------------------------------------------------------------------------
 36427                                  ;*** fm_link - links UMBs not already linked in
 36428                                  ; -----------------------------------------------------------------------------
 36429                                  ; ENTRY:    None
 36430                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 36431                                  ; ERROR:    None
 36432                                  ; USES:     AX, BX, fm_umb
 36433                                  ; -----------------------------------------------------------------------------
 36434                                  
 36435                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36436                                  fm_link:
 36437 00005E43 B80258                  	mov	ax,5802h ; DOS_CHECK_UMBLINK
 36438 00005E46 CD21                    	int	21h			; Current link-state is now in al
 36439                                  
 36440                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 36441                                  
 36442                                  	;push	es
 36443                                  	;mov	es,[RESSEG]
 36444                                  	;mov	[es:fm_umb],al
 36445                                  	;pop	es
 36446 00005E48 1E                      	push	ds
 36447 00005E49 8E1E[F39D]              	mov	ds,[RESSEG]
 36448 00005E4D A2[DB04]                	mov	[fm_umb],al
 36449 00005E50 1F                      	pop	ds
 36450                                  
 36451 00005E51 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 36452 00005E54 BB0100                  	mov	bx,1
 36453 00005E57 CD21                    	int	21h
 36454 00005E59 C3                      	retn
 36455                                  
 36456                                  ; -----------------------------------------------------------------------------
 36457                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 36458                                  ; -----------------------------------------------------------------------------
 36459                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 36460                                  ; EXIT:     None
 36461                                  ; ERROR:    None
 36462                                  ; USES:     AX, BX
 36463                                  ; -----------------------------------------------------------------------------
 36464                                  
 36465                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36466                                  fm_unlink:
 36467 00005E5A 31DB                    	xor	bx,bx
 36468                                  	
 36469                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 36470                                  
 36471 00005E5C 1E                      	push    ds
 36472 00005E5D 8E1E[F39D]              	mov     ds,[RESSEG]
 36473 00005E61 8A1E[DB04]              	mov     bl,[fm_umb]
 36474 00005E65 1F                      	pop     ds
 36475                                  	
 36476 00005E66 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 36477 00005E69 CD21                    	int	21h			; so just use that, and call int 21h
 36478 00005E6B C3                      	retn
 36479                                  
 36480                                  ; -----------------------------------------------------------------------------
 36481                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36482                                  ; laid out in highvar.inc
 36483                                  ; -----------------------------------------------------------------------------
 36484                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 36485                                  ; EXIT:     ES:SI points to first character in child program name
 36486                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 36487                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 36488                                  ; -----------------------------------------------------------------------------
 36489                                  ; Error codes (in AX if carry set on return):
 36490                                  ;
 36491                                  
 36492                                  ;PV_InvArg	equ	1	; Invalid argument passed
 36493                                  ;PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 36494                                  ;PV_InvSwt	equ	3	; Unrecognized switch passed
 36495                                  
 36496                                  ;
 36497                                  ; This routine exects ES:SI to point to a string much like the following:
 36498                                  ;    "/S/L:1,200;2 module options"
 36499                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 36500                                  ; required, though that's what this routine is supposed to parse.
 36501                                  ;
 36502                                  
 36503                                  ;optS		equ	'S'	; /S
 36504                                  ;optL		equ	'L'	; /L:...
 36505                                  
 36506                                  ;
 36507                                  ; -----------------------------------------------------------------------------
 36508                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 36509                                  ; a command-line for spawning a child process. For a typical LH command, say,
 36510                                  ;     lh /l:1,1000;2 print/d:lpt2
 36511                                  ; the arguments would look like (one per line):
 36512                                  ;     lh
 36513                                  ;     /l
 36514                                  ;     1
 36515                                  ;     1000
 36516                                  ;     2
 36517                                  ;     print
 36518                                  ;     /d
 36519                                  ;     :lpt2
 36520                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 36521                                  ; arg was the filename. So, inside this routine, we keep a running counter
 36522                                  ; of the number of arguments LH will need to skip in order to get to the
 36523                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 36524                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 36525                                  ; for:
 36526                                  ;    Each /L
 36527                                  ;    Each /S (there should be only one)
 36528                                  ;    Each UMB number (they follow ":" or ";")
 36529                                  ;    Each UMB size   (they follow ",")
 36530                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 36531                                  ; "print". Note that InitVar initializes fm_argc to zero.
 36532                                  ; -----------------------------------------------------------------------------
 36533                                  
 36534                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36535                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6216h
 36536                                  ParseVar:	; proc	near
 36537                                  	;push	di
 36538                                  	;push	ds ; *
 36539                                  	;push	es
 36540                                  	;
 36541                                  	; 16/06/2023
 36542                                  	; es = ds (from 'ParseLhCmd')
 36543                                  	;push	es		; Make DS:SI point to it, as well as ES:SI
 36544                                  	;pop	ds		; (regardless if we're in devhigh or loadhigh)
 36545                                  	
 36546 00005E6C FC                      	cld
 36547                                  
 36548                                  ; ------------------------------------------------
 36549                                  ; PV10--ES:SI = any whitespace on the command-line
 36550                                  ; ------------------------------------------------
 36551                                  
 36552                                  pv10:	
 36553 00005E6D AC                      	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 36554 00005E6E E8A800                  	call	isWhite
 36555 00005E71 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 36556 00005E73 3C2F                    	cmp	al,'/' ; SWTCH
 36557 00005E75 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 36558                                  
 36559 00005E77 4E                      	dec	si		; Backup--it's now "odule options", and we need
 36560 00005E78 F8                      	clc			; that "m" we just read (or whatever it is).
 36561 00005E79 EB2C                    	jmp	short pvX	; Then return with carry clear == we're done.
 36562                                  pv20:
 36563 00005E7B AC                      	lodsb			; Just read 'S' or 'L', hopefully
 36564                                  
 36565                                  	;toUpper al		; So we make it upper-case, and...
 36566 00005E7C 24DF                    	and	al,0DFh
 36567                                  
 36568 00005E7E 3C53                    	cmp	al,'S' ; optS	; just read 'S'?
 36569 00005E80 7510                    	jne	short pv30
 36570                                  
 36571 00005E82 E87E00                  	call	incArgc		; If it's /S, it's another arg for LH to skip.
 36572                                  
 36573                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 36574                                  
 36575                                  	;push	es
 36576                                  	;mov	es,[RESSEG]
 36577                                  	;mov	byte [es:fUmbTiny],1
 36578                                  	;pop	es
 36579 00005E85 1E                      	push	ds
 36580 00005E86 8E1E[F39D]              	mov	ds,[RESSEG]
 36581 00005E8A C606[D704]01            	mov	byte [fUmbTiny],1
 36582 00005E8F 1F                      	pop	ds
 36583                                  
 36584 00005E90 EBDB                    	jmp	short pv10	; possibly even "/L...".
 36585                                  pv30:	
 36586 00005E92 3C4C                    	cmp	al,'L' ; optL	; If it's not 'L' either, then it's a bad
 36587 00005E94 750B                    	jne	short pvE1	; switch!
 36588                                  
 36589 00005E96 E86A00                  	call	incArgc		; If it's /L, it's another arg for LH to skip.
 36590                                  
 36591 00005E99 E80C00                  	call	parseL
 36592 00005E9C 73CF                    	jnc	short pv10	; If no carry, go back and look for more
 36593                                  
 36594 00005E9E 4E                      	dec	si		; Else, back up and exit.
 36595 00005E9F EB03                    	jmp	short pvErr	; AX has already been set by parseL
 36596                                  pvE1:	
 36597 00005EA1 B80300                  	mov	ax,3 ; PV_InvSwt
 36598                                  				; Unrecognized switch passed
 36599                                  pvErr:
 36600 00005EA4 4E                      	dec	si
 36601 00005EA5 4E                      	dec	si
 36602 00005EA6 F9                      	stc
 36603                                  pvX:	
 36604                                  	;pop	es
 36605                                  	;pop	ds ; *
 36606                                  	;pop	di
 36607 00005EA7 C3                      	retn
 36608                                  
 36609                                  ;ParseVar endp
 36610                                  
 36611                                  ; -----------------------------------------------------------------------------
 36612                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36613                                  ; -----------------------------------------------------------------------------
 36614                                  ; ENTRY:    ES:SI points to colon
 36615                                  ; EXIT:     ES:SI points to first character not parsed
 36616                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 36617                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 36618                                  ; -----------------------------------------------------------------------------
 36619                                  ; If the string here is terminated with anything other than whitespace or a
 36620                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 36621                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 36622                                  ; makes sure the app /L: is reported as being the culprit.
 36623                                  ; -----------------------------------------------------------------------------
 36624                                  
 36625                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36626                                  parseL:
 36627 00005EA8 AC                      	lodsb
 36628 00005EA9 3C3A                    	cmp	al,':'		; Make sure they did /L:
 36629 00005EAB 754A                    	jne	short plE1	; If they didn't, return with carry set.
 36630                                  
 36631                                  ; ------------------------------------------
 36632                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 36633                                  ; ------------------------------------------
 36634                                  
 36635                                  pl10:
 36636 00005EAD E8FD00                  	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 36637 00005EB0 724B                    	jc	short plE2	; And error if it's a bad number.
 36638 00005EB2 E8C801                  	call	convUMB		; Convert any address to a UMB number
 36639                                  
 36640 00005EB5 88C1                    	mov	cl,al	; !*	; Remember the UMB number
 36641 00005EB7 E88300                  	call	stowUMB		; Mark this UMB # as used;
 36642 00005EBA 7241                    	jc	short plE2	; If it was already marked, it'll error
 36643                                  
 36644 00005EBC E84400                  	call	incArgc		; Each UMB number is another arg for LH to skip
 36645                                  
 36646 00005EBF AC                      	lodsb
 36647 00005EC0 3C3B                    	cmp	al,';'		; Did "umb;" ?
 36648 00005EC2 74E9                    	je	short pl10	; Yep: go back and get another UMB.
 36649                                  
 36650 00005EC4 E85200                  	call	isWhite		; Did "umb " ?
 36651 00005EC7 7439                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 36652                                  
 36653 00005EC9 E84200                  	call	isEOL		; Did "umb" ?
 36654 00005ECC 7433                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36655                                  
 36656 00005ECE 3C2F                    	cmp	al,'/' ; SWTCH	; Did "umb/" ? (as in, "/L:1,100;2/S")
 36657 00005ED0 742F                    	je	short plSwX	; If so, back up ES:SI one character and return
 36658                                  
 36659 00005ED2 3C2C                    	cmp	al,','		; Did "umb," ?
 36660 00005ED4 7521                    	jne	short plE1	; Just what the heck DID they do? Return error.
 36661                                  
 36662                                  ; --- Read a size -------------------------------------------------------------
 36663                                  
 36664 00005ED6 E8D400                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 36665 00005ED9 721C                    	jc	short plE1	; And error if it's a bad size.
 36666                                  
 36667 00005EDB E83401                  	call	toPara		; Convert from bytes to paragraphs
 36668                                  
 36669 00005EDE E88600                  	call	stowSiz		; CL still has the UMB number for this routine
 36670                                  
 36671 00005EE1 E81F00                  	call	incArgc		; Each UMB size is another arg for LH to skip
 36672                                  
 36673 00005EE4 AC                      	lodsb
 36674 00005EE5 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 36675 00005EE7 74C4                    	je	short pl10		;
 36676                                  
 36677 00005EE9 E82D00                  	call	isWhite		; Did it end with whitespace?
 36678 00005EEC 7414                    	jz	short plX	; If so, we're done here--go back.
 36679                                  
 36680 00005EEE E81D00                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 36681 00005EF1 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36682                                  
 36683 00005EF3 3C2F                    	cmp	al,'/' ; SWTCH	; Did they do "umb,size/" ?
 36684 00005EF5 740A                    	je	short plSwX	; If so, again, we're done here.
 36685                                  plE1:	
 36686 00005EF7 B80100                  	mov	ax,1 ; PV_InvArg
 36687                                  				; If not, we don't know WHAT they did...
 36688 00005EFA 4E                      	dec	si
 36689 00005EFB F9                      	stc
 36690 00005EFC C3                      	retn
 36691                                  plE2:
 36692                                  	; cf = 1 
 36693 00005EFD B80200                  	mov	ax,2 ; PV_BadUMB
 36694                                  				; In this case, they've specified a UMB twice
 36695                                  	;stc
 36696 00005F00 C3                      	retn
 36697                                  plSwX:
 36698 00005F01 4E                      	dec	si		; If we hit a '/' character, back up one char
 36699                                  				; so the whitespace checker will see it too.
 36700                                  plX:
 36701                                  	; cf = 0
 36702                                  	;clc			; Then just return with carry clear, so
 36703 00005F02 C3                      	retn			; ParseVar will go about its business.
 36704                                  
 36705                                  ; -----------------------------------------------------------------------------
 36706                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 36707                                  ; -----------------------------------------------------------------------------
 36708                                  ; ENTRY:    None
 36709                                  ; EXIT:     None
 36710                                  ; ERROR:    None
 36711                                  ; USES:     fm_argc, flags
 36712                                  ; -----------------------------------------------------------------------------
 36713                                  
 36714                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36715                                  incArgc:
 36716                                  	;push	ax
 36717                                  
 36718                                  	;;getdata al,fm_argc	; Obtain previous value of fm_argc,
 36719                                  	;
 36720                                  	;push	ds		; getdata (macro)
 36721                                  	;			; getdata al, fm_argc
 36722                                  	;mov	ds,[RESSEG]
 36723                                  	;mov	al,[fm_argc]	; Obtain previous value of fm_argc,
 36724                                  	;pop	ds
 36725                                  	;
 36726                                  	;inc	al		; Increment it,
 36727                                  	;
 36728                                  	;;putdata fm_argc,al	; And store it right back.
 36729                                  	;
 36730                                  	;push	es		; putdata (macro)
 36731                                  	;			; putdata fm_argc, al
 36732                                  	;mov	es,[RESSEG]
 36733                                  	;mov	[es:fm_argc],al	; and store it right back.
 36734                                  	;pop	es
 36735                                  
 36736                                  	; 16/06/2023
 36737 00005F03 1E                      	push	ds
 36738 00005F04 8E1E[F39D]              	mov	ds,[RESSEG]
 36739 00005F08 FE06[DD04]              	inc	byte [fm_argc]	; increment fm_argc
 36740 00005F0C 1F                      	pop	ds
 36741                                  
 36742                                  	;pop	ax
 36743 00005F0D C3                      	retn
 36744                                  
 36745                                  ; -----------------------------------------------------------------------------
 36746                                  ;*** isEOL - returns with ZF set iff AL contains CR or LF, or 0
 36747                                  ; -----------------------------------------------------------------------------
 36748                                  ; ENTRY:    AL contains character to test
 36749                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 36750                                  ; ERROR:    None
 36751                                  ; USES:     ZF
 36752                                  ; -----------------------------------------------------------------------------
 36753                                  
 36754                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36755                                  isEOL:
 36756                                  	;cmp	al,0		; Null-terminator
 36757 00005F0E 20C0                    	and	al,al
 36758 00005F10 7406                    	jz	short ieX
 36759 00005F12 3C0D                    	cmp	al,0Dh ; CR	; Carriage Return
 36760 00005F14 7402                    	je	short ieX
 36761 00005F16 3C0A                    	cmp	al,0Ah ; LF	; LineFeed
 36762                                  ieX:
 36763 00005F18 C3                      	retn
 36764                                  
 36765                                  
 36766                                  ; -----------------------------------------------------------------------------
 36767                                  ;*** isWhite - returns with ZF set iff AL contains whitespace (or "=")
 36768                                  ; -----------------------------------------------------------------------------
 36769                                  ; ENTRY:    AL contains character to test
 36770                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 36771                                  ; ERROR:    None
 36772                                  ; USES:     ZF
 36773                                  ; -----------------------------------------------------------------------------
 36774                                  
 36775                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36776                                  isWhite:
 36777 00005F19 3C20                    	cmp	al,' '		; Space
 36778 00005F1B 7406                    	je	short iwX
 36779 00005F1D 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 36780 00005F1F 7402                    	je	short iwX
 36781 00005F21 3C09                    	cmp	al,09h ; TAB	; Tab
 36782                                  iwX:
 36783 00005F23 C3                      	retn
 36784                                  
 36785                                  ; -----------------------------------------------------------------------------
 36786                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 36787                                  ; -----------------------------------------------------------------------------
 36788                                  ; ENTRY:    AL contains UMB number
 36789                                  ; EXIT:     None
 36790                                  ; ERROR:    None
 36791                                  ; USES:     Flags, variables in highvar.inc
 36792                                  ; -----------------------------------------------------------------------------
 36793                                  
 36794                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36795                                  unMarkUMB:
 36796                                  	;;pushreg <ax,bx,di,es>
 36797                                  	;push	ax ; ***
 36798                                  	
 36799                                  	;push	bx ; **
 36800                                  	
 36801                                  	;push	di
 36802                                  	;push	es
 36803 00005F24 1E                      	push	ds ; *	
 36804                                  
 36805                                  	;;dataseg es
 36806                                  	;mov	es,[RESSEG]
 36807                                  
 36808 00005F25 8E1E[F39D]              	mov	ds,[RESSEG] ; *
 36809                                  	
 36810                                  	;xor	ah,ah ; 0
 36811                                  	;mov	bx,ax
 36812                                  	;mov	byte [es:bx+UmbUsed],0
 36813                                  	;mov	[bx+UmbUsed],ah ; marks the UMB as unused
 36814 00005F29 88C3                    	mov	bl,al
 36815 00005F2B 30FF                    	xor	bh,bh ; 0	
 36816 00005F2D 88BF[0004]              	mov	[bx+UmbUsed],bh ; 0 ; **
 36817                                  
 36818                                  	;cmp	[es:UmbLoad],al
 36819                                  	;jnz	short umu10
 36820 00005F31 3806[DA04]              	cmp	[UmbLoad],al
 36821 00005F35 7504                    	jne	short umu10
 36822                                  
 36823                                  	;mov	byte [es:UmbLoad],0
 36824                                  	;mov	[UmbLoad],ah	; If unmarked the load UMB, load into convent.
 36825 00005F37 883E[DA04]              	mov	[UmbLoad],bh ; 0 ; **
 36826                                  umu10:	
 36827 00005F3B 1F                      	pop	ds ; *
 36828                                  	;;popreg <es,di,bx,ax>
 36829                                  	;pop	es
 36830                                  	;pop	di
 36831                                  	
 36832                                  	;pop	bx ; **
 36833                                  	
 36834                                  	;pop	ax ; ***
 36835                                  
 36836                                  	;;normseg es
 36837                                  	
 36838 00005F3C C3                      	retn
 36839                                  
 36840                                  ; -----------------------------------------------------------------------------
 36841                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 36842                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 36843                                  ; listed in the /L:... chain.  If it's the first one specified, it sets UmbLoad
 36844                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 36845                                  ; -----------------------------------------------------------------------------
 36846                                  ; ENTRY:    AL contains UMB number, as specified by the user
 36847                                  ; EXIT:     None
 36848                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 36849                                  ; USES:     AX, Flags, variables in highvar.inc
 36850                                  ; -----------------------------------------------------------------------------
 36851                                  
 36852                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36853                                  stowUMB:
 36854 00005F3D 3C10                    	cmp	al,16 ; MAXUMB
 36855 00005F3F 7202                    	jb	short su10
 36856 00005F41 F9                      	stc
 36857 00005F42 C3                      	retn			; Ooops-- UMB>=MAXUMB
 36858                                  su10:
 36859                                  	;pushreg <bx,di,si,ds,es>
 36860                                  	;dataseg es		; Point ES into appropriate data segment
 36861                                  	;dataseg ds		; Point DS into appropriate data segment
 36862                                  
 36863                                  	;push	bx ; **
 36864                                  	
 36865                                  	;push	di
 36866                                  	;push	si
 36867                                  
 36868 00005F43 1E                      	push	ds ; *
 36869                                  
 36870                                  	;push	es
 36871                                  	;mov	es,[RESSEG]
 36872 00005F44 8E1E[F39D]              	mov	ds,[RESSEG]
 36873                                  
 36874 00005F48 803E[DA04]FF            	cmp	byte [UmbLoad],0FFh ; UNSPECIFIED
 36875                                  				; If this, we haven't been here before
 36876 00005F4D 7503                    	jne	short su20
 36877 00005F4F A2[DA04]                	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 36878                                  su20:	
 36879 00005F52 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 36880 00005F54 740F                    	jz	short su30	; that we should do here.
 36881                                  
 36882                                  	;mov	bl,al
 36883                                  	;xor	bh,bh
 36884                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 36885 00005F56 30E4                    	xor	ah,ah
 36886 00005F58 89C3                    	mov	bx,ax
 36887 00005F5A B001                    	mov	al,1
 36888                                  
 36889                                  	;xchg	[es:bx+UmbUsed],al
 36890 00005F5C 8687[0004]              	xchg	[bx+UmbUsed],al
 36891                                  
 36892 00005F60 08C0                    	or	al,al		; If it was already 1, then al==1... and that
 36893 00005F62 7401                    	jz	short su30	; means an error.
 36894                                  
 36895 00005F64 F9                      	stc			; OOOPS! This one's been used before. :(
 36896                                  su30:	
 36897                                  	;popreg	<es,ds,si,di,bx>
 36898                                  	;normseg ds
 36899                                  	;normseg es
 36900                                  	;retn
 36901                                  
 36902                                  	;pop	es
 36903                                  	
 36904 00005F65 1F                      	pop	ds ; *
 36905                                  	
 36906                                  	;pop	si
 36907                                  	;pop	di
 36908                                  	
 36909                                  	;pop	bx ; **
 36910                                  
 36911 00005F66 C3                      	retn
 36912                                  
 36913                                  ; -----------------------------------------------------------------------------
 36914                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36915                                  ; -----------------------------------------------------------------------------
 36916                                  ; ENTRY:    CL contains UMB number, AX contains size
 36917                                  ; EXIT:     None
 36918                                  ; ERROR:    None
 36919                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36920                                  ; -----------------------------------------------------------------------------
 36921                                  	
 36922                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36923                                  stowSiz:
 36924                                  	;pushreg <bx,di,es>
 36925                                  	;dataseg es		; Point ES into appropriate data seg
 36926                                  
 36927                                  	;push	bx ; **
 36928                                  	
 36929                                  	;push	di
 36930                                  	;push	es
 36931                                  	;mov	es,[RESSEG]
 36932 00005F67 1E                      	push	ds ; *
 36933 00005F68 8E1E[F39D]              	mov	ds,[RESSEG]
 36934                                  
 36935 00005F6C 88CB                    	mov	bl,cl		; Now bl==UMB number, AX==size
 36936 00005F6E B700                    	mov	bh,0		;     bx==UMB number, AX==size
 36937 00005F70 D0E3                    	shl	bl,1		;     bx==offset into array, AX=size
 36938                                  	;mov	[es:bx+UmbSize],ax
 36939 00005F72 8987[1004]              	mov	[bx+UmbSize],ax	; Store the size
 36940                                  
 36941 00005F76 1F                      	pop	ds ; *
 36942                                  
 36943                                  	;popreg	<es,di,bx>
 36944                                  	;normseg es		; Return ES to where it was
 36945                                  
 36946                                  	;pop	es
 36947                                  	;pop	di
 36948                                  	
 36949                                  	;pop	bx ; **
 36950                                  
 36951 00005F77 C3                      	retn
 36952                                  
 36953                                  ; -----------------------------------------------------------------------------
 36954                                  ;*** toDigit - converts a character-digit to its binary counterpart
 36955                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 36956                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).  A-F
 36957                                  ; are considered valid iff gnradix is 16.
 36958                                  ; -----------------------------------------------------------------------------
 36959                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 36960                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 36961                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 36962                                  ; USES:     CL, Flags
 36963                                  ; -----------------------------------------------------------------------------
 36964                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36965                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36966                                  ; will be 10 or 16.
 36967                                  ; -----------------------------------------------------------------------------
 36968                                  
 36969                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36970                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6358h
 36971                                  gnradix:
 36972 00005F78 0000                    	dw	0		; Must be a word--16x16 multiplication
 36973                                  
 36974                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36975                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:635Ah
 36976                                  toDigit:
 36977                                  	;cmp	word [gnradix],16
 36978 00005F7A 803E[785F]10            	cmp	byte [gnradix],16
 36979 00005F7F 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 36980                                  
 36981 00005F81 80F961                  	cmp	cl,'a'
 36982 00005F84 7209                    	jb	short td10
 36983 00005F86 80F966                  	cmp	cl,'f'
 36984 00005F89 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 36985 00005F8B 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 36986                                  ;	clc			; <- CLC is implicit from last SUB
 36987 00005F8E C3                      	retn
 36988                                  td10:
 36989 00005F8F 80F941                  	cmp	cl,'A'
 36990 00005F92 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 36991 00005F94 80F946                  	cmp	cl,'F'
 36992 00005F97 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 36993 00005F99 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 36994                                  ;	clc			; <- CLC is implicit from last SUB
 36995                                  tdErr:
 36996 00005F9C C3                      	retn
 36997                                  td20:
 36998 00005F9D 80F930                  	cmp	cl,'0'		; If less than zero,
 36999                                  	;jb	short tdE	; Done.
 37000 00005FA0 72FA                    	jb	short tdErr ; cf = 1
 37001 00005FA2 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 37002 00005FA5 7704                    	ja	short tdE	; Done.
 37003 00005FA7 80E930                  	sub	cl,'0'	  ; 30h	; Okay--make '0'==0 and return.
 37004                                  ;	clc			; <- CLC is implicit from last SUB
 37005 00005FAA C3                      	retn
 37006                                  tdE:
 37007 00005FAB F9                      	stc
 37008 00005FAC C3                      	retn
 37009                                  
 37010                                  ; -----------------------------------------------------------------------------
 37011                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 37012                                  ; -----------------------------------------------------------------------------
 37013                                  ; ENTRY:    ES:SI points to an ascii string to scan
 37014                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 37015                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 37016                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 37017                                  ; -----------------------------------------------------------------------------
 37018                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 37019                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 37020                                  ; will be 10 or 16.
 37021                                  ; -----------------------------------------------------------------------------
 37022                                  
 37023                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 37024                                  GetXNum:
 37025                                  	;pushreg <bx,cx,ds>
 37026                                  	
 37027                                  	;push	bx ; **
 37028 00005FAD 51                      	push	cx ; *
 37029                                  	
 37030                                  	;push	ds
 37031                                  
 37032 00005FAE FC                      	cld
 37033 00005FAF 31C0                    	xor	ax,ax
 37034 00005FB1 31DB                    	xor	bx,bx
 37035 00005FB3 31C9                    	xor	cx,cx
 37036 00005FB5 31D2                    	xor	dx,dx		; Start with 0 (makes sense)
 37037                                  
 37038                                  	;mov	word [gnradix],10 ; And default to a radix of 10 (dec)
 37039 00005FB7 C606[785F]0A            	mov	byte [gnradix],10
 37040                                  
 37041 00005FBC 268A0C                  	mov	cl,[es:si]	; Now AX=0, BX=0, CH=0/CL=char, DX=0
 37042 00005FBF E8B8FF                  	call	toDigit
 37043 00005FC2 722D                    	jc	short gxnE	; If it's not a digit, leave now.
 37044                                  
 37045 00005FC4 08C9                    	or	cl,cl
 37046 00005FC6 7515                    	jnz	short gxn20	; Doesn't have '0x'
 37047 00005FC8 268A4C01                	mov	cl,[es:si+1]
 37048 00005FCC 80F978                  	cmp	cl,'x'		; Either 'x'...
 37049 00005FCF 7405                    	je	short gxn10
 37050 00005FD1 80F958                  	cmp	cl,'X'		; ...or 'X' means it's hexadecimal
 37051 00005FD4 7507                    	jne	short gxn20
 37052                                  
 37053                                  gxn10:
 37054                                  	;mov	word [gnradix],16
 37055 00005FD6 C606[785F]10            	mov	byte [gnradix],16
 37056 00005FDB 46                      	inc	si		; Since we read "0x", march over it.
 37057 00005FDC 46                      	inc	si
 37058                                  
 37059                                  ; ------------------------------------------------------
 37060                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 37061                                  ;        DX:AX = current total
 37062                                  ;        BX    = 0
 37063                                  ;        CH    = 0
 37064                                  ; ------------------------------------------------------
 37065                                  
 37066                                  gxn20:
 37067 00005FDD 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 37068 00005FE0 46                      	inc	si
 37069                                  
 37070 00005FE1 E896FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 37071 00005FE4 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 37072                                  
 37073 00005FE6 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 37074 00005FE9 7206                    	jc	short gxnX	; (if it's too big, error out)
 37075                                  
 37076 00005FEB 01C8                    	add	ax,cx		; Add the digit
 37077 00005FED 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 37078                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 37079                                  	;jmp	short gxn20
 37080 00005FEF 73EC                    	jnc	short gxn20
 37081                                  gxnE:
 37082                                  	; cf = 1
 37083                                  	;stc			; In this case, we need to set the carry
 37084                                  	;jmp	short gxnX	; and leave--there were no digits given.
 37085                                  ;gxnQ:
 37086                                  	;dec	si		; Don't read in the offensive character.
 37087                                  	;clc			; And clear carry, so they know it's okay.
 37088                                  gxnX:
 37089                                  	;popreg	<ds,cx,bx>
 37090                                  
 37091                                  	;pop	ds
 37092                                  
 37093 00005FF1 59                      	pop	cx ; *
 37094                                  	;pop	bx ; **
 37095                                  
 37096 00005FF2 C3                      	retn
 37097                                  gxnQ:
 37098 00005FF3 4E                      	dec	si
 37099 00005FF4 F8                      	clc
 37100 00005FF5 EBFA                    	jmp	short gxnX
 37101                                  
 37102                                  ; -----------------------------------------------------------------------------
 37103                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 37104                                  ; -----------------------------------------------------------------------------
 37105                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 37106                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 37107                                  ; ERROR:   Carry set if number was too large
 37108                                  ; USES:    Flags, AX, DX
 37109                                  ; -----------------------------------------------------------------------------
 37110                                  
 37111                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37112                                  mul32:
 37113 00005FF7 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 37114 00005FF8 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 37115 00005FFA F726[785F]              	mul	word [gnradix]	; DX=?,      AX=new:hi, TOS=old:lo, BX=0
 37116 00005FFE 7210                    	jc	short m32E	; Too big?
 37117                                  
 37118 00006000 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 37119 00006002 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig,   BX=0
 37120                                  
 37121 00006003 87D3                    	xchg	dx,bx		; DX=0,      AX=old:lo, TOS=orig,   BX=new:hi
 37122 00006005 F726[785F]              	mul	word [gnradix]	; DX=carry,  AX=new:lo, TOS=orig,   BX=new:hi
 37123 00006009 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 37124 0000600B 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 37125 0000600D 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=0
 37126 0000600F C3                      	retn
 37127                                  m32E:
 37128 00006010 58                      	pop	ax
 37129 00006011 C3                      	retn
 37130                                  
 37131                                  ; -----------------------------------------------------------------------------
 37132                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 37133                                  ; -----------------------------------------------------------------------------
 37134                                  ; ENTRY:   DX:AX = the number to be divided
 37135                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 37136                                  ; ERROR:   None
 37137                                  ; USES:    Flags, AX, DX
 37138                                  ; -----------------------------------------------------------------------------
 37139                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 37140                                  ;       can't ensure a 386 host machine. Sorry.
 37141                                  ; -----------------------------------------------------------------------------
 37142                                  
 37143                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37144                                  toPara:
 37145 00006012 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 37146                                  
 37147 00006013 B104                    	mov	cl,4		;
 37148 00006015 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 37149 00006017 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 37150 00006018 B10C                    	mov	cl,12
 37151 0000601A D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 37152 0000601C 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 37153                                  
 37154 0000601E 59                      	pop	cx
 37155 0000601F C3                      	retn
 37156                                  
 37157                                  ; -----------------------------------------------------------------------------
 37158                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 37159                                  ; -----------------------------------------------------------------------------
 37160                                  ; ENTRY:  Nothing
 37161                                  ; EXIT:   AX contains 0x9FFF for most systems
 37162                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37163                                  ; USES:   Flags, AX
 37164                                  ; -----------------------------------------------------------------------------
 37165                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 37166                                  ; to be precise, before a UMB provider is around.  In this event, the pointer
 37167                                  ; is always set to 0xFFFF; it changes once a provider is around.  On most
 37168                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 37169                                  ; -----------------------------------------------------------------------------
 37170                                  
 37171                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37172                                  UmbHead:
 37173                                  	;pushreg <si,ds,es>
 37174                                  	
 37175                                  	;push	si
 37176                                  	;push	ds
 37177                                  	;push	es
 37178                                  
 37179 00006020 B452                    	mov	ah,52h	; DOS_GET_DOS_LISTS
 37180                                  					; Call int 21h, function 52h...
 37181 00006022 CD21                    	int	21h
 37182                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37183                                  			; Return: ES:BX -> DOS list of lists
 37184                                  
 37185                                  	;mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 37186 00006024 26A18C00                	mov	ax,[es:8Ch]
 37187 00006028 83F8FF                  	cmp	ax,0FFFFh
 37188                                  	;je	short uhE		; If it's 0xFFFF, it's an error...
 37189                                  
 37190                                  	;clc				; Else, it isn't (CLC done by prev cmp)
 37191                                  	;jmp	short uhX
 37192                                  	; 17/06/2023
 37193 0000602B F5                      	cmc	; cf = 0 <--> cf = 1
 37194                                  uhE:
 37195                                  	;stc
 37196                                  uhX:	
 37197                                  	;popreg	<es,ds,si>
 37198                                  	
 37199                                  	;pop	es
 37200                                  	;pop	ds
 37201                                  	;pop	si
 37202                                  
 37203 0000602C C3                      	retn
 37204                                  
 37205                                  ; -----------------------------------------------------------------------------
 37206                                  ;*** isSysMCB - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 37207                                  ; -----------------------------------------------------------------------------
 37208                                  ; ENTRY:  ES:0 should point to a valid MCB
 37209                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 37210                                  ; USES:   Flags
 37211                                  ; -----------------------------------------------------------------------------
 37212                                  
 37213                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37214                                  isSysMCB:
 37215                                  	;push	ax
 37216                                  	
 37217                                  	;mov	ax,[es:1]
 37218 0000602D 26A10100                	mov	ax,[es:arena_owner]	; Check the owner...
 37219 00006031 83F808                  	cmp	ax,8 ; SystemPSPOwner	; 8 (for US OR Japan) is valid
 37220 00006034 7405                    	jz	short ism10
 37221 00006036 83F809                  	cmp	ax,9 ; JapanPSPOwner	; 9 (for Japan) is valid
 37222                                  	;jz	short ism10
 37223                                  	;jmp	short ismX		; Anything else isn't.
 37224 00006039 7507                    	jnz	short ismX
 37225                                  ism10:
 37226                                  	;mov	ax,[es:8]
 37227 0000603B 26A10800                	mov	ax,[es:arena_name]	; Check the name...
 37228 0000603F 3D5343                  	cmp	ax,'SC' ; cmp ax,4353h
 37229                                  ismX:
 37230                                  	;pop	ax
 37231 00006042 C3                      	retn
 37232                                  
 37233                                  ; -----------------------------------------------------------------------------
 37234                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 37235                                  ; -----------------------------------------------------------------------------
 37236                                  ; ENTRY:  AX contains a segment address
 37237                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 37238                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 37239                                  ; USES:   Flags, AX
 37240                                  ; -----------------------------------------------------------------------------
 37241                                  ; An address in the following areas is treated as:
 37242                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 37243                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 37244                                  ;      ...
 37245                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 37246                                  ; -----------------------------------------------------------------------------
 37247                                  
 37248                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37249                                  AddrToUmb:
 37250                                  	;pushreg <cx,dx,es>
 37251                                  	
 37252                                  	;push	cx
 37253                                  	;push	dx
 37254 00006043 06                      	push	es
 37255                                  
 37256 00006044 89C2                    	mov	dx,ax		; DX = address to search for
 37257                                  
 37258 00006046 E8D7FF                  	call	UmbHead		; AX = first segment
 37259 00006049 722B                    	jc	short atuE	; If it couldn't get it, error out.
 37260                                  
 37261                                  	;mov	es,ax ; *	; ES = first UMB segment
 37262 0000604B 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 37263                                  
 37264                                  ; ----------------------------------------
 37265                                  ; ATU10--ES - Current MCB address
 37266                                  ;        DX - Address given for conversion
 37267                                  ;        CX - Current UMB #
 37268                                  ; ----------------------------------------
 37269                                  
 37270                                  	; 17/06/2023
 37271                                  atu10:
 37272 0000604D 8EC0                    	mov	es,ax ; *
 37273                                  ;atu10:
 37274                                  	;mov	ax,es
 37275 0000604F 39D0                            cmp	ax,dx		; Present segment >= given segment?
 37276 00006051 7326                    	jae	short atuX	; Yep--done.
 37277                                  
 37278 00006053 E8D7FF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 37279 00006056 7501                    	jnz	short atu20
 37280                                  
 37281 00006058 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 37282                                  atu20:
 37283                                  	;mov	al,[es:0]
 37284 00006059 26A00000                	mov	al,[es:arena_signature]
 37285                                  	;cmp	al,'Z' ; 5Ah
 37286 0000605D 3C5A                    	cmp	al,arena_signature_end
 37287 0000605F 740A                    	je	short atu30	; 'Z' means this was the last MCB... that's it.
 37288                                  
 37289                                  	;NextMCB es,ax
 37290 00006061 8CC0                    	mov	ax,es
 37291                                  	;add	ax,[es:3]	; NextMCB (macro)
 37292 00006063 2603060300              	add	ax,[es:arena_size]
 37293 00006068 40                      	inc	ax
 37294                                  	;mov	es,ax ; * ; 17/06/2023
 37295 00006069 EBE2                    	jmp	short atu10
 37296                                  
 37297                                  ; -----------------------------------------------------------------------------
 37298                                  ; if we get to atu30, they specified a number that was past the last MCB.
 37299                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 37300                                  ; -----------------------------------------------------------------------------
 37301                                  
 37302                                  atu30:
 37303 0000606B 8CC0                    	mov	ax,es
 37304                                  	;add	ax,[es:3]
 37305 0000606D 2603060300              	add	ax,[es:arena_size]
 37306 00006072 39D0                    	cmp	ax,dx		; Present >= given?
 37307 00006074 7303                    	jae	short atuX	; Yep! It _was_ inside.
 37308                                  atuE:
 37309 00006076 31C9                    	xor	cx,cx		; Else, fall through with UMB # == -1
 37310 00006078 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 37311                                  atuX:	
 37312 00006079 89C8                    	mov	ax,cx		; Return the UMB number in AX
 37313                                  	
 37314                                  	;popreg	<es,dx,cx>
 37315                                  
 37316 0000607B 07                      	pop	es
 37317                                  	;pop	dx
 37318                                  	;pop	cx
 37319                                  	
 37320 0000607C C3                      	retn
 37321                                  
 37322                                  ; -----------------------------------------------------------------------------
 37323                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 37324                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 37325                                  ; address rather than a UMB number... and use that address to look up a UMB.
 37326                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 37327                                  ; -----------------------------------------------------------------------------
 37328                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 37329                                  ; EXIT:   AX will contain a UMB number
 37330                                  ; ERROR:  None
 37331                                  ; USES:   Flags, AX
 37332                                  ; -----------------------------------------------------------------------------
 37333                                  
 37334                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37335                                  convUMB:
 37336                                  	;cmp	word [gnradix],16
 37337 0000607D 803E[785F]10            	cmp	byte [gnradix],16
 37338 00006082 7509                    	jne	short cu10	; If it didn't read in hex, it's not an address
 37339 00006084 E8BCFF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 37340 00006087 83F8FF                  	cmp	ax,0FFFFh
 37341 0000608A 7501                    	jne	short cu10
 37342 0000608C 40                      	inc	ax ; ax = 0	; If too high, ignore it (make it conventional)
 37343                                  cu10:
 37344 0000608D C3                      	retn
 37345                                  
 37346                                  ; -----------------------------------------------------------------------------
 37347                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 37348                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 37349                                  ; of the usual HIGH_FIRST.  See the code.
 37350                                  ; -----------------------------------------------------------------------------
 37351                                  ; ENTRY:  None
 37352                                  ; EXIT:   None
 37353                                  ; ERROR:  None
 37354                                  ; USES:   Flags, fm_umb, fm_strat
 37355                                  ; -----------------------------------------------------------------------------
 37356                                  
 37357                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37358                                  setUMBs:
 37359                                  	;pushreg <ax,bx>
 37360                                  	
 37361                                  	;push	ax
 37362                                  	;push	bx
 37363                                  
 37364 0000608E E8B2FD                  	call	fm_link
 37365                                  
 37366 00006091 B80058                  	mov	ax,5800h ; DOS_CHECK_STRATEGY
 37367 00006094 CD21                    	int	21h
 37368                                  
 37369                                  	;putdata fm_strat,al	; Store the current strategy for later restore
 37370                                  
 37371                                  	;push	es
 37372                                  	;mov	es,[RESSEG]
 37373                                  	;mov	[es:fm_strat],al ; store the current strategy
 37374                                  	;pop	es
 37375 00006096 1E                      	push	ds ; *
 37376 00006097 8E1E[F39D]              	mov	ds,[RESSEG]
 37377 0000609B A2[DC04]                	mov	[fm_strat],al
 37378                                  	;pop	ds ; *
 37379                                  
 37380 0000609E 83E07F                  	and	ax,007Fh	; 0000.0000.0111.1111 == All that other stuff
 37381 000060A1 50                      	push	ax ; **		; Watch this carefully...
 37382                                  
 37383 000060A2 E80C00                  	call	loadLow		; returns al==0 if load low, al==1 if loadhigh
 37384 000060A5 D0C8                    	ror	al,1		; Shift that to al==0 or al==0x80
 37385                                  
 37386 000060A7 5B                      	pop	bx ; **		; ...pushed as AX above
 37387                                  	
 37388 000060A8 1F                      	pop	ds ; *
 37389                                  	
 37390 000060A9 08C3                    	or	bl,al		; Now we have 0000.0000.?111.1111 in BX;
 37391                                  
 37392 000060AB B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 37393                                  				; with ? ==1 if load highfirst. Perfect!
 37394 000060AE CD21                    	int	21h
 37395                                  
 37396                                  	;popreg	<bx,ax>
 37397                                  
 37398                                  	;pop	bx
 37399                                  	;pop	ax
 37400                                  
 37401 000060B0 C3                      	retn
 37402                                  
 37403                                  ; -----------------------------------------------------------------------------
 37404                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 37405                                  ; -----------------------------------------------------------------------------
 37406                                  ; ENTRY:  None
 37407                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 37408                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 37409                                  ; ERROR:  None
 37410                                  ; USES:   Flags, fm_strat, fm_umb
 37411                                  ; -----------------------------------------------------------------------------
 37412                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 37413                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 37414                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 37415                                  ; such that the load UMB is too small, and shouldn't be used.
 37416                                  ; -----------------------------------------------------------------------------
 37417                                  
 37418                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37419                                  loadLow:
 37420                                  	;push	ds ; *	
 37421                                  	
 37422                                  	;dataseg ds		; Point DS into appropriate data segment
 37423                                  	;mov	ds,[RESSEG]
 37424                                  
 37425                                  	; * ; ds = [RESSEG] from 'setUMBs') ; 17/06/2023
 37426                                  
 37427 000060B1 A0[DA04]                	mov	al,[UmbLoad]
 37428 000060B4 3CFF                    	cmp	al,0FFh ; UNSPECIFIED
 37429 000060B6 7503                    	jne	short ll10
 37430                                  
 37431                                  	;mov	al,1		; Return with AL==1 && STC if no UMBs specified
 37432 000060B8 F9                      	stc
 37433                                  	;jmp	short llX
 37434 000060B9 EB04                    	jmp	short lly ; 17/06/2023
 37435                                  ll10:
 37436 000060BB 08C0                    	or	al,al		; AL=the load UMB: Is it == 0?
 37437 000060BD 7402                    	jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 37438                                  	; cf= 0
 37439                                  
 37440                                  	;mov	al,1
 37441                                  	;clc	
 37442                                  lly:		; 17/06/2023
 37443 000060BF B001                    	mov	al,1
 37444                                  llX:
 37445                                  	;pop	ds ; *		; Return DS to where it was
 37446                                  	
 37447                                  	;normseg ds		;
 37448                                  	
 37449 000060C1 C3                      	retn
 37450                                  
 37451                                  ; -----------------------------------------------------------------------------
 37452                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 37453                                  ; -----------------------------------------------------------------------------
 37454                                  ; ENTRY:  None
 37455                                  ; EXIT:   None
 37456                                  ; ERROR:  None
 37457                                  ; USES:   Flags, fm_strat, fm_umb
 37458                                  ; -----------------------------------------------------------------------------
 37459                                  
 37460                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37461                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:64D0h
 37462                                  HideUMBs:
 37463                                  	;pushreg <ax,cx,ds,es>
 37464                                  	
 37465                                  	;push	ax
 37466                                  	;push	cx
 37467                                  	;push	ds
 37468                                  	;push	es
 37469                                  
 37470 000060C2 E8EF01                  	call	UmbTest		; See if we REALLY linked in anything...
 37471 000060C5 7236                    	jc	short husX	; ...if not, there's nothing for us to do.
 37472                                  
 37473 000060C7 E82CFD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 37474 000060CA E8C1FF                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 37475                                  
 37476                                  	;putdata fInHigh,1	; Remember that we're now running high
 37477                                  	;push	es
 37478                                  	;mov	es,[RESSEG]
 37479                                  	;mov	byte [es:fInHigh], 1
 37480                                  	;			; remember that we're now running high
 37481                                  	;pop	es
 37482 000060CD 1E                      	push	ds
 37483 000060CE 8E1E[F39D]              	mov	ds,[RESSEG]
 37484 000060D2 C606[D604]01            	mov	byte [fInHigh], 1
 37485 000060D7 1F                      	pop	ds
 37486                                  
 37487 000060D8 E82300                  	call	GetLoadUMB	; See if they gave us a list to leave free
 37488 000060DB 3CFF                    	cmp	al,0FFh	; UNSPECIFIED
 37489                                  				; If they didn't,
 37490 000060DD 741E                    	je	short husX	; then we shouldn't do this loop:
 37491                                  
 37492 000060DF 31C9                    	xor	cx,cx
 37493                                  
 37494                                  ; -----------------------------------------------
 37495                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 37496                                  ; -----------------------------------------------
 37497                                  
 37498                                  hus10:
 37499 000060E1 41                      	inc	cx		; For each UMB:
 37500 000060E2 83F910                  	cmp	cx,16 ; MAXUMB
 37501 000060E5 730C                    	jae	short hus20
 37502                                  
 37503 000060E7 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 37504                                  	; 17/06/2023
 37505                                  	;push	es
 37506 000060E9 E8A900                  	call	findumb		; valid range of UMBs)
 37507                                  	;pop	es		; push/pop: trash what findumb finds.  :-)
 37508 000060EC 7205                    	jc	short hus20
 37509                                  
 37510 000060EE E87901                  	call	hideUMB?	; hide what we need to hide.
 37511                                  
 37512 000060F1 EBEE                    	jmp	short hus10
 37513                                  hus20:
 37514 000060F3 E80800                  	call	GetLoadUMB	; Now check if they offered /L:0
 37515 000060F6 08C0                    	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 37516 000060F8 7503                    	jnz	short husX	; If not, we're done.
 37517                                  
 37518 000060FA E8E701                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 37519                                  husX:
 37520                                  	;popreg	<es,ds,cx,ax>
 37521                                  	
 37522                                  	;pop	es
 37523                                  	;pop	ds
 37524                                  	;pop	cx
 37525                                  	;pop	ax
 37526                                  
 37527 000060FD C3                      	retn
 37528                                  
 37529                                  ; -----------------------------------------------------------------------------
 37530                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 37531                                  ; -----------------------------------------------------------------------------
 37532                                  ; ENTRY:  None
 37533                                  ; EXIT:   AL == load UMB
 37534                                  ; ERROR:  None
 37535                                  ; USES:   Flags, AX
 37536                                  ; -----------------------------------------------------------------------------
 37537                                  
 37538                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37539                                  GetLoadUMB:
 37540                                  	;getdata al,UmbLoad
 37541                                  
 37542 000060FE 1E                      	push    ds
 37543 000060FF 8E1E[F39D]              	mov     ds,[RESSEG]   ; getdata (macro)
 37544 00006103 A0[DA04]                	mov     al,[UmbLoad]
 37545 00006106 1F                      	pop     ds
 37546                                  
 37547 00006107 C3                      	retn
 37548                                  
 37549                                  ; -----------------------------------------------------------------------------
 37550                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 37551                                  ; -----------------------------------------------------------------------------
 37552                                  ; ENTRY:  AL == a UMB number
 37553                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 37554                                  ; ERROR:  None
 37555                                  ; USES:   Flags, AX
 37556                                  ; -----------------------------------------------------------------------------
 37557                                  
 37558                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37559                                  GetSize:
 37560                                  	;pushreg <bx,si,ds>
 37561                                  	;push	bx
 37562                                  	;push	si
 37563 00006108 1E                      	push	ds
 37564                                  	
 37565                                  	;dataseg ds
 37566 00006109 8E1E[F39D]              	mov	ds,[RESSEG]
 37567                                  
 37568 0000610D 30E4                    	xor	ah,ah			;    ax==UMB
 37569                                  	;mov	bx,offset UmbSize
 37570 0000610F BB[1004]                	mov	bx,UmbSize		;    bx==array
 37571 00006112 D0E0                    	shl	al,1	                ;    ax==offset
 37572                                  	;add	ax,bx			;    ax==element index
 37573                                  	;mov	si,ax			; ds:si==element index
 37574                                  	;lodsw				;    ax==size
 37575 00006114 01C3                    	add	bx,ax
 37576 00006116 8B07                    	mov	ax,[bx]
 37577                                  
 37578                                  	;popreg	<ds,si,bx>
 37579 00006118 1F                      	pop	ds
 37580                                  	;pop	si
 37581                                  	;pop	bx
 37582                                  
 37583                                  	;normseg ds
 37584 00006119 C3                      	retn
 37585                                  
 37586                                  ; -----------------------------------------------------------------------------
 37587                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 37588                                  ; -----------------------------------------------------------------------------
 37589                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 37590                                  ; EXIT:     None; free elements in UMB marked as hidden
 37591                                  ; ERROR:    None
 37592                                  ; USES:     Flags
 37593                                  ; -----------------------------------------------------------------------------
 37594                                  
 37595                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37596                                  hideUMB:
 37597                                  	;pushreg <ax,es>
 37598                                  	
 37599                                  	;push	ax
 37600                                  	;push	es
 37601                                  
 37602 0000611A E87800                  	call	findumb		; Returns with carry if err, else ES == MCB
 37603 0000611D 7221                    	jc	short huX
 37604                                  
 37605                                  ; ------------------------------------------------
 37606                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 37607                                  ;            we're not in the same UMB, so exit.
 37608                                  ; ------------------------------------------------
 37609                                  
 37610                                  hu10:
 37611 0000611F E80BFF                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37612 00006122 741C                    	jz	short huX	; If it is, we've finished the UMB.
 37613 00006124 E82800                  	call	isFreeMCB	; Returns with ZF set if owner is 0
 37614 00006127 7503                    	jnz	short hu20
 37615                                  
 37616 00006129 E82A00                  	call	hideMCB
 37617                                  hu20:
 37618                                  	;mov	al,[es:0]
 37619 0000612C 26A00000                	mov	al,[es:arena_signature]
 37620                                  	;cmp	al,'Z'
 37621 00006130 3C5A                    	cmp	al,arena_signature_end
 37622 00006132 740C                    	je	short huX	; 'Z' means this was the last MCB... that's it.
 37623                                  
 37624                                  	;NextMCB es,ax		; Go on forward.
 37625                                  
 37626 00006134 8CC0                     	mov	ax,es		; NextMCB (macro)
 37627                                  	;add	ax,[es:3]
 37628 00006136 2603060300              	add	ax,[es:arena_size]
 37629 0000613B 40                      	inc	ax
 37630 0000613C 8EC0                    	mov	es,ax
 37631                                  
 37632 0000613E EBDF                    	jmp	short hu10
 37633                                  huX:
 37634                                  	;popreg	<es,ax>
 37635                                  	
 37636                                  	;pop	es
 37637                                  	;pop	ax
 37638                                  
 37639 00006140 C3                      	retn
 37640                                  
 37641                                  ; -----------------------------------------------------------------------------
 37642                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 37643                                  ; -----------------------------------------------------------------------------
 37644                                  ; ENTRY:    None
 37645                                  ; EXIT:     ZF set if user DIDN'T specify /S
 37646                                  ; ERROR:    None
 37647                                  ; USES:     Flags
 37648                                  ; -----------------------------------------------------------------------------
 37649                                  
 37650                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37651                                  isTiny:
 37652 00006141 50                      	push	ax
 37653                                  
 37654                                  	;getdata al,fUmbTiny
 37655 00006142 1E                      	push    ds
 37656 00006143 8E1E[F39D]              	mov     ds,[RESSEG]   ; getdata (macro)
 37657 00006147 A0[D704]                	mov     al,[fUmbTiny]
 37658 0000614A 1F                      	pop     ds
 37659                                  
 37660 0000614B 08C0                    	or	al,al
 37661 0000614D 58                      	pop	ax
 37662 0000614E C3                      	retn
 37663                                  
 37664                                  ; -----------------------------------------------------------------------------
 37665                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 37666                                  ; -----------------------------------------------------------------------------
 37667                                  ; ENTRY:    ES:0 should point to an MCB
 37668                                  ; EXIT:     ZF set if MCB is free, else !ZF
 37669                                  ; ERROR:    None
 37670                                  ; USES:     Flags
 37671                                  ; -----------------------------------------------------------------------------
 37672                                  
 37673                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37674                                  isFreeMCB:
 37675                                  	;or	word [es:1],0
 37676 0000614F 26830E010000            	or	word [es:arena_owner],0
 37677 00006155 C3                      	retn
 37678                                  
 37679                                  ; -----------------------------------------------------------------------------
 37680                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 37681                                  ; -----------------------------------------------------------------------------
 37682                                  ; ENTRY:    ES:0 should point to an MCB
 37683                                  ; EXIT:     None; MCB marked as HIDDEN
 37684                                  ; ERROR:    None
 37685                                  ; USES:     None
 37686                                  ; -----------------------------------------------------------------------------
 37687                                  
 37688                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37689                                  hideMCB:
 37690                                  	;mov	word [es:1],8
 37691 00006156 26C70601000800          	mov	word [es:arena_owner],8 ; SystemPSPOwner
 37692                                  	;mov	word [es:8],4948h     ; 'HIDDEN  ' 
 37693 0000615D 26C70608004849          	mov	word [es:arena_name+0], 'HI' ; 4948h
 37694 00006164 26C7060A004444          	mov	word [es:arena_name+2], 'DD' ; 4444h
 37695 0000616B 26C7060C00454E          	mov	word [es:arena_name+4], 'EN' ; 4E45h
 37696                                  	;mov	word [es:14],2020h
 37697 00006172 26C7060E002020          	mov	word [es:arena_name+6], '  ' ; 2020h 
 37698 00006179 C3                      	retn
 37699                                  
 37700                                  ; -----------------------------------------------------------------------------
 37701                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 37702                                  ; -----------------------------------------------------------------------------
 37703                                  ; ENTRY:    ES:0 should point to an MCB
 37704                                  ; EXIT:     None; MCB marked as FREE
 37705                                  ; ERROR:    None
 37706                                  ; USES:     None
 37707                                  ; -----------------------------------------------------------------------------
 37708                                  
 37709                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37710                                  unHideMCB:
 37711                                  	;push	ax
 37712                                  	;mov	word [es:1],0
 37713 0000617A 26C70601000000          	mov	word [es:arena_owner],0 ; FreePSPOwner
 37714 00006181 B82020                  	mov	ax, '  '  ; mov ax,2020h
 37715                                  	;mov	[es:8],ax
 37716 00006184 26A30800                	mov	[es:arena_name+0],ax
 37717 00006188 26A30A00                	mov	[es:arena_name+2],ax
 37718 0000618C 26A30C00                	mov	[es:arena_name+4],ax
 37719                                  	;mov	[es:14],ax
 37720 00006190 26A30E00                	mov	[es:arena_name+6],ax
 37721                                  	;pop	ax
 37722 00006194 C3                      	retn
 37723                                  
 37724                                  ; -----------------------------------------------------------------------------
 37725                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 37726                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 37727                                  ; -----------------------------------------------------------------------------
 37728                                  ; ENTRY:    AL should be to a valid UMB number
 37729                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 37730                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 37731                                  ; USES:     Flags, ES
 37732                                  ; -----------------------------------------------------------------------------
 37733                                  
 37734                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37735                                  findumb:
 37736                                  	;pushreg <ax,cx,dx>
 37737                                  	
 37738                                  	;push	ax
 37739 00006195 51                      	push	cx
 37740 00006196 52                      	push	dx
 37741                                  
 37742 00006197 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37743                                  
 37744 00006199 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 37745                                  
 37746 0000619B E882FE                  	call	UmbHead		; Returns first UMB segment in AX
 37747                                  
 37748 0000619E 8EC0                    	mov	es,ax
 37749 000061A0 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37750                                  
 37751                                  ; ---------------------------------------------
 37752                                  ; FU10--CX - This UMB number; 0 == conventional
 37753                                  ;       DX - The UMB number they're looking for
 37754                                  ;       ES - The current MCB address
 37755                                  ; ---------------------------------------------
 37756                                  
 37757                                  fu10:	
 37758 000061A2 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 37759 000061A4 741B                    	je	short fuX	; searching for--so exit.
 37760                                  
 37761 000061A6 E884FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37762 000061A9 7501                    	jnz	short fu20
 37763                                  
 37764 000061AB 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37765                                  fu20:
 37766                                  	;mov	al,[es:0]
 37767 000061AC 26A00000                	mov	al,[es:arena_signature]
 37768                                  	;cmp	al,'Z'
 37769 000061B0 3C5A                    	cmp	al,arena_signature_end
 37770 000061B2 740C                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 37771                                  
 37772                                  	;NextMCB es,ax		; Go on forward.
 37773                                  
 37774 000061B4 8CC0                     	mov	ax,es		; NextMCB (macro)
 37775                                  	;add	ax,[es:3]
 37776 000061B6 2603060300              	add	ax,[es:arena_size]
 37777 000061BB 40                      	inc	ax
 37778 000061BC 8EC0                    	mov	es,ax
 37779                                  
 37780 000061BE EBE2                    	jmp	short fu10
 37781                                  fuE:
 37782 000061C0 F9                      	stc
 37783                                  fuX:
 37784                                  	;popreg	<dx,cx,ax>	; The address is already in ES.
 37785                                  	
 37786 000061C1 5A                      	pop	dx
 37787 000061C2 59                      	pop	cx
 37788                                  	
 37789                                  	;pop	ax
 37790 000061C3 C3                      	retn
 37791                                  
 37792                                  ; -----------------------------------------------------------------------------
 37793                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 37794                                  ; -----------------------------------------------------------------------------
 37795                                  ; ENTRY:    AL should be to a valid UMB number
 37796                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 37797                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 37798                                  ; USES:     Flags, ES
 37799                                  ; -----------------------------------------------------------------------------
 37800                                  
 37801                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37802                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6624h
 37803                                  BigFree:
 37804                                  	;pushreg <bx,cx>
 37805                                  	
 37806                                  	;push	bx
 37807 000061C4 51                      	push	cx
 37808                                  
 37809 000061C5 E8CDFF                  	call	findumb			; Returns with CF if err, else ES==MCB
 37810 000061C8 7239                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 37811                                  
 37812 000061CA 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 37813 000061CC 31C9                    	xor	cx,cx			; Size of largest free MCB
 37814                                  
 37815                                  ; ---------------------------------------------
 37816                                  ; BF10--ES - Current MCB address
 37817                                  ;       BX - Address of largest free MCB so far
 37818                                  ;       CX - Size of largest free MCB so far
 37819                                  ; ---------------------------------------------
 37820                                  
 37821                                  bf10:
 37822 000061CE E85CFE                  	call	isSysMCB		; If we've left the MCB, we're done.
 37823 000061D1 7427                    	jz	short bf30
 37824                                  
 37825 000061D3 E879FF                  	call	isFreeMCB		; Returns with ZF set if owner is 0
 37826 000061D6 750E                    	jnz	short bf20
 37827                                  
 37828                                  	;cmp	cx,[es:3]
 37829 000061D8 263B0E0300              	cmp	cx,[es:arena_size]	; Compare sizes...
 37830 000061DD 7F07                    	jg	short bf20		; Unless we're bigger,
 37831                                  
 37832 000061DF 8CC3                    	mov	bx,es			; Store this new element's address,
 37833                                  	;mov	cx,[es:3]
 37834 000061E1 268B0E0300              	mov	cx,[es:arena_size]	; and its size.
 37835                                  bf20:
 37836                                  	;mov	al,[es:0]
 37837 000061E6 26A00000                	mov	al,[es:arena_signature]
 37838                                  	;cmp	al,'Z'  ; 5Ah
 37839 000061EA 3C5A                    	cmp	al,arena_signature_end
 37840 000061EC 740C                    	je	short bf30		; 'Z' means this was the last MCB.
 37841                                  
 37842                                  	;NextMCB es,ax			; Go on forward.
 37843                                  
 37844 000061EE 8CC0                    	mov	ax,es 
 37845                                  	;add	ax,[es:3]
 37846 000061F0 2603060300              	add	ax,[es:arena_size]
 37847 000061F5 40                      	inc	ax
 37848 000061F6 8EC0                    	mov	es,ax
 37849                                  
 37850 000061F8 EBD4                    	jmp	short bf10
 37851                                  bf30:
 37852 000061FA 8EC3                    	mov	es,bx			; Return the address
 37853 000061FC 89C8                    	mov	ax,cx			; Return the size
 37854 000061FE 09DB                    	or	bx,bx
 37855 00006200 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 37856                                  bfE:
 37857 00006202 F9                      	stc
 37858                                  bfX:
 37859                                  	;popreg	<cx,bx>
 37860                                  
 37861 00006203 59                      	pop	cx
 37862                                  	;pop	bx
 37863                                  
 37864 00006204 C3                      	retn
 37865                                  
 37866                                  ; -----------------------------------------------------------------------------
 37867                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 37868                                  ; -----------------------------------------------------------------------------
 37869                                  ; ENTRY:    AL should be to a valid UMB number
 37870                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 37871                                  ; ERROR:    None
 37872                                  ; USES:     Flags
 37873                                  ; -----------------------------------------------------------------------------
 37874                                  
 37875                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37876                                  isSpecified:
 37877                                  	;push	ax
 37878                                  
 37879 00006205 30FF                    	xor	bh,bh
 37880 00006207 88C3                    	mov	bl,al
 37881                                  
 37882                                  	;getdata al,DS:UmbUsed[bx]
 37883                                  
 37884 00006209 1E                      	push	ds
 37885 0000620A 8E1E[F39D]              	mov	ds,[RESSEG]
 37886 0000620E 8A87[0004]              	mov	al,[bx+UmbUsed]
 37887 00006212 1F                      	pop     ds
 37888                                  
 37889 00006213 08C0                    	or	al,al		; Sets ZF if al==0 (ie, if unspecified)
 37890                                  
 37891                                  	;pop	ax
 37892 00006215 C3                      	retn
 37893                                  
 37894                                  ; -----------------------------------------------------------------------------
 37895                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 37896                                  ; -----------------------------------------------------------------------------
 37897                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 37898                                  ; EXIT:     None; MCB broken if carry clear
 37899                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 37900                                  ; USES:     Flags
 37901                                  ; -----------------------------------------------------------------------------
 37902                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 37903                                  ; the specified new size, the split is useless; if it's onnly 0x10 bytes, that
 37904                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 37905                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 37906                                  ; minimum for performing a split.
 37907                                  ; -----------------------------------------------------------------------------
 37908                                  
 37909                                  ;MIN_SPLIT_SIZE	equ 20h
 37910                                  
 37911                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37912                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:667Ah
 37913                                  shrinkMCB:
 37914                                  	;pushreg <bx,cx,es>
 37915                                  
 37916                                  	;push	bx
 37917 00006216 51                      	push	cx ; *
 37918 00006217 26                      	psuh	es ; **
 37919                                  
 37920 00006218 89C3                    	mov	bx,ax			; Move things around... and
 37921 0000621A 8CC0                    	mov	ax,es			; save this one for later.
 37922                                  
 37923 0000621C 268B0E0300              	mov	cx,[es:arena_size]
 37924 00006221 83E920                  	sub	cx,32 ; sub cx,MIN_SPLIT_SIZE
 37925                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37926                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37927 00006224 39D9                    	cmp	cx,bx
 37928 00006226 723E                    	jb	short smE ; cf = 1 (***)
 37929                                  
 37930                                  	;mov	dl,[es:0]
 37931 00006228 268A160000              	mov	dl,[es:arena_signature]
 37932                                  
 37933                                  	;;mov	cx,[es:3]
 37934                                  	;mov	cx,[es:arena_size] ; *!
 37935                                  
 37936 0000622D 26891E0300              	mov	[es:arena_size],bx
 37937                                  	;mov	byte [es:0],'M' ; 4Dh
 37938 00006232 26C60600004D            	mov	byte [es:arena_signature],'M'
 37939                                  
 37940 00006238 01D8                    	add	ax,bx
 37941 0000623A 40                      	inc	ax
 37942 0000623B 8EC0                    	mov	es,ax			; Move to new arena area
 37943                                  
 37944                                  	;mov	ax,cx ; !*
 37945 0000623D 26A10300                	mov	ax,[es:arena_size] ; *!
 37946 00006241 29D8                    	sub	ax,bx
 37947 00006243 48                      	dec	ax			; And prepare the new size
 37948                                  
 37949                                  	;mov	[es:0],dl
 37950 00006244 2688160000              	mov	[es:arena_signature],dl
 37951                                  	;;mov	word [es:1],0
 37952                                  	;mov	word [es:arena_owner],0
 37953                                  	;mov	[es:3],ax
 37954 00006249 26A30300                	mov	[es:arena_size],ax
 37955 0000624D B82020                  	mov	ax,'  ' ; mov ax,2020h
 37956                                  	;mov	[es:8],ax
 37957 00006250 26A30800                	mov	[es:arena_name+0],ax
 37958 00006254 26A30A00                	mov	[es:arena_name+2],ax
 37959 00006258 26A30C00                	mov	[es:arena_name+4],ax
 37960                                  	;mov	[es:14],ax
 37961 0000625C 26A30E00                	mov	[es:arena_name+6],ax
 37962                                  
 37963                                  	;clc
 37964 00006260 31C0                    	xor	ax,ax
 37965 00006262 26A30100                	mov	[es:arena_owner],ax ; 0
 37966                                  	; cf = 0
 37967                                  	;jmp	short smX
 37968                                  smE:
 37969                                  	;stc	 ; cf = 1 (***)
 37970                                  smX:
 37971                                  	;popreg	<es,cx,bx>
 37972 00006266 07                      	pop	es ; **
 37973 00006267 59                      	pop	cx ; *
 37974 00006268 5B                      	pop	bx
 37975                                  
 37976 00006269 C3                      	retn
 37977                                  
 37978                                  ; -----------------------------------------------------------------------------
 37979                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37980                                  ; -----------------------------------------------------------------------------
 37981                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37982                                  ; EXIT:     None; UMB is hidden as necessary
 37983                                  ; ERROR:    None
 37984                                  ; USES:     Flags, AX, CX
 37985                                  ; -----------------------------------------------------------------------------
 37986                                  ; PRIMARY LOGIC:
 37987                                  ;
 37988                                  ; If the UMB is specified in the DH/LH statement, then:
 37989                                  ;    If the largest free segment is too small (check specified size), then:
 37990                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37991                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37992                                  ;       If /S was given on the command-line, then:
 37993                                  ;          Break that element into two pieces
 37994                                  ;          Set a flag that we're shrinking
 37995                                  ;       Endif
 37996                                  ;    Endif
 37997                                  ; Endif
 37998                                  ; If the UMB is NOT specified (or was removed by the above):
 37999                                  ;    Hide all free elements in the UMB
 38000                                  ;    If the flag that we're shrinking was set, then:
 38001                                  ;       UN-hide the lower portion of the shrunken UMB
 38002                                  ;    ENDIF
 38003                                  ; ENDIF
 38004                                  ; -----------------------------------------------------------------------------
 38005                                  
 38006                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38007                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:66D7h
 38008                                  hideUMB?:
 38009                                  	;pushreg <bx,dx,es>
 38010                                  
 38011                                  	;push	bx
 38012                                  	;push	dx
 38013                                  	;push	es
 38014                                  
 38015 0000626A 88C8                    	mov	al,cl
 38016 0000626C E896FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 38017                                  	;jz	short hu?20
 38018                                  	; 17/06/2023
 38019 0000626F 7432                    	jz	short hu?25 ; *
 38020                                  
 38021 00006271 88C8                    	mov	al,cl		; Retrieve the size of the largest
 38022 00006273 E84EFF                  	call	BigFree		; free element in AX; put its address in ES
 38023                                  	;jc	short hu?20	; Oops. Errors mean skip this part.
 38024                                  	; 17/06/2023
 38025 00006276 723B                    	jc	short hu?X ; **
 38026                                  
 38027 00006278 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 38028 00006279 88C8                    	mov	al,cl		; Retrieve the user's specified
 38029 0000627B E88AFE                  	call	GetSize		; minimum size for this umb (into AX)
 38030 0000627E 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 38031                                  
 38032 0000627F 09C0                    	or	ax,ax		; If they didn't specify one,
 38033                                  	;jz	short hu?20	; Skip over all this.
 38034                                  	; 17/06/2023
 38035 00006281 7530                    	jnz	short hu?X ; **
 38036                                  
 38037 00006283 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 38038 00006285 7607                    	jbe	short hu?10
 38039                                  
 38040 00006287 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 38041 00006289 E898FC                  	call	unMarkUMB
 38042                                  	;jmp	short hu?20 ; ***
 38043                                  	; 17/06/2023
 38044                                  	; ('isSpecified' would return with ZF=1) ; ***
 38045 0000628C EB15                    	jmp	short hu?25
 38046                                  hu?10:
 38047 0000628E E8B0FE                  	call	isTiny		; Returns ZF clear if user specified /S
 38048                                  	;jz	short hu?20
 38049                                  	; 17/06/2023
 38050                                  	; ('isSpecified' would return with ZF=0) ; **
 38051 00006291 7420                    	jz	short hu?X
 38052                                  
 38053 00006293 E880FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 38054                                  	;jc	short hu?20	; Ah... if didn't shrink after all, skip this:
 38055                                  	; 17/06/2023
 38056                                  	; ('isSpecified' would return with ZF=0) ; **
 38057 00006296 721B                    	jc	short hu?X
 38058                                  
 38059 00006298 8CC2                    	mov	dx,es
 38060 0000629A EB09                    	jmp	short hu?30	; Skip the spec check.. we wanna hide this one.
 38061                                  hu?20:
 38062                                  	;mov	al,cl
 38063 0000629C 89C8                    	mov	ax,cx
 38064 0000629E E864FF                  	call	isSpecified	; If they specified this UMB, we're done...
 38065 000062A1 7510                    	jnz	short hu?X ; **	; so leave.
 38066                                  hu?25:	; 17/06/2023 ; *
 38067 000062A3 31D2                    	xor	dx,dx
 38068                                  hu?30:
 38069 000062A5 88C8                    	mov	al,cl
 38070                                  
 38071 000062A7 E870FE                  	call	hideUMB		; Hides everything in UMB #al
 38072                                  
 38073 000062AA 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 38074 000062AC 7405                    	jz	short hu?X	; So we should leave.
 38075                                  
 38076 000062AE 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 38077 000062B0 E8C7FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 38078                                  hu?X:
 38079                                  	;popreg	<es,dx,bx>
 38080                                  
 38081                                  	;pop	es
 38082                                  	;pop	dx
 38083                                  	;pop	bx
 38084                                  
 38085 000062B3 C3                      	retn
 38086                                  
 38087                                  ; -----------------------------------------------------------------------------
 38088                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 38089                                  ; -----------------------------------------------------------------------------
 38090                                  ; ENTRY:    None
 38091                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 38092                                  ; ERROR:    None
 38093                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 38094                                  ; -----------------------------------------------------------------------------
 38095                                  
 38096                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38097                                  UmbTest:
 38098                                  	;pushreg <ax,bx,ds,es>
 38099                                  	
 38100                                  	;push	ax
 38101                                  	;push	bx
 38102                                  	;push	ds
 38103                                  	;push	es
 38104                                  
 38105 000062B4 E88CFB                  	call	fm_link		; Link in UMBs (if not already linked)
 38106 000062B7 E80600                  	call	WalkMem		; Check to see if they're really linked
 38107 000062BA 9C                      	pushf			; And remember what we found out
 38108 000062BB E89CFB                  	call	fm_unlink	; Unlink UMBs (if WE have linked 'em)
 38109 000062BE 9D                      	popf			; And restore what we found out.
 38110                                  
 38111                                  	;popreg	<es,ds,bx,ax>
 38112                                  	
 38113                                  	;pop	es
 38114                                  	;pop	ds
 38115                                  	;pop	bx
 38116                                  	;pop	ax
 38117                                  	
 38118 000062BF C3                      	retn
 38119                                  
 38120                                  ; -----------------------------------------------------------------------------
 38121                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 38122                                  ; -----------------------------------------------------------------------------
 38123                                  ; ENTRY:    None
 38124                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 38125                                  ; ERROR:    None
 38126                                  ; USES:     Flags
 38127                                  ; -----------------------------------------------------------------------------
 38128                                  
 38129                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38130                                  WalkMem:
 38131                                  	;pushreg <ax,bx,es>
 38132                                  	
 38133                                  	;push	ax
 38134                                  	;push	bx
 38135 000062C0 06                      	push	es
 38136                                  
 38137 000062C1 B452                    	mov	ah,52h ; DOS_GET_DOS_LISTS
 38138                                  				; Call int 21h, function 52h...
 38139 000062C3 CD21                    	int	21h
 38140                                  
 38141 000062C5 268B47FE                	mov	ax,[es:bx-2]
 38142                                  	;mov	es,ax ; *
 38143                                  
 38144                                  ; ------------------------------
 38145                                  ; UM10: ES = Current MCB pointer
 38146                                  ; ------------------------------
 38147                                  
 38148                                  um10:	
 38149 000062C9 8EC0                    	mov	es,ax ; *
 38150                                  
 38151                                  	;mov	al,[es:0]
 38152 000062CB 26A00000                	mov	al,[es:arena_signature]
 38153                                  	;cmp	al,'Z' ; 5Ah
 38154 000062CF 3C5A                    	cmp	al,arena_signature_end
 38155 000062D1 740A                    	je	short um20	; If signature == 'Z', hay no more.
 38156                                  
 38157                                  	;NextMCB es,bx		; Move to the next MCB
 38158                                  	
 38159                                  	;mov	bx,es
 38160                                  	;;add	bx,[es:3]
 38161                                  	;add	bx,[es:arena_size]
 38162                                  	;inc	bx
 38163                                  	;mov	es,bx
 38164 000062D3 8CC0                    	mov	ax,es
 38165 000062D5 2603060300              	add	ax,[es:arena_size]
 38166 000062DA 40                      	inc	ax
 38167                                  	;mov	es,ax ; *
 38168                                  
 38169 000062DB EBEC                    	jmp	short um10	; And restart the loop.
 38170                                  um20:
 38171 000062DD 8CC0                    	mov	ax,es
 38172 000062DF 3DFF9F                  	cmp	ax,9FFFh	; This sets CF if ax < 9FFF.
 38173                                  
 38174                                  	;popreg	<es,bx,ax>
 38175 000062E2 07                      	pop	es
 38176                                  	;pop	bx
 38177                                  	;pop	ax
 38178                                  
 38179 000062E3 C3                      	retn
 38180                                  
 38181                                  ; -----------------------------------------------------------------------------
 38182                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 38183                                  ; -----------------------------------------------------------------------------
 38184                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38185                                  ; EXIT:     None
 38186                                  ; ERROR:    None
 38187                                  ; USES:     AX, BX
 38188                                  ; -----------------------------------------------------------------------------
 38189                                  
 38190                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38191                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:681Ch
 38192                                  hl_unlink:
 38193 000062E4 1E                      	push	ds ; *
 38194                                  
 38195 000062E5 30FF                    	xor	bh,bh
 38196                                  	;getdata bl,fm_umb	; Restore original link-state
 38197                                  
 38198                                  	;push	ds
 38199 000062E7 8E1E[F39D]              	mov	ds,[RESSEG]
 38200 000062EB 8A1E[DB04]              	mov	bl,[fm_umb]	; Restore original link-state
 38201                                  	;pop	ds
 38202                                  	
 38203 000062EF B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38204 000062F2 CD21                    	int	21h
 38205                                  
 38206 000062F4 30FF                    	xor	bh,bh
 38207                                  
 38208                                  	;getdata bl,fm_strat	; Restore original mem-alloc strategy
 38209                                  
 38210                                  	;push	ds
 38211                                  	;mov	ds,[RESSEG]
 38212 000062F6 8A1E[DC04]              	mov	bl,[fm_strat]	;Restore original mem-alloc strategy
 38213                                  	;pop	ds
 38214                                  
 38215 000062FA B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 38216 000062FD CD21                    	int	21h
 38217                                  
 38218 000062FF 1F                      	pop	ds ; *
 38219                                  
 38220 00006300 C3                      	retn
 38221                                  
 38222                                  ;============================================================================
 38223                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 38224                                  ;============================================================================
 38225                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38226                                  
 38227                                  ; This is a new module added to support loading programs into UMBs provided
 38228                                  ; by DOS 5.0. 
 38229                                  ; ---------------------------------------------------------------------------
 38230                                  ; Usage:
 38231                                  ;
 38232                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 38233                                  ;
 38234                                  ; <filespec> has to be a filename that is not wildcarded.
 38235                                  
 38236                                  ; ---------------------------------------------------------------------------
 38237                                  ;
 38238                                  ;	Revision History
 38239                                  ;	================
 38240                                  ;
 38241                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 38242                                  ;				loading and high and also remember
 38243                                  ;				current UMB state.
 38244                                  ;
 38245                                  ;	M016	SR	08/09/90	Give special error message on attempt
 38246                                  ;				to loadhigh batch files and invalid
 38247                                  ;				filename on Loadhigh command line.
 38248                                  ;
 38249                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 38250                                  ;				after the program name also as part
 38251                                  ;				of the command line being passed to
 38252                                  ;				the program to be invoked.
 38253                                  ;
 38254                                  ; ---------------------------------------------------------------------------
 38255                                  
 38256                                  ; ---------------------------------------------------------------------------
 38257                                  ;
 38258                                  ;	include highload.inc		; Grab code for ParseVar and such
 38259                                  
 38260                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 38261                                  
 38262                                  ;
 38263                                  ; ---------------------------------------------------------------------------
 38264                                  
 38265                                  ;****	LoadHigh -- Main routine for Loadhigh command
 38266                                  ;
 38267                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 38268                                  ;		CS = DS = SS = TRANGROUP
 38269                                  ;
 38270                                  ;	EXIT	None
 38271                                  ;
 38272                                  ;	USED	ax, bx, cx, dx, si, di, es
 38273                                  ;
 38274                                  ;	ERROR EXITS
 38275                                  ;		Message pointers are setup at the error locations and then
 38276                                  ;	we jump back to CERROR which is the transient error recycle point.
 38277                                  ;	Apart from parse errors, the other errors handled are too many
 38278                                  ;	switches anf invalid filenames.
 38279                                  ;
 38280                                  ;	EFFECTS
 38281                                  ;		The allocation strategy and the state of the arena chain are
 38282                                  ;	put in the requested state according to the given options. If a 
 38283                                  ;	filename is also given, it is executed as well.
 38284                                  ; ---------------------------------------------------------------------------
 38285                                  
 38286                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38287                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 38288                                  
 38289                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38290                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:683Fh
 38291                                  LoadHigh:
 38292 00006301 1E                      	push	ds
 38293 00006302 07                      	pop	es
 38294                                  	
 38295                                  	; 16/06/2023
 38296                                  	;call	SkipLhDelims	; MSDOS 5.0 !
 38297                                  
 38298                                  ;Get command tail to be passed to the program. This includes any whitespace
 38299                                  ;chars between the program name and its parameters as well.
 38300                                  ;On return, ds:si points at the start of the command tail.
 38301                                  
 38302                                  	; 16/06/2023
 38303                                  	;push	si		; MSDOS 5.0 !
 38304 00006303 E81300                  	call	ParseLhCmd
 38305                                  	;pop	si		; MSDOS 5.0 !	
 38306 00006306 720E                    	jc	short LhErr
 38307                                  	
 38308 00006308 E86500                  	call	SetupCmdLine		;setup pgm's command line
 38309                                  
 38310 0000630B E88700                  	call	SetupPath		;setup path for file
 38311 0000630E 7206                    	jc	short LhErr		;file not found
 38312                                  
 38313                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 38314                                  ;be reset after return from the Exec
 38315                                  ;We will also set a resident flag to indicate that UMBs were activated for
 38316                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 38317                                  
 38318 00006310 E8AFFD                  	call	HideUMBs		;prepare upper-memory for load
 38319                                  
 38320 00006313 E939CB                  	jmp	LH_EXECUTE		;go and exec file ;M051
 38321                                  
 38322                                  LhErr:
 38323                                  ;The error message has been setup at this stage
 38324                                  
 38325 00006316 E989CB                  	jmp	cerror			;print error message and recycle 
 38326                                  
 38327                                  ; ---------------------------------------------------------------------------
 38328                                  					
 38329                                  ;*** 	ParseLhCmd - parses any command-line options
 38330                                  ;
 38331                                  ;	ENTRY	None
 38332                                  ;
 38333                                  ;	EXIT	Carry clear -- command line parsed successfully
 38334                                  ;		Carry set -- appropriate error message setup
 38335                                  ;
 38336                                  ;	USED	ax, si
 38337                                  ;
 38338                                  ;	EFFECTS
 38339                                  ;		Options set up (see highvar.inc)
 38340                                  ;		Filename to be executed setup
 38341                                  ;
 38342                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 38343                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 38344                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 38345                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 38346                                  ;	prepare the command-line for that program.
 38347                                  ; ---------------------------------------------------------------------------
 38348                                  
 38349                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38350                                  %if 0
 38351                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38352                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 38353                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38354                                  	; 11/06/2023
 38355                                  ParseLhCmd:
 38356                                  	;mov	si,81h
 38357                                  	mov	si,iCmdLine	;ds:si points at command line
 38358                                  
 38359                                  	mov	word [COMSW],0
 38360                                  	mov	di,Parse_LoadHi
 38361                                  	xor	cx,cx
 38362                                  	call	Parse_With_Msg
 38363                                  
 38364                                  	; 11/06/2023
 38365                                  	;cmp	ax,0FFFFh ; -1
 38366                                  	;jz	short PLhCmd2
 38367                                  	;cmp	ax,0
 38368                                  	;jnz	short PLhCmd1
 38369                                  	; 11/06/2023
 38370                                  	inc	ax ; cmp ax,-1
 38371                                  	jz	short PLhCmd2 ; 0FFFFh -> 0
 38372                                  	dec	ax ; cmp ax,0
 38373                                  	jnz	short PLhCmd1 ; 1 -> 0
 38374                                  	; ax = 0
 38375                                  
 38376                                  	mov	bx,dx
 38377                                  	; 14/04/2023
 38378                                  	;call	LhCopyFilename
 38379                                  	;; 13/04/2023
 38380                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 38381                                  	;;jmp	short PLhCmd2
 38382                                  	;retn
 38383                                  	; 14/04/2023
 38384                                  	jmp	short LhCopyFilename
 38385                                  PLhCmd1:
 38386                                  	stc
 38387                                  PLhCmd2:
 38388                                  	retn
 38389                                  %endif
 38390                                  
 38391                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38392                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6857h
 38393                                  	; MSDOS 6.0
 38394                                  ParseLhCmd:
 38395                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 38396                                  	
 38397                                  	;mov	si,81h
 38398 00006319 BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 38399                                  
 38400                                  	; es = ds (from 'LoadHigh') 
 38401                                  	;push	es		;Store ES 'cause we're gonna change it:
 38402                                  
 38403                                  	;push	ds
 38404                                  	;pop	es		;Make sure es:si points to cmd line as well
 38405                                  
 38406 0000631C E8ACFA                  	call	InitVar		;Initialize data for ParseVar
 38407                                  
 38408 0000631F E84AFB                  	call	ParseVar	;And parse the command line
 38409                                  
 38410                                  	;pop	es		;Restore ES now; we're done with it.
 38411                                  
 38412 00006322 7317                    	jnc	short plcC	;If no error, continue on our way.
 38413                                  
 38414 00006324 83F802                  	cmp	ax,2 ; PV_BadUMB
 38415                                  				;Bad UMB passed?
 38416 00006327 7505                    	jne	short plc10
 38417                                  	;mov	dx,offset TRANGROUP:LhBadUMB_Ptr
 38418 00006329 BA[5294]                	mov	dx,LhBadUMB_Ptr
 38419 0000632C F9                      	stc
 38420 0000632D C3                      	retn
 38421                                  plc10:	
 38422                                  	;mov	dx,offset TRANGROUP:LhInvSwt_Ptr
 38423 0000632E BA[4F94]                	mov	dx,LhInvSwt_Ptr
 38424 00006331 83F803                  	cmp	ax,3 ; PV_InvSwt
 38425                                  				;Unrecognized switch passed?
 38426 00006334 7403                    	je	short plc20
 38427                                  	;mov	dx,offset TRANGROUP:LhInvArg_Ptr
 38428 00006336 BA[4994]                	mov	dx,LhInvArg_Ptr
 38429                                  plc20:
 38430 00006339 F9                      	stc
 38431 0000633A C3                      	retn
 38432                                  plcC:
 38433                                  	;call	LhCopyFilename	;copy filename into our buffer
 38434                                  	;retn			;Return-- carry=status
 38435                                  	; 16/06/2023
 38436                                  	;jmp	short LhCopyFilename
 38437                                  
 38438                                  ; ---------------------------------------------------------------------------
 38439                                  
 38440                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38441                                  
 38442                                  ; ---------------------------------------------------------------------------
 38443                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 38444                                  ; ---------------------------------------------------------------------------
 38445                                  
 38446                                  	; 13/04/2023
 38447                                  	; MSDOS 5.0 COMMAND.COM only !
 38448                                  	; (Procedure names are not from original Microsoft source code!)
 38449                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 38450                                  ;set_strategy:
 38451                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 38452                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38453                                  	;		; AL = function code: get allocation strategy
 38454                                  	;mov	bx,ax
 38455                                  	;or	bx,80h
 38456                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 38457                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38458                                  	;		; AL = function code: set allocation strategy
 38459                                  	;retn
 38460                                  
 38461                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 38462                                  ;set_umblink:
 38463                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 38464                                  	;mov	bx,1
 38465                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38466                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 38467                                  	;retn
 38468                                  
 38469                                  ; ---------------------------------------------------------------------------
 38470                                  
 38471                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 38472                                  ;
 38473                                  ;	ENTRY	ds:si points at primary argument (filename)
 38474                                  ;
 38475                                  ;	EXIT	Carry set -- filename has wildcards. In this event, DX will
 38476                                  ;				already contain an appropriate error number.
 38477                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 38478                                  ;				points to first character (most likely space)
 38479                                  ;				after filename.
 38480                                  ;
 38481                                  ;	USED	ax, si
 38482                                  ;
 38483                                  ;	EFFECTS
 38484                                  ;		ExecPath contains the filename
 38485                                  ;
 38486                                  ; If there are any wildcards in the filename, then we have an error
 38487                                  ; ---------------------------------------------------------------------------
 38488                                  
 38489                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38490                                  %if 0
 38491                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38492                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 38493                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38494                                  LhCopyFilename:
 38495                                  	push	ds
 38496                                  	push	si
 38497                                  	push	di
 38498                                  	lds	si,[bx+4]
 38499                                  	mov	di,EXECPATH
 38500                                  lhcpfn1:
 38501                                  	lodsb
 38502                                  	cmp	al,2Ah ; '*'
 38503                                  	jz	short lhfilerr
 38504                                  	cmp	al,3Fh ; '?'
 38505                                  	jz	short lhfilerr
 38506                                  	stosb
 38507                                  	or	al,al
 38508                                  	jnz	short lhcpfn1
 38509                                  	; 14/04/2023
 38510                                  	; cf = 0
 38511                                  	;clc
 38512                                  lhfilerr2:
 38513                                  	pop	di
 38514                                  	pop	si
 38515                                  	pop	ds
 38516                                  	retn
 38517                                  lhfilerr:
 38518                                  	mov	dx,LhInvFil_Ptr
 38519                                  	stc
 38520                                  	jmp	short lhfilerr2
 38521                                  
 38522                                  %endif
 38523                                  
 38524                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38525                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6881h
 38526                                  	; MSDOS 6.0
 38527                                  LhCopyFilename:
 38528                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 38529                                  
 38530                                  	;mov	di,offset TRANGROUP:ExecPath
 38531 0000633B BF[1B9D]                	mov	di,EXECPATH
 38532                                  
 38533                                  	;mov	cx,0	; Copied zero characters
 38534 0000633E 29C9                    	sub	cx,cx
 38535                                  ;@@:
 38536                                  lhcpfn1:
 38537 00006340 AC                      	lodsb
 38538 00006341 3C2A                    	cmp	al,'*'			;wildcard?
 38539 00006343 7421                    	je	short lhfilerr		;yes, error
 38540 00006345 3C3F                    	cmp	al,'?'			;wildcard?
 38541 00006347 741D                    	je	short lhfilerr		;yes, error
 38542                                  
 38543 00006349 3C0D                    	cmp	al,0Dh			;carriage return?
 38544                                  	;jz	@f
 38545 0000634B 7410                    	je	short lhcpfn2
 38546 0000634D 3C2F                    	cmp	al,'/' ; SwitChar	;'/'?
 38547                                  	;jz	@f
 38548 0000634F 740C                    	je	short lhcpfn2
 38549 00006351 08C0                    	or	al,al			;EOS?
 38550                                  	;jz	@f
 38551 00006353 7408                    	jz	short lhcpfn2
 38552 00006355 3C20                    	cmp	al,' '			;Space?
 38553                                  	;jz	@f
 38554 00006357 7404                    	je	short lhcpfn2
 38555                                  	
 38556                                  	;or	al,al
 38557                                  	;;jz	@f
 38558                                  	;je	short lhcpfn2	
 38559                                  
 38560 00006359 AA                      	stosb				;store char
 38561 0000635A 41                      	inc	cx			;And remember that we did one more
 38562                                  	;jmp	short @b
 38563 0000635B EBE3                    	jmp	short lhcpfn1
 38564                                  ;@@:
 38565                                  lhcpfn2:
 38566 0000635D 30C0                    	xor	al,al			;Indicate EOS reached
 38567 0000635F AA                      	stosb				;store char
 38568                                  
 38569 00006360 09C9                    	or	cx,cx			;If we didn't copy any characters,
 38570 00006362 7407                    	jz	short lhmissing	; they didn't give a filename.
 38571                                  
 38572 00006364 4E                      	dec	si			;Move back to the delimiting character
 38573                                  	; cf = 0
 38574                                  	;clc				;And indicate no error occurred
 38575 00006365 C3                      	retn
 38576                                  lhfilerr:
 38577                                  	;mov	dx,offset TRANGROUP:LhInvFil_Ptr
 38578 00006366 BA[4394]                	mov	dx,LhInvFil_Ptr		;"Invalid Filename" ; M016
 38579 00006369 F9                      	stc
 38580 0000636A C3                      	retn
 38581                                  lhmissing:
 38582                                  	;mov	dx,offset TRANGROUP:ReqParmMiss
 38583 0000636B BA[4C94]                	mov	dx,ReqParmMiss		;"Required parm missing"
 38584 0000636E F9                      	stc
 38585 0000636F C3                      	retn
 38586                                  
 38587                                  ; ---------------------------------------------------------------------------
 38588                                  	
 38589                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 38590                                  %if 0
 38591                                  	; 14/04/2023
 38592                                  	; 13/04/2023
 38593                                  	; MSDOS 5.0 COMMAND.COM only !
 38594                                  	; (Procedure name is not from original Microsoft source code!)
 38595                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 38596                                  set_strategy:
 38597                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 38598                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38599                                  			; AL = function code: get allocation strategy
 38600                                  	mov	bx,ax
 38601                                  	or	bx,80h
 38602                                  	mov	ax,5801h	; DOS_SET_STRATEGY
 38603                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38604                                  			; AL = function code: set allocation strategy
 38605                                  	retn
 38606                                  
 38607                                  ; ---------------------------------------------------------------------------
 38608                                  
 38609                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38610                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 38611                                  	; MSDOS 5.0 COMMAND.COM only !
 38612                                  	; (Procedure name is not from original Microsoft source code!)
 38613                                  SkipLhDelims:
 38614                                  	mov	si,81h
 38615                                  	call	scanoff
 38616                                  stfn1:
 38617                                  	lodsb
 38618                                  	call	DELIM
 38619                                  	jz	short stfn2
 38620                                  	cmp	al,0Dh
 38621                                  	jz	short stfn2
 38622                                  	cmp	al,[SWITCHAR]
 38623                                  	jnz	short stfn1
 38624                                  stfn2:
 38625                                  	dec	si
 38626                                  	retn
 38627                                  
 38628                                  %endif
 38629                                  
 38630                                  ; ---------------------------------------------------------------------------
 38631                                  
 38632                                  ;***	SetupCmdLine -- prepare command line for the program
 38633                                  ;
 38634                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 38635                                  ;
 38636                                  ;	EXIT	None
 38637                                  ;
 38638                                  ;	USED
 38639                                  ;
 38640                                  ;	EFFECTS		
 38641                                  ;		The rest of the command line following the pgm name is 
 38642                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 38643                                  ;	and a new command line length is put in
 38644                                  ; ---------------------------------------------------------------------------
 38645                                  
 38646                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38647                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 38648                                  
 38649                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38650                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68BEh
 38651                                  SetupCmdLine:
 38652                                  	;mov	di,81h
 38653 00006370 BF8100                  	mov	di,iCmdLine
 38654 00006373 30C9                    	xor	cl,cl
 38655 00006375 FEC9                    	dec	cl			;just CR means count = 0
 38656                                  SetCmdL1:
 38657 00006377 AC                      	lodsb
 38658 00006378 AA                      	stosb
 38659 00006379 FEC1                    	inc	cl			;update count
 38660                                  	
 38661                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38662                                  	; MSDOS 6.0
 38663                                  	; 14/04/2023
 38664                                  	; * ; MSDOS 6.0 only !
 38665 0000637B 08C0                    	or	al,al	; *
 38666 0000637D 7404                    	jz	short SetCmdL2 ; *
 38667                                  	
 38668 0000637F 3C0D                    	cmp	al,0Dh			;carriage return?
 38669 00006381 75F4                    	jnz	short SetCmdL1		;no, continue storing
 38670                                  SetCmdL2:
 38671 00006383 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 38672 00006388 C3                      	retn
 38673                                  
 38674                                  ; ---------------------------------------------------------------------------
 38675                                  
 38676                                  ;***	LhSetupErrMsg -- Sets up error messages
 38677                                  ;
 38678                                  ;	ENTRY	ax = error message number
 38679                                  ;
 38680                                  ;	EXIT	None
 38681                                  ;
 38682                                  ;	USED	dx
 38683                                  ;
 38684                                  ;	EFFECTS
 38685                                  ;		Everything setup to display error message
 38686                                  ; ---------------------------------------------------------------------------
 38687                                  	
 38688                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38689                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38690                                  LhSetupErrMsg:
 38691 00006389 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 38692 0000638E BA[D091]                	mov	dx,extend_buf_ptr
 38693 00006391 A3[D091]                	mov	[extend_buf_ptr],ax
 38694 00006394 C3                      	retn
 38695                                  
 38696                                  ; ---------------------------------------------------------------------------
 38697                                  
 38698                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 38699                                  %if 0
 38700                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38701                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 38702                                  	; MSDOS 5.0 COMMAND.COM only !
 38703                                  	; (Procedure name is not from original Microsoft source code!)
 38704                                  check_umblink:
 38705                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 38706                                  	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38707                                  			 ; AL = function code: get allocation strategy
 38708                                  	mov	bl,al
 38709                                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 38710                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38711                                  			; AL = function code: (DOS 5beta) get UMB link state
 38712                                  	mov	bh,al
 38713                                  	xchg	ax,bx
 38714                                  	rol	al,1
 38715                                  	and	al,1
 38716                                  	shl	ah,1
 38717                                  	or	al,ah
 38718                                  	retn
 38719                                  
 38720                                  ; ---------------------------------------------------------------------------
 38721                                  
 38722                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38723                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 38724                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38725                                  HideUMBs:
 38726                                  	push	ds
 38727                                  	call	check_umblink
 38728                                  	mov	ds,[RESSEG]
 38729                                  	mov	[fInHigh],al
 38730                                  	or	byte [fInHigh],80h
 38731                                  	pop	ds
 38732                                  	call	set_strategy
 38733                                  	;call	set_umblink
 38734                                  	;retn
 38735                                  	; 14/04/023
 38736                                  	;jmp	short set_umblink
 38737                                  
 38738                                  ; ---------------------------------------------------------------------------
 38739                                  
 38740                                  	; 14/04/2023
 38741                                  	; 13/04/2023
 38742                                  	; MSDOS 5.0 COMMAND.COM only !
 38743                                  	; (Procedure name is not from original Microsoft source code!)
 38744                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 38745                                  set_umblink:
 38746                                  	mov	ax,5803h	; DOS_SET_UMBLINK
 38747                                  	mov	bx,1
 38748                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38749                                  			; AL = function code: (DOS 5beta) set UMB link state
 38750                                  	retn
 38751                                  %endif
 38752                                  
 38753                                  ; ---------------------------------------------------------------------------
 38754                                  
 38755                                  ;***	SetupPath -- Do path search for the file to be executed
 38756                                  ;
 38757                                  ;	ENTRY	None
 38758                                  ;
 38759                                  ;	EXIT	Carry set if file not found or not executable file
 38760                                  ;
 38761                                  ;	EFFECTS
 38762                                  ;		ExecPath contains the full path of the file to be executed
 38763                                  ; ---------------------------------------------------------------------------
 38764                                  
 38765                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38766                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 38767                                  
 38768                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38769                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68E3h
 38770                                  SetupPath:
 38771                                  
 38772                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 38773                                  ;because the path search routine that we are about to invoke expects the
 38774                                  ;filename to search for to be argv[0].
 38775                                  ;
 38776                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 38777                                  ;over it by doing the whole move again (smaller, of course, this time).
 38778                                  
 38779                                  	;mov	ax,arg.argvcnt		;total number of arguments
 38780                                  	; 14/04/2023
 38781                                  	;mov	ax,[ARG_ARGVCNT]
 38782 00006395 A1[01A5]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 38783                                  
 38784 00006398 48                      	dec	ax			;less one - skip "LoadHigh"
 38785                                  	;mov	bx,SIZE Argv_ele
 38786 00006399 BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 38787                                  	;mov	bx,11
 38788 0000639C F7E3                    	mul	bx			;dx:ax = size of argument lists
 38789                                  
 38790                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 38791                                  	; --------------------------------------
 38792                                  	; MSDOS 6.0
 38793                                  
 38794                                  	;getdata cl,fm_argc		;CL = number of arguments to skip
 38795 0000639E 1E                      	push	ds			; getdata (macro)
 38796 0000639F 8E1E[F39D]              	mov	ds,[RESSEG]
 38797 000063A3 8A0E[DD04]              	mov	cl,[fm_argc]
 38798 000063A7 1F                      	pop	ds
 38799                                  	
 38800 000063A8 FEC1                    	inc	cl			;Skip one arg, to get over "lh"
 38801                                  
 38802                                  ;Move argv[1]..argv[n] to argv[0]..argv[n-1]. Here, AX == the overall size
 38803                                  ;of the argument lists.
 38804                                  
 38805                                  argloop:
 38806 000063AA E31B                    	jcxz	argdone			;If we've finished copying args, leave.
 38807                                  
 38808 000063AC 49                      	dec	cx			;One less time we'll go through this.
 38809                                  
 38810 000063AD 50                      	push	ax			;Copy ( size of remaining list ) bytes
 38811 000063AE 51                      	push	cx			;And remember how many args there were
 38812                                  
 38813                                  	; --------------------------------------
 38814                                  
 38815                                  	; 14/04/2023
 38816 000063AF 89C1                    	mov	cx,ax			;size to move
 38817                                  
 38818                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 38819                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 38820 000063B1 BF[41A2]                	mov	di,ARG	
 38821 000063B4 89FE                    	mov	si,di			;
 38822                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 38823 000063B6 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 38824                                  	
 38825                                  	; 14/04/2023
 38826                                  	;mov	cx,ax
 38827                                  
 38828 000063B9 FC                      	cld
 38829 000063BA F3A4                    	rep	movsb			;Move the argument list
 38830                                  	
 38831                                  	;dec	arg.argvcnt		;Fake one less argument, and
 38832                                  	;dec	word [ARG_ARGVCNT]
 38833 000063BC FF0E[01A5]              	dec	word [ARG+ARG_UNIT.argvcnt]
 38834                                  
 38835                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 38836                                  	; --------------------------------------
 38837                                  	; MSDOS 6.0
 38838                                  	
 38839                                  	;sub	ax,ARGV_ELE.SIZE ; 11	;there's one argument we don't copy.
 38840                                  
 38841 000063C0 59                      	pop	cx
 38842 000063C1 58                      	pop	ax			;Restore the size of the arg list
 38843                                  	; 17/06/2023
 38844                                  	;jmp	short argloop
 38845                                  	
 38846                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38847 000063C2 83E80B                  	sub	ax,ARGV_ELE.SIZE ; 11
 38848 000063C5 77E3                    	ja	short argloop
 38849                                  	; --------------------------------------
 38850                                  	
 38851                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 38852                                  
 38853                                  	; 17/06/2023
 38854                                  argdone:
 38855 000063C7 E8E6D2                  	call	path_search		;look in the path
 38856                                  
 38857                                  ;ax = 0, no file found
 38858                                  ;ax < 4, batch file found -- cant be executed
 38859                                  ;ax = 4,8 => .com or .exe file found
 38860                                  
 38861 000063CA 09C0                    	or	ax,ax			;any file found?
 38862 000063CC 740B                    	jz	short no_exec_file	;no, error
 38863                                  
 38864 000063CE 83F804                  	cmp	ax,4			;executable file?
 38865                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 38866                                  	;clc
 38867                                  	;retn
 38868                                  	; 14/04/2023
 38869 000063D1 7201                    	jb	short no_exec_bat
 38870 000063D3 C3                      	retn 
 38871                                  
 38872                                  no_exec_bat:
 38873 000063D4 BA[4094]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 38874 000063D7 EB06                    	jmp	short lhsp_errret	;return error; M016
 38875                                  
 38876                                  no_exec_file:
 38877 000063D9 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 38878 000063DC E8AAFF                  	call	LhSetupErrMsg		;setup error message
 38879                                  lhsp_errret:				; M016
 38880 000063DF F9                      	stc
 38881 000063E0 C3                      	retn
 38882                                  
 38883                                  ;============================================================================
 38884                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 38885                                  ;============================================================================
 38886                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38887                                  
 38888                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 38889                                  
 38890                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38891                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6930h
 38892                                  
 38893                                  ; ---------------------------------------------------------------------------
 38894                                  ; Class 3 message table/structure
 38895                                  ; ---------------------------------------------------------------------------
 38896                                  
 38897                                  $M_CLASS_3_STRUC:
 38898 000063E1 FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 38899                                  	;dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 38900                                  	;db 162			; Total number of messages
 38901                                  	; 17/06/2023
 38902 000063E2 0616                    	dw 1606h		; MSDOS 6.22 COMMAND.COM (hb=22,lb=6)	
 38903 000063E4 BB                      	db 187			; Total number of messages
 38904                                  $M_ID_3_1:
 38905                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 38906 000063E5 FC03                    	dw 1020			; Message Number = 1020
 38907                                  	;dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 38908                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38909 000063E7 EC02                    	dw MSG_1020-$+2 ; 2ECh	; Message offset from message number (6934h+02ECh=6C20h)
 38910                                  $M_ID_3_2:
 38911 000063E9 F703                    	dw 1015			; Message Number = 1015
 38912                                  	;dw MSG_1015-$+2 ; 294h ; Message offset from message number (5A4Ch+0294h=5CE0h)
 38913                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38914 000063EB F802                    	dw MSG_1015-$+2 ; 2F8h	; Message offset from message number (6938h+02F8h=6C30h)
 38915                                  $M_ID_3_3:	; 26/04/2023
 38916                                  			; 17/06/2023
 38917 000063ED EC031803                	dw 1004,MSG_1004-$ ; 792
 38918 000063F1 02042E03                	dw 1026,MSG_1026-$ ; 814
 38919 000063F5 07043E03                	dw 1031,MSG_1031-$ ; 830
 38920 000063F9 0B044903                	dw 1035,MSG_1035-$ ; 841
 38921 000063FD 26045403                	dw 1062,MSG_1062-$ ; 852
 38922 00006401 04045F03                	dw 1028,MSG_1028-$ ; 863
 38923 00006405 15047D03                	dw 1045,MSG_1045-$ ; 893
 38924 00006409 11049603                	dw 1041,MSG_1041-$ ; 918
 38925 0000640D 1204B403                	dw 1042,MSG_1042-$ ; 948
 38926                                  $M_ID_3_12:
 38927 00006411 1304CB03                	dw 1043,MSG_1043-$ ; 971
 38928 00006415 EA03E703                	dw 1002,MSG_1002-$ ; 999
 38929 00006419 EB030B04                	dw 1003,MSG_1003-$ ; 1035
 38930 0000641D EF032304                	dw 1007,MSG_1007-$ ; 1059
 38931 00006421 F0033A04                	dw 1008,MSG_1008-$ ; 1082
 38932 00006425 F1034C04                	dw 1009,MSG_1009-$ ; 1100
 38933 00006429 F2035D04                	dw 1010,MSG_1010-$ ; 1117
 38934 0000642D F3037904                	dw 1011,MSG_1011-$ ; 1145
 38935 00006431 F6039004                	dw 1014,MSG_1014-$ ; 1168
 38936 00006435 F8039D04                	dw 1016,MSG_1016-$ ; 1181
 38937 00006439 F903C304                	dw 1017,MSG_1017-$ ; 1219
 38938 0000643D FA03E404                	dw 1018,MSG_1018-$ ; 1252
 38939                                  $M_ID_3_24:
 38940 00006441 FB03F404                	dw 1019,MSG_1019-$ ; 1268
 38941 00006445 FD03FC04                	dw 1021,MSG_1021-$ ; 1276
 38942 00006449 FE031605                	dw 1022,MSG_1022-$ ; 1302
 38943 0000644D FF033905                	dw 1023,MSG_1023-$ ; 1337
 38944 00006451 00046105                	dw 1024,MSG_1024-$ ; 1377
 38945 00006455 01047405                	dw 1025,MSG_1025-$ ; 1396
 38946 00006459 03048805                	dw 1027,MSG_1027-$ ; 1416
 38947 0000645D 0504A505                	dw 1029,MSG_1029-$ ; 1445
 38948 00006461 0604B305                	dw 1030,MSG_1030-$ ; 1459
 38949 00006465 0804BE05                	dw 1032,MSG_1032-$ ; 1470
 38950 00006469 0904D205                	dw 1033,MSG_1033-$ ; 1490
 38951 0000646D 0A04E405                	dw 1034,MSG_1034-$ ; 1508
 38952 00006471 0C04F605                	dw 1036,MSG_1036-$ ; 1526
 38953 00006475 0D040706                	dw 1037,MSG_1037-$ ; 1543
 38954 00006479 0E041406                	dw 1038,MSG_1038-$ ; 1556
 38955 0000647D 0F042306                	dw 1039,MSG_1039-$ ; 1571
 38956                                  $M_ID_3_40:
 38957 00006481 10045C06                	dw 1040,MSG_1040-$ ; 1628
 38958 00006485 14046D06                	dw 1044,MSG_1044-$ ; 1645
 38959 00006489 16047D06                	dw 1046,MSG_1046-$ ; 1661
 38960 0000648D 1704B006                	dw 1047,MSG_1047-$ ; 1712
 38961 00006491 1804C506                	dw 1048,MSG_1048-$ ; 1733
 38962 00006495 1904D306                	dw 1049,MSG_1049-$ ; 1747
 38963 00006499 1A04D906                	dw 1050,MSG_1050-$ ; 1753
 38964 0000649D 1B04F406                	dw 1051,MSG_1051-$ ; 1780
 38965 000064A1 1C040107                	dw 1052,MSG_1052-$ ; 1793
 38966 000064A5 1D041407                	dw 1053,MSG_1053-$ ; 1812
 38967 000064A9 1E043607                	dw 1054,MSG_1054-$ ; 1846
 38968                                  $M_ID_3_51:
 38969 000064AD 1F045907                	dw 1055,MSG_1055-$ ; 1881
 38970 000064B1 20046307                	dw 1056,MSG_1056-$ ; 1891
 38971 000064B5 21046E07                	dw 1057,MSG_1057-$ ; 1902
 38972 000064B9 23047707                	dw 1059,MSG_1059-$ ; 1911
 38973 000064BD 24047807                	dw 1060,MSG_1060-$ ; 1912
 38974 000064C1 25047807                	dw 1061,MSG_1061-$ ; 1912
 38975 000064C5 27048E07                	dw 1063,MSG_1063-$ ; 1934
 38976 000064C9 28048D07                	dw 1064,MSG_1064-$ ; 1933
 38977 000064CD 29048C07                	dw 1065,MSG_1065-$ ; 1932
 38978 000064D1 2A048B07                	dw 1066,MSG_1066-$ ; 1931
 38979 000064D5 2B048A07                	dw 1067,MSG_1067-$ ; 1930
 38980 000064D9 2C048807                	dw 1068,MSG_1068-$ ; 1928
 38981 000064DD 2D048F07                	dw 1069,MSG_1069-$ ; 1935
 38982 000064E1 2E048F07                	dw 1070,MSG_1070-$ ; 1935
 38983 000064E5 2F048E07                	dw 1071,MSG_1071-$ ; 1934
 38984 000064E9 30048D07                	dw 1072,MSG_1072-$ ; 1933
 38985                                  $M_ID_3_67:
 38986 000064ED 31049307                	dw 1073,MSG_1073-$ ; 1939
 38987 000064F1 32049907                	dw 1074,MSG_1074-$ ; 1945
 38988 000064F5 33049F07                	dw 1075,MSG_1075-$ ; 1951
 38989 000064F9 3404A107                	dw 1076,MSG_1076-$ ; 1953
 38990 000064FD 3504A007                	dw 1077,MSG_1077-$ ; 1952
 38991 00006501 3604A407                	dw 1078,MSG_1078-$ ; 1956
 38992 00006505 3704BB07                	dw 1079,MSG_1079-$ ; 1979
 38993 00006509 3804C207                	dw 1080,MSG_1080-$ ; 1986
 38994 0000650D 3904D407                	dw 1081,MSG_1081-$ ; 2004
 38995                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38996 00006511 3A04FB07                	dw 1082,MSG_1082-$ ; 2043	
 38997 00006515 3B04FF07                	dw 1083,MSG_1083-$ ; 2047	
 38998                                  	;
 38999 00006519 3C04FE07                	dw 1084,MSG_1084-$ ; 2046
 39000 0000651D 42040A08                	dw 1090,MSG_1090-$ ; 2058
 39001 00006521 43041408                	dw 1091,MSG_1091-$ ; 2068
 39002 00006525 44041E08                	dw 1092,MSG_1092-$ ; 2078
 39003 00006529 45042808                	dw 1093,MSG_1093-$ ; 2088
 39004 0000652D 46043908                	dw 1094,MSG_1094-$ ; 2105
 39005 00006531 47045208                	dw 1095,MSG_1095-$ ; 2130
 39006 00006535 48046B08                	dw 1096,MSG_1096-$ ; 2155
 39007                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39008 00006539 49049808                	dw 1097,MSG_1097-$ ; 2200
 39009 0000653D 4A04B108                	dw 1098,MSG_1098-$ ; 2225
 39010 00006541 4B04CA08                	dw 1099,MSG_1099-$ ; 2250
 39011 00006545 4C04DC08                	dw 1100,MSG_1100-$ ; 2268
 39012 00006549 4D04FE08                	dw 1101,MSG_1101-$ ; 2302
 39013 0000654D 4E040909                	dw 1102,MSG_1102-$ ; 2313
 39014 00006551 4F043F09                	dw 1103,MSG_1103-$ ; 2367
 39015 00006555 50045609                	dw 1104,MSG_1104-$ ; 2390
 39016 00006559 51045609                	dw 1105,MSG_1105-$ ; 2390 ; TRANGROUP:6AA8h 
 39017                                  ;$M_ID_3_84:
 39018                                  $M_ID_3_95: ; 17/06/2023	
 39019 0000655D B0045709                	dw 1200,MSG_1200-$ ; 2391
 39020 00006561 14055409                	dw 1300,MSG_1300-$ ; 2388
 39021 00006565 2805D709                	dw 1320,MSG_1320-$ ; 2519
 39022 00006569 2905130A                	dw 1321,MSG_1321-$ ; 2579
 39023 0000656D 3C05800A                	dw 1340,MSG_1340-$ ; 2688
 39024 00006571 3D05D80A                	dw 1341,MSG_1341-$ ; 2776
 39025 00006575 3E05370B                	dw 1342,MSG_1342-$ ; 2871
 39026 00006579 5005C50B                	dw 1360,MSG_1360-$ ; 3013
 39027 0000657D 7805DD0B                	dw 1400,MSG_1400-$ ; 3037
 39028 00006581 7905760C                	dw 1401,MSG_1401-$ ; 3190
 39029 00006585 7A05DB0C                	dw 1402,MSG_1402-$ ; 3291
 39030 00006589 7B054E0D                	dw 1403,MSG_1403-$ ; 3406
 39031 0000658D 7C058A0D                	dw 1404,MSG_1404-$ ; 3466 ; TRANGROUP:6ADCh 
 39032                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39033 00006591 7D05FB0D                	dw 1405,MSG_1405-$ ; 3579 ; TRANGROUP:6AE0h 
 39034 00006595 7E056A0E                	dw 1406,MSG_1406-$ ; 3690
 39035 00006599 7F05A90E                	dw 1407,MSG_1407-$ ; 3753 ; (MSG_1404 for MSDOS 5.0 COMMAND.COM)
 39036                                  	;
 39037 0000659D 8C052D0F                	dw 1420,MSG_1420-$ ; 3885
 39038 000065A1 A005B40F                	dw 1440,MSG_1440-$ ; 4020
 39039 000065A5 A1050E10                	dw 1441,MSG_1441-$ ; 4110
 39040                                  ;$M_ID_3_100:
 39041                                  $M_ID_3_114: ; 17/06/2023
 39042 000065A9 B4058E10                	dw 1460,MSG_1460-$ ; 4238
 39043 000065AD B505EF10                	dw 1461,MSG_1461-$ ; 4335
 39044 000065B1 B6056F11                	dw 1462,MSG_1462-$ ; 4463
 39045 000065B5 C805BB11                	dw 1480,MSG_1480-$ ; 4539
 39046 000065B9 C9054112                	dw 1481,MSG_1481-$ ; 4673
 39047 000065BD CA055C12                	dw 1482,MSG_1482-$ ; 4700
 39048 000065C1 CB05A912                	dw 1483,MSG_1483-$ ; 4777
 39049 000065C5 CC05FF12                	dw 1484,MSG_1484-$ ; 4863
 39050 000065C9 CD057A13                	dw 1485,MSG_1485-$ ; 4986
 39051 000065CD CE05F213                	dw 1486,MSG_1486-$ ; 5106
 39052 000065D1 CF058414                	dw 1487,MSG_1487-$ ; 5252
 39053 000065D5 D005C714                	dw 1488,MSG_1488-$ ; 5319
 39054                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39055 000065D9 D1054315                	dw 1489,MSG_1489-$ ; 5443
 39056 000065DD D2058115                	dw 1490,MSG_1490-$ ; 5505
 39057 000065E1 D3059915                	dw 1491,MSG_1491-$ ; 5529
 39058 000065E5 D405E815                	dw 1492,MSG_1492-$ ; 5608
 39059 000065E9 D5057716                	dw 1493,MSG_1493-$ ; 5751
 39060 000065ED D6058A16                	dw 1494,MSG_1494-$ ; 5770
 39061                                  ;$M_ID_3_112:
 39062                                  $M_ID_3_132: ; 17/06/2023
 39063 000065F1 DC05A416                	dw 1500,MSG_1500-$ ; 5796
 39064 000065F5 F005DF16                	dw 1520,MSG_1520-$ ; 5855
 39065 000065F9 04061917                	dw 1540,MSG_1540-$ ; 5913
 39066 000065FD 05067317                	dw 1541,MSG_1541-$ ; 6003
 39067 00006601 0606DB17                	dw 1542,MSG_1542-$ ; 6107
 39068 00006605 18061318                	dw 1560,MSG_1560-$ ; 6163
 39069 00006609 19064718                	dw 1561,MSG_1561-$ ; 6215
 39070 0000660D 1A06C018                	dw 1562,MSG_1562-$ ; 6336
 39071 00006611 1B06EC18                	dw 1563,MSG_1563-$ ; 6380
 39072 00006615 1C061319                	dw 1564,MSG_1564-$ ; 6419
 39073 00006619 1D064D19                	dw 1565,MSG_1565-$ ; 6477
 39074 0000661D 1E067E19                	dw 1566,MSG_1566-$ ; 6526
 39075 00006621 1F06A719                	dw 1567,MSG_1567-$ ; 6567
 39076 00006625 20061D1A                	dw 1568,MSG_1568-$ ; 6685
 39077 00006629 2C06661A                	dw 1580,MSG_1580-$ ; 6758
 39078                                  ;$M_ID_3_127:
 39079                                  $M_ID_3_147: ; 17/06/2023
 39080 0000662D 4006AA1A                	dw 1600,MSG_1600-$ ; 6826
 39081 00006631 4106C31A                	dw 1601,MSG_1601-$ ; 6851
 39082 00006635 4206131B                	dw 1602,MSG_1602-$ ; 6931
 39083 00006639 5406B01B                	dw 1620,MSG_1620-$ ; 7088
 39084 0000663D 5506041C                	dw 1621,MSG_1621-$ ; 7172
 39085 00006641 5606821C                	dw 1622,MSG_1622-$ ; 7298
 39086 00006645 6806CA1C                	dw 1640,MSG_1640-$ ; 7370
 39087 00006649 6906F41C                	dw 1641,MSG_1641-$ ; 7412
 39088 0000664D 7C06741D                	dw 1660,MSG_1660-$ ; 7540
 39089 00006651 9006B71D                	dw 1680,MSG_1680-$ ; 7607
 39090 00006655 A406D91D                	dw 1700,MSG_1700-$ ; 7641
 39091 00006659 B806871E                	dw 1720,MSG_1720-$ ; 7815
 39092 0000665D CC06D61E                	dw 1740,MSG_1740-$ ; 7894
 39093 00006661 CD062E1F                	dw 1741,MSG_1741-$ ; 7982
 39094 00006665 E0069D1F                	dw 1760,MSG_1760-$ ; 8093
 39095 00006669 F406E61F                	dw 1780,MSG_1780-$ ; 8166
 39096                                  ;$M_ID_3_143:
 39097                                  $M_ID_3_163: ; 17/06/2023
 39098 0000666D 08074E20                	dw 1800,MSG_1800-$ ; 8270
 39099 00006671 09079820                	dw 1801,MSG_1801-$ ; 8344
 39100 00006675 1C07EC20                	dw 1820,MSG_1820-$ ; 8428
 39101 00006679 1D073021                	dw 1821,MSG_1821-$ ; 8496
 39102 0000667D 3007B721                	dw 1840,MSG_1840-$ ; 8631
 39103 00006681 4407FE21                	dw 1860,MSG_1860-$ ; 8702
 39104 00006685 45075522                	dw 1861,MSG_1861-$ ; 8789
 39105 00006689 46079822                	dw 1862,MSG_1862-$ ; 8856
 39106 0000668D 47071223                	dw 1863,MSG_1863-$ ; 8978
 39107 00006691 4807B123                	dw 1864,MSG_1864-$ ; 9137
 39108 00006695 49071424                	dw 1865,MSG_1865-$ ; 9236
 39109 00006699 4A077B24                	dw 1866,MSG_1866-$ ; 9339
 39110 0000669D 5807DF24                	dw 1880,MSG_1880-$ ; 9439
 39111 000066A1 59075325                	dw 1881,MSG_1881-$ ; 9555
 39112 000066A5 5A07CD25                	dw 1882,MSG_1882-$ ; 9677
 39113 000066A9 5B072026                	dw 1883,MSG_1883-$ ; 9760
 39114 000066AD 6C07BF26                	dw 1900,MSG_1900-$ ; 9919
 39115 000066B1 8007D326                	dw 1920,MSG_1920-$ ; 9939
 39116 000066B5 8107FF26                	dw 1921,MSG_1921-$ ; 9983
 39117                                  ;$M_ID_3_162:
 39118                                  $M_ID_3_182: ; 17/06/2023
 39119 000066B9 82079927                	dw 1922,MSG_1922-$ ; 9285
 39120                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39121 000066BD 83074C28                	dw 1923,MSG_1923-$ ; 10316
 39122 000066C1 8407CE28                	dw 1924,MSG_1924-$ ; 10446
 39123 000066C5 85074A29                	dw 1925,MSG_1925-$ ; 10570
 39124 000066C9 8607CA29                	dw 1926,MSG_1926-$ ; 10698
 39125                                  $M_ID_3_187:	; 17/06/2023
 39126 000066CD 8707                    	dw 1927	; 19/06/2023	; Message Number = 1927
 39127 000066CF 1E2A                    	dw MSG_1927-$+2	; 10782	; Message offset from message number
 39128                                  				; (Msg addr: 6C1Ch+2A1Eh = TRANGROUP:963Ah)
 39129                                  
 39130                                  ; ---------------------------------------------------------------------------
 39131                                  ; Class 3 messages
 39132                                  ; ---------------------------------------------------------------------------
 39133                                  	
 39134                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39135                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 39136                                  
 39137                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39138                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6C20h
 39139                                  
 39140                                  MSG_1020:	; COMMON4
 39141 000066D1 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 39142 000066D2 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 39142 000066DB 667265650D0A       
 39143                                  MSG_1015:	; COMMON18
 39144 000066E1 23                      	db 35
 39145 000066E2 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 39145 000066EB 6F7420626520636F70-
 39145 000066F4 696564206F6E746F20-
 39145 000066FD 697473656C660D0A   
 39146                                  MSG_1004:	; COMMON20
 39147 00006705 19                      	db 25
 39148 00006706 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 39148 0000670F 656E74206469736B20-
 39148 00006718 73706163650D0A     
 39149                                  MSG_1026:	; COMMON22
 39150 0000671F 13                      	db 19
 39151 00006720 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 39151 00006729 6F646520706167650D-
 39151 00006732 0A                 
 39152                                  MSG_1031:	; COMMON23
 39153 00006733 0E                      	db 14
 39154 00006734 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 39154 0000673D 6174650D0A         
 39155                                  MSG_1035:	; COMMON24
 39156 00006742 0E                      	db 14
 39157 00006743 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 39157 0000674C 696D650D0A         
 39158                                  MSG_1062:	; COMMON25
 39159 00006751 0E                      	db 14
 39160 00006752 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 39160 0000675B 6174680D0A         
 39161                                  MSG_1028:	; COMMON28
 39162 00006760 21                      	db 33
 39163 00006761 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 39163 0000676A 206B657920746F2063-
 39163 00006773 6F6E74696E7565202E-
 39163 0000677C 202E202E0D0A       
 39164                                  MSG_1045:	; COMMON32
 39165 00006782 1C                      	db 28
 39166 00006783 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 39166 0000678C 206372656174652064-
 39166 00006795 69726563746F72790D-
 39166 0000679E 0A                 
 39167                                  MSG_1041:	; COMMON33
 39168 0000679F 21                      	db 33
 39169 000067A0 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 39169 000067A9 206472697665202531-
 39169 000067B2 20686173206E6F206C-
 39169 000067BB 6162656C0D0A       
 39170                                  MSG_1042:	; COMMON34
 39171 000067C1 1A                      	db 26
 39172 000067C2 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 39172 000067CB 206472697665202531-
 39172 000067D4 2069732025320D0A   
 39173                                  MSG_1043:	; COMMON36
 39174 000067DC 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 39175 000067DD 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 39175 000067E6 7269616C204E756D62-
 39175 000067EF 65722069732025312D-
 39175 000067F8 25320D0A           
 39176                                  MSG_1002:
 39177 000067FC 27                              db 39
 39178 000067FD 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 39178 00006806 2066696C65206E616D-
 39178 0000680F 65206F722066696C65-
 39178 00006818 206E6F7420666F756E-
 39178 00006821 640D0A             
 39179                                  MSG_1003:
 39180 00006824 1B                      	db 27
 39181 00006825 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 39181 0000682E 617468206F72206669-
 39181 00006837 6C65206E616D650D0A 
 39182                                  MSG_1007:
 39183 00006840 1A                      	db 26
 39184 00006841 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 39184 0000684A 7669726F6E6D656E74-
 39184 00006853 2073706163650D0A   
 39185                                  MSG_1008:
 39186 0000685B 15                      	db 21
 39187 0000685C 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 39187 00006865 74696F6E206572726F-
 39187 0000686E 720D0A             
 39188                                  MSG_1009:
 39189 00006871 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 39190 00006872 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 39190 0000687B 65206D697373696E67-
 39190 00006884 0D0A               
 39191                                  MSG_1010:
 39192 00006886 1F                      	db 31
 39193 00006887 0D0A                    	db 0Dh,0Ah
 39194 00006889 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 39194 00006892 736B20776974682062-
 39194 0000689B 617463682066696C65-
 39194 000068A4 0D0A               
 39195                                  MSG_1011:
 39196 000068A6 1A                      	db 26
 39197 000068A7 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 39197 000068B0 6E64206F722066696C-
 39197 000068B9 65206E616D650D0A   
 39198                                  MSG_1014:	; EXTEND5
 39199 000068C1 10                      	db 16
 39200 000068C2 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 39200 000068CB 6E696564200D0A     
 39201                                  MSG_1016:
 39202 000068D2 29                      	db 41
 39203 000068D3 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 39203 000068DC 662064657374696E61-
 39203 000068E5 74696F6E206C6F7374-
 39203 000068EE 206265666F72652063-
 39203 000068F7 6F70790D0A         
 39204                                  MSG_1017:
 39205 000068FC 24                      	db 36
 39206 000068FD 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 39206 00006906 696C656E616D65206F-
 39206 0000690F 722066696C65206E6F-
 39206 00006918 7420666F756E640D0A 
 39207                                  MSG_1018:
 39208 00006921 13                      	db 19
 39209 00006922 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 39209 0000692B 2920636F706965640D-
 39209 00006934 0A                 
 39210                                  MSG_1019:
 39211 00006935 0B                      	db 11
 39212 00006936 25312066696C652873-     	db '%1 file(s) '
 39212 0000693F 2920               
 39213                                  MSG_1021:	; EXTEND15
 39214 00006941 1D                      	db 29
 39215 00006942 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 39215 0000694B 726976652073706563-
 39215 00006954 696669636174696F6E-
 39215 0000695D 0D0A               
 39216                                  MSG_1022:
 39217 0000695F 26                      	db 38
 39218 00006960 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 39218 00006969 202531206E6F742070-
 39218 00006972 726570617265642066-
 39218 0000697B 6F722073797374656D-
 39218 00006984 0D0A               
 39219                                  MSG_1023:
 39220 00006986 2B                      	db 43
 39221 00006987 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 39221 00006990 202531206E6F742070-
 39221 00006999 726570617265642066-
 39221 000069A2 6F7220616C6C206465-
 39221 000069AB 76696365730D0A     
 39222                                  MSG_1024:
 39223 000069B2 16                      	db 22
 39224 000069B3 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 39224 000069BC 646520706167653A20-
 39224 000069C5 25310D0A           
 39225                                  MSG_1025:
 39226 000069C9 17                      	db 23
 39227 000069CA 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 39227 000069D3 6F7420696E7374616C-
 39227 000069DC 6C65640D0A         
 39228                                  MSG_1027:
 39229 000069E1 20                      	db 32
 39230 000069E2 43757272656E742064-     	db 'Current drive is no longer valid'
 39230 000069EB 72697665206973206E-
 39230 000069F4 6F206C6F6E67657220-
 39230 000069FD 76616C6964         
 39231                                  MSG_1029:
 39232 00006A02 11                      	db 17
 39233 00006A03 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 39233 00006A0C 20666F756E640D0A   
 39234                                  MSG_1030:
 39235 00006A14 0E                      	db 14
 39236 00006A15 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 39236 00006A1E 726F720D0A         
 39237                                  MSG_1032:
 39238 00006A23 17                      	db 23
 39239 00006A24 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 39239 00006A2D 617465206973202531-
 39239 00006A36 2025320D0A         
 39240                                  MSG_1033:
 39241 00006A3B 15                      	db 21
 39242 00006A3C 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 39242 00006A45 576564546875467269-
 39242 00006A4E 536174             
 39243                                  MSG_1034:
 39244 00006A51 15                      	db 21
 39245 00006A52 456E746572206E6577-     	db 'Enter new date (%1): '
 39245 00006A5B 206461746520282531-
 39245 00006A64 293A20             
 39246                                  MSG_1036:
 39247 00006A67 14                      	db 20
 39248 00006A68 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 39248 00006A71 696D65206973202531-
 39248 00006A7A 0D0A               
 39249                                  MSG_1037:
 39250 00006A7C 10                      	db 16
 39251 00006A7D 456E746572206E6577-     	db 'Enter new time: '
 39251 00006A86 2074696D653A20     
 39252                                  MSG_1038:
 39253 00006A8D 12                              db 18
 39254 00006A8E 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 39254 00006A97 74652028592F4E293F 
 39255                                  MSG_1039:
 39256 00006AA0 3C                              db 60
 39257 00006AA1 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 39257 00006AAA 20696E206469726563-
 39257 00006AB3 746F72792077696C6C-
 39257 00006ABC 2062652064656C6574-
 39257 00006AC5 6564210D0A         
 39258 00006ACA 41726520796F752073-     	db 'Are you sure (Y/N)?'
 39258 00006AD3 7572652028592F4E29-
 39258 00006ADC 3F                 
 39259                                  MSG_1040:
 39260 00006ADD 14                      	db 20
 39261 00006ADE 4D532D444F53205665-     	db 'MS-DOS Version %1.%2'
 39261 00006AE7 7273696F6E2025312E-
 39261 00006AF0 2532               
 39262                                  MSG_1044:
 39263 00006AF2 13                      	db 19
 39264 00006AF3 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 39264 00006AFC 69726563746F72790D-
 39264 00006B05 0A                 
 39265                                  MSG_1046:
 39266 00006B06 36                      	db 54
 39267 00006B07 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 39267 00006B10 6174682C206E6F7420-
 39267 00006B19 6469726563746F7279-
 39267 00006B22 2C0D0A             
 39268 00006B25 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 39268 00006B2E 6F7279206E6F742065-
 39268 00006B37 6D7074790D0A       
 39269                                  MSG_1047:
 39270 00006B3D 18                      	db 24
 39271 00006B3E 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 39271 00006B47 696679204F4E206F72-
 39271 00006B50 204F46460D0A       
 39272                                  MSG_1048:
 39273 00006B56 11                      	db 17
 39274 00006B57 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 39274 00006B60 206F662025310D0A   
 39275                                  MSG_1049:
 39276 00006B68 09                      	db 9
 39277 00006B69 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 39278                                  MSG_1050:
 39279 00006B72 1E                      	db 30
 39280 00006B73 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 39280 00006B7C 7269766520696E2073-
 39280 00006B85 656172636820706174-
 39280 00006B8E 680D0A             
 39281                                  MSG_1051:
 39282 00006B91 10                      	db 16
 39283 00006B92 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 39283 00006B9B 65766963650D0A     
 39284                                  MSG_1052:
 39285 00006BA2 16                      	db 22
 39286 00006BA3 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 39286 00006BAC 74206265206E657374-
 39286 00006BB5 65640D0A           
 39287                                  MSG_1053:
 39288 00006BB9 25                      	db 37
 39289 00006BBA 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 39289 00006BC3 6174652066696C6520-
 39289 00006BCC 6572726F7220647572-
 39289 00006BD5 696E6720706970650D-
 39289 00006BDE 0A                 
 39290                                  MSG_1054:
 39291 00006BDF 26                      	db 38
 39292 00006BE0 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 39292 00006BE9 2062696E6172792072-
 39292 00006BF2 656164732066726F6D-
 39292 00006BFB 206120646576696365-
 39292 00006C04 0D0A               
 39293                                  
 39294                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 39295                                  	; 17/06/2023
 39296                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7155h)
 39297                                  MSG_1055:
 39298 00006C06 0D                      	db 13
 39299 00006C07 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 39299 00006C10 25310D0A           
 39300                                  MSG_1056:
 39301 00006C14 0E                      	db 14
 39302 00006C15 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 39302 00006C1E 2025310D0A         
 39303                                  MSG_1057:
 39304 00006C23 0C                      	db 12
 39305 00006C24 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 39305 00006C2D 310D0A             
 39306                                  MSG_1059:
 39307 00006C30 04                      	db 4
 39308 00006C31 6F666600                	db 'off',0
 39309                                  MSG_1060:
 39310 00006C35 03                      	db 3
 39311 00006C36 6F6E00                  	db 'on',0
 39312                                  MSG_1061:
 39313 00006C39 19                      	db 25
 39314 00006C3A 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 39314 00006C43 74696E6720746F2064-
 39314 00006C4C 65766963650D0A     
 39315                                  MSG_1063:
 39316 00006C53 02                      	db 2
 39317 00006C54 2531                    	db '%1'
 39318                                  MSG_1064:
 39319 00006C56 02                      	db 2
 39320 00006C57 2531                    	db '%1'
 39321                                  MSG_1065:
 39322 00006C59 02                      	db 2
 39323 00006C5A 2531                    	db '%1'
 39324                                  MSG_1066:
 39325 00006C5C 02                      	db 2
 39326 00006C5D 2531                    	db '%1'
 39327                                  MSG_1067:
 39328 00006C5F 01                      	db 1
 39329 00006C60 09                      	db 9
 39330                                  MSG_1068:
 39331 00006C61 0A                      	db 10
 39332 00006C62 203C4449523E202020-     	db ' <DIR>    '
 39332 00006C6B 20                 
 39333                                  MSG_1069:
 39334 00006C6C 03                      	db 3
 39335 00006C6D 082008                  	db 8, 20h, 8
 39336                                  MSG_1070:	; CRLF
 39337 00006C70 02                      	db 2
 39338 00006C71 0D                      	db 0Dh
 39339 00006C72 0A                      	db 0Ah
 39340                                  MSG_1071:
 39341 00006C73 02                      	db 2
 39342 00006C74 2531                    	db '%1'
 39343                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 39344                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:71C5h
 39345                                  MSG_1072:
 39346                                  	;db 8
 39347                                  	;db 'mm-dd-yy'
 39348 00006C76 09                      	db 9
 39349 00006C77 6D6D2D64642D797900      	db 'mm-dd-yy',0
 39350                                  MSG_1073:
 39351                                  	;db 8
 39352                                  	;db 'dd-mm-yy'
 39353 00006C80 09                      	db 9
 39354 00006C81 64642D6D6D2D797900      	db 'dd-mm-yy',0
 39355                                  MSG_1074:
 39356                                  	;db 8
 39357                                  	;db 'yy-mm-dd'
 39358 00006C8A 09                      	db 9
 39359 00006C8B 79792D6D6D2D646400      	db 'yy-mm-dd',0
 39360                                  MSG_1075:
 39361 00006C94 05                      	db 5
 39362 00006C95 2531202532              	db '%1 %2'
 39363                                  MSG_1076:
 39364 00006C9A 02                      	db 2
 39365 00006C9B 2531                    	db '%1'
 39366                                  MSG_1077:
 39367 00006C9D 07                      	db 7
 39368 00006C9E 20253120202532          	db ' %1  %2'
 39369                                  MSG_1078:
 39370 00006CA5 1A                      	db 26
 39371 00006CA6 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 39371 00006CAF 20616C726561647920-
 39371 00006CB8 6578697374730D0A   
 39372                                  MSG_1079:
 39373 00006CC0 0A                      	db 10
 39374 00006CC1 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 39374 00006CCA 0A                 
 39375                                  MSG_1080:
 39376 00006CCB 15                      	db 21
 39377 00006CCC 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 39377 00006CD5 6573206C6973746564-
 39377 00006CDE 3A0D0A             
 39378                                  MSG_1081:
 39379 00006CE1 2A                      	db 42
 39380 00006CE2 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 39380 00006CEB 63757272656420696E-
 39380 00006CF4 20656E7669726F6E6D-
 39380 00006CFD 656E74207661726961-
 39380 00006D06 626C65290D0A       
 39381                                  	;
 39382                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 39383                                  MSG_1082:
 39384 00006D0C 07                              db 7
 39385 00006D0D 205B592F4E5D3F          	db ' [Y/N]?'
 39386                                  MSG_1083:
 39387 00006D14 02                      	db 2
 39388 00006D15 594E                    	db 'YN'
 39389                                  	;
 39390                                  MSG_1084:
 39391 00006D17 0F                      	db 15
 39392 00006D18 28636F6E74696E7569-     	db '(continuing %1)'
 39392 00006D21 6E6720253129       
 39393                                  MSG_1090:
 39394 00006D27 0D                      	db 13
 39395 00006D28 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 39395 00006D31 25310D0A           
 39396                                  MSG_1091:
 39397 00006D35 0D                      	db 13
 39398 00006D36 444F5320697320696E-     	db 'DOS is in ROM'
 39398 00006D3F 20524F4D           
 39399                                  MSG_1092:
 39400 00006D43 0D                      	db 13
 39401 00006D44 444F5320697320696E-     	db 'DOS is in HMA'
 39401 00006D4D 20484D41           
 39402                                  MSG_1093:
 39403 00006D51 14                      	db 20
 39404 00006D52 444F5320697320696E-     	db 'DOS is in low memory'
 39404 00006D5B 206C6F77206D656D6F-
 39404 00006D64 7279               
 39405                                  MSG_1094:
 39406 00006D66 1C                      	db 28
 39407 00006D67 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 39407 00006D70 616468696768206261-
 39407 00006D79 7463682066696C650D-
 39407 00006D82 0A                 
 39408                                  MSG_1095:
 39409 00006D83 1C                      	db 28
 39410 00006D84 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 39410 00006D8D 20496E76616C696420-
 39410 00006D96 66696C656E616D650D-
 39410 00006D9F 0A                 
 39411                                  MSG_1096:
 39412 00006DA0 30                      	db 48
 39413 00006DA1 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 39413 00006DAA 656E20737065636966-
 39413 00006DB3 69656420636F756E74-
 39413 00006DBC 727920696E666F726D-
 39413 00006DC5 6174696F6E2066696C-
 39413 00006DCE 650D0A             
 39414                                  
 39415                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39416                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7320h
 39417                                  MSG_1097:
 39418 00006DD1 1C                      	db 28
 39419 00006DD2 4C6F6164486967683A-     	db 'LoadHigh: Invalid argument',0Dh,0Ah
 39419 00006DDB 20496E76616C696420-
 39419 00006DE4 617267756D656E740D-
 39419 00006DED 0A                 
 39420                                  MSG_1098:
 39421 00006DEE 1C                      	db 28
 39422 00006DEF 526571756972656420-     	db 'Required parameter missing',0Dh,0Ah
 39422 00006DF8 706172616D65746572-
 39422 00006E01 206D697373696E670D-
 39422 00006E0A 0A                 
 39423                                  MSG_1099:
 39424 00006E0B 15                      	db 21
 39425 00006E0C 556E7265636F676E69-     	db 'Unrecognized switch',0Dh,0Ah
 39425 00006E15 7A6564207377697463-
 39425 00006E1E 680D0A             
 39426                                  MSG_1100:
 39427 00006E21 25                      	db 37
 39428 00006E22 412062616420554D42-     	db 'A bad UMB number has been specified',0Dh,0Ah
 39428 00006E2B 206E756D6265722068-
 39428 00006E34 6173206265656E2073-
 39428 00006E3D 70656369666965640D-
 39428 00006E46 0A                 
 39429                                  MSG_1101:
 39430 00006E47 0E                      	db 14
 39431 00006E48 202025312E25322074-     	db '  %1.%2 to 1.0'
 39431 00006E51 6F20312E30         
 39432                                  MSG_1102:
 39433 00006E56 39                      	db 57
 39434 00006E57 202020202020202020-     	db '                 %1.%2 to 1.0 average compression ratio',0Dh,0Ah
 39434 00006E60 202020202020202025-
 39434 00006E69 312E253220746F2031-
 39434 00006E72 2E3020617665726167-
 39434 00006E7B 6520636F6D70726573-
 39434 00006E84 73696F6E2072617469-
 39434 00006E8D 6F0D0A             
 39435                                  MSG_1103:
 39436 00006E90 1A                      	db 26
 39437 00006E91 4F7665727772697465-     	db 'Overwrite %1 (Yes/No/All)?'
 39437 00006E9A 20253120285965732F-
 39437 00006EA3 4E6F2F416C6C293F   
 39438                                  MSG_1104:
 39439 00006EAB 03                      	db 3
 39440 00006EAC 59                      _Y_es:	db 'Y'
 39441 00006EAD 4E                      _N_o:	db 'N'
 39442 00006EAE 41                      _A_ll:	db 'A'
 39443                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:73FEh)
 39444                                  MSG_1105:
 39445 00006EAF 04                      	db 4
 39446 00006EB0 20202020                	db '    '
 39447                                  	
 39448                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h)
 39449                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7403h
 39450                                  MSG_1200:
 39451 00006EB4 00                      	db 0	; /? unimplemented
 39452                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7404h)
 39453                                  MSG_1300:
 39454 00006EB5 86                      	db 134
 39455 00006EB6 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 39455 00006EBF 6C6561727320657874-
 39455 00006EC8 656E64656420435452-
 39455 00006ED1 4C2B4320636865636B-
 39455 00006EDA 696E672E0D0A       
 39456 00006EE0 0D0A                    	db 0Dh,0Ah
 39457 00006EE2 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 39457 00006EEB 207C204F46465D0D0A 
 39458 00006EF4 0D0A                    	db 0Dh,0Ah
 39459 00006EF6 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 39459 00006EFF 4B20776974686F7574-
 39459 00006F08 206120706172616D65-
 39459 00006F11 74657220746F206469-
 39459 00006F1A 73706C617920746865-
 39459 00006F23 2063757272656E7420-
 39459 00006F2C 425245414B20736574-
 39459 00006F35 74696E672E0D0A     
 39460                                  MSG_1320:
 39461 00006F3C 3F                      	db 63
 39462 00006F3D 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 39462 00006F46 6F7220736574732074-
 39462 00006F4F 686520616374697665-
 39462 00006F58 20636F646520706167-
 39462 00006F61 65206E756D6265722E-
 39462 00006F6A 0D0A               
 39463 00006F6C 0D0A                    	db 0Dh,0Ah
 39464 00006F6E 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 39464 00006F77 5D0D0A             
 39465 00006F7A 0D0A                    	db 0Dh,0Ah
 39466                                  MSG_1321:
 39467 00006F7C 70                      	db 112
 39468 00006F7D 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 39468 00006F86 706563696669657320-
 39468 00006F8F 6120636F6465207061-
 39468 00006F98 6765206E756D626572-
 39468 00006FA1 2E0D0A             
 39469 00006FA4 0D0A                    	db 0Dh,0Ah
 39470 00006FA6 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 39470 00006FAF 20776974686F757420-
 39470 00006FB8 6120706172616D6574-
 39470 00006FC1 657220746F20646973-
 39470 00006FCA 706C61792074686520-
 39470 00006FD3 61637469766520636F-
 39470 00006FDC 64652070616765206E-
 39470 00006FE5 756D6265722E0D0A   
 39471                                  MSG_1340:
 39472 00006FED 5B                      	db 91
 39473 00006FEE 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 39473 00006FF7 746865206E616D6520-
 39473 00007000 6F66206F7220636861-
 39473 00007009 6E6765732074686520-
 39473 00007012 63757272656E742064-
 39473 0000701B 69726563746F72792E-
 39473 00007024 0D0A               
 39474 00007026 0D0A                    	db 0Dh,0Ah
 39475 00007028 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 39475 00007031 6976653A5D5B706174-
 39475 0000703A 685D0D0A           
 39476 0000703E 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 39476 00007047 0D0A               
 39477                                  MSG_1341:
 39478 00007049 62                      	db 98
 39479 0000704A 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 39479 00007053 3A5D5B706174685D0D-
 39479 0000705C 0A                 
 39480 0000705D 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 39481 00007065 0D0A                    	db 0Dh,0Ah
 39482 00007067 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 39482 00007070 656369666965732074-
 39482 00007079 68617420796F752077-
 39482 00007082 616E7420746F206368-
 39482 0000708B 616E676520746F2074-
 39482 00007094 686520706172656E74-
 39482 0000709D 206469726563746F72-
 39482 000070A6 792E               
 39483 000070A8 0D0A                    	db 0Dh,0Ah
 39484 000070AA 0D0A                    	db 0Dh,0Ah
 39485                                  MSG_1342:
 39486 000070AC 91                      	db 145
 39487 000070AD 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 39487 000070B6 726976653A20746F20-
 39487 000070BF 646973706C61792074-
 39487 000070C8 68652063757272656E-
 39487 000070D1 74206469726563746F-
 39487 000070DA 727920696E20746865-
 39487 000070E3 207370656369666965-
 39487 000070EC 6420               
 39488 000070EE 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 39489 000070F6 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 39489 000070FF 6974686F7574207061-
 39489 00007108 72616D657465727320-
 39489 00007111 746F20646973706C61-
 39489 0000711A 792074686520637572-
 39489 00007123 72656E742064726976-
 39489 0000712C 6520616E6420646972-
 39489 00007135 6563746F72792E0D0A 
 39490                                  MSG_1360:
 39491 0000713E 1B                      	db 27
 39492 0000713F 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 39492 00007148 652073637265656E2E-
 39492 00007151 0D0A               
 39493 00007153 0D0A                    	db 0Dh,0Ah
 39494 00007155 434C530D0A              	db 'CLS',0Dh,0Ah
 39495                                  MSG_1400:
 39496                                  	;db 145
 39497                                  	;db 'Copies one or more files to another location.',0Dh,0Ah
 39498                                  	;db 0Dh,0Ah
 39499                                  	;db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 39500                                  	;db '  [/A | /B]] [/V]',0Dh,0Ah
 39501                                  	;db 0Dh,0Ah
 39502                                  	
 39503                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39504                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:76A9h)
 39505 0000715A 9C                      	db 156 ; 19/06/2023	
 39506 0000715B 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 39506 00007164 65206F72206D6F7265-
 39506 0000716D 2066696C657320746F-
 39506 00007176 20616E6F7468657220-
 39506 0000717F 6C6F636174696F6E2E-
 39506 00007188 0D0A               
 39507 0000718A 0D0A                    	db 0Dh,0Ah
 39508 0000718C 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 39508 00007195 7C202F425D20736F75-
 39508 0000719E 726365205B2F41207C-
 39508 000071A7 202F425D205B2B2073-
 39508 000071B0 6F75726365205B2F41-
 39508 000071B9 207C202F425D205B2B-
 39508 000071C2 202E2E2E5D5D205B64-
 39508 000071CB 657374696E6174696F-
 39508 000071D4 6E0D0A             
 39509 000071D7 20205B2F41207C202F-     	db '  [/A | /B]] [/V] [/Y | /-Y]',0Dh,0Ah
 39509 000071E0 425D5D205B2F565D20-
 39509 000071E9 5B2F59207C202F2D59-
 39509 000071F2 5D0D0A             
 39510 000071F5 0D0A                    	db 0Dh,0Ah
 39511                                  MSG_1401:
 39512 000071F7 68                      	db 104
 39513 000071F8 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 39513 00007201 202020202020537065-
 39513 0000720A 636966696573207468-
 39513 00007213 652066696C65206F72-
 39513 0000721C 2066696C657320746F-
 39513 00007225 20626520636F706965-
 39513 0000722E 642E0D0A           
 39514 00007232 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 39514 0000723B 202020202020496E64-
 39514 00007244 69636174657320616E-
 39514 0000724D 204153434949207465-
 39514 00007256 78742066696C652E0D-
 39514 0000725F 0A                 
 39515                                  MSG_1402:
 39516 00007260 76                      	db 118
 39517 00007261 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 39517 0000726A 202020202020496E64-
 39517 00007273 696361746573206120-
 39517 0000727C 62696E617279206669-
 39517 00007285 6C652E0D0A         
 39518 0000728A 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 39518 00007293 74696F6E2020537065-
 39518 0000729C 636966696573207468-
 39518 000072A5 65206469726563746F-
 39518 000072AE 727920616E642F6F72-
 39518 000072B7 2066696C656E616D65-
 39518 000072C0 20666F722074686520-
 39518 000072C9 6E65772066696C6528-
 39518 000072D2 73292E0D0A         
 39519                                  MSG_1403:	
 39520                                  	;db 65  ;  MSDOS 5.0
 39521                                  	; 17/06/2023
 39522 000072D7 3F                      	db 63 ; MSDOS 6.22
 39523 000072D8 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 39523 000072E1 202020202020566572-
 39523 000072EA 696669657320746861-
 39523 000072F3 74206E65772066696C-
 39523 000072FC 657320617265207772-
 39523 00007305 697474656E20636F72-
 39523 0000730E 726563746C792E0D0A 
 39524                                  	;db 0Dh,0Ah ; MSDOS 5.0
 39525                                  
 39526                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39527                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7866h
 39528                                  MSG_1404:
 39529 00007317 74                              db 116
 39530 00007318 20202F592020202020-     	db '  /Y           Suppresses prompting to confirm you want to overwrite an',0Dh,0Ah
 39530 00007321 202020202020537570-
 39530 0000732A 707265737365732070-
 39530 00007333 726F6D7074696E6720-
 39530 0000733C 746F20636F6E666972-
 39530 00007345 6D20796F752077616E-
 39530 0000734E 7420746F206F766572-
 39530 00007357 777269746520616E0D-
 39530 00007360 0A                 
 39531 00007361 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 39531 0000736A 202020202020657869-
 39531 00007373 7374696E6720646573-
 39531 0000737C 74696E6174696F6E20-
 39531 00007385 66696C652E0D0A     
 39532                                  MSG_1405:
 39533 0000738C 72                      	db 114
 39534 0000738D 20202F2D5920202020-     	db '  /-Y          Causes prompting to confirm you want to overwrite an',0Dh,0Ah
 39534 00007396 202020202020436175-
 39534 0000739F 7365732070726F6D70-
 39534 000073A8 74696E6720746F2063-
 39534 000073B1 6F6E6669726D20796F-
 39534 000073BA 752077616E7420746F-
 39534 000073C3 206F76657277726974-
 39534 000073CC 6520616E0D0A       
 39535 000073D2 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 39535 000073DB 202020202020657869-
 39535 000073E4 7374696E6720646573-
 39535 000073ED 74696E6174696F6E20-
 39535 000073F6 66696C652E0D0A     
 39536 000073FD 0D0A                    	db 0Dh,0Ah
 39537                                  MSG_1406:
 39538 000073FF 42                      	db 66
 39539 00007400 546865207377697463-     	db 'The switch /Y may be preset in the COPYCMD environment variable.',0Dh,0Ah
 39539 00007409 68202F59206D617920-
 39539 00007412 626520707265736574-
 39539 0000741B 20696E207468652043-
 39539 00007424 4F5059434D4420656E-
 39539 0000742D 7669726F6E6D656E74-
 39539 00007436 207661726961626C65-
 39539 0000743F 2E0D0A             
 39540                                  
 39541                                  ;MSG_1404: ; MSDOS 5.0 (TRANGROUP:681Ch)
 39542                                  MSG_1407:  ; MSDOS 6.22	(TRANGROUP:7991h)
 39543 00007442 87                      	db 135
 39544 00007443 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 39544 0000744C 2066696C65732C2073-
 39544 00007455 706563696679206120-
 39544 0000745E 73696E676C65206669-
 39544 00007467 6C6520666F72206465-
 39544 00007470 7374696E6174696F6E-
 39544 00007479 2C20627574206D756C-
 39544 00007482 7469706C652066696C-
 39544 0000748B 65730D0A           
 39545 0000748F 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 39545 00007498 6520287573696E6720-
 39545 000074A1 77696C646361726473-
 39545 000074AA 206F722066696C6531-
 39545 000074B3 2B66696C65322B6669-
 39545 000074BC 6C653320666F726D61-
 39545 000074C5 74292E0D0A         
 39546                                  MSG_1420:
 39547 000074CA 8A                      	db 138
 39548 000074CB 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 39548 000074D4 6865207465726D696E-
 39548 000074DD 616C20646576696365-
 39548 000074E6 207573656420746F20-
 39548 000074EF 636F6E74726F6C2079-
 39548 000074F8 6F7572207379737465-
 39548 00007501 6D2E0D0A           
 39549 00007505 0D0A                    	db 0Dh,0Ah
 39550 00007507 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 39550 00007510 63650D0A           
 39551 00007514 0D0A                    	db 0Dh,0Ah
 39552 00007516 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 39552 0000751F 202054686520746572-
 39552 00007528 6D696E616C20646576-
 39552 00007531 69636520796F752077-
 39552 0000753A 616E7420746F207573-
 39552 00007543 652C20737563682061-
 39552 0000754C 7320434F4D312E0D0A 
 39553                                  MSG_1440:
 39554                                  	;db 45
 39555                                  	;db 'Displays or sets the date.',0Dh,0Ah
 39556                                  	;db 0Dh,0Ah
 39557                                  	;db 'DATE [date]',0Dh,0Ah
 39558                                  	;db 0Dh,0Ah
 39559                                  
 39560                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39561                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7AA4h)
 39562 00007555 5D                      	db 93
 39563 00007556 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 39563 0000755F 6F7220736574732074-
 39563 00007568 686520646174652E0D-
 39563 00007571 0A                 
 39564 00007572 0D0A                    	db 0Dh,0Ah
 39565 00007574 44415445205B6D6D2D-     	db 'DATE [mm-dd-yy]',0Dh,0Ah
 39565 0000757D 64642D79795D0D0A   
 39566 00007585 0D0A                    	db 0Dh,0Ah
 39567 00007587 20206D6D2D64642D79-     	db '  mm-dd-yy    Sets the date you specify.',0Dh,0Ah
 39567 00007590 792020202053657473-
 39567 00007599 207468652064617465-
 39567 000075A2 20796F752073706563-
 39567 000075AB 6966792E0D0A       
 39568 000075B1 0D0A                    	db 0Dh,0Ah
 39569                                  MSG_1441:
 39570 000075B3 83                      	db 131
 39571 000075B4 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 39571 000075BD 20776974686F757420-
 39571 000075C6 706172616D65746572-
 39571 000075CF 7320746F2064697370-
 39571 000075D8 6C6179207468652063-
 39571 000075E1 757272656E74206461-
 39571 000075EA 74652073657474696E-
 39571 000075F3 6720616E640D0A     
 39572 000075FA 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 39572 00007603 666F722061206E6577-
 39572 0000760C 206F6E652E20205072-
 39572 00007615 65737320454E544552-
 39572 0000761E 20746F206B65657020-
 39572 00007627 7468652073616D6520-
 39572 00007630 646174652E0D0A     
 39573                                  MSG_1460:	
 39574 00007637 64                      	db 100
 39575 00007638 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 39575 00007641 6E65206F72206D6F72-
 39575 0000764A 652066696C65732E0D-
 39575 00007653 0A                 
 39576 00007654 0D0A                    	db 0Dh,0Ah
 39577 00007656 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 39577 0000765F 653A5D5B706174685D-
 39577 00007668 66696C656E616D6520-
 39577 00007671 5B2F505D0D0A       
 39578 00007677 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 39578 00007680 6976653A5D5B706174-
 39578 00007689 685D66696C656E616D-
 39578 00007692 65205B2F505D0D0A   
 39579 0000769A 0D0A                    	db 0Dh,0Ah
 39580                                  MSG_1461:
 39581 0000769C 83                      	db 131
 39582 0000769D 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 39582 000076A6 5D5B706174685D6669-
 39582 000076AF 6C656E616D65202053-
 39582 000076B8 706563696669657320-
 39582 000076C1 7468652066696C6528-
 39582 000076CA 732920746F2064656C-
 39582 000076D3 6574652E2020537065-
 39582 000076DC 63696679206D756C74-
 39582 000076E5 69706C650D0A       
 39583 000076EB 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 39583 000076F4 202020202020202020-
 39583 000076FD 202020202020202066-
 39583 00007706 696C65732062792075-
 39583 0000770F 73696E672077696C64-
 39583 00007718 63617264732E0D0A   
 39584                                  MSG_1462:
 39585 00007720 4F                      	db 79
 39586 00007721 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 39586 0000772A 202020202020202020-
 39586 00007733 202020202020202050-
 39586 0000773C 726F6D70747320666F-
 39586 00007745 7220636F6E6669726D-
 39586 0000774E 6174696F6E20626566-
 39586 00007757 6F72652064656C6574-
 39586 00007760 696E67206561636820-
 39586 00007769 66696C652E0D0A     
 39587                                  
 39588                                  ; 17/06/2023
 39589                                  %if 0	; MSDOS 5.0 DIR Help messages
 39590                                  
 39591                                  MSG_1480:
 39592                                  	db 162
 39593                                  	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 39594                                  	db 0Dh,0Ah
 39595                                  	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 39596                                  	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 39597                                  	db 0Dh,0Ah
 39598                                  MSG_1481:
 39599                                  	db 93
 39600                                  	db '  [drive:][path][filename]',0Dh,0Ah
 39601                                  	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 39602                                  MSG_1482:
 39603                                  	db 97
 39604                                  	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 39605                                  	db '  /W          Uses wide list format.',0Dh,0Ah
 39606                                  MSG_1483:	
 39607                                  	db 122
 39608                                  	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 39609                                  	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 39610                                  MSG_1484:
 39611                                  	db 191
 39612                                  	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 39613                                  	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 39614                                  	db '  /O          List by files in sorted order.',0Dh,0Ah
 39615                                  MSG_1485:
 39616                                  	db 155
 39617                                  	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 39618                                  	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 39619                                  MSG_1486:
 39620                                  	db 150
 39621                                  	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 39622                                  	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 39623                                  MSG_1487:
 39624                                  	db 102
 39625                                  	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 39626                                  	db '  /L          Uses lowercase.',0Dh,0Ah
 39627                                  	db 0Dh,0Ah
 39628                                  MSG_1488:
 39629                                  	db 146
 39630                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 39631                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 39632                                  %endif
 39633                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39634                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7CBFh
 39635                                  MSG_1480:
 39636 00007770 89                      	db 137
 39637 00007771 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 39637 0000777A 61206C697374206F66-
 39637 00007783 2066696C657320616E-
 39637 0000778C 642073756264697265-
 39637 00007795 63746F726965732069-
 39637 0000779E 6E2061206469726563-
 39637 000077A7 746F72792E0D0A     
 39638 000077AE 0D0A                    	db 0Dh,0Ah
 39639 000077B0 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]sortord]]',0Dh,0Ah
 39639 000077B9 653A5D5B706174685D-
 39639 000077C2 5B66696C656E616D65-
 39639 000077CB 5D205B2F505D205B2F-
 39639 000077D4 575D205B2F415B5B3A-
 39639 000077DD 5D617474726962735D-
 39639 000077E6 5D205B2F4F5B5B3A5D-
 39639 000077EF 736F72746F72645D5D-
 39639 000077F8 0D0A               
 39640                                  MSG_1481:
 39641 000077FA 1E                      	db 30
 39642 000077FB 202020205B2F535D20-     	db '    [/S] [/B] [/L] [/C[H]]',0Dh,0Ah
 39642 00007804 5B2F425D205B2F4C5D-
 39642 0000780D 205B2F435B485D5D0D-
 39642 00007816 0A                 
 39643 00007817 0D0A                    	db 0Dh,0Ah
 39644                                  MSG_1482:
 39645 00007819 50                      	db 80
 39646 0000781A 20205B64726976653A-     	db '  [drive:][path][filename]   Specifies drive, directory, and/or files to list.',0Dh,0Ah
 39646 00007823 5D5B706174685D5B66-
 39646 0000782C 696C656E616D655D20-
 39646 00007835 202053706563696669-
 39646 0000783E 65732064726976652C-
 39646 00007847 206469726563746F72-
 39646 00007850 792C20616E642F6F72-
 39646 00007859 2066696C657320746F-
 39646 00007862 206C6973742E0D0A   
 39647                                  MSG_1483:
 39648 0000786A 59                      	db 89
 39649 0000786B 20202F502020202020-     	db '  /P      Pauses after each screenful of information.',0Dh,0Ah
 39649 00007874 205061757365732061-
 39649 0000787D 667465722065616368-
 39649 00007886 2073637265656E6675-
 39649 0000788F 6C206F6620696E666F-
 39649 00007898 726D6174696F6E2E0D-
 39649 000078A1 0A                 
 39650 000078A2 20202F572020202020-     	db '  /W      Uses wide list format.',0Dh,0Ah
 39650 000078AB 205573657320776964-
 39650 000078B4 65206C69737420666F-
 39650 000078BD 726D61742E0D0A     
 39651                                  MSG_1484:
 39652 000078C4 7E                      	db 126
 39653 000078C5 20202F412020202020-     	db '  /A      Displays files with specified attributes.',0Dh,0Ah
 39653 000078CE 20446973706C617973-
 39653 000078D7 2066696C6573207769-
 39653 000078E0 746820737065636966-
 39653 000078E9 696564206174747269-
 39653 000078F2 62757465732E0D0A   
 39654 000078FA 202061747472696273-     	db '  attribs   D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
 39654 00007903 202020442020446972-
 39654 0000790C 6563746F7269657320-
 39654 00007915 202052202052656164-
 39654 0000791E 2D6F6E6C792066696C-
 39654 00007927 657320202020202020-
 39654 00007930 202048202048696464-
 39654 00007939 656E2066696C65730D-
 39654 00007942 0A                 
 39655                                  MSG_1485:
 39656 00007943 7B                      	db 123
 39657 00007944 202020202020202020-     	db '            S  System files  A  Files ready to archive  -  Prefix meaning "not"',0Dh,0Ah
 39657 0000794D 202020532020537973-
 39657 00007956 74656D2066696C6573-
 39657 0000795F 202041202046696C65-
 39657 00007968 732072656164792074-
 39657 00007971 6F2061726368697665-
 39657 0000797A 20202D202050726566-
 39657 00007983 6978206D65616E696E-
 39657 0000798C 6720226E6F74220D0A 
 39658 00007995 20202F4F2020202020-     	db '  /O      List by files in sorted order.',0Dh,0Ah
 39658 0000799E 204C69737420627920-
 39658 000079A7 66696C657320696E20-
 39658 000079B0 736F72746564206F72-
 39658 000079B9 6465722E0D0A       
 39659                                  MSG_1486:
 39660 000079BF 95                      	db 149
 39661 000079C0 2020736F72746F7264-     	db '  sortord   N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 39661 000079C9 2020204E2020427920-
 39661 000079D2 6E616D652028616C70-
 39661 000079DB 686162657469632920-
 39661 000079E4 202020202020532020-
 39661 000079ED 42792073697A652028-
 39661 000079F6 736D616C6C65737420-
 39661 000079FF 6669727374290D0A   
 39662 00007A07 202020202020202020-     	db '            E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 39662 00007A10 202020452020427920-
 39662 00007A19 657874656E73696F6E-
 39662 00007A22 2028616C7068616265-
 39662 00007A2B 746963292020442020-
 39662 00007A34 427920646174652026-
 39662 00007A3D 2074696D6520286561-
 39662 00007A46 726C69657374206669-
 39662 00007A4F 727374290D0A       
 39663                                  MSG_1487:
 39664 00007A55 46                      	db 70
 39665 00007A56 202020202020202020-     	db '            G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 39665 00007A5F 20202047202047726F-
 39665 00007A68 757020646972656374-
 39665 00007A71 6F7269657320666972-
 39665 00007A7A 7374202020202D2020-
 39665 00007A83 50726566697820746F-
 39665 00007A8C 207265766572736520-
 39665 00007A95 6F726465720D0A     
 39666                                  MSG_1488:
 39667 00007A9C 7F                      	db 127
 39668 00007A9D 202020202020202020-     	db '            C  By compression ratio (smallest first)',0Dh,0Ah
 39668 00007AA6 202020432020427920-
 39668 00007AAF 636F6D707265737369-
 39668 00007AB8 6F6E20726174696F20-
 39668 00007AC1 28736D616C6C657374-
 39668 00007ACA 206669727374290D0A 
 39669 00007AD3 20202F532020202020-     	db '  /S      Displays files in specified directory and all subdirectories.',0Dh,0Ah
 39669 00007ADC 20446973706C617973-
 39669 00007AE5 2066696C657320696E-
 39669 00007AEE 207370656369666965-
 39669 00007AF7 64206469726563746F-
 39669 00007B00 727920616E6420616C-
 39669 00007B09 6C2073756264697265-
 39669 00007B12 63746F726965732E0D-
 39669 00007B1B 0A                 
 39670                                  MSG_1489:
 39671 00007B1C 41                      	db 65
 39672 00007B1D 20202F422020202020-     	db '  /B      Uses bare format (no heading information or summary).',0Dh,0Ah
 39672 00007B26 205573657320626172-
 39672 00007B2F 6520666F726D617420-
 39672 00007B38 286E6F206865616469-
 39672 00007B41 6E6720696E666F726D-
 39672 00007B4A 6174696F6E206F7220-
 39672 00007B53 73756D6D617279292E-
 39672 00007B5C 0D0A               
 39673                                  MSG_1490:
 39674 00007B5E 1B                      	db 27
 39675 00007B5F 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 39675 00007B68 2055736573206C6F77-
 39675 00007B71 6572636173652E0D0A 
 39676                                  MSG_1491:
 39677 00007B7A 52                      	db 82
 39678 00007B7B 20202F435B485D2020-     	db '  /C[H]   Displays file compression ratio; /CH uses host allocation unit size.',0Dh,0Ah
 39678 00007B84 20446973706C617973-
 39678 00007B8D 2066696C6520636F6D-
 39678 00007B96 7072657373696F6E20-
 39678 00007B9F 726174696F3B202F43-
 39678 00007BA8 48207573657320686F-
 39678 00007BB1 737420616C6C6F6361-
 39678 00007BBA 74696F6E20756E6974-
 39678 00007BC3 2073697A652E0D0A   
 39679 00007BCB 0D0A                    	db 0Dh,0Ah
 39680                                  MSG_1492:
 39681 00007BCD 92                      	db 146
 39682 00007BCE 537769746368657320-     	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 39682 00007BD7 6D6179206265207072-
 39682 00007BE0 6573657420696E2074-
 39682 00007BE9 686520444952434D44-
 39682 00007BF2 20656E7669726F6E6D-
 39682 00007BFB 656E74207661726961-
 39682 00007C04 626C652E20204F7665-
 39682 00007C0D 72726964650D0A     
 39683 00007C14 707265736574207377-     	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 39683 00007C1D 697463686573206279-
 39683 00007C26 20707265666978696E-
 39683 00007C2F 6720616E7920737769-
 39683 00007C38 746368207769746820-
 39683 00007C41 2D202868797068656E-
 39683 00007C4A 292D2D666F72206578-
 39683 00007C53 616D706C652C202F2D-
 39683 00007C5C 572E0D0A           
 39684                                  MSG_1493:
 39685 00007C60 16                      	db 22
 39686 00007C61 202020205B2F535D20-     	db '    [/S] [/B] [/L]',0Dh,0Ah
 39686 00007C6A 5B2F425D205B2F4C5D-
 39686 00007C73 0D0A               
 39687 00007C75 0D0A                    	db 0Dh,0Ah
 39688                                  MSG_1494:
 39689 00007C77 1D                      	db 29
 39690 00007C78 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 39690 00007C81 2055736573206C6F77-
 39690 00007C8A 6572636173652E0D0A 
 39691 00007C93 0D0A                    	db 0Dh,0Ah
 39692                                  
 39693                                  MSG_1500:
 39694 00007C95 3E                      	db 62
 39695 00007C96 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 39695 00007C9F 20434F4D4D414E442E-
 39695 00007CA8 434F4D2070726F6772-
 39695 00007CB1 616D2028636F6D6D61-
 39695 00007CBA 6E6420696E74657270-
 39695 00007CC3 7265746572292E0D0A 
 39696 00007CCC 0D0A                    	db 0Dh,0Ah
 39697 00007CCE 455849540D0A            	db 'EXIT',0Dh,0Ah
 39698                                  MSG_1520:
 39699 00007CD4 3D                      	db 61
 39700 00007CD5 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 39700 00007CDE 206469726563746F72-
 39700 00007CE7 792E0D0A           
 39701 00007CEB 0D0A                    	db 0Dh,0Ah
 39702 00007CED 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 39702 00007CF6 6976653A5D70617468-
 39702 00007CFF 0D0A               
 39703 00007D01 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 39703 00007D0A 3A5D706174680D0A   
 39704                                  MSG_1540:
 39705 00007D12 5D                      	db 93
 39706 00007D13 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 39706 00007D1C 6F7220736574732061-
 39706 00007D25 207365617263682070-
 39706 00007D2E 61746820666F722065-
 39706 00007D37 786563757461626C65-
 39706 00007D40 2066696C65732E0D0A 
 39707 00007D49 0D0A                    	db 0Dh,0Ah
 39708 00007D4B 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 39708 00007D54 6976653A5D70617468-
 39708 00007D5D 5B3B2E2E2E5D5D0D0A 
 39709 00007D66 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 39710 00007D6E 0D0A                    	db 0Dh,0Ah
 39711                                  MSG_1541:
 39712 00007D70 6B                      	db 107
 39713 00007D71 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct MS-DOS to search',0Dh,0Ah
 39713 00007D7A 203B20746F20636C65-
 39713 00007D83 617220616C6C207365-
 39713 00007D8C 617263682D70617468-
 39713 00007D95 2073657474696E6773-
 39713 00007D9E 20616E642064697265-
 39713 00007DA7 6374204D532D444F53-
 39713 00007DB0 20746F207365617263-
 39713 00007DB9 680D0A             
 39714 00007DBC 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 39714 00007DC5 68652063757272656E-
 39714 00007DCE 74206469726563746F-
 39714 00007DD7 72792E0D0A         
 39715                                  MSG_1542:
 39716 00007DDC 3B                      	db 59
 39717 00007DDD 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 39717 00007DE6 20776974686F757420-
 39717 00007DEF 706172616D65746572-
 39717 00007DF8 7320746F2064697370-
 39717 00007E01 6C6179207468652063-
 39717 00007E0A 757272656E74207061-
 39717 00007E13 74682E0D0A         
 39718                                  MSG_1560:
 39719 00007E18 37                      	db 55
 39720 00007E19 4368616E6765732074-     	db 'Changes the MS-DOS command prompt.',0Dh,0Ah
 39720 00007E22 6865204D532D444F53-
 39720 00007E2B 20636F6D6D616E6420-
 39720 00007E34 70726F6D70742E0D0A 
 39721 00007E3D 0D0A                    	db 0Dh,0Ah
 39722 00007E3F 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 39722 00007E48 6578745D0D0A       
 39723 00007E4E 0D0A                    	db 0Dh,0Ah
 39724                                  MSG_1561:
 39725 00007E50 7C                      	db 124
 39726 00007E51 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 39726 00007E5A 205370656369666965-
 39726 00007E63 732061206E65772063-
 39726 00007E6C 6F6D6D616E64207072-
 39726 00007E75 6F6D70742E0D0A     
 39727 00007E7C 0D0A                    	db 0Dh,0Ah
 39728 00007E7E 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 39728 00007E87 6E206265206D616465-
 39728 00007E90 207570206F66206E6F-
 39728 00007E99 726D616C2063686172-
 39728 00007EA2 61637465727320616E-
 39728 00007EAB 642074686520666F6C-
 39728 00007EB4 6C6F77696E67207370-
 39728 00007EBD 656369616C20636F64-
 39728 00007EC6 65733A0D0A         
 39729 00007ECB 0D0A                    	db 0Dh,0Ah
 39730                                  MSG_1562:
 39731 00007ECD 2F                      	db 47
 39732 00007ECE 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 39732 00007ED7 28657175616C207369-
 39732 00007EE0 676E290D0A         
 39733 00007EE5 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 39733 00007EEE 28646F6C6C61722073-
 39733 00007EF7 69676E290D0A       
 39734                                  MSG_1563:
 39735 00007EFD 2A                      	db 42
 39736 00007EFE 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 39736 00007F07 7272656E742074696D-
 39736 00007F10 650D0A             
 39737 00007F13 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 39737 00007F1C 7272656E7420646174-
 39737 00007F25 650D0A             
 39738                                  MSG_1564:
 39739 00007F28 3D                      	db 61
 39740 00007F29 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 39740 00007F32 7272656E7420647269-
 39740 00007F3B 766520616E64207061-
 39740 00007F44 74680D0A           
 39741 00007F48 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 39741 00007F51 2D444F532076657273-
 39741 00007F5A 696F6E206E756D6265-
 39741 00007F63 720D0A             
 39742                                  MSG_1565:
 39743 00007F66 34                      	db 52
 39744 00007F67 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 39744 00007F70 7272656E7420647269-
 39744 00007F79 76650D0A           
 39745 00007F7D 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 39745 00007F86 28677265617465722D-
 39745 00007F8F 7468616E207369676E-
 39745 00007F98 290D0A             
 39746                                  MSG_1566:
 39747 00007F9B 2C                      	db 44
 39748 00007F9C 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 39748 00007FA5 286C6573732D746861-
 39748 00007FAE 6E207369676E290D0A 
 39749 00007FB7 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 39749 00007FC0 2870697065290D0A   
 39750                                  MSG_1567:
 39751 00007FC8 79                      	db 121
 39752 00007FC9 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 39752 00007FD2 636B73706163652028-
 39752 00007FDB 657261736573207072-
 39752 00007FE4 6576696F7573206368-
 39752 00007FED 61726163746572290D-
 39752 00007FF6 0A                 
 39753 00007FF7 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 39753 00008000 6361706520636F6465-
 39753 00008009 202841534349492063-
 39753 00008012 6F6465203237290D0A 
 39754 0000801B 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 39754 00008024 727269616765207265-
 39754 0000802D 7475726E20616E6420-
 39754 00008036 6C696E65666565640D-
 39754 0000803F 0A                 
 39755 00008040 0D0A                    	db 0Dh,0Ah
 39756                                  MSG_1568:
 39757 00008042 4C                      	db 76
 39758 00008043 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 39758 0000804C 505420776974686F75-
 39758 00008055 7420706172616D6574-
 39758 0000805E 65727320746F207265-
 39758 00008067 736574207468652070-
 39758 00008070 726F6D707420746F20-
 39758 00008079 746865206465666175-
 39758 00008082 6C742073657474696E-
 39758 0000808B 672E0D0A           
 39759                                  MSG_1580:
 39760 0000808F 47                      	db 71
 39761 00008090 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 39761 00008099 64656C657465732920-
 39761 000080A2 61206469726563746F-
 39761 000080AB 72792E0D0A         
 39762 000080B0 0D0A                    	db 0Dh,0Ah
 39763 000080B2 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 39763 000080BB 6976653A5D70617468-
 39763 000080C4 0D0A               
 39764 000080C6 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 39764 000080CF 3A5D706174680D0A   
 39765                                  MSG_1600:
 39766 000080D7 1C                      	db 28
 39767 000080D8 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 39767 000080E1 2066696C65206F7220-
 39767 000080EA 66696C65732E0D0A   
 39768 000080F2 0D0A                    	db 0Dh,0Ah
 39769                                  MSG_1601:
 39770 000080F4 53                      	db 83
 39771 000080F5 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 39771 000080FE 726976653A5D5B7061-
 39771 00008107 74685D66696C656E61-
 39771 00008110 6D65312066696C656E-
 39771 00008119 616D65320D0A       
 39772 0000811F 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 39772 00008128 653A5D5B706174685D-
 39772 00008131 66696C656E616D6531-
 39772 0000813A 2066696C656E616D65-
 39772 00008143 320D0A             
 39773 00008146 0D0A                    	db 0Dh,0Ah
 39774                                  MSG_1602:
 39775                                  	;db 77
 39776                                  	;db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 39777                                  
 39778                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39779                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:8697h
 39780                                  MSG_1602:
 39781 00008148 A0                      	db 160
 39782 00008149 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 39782 00008152 20796F752063616E6E-
 39782 0000815B 6F7420737065636966-
 39782 00008164 792061206E65772064-
 39782 0000816D 72697665206F722070-
 39782 00008176 61746820666F722079-
 39782 0000817F 6F7572206465737469-
 39782 00008188 6E6174696F6E206669-
 39782 00008191 6C652E0D0A         
 39783 00008196 0D0A                    	db 0Dh,0Ah
 39784 00008198 557365204D4F564520-     	db 'Use MOVE to rename a directory, or to move files from one directory to another.',0Dh,0Ah
 39784 000081A1 746F2072656E616D65-
 39784 000081AA 206120646972656374-
 39784 000081B3 6F72792C206F722074-
 39784 000081BC 6F206D6F7665206669-
 39784 000081C5 6C65732066726F6D20-
 39784 000081CE 6F6E65206469726563-
 39784 000081D7 746F727920746F2061-
 39784 000081E0 6E6F746865722E0D0A 
 39785                                  MSG_1620:
 39786 000081E9 57                      	db 87
 39787 000081EA 446973706C6179732C-     	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 39787 000081F3 20736574732C206F72-
 39787 000081FC 2072656D6F76657320-
 39787 00008205 4D532D444F5320656E-
 39787 0000820E 7669726F6E6D656E74-
 39787 00008217 207661726961626C65-
 39787 00008220 732E0D0A           
 39788 00008224 0D0A                    	db 0Dh,0Ah
 39789 00008226 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 39789 0000822F 61626C653D5B737472-
 39789 00008238 696E675D5D0D0A     
 39790 0000823F 0D0A                    	db 0Dh,0Ah
 39791                                  MSG_1621:
 39792 00008241 81                      	db 129
 39793 00008242 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 39793 0000824B 652020537065636966-
 39793 00008254 696573207468652065-
 39793 0000825D 6E7669726F6E6D656E-
 39793 00008266 742D7661726961626C-
 39793 0000826F 65206E616D652E0D0A 
 39794 00008278 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 39794 00008281 202020537065636966-
 39794 0000828A 696573206120736572-
 39794 00008293 696573206F66206368-
 39794 0000829C 617261637465727320-
 39794 000082A5 746F2061737369676E-
 39794 000082AE 20746F207468652076-
 39794 000082B7 61726961626C652E0D-
 39794 000082C0 0A                 
 39795 000082C1 0D0A                    	db 0Dh,0Ah
 39796                                  MSG_1622:
 39797 000082C3 4B                      	db 75
 39798 000082C4 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 39798 000082CD 776974686F75742070-
 39798 000082D6 6172616D6574657273-
 39798 000082DF 20746F20646973706C-
 39798 000082E8 617920746865206375-
 39798 000082F1 7272656E7420656E76-
 39798 000082FA 69726F6E6D656E7420-
 39798 00008303 7661726961626C6573-
 39798 0000830C 2E0D0A             
 39799                                  MSG_1640:
 39800                                  	;db 52
 39801                                  	;db 'Displays or sets the system time.',0Dh,0Ah
 39802                                  	;db 0Dh,0Ah
 39803                                  	;db 'TIME [time]',0Dh,0Ah
 39804                                  	;db 0Dh,0Ah
 39805                                  
 39806                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39807                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:885Eh)
 39808 0000830F 2D                      	db 45
 39809 00008310 446973706C61797320-     	db 'Displays or sets the time.',0Dh,0Ah
 39809 00008319 6F7220736574732074-
 39809 00008322 68652074696D652E0D-
 39809 0000832B 0A                 
 39810 0000832C 0D0A                    	db 0Dh,0Ah
 39811 0000832E 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 39811 00008337 655D0D0A           
 39812 0000833B 0D0A                    	db 0Dh,0Ah
 39813                                  MSG_1641:
 39814 0000833D 83                      	db 131
 39815 0000833E 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 39815 00008347 2077697468206E6F20-
 39815 00008350 706172616D65746572-
 39815 00008359 7320746F2064697370-
 39815 00008362 6C6179207468652063-
 39815 0000836B 757272656E74207469-
 39815 00008374 6D652073657474696E-
 39815 0000837D 6720616E6420612070-
 39815 00008386 726F6D70740D0A     
 39816 0000838D 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 39816 00008396 206F6E652E20205072-
 39816 0000839F 65737320454E544552-
 39816 000083A8 20746F206B65657020-
 39816 000083B1 7468652073616D6520-
 39816 000083BA 74696D652E0D0A     
 39817                                  MSG_1660:
 39818 000083C1 46                      	db 70
 39819 000083C2 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 39819 000083CB 74686520636F6E7465-
 39819 000083D4 6E7473206F66206120-
 39819 000083DD 746578742066696C65-
 39819 000083E6 2E0D0A             
 39820 000083E9 0D0A                    	db 0Dh,0Ah
 39821 000083EB 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 39821 000083F4 76653A5D5B70617468-
 39821 000083FD 5D66696C656E616D65-
 39821 00008406 0D0A               
 39822                                  MSG_1680:
 39823 00008408 25                      	db 37
 39824 00008409 446973706C61797320-     	db 'Displays the MS-DOS version.',0Dh,0Ah
 39824 00008412 746865204D532D444F-
 39824 0000841B 532076657273696F6E-
 39824 00008424 2E0D0A             
 39825 00008427 0D0A                    	db 0Dh,0Ah
 39826 00008429 5645520D0A              	db 'VER',0Dh,0Ah
 39827                                  MSG_1700:
 39828 0000842E B1                      	db 177
 39829 0000842F 54656C6C73204D532D-     	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 39829 00008438 444F53207768657468-
 39829 00008441 657220746F20766572-
 39829 0000844A 696679207468617420-
 39829 00008453 796F75722066696C65-
 39829 0000845C 732061726520777269-
 39829 00008465 7474656E20636F7272-
 39829 0000846E 6563746C7920746F20-
 39829 00008477 610D0A             
 39830 0000847A 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 39831 00008481 0D0A                    	db 0Dh,0Ah
 39832 00008483 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 39832 0000848C 4E207C204F46465D0D-
 39832 00008495 0A                 
 39833 00008496 0D0A                    	db 0Dh,0Ah
 39834 00008498 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 39834 000084A1 465920776974686F75-
 39834 000084AA 74206120706172616D-
 39834 000084B3 6574657220746F2064-
 39834 000084BC 6973706C6179207468-
 39834 000084C5 652063757272656E74-
 39834 000084CE 205645524946592073-
 39834 000084D7 657474696E672E0D0A 
 39835                                  MSG_1720:
 39836 000084E0 52                      	db 82
 39837 000084E1 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 39837 000084EA 746865206469736B20-
 39837 000084F3 766F6C756D65206C61-
 39837 000084FC 62656C20616E642073-
 39837 00008505 657269616C206E756D-
 39837 0000850E 6265722C2069662074-
 39837 00008517 686579206578697374-
 39837 00008520 2E0D0A             
 39838 00008523 0D0A                    	db 0Dh,0Ah
 39839 00008525 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 39839 0000852E 653A5D0D0A         
 39840                                  MSG_1740:
 39841 00008533 5B                      	db 91
 39842 00008534 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 39842 0000853D 206261746368207072-
 39842 00008546 6F6772616D2066726F-
 39842 0000854F 6D20616E6F74686572-
 39842 00008558 2E0D0A             
 39843 0000855B 0D0A                    	db 0Dh,0Ah
 39844 0000855D 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 39844 00008566 76653A5D5B70617468-
 39844 0000856F 5D66696C656E616D65-
 39844 00008578 205B62617463682D70-
 39844 00008581 6172616D6574657273-
 39844 0000858A 5D0D0A             
 39845 0000858D 0D0A                    	db 0Dh,0Ah
 39846                                  MSG_1741:
 39847 0000858F 72                      	db 114
 39848 00008590 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 39848 00008599 6172616D6574657273-
 39848 000085A2 202020537065636966-
 39848 000085AB 69657320616E792063-
 39848 000085B4 6F6D6D616E642D6C69-
 39848 000085BD 6E6520696E666F726D-
 39848 000085C6 6174696F6E20726571-
 39848 000085CF 756972656420627920-
 39848 000085D8 7468650D0A         
 39849 000085DD 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 39849 000085E6 202020202020202020-
 39849 000085EF 202020626174636820-
 39849 000085F8 70726F6772616D2E0D-
 39849 00008601 0A                 
 39850                                  MSG_1760:
 39851 00008602 4C                      	db 76
 39852 00008603 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 39852 0000860C 6F6D6D656E74732028-
 39852 00008615 72656D61726B732920-
 39852 0000861E 696E20612062617463-
 39852 00008627 682066696C65206F72-
 39852 00008630 20434F4E4649472E53-
 39852 00008639 59532E0D0A         
 39853 0000863E 0D0A                    	db 0Dh,0Ah
 39854 00008640 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 39854 00008649 656E745D0D0A       
 39855                                  MSG_1780:
 39856 0000864F 6B                      	db 107
 39857 00008650 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 39857 00008659 70726F63657373696E-
 39857 00008662 67206F662061206261-
 39857 0000866B 7463682070726F6772-
 39857 00008674 616D20616E64206469-
 39857 0000867D 73706C617973207468-
 39857 00008686 65206D657373616765-
 39857 0000868F 2022               
 39858 00008691 507265737320616E79-     	db 'Press any',0Dh,0Ah
 39858 0000869A 0D0A               
 39859 0000869C 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 39859 000086A5 6E74696E75652E2E2E-
 39859 000086AE 2E220D0A           
 39860 000086B2 0D0A                    	db 0Dh,0Ah
 39861 000086B4 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 39862                                  MSG_1800:
 39863 000086BB 4D                      	db 77
 39864 000086BC 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 39864 000086C5 6D657373616765732C-
 39864 000086CE 206F72207475726E73-
 39864 000086D7 20636F6D6D616E642D-
 39864 000086E0 6563686F696E67206F-
 39864 000086E9 6E206F72206F66662E-
 39864 000086F2 0D0A               
 39865 000086F4 0D0A                    	db 0Dh,0Ah
 39866 000086F6 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 39866 000086FF 4E207C204F46465D0D-
 39866 00008708 0A                 
 39867                                  MSG_1801:
 39868 00008709 57                      	db 87
 39869 0000870A 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 39869 00008713 6573736167655D0D0A 
 39870 0000871C 0D0A                    	db 0Dh,0Ah
 39871 0000871E 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 39871 00008727 20776974686F757420-
 39871 00008730 706172616D65746572-
 39871 00008739 7320746F2064697370-
 39871 00008742 6C6179207468652063-
 39871 0000874B 757272656E74206563-
 39871 00008754 686F2073657474696E-
 39871 0000875D 672E               
 39872 0000875F 0D0A                    	db 0Dh,0Ah
 39873                                  MSG_1820:
 39874 00008761 47                      	db 71
 39875 00008762 44697265637473204D-     	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 39875 0000876B 532D444F5320746F20-
 39875 00008774 61206C6162656C6C65-
 39875 0000877D 64206C696E6520696E-
 39875 00008786 206120626174636820-
 39875 0000878F 70726F6772616D2E0D-
 39875 00008798 0A                 
 39876 00008799 0D0A                    	db 0Dh,0Ah
 39877 0000879B 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 39877 000087A4 6C0D0A             
 39878 000087A7 0D0A                    	db 0Dh,0Ah
 39879                                  MSG_1821:
 39880 000087A9 8A                      	db 138
 39881 000087AA 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 39881 000087B3 205370656369666965-
 39881 000087BC 732061207465787420-
 39881 000087C5 737472696E67207573-
 39881 000087CE 656420696E20746865-
 39881 000087D7 206261746368207072-
 39881 000087E0 6F6772616D20617320-
 39881 000087E9 61206C6162656C2E0D-
 39881 000087F2 0A                 
 39882 000087F3 0D0A                    	db 0Dh,0Ah
 39883 000087F5 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 39883 000087FE 61206C6162656C206F-
 39883 00008807 6E2061206C696E6520-
 39883 00008810 627920697473656C66-
 39883 00008819 2C20626567696E6E69-
 39883 00008822 6E6720776974682061-
 39883 0000882B 20636F6C6F6E2E0D0A 
 39884                                  MSG_1840:
 39885 00008834 4A                      	db 74
 39886 00008835 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 39886 0000883E 686520706F73697469-
 39886 00008847 6F6E206F6620726570-
 39886 00008850 6C61636561626C6520-
 39886 00008859 706172616D65746572-
 39886 00008862 7320696E2061206261-
 39886 0000886B 7463682066696C652E-
 39886 00008874 0D0A               
 39887 00008876 0D0A                    	db 0Dh,0Ah
 39888 00008878 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 39889                                  MSG_1860:
 39890 0000887F 5A                      	db 90
 39891 00008880 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 39891 00008889 636F6E646974696F6E-
 39891 00008892 616C2070726F636573-
 39891 0000889B 73696E6720696E2062-
 39891 000088A4 617463682070726F67-
 39891 000088AD 72616D732E0D0A     
 39892 000088B4 0D0A                    	db 0Dh,0Ah
 39893 000088B6 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 39893 000088BF 4552524F524C455645-
 39893 000088C8 4C206E756D62657220-
 39893 000088D1 636F6D6D616E640D0A 
 39894                                  MSG_1861:
 39895 000088DA 46                      	db 70
 39896 000088DB 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 39896 000088E4 737472696E67313D3D-
 39896 000088ED 737472696E67322063-
 39896 000088F6 6F6D6D616E640D0A   
 39897 000088FE 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 39897 00008907 45584953542066696C-
 39897 00008910 656E616D6520636F6D-
 39897 00008919 6D616E640D0A       
 39898 0000891F 0D0A                    	db 0Dh,0Ah
 39899                                  MSG_1862:
 39900 00008921 7D                      	db 125
 39901 00008922 20204E4F5420202020-     	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 39901 0000892B 202020202020202020-
 39901 00008934 202053706563696669-
 39901 0000893D 65732074686174204D-
 39901 00008946 532D444F532073686F-
 39901 0000894F 756C64206361727279-
 39901 00008958 206F75742074686520-
 39901 00008961 636F6D6D616E64206F-
 39901 0000896A 6E6C790D0A         
 39902 0000896F 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 39902 00008978 202020202020202020-
 39902 00008981 202069662074686520-
 39902 0000898A 636F6E646974696F6E-
 39902 00008993 2069732066616C7365-
 39902 0000899C 2E0D0A             
 39903                                  MSG_1863:
 39904 0000899F A2                      	db 162
 39905 000089A0 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 39905 000089A9 56454C206E756D6265-
 39905 000089B2 722053706563696669-
 39905 000089BB 657320612074727565-
 39905 000089C4 20636F6E646974696F-
 39905 000089CD 6E2069662074686520-
 39905 000089D6 6C6173742070726F67-
 39905 000089DF 72616D2072756E2072-
 39905 000089E8 657475726E65640D0A 
 39906 000089F1 202020202020202020-     	db '                    '
 39906 000089FA 202020202020202020-
 39906 00008A03 2020               
 39907 00008A05 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 39907 00008A0E 6F646520657175616C-
 39907 00008A17 20746F206F72206772-
 39907 00008A20 656174657220746861-
 39907 00008A29 6E20746865206E756D-
 39907 00008A32 626572207370656369-
 39907 00008A3B 666965642E0D0A     
 39908                                  MSG_1864:
 39909 00008A42 66                      	db 102
 39910 00008A43 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 39910 00008A4C 202020202020202020-
 39910 00008A55 202053706563696669-
 39910 00008A5E 65732074686520636F-
 39910 00008A67 6D6D616E6420746F20-
 39910 00008A70 6361727279206F7574-
 39910 00008A79 206966207468652063-
 39910 00008A82 6F6E646974696F6E20-
 39910 00008A8B 69730D0A           
 39911 00008A8F 202020202020202020-     	db '                    met.',0Dh,0Ah
 39911 00008A98 202020202020202020-
 39911 00008AA1 20206D65742E0D0A   
 39912                                  MSG_1865:
 39913 00008AA9 6A                      	db 106
 39914 00008AAA 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 39914 00008AB3 3D3D737472696E6732-
 39914 00008ABC 202053706563696669-
 39914 00008AC5 657320612074727565-
 39914 00008ACE 20636F6E646974696F-
 39914 00008AD7 6E2069662074686520-
 39914 00008AE0 737065636966696564-
 39914 00008AE9 207465787420737472-
 39914 00008AF2 696E67730D0A       
 39915 00008AF8 202020202020202020-     	db '                    match.',0Dh,0Ah
 39915 00008B01 202020202020202020-
 39915 00008B0A 20206D617463682E0D-
 39915 00008B13 0A                 
 39916                                  MSG_1866:
 39917 00008B14 67                      	db 103
 39918 00008B15 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 39918 00008B1E 696C656E616D652020-
 39918 00008B27 202053706563696669-
 39918 00008B30 657320612074727565-
 39918 00008B39 20636F6E646974696F-
 39918 00008B42 6E2069662074686520-
 39918 00008B4B 737065636966696564-
 39918 00008B54 2066696C656E616D65-
 39918 00008B5D 0D0A               
 39919 00008B5F 202020202020202020-     	db '                    exists.',0Dh,0Ah
 39919 00008B68 202020202020202020-
 39919 00008B71 20206578697374732E-
 39919 00008B7A 0D0A               
 39920                                  MSG_1880:
 39921 00008B7C 77                      	db 119
 39922 00008B7D 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 39922 00008B86 656369666965642063-
 39922 00008B8F 6F6D6D616E6420666F-
 39922 00008B98 722065616368206669-
 39922 00008BA1 6C6520696E20612073-
 39922 00008BAA 6574206F662066696C-
 39922 00008BB3 65732E0D0A         
 39923 00008BB8 0D0A                    	db 0Dh,0Ah
 39924 00008BBA 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 39924 00008BC3 61626C6520494E2028-
 39924 00008BCC 7365742920444F2063-
 39924 00008BD5 6F6D6D616E64205B63-
 39924 00008BDE 6F6D6D616E642D7061-
 39924 00008BE7 72616D65746572735D-
 39924 00008BF0 0D0A               
 39925 00008BF2 0D0A                    	db 0Dh,0Ah
 39926                                  MSG_1881:
 39927 00008BF4 7D                      	db 125
 39928 00008BF5 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 39928 00008BFE 6C6520205370656369-
 39928 00008C07 666965732061207265-
 39928 00008C10 706C61636561626C65-
 39928 00008C19 20706172616D657465-
 39928 00008C22 722E0D0A           
 39929 00008C26 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 39929 00008C2F 202020205370656369-
 39929 00008C38 666965732061207365-
 39929 00008C41 74206F66206F6E6520-
 39929 00008C4A 6F72206D6F72652066-
 39929 00008C53 696C65732E20205769-
 39929 00008C5C 6C646361726473206D-
 39929 00008C65 617920626520757365-
 39929 00008C6E 642E0D0A           
 39930                                  MSG_1882:
 39931 00008C72 56                      	db 86
 39932 00008C73 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 39932 00008C7C 202020205370656369-
 39932 00008C85 666965732074686520-
 39932 00008C8E 636F6D6D616E642074-
 39932 00008C97 6F206361727279206F-
 39932 00008CA0 757420666F72206561-
 39932 00008CA9 63682066696C652E0D-
 39932 00008CB2 0A                 
 39933 00008CB3 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 39933 00008CBC 2D706172616D657465-
 39933 00008CC5 72730D0A           
 39934                                  MSG_1883:
 39935 00008CC9 A2                      	db 162
 39936 00008CCA 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 39936 00008CD3 202020205370656369-
 39936 00008CDC 666965732070617261-
 39936 00008CE5 6D6574657273206F72-
 39936 00008CEE 207377697463686573-
 39936 00008CF7 20666F722074686520-
 39936 00008D00 737065636966696564-
 39936 00008D09 20636F6D6D616E642E-
 39936 00008D12 0D0A               
 39937 00008D14 0D0A                    	db 0Dh,0Ah
 39938 00008D16 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 39938 00008D1F 6520464F5220636F6D-
 39938 00008D28 6D616E6420696E2061-
 39938 00008D31 206261746368207072-
 39938 00008D3A 6F6772616D2C207370-
 39938 00008D43 656369667920252576-
 39938 00008D4C 61726961626C652069-
 39938 00008D55 6E7374656164206F66-
 39938 00008D5E 0D0A               
 39939 00008D60 257661726961626C65-     	db '%variable.',0Dh,0Ah
 39939 00008D69 2E0D0A             
 39940                                  MSG_1900:
 39941 00008D6C 17                      	db 23
 39942 00008D6D 526573657276656420-     	db 'Reserved command name',0Dh,0Ah
 39942 00008D76 636F6D6D616E64206E-
 39942 00008D7F 616D650D0A         
 39943                                  MSG_1920:
 39944 00008D84 2F                      	db 47
 39945 00008D85 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 39945 00008D8E 726F6772616D20696E-
 39945 00008D97 746F20746865207570-
 39945 00008DA0 706572206D656D6F72-
 39945 00008DA9 7920617265612E0D0A 
 39946 00008DB2 0D0A                    	db 0Dh,0Ah
 39947                                  MSG_1921:
 39948                                  	;db 88
 39949                                  	;db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 39950                                  	;db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 39951                                  	;db 0Dh,0Ah
 39952                                  
 39953                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39954                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9303h
 39955 00008DB4 9D                      	db 157
 39956 00008DB5 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 39956 00008DBE 5B64726976653A5D5B-
 39956 00008DC7 706174685D66696C65-
 39956 00008DD0 6E616D65205B706172-
 39956 00008DD9 616D65746572735D0D-
 39956 00008DE2 0A                 
 39957 00008DE3 4C4F41444849474820-     	db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...] [/S]]',0Dh,0Ah
 39957 00008DEC 5B2F4C3A726567696F-
 39957 00008DF5 6E315B2C6D696E7369-
 39957 00008DFE 7A65315D5B3B726567-
 39957 00008E07 696F6E325B2C6D696E-
 39957 00008E10 73697A65325D2E2E2E-
 39957 00008E19 5D205B2F535D5D0D0A 
 39958 00008E22 202020202020202020-     	db '         [drive:][path]filename [parameters]',0Dh,0Ah
 39958 00008E2B 5B64726976653A5D5B-
 39958 00008E34 706174685D66696C65-
 39958 00008E3D 6E616D65205B706172-
 39958 00008E46 616D65746572735D0D-
 39958 00008E4F 0A                 
 39959 00008E50 0D0A                    	db 0Dh,0Ah
 39960                                  	
 39961                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:8111h)
 39962                                  ;MSG_1922: 	; MSDOS 5.0 COMMAND.COM
 39963                                  	;db 113
 39964                                  	;db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 39965                                  	;db '               program you want to load.',0Dh,0Ah
 39966                                  
 39967                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39968                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:93A1h
 39969                                  MSG_1922:
 39970 00008E52 B6                      	db 182
 39971 00008E53 2F4C3A726567696F6E-     	db '/L:region1[,minsize1][;region2[,minsize2]]...',0Dh,0Ah
 39971 00008E5C 315B2C6D696E73697A-
 39971 00008E65 65315D5B3B72656769-
 39971 00008E6E 6F6E325B2C6D696E73-
 39971 00008E77 697A65325D5D2E2E2E-
 39971 00008E80 0D0A               
 39972 00008E82 202020202020202020-     	db '            Specifies the region(s) of memory into which to load',0Dh,0Ah
 39972 00008E8B 202020537065636966-
 39972 00008E94 696573207468652072-
 39972 00008E9D 6567696F6E28732920-
 39972 00008EA6 6F66206D656D6F7279-
 39972 00008EAF 20696E746F20776869-
 39972 00008EB8 636820746F206C6F61-
 39972 00008EC1 640D0A             
 39973 00008EC4 202020202020202020-     	db '            the program.  Region1 specifies the number of the first',0Dh,0Ah
 39973 00008ECD 202020746865207072-
 39973 00008ED6 6F6772616D2E202052-
 39973 00008EDF 6567696F6E31207370-
 39973 00008EE8 656369666965732074-
 39973 00008EF1 6865206E756D626572-
 39973 00008EFA 206F66207468652066-
 39973 00008F03 697273740D0A       
 39974                                  MSG_1923:
 39975 00008F09 85                      	db 133
 39976 00008F0A 202020202020202020-     	db '            memory region; minsize1 specifies the minimum size, if',0Dh,0Ah
 39976 00008F13 2020206D656D6F7279-
 39976 00008F1C 20726567696F6E3B20-
 39976 00008F25 6D696E73697A653120-
 39976 00008F2E 737065636966696573-
 39976 00008F37 20746865206D696E69-
 39976 00008F40 6D756D2073697A652C-
 39976 00008F49 2069660D0A         
 39977 00008F4E 202020202020202020-     	db '            any, for region1.  Region2 and minsize2 specify the',0Dh
 39977 00008F57 202020616E792C2066-
 39977 00008F60 6F7220726567696F6E-
 39977 00008F69 312E2020526567696F-
 39977 00008F72 6E3220616E64206D69-
 39977 00008F7B 6E73697A6532207370-
 39977 00008F84 656369667920746865-
 39977 00008F8D 0D                 
 39978 00008F8E 0A                      	db 0Ah
 39979                                  MSG_1924:
 39980 00008F8F 7F                      	db 127
 39981 00008F90 202020202020202020-     	db '            number and minimum size of the second region, if any.',0Dh,0Ah
 39981 00008F99 2020206E756D626572-
 39981 00008FA2 20616E64206D696E69-
 39981 00008FAB 6D756D2073697A6520-
 39981 00008FB4 6F6620746865207365-
 39981 00008FBD 636F6E642072656769-
 39981 00008FC6 6F6E2C20696620616E-
 39981 00008FCF 792E0D0A           
 39982 00008FD3 202020202020202020-     	db '            You can specify as many regions as you want.',0Dh,0Ah
 39982 00008FDC 202020596F75206361-
 39982 00008FE5 6E2073706563696679-
 39982 00008FEE 206173206D616E7920-
 39982 00008FF7 726567696F6E732061-
 39982 00009000 7320796F752077616E-
 39982 00009009 742E0D0A           
 39983 0000900D 0D0A                    	db 0Dh,0Ah
 39984                                  MSG_1925:
 39985 0000900F 83                      	db 131
 39986 00009010 2F5320202020202020-     	db '/S          Shrinks a UMB to its minimum size while the program',0Dh,0Ah
 39986 00009019 202020536872696E6B-
 39986 00009022 73206120554D422074-
 39986 0000902B 6F20697473206D696E-
 39986 00009034 696D756D2073697A65-
 39986 0000903D 207768696C65207468-
 39986 00009046 652070726F6772616D-
 39986 0000904F 0D0A               
 39987 00009051 202020202020202020-     	db '            is loading.  /S is normally used only by MemMaker.',0Dh,0Ah
 39987 0000905A 2020206973206C6F61-
 39987 00009063 64696E672E20202F53-
 39987 0000906C 206973206E6F726D61-
 39987 00009075 6C6C79207573656420-
 39987 0000907E 6F6E6C79206279204D-
 39987 00009087 656D4D616B65722E0D-
 39987 00009090 0A                 
 39988 00009091 0D0A                    	db 0Dh,0Ah
 39989                                  MSG_1926:
 39990 00009093 57                      	db 87
 39991 00009094 5B64726976653A5D5B-     	db '[drive:][path]filename',0Dh,0Ah
 39991 0000909D 706174685D66696C65-
 39991 000090A6 6E616D650D0A       
 39992 000090AC 202020202020202020-     	db '            Specifies the location and name of the program.',0Dh,0Ah
 39992 000090B5 202020537065636966-
 39992 000090BE 69657320746865206C-
 39992 000090C7 6F636174696F6E2061-
 39992 000090D0 6E64206E616D65206F-
 39992 000090D9 66207468652070726F-
 39992 000090E2 6772616D2E0D0A     
 39993 000090E9 0D0A                    	db 0Dh,0Ah
 39994                                  
 39995                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39996                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:963Ah
 39997                                  MSG_1927:
 39998 000090EB 5A                      	db 90
 39999 000090EC 706172616D65746572-     	db 'parameters  Specifies any command-line information required by',0Dh,0Ah
 39999 000090F5 732020537065636966-
 39999 000090FE 69657320616E792063-
 39999 00009107 6F6D6D616E642D6C69-
 39999 00009110 6E6520696E666F726D-
 39999 00009119 6174696F6E20726571-
 39999 00009122 75697265642062790D-
 39999 0000912B 0A                 
 40000 0000912C 202020202020202020-     	db '            the program.',0Dh,0Ah
 40000 00009135 202020746865207072-
 40000 0000913E 6F6772616D2E0D0A   
 40001                                  
 40002                                  ; ---------------------------------------------------------------------------
 40003                                  
 40004                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40005                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 40006                                  
 40007                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40008                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9695h
 40009                                  
 40010                                  ; --------------- S U B R O U T I N E ---------------------------------------
 40011                                  
 40012                                  $M_CLS_3:
 40013 00009146 0E                      	push	cs		; CLASS_F
 40014 00009147 07                      	pop	es
 40015 00009148 8D3E[E163]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 40016                                  	; 15/04/2023
 40017                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 40018                                  	; 17/06/2023
 40019                                  	;add	cx,11627	; ADD CX,$-$M_CLASS_3_STRUC ; 969Bh-6930h
 40020                                  	; 06/08/2024
 40021 0000914C 81C16B2D                	add	cx,$-$M_CLASS_3_STRUC
 40022 00009150 C3                      	retn
 40023                                  
 40024                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40025                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 40026                                  
 40027                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40028                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96A0h
 40029                                  
 40030                                  ; ---------------------------------------------------------------------------
 40031                                  ; Class 1 messages
 40032                                  ; ---------------------------------------------------------------------------
 40033                                  	
 40034                                  $M_CLASS_1_STRUC:
 40035 00009151 01                      	db 1			; $M_CLASS_ID
 40036                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 40037                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40038 00009152 0616                    	dw 1606h  ; MSDOS 6.22 COMMAND.COM
 40039 00009154 04                      	db 4			; Class_1_MessageCount
 40040                                  $M_ID_1_1:
 40041 00009155 0200                    	dw 2			; Message Number = 2
 40042 00009157 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 40043                                  $M_ID_1_2:
 40044 00009159 0300                    	dw 3			; Message Number = 3
 40045 0000915B 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 40046                                  $M_ID_1_3:
 40047 0000915D 0800                    	dw 8			; Message Number = 8
 40048 0000915F 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 40049                                  $M_ID_1_4:
 40050 00009161 FFFF                    	dw 0FFFFh		; Message Number = -1
 40051 00009163 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 40052                                  
 40053                                  ; ---------------------------------------------------------------------------
 40054                                  
 40055                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 40056                                  EXTEND2:
 40057 00009165 0E                      	db 14
 40058 00009166 46696C65206E6F7420-     	db 'File not found'
 40058 0000916F 666F756E64         
 40059                                  EXTEND3:
 40060 00009174 0E                      	db 14
 40061 00009175 50617468206E6F7420-     	db 'Path not found'
 40061 0000917E 666F756E64         
 40062                                  EXTEND8:
 40063 00009183 13                      	db 19
 40064 00009184 496E73756666696369-     	db 'Insufficient memory'
 40064 0000918D 656E74206D656D6F72-
 40064 00009196 79                 
 40065                                  EXTEND999:
 40066 00009197 11                      	db 17
 40067 00009198 457874656E64656420-     	db 'Extended Error %1'
 40067 000091A1 4572726F72202531   
 40068                                  
 40069                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40070                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 40071                                  
 40072                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40073                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96F8h
 40074                                  
 40075                                  ; --------------- S U B R O U T I N E ---------------------------------------
 40076                                  $M_MSGSERV_1:
 40077 000091A9 0E                      	push	cs
 40078 000091AA 07                      	pop	es
 40079 000091AB 8D3E[5191]              	lea	di,$M_CLASS_1_STRUC
 40080                                  	; 15/04/2023
 40081                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 40082                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 40083                                  				; 96FEh-96A0h = 5Eh = 94
 40084 000091AF C3                      	retn
 40085                                  
 40086                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40087                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 40088                                  
 40089                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40090                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9702h
 40091                                  
 40092                                  ; ---------------------------------------------------------------------------
 40093                                  ; Class 2 messages
 40094                                  ; ---------------------------------------------------------------------------
 40095                                  	
 40096                                  $M_CLASS_2_STRUC:
 40097 000091B0 02                      	db 2			; $M_CLASS_ID
 40098                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 40099                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40100 000091B1 0616                    	dw 1606h  ; MSDOS 6.22 COMMAND.COM
 40101 000091B3 01                      	db 1			; Class_2_MessageCount
 40102                                  $M_ID_2_1:
 40103 000091B4 FFFF                    	dw 0FFFFh		; Message Number = -1
 40104 000091B6 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 40105                                  ; ---------------------------------------------------------------------------
 40106                                  
 40107                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 40108                                  PARSE999:
 40109 000091B8 0E                      	db 14
 40110 000091B9 506172736520457272-     	db 'Parse Error %1'
 40110 000091C2 6F72202531         
 40111                                  
 40112                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40113                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 40114                                  
 40115                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40116                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9719h
 40117                                  
 40118                                  ; --------------- S U B R O U T I N E ---------------------------------------
 40119                                  $M_MSGSERV_2:
 40120 000091C7 0E                      	push	cs
 40121 000091C8 07                      	pop	es
 40122 000091C9 8D3E[B091]              	lea	di,$M_CLASS_2_STRUC
 40123                                  	; 15/04/2023
 40124                                  	;add	cx,29		; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 40125                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 40126                                  				; 971Fh-9702h = 1Dh = 29
 40127 000091CD C3                      	retn
 40128                                  
 40129                                  ;============================================================================
 40130                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 40131                                  ;============================================================================
 40132                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40133                                  ; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40134                                  
 40135                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 40136                                  	
 40137                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9723h
 40138                                  
 40139                                  ;****************************************************
 40140                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 40141                                  ;****************************************************
 40142                                  
 40143                                  msg_disp_class:
 40144 000091CE FF                      	db	util_msg_class ; 0FFh
 40145                                  msg_cont_flag:
 40146 000091CF 00                      	db	no_cont_flag ; 0
 40147                                  
 40148                                  ;  extended error string output
 40149                                  extend_buf_ptr:
 40150 000091D0 0000                    	dw	0			;AN000;set to no message
 40151                                  extend_buf_sub:
 40152 000091D2 00                      	db	0			;AN000;set to no substitutions
 40153 000091D3 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40154 000091D4 00                      	db	0			;AN000;reserved
 40155                                  extend_buf_off:
 40156 000091D5 [91A0]                  	dw	string_ptr_2		;AN000;offset of arg
 40157                                  extend_buf_seg:
 40158 000091D7 0000                    	dw	0			;AN000;segment of arg
 40159 000091D9 00                      	db	0			;AN000;first subst
 40160 000091DA 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40161 000091DB 80                      	db	128			;AN000;maximum width
 40162 000091DC 00                      	db	0			;AN000;minimum width
 40163 000091DD 20                      	db	blank ; 20h		;AN000;pad character
 40164                                  
 40165                                  ;  "Duplicate file name or file not found"
 40166                                  RENERR_PTR:
 40167 000091DE EA03                    	dw	1002			;AN000;message number
 40168 000091E0 00                      	db	no_subst ; 0		;AN000;number of subst
 40169                                  
 40170                                  ;  "Invalid path or file name"
 40171                                  BADCPMES_PTR:
 40172 000091E1 EB03                    	dw	1003			;AN000;message number
 40173 000091E3 00                      	db	no_subst ; 0		;AN000;number of subst
 40174                                  
 40175                                  ;  "Insufficient disk space"
 40176                                  NOSPACE_PTR:
 40177 000091E4 EC03                    	dw	1004			;AN000;message number
 40178 000091E6 00                      	db	no_subst ; 0		;AN000;number of subst
 40179                                  
 40180                                  ;  "Out of environment space"
 40181                                  ENVERR_PTR:
 40182 000091E7 EF03                    	dw	1007			;AN000;message number
 40183 000091E9 00                      	db	no_subst ; 0		;AN000;number of subst
 40184                                  
 40185                                  ;  "File creation error"
 40186                                  FULLDIR_PTR:
 40187 000091EA F003                    	dw	1008			;AN000;message number
 40188 000091EC 00                      	db	no_subst ; 0		;AN000;number of subst
 40189                                  
 40190                                  ;  "Batch file missing",13,10
 40191                                  BADBAT_PTR:
 40192 000091ED F103                    	dw	1009			;AN000;message number
 40193 000091EF 00                      	db	no_subst ; 0		;AN000;number of subst
 40194                                  
 40195                                  ;  "Insert disk with batch file",13,10
 40196                                  NEEDBAT_PTR:
 40197 000091F0 F203                    	dw	1010			;AN000;message number
 40198 000091F2 00                      	db	no_subst ; 0		;AN000;number of subst
 40199                                  
 40200                                  ;  "Bad command or file name",13,10
 40201                                  BADNAM_PTR:
 40202 000091F3 F303                    	dw	1011			;AN000;message number
 40203 000091F5 00                      	db	no_subst ; 0		;AN000;number of subst
 40204                                  
 40205                                  ;  "Access denied",13,10
 40206                                  ACCDEN_PTR:
 40207 000091F6 F603                    	dw	1014			;AN000;message number
 40208 000091F8 00                      	db	no_subst ; 0		;AN000;number of subst
 40209                                  
 40210                                  ;  "File cannot be copied onto itself",13,10
 40211                                  OVERWR_PTR:
 40212 000091F9 F703                    	dw	1015			;AN000;message number
 40213 000091FB 00                      	db	no_subst ; 0		;AN000;number of subst
 40214                                  
 40215                                  ;  "Content of destination lost before copy",13,10
 40216                                  LOSTERR_PTR:
 40217 000091FC F803                    	dw	1016			;AN000;message number
 40218 000091FE 00                      	db	no_subst ; 0		;AN000;number of subst
 40219                                  
 40220                                  ;  "Invalid filename or file not found",13,10
 40221                                  INORNOT_PTR:
 40222 000091FF F903                    	dw	1017			;AN000;message number
 40223 00009201 00                      	db	no_subst		;AN000;number of subst
 40224                                  
 40225                                  ;  "%1 File(s) copied",13,10
 40226                                  copied_ptr:
 40227 00009202 FA03                    	dw	1018			;AN000;message number
 40228 00009204 01                      	db	1			;AN000;number of subst
 40229 00009205 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40230 00009206 00                      	db	0			;AN000;reserved
 40231 00009207 [93A0]                  	dw	Copy_num		;AN000;offset of arg
 40232 00009209 0000                    	dw	0			;AN000;segment of arg
 40233 0000920B 01                      	db	1			;AN000;first subst
 40234 0000920C A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40235                                  					;AN000;binary to decimal
 40236 0000920D 09                      	db	9			;AN000;maximum width
 40237 0000920E 09                      	db	9			;AN000;minimum width
 40238 0000920F 20                      	db	blank ; 20h		;AN000;pad character
 40239                                  
 40240                                  ;  "%1 File(s) "
 40241                                  dirmes_ptr:
 40242 00009210 FB03                    	dw	1019			;AN000;message number
 40243 00009212 01                      	db	1			;AN000;number of subst
 40244 00009213 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40245 00009214 00                      	db	0			;AN000;reserved
 40246 00009215 [96A0]                  	dw	Dir_Num			;AN000;offset of arg
 40247 00009217 0000                    	dw	0			;AN000;segment of arg
 40248 00009219 01                      	db	1			;AN000;first subst
 40249                                  	; MSDOS 5.0 COMMAND.COM
 40250                                  	;db	0A1h ; Right_Align+Unsgn_Bin_Word
 40251                                  	; 17/06/2023
 40252                                  screen_f_3:
 40253 0000921A E1                      	db	0E1h ; MSDOS 6.22 COMMAND.COM
 40254                                  					;AN000;binary to decimal
 40255 0000921B 09                      	db	9			;AN000;maximum width
 40256 0000921C 09                      	db	9			;AN000;minimum width
 40257 0000921D 20                      	db	blank ; 20h		;AN000;pad character
 40258                                  
 40259                                  ;  "%1 bytes free",13,10
 40260                                  bytmes_ptr:
 40261 0000921E FC03                    	dw	1020			;AN000;message number
 40262 00009220 01                      	db	1			;AN000;number of subst
 40263 00009221 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40264 00009222 00                      	db	0			;AN000;reserved
 40265 00009223 [9AA0]                  	dw	Bytes_Free		;AN000;offset of arg
 40266 00009225 0000                    	dw	0			;AN000;segment of arg
 40267 00009227 01                      	db	1			;AN000;first subst
 40268                                  	; MSDOS 5.0 COMMAND.COM
 40269                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40270                                  	; 17/06/2023
 40271                                  screen_f_6:
 40272 00009228 F1                      	db	0F1h
 40273                                  					;AN000;long binary to decimal
 40274                                  	; MSDOS 5.0 COMMAND.COM
 40275                                  	;db	28			;AN000;maximum width
 40276                                  	;db	28			;AN000;minimum width
 40277                                  	; 17/06/2023
 40278                                  screen_f_7:
 40279 00009229 20                      	db	32 ; MSDOS 6.22 COMMAND.COM
 40280 0000922A 20                      	db	32
 40281                                  
 40282 0000922B 20                      	db	blank ; 20h		;AN000;pad character
 40283                                  
 40284                                  ;  "Invalid drive specification",13,10
 40285                                  baddrv_ptr:
 40286 0000922C FD03                    	dw	1021			;AN000;message number
 40287 0000922E 00                      	db	no_subst ; 0		;AN000;number of subst
 40288                                  
 40289                                  ;  "Code page %1 not prepared for system",13,10
 40290                                  cp_not_set_ptr:
 40291 0000922F FE03                    	dw	1022			;AN000;message number
 40292 00009231 01                      	db	1			;AN000;number of subst
 40293 00009232 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40294 00009233 00                      	db	0			;AN000;reserved
 40295 00009234 [8BA0]                  	dw	system_cpage		;AN000;offset of arg
 40296 00009236 0000                    	dw	0			;AN000;segment of arg
 40297 00009238 01                      	db	1			;AN000;first subst
 40298 00009239 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40299                                  					;AN000;binary to decimal
 40300 0000923A 05                      	db	5			;AN000;maximum width
 40301 0000923B 01                      	db	1			;AN000;minimum width
 40302 0000923C 20                      	db	blank ; 20h		;AN000;pad character
 40303                                  
 40304                                  ;  "Code page %1 not prepared for all devices",13,10
 40305                                  cp_not_all_ptr:
 40306 0000923D FF03                    	dw	1023			;AN000;message number
 40307 0000923F 01                      	db	1			;AN000;number of subst
 40308 00009240 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40309 00009241 00                      	db	0			;AN000;reserved
 40310 00009242 [8BA0]                  	dw	system_cpage		;AN000;offset of arg
 40311 00009244 0000                    	dw	0			;AN000;segment of arg
 40312 00009246 01                      	db	1			;AN000;first subst
 40313 00009247 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40314                                  					;AN000;binary to decimal
 40315 00009248 05                      	db	5			;AN000;maximum width
 40316 00009249 01                      	db	1			;AN000;minimum width
 40317 0000924A 20                      	db	blank ; 20h		;AN000;pad character
 40318                                  
 40319                                  ;  "Active code page: %1",13,10
 40320                                  cp_active_ptr:
 40321 0000924B 0004                    	dw	1024			;AN000;message number
 40322 0000924D 01                      	db	1			;AN000;number of subst
 40323 0000924E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40324 0000924F 00                      	db	0			;AN000;reserved
 40325 00009250 [8BA0]                  	dw	system_cpage		;AN000;offset of arg
 40326 00009252 0000                    	dw	0			;AN000;segment of arg
 40327 00009254 01                      	db	1			;AN000;first subst
 40328 00009255 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40329                                  					;AN000;binary to decimal
 40330 00009256 05                      	db	5			;AN000;maximum width
 40331 00009257 01                      	db	1			;AN000;minimum width
 40332 00009258 20                      	db	blank ; 20h		;AN000;pad character
 40333                                  
 40334                                  ;  "NLSFUNC not installed",13,10
 40335                                  NLSFUNC_PTR:
 40336 00009259 0104                    	dw	1025			;AN000;message number
 40337 0000925B 00                      	db	no_subst ; 0		;AN000;number of subst
 40338                                  
 40339                                  ;  "Invalid code page",13,10
 40340                                  INV_CODE_PAGE:
 40341 0000925C 0204                    	dw	1026			;AN000;message number
 40342 0000925E 00                      	db	no_subst ; 0		;AN000;number of subst
 40343                                  
 40344                                  ;  "Current drive is no longer valid"
 40345                                  BADCURDRV:
 40346 0000925F 0304                    	dw	1027			;AN000;message number
 40347 00009261 00                      	db	no_subst ; 0		;AN000;number of subst
 40348                                  
 40349                                  ;  "Press any key to continue"
 40350                                  PAUSEMES_PTR:
 40351 00009262 0404                    	dw	1028			;AN000;message number
 40352 00009264 00                      	db	no_subst ; 0		;AN000;number of subst
 40353                                  
 40354                                  ;  "Label not found",13,10
 40355                                  BADLAB_PTR:
 40356 00009265 0504                    	dw	1029			;AN000;message number
 40357 00009267 00                      	db	no_subst ; 0		;AN000;number of subst
 40358                                  
 40359                                  ;  "Syntax error",13,10
 40360                                  SYNTMES_PTR:
 40361 00009268 0604                    	dw	1030			;AN000;message number
 40362 0000926A 00                      	db	no_subst ; 0		;AN000;number of subst
 40363                                  
 40364                                  ;  "Invalid date",13,10
 40365                                  BADDAT_PTR:
 40366 0000926B 0704                    	dw	1031			;AN000;message number
 40367 0000926D 00                      	db	no_subst ; 0		;AN000;number of subst
 40368                                  
 40369                                  ;  "Current date is %1 %2",13,10
 40370                                  CurDat_Ptr:
 40371 0000926E 0804                    	dw	1032			;AN000;message number
 40372 00009270 02                      	db	2			;AN000;number of subst
 40373 00009271 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40374 00009272 00                      	db	0			;AN000;reserved
 40375 00009273 [87A7]                  	dw	Arg_Buf			;AN000;offset of arg
 40376 00009275 0000                    	dw	0			;AN000;segment of arg
 40377 00009277 01                      	db	1			;AN000;first subst
 40378 00009278 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40379 00009279 03                      	db	3			;AN000;maximum width
 40380 0000927A 03                      	db	3			;AN000;minimum width
 40381 0000927B 20                       	db	blank ; 20h		;AN000;pad character
 40382 0000927C 0B                      	db	parm_block_size 	;AN000;size of sublist
 40383 0000927D 00                      	db	0			;AN000;reserved
 40384                                  CurDat_yr:
 40385 0000927E 0000                    	dw	0			;AN000;year
 40386                                  CurDat_mo_day:
 40387 00009280 0000                    	dw	0			;AN000;month,day
 40388 00009282 02                      	db	2			;AN000;second subst
 40389 00009283 34                      	db	34h ; DATE_MDY_4	;AN000;date
 40390 00009284 0A                      	db	10			;AN000;maximum width
 40391 00009285 0A                      	db	10			;AN000;minimum width
 40392 00009286 20                      	db	blank ; 20h		;AN000;pad character
 40393                                  
 40394                                  ;  "SunMonTueWedThuFriSat"
 40395                                  WeekTab:
 40396 00009287 0904                    	dw	1033			;AN000;message number
 40397 00009289 00                      	db	no_subst ; 0		;AN000;number of subst
 40398                                  
 40399                                  ;  "Enter new date (%1):"
 40400                                  
 40401                                  NewDat_Ptr:
 40402 0000928A 0A04                    	dw	1034			;AN000;message number
 40403 0000928C 01                      	db	1			;AN000;number of subst
 40404 0000928D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40405 0000928E 00                      	db	0			;AN000;reserved
 40406                                  NewDat_Format:
 40407 0000928F 0000                    	dw	0			;AN000;offset of replacement
 40408 00009291 0000                    	dw	0			;AN000;segment of arg
 40409 00009293 01                      	db	1			;AN000;first subst
 40410 00009294 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40411 00009295 08                      	db	8			;AN000;maximum width
 40412 00009296 08                      	db	8			;AN000;minimum width
 40413 00009297 20                      	db	blank ; 20h		;AN000;pad character
 40414                                  
 40415                                  ;  "Invalid time",13,10
 40416                                  
 40417                                  BadTim_Ptr:
 40418 00009298 0B04                    	dw	1035			;AN000;message number
 40419 0000929A 00                      	db	no_subst ; 0		;AN000;number of subst
 40420                                  
 40421                                  ;  "Current time is %1",13,10
 40422                                  CurTim_Ptr:
 40423 0000929B 0C04                    	dw	1036			;AN000;message number
 40424 0000929D 01                      	db	1			;AN000;number of subst
 40425 0000929E 0B                      	db	parm_block_size 	;AN000;size of sublist
 40426 0000929F 00                      	db	0			;AN000;reserved
 40427                                  CurTim_hr_min:
 40428 000092A0 0000                    	dw	0			;AN000;hours,minutes
 40429                                  CurTim_Sec_hn:
 40430 000092A2 0000                    	dw	0			;AN000;seconds,hundredths
 40431 000092A4 01                      	db	1			;AN000;first subst
 40432 000092A5 A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 40433                                  					;AC059;time
 40434 000092A6 0C                      	db	12			;AC059;maximum width
 40435 000092A7 0C                      	db	12			;AC059;minimum width
 40436 000092A8 20                      	db	blank ; 20h		;AN000;pad character
 40437                                  
 40438                                  ;  "Enter new time:"
 40439                                  NewTim_Ptr:
 40440 000092A9 0D04                    	dw	1037			;AN000;message number
 40441 000092AB 00                      	db	no_subst ; 0		;AN000;number of subst
 40442                                  
 40443                                  ;  ",    Delete (Y/N)?",13,10
 40444                                  Del_Y_N_Ptr:
 40445 000092AC 0E04                    	dw	1038			;AN000;message number
 40446 000092AE 00                      	db	no_subst ; 0		;AN000;number of subst
 40447                                  
 40448                                  ;  "All files in directory will be deleted!",13,10
 40449                                  ;  "Are you sure (Y/N)?",13,10
 40450                                  SureMes_Ptr:
 40451 000092AF 0F04                    	dw	1039			;AN000;message number
 40452 000092B1 00                      	db	no_subst ; 0		;AN000;number of subst
 40453                                  
 40454                                  ;  "Microsoft DOS Version %1.%2",13,10
 40455                                  VerMes_Ptr:
 40456 000092B2 1004                    	dw	1040			;AN000;message number
 40457 000092B4 02                      	db	2			;AN000;number of subst
 40458 000092B5 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40459 000092B6 00                      	db	0			;AN000;reserved
 40460 000092B7 [9EA0]                  	dw	Major_Ver_Num		;AN000;offset of arg
 40461 000092B9 0000                    	dw	0			;AN000;segment of arg
 40462 000092BB 01                      	db	1			;AN000;first subst
 40463 000092BC A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40464                                  					;AN000;binary to decimal
 40465 000092BD 01                      	db	1			;AN000;maximum width
 40466 000092BE 01                      	db	1			;AN000;minimum width
 40467 000092BF 20                      	db	blank ; 20h		;AN000;pad character
 40468 000092C0 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40469 000092C1 00                      	db	0			;AN000;reserved
 40470 000092C2 [A0A0]                  	dw	Minor_Ver_Num	;AN000;offset of arg
 40471 000092C4 0000                    	dw	0			;AN000;segment of arg
 40472 000092C6 02                      	db	2			;AN000;second subst
 40473 000092C7 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40474                                  					;AN000;binary to decimal
 40475 000092C8 02                      	db	2			;AN000;maximum width
 40476 000092C9 02                      	db	2			;AN000;minimum width
 40477 000092CA 30                      	db	'0' ; 30h		;AN000;pad character
 40478                                  
 40479                                  ;  "Volume in drive %1 has no label",13,10
 40480                                  VolMes_Ptr_2:
 40481 000092CB 1104                    	dw	1041			;AN000;message number
 40482 000092CD 01                      	db	1			;AN000;number of subst
 40483 000092CE 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 40484 000092CF 00                      	db	0			;AN000;reserved
 40485 000092D0 [A4A0]                  	dw	vol_drv			;AN000;offset of drive
 40486 000092D2 0000                    	dw	0			;AN000;segment of arg
 40487 000092D4 01                      	db	1			;AN000;first subst
 40488 000092D5 00                      	db	0 ; Char_field_Char 	;AN000;character
 40489 000092D6 80                      	db	128			;AN000;maximum width
 40490 000092D7 01                      	db	1			;AN000;minimum width
 40491 000092D8 20                      	db	blank ; 20h		;AN000;pad character
 40492                                  
 40493                                  ;  "Volume in drive %1 is %2",13,10
 40494                                  VolMes_Ptr:
 40495 000092D9 1204                    	dw	1042			;AN000;message number
 40496 000092DB 02                      	db	2			;AN000;number of subst
 40497 000092DC 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40498 000092DD 00                      	db	0			;AN000;reserved
 40499 000092DE [A4A0]                  	dw	vol_drv			;AN000;offset of drive
 40500 000092E0 0000                    	dw	0			;AN000;segment of arg
 40501 000092E2 01                      	db	1			;AN000;first subst
 40502 000092E3 00                      	db	00000000b		;AN000;character
 40503 000092E4 80                      	db	128			;AN000;maximum width
 40504 000092E5 01                      	db	1			;AN000;minimum width
 40505 000092E6 20                      	db	blank ; 20h		;AN000;pad character
 40506 000092E7 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40507 000092E8 00                      	db	0			;AN000;reserved
 40508 000092E9 [5B9F]                  	dw	CHARBUF			;AN000;offset of string
 40509 000092EB 0000                    	dw	0			;AN000;segment of arg
 40510 000092ED 02                      	db	2			;AN000;second subst
 40511 000092EE 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40512 000092EF 80                      	db	128			;AN000;maximum width
 40513 000092F0 01                      	db	1			;AN000;minimum width
 40514 000092F1 20                      	db	blank ; 20h		;AN000;pad character
 40515                                  
 40516                                  ;  "Volume Serial Number is %1-%2",13,10
 40517                                  VolSerMes_Ptr:
 40518 000092F2 1304                    	dw	1043			;AN000;message number
 40519 000092F4 02                      	db	2			;AN000;number of subst
 40520 000092F5 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 40521 000092F6 00                      	db	0			;AN000;reserved
 40522 000092F7 [0EA2]                  	dw	vol_serial+2		;AN000;offset of serial
 40523 000092F9 0000                    	dw	0			;AN000;segment of arg
 40524 000092FB 01                      	db	1			;AN000;first subst
 40525 000092FC A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 40526                                  					;AN000;binary to hex
 40527 000092FD 04                      	db	4			;AN000;maximum width
 40528 000092FE 04                      	db	4			;AN000;minimum width
 40529 000092FF 30                      	db	'0' ; 30h		;AN000;pad character
 40530 00009300 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40531 00009301 00                      	db	0			;AN000;reserved
 40532 00009302 [0CA2]                  	dw	vol_serial		;AN000;offset of serial
 40533 00009304 0000                    	dw	0			;AN000;segment of arg
 40534 00009306 02                      	db	2			;AN000;second subst
 40535 00009307 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 40536                                  					;AN000;binary to hex
 40537 00009308 04                      	db	4			;AN000;maximum width
 40538 00009309 04                      	db	4			;AN000;minimum width
 40539 0000930A 30                      	db	'0' ; 30h		;AN000;pad character
 40540                                  
 40541                                  ;  "Invalid directory",13,10
 40542                                  badcd_ptr:
 40543 0000930B 1404                    	dw	1044			;AN000;message number
 40544 0000930D 00                      	db	no_subst ; 0		;AN000;number of subst
 40545                                  
 40546                                  ;  "Unable to create directory",13,10
 40547                                  badmkd_ptr:
 40548 0000930E 1504                    	dw	1045			;AN000;message number
 40549 00009310 00                      	db	no_subst ; 0		;AN000;number of subst
 40550                                  
 40551                                  ;  "Invalid path, not directory,",13,10
 40552                                  ;  "or directory not empty",13,10
 40553                                  badrmd_ptr:
 40554 00009311 1604                    	dw	1046			;AN000;message number
 40555 00009313 00                      	db	no_subst ; 0		;AN000;number of subst
 40556                                  
 40557                                  ;  "Must specify ON or OFF",13,10
 40558                                  bad_on_off_ptr:
 40559 00009314 1704                    	dw	1047			;AN000;message number
 40560 00009316 00                      	db	no_subst ; 0		;AN000;number of subst
 40561                                  
 40562                                  ;  "Directory of %1",13,10
 40563                                  dirhead_ptr:
 40564 00009317 1804                    	dw	1048			;AN000;message number
 40565 00009319 01                      	db	1			;AN000;number of subst
 40566 0000931A 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40567 0000931B 00                      	db	0			;AN000;reserved
 40568 0000931C [2AA0]                  	dw	BWDBUF			;AN000;offset of arg
 40569 0000931E 0000                    	dw	0			;AN000;segment of arg
 40570 00009320 01                      	db	1			;AN000;first subst
 40571 00009321 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40572 00009322 80                      	db	128			;AN000;maximum width
 40573 00009323 00                      	db	0			;AN000;minimum width
 40574 00009324 20                      	db	blank ; 20h		;AN000;pad character
 40575                                  
 40576                                  ;  "No Path",13,10
 40577                                  NULLPATH_PTR:
 40578 00009325 1904                    	dw	1049			;AN000;message number
 40579 00009327 00                      	db	no_subst ; 0		;AN000;number of subst
 40580                                  
 40581                                  ;  "Invalid drive in search path",13,10
 40582                                  BADPMES_PTR:
 40583 00009328 1A04                    	dw	1050			;AN000;message number
 40584 0000932A 00                      	db	no_subst ; 0		;AN000;number of subst
 40585                                  
 40586                                  ;  "Invalid device",13,10
 40587                                  BADDEV_PTR:
 40588 0000932B 1B04                    	dw	1051			;AN000;message number
 40589 0000932D 00                      	db	no_subst ; 0		;AN000;number of subst
 40590                                  
 40591                                  ;  "FOR cannot be nested",13,10
 40592                                  FORNESTMES_PTR:
 40593 0000932E 1C04                    	dw	1052			;AN000;message number
 40594 00009330 00                      	db	no_subst ; 0		;AN000;number of subst
 40595                                  
 40596                                  ;  "Intermediate file error during pipe",13,10
 40597                                  PIPEEMES_PTR:
 40598 00009331 1D04                    	dw	1053			;AN000;message number
 40599 00009333 00                      	db	no_subst ; 0		;AN000;number of subst
 40600                                  
 40601                                  ;  "Cannot do binary reads from a device",13,10
 40602                                  INBDEV_PTR:
 40603 00009334 1E04                    	dw	1054			;AN000;message number
 40604 00009336 00                      	db	no_subst ; 0		;AN000;number of subst
 40605                                  
 40606                                  ;  "BREAK is %1",13,10
 40607                                  CtrlcMes_Ptr:
 40608 00009337 1F04                    	dw	1055			;AN000;message number
 40609 00009339 01                      	db	1			;AN000;number of subst
 40610 0000933A 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40611 0000933B 00                      	db	0			;AN000;reserved
 40612 0000933C 0000                    	dw	0			;AN000;offset of on/off (new)
 40613 0000933E 0000                    	dw	0			;AN000;segment of arg
 40614 00009340 01                      	db	1			;AN000;first subst
 40615 00009341 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40616 00009342 80                      	db	128			;AN000;maximum width
 40617 00009343 01                      	db	1			;AN000;minimum width
 40618 00009344 20                      	db	blank ; 20h		;AN000;pad character
 40619                                  
 40620                                  ;  "VERIFY is %1",13,10
 40621                                  VeriMes_Ptr:
 40622 00009345 2004                    	dw	1056			;AN000;message number
 40623 00009347 01                      	db	1			;AN000;number of subst
 40624 00009348 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40625 00009349 00                      	db	0			;AN000;reserved
 40626 0000934A 0000                    	dw	0			;AN000;offset of on/off (new)
 40627 0000934C 0000                    	dw	0			;AN000;segment of arg
 40628 0000934E 01                      	db	1			;AN000;first subst
 40629 0000934F 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40630 00009350 80                      	db	128			;AN000;maximum width
 40631 00009351 01                      	db	1			;AN000;minimum width
 40632 00009352 20                      	db	blank ; 20h		;AN000;pad character
 40633                                  
 40634                                  ;  "ECHO is %1",13,10
 40635                                  EchoMes_Ptr:
 40636 00009353 2104                    	dw	1057			;AN000;message number
 40637 00009355 01                      	db	1			;AN000;number of subst
 40638 00009356 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40639 00009357 00                      	db	0			;AN000;reserved
 40640 00009358 0000                    	dw	0			;AN000;offset of on/off (new)
 40641 0000935A 0000                    	dw	0			;AN000;segment of arg
 40642 0000935C 01                      	db	1			;AN000;first subst
 40643 0000935D 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40644 0000935E 80                      	db	128			;AN000;maximum width
 40645 0000935F 01                      	db	1			;AN000;minimum width
 40646 00009360 20                      	db	blank ; 20h		;AN000;pad character
 40647                                  
 40648                                  ;  "off"
 40649                                  OFFMES_PTR:
 40650 00009361 2304                    	dw	1059			;AN000;message number
 40651 00009363 00                      	db	no_subst		;AN000;number of subst
 40652                                  
 40653                                  ;  "on"
 40654                                  ONMES_PTR:
 40655 00009364 2404                    	dw	1060			;AN000;message number
 40656 00009366 00                      	db	no_subst ; 0		;AN000;number of subst
 40657                                  
 40658                                  ;  "Error writing to device",13,10
 40659                                  DEVWMES_PTR:
 40660 00009367 2504                    	dw	1061			;AN000;message number
 40661 00009369 00                      	db	no_subst ; 0		;AN000;number of subst
 40662                                  
 40663                                  ;  "Invalid path",13,10
 40664                                  INVAL_PATH_PTR:
 40665 0000936A 2604                    	dw	1062			;AN000;message number
 40666 0000936C 00                      	db	no_subst ; 0		;AN000;number of subst
 40667                                  
 40668                                  ;  unformatted string output
 40669                                  arg_buf_ptr:
 40670 0000936D 2704                    	dw	1063			;AN000;message number
 40671 0000936F 01                      	db	1			;AN000;number of subst
 40672 00009370 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40673 00009371 00                      	db	0			;AN000;reserved
 40674 00009372 [87A7]                  	dw	Arg_Buf 		;AN000;offset of arg
 40675 00009374 0000                    	dw	0			;AN000;segment of arg
 40676 00009376 01                      	db	1			;AN000;first subst
 40677 00009377 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40678 00009378 80                      	db	128			;AN000;maximum width
 40679 00009379 00                      	db	0			;AN000;minimum width
 40680 0000937A 20                      	db	blank ; 20h		;AN000;pad character
 40681                                  
 40682                                  ;  file name output
 40683                                  file_name_ptr:
 40684 0000937B 2804                    	dw	1064			;AN000;message number
 40685 0000937D 01                      	db	1			;AN000;number of subst
 40686 0000937E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40687 0000937F 00                      	db	0			;AN000;reserved
 40688 00009380 [12A1]                  	dw	SrcBuf			;AN000;offset of arg
 40689 00009382 0000                    	dw	0			;AN000;segment of arg
 40690 00009384 01                      	db	1			;AN000;first subst
 40691 00009385 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40692 00009386 80                      	db	128			;AN000;maximum width
 40693 00009387 00                      	db	0			;AN000;minimum width
 40694 00009388 20                      	db	blank ; 20h		;AN000;pad character
 40695                                  
 40696                                  ;  file size output for dir
 40697                                  disp_file_size_ptr:
 40698 00009389 2904                    	dw	1065			;AN000;message number
 40699 0000938B 01                      	db	1			;AN000;number of subst
 40700 0000938C 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40701 0000938D 00                      	db	0			;AN000;reserved
 40702 0000938E [8DA0]                  	dw	File_Size_Low		;AN000;offset of arg
 40703 00009390 0000                    	dw	0			;AN000;segment of arg
 40704 00009392 01                      	db	1			;AN000;first subst
 40705                                  	; MSDOS 5.0 COMMAND.COM
 40706                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40707                                  	; 17/06/2023
 40708                                  screen_f_1:
 40709 00009393 F1                      	db	0F1h ; MSDOS 6.22 COMMAND.COM
 40710                                  					;AN000;long binary to decimal
 40711                                  	; MSDOS 5.0 COMMAND.COM
 40712                                  	;db	10			;AN000;maximum width
 40713                                  	;db	10			;AN000;minimum width
 40714                                  screen_f_2:
 40715 00009394 0E                      	db	14 ; MSDOS 6.22 COMMAND.COM		
 40716 00009395 0E                      	db	14
 40717                                  	
 40718 00009396 20                      	db	blank ; 20h		;AN000;pad character
 40719                                  
 40720                                  ;  unformatted string output
 40721                                  ; %s
 40722                                  string_buf_ptr:
 40723 00009397 2A04                    	dw	1066			;AN000;message number
 40724 00009399 01                      	db	1			;AN000;number of subst
 40725 0000939A 0B                      	db	parm_block_size 	;AN000;size of sublist
 40726 0000939B 00                      	db	0			;AN000;reserved
 40727 0000939C [91A0]                  	dw	string_ptr_2		;AN000;offset of arg
 40728 0000939E 0000                    	dw	0			;AN000;segment of arg
 40729 000093A0 01                      	db	1			;AN000;first subst
 40730 000093A1 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40731 000093A2 80                      	db	128			;AN000;maximum width
 40732 000093A3 00                      	db	0			;AN000;minimum width
 40733 000093A4 20                      	db	blank ; 20h		;AN000;pad character
 40734 000093A5 00                      	db	0			;AN000;
 40735                                  
 40736                                  ;  tab character
 40737                                  tab_ptr:
 40738 000093A6 2B04                    	dw	1067			;AN000;message number
 40739 000093A8 00                      	db	no_subst ; 0		;AN000;number of subst
 40740                                  
 40741                                  ;  " <DIR>   "
 40742                                  dmes_ptr:
 40743 000093A9 2C04                    	dw	1068			;AN000;message number
 40744 000093AB 00                      	db	no_subst ; 0		;AN000;number of subst
 40745                                  
 40746                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40747                                  space_4_ptr :
 40748 000093AC 5104                    	dw	1105 
 40749 000093AE 00                      	db	no_subst ; 0
 40750                                  
 40751                                  ;  destructive back space
 40752                                  dback_ptr:
 40753 000093AF 2D04                    	dw	1069			;AN000;message number
 40754 000093B1 00                      	db	no_subst ; 0		;AN000;number of subst
 40755                                  
 40756                                  ;  carriage return / line feed
 40757                                  acrlf_ptr:
 40758 000093B2 2E04                    	dw	1070			;AN000;message number
 40759 000093B4 00                      	db	no_subst ; 0		;AN000;number of subst
 40760                                  
 40761                                  ;  "mm-dd-yy"
 40762                                  usadat_ptr:
 40763 000093B5 3004                    	dw	1072			;AN000;message number
 40764 000093B7 00                      	db	no_subst ; 0		;AN000;number of subst
 40765                                  
 40766                                  ;  "dd-mm-yy"
 40767                                  eurdat_ptr:
 40768 000093B8 3104                    	dw	1073			;AN000;message number
 40769 000093BA 00                      	db	no_subst ; 0		;AN000;number of subst
 40770                                  
 40771                                  ;  "yy-mm-dd"
 40772                                  japdat_ptr:
 40773 000093BB 3204                    	dw	1074			;AN000;message number
 40774 000093BD 00                      	db	no_subst ; 0		;AN000;number of subst
 40775                                  
 40776                                  ;  date string for prompt
 40777                                  promptdat_ptr:
 40778 000093BE 3304                    	dw	1075			;AN000;message number
 40779 000093C0 02                      	db	2			;AN000;number of subst
 40780 000093C1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40781 000093C2 00                      	db	0			;AN000;reserved
 40782 000093C3 [87A7]                  	dw	Arg_Buf			;AN000;offset of arg
 40783 000093C5 0000                    	dw	0			;AN000;segment of arg
 40784 000093C7 01                      	db	1			;AN000;first subst
 40785 000093C8 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 40786 000093C9 03                      	db	3			;AN000;maximum width
 40787 000093CA 03                      	db	3			;AN000;minimum width
 40788 000093CB 20                       	db	blank ; 20h		;AN000;pad character
 40789 000093CC 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 40790 000093CD 00                      	db	0			;AN000;reserved
 40791                                  promptDat_yr:
 40792 000093CE 0000                    	dw	0			;AN000;year
 40793                                  promptDat_moday:
 40794 000093D0 0000                    	dw	0			;AN000;month,day
 40795 000093D2 02                      	db	2			;AN000;second subst
 40796 000093D3 34                       	db	34h ; DATE_MDY_4	;AN000;date
 40797 000093D4 0A                      	db	10			;AN000;maximum width
 40798 000093D5 08                      	db	8			;AN000;minimum width
 40799 000093D6 20                      	db	blank ; 20h		;AN000;pad character
 40800                                  
 40801                                  ;  Time for prompt
 40802                                  promtim_ptr:
 40803 000093D7 3404                    	dw	1076			;AN000;message number
 40804 000093D9 01                      	db	1			;AN000;number of subst
 40805 000093DA 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40806 000093DB 00                      	db	0			;AN000;reserved
 40807                                  PromTim_hr_min:
 40808 000093DC 0000                    	dw	0			;AN000;hours,minutes
 40809                                  PromTim_Sec_hn:
 40810 000093DE 0000                    	dw	0			;AN000;seconds,hundredths
 40811 000093E0 01                      	db	1			;AN000;first subst
 40812 000093E1 A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 40813                                  					;AC013;time
 40814 000093E2 0B                      	db	11			;AN000;maximum width
 40815 000093E3 0B                      	db	11			;AC013;minimum width
 40816 000093E4 20                      	db	blank ; 20h		;AN000;pad character
 40817                                  
 40818                                  ;  Date and time for DIR
 40819                                  dirdattim_ptr:
 40820 000093E5 3504                    	dw	1077			;AN000;message number
 40821 000093E7 02                      	db	2			;AN000;number of subst
 40822 000093E8 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40823 000093E9 00                      	db	0			;AN000;reserved
 40824                                  DirDat_Yr:
 40825 000093EA 0000                    	dw	0			;AN000;year
 40826                                  DirDat_Mo_Day:
 40827 000093EC 0000                    	dw	0			;AN000;month,day
 40828 000093EE 01                      	db	1			;AN000;first subst
 40829 000093EF A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 40830                                  					;AN000;date
 40831 000093F0 0A                      	db	10			;AN000;maximum width
 40832 000093F1 08                      	db	8			;AN000;minimum width
 40833 000093F2 20                      	db	blank ; 20h		;AN000;pad character
 40834 000093F3 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40835 000093F4 00                      	db	0			;AN000;reserved
 40836                                  DirTim_Hr_Min:
 40837 000093F5 0000                    	dw	0			;AN000;hours,minutes
 40838                                  DirTim_Sec_hn:
 40839 000093F7 0000                    	dw	0			;AN000;seconds,hundredths
 40840 000093F9 02                      	db	2			;AN000;second subst
 40841 000093FA 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 40842                                  					;AN000;time
 40843 000093FB 06                      	db	6			;AN000;maximum width
 40844 000093FC 06                      	db	6			;AN000;minimum width
 40845 000093FD 20                      	db	blank ; 20h		;AN000;pad character
 40846                                  
 40847                                  ;  "Directory already exists"
 40848                                  MD_EXISTS_PTR:
 40849 000093FE 3604                    	dw	1078			;AN000;message number
 40850 00009400 00                      	db	no_subst		;AN000;number of subst
 40851                                  
 40852                                  ;  "%1 bytes",13,10
 40853                                  bytes_ptr:
 40854 00009401 3704                    	dw	1079			; message number
 40855 00009403 01                      	db	1			; number of subst
 40856 00009404 0B                      	db	parm_block_size ; 11	; size of sublist
 40857 00009405 00                      	db	0			; reserved
 40858 00009406 [1F9E]                  	dw	FileSiz			; offset of arg
 40859 00009408 0000                    	dw	0			; segment of arg
 40860 0000940A 01                      	db	1			; first subst
 40861                                  	; MSDOS 5.0 COMMAND.COM
 40862                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40863                                  	; 17/06/2023
 40864                                  screen_f_4:
 40865 0000940B F1                      	db	0F1h ; MSDOS 6.22 COMMAND.COM
 40866                                  					; long binary to decimal
 40867                                  	; MSDOS 5.0 COMMAND.COM
 40868                                  	;db	10			; maximum width
 40869                                  	;db	10			; minimum width
 40870                                  screen_f_5:
 40871 0000940C 0E                      	db	14 ; MSDOS 6.22 COMMAND.COM
 40872 0000940D 0E                      	db	14	
 40873                                  
 40874 0000940E 20                      	db	blank ; 20h		; pad character
 40875                                  
 40876                                  ;  "Total:",13,10
 40877                                  total_ptr:
 40878 0000940F 3804                    	dw	1080			; message number
 40879 00009411 00                      	db	no_subst ; 0		; number of subst
 40880                                  
 40881                                  ;  "Error parsing environment variable:",13,10
 40882                                  errparsenv_ptr:
 40883 00009412 3904                    	dw	1081			; message number
 40884 00009414 00                      	db	no_subst ; 0		; number of subst
 40885                                  
 40886                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40887                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:996Ah)
 40888                                  cox_Y_quest_ptr:
 40889 00009415 3A04                    	dw	1082
 40890 00009417 00                      	db	no_subst ; 0
 40891                                  cox_Y_answ_ptr:
 40892 00009418 3B04                    	dw	1083
 40893 0000941A 00                      	db	no_subst ; 0
 40894                                  
 40895                                  ;  "(continuing %1)",13,10
 40896                                  dircont_ptr:
 40897 0000941B 3C04                    	dw	1084			;AN000;message number
 40898 0000941D 01                      	db	1			;AN000;number of subst
 40899 0000941E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40900 0000941F 00                      	db	0			;AN000;reserved
 40901 00009420 [2AA0]                  	dw	BWDBUF			;AN000;offset of arg
 40902 00009422 0000                    	dw	0			;AN000;segment of arg
 40903 00009424 01                      	db	1			;AN000;first subst
 40904 00009425 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40905 00009426 80                      	db	128			;AN000;maximum width
 40906 00009427 00                      	db	0			;AN000;minimum width
 40907 00009428 20                      	db	blank ; 20h		;AN000;pad character
 40908                                  
 40909                                  ;  "Revision %1",CR,LF
 40910                                  dosrev_ptr:
 40911 00009429 4204                    	dw	1090
 40912 0000942B 01                      	db	1			; one substitution
 40913 0000942C 0B                      	db	parm_block_size ; 11
 40914 0000942D 00                      	db	0
 40915 0000942E [A2A0]                  	dw	One_Char_Val		; ptr to char
 40916 00009430 0000                    	dw	0			; segment addr?
 40917 00009432 01                      	db	1			; 1st substitution
 40918 00009433 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 40919 00009434 01                      	db	1			; max width
 40920 00009435 01                      	db	1			; min width
 40921 00009436 20                      	db	blank ; 20h		; pad char
 40922                                  
 40923                                  ;  "DOS is in ROM"
 40924                                  DosRom_Ptr:
 40925 00009437 4304                    	dw	1091
 40926 00009439 00                      	db	no_subst ; 0		
 40927                                  
 40928                                  ;  "DOS is in HMA"
 40929                                  DosHma_Ptr:
 40930 0000943A 4404                    	dw	1092
 40931 0000943C 00                      	db	no_subst ; 0		
 40932                                  
 40933                                  ;  "DOS is in low memory"
 40934                                  DosLow_Ptr:
 40935 0000943D 4504                    	dw	1093
 40936 0000943F 00                      	db	no_subst ; 0		
 40937                                  
 40938                                  ;  "Cannot Loadhigh batch file" ;M016
 40939                                  NoExecBat_Ptr:
 40940 00009440 4604                    	dw	1094			; M016
 40941 00009442 00                      	db	no_subst ; 0		; M016
 40942                                  
 40943                                  ;  "LoadHigh: Invalid filename" ; M016
 40944                                  LhInvFil_Ptr:
 40945 00009443 4704                    	dw	1095			; M016
 40946 00009445 00                      	db	no_subst ; 0		; M016
 40947                                  
 40948                                  ;  "Could not open specified country information file" ; M045
 40949                                  NoCntry_Ptr:
 40950 00009446 4804                    	dw	1096			; M045
 40951 00009448 00                      	db	no_subst ; 0		; M045
 40952                                  
 40953                                  ; 15/04/2023
 40954                                  ; MSDOS 6.0 COMMAND.COM only !
 40955                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40956                                  ;%if 0
 40957                                  
 40958                                  ;* The next four errors emulate those reported by the normal parse
 40959                                  ;  mechanism, with a little more accurate wording; that parser has been
 40960                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 40961                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 40962                                  ;  parser, so they've been added here.
 40963                                  
 40964                                  ;  "LoadHigh: Invalid argument"
 40965                                  LhInvArg_Ptr:
 40966 00009449 4904                    	dw	1097
 40967 0000944B 00                      	db	no_subst ; 0		
 40968                                  
 40969                                  ;  "Required parameter missing"
 40970                                  ReqParmMiss:
 40971 0000944C 4A04                    	dw	1098
 40972 0000944E 00                      	db	no_subst ; 0		
 40973                                  
 40974                                  ;  "Unrecognized switch"
 40975                                  LhInvSwt_Ptr:
 40976 0000944F 4B04                    	dw	1099
 40977 00009451 00                      	db	no_subst ; 0		
 40978                                  
 40979                                  ;  "A bad UMB number has been specified"
 40980                                  LhBadUMB_Ptr:
 40981 00009452 4C04                    	dw	1100
 40982 00009454 00                      	db	no_subst ; 0
 40983                                  ;%endif	
 40984                                  
 40985                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 40986                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99AAh
 40987                                  
 40988                                  DirCompRatio_Ptr:
 40989 00009455 4D04                    	dw	1101			;message number
 40990 00009457 02                      	db	2			;number of subst
 40991 00009458 0B                      	db	parm_block_size ; 11	;size of sublist
 40992 00009459 00                      	db	0			;reserved
 40993 0000945A [98A0]                  	dw	Dir_CRatio_1		;offset of arg
 40994 0000945C 0000                    	dw	0			;segment of arg
 40995 0000945E 01                      	db	1			;first subst
 40996 0000945F 91                      	db	91h			;format
 40997 00009460 02                      	db	2			;maximum width
 40998 00009461 02                      	db	2			;minimum width
 40999 00009462 20                      	db	blank ; 20h		;pad character
 41000 00009463 0B                      	db	parm_block_size  ; 11	;size of sublist
 41001 00009464 00                      	db	0			; reserved
 41002 00009465 [99A0]                  	dw	Dir_CRatio_2		;offset of arg
 41003 00009467 0000                    	dw	0			;segment of arg
 41004 00009469 02                      	db	2			;second subst
 41005 0000946A 11                      	db	11h			;format
 41006 0000946B 01                      	db	1			;maximum width
 41007 0000946C 01                      	db	1			;minimum width
 41008 0000946D 20                      	db	blank ; 20h		;pad character
 41009                                  
 41010                                  AveCompRatio_Ptr:
 41011 0000946E 4E04                    	dw	1102			;message number
 41012 00009470 02                      	db	2			;number of subst
 41013 00009471 0B                      	db	parm_block_size ; 11	;size of sublist
 41014 00009472 00                      	db	0			;reserved
 41015 00009473 [98A0]                  	dw	Dir_CRatio_1		;offset of arg
 41016 00009475 0000                    	dw	0			;segment of arg
 41017 00009477 01                      	db	1			;first subst
 41018 00009478 91                      	db	91h			;format
 41019 00009479 02                      	db	2			;maximum width
 41020 0000947A 02                      	db	2			;minimum width
 41021 0000947B 20                      	db	blank ; 20h		;pad character
 41022 0000947C 0B                      	db	parm_block_size  ; 11	;size of sublist
 41023 0000947D 00                      	db	0			; reserved
 41024 0000947E [99A0]                  	dw	Dir_CRatio_2		;offset of arg
 41025 00009480 0000                    	dw	0			;segment of arg
 41026 00009482 02                      	db	2			;second subst
 41027 00009483 11                      	db	11h			;format
 41028 00009484 01                      	db	1			;maximum width
 41029 00009485 01                      	db	1			;minimum width
 41030 00009486 20                      	db	blank ; 20h		;pad character
 41031                                  
 41032                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41033                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 41034                                  
 41035                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41036                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99DCh
 41037                                  
 41038                                  ; ---------------------------------------------------------------------------
 41039                                  
 41040                                  PATH_TEXT:
 41041 00009487 504154483D              	db	"PATH="
 41042                                  PROMPT_TEXT:
 41043 0000948C 50524F4D50543D          	db	"PROMPT="
 41044                                  COMSPECSTR:
 41045 00009493 434F4D535045433D        	db	"COMSPEC="
 41046                                  DirEnvVar:
 41047 0000949B 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 41048                                  
 41049                                  ;============================================================================
 41050                                  ; TDATA.ASM, MSDOS 6.0, 1991
 41051                                  ;============================================================================
 41052                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41053                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41054                                  
 41055                                  	; 15/04/2023
 41056 000094A2 00                      	db	0
 41057 000094A3 90                      align 2
 41058                                  
 41059                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 41060                                  ; ---------------------------------------------------------------------------
 41061                                  	; 18/06/2023
 41062                                  	;db	0
 41063                                  
 41064                                  ; Lists of help message numbers for internal commands and /?
 41065                                  
 41066                                  	; 18/06/2023
 41067                                  ;;NoHelpMsgs:
 41068                                  	;dw	1200,0		;M014
 41069                                  
 41070                                  	; 18/06/2023
 41071                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99F7h
 41072                                  
 41073                                  BreakHelpMsgs:
 41074 000094A4 14050000                	dw	1300,0
 41075                                  ChcpHelpMsgs:
 41076 000094A8 280529050000            	dw	1320,1321,0
 41077                                  CdHelpMsgs:
 41078 000094AE 3C053D053E050000        	dw	1340,1341,1342,0
 41079                                  ClsHelpMsgs:
 41080 000094B6 50050000                	dw	1360,0
 41081                                  CopyHelpMsgs:
 41082                                  	;dw	1400,1401,1402,1403,1404,0
 41083                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41084 000094BA 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,1405,1406,1407,0
 41084 000094C3 057D057E057F050000 
 41085                                  CttyHelpMsgs:
 41086 000094CC 8C050000                	dw	1420,0
 41087                                  DateHelpMsgs:
 41088 000094D0 A005A1050000            	dw	1440,1441,0
 41089                                  DelHelpMsgs:
 41090 000094D6 B405B505B6050000        	dw	1460,1461,1462,0
 41091                                  DirHelpMsgs:
 41092 000094DE C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 41092 000094E7 05CD05CE05CF05D005 
 41093                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 41094                                  	; MSDOS 6.0 COMMAND.COM
 41095 000094F0 D105D205D305D405        	dw	1489,1490,1491,1492
 41096 000094F8 0000                    	dw	0
 41097                                  ExitHelpMsgs:
 41098 000094FA DC050000                	dw	1500,0
 41099                                  MdHelpMsgs:
 41100 000094FE F0050000                	dw	1520,0
 41101                                  PathHelpMsgs:
 41102 00009502 0406050606060000        	dw	1540,1541,1542,0
 41103                                  PromptHelpMsgs:
 41104 0000950A 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 41104 00009513 061D061E061F062006-
 41104 0000951C 0000               
 41105                                  RdHelpMsgs:
 41106 0000951E 2C060000                	dw	1580,0
 41107                                  RenHelpMsgs:
 41108 00009522 4006410642060000        	dw	1600,1601,1602,0
 41109                                  SetHelpMsgs:
 41110 0000952A 5406550656060000        	dw	1620,1621,1622,0
 41111                                  TimeHelpMsgs:
 41112 00009532 680669060000            	dw	1640,1641,0
 41113                                  TypeHelpMsgs:
 41114 00009538 7C060000                	dw	1660,0
 41115                                  VerHelpMsgs:
 41116 0000953C 90060000                	dw	1680,0
 41117                                  VerifyHelpMsgs:
 41118 00009540 A4060000                	dw	1700,0
 41119                                  VolHelpMsgs:
 41120 00009544 B8060000                	dw	1720,0
 41121                                  CallHelpMsgs:
 41122 00009548 CC06CD060000            	dw	1740,1741,0	;M014
 41123                                  RemHelpMsgs:
 41124 0000954E E0060000                	dw	1760,0		;M014
 41125                                  PauseHelpMsgs:
 41126 00009552 F4060000                	dw	1780,0		;M014
 41127                                  EchoHelpMsgs:
 41128 00009556 080709070000            	dw	1800,1801,0	;M014
 41129                                  GotoHelpMsgs:
 41130 0000955C 1C071D070000            	dw	1820,1821,0	;M014
 41131                                  ShiftHelpMsgs:
 41132 00009562 30070000                	dw	1840,0		;M014
 41133                                  IfHelpMsgs:
 41134 00009566 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 41134 0000956F 0749074A070000     
 41135                                  ForHelpMsgs:
 41136 00009576 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 41136 0000957F 00                 
 41137                                  TruenameHelpMsgs:
 41138 00009580 6C070000                	 dw	1900,0		;M014
 41139                                  LoadhighHelpMsgs:
 41140 00009584 800781078207            	dw	1920,1921,1922
 41141                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 41142                                  	; MSDOS 6.0 COMMAND.COM
 41143 0000958A 830784078507860787-     	dw	1923,1924,1925,1926,1927 ;M014
 41143 00009593 07                 
 41144 00009594 0000                    	dw	0
 41145                                  
 41146                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 41147                                  CLSSTRING:
 41148 00009596 041B5B324A              	db	4,1Bh,"[2J"		; ANSI Clear screen
 41149                                  
 41150                                  PROMPT_TABLE:
 41151 0000959B 42                      	db	"B"
 41152 0000959C [4B23]                  	dw	Print_B
 41153 0000959E 44                      	db	"D"
 41154 0000959F [193C]                  	dw	PRINT_DATE
 41155 000095A1 45                      	db	"E"
 41156 000095A2 [3F23]                  	dw	PRINT_ESC
 41157 000095A4 47                      	db	"G"
 41158 000095A5 [4323]                  	dw	PRINT_G
 41159 000095A7 48                      	db	"H"
 41160 000095A8 [3523]                  	dw	PRINT_BACK
 41161 000095AA 4C                      	db	"L"
 41162 000095AB [4723]                  	dw	PRINT_L
 41163 000095AD 4E                      	db	"N"
 41164 000095AE [5C23]                  	dw	PRINT_DRIVE
 41165 000095B0 50                      	db	"P"
 41166 000095B1 [6423]                  	dw	build_dir_for_prompt
 41167 000095B3 51                      	db	"Q"
 41168 000095B4 [3B23]                  	dw	PRINT_EQ
 41169 000095B6 54                      	db	"T"
 41170 000095B7 [D034]                  	dw	PRINT_TIME
 41171 000095B9 56                      	db	"V"
 41172 000095BA [CB22]                  	dw	PRINT_VERSION
 41173 000095BC 5F                      	db	"_"
 41174 000095BD [212B]                  	dw	CRLF2
 41175 000095BF 24                      	db	"$"
 41176 000095C0 [4D23]                  	dw	PRINT_CHAR
 41177 000095C2 00                      	db	0			; NUL TERMINATED
 41178                                  
 41179                                  ; Table of IF conditionals
 41180                                  IFTAB:
 41181 000095C3 034E4F54                	db	3,"NOT"			; First byte is count
 41182 000095C7 [B30B]                  	dw	IFNOT
 41183 000095C9 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 41183 000095D2 454C               
 41184 000095D4 [720C]                  	dw	IFERLEV
 41185 000095D6 054558495354            	db	5,"EXIST"
 41186 000095DC [070C]                  	dw	IFEXISTS
 41187 000095DE 00                      	db	0
 41188                                  
 41189                                  ; Table for internal command names
 41190                                  COMTAB:
 41191 000095DF 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 41192 000095E4 [3711]                  	dw	CATALOG			; In TCMD1.ASM
 41193 000095E6 [DE94]                  	dw	DirHelpMsgs
 41194                                  
 41195 000095E8 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 41196 000095EE [E70C]                  	dw	_$CALL			; In TBATCH2.ASM
 41197 000095F0 [4895]                  	dw	CallHelpMsgs
 41198                                  
 41199 000095F2 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 41200 000095F8 [A725]                  	dw	CHCP			; In TCMD2B.ASM
 41201 000095FA [A894]                  	dw	ChcpHelpMsgs
 41202                                  
 41203 000095FC 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41204 00009604 [931F]                  	dw	CRENAME			; In TCMD1.ASM
 41205 00009606 [2295]                  	dw	RenHelpMsgs
 41206                                  
 41207 00009608 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41208 0000960D [931F]                  	dw	CRENAME			; In TCMD1.ASM
 41209 0000960F [2295]                  	dw	RenHelpMsgs
 41210                                  	
 41211 00009611 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 41212 00009618 [111F]                  	dw	ERASE			; In TCMD1.ASM
 41213 0000961A [D694]                  	dw	DelHelpMsgs
 41214                                  	
 41215 0000961C 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 41216 00009621 [111F]                  	dw	ERASE			; In TCMD1.ASM
 41217 00009623 [D694]                  	dw	DelHelpMsgs
 41218                                  	
 41219 00009625 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41220 0000962B [3A20]                  	dw	TYPEFIL			; In TCMD1.ASM
 41221 0000962D [3895]                  	dw	TypeHelpMsgs
 41222                                  	
 41223 0000962F 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 41224 00009634 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 41225 00009636 [4E95]                  	dw	RemHelpMsgs
 41226                                  	
 41227 00009638 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 41228 0000963E [663C]                  	dw	COPY			; In COPY.ASM
 41229 00009640 [BA94]                  	dw	CopyHelpMsgs
 41230                                  	
 41231 00009642 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 41232 00009649 [051F]                  	dw	PAUSE			; In TCMD1.ASM
 41233 0000964B [5295]                  	dw	PauseHelpMsgs
 41234                                  	
 41235 0000964D 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 41236 00009653 [E333]                  	dw	DATE			; In TPIPE.ASM
 41237 00009655 [D094]                  	dw	DateHelpMsgs
 41238                                  	
 41239 00009657 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 41240 0000965D [4234]                  	dw	CTIME			; In TPIPE.ASM
 41241 0000965F [3295]                  	dw	TimeHelpMsgs
 41242                                  	
 41243 00009661 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 41244 00009666 [5922]                  	dw	VERSION			; In TCMD2.ASM
 41245 00009668 [3C95]                  	dw	VerHelpMsgs
 41246                                  	
 41247 0000966A 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41248 0000966F [6121]                  	dw	VOLUME			; In TCMD1.ASM
 41249 00009671 [4495]                  	dw	VolHelpMsgs
 41250                                  	
 41251 00009673 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41252 00009677 [EA29]                  	dw	_$CHDIR			; In TENV.ASM
 41253 00009679 [AE94]                  	dw	CdHelpMsgs
 41254                                  	
 41255 0000967B 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41256 00009682 [EA29]                  	dw	_$CHDIR			; In TENV.ASM
 41257 00009684 [AE94]                  	dw	CdHelpMsgs
 41258                                  	
 41259 00009686 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41260 0000968A [4F2A]                  	dw	_$MKDIR			; In TENV.ASM
 41261 0000968C [FE94]                  	dw	MdHelpMsgs
 41262                                  	
 41263 0000968E 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41264 00009695 [4F2A]                  	dw	_$MKDIR			; In TENV.ASM
 41265 00009697 [FE94]                  	dw	MdHelpMsgs
 41266                                  	
 41267 00009699 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41268 0000969D [912A]                  	dw	_$RMDIR			; In TENV.ASM
 41269 0000969F [1E95]                  	dw	RdHelpMsgs
 41270                                  	
 41271 000096A1 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41272 000096A8 [912A]                  	dw	_$RMDIR			; In TENV.ASM
 41273 000096AA [1E95]                  	dw	RdHelpMsgs
 41274                                  	
 41275 000096AC 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 41276 000096B3 [633B]                  	dw	CNTRLC			; In TUCODE.ASM
 41277 000096B5 [A494]                  	dw	BreakHelpMsgs
 41278                                  	
 41279 000096B7 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 41280 000096BF [A53B]                  	dw	VERIFY			; In TUCODE.ASM
 41281 000096C1 [4095]                  	dw	VerifyHelpMsgs
 41282                                  	
 41283 000096C3 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 41284 000096C8 [5427]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 41285 000096CA [2A95]                  	dw	SetHelpMsgs
 41286                                  	
 41287 000096CC 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 41288 000096D4 [3A27]                  	dw	ADD_PROMPT		; In TENV.ASM
 41289 000096D6 [0A95]                  	dw	PromptHelpMsgs
 41290                                  	
 41291 000096D8 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 41292 000096DE [CB23]                  	dw	PATH			; In TCMD2.ASM
 41293 000096E0 [0295]                  	dw	PathHelpMsgs
 41294                                  	
 41295 000096E2 044558495400            	db	4,"EXIT",0
 41296 000096E8 [9C26]                  	dw	_$EXIT			; In TCMD2.ASM
 41297 000096EA [FA94]                  	dw	ExitHelpMsgs
 41298                                  	
 41299 000096EC 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 41300 000096F2 [0925]                  	dw	CTTY			; In TCMD2.ASM
 41301 000096F4 [CC94]                  	dw	CttyHelpMsgs
 41302                                  	
 41303 000096F6 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 41304 000096FC [2A3B]                  	dw	_ECHO			; In TUCODE.ASM
 41305 000096FE [5695]                  	dw	EchoHelpMsgs
 41306                                  	
 41307 00009700 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 41308 00009706 [1B0D]                  	dw	_GOTO			; In TBATCH.ASM
 41309 00009708 [5C95]                  	dw	GotoHelpMsgs
 41310                                  	
 41311 0000970A 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 41312 00009711 [A00C]                  	dw	_SHIFT			; In TBATCH.ASM
 41313 00009713 [6295]                  	dw	ShiftHelpMsgs
 41314                                  	
 41315 00009715 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 41316 00009719 [4C0B]                  	dw	_$IF			; In TBATCH.ASM
 41317 0000971B [6695]                  	dw	IfHelpMsgs
 41318                                  	
 41319 0000971D 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 41320 00009722 [D00F]                  	dw	_$FOR			; In TBATCH.ASM
 41321 00009724 [7695]                  	dw	ForHelpMsgs
 41322                                  	
 41323 00009726 03434C5300              	db	3,"CLS",0
 41324 0000972B [7024]                  	dw	CLS			; In TCMD2.ASM
 41325 0000972D [B694]                  	dw	ClsHelpMsgs
 41326                                  	
 41327 0000972F 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 41327 00009738 03                 
 41328 00009739 [2526]                  	dw	TRUENAME		;AN000;
 41329 0000973B [8095]                  	dw	TruenameHelpMsgs
 41330                                  	
 41331 0000973D 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 41331 00009746 02                 
 41332 00009747 [0163]                  	dw	LoadHigh		; In loadhi.asm ; M003
 41333 00009749 [8495]                  	dw	LoadhighHelpMsgs	; M003
 41334                                  	
 41335 0000974B 024C4802                	db	2,"LH",fSwitchAllowed ; 2 ; Short form; M003
 41336 0000974F [0163]                  	dw	LoadHigh		; In loadhi.asm ; M003
 41337 00009751 [8495]                  	dw	LoadhighHelpMsgs	; M003
 41338                                  	
 41339 00009753 00                      	db	0			; Terminate command table
 41340                                  
 41341                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 41342                                  
 41343 00009754 2E434F4D                comext:	db	".COM"
 41344 00009758 2E455845                exeext:	db	".EXE"
 41345 0000975C 2E424154                batext:	db	".BAT"
 41346                                  
 41347                                  switch_list:
 41348                                  	; MSDOS 5.0 (& 6.0) COMMAND.COM
 41349                                  	;db	"?VBAPW"		; flags we can recognize
 41350                                  	; 18/06/2023
 41351                                  	; MSDOS 6.22 COMMAND.COM
 41352 00009760 2D593F5642415057        	db	"-Y?VBAPW"
 41353                                  
 41354                                  AttrLtrs:
 41355 00009768 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 41356                                  
 41357                                  ;	Attribute letters in AttrLtrs must appear in the order that
 41358                                  ;	attribute bits occur in the attribute byte returned by
 41359                                  ;	directory searches, starting with bit 0.
 41360                                  ;	The volume label attribute is lowercased to keep it from
 41361                                  ;	being matched (by an uppercase comparison).
 41362                                  
 41363                                  OrderLtrs:
 41364                                  	; MSDOS 5.0
 41365                                  	;db	"NEDSG"			; sort order letters for DIR
 41366                                  	; 18/06/2023
 41367                                  	; MSDOS 6.0 COMMAND.COM
 41368 0000976E 4E4544534743            	db	"NEDSGC"		; sort order letters for DIR
 41369                                  
 41370                                  ;	Sort order letters stand for file name, extension,
 41371                                  ;	date/time, size, grouped (directory files before others),
 41372                                  ;	and compression ratio. DIR routines rely on the specific
 41373                                  ;	order of the letters in this list.
 41374                                  
 41375                                  comspec_flag:
 41376 00009774 00                      	db	0                       ;AN071;
 41377                                  
 41378                                  BATBUFLEN:
 41379 00009775 2000                    	dw	BatLen ; 32
 41380                                  
 41381                                  ; *****************************************************
 41382                                  ; EMG 4.00
 41383                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 41384                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 41385                                  ; *****************************************************
 41386                                  
 41387                                  ; COMMON PARSE BLOCKS
 41388                                  
 41389                                  ; Indicates no value list for PARSE.
 41390                                  
 41391                                  NO_VALUES:
 41392 00009777 0000                    	dw	0			;AN000;  no values
 41393                                  
 41394                                  NULL_VALUE_LIST:  ; for unvalidated value
 41395 00009779 00                       	db	0                       ; no value lists
 41396                                  
 41397                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41398                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 41399                                  
 41400                                  ; PARSE control block for a required file specification (upper cased)
 41401                                  
 41402                                  FILE_REQUIRED:
 41403 0000977A 0002                    	dw	0200h			;AN000;  filespec - required
 41404 0000977C 0100                    	dw	1			;AN000;  capitalize - file table
 41405 0000977E [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41406 00009780 [7797]                  	dw	NO_VALUES		;AN000;
 41407 00009782 00                      	db	0			;AN000;  no keywords
 41408                                  
 41409                                  ; PARSE control block for an optional file specification (upper cased)
 41410                                  ; or drive number
 41411                                  
 41412                                  FILE_OPTIONAL:
 41413 00009783 0103                    	dw	0301h			;AN000;  filespec or drive number
 41414                                  					;	 optional
 41415 00009785 0100                    	dw	1			;AN000;  capitalize - file table
 41416 00009787 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41417 00009789 [7797]                  	dw	NO_VALUES		;AN000;
 41418 0000978B 00                      	db	0			;AN000;  no keywords
 41419                                  
 41420                                  ; PARSE control block for an optional file specification (upper cased)
 41421                                  
 41422                                  FILE_OPTIONAL2:
 41423 0000978C 0102                    	dw	0201h                   ;AN000;  filespec optional
 41424 0000978E 0100                    	dw	1                       ;AN000;  capitalize - file table
 41425 00009790 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41426 00009792 [7797]                  	dw	NO_VALUES		;AN000;
 41427 00009794 00                      	db	0			;AN000;  no keywords
 41428                                  
 41429                                  ; PARSE control block for an optional /P switch
 41430                                  
 41431                                  SLASH_P_SWITCH:
 41432 00009795 0000                    	dw	0			;AN000;  no match flags
 41433 00009797 0200                    	dw	2			;AN000;  capitalize - char table
 41434 00009799 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41435 0000979B [7797]                  	dw	NO_VALUES		;AN000;
 41436 0000979D 01                      	db	1			;AN000;  1 keyword
 41437                                  SLASH_P_SYN:
 41438 0000979E 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 41439                                  
 41440                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 41441                                  
 41442                                  ; The following parse control block can be used for any command which
 41443                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 41444                                  ; the equal sign as an additional delimiter. Returns verified result
 41445                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 41446                                  ; internal commands.
 41447                                  
 41448                                  PARSE_BREAK:
 41449 000097A1 [A497]                  	dw	BREAK_PARMS		;AN000;
 41450 000097A3 00                      	db	0			;AN032; no extra delimiter
 41451                                  
 41452                                  BREAK_PARMS:
 41453 000097A4 0001                    	db	0,1			;AN000;  1 positional parm
 41454 000097A6 [AA97]                  	dw	BREAK_CONTROL1		;AN000;
 41455 000097A8 00                      	db	0			;AN000;  no switches
 41456 000097A9 00                      	db	0			;AN000;  no keywords
 41457                                  
 41458                                  BREAK_CONTROL1:
 41459 000097AA 0120                    	dw	2001h			;AN000;  string value - optional
 41460 000097AC 0200                    	dw	2			;AN000;  capitalize - char table
 41461 000097AE [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41462 000097B0 [B397]                  	dw	BREAK_VALUES		;AN000;
 41463 000097B2 00                      	db	0			;AN000;  no keywords
 41464                                  
 41465                                  BREAK_VALUES:
 41466 000097B3 03                      	db	3			;AN000;
 41467 000097B4 00                      	db	0			;AN000;  no ranges
 41468 000097B5 00                      	db	0			;AN000;  no numeric values
 41469 000097B6 02                      	db	2			;AN000;  2 string values
 41470 000097B7 00                      	db	0			;AN000;  returned if ON
 41471 000097B8 [BD97]                  	dw	BREAK_ON		;AN000;  point to ON string
 41472 000097BA 66                      	db	'f'                     ;AN000;  returned if OFF
 41473 000097BB [C097]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 41474                                  
 41475                                  BREAK_ON:
 41476 000097BD 4F4E00                  	db	"ON",0                  ;AN000;
 41477                                  BREAK_OFF:
 41478 000097C0 4F464600                	db	"OFF",0                 ;AN000;
 41479                                  
 41480                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41481                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 41482                                  
 41483                                  ; PARSE BLOCK FOR CHCP
 41484                                  
 41485                                  ; The following parse control block can be used for any command which
 41486                                  ; needs only one optional three digit decimal parameter for operands.
 41487                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 41488                                  ; CHCP internal command.
 41489                                  
 41490                                  CHCP_MINVAL	EQU	100			;AN000;
 41491                                  CHCP_MAXVAL	EQU	999			;AN000;
 41492                                  
 41493                                  PARSE_CHCP:
 41494 000097C4 [C797]                  	dw	CHCP_PARMS			;AN000;
 41495 000097C6 00                      	db	0				;AN000;  no extra delimiter
 41496                                  CHCP_PARMS:
 41497 000097C7 0001                    	db	0,1				;AN000;  1 positional parm
 41498 000097C9 [CD97]                  	dw	CHCP_CONTROL1			;AN000;
 41499 000097CB 00                      	db	0				;AN000;  no switches
 41500 000097CC 00                      	db	0				;AN000;  no keywords
 41501                                  
 41502                                  CHCP_CONTROL1:
 41503 000097CD 0180                    	dw	8001h				;AN000;  numeric value - optional
 41504 000097CF 0000                    	dw	0				;AN000;  no function flags
 41505 000097D1 [E1A9]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 41506 000097D3 [D697]                  	dw	CHCP_VALUES			;AN000;
 41507 000097D5 00                      	db	0				;AN000;  no keywords
 41508                                  
 41509                                  CHCP_VALUES:
 41510 000097D6 01                      	db	1				;AN000;
 41511 000097D7 01                      	db	1				;AN000;  1 range
 41512 000097D8 01                      	db	1				;AN000;  returned if result
 41513 000097D9 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 41514 000097E1 00                      	db	0				;AN000;  no numeric values
 41515 000097E2 00                      	db	0				;AN000;  no string values
 41516                                  
 41517                                  ; PARSE BLOCK FOR DATE
 41518                                  
 41519                                  ; The following parse control block can be used for any command which
 41520                                  ; needs only an optional date string as an operand. Returns unverified
 41521                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 41522                                  
 41523                                  PARSE_DATE:
 41524 000097E3 [E697]                  	dw	DATE_PARMS			;AN000;
 41525 000097E5 00                      	db	0				;AN000;  no extra delimiter
 41526                                  DATE_PARMS:
 41527 000097E6 0001                    	db	0,1				;AN000;  1 positional parm
 41528 000097E8 [EC97]                  	dw	DATE_CONTROL1			;AN000;
 41529 000097EA 00                      	db	0				;AN000;  no switches
 41530 000097EB 00                      	db	0				;AN000;  no keywords
 41531                                  
 41532                                  DATE_CONTROL1:
 41533 000097EC 0110                    	dw	1001h				;AN000;  date - optional
 41534 000097EE 0000                    	dw	0				;AN000;  no function flags
 41535 000097F0 [E9A9]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 41536 000097F2 [7797]                  	dw	NO_VALUES			;AN000;
 41537 000097F4 00                      	db	0				;AN000;  no keywords
 41538                                  
 41539                                  ; PARSE BLOCK FOR TIME
 41540                                  
 41541                                  ; The following parse control block can be used for any command which
 41542                                  ; needs only an optional time string as an operand. Returns unverified
 41543                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 41544                                  
 41545                                  PARSE_TIME:
 41546 000097F5 [F897]                  	dw	TIME_PARMS			;AN000;
 41547 000097F7 00                      	db	0				;AN000;  no extra delimiter
 41548                                  TIME_PARMS:
 41549 000097F8 0001                    	db	0,1				;AN000;  1 positional parm
 41550 000097FA [FE97]                  	dw	TIME_CONTROL1			;AN000;
 41551 000097FC 00                      	db	0				;AN000;  no switches
 41552 000097FD 00                      	db	0				;AN000;  no keywords
 41553                                  
 41554                                  TIME_CONTROL1:
 41555 000097FE 0108                    	dw	0801h				;AN000;  TIME - optional
 41556 00009800 0000                    	dw	0				;AN000;  no function flags
 41557 00009802 [F1A9]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 41558 00009804 [7797]                  	dw	NO_VALUES			;AN000;
 41559 00009806 00                      	db	0				;AN000;  no keywords
 41560                                  
 41561                                  ; PARSE BLOCK FOR VOL
 41562                                  
 41563                                  ; The following parse control block can be used for any command which
 41564                                  ; needs only an optional drive letter as an operand.  Returns unverified
 41565                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 41566                                  ; internal command.
 41567                                  
 41568                                  PARSE_VOL:
 41569 00009807 [0A98]                  	dw	VOL_PARMS			;AN000;
 41570 00009809 00                      	db	0				;AN000;  no extra delimiter
 41571                                  VOL_PARMS:
 41572 0000980A 0001                    	db	0,1				;AN000;  1 positional parm
 41573 0000980C [1098]                  	dw	DRIVE_CONTROL1			;AN000;
 41574 0000980E 00                      	db	0				;AN000;  no switches
 41575 0000980F 00                      	db	0				;AN000;  no keywords
 41576                                  
 41577                                  DRIVE_CONTROL1:
 41578 00009810 0101                    	dw	0101h				;AN000;  DRIVE - optional
 41579 00009812 0100                    	dw	1				;AN000;  capitalize - file table
 41580 00009814 [F9A9]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 41581 00009816 [7797]                  	dw	NO_VALUES			;AN000;
 41582 00009818 00                      	db	0				;AN000;  no keywords
 41583                                  
 41584                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 41585                                  
 41586                                  ; The following parse control block can be used for any command which
 41587                                  ; needs only one required file specification as an operand. Returns a
 41588                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 41589                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 41590                                  
 41591                                  PARSE_MRDIR:
 41592 00009819 [1C98]                  	dw	MRDIR_PARMS			;AN000;
 41593 0000981B 00                      	db	0				;AN000;  no extra delimiter
 41594                                  MRDIR_PARMS:
 41595 0000981C 0101                    	db	1,1				;AN000;  1 positional parm
 41596 0000981E [7A97]                  	dw	FILE_REQUIRED			;AN000;
 41597 00009820 00                      	db	0				;AN000;  no switches
 41598 00009821 00                      	db	0				;AN000;  no keywords
 41599                                  
 41600                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 41601                                  
 41602                                  ; The following parse control block can be used for any command which
 41603                                  ; needs only one optional file specification an operand. Returns a
 41604                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 41605                                  ; for the CHDIR and TRUENAME internal commands.
 41606                                  
 41607                                  PARSE_CHDIR:
 41608 00009822 [2598]                  	dw	CHDIR_PARMS			;AN000;
 41609 00009824 00                      	db	0				;AN000;  no extra delimiter
 41610                                  CHDIR_PARMS:
 41611 00009825 0001                    	db	0,1				;AN000;  1 positional parm
 41612 00009827 [8397]                  	dw	FILE_OPTIONAL			;AN000;
 41613 00009829 00                      	db	0				;AN000;  no switches
 41614 0000982A 00                      	db	0				;AN000;  no keywords
 41615                                  
 41616                                  ; PARSE BLOCK FOR ERASE
 41617                                  
 41618                                  ; The following parse control block is used for the DEL/ERASE internal
 41619                                  ; commands. This command has one required file specification and an
 41620                                  ; optional switch (/p) as operands. The verified switch or unverified
 41621                                  ; file specification is returned in PARSE1_OUTPUT.
 41622                                  
 41623                                  PARSE_ERASE:
 41624 0000982B [2E98]                  	dw	ERASE_PARMS			;AN000;
 41625 0000982D 00                      	db	0				;AN000;  no extra delimiter
 41626                                  
 41627                                  ERASE_PARMS:
 41628 0000982E 0101                    	db	1,1				;AN000;  1 positional parm
 41629 00009830 [7A97]                  	dw	FILE_REQUIRED			;AN000;
 41630 00009832 01                      	db	1				;AN000;  1 switch
 41631 00009833 [9597]                  	dw	SLASH_P_SWITCH			;AN000;
 41632 00009835 00                      	db	0				;AN000;  no keywords
 41633                                  
 41634                                  ; PARSE BLOCK FOR DIR
 41635                                  
 41636                                  ; The following parse control block is used for the DIR internal command.
 41637                                  ; This command has one optional file specification and several optional
 41638                                  ; switches. Switches, switch values, and the filespec are returned in 
 41639                                  ; PARSE1_OUTPUT.
 41640                                  ;
 41641                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 41642                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 41643                                  ; do not require colons, and are not checked against a value list.
 41644                                  ;
 41645                                  ; Switch /h has been removed from the DIR command	;M008
 41646                                  ; Switch /? is no longer handled internally		;M008
 41647                                  ;
 41648                                  ; A list of pointers to all the switch synonyms is provided here to
 41649                                  ; help identify which switch has been matched.
 41650                                  
 41651                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 41652                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 41653                                  
 41654                                  PARSE_DIR:
 41655 00009836 [3998]                  	dw	DIR_PARMS
 41656 00009838 00                      	db	0			; no extra delimiters
 41657                                  DIR_PARMS:
 41658 00009839 0001                    	db	0,1			; 1 optional positional param
 41659 0000983B [8C97]                  	dw	FILE_OPTIONAL2
 41660 0000983D 02                      	db	2			; 2 kinds of switches
 41661 0000983E [4398]                  	dw	DIR_SW_VALUED
 41662 00009840 [5598]                  	dw	DIR_SW_UNVALUED
 41663 00009842 00                      	db	0			; no keywords
 41664                                  
 41665                                  DIR_SW_VALUED:
 41666 00009843 0120                    	dw	2001h			; optional string value
 41667 00009845 2100                    	dw	21h			; optional colon; capitalize 
 41668 00009847 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41669 00009849 [7997]                  	dw	NULL_VALUE_LIST		; don't validate value
 41670                                  
 41671                                  	; 18/06/2023
 41672                                  	;db	2
 41673                                  
 41674                                  ; MSDOS 6.0 COMMAND.COM
 41675                                  ;ifdef DBLSPACE_HOOKS
 41676                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41677 0000984B 03                      	db	3		; 3 'synonyms'
 41678                                  ;else
 41679                                  ;	db	2		; 2 'synonyms'
 41680                                  ;endif
 41681                                  
 41682                                  DIR_SW_A:
 41683 0000984C 2F4100                  	db	"/A",0
 41684                                  DIR_SW_O:
 41685 0000984F 2F4F00                  	db	"/O",0
 41686                                  
 41687                                  ; MSDOS 6.0 COMMAND.COM
 41688                                  ;ifdef DBLSPACE_HOOKS
 41689                                  	; 18/06/2023
 41690                                  DIR_SW_C:
 41691 00009852 2F4300                  	db	"/C",0
 41692                                  ;endif
 41693                                  
 41694                                  DIR_SW_UNVALUED:
 41695 00009855 0000                    	dw	0			; no value
 41696 00009857 0000                    	dw	0			; no format functions
 41697 00009859 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41698 0000985B [7797]                  	dw	NO_VALUES
 41699                                  
 41700                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 41701                                  	;;db	12
 41702                                  	
 41703                                  	; 18/06/2023
 41704                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 41705                                  	;db	14		; 14 'synonyms' !?
 41706                                  
 41707                                  ; MSDOS 6.0 COMMAND.COM
 41708                                  ;ifdef DBLSPACE_HOOKS
 41709                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41710                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DB0h
 41711 0000985D 0D                      	db	13		; 13 'synonyms'
 41712                                  ;else
 41713                                  ;	db	12		; 12 'synonyms'
 41714                                  ;endif
 41715                                  
 41716                                  DIR_SW_NEG_A:
 41717 0000985E 2F2D4100                	db	"/-A",0
 41718                                  DIR_SW_NEG_O:
 41719 00009862 2F2D4F00                	db	"/-O",0
 41720                                  DIR_SW_S:
 41721 00009866 2F5300                  	db	"/S",0
 41722                                  DIR_SW_NEG_S:
 41723 00009869 2F2D5300                	db	"/-S",0
 41724                                  DIR_SW_B:
 41725 0000986D 2F4200                  	db	"/B",0
 41726                                  DIR_SW_NEG_B:
 41727 00009870 2F2D4200                	db	"/-B",0
 41728                                  DIR_SW_W:
 41729 00009874 2F5700                  	db	"/W",0
 41730                                  DIR_SW_NEG_W:
 41731 00009877 2F2D5700                	db	"/-W",0
 41732                                  DIR_SW_P:
 41733 0000987B 2F5000                  	db	"/P",0
 41734                                  DIR_SW_NEG_P:
 41735 0000987E 2F2D5000                	db	"/-P",0
 41736                                  DIR_SW_L:
 41737 00009882 2F4C00                  	db	"/L",0		;M010
 41738                                  DIR_SW_NEG_L:
 41739 00009885 2F2D4C00                	db	"/-L",0 	;M010
 41740                                  
 41741                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41742                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 41743                                  DIR_SW_NEG_C:
 41744 00009889 2F2D4300                	db	"/-C",0
 41745                                  
 41746                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 41747                                  ; identification. Order is critical - DIR routines rely on the
 41748                                  ; specific order in this list. Negated options appear at odd 
 41749                                  ; positions in the list, and simple on/off options appear first.
 41750                                  
 41751                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41752                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DE0h
 41753                                  Dir_Sw_Ptrs:			; list of ptrs to switch synonyms
 41754                                  	; 18/06/2023
 41755                                  	; MSDOS 6.0 COMMAND.COM ; *
 41756 0000988D [8998]                  	dw	DIR_SW_NEG_C	; * 
 41757                                  Dir_Sw_Ptrs_2:
 41758 0000988F [5298]                  	dw	DIR_SW_C	; *
 41759                                  	; MSDOS 5.0 COMMAND.COM	
 41760                                  ;Dir_Sw_Ptrs:
 41761 00009891 [7798]                  	dw	DIR_SW_NEG_W
 41762                                  ;Dir_Sw_Ptrs_2:
 41763 00009893 [7498]                  	dw	DIR_SW_W
 41764 00009895 [7E98]                  	dw	DIR_SW_NEG_P
 41765 00009897 [7B98]                  	dw	DIR_SW_P
 41766 00009899 [6998]                  	dw	DIR_SW_NEG_S
 41767 0000989B [6698]                  	dw	DIR_SW_S
 41768 0000989D [7098]                  	dw	DIR_SW_NEG_B
 41769 0000989F [6D98]                  	dw	DIR_SW_B
 41770 000098A1 [8598]                  	dw	DIR_SW_NEG_L	;M010
 41771 000098A3 [8298]                  	dw	DIR_SW_L	;M010
 41772 000098A5 [6298]                  	dw	DIR_SW_NEG_O
 41773 000098A7 [4F98]                  	dw	DIR_SW_O
 41774 000098A9 [5E98]                  	dw	DIR_SW_NEG_A
 41775 000098AB [4C98]                  	dw	DIR_SW_A
 41776                                  
 41777                                  ; PARSE BLOCK FOR RENAME
 41778                                  
 41779                                  ; The following parse control block can be used for any command which
 41780                                  ; needs only two required file specifications as operands. Returns
 41781                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 41782                                  ; Currently used for the RENAME internal command.
 41783                                  
 41784                                  PARSE_RENAME:
 41785 000098AD [B098]                  	dw	RENAME_PARMS		;AN000;
 41786 000098AF 00                      	db	0			;AN000;  no extra delimiter
 41787                                  RENAME_PARMS:
 41788 000098B0 0202                    	db	2,2			;AN000;  2 positional parms
 41789 000098B2 [7A97]                  	dw	FILE_REQUIRED		;AN000;
 41790 000098B4 [7A97]                  	dw	FILE_REQUIRED		;AN000;
 41791 000098B6 00                      	db	0			;AN000;  no switches
 41792 000098B7 00                      	db	0			;AN000;  no keywords
 41793                                  
 41794                                  ; PARSE BLOCK FOR CTTY
 41795                                  
 41796                                  ; The following parse control block can be used for any command which
 41797                                  ; needs one required device name as an operand. Returns a pointer to
 41798                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 41799                                  ; internal command.
 41800                                  
 41801                                  PARSE_CTTY:
 41802 000098B8 [BB98]                  	dw	CTTY_PARMS		;AN000;
 41803 000098BA 00                      	db	0			;AN000;  no extra delimiter
 41804                                  CTTY_PARMS:
 41805 000098BB 0101                    	db	1,1			;AN000;  1 positional parm
 41806 000098BD [C198]                  	dw	CTTY_CONTROL1		;AN000;
 41807 000098BF 00                      	db	0			;AN000;  no switches
 41808 000098C0 00                      	db	0			;AN000;  no keywords
 41809                                  CTTY_CONTROL1:
 41810 000098C1 0020                    	dw	2000h			;AN000;  string value - required
 41811 000098C3 1100                    	dw	11h			;AN000;  capitalize - file table
 41812                                  					;AN000;  remove colon at end
 41813 000098C5 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41814 000098C7 [7797]                  	dw	NO_VALUES		;AN000;
 41815 000098C9 00                      	db	0			;AN000;  no keywords
 41816                                  
 41817                                  ; PARSE BLOCK FOR VER
 41818                                  
 41819                                  ; The following parse control block can be used for any command which
 41820                                  ; needs an optional switch "/debug". Currently used for the VER command.
 41821                                  
 41822                                  PARSE_VER:
 41823 000098CA [CD98]                  	dw	VER_PARMS
 41824 000098CC 00                      	db	0			; no extra delimiters
 41825                                  VER_PARMS:
 41826 000098CD 0000                    	db	0,0			; no positional parameters
 41827                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41828                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 41829                                  	db	1			; one switch
 41830                                  	dw	SLASH_R
 41831                                  %else
 41832                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 41833 000098CF 02                      	db	2			; two switches
 41834 000098D0 [D598]                  	dw	SLASH_R
 41835 000098D2 [E198]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 41836                                  %endif
 41837 000098D4 00                      	db	0			; no keywords
 41838                                  SLASH_R:
 41839 000098D5 0000                    	dw	0			; no values
 41840 000098D7 0200                    	dw	2			; capitalize by filename table
 41841 000098D9 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41842 000098DB [7797]                  	dw	NO_VALUES		; no values
 41843 000098DD 01                      	db	1			; one synonym
 41844                                  SLASH_R_SYN:
 41845 000098DE 2F5200                  	db	"/R",0
 41846                                  
 41847                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41848                                  %if 1
 41849                                  SLASH_T:
 41850 000098E1 0000                    	dw	0			; no values
 41851 000098E3 0200                    	dw	2			; capitalize by filename table
 41852 000098E5 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41853 000098E7 [7797]                  	dw	NO_VALUES		; no values
 41854 000098E9 01                      	db	1			; one synonym
 41855                                  SLASH_T_SYN:
 41856 000098EA 2F5400                  	db	"/T",0
 41857                                  %endif
 41858                                  
 41859                                  ; M003 ; Start of changes for LoadHigh support
 41860                                  
 41861                                  ;Parse Control Block for LOADHIGH command
 41862                                  
 41863                                  Parse_LoadHi:
 41864 000098ED [F098]                  	dw	LoadHi_Parms		;extended parm table
 41865 000098EF 00                      	db	0			;no extra delimiters
 41866                                  
 41867                                  LoadHi_Parms:
 41868 000098F0 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 41869 000098F2 [7A97]                  	dw	FILE_REQUIRED		;control struc for filename
 41870 000098F4 00                      	db	0			;no switches
 41871 000098F5 00                      	db	0			;no keywords
 41872                                  
 41873                                  ; M003 ; End of changes for LoadHigh support
 41874                                  
 41875                                  TempVarName:
 41876 000098F6 54454D503D00            	db	"TEMP=",0
 41877                                  
 41878                                  	; 16/04/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 41879                                  ;TRANDATAEND:		; TRANGROUP:88C2h
 41880                                  
 41881                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41882                                  copycmd:
 41883 000098FC 434F5059434D443D        	db 'COPYCMD='
 41884                                  sCVFRoot:
 41885 00009904 5C44424C5350414345-     	db '\DBLSPACE.'
 41885 0000990D 2E                 
 41886                                  
 41887                                  ; ---------------------------------------------------------------------------
 41888                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41889                                  %if 1
 41890 0000990E 0D0A                    RD4CMD_VER_MSG:	db 0Dh,0Ah
 41891 00009910 526574726F20444F53-     		db 'Retro DOS v4.2 COMMAND.COM'
 41891 00009919 2076342E3220434F4D-
 41891 00009922 4D414E442E434F4D   
 41892 0000992A 0D0A                    		db 0Dh,0Ah 
 41893 0000992C 32303234202D204572-     		db '2024 - Erdogan Tan'
 41893 00009935 646F67616E2054616E 
 41894 0000993E 0D0A                    		db 0Dh,0Ah
 41895 00009940 24                      		db '$'
 41896                                  %endif
 41897                                  ; ---------------------------------------------------------------------------
 41898                                  
 41899                                  	; 18/06/2023
 41900                                  	; MSDOS 6.22 COMMAND.COM
 41901                                  TRANDATAEND:		; TRANGROUP:9E53h
 41902                                  
 41903                                  ;============================================================================
 41904                                  ; PSDATA.INC, MSDOS 6.0, 1991
 41905                                  ;============================================================================
 41906                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41907                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41908                                  
 41909                                  ; 18/04/2023
 41910                                  TRANSPACESTART:
 41911                                  
 41912                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 41913                                  	
 41914                                  	; 18/06/2023
 41915                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9E53h
 41916                                  
 41917                                  ;********************** Local Data *************************************
 41918                                  
 41919                                  $P_ORDINAL:
 41920 00009941 0000                    	dw	0		;AN000; Operand ordinal save area
 41921                                  $P_RC:
 41922 00009943 0000                    	dw	0		;AN000; Return code from parser
 41923                                  $P_SI_Save:
 41924 00009945 0000                    	dw	0		;AN000; Pointer of command buffer
 41925                                  $P_DX:
 41926 00009947 0000                    	dw	0		;AN000; Return result buffer address
 41927                                  $P_Terminator:
 41928 00009949 00                      	db	0		;AN000; Terminator code (ASCII)
 41929                                  $P_DBCSEV_OFF:
 41930 0000994A 0000                    	dw	0		;AN000; Offset of DBCS EV
 41931                                  $P_DBCSEV_SEG:
 41932 0000994C 0000                    	dw	0		;AN000; Segment of DBCS EV
 41933                                  $P_Flags:			;AN000; Parser internal flags
 41934                                  $P_Flags1:
 41935 0000994E 00                      	db	0		;AN038; to reference first byte flags
 41936                                  $P_Flags2:
 41937 0000994F 00                      	db	0		;AN038; to reference second byte flags only
 41938                                  $P_SaveSI_Cmpx:
 41939 00009950 0000                    	dw	0		;AN000; save si for later use by complex
 41940                                  $P_KEYorSW_Ptr:
 41941 00009952 0000                    	dw	0		;AN000; points next to "=" or ":" code
 41942                                  $P_Save_EOB:
 41943 00009954 0000                    	dw	0		;AN000; save pointer to EOB
 41944                                  $P_Found_SYNONYM:
 41945 00009956 0000                    	dw	0		;AN000; es:@ points to found synonym
 41946                                  $P_STRING_BUF:
 41947 00009958 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 41948                                  $P_ORIG_ORD:
 41949 000099D8 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 41950                                  $P_ORIG_STACK:
 41951 000099DA 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 41952                                  $P_ORIG_SI:
 41953 000099DC 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 41954                                  $P_Got_Time:
 41955 000099DE 00                      	db	0		;AN023; if 1, use Time delimiters
 41956                                  $P_Country_Info:
 41957 000099DF FFFF                    	dw	-1 ; 0FFFFh
 41958 000099E1 00<rep 20h>             	times	32 db 0	
 41959                                  $P_1st_Val:
 41960 00009A01 0000                    	dw	0		;AN000; used when process date or time
 41961                                  $P_2nd_Val:
 41962 00009A03 0000                    	dw	0		;AN000; used when process date or time
 41963                                  $P_3rd_Val:
 41964 00009A05 0000                    	dw	0		;AN000; used when process date or time
 41965                                  $P_4th_Val:
 41966 00009A07 0000                    	dw	0		;AN000; used when process date or time
 41967                                  $P_Char_CAP_Ptr:
 41968 00009A09 FF                      	db	0FFh		;AN000; info id
 41969 00009A0A 0000                    	dw	0		;AN000; offset	of char case map table
 41970 00009A0C 0000                    	dw	0		;AN000; segment of char case map table
 41971                                  $P_File_CAP_Ptr:
 41972 00009A0E FF                      	db	0FFh		;AN000; info id
 41973 00009A0F 0000                    	dw	0		;AN000; offset	of file case map table
 41974 00009A11 0000                    	dw	0		;AN000; segment of file case map table
 41975                                  
 41976                                  	; 18/04/2023
 41977                                  ;M029
 41978                                  ;!!!WARNING!!!
 41979                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 41980                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 41981                                  ;changes need to be made in SYSPARSE
 41982                                  
 41983                                  $P_FileSp_Char:
 41984 00009A13 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 41985                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 41986                                  
 41987                                  ;filespec error flag
 41988                                  $P_err_flag:
 41989 00009A1C 00                      	db	0		;AN033; flag set if filespec parsing error
 41990                                  				;AN033;  was detected.
 41991                                  
 41992                                  ;============================================================================
 41993                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 41994                                  ;============================================================================
 41995                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41996                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41997                                  
 41998                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 41999                                  
 42000                                  	; 18/06/2023
 42001                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9F2Fh
 42002                                  
 42003                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 42004                                  ;;
 42005                                  ;; STRUCTURE: $M_RES_ADDRS
 42006                                  ;;
 42007                                  ;; Resident data area definition of variables
 42008                                  ;;
 42009                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 42010                                  
 42011                                  $M_RT:
 42012 00009A1D 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 42013                                  
 42014                                  ;============================================================================
 42015                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 42016                                  ;============================================================================
 42017                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42018                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42019                                  
 42020                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 42021                                  ; ---------------------------------------------------------------------------
 42022                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 42023                                  ;;M031 - changed copyright to 1991
 42024                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 42025                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 42026                                  ;;B49,50 - changed version to 6 and copyright to 1993
 42027                                  ; ---------------------------------------------------------------------------
 42028                                  	
 42029                                  	; 18/06/2023
 42030                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9FBCh
 42031                                  ;ifdef USA
 42032                                  MsDosVer6_CCopy:
 42033                                  	; MSDOS 6.0
 42034                                  	;db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 42035                                  	; 18/06/2023
 42036                                  	; MSDOS 6.22
 42037 00009AAA 4D5320444F53205665-     	db	"MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp "
 42037 00009AB3 7273696F6E20362028-
 42037 00009ABC 4329436F7079726967-
 42037 00009AC5 687420313938312D31-
 42037 00009ACE 393934204D6963726F-
 42037 00009AD7 736F667420436F7270-
 42037 00009AE0 20                 
 42038 00009AE1 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 42038 00009AEA 4D6174657269616C20-
 42038 00009AF3 2D2050726F70657274-
 42038 00009AFC 79206F66204D696372-
 42038 00009B05 6F736F667420       
 42039 00009B0B 416C6C207269676874-     	db	"All rights reserved "
 42039 00009B14 732072657365727665-
 42039 00009B1D 6420               
 42040                                  ;endif
 42041                                  
 42042                                  ; ---------------------------------------------------------------------------
 42043                                  ; 18/06/2023
 42044                                  ; 15/04/2023
 42045                                  ;MsDosVer5_CCopy:
 42046                                  	;db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 42047                                  	;db	"Licensed Material - Property of Microsoft "
 42048                                  	;db	"All rights reserved "
 42049                                  ; ---------------------------------------------------------------------------
 42050                                  ; 15/04/2023
 42051                                  	; 16/04/2023 - 21/04/2023
 42052                                  	;db 	0
 42053                                  	;db	0Dh,0Ah
 42054                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 42055                                  	;db	0
 42056                                  	;db	'by Erdogan Tan - 05/05/2023'
 42057                                  	;db	0
 42058                                  
 42059                                  	; 19/06/2023
 42060                                  	; 18/06/2023
 42061                                  	;db 	0
 42062                                  	;db	0Dh,0Ah
 42063                                  	;db	'Retro DOS v4.2 COMMAND.COM '
 42064                                  	;db	0
 42065                                  	;db	'by Erdogan Tan - 19/6/2023'
 42066                                  	;db	0
 42067                                  
 42068                                  ;============================================================================
 42069                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 42070                                  ;============================================================================
 42071                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42072                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42073                                  
 42074                                  PRINTF_HANDLE:
 42075 00009B1F 0000                    	dw	0		;AC000;
 42076                                  
 42077                                  ;============================================================================
 42078                                  ; TSPC.ASM, MSDOS 6.0, 1991
 42079                                  ;============================================================================
 42080                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42081                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42082                                  
 42083                                  ;TITLE	COMMAND Transient Uninitialized DATA
 42084                                  
 42085                                  ;The TRANSPACE segment contains variable data that is considered
 42086                                  ;volatile between command cycles, and therefore is not included in the
 42087                                  ;transient checksum area. Contents of these variables MUST be
 42088                                  ;initialized before use, and must not be relied upon from command
 42089                                  ;cycle to command cycle.
 42090                                  ;
 42091                                  ;No constant data values should be stored here.
 42092                                  
 42093                                  ; ---------------------------------------------------------------------------
 42094                                  ; START OF UNITIALIZED DATA
 42095                                  ; ---------------------------------------------------------------------------
 42096                                  
 42097                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 42098                                  
 42099                                  	; 18/06/2023
 42100                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A033h
 42101                                  
 42102 00009B21 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 42103 00009B78 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 42104 00009BCF 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 42105 00009C52 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 42106 00009CD5 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 42107 00009D1B 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 42108 00009D9E 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 42109                                  
 42110                                  ; Variables passed up from resident	; in the Resident portion: (initial values)
 42111                                  HEADCALL:
 42112 00009DF1 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 42113 00009DF3 0000                    RESSEG:	dw 0			; MYSEG     (dw 0)
 42114 00009DF5 0000                    TPA:	dw 0			; LTPA	    (dw 0)
 42115                                  SWITCHAR:
 42116 00009DF7 00                      	db 0			; RSWITCHAR (db '-')
 42117                                  DIRCHAR:
 42118 00009DF8 00                      	db 0			; RDIRCHAR  (db '/')
 42119                                  EXEC_ADDR:
 42120 00009DF9 00000000                	dd 0			; 	    (dw EXT_EXEC)
 42121                                  				; MYSEG1    (dw 0)
 42122                                  RCH_ADDR:
 42123 00009DFD 00000000                	dd 0			;	    (dw TREMCHECK)
 42124                                  				; MYSEG2    (dw 0)
 42125                                  ; 14/08/2024 - PCDOS 7.1 COMMAND.COM
 42126                                  %if 0
 42127                                  	dw 0			; RESTEST   (dw 0)
 42128                                  %endif
 42129                                  
 42130                                  TRAN_TPA:
 42131 00009E01 0000                    	dw 0			; RES_TPA   (dw 0)
 42132                                  
 42133 00009E03 00                      CHKDRV:	db 0
 42134                                  IFNOTFLAG:
 42135                                  FILTYP:
 42136 00009E04 00                      RDEOF:	db 0			; Misc flags
 42137 00009E05 00                      CURDRV:	db 0
 42138                                  PARM1:
 42139 00009E06 00                      Concat:	db 0
 42140                                  PARM2:
 42141 00009E07 00                      ArgC:	db 0
 42142 00009E08 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 42143 00009E0A 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 42144                                  ARG2S:				; Switches after 2nd arg
 42145                                  DestSwitch:
 42146 00009E0C 0000                    	dw 0
 42147                                  ARGTS:
 42148                                  AllSwitch:
 42149 00009E0E 0000                    	dw 0			; ALL switches except for COMSW
 42150 00009E10 00                      CFLAG:	db 0
 42151                                  DestClosed:
 42152                                  SPECDRV:
 42153 00009E11 00                      	db 0
 42154 00009E12 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 42155                                  
 42156                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 42157                                  ;ifdef DBLSPACE_HOOKS
 42158                                  savBytCnt: ; MSDOS 6.0
 42159 00009E14 0000                    	dw 0
 42160                                  ;endif
 42161                                  	
 42162 00009E16 0000                    NXTADD:	dw 0
 42163                                  FRSTSRCH:
 42164 00009E18 00                      	db 0
 42165                                  ; 15/04/2023
 42166                                  LeftOnLine:
 42167 00009E19 00                      	db 0			; entries left on line u.b. DIR
 42168                                  PerLine:
 42169 00009E1A 00                      	db 0			; entries/line u.b. DIR
 42170                                  
 42171                                  ; 14/08/2024
 42172                                  %if 0
 42173                                  LINCNT:	db 0
 42174                                  LINLEN:	db 0
 42175                                  %endif
 42176                                  
 42177                                  LeftOnPage:
 42178 00009E1B 0000                    	dw 0			; lines left on page u.b. DIR
 42179                                  FileCnt:
 42180 00009E1D 0000                    	dw 0			; file count u.b. DIR
 42181                                  FileSiz:
 42182 00009E1F 00000000                	dd 0			; file size u.b. DIR
 42183                                  
 42184                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 42185                                  
 42186                                  FileCntTotal:
 42187 00009E23 00000000                	dd 0			; total file count u.b. DIR
 42188                                  FileSizTotal:
 42189 00009E27 00000000                	dd 0			; total file size u.b. DIR
 42190                                  
 42191                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 42192                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A33Fh
 42193                                  	; MSDOS 6.0
 42194                                  ;ifdef DBLSPACE_HOOKS
 42195                                  ccluUsed:
 42196 00009E2B 0000                    	dw 0			; count of DOS clusters used
 42197                                  ccluUsedDir:
 42198 00009E2D 0000                    	dw 0
 42199                                  ccluUsedTotal:
 42200 00009E2F 0000                    	dw 0
 42201                                  csecUsed:
 42202 00009E31 00000000                	dd 0			; count of comp sectors used
 42203                                  csecUsedDir:
 42204 00009E35 00000000                	dd 0
 42205                                  csecUsedTotal:
 42206 00009E39 00000000                	dd 0
 42207                                  
 42208                                  ; Note:  keep FileCntTotal through csecUsedTotal together!
 42209                                  
 42210                                  fhCVF:
 42211 00009E3D 0000                    	dw 0			; Compressed Volume File handle
 42212                                  szCVF:
 42213 00009E3F 00<rep 10h>             	times	16 db 0		; "X:\\12345678.123\0"
 42214                                  MDBPB:
 42215                                  	;MD_BPB	<>		; Extended MagicDrv BPB
 42216 00009E4F 00<rep 40h>             	times	64 db 0
 42217                                  csecPerCluster:
 42218 00009E8F 00                      	db 0			; sectors/cluster for ratio calc
 42219                                  fUseHostSize:
 42220 00009E90 00                      	db 0			; NZ if using host cluster size
 42221                                  cFATEntries:
 42222 00009E91 0000                    	dw 0			; # FAT entries in buffers
 42223                                  entInBuf:
 42224 00009E93 0000                    	dw 0			; 1st entry # in FAT buffers
 42225                                  segFATBuf:
 42226 00009E95 0000                    	dw 0			; seg of DOS & MD FAT buffers
 42227                                  pbufDOSFAT:
 42228 00009E97 0000                    	dw 0			; off of DOS FAT buffer
 42229                                  pbufMDFAT:
 42230 00009E99 0000                    	dw 0			; off of MD FAT buffer
 42231                                  bufDOSFAT:
 42232                                  	;times (cRES_FAT_ENTRIES*2) db 0
 42233 00009E9B 00<rep 40h>             	times 64 db 0	 	; small DOS FAT buffer
 42234                                  bufMDFAT:
 42235                                  	;times (cRES_FAT_ENTRIES*4) db 0
 42236 00009EDB 00<rep 80h>             	times 128 db 0		; small MD FAT buffer
 42237                                  ;endif
 42238                                  
 42239                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 42240                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A46Fh
 42241                                  CHARBUF:
 42242 00009F5B 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 42243                                  DESTFCB2:
 42244 00009FAB 00                      IDLEN:	db 0
 42245 00009FAC 00<rep 8h>              ID:	times	8  db 0
 42246 00009FB4 00<rep 3h>              COM:	times	3  db 0
 42247 00009FB7 00<rep 25h>             DEST:	times	37 db 0
 42248                                  DESTNAME:
 42249 00009FDC 00<rep Bh>              	times	11 db 0
 42250                                  DESTDIR:
 42251                                  DestFcb:
 42252 00009FE7 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 42253                                  GOTOLEN: ; word
 42254                                  BWDBUF:  ; byte
 42255                                  EXEFCB:  ; word
 42256 0000A02A 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 42257                                  
 42258                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 42259                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 42260                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 42261                                  DIRBUF_FDATE   equ DIRBUF+32  ; word
 42262                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 42263                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 42264                                  
 42265                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42266                                  
 42267                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42268                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A584h
 42269                                  SDIRBUF:
 42270 0000A070 00<rep Ch>              	times 12 db 0
 42271                                  _Bits:
 42272 0000A07C 0000                    	dw 0
 42273                                  PathCnt:
 42274 0000A07E 0000                    	dw 0
 42275                                  PathPos:
 42276 0000A080 0000                    	dw 0
 42277 0000A082 0000                    PathSw:	dw 0
 42278                                  AttrSpecified:
 42279 0000A084 00                      	db 0			; attribute bits u.b. DIR
 42280                                  AttrSelect:
 42281 0000A085 00                      	db 0			; attribute bits u.b. DIR
 42282 0000A086 00                      comma:	db 0			; flag set if +,, occurs
 42283                                  plus_comma:
 42284 0000A087 00                      	db 0			; flag set if +,, occurs
 42285                                  DirFlag:
 42286 0000A088 00                       	db 0			;AN015; set when pathcrunch called from DIR
 42287                                  parse_last:
 42288 0000A089 0000                    	dw 0			;AN018; used to hold parsing position
 42289                                  system_cpage:
 42290 0000A08B 0000                    	dw 0			;AC001; used for CHCP variable
 42291                                  ; 03/08/2024
 42292                                  ;Arg_Buf:
 42293                                  ;	times 128 db 0	
 42294                                  File_Size_Low:
 42295 0000A08D 0000                    	dw 0	
 42296                                  File_Size_High:
 42297 0000A08F 0000                    	dw 0		
 42298                                  string_ptr_2:
 42299 0000A091 0000                    	dw 0	
 42300                                  Copy_num:
 42301 0000A093 0000                    	dw 0
 42302                                  cpyflag:
 42303 0000A095 00                      	db 0
 42304                                  Dir_Num:
 42305 0000A096 0000                    	dw 0
 42306                                  
 42307                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42308                                  	; MSDOS 6.0
 42309                                  ;ifdef DBLSPACE_HOOKS
 42310                                  Dir_CRatio_1:
 42311 0000A098 00                      	db 0
 42312                                  Dir_CRatio_2:
 42313 0000A099 00                      	db 0
 42314                                  ;endif
 42315                                  
 42316                                  Bytes_Free:
 42317 0000A09A 00000000                	dd 0
 42318                                  
 42319                                  Major_Ver_Num:
 42320 0000A09E 0000                    	dw 0
 42321                                  Minor_Ver_Num:
 42322 0000A0A0 0000                    	dw 0
 42323                                  
 42324                                  One_Char_Val:
 42325 0000A0A2 00                      	db 0
 42326 0000A0A3 00                      	db 0
 42327                                  vol_drv:
 42328 0000A0A4 00                      	db 0
 42329                                  ROM_CALL:
 42330 0000A0A5 00                      	db 0			; flag for rom function
 42331 0000A0A6 0000                    ROM_IP:	dw 0
 42332 0000A0A8 0000                    ROM_CS:	dw 0
 42333                                  
 42334                                  DestVars:
 42335                                  DestIsDir:
 42336 0000A0AA 00                      	db 0
 42337                                  DestSiz:
 42338 0000A0AB 00                      	db 0
 42339                                  DestTail:
 42340 0000A0AC 0000                    	dw 0
 42341                                  DestInfo:
 42342 0000A0AE 00                      	db 0
 42343                                  DestBuf:
 42344 0000A0AF 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42345                                  EndDestBuf:
 42346                                  DESTHAND:
 42347 0000A106 0000                    	dw 0
 42348                                  DESTISDEV:
 42349 0000A108 00                      	db 0
 42350                                  FIRSTDEST:
 42351 0000A109 00                      	db 0
 42352                                  MELCOPY:
 42353 0000A10A 00                      	db 0
 42354                                  MELSTART:
 42355 0000A10B 0000                    	dw 0
 42356                                  SrcVars:
 42357                                  SrcIsDir:
 42358 0000A10D 00                      	db 0
 42359 0000A10E 00                      SrcSiz:	db 0
 42360                                  SrcTail:
 42361 0000A10F 0000                    	dw 0
 42362                                  SrcInfo:
 42363 0000A111 00                      	db 0
 42364                                  SrcBuf:
 42365 0000A112 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42366                                  SRCHAND:
 42367 0000A169 0000                    	dw 0
 42368                                  SRCISDEV:
 42369 0000A16B 00                      	db 0
 42370                                  ScanBuf:
 42371 0000A16C 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42372                                  
 42373 0000A1C3 0000                    SRCPT:	dw 0
 42374                                  INEXACT:
 42375 0000A1C5 00                      	db 0
 42376                                  NOWRITE:
 42377 0000A1C6 00                      	db 0
 42378                                  BINARY:
 42379 0000A1C7 00                      	db 0
 42380                                  WRITTEN:
 42381 0000A1C8 0000                    	dw 0
 42382                                  TERMREAD:
 42383 0000A1CA 00                      	db 0
 42384 0000A1CB 00                      ASCII:	db 0
 42385 0000A1CC 00                      PLUS:	db 0
 42386 0000A1CD 00                      objcnt:	db 0			; Used in copy
 42387 0000A1CE 0000                    CPDATE:	dw 0
 42388 0000A1D0 0000                    CPTIME:	dw 0
 42389                                  
 42390                                  OFilePtr_Lo:
 42391 0000A1D2 0000                    	dw 0			; original file ptr for COPY when
 42392                                  OFilePtr_Hi:
 42393 0000A1D4 0000                    	dw 0			; 1st source is also destination
 42394                                  zflag:	; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 42395 0000A1D6 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 42396                                  
 42397                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42398                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A76Bh
 42399                                  cox_sublist_buff:
 42400 0000A1D7 00<rep Bh>              	times 11 db 0
 42401                                  cox_y_override:
 42402 0000A1E2 00                      	db 0
 42403                                  cox_dest_file:
 42404 0000A1E3 00                      	db 0
 42405                                  cox_src_file:
 42406 0000A1E4 00                      	db 0
 42407                                  
 42408                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0A779h)
 42409                                  BATHAND:
 42410 0000A1E5 0000                    	dw 0			; Batch handle
 42411                                  STARTEL:
 42412 0000A1E7 0000                    	dw 0
 42413 0000A1E9 00                      ELCNT:	db 0
 42414 0000A1EA 00                      ELPOS:	db 0
 42415                                  
 42416                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 42417                                  ; MSDOS 5.0
 42418                                  SKPDEL:
 42419                                  	; 18/06/2023
 42420 0000A1EB 00                      	db 0	; MSDOS 6.22 (& MSDOS 5.0)
 42421 0000A1EC 00<rep Bh>              SOURCE:	times 11 db 0
 42422                                  
 42423                                  ext_entered:
 42424 0000A1F7 00                      	db 0			;AN005;
 42425                                  
 42426                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 42427                                  
 42428                                  Display_Ioctl:
 42429 0000A1F8 00                      	db 0			;AN000; info level
 42430 0000A1F9 00                      	db 0			;AN000; reserved
 42431 0000A1FA 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 42432 0000A1FC 0000                    	dw 0			;AN000; control flags
 42433                                  display_mode:
 42434 0000A1FE 00                      	db 0			;AN000; display mode, colors
 42435 0000A1FF 00                      	db 0			;AN000; reserved
 42436 0000A200 0000                    	dw 0			;AN023; colors
 42437 0000A202 0000                    	dw 0			;AN000; display width (PELS)
 42438 0000A204 0000                    	dw 0			;AN000; display length (PELS)
 42439                                  display_width:
 42440 0000A206 0000                    	dw 0			;AN000; display width
 42441                                  LinPerPag:
 42442 0000A208 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 42443                                  
 42444                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 42445 0000A20A 0000                    	dw 0			;AN000; info level
 42446                                  vol_serial:
 42447 0000A20C 00000000                	dd 0			;AN000; volume serial number
 42448                                  vol_label:
 42449 0000A210 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 42450 0000A21B 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 42451                                  
 42452                                  expand_star:
 42453 0000A223 00                      	db 0
 42454                                  
 42455                                  msg_flag:
 42456 0000A224 00                      	db 0			;AN022; flag set if non-utility message issued
 42457                                  Msg_Numb:
 42458 0000A225 0000                    	dw 0			;AN022; set with extended error message issued
 42459                                  append_exec:
 42460 0000A227 00                      	db 0			;AN041; set if internal append executed
 42461                                  print_err_flag:
 42462 0000A228 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 42463                                  subst_buffer:
 42464 0000A22A 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 42465                                  				;AN061;
 42466                                  ; 15/04/2023
 42467 0000A240 00                      KPARSE:	db 0	; 3/3/KK
 42468                                  
 42469                                  ; Data declarations taken out of parse.asm
 42470                                  
 42471                                  ; MSDOS 6.0
 42472                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 42473                                  ;argbufptr	dw	?		; index for argv[].argpointer
 42474                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 42475                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 42476                                  ;comptr		dw	?		; ptr into combuf
 42477                                  
 42478                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 42479                                  
 42480                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42481                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A7D5h
 42482                                  ARG:
 42483                                  ARG_ARGV:
 42484                                  ARGV0_ARGPOINTER:
 42485 0000A241 0000                    	dw 0	; ARGV[0]
 42486                                  ARGV0_ARG_FLAGS:
 42487 0000A243 00                      	db 0
 42488                                  ARGV0_ARGSTARTEL:
 42489 0000A244 0000                    	dw 0
 42490                                  ARGV0_ARGLEN:
 42491 0000A246 0000                    	dw 0
 42492                                  ARGV0_ARGSW_WORD:
 42493 0000A248 0000                    	dw 0
 42494                                  ARGV0_OCOMPTR:
 42495 0000A24A 0000                    	dw 0
 42496                                  ARGV1_ARGPOINTER:
 42497 0000A24C 0000                    	dw 0	; ARGV[1]
 42498 0000A24E 00<rep 5h>              	times 5 db 0
 42499                                  ARGV1_ARGSW_WORD:
 42500 0000A253 0000                    	dw 0
 42501 0000A255 0000                    	dw 0
 42502                                  ARGV2_ARGPOINTER:
 42503 0000A257 0000                    	dw 0	; ARGV[2]
 42504 0000A259 00<rep 5h>              	times 5 db 0
 42505                                  ARGV2_ARGSW_WORD:
 42506 0000A25E 0000                    	dw 0
 42507 0000A260 0000                    	dw 0
 42508 0000A262 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 42509                                  ARG_ARGVCNT:
 42510 0000A501 0000                    	dw 0
 42511                                  ARG_ARGSWINFO:
 42512 0000A503 0000                    	dw 0
 42513                                  ARG_ARGBUF:
 42514 0000A505 0000<rep 100h>          	times 256 dw 0	; times ARGBLEN dw 0 
 42515                                  ARG_ARGFORCOMBUF:
 42516 0000A705 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 42517                                  
 42518                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 42519                                  	; 18/06/2023
 42520                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0AD19h
 42521                                  ARGBUF_PTR:
 42522 0000A785 0000                    	dw 0			; index for argv[].argpointer
 42523                                  TPBUF:	;times 128 db 0		; temporary buffer
 42524                                  Arg_Buf:
 42525 0000A787 00<rep 80h>             	times 128 db 0	; 03/08/2024 (PCDOS 7.1 COMMAND.COM)
 42526                                  LASTARG:
 42527 0000A807 0000                    	dw 0			; point at which to accumulate switch info
 42528 0000A809 0000                    COMPTR:	dw 0			; ptr into combuf
 42529                                  
 42530                                  ; Data declarations taken out of path.asm
 42531                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 42532                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 42533                                  ;psep_char	DB	?		; '/' or '\'
 42534                                  ;search_best	DB	(?)		; best code, best filename so far
 42535                                  ;fname_max_len	equ	13
 42536                                  ;search_best_buf DB	fname_max_len DUP (?)
 42537                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 42538                                  ;search_error	DW	(?)		; address of error message to be printed
 42539                                  
 42540                                  FINDBUFLEN equ FIND_BUF.size ; 43
 42541                                  
 42542                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 42543                                  
 42544                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42545                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AD9Fh
 42546                                  
 42547 0000A80B 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 42548                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 42549                                  pathinfo:
 42550                                  ;pathinfo_0:
 42551 0000A836 0000                    	dw 0
 42552                                  ;pathinfo_2:
 42553 0000A838 0000                    	dw 0
 42554                                  ;pathinfo_4:
 42555 0000A83A 0000                    	dw 0
 42556                                  psep_char:
 42557 0000A83C 00                      	db 0
 42558                                  search_best:
 42559 0000A83D 00                      	db 0
 42560                                  FNAME_MAX_LEN equ 13
 42561                                  search_best_buf:
 42562 0000A83E 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 42563                                  search_curdir_buf:
 42564 0000A84B 00<rep 40h>             	times 64 db 0
 42565                                  search_error:
 42566 0000A88B 0000                    	dw 0
 42567                                  
 42568                                  ; Data declarations taken out of tbatch.asm
 42569                                  
 42570                                  ;if_not_count	DW	?
 42571                                  ;
 42572                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 42573                                  ;
 42574                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 42575                                  
 42576                                  ; 31/03/2023
 42577                                  ;STACK:	;LABEL	WORD
 42578                                  
 42579                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 42580                                  
 42581                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42582                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AE21h
 42583                                  
 42584                                  IF_NOT_COUNT:
 42585 0000A88D 0000                    	dw 0
 42586                                  ; 10/08/2024
 42587                                  ;zflag:	db 0
 42588                                  
 42589 0000A88F 90                      align 2 ; 18/06/2023
 42590                                  
 42591 0000A890 00<rep 100h>            	times 256 db 0
 42592                                  
 42593                                  	; 16/04/2023
 42594                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 42595                                  
 42596                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42597                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AF24h
 42598                                  STACK:
 42599                                  
 42600                                  ;INTERNATVARS	internat_block <>
 42601                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 42602                                  
 42603                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 42604                                  INTERNATVARS:
 42605                                  		; (24+8 = 32 bytes)
 42606                                  DATE_TIME_FORMAT:
 42607 0000A990 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 42608                                  CURRENCY_SYM:
 42609 0000A992 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 42610                                  THOUS_SEP:
 42611 0000A997 0000                    	db 0,0			; Thousands separator 2 bytes
 42612                                  DECIMAL_SEP:
 42613 0000A999 0000                    	db 0,0			; Decimal separator 2 bytes
 42614                                  DATE_SEP:
 42615 0000A99B 0000                    	db 0,0			; Date separator 2 bytes
 42616                                  TIME_SEP:
 42617 0000A99D 0000                    	db 0,0			; Time separator 2 bytes
 42618                                  BIT_FIELD:
 42619 0000A99F 00                      	db 0			; Bit values
 42620                                  				;   Bit 0 = 0 if currency symbol first
 42621                                  				;	  = 1 if currency symbol last
 42622                                  				;   Bit 1 = 0 if No space after currency symbol
 42623                                  				;	  = 1 if space after currency symbol
 42624                                  CURRENCY_CENTS:
 42625 0000A9A0 00                      	db 0			; Number of places after currency dec point
 42626                                  TIME_24:
 42627 0000A9A1 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 42628                                  MAP_CALL:
 42629 0000A9A2 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 42630                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 42631                                  				;  in pieces.
 42632                                  DATA_SEP:
 42633 0000A9A6 0000                    	db 0,0			; Data list separator character
 42634                                  
 42635 0000A9A8 00<rep 8h>              	times 8 db 0
 42636                                  
 42637                                  ; Max size of the block returned by the INTERNATIONAL call
 42638                                  
 42639                                  INTERNAT_BLOCK_SIZE EQU	32
 42640                                  
 42641                                  ;;	Buffer for DOS function 64h (Get extended country information)
 42642                                  ;;	subfunctions 2, 4, 6, or 7:
 42643                                  ;
 42644                                  ;CountryPtrInfo	label	byte
 42645                                  ;CountryPtrId	db	?
 42646                                  ;CountryPtr	dd	?
 42647                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 42648                                  	
 42649                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 42650                                  CountryPtrInfo:
 42651                                  CountryPtrId:	
 42652 0000A9B0 00                      	db 0
 42653                                  CountryPtr:
 42654 0000A9B1 00000000                	dd 0
 42655                                  
 42656                                  OldCtrlCHandler:
 42657 0000A9B5 00000000                	dd 0			; previous int 23 vector
 42658                                  
 42659                                  BATLEN equ 32
 42660                                  
 42661                                  BATBUFPOS:
 42662 0000A9B9 0000                    	dw 0			; integer position in buffer of next byte
 42663                                  
 42664 0000A9BB 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 42665                                  BATBUFEND:
 42666 0000A9DB 0000                    	dw 0
 42667                                  TypeFilSiz:
 42668 0000A9DD 00000000                	dd 0			; stores size of file to be typed
 42669                                  
 42670                                  ; *****************************************************
 42671                                  ; EMG 4.00
 42672                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 42673                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 42674                                  ; *****************************************************
 42675                                  ;
 42676                                  ; COMMON PARSE OUTPUT BLOCKS
 42677                                  
 42678                                  ; Common output blocks for PARSE number, complex, or string values.
 42679                                  
 42680                                  PARSE1_OUTPUT:
 42681                                  PARSE1_TYPE:
 42682 0000A9E1 00                      	db 0			;AN000;  type
 42683                                  PARSE1_CODE:
 42684 0000A9E2 00                      	db 0			;AN000;  return value
 42685                                  PARSE1_SYN:
 42686 0000A9E3 0000                    	dw 0			;AN000;  es offset of synonym
 42687                                  PARSE1_ADDR:
 42688 0000A9E5 00000000                	dd 0			;AN000;  numeric value / address
 42689                                  				;	 of string value
 42690                                  
 42691                                  ;  Common output block for PARSE date strings.
 42692                                  
 42693                                  DATE_OUTPUT:
 42694                                  DATE_TYPE:
 42695 0000A9E9 00                      	db 0			;AN000;  type
 42696 0000A9EA 00                      	db 0			;AN000;  return value
 42697 0000A9EB 0000                    	dw 0			;AN000;  es offset of synonym
 42698                                  DATE_YEAR:
 42699 0000A9ED 0000                    	dw 0			;AN000;  year
 42700                                  DATE_MONTH:
 42701 0000A9EF 00                      	db 0			;AN000;  month
 42702                                  DATE_DAY:
 42703 0000A9F0 00                      	db 0			;AN000;  day
 42704                                  
 42705                                  ;  Common output block for PARSE time strings.
 42706                                  
 42707                                  TIME_OUTPUT:
 42708                                  TIME_TYPE:
 42709 0000A9F1 00                      	db 0			;AN000;  type
 42710 0000A9F2 00                      	db 0			;AN000;  return value
 42711 0000A9F3 0000                    	dw 0			;AN000;  es offset of synonym
 42712                                  TIME_HOUR:
 42713 0000A9F5 00                      	db 0			;AN000;  hour
 42714                                  TIME_MINUTES:
 42715 0000A9F6 00                      	db 0			;AN000;  minutes
 42716                                  TIME_SECONDS:
 42717 0000A9F7 00                      	db 0			;AN000;  seconds
 42718                                  TIME_FRACTION:
 42719 0000A9F8 00                      	db 0			;AN000;  hundredths
 42720                                  
 42721                                  ;  Common output block for PARSE drive specifier (one based drive number).
 42722                                  
 42723                                  DRIVE_OUTPUT:
 42724                                  DRIVE_TYPE:
 42725 0000A9F9 00                      	db 0			;AN000;  type
 42726                                  DRIVE_VALUE:
 42727 0000A9FA 00                      	db 0			;AN000;  return value
 42728 0000A9FB 0000                    	dw 0			;AN000;  es offset of synonym
 42729                                  DRIVE_NUMBER:
 42730 0000A9FD 00                      	db 0			;AN000;  drive number
 42731 0000A9FE 000000                  	db 0,0,0		;AN000;  reserved
 42732                                  
 42733                                  	; 18/04/2023
 42734                                  	; 16/04/2023
 42735                                  ;TRANSPACEEND:	; 98C5h
 42736                                  		; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 42737                                  
 42738                                  	; 18/06/2023
 42739                                  ;TRANSPACEEND:	; 0AF95h 
 42740                                  		; End of MSDOS 6.22 COMMAND.COM (1994) Transient portion
 42741                                  
 42742                                  ; ----------------------------------------------------------------------------
 42743                                  ; 18/06/2023
 42744                                  ; 20/04/2023
 42745                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
