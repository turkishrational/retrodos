     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (MSDOS 6.22 Command Interpreter) - RETRO DOS v4.2 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update:  14/08/2024 (v6.22 - 2024 optimization)
     5                                  ;		19/06/2023 (v6.22) ((Previous: 05/05/2023 COMMAND.COM v5.0))
     6                                  ; ----------------------------------------------------------------------------
     7                                  ; Beginning: 21/04/2018 (COMMAND.COM v2.11) - 11/09/2018 (COMMAND.COM v3.30)
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15 (2.11)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	    ((nasm command6.s -l command6.lst -o COMMAND.COM)) 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    14                                  ; by Microsoft, 18/08/1983
    15                                  ; ****************************************************************************
    16                                  ; Modified from 'COMMAND5.S' (MSDOS 5.0 COMMAND.COM) source code
    17                                  ; in NASM syntax (by Erdogan Tan), 05/05/2023
    18                                  ; ----------------------------------------------------------------------------
    19                                  ; Modified from 'COMMAND3.S' (MSDOS 3.3 COMMAND.COM) source code
    20                                  ; in NASM syntax (by Erdogan Tan), 20/10/2018
    21                                  ; ----------------------------------------------------------------------------
    22                                  ;; 11/09/2018 - Erdogan Tan
    23                                  ; (Note: I haven't got MSDOS 3.3 COMMAND.COM src files; so, I need to continue
    24                                  ; by using disassembled COMMAND.COM -v3.30- and MSDOS 6.0 OS source files.)
    25                                  ; ----------------------------------------------------------------------------
    26                                  ; MSDOS 6.0 source files:
    27                                  ;;============================================================================
    28                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    29                                  ; (MSDOS 3.30 COMMAND.COM) output in TASM syntax (11/09/2018..29/09/2018)
    30                                  ;;============================================================================
    31                                  ;
    32                                  ; COMMAND.COM v6.0 source files:
    33                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    34                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    35                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    36                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    37                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    38                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    39                                  ;
    40                                  ; COMMAND.COM v2.11 source files:
    41                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    42                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    43                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    44                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    45                                  ;
    46                                  ; ----------------------------------------------------------------------------
    47                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    48                                  
    49                                  ;============================================================================
    50                                  ; MSDOS 6.22 COMMAND.COM, DISASSEMBLED by Erdogan Tan, 17/05/2023-05/06/2023
    51                                  ;============================================================================
    52                                  
    53                                  ; -=========================================================================¬
    54                                  ; ¦     This file is generated by The Interactive Disassembler (IDA)        ¦
    55                                  ; ¦     Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>           ¦
    56                                  ; ¦                      Licensed to: Freeware version                      ¦
    57                                  ; L=========================================================================-
    58                                  ;
    59                                  ; Input MD5   : FAF051453F215165981F10BD73071D88
    60                                  ;
    61                                  ; File Name   : C:\Users\Erdo­an\Desktop\COMMAND.COM
    62                                  ; Format      : MS-DOS COM-file
    63                                  ; Base Address: 0h Range: 100h-D675h Loaded length: D575h
    64                                  
    65                                  ;============================================================================
    66                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    67                                  ;============================================================================
    68                                  ; 21/09/2018 - Retro DOS v3.0
    69                                  
    70                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    71                                  ;BREAK <system call definitions>
    72                                  
    73                                  ;
    74                                  ;	Microsoft Confidential
    75                                  ;	Copyright (C) Microsoft Corporation 1991
    76                                  ;	All Rights Reserved.
    77                                  ;
    78                                  
    79                                  ;SUBTTL	system call definitions
    80                                  ;PAGE
    81                                  
    82                                  Abort				EQU 0	;  0	  0
    83                                  STD_CON_INPUT			EQU 1	;  1	  1
    84                                  Std_Con_Output			EQU 2	;  2	  2
    85                                  Std_Aux_Input			EQU 3	;  3	  3
    86                                  Std_Aux_Output			EQU 4	;  4	  4
    87                                  Std_Printer_Output		EQU 5	;  5	  5
    88                                  Raw_Con_IO			EQU 6	;  6	  6
    89                                  RAW_CON_INPUT			EQU 7	;  7	  7
    90                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    91                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    92                                  Std_Con_String_Input		EQU 10	; 10	  A
    93                                  Std_Con_Input_Status		EQU 11	; 11	  B
    94                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    95                                  DISK_RESET			EQU 13	; 13	  D
    96                                  Set_Default_Drive		EQU 14	; 14	  E
    97                                  FCB_Open			EQU 15	; 15	  F
    98                                  FCB_Close			EQU 16	; 16	 10
    99                                  Dir_Search_First		EQU 17	; 17	 11
   100                                  Dir_Search_Next 		EQU 18	; 18	 12
   101                                  FCB_Delete			EQU 19	; 19	 13
   102                                  FCB_Seq_Read			EQU 20	; 20	 14
   103                                  FCB_Seq_Write			EQU 21	; 21	 15
   104                                  FCB_Create			EQU 22	; 22	 16
   105                                  FCB_Rename			EQU 23	; 23	 17
   106                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
   107                                  Set_DMA 			EQU 26	; 26	 1A
   108                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   109                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   110                                  ;									   ;
   111                                  Get_Default_DPB 		EQU 31	; 31	 1F
   112                                  ;									   ;
   113                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   115                                  FCB_Random_Read 		EQU 33	; 33	 21
   116                                  FCB_Random_Write		EQU 34	; 34	 22
   117                                  Get_FCB_File_Length		EQU 35	; 35	 23
   118                                  Get_FCB_Position		EQU 36	; 36	 24
   119                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   120                                  Create_Process_Data_Block	EQU 38	; 38	 26
   121                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   122                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   123                                  Parse_File_Descriptor		EQU 41	; 41	 29
   124                                  Get_Date			EQU 42	; 42	 2A
   125                                  Set_Date			EQU 43	; 43	 2B
   126                                  Get_Time			EQU 44	; 44	 2C
   127                                  Set_Time			EQU 45	; 45	 2D
   128                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   129                                  ; Extended functionality group
   130                                  Get_DMA 			EQU 47	; 47	 2F
   131                                  GET_VERSION			EQU 48	; 48	 30
   132                                  Keep_Process			EQU 49	; 49	 31
   133                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   134                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   135                                  ;									   ;
   136                                  Get_DPB 			EQU 50	; 50	 32
   137                                  ;									   ;
   138                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   139                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   140                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   141                                  Get_InDOS_Flag			EQU 52	; 52	 34
   142                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   143                                  Get_Drive_Freespace		EQU 54	; 54	 36
   144                                  CHAR_OPER			EQU 55	; 55	 37
   145                                  International			EQU 56	; 56	 38
   146                                  ;   Directory Group
   147                                  MKDir				EQU 57	; 57	 39
   148                                  RMDir				EQU 58	; 58	 3A
   149                                  CHDir				EQU 59	; 59	 3B
   150                                  ;   File Group
   151                                  Creat				EQU 60	; 60	 3C
   152                                  OPEN				EQU 61	; 61	 3D
   153                                  CLOSE				EQU 62	; 62	 3E
   154                                  READ				EQU 63	; 63	 3F
   155                                  Write				EQU 64	; 64	 40
   156                                  Unlink				EQU 65	; 65	 41
   157                                  LSEEK				EQU 66	; 66	 42
   158                                  CHMod				EQU 67	; 67	 43
   159                                  IOCTL				EQU 68	; 68	 44
   160                                  XDUP				EQU 69	; 69	 45
   161                                  XDup2				EQU 70	; 70	 46
   162                                  Current_Dir			EQU 71	; 71	 47
   163                                  ;    Memory Group
   164                                  ALLOC				EQU 72	; 72	 48
   165                                  DEALLOC				EQU 73	; 73	 49
   166                                  SETBLOCK			EQU 74	; 74	 4A
   167                                  ;    Process Group
   168                                  Exec				EQU 75	; 75	 4B
   169                                  EXIT				EQU 76	; 76	 4C
   170                                  WAITPROCESS			EQU 77	; 77	 4D
   171                                  Find_First			EQU 78	; 78	 4E
   172                                  ;   Special Group
   173                                  Find_Next			EQU 79	; 79	 4F
   174                                  ; SPECIAL SYSTEM GROUP
   175                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   176                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   177                                  ;									   ;
   178                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   179                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   180                                  Get_In_Vars			EQU 82	; 82	 52
   181                                  SetDPB				EQU 83	; 83	 53
   182                                  ;									   ;
   183                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   184                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   185                                  Get_Verify_On_Write		EQU 84	; 84	 54
   186                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   187                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   188                                  ;									   ;
   189                                  Dup_PDB 			EQU 85	; 85	 55
   190                                  ;									   ;
   191                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   192                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   193                                  Rename				EQU 86	; 86	 56
   194                                  File_Times			EQU 87	; 87	 57
   195                                  AllocOper			EQU 88	; 88	 58
   196                                  ; Network extention system calls
   197                                  GetExtendedError		EQU 89	; 89	 59
   198                                  CreateTempFile			EQU 90	; 90	 5A
   199                                  CreateNewFile			EQU 91	; 91	 5B
   200                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   201                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   202                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   203                                  ;									   ;
   204                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   205                                  					;	    CloseByName, CloseUser,
   206                                  					;	    CloseUserProcess,
   207                                  					;	    GetOpenFileList
   208                                  ;									   ;
   209                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   210                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   211                                  UserOper			EQU 94	; 94	 5E Get and Set
   212                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   213                                  xNameTrans			EQU 96	; 96	 60
   214                                  PathParse			EQU 97	; 97	 61
   215                                  GetCurrentPSP			EQU 98	; 98	 62
   216                                  Hongeul 			EQU 99	; 99	 63
   217                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   218                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   219                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   220                                  ;									   ;
   221                                  Set_Printer_Flag		EQU 100 ; 100	 64
   222                                  ;									   ;
   223                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   224                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   225                                  GetExtCntry			EQU 101 ; 101	 65
   226                                  GetSetCdPg			EQU 102 ; 102	 66
   227                                  ExtHandle			EQU 103 ; 103	 67
   228                                  Commit				EQU 104 ; 104	 68
   229                                  GetSetMediaID			EQU 105 ; 105	 69
   230                                  IFS_IOCTL			EQU 107 ; 107	 6B
   231                                  ExtOpen 			EQU 108 ; 108	 6C
   232                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   233                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   234                                  ;                                                                          ;
   235                                  ;ifdef ROMEXEC
   236                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   237                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   238                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   239                                  ;endif
   240                                  ;                                                                          ;
   241                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   242                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   243                                  ;
   244                                  ;
   245                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   246                                  OEM_C1				EQU 249 ; 249	 F9
   247                                  OEM_C2				EQU 250 ; 250	 FA
   248                                  OEM_C3				EQU 251 ; 251	 FB
   249                                  OEM_C4				EQU 252 ; 252	 FC
   250                                  OEM_C5				EQU 253 ; 253	 FD
   251                                  OEM_C6				EQU 254 ; 254	 FE
   252                                  OEM_C7				EQU 255 ; 255	 FF
   253                                  
   254                                  ;============================================================================
   255                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   256                                  ;============================================================================
   257                                  ; 21/09/2018 - Retro DOS v3.0
   258                                  
   259                                  ;BREAK <Control character definitions>
   260                                  
   261                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   262                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   263                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   264                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   265                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   266                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   267                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   268                                  c_HT	    EQU     09h 	; ^I ASCII tab
   269                                  
   270                                  ;============================================================================
   271                                  ; DIRENT.INC, MSDOS 6.0, 1991
   272                                  ;============================================================================
   273                                  ; 21/09/2018 - Retro DOS v3.0
   274                                  
   275                                  ;Break <Directory entry>
   276                                  
   277                                  ;	NOTE:  These offsets are also used in the DTA for
   278                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   279                                  ;	with the FCB filename field, and the rest of the
   280                                  ;	DIR_ENTRY fields follow. -DavidOls
   281                                  
   282                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   283                                  ;
   284                                  ;	+---------------------------+
   285                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   286                                  ;	+---------------------------+
   287                                  ;	|     (BYTE) attributes     |	    11	    B
   288                                  ;	+---------------------------+
   289                                  ;	|    (10 BYTE) reserved     |	    12	    C
   290                                  ;	+---------------------------+
   291                                  ;	| (WORD) time of last write |	    22	    16
   292                                  ;	+---------------------------+
   293                                  ;	| (WORD) date of last write |	    24	    18
   294                                  ;	+---------------------------+
   295                                  ;	|   (WORD) First cluster    |	    26	    1A
   296                                  ;	+---------------------------+
   297                                  ;	|     (DWORD) file size     |	    28	    1C
   298                                  ;	+---------------------------+
   299                                  ;
   300                                  ;   First byte of filename  = E5 -> free directory entry
   301                                  ;			    = 00 -> end of allocated directory
   302                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   303                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   304                                  ;
   305                                  
   306                                  STRUC DIR_ENTRY
   307 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   308 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   309 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   310 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   311 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   312 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   313 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   314 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   315 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   316 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   317 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   318                                  .size:
   319                                  
   320                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   321                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   322                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   323                                  ;	    this field is zero for subdirectory files.
   324                                  
   325                                  ENDSTRUC
   326                                  
   327                                  ATTR_READ_ONLY	equ	 1h
   328                                  ATTR_HIDDEN	equ	 2h
   329                                  ATTR_SYSTEM	equ	 4h
   330                                  ATTR_VOLUME_ID	equ	 8h
   331                                  ATTR_DIRECTORY	equ	10h
   332                                  ATTR_ARCHIVE	equ	20h
   333                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   334                                  				;   NO directory entry on a disk EVER
   335                                  				;   has this bit set. It is set non-zero
   336                                  				;   when a device is found by GETPATH
   337                                  
   338                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   339                                  				; OR of hard attributes for FINDENTRY
   340                                  
   341                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   342                                  				; ignore this(ese) attribute(s) during
   343                                  				; search first/next
   344                                  
   345                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   346                                  				; changeable via CHMOD
   347                                  
   348                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   349                                  
   350                                  ;============================================================================
   351                                  ; ERROR.INC, MSDOS 6.0, 1991
   352                                  ;============================================================================
   353                                  ; 21/09/2018 - Retro DOS v3.0
   354                                  
   355                                  ;**	ERROR.INC - DOS Error Codes
   356                                  ;
   357                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   358                                  ;    return error codes through AX.	If an error occurred then
   359                                  ;    the carry bit will be set and the error code is in AX.	If no error
   360                                  ;    occurred then the carry bit is reset and AX contains returned info.
   361                                  ;
   362                                  ;    Since the set of error codes is being extended as we extend the operating
   363                                  ;    system, we have provided a means for applications to ask the system for a
   364                                  ;    recommended course of action when they receive an error.
   365                                  ;
   366                                  ;    The GetExtendedError system call returns a universal error, an error
   367                                  ;    location and a recommended course of action.	The universal error code is
   368                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   369                                  ;    is issued.
   370                                  
   371                                  
   372                                  ;	2.0 error codes
   373                                  
   374                                  error_invalid_function		EQU	1
   375                                  ERROR_FILE_NOT_FOUND		EQU	2
   376                                  ERROR_PATH_NOT_FOUND		EQU	3
   377                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   378                                  ERROR_ACCESS_DENIED		EQU	5
   379                                  error_invalid_handle		EQU	6
   380                                  error_arena_trashed		EQU	7
   381                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   382                                  error_invalid_block		EQU	9
   383                                  error_bad_environment		EQU	10
   384                                  ERROR_BAD_FORMAT		EQU	11
   385                                  error_invalid_access		EQU	12
   386                                  ERROR_INVALID_DATA		EQU	13
   387                                  ;**** reserved			EQU	14	; *****
   388                                  error_invalid_drive		EQU	15
   389                                  error_current_directory 	EQU	16
   390                                  error_not_same_device		EQU	17
   391                                  ERROR_NO_MORE_FILES		EQU	18
   392                                  
   393                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   394                                  
   395                                  ERROR_WRITE_PROTECT		EQU	19
   396                                  error_bad_unit			EQU	20
   397                                  error_not_ready 		EQU	21
   398                                  error_bad_command		EQU	22
   399                                  error_CRC			EQU	23
   400                                  error_bad_length		EQU	24
   401                                  error_Seek			EQU	25
   402                                  error_not_DOS_disk		EQU	26
   403                                  error_sector_not_found		EQU	27
   404                                  error_out_of_paper		EQU	28
   405                                  error_write_fault		EQU	29
   406                                  error_read_fault		EQU	30
   407                                  ERROR_GEN_FAILURE		EQU	31
   408                                  
   409                                  ;	the new 3.0 error codes reported through INT 24
   410                                  
   411                                  error_sharing_violation 	EQU	32
   412                                  error_lock_violation		EQU	33
   413                                  error_wrong_disk		EQU	34
   414                                  ERROR_FCB_UNAVAILABLE		EQU	35
   415                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   416                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   417                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   418                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   419                                  
   420                                  ;	New OEM network-related errors are 50-79
   421                                  
   422                                  error_not_supported		EQU	50
   423                                  
   424                                  error_net_access_denied		EQU	65	;M028
   425                                  
   426                                  ;	End of INT 24 reportable errors
   427                                  
   428                                  error_file_exists		EQU	80
   429                                  error_DUP_FCB			EQU	81	; *****
   430                                  error_cannot_make		EQU	82
   431                                  error_FAIL_I24			EQU	83
   432                                  
   433                                  ;	New 3.0 network related error codes
   434                                  
   435                                  error_out_of_structures 	EQU	84
   436                                  error_Already_assigned		EQU	85
   437                                  error_invalid_password		EQU	86
   438                                  error_invalid_parameter 	EQU	87
   439                                  error_NET_write_fault		EQU	88
   440                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   441                                  
   442                                  ;============================================================================
   443                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   444                                  ;============================================================================
   445                                  ; 22/09/2018 - Retro DOS v3.0
   446                                  
   447                                  ;**	DevSym.inc - Device Symbols
   448                                  
   449                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   450                                  
   451                                  STRUC SYSDEV
   452 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   453 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   454 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   455 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   456 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   457                                  .size:
   458                                  ENDSTRUC
   459                                  
   460                                  ; 24/09/2018
   461                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   462                                  
   463                                  ;============================================================================
   464                                  ; CURDIR.INC, MSDOS 6.0, 1991
   465                                  ;============================================================================
   466                                  ; 21/09/2018 - Retro DOS v3.0
   467                                  
   468                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   469                                  
   470                                  ;============================================================================
   471                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   472                                  ;============================================================================
   473                                  ; 21/09/2018 - Retro DOS v3.0
   474                                  
   475                                  ;/*
   476                                  ; *                      Microsoft Confidential
   477                                  ; *                      Copyright (C) Microsoft Corporation 1991
   478                                  ; *                      All Rights Reserved.
   479                                  ; */
   480                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   481                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   482                                  ;*************************************
   483                                  ; COMMAND EQUs which are not switch dependant
   484                                  
   485                                  ;		include	curdir.inc	; to get DIRSTRLEN
   486                                  ;		Note dossym.inc must already have been included!
   487                                  
   488                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   489                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   490                                  
   491                                  SYM		EQU	">"
   492                                  
   493                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   494                                  
   495                                  NORMPERLIN	EQU	1
   496                                  WIDEPERLIN	EQU	5
   497                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   498                                  BatLen		EQU	32		; buffer for batch files
   499                                  YES_ECHO	EQU	1		; echo line
   500                                  NO_ECHO 	EQU	0		; don't echo line
   501                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   502                                  call_in_progress EQU	1		; indicate we're in the CALL command
   503                                  length_call	EQU	4		; length of CALL
   504                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   505                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   506                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   507                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   508                                  nullcommand	EQU     1		; no command on command line
   509                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   510                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   511                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   512                                  result_number	EQU	1		;AN000; number returned from parser
   513                                  result_string	EQU	3		;AN000; string returned from parser
   514                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   515                                  result_drive	EQU	6		;AN000; drive returned from parser
   516                                  result_date	EQU	7		;AN000; date returned from parser
   517                                  result_time	EQU	8		;AN000; time returned from parser
   518                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   519                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   520                                  util_msg_class	EQU	-1		;AN000; message class for utility
   521                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   522                                  parse_msg_class EQU	2		;AN000; message class for parse error
   523                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   524                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   525                                  colon_char	EQU	":"             ;AN000; colon character
   526                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   527                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   528                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   529                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   530                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   531                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   532                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   533                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   534                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   535                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   536                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   537                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   538                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   539                                  parm_block_size equ	11		;AN000; size of message subst block
   540                                  blank		equ	" "             ;AN000; blank character
   541                                  no_subst	equ	0		;AN000; no substitutions for messages
   542                                  one_subst	equ	1		;AN000; one substitution for messages
   543                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   544                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   545                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   546                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   547                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   548                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   549                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   550                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   551                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   552                                  capital_A	equ	'A'             ;AC000;
   553                                  vbar		equ	'|'             ;AC000;
   554                                  labracket	equ	'<'             ;AC000;
   555                                  rabracket	equ	'>'             ;AC000;
   556                                  dollar		equ	'$'             ;AC000;
   557                                  lparen		equ	'('             ;AC000;
   558                                  rparen		equ	')'             ;AC000;
   559                                  nullrparen	equ	29h		;AC000;
   560                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   561                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   562                                  star		equ	'*'             ;AC000;
   563                                  plus_chr	equ	'+'             ;AC000;
   564                                  small_a 	equ	'a'             ;AC000;
   565                                  small_z 	equ	'z'             ;AC000;
   566                                  dot_chr 	equ	'.'             ;AC000;
   567                                  tab_chr 	equ	9		;AN032;
   568                                  equal_chr	equ	'='             ;AN032;
   569                                  semicolon	equ	';'             ;AN049;
   570                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   571                                  dot_colon	equ	2e3ah		;AC000; '.:'
   572                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   573                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   574                                  AppendInstall	equ	0B700H		;AN020; append install check
   575                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   576                                  AppendGetState	equ	0B706H		;AN020; append get current state
   577                                  AppendSetState	equ	0B707H		;AN020; append set current state
   578                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   579                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   580                                  
   581                                  ;*************************************
   582                                  ;* PARSE ERROR MESSAGES
   583                                  ;*************************************
   584                                  
   585                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   586                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   587                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   588                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   589                                  
   590                                  ;*************************************
   591                                  ;* EQUATES FOR MESSAGE RETRIEVER
   592                                  ;*************************************
   593                                  
   594                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   595                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   596                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   597                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   598                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   599                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   600                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   601                                  
   602                                  ;*********************************
   603                                  ;* EQUATES FOR INT 10H
   604                                  ;*********************************
   605                                  
   606                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   607                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   608                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   609                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   610                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   611                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   612                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   613                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   614                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   615                                  
   616                                  AltPipeChr	equ	"|"             ; alternate pipe character
   617                                  
   618                                  FCB		equ	5Ch
   619                                  
   620                                  STRUC VARSTRUC
   621 00000000 ??                      .ISDIR:		RESB	1
   622 00000001 ??                      .SIZ:		RESB	1
   623 00000002 ????                    .TTAIL:		RESW	1
   624 00000004 ??                      .INFO:		RESB	1
   625 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   626                                  .size:
   627                                  ENDSTRUC
   628                                  ;
   629                                  ; Flags for internal command parsing
   630                                  ;
   631                                  fCheckDrive	equ	00000001b	; validate drive letter
   632                                  fSwitchAllowed	equ	00000010b	; switches allowed
   633                                  fLimitHelp	equ	00000100b	; /? must appear alone
   634                                  
   635                                  ;
   636                                  ; Test switches
   637                                  ;
   638                                  fParse		EQU	0001h		; display results of parseline
   639                                  
   640                                  ;
   641                                  ; Batch segment structure
   642                                  ;
   643                                  ;   BYTE    type of segment
   644                                  ;   BYTE    echo state of parent on entry to batch file
   645                                  ;   WORD    segment of last batch file
   646                                  ;   WORD    segment for FOR command
   647                                  ;   BYTE    FOR flag state on entry to batch file
   648                                  ;   DWORD   offset for next line
   649                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   650                                  ;   ASCIZ   file name (with . and ..)
   651                                  ;   BYTES   CR-terminated parameters
   652                                  ;   BYTE    0 flag to indicate end of parameters
   653                                  ;
   654                                  
   655                                  BATCHTYPE   equ 0
   656                                  
   657                                  STRUC BATCHSEGMENT
   658 00000000 ??                      .BatType:	RESB	1		; signature
   659 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   660                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   661 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   662 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   663 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   664 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   665 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   666 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   667 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   668                                  .SIZE:
   669                                  ENDSTRUC
   670                                  
   671                                  ANULL		equ	0		; terminates an argv string
   672                                  ARGMAX		equ	64		; max args on a command line
   673                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   674                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   675                                  ARGBLEN 	equ	2*64
   676                                  tplen		equ	64		; max size of one argument
   677                                  arg_cnt_error	equ	1		; number of args > MAXARG
   678                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   679                                  
   680                                  STRUC ARGV_ELE				; elements in the argv array
   681 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   682 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   683 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   684 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   685 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   686 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   687                                  .SIZE:	; 11 ; 27/07/2024
   688                                  ENDSTRUC
   689                                  
   690                                  STRUC ARG_UNIT
   691 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE
   692 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   693 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   694 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   695 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   696                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   697                                  ENDSTRUC
   698                                  
   699                                  ; Equates for initialization
   700                                  ;
   701                                  INITINIT	equ	01h		; initialization in progress
   702                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   703                                  INITCTRLC	equ	04h		; already in ^C handler
   704                                  
   705                                  ;============================================================================
   706                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   707                                  ;============================================================================
   708                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   709                                  
   710                                  ; Current structure of the data returned by the international call
   711                                  
   712                                  struc INTERNAT_BLOCK
   713 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   714 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   715 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   716 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   717 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   718 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   719 0000000F ??                      .bit_field:	resb 1			; Bit values
   720                                  					;   Bit 0 = 0 if currency symbol first
   721                                  					;	  = 1 if currency symbol last
   722                                  					;   Bit 1 = 0 if No space after currency symbol
   723                                  					;	  = 1 if space after currency symbol
   724                                  .currency_cents:
   725 00000010 ??                      		resb 1			; Number of places after currency dec point
   726 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   727 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   728                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   729                                  					;  in pieces.
   730 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   731 00000017 ??                      		resb 1
   732                                  endstruc
   733                                  
   734                                  ; Max size of the block returned by the INTERNATIONAL call
   735                                  
   736                                  internat_block_max equ 32
   737                                  
   738                                  ;============================================================================
   739                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   740                                  ;============================================================================
   741                                  ; 13/10/2018 - Retro DOS v3.0
   742                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   743                                  
   744                                  ;Break	<find first/next buffer>
   745                                  
   746                                  	; MSDOS 3.3 & MSDOS 6.0
   747                                  
   748                                  struc FIND_BUF
   749 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   750 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   751 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   752 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   753 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   754 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   755 00000015 ??                      .ATTR:	    resb 1	; attribute found
   756 00000016 ????                    .TIMR:	    resw 1	; time
   757 00000018 ????                    .DATE:	    resw 1	; date
   758 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   759 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   760 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   761                                  .size:
   762                                  endstruc
   763                                  
   764                                  ;=============================================================================
   765                                  ; PDB.INC, MSDOS 6.0, 1991
   766                                  ;=============================================================================
   767                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   768                                  
   769                                  ;**	Process data block (otherwise known as program header)
   770                                  
   771                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   772                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   773                                  ;	for use.
   774                                  
   775                                  FILPERPROC	EQU     20
   776                                  
   777                                  struc PDB	; Process_data_block
   778 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   779 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   780 00000004 ??                                      resb 1
   781 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   782 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   783 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   784 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   785 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   786 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   787 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   788 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   789 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   790 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   791 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   792 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   793 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   794 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   795 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   796 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   797 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   798 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   799                                  				;  an extended FCB
   800                                  ;endstruc 	; MSDOS 3.3
   801                                  	  	; MSDOS 6.0
   802 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   803 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   804 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   805 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   806                                  endstruc
   807                                  
   808                                  ;=============================================================================
   809                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   810                                  ;=============================================================================
   811                                  ; 24/09/2018 - Retro DOS v3.0
   812                                  
   813                                  ;major_version	equ 6		; Major DOS version
   814                                  ;minor_version	equ 0		; Minor DOS Version
   815                                  
   816                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   817                                  
   818                                  ; MSDOS 3.3 COMMAND.COM
   819                                  ;MAJOR_VERSION	EQU 3
   820                                  ;MINOR_VERSION	EQU 30
   821                                  
   822                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   823                                  ;MAJOR_VERSION	EQU 5		; Major DOS version
   824                                  ;MINOR_VERSION	EQU 0		; Minor DOS version
   825                                  
   826                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
   827                                  MAJOR_VERSION	EQU 6		; Major DOS version
   828                                  MINOR_VERSION	EQU 22		; Minor DOS version
   829                                  
   830                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   831                                  
   832                                  ;-----------------------------------------------------------------------------
   833                                  ; 21/09/2018
   834                                  ;-----------------------------------------------------------------------------
   835                                  ; Retro DOS v3.0 NOTE:  
   836                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   837                                  ;	with minor modifications which are done by me (Erdogan Tan).
   838                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   839                                  ;	source code files (written by using MASM syntax).
   840                                  ;-----------------------------------------------------------------------------
   841                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   842                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   843                                  ;----------------------------------------------------------------------------- 	
   844                                  
   845                                  ;=============================================================================
   846                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   847                                  ;=============================================================================
   848                                  ; 21/09/2018 - Retro DOS v3.0
   849                                  
   850                                  ;	page ,132
   851                                  ;	title	COMMAND - resident code for COMMAND.COM
   852                                  ;	name	COMMAND
   853                                  
   854                                  ;/*
   855                                  ; *                      Microsoft Confidential
   856                                  ; *                      Copyright (C) Microsoft Corporation 1991
   857                                  ; *                      All Rights Reserved.
   858                                  ; */
   859                                  
   860                                  ;*****************************************************************************
   861                                  ;
   862                                  ; MODULE:	       COMMAND.COM
   863                                  ;
   864                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   865                                  ;
   866                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   867                                  ;		       parts.  First is the resident portion, which includes
   868                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   869                                  ;		       error), and 2EH (command line execute); it also has
   870                                  ;		       code to test and, if necessary, reload the transient
   871                                  ;		       portion. Following the resident is the init code, which
   872                                  ;		       is overwritten after use.  Then comes the transient
   873                                  ;		       portion, which includes all command processing (whether
   874                                  ;		       internal or external).  The transient portion loads at
   875                                  ;		       the end of physical memory, and it may be overlayed by
   876                                  ;		       programs that need as much memory as possible. When the
   877                                  ;		       resident portion of command regains control from a user
   878                                  ;		       program, a check sum is performed on the transient
   879                                  ;		       portion to see if it must be reloaded.  Thus programs
   880                                  ;		       which do not need maximum memory will save the time
   881                                  ;		       required to reload COMMAND when they terminate.
   882                                  ;
   883                                  ; ENTRY POINT:	       PROGSTART
   884                                  ;
   885                                  ; INPUT:	       command line at offset 81H
   886                                  ;
   887                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   888                                  ;		       from a secondary command processor via the EXIT
   889                                  ;		       internal command.
   890                                  ;
   891                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   892                                  ;		       hang the system.
   893                                  ;
   894                                  ; INTERNAL REFERENCES:
   895                                  ;
   896                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   897                                  ;		       (COMMAND.DOC)
   898                                  ;
   899                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   900                                  ;		       (COMMAND.DOC)
   901                                  ;
   902                                  ; EXTERNAL REFERENCES:
   903                                  ;
   904                                  ;      ROUTINES:       none
   905                                  ;
   906                                  ;      DATA AREAS:     none
   907                                  ;
   908                                  ;*****************************************************************************
   909                                  ;
   910                                  ;			      REVISION HISTORY
   911                                  ;			      ----------------
   912                                  ;
   913                                  ; DOS 1.00 to DOS 3.30
   914                                  ; --------------------------
   915                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   916                                  ;
   917                                  ; REV 1.17
   918                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   919                                  ;	       resident since the EXELOAD may have overwritten the transient.
   920                                  ;
   921                                  ; REV 1.18
   922                                  ;    05/21/82  IBM version always looks on drive A
   923                                  ;	       MSVER always looks on default drive
   924                                  ;
   925                                  ; REV 1.19
   926                                  ;    06/03/82  Drive spec now entered in command line
   927                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   928                                  ;	       (print volume label)
   929                                  ;
   930                                  ; REV 1.20
   931                                  ;    06/09/82  Prints "directory" after directories
   932                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   933                                  ;
   934                                  ; REV 1.50
   935                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   936                                  ;	       do it right.
   937                                  ;
   938                                  ; REV 1.70
   939                                  ;	       EXEC used to fork off new processes
   940                                  ;
   941                                  ; REV 1.80
   942                                  ;	       C switch for single command execution
   943                                  ;
   944                                  ; REV 1.90
   945                                  ;	       Batch uses XENIX
   946                                  ;
   947                                  ; Rev 2.00
   948                                  ;	       Lots of neato stuff
   949                                  ;	       IBM 2.00 level
   950                                  ;
   951                                  ; Rev 2.01
   952                                  ;	       'D' switch for date time suppression
   953                                  ;
   954                                  ; Rev 2.02
   955                                  ;	       Default userpath is NUL rather than BIN
   956                                  ;		       same as IBM
   957                                  ;	       COMMAND split into pieces
   958                                  ;
   959                                  ; Rev 2.10
   960                                  ;	       INTERNATIONAL SUPPORT
   961                                  ;
   962                                  ; Rev 2.50
   963                                  ;	       all the 2.x new stuff -MU
   964                                  ;
   965                                  ; Rev 3.30     (Ellen G)
   966                                  ;	       CALL internal command (TBATCH2.ASM)
   967                                  ;	       CHCP internal command (TCMD2B.ASM)
   968                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   969                                  ;	       @ sign suppression of batch file line
   970                                  ;	       Replaceable environment value support in batch files
   971                                  ;	       INT 2FH calls for APPEND
   972                                  ;	       Lots of PTR fixes!
   973                                  ;
   974                                  ; Beyond 3.30 to forever  (Ellen G)
   975                                  ; ----------------------
   976                                  ;
   977                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   978                                  ;			Use Message Retriever services
   979                                  ;			/MSG switch for resident extended error msg
   980                                  ;			Convert to new capitalization support
   981                                  ;			Better error recovery on CHCP command
   982                                  ;			Code page file tag support
   983                                  ;			TRUENAME internal command
   984                                  ;			Extended screen line support
   985                                  ;			/P switch on DEL/ERASE command
   986                                  ;			Improved file redirection error recovery
   987                                  ;	(removed)	Improved batch file performance
   988                                  ;			Unconditional DBCS support
   989                                  ;			Volume serial number support
   990                                  ;	(removed)	COMMENT=?? support
   991                                  ;
   992                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   993                                  ;
   994                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   995                                  ;			require delimiters.
   996                                  ;
   997                                  ; A003	PTM P5,P9,P111	Included in A000 development
   998                                  ;
   999                                  ; A004	PTM P86 	Fix IF command to turn off piping before
  1000                                  ;			executing
  1001                                  ;
  1002                                  ; A005	DCR D17 	If user specifies an extension on the command
  1003                                  ;			line search for that extension only.
  1004                                  ;
  1005                                  ; A006	DCR D15 	New message for MkDir - "Directory already
  1006                                  ;			exists"
  1007                                  ;
  1008                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
  1009                                  ;
  1010                                  ; A008	PTM P182	Change COPY to set default if invalid function
  1011                                  ;			returned from code page call.
  1012                                  ;
  1013                                  ; A009	PTM P179	Add CRLF to invalid disk change message
  1014                                  ;
  1015                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
  1016                                  ;			transient COMMAND.
  1017                                  ;
  1018                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
  1019                                  ;			before appending to a file.
  1020                                  ;
  1021                                  ; A012	PTM P189	Fix redirection error recovery.
  1022                                  ;
  1023                                  ; A013	PTM P330	Change date format
  1024                                  ;
  1025                                  ; A014	PTM P455	Fix echo parsing
  1026                                  ;
  1027                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1028                                  ;
  1029                                  ; A016	PTM P354	Fix extended error message addressing
  1030                                  ;
  1031                                  ; A017	PTM P448	Fix appending to 0 length files
  1032                                  ;
  1033                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1034                                  ;			the parser fails on. Fail on duplicate switches.
  1035                                  ;
  1036                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1037                                  ;			critical error
  1038                                  ;
  1039                                  ; A020	DCR D43 	Set append state off while in DIR
  1040                                  ;
  1041                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1042                                  ;
  1043                                  ; A022	DCR D209	Enhanced error recovery
  1044                                  ;
  1045                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1046                                  ;
  1047                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1048                                  ;
  1049                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1050                                  ;
  1051                                  ; A026	DCR D191	Change redirection error recovery support.
  1052                                  ;
  1053                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1054                                  ;			with a carriage return.
  1055                                  ;
  1056                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1057                                  ;			date and invalid time messages.
  1058                                  ;
  1059                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1060                                  ;			and TIME.
  1061                                  ;
  1062                                  ; A030	DCR D201	New extended attribute format.
  1063                                  ;
  1064                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1065                                  ;
  1066                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1067                                  ;
  1068                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1069                                  ;
  1070                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1071                                  ;
  1072                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1073                                  ;			do a read to determine eof.
  1074                                  ;
  1075                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1076                                  ;			so that ASSIGN works correctly.
  1077                                  ;
  1078                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1079                                  ;
  1080                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1081                                  ;
  1082                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1083                                  ;
  1084                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1085                                  ;			specified.
  1086                                  ;
  1087                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1088                                  ;			executes.
  1089                                  ;
  1090                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1091                                  ;			files causing loss of batch file.
  1092                                  ;
  1093                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1094                                  ;			CALL'ed batch files.
  1095                                  ;
  1096                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1097                                  ;			as an end of line character
  1098                                  ;
  1099                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1100                                  ;			and extended message pointers when we EXIT if
  1101                                  ;			COMMAND /P is the top level process.
  1102                                  ;
  1103                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1104                                  ;			"File not found - fn"
  1105                                  ;
  1106                                  ; A047	PTM P2819	Fix transient reload prompt message
  1107                                  ;
  1108                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1109                                  ;			when DBCS code was added.
  1110                                  ;
  1111                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1112                                  ;			on line.
  1113                                  ;
  1114                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1115                                  ;
  1116                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1117                                  ;
  1118                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1119                                  ;
  1120                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1121                                  ;
  1122                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1123                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1124                                  ;
  1125                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1126                                  ;			problems with breaking out of INT 24h
  1127                                  ;
  1128                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1129                                  ;
  1130                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1131                                  ;			before the "string".  EX: COMMAND /CDIR
  1132                                  ;
  1133                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1134                                  ;			DBCS switch.
  1135                                  ;
  1136                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1137                                  ;			the time.
  1138                                  ;
  1139                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1140                                  ;			messages to be disk based.  Only keep them if /MSG
  1141                                  ;			is used.
  1142                                  ;
  1143                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1144                                  ;			out of internal commands, due to substitution blocks
  1145                                  ;			not being reset.
  1146                                  ;
  1147                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1148                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1149                                  ;			secondary copy of environment.	Change default slash in
  1150                                  ;			default comspec string to backslash.
  1151                                  ;
  1152                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1153                                  ;			text for critical error messages.
  1154                                  ;
  1155                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1156                                  ;	5/20/88 	with Microsoft product already shipped.
  1157                                  ;
  1158                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1159                                  ;	 5/20/88	with Microsoft product already shipped.
  1160                                  ;
  1161                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1162                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1163                                  ;			header and space remaining.
  1164                                  ;
  1165                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1166                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1167                                  ;			environment was putting a "Z block" marker in the old
  1168                                  ;			environment.  The fix is to move to the old environment
  1169                                  ;			to the new environment before doing the SETBLOCK.
  1170                                  ;
  1171                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1172                                  ;        09/19/88       because the check for APPEND needed to be performed
  1173                                  ;                       before the DIR's findfirst.
  1174                                  ;
  1175                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1176                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1177                                  ;                       loading trans w/new comspec with no user change comspec.
  1178                                  ;
  1179                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1180                                  ;        11/05/88       Expansion of environment variables into batch line of
  1181                                  ;                       128 chars was not being counted and "%" which should be
  1182                                  ;                       ignored were being counted.
  1183                                  ;
  1184                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1185                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1186                                  ;                       ing included in checksum and was being overwritten by
  1187                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1188                                  ;                       Also removed fix A069 (because flag now protected).
  1189                                  ;
  1190                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1191                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1192                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1193                                  ;
  1194                                  ;***********************************************************************************
  1195                                  
  1196                                  ;
  1197                                  ;	Revision History
  1198                                  ;	================
  1199                                  ;
  1200                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1201                                  ;					at init time (date/time prompt)
  1202                                  ;
  1203                                  
  1204                                  ;
  1205                                  ;.xcref
  1206                                  ;.xlist
  1207                                  ;	include dossym.inc		; basic DOS symbol set
  1208                                  ;	include syscall.inc		; DOS function names
  1209                                  ;	include comsw.asm		; build version info
  1210                                  ;	include comequ.asm		; common command.com symbols
  1211                                  ;	include resmsg.equ		; resident message names
  1212                                  ;
  1213                                  ;	include comseg.asm		;segment ordering
  1214                                  ;.list
  1215                                  ;.cref
  1216                                  
  1217                                  ;CODERES segment public byte
  1218                                  ;CODERES ends
  1219                                  ;
  1220                                  ;DATARES 	segment public byte
  1221                                  ;		extrn	AccDen:byte
  1222                                  ;		extrn	Batch:word
  1223                                  ;		extrn	EchoFlag:byte
  1224                                  ;		extrn	ExeBad:byte
  1225                                  ;		extrn	ExecEMes:byte
  1226                                  ;		extrn	ExecErrSubst:byte
  1227                                  ;		extrn	ExtCom:byte
  1228                                  ;		extrn	ForFlag:byte
  1229                                  ;		extrn	IfFlag:byte
  1230                                  ;		extrn	InitFlag:BYTE
  1231                                  ;		extrn	Nest:word
  1232                                  ;		extrn	PipeFlag:byte
  1233                                  ;		extrn	RBadNam:byte
  1234                                  ;		extrn	RetCode:word
  1235                                  ;		extrn	SingleCom:word
  1236                                  ;		extrn	TooBig:byte
  1237                                  ;
  1238                                  ;		extrn	OldDS:word
  1239                                  ;
  1240                                  ;DATARES 	ends
  1241                                  ;
  1242                                  ;
  1243                                  ;INIT		segment public para
  1244                                  ;		extrn	ConProc:near
  1245                                  ;		extrn	Init_Contc_SpecialCase:near
  1246                                  ;INIT		ends
  1247                                  
  1248                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1249                                  ; --------------------------------------
  1250                                  ; 'command5.s' source code reference(s):
  1251                                  
  1252                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1253                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1254                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1255                                  ; ----------------------------------------------------------------------				 	 	
  1256                                  
  1257                                  ; -----------------------------------------------------------------------------
  1258                                  ; START OF RESIDENT PORTION
  1259                                  ; -----------------------------------------------------------------------------
  1260                                  ; SEGMENT - DATARES
  1261                                  ; -----------------------------------------------------------------------------
  1262                                  
  1263                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1264                                  
  1265                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1266                                  
  1267                                  ;==============================================================================
  1268                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1269                                  ;==============================================================================
  1270                                  
  1271                                  ;This file contains the low memory stub for command.com which hooks all the
  1272                                  ;entry points into the resident command.com and directs the calls to the
  1273                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1274                                  ;
  1275                                  ;The stub has been made part of the resident data and will always
  1276                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1277                                  ;that actually hook the interrupt vectors belong to either the first 
  1278                                  ;command.com or to any other command.com executed with the /p switch. 
  1279                                  ;
  1280                                  ;The stub also keeps track of the current active data segment. The 
  1281                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1282                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1283                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1284                                  ;the exit code picks up the previous data segment pointer from the current
  1285                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1286                                  ;
  1287                                  ;Right now the stub does not bother about A20 switching. We assume
  1288                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1289                                  ;value of the current data segment in one of the registers. A20 toggle 
  1290                                  ;support maybe added as a future enhancement, if the need is felt.
  1291                                  
  1292                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1293                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1294                                  
  1295                                  	[ORG 100H]
  1296                                  
  1297                                  	; 21/09/2018 - Retro DOS v3.0
  1298                                  StartCode:
  1299 00000000 E9BD14                  	jmp	ConProc	; 10/01/2023 
  1300                                  
  1301                                  	; 09/01/2023
  1302                                  
  1303                                  ; Make following table word-aligned, and at the same time, provide a
  1304                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1305                                  
  1306                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARESRES:0103h
  1307 00000003 66                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1308                                  
  1309                                  ;All the entry points declared below are patched in at INIT time with the
  1310                                  ;proper segment and offset values after the resident code segment has been
  1311                                  ;moved to its final location
  1312                                  
  1313                                  ;!!!WARNING!!!
  1314                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1315                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1316                                  ;in the correct segments and offsets
  1317                                  
  1318                                  Int2f_Entry:
  1319 00000004 [D813]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1320 00000006 0000                    	dw	0
  1321                                  Int2e_Entry:
  1322 00000008 [340E]                  	dw	Int_2e			; Address of int 2eh handler
  1323 0000000A 0000                    	dw	0
  1324                                  Ctrlc_Entry:
  1325 0000000C [F30C]                  	dw	ContC			; Address of Ctrl-C handler
  1326 0000000E 0000                    	dw	0
  1327                                  CritErr_Entry:
  1328 00000010 [F510]                  	dw	DSKERR			; Address of critical error handler
  1329 00000012 0000                    	dw	0
  1330                                  
  1331                                  Exec_Entry:
  1332 00000014 00000000                	dd	0			; Entry from transient to Ext_Exec
  1333                                  RemCheck_Entry:
  1334 00000018 00000000                	dd	0			; Entry from transient to TRemCheck
  1335                                  TrnLodCom1_Entry:
  1336 0000001C 00000000                	dd	0			; Entry from transient to LodCom1
  1337                                  LodCom_Entry:
  1338 00000020 00000000                	dd	0			; Entry after exit from command.com
  1339                                  MsgRetrv_Entry:
  1340 00000024 00000000                	dd	0			; Entry from external to MsgRetriever
  1341                                  HeadFix_Entry:
  1342 00000028 00000000                	dd	0			; Entry from trans to HeadFix
  1343                                  UMBOff_Entry:
  1344 0000002C 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1345                                  XMMCallAddr:
  1346 00000030 00000000                	dd	0			; Call address for XMM functions
  1347                                  ComInHMA:
  1348 00000034 00                      	db	0			; Flags if command.com in HMA
  1349                                  
  1350                                  Int2f_Trap:
  1351                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1352 00000035 E86400                  	call	CheckA20
  1353 00000038 1E                      	push	ds			; push current ds value
  1354 00000039 0E                      	push	cs			; push resident data segment value
  1355                                  	;jmp	cs:Int2f_Entry
  1356 0000003A 2EFF2E[0400]            	jmp	far [cs:Int2f_Entry]
  1357                                  
  1358                                  Int2e_Trap:
  1359 0000003F FB                      	sti
  1360 00000040 E85900                  	call	CheckA20
  1361 00000043 1E                      	push	ds			; push current ds value
  1362 00000044 0E                      	push	cs			; push resident data segment value
  1363                                  	;jmp	cs:Int2e_Entry
  1364 00000045 2EFF2E[0800]            	jmp	far [cs:Int2e_Entry]
  1365                                  
  1366                                  Ctrlc_Trap:
  1367 0000004A FB                      	sti
  1368 0000004B E84E00                  	call	CheckA20
  1369 0000004E 1E                      	push	ds			; push current ds value
  1370 0000004F 0E                      	push	cs			; push resident data segment value
  1371                                  	;jmp	cs:Ctrlc_Entry
  1372 00000050 2EFF2E[0C00]            	jmp	far [cs:Ctrlc_Entry]
  1373                                  
  1374                                  CritErr_Trap:
  1375 00000055 FB                      	sti
  1376 00000056 E84300                  	call	CheckA20
  1377 00000059 1E                      	push	ds			; push current ds value
  1378 0000005A 0E                      	push	cs			; push resident data segment value
  1379                                  	;jmp	cs:CritErr_Entry
  1380 0000005B 2EFF2E[1000]            	jmp	far [cs:CritErr_Entry]
  1381                                  
  1382                                  Exec_Trap:
  1383 00000060 E83900                  	call	CheckA20
  1384 00000063 1E                      	push	ds			; push current ds value
  1385 00000064 0E                      	push	cs			; push resident data segment value
  1386                                  	;jmp	cs:Exec_Entry
  1387 00000065 2EFF2E[1400]            	jmp	far [cs:Exec_Entry]
  1388                                  
  1389                                  RemCheck_Trap:
  1390 0000006A E82F00                  	call	CheckA20
  1391 0000006D 1E                      	push	ds			; push current ds value
  1392 0000006E 0E                      	push	cs			; push resident data segment value
  1393                                  	;jmp	cs:RemCheck_Entry
  1394 0000006F 2EFF2E[1800]            	jmp	far [cs:RemCheck_Entry]
  1395                                  
  1396                                  TrnLodCom1_Trap:
  1397 00000074 E82500                  	call	CheckA20
  1398 00000077 1E                      	push	ds			; push current ds value
  1399 00000078 0E                      	push	cs			; push resident data segment value
  1400                                  	;jmp	cs:TrnLodCom1_Entry
  1401 00000079 2EFF2E[1C00]            	jmp	far [cs:TrnLodCom1_Entry]
  1402                                  
  1403                                  LodCom_Trap:
  1404 0000007E E81B00                  	call	CheckA20
  1405 00000081 1E                      	push	ds			; push current ds value
  1406 00000082 0E                      	push	cs			; push resident data segment value
  1407                                  	;jmp	cs:LodCom_Entry
  1408 00000083 2EFF2E[2000]            	jmp	far [cs:LodCom_Entry]
  1409                                  
  1410                                  MsgRetrv_Trap:
  1411 00000088 E81100                  	call	CheckA20
  1412 0000008B 1E                      	push	ds			; push current ds value
  1413 0000008C 0E                      	push	cs			; push resident data segment value
  1414                                  	;jmp	cs:MsgRetrv_Entry
  1415 0000008D 2EFF2E[2400]            	jmp	far [cs:MsgRetrv_Entry]
  1416                                  
  1417                                  HeadFix_Trap:
  1418 00000092 E80700                  	call	CheckA20
  1419 00000095 1E                      	push	ds			; push current ds value
  1420 00000096 0E                      	push	cs			; push resident data segment value
  1421                                  	;jmp	cs:HeadFix_Entry
  1422 00000097 2EFF2E[2800]            	jmp	far [cs:HeadFix_Entry]
  1423                                  
  1424                                  ; ----------------------------------------------------------------------------
  1425                                  
  1426                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1427                                  %if 0
  1428                                  	; 09/01/2023
  1429                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1430                                  
  1431                                  	; 05/06/2023
  1432                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1433                                  CheckA20:
  1434                                  	pushf				; save current flags
  1435                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1436                                  	jz	short A20_on		; no, jump to resident
  1437                                  
  1438                                  	call	QueryA20
  1439                                  	jnc	short A20_on		; A20 is on, jump to resident
  1440                                  
  1441                                  	call	EnableA20		; turn A20 on
  1442                                  A20_on:
  1443                                  	popf				; flags have to be unchanged
  1444                                  	retn
  1445                                  %else
  1446                                  	; 18/07/2024
  1447                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1448                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1449                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1450                                  CheckA20:
  1451 0000009C 9C                      	pushf				; save current flags
  1452 0000009D 2E803E[3400]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1453 000000A3 741A                    	jz	short A20_on		; no, jump to resident
  1454                                  	; 18/07/2024
  1455 000000A5 50                      	push	ax
  1456 000000A6 53                      	push	bx
  1457                                  QueryA20:
  1458                                  	;mov	ah,7
  1459 000000A7 B407                    	mov	ah,XMM_QUERY_A20
  1460                                  	;call	cs:XMMCallAddr
  1461 000000A9 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1462 000000AE 09C0                    	or	ax,ax
  1463                                  	; 16/04/2023
  1464 000000B0 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1465                                  	; 18/07/2024
  1466                                  EnableA20:
  1467                                  	;mov	ah,5
  1468 000000B2 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1469                                  	;call	cs:XMMCallAddr
  1470 000000B4 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1471 000000B9 09C0                    	or	ax,ax
  1472 000000BB 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1473                                  QA20_ON:
  1474 000000BD 5B                      	pop	bx
  1475 000000BE 58                      	pop	ax
  1476                                  A20_on:
  1477 000000BF 9D                      	popf				; flags have to be unchanged
  1478 000000C0 C3                      	retn
  1479                                  ;If we get an error, we just loop forever
  1480                                  XMMerror:
  1481 000000C1 EBFE                    	jmp	short XMMerror
  1482                                  %endif
  1483                                  
  1484                                  ; ----------------------------------------------------------------------------
  1485                                  
  1486                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1487                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1488                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1489                                  ; M005; pointers because our cs is going to be different. The segment to
  1490                                  ; M005; jump to is patched in at init time. (in init.asm)
  1491                                  
  1492                                  Carousel_i2f_Hook:			; M005
  1493 000000C3 EA                      	db	0EAh			; far jump opcode; M005
  1494 000000C4 [3500]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1495 000000C6 0000                    	dw	0			; int 2fh segment; M005
  1496                                  
  1497                                  ; ----------------------------------------------------------------------------
  1498                                  
  1499                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1500                                  %if 0
  1501                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1502                                  QueryA20:
  1503                                  	push	bx
  1504                                  	push	ax
  1505                                  	;mov	ah,7
  1506                                  	mov	ah,XMM_QUERY_A20
  1507                                  	;call	cs:XMMCallAddr
  1508                                  	call	far [cs:XMMCallAddr]
  1509                                  	or	ax,ax
  1510                                  	pop	ax
  1511                                  	pop	bx
  1512                                  	; 16/04/2023
  1513                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1514                                  	stc					; OFF
  1515                                  	;retn
  1516                                  QA20_ON:
  1517                                  	;clc					; ON
  1518                                  	retn
  1519                                  %endif
  1520                                  
  1521                                  ; ----------------------------------------------------------------------------
  1522                                  
  1523                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1524                                  %if 0
  1525                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1526                                  EnableA20:
  1527                                  	push	bx
  1528                                  	push	ax
  1529                                  	;mov	ah,5
  1530                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1531                                  	;call	cs:XMMCallAddr
  1532                                  	call	far [cs:XMMCallAddr]
  1533                                  	or	ax,ax
  1534                                  	jz	short XMMerror			; AX = 0 fatal error
  1535                                  	pop	ax
  1536                                  	pop	bx
  1537                                  	retn
  1538                                  ;If we get an error, we just loop forever
  1539                                  XMMerror:
  1540                                  	jmp	short XMMerror
  1541                                  %endif
  1542                                  
  1543                                  ; -----------------------------------------------------------------------------
  1544                                  
  1545                                  ; 05/06/2023
  1546                                  ;HV_Extern	equ	1
  1547                                  ;HV_LoadHigh	equ	1
  1548                                  ;HV_Stub	equ	1
  1549                                  ;	include	highvar.inc	; Make high-memory variables external here
  1550                                  ;	include	highexit.inc	; And add code for UnHideUMBs
  1551                                  
  1552                                  ;==============================================================================
  1553                                  ; HIGHEXIT.INC, MSDOS 6.0, 1992
  1554                                  ;==============================================================================
  1555                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1556                                  
  1557                                  DOS_STRATEGY_GET equ  5800h	; Int 21h, Func 58h, Svc 0 = get alloc strategy
  1558                                  DOS_STRATEGY_SET equ  5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
  1559                                  DOS_UMBLINK_GET	equ   5802h	; Int 21h, Func 58h, Svc 2 = get link state
  1560                                  DOS_UMBLINK_SET	equ   5803h	; Int 21h, Func 58h, Svc 3 = set link state
  1561                                  DOS_GET_LISTS	equ     52h	; Int 21h, Func 52h = get list of lists
  1562                                  
  1563                                  UMB_HeadIdx	equ     8Ch	; Offset from ES (after func52h) to get UMBHead
  1564                                  
  1565                                  	; 05/06/2023
  1566                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:01D9h
  1567                                  
  1568                                  ; -----------------------------------------------------------------------------
  1569                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
  1570                                  ; -----------------------------------------------------------------------------
  1571                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
  1572                                  ;               very little to do, as no elelments will be marked as HIDDEN.
  1573                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
  1574                                  ; ERROR:  None
  1575                                  ; USES:   fInHigh (from highvar.inc), carry flag
  1576                                  ; -----------------------------------------------------------------------------
  1577                                  
  1578                                  UnHideUMBs:
  1579 000000C8 50                      	push	ax		; Save ax for what we're about to do
  1580                                  
  1581                                  ; -----------------------------------------------------------------------------
  1582                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
  1583                                  ;    length of time. Those six constitute a check of whether or not we should
  1584                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
  1585                                  ;    will destroy the current link-state and memory-allocation strategy after
  1586                                  ;    every command execution.
  1587                                  ; -----------------------------------------------------------------------------
  1588                                  
  1589                                  	; 05/06/2023
  1590                                  	;getdata al,fInHigh	; Get InHigh from data segment
  1591                                  	;
  1592                                  	;push	ds
  1593 000000C9 A0[D604]                	mov	al,[fInHigh]
  1594                                  	;pop	ds
  1595                                  
  1596                                  	;or	al, al
  1597                                  	;jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
  1598                                  
  1599                                  	;pop	ax		; then there's nothing to do here... so
  1600                                  	;stc			; restore everything and return.  Just like
  1601                                  	;retn			; that.
  1602                                  
  1603                                  	; 05/06/2023
  1604 000000CC 3C01                    	cmp	al,1
  1605 000000CE 720F                    	jb	short uhu20	; cf=1
  1606                                  uhu10:	
  1607 000000D0 E8A000                  	call	linkumb		; Make sure UMBs are linked in.
  1608 000000D3 E82000                  	call	FreeUMBs
  1609                                  
  1610                                  	;putdata fInHigh, 0	; We're leaving, so update fInHigh.
  1611                                  	;
  1612                                  	;push	es
  1613                                  	;mov	byte [es:fInHigh],0
  1614                                  	;pop	es
  1615                                  	; 05/06/2023
  1616 000000D6 C606[D604]00            	mov	byte [fInHigh],0
  1617                                  
  1618 000000DB E80300                  	call	he_unlink	; Unlink UMBs
  1619                                  
  1620                                  	;pop	ax
  1621                                  	;clc
  1622                                  	;retn
  1623                                  
  1624 000000DE F8                      	clc
  1625                                  uhu20:
  1626 000000DF 58                      	pop	ax
  1627 000000E0 C3                      	retn
  1628                                  
  1629                                  ; -----------------------------------------------------------------------------
  1630                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
  1631                                  ; -----------------------------------------------------------------------------
  1632                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
  1633                                  ; EXIT:     None
  1634                                  ; ERROR:    None
  1635                                  ; USES:     AX, BX
  1636                                  ; -----------------------------------------------------------------------------
  1637                                  
  1638                                  	; 05/06/2023
  1639                                  he_unlink:
  1640 000000E1 30FF                    	xor	bh, bh
  1641                                  	
  1642                                  	;getdata bl,fm_umb		; Restore original link-state
  1643                                  	;
  1644                                  	;push	ds
  1645 000000E3 8A1E[DB04]              	mov     bl,[fm_umb]
  1646                                  	;pop	ds
  1647                                  
  1648 000000E7 B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1649 000000EA CD21                    	int	21h
  1650                                  
  1651                                  	;xor	bh, bh
  1652                                  	
  1653                                  	;getdata bl,fm_strat		; Restore original mem-alloc strategy
  1654                                  	;push	ds
  1655 000000EC 8A1E[DC04]              	mov     bl,[fm_strat]
  1656                                  	;pop	ds
  1657                                  
  1658 000000F0 B80158                  	mov	ax,DOS_STRATEGY_SET ; 5801h
  1659 000000F3 CD21                    	int	21h
  1660                                  
  1661 000000F5 C3                      	retn
  1662                                  
  1663                                  ; -----------------------------------------------------------------------------
  1664                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
  1665                                  ; -----------------------------------------------------------------------------
  1666                                  ; ENTRY:    None
  1667                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
  1668                                  ; ERROR:    None (ignore CF)
  1669                                  ; USES:     Flags
  1670                                  ; -----------------------------------------------------------------------------
  1671                                  
  1672                                  	; 05/06/2023
  1673                                  arena_signature_end equ 5Ah ; 'Z'
  1674                                  arena_signature equ 0
  1675                                  arena_size equ 3
  1676                                  
  1677                                  FreeUMBs:
  1678 000000F6 50                      	push	ax
  1679 000000F7 06                      	push	es
  1680                                  
  1681 000000F8 E86900                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
  1682 000000FB 721C                    	jc	short fusX
  1683                                  fus10:
  1684 000000FD 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
  1685 000000FF E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
  1686 00000102 7503                    	jnz	short fus20
  1687 00000104 E84200                  	call	freeMCB
  1688                                  fus20:	
  1689 00000107 26A00000                	mov	al,[es:arena_signature] ; mov al,[es:0]
  1690 0000010B 3C5A                    	cmp	al,arena_signature_end ; 'Z' ; 5Ah
  1691 0000010D 740A                    	jz	short fusX	; That means this was the last MCB--that's it.
  1692                                  
  1693 0000010F 8CC0                    	mov	ax,es
  1694 00000111 2603060300              	add	ax,[es:arena_size] ; add ax,[es:3]
  1695 00000116 40                      	inc	ax
  1696                                  	;mov	es,ax		; Go on forward.
  1697                                  	;jmp	short fus10
  1698                                  	; 18/07/2024
  1699 00000117 EBE4                    	jmp	short fus10
  1700                                  fusX:
  1701 00000119 07                      	pop	es
  1702 0000011A 58                      	pop	ax
  1703 0000011B C3                      	retn
  1704                                  
  1705                                  ; -----------------------------------------------------------------------------
  1706                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
  1707                                  ; -----------------------------------------------------------------------------
  1708                                  ; ENTRY:    ES:0 should point to an MCB
  1709                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
  1710                                  ; ERROR:    None
  1711                                  ; USES:     Flags
  1712                                  ; -----------------------------------------------------------------------------
  1713                                  
  1714                                  	; 05/06/2023
  1715                                  SystemPSPOwner	equ 8
  1716                                  arena_owner	equ 1
  1717                                  arena_name	equ 8
  1718                                  
  1719                                  isHideMCB:
  1720 0000011C 50                      	push	ax
  1721                                  
  1722 0000011D 26833E010008            	cmp	word [es:arena_owner],SystemPSPOwner ; If the owner's SYSTEM
  1723 00000123 7522                    	jne	short ihm_x			     ; then check for HIDDEN
  1724                                  
  1725 00000125 26A10800                	mov	ax,[es:arena_name]   ; [es:8]
  1726 00000129 3D4849                  	cmp	ax,'HI' ; 4948h
  1727 0000012C 7519                    	jne	short ihm_x
  1728 0000012E 26A10A00                	mov	ax,[es:arena_name+2] ; [es:10]
  1729 00000132 3D4444                  	cmp	ax,'DD' ; 4444h
  1730 00000135 7510                    	jne	short ihm_x
  1731 00000137 26A10C00                	mov	ax,[es:arena_name+4] ; [es:12]
  1732 0000013B 3D454E                  	cmp	ax,'EN' ; 4E45h
  1733 0000013E 7507                    	jne	short ihm_x
  1734 00000140 26A10E00                	mov	ax,[es:arena_name+6] ; [es:14]
  1735 00000144 3D2020                  	cmp	ax,'  ' ; 2020h
  1736                                  ihm_x:
  1737 00000147 58                      	pop	ax
  1738 00000148 C3                      	retn
  1739                                  
  1740                                  ; -----------------------------------------------------------------------------
  1741                                  ;*** freeMCB - marks as free the MCB at ES:0
  1742                                  ; -----------------------------------------------------------------------------
  1743                                  ; ENTRY:    ES:0 should point to an MCB
  1744                                  ; EXIT:     None; MCB free'd
  1745                                  ; ERROR:    None
  1746                                  ; USES:     AX
  1747                                  ; -----------------------------------------------------------------------------
  1748                                  
  1749                                  	; 05/06/2023
  1750                                  freeMCB:
  1751 00000149 26C70601000000          	mov	word [es:arena_owner],0	; [es:1]
  1752 00000150 B82020                  	mov	ax,'  '
  1753 00000153 26A30800                	mov	[es:arena_name+0],ax	; [es:8]
  1754 00000157 26A30A00                	mov	[es:arena_name+2],ax
  1755 0000015B 26A30C00                	mov	[es:arena_name+4],ax
  1756 0000015F 26A30E00                	mov	[es:arena_name+6],ax	; [es:14]
  1757 00000163 C3                      	retn
  1758                                  
  1759                                  ; -----------------------------------------------------------------------------
  1760                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
  1761                                  ; -----------------------------------------------------------------------------
  1762                                  ; ENTRY:  Nothing
  1763                                  ; EXIT:   AX contains 0x9FFF for most systems
  1764                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
  1765                                  ; USES:   Flags, AX
  1766                                  ; -----------------------------------------------------------------------------
  1767                                  
  1768                                  	; 05/06/2023
  1769                                  HeadUmb:
  1770                                  	; 18/07/2024 - PCDOS 7.1 - RESGROUP:02CDh
  1771                                  	;push	si
  1772                                  	;push	ds
  1773 00000164 06                      	push	es
  1774                                  
  1775 00000165 B452                    	mov	ah,DOS_GET_LISTS	; Call int 21h, function 52h...
  1776 00000167 CD21                    	int	21h	; DOS - 2+ internal - GET LIST OF LISTS
  1777                                  			; Return: ES:BX -> DOS list of lists
  1778                                  
  1779 00000169 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008Ch
  1780 0000016D 83F8FF                  	cmp	ax,0FFFFh
  1781                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
  1782                                  	;clc				; Else, it isn't.
  1783                                  	;jmp	short xhu_x
  1784                                  ;xhu_e:
  1785                                  	;stc
  1786                                  	; 05/06/2023
  1787 00000170 F5                      	cmc	; cf=0 -> cf=1
  1788                                  ;xhu_x:
  1789 00000171 07                      	pop	es
  1790                                  	; 18/07/2024
  1791                                  	;pop	ds
  1792                                  	;pop	si
  1793 00000172 C3                      	retn
  1794                                  
  1795                                  ; -----------------------------------------------------------------------------
  1796                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
  1797                                  ; -----------------------------------------------------------------------------
  1798                                  ; ENTRY:    None
  1799                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
  1800                                  ; ERROR:    None
  1801                                  ; USES:     AX, BX, fm_umb
  1802                                  ; -----------------------------------------------------------------------------
  1803                                  
  1804                                  	; 05/06/2023
  1805                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:029Dh
  1806                                  linkumb:
  1807 00000173 B80258                  	mov	ax,DOS_UMBLINK_GET ; 5802h
  1808 00000176 CD21                    	int	21h			; Current link-state is now in al
  1809                                  
  1810 00000178 08C0                    	or	al,al			; BUGBUG: proper check?
  1811 0000017A 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
  1812                                  
  1813 0000017C B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1814 0000017F BB0100                  	mov	bx,1
  1815 00000182 CD21                    	int	21h
  1816                                  lumbX:
  1817 00000184 C3                      	retn
  1818                                  
  1819                                  ;==============================================================================
  1820                                  ; STUB.ASM, MSDOS 6.0, 1991
  1821                                  ;==============================================================================
  1822                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1823                                  
  1824                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1825                                  	; 05/06/2023 - Retro DOS 4.2
  1826                                  
  1827                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1828                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1829                                  ;returns with all registers preserved and so all our segment registers are
  1830                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1831                                  ;comes back here. In this case the segment registers and the stack are
  1832                                  ;not set up and random things can happen. The only way to setup all the 
  1833                                  ;registers is to use the cs value and this can only be done when we are in
  1834                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1835                                  ;the code segment to the data segment.
  1836                                  
  1837                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02AFh
  1838                                  Issue_Exec_Call:
  1839 00000185 CD21                    	int 	21h
  1840                                  
  1841                                  ;We disable interrupts while changing the stack because there is a bug in 
  1842                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1843                                  ;are being changed.
  1844                                  
  1845 00000187 FA                      	cli
  1846 00000188 0E                      	push	cs
  1847 00000189 17                      	pop	ss
  1848                                  
  1849                                  	;;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1850                                  	;mov	sp,60Ah	; MSDOS 6.22 COMMAND.COM RESGROUP:02B4h
  1851                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1852 0000018A BC[D404]                	mov	sp,RStack		; stack is set up
  1853                                  
  1854                                  ; 05/06/2023	
  1855                                  %if 0	
  1856                                  	; 20/04/2023
  1857                                  	;sti
  1858                                  	;push	cs
  1859                                  	;pop	ds			; ds = DATARES
  1860                                  
  1861                                  ; M009; Restore UMB state to that before Exec
  1862                                  
  1863                                  	;pushf				;    This call frees HIDDEN umb's,
  1864                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1865                                  	;popf				;    strategy and link state, as app.
  1866                                  
  1867                                  	; 09/01/2023 - Retro DOS v4.0
  1868                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1869                                  	; ----------------------
  1870                                  	sti
  1871                                  	push    cs
  1872                                  	pop     ds
  1873                                  	pushf
  1874                                  	;mov	al,[cs:fInHigh]
  1875                                  	; 18/04/2023
  1876                                  	mov	al,[fInHigh]
  1877                                  	test	al,80h
  1878                                  	jz      short uhu10
  1879                                  	and     al,7Fh
  1880                                  	;;call	cs:UMBOff_Entry
  1881                                  	;call	far [cs:UMBOff_Entry]
  1882                                  	call	far [UMBOff_Entry]
  1883                                  uhu10:
  1884                                  	;and	byte [cs:fInHigh],7Fh
  1885                                  	; 18/04/2023
  1886                                  	and	byte [fInHigh],7Fh
  1887                                  	popf
  1888                                  	; ----------------------
  1889                                  
  1890                                  %endif
  1891                                  	; 05/06/2023 - Retro DOS 4.2
  1892                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02B7h
  1893 0000018D FB                      	sti
  1894 0000018E 0E                      	push	cs
  1895 0000018F 1F                      	pop	ds			; ds = DATARES
  1896                                  
  1897                                  ; M009; Restore UMB state to that before Exec
  1898                                  
  1899 00000190 9C                      	pushf				;    This call frees HIDDEN umb's,
  1900 00000191 E834FF                  	call	UnHideUMBs		; <- restores the memory-allocation
  1901 00000194 9D                      	popf				;    strategy and link state, as app
  1902                                  
  1903                                  ;We now jump to the stub trap which returns us to the resident code. All
  1904                                  ;flags are preserved by the stub code.
  1905                                  
  1906 00000195 E9C8FE                  	jmp	Exec_Trap
  1907                                  
  1908                                  ;==============================================================================
  1909                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1910                                  ;==============================================================================
  1911                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1912                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1913                                  
  1914                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:02C2h (DATARES:02C2h) (*)
  1915                                  ; -----------------------------------------------------------------------------
  1916 00000198 636F78                  cox_location:	db 'cox' ; (*)	
  1917 0000019B 0000                    cox_Y_option:	dw 0     ; (*)
  1918                                  ; -----------------------------------------------------------------------------
  1919                                  
  1920                                  ;***	Message substitution blocks
  1921                                  
  1922                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1923                                  
  1924                                  ;BlkDevErrSubst	label	byte
  1925                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1926                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1927                                  
  1928 0000019D 02                      BlkDevErrSubst: db	2
  1929 0000019E 0000                    BlkDevErrRw:	dw	0
  1930 000001A0 01                      		db	1
  1931 000001A1 [A301]                  		dw	DrvLet
  1932                                  
  1933 000001A3 41                      DrvLet:		db	'A'			; drive letter
  1934                                  
  1935                                  
  1936                                  ;CharDevErrSubst label	byte
  1937                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1938                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1939                                  
  1940 000001A4 02                      CharDevErrSubst: db	2
  1941 000001A5 0000                    CharDevErrRw:	dw	0
  1942 000001A7 02                      		db	2
  1943 000001A8 [B601]                  		dw	DevName
  1944                                  
  1945                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1946                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1947                                  ;		db	0
  1948                                  
  1949                                  ;NeedVolSubst	label	byte
  1950                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1951                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1952                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1953                                  
  1954 000001AA 02                      NeedVolSubst:	db	2
  1955 000001AB [B301]                  		dw	VolName
  1956 000001AD 03                      		db	3
  1957 000001AE [C101]                  		dw	VolSer+2
  1958 000001B0 03                      		db	3
  1959 000001B1 [BF01]                  		dw	VolSer
  1960                                  
  1961                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1962                                  	; NOTE:	VolName and VolSer must be adjacent
  1963                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1964                                  		; 18/07/2024
  1965 000001B3 000000                  VolName:	db	3 dup(0)
  1966 000001B6 0000000000000000        DevName:	db	8 dup(0)
  1967                                  	
  1968 000001BE 00                      		db	0
  1969 000001BF 00000000                VolSer:		dd	0			; volume serial #
  1970                                  
  1971 000001C3 00                      CDevAt:		db	0
  1972                                  
  1973                                  ;BadFatSubst	label	byte
  1974                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1975                                  
  1976 000001C4 01                      BadFatSubst:	db	1
  1977 000001C5 [A301]                  		dw	DrvLet
  1978                                  
  1979                                  ;PutBackSubst	label	byte
  1980                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1981                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1982                                  
  1983 000001C7 02                      PutBackSubst:	db	2
  1984 000001C8 0000                    PutBackComSpec:	dw	0
  1985 000001CA 01                      		db	1
  1986 000001CB [CD01]                  		dw	PutBackDrv
  1987                                  
  1988 000001CD 20                      PutBackDrv:	db	' '	; db 20h	; drive letter
  1989                                  
  1990                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  1991                                  
  1992 000001CE 02                      ExecErrSubst:	db	2
  1993 000001CF [0004]                  		dw	SafePathBuffer
  1994                                  
  1995 000001D1 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  1996 000001D5 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  1997                                  
  1998 000001D6 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  1999 000001DA 0000                    Save_Pdb:	dw	0
  2000 000001DC 0000                    Parent:		dw	0
  2001 000001DE 00000000                OldTerm:	dd	0
  2002 000001E2 0000                    ErrCd_24:	dw	0
  2003 000001E4 0000                    Handle01:	dw	0
  2004 000001E6 00                      Loading:	db	0
  2005 000001E7 0000                    Batch:		dw	0	; assume no batch mode initially
  2006                                  
  2007                                  ;;;;SR;
  2008                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  2009                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  2010                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  2011                                  ;;;;
  2012                                  ;;;BatchEOF:	db	0
  2013                                  
  2014                                  	; Bugbug: ComSpec should be 64+3+12+1?
  2015                                  	; What's this comspec_end about?
  2016 000001E9 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  2017 00000229 0000                    ComSpec_End:	dw	0
  2018                                  
  2019                                  ;Trans		label	dword
  2020                                  ;		dw	TRANGROUP:Command
  2021                                  
  2022                                  Trans:		;dw	12Ch
  2023                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  2024 0000022B [2C01]                  		dw	COMMAND ; 16/04/2023
  2025 0000022D 0000                    TrnSeg:		dw	0
  2026                                  
  2027 0000022F 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  2028                                  
  2029 00000230 00                      In_Batch:	db	0	; set if we are in batch processing mode
  2030 00000231 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  2031                                  
  2032 00000232 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  2033 00000233 0000                    MemSiz:		dw	0
  2034 00000235 0000                    Sum:		dw	0
  2035 00000237 01                      ExtCom:		db	1	; for init, pretend just did an external
  2036 00000238 0000                    RetCode: 	dw	0
  2037 0000023A 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  2038                                  
  2039                                  
  2040                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  2041                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  2042                                  
  2043 0000023B 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  2044 0000023C 01                      Suppress:	db	1	; used for echo, 1=echo line
  2045 0000023D 0000                    Io_Save: 	dw	0
  2046 0000023F 00                      RestDir: 	db	0
  2047 00000240 00                      PermCom: 	db	0	; true => permanent command
  2048                                  ; 05/06/2023
  2049 00000241 FFFF                    SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  2050                                  				; true => semi-permanent command (/K)
  2051 00000243 0000                    SingleCom:	dw	0	; true => single command version
  2052 00000245 FFFF                    VerVal:		dw	-1
  2053 00000247 00                      fFail:		db	0	; true => fail all int 24s
  2054 00000248 00                      IfFlag:		db	0	; true => IF statement in progress
  2055                                  
  2056 00000249 00                      ForFlag: 	db	0	; true => FOR statement in progress
  2057 0000024A 0000                    ForPtr:		dw	0
  2058                                  
  2059 0000024C 0000                    Nest:		dw	0	; nested batch file counter
  2060 0000024E 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  2061 0000024F 00                      Call_Batch_Flag: db	0
  2062 00000250 0000                    Next_Batch:	dw	0	; address of next batch segment
  2063 00000252 00                      NullFlag:	db	0	; flag if no command on command line
  2064 00000253 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  2065                                  				; buffer for file ucase address
  2066                                  ; Bugbug: don't need crit_msg_ anymore?
  2067                                  
  2068 00000258 0000                    Crit_Msg_Off:	dw	0	; saved critical error message offset
  2069 0000025A 0000                    Crit_Msg_Seg:	dw	0	; saved critical error message segment
  2070 0000025C 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  2071 0000025E 0000                    		 dw	0	; DBCS vector segment
  2072 00000260 0000                    Append_State:	dw	0	; current state of append
  2073                                  				;  (if Append_Flag is set)
  2074 00000262 00                      Append_Flag:	db	0	; set if append state is valid
  2075 00000263 00                      Re_Out_App:	db	0
  2076 00000264 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  2077                                  
  2078                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  2079                                  ; various times. Here is the breakdown:
  2080                                  ;
  2081                                  ;   INITINIT	We are in the init code.
  2082                                  ;   INITSPECIAL We are in the date/time prompt
  2083                                  ;   INITCTRLC	We are handling a ^C already.
  2084                                  ;
  2085                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  2086                                  ; ignore the ^C. This is so the system calls work on nested commands.
  2087                                  ;
  2088                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  2089                                  ; input buffer with a CR to pretend an empty response.
  2090                                  ;
  2091                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  2092                                  ; (ourselves). We can then detect the carry set and properly retry the
  2093                                  ; operation.
  2094                                  
  2095                                  InitFlag:	;db	1
  2096 000002B4 01                      		db	INITINIT
  2097                                  
  2098                                  ; Note: these two bytes are referenced as a word
  2099 000002B5 00                      PipeFlag:	db	0
  2100 000002B6 00                      PipeFiles:	db	0
  2101                                  
  2102                                  ; (rdata.asm, msdos 6.0, 1992)
  2103                                  ; ----------------------------------------------------------------------------
  2104                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  2105                                  
  2106                                  ;;SR
  2107                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  2108                                  ;;
  2109                                  ;
  2110                                  ;; Bugbug: can we find any way around maintaining these
  2111                                  ;; large buffers?
  2112                                  ;
  2113                                  ;Pipe1		db	67+12 dup (?)
  2114                                  ;Pipe2		db	67+12 dup (?)
  2115                                  ;
  2116                                  ;PipePtr 	dw	?
  2117                                  ;
  2118                                  ;PipeStr 	db	129 dup (?)
  2119                                  ;
  2120                                  ;EndPipe	label	byte	; marks end of buffers; M004
  2121                                  ;
  2122                                  ;;SR;
  2123                                  ;; We can move our EndInit code into above buffers. This way, the code will
  2124                                  ;;automatically be discarded after init.
  2125                                  ;;
  2126                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  2127                                  ;; M004; the origin.
  2128                                  ;;
  2129                                  ;	ORG	Pipe1	; M004
  2130                                  ;
  2131                                  ;; Bugbug: really need a procedure header for EndInit, describing
  2132                                  ;; what it expects, what it does.
  2133                                  ;
  2134                                  
  2135                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2136                                  
  2137                                  Pipe1	equ	EndInit
  2138                                  Pipe2	equ	Pipe1+67+12
  2139                                  PipePtr	equ	Pipe2+67+12
  2140                                  PipeStr	equ	PipePtr+2
  2141                                  EndPipe	equ	PipeStr+129	; EndInit+289
  2142                                  
  2143                                  ; Bugbug: really need a procedure header for EndInit, describing
  2144                                  ; what it expects, what it does.
  2145                                  
  2146                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h
  2147                                  
  2148                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (compatible with MSDOS 6.22)
  2149                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:03EAh 
  2150                                  
  2151                                  EndInit:
  2152 000002B7 1E                      	push	ds
  2153 000002B8 06                      	push	es		; save segments
  2154 000002B9 0E                      	push	cs
  2155 000002BA 1F                      	pop	ds		
  2156                                  	;assume	ds:RESGROUP
  2157                                  
  2158                                  ; M004; Save size of transient here before INIT segment is deallocated
  2159                                  
  2160 000002BB 8B16[D61E]              	mov	dx,[TrnSize]		; M004
  2161                                  ;M027
  2162                                  ; These variables are also defined in the INIT segment and need to be saved
  2163                                  ;before we resize
  2164                                  ;
  2165 000002BF A1[CA1E]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  2166 000002C2 8B1E[C61E]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  2167 000002C6 8B0E[CC1E]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  2168 000002CA 50                      	push	ax		; Save all these values ;M027
  2169 000002CB 53                      	push	bx		; M027
  2170 000002CC 51                      	push	cx		; M027
  2171                                  
  2172                                  
  2173                                  ; Bugbug: push ds, pop es here.
  2174                                  	;mov	bx,ds
  2175                                  	;mov	es,bx		; es = RESGROUP
  2176                                  	; 09/01/2023
  2177 000002CD 1E                      	push	ds
  2178 000002CE 07                      	pop	es
  2179                                  
  2180                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  2181                                  ; code + data for low COMMAND
  2182                                  
  2183 000002CF 8B1E[5604]              	mov	bx,[ResSize]	; Total size of resident
  2184 000002D3 B44A                    	mov	ah,4Ah
  2185                                  	;mov	ah,SETBLOCK
  2186 000002D5 CD21                    	int	21h		; Set block to resident size
  2187                                  
  2188                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  2189                                  		; ES = segment address of block to change
  2190                                  		; BX = new size in paragraphs
  2191                                  
  2192                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  2193                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  2194                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  2195                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  2196                                  ;
  2197                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  2198                                  	
  2199 000002D7 803E[4002]01            	cmp	byte [PermCom],1 ; permanent command.com?
  2200 000002DC 7530                    	jne	short adjust_env ; no, do not free batchseg
  2201                                  
  2202 000002DE 833E[E701]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  2203 000002E3 7429                    	je	short adjust_env ; no, dont juggle
  2204                                  
  2205                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  2206                                  	; 21/01/2023
  2207 000002E5 BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  2208                                  	;mov	bx,4	; 09/01/2023
  2209                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  2210 000002E8 B448                    	mov	ah,48h
  2211                                  	;mov	ah,ALLOC
  2212 000002EA CD21                    	int	21h
  2213                                  
  2214                                  		; DOS - 2+ - ALLOCATE MEMORY
  2215                                  		; BX = number of 16-byte paragraphs desired
  2216                                  
  2217                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  2218                                  ; a hole, the batch segment COULD already be in the ideal place. We
  2219                                  ; could be making it worse! We're second-guessing where memory
  2220                                  ; allocations go, which might not be such a great idea. Is there
  2221                                  ; a strategy, short of doing something even worse like diddling
  2222                                  ; arena headers, where we can minimize the possibility of fragmentation
  2223                                  ; under all cases? Hmm..
  2224                                  	
  2225 000002EC 7220                    	jc	short adjust_env ; no memory, use old batchseg
  2226                                  
  2227 000002EE 8EC0                    	mov	es,ax		 ; es = New batch segment
  2228 000002F0 31FF                    	xor	di,di
  2229 000002F2 31F6                    	xor	si,si
  2230                                  
  2231 000002F4 1E                      	push	ds
  2232 000002F5 8E1E[E701]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  2233                                  	;assume	ds:nothing
  2234                                  	;mov	cx,SIZE BatchSegment
  2235                                  	; 23/01/2023
  2236                                  	;mov	cx,BATCHSEGMENT.SIZE
  2237                                  	;;mov	cx,33	; 09/01/2023
  2238                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  2239                                  	;
  2240                                  	;add	cx,16		 ; for the filename
  2241                                  	; 20/04/2023
  2242 000002F9 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  2243                                  
  2244                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  2245                                  	; It's sure be bad if we copied more bytes than the batch segment
  2246                                  	; holds!
  2247                                  	
  2248 000002FC FC                      	cld
  2249 000002FD F3A4                    	rep	movsb
  2250 000002FF 1F                      	pop	ds
  2251                                  	;assume	ds:RESGROUP
  2252                                  
  2253 00000300 8CC1                    	mov	cx,es		; save new batch segment 
  2254 00000302 8E06[E701]              	mov	es,[Batch]
  2255 00000306 B449                    	mov	ah,49h
  2256                                  	;mov	ah,DEALLOC
  2257 00000308 CD21                    	int	21h		; free the old batch segment
  2258                                  
  2259                                  	; Bugbug: should we check for error?
  2260                                  
  2261 0000030A 890E[E701]              	mov	[Batch],cx	; store new batch segment address
  2262                                  
  2263                                  adjust_env:
  2264 0000030E 59                      	pop	cx		; cx = size of old env ;M027
  2265 0000030F 5B                      	pop	bx		; bx = size of new env needed ;M027
  2266 00000310 5D                      	pop	bp		; bp = old env seg ;M027
  2267                                  
  2268                                  ;Allocate the correct size for the environment
  2269                                  
  2270 00000311 B448                    	mov	ah,48h
  2271                                  	;mov	ah,ALLOC
  2272 00000313 CD21                    	int	21h		; get memory
  2273 00000315 7264                    	jc	short nomem_err	; out of memory,signal error
  2274                                  	
  2275                                  	; Bugbug: why not continue, leaving environment where it is?
  2276                                  
  2277 00000317 A3[DC03]                	mov	[EnvirSeg],ax	; Store new environment segment
  2278                                  	;;mov	[ds:2Ch],ax
  2279                                  	;mov	[2Ch],ax
  2280                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  2281 0000031A A32C00                  	mov	[PDB.ENVIRON],ax
  2282 0000031D 8EC0                    	mov	es,ax		; es = address of allocated memory
  2283                                  	;assume	es:nothing
  2284                                  
  2285                                  ;Copy the environment to the newly allocated segment
  2286                                  
  2287 0000031F 1E                      	push	ds
  2288 00000320 8EDD                    	mov	ds,bp		; ds = Old environment segment
  2289                                  	;assume	ds:nothing
  2290                                  
  2291 00000322 31F6                    	xor	si,si
  2292 00000324 89F7                    	mov	di,si		; Start transfer from 0
  2293                                  
  2294 00000326 FC                      	cld
  2295 00000327 F3A4                    	rep	movsb		; Do the copy
  2296                                  
  2297 00000329 1F                      	pop	ds		; ds = RESGROUP
  2298                                  	;assume	ds:RESGROUP
  2299                                  
  2300                                  ; We have to free the old environment block if it was allocated by INIT
  2301                                  
  2302                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  2303                                  ; or does it also apply to passed environments?
  2304                                  
  2305                                  ;M036
  2306                                  ; Free up old env segment always because this is a copy passed by Exec and
  2307                                  ; takes up memory that is never used
  2308                                  
  2309                                  ;M044
  2310                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  2311                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  2312                                  ; errors if it gets a memory alloc that it is below its load segment. The
  2313                                  ; freed environment creates a large enough hole for some of its allocs to fit
  2314                                  ; in
  2315                                  
  2316                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  2317                                          ;je	short no_free	    ; no, do not free it
  2318                                  	; 21/01/2023
  2319                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  2320 0000032A 803E[8C1E]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  2321 0000032F 7506                    	jne	short no_free
  2322                                  
  2323 00000331 8EC5                    	mov	es,bp
  2324 00000333 B449                    	mov	ah,49h
  2325                                  	;mov	ah,DEALLOC
  2326 00000335 CD21                    	int	21h		    ; Free it
  2327                                  no_free:
  2328                                  
  2329                                  ; M004; Start of changes
  2330                                  
  2331                                  ; Move the transient now. We will allocate the biggest block available
  2332                                  ; now and move the transient to the top of the block. We will then
  2333                                  ; deallocate this block. When the resident starts executing, it will
  2334                                  ; hopefully allocate this block again and find the transient intact.
  2335                                  
  2336 00000337 C606[2F02]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2337 0000033C 06                      	push	es
  2338                                  	;;mov	si,offset ResGroup:TranStart
  2339                                  	; 09/01/2023
  2340                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2341                                  	; 05/06/2023
  2342                                  	;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM RESGROUP:0475h
  2343 0000033D BE5025                  	mov	si,TRANSTART	; (End of the resident portion)
  2344                                  	;mov	di,0
  2345 00000340 31FF                    	xor	di,di ; 0
  2346                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2347                                  	;mov	cx,98C5h
  2348                                  	; 05/06/2023 - MSDOS 6.22 COMMAND.COM RESGROUP:047Bh
  2349                                  	;mov	cx,0AF95h	; TRANSIENT portion size
  2350 00000342 B901AA                  	mov	cx,TRANSPACEEND
  2351                                  	
  2352                                  ; Find the largest block available
  2353                                  
  2354 00000345 BBFFFF                  	mov	bx,0FFFFh
  2355 00000348 B448                    	mov	ah,48h
  2356                                  	;mov	ah,ALLOC
  2357 0000034A CD21                    	int	21h
  2358                                  
  2359                                  ; dx = size of transient saved previously 
  2360                                  
  2361 0000034C 39D3                    	cmp	bx,dx		; enough memory?
  2362 0000034E 722B                    	jb	short nomem_err	; not enough memory for transient
  2363                                  
  2364 00000350 B448                    	mov	ah,48h
  2365                                  	;mov	ah,ALLOC
  2366 00000352 CD21                    	int	21h		; get the largest block
  2367 00000354 7225                    	jc	short nomem_err	; something is really screwed up
  2368                                  
  2369 00000356 50                      	push	ax		; save memory address
  2370 00000357 01D8                    	add	ax,bx		; ax = top of my memory block
  2371 00000359 29D0                    	sub	ax,dx		; less size of transient
  2372 0000035B A3[2D02]                	mov	[TrnSeg],ax	; save transient segment
  2373 0000035E 8EC0                    	mov	es,ax		;
  2374 00000360 58                      	pop	ax		; restore our seg addr
  2375                                  
  2376                                  ; Everything is set for a move. We need to move in the reverse direction to
  2377                                  ; make sure we dont overwrite ourselves while copying
  2378                                  
  2379 00000361 01CE                    	add	si,cx
  2380 00000363 4E                      	dec	si
  2381 00000364 01CF                    	add	di,cx
  2382 00000366 4F                      	dec	di
  2383 00000367 FD                      	std
  2384 00000368 F3A4                    	rep	movsb
  2385 0000036A FC                      	cld
  2386                                  
  2387                                  ; Now we have to free up this block so that resident can get hold of it
  2388                                  
  2389 0000036B 8EC0                    	mov	es,ax
  2390 0000036D B449                    	mov	ah,49h
  2391                                  	;mov	ah,DEALLOC
  2392 0000036F CD21                    	int	21h		; release the memory block
  2393                                  
  2394                                  ; M004; End of changes
  2395                                  
  2396                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2397                                  	; 09/01/2023
  2398 00000371 C606[B402]00            	mov	byte [InitFlag],0	
  2399                                  
  2400 00000376 07                      	pop	es
  2401 00000377 1F                      	pop	ds
  2402                                  	;assume	ds:nothing
  2403                                  	
  2404                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2405                                  	
  2406 00000378 E903FD                  	jmp	LodCom_Trap	; allocate transient
  2407                                  
  2408                                  nomem_err:
  2409                                  
  2410                                  ;We call the error routine which will never return. It will either exit
  2411                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2412                                  ;message ( if first COMMAND )
  2413                                  
  2414 0000037B E97A1A                  	jmp	Alloc_error
  2415                                  
  2416                                  ;EndCodeInit:	; label	byte		; M004
  2417                                  
  2418                                  	; 16/04/2023
  2419                                  	EndCodeInit equ $
  2420                                  
  2421                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2422                                  ;; M004; If not, we signal an assembly error
  2423                                  ;
  2424                                  ;IF2
  2425                                  ;	IF ($ GT EndPipe)
  2426                                  ;		.err
  2427                                  ;		%out	"ENDINIT CODE TOO BIG"
  2428                                  ;	ENDIF
  2429                                  ;ENDIF
  2430                                  
  2431                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2432                                  ;;
  2433                                  ;		ORG	EndPipe		; M004
  2434                                  
  2435                                  ; 09/01/2023
  2436                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2437                                  ; 05/06/2023
  2438                                  ; MSDOS 6.22 COMMAND.COM - CODERES:04B7h
  2439                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2440                                  
  2441                                  ; 16/04/2023
  2442                                  	FillBytes equ EndPipe - EndCodeInit
  2443                                  
  2444                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2445                                  ; 16/04/2023
  2446                                  %if FillBytes>0
  2447                                  	;times EndPipe - EndCodeInit db 0
  2448 0000037E 00<rep 5Ah>             	times FillBytes db 0
  2449                                  %endif
  2450                                  
  2451                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2452                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289
  2453                                  
  2454                                  ; 05/06/2023 - Retrodos v4.2
  2455                                  ; MSDOS 6.22 COMMAND.COM - CODERES:050Bh ; EndInit+289
  2456                                  
  2457                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2458                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2459                                  
  2460 000003D8 [B702]                  InPipePtr:	dw	Pipe1 ;; 320h for MSDOS 5.0 COMMAND.COM
  2461                                  			      ; 3EAh for MSDOS 6.22 COMMAND.COM
  2462 000003DA [0603]                  OutPipePtr:	dw	Pipe2 ;; 36Fh for MSDOS 5.0 COMMAND.COM
  2463                                  			      ; 439h for MSDOS 6.22 COMMAND.COM
  2464                                  
  2465                                  Exec_Block:	; label	byte	; the data block for exec calls
  2466 000003DC 0000                    EnvirSeg:	dw	0
  2467                                  Com_Ptr:	; label	dword
  2468 000003DE 8000                    		dw	80h	; point at unformatted parameters
  2469 000003E0 0000                    		dw	0
  2470                                  Com_Fcb1:	; label	dword
  2471 000003E2 5C00                    		dw	5Ch
  2472 000003E4 0000                    		dw	0
  2473                                  Com_Fcb2:	; label	dword
  2474 000003E6 6C00                    		dw	6Ch
  2475 000003E8 0000                    		dw	0
  2476                                  
  2477                                  ; variables passed to transient
  2478                                  TranVars:	; label	byte
  2479                                  		;dw	offset DATARES:HeadFix_Trap
  2480 000003EA [9200]                  		dw	HeadFix_Trap
  2481 000003EC 0000                    MySeg:		dw	0	; put our own segment here
  2482 000003EE 0000                    LTpa:		dw	0	; will store tpa segment here
  2483 000003F0 2F                      RSwitChar:	db	"/"
  2484 000003F1 5C                      RDirChar:	db	"\"
  2485                                  		;dw	offset DATARES:Issue_Exec_Call
  2486 000003F2 [8501]                  		dw	Issue_Exec_Call
  2487 000003F4 0000                    MySeg1:		dw	0
  2488                                  		;dw	offset DATARES:RemCheck_Trap
  2489 000003F6 [6A00]                  		dw	RemCheck_Trap
  2490 000003F8 0000                    MySeg2:		dw	0
  2491                                  
  2492                                  ; 14/08/2024 - PCDOS 7.1 COMMAND.COM
  2493                                  %if 0
  2494                                  ResTest: 	dw	0
  2495                                  %endif
  2496                                  
  2497 000003FA 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2498                                  
  2499                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  2500 000003FC 0000                    Y_Flag:		dw	0
  2501                                  
  2502                                  TranVarEnd:	; label	byte
  2503                                  
  2504 000003FE 0000                    OldErrNo:	dw	0
  2505                                  
  2506                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2507                                  ;  MsgBuffer is only used while a command is being executed.
  2508                                  ;  SafePathBuffer is no longer needed, since it is used for
  2509                                  ;  unsuccessful program launches.
  2510                                  
  2511                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2512                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2513                                  	;Bugbug: Why so big a buffer?
  2514                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2515 00000400 00<rep 50h>             		times	64+3+13 db 0		
  2516                                  
  2517                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2518                                  
  2519 00000450 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2520 00000454 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2521                                  
  2522                                  ;SR;
  2523                                  ; The three vars below have been added for a pure COMMAND.COM
  2524                                  
  2525 00000456 0000                    ResSize:	dw	0
  2526                                  
  2527                                  ;SR;
  2528                                  ; Moved the stack here from the code segment
  2529                                  ;
  2530                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2531                                  	
  2532                                  		;db	(80h - 3) dup (?)
  2533                                  align 2
  2534 00000458 00<rep 7Ch>             		times	124 db 0		
  2535                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:053Eh (offset RStack)
  2536                                  ; 05/06/2023
  2537                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Ah (offset RStack)
  2538                                  RStack:		; label	word
  2539 000004D4 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2540                                  				; resident code segments
  2541                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2542                                  
  2543                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2544                                  ; -------------------------------
  2545                                  
  2546                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2547                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2548                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2549                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2550                                  ;            given a command-line like "/L:3,500;4"
  2551                                  ; UmbUsed  - An array of characters, each of which is 1 if the UMB
  2552                                  ;            matching its index number was specified on the command-line;
  2553                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2554                                  ;            will be set to 1. All others will be set to 0.
  2555                                  ; UmbSize  - An array of words, each of which is interpreted as a size
  2556                                  ;            specified by the user for a UMB (in the above example, all
  2557                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2558                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2559                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2560                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2561                                  ;            for details).
  2562                                  
  2563                                  ; - MSDOS 6.0 COMMAND.COM -
  2564                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2565                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2566                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2567                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2568                                  ;; space problem (it's just such a nice round number, eh?).
  2569                                  
  2570                                  ; 05/06/2023
  2571                                  MAXUMB	equ	16
  2572                                  
  2573                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2574                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2575                                  
  2576 000004D6 00                      fInHigh:	db	0
  2577                                  
  2578                                  ; MSDOS 6.0 COMMAND.COM
  2579                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2580                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Dh (DATARES:060Dh)
  2581 000004D7 00                      fUmbTiny:	db	0
  2582 000004D8 0000                    SegLoad:	dw	0
  2583 000004DA 00                      UmbLoad:	db	0
  2584                                  
  2585                                  ; 19/07/2024
  2586                                  ; PCDOS 7.1 COMMAND.COM
  2587                                  %if 0
  2588                                  UmbUsed:	times MAXUMB db 0 ; db MAXUMB dup (?)
  2589                                  UmbSize:	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2590                                  %else
  2591                                  	; 19/07/2024 - Retro DOS v5.0 (& v4.2) COMMAND.COM
  2592                                  	UmbUsed equ MsgBuffer	; 16 bytes
  2593                                  	UmbSize equ UmbUsed+MAXUMB ; UmbUsed+16; 16 words
  2594                                  %endif
  2595                                  
  2596 000004DB 00                      fm_umb:		db	0
  2597 000004DC 00                      fm_strat:	db	0
  2598 000004DD 00                      fm_argc:	db	0
  2599                                  
  2600                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2601                                  ; UmbLoad is set to the UMB number given.
  2602                                  
  2603                                  ;*** MESSAGES
  2604                                  ;    and other translatable text
  2605                                  
  2606                                  ; include comrmsg.inc	; M00
  2607                                  ; ------------------------------
  2608                                  
  2609                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2610                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2611                                  
  2612                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2613                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0644h (DATARES:0644h)
  2614                                  
  2615 000004DE 41                      ABORT_CHAR:	db 'A'
  2616 000004DF 52                      RETRY_CHAR:	db 'R'
  2617 000004E0 49                      IGNORE_CHAR:	db 'I'
  2618 000004E1 46                      FAIL_CHAR:	db 'F'
  2619 000004E2 59                      YES_CHAR:	db 'Y'
  2620 000004E3 4E                      NO_CHAR:	db 'N'
  2621 000004E4 05                      REQ_ABORT:	db 5
  2622 000004E5 41626F7274              		db 'Abort'
  2623 000004EA 07                      REQ_RETRY:	db 7
  2624 000004EB 2C205265747279          		db ', Retry'
  2625 000004F2 08                      REQ_IGNORE:	db 8
  2626 000004F3 2C2049676E6F7265        		db ', Ignore'
  2627 000004FB 06                      REQ_FAIL:	db 6
  2628 000004FC 2C204661696C            		db ', Fail'
  2629 00000502 01                      REQ_END:	db 1
  2630 00000503 3F                      		db '?'
  2631 00000504 08                      MREAD:		db 8
  2632 00000505 72656164696E6700        		db 'reading', 0
  2633 0000050D 08                      MWRITE:		db 8
  2634 0000050E 77726974696E6700        		db 'writing', 0
  2635 00000516 0E                      MDRIVE:		db 14
  2636 00000517 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2636 00000520 2025320D0A         
  2637 00000525 0F                      MDEVICE:	db 15
  2638 00000526 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2638 0000052F 652025320D0A       
  2639 00000535 26                      MVOLSERIAL:	db 38
  2640 00000536 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2640 0000053F 7365727420766F6C75-
  2640 00000548 6D6520253120736572-
  2640 00000551 69616C2025322D2533-
  2640 0000055A 0D0A               
  2641 0000055C 25                      BADFATMSG:	db 37
  2642 0000055D 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2642 00000566 636174696F6E207461-
  2642 0000056F 626C65206261642C20-
  2642 00000578 64726976652025310D-
  2642 00000581 0A                 
  2643 00000582 15                      COMBAD:		db 21
  2644 00000583 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2644 0000058C 4F4D4D414E442E434F-
  2644 00000595 4D0D0A             
  2645 00000598 21                      PUTBACKMSG:	db 33
  2646 00000599 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2646 000005A2 736B20776974682025-
  2646 000005AB 3120696E2064726976-
  2646 000005B4 652025320D0A       
  2647 000005BA 21                      PROMPT:		db 33
  2648 000005BB 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2648 000005C4 206B657920746F2063-
  2648 000005CD 6F6E74696E7565202E-
  2648 000005D6 202E202E0D0A       
  2649 000005DC 1C                      ENDBATMES:	db 28
  2650 000005DD 0D0A                    		db 0Dh,0Ah
  2651 000005DF 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2651 000005E8 206261746368206A6F-
  2651 000005F1 622028592F4E293F   
  2652 000005F9 13                      EXECEMES:	db 19
  2653 000005FA 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2653 00000603 65637574652025310D-
  2653 0000060C 0A                 
  2654 0000060D 13                      EXEBAD:		db 19
  2655 0000060E 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2655 00000617 4558452066696C650D-
  2655 00000620 0A                 
  2656 00000621 22                      TOOBIG:		db 34
  2657 00000622 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2657 0000062B 6F6F2062696720746F-
  2657 00000634 2066697420696E206D-
  2657 0000063D 656D6F72790D0A     
  2658 00000644 16                      NOHANDMES:	db 22
  2659 00000645 0D0A                    		db 0Dh,0Ah
  2660 00000647 4E6F20667265652066-     		db 'No free file handles'
  2660 00000650 696C652068616E646C-
  2660 00000659 6573               
  2661 0000065B 1A                      RBADNAM:	db 26
  2662 0000065C 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2662 00000665 6E64206F722066696C-
  2662 0000066E 65206E616D650D0A   
  2663                                  ACCDENIED:	; 14/01/2023
  2664                                  		; 10/01/2023
  2665                                  ACCDEN:		;db 14
  2666                                  		;db 'Access denied '
  2667                                  		; 19/07/2024 - PCDOS 7.1
  2668 00000676 0D                      		db 13
  2669 00000677 416363657373206465-     		db 'Access denied'
  2669 00000680 6E696564           
  2670 00000684 19                      BMEMMES:	db 25
  2671 00000685 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2671 0000068E 616C6C6F636174696F-
  2671 00000697 6E206572726F72     
  2672 0000069E 26                      HALTMES:	db 38
  2673 0000069F 0D0A                    		db 0Dh,0Ah
  2674 000006A1 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2674 000006AA 616420434F4D4D414E-
  2674 000006B3 442C2073797374656D-
  2674 000006BC 2068616C7465640D0A 
  2675 000006C5 21                      FRETMES:	db 33
  2676 000006C6 0D0A                    		db 0Dh,0Ah,
  2677 000006C8 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2677 000006D1 61727420434F4D4D41-
  2677 000006DA 4E442C206578697469-
  2677 000006E3 6E670D0A           
  2678 000006E7 2E                      PATRICIDE:	db 46
  2679 000006E8 0D0A                    		db 0Dh,0Ah
  2680 000006EA 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  2680 000006F3 2070726F6365737320-
  2680 000006FC 61626F727465642C20-
  2680 00000705 63616E6E6F7420636F-
  2680 0000070E 6E74696E7565       
  2681 00000714 0D0A                    		db 0Dh,0Ah
  2682 00000716 02                      NEWLINE:	db 2
  2683 00000717 0D0A                    		db 0Dh, 0Ah
  2684                                  
  2685                                  ; 10/01/2023
  2686                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2687                                  ; 05/06/2023
  2688                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0880h
  2689                                  
  2690 00000719 [FD0B]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2691 0000071B 0100                    		dw 1
  2692 0000071D [B809]                  		dw PARSMSGPTRS		; parse	error messages
  2693 0000071F 0100                    		dw 1
  2694 00000721 [FD0B]                  		dw EXTMSGPTRS		; critical error messages
  2695 00000723 0100                    		dw 1
  2696 00000725 0000                    		dw 0			; File system error messages
  2697 00000727 0000                    		dw 0			; are not supported.
  2698 00000729 [8800]                  		dw MsgRetrv_Trap	; disk retriever routine
  2699 0000072B 0000                    MySeg3:		dw 0			; segment of retriever routine
  2700                                  
  2701                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2702                                  ; 05/06/2023
  2703                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0894h
  2704                                  
  2705 0000072D 13                      CRMSG0:		db 19
  2706 0000072E 57726974652070726F-     		db 'Write protect error'
  2706 00000737 74656374206572726F-
  2706 00000740 72                 
  2707 00000741 0C                      CRMSG1:		db 12
  2708 00000742 496E76616C69642075-     		db 'Invalid unit'
  2708 0000074B 6E6974             
  2709 0000074E 09                      CRMSG2:		db 9
  2710 0000074F 4E6F74207265616479      		db 'Not ready'
  2711 00000758 16                      CRMSG3:		db 22
  2712 00000759 496E76616C69642064-     		db 'Invalid device request'
  2712 00000762 657669636520726571-
  2712 0000076B 75657374           
  2713 0000076F 0A                      CRMSG4:		db 10
  2714 00000770 44617461206572726F-     		db 'Data error'
  2714 00000779 72                 
  2715 0000077A 21                      CRMSG5:		db 33
  2716 0000077B 496E76616C69642064-     		db 'Invalid device request parameters'
  2716 00000784 657669636520726571-
  2716 0000078D 756573742070617261-
  2716 00000796 6D6574657273       
  2717 0000079C 0A                      CRMSG6:		db 10
  2718 0000079D 5365656B206572726F-     		db 'Seek error'
  2718 000007A6 72                 
  2719 000007A7 12                      CRMSG7:		db 18
  2720 000007A8 496E76616C6964206D-     		db 'Invalid media type'
  2720 000007B1 656469612074797065 
  2721 000007BA 10                      CRMSG8:		db 16
  2722 000007BB 536563746F72206E6F-     		db 'Sector not found'
  2722 000007C4 7420666F756E64     
  2723 000007CB 1A                      CRMSG9:		db 26
  2724 000007CC 5072696E746572206F-     		db 'Printer out of paper error'
  2724 000007D5 7574206F6620706170-
  2724 000007DE 6572206572726F72   
  2725 000007E6 11                      CRMSG10:	db 17
  2726 000007E7 577269746520666175-     		db 'Write fault error'
  2726 000007F0 6C74206572726F72   
  2727 000007F8 10                      CRMSG11:	db 16
  2728 000007F9 52656164206661756C-     		db 'Read fault error'
  2728 00000802 74206572726F72     
  2729 00000809 0F                      CRMSG12:	db 15
  2730 0000080A 47656E6572616C2066-     		db 'General failure'
  2730 00000813 61696C757265       
  2731 00000819 11                      CRMSG13:	db 17
  2732 0000081A 53686172696E672076-     		db 'Sharing violation'
  2732 00000823 696F6C6174696F6E   
  2733 0000082B 0E                      CRMSG14:	db 14
  2734 0000082C 4C6F636B2076696F6C-     		db 'Lock violation'
  2734 00000835 6174696F6E         
  2735 0000083A 13                      CRMSG15:	db 19
  2736 0000083B 496E76616C69642064-     		db 'Invalid disk change'
  2736 00000844 69736B206368616E67-
  2736 0000084D 65                 
  2737 0000084E 0F                      CRMSG16:	db 15
  2738 0000084F 46434220756E617661-     		db 'FCB unavailable'
  2738 00000858 696C61626C65       
  2739 0000085E 19                      CRMSG17:	db 25
  2740 0000085F 53797374656D207265-     		db 'System resource exhausted'
  2740 00000868 736F75726365206578-
  2740 00000871 68617573746564     
  2741 00000878 12                      CRMSG18:	db 18
  2742 00000879 436F64652070616765-     		db 'Code page mismatch'
  2742 00000882 206D69736D61746368 
  2743 0000088B 0C                      CRMSG19:	db 12
  2744 0000088C 4F7574206F6620696E-     		db 'Out of input'
  2744 00000895 707574             
  2745 00000898 17                      CRMSG20:	db 23
  2746 00000899 496E73756666696369-     		db 'Insufficient disk space'
  2746 000008A2 656E74206469736B20-
  2746 000008AB 7370616365         
  2747                                  
  2748                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2749                                  ; 05/06/2023
  2750                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0A17h
  2751                                  
  2752 000008B0 [2D07]                  CRITMSGPTRS:	dw CRMSG0
  2753 000008B2 [4107]                  		dw CRMSG1
  2754 000008B4 [4E07]                  		dw CRMSG2
  2755 000008B6 [5807]                  		dw CRMSG3
  2756 000008B8 [6F07]                  		dw CRMSG4
  2757 000008BA [7A07]                  		dw CRMSG5
  2758 000008BC [9C07]                  		dw CRMSG6
  2759 000008BE [A707]                  		dw CRMSG7
  2760 000008C0 [BA07]                  		dw CRMSG8
  2761 000008C2 [CB07]                  		dw CRMSG9
  2762 000008C4 [E607]                  		dw CRMSG10
  2763 000008C6 [F807]                  		dw CRMSG11
  2764 000008C8 [0908]                  		dw CRMSG12
  2765 000008CA [1908]                  		dw CRMSG13
  2766 000008CC [2B08]                  		dw CRMSG14
  2767 000008CE [3A08]                  		dw CRMSG15
  2768 000008D0 [4E08]                  		dw CRMSG16
  2769 000008D2 [5E08]                  		dw CRMSG17
  2770 000008D4 [7808]                  		dw CRMSG18
  2771 000008D6 [8B08]                  		dw CRMSG19
  2772 000008D8 [9808]                  		dw CRMSG20
  2773                                  
  2774                                  		; 14/01/2023
  2775                                  ;DataresEnd:	;; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2776                                  		; 05/06/2023
  2777                                  DataresEnd:	; MSDOS 6.22 COMMAND.COM - DATARES:0A41h (RESGROUP:0A41h)
  2778                                  
  2779 000008DA 13                      PAERRMSG0:	db 19
  2780 000008DB 546F6F206D616E7920-     		db 'Too many parameters'
  2780 000008E4 706172616D65746572-
  2780 000008ED 73                 
  2781 000008EE 1A                      PAERRMSG1:	db 26
  2782 000008EF 526571756972656420-     		db 'Required parameter missing'
  2782 000008F8 706172616D65746572-
  2782 00000901 206D697373696E67   
  2783 00000909 0E                      PAERRMSG2:	db 14
  2784 0000090A 496E76616C69642073-     		db 'Invalid switch'
  2784 00000913 7769746368         
  2785 00000918 0F                      PAERRMSG3:	db 15
  2786 00000919 496E76616C6964206B-     		db 'Invalid keyword'
  2786 00000922 6579776F7264       
  2787 00000928 01                      PAERRMSG4:	db 1
  2788 00000929 20                      		db 20h
  2789 0000092A 24                      PAERRMSG5:	db 36
  2790 0000092B 506172616D65746572-     		db 'Parameter value not in allowed range'
  2790 00000934 2076616C7565206E6F-
  2790 0000093D 7420696E20616C6C6F-
  2790 00000946 7765642072616E6765 
  2791                                  PAERRMSG6:	; 10/01/2023
  2792 0000094F 1B                      PAERRMSG7:	db 27
  2793 00000950 506172616D65746572-     		db 'Parameter value not allowed'
  2793 00000959 2076616C7565206E6F-
  2793 00000962 7420616C6C6F776564 
  2794                                  ;PAERRMSG7:	db 27
  2795                                  ;		db 'Parameter value not allowed'
  2796 0000096B 1C                      PAERRMSG8:	db 28
  2797 0000096C 506172616D65746572-     		db 'Parameter format not correct'
  2797 00000975 20666F726D6174206E-
  2797 0000097E 6F7420636F72726563-
  2797 00000987 74                 
  2798 00000988 11                      PAERRMSG9:	db 17
  2799 00000989 496E76616C69642070-     		db 'Invalid parameter'
  2799 00000992 6172616D65746572   
  2800 0000099A 1D                      PAERRMSG10:	db 29
  2801 0000099B 496E76616C69642070-     		db 'Invalid parameter combination'
  2801 000009A4 6172616D6574657220-
  2801 000009AD 636F6D62696E617469-
  2801 000009B6 6F6E               
  2802                                  
  2803                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2804                                  ; 05/06/2023
  2805                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0B3Bh
  2806                                  
  2807 000009B8 [DA08]                  PARSMSGPTRS:	dw PAERRMSG0
  2808 000009BA [EE08]                  		dw PAERRMSG1
  2809 000009BC [0909]                  		dw PAERRMSG2
  2810 000009BE [1809]                  		dw PAERRMSG3
  2811 000009C0 [2809]                  		dw PAERRMSG4
  2812 000009C2 [2A09]                  		dw PAERRMSG5
  2813 000009C4 [4F09]                  		dw PAERRMSG6
  2814 000009C6 [4F09]                  		dw PAERRMSG7
  2815 000009C8 [6B09]                  		dw PAERRMSG8
  2816 000009CA [8809]                  		dw PAERRMSG9
  2817 000009CC [9A09]                  		dw PAERRMSG10
  2818                                  ; 21/04/2023
  2819                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2820                                  
  2821 000009CE 10                      INVLFUNCT:	db 16
  2822 000009CF 496E76616C69642066-     		db 'Invalid function'
  2822 000009D8 756E6374696F6E     
  2823 000009DF 0E                      FNOTFOUND:	db 14
  2824 000009E0 46696C65206E6F7420-     		db 'File not found'
  2824 000009E9 666F756E64         
  2825 000009EE 0E                      PNOTFOUND:	db 14
  2826 000009EF 50617468206E6F7420-     		db 'Path not found'
  2826 000009F8 666F756E64         
  2827 000009FD 13                      TOOMANYOF:	db 19
  2828 000009FE 546F6F206D616E7920-     		db 'Too many open files'
  2828 00000A07 6F70656E2066696C65-
  2828 00000A10 73                 
  2829                                  ; 14/01/2023
  2830                                  ;ACCDEN:	; 10/01/2023
  2831                                  ;ACCDENIED:	db 14
  2832                                  ;		db 'Access denied '
  2833 00000A11 0E                      INVHANDLE:	db 14
  2834 00000A12 496E76616C69642068-     		db 'Invalid handle'
  2834 00000A1B 616E646C65         
  2835 00000A20 1F                      MEMCBDEST:	db 31
  2836 00000A21 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2836 00000A2A 6E74726F6C20626C6F-
  2836 00000A33 636B73206465737472-
  2836 00000A3C 6F796564           
  2837 00000A40 13                      INSUFFMEM:	db 19
  2838 00000A41 496E73756666696369-     		db 'Insufficient memory'
  2838 00000A4A 656E74206D656D6F72-
  2838 00000A53 79                 
  2839 00000A54 1C                      INVMEMBLA:	db 28
  2840 00000A55 496E76616C6964206D-     		db 'Invalid memory block address'
  2840 00000A5E 656D6F727920626C6F-
  2840 00000A67 636B20616464726573-
  2840 00000A70 73                 
  2841 00000A71 13                      INVENVIRO:	db 19
  2842 00000A72 496E76616C69642045-     		db 'Invalid Environment'
  2842 00000A7B 6E7669726F6E6D656E-
  2842 00000A84 74                 
  2843 00000A85 0E                      INVFORMAT:	db 14
  2844 00000A86 496E76616C69642066-     		db 'Invalid format'
  2844 00000A8F 6F726D6174         
  2845 00000A94 1A                      INVFNPARM:	db 26
  2846 00000A95 496E76616C69642066-     		db 'Invalid function parameter'
  2846 00000A9E 756E6374696F6E2070-
  2846 00000AA7 6172616D65746572   
  2847 00000AAF 0C                      INVLDDATA:	db 12
  2848 00000AB0 496E76616C69642064-     		db 'Invalid data'
  2848 00000AB9 617461             
  2849 00000ABC 1B                      INVDRVSPC:	db 27
  2850 00000ABD 496E76616C69642064-     		db 'Invalid drive specification'
  2850 00000AC6 726976652073706563-
  2850 00000ACF 696669636174696F6E 
  2851 00000AD8 23                      ATRCURDIR:	db 35
  2852 00000AD9 417474656D70742074-     		db 'Attempt to remove current directory'
  2852 00000AE2 6F2072656D6F766520-
  2852 00000AEB 63757272656E742064-
  2852 00000AF4 69726563746F7279   
  2853 00000AFC 0F                      NOTSAMDEV:	db 15
  2854 00000AFD 4E6F742073616D6520-     		db 'Not same device'
  2854 00000B06 646576696365       
  2855 00000B0C 0D                      NOMOREFIL:	db 13
  2856 00000B0D 4E6F206D6F72652066-     		db 'No more files'
  2856 00000B16 696C6573           
  2857 00000B1A 0B                      FILEXISTS:	db 11
  2858 00000B1B 46696C652065786973-     		db 'File exists'
  2858 00000B24 7473               
  2859 00000B26 1B                      CANTMKDIR:	db 27
  2860 00000B27 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2860 00000B30 6B6520646972656374-
  2860 00000B39 6F727920656E747279 
  2861 00000B42 0E                      FAILINT24:	db 14
  2862 00000B43 4661696C206F6E2049-     		db 'Fail on INT 24'
  2862 00000B4C 4E54203234         
  2863 00000B51 15                      TOOMANYRD:	db 21
  2864 00000B52 546F6F206D616E7920-     		db 'Too many redirections'
  2864 00000B5B 726564697265637469-
  2864 00000B64 6F6E73             
  2865 00000B67 15                      DUPLREDIR:	db 21
  2866 00000B68 4475706C6963617465-     		db 'Duplicate redirection'
  2866 00000B71 207265646972656374-
  2866 00000B7A 696F6E             
  2867 00000B7D 10                      INVPASSWD:	db 16
  2868 00000B7E 496E76616C69642070-     		db 'Invalid password'
  2868 00000B87 617373776F7264     
  2869 00000B8E 11                      INVLDPARM:	db 17
  2870 00000B8F 496E76616C69642070-     		db 'Invalid parameter'
  2870 00000B98 6172616D65746572   
  2871 00000BA0 12                      NETDATFAU:	db 18
  2872 00000BA1 4E6574776F726B2064-     		db 'Network data fault'
  2872 00000BAA 617461206661756C74 
  2873 00000BB3 21                      FNOSUPNET:	db 33
  2874 00000BB4 46756E6374696F6E20-     		db 'Function not supported by network'
  2874 00000BBD 6E6F7420737570706F-
  2874 00000BC6 72746564206279206E-
  2874 00000BCF 6574776F726B       
  2875 00000BD5 27                      RSCNOTINS:	db 39
  2876 00000BD6 526571756972656420-     		db 'Required system component not installed'
  2876 00000BDF 73797374656D20636F-
  2876 00000BE8 6D706F6E656E74206E-
  2876 00000BF1 6F7420696E7374616C-
  2876 00000BFA 6C6564             
  2877                                  
  2878                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2879                                  ; 05/06/2023
  2880                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0D8Fh
  2881                                  
  2882 00000BFD [CE09]                  EXTMSGPTRS:	dw INVLFUNCT
  2883 00000BFF [DF09]                  		dw FNOTFOUND
  2884 00000C01 [EE09]                  		dw PNOTFOUND
  2885 00000C03 [FD09]                  		dw TOOMANYOF
  2886 00000C05 [7606]                  		dw ACCDENIED
  2887 00000C07 [110A]                  		dw INVHANDLE
  2888 00000C09 [200A]                  		dw MEMCBDEST
  2889 00000C0B [400A]                  		dw INSUFFMEM
  2890 00000C0D [540A]                  		dw INVMEMBLA
  2891 00000C0F [710A]                  		dw INVENVIRO
  2892 00000C11 [850A]                  		dw INVFORMAT
  2893 00000C13 [940A]                  		dw INVFNPARM
  2894 00000C15 [AF0A]                  		dw INVLDDATA
  2895 00000C17 0000                    		dw 0
  2896 00000C19 [BC0A]                  		dw INVDRVSPC
  2897 00000C1B [D80A]                  		dw ATRCURDIR
  2898 00000C1D [FC0A]                  		dw NOTSAMDEV
  2899 00000C1F [0C0B]                  		dw NOMOREFIL
  2900 00000C21 [2D07]                  		dw CRMSG0
  2901 00000C23 [4107]                  		dw CRMSG1
  2902 00000C25 [4E07]                  		dw CRMSG2
  2903 00000C27 [5807]                  		dw CRMSG3
  2904 00000C29 [6F07]                  		dw CRMSG4
  2905 00000C2B [7A07]                  		dw CRMSG5
  2906 00000C2D [9C07]                  		dw CRMSG6
  2907 00000C2F [A707]                  		dw CRMSG7
  2908 00000C31 [BA07]                  		dw CRMSG8
  2909 00000C33 [CB07]                  		dw CRMSG9
  2910 00000C35 [E607]                  		dw CRMSG10
  2911 00000C37 [F807]                  		dw CRMSG11
  2912 00000C39 [0908]                  		dw CRMSG12
  2913 00000C3B [1908]                  		dw CRMSG13
  2914 00000C3D [2B08]                  		dw CRMSG14
  2915 00000C3F [3A08]                  		dw CRMSG15
  2916 00000C41 [4E08]                  		dw CRMSG16
  2917 00000C43 [5E08]                  		dw CRMSG17
  2918 00000C45 [7808]                  		dw CRMSG18
  2919 00000C47 [8B08]                  		dw CRMSG19
  2920 00000C49 [9808]                  		dw CRMSG20
  2921 00000C4B 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  2922 00000C9B [1A0B]                  		dw FILEXISTS
  2923 00000C9D 0000                    		dw 0
  2924 00000C9F [260B]                  		dw CANTMKDIR
  2925 00000CA1 [420B]                  		dw FAILINT24
  2926 00000CA3 [510B]                  		dw TOOMANYRD
  2927 00000CA5 [670B]                  		dw DUPLREDIR
  2928 00000CA7 [7D0B]                  		dw INVPASSWD
  2929 00000CA9 [8E0B]                  		dw INVLDPARM
  2930 00000CAB [A00B]                  		dw NETDATFAU
  2931 00000CAD [B30B]                  		dw FNOSUPNET
  2932 00000CAF [D50B]                  		dw RSCNOTINS
  2933                                  ; ----------------------------------------------------------------------------
  2934                                  	; 17/04/2023
  2935                                  ExtMsgEnd:
  2936                                  
  2937                                  ; 21/04/2023
  2938                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  2939                                  
  2940                                  ; ----------------------------------------------------------------------------
  2941                                  
  2942                                  ; 20/04/2023
  2943                                  
  2944 00000CB1 90<rep Fh>              align 16
  2945                                  
  2946                                  ; ----------------------------------------------------------------------------
  2947                                  
  2948                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2949                                  ;; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  2950                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2951                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:0E50h (CODERES:0000h)
  2952                                  
  2953                                  ; ----------------------------------------------------------------------------
  2954                                  ; SEGMENT - CODERES
  2955                                  ; ----------------------------------------------------------------------------
  2956                                  
  2957                                  ; 11/01/2023
  2958                                  RCODE_START:	
  2959                                  
  2960                                  ; ----------------------------------------------------------------------------
  2961                                  ;***	EXEC error handling
  2962                                  ;
  2963                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  2964                                  ;	We examine the error code and select an appropriate message.
  2965                                  ; --------------------------
  2966                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  2967                                  ;	Condense the error scan?
  2968                                  ;	RBADNAM is checked by transient, no need here?
  2969                                  ;	Move below Ext_Exec.
  2970                                  ; ----------------------------------------------------------------------------
  2971                                  
  2972                                  Exec_Err:
  2973                                  ;SR;
  2974                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  2975                                  ; in order here
  2976                                  
  2977                                  ;	Bugbug:	can we use byte compares here?
  2978                                  ;	Might be able to use byte msg#s, too.
  2979                                  
  2980                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  2981                                  ;	Speed not high priority here.
  2982                                  
  2983                                  ;	Move this to transient.
  2984                                  
  2985                                  	; 10/01/2023
  2986                                  
  2987                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  2988 00000CC0 BA[5B06]                	mov	dx,RBADNAM
  2989 00000CC3 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  2990 00000CC5 741B                    	je	short GotExecEMes		; bad command
  2991                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  2992 00000CC7 BA[2106]                	mov	dx,TOOBIG
  2993 00000CCA 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  2994 00000CCC 7414                    	je	short GotExecEMes		; file not found
  2995                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  2996 00000CCE BA[0D06]                	mov	dx,EXEBAD
  2997 00000CD1 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  2998 00000CD3 740D                    	je	short GotExecEMes		; bad exe file
  2999                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  3000 00000CD5 BA[7606]                	mov	dx,ACCDEN
  3001 00000CD8 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  3002 00000CDA 7406                    	je	short GotExecEMes		; access denied
  3003                                  
  3004                                  Default_Message:
  3005                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  3006 00000CDC BA[F905]                	mov	dx,EXECEMES
  3007                                  						; default message
  3008 00000CDF BE[CE01]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  3009                                  						; get address of subst block
  3010                                  GotExecEMes:
  3011                                  	;mov	dx,bx				; DX = ptr to msg
  3012 00000CE2 E85106                  	call	RPrint ; invoke	RPrint
  3013 00000CE5 EB09                    	jmp	short NoExec
  3014                                  
  3015                                  ; ----------------------------------------------------------------------------
  3016                                  ;***	EXEC call
  3017                                  ;
  3018                                  ;	The transient has set up everything for an EXEC system call.
  3019                                  ;	For cleanliness, we issue the EXEC here in the resident 
  3020                                  ;	so that we may be able to recover cleanly upon success.
  3021                                  ;
  3022                                  ;	CS,DS,ES,SS = DATARES seg addr
  3023                                  ; ----------------------------------------------------------------------------
  3024                                  
  3025                                  Ext_Exec:
  3026                                  ;SR;
  3027                                  ; The words put on the stack by the stub will be popped off when we finally
  3028                                  ;jump to LodCom (by LodCom).
  3029                                  
  3030                                  	; 10/01/2023
  3031                                  	;int	21h			; do the exec
  3032                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  3033                                  Exec_Ret:
  3034 00000CE7 72D7                    	jc	short Exec_Err		; exec failed
  3035                                  
  3036                                  ;	The exec has completed. Retrieve the exit code.
  3037                                  
  3038                                  Exec_Wait:
  3039 00000CE9 B44D                    	mov	ah,4Dh
  3040                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  3041 00000CEB CD21                    	int	21h			; get the return code
  3042                                  	;mov	[cs:RetCode],ax
  3043                                  	; 11/01/2023
  3044 00000CED A3[3802]                	mov	[RetCode],ax
  3045                                  
  3046                                  ;	See if we can reload the transient. The external command
  3047                                  ;	may have overwritten part of the transient.
  3048                                  
  3049                                  NoExec:
  3050                                  ;SR;
  3051                                  ; ds = es = ss = DATARES when we jump to LodCom
  3052                                  ;
  3053 00000CF0 E97801                  	jmp	LodCom
  3054                                  
  3055                                  ; ----------------------------------------------------------------------------
  3056                                  ;***	Int 23 (ctrl-c) handler
  3057                                  ;
  3058                                  ;	This is the default system INT 23 handler. All processes
  3059                                  ;	(including COMMAND) get it by default. There are some
  3060                                  ;	games that are played: We ignore ^C during most of the
  3061                                  ;	INIT code. This is because we may perform an ALLOC and
  3062                                  ;	diddle the header! Also, if we are prompting for date/time
  3063                                  ;	in the init code, we are to treat ^C as empty responses.
  3064                                  ; ---------------------------
  3065                                  ;	Bugbug:	put init ctrl-c handling in init module.
  3066                                  ; ----------------------------------------------------------------------------
  3067                                  
  3068                                  ;SR;
  3069                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  3070                                  ;both these values off the stack now
  3071                                  ;
  3072                                  ;ContC	proc	far
  3073                                  
  3074                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3075                                  
  3076                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  3077                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  3078                                  ContC:
  3079 00000CF3 1F                      	pop	ds			; ds = DATARES
  3080                                  ;	assume	ds:DATARES
  3081                                  ;;	pop	word [OldDS]		; OldDS = old ds
  3082                                  
  3083 00000CF4 F606[B402]01            	test	byte [InitFlag],INITINIT ; 1
  3084                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  3085 00000CF9 740D                    	jz	short NotAtInit		; no
  3086 00000CFB F606[B402]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  3087                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  3088 00000D00 7404                    	jz	short CmdIret		; no, ignore ^C
  3089 00000D02 1F                      	pop	ds			; restore before jumping; M021
  3090                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  3091 00000D03 E92F0E                  	jmp	init_contc_specialcase
  3092                                  CmdIret:
  3093                                  ;SR;
  3094                                  ; Restore ds to its previous value
  3095                                  ;
  3096                                  
  3097                                  ;;	mov	ds,[OLdDS]		;
  3098 00000D06 1F                      	pop	ds
  3099 00000D07 CF                      	iret				; yes, ignore the ^C
  3100                                  
  3101                                  NotAtInit:
  3102 00000D08 F606[B402]04            	test	byte [InitFlag],INITCTRLC ; 4
  3103                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  3104 00000D0D 7411                    	jz	short NotInit 		; nope too.
  3105                                  
  3106                                  ;*	We are interrupting ourselves in this ^C handler. We need
  3107                                  ;	to set carry and return to the user sans flags only if the
  3108                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  3109                                  
  3110                                  	;cmp	ah,1
  3111                                  	;jb	short CmdIret
  3112                                  	; 19/07/2024
  3113 00000D0F 84E4                    	test	ah,ah
  3114 00000D11 74F3                    	jz	short CmdIret
  3115                                  
  3116 00000D13 80FC0C                  	cmp	ah,12
  3117 00000D16 77EE                    	ja	short CmdIret
  3118                                  
  3119 00000D18 1F                      	pop	ds			;restore ds to old value
  3120 00000D19 83C406                  	add	sp,6			; remove int frame
  3121 00000D1C F9                      	stc
  3122                                  
  3123                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  3124 00000D1D CA0200                  	retf	2			; remove those flags...
  3125                                  
  3126                                  NotInit:
  3127                                  
  3128                                  ;*	We have now received a ^C for some process (maybe ourselves
  3129                                  ;	but not at INIT).
  3130                                  ;	
  3131                                  ;	Note that we are running on the user's stack!!! Bad news if
  3132                                  ;	any of the system calls below go and issue another INT
  3133                                  ;	24... Massive stack overflow! Another bad point is that
  3134                                  ;	SavHand will save an already saved handle, thus losing a
  3135                                  ;	possible redirection...
  3136                                  ;	
  3137                                  ;	All we need to do is set the flag to indicate nested ^C. 
  3138                                  ;	The above code will correctly flag the ^C diring the
  3139                                  ;	message output and prompting while ignoring the ^C the rest
  3140                                  ;	of the time.
  3141                                  ;	
  3142                                  ;	Clean up: flush disk. If we are in the middle of a batch
  3143                                  ;	file, we ask if he wants to terminate it. If he does, then
  3144                                  ;	we turn off all internal flags and let the DOS abort.
  3145                                  
  3146 00000D20 800E[B402]04            	or	byte [InitFlag],INITCTRLC ; 4
  3147                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  3148 00000D25 FB                      	sti
  3149                                  
  3150                                  ;	push	cs			; el yucko! change the user's ds!!
  3151                                  ;	pop	ds
  3152                                  
  3153                                  ;	assume	ds:RESGROUP
  3154                                  
  3155 00000D26 58                      	pop	ax			; discard the old ds value
  3156                                  
  3157 00000D27 A1[4302]                	mov	ax,[SingleCom]
  3158 00000D2A 09C0                    	or	ax,ax
  3159 00000D2C 7506                    	jnz	short NoReset
  3160 00000D2E 50                      	push	ax
  3161 00000D2F B40D                    	mov	ah,DISK_RESET ; 0Dh
  3162 00000D31 CD21                    	int	21h			; reset disks in case files were open
  3163 00000D33 58                      	pop	ax
  3164                                  
  3165                                  NoReset:
  3166                                  
  3167                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  3168                                  ;	walk the entire active list and free each segment. Here,
  3169                                  ;	we just free the single batch segment.
  3170                                  
  3171 00000D34 F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
  3172 00000D3A 7452                    	jz	short ContCTerm
  3173 00000D3C 09C0                    	or	ax,ax
  3174 00000D3E 754E                    	jnz	short ContCTerm
  3175 00000D40 E88502                  	call	SavHand
  3176 00000D43 E89303                  	call	AskEnd			; ask if user wants to end batch
  3177                                  
  3178                                  ;	If the carry flag is clear, we do NOT free up the batch file
  3179                                  
  3180 00000D46 7340                    	jnc	short ContBatch
  3181 00000D48 8A0E[3B02]              	mov	cl,[EchoFlag]		; get current echo flag
  3182 00000D4C 53                      	push	bx
  3183                                  
  3184                                  ClearBatch:
  3185 00000D4D 8E06[E701]              	mov	es,[Batch]		; get batch segment
  3186                                  	;mov	di,20h
  3187 00000D51 8B3E2000                	mov	di,[BATCHSEGMENT.BatFile] ; get offset of batch file name
  3188                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  3189                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  3190 00000D55 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  3191                                  	; MSDOS 3.3 ([ES:4])
  3192                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  3193                                  	;
  3194                                  	; 19/07/2024
  3195                                  	;cmp	bx,0			; is a FOR in progress
  3196                                  	;je	short No_Bat_For	; no - don't deallocate
  3197 00000D5A 85DB                    	test	bx,bx
  3198 00000D5C 7408                    	jz	short No_Bat_For
  3199                                  
  3200 00000D5E 06                      	push	es			;
  3201 00000D5F 8EC3                    	mov	es,bx			; yes - free it up...
  3202 00000D61 B449                    	mov	ah,49h
  3203                                  	;mov	ah,DEALLOC ; 49h	;
  3204 00000D63 CD21                    	int	21h			;
  3205 00000D65 07                      	pop	es			; restore to batch segment
  3206                                  
  3207                                  No_Bat_For:
  3208                                  	;mov	cl,[es:1]
  3209 00000D66 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  3210                                  	;mov	bx,[es:3]
  3211 00000D6B 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  3212 00000D70 B449                    	mov	ah,49h
  3213                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  3214 00000D72 CD21                    	int	21h
  3215 00000D74 891E[E701]              	mov	[Batch],bx		; get ready to deallocate next batch
  3216 00000D78 FF0E[4C02]              	dec	word [Nest]		; is there another batch file?
  3217 00000D7C 75CF                    	jnz	short ClearBatch	; keep going until no batch file
  3218                                  
  3219                                  ;	We are terminating a batch file; restore the echo status
  3220                                  
  3221                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  3222 00000D7E 5B                      	pop	bx
  3223 00000D7F 880E[3B02]              	mov	[EchoFlag],cl		; reset echo status
  3224                                  	; 29/05/2018
  3225 00000D83 C606[B502]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  3226                                  
  3227                                  ContBatch:
  3228 00000D88 E8A805                  	call	crlf			; print out crlf before returning
  3229 00000D8B E86302                  	call	RestHand
  3230                                  
  3231                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  3232                                  
  3233                                  ContCTerm:
  3234 00000D8E 31C0                    	xor	ax,ax			; indicate no read
  3235 00000D90 89C5                    	mov	bp,ax
  3236                                  
  3237                                  ;	The following resetting of the state flags is good for the
  3238                                  ;	generalized batch processing.
  3239                                  
  3240 00000D92 A2[4802]                	mov	[IfFlag],al		; turn off iffing
  3241 00000D95 A2[4902]                	mov	[ForFlag],al		; turn off for processing
  3242 00000D98 E81C00                  	call	ResPipeOff
  3243 00000D9B 3906[4302]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  3244 00000D9F 7406                    	jz	short NoSetSing
  3245 00000DA1 C706[4302]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  3246                                  					;  pipe, batch, for
  3247                                  NoSetSing:
  3248                                  
  3249                                  ;	If we are doing an internal command, go through the reload process.
  3250                                  ;	If we are doing an external, let DOS abort the process.
  3251                                  ;	In both cases, we are now done with the ^C processing.
  3252                                  
  3253 00000DA7 8026[B402]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  3254 00000DAC 3806[3702]              	cmp	[ExtCom],al
  3255 00000DB0 7503                    	jnz	short DoDAb		; internal ^c
  3256 00000DB2 E94501                  	jmp	LodCom1
  3257                                  DoDAb:
  3258 00000DB5 F9                      	stc				; tell dos to abort
  3259                                  
  3260                                  ;SR;
  3261                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  3262                                  ;by setting carry and leaving flags on the stack
  3263                                  
  3264 00000DB6 CB                      	retf				; Leave flags on stack
  3265                                  
  3266                                  ;ContC	endp
  3267                                  
  3268                                  ;SR;
  3269                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  3270                                  ;both have ds = DATARES
  3271                                  
  3272                                  	; 11/01/2023
  3273                                  ResPipeOff:
  3274 00000DB7 50                      	push	ax
  3275 00000DB8 31C0                    	xor	ax,ax
  3276                                  	;xchg	al,[cs:PIPEFLAG]
  3277 00000DBA 8606[B502]              	xchg	al,[PipeFlag]
  3278 00000DBE 08C0                    	or	al,al
  3279 00000DC0 7404                    	jz	short NoPipePop
  3280                                  	;shr	byte [cs:ECHOFLAG],1
  3281 00000DC2 D02E[3B02]              	shr	byte [EchoFlag],1
  3282                                  NoPipePop:
  3283 00000DC6 58                      	pop	ax
  3284 00000DC7 C3                      	retn
  3285                                  
  3286                                  ;CODERES ends
  3287                                  
  3288                                  ;=============================================================================
  3289                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  3290                                  ;=============================================================================
  3291                                  ; 21/09/2018 - Retro DOS v3.0
  3292                                  
  3293                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  3294                                  ;	name	COMMAND2
  3295                                  
  3296                                  ;/*
  3297                                  ; *                      Microsoft Confidential
  3298                                  ; *                      Copyright (C) Microsoft Corporation 1991
  3299                                  ; *                      All Rights Reserved.
  3300                                  ; */
  3301                                  
  3302                                  ;
  3303                                  ;	Revision History
  3304                                  ;	================
  3305                                  ;
  3306                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  3307                                  ;			reserve memory by changing int 12h and then give it
  3308                                  ;			back to DOS by changing arenas in autoexec.bat.
  3309                                  ;			This makes command.com reload transient and this
  3310                                  ;			cannot be done at this stage.
  3311                                  ;
  3312                                  
  3313                                  ;CODERES segment public byte
  3314                                  
  3315                                  ;*	If we cannot allocate enough memory for the transient or there
  3316                                  ;	was some other allocation error, we display a message and
  3317                                  ;	then die.
  3318                                  
  3319                                  ;SR;
  3320                                  ; We will have to make sure that at this entry point and at FatalC, 
  3321                                  ;ds = DATARES. All jumps to these points are made from only within this file
  3322                                  ;and so we should be able to do this
  3323                                  
  3324                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3325                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  3326                                  
  3327                                  	;assume	ds:DATARES
  3328                                  BadMemErr:
  3329 00000DC8 BA[8406]                	mov	dx,BMEMMES			; DX = ptr to msg
  3330                                  FatalC:
  3331                                  	; 12/01/2023
  3332                                  ;;	push	cs
  3333                                  ;;	pop	ds
  3334                                  ;;	assume	ds:ResGroup
  3335                                  ;	invoke	RPrint
  3336                                  
  3337                                  	; 12/01/2023
  3338                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3339 00000DCB E86805                  	call	RPrint
  3340                                  
  3341                                  	; MSDOS 3.3
  3342                                  	;call	RDISPMSG
  3343                                  
  3344                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  3345                                  ;	we can't do anything else!
  3346                                  
  3347 00000DCE 803E[4002]00            	cmp	byte [PermCom],0
  3348 00000DD3 7410                    	je	short FatalRet
  3349                                  
  3350                                  ;	We are a permanent command. If we are in the process of the
  3351                                  ;	magic interrupt (Singlecom) then exit too.
  3352                                  
  3353 00000DD5 833E[4302]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  3354 00000DDA 7509                    	jne	short FatalRet			; must take int_2e exit
  3355                                  
  3356                                  ;	Permanent command. We can't do ANYthing except halt.
  3357                                  
  3358 00000DDC BA[9E06]                	mov	dx,HALTMES			; DX = ptr to msg
  3359                                  	;invoke	RPrint
  3360                                  	; 12/01/2023	
  3361                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3362 00000DDF E85405                  	call	RPrint	
  3363                                  	; MSDOS 3.3
  3364                                  	;call	RDISPMSG
  3365 00000DE2 FB                      	sti
  3366                                  Stall:
  3367 00000DE3 EBFE                    	jmp	short Stall			; crash the system nicely
  3368                                  
  3369                                  FatalRet:
  3370 00000DE5 BA[C506]                	mov	dx,FRETMES			; DX = ptr to msg
  3371                                  	;call	RDISPMSG
  3372                                  	; 12/01/2023	
  3373 00000DE8 E84B05                  	call	RPrint	
  3374                                  FatalRet2:
  3375 00000DEB 803E[4002]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  3376 00000DF0 7517                    	jne	short Ret_2e			; must be int_2e
  3377                                  
  3378                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3379                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3380                                  ;	case we decide to do that.)
  3381                                  
  3382 00000DF2 A1[DC01]                	mov	ax,[Parent]
  3383                                  	;mov	[16h],ax
  3384 00000DF5 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3385 00000DF8 A1[DE01]                	mov	ax,[OldTerm]
  3386                                  	;mov	[0Ah],ax
  3387 00000DFB A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3388 00000DFE A1[E001]                	mov	ax,[OldTerm+2]
  3389                                  	;mov	[0Ch],ax
  3390 00000E01 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3391 00000E04 B8004C                  	mov	ax,4C00h
  3392                                  	;mov	ax,(EXIT<<8) ; 4C00h		; return to lower level
  3393 00000E07 CD21                    	int	21h
  3394                                  Ret_2e:
  3395                                  ;SR;
  3396                                  ; We will ensure that ds = DATARES for all entries to this place
  3397                                  ;
  3398                                  
  3399                                  ;;	push	cs
  3400                                  ;;	pop	ds
  3401                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3402                                    	
  3403                                  ;	assume	ds:DATARES
  3404                                  
  3405                                  	;PUSH	CS
  3406                                  	;POP	DS
  3407                                  
  3408 00000E09 C706[4302]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3409 00000E0F 8E06[FA03]              	mov	es,[Res_Tpa]
  3410                                  	;mov	ah,49h	; 12/01/2023
  3411 00000E13 B449                    	mov	ah,DEALLOC
  3412 00000E15 CD21                    	int	21h			; free up space used by transient
  3413 00000E17 8B1E[DA01]              	mov	bx,[Save_Pdb]
  3414 00000E1B B450                    	mov	ah,50h
  3415                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3416 00000E1D CD21                    	int	21h			; current process is user
  3417 00000E1F A1[3802]                	mov	ax,[RetCode]
  3418 00000E22 803E[3702]00            	cmp	byte [ExtCom],0
  3419 00000E27 7502                    	jne	short GotECode
  3420 00000E29 31C0                    	xor	ax,ax			; internals always return 0
  3421                                  GotECode:
  3422 00000E2B C606[3702]01            	mov	byte [ExtCom],1		; force external
  3423                                  
  3424                                  ;SR; This is actually returning to the caller. However, the old code had
  3425                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3426                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3427                                  
  3428                                  	; 12/01/2023
  3429 00000E30 FF2E[D601]              	jmp	far [Int_2e_Ret]	; "iret"
  3430                                  
  3431                                  ;***	Int_2e, magic command executer
  3432                                  
  3433                                  Int_2e:
  3434                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3435                                  ;SR;
  3436                                  ;We are going to come here from the stub with the old ds and DATARES value
  3437                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3438                                  
  3439                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3440                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3441                                  
  3442 00000E34 1F                      	pop	ds			; ds = DATARES
  3443                                  	;assume	ds:DATARES
  3444 00000E35 58                      	pop	ax
  3445                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3446                                  
  3447                                  	;pop	word [cs:Int_2e_Ret]
  3448                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3449                                  	;pop	ax			; chuck flags
  3450 00000E36 8F06[D601]              	pop	word [Int_2e_Ret]
  3451 00000E3A 8F06[D801]              	pop	word [Int_2e_Ret+2]
  3452                                  	
  3453 00000E3E 83C402                  	add	sp,2
  3454                                  
  3455                                  ;;	push	cs
  3456                                  ;;	pop	es
  3457                                  
  3458 00000E41 1E                      	push	ds
  3459 00000E42 07                      	pop	es			; es = DATARES
  3460                                  ;	;mov	ds,OldDS
  3461 00000E43 8ED8                    	mov	ds,ax
  3462                                  	;assume	ds:nothing		; ds = old value
  3463                                  
  3464 00000E45 BF8000                  	mov	di,80h
  3465 00000E48 B94000                  	mov	cx,64
  3466                                  ;	Bugbug:	cld
  3467 00000E4B F3A5                    	rep	movsw
  3468 00000E4D B451                    	mov	ah,51h
  3469                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3470 00000E4F CD21                    	int	21h			; get user's header
  3471                                  	; 12/01/2023
  3472 00000E51 26891E[DA01]            	mov	[es:Save_Pdb],bx
  3473                                  	;mov	[cs:Save_Pdb],bx
  3474 00000E56 B450                    	mov	ah,50h
  3475                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3476                                  
  3477                                  ;;	mov	bx,cs
  3478                                  ;SR;
  3479                                  ;Set ds = DATARES because BadMemErr expects this
  3480                                  
  3481                                  	; 12/01/2023
  3482 00000E58 06                      	push	es
  3483 00000E59 1F                      	pop	ds
  3484                                  	;assume	ds:DATARES
  3485                                  
  3486 00000E5A 8CDB                    	mov	bx,ds			; es = our PSP now
  3487                                  	;mov	bx,cs
  3488                                  
  3489 00000E5C CD21                    	int	21h			; current process is me
  3490                                  	;mov	word [cs:SingleCom],81h
  3491                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3492                                  	; 12/01/2023
  3493 00000E5E C706[4302]8100          	mov	word [SingleCom],81h
  3494 00000E64 C606[3702]01            	mov	byte [ExtCom],1		; make sure this case forced
  3495                                  
  3496                                  ;SR;
  3497                                  ;We can enter LodCom directly after a command shell is terminated or we
  3498                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3499                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3500                                  ;be properly set. To fake this, we push dummy values here.
  3501                                  
  3502                                  	; 12/01/2023
  3503 00000E69 1E                      	push	ds			; old value of ds
  3504 00000E6A 1E                      	push	ds			; data seg value, ds = DATARES
  3505                                  LodCom: 				; termination handler
  3506 00000E6B 1F                      	pop	ds			; ds = DATARES
  3507                                  	;assume	ds:DATARES
  3508 00000E6C 83C402                  	add	sp,2
  3509                                  ;	;pop	OldDS			; store old ds
  3510                                  	;cmp	ExtCom,0
  3511 00000E6F 803E[3702]00            	cmp	byte [ExtCom],0
  3512                                  	;cmp	byte [cs:ExtCom],0
  3513                                  	;jne	short @f	 	; internal cmd - memory allocated
  3514                                  	; 16/04/2023
  3515 00000E74 7503                    	jne	short LodCom0 ; 24/09/2018
  3516 00000E76 E98100                  	jmp	LodCom1
  3517                                  	;je	short LodCom1 ; 25/09/2018	
  3518                                  ;@@:
  3519                                  LodCom0: ; 24/09/2018
  3520 00000E79 BBFFFF                  	mov	bx,0FFFFh
  3521 00000E7C B448                    	mov	ah,48h	; 12/01/2023
  3522                                  	;mov	ah,ALLOC ; 48h	
  3523 00000E7E CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3524                                  				; BX = number of 16-byte paragraphs desired
  3525 00000E80 E80A00                  	call	SetSize
  3526 00000E83 83C020                  	add	ax,20h
  3527 00000E86 39C3                    	cmp	bx,ax
  3528 00000E88 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3529                                  BadMemErrJ:
  3530 00000E8A E93BFF                  	jmp	BadMemErr		; not enough memory
  3531                                  
  3532                                  ;***	SetSize - get transient size in paragraphs
  3533                                  
  3534                                  SetSize:
  3535                                  	; 12/01/2023
  3536                                  	;;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3537                                  	;;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3538                                  	; 05/06/2023
  3539                                  	;mov	ax,0AFA4h		; MSDOS 6.22 COMMAND.COM
  3540 00000E8D B810AA                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3541 00000E90 B104                    	mov	cl,4
  3542 00000E92 D3E8                    	shr	ax,cl
  3543 00000E94 C3                      	retn
  3544                                  
  3545                                  MemOk:
  3546                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3547                                  
  3548 00000E95 B448                    	mov	ah,48h
  3549                                  	;mov	ah,ALLOC  ; 48h
  3550 00000E97 CD21                    	int	21h
  3551 00000E99 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3552                                  	;mov	byte [cs:ExtCom],0
  3553                                  	;mov	[cs:Res_Tpa],ax
  3554                                  	; 12/01/2023
  3555 00000E9B C606[3702]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3556 00000EA0 A3[FA03]                	mov	[Res_Tpa],ax		; save current tpa segment
  3557                                  
  3558 00000EA3 2500F0                  	and	ax,0F000h
  3559 00000EA6 050010                  	add	ax,1000h		; round up to next 64k boundary
  3560 00000EA9 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3561                                  
  3562                                  ;	Make sure that new boundary is within allocated range
  3563                                  
  3564                                  	;mov	dx,[cs:Res_Tpa]
  3565                                  	; 12/01/2023
  3566 00000EAB 8B16[FA03]              	mov	dx,[Res_Tpa]
  3567 00000EAF 01DA                    	add	dx,bx			; compute maximum address
  3568 00000EB1 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3569 00000EB3 7608                    	jbe	short Bad_Tpa
  3570                                  
  3571                                  ;	Must have 64K of usable space.
  3572                                  
  3573 00000EB5 29C2                    	sub	dx,ax			; compute the usable space
  3574 00000EB7 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3575 00000EBB 7303                    	jae	short LTpaSet
  3576                                  Bad_Tpa:
  3577                                  	;mov	ax,[cs:Res_Tpa]
  3578                                  	; 12/01/2023
  3579 00000EBD A1[FA03]                	mov	ax,[Res_Tpa]
  3580                                  LTpaSet:
  3581                                  	;mov	[cs:LTPA],ax
  3582                                  	;mov	ax,[cs:Res_Tpa]
  3583                                  	; 12/01/2023
  3584 00000EC0 A3[EE03]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3585 00000EC3 A1[FA03]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3586 00000EC6 01C3                    	add	bx,ax
  3587                                  	;mov	[cs:MemSiz],bx
  3588 00000EC8 891E[3302]              	mov	[MemSiz],bx
  3589 00000ECC E8BEFF                  	call	SetSize
  3590 00000ECF 29C3                    	sub	bx,ax
  3591                                  
  3592                                  	; MSDOS 6.0
  3593                                  
  3594                                  ;M038; Start of changes
  3595                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3596                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3597                                  ;running a program that changes arenas. This changes the largest block that
  3598                                  ;command.com gets and so changes the transient segment. So, command.com does
  3599                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3600                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3601                                  ;reload fails, hanging the system. To get around this we just copy the
  3602                                  ;transient from the previous address to the new address(if changed) and
  3603                                  ;then let command.com do the checksum. So, if the transient area is not
  3604                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3605                                  ;is not really corrupted and so this should work.
  3606                                  
  3607                                  	; 12/01/2023
  3608                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3609                                  
  3610 00000ED1 3B1E[2D02]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3611 00000ED5 7423                    	je	short LodCom1		; yes, dont copy
  3612                                  
  3613                                  ;Check if the new segment is above or below the current move. If the new
  3614                                  ;segment is above (i.e new block is larger than previous block), then we
  3615                                  ;have to move in the reverse direction
  3616                                  
  3617                                  	;;mov	cx,98C5h
  3618                                  	; 05/06/2023
  3619                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:106Ah (CODERES:021Ah)
  3620                                  	;mov	cx,0AF95h
  3621 00000ED7 B901AA                  	mov	cx,TRANSPACEEND		; cx = length to move
  3622 00000EDA 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3623 00000EDC 31F6                    	xor	si,si			; normal move
  3624 00000EDE 89F7                    	mov	di,si
  3625 00000EE0 FC                      	cld
  3626 00000EE1 EB06                    	jmp	short copy_trans
  3627                                  mov_down:
  3628 00000EE3 89CE                    	mov	si,cx			; reverse move, start from end
  3629 00000EE5 4E                      	dec	si
  3630 00000EE6 89F7                    	mov	di,si
  3631 00000EE8 FD                      	std
  3632                                  copy_trans:
  3633 00000EE9 1E                      	push	ds
  3634 00000EEA 06                      	push	es
  3635 00000EEB 8EC3                    	mov	es,bx			; dest segment
  3636 00000EED 8E1E[2D02]              	mov	ds,[TrnSeg]		; source segment
  3637                                  	;assume	ds:nothing
  3638                                  
  3639 00000EF1 F3A4                    	rep	movsb			; copy transient
  3640 00000EF3 FC                      	cld
  3641 00000EF4 07                      	pop	es
  3642 00000EF5 1F                      	pop	ds
  3643                                  	;assume	ds:DATARES
  3644                                  
  3645                                  ;M038; End of changes
  3646                                  
  3647                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3648                                  	; 12/01/2023
  3649 00000EF6 891E[2D02]              	mov	[TrnSeg],bx
  3650                                  
  3651                                  LodCom1:
  3652                                  ;;	mov	ax,cs
  3653                                  ;;	mov	ss,ax
  3654                                  ;SR; At this point ds = DATARES which is where the stack is located
  3655                                  
  3656                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3657                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3658 00000EFA 8CD8                    	mov	ax,ds
  3659 00000EFC 8ED0                    	mov	ss,ax
  3660                                  	;assume	ss:DATARES
  3661                                  	;;;mov	sp,offset DATARES:RStack
  3662                                  	;;mov	sp,53Eh
  3663                                  	; 05/06/2023
  3664                                  	;mov	sp,60Ah ; MSDOS 6.22 COMMAND.COM
  3665 00000EFE BC[D404]                	mov	sp,RStack
  3666                                  
  3667                                  ;;	mov	ds,ax
  3668                                  
  3669                                  	;assume	ds:DATARES
  3670                                  	
  3671                                  	; MSDOS 3.3
  3672                                  	;mov	ax,cs
  3673                                  	;mov	ss,ax
  3674                                  	;mov	sp,RSTACK
  3675                                  	;mov	ds,ax
  3676                                  
  3677 00000F01 E87B00                  	call	HeadFix			; close files, restore stdin, stdout
  3678 00000F04 31ED                    	xor	bp,bp			; flag command ok
  3679 00000F06 B8FFFF                  	mov	ax,-1
  3680 00000F09 8706[4502]              	xchg	ax,[VerVal]
  3681 00000F0D 83F8FF                  	cmp	ax,-1
  3682 00000F10 7404                    	je	short NoSetVer
  3683 00000F12 B42E                    	mov	ah,2Eh
  3684                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3685 00000F14 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3686                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3687                                  NoSetVer:
  3688 00000F16 833E[4302]FF            	cmp	word [SingleCom],-1
  3689 00000F1B 7503                    	jne	short NoSng
  3690 00000F1D E9CBFE                  	jmp	FatalRet2		; we have finished the single command
  3691                                  NoSng:
  3692 00000F20 E87201                  	call	ChkSum			; check the transient
  3693                                  	;cmp	dx,[Sum]
  3694                                  	;je	short HavCom		; transient ok
  3695                                  	; 12/01/2023
  3696 00000F23 7412                    	jz	short HavCom
  3697                                  Bogus_Com:
  3698 00000F25 C606[E601]01            	mov	byte [Loading],1	; flag DskErr routine
  3699 00000F2A E81E01                  	call	LoadCom
  3700                                  ChkSame:
  3701 00000F2D E86501                  	call	ChkSum
  3702                                  	;cmp	dx,[Sum]
  3703                                  	;je	short HavCom		; same command
  3704                                  	; 12/01/2023
  3705 00000F30 7405                    	jz	short HavCom
  3706                                  Also_Bogus:
  3707 00000F32 E85801                  	call	WrongCom
  3708 00000F35 EBF6                    	jmp	short ChkSame
  3709                                  
  3710                                  	; 12/01/2023
  3711                                  ;HavCom:
  3712                                  ;	; 25/09/2018
  3713                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3714                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3715                                  ;			; Return: AL = FFh unsupported subfunction
  3716                                  ;			; DL = current switch character
  3717                                  ;	mov     [RSWITCHAR],dl
  3718                                  ;	cmp     dl,'/'
  3719                                  ;	jnz     short USESLASH
  3720                                  ;	;mov	cl,'\'
  3721                                  ;	;mov	[RDIRCHAR],cl
  3722                                  ;	mov	byte [RDIRCHAR],'\'
  3723                                  ;USESLASH:
  3724                                  
  3725                                  HavCom:
  3726                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3727 00000F37 C606[E601]00            	mov	byte [Loading],0		; flag to DskErr
  3728                                  	;;;mov	si,offset DATARES:TranVars
  3729                                  	;;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3730                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3731                                  	;mov	si,51Dh		; MSDOS 6.22 COMMAND.COM
  3732 00000F3C BE[EA03]                	mov	si,TranVars
  3733                                  	;;;mov	di,offset TRANGROUP:HeadCall
  3734                                  	;;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3735                                  	; 05/06/2023
  3736                                  	;mov	di,0A303h	; MSDOS 6.22 COMMAND.COM
  3737 00000F3F BF[F19D]                	mov	di,HEADCALL
  3738 00000F42 8E06[2D02]              	mov	es,[TrnSeg]
  3739 00000F46 FC                      	cld
  3740                                  	;;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3741                                  	;mov	cx,533h		; MSDOS 6.22 COMMAND.COM	
  3742 00000F47 B9[FE03]                	mov	cx,TranVarEnd
  3743 00000F4A 29F1                    	sub	cx,si
  3744 00000F4C F3A4                    	rep	movsb			; transfer info to transient
  3745 00000F4E A1[3302]                	mov	ax,[MemSiz]
  3746 00000F51 A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3747                                  
  3748                                  ;***	TJmp - jump-off to transient
  3749                                  ;
  3750                                  ;	Public label so debugger can find this spot.
  3751                                  
  3752                                  TJmp:	; 12/01/2023
  3753 00000F54 FF2E[2B02]              	jmp	far [Trans]		; jmp dword ptr Trans
  3754                                  
  3755                                  ;***	TRemCheck - far version of RemCheck for transient
  3756                                  
  3757                                  TRemCheck:
  3758                                  	; 12/01/2023
  3759 00000F58 1F                      	pop	ds			; ds = DATARES
  3760 00000F59 83C402                  	add	sp,2			; discard old value of ds
  3761                                  
  3762 00000F5C E80100                  	call	RemCheck
  3763 00000F5F CB                      	retf
  3764                                  
  3765                                  ;***	RemCheck
  3766                                  ;
  3767                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3768                                  ;
  3769                                  ;	EXIT	ZR set if removeable media
  3770                                  ;		ZR clear if fixed media
  3771                                  ;
  3772                                  ;	USED	none
  3773                                  
  3774                                  	; 12/01/2023
  3775                                  RemCheck:
  3776 00000F60 50                      	push	ax
  3777 00000F61 53                      	push	bx
  3778 00000F62 89C3                    	mov	bx,ax
  3779 00000F64 B80844                  	mov	ax,4408h
  3780                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3781 00000F67 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3782 00000F69 7304                    	jnc	short rcCont		
  3783                                  
  3784                                  ;	If an error occurred, assume the media is non-removable.
  3785                                  ;	AX contains the non-zero error code from the int 21, so
  3786                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3787                                  ;	appear to be non-removable.				
  3788                                  					
  3789 00000F6B 09C0                    	or	ax,ax			
  3790 00000F6D EB05                    	jmp	short ResRegs
  3791                                  rcCont:
  3792 00000F6F 83E001                  	and	ax,1
  3793 00000F72 F7D0                    	not	ax
  3794                                  ResRegs:
  3795 00000F74 5B                      	pop	bx
  3796 00000F75 58                      	pop	ax
  3797 00000F76 C3                      	retn
  3798                                  
  3799                                  ;***	THeadFix
  3800                                  ;
  3801                                  ;	Far version of HeadFix, called from transient.
  3802                                  
  3803                                  THeadFix:
  3804                                  	; 12/01/2023
  3805 00000F77 1F                      	pop	ds			; ds = DATARES
  3806 00000F78 83C402                  	add	sp,2			; discard old ds value on stack
  3807                                  
  3808 00000F7B E80100                  	call	HeadFix
  3809 00000F7E CB                      	retf
  3810                                  
  3811                                  ;***	HeadFix
  3812                                  
  3813                                  	; 12/01/2023
  3814                                  HeadFix:
  3815 00000F7F E83101                  	call	SetVect			; set vectors to our values
  3816                                  
  3817                                  ;	Clean up header
  3818                                  
  3819                                  ;	Bugbug:	optimize:
  3820                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3821                                  
  3822 00000F82 31DB                    	xor	bx,bx			; BX = handle = 0
  3823 00000F84 8B0E[3D02]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3824                                  	;mov	dx,[18h] 
  3825 00000F88 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3826 00000F8C 38D1                    	cmp	cl,dl
  3827 00000F8E 7408                    	je	short Chk1		; stdin matches
  3828 00000F90 B43E                    	mov	ah,3Eh
  3829                                  	;mov	ah,CLOSE  ; 3Eh
  3830 00000F92 CD21                    	int	21h			; close stdin
  3831                                  	;mov	[18h],cl
  3832 00000F94 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  3833                                  Chk1:
  3834 00000F98 43                      	inc	bx			; BX = handle = 1
  3835 00000F99 38F5                    	cmp	ch,dh			
  3836 00000F9B 7408                    	je	short ChkOtherHand	; stdout matches
  3837 00000F9D B43E                    	mov	ah,3Eh
  3838                                  	;mov	ah,CLOSE
  3839 00000F9F CD21                    	int	21h			; close stdout
  3840                                  	;mov	[19h],ch
  3841 00000FA1 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  3842                                  ChkOtherHand:
  3843 00000FA5 83C304                  	add	bx,4			; skip handles 2,3,4
  3844 00000FA8 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  3845                                  					; (handles 0-4 already done)
  3846                                  CloseLoop:
  3847 00000FAB B43E                    	mov	ah,3Eh
  3848                                  	;mov	ah,CLOSE ; 3Eh
  3849 00000FAD CD21                    	int	21h			; close each handle
  3850 00000FAF 43                      	inc	bx			; BX = next handle
  3851 00000FB0 E2F9                    	loop	CloseLoop
  3852                                  
  3853                                  	; MSDOS 6.0
  3854                                  ;	Bugbug:	since this is for transient code, move it there
  3855                                  	
  3856                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3857                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  3858                                  
  3859                                  ;	M012: remove this CS -> DS. Must've been missed during
  3860                                  ;	purification.
  3861                                  ;;	push	ds			; save data segment
  3862                                  ;;	push	cs			; get local segment into DS
  3863                                  ;;	pop	ds			;
  3864 00000FB2 803E[6202]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  3865 00000FB7 750E                    	jne	short Append_Fix_End	; no - just exit
  3866 00000FB9 B807B7                  	mov	ax,0B707h
  3867                                  	;mov	ax,AppendSetState	; set the state of Append
  3868 00000FBC 8B1E[6002]              	mov	bx,[Append_State] 	; back to the original state
  3869 00000FC0 CD2F                    	int	2Fh			;
  3870 00000FC2 C606[6202]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  3871                                  Append_Fix_End: 			;
  3872                                  ;;	pop	ds			; get data segment back
  3873 00000FC7 C3                      	retn
  3874                                  
  3875                                  	; MSDOS 3.3
  3876                                  	;retn
  3877                                  
  3878                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  3879                                  ;
  3880                                  ;	ENTRY	nothing
  3881                                  ;
  3882                                  ;	EXIT	nothing
  3883                                  ;
  3884                                  ;	USED	flags
  3885                                  ;
  3886                                  ;	EFFECTS
  3887                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  3888                                  ;	  current program's stdin,stdout set to our stderr
  3889                                  ;
  3890                                  
  3891                                  ;SR;
  3892                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  3893                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  3894                                  
  3895                                  SavHand:
  3896                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  3897                                  
  3898                                  	; 12/01/2023
  3899                                  	;push	ds ; MSDOS 3.3
  3900                                  
  3901 00000FC8 53                      	push	bx			;preserve registers
  3902 00000FC9 50                      	push	ax
  3903                                  	; 12/01/2023
  3904 00000FCA 06                      	push	es
  3905 00000FCB 1E                      	push	ds			; save DATARES value
  3906                                  
  3907 00000FCC B451                    	mov	ah,51h
  3908                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3909 00000FCE CD21                    	int	21h			; BX = user's header seg addr
  3910 00000FD0 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  3911                                  	;lds	bx,[34h]	
  3912 00000FD2 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  3913 00000FD6 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  3914                                  	; 12/01/2023
  3915 00000FD8 07                      	pop	es			; es = DATARES
  3916 00000FD9 06                      	push	es			; save it back on stack
  3917 00000FDA 26A3[E401]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  3918                                  	;mov	[cs:HANDLE01],ax
  3919                                  
  3920                                  ;SR;
  3921                                  ; Use es to address Handle01 & our JFN_Table
  3922                                  
  3923                                  	; 12/01/2023
  3924                                  	;mov	al,[es:1Ah]
  3925 00000FDE 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  3926                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  3927 00000FE2 88C4                    	mov	ah,al			; AH = COMMAND stderr
  3928 00000FE4 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  3929                                  	; 12/01/2023
  3930 00000FE6 1F                      	pop	ds			; restore registers
  3931 00000FE7 07                      	pop	es
  3932 00000FE8 58                      	pop	ax
  3933 00000FE9 5B                      	pop	bx
  3934                                  	;pop	ds ; MSDOS 3.3
  3935 00000FEA C3                      	retn
  3936                                  
  3937                                  	;assume	ds:DATARES
  3938                                  GetComDsk2:
  3939 00000FEB E81F00                  	call	GetComDsk
  3940 00000FEE E909FF                  	jmp	LodCom1			; memory already allocated
  3941                                  
  3942                                  RestHand:
  3943 00000FF1 1E                      	push	ds
  3944 00000FF2 53                      	push	bx			; restore stdin, stdout to user
  3945 00000FF3 50                      	push	ax
  3946                                  	; 12/01/2023
  3947 00000FF4 B451                    	mov	ah,51h
  3948                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3949 00000FF6 CD21                    	int	21h			; point to user's header
  3950 00000FF8 A1[E401]                	mov	ax,[Handle01]
  3951 00000FFB 8EDB                    	mov	ds,bx
  3952                                  	;assume ds:NOTHING
  3953                                  	;lds	bx,[34h] 
  3954 00000FFD C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  3955 00001001 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  3956 00001003 58                      	pop	ax
  3957 00001004 5B                      	pop	bx
  3958 00001005 1F                      	pop	ds
  3959 00001006 C3                      	retn
  3960                                  
  3961                                  	;assume ds:DATARES,ss:DATARES
  3962                                  Hopeless:
  3963 00001007 BA[8205]                	mov	dx,COMBAD
  3964 0000100A E9BEFD                  	jmp	FatalC
  3965                                  
  3966                                  GetComDsk:
  3967 0000100D A0[3202]                	mov	al,[ComDrv]
  3968 00001010 E84DFF                  	call	RemCheck
  3969 00001013 75F2                    	jnz	short Hopeless		; non-removable media
  3970                                  GetComDsk3:
  3971 00001015 81FA[8205]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  3972 00001019 7503                    	jne	short GetComDsk4
  3973                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  3974                                  	; 12/01/2023
  3975                                  	;;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  3976                                  	; 05/06/2023
  3977                                  	;mov	dx,COMBAD ; (MSDOS 6.22 COMMAND.COM - RESGROUP:11B6h)
  3978                                  	;invoke	RPrint			; say COMMAND is invalid
  3979 0000101B E81803                  	call	RPrint
  3980                                  	;call	RDISPMSG
  3981                                  
  3982                                  GetComDsk4:
  3983                                  
  3984                                  ;	Bugbug:	there's always a drive here? No need to check?
  3985                                  
  3986 0000101E 803E[CD01]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  3987 00001023 7509                    	jne	short Users_Drive	; yes - use it
  3988 00001025 B419                    	mov	ah,19h
  3989                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  3990 00001027 CD21                    	int	21h
  3991 00001029 0441                    	add	al,"A"                  ; convert to ascii
  3992 0000102B A2[CD01]                	mov	[PutBackDrv],al		; put in message to print out
  3993                                  
  3994                                  Users_Drive:
  3995                                  	; 12/01/2023
  3996                                  	; MSDOS 6.0
  3997 0000102E BA[9805]                	mov	dx,PUTBACKMSG		; prompt for diskette
  3998                                  	;mov	si,offset DATARES:PutBackSubst
  3999                                  	;invoke	RPrint
  4000 00001031 BE[C701]                	mov	si,PutBackSubst		; containing COMMAND
  4001 00001034 E8FF02                  	call	RPrint
  4002                                  	;mov	dx,offset DATARES:Prompt
  4003                                  	;invoke	RPrint
  4004 00001037 BA[BA05]                	mov	dx,PROMPT		; "Press any key"
  4005 0000103A E8F902                  	call	RPrint
  4006                                  
  4007                                  	; MSDOS 3.3
  4008                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  4009                                  	;call	RDISPMSG
  4010                                  	;mov	dx,[PUTBACKSUBSTPTR]
  4011                                  	;mov	si,[COMSPEC_END]
  4012                                  	;mov	byte [si+1],'$'
  4013                                  	;call	RDISPMSG
  4014                                  	;mov	byte [si+1],0
  4015                                  	;mov	dx,PROMPT
  4016                                  	;call	RDISPMSG
  4017                                  
  4018                                  	;call	GetRawFlushedByte
  4019                                  	;retn
  4020                                  	; 12/01/2023
  4021                                  	;jmp	short GetRawFlushedByte
  4022                                  
  4023                                  ;***	GetRawFlushedByte - flush world and get raw input
  4024                                  
  4025                                  GetRawFlushedByte:
  4026                                  	; 12/01/2023
  4027 0000103D B8070C                  	mov	ax,0C07h
  4028                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  4029 00001040 CD21                    	int	21h			; get char without testing or echo
  4030 00001042 B8000C                  	mov	ax,0C00h
  4031                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  4032 00001045 CD21                    	int	21h
  4033                                  
  4034                                  ;	Bugbug:	get rid of this return and the following retz.
  4035                                  
  4036                                  LoadCom_retn:
  4037 00001047 C3                      	retn
  4038                                  
  4039                                  	; 21/04/2023
  4040                                  TryDoOpen:
  4041 00001048 E8C2FF                  	call	GetComDsk
  4042                                  	;jmp	short LoadCom
  4043                                  
  4044                                  ;***	LoadCom - load in transient
  4045                                  
  4046                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4047                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  4048                                  
  4049                                  LoadCom:
  4050                                  	;assume	ds:DATARES
  4051                                  	
  4052 0000104B 45                      	inc	bp				; flag command read
  4053                                  
  4054 0000104C BA[E901]                	mov	dx,ComSpec
  4055 0000104F B8003D                  	mov	ax,3D00h
  4056                                  	;mov	ax,OPEN<<8	; 3D00h
  4057 00001052 CD21                    	int	21h				; open command.com
  4058 00001054 730B                    	jnc	short ReadCom
  4059                                  	;cmp	ax,4
  4060 00001056 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  4061 00001059 75ED                    	jnz	short TryDoOpen
  4062 0000105B BA[4406]                	mov	dx,NOHANDMES
  4063 0000105E E96AFD                  	jmp	FatalC				; will never find a handle
  4064                                  
  4065                                  	; 21/04/2023
  4066                                  ;TryDoOpen:
  4067                                  	;call	GetComDsk
  4068                                  	;jmp	short LoadCom
  4069                                  
  4070                                  ReadCom:
  4071 00001061 89C3                    	mov	bx,ax				; BX = handle
  4072                                  	;mov	dx,offset RESGROUP:TranStart
  4073                                  	; 05/06/2023
  4074                                  	;mov	dx,26E0h ; MSDOS 6.22 COMMAND.COM
  4075 00001063 BA5025                  	mov	dx,TRANSTART
  4076 00001066 31C9                    	xor	cx,cx				; CX:DX = seek loc
  4077 00001068 B80042                  	mov	ax,4200h
  4078                                  	;mov	ax,LSEEK<<8	; 4200h
  4079 0000106B CD21                    	int	21h
  4080 0000106D 7210                    	jc	short WrongCom1
  4081                                  	; 12/01/2023
  4082                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  4083                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  4084                                  	; 05/06/2023
  4085                                  	;mov	cx,0AE95h		 ; MSDOS 6.22 COMMAND.COM
  4086 0000106F B901A9                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  4087 00001072 1E                      	push	ds
  4088 00001073 8E1E[2D02]              	mov	ds,[TrnSeg]
  4089                                  	;assume	ds:NOTHING
  4090 00001077 BA0001                  	mov	dx,100h
  4091 0000107A B43F                    	mov	ah,3Fh
  4092                                  	;mov	ah,READ	; 3Fh	
  4093 0000107C CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  4094                                  			; BX = file handle, CX = number of bytes to read
  4095                                  			; DS:DX -> buffer
  4096 0000107E 1F                      	pop	ds
  4097                                  	;assume	ds:DATARES
  4098                                  WrongCom1:
  4099 0000107F 9C                      	pushf
  4100 00001080 50                      	push	ax
  4101 00001081 B43E                    	mov	ah,3Eh
  4102                                  	;mov	ah,CLOSE ; 3Eh
  4103 00001083 CD21                    	int	21h			; close command.com
  4104 00001085 58                      	pop	ax
  4105 00001086 9D                      	popf
  4106 00001087 7204                    	jc	short WrongCom		; error on read
  4107 00001089 39C8                    	cmp	ax,cx
  4108                                  	;retz				; size matched
  4109 0000108B 74BA                    	jz	short LoadCom_retn
  4110                                  WrongCom:
  4111 0000108D BA[8205]                	mov	dx,COMBAD
  4112 00001090 E87AFF                  	call	GetComDsk
  4113 00001093 EBB6                    	jmp	short LoadCom		; try again
  4114                                  
  4115                                  ;***	ChkSum - compute transient checksum
  4116                                  
  4117                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4118                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  4119                                  	
  4120                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4121                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1239h
  4122                                  ChkSum:
  4123 00001095 1E                      	push	ds
  4124 00001096 8E1E[2D02]              	mov	ds,[TrnSeg]
  4125 0000109A BE0001                  	mov	si,100h
  4126                                  	;;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  4127                                  	;;mov	cx,87C2h ; MSDOS 5.0
  4128                                  	; 05/06/2023
  4129                                  	;mov	cx,9D53h ; MSDOS 6.22
  4130 0000109D B9[4198]                	mov	cx,TRANDATAEND-100h	; 3E44h (for original MSDOS 3.3!)
  4131                                  Check_Sum:
  4132 000010A0 FC                      	cld
  4133 000010A1 D1E9                    	shr	cx,1
  4134 000010A3 31D2                    	xor	dx,dx
  4135                                  Chk:
  4136 000010A5 AD                      	lodsw
  4137 000010A6 01C2                    	add	dx,ax
  4138 000010A8 83D200                  	adc	dx,0
  4139 000010AB E2F8                    	loop	Chk
  4140                                  
  4141                                  	; 04/05/2023
  4142 000010AD 1F                      	pop	ds
  4143                                  
  4144                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4145 000010AE 3B16[3502]              	cmp	dx,[Sum]
  4146                                  
  4147                                  	;pop	ds ; 04/05/2023
  4148 000010B2 C3                      	retn
  4149                                  
  4150                                  ;***	SetVect - set interrupt vectors
  4151                                  
  4152                                  SetVect:
  4153                                  	;mov	dx,offset DATARES:LodCom_Trap 
  4154                                  	; 12/01/2023
  4155 000010B3 BA[7E00]                	mov	dx,LodCom_Trap
  4156                                  	;mov	dx,LODCOM ; MSDOS 3.3
  4157 000010B6 B82225                  	mov	ax,2522h
  4158                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  4159 000010B9 89160A00                	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4160 000010BD 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4161 000010C1 CD21                    	int	21h
  4162                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  4163 000010C3 BA[4A00]                	mov	dx,Ctrlc_Trap
  4164                                  	;mov	dx,CONTC ; MSDOS 3.3
  4165 000010C6 FEC0                    	inc	al	; 23h
  4166 000010C8 CD21                    	int	21h
  4167                                  	;mov	dx,offset DATARES:CritErr_Trap
  4168 000010CA BA[5500]                	mov	dx,CritErr_Trap
  4169                                  	;mov	dx,CRITERR ; MSDOS 3.3
  4170 000010CD FEC0                    	inc	al	; 24h
  4171 000010CF CD21                    	int	21h
  4172 000010D1 C3                      	retn
  4173                                  
  4174                                  ; ---------------------------
  4175                                  
  4176                                  	; MSDOS 6.0
  4177                                  ;;SR;
  4178                                  ;We have this to take care of the extra values pushed on the stack by
  4179                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  4180                                  ;Lodcom1
  4181                                  
  4182                                  ;public	TrnLodCom1
  4183                                  	; 12/01/2023
  4184                                  TrnLodCom1:
  4185 000010D2 1F                      	pop	ds			; ds = DATARES
  4186 000010D3 83C402                  	add	sp,2
  4187                                  ;	pop	ds:OldDS
  4188 000010D6 E921FE                  	jmp	LodCom1
  4189                                  
  4190                                  ;=============================================================================
  4191                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  4192                                  ;=============================================================================
  4193                                  ; 22/09/2018 - Retro DOS v3.0
  4194                                  
  4195                                  ;	title	Localizable code for resident COMMAND
  4196                                  
  4197                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4198                                  
  4199                                  ; ----------------------------------------------------------------------------
  4200                                  ;***	AskEnd - ask user to confirm batch file termination
  4201                                  ;
  4202                                  ;	Confirm with user before freeing batch ...
  4203                                  ;
  4204                                  ;	ENTRY	nothing
  4205                                  ;
  4206                                  ;	EXIT	CY = set if batch termination is confirmed
  4207                                  ;
  4208                                  ;		CY = clear if batch should continue
  4209                                  ;
  4210                                  ;	USED	AX,DX,...
  4211                                  ;
  4212                                  ;	Bugbug:	move this to transient, copy to batch segment.
  4213                                  ;	Bugbug:	or move it to command1 1st.
  4214                                  ;
  4215                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  4216                                  ; ----------------------------------------------------------------------------
  4217                                  
  4218                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4219                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  4220                                  
  4221                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4222                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1279h (CODERES:0429h)
  4223                                  AskEnd:
  4224                                  	;assume	ds:DATARES
  4225                                  
  4226 000010D9 BA[DC05]                	mov	dx,ENDBATMES			; DX = message #
  4227 000010DC E85702                  	call	RPrint
  4228                                  	;call	RDISPMSG  ; MSDOS 3.3
  4229 000010DF B8010C                  	mov	ax,0C01h
  4230                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  4231 000010E2 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  4232                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  4233 000010E4 E8E802                  	call	CharToUpper			; change to upper case
  4234 000010E7 3A06[E304]              	cmp	al,[NO_CHAR]
  4235 000010EB 7407                    	je	short aeRet			; answer is no (CY is clear)
  4236 000010ED 3A06[E204]              	cmp	al,[YES_CHAR]
  4237 000010F1 75E6                    	jne	short AskEnd			; invalid response, try again
  4238 000010F3 F9                      	stc					; answer is yes
  4239                                  aeRet:	
  4240 000010F4 C3                      	retn
  4241                                  
  4242                                  ; ----------------------------------------------------------------------------
  4243                                  ;***	DskErr - critical error handler
  4244                                  ;
  4245                                  ;	Default critical error handler unless user intercepts int 24h.
  4246                                  ;
  4247                                  ;	ENTRY	int 24h
  4248                                  ;
  4249                                  ;	EXIT
  4250                                  ;
  4251                                  ;	USED
  4252                                  ;
  4253                                  ;	EFFECTS
  4254                                  ; ----------------------------------------------------------------------------
  4255                                  
  4256                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4257                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4258                                  
  4259                                  ;SR; 
  4260                                  ;The stub is going to push the old ds value and the resident data segment
  4261                                  ;onto the stack in that order. Get it off the stack
  4262                                  
  4263                                  ;DskErr	proc	far
  4264                                  DSKERR:
  4265                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4266                                  	; 12/01/2023
  4267 000010F5 1F                      	pop	ds			; ds = DATARES
  4268                                  	;assume ds:DATARES
  4269 000010F6 8F06[D404]              	pop	word [OldDS]		; save old ds value
  4270                                  
  4271                                  ;CRITERR: ; MSDOS 3.3
  4272 000010FA FB                      	sti
  4273                                  	; 12/01/2023
  4274                                  	;push	ds ; 25/09/2018
  4275 000010FB 06                      	push	es
  4276 000010FC 56                      	push	si
  4277 000010FD 51                      	push	cx
  4278 000010FE 57                      	push	di
  4279 000010FF 51                      	push	cx
  4280 00001100 50                      	push	ax
  4281                                  
  4282 00001101 1E                      	push	ds			;save our data segment
  4283                                  	;push	cs ; 25/09/2018
  4284 00001102 07                      	pop	es			;es = DATARES
  4285                                  
  4286 00001103 8EDD                    	mov	ds,bp
  4287                                  	;assume	ds:nothing
  4288                                  
  4289                                  	;mov	ax,[si].SDEVATT
  4290 00001105 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4291 00001108 268826[C301]            	mov	[es:CDevAt],ah
  4292                                  
  4293                                  	;push	cs
  4294                                  	;pop	es
  4295                                  
  4296 0000110D BF[B601]                	mov	di,DevName
  4297 00001110 B90800                  	mov	cx,8
  4298                                  	;add	si,SDEVNAME  ; add si,10
  4299 00001113 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4300                                  				
  4301 00001116 FC                      	cld
  4302 00001117 F3A4                    	rep	movsb
  4303 00001119 58                      	pop	ax
  4304 0000111A 59                      	pop	cx
  4305 0000111B 5F                      	pop	di
  4306                                  
  4307                                  ;	Stack still contains DS and ES.
  4308                                  
  4309                                  ;SR;
  4310                                  ;We need ds = DATARES for SavHand
  4311                                  
  4312                                  	 ;12/01/2023
  4313 0000111C 06                      	push	es
  4314 0000111D 1F                      	pop	ds
  4315                                  	;assume	ds:DATARES
  4316                                  
  4317                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4318 0000111E E8A7FE                  	call	SavHand
  4319                                  
  4320                                  	; 12/01/2023
  4321                                  	; 25/09/2018
  4322                                  	;;push	cs
  4323                                  	;push	es
  4324                                  	;pop	ds		; set up local data segment
  4325                                  	;assume	ds:resgroup
  4326                                  
  4327 00001121 52                      	push	dx
  4328 00001122 E80E02                  	call	crlf
  4329 00001125 5A                      	pop	dx
  4330                                  
  4331                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4332                                  
  4333 00001126 8826[3A02]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4334                                  
  4335                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4336                                  
  4337 0000112A 0441                    	add	al,'A'
  4338 0000112C A2[A301]                	mov	[DrvLet],al
  4339                                  
  4340                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4341                                  
  4342 0000112F F6C480                  	test	ah,80h
  4343 00001132 740A                    	jz	short NoHardE		; it's a disk-device error
  4344 00001134 F606[C301]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4345 00001139 7503                    	jnz	short NoHardE		; it's a character device
  4346 0000113B E9E801                  	jmp	FatErr			; it's a FAT error
  4347                                  
  4348                                  NoHardE:
  4349 0000113E BE[0405]                	mov	si,MREAD		; SI = "read" msg #
  4350 00001141 F6C401                  	test	ah,1
  4351 00001144 7403                    	jz	short SavMes		; it's a read error
  4352 00001146 BE[0D05]                	mov	si,MWRITE		; SI = "write" msg #
  4353                                  SavMes:
  4354 00001149 893E[FE03]              	mov	[OldErrNo],di		; save critical error code
  4355                                  
  4356                                  ;	Bugbug:	don't need to save/restore all here?
  4357                                  
  4358 0000114D 06                      	push	es
  4359                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4360                                  	;push	ds			; GetExtendedError likes to STOMP
  4361                                  	; 12/01/2023
  4362                                  	; (all registers are changed -in dos service- except bp) *
  4363                                  	;push	bp
  4364                                  	; 19/07/2024
  4365                                  	;push	si
  4366                                  	;push	dx
  4367 0000114E 51                      	push	cx
  4368 0000114F 53                      	push	bx
  4369                                  	; 05/06/2023
  4370 00001150 B459                    	mov	ah,59h ; *
  4371                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4372 00001152 CD21                    	int	21h
  4373 00001154 5B                      	pop	bx
  4374 00001155 59                      	pop	cx
  4375                                  	; 19/07/2024
  4376                                  	;pop	dx
  4377                                  	;pop	si
  4378                                  	; 12/01/2023
  4379                                  	;pop	bp
  4380                                  	; 19/07/2024
  4381                                  	;pop	ds
  4382 00001156 893E[D101]              	mov	[NeedVol],di		; save possible ptr to volume label
  4383 0000115A 8C06[D301]              	mov	[NeedVol+2],es
  4384 0000115E 07                      	pop	es
  4385                                  
  4386                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4387                                  
  4388                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4389                                  	;xor	ah,ah
  4390 0000115F 89C7                    	mov	di,ax			; DI = error code
  4391                                  
  4392                                  ; Bugbug: somewhat obsolete documentation?
  4393                                  ;
  4394                                  ; DI is now the correct error code. Classify things to see what we are
  4395                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4396                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4397                                  ; the like) are contiguous.
  4398                                  
  4399                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4400                                  ;	Check use of ErrCd_24, though.
  4401                                  
  4402 00001161 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4403 00001164 7303                    	jae	short HavCod
  4404                                  
  4405                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4406                                  ;	even though it's not a critical error?
  4407                                  
  4408 00001166 BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4409                                  
  4410                                  ; DI now has the mapped error code. Old style errors are:
  4411                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4412                                  ; New style errors are:
  4413                                  ;   FOOBAR
  4414                                  ; We need to figure out which the particular error belongs to.
  4415                                  
  4416                                  HavCod:
  4417 00001169 C606[D501]00            	mov	byte [ErrType],0	; assume old style
  4418 0000116E 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4419 00001171 7405                    	je	short SetStyle
  4420 00001173 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4421 00001176 7504                    	jne	short GotStyle
  4422                                  
  4423                                  SetStyle:
  4424                                  ;	Bugbug:	use INC
  4425                                  	;mov	byte [ErrType],1		; must be new type
  4426 00001178 FE06[D501]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4427                                  
  4428                                  GotStyle:
  4429 0000117C 893E[E201]              	mov	[ErrCd_24],di
  4430                                  	; 12/01/2023
  4431                                  	; 25/09/2018
  4432                                  	; MSDOS 6.0
  4433 00001180 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4434                                  	; MSDOS 3.3
  4435                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4436                                  
  4437                                  						; If the error message is unknown
  4438 00001183 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4439                                  
  4440                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4441                                  ; how to handle things
  4442                                  
  4443                                  ;input to IFSFUNC:    AL=1
  4444                                  ;		      BX=extended error number
  4445                                  ;
  4446                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4447                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4448                                  ;			   Abort, Retry, Ignore
  4449                                  ;			 1=<message>
  4450                                  ;			   Abort, Retry, Ignore
  4451                                  ;		      ES:DI=pointer to message text
  4452                                  ;		      carry set=>no message
  4453                                  
  4454 00001185 89C7                    	mov	di,ax			; retrieve correct extended error...
  4455 00001187 B80005                  	mov	ax,0500h		; is the redir there?
  4456 0000118A CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4457                                  			; Return: AL = 00h not installed, OK to install
  4458                                  			; 01h not installed, can't install
  4459                                  			; FFh installed
  4460 0000118C 3CFF                    	cmp	al,0FFh
  4461 0000118E 7529                    	jne	short NoHandler		; no, go to NoHandler
  4462                                  
  4463                                  	; 12/01/2023
  4464                                  	; MSDOS 6.0
  4465 00001190 53                      	push	bx
  4466 00001191 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4467 00001193 B80105                  	mov	ax,0501h
  4468 00001196 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4469 00001198 5B                      	pop	bx 
  4470 00001199 721E                    	jc	short NoHandler
  4471                                  	
  4472                                  	; MSDOS 3.3
  4473                                  	;mov     ax,di
  4474                                  	;mov     ah,5
  4475                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4476                                  	;jc      short NOHANDLER
  4477                                  
  4478                                  ;	Bugbug:	need to record error type?
  4479                                  
  4480 0000119B A2[D501]                	mov	[ErrType],al
  4481                                  
  4482 0000119E 1E                      	push	ds
  4483 0000119F 06                      	push	es
  4484 000011A0 1F                      	pop	ds
  4485 000011A1 89FA                    	mov	dx,di
  4486 000011A3 B9FFFF                  	mov	cx,-1			; find end of msg
  4487 000011A6 30C0                    	xor	al,al
  4488                                  
  4489 000011A8 FC                      	cld
  4490 000011A9 F2AE                    	repnz	scasb
  4491                                  
  4492                                  ;	Bugbug:	we can do better than this.
  4493                                  
  4494                                  	;mov	byte [di-1],'$'
  4495                                  	; 19/07/2024
  4496 000011AB 4F                      	dec	di
  4497 000011AC C60524                  	mov	byte [di],'$'
  4498                                  	
  4499                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4500                                  	
  4501 000011AF B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4502 000011B1 CD21                    	int	21h
  4503                                  
  4504                                  	;mov	byte [di-1],0			; restore terminal byte
  4505                                  	; 19/07/2024
  4506 000011B3 C60500                  	mov	byte [di],0
  4507                                  
  4508 000011B6 1F                      	pop	ds				; clean up and continue
  4509 000011B7 EB15                    	jmp	short CheckErrType
  4510                                  
  4511                                  ;*	Redir isn't available or doesn't recognize the error.
  4512                                  ;	Restore regs to unextended error.
  4513                                  
  4514                                  NoHandler:
  4515 000011B9 C606[D501]00            	mov	byte [ErrType],0
  4516                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4517 000011BE 8B3E[FE03]              	mov	di,[OldErrNo]
  4518 000011C2 893E[E201]              	mov	[ErrCd_24],di
  4519                                  
  4520                                  NormalError:
  4521                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4522                                  	; MSDOS 6.0
  4523 000011C6 83C713                  	add	di,ERROR_WRITE_PROTECT
  4524 000011C9 87FA                    	xchg	di,dx			; may need dx later
  4525 000011CB E88101                  	call	RPrintCrit		; print error type
  4526                                  
  4527                                  	; MSDOS 3.3
  4528                                  	;shl     di,1
  4529                                  	;mov     di,[CRMSGTBL+di]
  4530                                  	;xchg    di,dx
  4531                                  	;call    RDISPMSG
  4532                                  
  4533                                  CheckErrType:
  4534 000011CE 803E[D501]00            	cmp	byte [ErrType],0	; Check error style...
  4535 000011D3 7405                    	je	short ContOld
  4536 000011D5 E85B01                  	call	crlf			; if new style then done printing
  4537 000011D8 EB31                    	jmp	short Ask
  4538                                  
  4539                                  ContOld:
  4540                                  	; 12/01/2023
  4541                                  	; MSDOS 6.0
  4542 000011DA 46                      	inc	si			; DS:SI = ptr to asciiz string
  4543                                  
  4544                                  ;	Bugbug:	combine some of the following two sections?
  4545                                  
  4546                                  	; 12/01/2023
  4547 000011DB F606[C301]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4548                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4549 000011E0 740F                    	jz	short BlkErr
  4550                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4551                                  	;mov	dx,ChardevErr
  4552 000011E2 BA[2505]                	mov	dx,MDEVICE
  4553                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4554 000011E5 8936[A501]              	mov	[CharDevErrRw],si
  4555                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4556 000011E9 BE[A401]                	mov	si,CharDevErrSubst
  4557                                  
  4558 000011EC E84701                  	call	RPrint				; print the message
  4559 000011EF EB1A                    	jmp	short Ask			; don't ralph on command
  4560                                  
  4561                                  	; 12/01/2023
  4562                                  	; MSDOS 3.3
  4563                                  	;mov	dx,ERRMES
  4564                                  	;call	RDISPMSG
  4565                                  	;mov	dx,si
  4566                                  	;call	RDISPMSG
  4567                                  	;
  4568                                  	;test	byte [CDevAt],80h
  4569                                  	;jz	short BLKERR
  4570                                  	;mov	dx,CHARDEVERR	; " device "
  4571                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4572                                  	;int	21h		; DOS - PRINT STRING
  4573                                  	;			; DS:DX -> string terminated by "$"
  4574                                  	;jmp	short ASK
  4575                                  
  4576                                  BlkErr:
  4577                                  	; 12/01/2023
  4578                                  	; MSDOS 6.0
  4579                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4580                                  	;mov	dx,BlkDevErr
  4581 000011F1 BA[1605]                	mov	dx,MDRIVE
  4582                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4583 000011F4 8936[9E01]              	mov	[BlkDevErrRw],si
  4584                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4585 000011F8 BE[9D01]                	mov	si,BlkDevErrSubst
  4586 000011FB E83801                  	call	RPrint
  4587                                  
  4588                                  	; MSDOS 3.3
  4589                                  	;mov	dx,BLKDEVERR
  4590                                  	;call	RDISPMSG
  4591                                  
  4592 000011FE 803E[E601]00            	cmp	byte [Loading],0
  4593 00001203 7406                    	jz	short Ask
  4594 00001205 E8E9FD                  	call	RestHand
  4595 00001208 E9E0FD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4596                                  Ask:
  4597 0000120B 833E[E201]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4598 00001210 751E                    	jne	short Not15		; not error 15
  4599                                  
  4600                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4601                                  
  4602 00001212 51                      	push	cx
  4603                                  
  4604                                  ;	Bugbug:	does this push/pop need to be done?
  4605                                  
  4606 00001213 1E                      	push	ds
  4607 00001214 07                      	pop	es
  4608 00001215 C536[D101]              	lds	si,[NeedVol]
  4609                                  	;assume	ds:NOTHING
  4610 00001219 57                      	push	di
  4611 0000121A BF[B301]                	mov	di,VolName
  4612                                  	; 12/01/2023
  4613                                  	; MSDOS 6.0
  4614 0000121D B91000                  	mov	cx,16			; copy volume name & serial #
  4615                                  	; MSDOS 3.3
  4616                                  	;mov	cx,11			; copy volume name
  4617 00001220 FC                      	cld
  4618 00001221 F3A4                    	rep	movsb
  4619 00001223 5F                      	pop	di
  4620 00001224 06                      	push	es
  4621 00001225 1F                      	pop	ds
  4622 00001226 59                      	pop	cx
  4623                                  	;assume	ds:DATARES
  4624                                  	; 12/01/2023
  4625                                  	; MSDOS 6.0
  4626                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4627                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4628                                  	;mov	dx,NeedVolMsg
  4629 00001227 BA[3505]                	mov	dx,MVOLSERIAL
  4630 0000122A BE[AA01]                	mov	si,NeedVolSubst
  4631 0000122D E80601                  	call	RPrint
  4632                                  
  4633                                  	; MSDOS 3.3
  4634                                  	;mov	dx,NEEDVOLMSG
  4635                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4636                                  	;int	21h		; DOS - PRINT STRING
  4637                                  	;			; DS:DX -> string terminated by "$"
  4638                                  Not15:
  4639                                  ;*	Print abort, retry, ignore, fail message.
  4640                                  ;	Print only options that are valid.
  4641                                  
  4642                                  ;	Bugbug:	sizzle this.
  4643                                  
  4644                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4645 00001230 BA[E404]                	mov	dx,REQ_ABORT
  4646 00001233 E80001                  	call	RPrint
  4647                                  	;call	RDISPMSG
  4648 00001236 F606[3A02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4649 0000123B 7406                    	jz	short Try_Ignore
  4650 0000123D BA[EA04]                	mov	dx,REQ_RETRY
  4651 00001240 E8F300                  	call	RPrint
  4652                                  	;call	RDISPMSG
  4653                                  Try_Ignore:
  4654 00001243 F606[3A02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4655 00001248 7406                    	jz	short Try_Fail
  4656 0000124A BA[F204]                	mov	dx,REQ_IGNORE
  4657 0000124D E8E600                  	call	RPrint
  4658                                  	;call	RDISPMSG
  4659                                  Try_Fail:
  4660 00001250 F606[3A02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4661 00001255 7406                    	jz	short Term_Question
  4662 00001257 BA[FB04]                	mov	dx,REQ_FAIL
  4663 0000125A E8D900                  	call	RPrint
  4664                                  	;call	RDISPMSG
  4665                                  Term_Question:
  4666 0000125D BA[0205]                	mov	dx,REQ_END
  4667 00001260 E8D300                  	call	RPrint
  4668                                  	;call	RDISPMSG
  4669                                  
  4670                                  ;	If the /f switch was given, we fail all requests.
  4671                                  
  4672 00001263 F606[4702]FF            	test	byte [fFail],-1
  4673 00001268 741B                    	jz	short DoPrompt
  4674 0000126A B403                    	mov	ah,3				; signal fail
  4675 0000126C E9A800                  	jmp	EExit
  4676                                  
  4677                                  	; 16/04/2023
  4678                                  Abort_Process:
  4679 0000126F F606[B402]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  4680 00001274 745D                    	jz	short AbortCont			; no, handle it normally
  4681 00001276 803E[4002]00            	cmp	byte [PermCom],0		; are we top level process?
  4682 0000127B 744B                    	jz	short JustExit			; yes, just exit
  4683                                  
  4684 0000127D BA[E706]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  4685                                  	; 12/01/2023
  4686 00001280 E8B300                  	call	RPrint				; print it
  4687                                  	;call	RDISPMSG
  4688                                  DeadInTheWater:
  4689 00001283 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  4690                                  
  4691                                  DoPrompt:
  4692                                  	; 12/01/2023
  4693 00001285 B8010C                  	mov	ax,0C01h
  4694                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  4695 00001288 CD21                    	int	21h				; get response
  4696                                  
  4697 0000128A E8A600                  	call	crlf
  4698 0000128D E83F01                  	call	CharToUpper			; convert to upper case
  4699 00001290 B400                    	mov	ah,0				; return code for ignore
  4700 00001292 F606[3A02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  4701 00001297 7406                    	jz	short User_Retry
  4702 00001299 3A06[E004]              	cmp	al,[IGNORE_CHAR]		; ignore?
  4703                                  	;jz	short EExitJ
  4704                                  	; 16/04/2023
  4705 0000129D 7478                    	jz	short EExit
  4706                                  
  4707                                  ;	Bugbug:	optimize following code.
  4708                                  
  4709                                  User_Retry:
  4710 0000129F FEC4                    	inc	ah				; return code for retry
  4711 000012A1 F606[3A02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  4712 000012A6 7406                    	jz	short User_Abort
  4713 000012A8 3A06[DF04]              	cmp	al,[RETRY_CHAR]			; retry?
  4714                                  	;jz	short EExitJ
  4715                                  	; 16/04/2023
  4716 000012AC 7469                    	jz	short EExit
  4717                                  User_Abort:
  4718 000012AE FEC4                    	inc	ah				; return code for abort
  4719                                  						;  (abort always allowed)
  4720 000012B0 3A06[DE04]              	cmp	al,[ABORT_CHAR]			; abort?
  4721 000012B4 74B9                    	jz	short Abort_Process		; exit user program
  4722 000012B6 FEC4                    	inc	ah				; return code for fail
  4723 000012B8 F606[3A02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  4724 000012BD 7406                    	jz	short AskJ
  4725 000012BF 3A06[E104]              	cmp	al,[FAIL_CHAR]			; fail?
  4726                                  	;jz	short EExitJ
  4727                                  	; 16/04/2023
  4728 000012C3 7452                    	jz	short EExit
  4729                                  AskJ:
  4730 000012C5 E943FF                  	jmp	Ask
  4731                                  
  4732                                  	; 12/01/2023
  4733                                  ;EExitJ:
  4734                                  	;jmp	short EExit
  4735                                  
  4736                                  JustExit:
  4737                                  	;assume	ds:DATARES
  4738                                  	; 12/01/2023
  4739 000012C8 A1[DC01]                	mov	ax,[Parent]			; load real parent pid
  4740                                  	;mov	[16h],ax
  4741 000012CB A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  4742 000012CE B8FF4C                  	mov	ax,4CFFh
  4743                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  4744 000012D1 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  4745                                  				; AL = exit code
  4746                                  AbortCont:
  4747 000012D3 F606[3002]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  4748 000012D8 7405                    	jz	short Not_Batch_Abort
  4749 000012DA C606[3102]01            	mov	byte [Batch_Abort],1		; set flag for abort
  4750                                  
  4751                                  Not_Batch_Abort:
  4752 000012DF 8A16[B502]              	mov	dl,[PipeFlag]
  4753 000012E3 E8D1FA                  	call	ResPipeOff
  4754 000012E6 08D2                    	or	dl,dl
  4755 000012E8 740D                    	je	short CheckForA
  4756 000012EA 833E[4302]00            	cmp	word [SingleCom],0
  4757 000012EF 7406                    	je	short CheckForA
  4758 000012F1 C706[4302]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4759                                  
  4760                                  CheckForA:
  4761 000012F7 833E[E201]00            	cmp	word [ErrCd_24],0		; write protect?
  4762 000012FC 7407                    	je	short abortfor
  4763 000012FE 833E[E201]02            	cmp	word [ErrCd_24],2		; drive not ready?
  4764 00001303 7512                    	jne	short EExit			; don't abort the FOR
  4765                                  
  4766                                  abortfor:
  4767 00001305 C606[4902]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  4768 0000130A 833E[4302]00            	cmp	word [SingleCom],0
  4769 0000130F 7406                    	je	short EExit
  4770 00001311 C706[4302]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4771                                  
  4772                                  EExit:
  4773 00001317 88E0                    	mov	al,ah
  4774 00001319 89FA                    	mov	dx,di
  4775                                  RestHd:
  4776 0000131B E8D3FC                  	call    RestHand
  4777 0000131E 59                      	pop	cx
  4778 0000131F 5E                      	pop	si				; restore registers
  4779 00001320 07                      	pop	es
  4780                                  
  4781                                  	; 12/01/2023	
  4782                                  	; MSDOS 6.0
  4783                                  ;;	pop	ds
  4784                                  ;SR;
  4785                                  ;ds has to be got from the variable we saved it in
  4786                                  
  4787 00001321 8E1E[D404]               	mov	ds,[OldDS]			; restore old value of ds
  4788                                  
  4789                                  ;	pop	ds
  4790                                  ;	assume	ds:nothing
  4791                                  
  4792                                  	; MSDOS 3.3
  4793                                  	;pop	ds
  4794                                  
  4795 00001325 CF                      	iret
  4796                                  
  4797                                  FatErr:
  4798                                  	; 12/01/2023
  4799                                  	; MSDOS 6.0
  4800                                  	;mov	dx,offset DATARES:BadFatMsg
  4801                                  	;mov	si,offset DATARES:BadFatSubst
  4802 00001326 BA[5C05]                	mov	dx,BADFATMSG
  4803 00001329 BE[C401]                	mov	si,BadFatSubst
  4804 0000132C E80700                  	call	RPrint
  4805                                  
  4806                                  	; MSDOS 3.3
  4807                                  	;mov	dx,BADFATMSG
  4808                                  	;call	RDISPMSG
  4809                                  	;mov	dx,BLKDEVERR
  4810                                  	;call	RDISPMSG
  4811                                  
  4812 0000132F B002                    	mov	al,2				; abort
  4813 00001331 EBE8                    	jmp	short RestHd
  4814                                  
  4815                                  ;DskErr	endp
  4816                                  
  4817                                  	; MSDOS 6.0
  4818                                  ; ----------------------------------------------------------------------------
  4819                                  ;***	RPrint - print message
  4820                                  ;***	Crlf - display cr/lf
  4821                                  ;
  4822                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  4823                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  4824                                  ;		variable fields related to substitution blocks are set
  4825                                  ;
  4826                                  ;	EXIT	nothing
  4827                                  ;
  4828                                  ;	USED	flags
  4829                                  ;
  4830                                  ;	EFFECTS
  4831                                  ;	  Message is displayed on stdout.
  4832                                  ;
  4833                                  ;	NOTE
  4834                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  4835                                  ;	  be greater than number of substition blocks present.
  4836                                  ; ----------------------------------------------------------------------------
  4837                                  
  4838                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4839                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  4840                                  
  4841                                  crlf: 
  4842                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  4843                                  	; 14/01/2023
  4844 00001333 BA[1607]                	mov	dx,NEWLINE
  4845                                  
  4846                                  ;RPrint	proc
  4847                                  ;
  4848                                  ;	assume	ds:DATARES,ss:DATARES
  4849                                  ;
  4850                                  	; 14/01/2023
  4851                                  RPrint:
  4852                                  
  4853                                  ;	Bugbug:	do we need to save all reg's?
  4854                                  
  4855 00001336 56                      	push	si			; preserve registers
  4856 00001337 50                      	push	ax
  4857 00001338 53                      	push	bx
  4858 00001339 51                      	push	cx
  4859 0000133A 52                      	push	dx
  4860                                  
  4861 0000133B 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  4862 0000133D 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  4863 0000133F AC                      	lodsb				; AL = message length
  4864                                  					; DS:SI = ptr to message text
  4865 00001340 31C9                    	xor	cx,cx
  4866 00001342 88C1                    	mov	cl,al			; CX = message length
  4867 00001344 E303                    	jcxz	rpRet
  4868                                  
  4869 00001346 E81900                  	call	RDispMsg
  4870                                  
  4871 00001349 5A                      rpRet:	pop	dx
  4872 0000134A 59                      	pop	cx
  4873 0000134B 5B                      	pop	bx
  4874 0000134C 58                      	pop	ax
  4875 0000134D 5E                      	pop	si
  4876 0000134E C3                      	retn
  4877                                  
  4878                                  ;RPrint	endp
  4879                                  
  4880                                  	; 14/01/2023
  4881                                  ;	; MSDOS 3.3
  4882                                  ;CRLF:
  4883                                  ;	mov     dx,NEWLIN
  4884                                  ;
  4885                                  ;RDISPMSG: ; Display message/text
  4886                                  ;	; DS:DX = ($ terminated) Message/Text address 
  4887                                  ;	push    ax
  4888                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  4889                                  ;	clc
  4890                                  ;	int     21h             ; DOS - PRINT STRING
  4891                                  ;				; DS:DX -> string terminated by "$"
  4892                                  ;	pop     ax
  4893                                  ;	retn
  4894                                  
  4895                                  
  4896                                  	; MSDOS 6.0
  4897                                  ; ----------------------------------------------------------------------------
  4898                                  ;***	RPrintCrit - print critical error message
  4899                                  ;
  4900                                  ;	ENTRY	DX = extended error # (19-39)
  4901                                  ;
  4902                                  ;	EXIT	nothing
  4903                                  ;
  4904                                  ;	USED	flags
  4905                                  ;
  4906                                  ;	EFFECTS
  4907                                  ;	  Message is displayed on stdout
  4908                                  ; ----------------------------------------------------------------------------
  4909                                  
  4910                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4911                                  
  4912                                  ;RPrintCrit	proc
  4913                                  ;	assume	ds:DATARES,ss:DATARES
  4914                                  
  4915                                  	; 14/01/2023
  4916                                  RPrintCrit:
  4917 0000134F 52                      	push	dx			; preserve DX
  4918 00001350 87DA                    	xchg	bx,dx			; BX = extended error #
  4919                                  					; DX = saved BX
  4920 00001352 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  4921 00001355 D1E3                    	shl	bx,1			; BX = offset in word table
  4922 00001357 8B9F[B008]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  4923 0000135B 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  4924                                  					; BX = restored
  4925 0000135D E8D6FF                  	call	RPrint			; print the message
  4926 00001360 5A                      	pop	dx			; restore DX
  4927 00001361 C3                      	retn
  4928                                  
  4929                                  ;RPrintCrit	endp
  4930                                  
  4931                                  ; ----------------------------------------------------------------------------
  4932                                  ;***	RDispMsg - display message
  4933                                  ;
  4934                                  ;	Display message, with substitutions, for RPrint.
  4935                                  ;
  4936                                  ;	ENTRY	DS:SI = ptr to message text
  4937                                  ;		CX = message length
  4938                                  ;		DS:BX = ptr to substitution block, if any
  4939                                  ;
  4940                                  ;	EXIT	nothing
  4941                                  ;
  4942                                  ;	USED	AX,CX,DX,SI
  4943                                  ; ----------------------------------------------------------------------------
  4944                                  
  4945                                  ;RDispMsg	proc
  4946                                  ;	assume	ds:DATARES,ss:DATARES
  4947                                  
  4948                                  RDispMsg:
  4949                                  	; 14/01/2023
  4950                                  rdNextChar:
  4951 00001362 AC                      	lodsb				; AL = next char
  4952 00001363 3C25                    	cmp	al,'%'
  4953 00001365 7511                    	jne	short rdOutChar		; not a substitution
  4954 00001367 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  4955 00001369 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  4956 0000136C 80FA09                  	cmp	dl,9
  4957 0000136F 7307                    	jae	short rdOutChar		; not a substitution
  4958                                  
  4959                                  ;*	A substitution code %1 - %9 has been encountered.
  4960                                  ;	DL = 0-8, indicating %1-%9
  4961                                  ;	DS:BX = ptr to substitution block
  4962                                  
  4963 00001371 E80D00                  	call	SubstMsg		; display the substitution
  4964 00001374 46                      	inc	si			; SI = ptr past %n
  4965 00001375 49                      	dec	cx			; count extra character in %n
  4966 00001376 EB06                    	jmp	short rdCharDone
  4967                                  
  4968                                  ;*	Normal character output.
  4969                                  
  4970                                  rdOutChar:
  4971 00001378 88C2                    	mov	dl,al			; DL = char
  4972 0000137A B402                    	mov	ah,2			; AH = DOS Character Output code
  4973 0000137C CD21                    	int	21h			; call DOS
  4974                                  rdCharDone:
  4975 0000137E E2E2                    	loop	rdNextChar
  4976 00001380 C3                      	retn
  4977                                  
  4978                                  ;RDispMsg	endp
  4979                                  
  4980                                  ; ----------------------------------------------------------------------------
  4981                                  ;***	SubstMsg - display message substitution
  4982                                  ;
  4983                                  ;	Display a substitution string within a message.
  4984                                  ;	Substitution can be a char, an ASCIIZ string, or
  4985                                  ;	a word to be displayed as hex digits.
  4986                                  ;
  4987                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  4988                                  ;		DS:BX = ptr to substitution block
  4989                                  ;
  4990                                  ;	EXIT	nothing
  4991                                  ;
  4992                                  ;	USED	AX,DX
  4993                                  ; ----------------------------------------------------------------------------
  4994                                  
  4995                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4996                                  
  4997                                  ;SubstMsg	proc
  4998                                  ;	assume	ds:DATARES,ss:DATARES
  4999                                  	
  5000                                  	; 14/01/2023
  5001                                  SubstMsg:
  5002 00001381 53                      	push	bx			; preserve BX
  5003 00001382 51                      	push	cx			; preserve CX
  5004                                  
  5005                                  	;mov	al,size SUBST		; AL = size of substitution block
  5006 00001383 B003                    	mov	al,3
  5007 00001385 F6E2                    	mul	dl			; AX = offset of desired subst block
  5008 00001387 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  5009                                  
  5010                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  5011 00001389 8A07                    	mov	al,[bx]
  5012                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  5013 0000138B 8B5F01                  	mov	bx,[bx+1]
  5014                                  
  5015                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  5016                                  
  5017 0000138E FEC8                    	dec	al
  5018 00001390 7428                    	jz	short smChar
  5019 00001392 FEC8                    	dec	al
  5020 00001394 742C                    	jz	short smStr
  5021                                  
  5022                                  ;*	Hex number substitution.
  5023                                  
  5024                                  	;mov	ax,ds:[bx]		; AX = word value
  5025 00001396 8B07                    	mov	ax,[bx]
  5026 00001398 B90400                  	mov	cx,4			; CX = # digits to display
  5027                                  smDigit:
  5028 0000139B D1C0                    	rol	ax,1
  5029 0000139D D1C0                    	rol	ax,1
  5030 0000139F D1C0                    	rol	ax,1
  5031 000013A1 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  5032                                  
  5033 000013A3 50                      	push	ax			; save other digits
  5034 000013A4 240F                    	and	al,0Fh			; AL = binary digit
  5035 000013A6 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  5036 000013A8 3C39                    	cmp	al,'9'
  5037 000013AA 7602                    	jbe	short smDigit09		; it's 0-9
  5038                                  	;add	al,7
  5039 000013AC 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  5040                                  smDigit09:
  5041 000013AE 88C2                    	mov	dl,al			; DL = ascii digit
  5042 000013B0 B402                    	mov	ah,2
  5043 000013B2 CD21                    	int	21h			; output the ascii digit
  5044 000013B4 58                      	pop	ax			; restore all digits
  5045                                  
  5046 000013B5 E2E4                    	loop	smDigit
  5047                                  	;jmp	short smRet
  5048                                  	; 14/01/2023
  5049                                  smRet:	
  5050 000013B7 59                      	pop	cx
  5051 000013B8 5B                      	pop	bx
  5052 000013B9 C3                      	retn
  5053                                  
  5054                                  ;*	Char substitution.
  5055                                  
  5056                                  smChar:
  5057                                  	;mov	dl,ds:[bx]		; DL = char to output
  5058 000013BA 8A17                    	mov	dl,[bx]
  5059 000013BC B402                    	mov	ah,2
  5060 000013BE CD21                    	int	21h
  5061 000013C0 EBF5                    	jmp	short smRet
  5062                                  
  5063                                  ;*	String substitution.
  5064                                  
  5065                                  smStr:
  5066                                  	;mov	dl,ds:[bx]		; DL = next char
  5067 000013C2 8A17                    	mov	dl,[bx]
  5068 000013C4 08D2                    	or	dl,dl
  5069 000013C6 74EF                    	jz	short smRet		; null char - we're done
  5070 000013C8 B402                    	mov	ah,2
  5071 000013CA CD21                    	int	21h			; display char
  5072 000013CC 43                      	inc	bx			; DS:BX = ptr to next char
  5073 000013CD EBF3                    	jmp	short smStr
  5074                                  
  5075                                  ;smRet:	pop	cx
  5076                                  ;	pop	bx
  5077                                  ;	retn
  5078                                  
  5079                                  ;SubstMsg	endp
  5080                                  
  5081                                  	; MSDOS 6.0
  5082                                  ; ----------------------------------------------------------------------------
  5083                                  ;***	CharToUpper - convert character to uppercase
  5084                                  ;
  5085                                  ;	ENTRY	AL = char
  5086                                  ;
  5087                                  ;	EXIT	AL = uppercase char
  5088                                  ;
  5089                                  ;	USED	AX
  5090                                  ; ----------------------------------------------------------------------------
  5091                                  
  5092                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5093                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  5094                                  
  5095                                  ;CharToUpper	proc
  5096                                  ;	assume	ds:DATARES
  5097                                  CharToUpper:
  5098 000013CF 50                      	push	ax		; put char on stack as arg to int 2F
  5099 000013D0 B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  5100 000013D3 CD2F                    	int	2Fh
  5101 000013D5 44                      	inc	sp		; throw away old char on stack
  5102 000013D6 44                      	inc	sp
  5103 000013D7 C3                      	retn
  5104                                  
  5105                                  ;CharToUpper	endp
  5106                                  
  5107                                  	; 14/01/2023
  5108                                  ;	; MSDOS 3.3
  5109                                  ;CHARTOUPPER:
  5110                                  ;	cmp	al,80h
  5111                                  ;	jb	short CHARTOUPPER1
  5112                                  ;	sub	al,80h
  5113                                  ;	push	ds
  5114                                  ;	push	bx
  5115                                  ;	lds	bx,[UPPERCASETBL]
  5116                                  ;	add	bx,2
  5117                                  ;	xlat
  5118                                  ;	pop	bx
  5119                                  ;	pop	ds
  5120                                  ;	jmp	short CHARTOUPPER_RETN
  5121                                  ;CHARTOUPPER1:
  5122                                  ;	cmp	al,'a'
  5123                                  ;	jb	short CHARTOUPPER_RETN
  5124                                  ;	cmp	al,'z'
  5125                                  ;	ja	short CHARTOUPPER_RETN
  5126                                  ;	sub	al,20h
  5127                                  ;CHARTOUPPER_RETN:
  5128                                  ;	retn
  5129                                  
  5130                                  ;public	EndCode
  5131                                  ;EndCode label byte
  5132                                  
  5133                                  	; MSDOS 6.0
  5134                                  ; ----------------------------------------------------------------------------
  5135                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  5136                                  ;
  5137                                  ;	ENTRY	If we handle it -
  5138                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  5139                                  ;		  DL = operation =
  5140                                  ;		     0 = get extended error messages
  5141                                  ;		     1 = set extended error messages
  5142                                  ;		     2 = get parse error messages
  5143                                  ;		     3 = set parse error messages
  5144                                  ;		     4 = get critical error messages
  5145                                  ;		     5 = set critical error messages
  5146                                  ;		     6 = get file system error messages
  5147                                  ;		     7 = set file system error messages
  5148                                  ;		     8 = get disk retriever routine
  5149                                  ;		     9 = set disk retriever routine
  5150                                  ;		  ES:DI = address for 'set' operations
  5151                                  ;
  5152                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  5153                                  ;
  5154                                  ;	NOTE
  5155                                  ;	  This handler replaces the one that used to reside in DOS.
  5156                                  ;	  'Set' operations are ignored.
  5157                                  ;	  'File system error messages' are not supported.
  5158                                  ; ----------------------------------------------------------------------------
  5159                                  
  5160                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5161                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  5162                                  
  5163                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5164                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1588h (CODERES:0738h)
  5165                                  
  5166                                  ;SR;
  5167                                  ;At the int 2fh entry point we push the old ds value and the resident data
  5168                                  ;segment address. Get them off the stack
  5169                                  
  5170                                  ;MsgInt2fHandler proc	far
  5171                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5172                                  
  5173                                  	; 14/01/2023
  5174                                  MsgInt2fHandler:
  5175 000013D8 1F                      	pop	ds			; ds = DATARES
  5176                                  	;assume	ds:DATARES
  5177                                  ;	pop	word [OldDS]		; save old value of ds
  5178                                  
  5179 000013D9 3D2E12                  	cmp	ax,122Eh
  5180                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  5181                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  5182 000013DC 742A                    	je	short miOurs		; it's ours
  5183                                  
  5184                                  ;ifndef ROMDOS
  5185                                  	;cmp	ax,5500h
  5186 000013DE 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  5187                                  ;else
  5188                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  5189                                  ;endif	;ROMDOS
  5190 000013E1 741C                    	je	short fcOurs
  5191                                  
  5192                                  ;SR;
  5193                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  5194                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  5195                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  5196                                  ;current value of ds as it points at the data segment. So we do some kinky
  5197                                  ;stack manipulations.
  5198                                  
  5199 000013E3 50                      	push	ax
  5200 000013E4 50                      	push	ax			; create 2 words on stack for retf
  5201                                  
  5202 000013E5 55                      	push	bp
  5203 000013E6 50                      	push	ax
  5204                                  
  5205 000013E7 89E5                    	mov	bp,sp			; bp can be used to address stack
  5206                                  
  5207                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  5208                                  ;do a 'pop ds' at the end to restore our ds
  5209                                  
  5210 000013E9 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  5211 000013EC 894604                  	mov	[bp+4],ax
  5212                                  	
  5213                                  	;mov	ax,word ptr ds:Int2fHandler+2
  5214 000013EF A1[5204]                	mov	ax,[Int2fHandler+2]
  5215 000013F2 894608                  	mov	[bp+8],ax		; put segment address
  5216                                  	;mov	ax,word ptr ds:Int2fHandler
  5217 000013F5 A1[5004]                	mov	ax,[Int2fHandler]
  5218 000013F8 894606                  	mov	[bp+6],ax		; put offset address
  5219                                  
  5220 000013FB 58                      	pop	ax
  5221 000013FC 5D                      	pop	bp
  5222 000013FD 1F                      	pop	ds
  5223                                  
  5224 000013FE CB                      	retf				; chain on to next handler
  5225                                  
  5226                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  5227                                  
  5228                                  fcOurs:
  5229                                  
  5230                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  5231                                  
  5232 000013FF 58                      	pop	ax			; discard ds currently on stack
  5233 00001400 1E                      	push	ds			; store our data segment
  5234                                  
  5235                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  5236 00001401 BE[0400]                	mov	si,Int2f_Entry
  5237                                  
  5238 00001404 31C0                    	xor	ax,ax			; indicate COMMAND present
  5239 00001406 EB11                    	jmp	short miRet		; return to caller
  5240                                  
  5241                                  miOurs:
  5242 00001408 F6C201                  	test	dl,1
  5243 0000140B 750C                    	jnz	short miRet		; ignore 'set' operations
  5244                                  
  5245 0000140D 53                      	push	bx			; preserve BX
  5246 0000140E 89D3                    	mov	bx,dx
  5247 00001410 30FF                    	xor	bh,bh			; BX = index in word table
  5248 00001412 D1E3                    	shl	bx,1			; BX = index in dword table
  5249                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5250 00001414 C4BF[1907]              	les	di,[bx+MsgPtrLists]
  5251 00001418 5B                      	pop	bx			; restore BX
  5252                                  miRet:
  5253                                  ;	mov	ds,[OldDS]		; restore ds
  5254 00001419 1F                      	pop	ds
  5255                                  	;assume	ds:nothing
  5256                                  
  5257 0000141A CF                      	iret
  5258                                  
  5259                                  ;MsgInt2fHandler endp
  5260                                  
  5261                                  	; MSDOS 6.0
  5262                                  ; ----------------------------------------------------------------------------
  5263                                  ;***	MsgRetriever - message retrieval routine for utilities
  5264                                  ;
  5265                                  ;	Address of this routine is passed to utility programs via 
  5266                                  ;	message services int 2f. We try to find the desired message
  5267                                  ;	in memory or in our disk image.
  5268                                  ;
  5269                                  ;	ENTRY	AX = message #
  5270                                  ;		DI = offset in RESGROUP of msg ptr list
  5271                                  ;		ComSpec = asciiz pathname to our disk image
  5272                                  ;
  5273                                  ;	EXIT	CY clear for success
  5274                                  ;		ES:DI = ptr to count byte, followed by message text
  5275                                  ;
  5276                                  ;		CY set for failure
  5277                                  ;		ES,DI undefined
  5278                                  ;
  5279                                  ;	USED	flags
  5280                                  ;
  5281                                  ;	NOTE
  5282                                  ;	  The message # in AX is used to compute an offset into
  5283                                  ;	  the message ptr list pointed to by DI. The lists must
  5284                                  ;	  start with message # 1 and proceed through consecutive
  5285                                  ;	  message #'s.  
  5286                                  ;
  5287                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5288                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5289                                  ;	  valid message #.  ;M033
  5290                                  ;
  5291                                  ;	  List positions with no corresponding message text are
  5292                                  ;	  indicated by null pointers, which this routine detects.
  5293                                  ; ----------------------------------------------------------------------------
  5294                                  
  5295                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5296                                  
  5297                                  ;SR; This routine will be called directly by the utilities. So, we have
  5298                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5299                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5300                                  
  5301                                  ;MsgRetriever	proc	far
  5302                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5303                                  
  5304                                  	; 14/01/2023
  5305                                  MsgRetriever:
  5306 0000141B 1F                      	pop	ds			; ds = DATARES
  5307                                  	;assume	ds:DATARES
  5308                                  ;	pop	word [OldDS]		; save old ds
  5309                                  
  5310 0000141C 50                      	push	ax			; preserve registers
  5311 0000141D 53                      	push	bx
  5312 0000141E 51                      	push	cx
  5313 0000141F 52                      	push	dx
  5314 00001420 56                      	push	si
  5315                                  
  5316                                  ;;	push	ds
  5317                                  ;;	push	cs
  5318                                  ;;	pop	ds			; DS = DATARES seg addr
  5319                                  ;;	assume	ds:RESGROUP
  5320                                  ;;	push	cs
  5321                                  
  5322 00001421 1E                      	push	ds			; get es from ds
  5323 00001422 07                      	pop	es			; ES = DATARES seg addr
  5324                                  
  5325                                  ;	Begin modification M033.
  5326                                  
  5327                                  ;	Make sure msg # is valid.
  5328                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5329                                  
  5330                                  	;mov	bx,11
  5331 00001423 BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5332                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5333 00001426 81FF[B809]              	cmp	di,PARSMSGPTRS
  5334 0000142A 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5335                                  	;mov	bx,90
  5336 0000142C BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5337                                  chkmsgnum:
  5338 0000142F 39C3                    	cmp	bx,ax
  5339 00001431 725A                    	jc	short mrRet		; msg # too high, return carry
  5340                                  
  5341                                  ;	Msg # is valid.
  5342                                  
  5343                                  ;	End modification M033.
  5344                                  
  5345 00001433 48                      	dec	ax
  5346 00001434 D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5347 00001436 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5348                                  
  5349 00001438 81FF[5404]              	cmp	di,ResMsgEnd
  5350 0000143C 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5351                                  
  5352                                  ;*	Retrieve message from disk (or ROM) image.
  5353                                  ;	Read once to get the ptr to the message, then again for the message.
  5354                                  
  5355                                  ;ifndef	ROMDOS
  5356                                  	; 14/01/2023
  5357                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5358 0000143E BE[E901]                	mov	si,ComSpec
  5359 00001441 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5360 00001444 BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5361 00001447 B8006C                  	mov	ax,6C00h
  5362                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5363 0000144A CD21                    	int	21h				; call DOS
  5364 0000144C 723F                    	jc	short mrRet			; return failure
  5365                                  
  5366 0000144E 89C3                    	mov	bx,ax				; BX = file handle
  5367 00001450 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5368 00001452 31F6                    	xor	si,si				; SI = read count
  5369                                  mrRead:
  5370 00001454 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5371 00001458 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5372 0000145A B80042                  	mov	ax,4200h
  5373                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5374 0000145D CD21                    	int	21h				; call DOS
  5375 0000145F 721A                    	jc	short mrCloseFile		; handle error
  5376                                  
  5377                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5378 00001461 BA[0004]                	mov	dx,MsgBuffer
  5379 00001464 B94000                  	mov	cx,64				; CX = # bytes to read
  5380 00001467 B43F                    	mov	ah,3Fh
  5381                                  	;mov	ah,READ				; AH = 'Read File'
  5382 00001469 CD21                    	int	21h				; call DOS
  5383 0000146B 720E                    	jc	short mrCloseFile		; handle error
  5384                                  
  5385 0000146D 09F6                    	or	si,si				; (CY cleared)
  5386 0000146F 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5387 00001471 46                      	inc	si				; mark one read done
  5388 00001472 8B16[0004]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5389 00001476 09D2                    	or	dx,dx
  5390 00001478 75DA                    	jnz	short mrRead			; go read the message
  5391 0000147A F9                      	stc					; null ptr found- no msg
  5392                                  
  5393                                  mrCloseFile:
  5394 0000147B 9C                      	pushf				; save success/failure (CY)
  5395 0000147C B43E                    	mov	ah,3Eh
  5396                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5397 0000147E CD21                    	int	21h			; call DOS
  5398                                  ;	Bugbug: should we avoid this popf?
  5399 00001480 9D                      	popf				; CY = success/failure
  5400 00001481 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5401 00001483 EB08                    	jmp	short mrRet		; we're done
  5402                                  
  5403                                  ;else	;ROMDOS
  5404                                  ;
  5405                                  ;;	DI = ptr to msg ptr
  5406                                  ;
  5407                                  ;	mov	si,di			; SI = ptr to msg ptr
  5408                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5409                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5410                                  ;
  5411                                  ;;	ASSUME ES:NOTHING is still in effect.
  5412                                  ;
  5413                                  ;	push	ds
  5414                                  ;	pop	es				; ES = DATARES seg addr
  5415                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5416                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5417                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5418                                  ;	or	si,si
  5419                                  ;	jz	mrNoMsg			; null ptr- no message text
  5420                                  ;
  5421                                  ;	sub	si,100h			; SI = offset into image of msg
  5422                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5423                                  ;	mov	di,offset DATARES:MsgBuffer
  5424                                  ;	invoke	LoadFromROM
  5425                                  ;	clc					; success
  5426                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5427                                  ;	jmp	short mrRet
  5428                                  ;
  5429                                  ;mrNoMsg:
  5430                                  ;	stc
  5431                                  ;	jmp	short mrRet
  5432                                  ;
  5433                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5434                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5435                                  ;	assume	es:NOTHING
  5436                                  ;
  5437                                  ;endif	;ROMDOS
  5438                                  
  5439                                  ;*	Message ptr is in memory.
  5440                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5441                                  
  5442                                  mrInMem:
  5443                                  	; 14/01/2023
  5444 00001485 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5445 00001488 09FF                    	or	di,di			; (CY cleared)
  5446 0000148A 7501                    	jnz	short mrRet		; found message
  5447 0000148C F9                      	stc				; null ptr found - no message
  5448                                  mrRet:	
  5449 0000148D 5E                      	pop	si			; restore all registers
  5450 0000148E 5A                      	pop	dx
  5451 0000148F 59                      	pop	cx
  5452 00001490 5B                      	pop	bx
  5453 00001491 58                      	pop	ax
  5454                                  
  5455                                  ;	mov	ds,[OldDS]		; restore ds
  5456 00001492 1F                      	pop	ds
  5457                                  	;assume	ds:nothing
  5458                                  
  5459 00001493 CB                      	retf	; 21/04/2023
  5460                                  
  5461                                  ;MsgRetriever endp
  5462                                  
  5463                                  ; M003; Start of changes for UMB support
  5464                                  
  5465                                  ; ----------------------------------------------------------------------------
  5466                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5467                                  ;
  5468                                  ;	ENTRY	al = Saved alloc strat and link state
  5469                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5470                                  ;			b1 = 1 if link state to restore is Linked
  5471                                  ;
  5472                                  ;	EXIT	None
  5473                                  ;
  5474                                  ;	USED	ax, bx, cx
  5475                                  ; ----------------------------------------------------------------------------
  5476                                  
  5477                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5478                                  
  5479                                  ;public	Lh_OffUnlink
  5480                                  Lh_OffUnlink:	; proc	far
  5481                                  	; 14/01/2023
  5482 00001494 88C5                    	mov	ch,al
  5483 00001496 88C1                    	mov	cl,al
  5484                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5485                                  	;mov	ax,(ALLOCOPER<<8)
  5486 00001498 B80058                  	mov	ax,5800h
  5487 0000149B CD21                    	int	21h
  5488 0000149D 89C3                    	mov	bx,ax
  5489 0000149F D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5490 000014A1 80E180                  	and	cl,80h				; mask off b6-b0
  5491 000014A4 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5492 000014A7 08CB                    	or	bl,cl				; set HighFirst bit state
  5493                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5494                                  	;mov	ax,(ALLOCOPER<<8)|1
  5495 000014A9 B80158                  	mov	ax,5801h
  5496 000014AC CD21                    	int	21h				; set alloc strat
  5497                                  
  5498 000014AE 88EB                    	mov	bl,ch
  5499 000014B0 D0EB                    	shr	bl,1
  5500 000014B2 30FF                    	xor	bh,bh				; bx = linkstate
  5501                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5502                                  	;mov	ax,(ALLOCOPER<<8)|3
  5503 000014B4 B80358                  	mov	ax,5803h
  5504 000014B7 CD21                    	int	21h				; set linkstate
  5505                                  
  5506 000014B9 CB                      	retf
  5507                                  
  5508                                  ;Lh_OffUnlink endp
  5509                                  
  5510                                  ; M003; End of changes for UMB support
  5511                                  ;public	EndCode
  5512                                  ; 14/01/2023
  5513                                  ;EndCode: ; label byte
  5514                                  ; 06/06/2023
  5515                                  ; 16/04/2023
  5516                                  EndCode equ ($-StartCode)+100h
  5517                                  ; 06/06/2023
  5518                                  ;EndCode equ $-StartCode
  5519                                  
  5520                                  ;CODERES ends
  5521                                  ;	end
  5522                                  
  5523                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5524                                  
  5525 000014BA 00<rep 6h>              	times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5526                                  
  5527                                  ;align 16
  5528                                  
  5529                                  ;=============================================================================
  5530                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5531                                  ;=============================================================================
  5532                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5533                                  
  5534                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5535                                  
  5536                                  ;TITLE   COMMAND Initialization
  5537                                  
  5538                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5539                                  ;ENVIRONSIZ2 EQU 092H
  5540                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5541                                  
  5542                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5543                                  ; 23/09/2018
  5544                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5545                                  ; 14/01/2023
  5546                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5547                                  
  5548                                  ; ----------------------------------------------------------------------------
  5549                                  
  5550                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5551                                  
  5552                                  ; 06/06/2023
  5553                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5554                                  ;ENVIRONSIZ equ 160
  5555                                  
  5556                                  ENVSML	equ 256	; minimum environment size
  5557                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5558                                  MAX_COMSPEC equ 146
  5559                                  ECOMSPEC equ 14
  5560                                  
  5561                                  ; 14/01/2023
  5562                                  TAB_CHAR equ 09h
  5563                                  SPACE_CHAR equ 20h	
  5564                                  
  5565                                  ; 06/06/2023
  5566                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5567                                  ENVIRONSIZ equ 180	; SIZE Environment 
  5568                                  
  5569                                  ;----------------------------------------------------
  5570                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5571                                  ;----------------------------------------------------
  5572                                  ;Environment Struc	; Default COMMAND environment
  5573                                  ;
  5574                                  ;Env_PathString  db	"path="
  5575                                  ;Env_PathSpec	 db	"c:\msdos"
  5576                                  ;                db	0
  5577                                  ;Env_PrmptString db	"prompt="
  5578                                  ;Env_PrmptSpec   db	"$p$g"
  5579                                  ;                db	0
  5580                                  ;Env_ComString   db	"comspec="
  5581                                  ;Env_ComSpec     db	"\command.com"
  5582                                  ;		 db	134 dup (0)
  5583                                  ;
  5584                                  ;Environment ends
  5585                                  ;----------------------------------------------------
  5586                                  
  5587                                  ;-----------------------------------------------------------------------------
  5588                                  
  5589                                  ;-----------------------------------------------------------------------------
  5590                                  ; START OF INIT PORTION
  5591                                  ; This code is deallocated after initialization.
  5592                                  ;-----------------------------------------------------------------------------
  5593                                  
  5594                                  ;INIT	SEGMENT PUBLIC PARA
  5595                                  
  5596                                  ; 	EXTRN   HEADER:BYTE
  5597                                  ;	EXTRN   BADCOMLKMES:BYTE
  5598                                  
  5599                                  ;	PUBLIC  CONPROC
  5600                                  
  5601                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  5602                                  
  5603                                          ;ORG 0
  5604                                  ;ZERO = $
  5605                                  	; 23/09/2018
  5606                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  5607                                  
  5608                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5609                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  5610                                  
  5611                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5612                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1670h (CODERES:0820h)
  5613                                  ConProc:
  5614                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  5615 000014C0 BC[D404]                	mov	sp,RStack
  5616                                  
  5617                                  ; We need to set the PSP to us right at start because Carousel needs
  5618                                  ; to be lied to and it does not set PSP when it transfers control to
  5619                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  5620                                  ; command.com is also not lied to.
  5621                                  
  5622                                  	; 14/01/2023
  5623                                  	; MSDOS 6.0
  5624 000014C3 B450                            mov	ah,50h
  5625                                  	;mov	ah,SET_CURRENT_PDB
  5626 000014C5 8CC3                            mov	bx,es
  5627 000014C7 CD21                            int	21h
  5628                                  
  5629                                  	; 14/01/2023
  5630                                  	;mov	ah,30h 
  5631                                  	;;mov	ax,GET_VERSION<<8 ; 3000h
  5632                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5633 000014C9 B80030                  	mov	ax,3000h
  5634 000014CC CD21                    	int	21h
  5635                                  	;;;cmp	ax,EXPECTED_VERSION ; 1E03h
  5636                                  	;;cmp	ax,5
  5637                                  	;cmp	ax,EXPECTED_VERSION ; 0005h
  5638                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5639 000014CE 3D0616                  	cmp	ax,EXPECTED_VERSION ; 1606h
  5640 000014D1 7411                    	je	short okdos			; DOS version is ok
  5641                                  
  5642 000014D3 BA[8C1F]                	mov	dx,BADVERMSG			; DX = ptr to msg
  5643 000014D6 E85DFE                  	call	RPrint
  5644                                  
  5645                                  	; MSDOS 3.3
  5646                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  5647                                  	;int	21h             ; DOS - PRINT STRING
  5648                                  				; DS:DX -> string terminated by "$"
  5649 000014D9 8CC0                    	mov	ax,es
  5650 000014DB 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  5651                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  5652                                  Here:	
  5653 000014E0 74FE                    	jz	short Here			;  loop forever
  5654                                  	
  5655 000014E2 CD20                    	int	20h				; otherwise, exit
  5656                                  okdos:
  5657                                  	; 23/09/2018
  5658                                  
  5659                                  ;  Calculate and save the end of the INIT segment (which is also
  5660                                  ;  the beginning of TRANGROUP).
  5661                                  
  5662                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5663                                  	; MSDOS 3.3
  5664                                  	;mov	ah,65h
  5665                                  	;mov	al,2
  5666                                  	;mov	dx,-1
  5667                                  	;mov	bx,-1
  5668                                  	;mov	cx,5
  5669                                  	;mov	di,UCASE_ADDR
  5670                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  5671                                  	;		; AL = 02h : Get pointer to character translation table
  5672                                  	;		; BX = code page (-1 = current global code page)
  5673                                  	;		; DX = country ID (-1 = current country)
  5674                                  	;		; CX = amount of data to return
  5675                                  	;; ES:DI = pointer to output buffer
  5676                                  	;; Buffer offset :
  5677                                  	;;	00h -  byte,  country Id
  5678                                  	;;  	01h -  dword, pointer to uppercase table	
  5679                                  
  5680                                  	; 14/01/2023
  5681                                  	; MSDOS 6.0 (& MSDOS 3.3)
  5682                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  5683                                  	; 06/06/2023
  5684                                  	;mov	dx,26EFh     ; MSDOS 6.22 COMMAND.COM       	
  5685 000014E4 BA5F25                  	mov	dx,TRANSTART+15			; get end of init code
  5686                                  	; 27/09/2018
  5687                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  5688 000014E7 B104                    	mov	cl,4				; change to paragraphs
  5689 000014E9 D3EA                            shr	dx,cl				;
  5690 000014EB 8CC8                            mov     ax,cs                           ; get current segment
  5691 000014ED 01D0                            add     ax,dx                           ; calculate segment of end of init
  5692 000014EF A3[D41E]                        mov     [initend],ax			; save this
  5693                                  
  5694                                  	; 14/01/2023
  5695                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  5696                                  
  5697                                  ;  Check for /? on the command line. If found, display help text and exit.
  5698                                  ;  NOTE: this routine may terminate the program, never returning.
  5699                                  
  5700 000014F2 E8B006                  	call	CheckHelp
  5701                                  
  5702                                  ; We have to patch the segment values for the various interrupt entry points.
  5703                                  ; This is because we need to have the default addresses of the handlers in our
  5704                                  ; stub before the relocation is done. These values will then be changed once
  5705                                  ; the resident is relocated
  5706                                  
  5707 000014F5 E81E09                  	call	patch_segs
  5708                                  
  5709                                  ;  Turn APPEND off during initialization processing
  5710                                  
  5711                                  	; 14/01/2023
  5712 000014F8 B800B7                  	mov     ax,0B700h
  5713                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  5714 000014FB CD2F                    	int	2Fh				;
  5715                                  	;cmp	al,0				; append installed?
  5716 000014FD 08C0                    	or	al,al
  5717 000014FF 7418                    	jz	short set_msg_addr		; no - continue
  5718                                  	
  5719 00001501 B802B7                  	mov	ax,0B702h
  5720                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  5721 00001504 CD2F                    	int	2Fh				;
  5722                                  	;cmp	ax,-1				; append version correct?
  5723                                  	;jne	short set_msg_addr		; no - continue
  5724 00001506 40                      	inc	ax ; -1 -> 0
  5725 00001507 7510                    	jnz	short set_msg_addr        
  5726                                  	
  5727 00001509 B806B7                  	mov     ax,0B706h
  5728                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  5729 0000150C CD2F                    	int	2Fh				;
  5730 0000150E 891E[6002]                      mov     [Append_State],bx		; save append state
  5731                                         
  5732 00001512 31DB                    	xor	bx,bx                           ; clear out state
  5733 00001514 B807B7                  	mov	ax,0B707h
  5734                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  5735 00001517 CD2F                    	int	2Fh				; set everything off
  5736                                  
  5737                                  set_msg_addr:
  5738                                  	; 14/01/2023
  5739                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  5740                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  5741                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  5742                                  	; 06/06/2023
  5743                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:16CBh) 
  5744                                  	;mov	di,0A41h  ; mov di,PAERRMSG0 ; MSDOS 6.22 COMMAND.COM
  5745 00001519 BF[DA08]                	mov	di,DataresEnd
  5746 0000151C 893E[5404]              	mov	[ResMsgEnd],di			; save it
  5747                                  
  5748 00001520 E80509                          call    get_XMMAddr                     ; get XMM call address
  5749                                  
  5750                                  ; Check if this is the first instance of command.com. If not, we just exit
  5751                                  ; this routine without moving any code.
  5752                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  5753                                  ; stub. We just have to copy this over
  5754                                  	
  5755                                  ;ifndef ROMDOS
  5756 00001523 B80055                  	mov	ax,5500h
  5757                                  	;mov	ax,GET_COMMAND_STATE	
  5758                                  ;else
  5759                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  5760                                  ;endif ; ROMDOS
  5761                                  
  5762 00001526 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  5763                                  	;assume	ds:nothing
  5764                                  
  5765                                  	; 03/05/2023
  5766                                  	; Return:
  5767                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  5768                                  	;   DS:SI -> entry point table
  5769                                  
  5770                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  5771                                  
  5772 00001528 09C0                    	or	ax,ax
  5773 0000152A 750C                    	jnz	short first_com			; this is the first instance
  5774                                  
  5775                                  	; 14/01/2023
  5776 0000152C 268936[1024]            	mov	[es:ResJmpTable],si		; save old stub jump table
  5777 00001531 268C1E[1224]            	mov	[es:ResJmpTable+2],ds
  5778 00001536 EB06                    	jmp	short init_cntry
  5779                                  
  5780                                  first_com:
  5781 00001538 26C606[1424]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  5782                                  
  5783                                  init_cntry:
  5784                                  	; 14/01/2023
  5785 0000153E 06                      	push	es
  5786 0000153F 1F                      	pop	ds
  5787                                  	;assume	ds:RESGROUP
  5788                                  
  5789 00001540 B465                    	mov	ah,65h
  5790                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  5791 00001542 B004                    	mov	al,4				; get file ucase table
  5792 00001544 BAFFFF                  	mov	dx,-1				;
  5793                                  	;mov	bx,-1				;
  5794 00001547 89D3                    	mov	bx,dx
  5795 00001549 B90500                  	mov	cx,5				; number of bytes we want
  5796                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  5797 0000154C BF[5302]                	mov	di,FUCase_Addr
  5798 0000154F CD21                    	int	21h
  5799                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  5800                                  		; AL = function -
  5801                                  
  5802                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  5803                                  
  5804 00001551 1E                      	push	ds				;
  5805 00001552 B80063                  	mov	ax,6300h
  5806                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  5807 00001555 CD21                    	int	21h				;
  5808                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  5809                                  			
  5810 00001557 8CDB                    	mov	bx,ds				; get segment to bx
  5811 00001559 1F                      	pop	ds				;
  5812 0000155A 8936[5C02]              	mov	[Dbcs_Vector_Addr],si		; save address of
  5813 0000155E 891E[5E02]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  5814                                  
  5815                                  	;mov	ax,[16h]
  5816 00001562 A11600                  	mov	ax,[PDB.PARENT_PID]
  5817                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  5818 00001565 A3[DC01]                	mov	[Parent],ax			;  correctly.
  5819 00001568 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  5820 0000156B A3[DE01]                	mov	[OldTerm],ax
  5821 0000156E A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  5822 00001571 A3[E001]                	mov	[OldTerm+2],ax
  5823                                  
  5824                                  	; 14/01/2023
  5825                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  5826                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  5827                                  	; 06/06/2023
  5828                                  	;mov	ax,1679h	; MSDOS 6.22 COMMAND.COM
  5829                                  	;mov	ax,EndCode+15
  5830                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  5831                                  	; 14/01/2023
  5832                                  	;mov	cl,4				; ax = size of resident part of
  5833                                  	;shr	ax,cl				;  command in paragraphs. Add
  5834                                  	;mov	cx,cs				;  this to CS and you get the
  5835                                  	;add	ax,cx				;  segment of the TPA.
  5836                                  
  5837 00001574 8CC8                    	mov	ax,cs
  5838 00001576 055C01                  	add	ax,(EndCode+15)>>4
  5839                                  	
  5840 00001579 A3[FA03]                	mov     [Res_Tpa],ax			; Temporarily save the TPA segment
  5841 0000157C 2500F0                  	and     ax,0F000h
  5842 0000157F 050010                  	add     ax,1000h			; Round up to next 64K boundary
  5843 00001582 7303                    	jnc     short TpaSet			; Memory wrap if carry set
  5844 00001584 A1[FA03]                	mov     ax,[Res_Tpa]
  5845                                  TpaSet:
  5846 00001587 A3[EE03]                	mov	[LTpa],ax			; Good enough for the moment
  5847                                  	;mov	ax,[2]
  5848 0000158A A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  5849                                  
  5850 0000158D 8C1E[F403]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  5851 00001591 8C1E[F803]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  5852 00001595 8C1E[EC03]              	mov	[MySeg],ds			;  use to call resident routines.
  5853                                  	; 19/04/2023
  5854                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  5855 00001599 8C1E[2B07]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  5856                                  
  5857 0000159D A3[3302]                	mov	[MemSiz],ax			; Needed for execing other programs
  5858                                  
  5859                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5860                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  5861                                  
  5862                                  ; First reallocate the COMMAND size to its memory image
  5863                                  	
  5864 000015A0 50                      	push	ax    
  5865                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  5866                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  5867                                  	;mov	bx,TRANSTART
  5868                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  5869                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  5870                                  	;add	bx,15 ; *			; round up the size
  5871                                  	; 06/06/2023
  5872                                  	;mov	bx,26E0h  ; MSDOS 6.22 COMMAND.COM ; mov bx,offset RESGROUP:TranStart
  5873                                  	;add	bx,0AF95h ; MSDOS 6.22 COMMAND.COM ; add bx,offset TRANGROUP:TranSpaceEnd
  5874                                  	;add	bx,15 ; *			; round up the size
  5875                                  
  5876                                  	; 03/05/2023
  5877                                  	;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  5878                                  	;add	bx,TRANSPACEEND
  5879                                  	; 06/06/2023
  5880                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  5881                                          ;mov	cl,4				;
  5882                                          ;shr	bx,cl				; size of command.com
  5883 000015A1 BBF60C                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4	
  5884                                  
  5885 000015A4 B44A                    	mov	ah,4Ah
  5886                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  5887 000015A6 CD21                            int     21h				;
  5888 000015A8 58                              pop     ax				;
  5889                                  	
  5890                                  ; Compute maximum size of environment
  5891                                  
  5892                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  5893                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  5894                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5895                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  5896                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  5897 000015A9 C706[C81E]5300          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  5898                                  					; 12+(((1B53h-1670h)+15)/16)-1 = 90	
  5899                                  ;
  5900                                  ; Compute minimum size of environment
  5901                                  ;
  5902                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  5903                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  5904 000015AF C706[C61E]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  5905                                  
  5906                                  	;;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  5907                                  	;;mov	dx,98D4h	; MSDOS 5.0 COMMAND.COM
  5908                                  	; 06/06/2023
  5909                                  	;;mov	dx,0AFA4h	; MSDOS 6.22 COMMAND.COM
  5910                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  5911                                  	;mov	cl,4				;  in paragraphs.
  5912                                  	;shr	dx,cl
  5913 000015B5 BAA10A                  	mov	dx,(TRANSPACEEND+15)>>4
  5914                                  
  5915 000015B8 8916[D61E]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  5916                                  
  5917 000015BC 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  5918 000015BE A3[2D02]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  5919                                  	;mov	ax,[2Ch]
  5920 000015C1 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  5921                                  
  5922                                  	; 14/01/2023
  5923                                          ; MSDOS 6.0
  5924                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5925 000015C4 A3[DC03]                	mov	[EnvirSeg],ax
  5926                                          
  5927                                  	; 21/01/2023
  5928 000015C7 09C0                    	or	ax,ax				; if there is no environment segment,
  5929 000015C9 7407                    	jz	short buildenv			; make one
  5930                                    
  5931                                  	; 21/01/2023
  5932                                  	; MSDOS 3.3 & MSDOS 5.0
  5933                                  	;;inc	byte [CHUCKENV]
  5934                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5935                                  	;inc	byte [AllocedEnv]		; Flag - old environment segment
  5936                                  	
  5937                                  	; MSDOS 3.3 & MSDOS 5.0
  5938                                  	; 06/06/2023
  5939                                  	;jmp	short environpassed
  5940                                  	
  5941                                  	; MSDOS 6.0
  5942                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM	
  5943 000015CB 803E[1424]00            	cmp	byte [FirstCom],0		; if this is the first command.com,
  5944 000015D0 7403                    	je	short environpassed		; do a merge job (make sure COMSPEC exists)
  5945                                  
  5946                                  	; MSDOS 6.0
  5947                                  
  5948                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  5949                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  5950                                  ; size and free this buffer. We need this buffer because we no longer have an
  5951                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  5952                                  ; given on the command line before we know the environment size. This routine
  5953                                  ; will not return in case of an allocation error. It will either exit or hang
  5954                                  ; depending on whether or not this is the first COMMAND.COM or not.
  5955                                  
  5956                                  	; 14/01/2023
  5957                                  buildenv:
  5958 000015D2 E8BC06                  	call	alloc_env                       ; try to allocate buffer
  5959                                  environpassed:
  5960                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  5961                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5962                                  	;mov	[EnvirSeg],ax
  5963                                  	;
  5964 000015D5 8EC0                    	mov	es,ax                           ; and it load into es.
  5965                                  	;assume	es:nothing
  5966                                  
  5967                                  gottheenvir:
  5968                                  
  5969                                  ; Initialize the command drive
  5970                                  
  5971                                  	; 14/01/2023
  5972                                  	; MSDOS 3.3 & MSDOS 6.0
  5973 000015D7 B419                    	mov	ah,19h
  5974                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  5975 000015D9 CD21                    	int	21h
  5976 000015DB FEC0                    	inc	al
  5977 000015DD A2[3202]                	mov	[ComDrv],al
  5978                                  
  5979                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  5980 000015E0 A05C00                          mov	al,[FCB]
  5981 000015E3 08C0                    	or	al,al
  5982 000015E5 7433                    	jz	short nocomdrv		; no drive specified
  5983                                  
  5984 000015E7 B43A                    	mov	ah,':'
  5985 000015E9 A2[3202]                	mov	[ComDrv],al
  5986 000015EC 0440                    	add	al,40h			; convert number to uppercase character
  5987                                  
  5988 000015EE FD                      	std
  5989                                  
  5990                                  	; MSDOS 6.0
  5991                                  	; 06/06/2023
  5992                                  	; MSDOS 6.22 - COMMAND.COM - RESGROUP:17B7h
  5993 000015EF 803E[8C1E]00            	cmp	byte [AllocedEnv],0	; if a new environment is being built,
  5994 000015F4 7420                    	je	short notwidenv		;  move the default comspec string in it
  5995                                  	; 14/01/2023
  5996                                  	; MSDOS 5.0 COMMAND.COM
  5997 000015F6 8B3E[AF1E]              	mov	di,[ComspOffset]
  5998 000015FA 26807D013A                      cmp	byte [es:di+1],':'	; drive specifier already exist?
  5999 000015FF 7415                            je	short notwidenv		; yes, must have been inherited that way
  6000                                  
  6001                                  	; 06/06/2023
  6002                                  	; MSDOS 3.3
  6003                                  	;;cmp	byte [CHUCKENV],0
  6004                                  	;;jne	short NOTWIDENV
  6005                                  	; 21/01/2021
  6006                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  6007                                   	;cmp	byte [AllocedEnv],0
  6008                                  	;ja	short notwidenv
  6009                                  
  6010 00001601 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  6011 00001602 06                      	push	es			;  the drivespec is in ax and is copied
  6012 00001603 1F                      	pop	ds			;  on to the front of the string.
  6013                                  
  6014                                  ; 06/06/2023
  6015                                  %if 0
  6016                                  	; 21/01/2023
  6017                                  	; 14/01/2023
  6018                                  	; MSDOS 5.0 COMMAND.COM
  6019                                  	; MSDOS 3.3
  6020                                  	; 23/09/2018
  6021                                  	; 30/04/2018
  6022                                  	;mov	di,159
  6023                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  6024                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  6025                                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  6026                                  	;mov	si,157
  6027                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  6028                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  6029                                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  6030                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  6031                                  	mov	cx,MAX_COMSPEC-2 ; 144
  6032                                  %endif
  6033                                  
  6034                                  	; MSDOS 6.0
  6035                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM - RESGROUP:17CCh
  6036 00001604 8DB58F00                        lea	si,[di+MAX_COMSPEC-3]	; lea si,[di+143]
  6037 00001608 8DBD9100                        lea	di,[di+MAX_COMSPEC-1]	; lea di,[di+145]
  6038                                  
  6039 0000160C B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  6040                                  
  6041 0000160F F3A4                    	rep	movsb
  6042 00001611 1F                      	pop	ds
  6043                                  
  6044                                  	; MSDOS 6.0
  6045                                  	; 06/06/2023
  6046 00001612 268945FF                	mov	[es:di-1],ax
  6047                                  
  6048                                  	; MSDOS 3.3
  6049                                  	;mov	[es:0Eh],ax
  6050                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  6051                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  6052                                  	; 14/01/2023
  6053                                  	; 06/06/2023
  6054                                  	;mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  6055                                  
  6056                                  	; MSDOS 3.3 & MSDOS 6.0
  6057                                  notwidenv:
  6058 00001616 FC                      	cld
  6059 00001617 A3[6E1E]                	mov	[AUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6060                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6061                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  6062                                  	
  6063                                  	; 22/07/2024
  6064                                  	; 06/06/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6065                                  	;mov	[KAUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6066                                  
  6067                                  nocomdrv:
  6068 0000161A E896FA                  	call	SetVect        ; Set the vectors
  6069                                  
  6070                                  ; parsing starts here
  6071                                  
  6072                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6073                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16C9h - CODERES:0989h)
  6074                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6075                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:17E8h - CODERES:0998h)
  6076                                  	; MSDOS 6.0
  6077 0000161D 0E                      	push	cs
  6078 0000161E 0E                      	push	cs
  6079 0000161F 1F                      	pop	ds
  6080 00001620 07                      	pop	es
  6081                                  	;assume ds:ResGroup,es:ResGroup
  6082                                  
  6083 00001621 BE8000                  	mov	si,80h				; get command line
  6084 00001624 AC                      	lodsb					; get length of line
  6085 00001625 89F7                    	mov	di,si				; get line position in di
  6086 00001627 30E4                    	xor	ah,ah				; ax = length of command line
  6087                                  
  6088                                  ; insure that the command line correctly ends with a cr
  6089                                  
  6090 00001629 01C7                    	add	di,ax				; go to end of command line
  6091 0000162B C6050D                          mov	byte [di],0Dh			; insert a carriage return
  6092 0000162E 31C9                    	xor	cx,cx				; clear cx
  6093 00001630 890E[881F]                      mov	[num_positionals],cx		; initialize positionals
  6094                                  
  6095                                  ; Scan the command line looking for the parameters
  6096                                  
  6097                                  Parse_command_line:
  6098                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  6099 00001634 BF[DE1E]                	mov	di,PARSE_COMMAND
  6100 00001637 8B0E[881F]              	mov	cx,[num_positionals]		; Get number of positionals
  6101 0000163B 31D2                    	xor	dx,dx				; clear dx
  6102 0000163D 8936[8A1F]                      mov	[old_parse_ptr],si		; save position before calling parser
  6103                                  	;call	dword ptr Init_Parse
  6104 00001641 FF1E[D21E]              	call	far [Init_Parse]		; call parser
  6105 00001645 890E[881F]                      mov     [num_positionals],cx		; Save number of positionals
  6106                                  	; 29/01/2023
  6107                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  6108                                          ;cmp	ax,-1
  6109                                  	;jne	short t1
  6110                                  	; 10/06/2023
  6111 00001649 40                      	inc	ax	 ; cmp ax,-1
  6112 0000164A 7503                    	jnz	short t1 ; 0FFFFh -> 0
  6113                                  	; ax = 0
  6114 0000164C E93202                  	jmp     ArgsDone                        ; yes - exit
  6115                                  t1:	
  6116                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  6117                                  	;;cmp	ax,0
  6118                                  	;and	ax,ax
  6119                                  	; 10/06/2023
  6120 0000164F 48                      	dec	ax  ; cmp ax,0
  6121 00001650 7450                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  6122                                  
  6123                                  ; Before issuing error message - make sure switch is not /C
  6124                                  
  6125                                  parse_line_error:
  6126                                  	; 14/01/2023
  6127                                  	;push	si				; save line position
  6128                                  	;push	ax				; save error number
  6129                                  	;cmp	ax,3
  6130 00001652 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  6131                                          ;jnz	short parse_line_error_disp	; No - just issue message
  6132 00001655 7533                    	jne	short parse_line_error_disp2
  6133 00001657 56                      	push	si ; **				; save line position
  6134 00001658 50                      	push	ax ; *				; save error number
  6135 00001659 89F7                    	mov	di,si				; Get terminating pointer in DI
  6136 0000165B 8B36[8A1F]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  6137                                  
  6138                                  init_chk_delim:
  6139 0000165F 39FE                    	cmp	si,di				; at end of parsed parameter?
  6140 00001661 7425                            je	short parse_line_error_disp	; Yes - just display message
  6141 00001663 AC                      	lodsb					;
  6142 00001664 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  6143                                  	;cmp	al,space_chr ; 14/01/2023
  6144                                  	;;cmp	al,[space]			; Skip blank spaces
  6145 00001666 74F7                    	je	short init_chk_delim		;
  6146                                  	;cmp	al,9
  6147 00001668 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  6148 0000166A 74F3                    	je	short init_chk_delim		;
  6149                                  
  6150 0000166C 3A06[F003]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  6151 00001670 7516                            jne	short parse_line_error_disp	; No - just issue message
  6152 00001672 AC                      	lodsb					; Get the char after the switch
  6153                                  
  6154 00001673 E8A004                  	call	iupconv 			; upper case it
  6155                                  
  6156                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  6157                                          ;jne	short check_k_too ; MSDOS 6.0	;
  6158                                  	; 16/04/2023
  6159 00001676 3C43                    	cmp	al,'C' ; scswitch
  6160                                  	;jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  6161                                  	; 06/06/2023
  6162                                  	; MSDOS 6.22 COMMAND.COM
  6163 00001678 7505                    	jne	short check_k_too
  6164 0000167A 5A                      	pop	dx ; *				; even up stack
  6165 0000167B 5A                      	pop	dx ; **				; even up stack
  6166 0000167C E9B100                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  6167                                  
  6168                                  	; MSDOS 6.0
  6169                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6170                                  check_k_too:
  6171                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  6172                                          ;jne	short parse_line_error_disp	;
  6173                                  	; 06/06/2023
  6174 0000167F 3C4B                    	cmp	al,'K'
  6175 00001681 7505                    	jne	short parse_line_error_disp
  6176 00001683 5A                      	pop	dx ; *				; even up stack
  6177 00001684 5A                      	pop	dx ; **				; even up stack
  6178 00001685 E9A100                          jmp	SetKSwitch			; Yes - go set COMMAND /K
  6179                                  
  6180                                  parse_line_error_disp:
  6181                                  	; 14/01/2023
  6182 00001688 58                      	pop	ax ; *				; restore error number
  6183 00001689 5E                      	pop	si ; **				; restore line position
  6184                                  parse_line_error_disp2:
  6185 0000168A 89C2                    	mov	dx,ax				; get message number
  6186 0000168C E82B04                  	call	RPrintParse
  6187 0000168F E8A1FC                  	call	crlf
  6188 00001692 EBA0                            jmp     short Parse_command_line        ; continue parsing
  6189                                  
  6190                                  ; 16/04/2023
  6191                                  %if 1
  6192                                  SetMSwitch:
  6193                                          ;cmp	byte [ext_msg],1
  6194 00001694 803E[D91E]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6195                                  	; 16/04/2023
  6196                                  	;jnz	short setMswitchok		; no - set it
  6197                                  	;;mov	ax,1
  6198                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6199                                  	;jmp	parse_line_error                ; go issue error message
  6200                                  	; 16/04/2023
  6201 00001699 7458                    	je	short parse_line_error_j
  6202                                  setMswitchok:
  6203                                          ;mov	byte [ext_msg],1
  6204 0000169B C606[D91E]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6205                                  	; 06/06/2023
  6206 000016A0 EB92                    	jmp	short Parse_command_line	; keep parsing
  6207                                  %endif
  6208                                  
  6209                                  parse_cont:
  6210                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6211                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6212                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6213                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:1869h - CODERES:0A19h)
  6214                                  
  6215                                  	; MSDOS 6.0
  6216                                  
  6217                                  ; See if a switch was entered
  6218                                  ;
  6219                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6220                                  
  6221 000016A2 813E[811F][191F]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6222 000016A8 7433                    	je	short SetFSwitch		; yes go set fail switch
  6223 000016AA 813E[811F][0D1F]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6224 000016B0 743A                    	je	short SetPSwitch		; yes go set up PERMCOM
  6225 000016B2 813E[811F][251F]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6226 000016B8 745C                    	je	short SetDSwitch		; yes go set date switch
  6227 000016BA 813E[811F][4A1F]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6228 000016C0 746E                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6229                                  	; 06/06/2023
  6230                                  	; MSDOS 6.0 only!
  6231 000016C2 813E[811F][701F]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6232 000016C8 745F                            je	short SetKSwitch		; yes go set up SINGLECOM
  6233                                  	;
  6234 000016CA 813E[811F][311F]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6235 000016D0 746F                    	je	short SetESwitch		; yes go set up environment
  6236 000016D2 813E[811F][561F]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6237                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6238                                  	; 15/01/2023
  6239 000016D8 74BA                    	je	short SetMSwitch 
  6240 000016DA E98200                  	jmp	ChkOtherArgs		; Must be something else
  6241                                  
  6242                                  	; MSDOS 6.0
  6243                                  ;SetMSwitchjmp:
  6244                                  	;jmp	SetMSwitch
  6245                                  	
  6246                                  	; MSDOS 6.0
  6247                                  SetFSwitch:
  6248 000016DD 803E[4702]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6249                                  	; 16/04/2023
  6250                                  	;jne	short failok		; no - set it
  6251                                  	;;mov	ax,1
  6252                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6253                                          ;jmp	parse_line_error        ; go issue error 
  6254                                  	; 16/04/2023
  6255 000016E2 740F                    	je	short parse_line_error_j
  6256                                  
  6257                                  	; MSDOS 3.3 & MSDOS 6.0
  6258                                  failok:
  6259 000016E4 C606[4702]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6260                                  	; MSDOS 3.3
  6261                                  	;jmp	short CHKARG
  6262                                  	; MSDOS 6.0
  6263 000016E9 E948FF                  	jmp	Parse_command_line
  6264                                  
  6265                                  ;CHECKPSWITCH:
  6266                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6267                                  	;cmp	al,[letter_p]
  6268                                          ;jnz	short CHECKDSWITCH
  6269                                  
  6270                                  SetPSwitch:
  6271                                  
  6272                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6273                                  ; termination address.
  6274                                  
  6275                                  	; MSDOS 6.0
  6276 000016EC 803E[4002]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6277 000016F1 7406                    	jz	short permcomok		; no - set it
  6278                                  	; 16/04/2023
  6279                                  parse_line_error_j:
  6280                                          ;mov	ax,1
  6281 000016F3 B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6282 000016F6 E959FF                          jmp	parse_line_error	; go issue error 
  6283                                  
  6284                                  permcomok:
  6285                                  	; MSDOS 3.3 & MSDOS 6.0
  6286 000016F9 FE06[4002]              	inc	byte [PermCom]
  6287                                  	;mov	word [OLDTERM],LODCOM
  6288 000016FD C706[DE01][7E00]        	mov	word [OldTerm],LodCom_Trap
  6289                                  	;mov	[OLDTERM+2],ds
  6290 00001703 8C1E[E001]              	mov	[OldTerm+2],ds
  6291                                  
  6292                                  ; make sure that we display the date and time. if the flag was not
  6293                                  ; initialized, set it to indicate yes, do prompt.
  6294                                  
  6295                                  	; MSDOS 3.3
  6296                                  	;cmp	byte [PRDATTM],-1
  6297                                  	;jnz	short CHKARG
  6298                                  	;mov	byte [PRDATTM],0
  6299                                  	;jmp	short CHKARG
  6300                                  
  6301                                  	; MSDOS 6.0
  6302 00001707 803E[7F1E]FF            	cmp	byte [PRDATTM],-1
  6303 0000170C 7505                    	jne	short Parse_command_line_jmp
  6304 0000170E C606[7F1E]00            	mov	byte [PRDATTM],0
  6305                                  Parse_command_line_jmp:
  6306 00001713 E91EFF                  	jmp     Parse_command_line	; keep parsing
  6307                                  
  6308                                  ;COMRETURNSJ:
  6309                                  ;	; MSDOS 3.3
  6310                                  ;	JMP	ARGSDONE
  6311                                  
  6312                                  ;CHECKDSWITCH:
  6313                                  	;;cmp	al,'d'
  6314                                          ;cmp	al,[letter_d]
  6315                                  	;jnz	short CHECKCSWITCH
  6316                                  
  6317                                  SetDSwitch:
  6318                                  
  6319                                  ; Flag no date/time prompting.
  6320                                  
  6321                                  	; MSDOS 6.0
  6322 00001716 803E[DB1E]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6323                                  	; 16/04/2023
  6324                                  	;jz	short setdateok		; no - set it
  6325                                          ;;mov	ax,1
  6326                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6327                                          ;jmp	parse_line_error	; go issue error message
  6328                                  	; 16/04/2023
  6329 0000171B 75D6                    	jnz	short parse_line_error_j
  6330                                  setdateok:
  6331 0000171D FE06[DB1E]              	inc	byte  [dswitch]		; indicate /D entered
  6332                                  
  6333                                  	; MSDOS 3.3 & MSDOS 6.0
  6334 00001721 C606[7F1E]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6335                                  	; MSDOS 3.3
  6336                                  	;jmp	short CHKARG
  6337                                  	; MSDOS 6.0
  6338 00001726 E90BFF                  	jmp     Parse_command_line	; continue parsing
  6339                                  
  6340                                  	; 15/01/2023
  6341                                  	; MSDOS 6.0 
  6342                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6343                                  SetKSwitch:
  6344 00001729 C606[4102]00            	mov	byte [SemiPermCom],0
  6345 0000172E EB05                    	jmp	short SetSorKSwitch
  6346                                  
  6347                                  ;CHECKCSWITCH:
  6348                                  	;;cmp	al,'c'
  6349                                  	;cmp	al,[letter_c]
  6350                                          ;jnz	short CHECKESWITCH
  6351                                  
  6352                                  SetSSwitch:
  6353                                  ;SETCSWITCH:
  6354                                  
  6355                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6356                                  
  6357 00001730 C606[4002]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6358                                  SetSorKSwitch:	; 06/06/2023
  6359 00001735 8936[4302]              	mov	[SingleCom],si		; Point to the rest of the command line
  6360 00001739 C606[7F1E]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6361                                  ;COMRETURNSJ: ; 24/09/2018
  6362 0000173E E94001                  	jmp     ArgsDone
  6363                                  
  6364                                  ;CHECKESWITCH:
  6365                                  	;cmp	al,'e'
  6366                                  	;jnz	short CHKARG
  6367                                  
  6368                                  ; Look for environment-size setting switch
  6369                                  
  6370                                  ; The environment size is represented in decimal bytes and is
  6371                                  ; converted into paragraphs (rounded up to the next paragraph).
  6372                                  
  6373                                  SetESwitch:
  6374                                  	; MSDOS 6.0
  6375 00001741 803E[DA1E]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6376                                  	; 16/04/2023
  6377                                  	;jz	short eswitchok		; no - set it
  6378                                  	;;mov	ax,1
  6379                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6380                                          ;jmp	parse_line_error	; go issue error message
  6381                                  	; 16/04/2023
  6382 00001746 75AB                    	jnz	short parse_line_error_j
  6383                                  eswitchok:
  6384 00001748 FE06[DA1E]              	inc	byte [eswitch]		; indicate /E entered 	
  6385                                  
  6386                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6387                                  	; 15/01/2023 - Retro DOS v4.1 (& v4.1) - MSDOS 5.0 COMMAND.COM
  6388                                  	; MSDOS 6.0
  6389                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6390 0000174C BF[831F]                        mov	di,COMND1_ADDR
  6391 0000174F 8B1D                    	mov     bx,[di]				; into bx
  6392                                  
  6393 00001751 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6394 00001754 B104                    	mov	cl,4				; convert to pargraphs
  6395 00001756 D3EB                    	shr	bx,cl				; by right 4
  6396                                  
  6397 00001758 891E[C61E]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6398 0000175C E9D5FE                  	jmp	Parse_command_line		; continue parsing command line
  6399                                  
  6400                                  ; 16/04/2023
  6401                                  %if 0
  6402                                  SetMSwitch:
  6403                                          ;cmp	byte [ext_msg],1
  6404                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6405                                  	jnz	short setMswitchok		; no - set it
  6406                                  	;mov	ax,1
  6407                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6408                                  	jmp	parse_line_error                ; go issue error message
  6409                                  setMswitchok:
  6410                                          ;mov	byte [ext_msg],1
  6411                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6412                                  	jmp	Parse_command_line              ; keep parsing
  6413                                  %endif
  6414                                  
  6415                                  ;ArgsDoneJ:
  6416                                  	;jmp	ArgsDone
  6417                                  
  6418                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6419                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6420                                  
  6421                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6422                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:196Dh - CODERES:0B1Dh)
  6423                                  ChkOtherArgs:
  6424                                  
  6425                                  ; We have a non-switch character here.
  6426                                  
  6427                                  	; MSDOS 6.0
  6428 0000175F 1E                      	push	ds ; ****			;
  6429 00001760 56                      	push	si ; *** 			; save place in command line
  6430 00001761 C536[831F]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6431                                  	;assume	ds:nothing			;
  6432                                  
  6433 00001765 89F2                    	mov	dx,si				; put in dx also
  6434 00001767 B8023D                  	mov	ax,3D02h
  6435                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6436 0000176A CD21                    	int	21h
  6437 0000176C 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6438 0000176E 89C3                    	mov	bx,ax
  6439 00001770 B80044                  	mov	ax,4400h
  6440                                  	;mov	ax,IOCTL shl 8
  6441 00001773 CD21                    	int	21h
  6442 00001775 F6C280                  	test	dl,80h
  6443 00001778 7506                    	jnz	short IsaDevice
  6444                                  BadSetCon:
  6445 0000177A B43E                    	mov	ah,3Eh
  6446                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6447 0000177C CD21                    	int	21h
  6448 0000177E EB4E                    	jmp	short ChkSrchSpec
  6449                                  
  6450                                  	; 15/01/2023
  6451                                  IsaDevice:
  6452                                  	; MSDOS 3.3 & MSDOS 6.0
  6453 00001780 30F6                    	xor	dh,dh
  6454 00001782 80CA03                  	or	dl,3				; Make sure has CON attributes
  6455                                  	;mov	ax,(IOCTL shl 8) or 1
  6456 00001785 B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6457 00001788 CD21                    	int	21h
  6458                                  	;
  6459                                  	; 15/01/2023
  6460 0000178A 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6461                                  	; 25/09/2018
  6462                                  	;pop	dx ; *
  6463                                  	;pop	dx ; **
  6464                                  	;
  6465                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6466                                  	
  6467 0000178C 89DA                    	mov	dx,bx				; Save new handle
  6468                                  
  6469                                  	; MSDOS 6.0
  6470 0000178E 26803E[1524]01          	cmp	byte [es:DevFlag],1
  6471 00001794 742A                    	jz	short DevErr
  6472                                  
  6473                                  	; MSDOS 3.3
  6474                                          ;pop	bx ; *				; Throw away saved SI
  6475                                          ;pop	bx ; **				; Throw away saved CX
  6476                                  
  6477                                  	; MSDOS 3.3 & MSDOS 6.0
  6478 00001796 51                      	push	cx ; **
  6479 00001797 B90300                  	mov	cx,3
  6480 0000179A 31DB                    	xor	bx,bx
  6481                                  
  6482                                  	; 15/01/2023
  6483                                  rcclloop:
  6484 0000179C B43E                    	mov	ah,3Eh
  6485                                  	;mov	ah,CLOSE ; 3Eh
  6486 0000179E CD21                    	int	21h
  6487 000017A0 43                      	inc	bx
  6488 000017A1 E2F9                    	loop	rcclloop
  6489                                  
  6490 000017A3 89D3                    	mov	bx,dx				; New device handle
  6491 000017A5 B445                    	mov	ah,45h
  6492                                  	;mov	ah,XDUP ; 45h
  6493 000017A7 CD21                    	int	21h				; Dup to 0
  6494 000017A9 B445                    	mov	ah,45h
  6495                                  	;mov	ah,XDUP
  6496 000017AB CD21                    	int	21h				; Dup to 1
  6497 000017AD B445                    	mov	ah,45h
  6498                                  	;mov	ah,XDUP
  6499 000017AF CD21                    	int	21h				; Dup to 2
  6500 000017B1 B43E                    	mov	ah,3Eh
  6501                                  	;mov	ah,CLOSE
  6502 000017B3 CD21                    	int	21h				; Close initial handle
  6503                                  	
  6504 000017B5 59                      	pop	cx ; **
  6505                                  	
  6506                                  	; MSDOS 6.0
  6507 000017B6 5E                      	pop	si ; ***			; restore position of command line
  6508 000017B7 1F                      	pop	ds ; ****			;
  6509                                  
  6510                                  ; Register the fact that we already have redirected the output
  6511                                  ; and can not do it again
  6512                                  
  6513 000017B8 26FE06[1524]            	inc	byte [es:DevFlag]		
  6514 000017BD E974FE                  	jmp	Parse_command_line		; continue parsing
  6515                                  
  6516                                  	; MSDOS 3.3
  6517                                  	;jcxz	ARGSDONEJ2
  6518                                  	;jmp	CHKARG
  6519                                  
  6520                                  	; MSDOS 6.0
  6521                                  DevErr:
  6522 000017C0 5E                      	pop	si ; ***
  6523 000017C1 1F                      	pop	ds ; ****
  6524 000017C2 BA0100                  	mov	dx,1
  6525 000017C5 E8F202                          call	RPrintParse                     ; "Too many parameters"
  6526 000017C8 E868FB                          call	crlf
  6527 000017CB E966FE                  	jmp	Parse_command_line
  6528                                  
  6529                                  ChkSrchSpec:				; Not a device, so must be directory spec
  6530                                  	; MSDOS 6.0
  6531 000017CE 26803E[1624]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  6532 000017D4 74EA                            jz	short DevErr			; yes, error
  6533                                  	
  6534 000017D6 26FE06[1624]                    inc	byte [es:PathFlag]		; mark that we have a path
  6535                                  
  6536                                  ; We have to override the passed environment. Allocate a buffer for use now.
  6537                                  ; This buffer will later be replaced by a proper environment
  6538                                  
  6539                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  6540                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  6541                                  	; 06/06/2023
  6542                                  	;mov	ax,[ss:EnvirSeg]
  6543                                  	
  6544                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6545                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19E9h
  6546                                  	;
  6547                                  	; MSDOS 6.0
  6548 000017DB E8B304                  	call	alloc_env                       ; environment buffer
  6549                                  
  6550                                  ; 06/06/2023
  6551                                  %if 0
  6552                                  	; 15/01/2023
  6553                                  	; MSDOS 5.0
  6554                                  	cmp	byte [ss:AllocedEnv],1
  6555                                  	mov	byte [ss:AllocedEnv],0
  6556                                  	jne     short env_alloced
  6557                                  	call	alloc_env
  6558                                  	mov	[ss:EnvirSeg],ax
  6559                                  %endif
  6560                                  
  6561                                  env_alloced:
  6562                                  	; MSDOS 5.0 & MSDOS 6.0
  6563 000017DE 8EC0                    	mov	es,ax
  6564                                  	;assume	es:nothing
  6565 000017E0 56                      	push	si ; **				; remember location of file
  6566 000017E1 31C9                    	xor	cx,cx				; clear cx for counting
  6567                                  	
  6568                                  	; 15/01/2023
  6569                                  countloop:
  6570 000017E3 AC                      	lodsb					; get a character
  6571 000017E4 41                      	inc	cx				; increment counter
  6572                                          ;;cmp	al,0
  6573                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  6574                                  	;jne	short countloop			; no - keep counting
  6575 000017E5 08C0                    	or	al,al	
  6576 000017E7 75FA                    	jnz	short countloop
  6577                                  	; 06/03/2023
  6578                                  	; al = 0 ; (*) 
  6579                                  
  6580                                  	;;;;mov	al,[Space]
  6581                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  6582                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6583                                  	; 16/04/2023
  6584                                  	;mov	al,20h ; ' ' 
  6585 000017E9 4E                      	dec	si				; move back one
  6586                                          ;mov	[si],al				; put a space at end of line
  6587 000017EA C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  6588                                  
  6589                                  ; We now know how long the new pathspec for command.com is. Time to
  6590                                  ; figure out how long the current COMSPEC setting is, and then to move
  6591                                  ; all the environment data up, throwing that COMSPEC setting away, and
  6592                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  6593                                  ; where the filespec exists in the environment) is updated as well.
  6594                                  
  6595                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6596                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19FEh
  6597                                  
  6598                                  	; MSDOS 6.0
  6599 000017ED 51                      	push	cx ; * 				;
  6600 000017EE B90080                          mov	cx,ENVBIG ; 32768		;
  6601 000017F1 368B3E[AF1E]                    mov	di,[ss:ComspOffset]		; get location of COMSPEC
  6602                                          ;mov	al,0                            ;
  6603                                  	; 06/06/2023
  6604                                  	; al = 0 ; (*)
  6605 000017F6 F2AE                    	repne	scasb                           ; find the end of COMSPEC
  6606 000017F8 89FE                            mov	si,di                           ;
  6607                                  comp_endenv:					;
  6608 000017FA AE                      	scasb					; end of env?
  6609 000017FB 7404                    	je	short got_endenv		; yes
  6610 000017FD F2AE                    	repne	scasb				;
  6611 000017FF EBF9                    	jmp	short comp_endenv		;
  6612                                  got_endenv:					;
  6613 00001801 89F9                    	mov	cx,di				;
  6614 00001803 29F1                    	sub	cx,si				;
  6615 00001805 368B3E[AF1E]            	mov	di,[ss:ComspOffset]		;
  6616 0000180A 83EF08                  	sub	di,ComspStrLen	; sub di,8	;
  6617 0000180D 1E                      	push	ds ; +				;
  6618 0000180E 06                      	push	es				;
  6619 0000180F 1F                      	pop	ds				;
  6620 00001810 F3A4                    	rep	movsb				;
  6621 00001812 4F                      	dec	di				; copy in new COMSPEC=
  6622 00001813 0E                      	push	cs				;
  6623 00001814 1F                      	pop	ds				;
  6624                                          ;assume ds:RESGROUP			;
  6625                                  	;mov    si,offset RESGROUP:ComspString	;
  6626 00001815 BE[B11E]                	mov	si,ComspString			; "COMSPEC=\COMMAND.COM"
  6627                                  	;mov	cx,ComspStrLen	; mov cx,8	;
  6628 00001818 B108                            mov	cl,ComspStrLen	; mov cl,8
  6629 0000181A F3A4                    	rep	movsb				;
  6630 0000181C 893E[AF1E]              	mov	[ComspOffset],di		;
  6631 00001820 1F                      	pop	ds ; + 				;
  6632                                          ;assume ds:nothing			;
  6633 00001821 59                      	pop	cx ; *				;
  6634                                  	;
  6635 00001822 5E                      	pop	si ; **				; get new comspec location back
  6636                                  
  6637                                  	;; MSDOS 3.3 COMMAND.COM
  6638                                  	;;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  6639                                  	;;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  6640                                  	;;mov	cl,4
  6641                                  	;;shr	ax,cl
  6642                                  	;;mov	dx,ds
  6643                                  	;;add	ax,dx
  6644                                  	;;mov	[ENVIRSEG],ax
  6645                                  	;;mov	es,ax
  6646                                  	;;;mov	al,' '
  6647                                  	;;mov	al,[SPACE_CHR]
  6648                                  	;;mov	[si-1],al
  6649                                  	;;pop	si ; **				; Remember location
  6650                                  	;;pop	cx ; *				; and count
  6651                                  	;;;mov	di,[ECOMLOC]
  6652                                  	;;mov	di,[COMSPOFFSET]
  6653                                  
  6654                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6655                                  	;; 15/01/2023
  6656                                  	;; MSDOS 5.0 COMMAND.COM
  6657                                  	;pop	si ; **
  6658                                  	;;mov	di,14
  6659                                  	;mov	di,ECOMSPEC ; mov di,0Eh
  6660                                  
  6661                                  ComtrLoop:
  6662                                  	; MSDOS 3.3 & MSDOS 6.0
  6663 00001823 AC                      	lodsb
  6664 00001824 49                      	dec	cx
  6665                                  	;;;;cmp	al,' '
  6666                                  	;;;cmp	al,[space_chr]
  6667                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  6668                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6669                                  	; 16/04/2023
  6670 00001825 3C20                    	cmp	al,20h ; ' ' ; space_chr
  6671 00001827 7405                    	je	short SetComsr
  6672                                  	; MSDOS 3.3
  6673                                  	;cmp	al,9
  6674                                  	;je	short SetComsr
  6675                                  	; MSDOS 3.3 & MSDOS 6.0
  6676 00001829 AA                      	stosb
  6677 0000182A E302                    	jcxz	SetComsr
  6678 0000182C EBF5                    	jmp	short ComtrLoop
  6679                                  
  6680                                  SetComsr:
  6681                                  	; 15/01/2023
  6682                                  	; MSDOS 6.0
  6683 0000182E 51                      	push	cx ; **
  6684 0000182F 0E                      	push	cs				; Get local segment
  6685 00001830 1F                      	pop	ds				;
  6686                                  	;assume	ds:ResGroup			;
  6687 00001831 1E                      	push	ds ; *
  6688                                  	;mov	si,offset ResGroup:ComSpect
  6689 00001832 BE[601E]                	mov	si,COMSPECT ; "\COMMAND.COM"
  6690 00001835 B90E00                  	mov	cx,14
  6691 00001838 268A45FF                	mov	al,[es:di-1]
  6692 0000183C 3A06[F103]              	cmp	al,[RDirChar]
  6693 00001840 7502                    	jne	short iNotRoot
  6694 00001842 46                      	inc	si				; Don't make a double /
  6695 00001843 49                      	dec	cx
  6696                                  	
  6697                                  	; MSDOS 3.3
  6698                                  	;push	si
  6699                                  	;push	cx
  6700                                  	;push	ds
  6701                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  6702                                  	;mov	cx,14
  6703                                  	;mov	al,[es:di-1]
  6704                                  	;call	PATHCHRCMPR
  6705                                  	;jnz	short INOTROOT			
  6706                                  	;inc	si				; Don't make a double /
  6707                                  	;dec	cx
  6708                                  
  6709                                  iNotRoot:
  6710                                  	; MSDOS 3.3 & MSDOS 6.0
  6711 00001844 F3A4                    	rep	movsb
  6712                                  
  6713                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  6714                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6715                                  	; MSDOS 6.0 
  6716 00001846 8B16[AF1E]              	mov	dx,[ComspOffset] ; [COMSPOFFSET]
  6717                                  	; 15/01/2023
  6718                                  	;;mov	dx,14
  6719                                  	;mov	dx,ECOMSPEC ; mov dx,0Eh ; MSDOS 5.0 COMMAND.COM
  6720                                  
  6721 0000184A 06                      	push	es
  6722 0000184B 1F                      	pop	ds
  6723                                  	;;mov	ax,OPEN shl 8
  6724                                  	;mov	ax,OPEN*256 ; 3D00h
  6725 0000184C B8003D                  	mov	ax,3D00h ; 15/01/2023
  6726 0000184F CD21                    	int	21h				; Open COMMAND.COM
  6727 00001851 1F                      	pop	ds ; *
  6728 00001852 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  6729 00001854 89C3                    	mov	bx,ax				; Handle
  6730 00001856 B43E                    	mov	ah,3Eh ; 15/01/2023
  6731                                  	;mov	ah,CLOSE ; 3Eh
  6732 00001858 CD21                    	int	21h				; Close COMMAND.COM
  6733                                  SetComsrRet:
  6734                                  	; 15/01/2023
  6735 0000185A 59                      	pop	cx ; **
  6736 0000185B 5E                      	pop	si ; ***
  6737                                  
  6738                                  	; MSDOS 6.0
  6739 0000185C 1F                      	pop	ds ; ****			;
  6740                                  	;assume	ds:ResGroup			;
  6741                                  	;
  6742 0000185D 0E                      	push	cs				; Make sure local ES is
  6743 0000185E 07                      	pop	es				;  restored
  6744 0000185F E9D2FD                  	jmp	Parse_command_line		; continue parsing command line
  6745                                  
  6746                                  	; MSDOS 3.3
  6747                                  ;ARGSDONEJ2:
  6748                                  	;jcxz	ARGSDONE
  6749                                  	;jmp	CHKARG
  6750                                  
  6751                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6752                                  SetComsrBad:
  6753                                  	; MSDOS 3.3 & MSDOS 6.0
  6754                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  6755 00001862 BA[1E20]                	mov	dx,BADCOMLKMES
  6756                                  
  6757                                  ;	Note: we're about to make a near call to TriageError, which
  6758                                  ;	lives in a different segment and group. Some linkers will
  6759                                  ;	generate a warning like "Possible fix-up overflow". We're
  6760                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  6761                                  ;	we're still all together.
  6762                                  
  6763                                  	; 16/01/2023
  6764                                  	;TRIAGEERROR equ TRANSTART+TriageError
  6765                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  6766                                  
  6767                                  	; 06/06/2023
  6768                                  	TRIAGEERROR equ TRANSTART+TriageError
  6769                                  	;(MSDOS 6.22 COMMAND.COM, 26E0h+333Ch)
  6770                                  
  6771                                  	;;call	50B2h ; MSDOS 5.0 COMMAND.COM
  6772                                  	;call	5A1Ch ; MSDOS 6.22 COMMAND.COM
  6773 00001865 E8(1A57)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  6774                                  				; in original MSDOS 3.3 COMMAND.COM
  6775                                  
  6776                                  			; TriageError procedure is at offset 50B2h
  6777                                  			; in original MSDOS 5.0 COMMAND.COM	
  6778 00001868 83F841                  	cmp	ax,65
  6779 0000186B 7503                    	jne	short doprt
  6780                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  6781 0000186D BA[4720]                	mov	dx,BADCOMACCMSG
  6782                                  doprt:
  6783 00001870 E8C3FA                  	call	RPrint
  6784                                  	;mov	si,offset ResGroup:ComSpect
  6785 00001873 BE[601E]                	mov     si,COMSPECT ; "\COMMAND.COM"
  6786                                  	;;mov	di,[ECOMLOC]
  6787                                  	; 06/06/2023
  6788 00001876 8B3E[AF1E]              	mov	di,[ComspOffset] ; MSDOS 6.22 COMMAND.COM
  6789                                  	; 16/01/2023
  6790                                  	;mov	di,ECOMSPEC ; mov di,0Eh ; MSDOS 5.0 COMMAND.COM
  6791 0000187A B90E00                  	mov	cx,14
  6792 0000187D F3A4                    	rep	movsb				; get my default back
  6793                                  
  6794 0000187F EBD9                    	jmp	short SetComsrRet
  6795                                  
  6796                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6797                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  6798                                  
  6799                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6800                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1A99h (CODERES:0C49h)
  6801                                  ArgsDone:
  6802                                  	; MSDOS 6.0
  6803 00001881 8E06[DC03]              	mov	es,[EnvirSeg]			; get environment back
  6804                                  	;assume	es:nothing			;
  6805                                  
  6806                                  	; MSDOS 3.3 & MSDOS 6.0
  6807 00001885 803E[4002]00                    cmp	byte [PermCom],0
  6808 0000188A 742E                            jz	short ComReturns
  6809                                  
  6810 0000188C 06                      	push	es				; Save environment pointer
  6811 0000188D B450                    	mov	ah,50h
  6812                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  6813 0000188F 8CDB                    	mov	bx,ds
  6814 00001891 8EC3                    	mov	es,bx
  6815 00001893 CD21                    	int	21h				; current process is me
  6816 00001895 BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  6817                                  	;;mov	ax,offset RESGROUP:LODCOM
  6818                                  	;mov	ax,LODCOM
  6819                                  	; 16/01/2023
  6820 00001898 B8[7E00]                	mov	ax,LodCom_Trap
  6821 0000189B AB                              stosw
  6822 0000189C 8CD8                            mov	ax,ds
  6823 0000189E AB                              stosw
  6824                                  	;;mov	ax,offset RESGROUP:CONTC
  6825                                  	;mov	ax,CONTC
  6826                                  	; 16/01/2023
  6827 0000189F B8[4A00]                	mov	ax,Ctrlc_Trap
  6828 000018A2 AB                              stosw
  6829 000018A3 8CD8                            mov	ax,ds
  6830 000018A5 AB                              stosw
  6831                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  6832                                  	;mov	ax,CRITERR
  6833                                  	; 16/01/2023
  6834 000018A6 B8[5500]                	mov	ax,CritErr_Trap
  6835 000018A9 AB                      	stosw
  6836 000018AA 8CD8                    	mov     ax,ds
  6837 000018AC AB                      	stosw
  6838                                  	;;mov	word ptr ds:16h,ds
  6839                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  6840 000018AD 8C1E1600                	mov	[PDB.PARENT_PID],ds
  6841                                          ;;mov	dx,offset RESGROUP:Int_2e
  6842                                  	;mov	dx,Int_2e
  6843                                          ; 16/01/2023
  6844 000018B1 BA[3F00]                	mov	dx,Int2e_Trap
  6845 000018B4 B82E25                  	mov	ax,252Eh
  6846                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  6847                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  6848 000018B7 CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  6849                                  			; AL = interrupt number
  6850                                  			; DS:DX = new vector to be used for specified interrupt
  6851 000018B9 07                              pop	es				; Remember environment
  6852                                  	
  6853                                  ComReturns:
  6854                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  6855 000018BA A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  6856                                  	; 16/01/2023
  6857 000018BD A3[DC01]                	mov	[Parent],ax			; Save parent
  6858                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  6859 000018C0 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  6860                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  6861 000018C4 A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  6862 000018C7 A3[3D02]                        mov	[Io_Save],ax		; Get the default stdin and out
  6863 000018CA 8C1E[E003]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  6864 000018CE 8C1E[E403]                      mov	[Com_Fcb1+2],ds
  6865 000018D2 8C1E[E803]              	mov	[Com_Fcb2+2],ds
  6866                                          ;mov	di,offset ResGroup:ComSpec
  6867 000018D6 BF[E901]                        mov	di,ComSpec
  6868                                  
  6869                                  	;;mov	si,[ECOMLOC]
  6870                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6871 000018D9 8B36[AF1E]              	mov	si,[ComspOffset]
  6872                                  	; 16/01/2023 - MSDOS 5.0 COMMAND.COM
  6873                                  	;mov	si,ECOMSPEC ; mov si,0Eh
  6874                                  
  6875 000018DD 803E[8C1E]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  6876                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  6877                                  	
  6878 000018E2 8CD8                    	mov	ax,ds				; Xchg es,ds
  6879 000018E4 06                      	push	es
  6880 000018E5 1F                      	pop	ds
  6881 000018E6 8EC0                    	mov	es,ax
  6882                                  
  6883                                  	; 06/06/2023
  6884 000018E8 7517                    	jne	short CopyComsp ; MSDOS 6.0
  6885                                  	; 16/01/2023	
  6886                                  	;je	short CopyComsp ; MSDOS 5.0
  6887                                  	;;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  6888                                  
  6889 000018EA 0E                              push	cs
  6890 000018EB 1F                              pop	ds
  6891                                  
  6892                                          ;mov	si,offset ResGroup:ComspString
  6893 000018EC BE[B11E]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6894 000018EF 06                      	push	es
  6895 000018F0 57                      	push	di
  6896 000018F1 E8D701                  	call	IfindE
  6897 000018F4 89FE                    	mov	si,di
  6898 000018F6 06                      	push	es
  6899 000018F7 1F                      	pop	ds
  6900 000018F8 5F                      	pop	di
  6901 000018F9 07                      	pop	es
  6902 000018FA 7305                            jnc	short CopyComsp
  6903                                  
  6904                                  	; 06/06/2023
  6905                                  	; MSDOS 6.0
  6906                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1B04h
  6907                                  ComSpecNofnd:
  6908                                  	;;mov	si,offset ResGroup:ComspString
  6909                                  	;mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6910                                  	;add	si,ComspStrLen ; add si,8
  6911 000018FC BE[B91E]                	mov	si,ComspString+ComspStrLen
  6912                                  	
  6913                                  	;; 21/01/2023
  6914                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  6915                                  	;;mov	si,0Eh
  6916                                  	;mov	si,ECOMSPEC
  6917                                  	
  6918 000018FF 0E                      	push	cs
  6919 00001900 1F                      	pop	ds	
  6920                                  
  6921                                  	; 21/01/2023
  6922                                  ;COMSPECNOFND:
  6923                                  	; MSDOS 3.3
  6924                                          ;;mov	si,[es:ECOMLOC]
  6925                                          ;mov	si,[es:COMSPOFFSET]
  6926                                  	;;add	si,offset RESGROUP:PATHSTRING
  6927                                          ;add	si,PATHSTRING ; "PATH="
  6928                                  	;push	cs
  6929                                  	;pop	ds
  6930                                  
  6931                                  CopyComsp:
  6932                                  	; 21/01/2023
  6933                                  ;COPYCOMSP:
  6934                                  	; MSDOS 3.3 & MSDOS 6.0
  6935                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  6936                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  6937 00001901 26893E[C801]            	mov	[es:PutBackComSpec],di
  6938 00001906 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  6939 0000190A 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  6940                                  	;;add	es:PutBackComSpec.SubstPtr,2
  6941                                  	;add	word [es:PUTBACKSUBSTPTR],2
  6942 0000190C 268306[C801]02          	add	word [es:PutBackComSpec],2
  6943                                  CopyComspLoop:
  6944 00001912 AC                      	lodsb
  6945 00001913 AA                      	stosb
  6946 00001914 08C0                    	or	al,al
  6947 00001916 75FA                    	jnz	short CopyComspLoop
  6948                                  
  6949 00001918 26893E[2902]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  6950 0000191D 26FF0E[2902]            	dec	word [es:ComSpec_End]
  6951 00001922 268A26[3202]            	mov	ah,[es:ComDrv]
  6952 00001927 80C440                  	add	ah,'A'-1 ; 40h
  6953 0000192A 268826[CD01]            	mov	[es:PutBackDrv],ah		; save drive letter
  6954                                  
  6955                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  6956                                  	
  6957                                  	; MSDOS 6.0
  6958 0000192F E81002                  	call	setup_for_messages		; set up parse and extended error messages
  6959                                  
  6960                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  6961                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  6962                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  6963                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  6964                                  ; the data otherwise it is just the data.
  6965                                   
  6966 00001932 E8AF02                  	call	Setup_res_end			; put resident size in ResSize
  6967                                  
  6968 00001935 0E                      	push	cs
  6969 00001936 1F                      	pop	ds
  6970                                  	;assume	ds:RESGROUP
  6971                                  
  6972                                  ;Public EnvMaximum
  6973                                          ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6974                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  6975                                          ; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6976                                  		; MSDOS 6.22 COMMAND.COM - RESGROUP:1B53h
  6977                                  
  6978                                  	; 21/01/2023
  6979                                  	; MSDOS 6.0
  6980                                  	;;mov	si,offset RESGROUP:TranStart
  6981                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  6982                                  	; 06/06/2023
  6983                                  	;;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM
  6984                                  	;mov	si,TRANSTART
  6985                                  	;add	si,100h
  6986                                  	; 23/04/2023
  6987 00001937 BE5026                  	mov	si,TRANSTART+100h
  6988                                  
  6989                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  6990                                  	;;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  6991                                  	; 06/06/2023
  6992                                  	;;mov	cx,9D53h	; MSDOS 6.22 COMMAND.COM	
  6993 0000193A B9[4198]                	mov	cx,TRANDATAEND-100h
  6994                                  
  6995 0000193D FC                      	cld
  6996 0000193E D1E9                    	shr	cx,1
  6997 00001940 31D2                    	xor	dx,dx
  6998                                  Ichksum:
  6999 00001942 AD                      	lodsw
  7000 00001943 01C2                    	add	dx,ax
  7001 00001945 83D200                  	adc	dx,0
  7002 00001948 E2F8                    	loop	Ichksum
  7003                                  
  7004 0000194A 8916[3502]                      mov	[Sum],dx			; store checksum
  7005                                  
  7006 0000194E 803E[7F1E]00                    cmp     byte [PRDATTM],0
  7007 00001953 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  7008                                  	
  7009                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  7010                                  
  7011                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  7012                                  	; 21/01/2023
  7013                                  	;mov	bx,4
  7014 00001955 BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  7015 00001958 B448                    	mov	ah,48h
  7016                                  	;mov	ah,ALLOC                        ;
  7017 0000195A CD21                            int	21h                             ;
  7018 0000195C 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  7019 0000195E A3[E701]                        mov	[Batch],ax			; save batch segment
  7020                                  
  7021                                  NoBatchSeg:
  7022                                  	; 21/01/2023
  7023                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7024 00001961 8B1E[DC03]              	mov	bx,[EnvirSeg]			; get old environment segment
  7025 00001965 891E[CA1E]              	mov	[OldEnv],bx			; save it
  7026 00001969 C706[CC1E]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7027 0000196F 8EDB                    	mov	ds,bx
  7028                                  	;assume	ds:nothing
  7029                                  	
  7030 00001971 31F6                    	xor	si,si
  7031 00001973 89F7                    	mov	di,si
  7032                                  
  7033                                  ; This is the maximum allowed size for the environment
  7034                                  
  7035                                  	; 21/01/2023
  7036                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7037                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7038                                  	;;mov	[ss:EnvMax],bx
  7039                                  	;shl	bx,1
  7040                                  	;shl	bx,1
  7041                                  	;shl	bx,1
  7042                                  	;shl	bx,1
  7043 00001975 BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7044 00001978 36891E[C81E]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7045 0000197D 4B                      	dec	bx				; dec by one to leave room for double 0
  7046 0000197E 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7047                                  						; no environment size error.
  7048                                  ;public NxtStr
  7049                                  NxtStr:
  7050 00001980 E81E01                  	call	GetStrLen			; get the size of the current env string
  7051                                  
  7052                                  ;Bugbug: Can use ss here to address UsedEnv
  7053                                  
  7054 00001983 1E                      	push	ds                              ; get addressability to environment
  7055 00001984 0E                              push	cs                              ;                       counter
  7056 00001985 1F                              pop	ds                              ;
  7057                                  	;assume	ds:ResGroup
  7058 00001986 010E[CC1E]                      add	[UsedEnv],cx			; add the string length to env size
  7059 0000198A 1F                      	pop	ds                              ;
  7060                                  	;assume	ds:nothing
  7061                                  	
  7062 0000198B 83F901                  	cmp	cx,1				; end of environment was encountered.
  7063 0000198E 7405                    	je	short EnvExit
  7064 00001990 29CB                    	sub	bx,cx
  7065                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7066                                  	; 21/01/2023
  7067 00001992 73EC                    	jae	short NxtStr
  7068 00001994 42                      	inc	dx				; out of env space msg must be displayed
  7069                                  	;jmp	short EnvExit
  7070                                  
  7071                                  ;OkCpyStr:
  7072                                  	;jmp	short NxtStr
  7073                                  
  7074                                  EnvExit:
  7075 00001995 0E                      	push	cs
  7076 00001996 1F                      	pop	ds
  7077                                  	;assume	ds:ResGroup
  7078 00001997 09D2                    	or	dx,dx				; dx will be non-zero if error
  7079 00001999 7406                    	jz	short EnvNoErr
  7080                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7081 0000199B BA[A41F]                	mov	dx,OUTENVMSG
  7082 0000199E E895F9                  	call 	RPrint
  7083                                  EnvNoErr:
  7084 000019A1 A1[C61E]                	mov	ax,[EnvSiz]			; env size previously set
  7085 000019A4 B104                    	mov	cl,4
  7086 000019A6 D3E0                    	shl	ax,cl				; get size in bytes
  7087 000019A8 3B06[CC1E]              	cmp	ax,[UsedEnv]			; is it a new env?
  7088 000019AC 7706                    	ja	short st_envsize		; yes, store the size
  7089 000019AE A1[CC1E]                	mov	ax,[UsedEnv]
  7090 000019B1 83C00F                  	add	ax,15				; round up
  7091                                  st_envsize:	
  7092 000019B4 D3E8                    	shr	ax,cl
  7093 000019B6 A3[C61E]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7094                                  
  7095                                  ;if MSVER
  7096                                  	;cmp	SingleCom,0
  7097                                  	;jnz	nophead 			; don't print header if SingleCom
  7098                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7099                                  	;call	RPrint
  7100                                  ;nophead:
  7101                                  ;endif
  7102                                  	; 21/01/2023
  7103                                  
  7104                                  	; MSDOS 3.3 & 6.0
  7105 000019B9 833E[E701]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7106 000019BE 7503                    	jnz     short DoDate		; yes - go initialize it
  7107 000019C0 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7108                                  
  7109                                  DoDate:
  7110                                  
  7111                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7112                                  
  7113 000019C3 A1[E701]                	mov	ax,[Batch]		; get batch segment
  7114 000019C6 C606[3B02]03            	mov	byte [EchoFlag],3	; set batch echo
  7115 000019CB C706[4C02]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7116 000019D1 8EC0                    	mov	es,ax
  7117                                  
  7118                                  ; initialize the segment
  7119                                  
  7120 000019D3 31FF                    	xor	di,di
  7121                                  	;;mov	al,0
  7122                                  	;mov	al,BATCHTYPE ; 0
  7123                                  	; 06/06/2023
  7124 000019D5 31C0                    	xor	ax,ax
  7125 000019D7 AA                      	stosb
  7126                                  	;mov	al,1			; initialize echo for batch exit
  7127                                  	;inc	al
  7128                                  	; 22/07/2024
  7129 000019D8 40                      	inc	ax
  7130 000019D9 AA                      	stosb
  7131                                  
  7132                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7133                                  
  7134                                  	;xor	ax,ax			; initialize to zero
  7135                                  	; 06/06/2023
  7136                                  	;dec	al ; ax = 0
  7137                                  	; 22/07/2024
  7138 000019DA 48                      	dec	ax
  7139                                  
  7140                                  	; 21/01/2023
  7141 000019DB AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7142                                  
  7143 000019DC AB                      	stosw				; batch segment of last job - batlast
  7144 000019DD AB                      	stosw				; segment for FOR
  7145 000019DE AA                      	stosb				; FOR flag
  7146 000019DF AB                      	stosw				; position in file - batseek
  7147 000019E0 AB                      	stosw
  7148                                  
  7149                                  ; clean out the parameters
  7150                                  
  7151                                  	;mov	ax,-1			; initialize to no parameters
  7152                                  	; 06/06/2023
  7153 000019E1 48                      	dec	ax ; ax = -1
  7154                                  
  7155 000019E2 B90A00                  	mov	cx,10
  7156 000019E5 F3AB                    	rep	stosw
  7157                                  
  7158                                  ; decide whether we should grab the default drive
  7159                                  
  7160 000019E7 803E[6E1E]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7161 000019EC 7509                    	jne	short NoAutSet
  7162 000019EE B419                    	mov	ah,19h	; 21/01/2023
  7163                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7164 000019F0 CD21                    	int	21h
  7165                                  	;;add	al,'A'
  7166                                  	;add	al,[letter_A] ; Ucasea
  7167                                  	;add	al,[ucasea] ; 21/01/2023
  7168                                  	; 21/01/2023
  7169 000019F2 0441                    	add	al,'A'
  7170 000019F4 A2[6E1E]                	mov	[AUTOBAT],al
  7171                                  	; 22/07/2024
  7172                                  	; 21/01/2023
  7173                                  	; 06/06/2023
  7174                                  	;mov	[KAUTOBAT],al
  7175                                  NoAutSet:
  7176                                  
  7177                                  ; copy in the batch file name (including nul)
  7178                                  
  7179                                  	;mov	si,offset ResGroup:AutoBat
  7180 000019F7 BE[6E1E]                	mov	si,AUTOBAT
  7181 000019FA B90800                  	mov	cx,8
  7182 000019FD F3A5                    	rep	movsw
  7183                                  	; 23/04/2023
  7184 000019FF A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7185                                  
  7186                                  	;mov	dx,offset ResGroup:AutoBat
  7187 00001A00 BA[6E1E]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7188                                  
  7189                                  	;;mov	ax,OPEN shl 8
  7190 00001A03 B8003D                  	mov	ax,3D00h ; 21/01/2023
  7191                                  	;mov	ax,OPEN*256 ; 3D00h	; open for read
  7192 00001A06 CD21                    	int	21h			; see if autoexec.bat exists
  7193 00001A08 7208                    	jc	short noabat
  7194 00001A0A 89C3                    	mov	bx,ax
  7195 00001A0C B43E                    	mov	ah,3Eh ; 21/01/2023
  7196                                  	;mov	ah,CLOSE  ; 3Eh
  7197 00001A0E CD21                    	int	21h
  7198                                  	;jmp	Drv0			; go process autoexec
  7199                                  	; 22/07/2024
  7200 00001A10 EB51                    	jmp	short Drv0
  7201                                  
  7202                                  noabat:
  7203 00001A12 50                      	push	ax
  7204 00001A13 E89400                  	call	Setup_Seg
  7205 00001A16 A3[8A1E]                	mov	[triage_add+2],ax
  7206 00001A19 58                      	pop	ax
  7207 00001A1A FF1E[881E]              	call	far [triage_add]	; get extended error
  7208 00001A1E 83F841                  	cmp	ax,65			; network access denied?
  7209                                  	;jne	short OPENERR		; no - go deallocate batch
  7210                                  	; 21/01/2023
  7211                                  	;;je	short AccDenErr
  7212                                  	; 22/07/2024
  7213 00001A21 7506                    	jne	short OpenErr 
  7214                                  	; 06/06/2023
  7215                                  	;je	short AccDenErr
  7216                                  
  7217                                  	; 21/01/2023
  7218                                  ;_ACCDENERROR:					; yes - put out message
  7219                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7220                                  ;	mov	dx,ACCDENERR
  7221                                  ;	call	RPRINT
  7222                                  
  7223                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7224                                  
  7225                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7226                                  
  7227                                  ; 22/07/2024
  7228                                  ; 06/06/2023
  7229                                  ; 21/01/2023
  7230                                  %if 0
  7231                                  
  7232                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7233                                  ; by Ellen to check only when in Korea. The country information
  7234                                  ; returned will overlay the old parse data area, but we don't care
  7235                                  ; since we won't need the parse information or country information.
  7236                                  ; We only care about the country code returned in BX.
  7237                                  
  7238                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7239                                  	; 06/06/2023
  7240                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1C5Eh
  7241                                  
  7242                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7243                                  	mov	dx,INTERNAT_INFO
  7244                                  	mov	ax,3800h
  7245                                  	;mov	ax,INTERNATIONAL<<8
  7246                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7247                                  	int	21h				;
  7248                                  	jc	short NoKabat 			; error - don't bother with it
  7249                                  	cmp	bx,52h
  7250                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7251                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7252                                  
  7253                                  	;mov	di,BatFile			; 3/3/kk
  7254                                  	mov	di,20h
  7255                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7256                                  	mov	si,KAUTOBAT
  7257                                  	mov	cx,8				; auto execution for the 3/3/kk
  7258                                  	rep	movsw				; non-english country	3/3/kk
  7259                                  	movsb					; move in carraige return to terminate string
  7260                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7261                                  	mov	dx,KAUTOBAT
  7262                                  	mov	ax,3D00h
  7263                                  	;mov	ax,OPEN<<8
  7264                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7265                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7266                                  	jc	short NoKabat 			; 3/3/kk
  7267                                  	mov	bx,ax				; 3/3/kk
  7268                                  	mov	ah,3Eh
  7269                                  	;mov	ah,CLOSE			; 3/3/kk
  7270                                  	int	21h				; 3/3/kk
  7271                                  	jmp	short Drv0			; 3/3/kk
  7272                                  
  7273                                  NoKabat:					; 3/3/kk
  7274                                  	call	far [triage_add]		; get extended error
  7275                                  	cmp	ax,65				; network access denied?
  7276                                  	jnz	short OpenErr 			; no - go deallocate batch
  7277                                  
  7278                                  	; 22/07/2024
  7279                                  %endif	; 06/06/2023 - Retro DOS 4.2 COMMAND.COM
  7280                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7281                                  
  7282                                  AccDenErr:					; yes - put out message
  7283                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7284 00001A23 BA[7606]                	mov	dx,ACCDEN
  7285 00001A26 E80DF9                  	call	RPrint
  7286                                  OpenErr:
  7287                                  ;OPENERR:
  7288 00001A29 8E06[E701]              	mov	es,[Batch]		; not found--turn off batch job
  7289 00001A2D B449                    	mov	ah,49h
  7290                                  	;mov	ah,DEALLOC ; 49h
  7291 00001A2F CD21                    	int	21h
  7292 00001A31 C706[E701]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7293 00001A37 C606[3B02]01            	mov	byte [EchoFlag],1
  7294 00001A3C C706[4C02]0000          	mov	word [Nest],0		; indicate no batch in progress
  7295                                  ;DoDttm:
  7296                                  	;mov	ax,offset TranGroup:Datinit
  7297 00001A42 B8[B133]                	mov	ax,DATINIT
  7298 00001A45 A3[801E]                	mov	[INITADD],ax
  7299                                  
  7300                                  	; MSDOS 6.0
  7301                                  ;;M004;;mov	ax,TrnSeg	
  7302                                  ;
  7303                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7304                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7305                                  ; M004; We use TranStart to get the start of the transient segment.
  7306                                  
  7307                                  	; 21/01/2023
  7308                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7309                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7310                                  	; 06/06/2023
  7311                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7312                                  	;
  7313                                  	;mov	ax,TRANSTART
  7314                                  	;mov	cl,4				; M004
  7315                                  	;shr	ax,cl				; get relative seg ; M004
  7316                                  	; 06/06/2023
  7317 00001A48 B85502                  	mov	ax,TRANSTART>>4	
  7318                                  
  7319 00001A4B 8CC9                    	mov	cx,cs
  7320 00001A4D 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7321                                  
  7322                                  	; 21/01/2023
  7323                                  	; MSDOS 3.3
  7324                                  	; 25/09/2018
  7325                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7326                                  
  7327                                  	; MSDOS 3.3 & MSDOS 6.0
  7328 00001A4F A3[821E]                	mov	[INITADD+2],ax
  7329                                  	;call	dword ptr InitAdd
  7330 00001A52 FF1E[801E]              	call	far [INITADD]
  7331                                  
  7332                                  NoDttm:
  7333                                  	; MSDOS 6.0
  7334                                  	; 21/01/2023
  7335                                  ;Copyright:
  7336                                  	;public	Copyright
  7337                                  ;	Bugbug:	remove Copyright label.
  7338                                  
  7339                                  ;if IBMVER
  7340 00001A56 833E[4302]00            	cmp	word [SingleCom],0
  7341 00001A5B 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7342                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7343 00001A5D BA[BF1F]                	mov	dx,COPYRIGHTMSG
  7344 00001A60 E8D3F8                  	call	RPrint
  7345                                  ;endif
  7346                                  	; 21/01/2023
  7347                                  	; MSDOS 3.3
  7348                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7349                                  	;jnz	short DRV0
  7350                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7351                                  	;call	RPRINT
  7352                                  ;DRV0:
  7353                                  	; MSDOS 3.3
  7354                                  	;mov	byte [INITFLAG],0
  7355                                  	;jmp	ENDINIT
  7356                                  
  7357                                  	; 21/01/2023
  7358                                  	; MSDOS 6.0
  7359                                  Drv0:						; Reset APPEND state
  7360 00001A63 1E                      	push	ds				; save data segment
  7361 00001A64 0E                      	push	cs				; Get local segment into DS
  7362 00001A65 1F                      	pop	ds				;
  7363 00001A66 B807B7                  	mov	ax,0B707h ; 21/01/2023
  7364                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7365 00001A69 8B1E[6002]              	mov	bx,[Append_State] 		;  back to the original state
  7366 00001A6D CD2F                    	int	2Fh				;
  7367 00001A6F 1F                      	pop	ds				; get data segment back
  7368                                  
  7369                                  ;Check FirstCom set previously to see if this is the first instance of
  7370                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7371                                  ;jump table from the previous stub to the current stub.
  7372                                  
  7373 00001A70 803E[1424]01            	cmp	byte [FirstCom],1		; first command.com?
  7374 00001A75 7424                    	jz	short move_code			; yes, move it
  7375                                  
  7376 00001A77 06                      	push	es
  7377 00001A78 1E                      	push	ds
  7378                                  
  7379 00001A79 1E                      	push	ds
  7380 00001A7A 07                      	pop	es
  7381                                  	;mov	di,offset DATARES:Int2f_Entry
  7382 00001A7B BF[0400]                	mov	di,Int2f_Entry	
  7383                                  
  7384                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7385                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7386                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7387 00001A7E 26C536[1024]            	lds	si,[es:ResJmpTable]
  7388                                  
  7389                                  	;mov	cx,11
  7390                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7391                                  	;shl	cx,1
  7392                                  	;shl	cx,1				; size of table in bytes
  7393                                  	; 21/01/2023
  7394 00001A83 B92C00                  	mov	cx,44				; size of table in bytes
  7395                                  
  7396 00001A86 FC                      	cld
  7397 00001A87 F3A4                    	rep	movsb				; copy the jump table
  7398                                  
  7399                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7400                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7401                                  
  7402 00001A89 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7403 00001A8F 7206                    	jb	short res_low			; no, dont set flag
  7404                                  
  7405 00001A91 26C606[3400]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7406                                  res_low:
  7407 00001A97 1F                      	pop	ds
  7408 00001A98 07                      	pop	es
  7409 00001A99 EB03                    	jmp	short finish_init
  7410                                  
  7411                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7412                                  ;or to overlay the messages in the data segment if the user has not used the
  7413                                  ;/msg switch.
  7414                                  
  7415                                  move_code:
  7416 00001A9B E88D01                  	call	Move_res_code			; move the code
  7417                                  
  7418                                  finish_init:
  7419                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7420 00001A9E E916E8                  	jmp	EndInit
  7421                                  
  7422                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7423                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  7424                                  
  7425                                  GetStrLen:
  7426                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  7427                                  ;	Length is returned in CX
  7428                                  
  7429                                  	; MSDOS 3.3 & MSDOS 6.0
  7430 00001AA1 31C9                    	xor	cx,cx
  7431                                  NxtChar:
  7432 00001AA3 AC                      	lodsb
  7433 00001AA4 41                      	inc	cx
  7434 00001AA5 08C0                    	or	al,al
  7435 00001AA7 75FA                    	jnz	short NxtChar
  7436 00001AA9 C3                      	retn
  7437                                  
  7438                                  	; 29/01/2023
  7439                                  Setup_Seg:
  7440                                  
  7441                                  ; If the transient has been loaded in TranSeg, then we need to use that
  7442                                  ; segment for calls to routines in the transient area. Otherwise, the current
  7443                                  ; code segment is used
  7444                                  ; Segment returned in AX.
  7445                                  
  7446                                  	; MSDOS 3.3 & MSDOS 6.0
  7447 00001AAA A1[2D02]                	mov	ax,[TrnSeg]
  7448 00001AAD 803E[2F02]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  7449 00001AB2 7405                    	je	short setup_end
  7450                                  
  7451                                  ;06/06/2023
  7452                                  %if 0
  7453                                  	push	bx
  7454                                  	mov	bx,cs
  7455                                  	;mov	ax,offset ResGroup:TranStart
  7456                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7457                                  	; 06/06/2023
  7458                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7459                                  	;mov	ax,TRANSTART
  7460                                  	;shr	ax,1
  7461                                  	;shr	ax,1
  7462                                  	;shr	ax,1
  7463                                  	;shr	ax,1
  7464                                  	; 29/01/2023
  7465                                  	mov	ax,TRANSTART>>4
  7466                                  	add	ax,bx
  7467                                  	pop	bx
  7468                                  %endif
  7469                                  	; 06/06/2023
  7470 00001AB4 8CC8                    	mov	ax,cs
  7471 00001AB6 055502                  	add	ax,TRANSTART>>4
  7472                                  
  7473                                  setup_end:
  7474 00001AB9 C3                      	retn
  7475                                  
  7476                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7477                                  ;RPRINT:
  7478                                  	; MSDOS 3.3
  7479                                  	;push	ax
  7480                                  	;call	SETUP_SEG
  7481                                  	;mov	[PRINTADD+2], ax
  7482                                  	;;call	dword ptr PRINTADD
  7483                                  	;call	far [PRINTADD]
  7484                                  	;pop	ax
  7485                                  	;retn
  7486                                  
  7487                                  	; 29/01/2023
  7488                                  	; MSDOS 6.0
  7489                                  ;***	RPrintParse - display parse error message
  7490                                  ;
  7491                                  ;	ENTRY	DX = parse error #
  7492                                  ;
  7493                                  ;	EXIT	nothing
  7494                                  ;
  7495                                  ;	USED	flags
  7496                                  ;
  7497                                  ;	EFFECTS
  7498                                  ;	  Message is displayed on stdout.
  7499                                  
  7500                                  RPrintParse:	;proc
  7501                                  	;assume	ds:ResGroup,ss:ResGroup
  7502                                  
  7503 00001ABA 52                      	push	dx				; preserve DX
  7504 00001ABB 87DA                    	xchg	bx,dx				; bx = parse error #
  7505                                  						; dx = saved BX
  7506 00001ABD 4B                      	dec	bx				; bx = parse error index, from 0
  7507 00001ABE D1E3                    	shl	bx,1				; bx = offset in word table
  7508                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  7509 00001AC0 8B9F[B809]              	mov	bx,[bx+PARSMSGPTRS]
  7510 00001AC4 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  7511                                  						; bx = restored
  7512 00001AC6 E86DF8                  	call	RPrint				; print the message
  7513 00001AC9 5A                      	pop	dx				; restore DX
  7514 00001ACA C3                      	retn
  7515                                  
  7516                                  ;RPrintParse	endp
  7517                                  
  7518                                  	; 29/01/2023
  7519                                  ;PATHCHRCMPR:
  7520                                  	; MSDOS 3.3
  7521                                  	;push	dx
  7522                                  	;mov	dl,[slash_chr]
  7523                                  	;;cmp	byte [RSWITCHAR],'/'
  7524                                          ;cmp	[RSWITCHAR],dl
  7525                                  	;je	short RNOSLASHT
  7526                                  	;;cmp	al,'/'
  7527                                  	;cmp	al,dl
  7528                                  	;je	short RET41 ; zf = 1 
  7529                                  ;RNOSLASHT:
  7530                                          ;;cmp	al,'\'
  7531                                  	;cmp	al,[bslash_chr]
  7532                                  ;RET41:
  7533                                  	;pop	dx
  7534                                  	;retn
  7535                                  
  7536                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7537                                  IfindE:
  7538                                  	; MSDOS 3.3 & MSDOS 6.0
  7539 00001ACB E80300                  	call	ifind				; find the name
  7540                                  	;jc	short ifind2			; carry means not found
  7541                                  	;jmp	short Iscasb1 			; scan for = sign
  7542                                  	; 29/01/2023
  7543 00001ACE 733A                    	jnc	short Iscasb1
  7544                                  ifind2:
  7545 00001AD0 C3                      	retn
  7546                                  
  7547                                  	; 29/01/2023
  7548                                  
  7549                                  ; on return of find1, es:di points to beginning of name
  7550                                  
  7551                                  ifind:
  7552 00001AD1 FC                      	cld
  7553 00001AD2 E82700                  	call	Icount0				; cx = length of name
  7554 00001AD5 8E06[DC03]              	mov	es,[EnvirSeg]
  7555 00001AD9 31FF                    	xor	di,di
  7556                                  ifind1:
  7557 00001ADB 51                      	push	cx
  7558 00001ADC 56                      	push	si
  7559 00001ADD 57                      	push	di
  7560                                  ifind11:
  7561 00001ADE AC                      	lodsb
  7562 00001ADF E83400                  	call	iupconv
  7563 00001AE2 47                      	inc	di
  7564 00001AE3 263A45FF                	cmp	al,[es:di-1]
  7565 00001AE7 7502                    	jnz	short ifind12
  7566 00001AE9 E2F3                    	loop	ifind11
  7567                                  ifind12:
  7568 00001AEB 5F                      	pop	di
  7569 00001AEC 5E                      	pop	si
  7570 00001AED 59                      	pop	cx
  7571 00001AEE 74E0                    	jz	short ifind2
  7572 00001AF0 51                      	push	cx
  7573 00001AF1 E81A00                  	call	Iscasb2 			; scan for a nul
  7574 00001AF4 59                      	pop	cx
  7575                                  	;cmp	byte [es:di],0
  7576                                  	;jnz	short ifind1
  7577                                  	;stc					; indicate not found
  7578 00001AF5 26803D01                	cmp	byte [es:di],1
  7579 00001AF9 73E0                    	jnb	short ifind1
  7580                                  	; cf=1					; indicate not found
  7581                                  ;ifind2:
  7582 00001AFB C3                      	retn
  7583                                  
  7584                                  	; 29/01/2023
  7585                                  Icount0:
  7586 00001AFC 1E                      	push	ds
  7587 00001AFD 07                      	pop	es
  7588 00001AFE 89F7                    	mov	di,si
  7589                                  
  7590 00001B00 57                      	push	di				; count number of chars until "="
  7591 00001B01 E80600                  	call	Iscasb1
  7592                                  	; 25/09/2018
  7593                                  	;jmp	short Icountx
  7594                                  	;push	di				; count number of chars until nul
  7595                                  	;call	Iscasb2
  7596                                  ;Icountx:
  7597 00001B04 59                      	pop	cx
  7598 00001B05 29CF                    	sub	di,cx
  7599 00001B07 87F9                    	xchg	di,cx
  7600 00001B09 C3                      	retn
  7601                                  
  7602                                  Iscasb1:
  7603                                  	; 29/01/2023
  7604 00001B0A B03D                    	mov	al,"="
  7605                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  7606 00001B0C EB02                    	jmp	short Iscasbx
  7607                                  Iscasb2:
  7608 00001B0E 30C0                    	xor	al,al				; scan for a nul
  7609                                  Iscasbx:
  7610 00001B10 B90001                  	mov	cx,256 ; 100h
  7611 00001B13 F2AE                    	repnz	scasb
  7612 00001B15 C3                      	retn
  7613                                  
  7614                                  	; 29/01/2023
  7615                                  ;IUPCONV:
  7616                                  	; MSDOS 3.3
  7617                                          ;;cmp	al,"a"
  7618                                  	;cmp	al,[letter_a]
  7619                                          ;jb	short IRET22
  7620                                          ;;cmp	al,"z"
  7621                                          ;cmp	al,[letter_z]
  7622                                  	;ja	short IRET22
  7623                                          ;sub	al,20h			; Lower-case changed to upper-case
  7624                                  ;IRET22:
  7625                                  	;retn
  7626                                  
  7627                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7628                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  7629                                  
  7630                                  	; MSDOS 6.0
  7631                                  ; *****************************************************************
  7632                                  ; *
  7633                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  7634                                  ; *
  7635                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  7636                                  ; *		 the character in AL from the file upper case table
  7637                                  ; *		 in DOS if character if above ascii 128, else
  7638                                  ; *		 subtracts 20H if between "a" and "z".
  7639                                  ; *
  7640                                  ; * INPUT:	 DS	      set to resident
  7641                                  ; *		 AL	      char to be upper cased
  7642                                  ; *		 FUCASE_ADDR  set to the file upper case table
  7643                                  ; *
  7644                                  ; * OUTPUT:	 AL	      upper cased character
  7645                                  ; *
  7646                                  ; *****************************************************************
  7647                                  
  7648                                  iupconv:	;proc	near				
  7649                                  	;assume	ds:ResGroup			;
  7650                                  
  7651 00001B16 3C80                    	cmp	al,80h				; see if char is > ascii 128
  7652 00001B18 7210                    	jb	short other_fucase		; no - upper case math
  7653 00001B1A 2C80                    	sub	al,80h				; only upper 128 chars in table
  7654 00001B1C 1E                      	push	ds				;
  7655 00001B1D 53                      	push	bx				;
  7656                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  7657 00001B1E C51E[5402]              	lds     bx,[FUCase_Addr+1]
  7658 00001B22 83C302                  	add	bx,2				; skip over first word
  7659                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  7660 00001B25 D7                      	xlat
  7661 00001B26 5B                      	pop	bx				;
  7662 00001B27 1F                      	pop	ds				;
  7663 00001B28 EB0A                    	jmp	short iupconv_end		; we finished - exit
  7664                                  
  7665                                  other_fucase:					;
  7666                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  7667 00001B2A 3C61                    	cmp	al,'a'
  7668 00001B2C 7206                    	jb	short iupconv_end		;     subtract 20h to get
  7669                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  7670 00001B2E 3C7A                    	cmp	al,'z'
  7671 00001B30 7702                    	ja	short iupconv_end		;
  7672 00001B32 2C20                    	sub	al,20h				; Change lower-case to upper
  7673                                  iupconv_end:					;
  7674 00001B34 C3                      	retn
  7675                                  
  7676                                  ;iupConv endp
  7677                                  
  7678                                  	; 29/01/2023
  7679                                  init_contc_specialcase:
  7680                                  	; MSDOS 3.3 & MSDOS 6.0
  7681                                  						; This routine is called if control-C
  7682 00001B35 83C406                  	add	sp,6				;  is type during the date/time prompt
  7683 00001B38 56                      	push	si				;  at initialization time.  The desired
  7684 00001B39 89D6                    	mov	si,dx				;  response is to make it look like the
  7685 00001B3B C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  7686 00001B40 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  7687 00001B41 CF                      	iret					;  a <CR> in the user's buffer, and
  7688                                  						;  returning directly to the user.
  7689                                  						; In this case the user is TCODE.
  7690                                  
  7691                                  ; ----------------------------------------------------------------------------
  7692                                  
  7693                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7694                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  7695                                  
  7696                                  	; MSDOS 6.0
  7697                                  ; ****************************************************************
  7698                                  ; *
  7699                                  ; * ROUTINE:	 Setup_for_messages
  7700                                  ; *
  7701                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  7702                                  ; *		 messages as follows:
  7703                                  ; *
  7704                                  ; *		 IF /P and /MSG are entered
  7705                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  7706                                  ; *		 ELSE IF /P is entered
  7707                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  7708                                  ; *		    remove PARSE ERRORS from memory
  7709                                  ; *		 ELSE
  7710                                  ; *		    remove PARSE ERRORS from memory
  7711                                  ; *		 ENDIF
  7712                                  ; *
  7713                                  ; * INPUT:	 PERMCOM	Set up with user input
  7714                                  ; *		 EXT_MSG	Set up with user input
  7715                                  ; *		 System set up to retain PARSE ERRORS
  7716                                  ; *
  7717                                  ; * OUTPUT:	 registers unchanged
  7718                                  ; *
  7719                                  ; ****************************************************************
  7720                                  
  7721                                  setup_for_messages: ;proc near		
  7722                                  
  7723 00001B42 53                      	push	bx
  7724 00001B43 1E                      	push	ds				; save data segment
  7725 00001B44 06                      	push	es				; save environment segment
  7726 00001B45 50                      	push	ax				;
  7727 00001B46 52                      	push	dx				;
  7728 00001B47 57                      	push	di				;
  7729 00001B48 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  7730 00001B4A 8ED8                    	mov	ds,ax				;
  7731 00001B4C 8EC0                    	mov	es,ax				;
  7732                                  
  7733 00001B4E 803E[4002]00            	cmp	byte [PermCom],0		; was permcom set?
  7734 00001B53 743C                    	jz	short no_permcom		; No - don't worry about messages
  7735                                  
  7736                                  ;*	We're permanent. Install our message services int 2f handler.
  7737                                  
  7738 00001B55 06                      	push	es
  7739                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  7740 00001B56 B82F35                  	mov	ax,352Fh
  7741 00001B59 CD21                    	int	21h
  7742                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  7743                                  			; AL = interrupt number
  7744                                  			; Return: ES:BX = value of interrupt vector
  7745 00001B5B 891E[5004]              	mov	[Int2fHandler],bx
  7746 00001B5F 8C06[5204]              	mov	[Int2fHandler+2],es
  7747 00001B63 07                      	pop	es
  7748                                  
  7749                                  ;	DS = RESGROUP seg addr
  7750                                  
  7751                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  7752                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  7753                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  7754                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  7755                                  ; M005; call) goes off into space.
  7756                                  
  7757 00001B64 803E[1424]00            	cmp	byte [FirstCom],0		; M005
  7758 00001B69 7416                    	je	short no_msg_hook		; M005
  7759                                  ;
  7760                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  7761                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  7762                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  7763                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  7764                                  ; M005; segment matches the command.com PSP and then updates these segments
  7765                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  7766                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  7767                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  7768                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  7769                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  7770                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  7771                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  7772                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  7773                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  7774                                  ; M005; jump to the actual int 2fh entry point.
  7775                                  ;
  7776 00001B6B 1E                      	push	ds				; M005
  7777                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  7778 00001B6C BA[C300]                	mov     dx,Carousel_i2f_Hook
  7779 00001B6F 83EA10                  	sub	dx,10h				; renormalize offset; M005
  7780 00001B72 8CD8                    	mov	ax,ds				; M005
  7781 00001B74 40                      	inc	ax				; Relocated cs ; M005
  7782 00001B75 8ED8                    	mov	ds,ax				; M005
  7783                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  7784 00001B77 B82F25                  	mov	ax,252Fh
  7785 00001B7A CD21                    	int	21h
  7786                                  			; DOS - SET INTERRUPT VECTOR
  7787                                  			; AL = interrupt number
  7788                                  			; DS:DX = new vector to be used for specified interrupt
  7789 00001B7C 1F                      	pop	ds				; M005
  7790                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  7791 00001B7D 8C1E[C600]              	mov	[Carousel_i2f_Hook+3],ds
  7792                                  						; patch in the cs for jump
  7793                                  no_msg_hook:					; M005
  7794 00001B81 803E[D91E]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  7795 00001B86 7516                    	jne	short permcom_end		; no /msg - exit
  7796                                  
  7797                                  permcom_slash_msg:				; Keep messages in memory
  7798                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  7799 00001B88 BF[B10C]                	mov     di,ExtMsgEnd
  7800 00001B8B 893E[5404]              	mov	[ResMsgEnd],di			; save it
  7801 00001B8F EB0D                    	jmp	short permcom_end		; exit
  7802                                  
  7803                                  no_permcom:					
  7804                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  7805 00001B91 803E[D91E]01            	cmp	byte [ext_msg],1
  7806 00001B96 7506                    	jne	short permcom_end		; no - no error
  7807                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  7808 00001B98 BA0200                  	mov	dx,2
  7809 00001B9B E81CFF                  	call	RPrintParse
  7810                                  
  7811                                  permcom_end:
  7812 00001B9E 5F                      	pop	di				;
  7813 00001B9F 5A                      	pop	dx				;
  7814 00001BA0 58                      	pop	ax				;
  7815 00001BA1 07                      	pop	es				; get environment back
  7816 00001BA2 1F                      	pop	ds				;
  7817 00001BA3 5B                      	pop	bx
  7818                                  
  7819 00001BA4 C3                      	retn					;
  7820                                  
  7821                                  ;setup_for_messages	endp
  7822                                  
  7823                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7824                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  7825                                  
  7826                                  	; MSDOS 6.0
  7827                                  
  7828                                  ;***	CheckHelp - print help text and exit if /? is on command line
  7829                                  ;
  7830                                  ;	ENTRY	command-line tail at 81h
  7831                                  ;
  7832                                  ;	EXIT	return if /? not found
  7833                                  ;		terminate if /? found
  7834                                  ;
  7835                                  ;	USED	AX,BX,CX,DX,SI,DI
  7836                                  ;
  7837                                  ;	EFFECTS	Help text displayed if /? found on command line
  7838                                  
  7839                                  CheckHelp:	; proc
  7840                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  7841                                  
  7842 00001BA5 BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  7843                                  	;mov	di,offset RESGROUP:Parse_Command
  7844 00001BA8 BF[DE1E]                	mov	di,PARSE_COMMAND
  7845                                  					; ES:DI = ptr to primary parse block
  7846 00001BAB 31C9                    	xor	cx,cx			; CX = # positional param's found
  7847 00001BAD 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  7848                                  chParse:
  7849                                  	;call	dword ptr Init_Parse
  7850 00001BAF FF1E[D21E]              	call	far [Init_Parse]	; call system parser
  7851                                  
  7852                                  	;;cmp	ax,END_OF_LINE
  7853                                  	;cmp	ax,-1 ; 0FFFFh	
  7854                                  	;je	short chRet		; end of command line, no /? found
  7855                                  	;;cmp	ax,RESULT_NO_ERROR
  7856                                  	;;cmp	ax,0
  7857                                  	;;je	short chWhich		; valid syntax element found
  7858                                  	;;jmp	short chParse		; go parse more
  7859                                  	;and	ax,ax ; cmp ax,0
  7860                                  	;jnz	short chParse ; jne
  7861                                  	; 10/06/2023
  7862 00001BB3 40                      	inc	ax	; cmp ax,-1
  7863 00001BB4 741B                    	jz	short chRet   ; 0FFFFh -> 0
  7864 00001BB6 48                      	dec	ax	; cmp ax,0
  7865 00001BB7 75F6                    	jnz	short chParse ; 1 -> 0
  7866                                  	; ax = 0
  7867                                  chWhich:
  7868                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  7869 00001BB9 813E[811F][641F]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  7870 00001BBF 7411                    	je	short chHelp		; /? found - display help & exit
  7871                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  7872 00001BC1 813E[811F][4A1F]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  7873                                  	; 06/06/2023
  7874 00001BC7 7408                    	je	short chRet		; /c found - ignore rest of line
  7875                                  	; 29/01/2023
  7876                                  	;jne	short chParse
  7877                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  7878                                  	; MSDOS 6.0
  7879                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  7880 00001BC9 813E[811F][701F]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  7881                                  	;je	short chRet		; /k found - ignore rest of line
  7882                                  	;jmp	short chParse		; anything else - ignore, keep looking
  7883                                  	; 06/06/2023
  7884 00001BCF 75DE                    	jne	short chParse
  7885                                  chRet:
  7886 00001BD1 C3                      	retn
  7887                                  chHelp:
  7888                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  7889 00001BD2 BE[DE23]                	mov	si,HelpMsgs
  7890                                  chHelpNext:
  7891 00001BD5 AD                      	lodsw					; AX = ptr to msg
  7892 00001BD6 09C0                    	or	ax,ax
  7893 00001BD8 7407                    	jz	short chHelpDone		; end of list - all done
  7894 00001BDA 89C2                    	mov	dx,ax				; DX = ptr to msg
  7895 00001BDC E857F7                  	call	RPrint				; display msg
  7896 00001BDF EBF4                    	jmp	short chHelpNext		; go do next msg
  7897                                  
  7898                                  chHelpDone:
  7899 00001BE1 CD20                    	int	20h				; terminate program
  7900                                  ;chRet:
  7901 00001BE3 C3                      	retn
  7902                                  
  7903                                  ;CheckHelp	endp
  7904                                  
  7905                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7906                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  7907                                  
  7908                                  	; MSDOS 6.0
  7909                                  
  7910                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  7911                                  ;
  7912                                  ; It determines based on 2 factors:
  7913                                  ;	1. Is this is the first COMMAND?
  7914                                  ;	2. Is COMMAND to be loaded into HIMEM?
  7915                                  ;   The strategy works as follows:
  7916                                  ;
  7917                                  ;	if (First COMMAND)
  7918                                  ;	then if (COMMAND in HIMEM)
  7919                                  ;		ResSize = resident_data;
  7920                                  ;	     else
  7921                                  ;		ResSize = resident_data + resident_code;
  7922                                  ;	else
  7923                                  ;	   ResSize = resident_data;
  7924                                  ;
  7925                                  ; Int 2fh calls have been added to determine whether or not we are the first
  7926                                  ; COMMAND and whether DOS is in HIMEM.
  7927                                  ;
  7928                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  7929                                  ;
  7930                                  ;	EXIT:  ResSize = resident size in low memory
  7931                                  ;
  7932                                  ;	REGISTERS AFFECTED: ax,cx,dx
  7933                                  ;
  7934                                  
  7935                                  GET_HMA_ADDR	equ	4A02h
  7936                                  
  7937                                  Setup_res_end:	;proc near
  7938                                  	
  7939 00001BE4 1E                      	push	ds
  7940 00001BE5 8CC8                    	mov	ax,cs
  7941 00001BE7 8ED8                    	mov	ds,ax				;ds = RESGROUP
  7942                                  	;assume	ds:RESGROUP
  7943                                  
  7944 00001BE9 8B0E[5404]              	mov	cx,[ResMsgEnd]			;set resident size = data
  7945                                  
  7946                                  ;ifndef	ROMDOS
  7947                                  
  7948                                  ;M042 -- Begin changes
  7949                                  ;If messages are to be kept behind, we need to round up the messages to
  7950                                  ;the next para boundary. This is because we have a dummy segment between the
  7951                                  ;data and the resident code segment so that the code segment starts on a
  7952                                  ;para boundary
  7953                                  
  7954                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  7955 00001BED 81F9[B10C]              	cmp	cx,ExtMsgEnd
  7956 00001BF1 7506                    	jne	short calc_res			;no, continue
  7957 00001BF3 83C10F                  	add	cx,15				;round up
  7958 00001BF6 83E1F0                  	and	cx,0FFF0h
  7959                                  calc_res:
  7960                                  
  7961                                  ;M042 -- End changes
  7962                                  
  7963                                  	; 18/07/2024
  7964                                  	;xor	ax,ax
  7965                                         	
  7966 00001BF9 803E[1424]01            	cmp	byte [FirstCom],1		;is it first command.com?
  7967                                  	;jne	short not_first			;no, do not keep code
  7968                                  	; 06/06/2023
  7969 00001BFE 751A                    	jne	short not_first2
  7970                                  
  7971                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  7972                                  ;bit 4 of dh is set
  7973                                  
  7974 00001C00 53                      	push	bx
  7975 00001C01 51                      	push	cx
  7976                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  7977 00001C02 B80633                  	mov	ax,3306h
  7978 00001C05 CD21                    	int	21h
  7979                                  		; DOS - 5+ Get TRUE Version Number
  7980                                  		; (BL major, BH minor, DL revision, DH flags)
  7981 00001C07 59                      	pop	cx
  7982                                  
  7983                                  ;bugbug: remove version check after testing
  7984                                  
  7985 00001C08 80FB05                  	cmp	bl,5				;bl has true version ; M013
  7986 00001C0B 7207                    	jb	short oldver
  7987                                  
  7988 00001C0D 31C0                    	xor	ax,ax
  7989 00001C0F 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  7990                                  	;pop	bx
  7991                                  	;jnz	short not_first			;DOS in HIMEM, code not
  7992                                  						;	resident
  7993                                  	; 29/01/2023
  7994 00001C12 7503                    	jnz	short not_first_pop
  7995                                  oldver:
  7996                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  7997                                  	; 06/06/2023
  7998                                  	;;mov	ax,81Ah ; MSDOS 5.0 and MSDOS 6.22 COMMAND.COM
  7999                                  	; 06/06/2023
  8000                                  	; 29/01/2023
  8001                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  8002                                  	; 03/05/2023
  8003 00001C14 B8(FA08)                	mov	ax,EndCode-RCODE_START	; 06/06/2023
  8004                                  
  8005                                  not_first_pop:
  8006                                  	; 29/01/2023
  8007 00001C17 5B                      	pop	bx
  8008                                  
  8009                                  not_first:
  8010                                  
  8011                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8012                                  
  8013 00001C18 01C1                    	add	cx,ax
  8014                                  
  8015                                  not_first2:	; 06/06/2023
  8016                                  
  8017                                  ;endif	;not ROMDOS
  8018                                  
  8019 00001C1A 83C10F                  	add	cx,15				;round up to next para
  8020 00001C1D D1E9                    	shr	cx,1
  8021 00001C1F D1E9                    	shr	cx,1
  8022 00001C21 D1E9                    	shr	cx,1
  8023 00001C23 D1E9                    	shr	cx,1				;ax = para size of res code
  8024 00001C25 890E[5604]              	mov	[ResSize],cx			;store resident size
  8025                                  
  8026 00001C29 1F                      	pop	ds
  8027                                  	;assume	ds:nothing
  8028 00001C2A C3                      	retn
  8029                                  
  8030                                  ;ifndef	ROMDOS
  8031                                  
  8032                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8033                                  
  8034                                  	; 29/01/2023
  8035                                  ;oldver:
  8036                                  ;	pop	bx
  8037                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8038                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8039                                  ;	; 29/01/2023
  8040                                  ;	mov	ax,EndCode-RCODE_START
  8041                                  ;	jmp	short not_first
  8042                                  
  8043                                  ;endif	;not ROMDOS
  8044                                  
  8045                                  ;setup_res_end	endp
  8046                                  
  8047                                  ;ifndef	ROMDOS
  8048                                  
  8049                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8050                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8051                                  
  8052                                  	; MSDOS 6.0
  8053                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8054                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8055                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8056                                  ; the correct resident size. When remaining low, we have to check if we 
  8057                                  ; need to overlay the messages part of the data segment which is determined
  8058                                  ; by the /msg switch.
  8059                                  ;
  8060                                  ;	ENTRY: ResMsgEnd = end of resident data
  8061                                  ;
  8062                                  ;	EXIT:  The resident code is either up high or in its final location
  8063                                  ;		down low.
  8064                                  ;
  8065                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8066                                  	
  8067                                  Move_res_code:	;proc near
  8068                                  
  8069 00001C2B 1E                      	push	ds
  8070 00001C2C 06                      	push	es
  8071                                  
  8072 00001C2D 8CC8                    	mov	ax,cs
  8073 00001C2F 8ED8                    	mov	ds,ax
  8074                                  	;assume	ds:RESGROUP
  8075                                  
  8076                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8077 00001C31 B80633                  	mov	ax,3306h
  8078 00001C34 CD21                    	int	21h				;DOS in HIMEM?
  8079                                  		; DOS - 5+ Get TRUE Version Number
  8080                                  		; (BL major, BH minor, DL revision, DH flags)
  8081                                  
  8082 00001C36 80E610                  	and	dh,10h				; M013
  8083 00001C39 750E                    	jnz	short move_high			;yes, move code high
  8084                                  
  8085                                  ;Check if messages have been discarded or not
  8086                                  
  8087                                  load_low:
  8088 00001C3B 1E                      	push	ds
  8089 00001C3C 07                      	pop	es				;es = RESGROUP
  8090 00001C3D 8B3E[5404]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8091                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8092                                  	;mov	bx,ExtMsgEnd
  8093                                  	; 29/01/2023
  8094 00001C41 81FF[B10C]              	cmp	di,ExtMsgEnd
  8095                                  	;cmp	di,bx				;are messages to be kept?
  8096 00001C45 7431                    	je	short no_move			;yes, dont move code
  8097                                  
  8098 00001C47 EB37                    	jmp	short setup_move		;es:di points at dest.
  8099                                  
  8100                                  move_high:
  8101                                  
  8102                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8103                                  ;We pass in bx the number of bytes we need
  8104                                  
  8105                                  	;mov	bx,offset CODERES:EndCode
  8106                                  	; 29/01/2023
  8107                                  	;;mov	bx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8108                                  	; 06/06/2023
  8109                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8110                                  	; 03/05/2023
  8111 00001C49 BB(FA08)                	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8112                                  
  8113                                  ;M030;
  8114                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8115                                  
  8116 00001C4C BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8117                                  						;this ; M030
  8118 00001C4F B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8119 00001C52 CD2F                    	int	2Fh
  8120                                  
  8121                                  ;If the offset = 0xffff, then no HMA available
  8122                                  
  8123 00001C54 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8124 00001C57 C606[3400]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8125 00001C5C 7522                    	jne	short setup_move		;no error, es:di = memory
  8126                                  
  8127                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8128                                  	; 29/01/2023	
  8129 00001C5E FE0E[3400]              	dec	byte [ComInHMA] ; 1 -> 0
  8130                                  
  8131                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8132                                  ;ResSize to reflect this
  8133                                  
  8134 00001C62 8B0E[5404]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8135                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8136                                  	;;mov	ax,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8137                                  	;mov	ax,EndCode-RCODE_START
  8138                                  	;add	cx,ax
  8139                                  	; 06/06/2023
  8140                                  	; 29/01/2023
  8141                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8142                                  	;add	cx,15				;round up to next para
  8143                                  	; 03/05/2023
  8144 00001C66 81C1(0909)              	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8145 00001C6A D1E9                    	shr	cx,1
  8146 00001C6C D1E9                    	shr	cx,1
  8147 00001C6E D1E9                    	shr	cx,1
  8148 00001C70 D1E9                    	shr	cx,1				;ax = para size of res code
  8149 00001C72 890E[5604]              	mov	[ResSize],cx			;store resident size
  8150 00001C76 EBC3                    	jmp	short load_low			;let code remain low
  8151                                  
  8152                                  no_move:
  8153                                  	; 05/05/2023
  8154                                  	;mov	cl,4
  8155 00001C78 83C70F                  	add	di,0Fh
  8156 00001C7B 83E7F0                  	and	di,0FFF0h			;round it to a para offset
  8157 00001C7E EB0B                    	jmp	short patch_up
  8158                                  
  8159                                  setup_move:
  8160                                  	;mov	si,offset RESGROUP:StartCode
  8161                                  	; 03/05/2023
  8162 00001C80 BE[C00C]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8163                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8164                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8165                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8166                                  	; 06/06/2023
  8167                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8168                                  	; 03/05/2023
  8169 00001C83 B9(FA08)                	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8170                                  
  8171 00001C86 FC                      	cld
  8172 00001C87 57                      	push	di				;need di for patching offset
  8173 00001C88 F3A4                    	rep	movsb
  8174 00001C8A 5F                      	pop	di
  8175                                  
  8176                                  patch_up:
  8177 00001C8B E86D01                  	call	patch_stub
  8178 00001C8E 07                      	pop	es
  8179 00001C8F 1F                      	pop	ds
  8180                                  	;assume	ds:nothing
  8181 00001C90 C3                      	retn
  8182                                  
  8183                                  ;Move_res_code endp
  8184                                  
  8185                                  ;else	;ROMDOS
  8186                                  ;
  8187                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8188                                  ;
  8189                                  ;Move_res_code	proc
  8190                                  ;
  8191                                  ;	push	es
  8192                                  ;
  8193                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8194                                  ;	call	patch_stub
  8195                                  ;
  8196                                  ;	pop	es
  8197                                  ;	ret
  8198                                  ;
  8199                                  ;Move_res_code	endp
  8200                                  ;
  8201                                  ;	assume	ds:NOTHING		; to match ending assume above
  8202                                  ;
  8203                                  ;endif	;ROMDOS
  8204                                  
  8205                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8206                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8207                                  
  8208                                  	; MSDOS 6.0
  8209                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8210                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8211                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8212                                  ; the contents of this temporary environment are copied to it. This routine
  8213                                  ; will not be called in case a valid environment is passed to command.com
  8214                                  ;
  8215                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8216                                  ;
  8217                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8218                                  ;
  8219                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8220                                  
  8221                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8222                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1F3Fh
  8223                                  
  8224                                  alloc_env:	;proc near
  8225                                  	;assume ds:nothing
  8226                                  	
  8227 00001C91 1E                              push    ds
  8228 00001C92 06                      	push	es
  8229 00001C93 56                      	push	si
  8230 00001C94 57                      	push	di
  8231                                  
  8232                                  ; 07/06/2023
  8233                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8234                                  ;%if 0
  8235                                  %if 1 
  8236 00001C95 16                              push    ss
  8237 00001C96 1F                              pop     ds
  8238                                  	;assume ds:RESGROUP
  8239                                  
  8240 00001C97 A1[DC03]                        mov     ax,[EnvirSeg]
  8241                                  
  8242 00001C9A 803E[8C1E]00                    cmp	byte [AllocedEnv],0
  8243 00001C9F 7403                            je	short alloc_cont
  8244 00001CA1 E94C01                          jmp     alloc_done
  8245                                  
  8246                                  alloc_cont:
  8247 00001CA4 29FF                            sub     di,di                           ; default start
  8248                                          ;mov	bx,SIZE Environment             ; default size needed
  8249                                  	; 29/01/2023
  8250 00001CA6 BBB400                  	mov	bx,ENVIRONSIZ	; mov bx,180 ; 07/06/2023
  8251                                  
  8252 00001CA9 803E[1424]00                    cmp	byte [FirstCom],0		; first COMMAND.COM?
  8253 00001CAE 747E                            je	short alloc_seg			; no
  8254                                  
  8255                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  8256                                  ;   Record their respective locations and do not add the default vars.
  8257                                  
  8258 00001CB0 09C0                    	or      ax,ax
  8259 00001CB2 7476                    	jz	short alloc_new			; no previous environment
  8260                                  
  8261 00001CB4 8EC0                            mov     es,ax
  8262                                  	;assume es:nothing
  8263                                  
  8264                                  _find_path:
  8265 00001CB6 B000                            mov     al,0
  8266 00001CB8 29FF                            sub     di,di
  8267                                  comp_path:
  8268 00001CBA AE                              scasb                                   ; end of env?
  8269 00001CBB 7417                    	je	short _find_prompt		; yes
  8270 00001CBD 4F                              dec     di
  8271 00001CBE B90500                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  8272                                          ;mov	si,offset RESGROUP:PathString
  8273 00001CC1 BE[8D1E]                	mov	si,PathString	; "PATH="
  8274 00001CC4 F3A6                            repe    cmpsb
  8275 00001CC6 7407                            je	short got_path
  8276 00001CC8 B90001                          mov	cx,256
  8277 00001CCB F2AE                            repne   scasb                           ; find next NULL
  8278 00001CCD EBEB                            jmp     short comp_path
  8279                                  
  8280                                  got_path:
  8281 00001CCF C606[8D1E]00                    mov	byte [PathString],0		; don't add it
  8282                                  
  8283                                  _find_prompt:
  8284 00001CD4 29FF                            sub     di,di
  8285                                  comp_prompt:
  8286 00001CD6 AE                      	scasb                                   ; end of env?
  8287 00001CD7 7417                    	je	short find_comspec		; yes
  8288 00001CD9 4F                      	dec     di
  8289 00001CDA B90700                  	mov     cx,PrmptStrLen2	; mov cx,7
  8290                                  	;mov	si,offset RESGROUP:PrmptString
  8291 00001CDD BE[A31E]                	mov	si,PrmptString	; "PROMPT=$P$G"   
  8292 00001CE0 F3A6                            repe    cmpsb
  8293 00001CE2 7407                            je	short got_prompt
  8294 00001CE4 B90001                          mov     cx,256
  8295 00001CE7 F2AE                            repne   scasb                           ; find next NULL
  8296 00001CE9 EBEB                            jmp	short comp_prompt
  8297                                  
  8298                                  got_prompt:
  8299 00001CEB C606[A31E]00            	mov	byte [PrmptString],0		; don't add it
  8300                                  
  8301                                  find_comspec:
  8302 00001CF0 29FF                            sub     di,di
  8303                                  comp_comspec:
  8304 00001CF2 AE                              scasb                                   ; end of env?
  8305 00001CF3 7423                            je	short got_envend		; yes
  8306 00001CF5 4F                              dec     di
  8307 00001CF6 B90800                          mov	cx,ComspStrLen	; mov cx,8
  8308                                  	;mov	si,offset RESGROUP:ComspString
  8309 00001CF9 BE[B11E]                	mov	si,ComspString	; "COMSPEC=\COMMAND.COM"
  8310 00001CFC F3A6                            repe    cmpsb
  8311 00001CFE 7407                            je	short got_comspec
  8312 00001D00 B90001                          mov     cx,256
  8313 00001D03 F2AE                            repne   scasb                           ; find next NULL
  8314 00001D05 EBEB                            jmp	short comp_comspec
  8315                                  
  8316                                  got_comspec:
  8317 00001D07 893E[AF1E]                      mov     [ComspOffset],di
  8318                                  
  8319                                  find_envend:
  8320 00001D0B 29FF                            sub     di,di
  8321 00001D0D B90080                          mov     cx,ENVBIG	; 32768		; max env size
  8322                                  comp_envend:
  8323 00001D10 49                              dec     cx                              ;
  8324 00001D11 AE                              scasb                                   ; end of env?
  8325 00001D12 7404                            je	short got_envend		; yes
  8326 00001D14 F2AE                            repne   scasb
  8327 00001D16 EBF8                            jmp	short comp_envend
  8328                                  
  8329                                  got_envend:
  8330 00001D18 4F                              dec     di
  8331                                  	; 07/06/2023
  8332 00001D19 8D9DB400                	lea     bx,[di+ENVIRONSIZ]		; add room for the basics
  8333                                  
  8334                                  ;   We want to fall through to alloc_new and set up default
  8335                                  ;   path and prompt ONLY IF this is the first process;  in all other
  8336                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  8337                                  
  8338 00001D1D 1E                              push    ds
  8339                                          ;mov	ds,ds:[PDB_Parent_Pid]
  8340 00001D1E 8E1E1600                        mov	ds,[PDB.PARENT_PID]
  8341                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  8342 00001D22 833E160000              	cmp	word [PDB.PARENT_PID],0
  8343 00001D27 1F                      	pop     ds
  8344 00001D28 7504                            jne	short alloc_seg			; no, we're not the first process
  8345                                                                                  ; so don't muck with the env.
  8346                                  alloc_new:
  8347 00001D2A FE06[8C1E]              	inc	byte [AllocedEnv]		; note we have virgin env.
  8348                                  
  8349                                  alloc_seg:
  8350                                  
  8351                                  ; Allocate default environment size
  8352                                  
  8353 00001D2E 89D9                            mov     cx,bx                           ; save byte-granular size in CX
  8354 00001D30 83C30F                          add     bx,15
  8355 00001D33 D1EB                            shr     bx,1
  8356 00001D35 D1EB                            shr     bx,1
  8357 00001D37 D1EB                            shr     bx,1
  8358 00001D39 D1EB                            shr     bx,1                            ; BX = # paras
  8359 00001D3B B448                    	mov	ah,ALLOC ; 48h
  8360 00001D3D CD21                    	int	21h
  8361 00001D3F 7303                            jnc	short init_ok
  8362 00001D41 E9B100                          jmp     init_nomem                      ; insufficient memory, error
  8363                                  
  8364                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  8365                                  ; the new buffer
  8366                                  
  8367                                  init_ok:
  8368 00001D44 8EC0                    	mov	es,ax
  8369                                  	;assume	es:nothing                      ; es = temp env segment
  8370                                  
  8371 00001D46 09FF                    	or      di,di
  8372 00001D48 7412                            jz	short copy_path
  8373                                  
  8374 00001D4A 51                              push    cx
  8375 00001D4B 1E                              push    ds
  8376 00001D4C 8E1E[DC03]                      mov     ds,[EnvirSeg]
  8377                                          ;assume ds:nothing
  8378 00001D50 29F6                            sub     si,si
  8379 00001D52 89F9                            mov     cx,di
  8380 00001D54 29FF                            sub     di,di
  8381 00001D56 F3A4                            rep     movsb
  8382 00001D58 1F                              pop     ds
  8383                                          ;assume ds:RESGROUP
  8384 00001D59 59                              pop     cx
  8385 00001D5A 29F9                            sub     cx,di
  8386                                  
  8387                                  copy_path:
  8388                                  
  8389                                  ; First clear out (the rest of) the buffer
  8390                                  
  8391 00001D5C 57                              push    di
  8392 00001D5D 29C0                            sub     ax,ax
  8393 00001D5F F3AA                            rep     stosb
  8394 00001D61 5F                              pop     di
  8395                                  
  8396                                  ; Initialize the path string (PATH=) first
  8397                                  
  8398                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8399 00001D62 BE[8D1E]                	mov	si,PathString
  8400 00001D65 3804                            cmp     byte [si],al			; add it?
  8401 00001D67 7450                            je	short init_prompt		; no
  8402                                  	;mov	cx,PathStrLen+1                 ;
  8403 00001D69 B90600                  	mov	cx,6 ; db "PATH=",0
  8404 00001D6C F3A4                            rep     movsb                           ;
  8405 00001D6E 3806[8C1E]                      cmp     [AllocedEnv],al			; virgin env?
  8406 00001D72 7445                            je	short init_prompt		; no
  8407                                  
  8408                                  ; Establish a more reasonable default for the PATH
  8409                                  
  8410                                  	;mov	ah,GET_DEFAULT_DRIVE
  8411 00001D74 B419                    	mov	ah,19h
  8412 00001D76 CD21                    	int	21h
  8413 00001D78 0441                            add     al,'A'                          ; convert to letter
  8414 00001D7A A2[931E]                        mov     [DefPathString],al              ;
  8415 00001D7D A2[9C1E]                        mov     [DefPath2String],al             ; now our default paths are complete
  8416                                  
  8417 00001D80 B200                            mov     dl,0                            ; get dir for default drive
  8418 00001D82 1E                              push    ds                              ;
  8419 00001D83 06                              push    es                              ;
  8420 00001D84 1F                              pop     ds                              ;
  8421 00001D85 C6055C                          mov     byte [di],'\'			;
  8422 00001D88 8D7501                          lea     si,[di+1]                       ; set DS:SI -> available space
  8423                                  	;mov	ah,Current_Dir                  ;
  8424 00001D8B B447                            mov	ah,47h
  8425 00001D8D CD21                    	int     21h                             ;
  8426 00001D8F 1F                              pop     ds                              ;
  8427                                  
  8428                                  	;mov	cx,DefPathStrLen+1              ;
  8429 00001D90 B90900                  	mov	cx,9 ; db "C:\MSDOS",0
  8430                                  	;mov	dx,offset RESGROUP:DefPathString
  8431 00001D93 BA[931E]                	mov	dx,DefPathString	; "C:\MSDOS"
  8432 00001D96 89D6                    	mov	si,dx                           ;
  8433                                          ;mov	ah,CHDir                        ;
  8434 00001D98 B43B                            mov	ah,3Bh
  8435 00001D9A CD21                    	int     21h                             ;
  8436 00001D9C 730E                            jnc	short init_setpath		; DefPathString exists!
  8437                                  
  8438                                  	;mov	cx,DefPath2StrLen+1		;
  8439 00001D9E B90700                          mov	cx,7 ; db "C:\DOS",0
  8440                                  	;mov	dx,offset RESGROUP:DefPath2String
  8441 00001DA1 BA[9C1E]                	mov	dx,DefPath2String	; "C:\DOS"
  8442 00001DA4 89D6                            mov     si,dx                           ;
  8443                                          ;mov	ah,CHDir                        ;
  8444 00001DA6 B43B                            mov	ah,3Bh
  8445 00001DA8 CD21                            int     21h                             ;
  8446 00001DAA 720D                            jc	short init_prompt		; DefPath2String doesn't exist
  8447                                  
  8448                                  init_setpath:
  8449 00001DAC 89FA                            mov     dx,di                           ; success
  8450 00001DAE 1E                              push    ds                              ; so restore prev dir
  8451 00001DAF 06                              push    es                              ;
  8452 00001DB0 1F                              pop     ds                              ; DS:DX -> prev dir
  8453                                          ;mov	ah,CHDir                        ;
  8454 00001DB1 B43B                            mov	ah,3Bh			
  8455 00001DB3 CD21                            int     21h                             ;
  8456 00001DB5 1F                              pop     ds                              ;
  8457                                  
  8458 00001DB6 4F                              dec     di                              ; then copy in DefPathString
  8459 00001DB7 F3A4                            rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  8460                                  
  8461                                  ; Initialize the default prompt
  8462                                  
  8463                                  init_prompt:
  8464 00001DB9 57                              push    di                              ;
  8465 00001DBA 29C0                            sub     ax,ax                           ;
  8466 00001DBC B94000                          mov     cx,64                           ; insure any data read in
  8467 00001DBF F3AA                            rep     stosb                           ; from Current_Dir is zapped
  8468 00001DC1 5F                              pop     di                              ;
  8469                                  
  8470 00001DC2 3806[8C1E]              	cmp	[AllocedEnv],al			; virgin env?
  8471 00001DC6 740B                            je	short init_comspec		; no
  8472                                          ;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  8473 00001DC8 BE[A31E]                        mov	si,PrmptString
  8474 00001DCB 3804                    	cmp     [si],al				; add it?
  8475 00001DCD 7404                            je      short init_comspec		; no
  8476                                  	;mov	cx,PrmptStrLen+1                ;
  8477 00001DCF B10C                            mov	cl,12  ; db "PROMPT=$P$G",0
  8478 00001DD1 F3A4                    	rep     movsb                           ;
  8479                                  
  8480                                  ; Initialize the Comspec string
  8481                                  
  8482                                  init_comspec:
  8483 00001DD3 3906[AF1E]                      cmp	[ComspOffset],ax		; add it?
  8484 00001DD7 750E                            jne	short init_done			; no
  8485                                          ;lea	ax,[di+8]
  8486 00001DD9 8D4508                  	lea     ax,[di+ComspStrLen]             ;
  8487 00001DDC A3[AF1E]                        mov	[ComspOffset],ax		;
  8488                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8489 00001DDF BE[B11E]                        mov	si,ComspString
  8490                                  	;mov	cx,ComspStrLen2+1               ;
  8491 00001DE2 B91500                          mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  8492 00001DE5 F3A4                    	rep     movsb                           ;
  8493                                  
  8494                                  init_done:
  8495 00001DE7 8CC0                            mov     ax,es                           ; return env seg in ax
  8496 00001DE9 A3[DC03]                        mov     [EnvirSeg],ax			; save env seg
  8497 00001DEC FE06[8C1E]                      inc	byte [AllocedEnv]		; remember that *we* alloced it
  8498                                  %endif
  8499                                  
  8500                                  ; 07/06/2023
  8501                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  8502                                  ;%if 1
  8503                                  %if 0
  8504                                  	;mov	bx,10
  8505                                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  8506                                  	mov	ah,48h
  8507                                  	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  8508                                  			; BX = number of 16-byte paragraphs desired
  8509                                  	jc	short init_nomem
  8510                                  
  8511                                  init_ok:
  8512                                  	mov	es,ax
  8513                                  	;assume	es:nothing                      ; es = temp env segment
  8514                                  
  8515                                  	xor	di,di
  8516                                  	mov	ax,di
  8517                                  	;mov	cx,160	
  8518                                          mov     cx,ENVIRONSIZ
  8519                                          rep	stosb
  8520                                  
  8521                                  init_pathstr:
  8522                                  
  8523                                  ; Initialize the path string (PATH=) first
  8524                                  
  8525                                  	push	ss
  8526                                  	pop	ds
  8527                                  
  8528                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8529                                  	mov	si,PathString
  8530                                  	mov	di,0
  8531                                  init_cp_pathstr:
  8532                                  	lodsb
  8533                                  	stosb
  8534                                  	or	al,al
  8535                                  	jnz	short init_cp_pathstr
  8536                                  
  8537                                  ; Initialize the Comspec string
  8538                                  
  8539                                  init_comspec:
  8540                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8541                                          mov	si,ComspString
  8542                                  	; 05/05/2023
  8543                                  	mov	di,6
  8544                                  init_cp_compstr:
  8545                                  	lodsb
  8546                                  	stosb
  8547                                  	or	al,al
  8548                                  	jnz	short init_cp_compstr
  8549                                  
  8550                                  init_done:
  8551                                          mov     ax,es                           ; return env seg in ax
  8552                                          ;mov	[EnvirSeg],ax			; save env seg
  8553                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  8554                                  %endif	
  8555                                  
  8556                                  	; 29/01/2023
  8557                                  alloc_done:
  8558 00001DF0 5F                      	pop	di
  8559 00001DF1 5E                      	pop	si
  8560 00001DF2 07                      	pop	es
  8561 00001DF3 1F                              pop     ds
  8562                                  	;assume	ds:nothing
  8563 00001DF4 C3                      	retn
  8564                                  
  8565                                  	; 29/01/2023
  8566                                  init_nomem:
  8567                                  
  8568                                  ;We call the error routine from here. This routine never returns. It either
  8569                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  8570                                  ;the system ( if it is the first COMMAND.COM ).
  8571                                  
  8572 00001DF5 E80000                  	call	Alloc_error
  8573                                  
  8574                                  ;Alloc_env	endp
  8575                                  
  8576                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  8577                                  ; check if this is a permanent or secondary command.com and take the 
  8578                                  ; appropriate action.
  8579                                  ;
  8580                                  ;	ENTRY:	ds = RESGROUP = DATARES
  8581                                  ;
  8582                                  ;	EXIT:	None - does not return
  8583                                  ;
  8584                                  ;	REGISTERS AFFECTED: Does not matter
  8585                                  ;
  8586                                  
  8587                                  ;public Alloc_error
  8588                                  Alloc_error:	;proc	near
  8589                                  
  8590                                  	;jmp	RESGROUP:BadMemErr
  8591                                  	; 29/01/2023
  8592 00001DF8 E9CDEF                  	jmp	BadMemErr	
  8593                                  	
  8594                                  ;Alloc_error	endp
  8595                                  
  8596                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8597                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  8598                                  
  8599                                  	; MSDOS 6.0
  8600                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  8601                                  ; the stub table of the various entry points in the resident code segment.
  8602                                  ; Some of them are interrupt entry points and some of them are entries from
  8603                                  ; the transient to the resident code segment.
  8604                                  ;
  8605                                  ;	ENTRY:	ds = RESGROUP
  8606                                  ;		es:di = segment:offset of final location of resident code
  8607                                  ;
  8608                                  ;	EXIT:	All segments and offsets patched into the stub table
  8609                                  ;
  8610                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  8611                                  
  8612                                  patch_stub:	;proc near
  8613                                  	;assume	ds:RESGROUP
  8614                                  	
  8615 00001DFB 06                      	push	es
  8616                                  
  8617 00001DFC 8CC3                    	mov	bx,es			;bx = resident code segment
  8618 00001DFE 89FA                    	mov	dx,di
  8619                                  	;mov	di,offset DATARES:Int2f_Entry
  8620 00001E00 BF[0400]                	mov	di,Int2f_Entry
  8621                                  	;mov	si,offset RESGROUP:Reloc_Table
  8622 00001E03 BE[FA23]                	mov	si,Reloc_Table
  8623 00001E06 1E                      	push	ds
  8624 00001E07 07                      	pop	es			;es = RESGROUP = DATARES
  8625                                  
  8626                                  ;bx:dx = segment:offset of resident code segment
  8627                                  ;es:di = entry point table in stub
  8628                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  8629                                  
  8630                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  8631 00001E08 B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  8632                                  patchlp:
  8633 00001E0B AD                      	lodsw				;get current offset
  8634 00001E0C 01D0                    	add	ax,dx			;offset it by code seg location 
  8635 00001E0E AB                      	stosw				;store offset
  8636 00001E0F 89D8                    	mov	ax,bx			
  8637 00001E11 AB                      	stosw				;store segment 
  8638 00001E12 E2F7                    	loop	patchlp
  8639                                  
  8640 00001E14 07                      	pop	es
  8641 00001E15 C3                      	retn
  8642                                  
  8643                                  ;Patch_stub	endp
  8644                                  
  8645                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8646                                  
  8647                                  	; MSDOS 6.0
  8648                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  8649                                  ; pointers that the stub uses to jump to the actual handler. These values 
  8650                                  ; are temporarily needed to handle these interrupts if they occur before
  8651                                  ; the resident is relocated to its final position and all the addresses of
  8652                                  ; the handlers have been updated.
  8653                                  ;
  8654                                  ;	ENTRY:	es = PSP segment = code segment
  8655                                  ;
  8656                                  ;	EXIT:	Current segment values patched into the jump table in the
  8657                                  ;		stub.
  8658                                  ;
  8659                                  ;	REGISTERS AFFECTED: ax, cx, di
  8660                                  
  8661                                  patch_segs:	;proc near
  8662                                  
  8663                                  	;mov	di,offset RESGROUP:Int2f_Entry
  8664 00001E16 BF[0400]                	mov	di,Int2f_Entry 
  8665 00001E19 B90400                  	mov	cx,4			;we have to patch 4 handlers
  8666 00001E1C 83C702                  	add	di,2
  8667 00001E1F 8CC0                    	mov	ax,es
  8668                                  pseglp:
  8669 00001E21 AB                      	stosw				;store the segment value
  8670 00001E22 83C702                  	add	di,2			;skip the next offset value
  8671 00001E25 E2FA                    	loop	pseglp
  8672                                  
  8673 00001E27 C3                      	retn
  8674                                  
  8675                                  ;Patch_segs	endp
  8676                                  
  8677                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8678                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  8679                                  
  8680                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8681                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:20D8h
  8682                                  
  8683                                  	; MSDOS 6.0
  8684                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  8685                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  8686                                  ; and is used by the stub when we have to jump to the resident in HMA
  8687                                  ;
  8688                                  ;	ENTRY:	ds = RESGROUP
  8689                                  ;
  8690                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  8691                                  ;
  8692                                  ;	REGISTERS AFFECTED:
  8693                                  ;
  8694                                  
  8695                                  get_XMMAddr:	;proc near
  8696                                  	;assume	ds:RESGROUP
  8697                                  
  8698 00001E28 06                      	push	es
  8699                                  
  8700                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  8701 00001E29 B80043                  	mov	ax,4300h
  8702 00001E2C CD2F                    	int	2Fh
  8703                                  		; - Multiplex - XMS - INSTALLATION CHECK
  8704                                  		; Return: AL = 80h XMS driver installed
  8705                                  		; AL <> 80h no driver
  8706 00001E2E 3C80                    	cmp	al,80h			; Q: installed
  8707 00001E30 750D                    	jne	short cXMMexit		; N: set error, quit
  8708                                  ;
  8709                                  ; get the XMM control functions entry point, save it, we
  8710                                  ; need to call it later.
  8711                                  ;
  8712                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  8713 00001E32 B81043                  	mov	ax,4310h
  8714 00001E35 CD2F                    	int	2Fh
  8715                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  8716                                  		; Return: ES:BX -> driver entry point
  8717                                  
  8718 00001E37 891E[3000]              	mov	[XMMCallAddr], bx
  8719 00001E3B 8C06[3200]              	mov	[XMMCallAddr+2],es
  8720                                  cXMMexit:
  8721 00001E3F 07                      	pop	es
  8722 00001E40 C3                      	retn				; done
  8723                                  
  8724                                  ;get_XMMAddr	endp
  8725                                  
  8726                                  ;=============================================================================
  8727                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  8728                                  ;=============================================================================
  8729                                  ; 24/09/2018 - Retro DOS v3.0
  8730                                  
  8731                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  8732                                  
  8733                                  ; TITLE	COMMAND Initialization messages
  8734                                  
  8735                                  ;INIT	SEGMENT PUBLIC PARA
  8736                                  
  8737                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8738                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8739                                  
  8740                                  	; 25/09/2018
  8741                                  	; (15 bytes filler)
  8742 00001E41 00                      	db 0
  8743                                  	;db "25/9/2018 ETAN"
  8744                                  	; 30/01/2023
  8745                                  	;db "30/1/2023 ETAN"
  8746                                  	; 19/06/2023
  8747                                  	;db "19/6/2023 ETAN"
  8748                                  	; 31/07/2024
  8749 00001E42 31342F382F32303234-     	db "14/8/2024 ETAN" ; 14/08/2024
  8749 00001E4B 204554414E         
  8750 00001E50 00                      	db 0
  8751                                  
  8752                                  ; 30/01/2023
  8753                                  %if 0
  8754                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  8755                                  	;dw 0
  8756                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  8757                                  	db 0Dh,0Ah
  8758                                  	db 0Dh,0Ah
  8759                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  8760                                  	db 0Dh,0Ah
  8761                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  8762                                  	db ' ',0Dh,0Ah
  8763                                  	db '                                                   ',
  8764                                  	db 0Dh,0Ah,0
  8765                                  
  8766                                  	times	43 db 20h
  8767                                  
  8768                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  8769                                  BADCOMLKMES:
  8770                                  	dw _152Fh
  8771                                  
  8772                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  8773                                  BADCOMACCMSG:
  8774                                  	dw _155Ah
  8775                                  
  8776                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  8777                                  ACCDENERR:
  8778                                  	dw _1593h
  8779                                  
  8780                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  8781                                  OUTENVMSG:
  8782                                  	dw _15A5h
  8783                                  
  8784                                  BADVERMSG:
  8785                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  8786                                  
  8787                                  BADENVSIZMSG:
  8788                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  8789                                  
  8790                                  HEADERPTR:
  8791                                  	dw COPYRIGHTMSG
  8792                                  %endif
  8793                                  
  8794                                  ; 30/01/2023
  8795                                  ;align 16
  8796                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8797                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  8798                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8799                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:2100h 
  8800                                  ICONDEV:
  8801 00001E51 2F4445562F                      db '/DEV/'
  8802 00001E56 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  8803                                  BADCSPFL:
  8804 00001E5F 00                      	db 0
  8805                                  COMSPECT:
  8806 00001E60 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  8806 00001E69 434F4D00           
  8807 00001E6D 00                      	db 0
  8808                                  AUTOBAT:
  8809 00001E6E 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  8809 00001E77 45432E424154000D   
  8810                                  
  8811                                  ; 22/07/2024
  8812                                  ; 07/06/2023
  8813                                  ;KAUTOBAT:
  8814                                  ;	db 0,':\KAUTOEXEC.BAT',0,0Dh
  8815                                   
  8816                                  PRDATTM:
  8817 00001E7F FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  8818                                  INITADD:
  8819 00001E80 00000000                	dd 0
  8820                                  print_add:
  8821 00001E84 [FD54]                  	dw Printf_Init
  8822 00001E86 0000                    	dw 0
  8823                                  triage_add:
  8824 00001E88 [F131]                  	dw Triage_Init
  8825 00001E8A 0000                    	dw 0
  8826                                  ;CHUCKENV:
  8827                                  AllocedEnv:
  8828 00001E8C 00                      	db 0
  8829                                  
  8830                                  ; 30/01/2023 - MSDOS 3.3
  8831                                  ;COMSPOFFSET:
  8832                                  ;ECOMLOC:
  8833                                  ;	;dw 0Eh
  8834                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  8835                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  8836                                  ;COMSPSTRING:
  8837                                  ;	db 'COMSPEC='
  8838                                  
  8839                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  8840                                  PathString:
  8841 00001E8D 504154483D00            	db 'PATH=',0
  8842                                  PathStrLen equ $-PathString-1
  8843                                  ;;;
  8844                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8845                                  ; MSDOS 6.0
  8846                                  DefPathString:
  8847 00001E93 433A5C4D53444F5300      	db 'C:\MSDOS',0
  8848                                  DefPathStrLen equ $-DefPathString-1
  8849                                  DefPath2String:
  8850 00001E9C 433A5C444F5300          	db 'C:\DOS',0
  8851                                  DefPath2StrLen equ $-DefPath2String-1
  8852                                  
  8853                                  PrmptString:
  8854 00001EA3 50524F4D50543D2450-     	db 'PROMPT=$P$G',0
  8854 00001EAC 244700             
  8855                                  PrmptStrLen equ $-PrmptString-1
  8856                                  PrmptStrLen2 equ 7		; length of PROMPT=
  8857                                  ComspOffset:
  8858 00001EAF 0000                    	dw 0
  8859                                  ;;;
  8860                                  ComspString:
  8861 00001EB1 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  8861 00001EBA 434F4D4D414E442E43-
  8861 00001EC3 4F4D00             
  8862                                  ComspStrLen equ 8		; length of COMSPEC=
  8863                                  ComspStrLen2 equ $-ComspString-1
  8864                                  				; length of full COMSPEC
  8865                                  	; 29/01/2023
  8866                                  ;equal_sign:
  8867                                  ;equalsign:
  8868                                  ;	db '='
  8869                                  ;letter_a:
  8870                                  ;lcasea:
  8871                                  ;	db 'a'
  8872                                  ;letter_z:
  8873                                  ;lcasez:
  8874                                  ;	db 'z'
  8875                                  	; 30/01/2023
  8876                                  ;;slash_chr:
  8877                                  ;;	db '/'
  8878                                  ;;bslash_chr:
  8879                                  ;;	db '\'
  8880                                  ;space_chr:
  8881                                  ;;space:
  8882                                  ;	db 20h
  8883                                  ;;letter_p:
  8884                                  ;;	db 'p'
  8885                                  ;;letter_d:
  8886                                  ;;	db 'd'
  8887                                  ;;letter_c:
  8888                                  ;;	db 'c'
  8889                                  	; 16/04/2023
  8890                                  ; MSDOS 5.0 & MSDOS 6.0
  8891                                  ;scswitch:
  8892                                  ;	db 'C'		; Single command
  8893                                  ;;skswitch:
  8894                                  ;	db 'K' ; MSDOS 6.0
  8895                                  ;;letter_A:
  8896                                  ;ucasea: ; 21/01/2023 
  8897                                  ;	db 'A'
  8898                                  
  8899                                  	; 30/01/2023
  8900                                  EnvSiz:
  8901 00001EC6 0000                    	dw 0		; size user wants to allocate
  8902                                  EnvMax:
  8903 00001EC8 0000                    	dw 0		; maximum size allowed
  8904                                  OldEnv:
  8905 00001ECA 0000                    	dw 0		; envirseg at initialization
  8906                                  UsedEnv:
  8907 00001ECC 0000                    	dw 0		; amount of envirseg used
  8908                                  	; MSDOS 5.0 & MSDOS 6.0
  8909                                  PARS_MSG_OFF:
  8910 00001ECE 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  8911                                  PARS_MSG_SEG:
  8912 00001ED0 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  8913                                  
  8914                                  ;Do not separate the following two words. Used to call transient PARSE routine
  8915                                  
  8916                                  Init_Parse:
  8917                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  8918                                  init_p:
  8919 00001ED2 [F954]                  	dw append_parse
  8920                                  initend:
  8921 00001ED4 0000                    	dw 0		; segment address of end of init
  8922                                  TrnSize:
  8923 00001ED6 0000                    	dw 0		; size of transient in paragraphs
  8924                                  
  8925                                  ; 23/07/2024 - Retro DOS v4.2 COMMAND.COM
  8926                                  ;%if 0
  8927                                  resetenv:
  8928                                  	;dw 0		; set if we need to setblck env at endinit
  8929                                  	; 23/07/2024
  8930 00001ED8 00                      	db 0
  8931                                  ;%endif
  8932                                  
  8933                                  ext_msg:
  8934 00001ED9 00                      	db 0		; set if /MSG switch entered
  8935                                  eswitch:
  8936 00001EDA 00                      	db 0		; set if /e was entered
  8937                                  dswitch:
  8938 00001EDB 00                      	db 0		; set if /d was entered
  8939                                  parsemes_ptr:
  8940 00001EDC 0000                    	dw 0		; word to store parse error number
  8941                                  
  8942                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8943                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h
  8944                                  
  8945                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8946                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:21A5h 
  8947                                  
  8948                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  8949                                  ;  The following parse control block is used for COMMAND. This block is
  8950                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  8951                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  8952                                  ;
  8953                                  ;  Anything on the command line after the /C switch will be passed to the
  8954                                  ;  executable command, so if /C is used, it must be specified last. The
  8955                                  ;  /MSG switch can only be specified if the /P switch is specified.
  8956                                  ;
  8957                                  ;  The /? switch causes help text to be displayed. Any other options
  8958                                  ;  on the command line are ignored. Command.com will not load if /?
  8959                                  ;  is specified.
  8960                                  
  8961                                  INTERNAT_INFO:		; used for country info after parsing is completed
  8962                                  PARSE_COMMAND:
  8963 00001EDE [E11E]                  	dw COMMAND_PARMS
  8964 00001EE0 00                      	db 0			; no extra delimiter
  8965                                  COMMAND_PARMS:
  8966 00001EE1 0002                    	db 0,2			; 1 positional parm
  8967 00001EE3 [FB1E]                  	dw COMMAND_FILE
  8968 00001EE5 [FB1E]                  	dw COMMAND_FILE
  8969                                          ; MSDOS 5.0
  8970                                  	;db 7			; 7 switches
  8971                                  	; MSDOS 6.0
  8972                                  	;db 8 			; 8 switches
  8973                                  	; 07/06/2023
  8974                                  	; MSDOS 6.22
  8975 00001EE7 09                      	db 9			; 9 switches
  8976 00001EE8 [041F]                  	dw COMMAND_SWITCH1
  8977 00001EEA [101F]                  	dw COMMAND_SWITCH2
  8978 00001EEC [1C1F]                  	dw COMMAND_SWITCH3
  8979 00001EEE [281F]                  	dw COMMAND_SWITCH4
  8980 00001EF0 [411F]                  	dw COMMAND_SWITCH5
  8981 00001EF2 [4D1F]                  	dw COMMAND_SWITCH6
  8982 00001EF4 [5B1F]                  	dw COMMAND_SWITCH7
  8983                                  	; 07/06/2023
  8984 00001EF6 [671F]                  	dw COMMAND_SWITCH8 ; MSDOS 6.0
  8985 00001EF8 [731F]                  	dw COMMAND_SWITCH9 ; MSDOS 6.22
  8986 00001EFA 00                      	db 0			; no keywords
  8987                                  
  8988                                  COMMAND_FILE:
  8989 00001EFB 0102                    	dw 0201h		; filespec - optional
  8990 00001EFD 0100                    	dw 1			; capitalize - file table
  8991 00001EFF [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  8992 00001F01 [871F]                  	dw NO_VAL 		;
  8993 00001F03 00                      	db 0			; no keywords
  8994                                  
  8995                                  COMMAND_SWITCH1:
  8996 00001F04 0000                    	dw 0			; no match flags
  8997 00001F06 0200                    	dw 2			; capitalize by char table
  8998 00001F08 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  8999 00001F0A [871F]                  	dw NO_VAL 		;
  9000 00001F0C 01                      	db 1			; 1 keyword
  9001                                  COMMAND_P_SYN:
  9002 00001F0D 2F5000                  	db '/P',0		; /P switch
  9003                                  
  9004                                  COMMAND_SWITCH2:
  9005 00001F10 0000                    	dw 0			; no match flags
  9006 00001F12 0200                    	dw 2			; capitalize by char table
  9007 00001F14 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9008 00001F16 [871F]                  	dw NO_VAL 		;
  9009 00001F18 01                      	db 1			; 1 keyword
  9010                                  COMMAND_F_SYN:
  9011 00001F19 2F4600                  	db '/F',0		; /F switch
  9012                                  
  9013                                  COMMAND_SWITCH3:
  9014 00001F1C 0000                    	dw 0			; no match flags
  9015 00001F1E 0200                    	dw 2			; capitalize by char table
  9016 00001F20 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9017 00001F22 [871F]                  	dw NO_VAL 		;
  9018 00001F24 01                      	db 1			; 1 keyword
  9019                                  COMMAND_D_SYN:
  9020 00001F25 2F4400                  	db '/D',0		; /D switch
  9021                                  
  9022                                  COMMAND_SWITCH4:
  9023 00001F28 0080                    	dw 8000h		; numeric value - required
  9024 00001F2A 0000                    	dw 0			; no function flags
  9025 00001F2C [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9026 00001F2E [341F]                  	dw COMMAND_E_VAL	; pointer to value list
  9027 00001F30 01                      	db 1			; 1 keyword
  9028                                  COMMAND_E_SYN:
  9029 00001F31 2F4500                  	db '/E',0		; /E switch
  9030                                  
  9031                                  COMMAND_E_VAL:
  9032 00001F34 01                      	db 1			;
  9033 00001F35 01                      	db 1			; 1 range
  9034 00001F36 01                      	db 1			; returned if result
  9035                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9036                                  	; MSDOS 5.0 COMMAND.COM
  9037                                  	; (RESGROUP:1F2Bh)
  9038 00001F37 A0000000                	dd 160	 ; ENVSML
  9039 00001F3B 00800000                	dd 32768 ; ENVBIG
  9040 00001F3F 00                      	db 0			; no numeric values
  9041 00001F40 00                      	db 0			; no string values
  9042                                  
  9043                                  COMMAND_SWITCH5:
  9044 00001F41 0000                    	dw 0			; no match flags
  9045 00001F43 0200                    	dw 2			; capitalize by char table
  9046 00001F45 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9047 00001F47 [871F]                  	dw NO_VAL 		;
  9048 00001F49 01                      	db 1			; 1 keyword
  9049                                  COMMAND_C_SYN:
  9050 00001F4A 2F4300                  	db '/C',0		; /C switch
  9051                                  
  9052                                  COMMAND_SWITCH6:
  9053 00001F4D 0000                    	dw 0			; no match flags
  9054 00001F4F 0200                    	dw 2			; capitalize by char table
  9055 00001F51 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9056 00001F53 [871F]                  	dw NO_VAL 		;
  9057 00001F55 01                      	db 1			; 1 keyword
  9058                                  COMMAND_M_SYN:
  9059 00001F56 2F4D534700              	db '/MSG',0		; /MSG switch
  9060                                  
  9061                                  COMMAND_SWITCH7:
  9062 00001F5B 0000                    	dw 0			; no match flags
  9063 00001F5D 0200                    	dw 2			; capitalize by char table
  9064 00001F5F [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9065 00001F61 [871F]                  	dw NO_VAL 		;
  9066 00001F63 01                      	db 1			; 1 keyword
  9067                                  COMMAND_?_SYN:
  9068 00001F64 2F3F00                  	db '/?',0 		; /? switch
  9069                                  
  9070                                  	; 07/06/2023
  9071                                  	; MSDOS 6.0
  9072                                  COMMAND_SWITCH8:
  9073 00001F67 0000                    	dw 0			; no match flags
  9074 00001F69 0200                    	dw 2			; capitalize by char table
  9075 00001F6B [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9076 00001F6D [871F]                  	dw NO_VAL 		;
  9077 00001F6F 01                      	db 1			; 1 keyword
  9078                                  COMMAND_K_SYN:
  9079 00001F70 2F4B00                  	db '/K',0		; /K switch
  9080                                  
  9081                                  	; 07/06/2023
  9082                                  	; MSDOS 6.22
  9083                                  COMMAND_SWITCH9:
  9084 00001F73 0000                    	dw 0			; no match flags
  9085 00001F75 0200                    	dw 2			; capitalize by char table
  9086 00001F77 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9087 00001F79 [871F]                  	dw NO_VAL 		;
  9088 00001F7B 01                      	db 1			; 1 keyword
  9089                                  COMMAND_Y_SYN:
  9090 00001F7C 2F5900                  	db '/Y',0		; /Y switch
  9091                                  
  9092                                  COMND1_OUTPUT:
  9093                                  COMND1_TYPE:
  9094 00001F7F 00                      	db 0			; type
  9095                                  COMND1_CODE:
  9096 00001F80 00                      	db 0			; return value
  9097                                  COMND1_SYN:
  9098 00001F81 0000                    	dw 0			; synonym pointer
  9099                                  COMND1_ADDR:
  9100 00001F83 00000000                	dd 0			; numeric value / address
  9101                                  				; of string value
  9102                                  NO_VAL:
  9103 00001F87 00                      	db 0			; no values
  9104                                  num_positionals:
  9105 00001F88 0000                    	dw 0			; counter for positionals
  9106                                  old_parse_ptr:
  9107 00001F8A 0000                    	dw 0			; SI position before calling parser
  9108                                  
  9109                                  	; 30/01/2023
  9110                                  ;***	INITIALIZATION MESSAGES
  9111                                  ;	-------------------------
  9112                                  ;	include	comimsg.inc	;M00
  9113                                  ;-----------------------------------------------------------------------------	
  9114                                  
  9115                                  BADVERMSG:
  9116 00001F8C 17                      	db 23
  9117 00001F8D 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9117 00001F96 20444F532076657273-
  9117 00001F9F 696F6E0D0A         
  9118                                  OUTENVMSG:
  9119 00001FA4 1A                      	db 26
  9120 00001FA5 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9120 00001FAE 7669726F6E6D656E74-
  9120 00001FB7 2073706163650D0A   
  9121                                  
  9122                                  ; 07/06/2023
  9123                                  ;COPYRIGHTMSG:
  9124                                  ;	db 94
  9125                                  ;	db 0Dh,0Ah
  9126                                  ;	db 0Dh,0Ah
  9127                                  ;	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9128                                  ;	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9129                                  
  9130                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9131                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:2286h
  9132                                  COPYRIGHTMSG:
  9133 00001FBF 5E                      	db 94
  9134 00001FC0 0D0A                    	db 0Dh,0Ah
  9135 00001FC2 0D0A                    	db 0Dh,0Ah
  9136 00001FC4 4D6963726F736F6674-     	db 'Microsoft(R) MS-DOS(R) Version 6.22',0Dh,0Ah
  9136 00001FCD 285229204D532D444F-
  9136 00001FD6 532852292056657273-
  9136 00001FDF 696F6E20362E32320D-
  9136 00001FE8 0A                 
  9137 00001FE9 202020202020202020-     	db '             (C)Copyright Microsoft Corp 1981-1994.',0Dh,0Ah
  9137 00001FF2 20202020284329436F-
  9137 00001FFB 70797269676874204D-
  9137 00002004 6963726F736F667420-
  9137 0000200D 436F72702031393831-
  9137 00002016 2D313939342E0D0A   
  9138                                  
  9139                                  BADCOMLKMES:
  9140 0000201E 28                      	db 40
  9141 0000201F 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9141 00002028 20434F4D4D414E4420-
  9141 00002031 736561726368206469-
  9141 0000203A 726563746F72792062-
  9141 00002043 61640D0A           
  9142                                  	; 07/06/2023
  9143                                  BADCOMACCMSG:
  9144 00002047 37                      	db 55
  9145 00002048 537065636966696564-     	db 'Specified COMMAND search directory bad, access denied',0Dh,0Ah
  9145 00002051 20434F4D4D414E4420-
  9145 0000205A 736561726368206469-
  9145 00002063 726563746F72792062-
  9145 0000206C 61642C206163636573-
  9145 00002075 732064656E6965640D-
  9145 0000207E 0A                 
  9146                                  HELPMSG1:
  9147 0000207F 38                      	db 56
  9148 00002080 537461727473206120-     	db 'Starts a new copy of the MS-DOS command interpreter.',0Dh,0Ah
  9148 00002089 6E657720636F707920-
  9148 00002092 6F6620746865204D53-
  9148 0000209B 2D444F5320636F6D6D-
  9148 000020A4 616E6420696E746572-
  9148 000020AD 7072657465722E0D0A 
  9149 000020B6 0D0A                    	db 0Dh,0Ah
  9150                                  
  9151                                  ;HELPMSG2:
  9152                                  ;	db 70
  9153                                  ;	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9154                                  ;	db 0Dh,0Ah
  9155                                  ;	db 0Dh,0Ah
  9156                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9157                                  HELPMSG2:
  9158 000020B8 38                      	db 56
  9159 000020B9 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P [/MSG]]',0Dh,0Ah
  9159 000020C2 5B64726976653A5D70-
  9159 000020CB 6174685D205B646576-
  9159 000020D4 6963655D205B2F453A-
  9159 000020DD 6E6E6E6E6E5D205B2F-
  9159 000020E6 50205B2F4D53475D5D-
  9159 000020EF 0D0A               
  9160                                  HELPMSG3:
  9161 000020F1 2A                      	db 42
  9162 000020F2 20202020202020205B-     	db '        [/Y [/C command | /K command]]',0Dh,0Ah
  9162 000020FB 2F59205B2F4320636F-
  9162 00002104 6D6D616E64207C202F-
  9162 0000210D 4B20636F6D6D616E64-
  9162 00002116 5D5D0D0A           
  9163 0000211A 0D0A                    	db 0Dh,0Ah
  9164                                  
  9165                                  ;HELPMSG3:
  9166                                  HELPMSG4:
  9167 0000211C 48                              db 72
  9168 0000211D 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
  9168 00002126 5D7061746820202020-
  9168 0000212F 537065636966696573-
  9168 00002138 207468652064697265-
  9168 00002141 63746F727920636F6E-
  9168 0000214A 7461696E696E672043-
  9168 00002153 4F4D4D414E442E434F-
  9168 0000215C 4D20               
  9169 0000215E 66696C652E0D0A          	db 'file.',0Dh,0Ah
  9170                                  ;HELPMSG4:
  9171                                  HELPMSG5:
  9172 00002165 4D                      	db 77
  9173 00002166 202064657669636520-     	db '  device          Specifies the device to use for command input and '
  9173 0000216F 202020202020202020-
  9173 00002178 537065636966696573-
  9173 00002181 207468652064657669-
  9173 0000218A 636520746F20757365-
  9173 00002193 20666F7220636F6D6D-
  9173 0000219C 616E6420696E707574-
  9173 000021A5 20616E6420         
  9174 000021AA 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
  9175                                  ;HELPMSG5:
  9176                                  HELPMSG6:
  9177 000021B3 45                      	db 69
  9178 000021B4 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
  9178 000021BD 6E2020202020202020-
  9178 000021C6 536574732074686520-
  9178 000021CF 696E697469616C2065-
  9178 000021D8 6E7669726F6E6D656E-
  9178 000021E1 742073697A6520746F-
  9178 000021EA 206E6E6E6E6E206279-
  9178 000021F3 7465732E           
  9179 000021F7 0D0A                    	db 0Dh,0Ah
  9180                                  ;HELPMSG6:
  9181                                  HELPMSG7:
  9182 000021F9 4D                      	db 77
  9183 000021FA 20202F502020202020-     	db '  /P              Makes the new Command Interpreter permanent '
  9183 00002203 202020202020202020-
  9183 0000220C 4D616B657320746865-
  9183 00002215 206E657720436F6D6D-
  9183 0000221E 616E6420496E746572-
  9183 00002227 707265746572207065-
  9183 00002230 726D616E656E7420   
  9184 00002238 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
  9184 00002241 6974292E0D0A       
  9185                                  ;HELPMSG7:
  9186                                  HELPMSG8:
  9187                                  	;db 80
  9188                                  	;db '  /C string       Carries out the command specified by string, and '
  9189                                  	;db 'then stops.',0Dh,0Ah
  9190                                  	; 07/06/2023
  9191 00002247 46                      	db 70
  9192 00002248 20202F4D5347202020-     	db '  /MSG            Stores all error messages in memory (requires /P).'
  9192 00002251 202020202020202020-
  9192 0000225A 53746F72657320616C-
  9192 00002263 6C206572726F72206D-
  9192 0000226C 657373616765732069-
  9192 00002275 6E206D656D6F727920-
  9192 0000227E 287265717569726573-
  9192 00002287 202F50292E         
  9193 0000228C 0D0A                    	db 0Dh,0Ah
  9194                                  ;HELPMSG8:
  9195                                  HELPMSG9:
  9196                                  	;db 78
  9197                                  	;db '  /MSG            Specifies that all error messages be stored in '
  9198                                  	;db 'memory. You',0Dh,0Ah
  9199                                  ;HELPMSG9:
  9200                                  	;db 56
  9201                                  	;db '                  need to specify /P with this switch.',0Dh,0Ah
  9202 0000228E 4A                      	db 74
  9203 0000228F 20202F592020202020-     	db '  /Y              Steps through the batch program specified by /C'
  9203 00002298 202020202020202020-
  9203 000022A1 537465707320746872-
  9203 000022AA 6F7567682074686520-
  9203 000022B3 62617463682070726F-
  9203 000022BC 6772616D2073706563-
  9203 000022C5 696669656420627920-
  9203 000022CE 2F43               
  9204 000022D0 206F72202F4B2E0D0A      	db ' or /K.',0Dh,0Ah
  9205                                  
  9206                                  	; 07/06/2023
  9207                                  HELPMSG10:
  9208 000022D9 3F                      	db 63
  9209 000022DA 20202F4320636F6D6D-     	db '  /C command      Executes the specified command and returns.',0Dh,0Ah
  9209 000022E3 616E64202020202020-
  9209 000022EC 457865637574657320-
  9209 000022F5 746865207370656369-
  9209 000022FE 6669656420636F6D6D-
  9209 00002307 616E6420616E642072-
  9209 00002310 657475726E732E0D0A 
  9210                                  HELPMSG11:
  9211 00002319 4B                      	db 75
  9212 0000231A 20202F4B20636F6D6D-     	db '  /K command      Executes the specified command and continues running.'
  9212 00002323 616E64202020202020-
  9212 0000232C 457865637574657320-
  9212 00002335 746865207370656369-
  9212 0000233E 6669656420636F6D6D-
  9212 00002347 616E6420616E642063-
  9212 00002350 6F6E74696E75657320-
  9212 00002359 72756E6E696E672E   
  9213 00002361 0D0A                    	db 0Dh,0Ah
  9214 00002363 0D0A                    	db 0Dh,0Ah
  9215                                  HELPMSG12:
  9216 00002365 4C                      	db 76
  9217 00002366 546865202F5020616E-     	db 'The /P and /MSG switches may be used only when COMMAND is started'
  9217 0000236F 64202F4D5347207377-
  9217 00002378 697463686573206D61-
  9217 00002381 792062652075736564-
  9217 0000238A 206F6E6C7920776865-
  9217 00002393 6E20434F4D4D414E44-
  9217 0000239C 206973207374617274-
  9217 000023A5 6564               
  9218 000023A7 206279207573696E67-     	db ' by using',0Dh,0Ah
  9218 000023B0 0D0A               
  9219                                  HELPMSG13:
  9220 000023B2 2B                      	db 43
  9221 000023B3 746865205348454C4C-     	db 'the SHELL command in the CONFIG.SYS file.',0Dh,0Ah
  9221 000023BC 20636F6D6D616E6420-
  9221 000023C5 696E2074686520434F-
  9221 000023CE 4E4649472E53595320-
  9221 000023D7 66696C652E0D0A     
  9222                                  
  9223                                  HelpMsgs:
  9224 000023DE [7F20]                          dw HELPMSG1
  9225 000023E0 [B820]                  	dw HELPMSG2
  9226 000023E2 [F120]                  	dw HELPMSG3
  9227 000023E4 [1C21]                  	dw HELPMSG4
  9228 000023E6 [6521]                  	dw HELPMSG5
  9229 000023E8 [B321]                  	dw HELPMSG6
  9230 000023EA [F921]                  	dw HELPMSG7
  9231 000023EC [4722]                  	dw HELPMSG8
  9232 000023EE [8E22]                  	dw HELPMSG9
  9233                                  
  9234                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9235 000023F0 [D922]                  	dw HELPMSG10
  9236 000023F2 [1923]                  	dw HELPMSG11
  9237 000023F4 [6523]                  	dw HELPMSG12
  9238 000023F6 [B223]                  	dw HELPMSG13
  9239                                  
  9240                                  	; 23/04/2023
  9241 000023F8 0000                    	dw 0
  9242                                  
  9243                                  ;-----------------------------------------------------------------------------
  9244                                  
  9245                                  ;SR;
  9246                                  ; This table of offsets is used by the init code to calculate the new offsets
  9247                                  ;for these labels after the resident code has been relocated
  9248                                  
  9249                                  ;Reloc_Table:
  9250                                  	;dw offset CODERES:MsgInt2fHandler
  9251                                  	;dw offset CODERES:Int_2e
  9252                                  	;dw offset CODERES:ContC
  9253                                  	;dw offset CODERES:DskErr
  9254                                  	;dw offset CODERES:Exec_Ret
  9255                                  	;dw offset CODERES:TRemCheck
  9256                                  	;dw offset CODERES:TrnLodCom1
  9257                                  	;dw offset CODERES:LodCom
  9258                                  	;dw offset CODERES:MsgRetriever
  9259                                  	;dw offset CODERES:THeadFix
  9260                                  	;dw offset CODERES:Lh_OffUnlink	; M003
  9261                                  
  9262                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9263                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
  9264                                  
  9265                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9266                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26C1h
  9267                                  
  9268                                  Reloc_Table:			          ; MSDOS 5.0 - 6.22 CODERES address
  9269 000023FA 1807                    	dw MsgInt2fHandler - RCODE_START  ; 738h (RESGROUP:738h+X) *
  9270 000023FC 7401                    	dw Int_2e - RCODE_START		  ; 177h (RESGROUP:177h+X) *	
  9271 000023FE 3300                    	dw ContC - RCODE_START		  ; 035h (RESGROUP:035h+X) *
  9272 00002400 3504                    	dw DSKERR - RCODE_START		  ; 445h (RESGROUP:445h+X) *
  9273 00002402 2700                    	dw Exec_Ret - RCODE_START	  ; 029h (RESGROUP:029h+X) *
  9274 00002404 9802                    	dw TRemCheck - RCODE_START	  ; 2A3h (RESGROUP:2A3h+X) *
  9275 00002406 1204                    	dw TrnLodCom1 - RCODE_START	  ; 422h (RESGROUP:422h+X) *
  9276 00002408 AB01                    	dw LodCom - RCODE_START		  ; 1AEh (RESGROUP:1AEh+X) *
  9277 0000240A 5B07                    	dw MsgRetriever - RCODE_START	  ; 77Bh (RESGROUP:77Bh+X) *
  9278 0000240C B702                    	dw THeadFix - RCODE_START	  ; 2C2h (RESGROUP:2C2h+X) *
  9279 0000240E D407                    	dw Lh_OffUnlink - RCODE_START	  ; 7F4h (RESGROUP:7F4h+X) *
  9280                                  
  9281                                  	; 07/06/2023
  9282                                  	; X = 0D40h for MSDOS 5.0 COMMAND.COM
  9283                                  	; X = 0E50h for MSDOS 6.22 COMMAND.COM
  9284                                  	;; example:
  9285                                  	;;	MsgIn2FHandler is at RESGROUP:1588h or at CODERES:0738h
  9286                                  	;;				(in MSDOS 6.22 COMMAND.COM)
  9287                                  
  9288                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
  9289                                  
  9290                                  ResJmpTable:
  9291 00002410 00000000                	dd 0			; stores prev stub jump table addr
  9292                                  FirstCom:
  9293 00002414 00                      	db 0			; flag set if first command.com
  9294                                  DevFlag:
  9295 00002415 00                      	db 0
  9296                                  PathFlag:
  9297 00002416 00                      	db 0
  9298                                  
  9299                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
  9300                                  	;;times 13 db 0
  9301                                  
  9302                                  	; 07/06/2023
  9303                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26DEh
  9304                                  	;times 2 db 0
  9305                                  
  9306                                  ; 30/01/2023
  9307                                  coderes_end equ $
  9308                                  
  9309                                  ;INIT	ENDS
  9310                                  
  9311                                  ;	END
  9312                                  
  9313                                  ;-----------------------------------------------------------------------------
  9314                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
  9315                                  ;-----------------------------------------------------------------------------
  9316                                  
  9317                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
  9318                                  	; 30/01/2023
  9319 00002417 00                      db	0
  9320                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"		
  9321                                  	; 07/06/2023
  9322                                  ;db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2023]"
  9323 00002418 526574726F20444F53-     db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2024]" ; 21/07/2024
  9323 00002421 2076342E3220434F4D-
  9323 0000242A 4D414E442E434F4D20-
  9323 00002433 6279204572646F6761-
  9323 0000243C 6E2054616E205B3230-
  9323 00002445 32345D             
  9324 00002448 00                      db	0
  9325                                  
  9326                                  ;-----------------------------------------------------------------------------
  9327                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
  9328                                  ;-----------------------------------------------------------------------------
  9329                                  
  9330                                  ;TAIL    SEGMENT PUBLIC PARA
  9331                                  ;        ORG     0
  9332                                  ;TRANSTART LABEL WORD
  9333                                  ;TAIL    ENDS
  9334                                  
  9335                                  ;ALIGN 16  ; 25/09/2018
  9336                                  
  9337                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9338                                  
  9339                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
  9340                                  numbertomod equ (numbertodiv % 16)
  9341                                  
  9342                                  %if numbertomod>0 & numbertomod<16
  9343 00002449 00<rep 7h>              	times (16-numbertomod) db 0
  9344                                  %endif
  9345                                  
  9346                                  ; 30/01/2023
  9347                                  ;TRANSTART:
  9348                                  
  9349                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
  9350                                  ;	times	128 db 0	
  9351                                  
  9352                                  ;-----------------------------------------------------------------------------
  9353                                  ; SEGMENT - TRANSCODE
  9354                                  ;-----------------------------------------------------------------------------
  9355                                  
  9356                                  ;TRANGROUP: ; 21/04/2018
  9357                                  
  9358                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9359                                  ;-----------------------------------------------------------------------------
  9360                                  
  9361                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
  9362                                  
  9363                                  ; 21/04/2018 - Retro DOS v2.0
  9364                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
  9365                                  ; (these values must be changed when transcom.s source code is changed
  9366                                  ; and data offsets are changed)
  9367                                  ;
  9368                                  ; 30/04/2018
  9369                                  ; 29/04/2018
  9370                                  
  9371                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9372                                  ;COMMAND      EQU  012CH
  9373                                  ;DATINIT      EQU  2091H
  9374                                  ;HEADCALL     EQU  428FH
  9375                                  ;TRANSPACEEND EQU  4D5CH
  9376                                  ;TRANDATAEND  EQU  3F44H
  9377                                  
  9378                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9379                                  ;TRIAGE_INIT  EQU  1F15H
  9380                                  ;PRINTF_INIT  EQU  34E0H 
  9381                                  
  9382                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
  9383                                  
  9384                                  ;TPA	EQU  4293H
  9385                                  ;TRNLEN	EQU  04D6H
  9386                                  
  9387                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
  9388                                  ;COMMAND      EQU  012CH
  9389                                  ;DATINIT      EQU  206FH
  9390                                  ;HEADCALL     EQU  426FH
  9391                                  ; 09/01/2023
  9392                                  ;TRANSPACEEND EQU  4D3CH
  9393                                  ;TRANDATAEND  EQU  3F24H
  9394                                  ;TRIAGE_INIT  EQU  1EF3H
  9395                                  ;PRINTF_INIT  EQU  34BFH 
  9396                                  ;
  9397                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
  9398                                  
  9399                                  ;-----------------------------------------------------------------------------
  9400                                  ; ARENA.INC, MSDOS 6.0, 1991
  9401                                  ;-----------------------------------------------------------------------------
  9402                                  ; 13/10/2018 - Retro DOS 3.0
  9403                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9404                                  
  9405                                  ;BREAK <Memory arena structure>
  9406                                  
  9407                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  9408                                  
  9409                                  ; arena item
  9410                                  
  9411                                  struc ARENA
  9412 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
  9413 00000001 ????                      .owner:	resw 1		; owner of arena item
  9414 00000003 ????                      .size:	resw 1		; size in paragraphs of item
  9415                                  endstruc
  9416                                  
  9417                                  ;-----------------------------------------------------------------------------
  9418                                  ;START OF TRANSIENT PORTION
  9419                                  ;This code is loaded at the end of memory and may be overwritten by
  9420                                  ;memory-intensive user programs.
  9421                                  ;-----------------------------------------------------------------------------
  9422                                  
  9423                                  ; 16/04/2023
  9424                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
  9425                                  ; 29/09/2018
  9426                                  ; 31/01/2023 
  9427                                  ;TRANSTART:	; Offset 1660h in original MSDOS 3.3 COMMAND.COM
  9428                                  			
  9429                                  		; 09/01/2023
  9430                                  		; Offset 2320h in original MSDOS 5.0 COMMAND.COM
  9431                                  			
  9432                                  		; 07/06/2023
  9433                                  		; Offset 26E0h in original MSDOS 6.22 COMMAND.COM
  9434                                  
  9435                                  ; 25/09/2018
  9436                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
  9437                                  ;
  9438                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
  9439                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
  9440                                  ;
  9441                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
  9442                                  ;
  9443                                  ;
  9444                                  ;COMTRANS:
  9445                                  ;
  9446                                  ; 20/10/2018 - Retro DOS v3.0	
  9447                                  ;INCBIN	"TRANCOM3.BIN"
  9448                                  ;
  9449                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
  9450                                  ;
  9451                                  ; 29/04/2018
  9452                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
  9453                                  ;
  9454                                  ;TIMES BSS_SIZE db 0
  9455                                  ;
  9456                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
  9457                                  
  9458                                  ;COMMANDCOMSIZE equ $ - 100h
  9459                                  
  9460                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9461                                  ; ============================================================================
  9462                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
  9463                                  ; ============================================================================
  9464                                  
  9465                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22 COMMAND.COM)
  9466                                  
  9467                                  ; ----------------------------------------------------------------------------
  9468                                  ; START OF TRANSIENT PORTION
  9469                                  ; ----------------------------------------------------------------------------
  9470                                  ; SEGMENT - TRANSCODE
  9471                                  ; ----------------------------------------------------------------------------
  9472                                  
  9473                                  ; 18/04/2023
  9474                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
  9475                                  
  9476                                  ; 18/04/2023
  9477                                  ;-----------------------------------------------------------------------------
  9478                                  ; TRANSCODE segment offset 0
  9479                                  TRANSIENTSTART:
  9480                                  
  9481                                  	; 31/01/2023
  9482 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
  9483                                  
  9484                                  ;============================================================================
  9485                                  ; TCODE.ASM, MSDOS 6.0, 1991
  9486                                  ;============================================================================
  9487                                  ; 12/10/2018 - Retro DOS v3.0
  9488                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
  9489                                  
  9490                                  ;[ORG 100h]
  9491                                  
  9492                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
  9493                                  
  9494                                  ; ---------------------------------------------------------------------------
  9495                                  		
  9496                                  	; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9497                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:0100h)
  9498                                  
  9499                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9500                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0100h)
  9501                                  SETDRV:
  9502 00000100 B40E                    	mov	ah,0Eh
  9503                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
  9504 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
  9505                                  			; DL = new default drive number
  9506                                  			;		(0 = A, 1 = B, ..)
  9507                                  			; Return: AL = number of logical drives
  9508                                  
  9509                                  ; ---------------------------------------------------------------------------
  9510                                  
  9511                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
  9512                                  ; No registers (CS:IP) no flags, nothing.
  9513                                  
  9514                                  TCOMMAND:
  9515 00000104 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
  9516 00000109 B8FFFF                  	mov	ax,-1
  9517 0000010C 8706[4502]              	xchg	ax,[VerVal]
  9518 00000110 83F8FF                  	cmp	ax,-1
  9519 00000113 7404                    	je	short NOSETVER2
  9520 00000115 B42E                    	mov	ah,2Eh
  9521                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
  9522 00000117 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
  9523                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
  9524                                  NOSETVER2:
  9525 00000119 2EFF1E[F19D]            	call	far [cs:HEADCALL]   ; Make sure header fixed
  9526 0000011E 31ED                    	xor	bp,bp		    ; Flag transient not read
  9527 00000120 833E[4302]FF            	cmp	word [SingleCom],-1
  9528 00000125 7505                    	jne	short COMMAND
  9529                                  _$EXITPREP:
  9530 00000127 0E                      	push	cs
  9531 00000128 1F                      	pop	ds
  9532 00000129 E97025                  	jmp	_$EXIT		; Have finished the single command
  9533                                  
  9534                                  ; ---------------------------------------------------------------------------
  9535                                  ;
  9536                                  ; Main entry point from resident portion.
  9537                                  ;
  9538                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
  9539                                  ;   just beginning the processing of another command.
  9540                                  ;
  9541                                  ; ---------------------------------------------------------------------------
  9542                                  
  9543                                  ; We are not always sure of the state of the world at this time. We presume
  9544                                  ; worst case and initialize the relevant registers: segments and stack.
  9545                                  
  9546                                  COMMAND:
  9547 0000012C FC                      	cld
  9548 0000012D 8CC8                    	mov	ax,cs
  9549 0000012F FA                      	cli
  9550 00000130 8ED0                    	mov	ss,ax
  9551                                  	;mov	sp,offset TRANGROUP:STACK
  9552                                  				; 07/06/2023
  9553 00000132 BC[90A9]                	mov	sp,STACK	; 0AF24h for MSDOS 6.22 COMMAND.COM
  9554                                  				; 09854h for MSDOS 5.0 COMMAND.COM
  9555 00000135 FB                      	sti
  9556                                  		
  9557 00000136 8EC0                    	mov	es,ax
  9558                                  		
  9559                                  	; MSDOS 6.0
  9560 00000138 8ED8                    	mov	ds,ax		;AN000; set DS to transient
  9561                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
  9562                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
  9563                                  	; 31/01/2023
  9564 0000013A E8AF54                  	call	TSYSLOADMSG
  9565 0000013D C606[27A2]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
  9566                                  
  9567                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9568                                  	;mov	ds,[ss:RESSEG]
  9569                                  	; 31/01/2023
  9570 00000142 8E1E[F39D]              	mov	ds,[RESSEG]
  9571 00000146 36C606[CF9B]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
  9572 0000014C 36C606[529C]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
  9573                                  
  9574                                  ; If we have just loaded the transient, then we do NOT need to initialize the
  9575                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
  9576                                  ; I guess not: the only circumstances in which we reload the command processor
  9577                                  ; is after a transient program execution. In this case, we let the current
  9578                                  ; directory lie where it may.
  9579                                  
  9580 00000152 09ED                    	or	bp,bp		; See if just read
  9581 00000154 7409                    	jz	short TESTRDIR	; Not read, check user directory
  9582 00000156 36C706[D09B]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
  9583 0000015D EB17                    	jmp	short NOSETBUF
  9584                                  TESTRDIR:
  9585 0000015F 803E[3F02]00            	cmp	byte [RestDir],0
  9586 00000164 7410                    	jz	short NOSETBUF	; User directory OK
  9587 00000166 1E                      	push	ds
  9588                                  
  9589                                  ; We have an unusual situation to handle. The user *may* have changed his
  9590                                  ; directory as a result of an internal command that got aborted. Restoring it
  9591                                  ; twice may not help us: the problem may never go away. We just attempt it
  9592                                  ; once and give up.
  9593                                  
  9594 00000167 C606[3F02]00            	mov	byte [RestDir],0 ; Flag users dirs OK
  9595                                  
  9596                                  	; Restore users directory
  9597 0000016C 0E                      	push	cs
  9598 0000016D 1F                      	pop	ds
  9599 0000016E BA[D59C]                	mov	dx,USERDIR1
  9600 00000171 B43B                    	mov	ah,3Bh
  9601                                  	;mov	ah,CHDir ; 3Bh
  9602 00000173 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
  9603                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
  9604 00000175 1F                      	pop	ds
  9605                                  NOSETBUF:
  9606 00000176 803E[B602]00            	cmp	byte [PipeFiles],0
  9607 0000017B 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
  9608 0000017D 803E[B502]00            	cmp	byte [PipeFlag],0
  9609 00000182 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
  9610 00000184 E8B630                  	call	PIPEDEL
  9611                                  NOPCLOSE:
  9612                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
  9613                                  	; 31/01/2023
  9614 00000187 C606[3702]00            	mov	byte [ExtCom],0 ; Flag internal command
  9615 0000018C 8CC8                    	mov	ax,cs		; Get segment we're in
  9616 0000018E 8ED8                    	mov	ds,ax
  9617 00000190 50                      	push	ax
  9618                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
  9619 00000191 BA[90A9]                	mov	dx,INTERNATVARS ; 0AF24h for MSDOS 6.22 COMMAND.COM
  9620                                  				; 09854h for MSDOS 5.0 COMMAND.COM
  9621 00000194 B80038                  	mov	ax,3800h
  9622                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
  9623 00000197 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
  9624                                  			; get current-country info
  9625                                  			; DS:DX	-> buffer for returned info
  9626 00000199 58                      	pop	ax
  9627 0000019A 2B06[F59D]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
  9628 0000019E 53                      	push	bx
  9629 0000019F BB1000                  	mov	bx,16
  9630 000001A2 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
  9631 000001A4 5B                      	pop	bx
  9632 000001A5 09D2                    	or	dx,dx		; See if over 64K
  9633 000001A7 7403                    	jz	short SAVSIZ	; OK if not
  9634 000001A9 B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
  9635                                  SAVSIZ:
  9636                                  
  9637                                  ; AX is the number of bytes free in the buffer between the resident and the
  9638                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
  9639                                  
  9640 000001AC 3D0002                  	cmp	ax,512
  9641 000001AF 7603                    	jbe	short GOTSIZE
  9642                                  	;and	ax,~1FFh
  9643 000001B1 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
  9644                                  GOTSIZE:
  9645 000001B4 A3[129E]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
  9646 000001B7 8E1E[F39D]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
  9647                                  
  9648 000001BB F606[3B02]01            	test	byte [EchoFlag],1 
  9649 000001C0 741E                    	jz	short GETCOM	; Don't do the CRLF
  9650 000001C2 E85730                  	call	SINGLETEST
  9651 000001C5 7219                    	jb	short GETCOM
  9652 000001C7 F606[B502]FF            	test	byte [PipeFlag],0FFh ; -1
  9653 000001CC 7512                    	jnz	short GETCOM
  9654                                  				; G  Don't print prompt in FOR
  9655 000001CE F606[4902]FF            	test	byte [ForFlag],0FFh ; -1
  9656 000001D3 750B                    	jnz	short GETCOM
  9657                                  				; G  Don't print prompt if in batch
  9658 000001D5 F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1
  9659 000001DB 7503                    	jnz	short GETCOM
  9660 000001DD E84129                  	call	CRLF2
  9661                                  
  9662                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9663                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:01E0h
  9664                                  GETCOM:
  9665 000001E0 833E[4302]00            	cmp     word [SingleCom],0
  9666 000001E5 750D                    	jnz     short GETCOM2
  9667 000001E7 F706[E701]FFFF          	test    word [Batch],0FFFFh
  9668 000001ED 7505                    	jnz     short GETCOM2
  9669 000001EF 8026[FC03]EF            	and     byte [Y_Flag],0EFh ; Y/N question overwrite flag ; ~10h
  9670                                  
  9671                                  ;GETCOM:	; MSDOS 5.0 COMMAND.COM
  9672                                  GETCOM2:
  9673 000001F4 C606[4E02]00            	mov	byte [Call_Flag],0 ; G Reset call flags
  9674 000001F9 C606[4F02]00            	mov	byte [Call_Batch_Flag],0
  9675 000001FE B419                    	mov	ah,19h
  9676                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  9677 00000200 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
  9678 00000202 36A2[059E]              	mov	[ss:CURDRV],al
  9679 00000206 F606[B502]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
  9680 0000020B 7403                    	jz	short NOPIPE
  9681 0000020D E9F830                  	jmp	PIPEPROC	; Continue the pipeline
  9682                                  NOPIPE:
  9683 00000210 F606[3B02]01            	test	byte [EchoFlag],1
  9684 00000215 7417                    	jz	short NOPDRV	; No prompt if echo off
  9685 00000217 E80230                  	call	SINGLETEST
  9686 0000021A 7212                    	jb	short NOPDRV
  9687 0000021C F606[4902]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
  9688 00000221 750B                    	jnz	short NOPDRV
  9689 00000223 F706[E701]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
  9690 00000229 750D                    	jnz	short TESTFORBAT
  9691 0000022B E8B520                  	call	PRINT_PROMPT	; Prompt the user
  9692                                  NOPDRV:
  9693 0000022E F606[4902]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
  9694 00000233 7403                    	jz	short TESTFORBAT
  9695 00000235 E9760C                  	jmp	FORPROC		; Continue the FOR
  9696                                  
  9697                                  TESTFORBAT:
  9698 00000238 36C606[9E9D]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
  9699 0000023E C606[6402]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
  9700 00000243 C606[6302]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
  9701 00000248 C606[4802]00            	mov	byte [IfFlag],0	; no more ifs...
  9702 0000024D F706[E701]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
  9703 00000253 7441                    	jz	short ISNOBAT
  9704                                  
  9705                                  	; 31/01/2023
  9706                                  
  9707                                  	; MSDOS 6.0
  9708                                  
  9709                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
  9710                                  
  9711 00000255 06                      	push	es			;AN000; save ES
  9712 00000256 1E                      	push	ds			;AN000; save DS
  9713                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
  9714                                  	; 05/02/2023
  9715 00000257 B80219                  	mov	ax,1902h
  9716 0000025A 8E06[E701]              	mov	es,[Batch]		;AN000; get batch segment
  9717                                  	;mov	di,20h
  9718 0000025E BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
  9719 00000261 0E                      	push	cs			;AN000; get local segment to DS
  9720 00000262 1F                      	pop	ds			;AN000;
  9721                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
  9722 00000263 BA[529C]                	mov	dx,COMBUF
  9723 00000266 CD2F                    	int	2Fh			;AN000; call the shell
  9724                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
  9725                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
  9726                                  		; final filename element uppercased
  9727                                  		; DS:DX -> buffer for results
  9728                                  	;cmp	al,0FFh
  9729 00000268 3CFF                    	cmp	al,shell_action		;AN000; does shell have a commmand?
  9730 0000026A 1F                      	pop	ds			;AN000; restore DS
  9731 0000026B 07                      	pop	es			;AN000; restore ES
  9732 0000026C 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
  9733                                  
  9734                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9735 0000026E 1E                      	push	ds
  9736 0000026F E8D503                  	call	READBAT			; Continue BATCH
  9737 00000272 1F                      	pop	ds
  9738 00000273 C606[5202]00            	mov	byte [NullFlag],0	;G reset no command flag
  9739 00000278 F706[E701]FFFF          	test	word [Batch],0FFFFh
  9740 0000027E 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
  9741 00000280 8B1E[5002]              	mov	bx,[Next_Batch]
  9742                                  	; 31/01/2023
  9743 00000284 09DB                    	or	bx,bx
  9744                                  	;cmp	bx,0			;G see if there is a new batch file
  9745 00000286 740A                    	jz	short JDOCOM1		;G no - go do command
  9746 00000288 891E[E701]              	mov	[Batch],bx		;G get segment of next batch file
  9747 0000028C C706[5002]0000          	mov	word [Next_Batch],0	;G reset next batch
  9748                                  JDOCOM1:
  9749 00000292 0E                      	push	cs
  9750 00000293 1F                      	pop	ds
  9751                                  	;jmp	short DOCOM1
  9752                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9753 00000294 EB5D                    	jmp	short DOCOM0
  9754                                  ISNOBAT:
  9755 00000296 833E[4302]00            	cmp	word [SingleCom],0
  9756 0000029B 741D                    	jz	short REGCOM
  9757                                  	; 07/06/2023 - MSDOS 6.22 COMMAND.COM
  9758 0000029D 8B36[4102]              	mov	si,[SemiPermCom] ;  MSDOS 6.0
  9759                                  	;mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
  9760 000002A1 8736[4302]              	xchg	si,[SingleCom]
  9761 000002A5 BF[549C]                	mov	di,COMBUF+2
  9762 000002A8 31C9                    	xor	cx,cx
  9763                                  SINGLELOOP:
  9764 000002AA AC                      	lodsb
  9765 000002AB AA                      	stosb
  9766 000002AC 41                      	inc	cx
  9767 000002AD 3C0D                    	cmp	al,0Dh
  9768 000002AF 75F9                    	jnz	short SINGLELOOP
  9769 000002B1 49                      	dec	cx
  9770 000002B2 0E                      	push	cs
  9771 000002B3 1F                      	pop	ds
  9772 000002B4 880E[539C]              	mov	[COMBUF+1],cl
  9773                                  
  9774                                  ; do NOT issue a trailing CRLF...
  9775                                  
  9776                                  	;jmp	short DOCOM1
  9777                                  	; 07/06/2023
  9778                                  	; MSDOS 6.22 COMMAND.COM
  9779 000002B8 EB39                    	jmp	short DOCOM0
  9780                                  
  9781                                  	;nop
  9782                                  
  9783                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
  9784                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
  9785                                  
  9786                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9787                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02BBh
  9788                                  
  9789                                  ; We have a normal command.  
  9790                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
  9791                                  ; sometimes they aren't. At this point, we automatically close all spool
  9792                                  ; files and turn on truncation mode.
  9793                                  
  9794                                  REGCOM:
  9795                                  	;mov	ax,(ServerCall shl 8) + 9
  9796                                  	; 31/01/2023
  9797 000002BA B8095D                  	mov	ax,5D09h
  9798                                  	;mov	ax,(SERVERCALL<<8)+9
  9799 000002BD CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
  9800                                  	;mov	ax,(ServerCall shl 8) + 8
  9801 000002BF B8085D                  	mov	ax,5D08h
  9802                                  	;mov	ax,(SERVERCALL<<8)+8
  9803 000002C2 B201                    	mov	dl,1
  9804 000002C4 CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
  9805                                  			; DL = 00h redirected output is	combined
  9806                                  			;      01h redirected output placed in separate	jobs
  9807                                  			; start	new print job now
  9808 000002C6 0E                      	push	cs
  9809 000002C7 1F                      	pop	ds	; Need local segment to point to buffer
  9810 000002C8 BA[CF9B]                	mov	dx,UCOMBUF
  9811                                  
  9812                                  	; MSDOS 6.0
  9813                                  ;	Try to read interactive command line via DOSKey.
  9814                                  ;	If that fails, use DOS Buffered Keyboard Input.
  9815                                  
  9816                                  	; 31/01/2023
  9817 000002CB B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
  9818 000002CE CD2F                    	int	2Fh
  9819 000002D0 09C0                    	or	ax,ax
  9820 000002D2 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
  9821                                  
  9822 000002D4 B40A                    	mov	ah,0Ah
  9823                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
  9824 000002D6 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
  9825                                  			; DS:DX	-> buffer
  9826                                  GOTCOM:
  9827 000002D8 8A0E[CF9B]              	mov	cl,[UCOMBUF]
  9828 000002DC 30ED                    	xor	ch,ch
  9829 000002DE 83C103                  	add	cx,3
  9830 000002E1 BE[CF9B]                	mov	si,UCOMBUF
  9831 000002E4 BF[529C]                	mov	di,COMBUF
  9832 000002E7 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
  9833                                  
  9834                                  	; -------------
  9835                                  
  9836                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9837                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02EDh
  9838                                  
  9839 000002E9 E83528                  	call	CRLF2
  9840 000002EC 31C0                    	xor	ax,ax
  9841 000002EE EB06                    	jmp	short DOCOM2
  9842                                  	; -------------
  9843                                  
  9844                                  DOCOM:
  9845 000002F0 E82E28                  	call	CRLF2
  9846                                  
  9847                                  	; -------------
  9848                                  
  9849                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9850                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02F4h
  9851                                  DOCOM0:
  9852 000002F3 B80100                  	mov	ax,1
  9853                                  DOCOM2:
  9854 000002F6 1E                      	push	ds
  9855 000002F7 8E1E[F39D]              	mov     ds,[RESSEG]
  9856 000002FB A3[9B01]                	mov	[cox_Y_option],ax
  9857 000002FE 1F                      	pop	ds
  9858 000002FF BE[529C]                	mov	si,COMBUF
  9859 00000302 8A4C01                  	mov	cl,[si+1]
  9860 00000305 30ED                    	xor	ch,ch
  9861 00000307 83C602                  	add	si,2
  9862 0000030A E82501                  	call	get_cox_y_n_opt
  9863 0000030D 7303                    	jnc	short DOCOM1    ; YES answer
  9864                                  	; 07/06/2023
  9865                                  NULLCOMJ:
  9866 0000030F E90201                  	jmp	NULLCOM         ; NO answer
  9867                                  	; -------------
  9868                                  
  9869                                  	; MSDOS 5.0 & MSDOS 6.0 COMMAND.COM
  9870                                  DOCOM1:
  9871 00000312 E8932B                  	call	PRESCAN		; Cook the input buffer
  9872 00000315 7403                    	jz	short NOPIPEPROC
  9873 00000317 E96D2F                  	jmp	PIPEPROCSTRT	; Fire up the pipe
  9874                                  
  9875                                  	; 07/06/2023
  9876                                  ;NULLCOMJ:
  9877                                  	;jmp	NULLCOM
  9878                                  
  9879                                  NOPIPEPROC:
  9880 0000031A E86832                  	call	PARSELINE
  9881 0000031D 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
  9882                                  BADPARSE:
  9883 0000031F 0E                      	push	cs
  9884 00000320 1F                      	pop	ds
  9885 00000321 BA[F391]                	mov	dx,BADNAM_PTR	; 31/01/2023
  9886 00000324 E8E051                  	call	std_eprintf
  9887 00000327 E9DAFD                  	jmp	TCOMMAND
  9888                                  
  9889                                  OKPARSE:
  9890                                  	;test	byte [ARGV0_ARG_FLAGS],2
  9891                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
  9892                                  	; 01/02/2023
  9893 0000032A F606[43A2]02            	test	byte [ARG+ARGV_ELE.argflags],2
  9894 0000032F 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
  9895                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
  9896 00000331 833E[01A5]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
  9897 00000336 74D7                    	jz	short NULLCOMJ
  9898                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
  9899 00000338 833E[46A2]00            	cmp	word [ARG+ARGV_ELE.arglen],0
  9900 0000033D 74D0                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
  9901                                  
  9902 0000033F BE[549C]                	mov	si,COMBUF+2
  9903 00000342 BF[AB9F]                	mov	di,IDLEN
  9904                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9905                                  				; Make FCB with blank scan-off
  9906                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9907 00000345 B80129                  	mov	ax,2901h
  9908 00000348 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9909                                  			; DS:SI	-> string to parse
  9910                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9911                                  			; AL = bit mask	to control parsing
  9912                                  	;mov	bx,[ARG_ARGV]
  9913 0000034A 8B1E[41A2]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
  9914 0000034E 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
  9915 00000352 751B                    	jne	short DRVGD	; no, use default of zero...
  9916 00000354 8A17                    	mov	dl,[bx]		; pick-up drive letter
  9917                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
  9918                                  	;and	dl,~20h
  9919 00000356 80E2DF                  	and	dl,0DFh		; uppercase the sucker
  9920                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
  9921                                  	; 31/01/2023
  9922 00000359 80EA41                  	sub	dl,'A'
  9923 0000035C 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
  9924 0000035E 740C                    	je	short DRVBADJ	; It was invalid.
  9925                                  	;mov	di,[ARGV0_ARGSTARTEL]
  9926 00000360 8B3E[44A2]              	mov	di,[ARG+ARGV_ELE.argstartel]
  9927 00000364 803D00                  	cmp	byte [di],0	; is there actually a command there?
  9928 00000367 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
  9929 00000369 E994FD                  	jmp	SETDRV		; and set drive to new drive spec
  9930                                  DRVBADJ:
  9931 0000036C E93B2A                  	jmp	DRVBAD
  9932                                  DRVGD:
  9933 0000036F 8A05                    	mov	al,[di]
  9934 00000371 A2[119E]                	mov	[SPECDRV],al
  9935 00000374 B020                    	mov	al,' '
  9936 00000376 B90900                  	mov	cx,9
  9937 00000379 47                      	inc	di
  9938 0000037A F2AE                    	repne	scasb		; Count number of letters in command name
  9939 0000037C B008                    	mov	al,8
  9940 0000037E 28C8                    	sub	al,cl
  9941 00000380 A2[AB9F]                	mov	[IDLEN],al	; IDLEN is truly the length
  9942 00000383 BF8100                  	mov	di,81h
  9943 00000386 56                      	push	si
  9944 00000387 BE[549C]                	mov	si,COMBUF+2	; Skip over all leading delims
  9945 0000038A E8A127                  	call	scanoff
  9946                                  
  9947                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9948                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
  9949                                  
  9950                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9951                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0391h
  9952                                  
  9953                                  	; MSDOS 6.0
  9954                                  ;SR;
  9955                                  ; We are going to skip over the first char always. The logic is that the
  9956                                  ;command tail can never start from the first character. The code below is 
  9957                                  ;trying to figure out the command tail and copy it to the command line 
  9958                                  ;buffer in the PSP. However, if the first character happens to be a switch
  9959                                  ;character and the user given command line is a full 128 bytes, we try to
  9960                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
  9961                                  ;char overwrites the code and leads to a crash on future commands.
  9962                                  
  9963 0000038D 46                      	inc	si ;  MSDOS 6.0
  9964                                  
  9965                                  DO_SKIPCOM:
  9966 0000038E AC                      	lodsb			; move command line pointer over
  9967 0000038F E8A427                  	call	DELIM		; pathname -- have to do it ourselves
  9968 00000392 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
  9969 00000394 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
  9970 00000396 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
  9971 00000398 3A06[F79D]              	cmp	al,[SWITCHAR]	; specified command string
  9972 0000039C 75F0                    	jnz	short DO_SKIPCOM 
  9973                                  DO_SKIPPED:
  9974 0000039E 4E                      	dec	si
  9975 0000039F 31C9                    	xor	cx,cx
  9976                                  COMTAIL:
  9977 000003A1 AC                      	lodsb
  9978 000003A2 AA                      	stosb			; Move command tail to 80h
  9979 000003A3 3C0D                    	cmp	al,0Dh
  9980 000003A5 E0FA                    	loopne	COMTAIL
  9981 000003A7 4F                      	dec	di
  9982 000003A8 89FD                    	mov	bp,di
  9983 000003AA F6D1                    	not	cl
  9984 000003AC 880E8000                	mov	[80h],cl
  9985 000003B0 5E                      	pop	si
  9986                                  ;-----
  9987                                  ; Some of these comments are sadly at odds with this brave new code.
  9988                                  ;-----
  9989                                  ; If the command has 0 parameters must check here for
  9990                                  ; any switches that might be present.
  9991                                  ; SI -> first character after the command.
  9992                                  
  9993                                  	;mov	di,arg.argv[0].argsw_word
  9994                                  	;mov	di,[ARGV0_ARGSW_WORD]
  9995 000003B1 8B3E[48A2]              	mov	di,[ARG+ARGV_ELE.argsw_word]
  9996 000003B5 893E[089E]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
  9997                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
  9998                                  				; s = argv[1];
  9999                                  	;mov	si,[ARGV1_ARGPOINTER]
 10000 000003B9 8B36[4CA2]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
 10001 000003BD 09F6                    	or	si,si		;   if (s == NULL)
 10002 000003BF 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
 10003 000003C1 89EE                    	mov	si,bp
 10004                                  DOPARSE:
 10005 000003C3 BF5C00                  	mov	di,FCB ; 5Ch
 10006                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10007                                  	; 01/02/2023
 10008 000003C6 B80129                  	mov	ax,2901h
 10009                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10010 000003C9 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10011                                  			; DS:SI	-> string to parse
 10012                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10013                                  			; AL = bit mask	to control parsing
 10014 000003CB A2[069E]                	mov	[PARM1],al	; Save result of parse
 10015                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
 10016                                  	;mov	di,[ARGV1_ARGSW_WORD]
 10017 000003CE 8B3E[53A2]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
 10018 000003D2 893E[0A9E]              	mov	[ARG1S],di
 10019                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
 10020                                  				; s = argv[2];
 10021                                  	;mov	si,[ARGV2_ARGPOINTER]
 10022 000003D6 8B36[57A2]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
 10023 000003DA 09F6                    	or	si,si		; if (s == NULL)
 10024 000003DC 7502                    	jnz	short DOPARSE2
 10025 000003DE 89EE                    	mov	si,bp		;     s = bp; (buffer end)
 10026                                  DOPARSE2:			
 10027 000003E0 BF6C00                  	mov	di,FCB+10h ; 6Ch
 10028                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10029 000003E3 B80129                  	mov	ax,2901h
 10030                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10031 000003E6 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10032                                  			; DS:SI	-> string to parse
 10033                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10034                                  			; AL = bit mask	to control parsing
 10035 000003E8 A2[079E]                	mov	[PARM2],al	; Save result
 10036                                  	;mov	di,[ARGV2_ARGSW_WORD]
 10037                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
 10038 000003EB 8B3E[5EA2]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
 10039 000003EF 893E[0C9E]              	mov	[ARG2S],di
 10040                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10041                                  	;mov	di,arg.argv[0].argsw_word
 10042 000003F3 8B3E[48A2]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10043 000003F7 F7D7                    	not	di		; ARGTS doesn't include the flags
 10044                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
 10045                                  	;and	di,arg.argswinfo	
 10046 000003F9 233E[03A5]              	and	di,[ARG+ARG_UNIT.argswinfo]
 10047 000003FD 893E[0E9E]              	mov	[ARGTS],di
 10048                                  
 10049 00000401 A0[AB9F]                	mov	al,[IDLEN]
 10050 00000404 8A16[119E]              	mov	dl,[SPECDRV]
 10051 00000408 08D2                    	or	dl,dl		; if a drive was specified...
 10052 0000040A 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
 10053 0000040C FEC8                    	dec	al		; (I don't know why -- old code did it)
 10054 0000040E E9EC28                  	jmp	FNDCOM		; otherwise, check internal com table
 10055                                  EXTERNALJ1:
 10056 00000411 E9EE29                  	jmp	EXTERNAL
 10057                                  NULLCOM:
 10058 00000414 8E1E[F39D]              	mov	ds,[RESSEG]
 10059 00000418 F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
 10060 0000041E 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
 10061 00000420 C606[5202]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
 10062                                  	;mov	byte [NullFlag],nullcommand ; 1
 10063                                  NOSETFLAG:
 10064 00000425 833E[4302]FF            	cmp	word [SingleCom],0FFFFh ; -1
 10065 0000042A 7403                    	je	short EXITJ
 10066 0000042C E9B1FD                  	jmp	GETCOM
 10067                                  EXITJ:
 10068 0000042F E9F5FC                  	jmp	_$EXITPREP
 10069                                  
 10070                                  ; 07/06/2023
 10071                                  ; ---------------------------------------------------------------------------
 10072                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 10073                                  ; -----------------------------------------
 10074                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 10075                                  ; ---------------------------------------------------------------------------
 10076                                  
 10077                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10078                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0436h
 10079                                  
 10080                                  get_cox_y_n_opt:
 10081 00000432 E339                    	jcxz	ccydp4		; empty	input buffer
 10082                                  ccydp0:
 10083 00000434 803C0D                  	cmp	byte [si],0Dh
 10084 00000437 7434                    	je	short ccydp4
 10085 00000439 803C0A                  	cmp	byte [si],0Ah
 10086 0000043C 742F                    	je	short ccydp4
 10087 0000043E 06                      	push	es
 10088 0000043F 8E06[F39D]              	mov	es,[RESSEG]
 10089 00000443 26A0[FC03]              	mov	al,[es:Y_Flag]
 10090 00000447 A810                    	test	al,10h		; bit 1	= 1 -> Y/N answer is needed
 10091 00000449 7421                    	jz	short ccydp3 ; cf=0 ; 07/06/2023
 10092 0000044B 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],1 ; (in) Batch file ?
 10093 00000451 7419                    	je	short ccydp3	; yes, don't check for ESCAPE
 10094 00000453 A840                    	test	al,40h		; ESCAPE status
 10095                                  				; (bit 4 is zero if Y/N	is escaped)
 10096 00000455 7417                    	jz	short ccydp5
 10097                                  ccydp1:
 10098 00000457 26F706[E701]FFFF        	test	word [es:Batch],0FFFFh
 10099 0000045E 740B                    	jz	short ccydp2
 10100 00000460 268E06[E701]            	mov	es,[es:Batch]
 10101                                  	;mov	byte [es:2],1 ; [es:BATCHSEGMENT.BatchEOF]
 10102 00000465 26C606020001            	mov	byte [es:BATCHSEGMENT.BatchEOF],1
 10103                                  ccydp2:
 10104 0000046B F9                      	stc
 10105                                  ccydp3:		; 07/06/2023 ; cf = 0
 10106 0000046C 07                      	pop	es
 10107                                  ccydp4:		; 07/06/2023 ; cf = 0
 10108 0000046D C3                      	retn
 10109                                  
 10110                                  ;ccydp3:
 10111                                  ;	pop	es
 10112                                  ;ccydp4:
 10113                                  ;	clc
 10114                                  ;	retn
 10115                                  
 10116                                  ccydp5:
 10117 0000046E 89F2                    	mov	dx,si
 10118 00000470 BB0200                  	mov	bx,2
 10119 00000473 B440                    	mov	ah,40h
 10120 00000475 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 10121                                  			; BX = file handle, CX = number	of bytes to write
 10122                                  			; DS:DX -> buffer
 10123 00000477 BA[1594]                	mov	dx,cox_Y_quest_ptr ; msg number	pointer	of ' [Y/N]?'
 10124                                  				   ; (is 1082)
 10125 0000047A E88A50                  	call	std_eprintf
 10126 0000047D 1E                      	push	ds
 10127 0000047E B83B04                  	mov	ax,1083	; cox_Y_answer number (overwrite Y/N answer letter)
 10128 00000481 B6FF                    	mov	dh,0FFh		; utility_msg_class
 10129 00000483 E86C51                  	call	TSYSGETMSG
 10130                                  	;mov	cx,'NY' ; MASM word format
 10131                                  	; NASM word format
 10132 00000486 B9594E                  	mov	cx,'YN'        ; 'YN' Yes/No (CL=Y)
 10133 00000489 7202                    	jc	short ccydp6
 10134 0000048B 8B0C                    	mov	cx,[si]
 10135                                  ccydp6:
 10136 0000048D 1F                      	pop	ds
 10137                                  ccydp7:
 10138 0000048E B408                    	mov	ah,8
 10139 00000490 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 10140                                  			; Return: AL = character
 10141 00000492 84C0                    	test	al,al
 10142 00000494 7510                    	jnz	short ccydp8
 10143 00000496 B408                    	mov	ah,8
 10144 00000498 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 10145                                  			; Return: AL = character
 10146 0000049A 3C3F                    	cmp	al,'?'
 10147 0000049C 75F0                    	jne	short ccydp7
 10148 0000049E 26800E[FC03]40          	or	byte [es:Y_Flag],40h ; bit 4, question flag
 10149 000004A4 EBB1                    	jmp	short ccydp1
 10150                                  ccydp8:
 10151 000004A6 3C1B                    	cmp	al,1Bh		; ESCAPE ?
 10152 000004A8 7509                    	jne	short ccydp9
 10153 000004AA 268026[FC03]EF          	and	byte [es:Y_Flag],0EFh ; (ESCAPE) Clear bit 4 ; ~10h
 10154                                  	;jmp	short ccydp12
 10155                                  	; 07/06/2023
 10156 000004B0 9C                      	pushf
 10157 000004B1 EB14                    	jmp	short ccydp12
 10158                                  ccydp9:
 10159 000004B3 24DF                    	and	al,0DFh		; uppercase
 10160 000004B5 38E8                    	cmp	al,ch		; NO character (N)
 10161 000004B7 7503                    	jne	short ccydp10
 10162 000004B9 F9                      	stc
 10163 000004BA EB04                    	jmp	short ccydp11	; cf = 1 -> overwrite NO answer
 10164                                  ccydp10:
 10165 000004BC 38C8                    	cmp	al,cl		; YES character	(Y)
 10166 000004BE 75CE                    	jne	short ccydp7
 10167                                  ccydp11:
 10168 000004C0 9C                      	pushf			; cf = 0 -> overwrite YES answer
 10169 000004C1 88C2                    	mov	dl,al
 10170 000004C3 B402                    	mov	ah,2
 10171 000004C5 CD21                    	int	21h	; DOS -	DISPLAY	OUTPUT
 10172                                  			; DL = character to send to standard output
 10173                                  	; 07/06/2023
 10174                                  	;popf
 10175                                  ccydp12:
 10176                                  	;pushf
 10177 000004C7 E85726                  	call	CRLF2
 10178 000004CA 9D                      	popf
 10179 000004CB 07                      	pop	es
 10180 000004CC C3                      	retn
 10181                                  
 10182                                  ;============================================================================
 10183                                  ; MSHALO.ASM, MSDOS 6.0, 1991
 10184                                  ;============================================================================
 10185                                  ; 12/10/2018 - Retro DOS v3.0
 10186                                  
 10187                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
 10188                                  
 10189                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
 10190                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
 10191                                  ;   there is a header that describes a block of rom program.  This header
 10192                                  ;   contains information needed to initialize a module and to provide PCDOS
 10193                                  ;   with a set of reserved names for execution.
 10194                                  ;
 10195                                  ;   This header has the following format:
 10196                                  ;
 10197                                  ;   rom_header	STRUC
 10198                                  ;	Signature1  DB	55h
 10199                                  ;	Signature2  DB	AAh
 10200                                  ;	rom_length  DB	?		; number of 512 byte pieces
 10201                                  ;	init_jmp    DB	3 dup (?)
 10202                                  ;	name_list   name_struc <>
 10203                                  ;   rom_header	ENDS
 10204                                  ;
 10205                                  ;   name_struc	STRUC
 10206                                  ;	name_len    DB	?
 10207                                  ;	name_text   DB	? DUP (?)
 10208                                  ;	name_jmp    DB	3 DUP (?)
 10209                                  ;   name_struc	ENDS
 10210                                  ;
 10211                                  ;   The name list is a list of names that are reserved by a particular section
 10212                                  ;   of a module.  This list of names is terminated by a null name (length
 10213                                  ;   is zero).
 10214                                  ;
 10215                                  ;   Consider now, the PCDOS action when a user enters a command:
 10216                                  ;
 10217                                  ;	COMMAND.COM has control.
 10218                                  ;	o   If location FFFFEh has FDh then
 10219                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
 10220                                  ;		    by AAh, stop scan if we get above or = F0000H
 10221                                  ;	o	When we've found one, compare the name entered by the user
 10222                                  ;		    with the one found in the rom.  If we have a match, then
 10223                                  ;		    set up the environment for execution and do a long jump
 10224                                  ;		    to the near jump after the found name.
 10225                                  ;	o	If no more names in the list, then continue scanning the module
 10226                                  ;		    for more 55h followed by AAh.
 10227                                  ;	o   We get to this point only if there is no matching name in the
 10228                                  ;		rom.  We now look on disk for the command.
 10229                                  ;
 10230                                  ;   This gives us the flexibility to execute any rom cartridge without having
 10231                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
 10232                                  ;   want to be invisible to the DOS should not have any names in their lists
 10233                                  ;   (i.e. they have a single null name).
 10234                                  ;
 10235                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 10236                                  ;   Clearly this version will be available on disk.  How does a user actually
 10237                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 10238                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 10239                                  ;   solution:
 10240                                  ;
 10241                                  ;   o	Keep things consistent and force the user to have his software named
 10242                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 10243                                  
 10244                                  struc ROM_HEADER
 10245 00000000 ??                          .signature1: resb 1
 10246 00000001 ??                          .signature2: resb 1
 10247 00000002 ??                          .rom_length: resb 1
 10248 00000003 ??????                      .init_jmp:	 resb 3
 10249 00000006 ??                          .name_list:	 resb 1
 10250                                      .size:
 10251                                  endstruc
 10252                                  
 10253                                  struc NAME_STRUC
 10254 00000000 ??                          .name_len:	resb 1
 10255 00000001 ??                          .name_text:	resb 1
 10256 00000002 ??????                      .name_jmp:	resb 3
 10257                                      .size:	
 10258                                  endstruc
 10259                                  
 10260                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 10261                                  
 10262                                  ; =============== S U B	R O U T	I N E =======================================
 10263                                  
 10264                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 10265                                  
 10266                                  ; 05/02/2023
 10267                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 10268                                  
 10269                                  ; 07/06/2023
 10270                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:04D5h
 10271                                  
 10272                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 10273                                  
 10274                                  ROM_SCAN:
 10275 000004CD 06                      	push	es
 10276 000004CE 56                      	push	si
 10277 000004CF 57                      	push	di
 10278 000004D0 51                      	push	cx
 10279 000004D1 50                      	push	ax
 10280 000004D2 53                      	push	bx
 10281                                  
 10282                                  	; check for PC Jr signature in rom
 10283                                  
 10284 000004D3 B800F0                  	mov	ax,0F000h
 10285 000004D6 8EC0                    	mov	es,ax
 10286 000004D8 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 10287 000004DE 7408                    	je	short SCAN_IT
 10288                                  NO_ROM:
 10289 000004E0 F8                      	clc
 10290                                  ROM_RET:
 10291 000004E1 5B                      	pop	bx
 10292 000004E2 58                      	pop	ax
 10293 000004E3 59                      	pop	cx
 10294 000004E4 5F                      	pop	di
 10295 000004E5 5E                      	pop	si
 10296 000004E6 07                      	pop	es
 10297 000004E7 C3                      	retn
 10298                                  
 10299                                  	; start scanning at C000h
 10300                                  SCAN_IT:
 10301 000004E8 B800C0                  	mov	ax,0C000h
 10302                                  SCAN_ONE:
 10303 000004EB 8EC0                    	mov	es,ax
 10304 000004ED 31FF                    	xor	di,di
 10305                                  
 10306                                  	; check for a valid header
 10307                                  SCAN_MODULE:
 10308 000004EF 26813D55AA              	cmp	word [es:di],0AA55h
 10309 000004F4 740A                    	je	short SCAN_LIST
 10310 000004F6 058000                  	add	ax,80h
 10311                                  SCAN_END:
 10312 000004F9 3D00F0                  	cmp	ax,0F000h
 10313 000004FC 72ED                    	jb	short SCAN_ONE
 10314 000004FE EBE0                    	jmp	short NO_ROM
 10315                                  
 10316                                  	; trundle down list of names
 10317                                  SCAN_LIST:
 10318                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 10319 00000500 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 10320 00000504 30FF                    	xor	bh,bh		; nothing in the high byte
 10321 00000506 D1E3                    	shl	bx,1
 10322 00000508 D1E3                    	shl	bx,1		; number of paragraphs
 10323 0000050A 83C37F                  	add	bx,7Fh
 10324 0000050D 83E380                  	and	bx,0FF80h	; round to 2k
 10325                                  	;mov	di,6
 10326                                  	; 05/05/2023
 10327 00000510 BF0600                  	mov	di,ROM_HEADER.name_list
 10328                                  	;nop
 10329                                  SCAN_NAME:
 10330 00000513 268A0D                  	mov	cl,[es:di]	; length of name
 10331 00000516 47                      	inc	di		; point to name
 10332 00000517 30ED                    	xor	ch,ch
 10333 00000519 09C9                    	or	cx,cx		; zero length name
 10334 0000051B 7504                    	jnz	short SCAN_TEST	; nope... compare
 10335 0000051D 01D8                    	add	ax,bx		; yep, skip to next block
 10336 0000051F EBD8                    	jmp	short SCAN_END
 10337                                  
 10338                                  	; compare a single name
 10339                                  SCAN_TEST:
 10340 00000521 89D6                    	mov	si,dx
 10341 00000523 46                      	inc	si
 10342 00000524 F3A6                    	repe	cmpsb		 ; compare name
 10343 00000526 7407                    	jz	short SCAN_FOUND ; success!
 10344                                  SCAN_NEXT:
 10345 00000528 01CF                    	add	di,cx		; failure, next name piece
 10346 0000052A 83C703                  	add	di,3
 10347 0000052D EBE4                    	jmp	short SCAN_NAME
 10348                                  
 10349                                  	; found a name. save entry location
 10350                                  SCAN_FOUND:	
 10351 0000052F 803C3F                  	cmp	byte [si],'?'
 10352 00000532 7405                    	je	short SCAN_SAVE
 10353 00000534 803C20                  	cmp	byte [si],' '
 10354 00000537 75EF                    	jne	short SCAN_NEXT
 10355                                  SCAN_SAVE:
 10356 00000539 2E8C06[A8A0]            	mov	[cs:ROM_CS],es
 10357 0000053E 2E893E[A6A0]            	mov	[cs:ROM_IP],di
 10358 00000543 F9                      	stc
 10359 00000544 EB9B                    	jmp	short ROM_RET
 10360                                  
 10361                                  ; ---------------------------------------------------------------------------
 10362                                  
 10363                                  ; execute a rom-placed body of code. allocate largest block
 10364                                  
 10365                                  ROM_EXEC:
 10366 00000546 BBFFFF                  	mov	bx,0FFFFh
 10367                                  	; 05/02/2023
 10368 00000549 B448                    	mov	ah,48h
 10369                                  	;mov	ah,ALLOC ; 48h
 10370 0000054B CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10371                                  			; BX = number of 16-byte paragraphs desired
 10372 0000054D B448                    	mov	ah,48h
 10373                                  	;mov	ah,ALLOC ; 48h
 10374 0000054F CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10375                                  			; BX = number of 16-byte paragraphs desired
 10376 00000551 53                      	push	bx
 10377 00000552 50                      	push	ax
 10378                                  
 10379                                  	; set terminate addresses
 10380                                  
 10381 00000553 B82225                  	mov	ax,2522h
 10382                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 10383                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 10384 00000556 1E                      	push	ds
 10385 00000557 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 10386                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 10387                                  	;mov	dx,131h ; MSDOS 3.3
 10388                                  	; 05/02/2023
 10389                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 10390 0000055C BA[E90C]                	mov	dx,Exec_Wait
 10391 0000055F CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 10392                                  			; AL = interrupt number
 10393                                  			; DS:DX	= new vector to	be used	for specified interrupt
 10394 00000561 8CDA                    	mov	dx,ds
 10395 00000563 8EC2                    	mov	es,dx
 10396 00000565 1F                      	pop	ds
 10397                                  		
 10398                                  	; and create program header and dup all jfn's
 10399                                  
 10400 00000566 5A                      	pop	dx
 10401 00000567 B455                    	mov	ah,55h
 10402                                  	;mov	ah,DUP_PDB ; 55h
 10403 00000569 CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 10404                                  			; DX = segment number at which to set up PSP
 10405                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 10406                                  		
 10407                                  	; set up dma address
 10408                                  
 10409 0000056B 8EDA                    	mov	ds,dx
 10410 0000056D BA8000                  	mov	dx,80h
 10411 00000570 B41A                    	mov	ah,1Ah
 10412                                  	;mov	ah,Set_DMA ; 1Ah
 10413 00000572 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 10414                                  			; DS:DX	-> disk	transfer buffer
 10415                                  
 10416                                  	; copy in environment info
 10417                                  
 10418 00000574 26A1[DC03]              	mov	ax,[es:EnvirSeg]
 10419                                  	;mov	[2Ch],ax
 10420 00000578 A32C00                  	mov	[PDB.ENVIRON],ax
 10421                                  
 10422                                  	; set up correct size of block
 10423                                  
 10424 0000057B 5B                      	pop	bx		; BX has size, DS has segment
 10425 0000057C 8CDA                    	mov	dx,ds
 10426 0000057E 01DA                    	add	dx,bx
 10427                                  	;mov	[2],dx
 10428 00000580 89160200                	mov	[PDB.BLOCK_LEN],dx
 10429                                  
 10430                                  	; change ownership of block
 10431                                  
 10432 00000584 8CDA                    	mov	dx,ds
 10433 00000586 4A                      	dec	dx
 10434 00000587 8EDA                    	mov	ds,dx
 10435 00000589 42                      	inc	dx	
 10436                                  	;mov	[1],dx
 10437 0000058A 89160100                	mov	[ARENA.owner],dx
 10438 0000058E 8EDA                    	mov	ds,dx
 10439                                  
 10440                                  	; set up correct stack
 10441                                  
 10442 00000590 81FB0010                	cmp	bx,1000h
 10443 00000594 7202                    	jb	short GOT_STACK
 10444 00000596 31DB                    	xor	bx,bx
 10445                                  GOT_STACK:
 10446 00000598 B104                    	mov	cl,4
 10447 0000059A D3E3                    	shl	bx,cl
 10448 0000059C 8CDA                    	mov	dx,ds
 10449 0000059E 8ED2                    	mov	ss,dx
 10450 000005A0 89DC                    	mov	sp,bx
 10451 000005A2 31C0                    	xor	ax,ax
 10452 000005A4 50                      	push	ax
 10453                                  
 10454                                  	; set up initial registers and go to the guy
 10455                                  
 10456 000005A5 F7D0                    	not	ax
 10457 000005A7 2EFF36[A8A0]            	push	word [cs:ROM_CS]
 10458 000005AC 2EFF36[A6A0]            	push	word [cs:ROM_IP]
 10459 000005B1 8EC2                    	mov	es,dx
 10460 000005B3 CB                      	retf	; far return
 10461                                  
 10462                                  ;============================================================================
 10463                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 10464                                  ;============================================================================
 10465                                  ; 12/10/2018 - Retro DOS v3.0
 10466                                  
 10467                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 10468                                  
 10469                                  ; =============== S U B	R O U T	I N E =======================================
 10470                                  
 10471                                  ;Break	<PromptBat - Open or wait for batch file>
 10472                                  
 10473                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10474                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 10475                                  
 10476                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10477                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:05BCh
 10478                                  
 10479                                  ; Open the batch file. If we cannot find the batch file. If the media is
 10480                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 10481                                  ; file. Leave segment registers alone.
 10482                                  
 10483                                  PROMPTBAT:
 10484 000005B4 E84808                  	call	BATOPEN
 10485 000005B7 7201                    	jc	short PROMPTBAT1
 10486 000005B9 C3                      	retn
 10487                                  PROMPTBAT1:
 10488                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10489                                  	; MSDOS 6.0 COMMAND.COM
 10490 000005BA 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 10491 000005BD 740A                    	je	short BAT_REMCHECK	;AN022;
 10492 000005BF 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 10493 000005C2 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 10494                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 10495 000005C4 E83500                  	call	output_batch_name
 10496 000005C7 EB13                    	jmp	short BATDIE		;AN022;
 10497                                  
 10498                                  	; 05/02/2023
 10499                                  	; MSDOS 3.3 COMMAND.COM
 10500                                  	;cmp	dx,ACCDENPTR
 10501                                  	;jz	short BATDIE
 10502                                  
 10503                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10504                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 10505 000005C9 2EFF1E[FD9D]            	call	far [cs:RCH_ADDR]	; DX has error number
 10506 000005CE 7417                    	jz	short ASKFORBAT		; Media is removable
 10507                                  
 10508                                  ; The media is not changeable. Turn everything off.
 10509                                  
 10510 000005D0 E83D0B                  	call	FOROFF
 10511 000005D3 E8E22E                  	call	PipeOff
 10512 000005D6 A2[4802]                	mov	[IfFlag],al	; No If in progress.	
 10513 000005D9 BA[ED91]                	mov	dx,BADBAT_PTR
 10514                                  BATDIE:
 10515 000005DC E8F003                  	call	BATCHOFF
 10516 000005DF 0E                      	push	cs
 10517 000005E0 1F                      	pop	ds
 10518                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 10519                                  	; 05/02/2023
 10520 000005E1 E8234F                  	call	std_eprintf	; MSDOS 6.0
 10521                                  	;call	STD_PRINTF	; MSDOS 3.3
 10522                                  
 10523                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 10524                                  
 10525 000005E4 E91DFB                  	jmp	TCOMMAND
 10526                                  
 10527                                  ; Ask the user to reinsert the batch file
 10528                                  
 10529                                  ASKFORBAT:
 10530 000005E7 1E                      	push	ds
 10531 000005E8 0E                      	push	cs
 10532 000005E9 1F                      	pop	ds
 10533                                  
 10534                                  	; MSDOS 6.0
 10535                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 10536 000005EA BA[F091]                	mov	dx,NEEDBAT_PTR
 10537                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 10538                                  	; 05/02/2023
 10539 000005ED E8174F                  	call	std_eprintf
 10540                                  	;mov	dx,offset trangroup:pausemes_ptr
 10541 000005F0 BA[6292]                	mov	dx,PAUSEMES_PTR
 10542                                  	;invoke std_eprintf		;AN000; get second part of message
 10543 000005F3 E8114F                  	call	std_eprintf
 10544                                  					;AN000; print it to stderr
 10545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10546                                  	;call	STD_EPRINTF
 10547 000005F6 E82E00                  	call	GETKEYSTROKE
 10548 000005F9 1F                      	pop	ds
 10549 000005FA EBB8                    	jmp	short PROMPTBAT
 10550                                  
 10551                                  
 10552                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10553                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 10554                                  
 10555                                  	; MSDOS 6.0
 10556                                  ;****************************************************************
 10557                                  ;*
 10558                                  ;* ROUTINE:	Output_batch_name
 10559                                  ;*
 10560                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 10561                                  ;*
 10562                                  ;* INPUT:	DX - extended error number
 10563                                  ;*
 10564                                  ;* OUTPUT:	Ready to call print routine
 10565                                  ;*
 10566                                  ;****************************************************************
 10567                                  ;
 10568                                  ;public	output_batch_name		;AN022;
 10569                                  
 10570                                  output_batch_name:	;proc near	;AN022;
 10571                                  
 10572 000005FC 1E                      	push	ds			;AN022; save resident segment
 10573 000005FD 8E1E[E701]              	mov	ds,[Batch]		;AN022; get batch file segment
 10574                                  	;assume	DS:nothing		;AN022;
 10575                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 10576                                  	; 05/02/2023
 10577                                  	;mov	si,20h
 10578                                  	; 24/04/2023
 10579 00000601 BE2000                  	mov	si,BATCHSEGMENT.BatFile
 10580                                  	;invoke	dstrlen 		;AN022; get length of string
 10581 00000604 E8B52B                  	call	dstrlen
 10582                                  	;mov	di,offset Trangroup:bwdbuf
 10583                                  					;AN022; target for batch name
 10584 00000607 BF[2AA0]                	mov	di,BWDBUF
 10585 0000060A F3A4                    	rep	movsb			;AN022; move the name
 10586                                  
 10587 0000060C 0E                      	push	cs			;AN022; get local segment
 10588 0000060D 1F                      	pop	ds			;AN022;
 10589                                  	;assume	DS:trangroup		;AN022;
 10590                                  	; 05/02/2023
 10591 0000060E 8916[D091]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 10592                                  	;mov	byte [msg_disp_class],1
 10593 00000612 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 10594                                  					;AN022; set up extended error msg class
 10595                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 10596 00000617 BA[D091]                	mov	dx,extend_buf_ptr	
 10597                                  					;AN022; get extended message pointer
 10598                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 10599 0000061A C706[91A0][2AA0]        	mov	word [string_ptr_2],BWDBUF	
 10600                                  					;AN022; point to substitution
 10601                                  	;mov	byte [extend_buf_sub],1
 10602 00000620 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 10603                                  					;AN022; set up for one subst
 10604 00000625 1F                      	pop	ds			;AN022; restore data segment
 10605 00000626 C3                      	retn				;AN022; return
 10606                                  
 10607                                  ;output_batch_name    endp		;AN022;
 10608                                  
 10609                                  
 10610                                  ; =============== S U B	R O U T	I N E =======================================
 10611                                  
 10612                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 10613                                  
 10614                                  ; Read the next keystroke. Since there may be several characters in the queue
 10615                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 10616                                  ; AFTER waiting.
 10617                                  
 10618                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10619                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 10620                                  
 10621                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10622                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:062Fh
 10623                                  
 10624                                  GETKEYSTROKE:
 10625                                  	; 05/02/2023
 10626                                  	; MSDOS 3.3
 10627                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 10628                                  	;;mov	ax,0C08h
 10629                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 10630                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10631                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10632                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10633                                  	;;mov	ax,0C00h
 10634                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 10635                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10636                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10637                                  	;retn
 10638                                  
 10639                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10640                                  	; MSDOS 6.0
 10641 00000627 52                      	push	dx			;AN000;  3/3/KK
 10642                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 10643                                  					;AN000;  3/3/KK
 10644 00000628 B80263                  	mov	ax,6302h
 10645 0000062B CD21                    	int	21h			;AN000;  3/3/KK
 10646                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 10647                                  	
 10648 0000062D 52                      	push	dx			;AN000;  save interim state 3/3/KK
 10649                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10650                                  					;AN000;  3/3/KK
 10651 0000062E B80163                  	mov	ax,6301h
 10652 00000631 B201                    	mov	dl,1
 10653                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 10654 00000633 CD21                    	int	21h			;AN000;  3/3/KK
 10655                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 10656                                  		; DL = new mode
 10657                                  		; 00h return only full characters on DOS keyboard input functions
 10658                                  		; 01h return partially-formed characters also
 10659                                  	
 10660                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 10661 00000635 B8080C                  	mov	ax,0C08h
 10662 00000638 CD21                    	int	21h			; Get character with KB buffer flush
 10663                                  		; DOS - CLEAR KEYBOARD BUFFER
 10664                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10665                                  
 10666                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10667 0000063A B8000C                  	mov	ax,0C00h
 10668 0000063D CD21                    	int	21h
 10669                                  		; DOS - CLEAR KEYBOARD BUFFER
 10670                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10671                                  
 10672                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10673                                  					;AN000;  3/3/KK
 10674 0000063F B80163                  	mov	ax,6301h
 10675 00000642 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 10676 00000643 CD21                    	int	21h			;AN000;  3/3/KK
 10677 00000645 5A                      	pop	dx			;AN000;  3/3/KK
 10678                                  	
 10679 00000646 C3                      	retn
 10680                                  
 10681                                  ; =============== S U B	R O U T	I N E =======================================
 10682                                  
 10683                                  ; Break	<ReadBat - read 1 line from batch file>
 10684                                  
 10685                                  ; ReadBat - read a single line from the batch file. 
 10686                                  ; Perform all substitutions as appropriate.
 10687                                  
 10688                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10689                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 10690                                  
 10691                                  READBAT:
 10692                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 10693                                  		
 10694                                  	;mov	byte [Suppress],1
 10695                                  				; initialize line suppress status
 10696 00000647 C606[3C02]01            	mov	byte [Suppress],YES_ECHO
 10697 0000064C F606[3102]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 10698 00000651 751F                    	jnz	short TRYING_TO_ABORT
 10699 00000653 C606[3002]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 10700                                  
 10701                                  	; MSDOS 6.0
 10702                                  
 10703                                  ;M037; Start of changes
 10704                                  ; We check here if we have set the flag indicating that the batchfile is at
 10705                                  ;EOF. In this case, we do not want to continue with the normal processing.
 10706                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 10707                                  ;batch file gets closed etc. and then return as if everything is done.
 10708                                  
 10709                                  	; 05/02/2023
 10710 00000658 1E                      	push	ds
 10711 00000659 8E1E[E701]              	mov	ds,[Batch]
 10712                                  	;cmp	byte [2],0
 10713 0000065D 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 10714                                  				; are we at EOF in batchfile
 10715 00000662 1F                      	pop	ds
 10716 00000663 740A                    	jz	short CONTBAT	; no, continue normal processing
 10717                                  	;invoke	GetBatByt	; frees up batchseg
 10718 00000665 E8D303                  	call	GETBATBYT
 10719 00000668 26A2[549C]              	mov	[es:COMBUF+2],al
 10720                                  				; stuff CR into command buffer
 10721                                  				; as a dummy command
 10722                                  	;;invoke CrLf2		; print a CR-LF
 10723                                  	;call	CRLF2
 10724                                  	;;return		; done batch processing
 10725                                  	;retn
 10726                                  	; 24/04/2023
 10727 0000066C E9B224                  	jmp	CRLF2
 10728                                  
 10729                                  ;M037; End of changes
 10730                                  		
 10731                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10732                                  CONTBAT:
 10733 0000066F E842FF                  	call	PROMPTBAT
 10734                                  
 10735                                  TRYING_TO_ABORT:
 10736 00000672 BF[549C]                	mov	di,COMBUF+2
 10737                                  
 10738                                  ; Save position and try to scan for first non delimiter.
 10739                                  
 10740                                  TESTNOP:
 10741 00000675 8CD8                    	mov	ax,ds
 10742 00000677 8E1E[E701]              	mov	ds,[Batch]
 10743 0000067B FF360800                	push	word [BATCHSEGMENT.BatSeek]
 10744 0000067F FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 10745                                  				; save current location.
 10746 00000683 8ED8                    	mov	ds,ax
 10747 00000685 E84B06                  	call	SKIPDELIM	; skip to first non-delim
 10748                                  
 10749                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 10750                                  ; beginning and read the line.
 10751                                  
 10752 00000688 3C3A                    	cmp	al,':'		; is it a label?
 10753 0000068A 59                      	pop	cx
 10754 0000068B 5A                      	pop	dx		; restore position in bat file
 10755 0000068C 7431                    	jz	short NOPLINE	; yes, resync everything.
 10756 0000068E F706[E701]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10757 00000694 7438                    	jz	short RDBAT	; no, go read batch file
 10758                                  
 10759                                  	;cmp	al,'@'
 10760 00000696 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 10761 00000698 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 10762                                  	;mov	byte [Suppress],0
 10763 0000069A C606[3C02]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 10764 0000069F EB2D                    	jmp	short RDBAT	; go read batch file
 10765                                  	;nop
 10766                                  SET_BAT_POS:
 10767 000006A1 1E                      	push	ds
 10768 000006A2 8E1E[E701]              	mov	ds,[Batch]
 10769                                  	;mov	[8],dx
 10770 000006A6 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 10771                                  	;mov	[10],cx
 10772 000006AA 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 10773 000006AE 1F                      	pop	ds
 10774                                  	;;mov	ax,(LSEEK SHL 8) + 0
 10775                                  	; 05/02/2023
 10776 000006AF B80042                  	mov	ax,4200h
 10777                                  	;mov	ax,(LSEEK*256) ; 4200h ; seek back
 10778 000006B2 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 10779                                  			; AL = method: offset from beginning of	file
 10780                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 10781                                  	; 24/04/2023
 10782                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 10783 000006B4 26C706[B9A9]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 10784                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 10785 000006BB 31C9                    	xor	cx,cx		; Initialize line length to zero
 10786 000006BD EB0F                    	jmp	short RDBAT
 10787                                  
 10788                                  	;nop
 10789                                  
 10790                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 10791                                  ; We eat characters until a CR is seen.
 10792                                  
 10793                                  NOPLINE:
 10794 000006BF E80501                  	call	SKIPTOEOL
 10795 000006C2 E87603                  	call	GETBATBYT	; eat trailing LF
 10796                                  	;test	word [Batch],0FFFFh
 10797 000006C5 F706[E701]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10798 000006CB 75A8                    	jnz	short TESTNOP	; no, go get another line
 10799                                  READBAT_RETN:			; Hit EOF
 10800 000006CD C3                      	retn
 10801                                  
 10802                                  ; ---------------------------------------------------------------------------
 10803                                  
 10804                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 10805                                  ; input, we are to consider two special cases:
 10806                                  ;
 10807                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 10808                                  ;   %sym%	This is a symbol from the environment
 10809                                  
 10810                                  RDBAT:
 10811 000006CE E86A03                  	call	GETBATBYT
 10812 000006D1 41                      	inc	cx		; Inc the line length
 10813                                  
 10814                                  	; 05/02/2023
 10815                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 10816 000006D2 E83A22                  	call	testkanj
 10817 000006D5 740C                    	jz	short RDBAT1
 10818                                  	;cmp	cx,127
 10819 000006D7 83F97F                  	cmp	cx,COMBUFLEN-1
 10820 000006DA 7350                    	jnb	short TOOLONG
 10821 000006DC AA                      	stosb
 10822 000006DD E85B03                  	call    GETBATBYT
 10823 000006E0 41                      	inc	cx
 10824 000006E1 EB0A                    	jmp	short SAVBATBYT
 10825                                  RDBAT1:
 10826 000006E3 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10827 000006E7 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 10828                                  
 10829                                  ; See if we have a parameter character.
 10830                                  
 10831 000006E9 3C25                    	cmp	al,'%'		; Check for parameter
 10832 000006EB 7449                    	je	short NEEDPARM
 10833                                  
 10834                                  ; no parameter character. Store it as usual and see if we are done.
 10835                                  
 10836                                  SAVBATBYT:
 10837 000006ED AA                      	stosb			; End of line found?
 10838 000006EE 3C0D                    	cmp	al,0Dh
 10839 000006F0 75DC                    	jne	short RDBAT	; no, go for more
 10840                                  
 10841                                  ; We have read in an entire line. 
 10842                                  ; Decide whether we should echo the command line or not.
 10843                                  
 10844                                  FOUND_EOL:
 10845 000006F2 81EF[559C]              	sub	di,COMBUF+3
 10846 000006F6 89F8                    	mov	ax,di		; remember that we've not counted the CR
 10847 000006F8 26A2[539C]              	mov	[es:COMBUF+1],al
 10848                                  				; Set length of line
 10849 000006FC E83C03                  	call	GETBATBYT	; Eat linefeed
 10850 000006FF E8E906                  	call	BATCLOSE
 10851 00000702 803E[3C02]00            	cmp	byte [Suppress],NO_ECHO ; 0
 10852 00000707 7407                    	jz	short RESET
 10853 00000709 F606[3B02]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 10854 0000070E 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 10855                                  RESET:
 10856 00000710 0E                      	push	cs
 10857 00000711 1F                      	pop	ds		; Go back to local segment
 10858 00000712 74B9                    	jz	short READBAT_RETN ; no echoing here...
 10859                                  TRY_NEXTFLAG:
 10860 00000714 803E[5202]01            	cmp	byte [NullFlag],nullcommand ; 1
 10861                                  				;G was there a command last time?
 10862 00000719 7403                    	jz	short NO_CRLF_PRINT
 10863                                  				;G no - don't print crlf
 10864 0000071B E80324                  	call	CRLF2		;G Print out prompt
 10865                                  NO_CRLF_PRINT:
 10866 0000071E E8C21B                  	call	PRINT_PROMPT
 10867 00000721 0E                      	push	cs		;G change data segment
 10868 00000722 1F                      	pop	ds
 10869 00000723 BA[549C]                	mov	dx,COMBUF+2	; get command line for echoing
 10870 00000726 E85124                  	call	CRPRINT
 10871                                  	;call	CRLF2
 10872                                  	;retn
 10873                                  	; 06/02/2023
 10874 00000729 E9F523                  	jmp	CRLF2
 10875                                  
 10876                                  ; The line was too long. Eat remainder of input text up until the CR
 10877                                  
 10878                                  TOOLONG:
 10879 0000072C 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 10880 0000072E 7403                    	jz	short LTLCONT	; Yes, continue
 10881 00000730 E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 10882                                  LTLCONT:
 10883 00000733 AA                      	stosb			; Terminate the command
 10884 00000734 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 10885                                  
 10886                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 10887                                  
 10888                                  NEEDPARM:
 10889 00000736 E80203                  	call	GETBATBYT	; get next character
 10890 00000739 3C25                    	cmp	al,'%'		; Check for two consecutive %
 10891 0000073B 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 10892 0000073D 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 10893 0000073F 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 10894                                  
 10895                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 10896                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 10897                                  ; see if the <something> has a terminating % and then look up the contents
 10898                                  ; in the environment.
 10899                                  
 10900                                  PAROK:
 10901 00000741 2C30                    	sub	al,'0'
 10902 00000743 7239                    	jb	short NEEDENV	; look for parameter in the environment
 10903 00000745 3C09                    	cmp	al,9
 10904 00000747 7735                    	ja	short NEEDENV
 10905                                  
 10906                                  ; We have found %<number>. This is taken from the parameters in the
 10907                                  ; allocated batch area.
 10908                                  
 10909 00000749 98                      	cbw
 10910 0000074A 89C3                    	mov	bx,ax		; move index into AX
 10911 0000074C D1E3                    	shl	bx,1		; convert word index into byte ptr
 10912 0000074E 06                      	push	es
 10913 0000074F 8E06[E701]              	mov	es,[Batch]
 10914                                  
 10915                                  ; The structure of the batch area is:
 10916                                  ;
 10917                                  ;   BYTE    type of segment
 10918                                  ;   DWORD   offset for next line
 10919                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 10920                                  ;   ASCIZ   file name (with . and ..)
 10921                                  ;   BYTES   CR-terminated parameters
 10922                                  ;   BYTE    0 flag to indicate end of parameters
 10923                                  ;
 10924                                  ; Get pointer to BX'th argument
 10925                                  
 10926                                  	;;mov	si,[es:bx+0Bh]
 10927                                  	; 05/02/2023
 10928                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 10929 00000753 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 10930 00000757 07                      	pop	es
 10931                                  
 10932                                  ; Is there a parameter here?
 10933                                  
 10934 00000758 83FEFF                  	cmp	si,-1		; Check if parameter exists
 10935 0000075B 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 10936 0000075D E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 10937                                  
 10938                                  ; Copy in the found parameter from batch segment
 10939                                  
 10940                                  YES_THERE_IS:
 10941 00000760 1E                      	push	ds
 10942 00000761 8E1E[E701]              	mov	ds,[Batch]
 10943 00000765 49                      	dec	cx		; Don't count '%' in line length
 10944                                  COPYPARM:
 10945 00000766 AC                      	lodsb			; From resident segment
 10946 00000767 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 10947 00000769 740F                    	je	short ENDPARAM
 10948 0000076B 41                      	inc	cx		; Inc the line length
 10949 0000076C 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10950 00000770 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 10951 00000772 AA                      	stosb
 10952 00000773 EBF1                    	jmp	short COPYPARM
 10953                                  
 10954                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 10955                                  ; line. We need to make sure that the tooLong code isn't fooled into
 10956                                  ; believing that we are at EOL. Clobber AL too.
 10957                                  
 10958                                  LINETOOL:
 10959 00000775 30C0                    	xor	al,al
 10960 00000777 1F                      	pop	ds
 10961 00000778 EBB2                    	jmp	short TOOLONG
 10962                                  
 10963                                  ; We have copied in an entire parameter. Go back for more
 10964                                  
 10965                                  ENDPARAM:
 10966 0000077A 1F                      	pop	ds
 10967 0000077B E950FF                  	jmp	RDBAT
 10968                                  
 10969                                  ; We have found % followed by something other than 0-9. We presume that there
 10970                                  ; will be a following % character. In between is an environment variable that
 10971                                  ; we will fetch and replace in the batch line with its value.
 10972                                  
 10973                                  NEEDENV:
 10974                                  	; MSDOS 6.0 COMMAND.COM
 10975                                  	; 05/02/2023 
 10976 0000077E 49                      	dec     cx 		;AN070; Don't count "%"
 10977                                  
 10978                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10979 0000077F 1E                      	push	ds
 10980 00000780 57                      	push	di
 10981                                  				; temp spot for name
 10982 00000781 BF[AC9F]                	mov	di,ID
 10983 00000784 0430                    	add	al,'0'		; reconvert character
 10984 00000786 AA                      	stosb			; store it in appropriate place
 10985                                  
 10986                                  ; loop getting characters until the next % is found or until EOL
 10987                                  
 10988                                  GETENV1:
 10989 00000787 E8B102                  	call	GETBATBYT	; get the byte
 10990 0000078A AA                      	stosb			; store it
 10991 0000078B 3C0D                    	cmp	al,0Dh		; EOL?
 10992 0000078D 7514                    	jne	short GETENV15	; no, see if it the term char
 10993                                  
 10994                                  ; The user entered a string with a % but no trailing %. We copy the string.
 10995                                  
 10996 0000078F 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 10997 00000794 BE[AC9F]                	mov	si,ID 		; point to buffer
 10998 00000797 5F                      	pop	di		; point to line buffer
 10999 00000798 0E                      	push	cs
 11000 00000799 1F                      	pop	ds
 11001 0000079A E88B02                  	call	STRCPY
 11002                                  	; 05/02/2023
 11003 0000079D 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 11004                                  	; 24/04/2023
 11005                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 11006 0000079F 1F                      	pop	ds
 11007 000007A0 E94AFF                  	jmp	SAVBATBYT
 11008                                  GETENV15:
 11009 000007A3 3C25                    	cmp	al,'%'		; terminating %?
 11010 000007A5 75E0                    	jne	short GETENV1	; no, go suck out more characters
 11011                                  
 11012                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 11013                                  ; This was the source of bug #1.
 11014                                  ;	dec	cx		;AN070; Don't count "%"
 11015                                  
 11016 000007A7 B03D                    	mov	al,'='		; terminate  with =
 11017 000007A9 268845FF                	mov	[es:di-1],al
 11018                                  
 11019                                  ; ID now either has a =-terminated string which we are to find in the
 11020                                  ; environment or a non =-terminated string which will not be found in the
 11021                                  ; environment.
 11022                                  
 11023                                  GETENV2:
 11024 000007AD BE[AC9F]                	mov	si,ID
 11025 000007B0 0E                      	push	cs
 11026 000007B1 1F                      	pop	ds		; DS:SI points to name
 11027 000007B2 51                      	push	cx
 11028 000007B3 E8AF20                  	call	find_name_in_environment
 11029 000007B6 59                      	pop	cx
 11030 000007B7 06                      	push	es
 11031 000007B8 1F                      	pop	ds
 11032 000007B9 0E                      	push	cs
 11033 000007BA 07                      	pop	es
 11034 000007BB 89FE                    	mov	si,di
 11035 000007BD 5F                      	pop	di		; get back pointer to command line
 11036                                  
 11037                                  ; If the parameter was not found, there is no need to perform any replacement.
 11038                                  ; We merely pretend that we've copied the parameter.
 11039                                  
 11040 000007BE 7203                    	jc	short GETENV6
 11041                                  
 11042                                  ; ES:DI points to command line being built
 11043                                  ; DS:SI points either to nul-terminated environment object AFTER =
 11044                                  
 11045 000007C0 E86502                  	call	STRCPY		; (let RdBat handle overflow)
 11046                                  	; 24/04/2022
 11047                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 11048                                  GETENV6:
 11049 000007C3 1F                      	pop	ds
 11050 000007C4 E907FF                  	jmp	RDBAT		; go back to batch file
 11051                                  
 11052                                  ; =============== S U B	R O U T	I N E =======================================
 11053                                  
 11054                                  ;   SkipToEOL - read from batch file until end of line
 11055                                  
 11056                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11057                                  SKIPTOEOL:
 11058 000007C7 F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
 11059                                  	;jnz	short SKIPTOEOL1  	
 11060                                  	;retn			; no batch file in effect
 11061                                  	
 11062 000007CD 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 11063                                  SKIPTOEOL1:
 11064 000007CF E86902                  	call	GETBATBYT
 11065 000007D2 3C0D                    	cmp	al,0Dh		; eol character?
 11066 000007D4 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 11067                                  SKIPTOEOL2:
 11068 000007D6 C3                      	retn
 11069                                  
 11070                                  ; =============== S U B	R O U T	I N E =======================================
 11071                                  
 11072                                  ;Break	<Allocate and deallocate the transient portion>
 11073                                  
 11074                                  ; Free Transient. Modify ES,AX,flags
 11075                                  
 11076                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11077                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 11078                                  FREE_TPA:
 11079 000007D7 06                      	push	es
 11080 000007D8 8E06[F39D]              	mov	es,[RESSEG]
 11081 000007DC 268E06[FA03]            	mov	es,[es:Res_Tpa]
 11082 000007E1 B449                    	mov	ah,49h
 11083                                  	;mov	ah,DEALLOC ; 49h
 11084 000007E3 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11085                                  			; ES = segment address of area to be freed
 11086 000007E5 07                      	pop	es
 11087 000007E6 C3                      	retn
 11088                                  
 11089                                  ; =============== S U B	R O U T	I N E =======================================
 11090                                  
 11091                                  ; Allocate transient. Modify AX,BX,DX,flags
 11092                                  
 11093                                  	; 06/02/2023
 11094                                  ALLOC_TPA:
 11095 000007E7 06                      	push	es
 11096 000007E8 8E06[F39D]              	mov	es,[RESSEG]
 11097 000007EC BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 11098 000007EF B448                    	mov	ah,48h
 11099                                  	;mov	ah,ALLOC ; 48h
 11100 000007F1 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11101                                  			; BX = number of 16-byte paragraphs desired
 11102 000007F3 53                      	push	bx	  	; Save size of block
 11103 000007F4 B448                    	mov	ah,48h
 11104                                  	;mov	ah,ALLOC ; 48h
 11105 000007F6 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11106                                  			; BX = number of 16-byte paragraphs desired
 11107                                  
 11108                                  ; Attempt to align TPA on 64K boundary
 11109                                  
 11110 000007F8 5B                      	pop	bx		; Restore size of block
 11111 000007F9 26A3[FA03]              	mov	[es:Res_Tpa],ax
 11112                                  				; Save segment to beginning of block
 11113 000007FD A3[019E]                	mov	[TRAN_TPA],ax
 11114                                  
 11115                                  ; Is the segment already aligned on a 64K boundary
 11116                                  
 11117 00000800 89C2                    	mov	dx,ax		; Save segment
 11118 00000802 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 11119 00000805 7507                    	jnz	short CALC_TPA
 11120 00000807 89D0                    	mov	ax,dx
 11121 00000809 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 11122 0000080C 7523                    	jnz	short NOROUND
 11123                                  CALC_TPA:
 11124 0000080E 89D0                    	mov	ax,dx
 11125 00000810 2500F0                  	and	ax,0F000h
 11126 00000813 050010                  	add	ax,1000h	; Round up to next 64K boundary
 11127 00000816 7219                    	jc	short NOROUND	; Memory wrap if carry set
 11128                                  
 11129                                  ; Make sure that new boundary is within allocated range
 11130                                  
 11131 00000818 268B16[FA03]            	mov	dx,[es:Res_Tpa]
 11132 0000081D 01DA                    	add	dx,bx		; Compute maximum address
 11133 0000081F 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 11134 00000821 720E                    	jb	short NOROUND
 11135                                  
 11136                                  ; Make sure that we won't overwrite the transient
 11137                                  
 11138 00000823 8CCB                    	mov	bx,cs		; CS is beginning of transient
 11139 00000825 39C3                    	cmp	bx,ax
 11140 00000827 7208                    	jb	short NOROUND
 11141                                  
 11142                                  ; The area from the 64K boundary to the beginning of the transient must
 11143                                  ; be at least 64K.
 11144                                  
 11145 00000829 29C3                    	sub	bx,ax
 11146                                  	;cmp	bx,4096
 11147 0000082B 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 11148 0000082F 7304                    	jnb	short ROUNDDONE
 11149                                  NOROUND:
 11150 00000831 26A1[FA03]              	mov	ax,[es:Res_Tpa]
 11151                                  ROUNDDONE:
 11152 00000835 26A3[EE03]              	mov	[es:LTpa],ax	; Re-compute everything
 11153 00000839 A3[F59D]                	mov	[TPA],ax
 11154 0000083C 89C3                    	mov	bx,ax
 11155 0000083E 8CC8                    	mov	ax,cs
 11156 00000840 29D8                    	sub	ax,bx
 11157 00000842 53                      	push	bx
 11158 00000843 BB1000                  	mov	bx,16
 11159 00000846 F7E3                    	mul	bx
 11160 00000848 5B                      	pop	bx
 11161 00000849 09D2                    	or	dx,dx
 11162 0000084B 7403                    	jz	short SAVSIZ2
 11163 0000084D B8FFFF                  	mov	ax,-1
 11164                                  SAVSIZ2:
 11165                                  
 11166                                  ; AX is the number of bytes free in the buffer between the resident and the
 11167                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 11168                                  
 11169 00000850 3D0002                  	cmp	ax,512
 11170 00000853 7603                    	jbe	short GOTSIZE2
 11171                                  	;and	ax,~1FFh
 11172 00000855 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 11173                                  GOTSIZE2:
 11174 00000858 A3[129E]                	mov	[BYTCNT],ax
 11175 0000085B 07                      	pop	es
 11176 0000085C C3                      	retn
 11177                                  
 11178                                  ; =============== S U B	R O U T	I N E =======================================
 11179                                  
 11180                                  ;Break	<BatCom - enter a batch file>
 11181                                  
 11182                                  ; The exec search has determined that the user has requested a batch file for
 11183                                  ; execution. We parse the arguments, create the batch segment, and signal
 11184                                  ; batch processing.
 11185                                  
 11186                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11187                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 11188                                  
 11189                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11190                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0868h
 11191                                  BATCOM:	
 11192                                  
 11193                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 11194                                  
 11195                                  ; Batch parameters are read with ES set to segment of resident part
 11196                                  
 11197                                  	; MSDOS 6.0
 11198 0000085D 8E06[F39D]              	mov	es,[RESSEG]
 11199                                  	;ASSUME	ES:RESGROUP
 11200                                  	;cmp	byte [es:Call_Batch_Flag],1
 11201 00000861 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11202                                  					;AN043; If in CALL,
 11203 00000867 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 11204                                  	;invoke	IOSET			; Set up any redirection
 11205 00000869 E86128                  	call	IOSET
 11206                                  skip_ioset:				;AN043;
 11207 0000086C E868FF                  	call	FREE_TPA		; G
 11208                                  	;cmp	byte [es:Call_Batch_Flag],1
 11209 0000086F 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11210 00000875 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 11211                                  
 11212                                  	; 12/02/2023
 11213                                  	; MSDOS 3.3
 11214                                  	;call	IOSET
 11215                                  	;mov	es,[RESSEG]
 11216                                  	;call	FREE_TPA
 11217                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 11218                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 11219                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 11220                                  
 11221                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11222                                  
 11223                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 11224                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 11225                                  ; Don't execute if in call
 11226                                  
 11227 00000877 E89608                  	call	FOROFF
 11228                                  GETECHO:
 11229 0000087A E83B2C                  	call	PipeOff
 11230 0000087D 26A0[3B02]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 11231 00000881 2401                    	and	al,1			; Save current echo state
 11232                                  
 11233 00000883 50                      	push	ax
 11234 00000884 31C0                    	xor	ax,ax
 11235 00000886 26F706[E701]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 11236 0000088D 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 11237 0000088F 26A1[E701]              	mov	ax,[es:Batch] 		; Get current batch segment
 11238                                  	;cmp	byte [es:Call_Batch_Flag],1
 11239 00000893 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11240 00000899 7408                    	jz	short LEAVEBAT
 11241                                  
 11242                                  ;  We are in a chained batch file, save batlast from previous batch segment
 11243                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 11244                                  
 11245 0000089B 06                      	push	es
 11246 0000089C 8EC0                    	mov	es,ax		; Get current batch segment
 11247                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 11248                                  				; Get previous batch segment
 11249                                  	; 12/02/2023
 11250                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 11251 0000089E 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 11252 000008A2 07                      	pop	es
 11253                                  LEAVEBAT:
 11254 000008A3 50                      	push	ax		; Keep segment until new one created
 11255                                  	;cmp	byte [es:Call_Batch_Flag],1
 11256 000008A4 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11257 000008AA 7403                    	jz	short STARTBAT
 11258 000008AC E82001                  	call	BATCHOFF
 11259                                  
 11260                                  ; Find length of batch file
 11261                                  
 11262                                  STARTBAT:
 11263 000008AF 26C606[4F02]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 11264 000008B5 BE[1B9D]                	mov	si,EXECPATH
 11265                                  
 11266                                  	; 12/02/2023
 11267                                  	; MSDOS 6.0
 11268 000008B8 B811B7                  	mov	ax,0B711h
 11269                                  	;mov	ax,AppendTruename
 11270                                  				;AN042; Get the real path where the batch file
 11271 000008BB CD2F                    	int	2Fh		;AN042;    was found with APPEND
 11272 000008BD B44E                    	mov	ah,4Eh
 11273                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 11274 000008BF 89F2                    	mov	dx,si		;AN042; Get the string
 11275 000008C1 B91300                  	mov	cx,13h
 11276                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 11277 000008C4 CD21                    	int	21h		;AN042;
 11278                                  
 11279                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11280 000008C6 E8F328                  	call	dstrlen
 11281                                  ;
 11282                                  ; Allocate batch area:
 11283                                  ;   BYTE    type of segment
 11284                                  ;   WORD    segment of last batch file
 11285                                  ;   WORD    segment for FOR command
 11286                                  ;   BYTE    FOR flag state on entry to batch file
 11287                                  ;   DWORD   offset for next line
 11288                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 11289                                  ;   ASCIZ   file name (with . and ..)
 11290                                  ;   BYTES   CR-terminated parameters
 11291                                  ;   BYTE    0 flag to indicate end of parameters
 11292                                  ;
 11293                                  ; We allocate the maximum size for the command line and use setblock to shrink
 11294                                  ; later when we've squeezed out the extra
 11295                                  ;
 11296 000008C9 89CB                    	mov	bx,cx		; length of file name.
 11297                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 11298                                  	; 12/02/2023
 11299                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33) 
 11300                                  	; 25/04/2023
 11301 000008CB 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 11302                                  					; structure + max len + round up
 11303 000008CF 51                      	push	cx
 11304 000008D0 B104                    	mov	cl,4
 11305 000008D2 D3EB                    	shr	bx,cl		; convert to paragraphs
 11306 000008D4 53                      	push	bx		; Save size of batch segment
 11307 000008D5 B448                    	mov	ah,48h
 11308                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 11309 000008D7 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11310                                  				; BX = number of 16-byte paragraphs desired
 11311 000008D9 5B                      	pop	bx		; Get size of batch segment
 11312                                  
 11313                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 11314                                  ; the batch segment. This may not be true, however, in a multitasking system.
 11315                                  ; G This error will occur with nesting of batch files. We also need to
 11316                                  ; G make sure that we don't overlay the transient.
 11317                                  
 11318 000008DA 7221                    	jc	short MEM_ERROR	;G not enough memory - exit
 11319                                  
 11320 000008DC 50                      	push	ax		;G save batch segment
 11321 000008DD 01D8                    	add	ax,bx		;G get end of batch segment
 11322 000008DF 83C020                  	add	ax,20h		;G add some tpa work area
 11323 000008E2 8CCB                    	mov	bx,cs		;G get the transient segment
 11324                                  
 11325                                  	; MSDOS 6.0
 11326                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 11327                                  ; M006; batchseg is always above the transient. We need to change this code
 11328                                  ; M006; to only check for an overlap
 11329                                  
 11330                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 11331                                  	; 12/02/2023
 11332                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 11333                                  	;mov	dx,TRANSPACEEND		
 11334                                  	;add	dx,15		;round up para; M006
 11335 000008E4 BA10AA                  	mov	dx,TRANSPACEEND+15
 11336                                  
 11337 000008E7 D3EA                    	shr	dx,cl		;para size of transient; M006
 11338 000008E9 01DA                    	add	dx,bx		;dx = top of transient; M006
 11339                                  
 11340 000008EB 39D8                    	cmp	ax,bx		; M006
 11341 000008ED 7211                    	jb	short ENOUGH_MEM
 11342                                  				; Batchseg below transient
 11343                                  				; enough memory ; M006
 11344 000008EF 39D0                    	cmp	ax,dx		; M006
 11345 000008F1 770D                    	ja	short ENOUGH_MEM	
 11346                                  				; Batchseg above transient
 11347                                  				; enough memory ; M006
 11348                                  
 11349                                  ; M006; Batchseg overlaps transient -- insufficient memory
 11350                                  
 11351 000008F3 58                      	pop	ax		; restore ax; M006
 11352                                  
 11353                                  	; 12/02/2023
 11354                                  	; MSDOS 3.3
 11355                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 11356                                  ; M006;	pop	ax		;G get batch segment back
 11357                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 11358                                  
 11359                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11360 000008F4 06                      	push	es		;G no we're hitting the transient
 11361 000008F5 8EC0                    	mov	es,ax
 11362 000008F7 B80049                  	mov	ax,4900h
 11363                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 11364 000008FA CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11365                                  			; ES = segment address of area to be freed
 11366 000008FC 07                      	pop	es
 11367                                  MEM_ERROR:
 11368 000008FD E9B800                  	jmp	NO_MEMORY	;G Set up for message and exit
 11369                                  
 11370                                  ENOUGH_MEM:
 11371                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 11372                                  	; MSDOS 6.0
 11373 00000900 58                      	pop	ax		; restore ax; M006
 11374                                  
 11375                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11376 00000901 26A3[E701]              	mov	[es:Batch],ax
 11377 00000905 E8DFFE                  	call	ALLOC_TPA
 11378                                  
 11379                                  ; Initialize batch segment
 11380                                  
 11381 00000908 5A                      	pop	dx		; length of name
 11382 00000909 58                      	pop	ax		;G get saved batch segment back
 11383 0000090A 26FF06[4C02]            	inc	word [es:Nest]	;G increment # batch files in progress
 11384 0000090F 06                      	push	es
 11385 00000910 268E06[E701]            	mov	es,[es:Batch]
 11386                                  	;mov	byte [ES:0],0
 11387                                  				; signal batch file type
 11388 00000915 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 11389                                  	;;mov	[es:2],ax	; MSDOS 3.3
 11390                                  				;G save segment of last batch file
 11391                                  	;mov	[es:3],ax	; MSDOS 6.0
 11392 0000091B 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 11393 0000091F 1E                      	push	ds
 11394 00000920 8E1E[F39D]              	mov	ds,[RESSEG]	;G set to resident data
 11395                                  
 11396 00000924 31C0                    	xor	ax,ax
 11397 00000926 8A1E[4902]              	mov	bl,[ForFlag]	;G get the current FOR state
 11398                                  	;;mov	[es:6],bl	; MSDOS 3.3
 11399                                  				;G save it in the batch segment
 11400                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 11401 0000092A 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 11402 0000092F F6C3FF                  	test	bl,-1 ; 0FFh	;G are we in a FOR?
 11403 00000932 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 11404                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11405                                  	;mov	byte [ForFlag],0 ;G reset forflag
 11406                                  	; 26/07/2024
 11407 00000934 A2[4902]                	mov	[ForFlag],al ; 0
 11408 00000937 A1[4A02]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11409                                  FOR_NOT_ON:
 11410                                  	;;mov	[es:4],ax	; MSDOS 3.3
 11411                                  				;G save FOR segment in batch segment
 11412                                  	;mov	[es:5],ax	; MSDOS 6.0		
 11413 0000093A 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 11414 0000093E 31C0                    	xor	ax,ax
 11415 00000940 A3[4A02]                	mov	[ForPtr],ax	;G make sure for segment is not active
 11416 00000943 8A1E[3B02]              	mov	bl,[EchoFlag]
 11417 00000947 1F                      	pop	ds
 11418                                  	;mov	[es:1],bl 
 11419                                  				 ;G save echo state of parent
 11420 00000948 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 11421                                  ;SR;
 11422                                  ; Initialize the new BatchEOF flag we have added to 0
 11423                                  
 11424                                  	; MSDOS 6.0
 11425                                  	;mov	byte [es:2],0
 11426 0000094D 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 11427                                  
 11428                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 11429 00000953 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 11430                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 11431 00000957 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 11432                                  
 11433                                  ; Initialize pointers
 11434                                  
 11435 0000095B 48                      	dec	ax		; put -1 into AX
 11436                                  	;;mov	di,0Bh  ; MSDOS 3.3
 11437                                  				; point to parm area
 11438                                  	;mov	di,0Ch	; MSDOS 6.0
 11439 0000095C BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 11440 0000095F 89FB                    	mov	bx,di
 11441 00000961 B90A00                  	mov	cx,10
 11442 00000964 F3AB                    	rep stosw		; Init to no parms
 11443                                  
 11444                                  ; Move in batch file name
 11445                                  
 11446 00000966 89D1                    	mov	cx,dx
 11447 00000968 F3A4                    	rep	movsb
 11448                                  
 11449                                  ; Now copy the command line into batch segment, parsing the arguments along
 11450                                  ; the way. Segment will look like this:
 11451                                  ;
 11452                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 11453                                  ;
 11454                                  ; or, in the case of fewer arguments:
 11455                                  ;
 11456                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 11457                                  
 11458 0000096A BE[549C]                	mov	si,COMBUF+2
 11459                                  	;mov	cx,10		; at most 10 arguments
 11460                                  	; 07/06/2023
 11461 0000096D B10A                    	mov	cl,10
 11462                                  EACHPARM:
 11463 0000096F E8BC21                  	call	scanoff		; skip to argument
 11464                                  
 11465                                  ; AL is first non-delimiter. DS:SI points to char = AL
 11466                                  
 11467 00000972 3C0D                    	cmp	al,0Dh		; end of road?
 11468 00000974 741D                    	jz	short HAVPARM	; yes, no more arguments
 11469                                  
 11470                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 11471                                  
 11472 00000976 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 11473                                  
 11474                                  ; Go into allocated piece and stick in new argument pointer.
 11475                                  
 11476 00000978 26893F                  	mov	[es:bx],di	; store batch pointer
 11477 0000097B 83C302                  	add	bx,2		; advance arg counter
 11478                                  
 11479                                  ; Move the parameter into batch segment
 11480                                  
 11481                                  MOVPARM:
 11482 0000097E AC                      	lodsb			; get byte
 11483 0000097F E8B421                  	call	DELIM		; if delimiter
 11484 00000982 7407                    	jz	short ENDPARM	; then done with parm
 11485 00000984 AA                      	stosb			; store byte
 11486 00000985 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 11487 00000987 740A                    	jz	short HAVPARM	; but end of parm list, finish
 11488 00000989 EBF3                    	jmp	short MOVPARM
 11489                                  
 11490                                  ; We have copied a parameter up until the first separator.
 11491                                  ; Terminate it with CR.
 11492                                  
 11493                                  ENDPARM:
 11494 0000098B B00D                    	mov	al,0Dh
 11495 0000098D AA                      	stosb
 11496 0000098E E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 11497 00000990 49                      	dec	cx		; remember that we've seen one.	
 11498 00000991 EBDC                    	jmp	short EACHPARM
 11499                                  
 11500                                  ; We have parsed the entire line. Terminate the arg list
 11501                                  
 11502                                  HAVPARM:
 11503 00000993 30C0                    	xor	al,al		; Nul terminate the parms
 11504 00000995 AA                      	stosb
 11505                                  
 11506                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 11507                                  ; into paragraphs and setblock to the appropriate size
 11508                                  
 11509 00000996 8D5D0F                  	lea	bx,[di+15]
 11510 00000999 B104                    	mov	cl,4
 11511 0000099B D3EB                    	shr	bx,cl
 11512 0000099D B44A                    	mov	ah,4Ah
 11513                                  	;mov	ah,SETBLOCK ; 4Ah
 11514 0000099F CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 11515                                  			; ES = segment address of block	to change
 11516                                  			; BX = new size	in paragraphs
 11517 000009A1 07                      	pop	es
 11518 000009A2 06                      	push	es
 11519 000009A3 1F                      	pop	ds		; Simply batch FCB setup
 11520 000009A4 833E[4302]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 11521 000009A9 7506                    	jne	short NOBATSING
 11522 000009AB C706[4302]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 11523                                  
 11524                                  NOBATSING:
 11525                                  
 11526                                  ; Enter the batch file with the current echo state
 11527                                  
 11528 000009B1 58                      	pop	ax		; Get original echo state
 11529 000009B2 A2[3B02]                	mov	[EchoFlag],al	; restore it
 11530 000009B5 E94CF7                  	jmp	TCOMMAND
 11531                                  
 11532                                  ; The following is executed if there isn't enough memory for batch segment
 11533                                  
 11534                                  NO_MEMORY:
 11535 000009B8 5A                      	pop	dx		; even up our stack 
 11536 000009B9 58                      	pop	ax
 11537 000009BA 58                      	pop	ax
 11538 000009BB E829FE                  	call	ALLOC_TPA	; reallocate memory
 11539                                  
 11540                                  	; 12/02/2023
 11541                                  	; MSDOS 3.3
 11542                                  	;mov	dx,INSFMEMMESPTR
 11543                                  	;jmp	CERROR
 11544                                  
 11545                                  	; MSDOS 6.0
 11546                                  	;mov	byte [msg_disp_class],1
 11547 000009BE C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 11548                                  				;AN000; set up extended error msg class
 11549                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11550 000009C3 BA[D091]                	mov	dx,extend_buf_ptr
 11551                                  	;			;AC000; get extended message pointer
 11552                                  	;mov	word [extend_buf_ptr],8
 11553 000009C6 C706[D091]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 11554                                  				;AN000; get message number in control block
 11555 000009CC E9D324                  	jmp	cerror		;g print error message and go...
 11556                                  
 11557                                  ; =============== S U B	R O U T	I N E =======================================
 11558                                  
 11559                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11560                                  BATCHOFF:
 11561 000009CF 50                      	push	ax
 11562 000009D0 06                      	push	es
 11563 000009D1 1E                      	push	ds
 11564 000009D2 53                      	push	bx
 11565                                  
 11566 000009D3 2E8E06[F39D]            	mov	es,[cs:RESSEG]
 11567                                  	;mov	ds,[cs:RESSEG]
 11568                                  	; 26/07/2024
 11569 000009D8 06                      	push	es
 11570 000009D9 1F                      	pop	ds
 11571                                  
 11572 000009DA A1[E701]                	mov	ax,[Batch]	; Free the batch segment
 11573 000009DD 09C0                    	or	ax,ax
 11574 000009DF 7442                    	jz	short NOTFREE
 11575                                  
 11576 000009E1 06                      	push	es
 11577 000009E2 8EC0                    	mov	es,ax
 11578 000009E4 F606[3B02]01            	test	byte [EchoFlag],1
 11579                                  				;G Is echo on?
 11580 000009E9 7505                    	jnz	short ECHO_LAST_LINE
 11581                                  				;G Yes - echo last line in file
 11582                                  	;mov	byte [SUPPRESS],0
 11583 000009EB C606[3C02]00            	mov	byte [Suppress],NO_ECHO
 11584                                  				;G no - don't echo last line in file	
 11585                                  ECHO_LAST_LINE:
 11586                                  	;mov	bl,[es:1]
 11587 000009F0 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 11588                                  				; G get echo state
 11589 000009F5 881E[3B02]              	mov	[EchoFlag],bl
 11590                                  				; G  and restore it
 11591                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 11592                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 11593 000009F9 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 11594                                  				;G Get FOR segment
 11595 000009FE 891E[4A02]              	mov	[ForPtr],bx	;G  and restore it
 11596                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 11597                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 11598 00000A02 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 11599                                  				;G Get FOR flag
 11600 00000A07 881E[4902]              	mov	[ForFlag],bl
 11601                                  				;G  and restore it
 11602                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 11603                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 11604 00000A0B 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 11605                                  				;G  Get old batch segment
 11606                                  
 11607 00000A10 B449                    	mov	ah,49h
 11608                                  	;mov	ah,DEALLOC ; 49h
 11609 00000A12 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11610                                  			; ES = segment address of area to be freed
 11611 00000A14 07                      	pop	es
 11612 00000A15 891E[5002]              	mov	[Next_Batch],bx	;G reset batch segment	
 11613 00000A19 26FF0E[4C02]            	dec	word [es:Nest]
 11614 00000A1E 31C0                    	xor	ax,ax
 11615 00000A20 A3[E701]                	mov	[Batch],ax	; No batch in progress
 11616                                  NOTFREE:
 11617 00000A23 5B                      	pop	bx
 11618 00000A24 1F                      	pop	ds
 11619 00000A25 07                      	pop	es
 11620 00000A26 58                      	pop	ax
 11621 00000A27 C3                      	retn
 11622                                  
 11623                                  ; =============== S U B	R O U T	I N E =======================================
 11624                                  
 11625                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11626                                  
 11627                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 11628                                  ;	Entry : DS:SI ==> source string
 11629                                  ;		ES:DI ==> destination string
 11630                                  ;		CX = current length of destination string
 11631                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 11632                                  
 11633                                  	; 12/02/2023	
 11634                                  	; MSDOS 3.3
 11635                                  ;STRCPY:
 11636                                  	;push	ax
 11637                                  ;CCYCLE:
 11638                                  	;lodsb
 11639                                  	;stosb
 11640                                  	;or	al,al
 11641                                  	;jnz	short CCYCLE
 11642                                  	;pop	ax
 11643                                  	;retn
 11644                                  
 11645                                  ;Procedure StrCpy,NEAR
 11646                                  
 11647                                  	; 12/02/2023
 11648                                  	; MSDOS 6.0
 11649                                  STRCPY:
 11650 00000A28 50                      	push	ax
 11651                                  ccycle:
 11652 00000A29 AC                      	lodsb
 11653 00000A2A 41                      	inc	cx
 11654                                  	;cmp	cx,128
 11655 00000A2B 81F98000                	cmp	cx,COMBUFLEN
 11656                                  	;jb	short ccopy
 11657                                  	;stc			; set carry to signal error
 11658                                  	;jmp	short ccend
 11659                                  	; 12/02/2023
 11660 00000A2F F5                      	cmc
 11661 00000A30 7205                    	jc	short ccend
 11662                                  ccopy:
 11663 00000A32 AA                      	stosb
 11664 00000A33 08C0                    	or	al,al
 11665 00000A35 75F2                    	jnz	short ccycle
 11666                                  ccend:
 11667 00000A37 49                      	dec	cx		; discount extra byte
 11668 00000A38 4F                      	dec	di		; back up pointer
 11669 00000A39 58                      	pop	ax
 11670 00000A3A C3                      	retn			; return carry clear
 11671                                  
 11672                                  ;EndProc StrCpy
 11673                                  
 11674                                  ;============================================================================
 11675                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 11676                                  ;============================================================================
 11677                                  ; 12/10/2018 - Retro DOS v3.0
 11678                                  
 11679                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 11680                                  
 11681                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11682                                  
 11683                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 11684                                  
 11685                                  ; =============== S U B	R O U T	I N E =======================================
 11686                                  
 11687                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 11688                                  
 11689                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 11690                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 11691                                  ; AH, DX destroyed.
 11692                                  
 11693                                  GETBATBYT:
 11694 00000A3B 53                      	push	bx
 11695 00000A3C 51                      	push	cx
 11696 00000A3D 1E                      	push	ds
 11697 00000A3E F606[3102]FF            	test	byte [Batch_Abort],-1
 11698                                  	;jnz	short BATEOF
 11699                                  	; 14/02/2023
 11700 00000A43 7403                    	jz	short getbatbyt1
 11701 00000A45 E9D100                  	jmp	BATEOF
 11702                                  getbatbyt1:
 11703 00000A48 F706[E701]FFFF          	test	word [Batch],-1
 11704                                  	;jz	short BATEOF
 11705                                  	; 14/02/2023
 11706 00000A4E 7503                    	jnz	short getbatbyt2
 11707 00000A50 E9C600                  	jmp	BATEOF
 11708                                  getbatbyt2:
 11709 00000A53 06                      	push	es
 11710 00000A54 8E06[E701]              	mov	es,[Batch]
 11711                                  
 11712                                  	; MSDOS 6.0
 11713                                  ;M020;
 11714                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 11715                                  ;try to read from the batchfile again.
 11716                                  
 11717                                  	;cmp	byte [es:2],0
 11718 00000A58 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11719                                  				;already reached EOF?	;M020
 11720 00000A5E 7403                    	jz	short not_eof	;no, read batch file	;M020
 11721 00000A60 E99C00                  	jmp	At_EOF		;yes, no more reads	;M020
 11722                                  not_eof:						;M020
 11723                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11724                                  	;add	word [es:8],1	; MSDOS 6.0
 11725 00000A63 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 11726                                  	;adc	word [es:10],0	; MSDOS 6.0
 11727 00000A69 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 11728 00000A6F 07                      	pop	es
 11729                                  
 11730                                  ; See if we have bytes buffered...
 11731                                  
 11732 00000A70 8CC8                    	mov	ax,cs
 11733 00000A72 8ED8                    	mov	ds,ax
 11734 00000A74 8B1E[B9A9]              	mov	bx,[BATBUFPOS]
 11735 00000A78 83FBFF                  	cmp	bx,-1
 11736 00000A7B 7540                    	jnz	short UNBUF
 11737                                  
 11738                                  ; There are no bytes in the buffer. Let's try to fill it up.
 11739                                  
 11740 00000A7D BA[BBA9]                	mov	dx,BATBUF
 11741 00000A80 8B0E[7597]              	mov	cx,[BATBUFLEN] ; max to read.
 11742 00000A84 8B1E[E5A1]              	mov	bx,[BATHAND]
 11743                                  	; 14/02/2023
 11744 00000A88 B43F                    	mov	ah,3Fh
 11745                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 11746 00000A8A CD21                    	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 11747                                  			; BX = file handle,CX = number	of bytes to read
 11748                                  			; DS:DX	-> buffer
 11749                                  	; MSDOS 6.0
 11750 00000A8C 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 11751                                  	;invoke	get_ext_error_number	;AN022; get the error
 11752 00000A8E E8B117                  	call	get_ext_error_number
 11753 00000A91 1E                      	push	ds			;AN022; save local segment
 11754 00000A92 8E1E[F39D]              	mov	ds,[RESSEG]		;AN022; get resident segment
 11755                                  	;assume ds:resgroup		;AN022;
 11756 00000A96 89C2                    	mov	dx,ax			;AN022; put error in DX
 11757                                  	;invoke	output_batch_name	;AN022; set up to print the error
 11758 00000A98 E861FB                  	call	output_batch_name
 11759 00000A9B 1F                      	pop	ds			;AN022;
 11760                                  	;assume	ds:trangroup		;AN022;
 11761                                  	;invoke	std_eprintf		;AN022; print out the error
 11762 00000A9C E8684A                  	call	std_eprintf
 11763                                  	;mov	byte ptr combuf+2,end_of_line_in
 11764 00000A9F C606[549C]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 11765                                  	;				;AN022; terminate the batch line for parsing
 11766                                  	;mov	byte ptr combuf+3,end_of_line_out 
 11767 00000AA4 C606[559C]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 11768                                  	;				;AN022; terminate the batch line for output
 11769                                  ;M020;
 11770                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 11771                                  ;error is never hit (and it shouldn't be)
 11772                                  
 11773 00000AA9 8E1E[F39D]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 11774 00000AAD EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 11775                                  bat_read_ok:				;AN022;
 11776                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11777 00000AAF 89C1                    	mov	cx,ax
 11778                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 11779                                  	; 14/02/2023
 11780 00000AB1 E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 11781 00000AB3 890E[DBA9]              	mov	[BATBUFEND],cx
 11782 00000AB7 31DB                    	xor	bx,bx
 11783 00000AB9 891E[B9A9]              	mov	[BATBUFPOS],bx
 11784                                  
 11785                                  	; Buffered bytes!
 11786                                  UNBUF:
 11787 00000ABD 8A87[BBA9]              	mov	al,[BATBUF+bx]		; get next byte
 11788 00000AC1 43                      	inc	bx
 11789 00000AC2 3B1E[DBA9]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 11790 00000AC6 7203                    	jb	short SETBUFPOS
 11791 00000AC8 BBFFFF                  	mov	bx,-1
 11792                                  SETBUFPOS:
 11793 00000ACB 891E[B9A9]              	mov	[BATBUFPOS],bx
 11794 00000ACF 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 11795 00000AD1 7575                    	jne	short GETBYTEDONE
 11796                                  
 11797                                  ;We get here only when we hit an EOF
 11798                                  	
 11799                                  	; MSDOS 6.0
 11800                                  BATEOFDS:
 11801                                  ;SR;
 11802                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 11803                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 11804                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 11805                                  ;batch processing is turned off before the last line is processed and so 
 11806                                  ;this line would never be executed. 
 11807                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 11808                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 11809                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 11810                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 11811                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 11812                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 11813                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 11814                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 11815                                  ;during this call, and there was a CR-LF previously, we are going to fake
 11816                                  ;another redundant CR-LF. There is no work-around I can think of.
 11817                                  ; 	I would love to restructure this entire routine and its caller to
 11818                                  ;make the flow really easy to understand but I guess this will have to wait.
 11819                                  ;
 11820 00000AD3 06                      	push	es
 11821 00000AD4 8E06[F39D]              	mov	es,[RESSEG]
 11822                                  ;SR;
 11823                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 11824                                  ;or BatchEOF == 1 now), then do not do the LF check.
 11825                                  ;
 11826 00000AD8 268E06[E701]            	mov	es,[es:Batch]
 11827                                  	;cmp	byte [es:2],0
 11828 00000ADD 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11829 00000AE3 7516                    	jnz	short crpresent
 11830                                  
 11831                                  	;inc	byte [es:2]
 11832 00000AE5 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 11833                                  					;match the dec following
 11834 00000AEA 8B1E[DBA9]              	mov	bx,[BATBUFEND]
 11835 00000AEE 80BF[BAA9]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 11836 00000AF3 7406                    	je	short crpresent		;yes, no need to fake it
 11837                                  
 11838                                  	;add	byte [es:2],3
 11839 00000AF5 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 11840                                  					;BatchEOF == 4 to fake CR-LF
 11841                                  crpresent:
 11842                                  ;;	;pop	es
 11843                                  
 11844                                  	;ASSUME	DS:TranGroup
 11845                                  	; 14/02/2023
 11846 00000AFB 8E1E[F39D]              	mov	ds,[RESSEG]
 11847                                  	;ASSUME	DS:ResGroup
 11848                                  ;SR;
 11849                                  ; The shift operation is done here to replace the decrement. This is because
 11850                                  ;we can jump to this label directly from above when bogus calls are made to
 11851                                  ;this routine even after batch processing is turned off. The shift ensures
 11852                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 11853                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 11854                                  ;calls.
 11855                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 11856                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 11857                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 11858                                  ;turning batch processing off.
 11859                                  
 11860                                  At_EOF:					;new label added ;M020
 11861                                  	;shr	byte [es:2],1
 11862 00000AFF 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 11863                                  					;decrement the flag
 11864 00000B04 7412                    	jz	short turn_off		;zero,turn batch off
 11865                                  	;cmp	byte [es:2],1
 11866 00000B06 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 11867 00000B0C 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 11868                                  ;
 11869                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 11870                                  ;
 11871 00000B0E B00D                    	mov	al,0Dh			;return fake CR.
 11872 00000B10 07                      	pop	es
 11873 00000B11 EB35                    	jmp	short GETBYTEDONE
 11874                                  ret_lf:
 11875 00000B13 B00A                    	mov	al,0Ah			;return fake LF
 11876 00000B15 07                      	pop	es
 11877 00000B16 EB30                    	jmp	short GETBYTEDONE		
 11878                                  turn_off:
 11879 00000B18 07                      	pop	es
 11880                                  ;BATEOF:
 11881                                  	; MSDOS 3.3
 11882                                  ;TURN_OFF:
 11883                                  	;mov	ds,[RESSEG]
 11884                                  
 11885                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11886                                  BATEOF:
 11887 00000B19 E8B3FE                  	call	BATCHOFF
 11888 00000B1C E8CC02                  	call	BATCLOSE
 11889                                  
 11890                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 11891                                  
 11892                                  ;SR; BugBug
 11893                                  ; There is a good reason why this carriage return is being returned here. 
 11894                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 11895                                  ;of the way the caller is structured, a fake CR has to be returned again on
 11896                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 11897                                  ;results in an extra linefeed after the batchfile is run if the last line of
 11898                                  ;the batchfile already had a CR-LF. 
 11899                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 11900                                  ;the end-of-line. This CR is to mark the end-of-file.
 11901                                  
 11902 00000B1F B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 11903 00000B21 F606[3102]FF            	test	byte [Batch_Abort],-1
 11904 00000B26 C606[3102]00            	mov	byte [Batch_Abort],0
 11905 00000B2B 7407                    	jz	short CONT_GET_BYT
 11906 00000B2D BF[549C]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 11907 00000B30 31C9                    	xor	cx,cx			; zero line length
 11908 00000B32 EB14                    	jmp	short GETBYTEDONE
 11909                                  CONT_GET_BYT:
 11910 00000B34 833E[4302]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 11911 00000B39 750D                    	jne	short GETBYTEDONE
 11912 00000B3B 833E[4C02]00            	cmp	word [Nest],0		;G See if we have nested batch files
 11913 00000B40 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 11914 00000B42 C706[4302]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 11915                                  GETBYTEDONE:
 11916 00000B48 1F                      	pop	ds
 11917 00000B49 59                      	pop	cx
 11918 00000B4A 5B                      	pop	bx
 11919 00000B4B C3                      	retn
 11920                                  
 11921                                  ; ---------------------------------------------------------------------------
 11922                                  
 11923                                  ;break	<$If - conditional execution>
 11924                                  
 11925                                  	; 17/04/2023
 11926                                  ;IFERRORP:
 11927                                  ;	pop	ax
 11928                                  ;IFERROR:
 11929                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11930                                  ;FORERROR:
 11931                                  ;	mov	dx,SYNTMES_PTR
 11932                                  ;	jmp	cerror
 11933                                  
 11934                                  ; ---------------------------------------------------------------------------
 11935                                  
 11936                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11937                                  	;
 11938                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11939                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0B69h
 11940                                  _$IF:
 11941                                  	; MSDOS 6.0
 11942                                  ; Turn off any pipes in progress.
 11943 00000B4C 1E                      	push	ds			;AN004; save local DS
 11944 00000B4D 8E1E[F39D]              	mov	ds,[RESSEG]		;AN004; get resident segment
 11945                                  	;assume	ds:resgroup		;AN004;
 11946 00000B51 803E[B602]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 11947 00000B56 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 11948                                  	;invoke	PipeDel 		;AN004; turn off piping
 11949 00000B58 E8E226                  	call	PIPEDEL	
 11950                                  IFNoPipe:				;AN004;
 11951 00000B5B 1F                      	pop	ds			;AN004; get local DS back
 11952                                  	;assume	ds:trangroup		;AN004;
 11953                                  
 11954                                  	; MSDOS 3.3 (&MSDOS 6.0)
 11955 00000B5C C606[049E]00            	mov	byte [IFNOTFLAG],0
 11956 00000B61 C706[8DA8]0000          	mov	word [IF_NOT_COUNT],0
 11957 00000B67 BE8100                  	mov	si,81h
 11958                                  IFREENT:
 11959 00000B6A E8C11F                  	call	scanoff
 11960 00000B6D 3C0D                    	cmp	al,0Dh
 11961 00000B6F 743C                    	je	short IFERROR
 11962 00000B71 89F5                    	mov	bp,si
 11963 00000B73 BF[C395]                	mov	di,IFTAB		; Prepare to search if table	
 11964                                  	;mov	ch,0
 11965                                  	; 17/04/2023
 11966 00000B76 30ED                    	xor	ch,ch
 11967                                  IFINDCOM:
 11968 00000B78 89EE                    	mov	si,bp
 11969 00000B7A 8A0D                    	mov	cl,[di]
 11970 00000B7C 47                      	inc	di
 11971 00000B7D E33E                    	jcxz	IFSTRING
 11972 00000B7F EB02                    	jmp	short FIRSTCOMP
 11973                                  IFCOMP:
 11974 00000B81 7510                    	jnz	short IF_DIF
 11975                                  FIRSTCOMP:
 11976 00000B83 AC                      	lodsb
 11977 00000B84 268A25                  	mov	ah,[es:di]
 11978 00000B87 47                      	inc	di
 11979 00000B88 38E0                    	cmp	al,ah
 11980 00000B8A 7405                    	je	short IFLP
 11981 00000B8C 80CC20                  	or	ah,20h			; Try lower case
 11982 00000B8F 38E0                    	cmp	al,ah
 11983                                  IFLP:
 11984 00000B91 E2EE                    	loop	IFCOMP
 11985                                  IF_DIF:
 11986 00000B93 9F                      	lahf
 11987 00000B94 01CF                    	add	di,cx			; Bump to next position without affecting flags
 11988 00000B96 8B1D                    	mov	bx,[di]			; Get handler address
 11989 00000B98 47                      	inc	di
 11990 00000B99 47                      	inc	di
 11991 00000B9A 9E                      	sahf
 11992 00000B9B 75DB                    	jnz	short IFINDCOM
 11993 00000B9D AC                      	lodsb
 11994 00000B9E 3C0D                    	cmp	al,0Dh
 11995                                  IFERRJ:
 11996 00000BA0 740B                    	jz	short IFERROR
 11997 00000BA2 E8911F                  	call	DELIM
 11998 00000BA5 75D1                    	jnz	short IFINDCOM
 11999 00000BA7 E8841F                  	call	scanoff
 12000 00000BAA FFE3                    	jmp	bx
 12001                                  
 12002                                  	; 17/04/2023
 12003                                  IFERRORP:
 12004 00000BAC 58                      	pop	ax
 12005                                  IFERROR:
 12006                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 12007                                  FORERROR:
 12008 00000BAD BA[6892]                	mov	dx,SYNTMES_PTR
 12009 00000BB0 E9EF22                  	jmp	cerror
 12010                                  
 12011                                  IFNOT:
 12012 00000BB3 F616[049E]              	not	byte [IFNOTFLAG]
 12013 00000BB7 FF06[8DA8]              	inc	word [IF_NOT_COUNT]
 12014 00000BBB EBAD                    	jmp	short IFREENT
 12015                                  
 12016                                  ; We are comparing two strings for equality. First, find the end of the
 12017                                  ; first string.
 12018                                  
 12019                                  IFSTRING:
 12020 00000BBD 56                      	push	si			; save away pointer for later compare
 12021 00000BBE 31C9                    	xor	cx,cx			; count of chars in first string
 12022                                  FIRST_STRING:
 12023 00000BC0 AC                      	lodsb				; get character
 12024 00000BC1 3C0D                    	cmp	al,0Dh			; end of line?
 12025 00000BC3 74E7                    	jz	short IFERRORP		; yes => error
 12026 00000BC5 E86E1F                  	call	DELIM			; is it a delimiter?
 12027 00000BC8 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 12028 00000BCA 41                      	inc	cx			; remember 1 byte for the length
 12029 00000BCB EBF3                    	jmp	short FIRST_STRING 	; go back for more
 12030                                  EQUAL_CHECK:
 12031 00000BCD 3C3D                    	cmp	al,'='			; is char we have an = sign?
 12032 00000BCF 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 12033 00000BD1 3C0D                    	cmp	al,0Dh			; end of line?
 12034 00000BD3 74D7                    	je	short IFERRORP		; yes, syntax error
 12035 00000BD5 AC                      	lodsb				; get next char
 12036 00000BD6 EBF5                    	jmp	short EQUAL_CHECK
 12037                                  
 12038                                  ; The first = has been found. The next char had better be an = too.
 12039                                  
 12040                                  EQUAL_CHECK2:
 12041 00000BD8 AC                      	lodsb				; get potential = char
 12042 00000BD9 3C3D                    	cmp	al,'='			; is it good?	
 12043                                  	;jnz	short IFERRPJ		; no, error
 12044                                  	; 17/04/2023
 12045 00000BDB 75CF                    	jne	short IFERRORP
 12046                                  
 12047                                  ; Find beginning of second string.
 12048                                  
 12049 00000BDD E84E1F                  	call	scanoff
 12050 00000BE0 3C0D                    	cmp	al,0Dh
 12051                                  	;jz	short IFERRPJ
 12052                                  	; 17/04/2023
 12053 00000BE2 74C8                    	je	short IFERRORP
 12054 00000BE4 5F                      	pop	di
 12055                                  
 12056                                  ; DS:SI points to second string
 12057                                  ; CX has number of chars in first string
 12058                                  ; ES:DI points to first string
 12059                                  
 12060 00000BE5 F3A6                    	repe	cmpsb
 12061 00000BE7 7414                    	jz	short MATCH		; match found!
 12062                                  
 12063                                  ; No match. Let's find out what was wrong. The character that did not match
 12064                                  ; has been advanced over. Let's back up to it.
 12065                                  
 12066 00000BE9 4E                      	dec	si
 12067                                  
 12068                                  ; If it is EOL, then syntax error
 12069                                  
 12070 00000BEA 803C0D                  	cmp	byte [si],0Dh
 12071                                  	;jz	short IFERRJ
 12072                                  	; 17/04/2023
 12073 00000BED 74BE                    	je	short IFERROR
 12074                                  
 12075                                  ; Advance pointer over remainder of unmatched text to next delimiter
 12076                                  
 12077                                  SKIPSTRINGEND:
 12078 00000BEF AC                      	lodsb
 12079                                  NOTMATCH:
 12080 00000BF0 3C0D                    	cmp	al,0Dh
 12081                                  IFERRORJ2:
 12082                                  	;jz	short IFERRJ
 12083                                  	; 17/04/2023
 12084 00000BF2 74B9                    	jz	short IFERROR
 12085 00000BF4 E83F1F                  	call	DELIM
 12086 00000BF7 75F6                    	jnz	short SKIPSTRINGEND
 12087                                  
 12088                                  ; Signal that we did NOT have a match
 12089                                  
 12090 00000BF9 B0FF                    	mov	al,-1	 ; 0FFh
 12091 00000BFB EB37                    	jmp	short IFRET
 12092                                  
 12093                                  	; 17/04/2023
 12094                                  ;IFERRPJ:
 12095                                  	;jmp	IFERRORP
 12096                                  
 12097                                  ; The compare succeeded. Was the second string longer than the first?
 12098                                  ; We do this by seeing if the next char is a delimiter.
 12099                                  
 12100                                  MATCH:
 12101 00000BFD AC                      	lodsb
 12102 00000BFE E8351F                  	call	DELIM
 12103 00000C01 75ED                    	jnz	short NOTMATCH ; not same.
 12104 00000C03 30C0                    	xor	al,al
 12105 00000C05 EB2D                    	jmp	short IFRET
 12106                                  
 12107                                  ; ---------------------------------------------------------------------------
 12108                                  
 12109                                  IFEXISTS:
 12110                                  
 12111                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 12112                                  
 12113                                  ;MOREDELIM:
 12114 00000C07 AC                      	lodsb
 12115 00000C08 E82B1F                  	call	DELIM
 12116 00000C0B 75FA                    	jnz	short IFEXISTS
 12117                                  	;jnz	short MOREDELIM
 12118                                  
 12119 00000C0D BA[2AA0]                	mov	dx,DIRBUF
 12120 00000C10 B8001A                  	mov	ax,1A00h
 12121                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12122 00000C13 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12123                                  			; DS:DX	-> disk	transfer buffer
 12124 00000C15 BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 12125 00000C18 031E[8DA8]              	add	bx,[IF_NOT_COUNT]
 12126                                  	;mov	ax,ARG_ARGV
 12127                                  	;mov	ax,ARG+ARG_UNIT.argv
 12128 00000C1C B8[41A2]                	mov	ax,ARG
 12129 00000C1F E87C2A                  	call	argv_calc		; convert arg index to pointer
 12130 00000C22 8B17                    	mov	dx,[bx]
 12131                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12132                                  	;mov	cx,6
 12133 00000C24 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 12134 00000C27 B8004E                  	mov	ax,4E00h
 12135                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 12136 00000C2A CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12137                                  			; CX = search attributes
 12138                                  			; DS:DX	-> ASCIZ filespec
 12139                                  			; (drive,path, and wildcards allowed)
 12140 00000C2C 7204                    	jc	short IF_EX_C ; carry is how to determine error
 12141 00000C2E 30C0                    	xor	al,al
 12142 00000C30 EB02                    	jmp	short IFRET
 12143                                  
 12144                                  	;nop
 12145                                  IF_EX_C:
 12146 00000C32 B0FF                    	mov	al,-1	; 0FFh	; false 'n' fall through...
 12147                                  IFRET:
 12148 00000C34 F606[049E]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 12149 00000C39 7402                    	jz	short REALTEST
 12150 00000C3B F6D0                    	not	al
 12151                                  REALTEST:
 12152 00000C3D 08C0                    	or	al,al
 12153 00000C3F 7403                    	jz	short IFTRUE
 12154 00000C41 E9C0F4                  	jmp	TCOMMAND
 12155                                  
 12156                                  IFTRUE:
 12157 00000C44 E8E71E                  	call	scanoff
 12158 00000C47 89F1                    	mov	cx,si
 12159 00000C49 81E98100                	sub	cx,81h
 12160 00000C4D 280E8000                	sub	[80h],cl
 12161 00000C51 8A0E8000                	mov	cl,[80h]
 12162 00000C55 880E[539C]              	mov	[COMBUF+1],cl
 12163 00000C59 BF[549C]                	mov	di,COMBUF+2
 12164 00000C5C FC                      	cld
 12165 00000C5D F3A4                    	rep	movsb
 12166 00000C5F B00D                    	mov	al,0Dh
 12167 00000C61 AA                      	stosb
 12168                                  
 12169                                  ; Signal that an IF was done. 
 12170                                  ; This prevents the redirections from getting lost.
 12171                                  
 12172 00000C62 1E                      	push	ds
 12173 00000C63 8E1E[F39D]              	mov	ds,[RESSEG]
 12174 00000C67 C606[4802]FF            	mov	byte [IfFlag],-1
 12175 00000C6C 1F                      	pop	ds
 12176                                  
 12177                                  ; Go do the command
 12178                                  
 12179                                  	;jmp	DOCOM1 ; MSDOS 5.0 COMMAND.COM
 12180                                  	; 07/06/2023
 12181                                  	; Retro DOS v4.2 COMMAND.COM
 12182 00000C6D E983F6                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 12183                                  
 12184                                  ; ---------------------------------------------------------------------------
 12185                                  
 12186                                  IFERRORJ3:
 12187 00000C70 EB80                    	jmp	IFERRORJ2
 12188                                  
 12189                                  IFERLEV:
 12190 00000C72 B70A                    	mov	bh,10
 12191 00000C74 30DB                    	xor	bl,bl
 12192                                  GETNUMLP:
 12193 00000C76 AC                      	lodsb
 12194 00000C77 3C0D                    	cmp	al,0Dh
 12195 00000C79 74F5                    	je	short IFERRORJ3
 12196 00000C7B E8B81E                  	call	DELIM
 12197 00000C7E 740C                    	jz	short GOTNUM
 12198 00000C80 2C30                    	sub	al,'0'
 12199 00000C82 86C3                    	xchg	al,bl
 12200 00000C84 F6E7                    	mul	bh
 12201 00000C86 00D8                    	add	al,bl
 12202 00000C88 86C3                    	xchg	al,bl
 12203 00000C8A EBEA                    	jmp	short GETNUMLP
 12204                                  GOTNUM:
 12205 00000C8C 1E                      	push	ds
 12206 00000C8D 8E1E[F39D]              	mov	ds,[RESSEG]
 12207 00000C91 8A26[3802]              	mov	ah,[RetCode]
 12208 00000C95 1F                      	pop	ds
 12209 00000C96 30C0                    	xor	al,al
 12210 00000C98 38DC                    	cmp	ah,bl
 12211 00000C9A 7398                    	jnb	short IFRET
 12212 00000C9C FEC8                    	dec	al
 12213 00000C9E EB94                    	jmp	short IFRET
 12214                                  
 12215                                  ; ---------------------------------------------------------------------------
 12216                                  
 12217                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 12218                                  ; This is a NOP if no batch in progress.
 12219                                  
 12220                                  _SHIFT:
 12221 00000CA0 8E1E[F39D]              	mov	ds,[RESSEG]
 12222 00000CA4 A1[E701]                	mov	ax,[Batch]		; get batch pointer
 12223 00000CA7 09C0                    	or	ax,ax			; in batch mode?
 12224 00000CA9 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 12225                                  SHIFT_RETN:				; no, done.
 12226 00000CAB C3                      	retn
 12227                                  SHIFT1:
 12228 00000CAC 8EC0                    	mov	es,ax
 12229 00000CAE 8ED8                    	mov	ds,ax
 12230                                  
 12231                                  ; Now move the batch args down by 1 word
 12232                                  
 12233                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 12234                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 12235 00000CB0 BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 12236 00000CB3 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 12237 00000CB6 B90900                  	mov	cx,9			; move 9 parameters
 12238 00000CB9 F3A5                    	rep	movsw			; SHIFT down
 12239                                  
 12240                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 12241                                  ; We have copied it into the previous position.
 12242                                  
 12243 00000CBB 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 12244 00000CBE 74EB                    	je	short SHIFT_RETN ; No new parm
 12245                                  
 12246                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 12247                                  ; Assume, first, that there is no next argument.
 12248                                   
 12249 00000CC0 8B35                    	mov	si,[di]
 12250 00000CC2 C705FFFF                	mov	word [di],-1		; Assume no parm
 12251                                  
 12252                                  ; The parameters are CR separated. Scan for end of this parm.
 12253                                  
 12254                                  SKIPCRLP:
 12255 00000CC6 AC                      	lodsb
 12256 00000CC7 3C0D                    	cmp	al,0Dh
 12257 00000CC9 75FB                    	jne	short SKIPCRLP
 12258                                  
 12259                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 12260                                  ; are finished. There are no more parms and the pointer has been previously
 12261                                  ; initialized to indicate it.
 12262                                  
 12263 00000CCB 803C00                  	cmp	byte [si],0
 12264 00000CCE 74DB                    	jz	short SHIFT_RETN 	; End of parms
 12265 00000CD0 8935                    	mov	[di],si			; Pointer to next parm as %9
 12266 00000CD2 C3                      	retn
 12267                                  
 12268                                  ; =============== S U B	R O U T	I N E =======================================
 12269                                  
 12270                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 12271                                  ; returns char in AL, carry set -> eof
 12272                                  
 12273                                  SKIPDELIM:
 12274 00000CD3 F706[E701]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 12275 00000CD9 740A                    	jz	short SKIPERR
 12276 00000CDB E85DFD                  	call	GETBATBYT		; get a char
 12277 00000CDE E8551E                  	call	DELIM			; check for ignoreable chars
 12278 00000CE1 74F0                    	jz	short SKIPDELIM		; ignore this char.
 12279 00000CE3 F8                      	clc
 12280 00000CE4 C3                      	retn
 12281                                  SKIPERR:
 12282 00000CE5 F9                      	stc
 12283                                  GOTO_RETN:
 12284 00000CE6 C3                      	retn
 12285                                  
 12286                                  ; ---------------------------------------------------------------------------
 12287                                  
 12288                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 12289                                  ;  .com file. This routine strips the CALL off the command line, sets
 12290                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 12291                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 12292                                  ;  being CALLed.
 12293                                  
 12294                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12295                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 12296                                  
 12297                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12298                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0D01h
 12299                                  _$CALL:
 12300                                  
 12301                                  ;  strip off CALL from command line
 12302                                  
 12303                                  	;ASSUME DS:trangroup,ES:trangroup
 12304                                  
 12305 00000CE7 56                      	push	si
 12306 00000CE8 57                      	push	di
 12307 00000CE9 50                      	push	ax
 12308 00000CEA 51                      	push	cx
 12309 00000CEB BE[549C]                	mov	si,COMBUF+2
 12310 00000CEE E83D1E                  	call	scanoff			;get to first non-delimeter
 12311                                  	;add	si,4
 12312 00000CF1 83C604                  	add	si,length_call		;point to char past CALL
 12313 00000CF4 BF[549C]                	mov	di,COMBUF+2
 12314                                  	;mov	cx,124		
 12315 00000CF7 B97C00                  	mov	cx,COMBUFLEN-length_call 
 12316                                  					;get length of buffer
 12317 00000CFA F3A4                    	rep	movsb			;move it
 12318 00000CFC 59                      	pop	cx
 12319 00000CFD 58                      	pop	ax
 12320 00000CFE 5F                      	pop	di
 12321 00000CFF 5E                      	pop	si
 12322                                  
 12323                                  ;  set call flag to indicate call in progress
 12324                                  
 12325 00000D00 1E                      	push	ds
 12326 00000D01 8E1E[F39D]              	mov	ds,[RESSEG]
 12327 00000D05 C606[4E02]01            	mov	byte [Call_Flag],call_in_progress ; 1
 12328 00000D0A C606[4F02]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 12329                                  
 12330                                  ; Turn off any pipes in progress.
 12331                                  
 12332 00000D0F 803E[B602]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 12333 00000D14 7403                    	jz	short _NOPIPE
 12334 00000D16 E82425                  	call	PIPEDEL
 12335                                  _NOPIPE:
 12336 00000D19 1F                      	pop	ds
 12337 00000D1A C3                      	retn
 12338                                  
 12339                                  ; ---------------------------------------------------------------------------
 12340                                  
 12341                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12342                                  _GOTO:
 12343 00000D1B 8E1E[F39D]              	mov	ds,[RESSEG]
 12344 00000D1F F706[E701]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 12345 00000D25 74BF                    	jz	short GOTO_RETN
 12346 00000D27 31D2                    	xor	dx,dx
 12347 00000D29 1E                      	push	ds
 12348 00000D2A 8E1E[E701]              	mov	ds,[Batch]
 12349                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 12350 00000D2E 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 12351                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 12352 00000D32 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 12353                                  
 12354                                  	; MSDOS 6.0
 12355                                  ;M037
 12356                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 12357                                  ;
 12358 00000D36 C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 12359                                  					; clear eof indicator ;M037
 12360                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12361 00000D3B 1F                      	pop	ds
 12362                                  GOTOOPEN:
 12363 00000D3C E875F8                  	call	PROMPTBAT
 12364                                  	;mov	di,5Dh
 12365 00000D3F BF5D00                  	mov	di,FCB+1		; Get the label
 12366 00000D42 B90B00                  	mov	cx,11
 12367 00000D45 B020                    	mov	al,' '
 12368 00000D47 F2AE                    	repne	scasb
 12369 00000D49 7501                    	jnz	short NOINC
 12370 00000D4B 41                      	inc	cx
 12371                                  NOINC:
 12372 00000D4C 83E90B                  	sub	cx,11
 12373 00000D4F F7D9                    	neg	cx
 12374                                  	;mov	[cs:GOTOLEN],cx
 12375                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12376 00000D51 26890E[2AA0]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 12377                                  
 12378                                  ; At beginning of file. Skip to first non-delimiter char
 12379                                  
 12380 00000D56 E87AFF                  	call	SKIPDELIM
 12381 00000D59 721C                    	jb	short BADGOTO
 12382 00000D5B 3C3A                    	cmp	al,':'
 12383 00000D5D 7426                    	jz	short CHKLABEL
 12384                                  LABLKLP:				; Look for the label
 12385 00000D5F E8D9FC                  	call	GETBATBYT
 12386 00000D62 3C0A                    	cmp	al,0Ah
 12387 00000D64 7509                    	jne	short LABLKTST
 12388                                  
 12389                                  ; At beginning of line. Skip to first non-delimiter char
 12390                                  
 12391 00000D66 E86AFF                  	call	SKIPDELIM
 12392 00000D69 720C                    	jb	short BADGOTO
 12393 00000D6B 3C3A                    	cmp	al,':'
 12394 00000D6D 7416                    	je	short CHKLABEL
 12395                                  LABLKTST:
 12396 00000D6F F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1
 12397 00000D75 75E8                    	jnz	short LABLKLP
 12398                                  BADGOTO:
 12399 00000D77 E87100                  	call	BATCLOSE
 12400                                  
 12401                                  	; MSDOS 6.0
 12402                                  ;SR;
 12403                                  ; At this point we are terminating without freeing up any nested batch 
 12404                                  ;segments i.e if the error occurred within a called batch file. This routine
 12405                                  ;will traverse the linked list of batch segments and free all of them.
 12406                                  ;
 12407 00000D7A E8BB00                  	call	free_batch		; free up nested batch segments
 12408                                  
 12409                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12410 00000D7D 0E                      	push	cs
 12411 00000D7E 1F                      	pop	ds
 12412 00000D7F BA[6592]                	mov	dx,BADLAB_PTR
 12413 00000D82 E91D21                  	jmp	cerror
 12414                                  
 12415                                  ; Found the :.	Skip to first non-delimiter char
 12416                                  
 12417                                  CHKLABEL:
 12418 00000D85 E84BFF                  	call	SKIPDELIM
 12419 00000D88 72ED                    	jb	short BADGOTO
 12420 00000D8A BF5D00                  	mov	di,FCB+1 ; 5Dh
 12421                                  	;mov	cx,[cs:GOTOLEN]
 12422                                  	; 14/02/2023
 12423 00000D8D 268B0E[2AA0]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12424 00000D92 EB05                    	jmp	short GOTBYTE
 12425                                  
 12426                                  NEXTCHRLP:
 12427 00000D94 51                      	push	cx
 12428 00000D95 E8A3FC                  	call	GETBATBYT
 12429 00000D98 59                      	pop	cx
 12430                                  GOTBYTE:
 12431                                  	; 18/03/2023
 12432                                  	; 14/02/2023
 12433                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 12434 00000D99 E8731B                  	call	testkanj
 12435 00000D9C 7413                    	jz	short NOTKANJ1
 12436 00000D9E 263A05                  	cmp	al,[es:di]
 12437 00000DA1 75CC                    	jne	short LABLKTST
 12438 00000DA3 47                      	inc	di
 12439 00000DA4 49                      	dec	cx
 12440 00000DA5 E3C8                    	jcxz	LABLKTST
 12441 00000DA7 51                      	push	cx
 12442 00000DA8 E890FC                  	call	GETBATBYT
 12443 00000DAB 59                      	pop	cx
 12444 00000DAC 263A05                  	cmp	al,[es:di]
 12445 00000DAF EB0C                    	jmp	short KNEXTLABCHR
 12446                                  NOTKANJ1:
 12447                                  	; 14/02/2023
 12448                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 12449 00000DB1 0C20                    	or	al,20h
 12450 00000DB3 263A05                  	cmp	al,[es:di]
 12451                                  	;jne	short TRYUPPER
 12452                                  	;jmp	short NEXTLABCHR
 12453                                  	; 25/04/2023
 12454 00000DB6 7407                    	je	short NEXTLABCHR 
 12455                                  TRYUPPER:
 12456 00000DB8 2C20                    	sub	al,20h
 12457 00000DBA 263A05                  	cmp	al,[es:di]
 12458                                  KNEXTLABCHR:
 12459 00000DBD 75B0                    	jnz	short LABLKTST
 12460                                  NEXTLABCHR:
 12461 00000DBF 47                      	inc	di
 12462 00000DC0 E2D2                    	loop	NEXTCHRLP
 12463 00000DC2 E876FC                  	call	GETBATBYT
 12464                                  	; 14/02/2023
 12465 00000DC5 26833E[2AA0]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 12466                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 12467 00000DCB 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 12468 00000DCD 3C20                    	cmp	al,' '
 12469 00000DCF 779E                    	ja	short LABLKTST
 12470                                  GOTOCONT:
 12471 00000DD1 3C0D                    	cmp	al,0Dh
 12472 00000DD3 7407                    	je	short SKIPLFEED
 12473                                  TONEXTBATLIN:
 12474 00000DD5 E863FC                  	call	GETBATBYT
 12475 00000DD8 3C0D                    	cmp	al,0Dh
 12476 00000DDA 75F9                    	jne	short TONEXTBATLIN
 12477                                  SKIPLFEED:
 12478 00000DDC E85CFC                  	call	GETBATBYT
 12479                                  
 12480                                  	; MSDOS 6.0
 12481                                  ;SR;
 12482                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 12483                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 12484                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 12485                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 12486                                  ;all other cases, EOF will be hit while trying to read the next line and
 12487                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 12488                                  ;
 12489 00000DDF 06                      	push	es
 12490 00000DE0 8E06[E701]              	mov	es,[Batch]
 12491 00000DE4 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12492                                  					;invalidate fake CR-LF flag
 12493 00000DEA 07                      	pop	es
 12494                                  
 12495                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12496                                  	;call	BATCLOSE
 12497                                  	;retn
 12498                                  	; 14/02/2023
 12499                                  	;jmp	short BATCLOSE
 12500                                  
 12501                                  ; =============== S U B	R O U T	I N E =======================================
 12502                                  
 12503                                  BATCLOSE:
 12504 00000DEB 2E8B1E[E5A1]            	mov	bx,[cs:BATHAND]
 12505 00000DF0 83FB05                  	cmp	bx,5
 12506 00000DF3 7204                    	jb	short CLOSERETURN
 12507                                  	; 14/02/2023
 12508 00000DF5 B43E                    	mov	ah,3Eh
 12509                                  	;mov	ah,CLOSE ; 3Eh
 12510 00000DF7 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 12511                                  			; BX = file handle
 12512                                  CLOSERETURN:
 12513 00000DF9 C606[3002]00            	mov	byte [In_Batch],0 ; reset flag	
 12514 00000DFE C3                      	retn
 12515                                  
 12516                                  ; =============== S U B	R O U T	I N E =======================================
 12517                                  
 12518                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 12519                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 12520                                  
 12521                                  	; 14/02/2023
 12522                                  BATOPEN:
 12523 00000DFF 1E                      	push	ds
 12524 00000E00 8E1E[E701]              	mov	ds,[Batch]
 12525                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 12526                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 12527 00000E04 BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 12528 00000E07 B8003D                  	mov	ax,3D00h
 12529                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 12530 00000E0A CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 12531                                  			; DS:DX	-> ASCIZ filename
 12532                                  			; AL = access mode
 12533                                  			; 0 - read
 12534 00000E0C 721C                    	jc	short SETERRDL
 12535                                  	;mov	dx,[8]
 12536 00000E0E 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 12537                                  	;mov	cx,[10]
 12538 00000E12 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 12539 00000E16 1F                      	pop	ds
 12540                                  	;mov	[cs:BATHAND],ax
 12541 00000E17 26A3[E5A1]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12542 00000E1B 89C3                    	mov	bx,ax
 12543 00000E1D B80042                  	mov	ax,4200h
 12544                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 12545 00000E20 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 12546                                  			; AL = method: offset from beginning of	file
 12547                                  
 12548                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 12549                                  					; nuke batch buffer position
 12550 00000E22 26C706[B9A9]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12551                                  BATOPEN_RETN:
 12552 00000E29 C3                      	retn
 12553                                  
 12554                                  SETERRDL:
 12555 00000E2A 89D3                    	mov	bx,dx
 12556                                  	; MSDOS 6.0
 12557                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 12558                                  	; 14/02/2023
 12559 00000E2C E81314                  	call	get_ext_error_number
 12560 00000E2F 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 12561                                  
 12562                                  	; MSDOS 3.3
 12563                                  	;mov	dx,INSERTDSKPTR
 12564                                  	;call	GET_EXT_ERR_NUMBER
 12565                                  
 12566                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12567 00000E31 8A07                    	mov	al,[bx]			; Get drive spec
 12568 00000E33 2C40                    	sub	al,'@'	; sub al,40h	; A = 1
 12569 00000E35 1F                      	pop	ds
 12570 00000E36 F9                      	stc				; SUB mucked over carry
 12571 00000E37 C3                      	retn
 12572                                  
 12573                                  ; =============== S U B	R O U T	I N E =======================================
 12574                                  
 12575                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 12576                                  ;the batch and FOR segments until all of them are freed. It also restores
 12577                                  ;the old state of the EchoFlag.
 12578                                  ;
 12579                                  ;	ENTRY:	ds = RESGROUP
 12580                                  ;
 12581                                  ;	EXIT: 	All batch & FOR segments freed.
 12582                                  ;		EchoFlag restored to old state before batch process.
 12583                                  ;
 12584                                  ;	REGISTERS AFFECTED: bx, cx
 12585                                  
 12586                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12587                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 12588                                  
 12589                                  free_batch: ;proc near
 12590                                  	;assume	ds:RESGROUP,es:nothing
 12591                                  
 12592 00000E38 06                      	push	es
 12593 00000E39 8B1E[5002]              	mov	bx,[Next_Batch]
 12594 00000E3D 09DB                    	or	bx,bx
 12595 00000E3F 7431                    	jz	short fb_ret
 12596                                  _ClearBatch:
 12597 00000E41 8EC3                    	mov	es,bx			; get batch segment
 12598                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 12599 00000E43 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 12600                                  	;cmp	bx,0			; is a FOR in progress
 12601                                  	; 27/07/2024
 12602 00000E48 21DB                    	and	bx,bx
 12603 00000E4A 7408                    	jz	short no_bat_for	; no - don't deallocate
 12604 00000E4C 06                      	push	es			;
 12605 00000E4D 8EC3                    	mov	es,bx			; yes - free it up...
 12606 00000E4F B449                    	mov	ah,49h
 12607                                  	;mov	ah,DEALLOC		;
 12608 00000E51 CD21                    	int	21h			;
 12609 00000E53 07                      	pop	es			; restore to batch segment
 12610                                  no_bat_for:
 12611                                  	;mov	cl,[es:1]
 12612 00000E54 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 12613                                  					; get old echo flag
 12614                                  	;mov	bx,[es:3]
 12615 00000E59 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12616                                  					; get old batch segment
 12617 00000E5E B449                    	mov	ah,49h
 12618                                  	;mov	ah,DEALLOC		; free it up...
 12619 00000E60 CD21                    	int	21h
 12620                                  	; 14/02/2023
 12621                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 12622 00000E62 FF0E[4C02]              	dec	word [Nest]		; is there another batch file?
 12623 00000E66 75D9                    	jnz	short _ClearBatch	; keep going until no batch file
 12624                                  	
 12625 00000E68 880E[3B02]              	mov	[EchoFlag],cl		;restore echo status
 12626 00000E6C C706[E701]0000          	mov	word [Batch],0		;no batch process in progress
 12627                                  fb_ret:
 12628 00000E72 07                      	pop	es
 12629 00000E73 C3                      	ret
 12630                                  
 12631                                  ;free_batch endp
 12632                                  
 12633                                  ;============================================================================
 12634                                  ; TFOR.ASM, MSDOS 6.0, 1991
 12635                                  ;============================================================================
 12636                                  ; 10/10/2018 - Retro DOS v3.0
 12637                                  
 12638                                  ; All batch proccessing has DS set to segment of resident portion
 12639                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 12640                                  
 12641                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 12642                                  
 12643                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12644                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 12645                                  
 12646                                  ; ---------------------------------------------------------------------------
 12647                                  
 12648                                  	; 15/02/2023
 12649                                  FORTERM:
 12650                                  	; MSDOS 6.0
 12651 00000E74 0E                      	push	cs			;AN037; Get local segment into
 12652 00000E75 1F                      	pop	ds			;AN037;  DS, ES
 12653 00000E76 0E                      	push	cs			;AN037;
 12654 00000E77 07                      	pop	es			;AN037;
 12655                                  
 12656                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12657 00000E78 E89502                  	call	FOROFF
 12658                                  	;mov	ds,[cs:RESSEG]
 12659 00000E7B 268E1E[F39D]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 12660 00000E80 813E[4302]00FF          	cmp	word [SingleCom],0FF00h
 12661 00000E86 750F                    	jne	short BAT_CRLF
 12662 00000E88 833E[4C02]00            	cmp	word [Nest],0		;See if we have nested batch files
 12663 00000E8D 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 12664 00000E8F C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 12665 00000E95 EB12                    	jmp	short NOFORP2
 12666                                  BAT_CRLF:
 12667 00000E97 F606[3B02]01            	test	byte [EchoFlag],1 	; Is echo on?
 12668 00000E9C 740B                    	jz	short NOFORP2		; no - exit
 12669 00000E9E F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12670                                  					; print CRLF if in batch
 12671 00000EA4 7403                    	jz	short NOFORP2
 12672 00000EA6 E8781C                  	call	CRLF2
 12673                                  NOFORP2:
 12674 00000EA9 E958F2                  	jmp	TCOMMAND
 12675                                  
 12676                                  ; ---------------------------------------------------------------------------
 12677                                  
 12678                                  ;------
 12679                                  ;   For-loop processing. For loops are of the form:
 12680                                  ;	    for %<loop-variable> in (<list>) do <command>
 12681                                  ; where <command> may contain references of the form %<variable>, which are
 12682                                  ; later substituted with the items in <list>. The for-loop structure is
 12683                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 12684                                  ; <command> once for each item in <list>. All of the information needed for
 12685                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 12686                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 12687                                  ; a complete copy of the original command-line structure as parsed by
 12688                                  ; 'parseline', loop control variables, and a dma buffer for the
 12689                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 12690                                  ; processing has completed, this chunk of memory is returned to the system.
 12691                                  ;
 12692                                  ;   All of the previously defined variables, in 'datares', used for loop
 12693                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 12694                                  ;
 12695                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 12696                                  ; containing all of the other error messages.
 12697                                  ;
 12698                                  ;   Referencing the allocated for-loop structure is a little tricky.
 12699                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 12700                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 12701                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 12702                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 12703                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 12704                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 12705                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 12706                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 12707                                  ; instead of
 12708                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 12709                                  ; By using 'f', we pretend that we are actually referencing an allocated
 12710                                  ; structure, and the assembler coughs up the code we want. Notice that it
 12711                                  ; doesn't matter whether we put brackets around the location or not -- the
 12712                                  ; assembler is "smart" enough to know that we want an address instead of the
 12713                                  ; contents of that location.
 12714                                  ;
 12715                                  ;   Finally, there now exists the potential to easily implement nested loops.
 12716                                  ; One method would be to have a link field in each for-structure pointing to
 12717                                  ; its parent.  Variable references that couldn't be resolved in the local
 12718                                  ; frame would cause a search of prior frames. For-structures would still be
 12719                                  ; allocated and released in exactly the same fashion. The only limit on the
 12720                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 12721                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 12722                                  ; maintained in the resident data area. This structure would be an array of
 12723                                  ; control-variable names and pointers to for-structure blocks. This would
 12724                                  ; greatly speed up the resolution of non-local variable references. However,
 12725                                  ; since space in the resident is precious, we would have to compromise on a
 12726                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 12727                                  ; allocation and de-allocation would have to be modified slightly to take this
 12728                                  ; new structure into account.
 12729                                  ;
 12730                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 12731                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 12732                                  ; it may be easier to allocate it as part of 'for_segment'.
 12733                                  ;------
 12734                                  		; include fordata.asm
 12735                                  
 12736                                  ; Data structure definitions included by tfor.asm
 12737                                  
 12738                                  struc FOR_INFO
 12739 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 12740 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 12741 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 12742 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 12743 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 12744 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 12745 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 12746 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 12747                                    .size:
 12748                                  endstruc
 12749                                  					; ARG_UNIT.SIZE = 1348 (544h)
 12750                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 12751                                  _$FOR_EXIT:
 12752 00000EAC EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 12753                                  
 12754                                  ; ---------------------------------------------------------------------------
 12755                                  
 12756                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12757                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12758                                  	;	     & Retro DOS v4.2 COMMAND.COM (2024 modification)
 12759                                  FORPROC:
 12760 00000EAE A1[4A02]                	mov	ax,[ForPtr]
 12761 00000EB1 8ED8                    	mov	ds,ax
 12762 00000EB3 8EC0                    	mov	es,ax			; operate in for-info area
 12763                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 12764                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 12765 00000EB5 BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 12766                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 12767 00000EB8 B8001A                  	mov	ax,1A00h
 12768                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12769 00000EBB CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12770                                  			; DS:DX	-> disk	transfer buffer
 12771                                  FOR_BEGIN:
 12772                                  	;;cmp	word [545h],0
 12773                                  	;cmp	word [445h] ; 27/07/2024
 12774 00000EBD 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12775 00000EC2 7404                    	jz	short FOR_BEGIN1
 12776                                  					; non-zero for_expand equals FALSE
 12777                                  	;;inc	word [547h]
 12778                                  	;inc	word [447h] ; 27/07/2024
 12779 00000EC4 FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 12780                                  FOR_BEGIN1:
 12781                                  	;mov	bx,[447h] ; 27/07/2024
 12782 00000EC8 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 12783                                  	;cmp	bx,[449h] ; 27/07/2024
 12784 00000ECC 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 12785 00000ED0 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 12786                                  	;mov	ax,0
 12787 00000ED2 B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0 
 12788 00000ED5 E8C627                  	call	argv_calc		; compute argv[x] address
 12789                                  	;mov	cx,[bx+3]
 12790 00000ED8 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 12791 00000EDB 8B17                    	mov	dx,[bx]
 12792                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12793                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 12794 00000EDD F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 12795 00000EE1 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 12796 00000EE3 8B37                    	mov	si,[bx]
 12797                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 12798                                  
 12799                                  	;mov	al,[cs:LPAREN]
 12800                                  	; 15/02/2023
 12801                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 12802                                  	;mov	al,'('	; mov al,lparen
 12803                                  	;cmp	[si-1],	al		; If the current token is the first
 12804                                  	; 27/07/2024
 12805 00000EE5 807CFF28                	cmp	byte [si-1],'('
 12806 00000EE9 750A                    	jne	short FORSUB		;  one in the list and originally had
 12807 00000EEB 41                      	inc	cx			;  the opening paren as its first char,
 12808                                  					;  the argstartel ptr needs to be
 12809                                  					;  advanced passed it before the prefix
 12810                                  					;  length is computed.
 12811                                  	;mov	al,':'
 12812                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 12813                                  	; 27/07/2024
 12814 00000EEC 807C013A                	cmp	byte [si+1],':'
 12815 00000EF0 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 12816 00000EF2 83C102                  	add	cx,2			;  rest of the prefix as well.
 12817                                  FORSUB:
 12818 00000EF5 29D1                    	sub	cx,dx			; compute length of pathname prefix
 12819                                  	;;cmp	word [545h],0
 12820                                  	;cmp	word [445h],0 ; 27/07/2024
 12821 00000EF7 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12822                                  					; are we still expanding a name?
 12823 00000EFC 7416                    	jz	short FOR_FIND_NEXT
 12824                                  					; if so, get next matching filename
 12825                                  	;test	byte [bx+2],2
 12826 00000EFE F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 12827 00000F02 7505                    	jnz	short FOR_FIND_FIRST
 12828                                  					; should we expand THIS (new) arg?
 12829                                  	;mov	cx,[bx+5]
 12830                                  					; else, just copy all of it directly
 12831 00000F04 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 12832 00000F07 EB1D                    	jmp	short FOR_SMOOSH
 12833                                  
 12834                                  	;nop
 12835                                  	; 15/02/2023
 12836                                  FOR_FIND_FIRST:
 12837 00000F09 51                      	push	cx
 12838 00000F0A 31C9                    	xor	cx,cx
 12839 00000F0C B8004E                  	mov	ax,4E00h
 12840                                  	;mov	ax,Find_First*256 ; 4E00h
 12841 00000F0F CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12842                                  			; CX = search attributes
 12843                                  			; DS:DX	-> ASCIZ filespec
 12844                                  			; (drive,path, and wildcards allowed)
 12845 00000F11 59                      	pop	cx
 12846 00000F12 EB05                    	jmp	short FOR_RESULT
 12847                                  
 12848                                  	;nop
 12849                                  FOR_FIND_NEXT:
 12850 00000F14 B8004F                  	mov	ax,4F00h
 12851                                  	;mov	ax,Find_Next*256 ;4F00h
 12852 00000F17 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 12853                                  			; [DTA]	= data block from
 12854                                  			; last AH = 4Eh/4Fh call
 12855                                  FOR_RESULT:
 12856 00000F19 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 12857 00000F1C 7201                    	jc	short FOR_CHECK
 12858                                  	; 15/02/2023
 12859 00000F1E 40                      	inc	ax ; ax = 0
 12860                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 12861                                  FOR_CHECK:				; record success of findfirst/next
 12862                                  	;;mov	[545h],ax
 12863                                  	;mov	[445h],ax ; 27/07/2024
 12864 00000F1F A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 12865 00000F22 09C0                    	or	ax,ax			; anything out there?
 12866 00000F24 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 12867                                  FOR_SMOOSH:
 12868                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 12869 00000F26 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 12870                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 12871                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12872 00000F28 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 12873 00000F2B F3A4                    	rep	movsb			; arg, some days just the path prefix
 12874                                  					
 12875 00000F2D 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12876                                  					; if we're not expanding, we can
 12877 00000F32 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 12878                                  	; 15/02/2023
 12879                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 12880                                  	; 27/07/2024
 12881                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 12882 00000F34 BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 12883                                  FOR_MORE:
 12884                                  	;cmp	byte [si],0		; tack on matching filename
 12885                                  	;jz	short FOR_MAKE_COM
 12886                                  	;movsb
 12887                                  	;jnz	short FOR_MORE
 12888                                  	; 25/04/2023
 12889 00000F37 AC                      	lodsb
 12890 00000F38 AA                      	stosb
 12891 00000F39 08C0                    	or	al,al
 12892 00000F3B 75FA                    	jnz	short FOR_MORE
 12893                                  FOR_MAKE_COM:
 12894                                  	; 25/04/2023
 12895                                  	;xor	al,al			; tack a null byte onto the end
 12896                                  	;stosb				; of the substitute string
 12897 00000F3D 31C9                    	xor	cx,cx			; character count for command line
 12898 00000F3F F7D1                    	not	cx			; negate it -- take advantage of loopnz
 12899 00000F41 31DB                    	xor	bx,bx			; argpointer
 12900 00000F43 BF[549C]                	mov	di,COMBUF+2
 12901                                  	; 15/02/2023
 12902                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 12903                                  	; 27/07/2024
 12904                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 12905 00000F46 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 12906                                  	;;mov	dh,[64Bh]
 12907                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12908 00000F4A 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 12909                                  					; %<for-var> is replaced by [forbuf]
 12910 00000F4E 0E                      	push	cs			; time to form the <command> string
 12911 00000F4F 07                      	pop	es
 12912                                  	;assume ES:trangroup
 12913                                  	;mov	ax,FOR_INFO.FOR_ARGS
 12914 00000F50 B80000                  	mov	ax,0			; translate offset to pointer
 12915 00000F53 E84827                  	call	argv_calc
 12916                                  	;mov	si,[bx+9]
 12917 00000F56 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 12918                                  					; mov ptr passed beginning space
 12919 00000F59 46                      	inc	si
 12920                                  FOR_MAKE_LOOP:
 12921 00000F5A 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 12922 00000F5C 46                      	inc	si
 12923 00000F5D 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 12924 00000F5F 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 12925 00000F61 3834                    	cmp	[si],dh			; got the right <variable>?
 12926 00000F63 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 12927 00000F65 46                      	inc	si			; skip over <for-variable>
 12928                                  
 12929 00000F66 56                      	push	si
 12930                                  	; 15/02/2023
 12931                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 12932                                  	; 27/07/2024
 12933                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 12934 00000F67 BE4B04                  	mov	si,FOR_INFO.FORBUF
 12935                                  					; substitute the <item> for <variable>
 12936                                  					; to make a final <command> to execute
 12937                                  SLOOP:					
 12938 00000F6A AC                      	lodsb				; grab all those <item> bytes, and
 12939 00000F6B AA                      	stosb				; add 'em to the <command> string,
 12940 00000F6C 08C0                    	or	al,al			; until we run into a null
 12941 00000F6E E0FA                    	loopne	SLOOP
 12942 00000F70 4F                      	dec	di			; adjust length and <command> pointer
 12943 00000F71 41                      	inc	cx			; so we can overwrite the null
 12944 00000F72 5E                      	pop	si
 12945 00000F73 EBE5                    	jmp	short FOR_MAKE_LOOP
 12946                                  					; got back for more <command> bytes
 12947                                  FOR_STOSB:
 12948 00000F75 AA                      	stosb				; take a byte from the <command> arg
 12949 00000F76 49                      	dec	cx			; and put it into the <command> to be
 12950                                  					; executed (and note length, too)
 12951 00000F77 3C0D                    	cmp	al,0Dh
 12952 00000F79 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 12953                                  FOR_MADE_COM:
 12954 00000F7B F6D1                    	not	cl
 12955                                  	;mov	[cs:COMBUF+1],cl
 12956                                  	;mov	ds,[cs:RESSEG]
 12957                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 12958                                  	; MSDOS 5.0 COMMAND.COM
 12959 00000F7D 26880E[539C]            	mov	[es:COMBUF+1],cl
 12960 00000F82 268E1E[F39D]            	mov	ds,[es:RESSEG]
 12961                                  	;assume DS:resgroup
 12962 00000F87 F606[3B02]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 12963 00000F8C 742F                    	jz	short NOECHO3
 12964                                  	;cmp	byte [NullFlag],nullcommand
 12965 00000F8E 803E[5202]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 12966 00000F93 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 12967                                  
 12968 00000F95 E8891B                  	call	CRLF2		  	;G Print out prompt
 12969                                  NO_CRLF_PR:
 12970 00000F98 C606[5202]00            	mov	byte [NullFlag],0 	;G reset no command flag
 12971 00000F9D 0E                      	push	cs
 12972 00000F9E 1F                      	pop	ds
 12973 00000F9F 57                      	push	di
 12974 00000FA0 E84013                  	call	PRINT_PROMPT	  	;G Prompt the user
 12975 00000FA3 5F                      	pop	di
 12976                                  
 12977 00000FA4 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 12978 00000FA9 C706[91A0][549C]        	mov	word [string_ptr_2],COMBUF+2
 12979                                  	; 17/04/2023
 12980 00000FAF BA[9793]                	mov	dx,string_buf_ptr
 12981 00000FB2 E85A45                  	call	std_printf
 12982 00000FB5 26C645FF0D              	mov	byte [es:di-1],0Dh
 12983 00000FBA E933F3                  	jmp	DOCOM		  	; run silent, run deep...
 12984                                  NOECHO3:
 12985 00000FBD C606[5202]00            	mov	byte [NullFlag],0
 12986 00000FC2 0E                      	push	cs
 12987 00000FC3 1F                      	pop	ds
 12988                                  	;jmp	DOCOM1
 12989                                  	; 07/06/2023
 12990                                  	; Retro DOS v4.2 COMMAND.COM
 12991 00000FC4 E92CF3                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 12992                                  
 12993                                  FORNESTERRJ:				; no multi-loop processing... yet!
 12994 00000FC7 E84601                  	call	FOROFF
 12995 00000FCA E92901                  	jmp	FORNESTERR
 12996                                  
 12997                                  ; ---------------------------------------------------------------------------
 12998                                  
 12999                                  FORERRORJ:
 13000 00000FCD E9DDFB                  	jmp	FORERROR
 13001                                  
 13002                                  ; ---------------------------------------------------------------------------
 13003                                  
 13004                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 13005                                  
 13006                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 13007                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 13008                                  
 13009                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13010                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 13011                                  _$FOR:
 13012 00000FD0 8E06[F39D]              	mov	es,[RESSEG]
 13013 00000FD4 26803E[4902]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 13014 00000FDA 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 13015                                  
 13016                                  ; Turn off any pipes in progress.
 13017                                  
 13018 00000FDC 26803E[B602]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 13019 00000FE2 7403                    	jz	short NO_PIPE
 13020 00000FE4 E85622                  	call	PIPEDEL
 13021                                  NO_PIPE:
 13022 00000FE7 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 13023 00000FE9 E8F400                  	call	NEXTARG			; move to next argv[n]
 13024 00000FEC 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 13025 00000FEE 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 13026 00000FF0 75DB                    	jne	short FORERRORJ
 13027 00000FF2 89C5                    	mov	bp,ax			; save forloop variable
 13028 00000FF4 AC                      	lodsb
 13029 00000FF5 08C0                    	or	al,al			; and MUST end immediately...
 13030 00000FF7 75D4                    	jnz	short FORERRORJ
 13031 00000FF9 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 13032 00000FFC 72CF                    	jb	short FORERRORJ
 13033                                  	;and	ax,0DFDFh
 13034 00000FFE 25DFDF                  	and	ax,~2020h		; uppercase the letters
 13035                                  	; 15/02/2023
 13036                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 13037                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 13038                                  	;cmp	ax,in_word	; MSDOS 5.0
 13039 00001001 3D494E                  	cmp	ax,'IN'
 13040 00001004 75C7                    	jnz	short FORERRORJ
 13041 00001006 AC                      	lodsb
 13042                                  
 13043                                  	; 15/02/2023
 13044                                  	; MSDOS 3.3
 13045                                  	;or	al,al			; it, too, must end right away
 13046                                  	;jz	short CHECKLPAREN
 13047                                  	;cmp	al,[LPAREN]
 13048                                  	;jnz	short FORERRORJ
 13049                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 13050                                  	;add	word [bx],2
 13051                                  	;;add	word [bx+9],2
 13052                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 13053                                  	;;sub	word [bx+5],2
 13054                                  	;sub	word [bx+ARGV_ELE.arglen],2
 13055                                  	;mov	ax,[si-1]
 13056                                  	;jmp	short LPCHECK
 13057                                  
 13058                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13059                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 13060                                  
 13061                                  	; MSDOS 6.0
 13062                                  ; Compaq bug fix -- exit from this loop on error
 13063                                  
 13064 00001007 08C0                    	or	al,al
 13065 00001009 75C2                    	jne	short FORERRORJ		; jump on error
 13066                                  
 13067                                  ;	je	short CHECKLPAREN
 13068                                  ;
 13069                                  ; Not null. Perhaps there are no spaces between this and the (:
 13070                                  ;   FOR %i in(foo bar...
 13071                                  ; Check for the Lparen here
 13072                                  ;
 13073                                  ;;	cmp	al,lparen
 13074                                  ;;	jnz	short FORERRORJ
 13075                                  ;
 13076                                  ; The token was in(... We strip off the "in" part to simulate a separator
 13077                                  ; being there in the first place.
 13078                                  ;
 13079                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 13080                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 13081                                  ;;						; advance original string
 13082                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 13083                                  ;
 13084                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 13085                                  ; current value.
 13086                                  ;
 13087                                  ;;	mov	ax,[si-1]		; get lparen and next char
 13088                                  ;;	jmp	short LPCHECK
 13089                                  ;
 13090                                  ; end of Compaq bug fix
 13091                                  
 13092                                  ; ---------------------------------------------------------------------------
 13093                                  
 13094                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13095                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 13096                                  
 13097                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13098                                  CHECKLPAREN:
 13099 0000100B E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 13100 0000100E 72BD                    	jc	short FORERRORJ
 13101                                  LPCHECK:
 13102                                  	; 15/02/2023
 13103                                  	; MSDOS 5.0 (% MSDOS 6.0)
 13104                                  	;;cmp	al,[LPAREN]
 13105                                  	;cmp	al,lparen
 13106 00001010 3C28                    	cmp	al,'('
 13107 00001012 75B9                    	jne	short FORERRORJ
 13108 00001014 80FC00                  	cmp	ah,0
 13109 00001017 7410                    	je	short FOR_PAREN_TOKEN
 13110                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 13111                                  	;cmp	ah,rparen
 13112 00001019 80FC29                  	cmp	ah,')'
 13113 0000101C 7503                    	jne	short FOR_LIST_NOT_EMPTY
 13114 0000101E E953FE                  	jmp	FORTERM
 13115                                  FOR_LIST_NOT_EMPTY:
 13116                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 13117 00001021 FF07                    	inc	word [bx]		; Advance ptr past "("
 13118                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 13119 00001023 FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 13120 00001026 46                      	inc	si			; Inc si so check for ")" works
 13121 00001027 EB0D                    	jmp	short FOR_LIST
 13122                                  
 13123                                  	;nop
 13124                                  FOR_PAREN_TOKEN:
 13125 00001029 E8B400                  	call	NEXTARG			; what have we in our <list>?
 13126 0000102C 729F                    	jc	short FORERRORJ
 13127                                  	; 15/02/2023
 13128                                  	;;;cmp	ax,[RPAREN+1]
 13129                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 13130                                  	;cmp	ax,nullrparen
 13131 0000102E 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 13132 00001031 7503                    	jne	short FOR_LIST
 13133 00001033 E93EFE                  	jmp	FORTERM
 13134                                  
 13135                                  ;FORERORJJ:
 13136                                  	;jmp	FORERROR
 13137                                  
 13138                                  FOR_LIST:				; skip over rest of <list>
 13139 00001036 89D1                    	mov	cx,dx			; first arg of <list>
 13140                                  
 13141                                  SKIP_LIST:
 13142                                  	;add	si,[bx+5]
 13143 00001038 037705                  	add	si,[bx+ARGV_ELE.arglen]
 13144 0000103B 83EE03                  	sub	si,3			; si = ptr to last char of token
 13145                                  	; 15/02/2023
 13146                                  	;;mov	al,[RPAREN]
 13147                                  	;mov	al,rparen
 13148 0000103E B029                    	mov	al,')'
 13149 00001040 3804                    	cmp	[si],al			; Is this the last element in <list>
 13150 00001042 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 13151 00001044 E89900                  	call	NEXTARG			; No, get next arg <list>
 13152                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 13153                                  	;jmp	short SKIP_LIST
 13154                                  	; 15/02/2023
 13155 00001047 73EF                    	jnc	short SKIP_LIST
 13156                                  
 13157                                  	; 15/02/2023
 13158                                  FORERORJJ:
 13159 00001049 E961FB                  	jmp	FORERROR
 13160                                  
 13161                                  FOR_END_LIST:
 13162 0000104C 89D7                    	mov	di,dx			; record position of last arg in <list>
 13163 0000104E C60400                  	mov	byte [si],0		; Zap the rparen
 13164                                  	; 15/02/2023
 13165                                  	;;;cmp	ax,[RPAREN+1]
 13166                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 13167                                  	;cmp	ax,nullparen
 13168 00001051 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 13169 00001054 7401                    	je	short FOR_DO		; Yes, continue
 13170 00001056 47                      	inc	di			; No, inc position of last arg
 13171                                  FOR_DO:
 13172 00001057 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 13173 0000105A 72ED                    	jc	short FORERORJJ
 13174                                  	;and	ax,0DFDFh
 13175 0000105C 25DFDF                  	and	ax,~2020h		; uppercase the letters
 13176                                  	; 15/02/2023
 13177                                  	;;cmp	ax,[DO_WORD]
 13178                                  	;cmp	ax,do_word ; 4F44h
 13179 0000105F 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 13180 00001062 75E5                    	jne	short FORERORJJ
 13181 00001064 AC                      	lodsb
 13182 00001065 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 13183 00001067 75E0                    	jnz	short FORERORJJ
 13184                                  		
 13185 00001069 E87400                  	call	NEXTARG			; on to the beginning of <command>
 13186 0000106C 72DB                    	jc	short FORERORJJ		; null <command> not legal
 13187                                  
 13188 0000106E 50                      	push	ax
 13189 0000106F 53                      	push	bx
 13190 00001070 51                      	push	cx
 13191 00001071 52                      	push	dx			; preserve registers against disaster
 13192 00001072 57                      	push	di
 13193 00001073 56                      	push	si
 13194 00001074 55                      	push	bp
 13195 00001075 E85FF7                  	call	FREE_TPA		; need to make free memory, first
 13196 00001078 E89500                  	call	FOROFF
 13197                                  	;mov	bx,264
 13198 0000107B BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 13199 0000107E E84229                  	call	SAVE_ARGS		; extra bytes needed for for-info
 13200 00001081 9C                      	pushf
 13201 00001082 26A3[4A02]              	mov	[es:ForPtr],ax
 13202 00001086 E85EF7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 13203 00001089 9D                      	popf
 13204 0000108A 5D                      	pop	bp
 13205 0000108B 5E                      	pop	si
 13206 0000108C 5F                      	pop	di
 13207 0000108D 5A                      	pop	dx
 13208 0000108E 59                      	pop	cx
 13209 0000108F 5B                      	pop	bx
 13210 00001090 58                      	pop	ax
 13211 00001091 723C                    	jc	short FOR_ALLOC_ERR
 13212                                  
 13213 00001093 06                      	push	es			; save resgroup seg...
 13214 00001094 26FF36[4A02]            	push	word [es:ForPtr]
 13215 00001099 07                      	pop	es
 13216                                  	;assume es:for_segment
 13217 0000109A 49                      	dec	cx			; forproc wants min pointing before
 13218 0000109B 4F                      	dec	di			; first arg, max right at last one
 13219                                  	; 15/02/2023
 13220                                  	;;mov	[547h],cx
 13221                                  	; 27/07/2024
 13222                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 13223 0000109C 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 13224                                  	;;mov	[549h],di
 13225                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13226 000010A1 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 13227                                  	;;mov	[544h],dl
 13228                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13229 000010A6 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 13230                                  	;;mov	word [545h],0FFFFh ; -1
 13231                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13232 000010AB 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 13233                                  					; non-zero means FALSE
 13234 000010B2 89E8                    	mov	ax,bp
 13235                                  	;;mov	[64Bh],ah
 13236                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 13237 000010B4 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 13238 000010B9 07                      	pop	es
 13239                                  	;assume es:resgroup
 13240 000010BA 26FE06[4902]            	inc	byte [es:ForFlag]
 13241 000010BF 26833E[4302]FF          	cmp	word [es:SingleCom],-1
 13242 000010C5 7507                    	jne	short FOR_RET
 13243 000010C7 26C706[4302]00FF        	mov	word [es:SingleCom],0FF00h
 13244                                  FOR_RET:
 13245 000010CE C3                      	retn
 13246                                  
 13247                                  FOR_ALLOC_ERR:
 13248                                  	; 15/02/2023
 13249                                  	; MSDOS 3.3
 13250                                  	;mov	dx,INSFMEMMESPTR
 13251                                  	;jmp	CERROR
 13252                                  
 13253                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13254                                  	; MSDOS 6.0
 13255                                  	;mov	byte [msg_disp_class],1
 13256 000010CF C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 13257                                  					;AN000; set up extended error msg class
 13258                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 13259 000010D4 BA[D091]                	mov	dx,extend_buf_ptr
 13260                                  					;AC000; get extended message pointer
 13261                                  	;mov	word [extend_buf_ptr],8
 13262 000010D7 C706[D091]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 13263                                  					;AN000; get message number in control block
 13264 000010DD E9C21D                  	jmp	cerror
 13265                                  
 13266                                  
 13267                                  ; =============== S U B	R O U T	I N E =======================================
 13268                                  
 13269                                  NEXTARG:
 13270 000010E0 42                      	inc	dx			; next argv[n]
 13271                                  	;cmp	dx,[ARG_ARGVCNT]
 13272 000010E1 3B16[01A5]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 13273                                  					; make sure we don't run off end
 13274 000010E5 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 13275 000010E7 89D3                    	mov	bx,dx
 13276                                  	;mov	ax,ARG_ARGV
 13277                                  	;mov	ax,ARG+ARG_UNIT.argv
 13278 000010E9 B8[41A2]                	mov	ax,ARG
 13279 000010EC E8AF25                  	call	argv_calc		; convert array index to pointer
 13280 000010EF 8B37                    	mov	si,[bx]			; load pointer to argstring
 13281                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13282 000010F1 AD                      	lodsw				; and load first two chars
 13283 000010F2 F8                      	clc
 13284 000010F3 C3                      	retn
 13285                                  NEXTARG_ERR:
 13286 000010F4 F9                      	stc
 13287 000010F5 C3                      	retn
 13288                                  
 13289                                  ; ---------------------------------------------------------------------------
 13290                                  
 13291                                  FORNESTERR:
 13292 000010F6 1E                      	push	ds
 13293 000010F7 8E1E[F39D]              	mov	ds,[RESSEG]
 13294                                  	;ASSUME DS:RESGROUP
 13295 000010FB BA[2E93]                	mov	dx,FORNESTMES_PTR
 13296 000010FE 813E[4302]00FF          	cmp	word [SingleCom],0FF00h
 13297 00001104 7506                    	jne	short NOFORP3
 13298 00001106 C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 13299                                  NOFORP3:
 13300 0000110C 1F                      	pop	ds
 13301 0000110D E9921D                  	jmp	cerror
 13302                                  
 13303                                  ; =============== S U B	R O U T	I N E =======================================
 13304                                  
 13305                                  ; General routine called to free the for segment. We also clear the forflag
 13306                                  ; too. Change no registers.
 13307                                  
 13308                                  FOROFF:
 13309 00001110 50                      	push	ax
 13310 00001111 06                      	push	es
 13311 00001112 2E8E06[F39D]            	mov	es,[cs:RESSEG]
 13312 00001117 26A1[4A02]              	mov	ax,[es:ForPtr]
 13313 0000111B 09C0                    	or	ax,ax
 13314 0000111D 7408                    	jz	short FREEDONE
 13315 0000111F 06                      	push	es
 13316 00001120 8EC0                    	mov	es,ax
 13317                                  	; 15/02/2023
 13318 00001122 B449                    	mov	ah,49h
 13319                                  	;mov	ah,DEALLOC ; 49h
 13320 00001124 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 13321                                  			; ES = segment address of area to be freed
 13322 00001126 07                      	pop	es
 13323                                  FREEDONE:
 13324 00001127 26C706[4A02]0000        	mov	word [es:ForPtr],0
 13325 0000112E 26C606[4902]00          	mov	byte [es:ForFlag],0
 13326 00001134 07                      	pop	es
 13327 00001135 58                      	pop	ax
 13328 00001136 C3                      	retn
 13329                                  
 13330                                  ;============================================================================
 13331                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 13332                                  ;============================================================================
 13333                                  ; 09/10/2018 - Retro DOS v3.0
 13334                                  
 13335                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 13336                                  
 13337                                  ; ---------------------------------------------------------------------------
 13338                                  
 13339                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13340                                  
 13341                                  %if 0
 13342                                  
 13343                                  ; The DIR command displays the contents of a directory.
 13344                                  ;
 13345                                  ; ****************************************************************
 13346                                  ; *
 13347                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 13348                                  ; *
 13349                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 13350                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 13351                                  ; *		 If an error occurs issue and error message and
 13352                                  ; *		 transfer control to CERROR.
 13353                                  ; *
 13354                                  ; * INPUT:	 command line at offset 81H
 13355                                  ; *
 13356                                  ; * OUTPUT:	 none
 13357                                  ; *
 13358                                  ; ****************************************************************
 13359                                  
 13360                                  CATALOG:
 13361                                  	; MSDOS 3.3
 13362                                  
 13363                                  	;mov	ax,ARG_ARGV
 13364                                  	;mov	ax,ARG+ARG_UNIT.argv
 13365                                  	mov	ax,ARG
 13366                                  	mov	dx,0FFFFh
 13367                                  	xor	cx,cx
 13368                                  	xor	si,si
 13369                                  DIR1:
 13370                                  	;cmp	cx,[ARG_ARGVCNT]
 13371                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 13372                                  	jnb	short DIR6 ; No more arguments
 13373                                  	mov	bx,cx
 13374                                  	call	ARGV_CALC
 13375                                  	;or	si,[bx+7]
 13376                                  	or	si,[bx+ARGV_ELE.argsw_word]
 13377                                  	test	si,7FFCh  ; test si,~8003
 13378                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 13379                                  	;test	byte [bx+2],1
 13380                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 13381                                  	jz	short DIR3
 13382                                  	jmp	short DIR5
 13383                                  DIR2:
 13384                                  	mov	dx,BADPARMPTR
 13385                                  	jmp	CERROR
 13386                                  DIR3:
 13387                                  	or	cx,cx
 13388                                  	jnz	short DIR4	
 13389                                  	;cmp	word [bx+5],3
 13390                                  	cmp	word [bx+ARGV_ELE.arglen],3
 13391                                  	jz	short DIR5
 13392                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 13393                                  	add	word [bx],3
 13394                                  	;add	word [bx+9],3
 13395                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 13396                                  	;add	word [bx+3],3
 13397                                  	add	word [bx+ARGV_ELE.argstartel],3
 13398                                  	;sub	word [bx+5],3
 13399                                  	sub	word [bx+ARGV_ELE.arglen],3
 13400                                  DIR4:
 13401                                  	cmp	dx,0FFFFh
 13402                                  	jnz	short DIR2
 13403                                  	mov	dx,bx
 13404                                  DIR5:
 13405                                  	inc	cx
 13406                                  	jmp	short DIR1
 13407                                  DIR6:
 13408                                  	mov	[COMSW],si
 13409                                  	push	dx
 13410                                  	xor	al,al
 13411                                  	cmp	dx,0FFFFh
 13412                                  	jz	short DIR7
 13413                                  	mov	bx,dx
 13414                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 13415                                  	mov	di,[bx]
 13416                                  	cmp	byte [di+1],':'
 13417                                  	jnz	short DIR7
 13418                                  	mov	al,[di]
 13419                                  	or	al,20h		; Lowercase drive name	
 13420                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 13421                                  DIR7:
 13422                                  	;mov	[5CH],al
 13423                                  	mov	[FCB],al
 13424                                  	call	OKVOLARG
 13425                                  	mov	al,'?'		; *.* is default file spec.
 13426                                  	;mov	di,5Dh
 13427                                  	mov	di,FCB+1
 13428                                  	mov	cx,11
 13429                                  	rep stosb
 13430                                  
 13431                                  ; Begin by processing any switches that may have been specified.
 13432                                  ; BITS will contain any information about switches that was
 13433                                  ; found when the command line was parsed.
 13434                                  
 13435                                  	mov	ax,[COMSW]	; Get switches from command
 13436                                  	mov	[_BITS],ax	; initialize switches
 13437                                  	mov	word [COMSW],0	; initialize flags
 13438                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 13439                                  	;test	al,1
 13440                                  	test	al,SWITCHW	; /W ?
 13441                                  	;mov	al,1
 13442                                  	mov	al,NORMPERLIN
 13443                                  	jz	short DIR8
 13444                                  	;mov	al,5
 13445                                  	mov	al,WIDEPERLIN
 13446                                  DIR8:
 13447                                  	mov	[LINLEN],al	; Set number of entries per line
 13448                                  	mov	[LINCNT],al
 13449                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 13450                                  	mov	dx,DIRBUF
 13451                                  	mov	ah,Set_DMA ; 1Ah
 13452                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13453                                  			; DS:DX	-> disk	transfer buffer
 13454                                  	;mov	dl,[5Ch]
 13455                                  	mov	dl,[FCB]
 13456                                  	call	SAVUDIR
 13457                                  	pop	bx
 13458                                  	cmp	bx,0FFFFh
 13459                                  	jz	short DIR9
 13460                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13461                                  	mov	dx,[bx]
 13462                                  
 13463                                  ; The user may have specified a device. Search for the path and see if the
 13464                                  ; attributes indicate a device.
 13465                                  
 13466                                  	mov	ah,Find_First ; 4Eh
 13467                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13468                                  			; CX = search attributes
 13469                                  			; DS:DX	-> ASCIZ filespec
 13470                                  			; (drive,path, and wildcards allowed)
 13471                                  	jc	short DIR10
 13472                                  			; Check device atrribute..
 13473                                  	;test	byte [DIRBUF_ATTRIB2],40h
 13474                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 13475                                  	; 14/10/2018
 13476                                  	;test	byte [DIRBUF+21],40h
 13477                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 13478                                  	jz	short DIR10	; no, go do normal operation
 13479                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 13480                                  DIR9:
 13481                                  	jmp	short DOHEADER
 13482                                  DIR10:
 13483                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 13484                                  	mov	dx,[bx]
 13485                                  	mov	ah,CHDir ; 3Bh
 13486                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13487                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13488                                  	jnc	short DOHEADER
 13489                                  	;mov	si,[bx+3]
 13490                                  	mov	si,[bx+ARGV_ELE.argstartel]
 13491                                  	cmp	dx,si
 13492                                  	jz	short DIR_NO_DRIVE
 13493                                  	xor	cl,cl
 13494                                  	xchg	cl,[si]
 13495                                  	mov	ah,CHDir ; 3Bh
 13496                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13497                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13498                                  	xchg	cl,[si]
 13499                                  	jnc	short DIR_NO_DRIVE
 13500                                  	mov	al,[si-1]
 13501                                  	call	PATHCHRCMP
 13502                                  	jnz	short DIR11
 13503                                  	mov	al,[si-2]
 13504                                  	call	PATHCHRCMP
 13505                                  	jz	short DIR12
 13506                                  	xchg	cl,[si-1]
 13507                                  	mov	ah,CHDir ; 3Bh
 13508                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13509                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13510                                  	xchg	cl,[si-1]
 13511                                  	jnc	short DIR_NO_DRIVE
 13512                                  DIR11:
 13513                                  	mov	ch,':'
 13514                                  	cmp	ch,[si-1]
 13515                                  	jnz	short DIR12
 13516                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 13517                                  	mov	cx,[bx]
 13518                                  	xchg	cx,si
 13519                                  	sub	cx,si
 13520                                  	cmp	cx,2
 13521                                  	jz	short DIR_NO_DRIVE
 13522                                  DIR12:
 13523                                  	mov	dx,BADCDPTR
 13524                                  	;test	byte [bx+2],4
 13525                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13526                                  	jnz	short DIRERROR
 13527                                  DIRNF:
 13528                                  	mov	dx,FNOTFOUNDPTR
 13529                                  DIRERROR:
 13530                                  	jmp	CERROR
 13531                                  DIR_NO_DRIVE:
 13532                                  	cmp	word [si],'..'
 13533                                  	jnz	short DOREALPARSE
 13534                                  	cmp	byte [si+2],0
 13535                                  	jnz	short DOREALPARSE
 13536                                  	inc	word [COMSW]
 13537                                  	jmp	short DOHEADER
 13538                                  DOREALPARSE:
 13539                                  	mov	di,FCB ; 5Ch	
 13540                                  	;mov	ax,290Eh
 13541                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 13542                                  	int	21h	; DOS -	PARSE FILENAME
 13543                                  			; DS:SI	-> string to parse
 13544                                  			; ES:DI	-> buffer to fill with unopened	FCB
 13545                                  			; AL = bit mask	to control parsing
 13546                                  	cmp	byte [si],0
 13547                                  	jz	short DOHEADER
 13548                                  	dec	word [COMSW]
 13549                                  DOHEADER:
 13550                                  		
 13551                                  ; Display the header
 13552                                  
 13553                                  	push	bx
 13554                                  	call	BUILD_DIR_STRING
 13555                                  	mov	dx,DIRBUF
 13556                                  	mov	[VOL_DIR],dx
 13557                                  	mov	dx,DIRHEADPTR
 13558                                  	call	PRINTF_CRLF
 13559                                  	pop	bx
 13560                                  	cmp	bx,0FFFFh
 13561                                  	jz	short DOSEARCH
 13562                                  
 13563                                  ; If there were chars left after parse or device, then invalid file name
 13564                                  
 13565                                  	cmp	word [COMSW],0
 13566                                  	jz	short DOSEARCH	; nothing left; good parse
 13567                                  	jl	short DIRNFFIX	; not .. => error file not found
 13568                                  	call	RESTUDIR
 13569                                  	mov	dx,BADCDPTR
 13570                                  	jmp	CERROR		; was .. => error directory not found
 13571                                  DIRNFFIX:
 13572                                  	call	RESTUDIR
 13573                                  	jmp	short DIRNF
 13574                                  
 13575                                  ; We are assured that everything is correct. Let's go and search. Use
 13576                                  ; attributes that will include finding directories. Perform the first search
 13577                                  ; and reset our directory afterward.
 13578                                  
 13579                                  DOSEARCH:
 13580                                  	;mov	byte [55h],0FFh
 13581                                  	mov	byte [FCB-7],0FFh
 13582                                  	;mov	byte [5Bh],10h
 13583                                  	mov	byte [FCB-1],10h
 13584                                  
 13585                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 13586                                  ; the directory information as an extended FCB. We must bias all fetches into
 13587                                  ; DIRBUF by 8 (Extended FCB part + drive)
 13588                                  
 13589                                  	mov	ah,Dir_Search_First ; 11h
 13590                                  	mov	dx,FCB-7 ; 55h
 13591                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 13592                                  			; DS:DX	-> FCB
 13593                                  
 13594                                  ; Restore the user's directory. We preserve, though, the return from the
 13595                                  ; previous system call for later checking.
 13596                                  
 13597                                  FOUND_FIRST_FILE:
 13598                                  	push	ax		; save return state
 13599                                  	call	RESTUDIR	; restore user's dir	
 13600                                  	pop	ax		; get return state back
 13601                                  
 13602                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 13603                                  ; no more.
 13604                                  
 13605                                  DIRSTART:
 13606                                  	inc	al		; 0FFh = file not found
 13607                                  	jnz	short DISPLAY	; Either an error or we are finished
 13608                                  	jmp	CHKCNT
 13609                                  DISPLAY:
 13610                                  	inc	word [FILECNT]	; Keep track of how many we find
 13611                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 13612                                  	;call	SHONAME
 13613                                  	call	DISPLAYNAME
 13614                                  	;test	byte [_BITS],1
 13615                                  	test	byte [_BITS],SWITCHW ; W switch set?
 13616                                  	jz	short DIRTEST	; If so, no size, date, or time
 13617                                  	jmp	NEXENT
 13618                                  DIRTEST:
 13619                                  	;test	byte [DIRBUF_ATTRIB1],10h
 13620                                  	; 14/10/2018
 13621                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 13622                                  	;test	byte [DIRBUF+19],10h
 13623                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 13624                                  	jz	short FILEENT
 13625                                  	mov	dx,DMESPTR
 13626                                  	call	STD_PRINTF
 13627                                  	jmp	short NOFSIZ
 13628                                  FILEENT:
 13629                                  	;mov	dx,[DIRBUF_FSIZ_L]
 13630                                  	;mov	dx,[DIRBUF+36]
 13631                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 13632                                  	mov	[FILESIZE_L],dx
 13633                                  	;mov	dx,[DIRBUF_FSIZ_H]
 13634                                  	;mov	dx,[DIRBUF+38]
 13635                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 13636                                  	mov	[FILESIZE_H],dx
 13637                                  	mov	dx,FSIZEMESPTR
 13638                                  	call	STD_PRINTF	; Print size of file
 13639                                  NOFSIZ:
 13640                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 13641                                  	;mov	ax,[DIRBUF+32]
 13642                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 13643                                  	or	ax,ax
 13644                                  	jz	short NEXENT	; Skip if no date
 13645                                  	mov	di,CHARBUF
 13646                                  	push	ax
 13647                                  	mov	ax,'  '
 13648                                  	stosw
 13649                                  	pop	ax
 13650                                  	mov	bx,ax
 13651                                  	and	ax,1Fh		; Get day
 13652                                  	mov	dl,al
 13653                                  	mov	ax,bx
 13654                                  	mov	cl,5
 13655                                  	shr	ax,cl		; Align month
 13656                                  	and	al,0Fh		; Get month
 13657                                  	mov	dh,al
 13658                                  	mov	cl,bh
 13659                                  	shr	cl,1		; Align year
 13660                                  	xor	ch,ch
 13661                                  	add	cx,80		; Relative 1980
 13662                                  	cmp	cl,100
 13663                                  	jb	short MILLENIUM
 13664                                  	sub	cl,100
 13665                                  MILLENIUM:
 13666                                  	call	DATE_CXDX
 13667                                  	;mov	cx,[DIRBUF_FTIME]
 13668                                  	;mov	cx,[DIRBUF+30]
 13669                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 13670                                  	jcxz	PRBUF		; Time field present?
 13671                                  	mov	ax,2020h
 13672                                  	stosw
 13673                                  	shr	cx,1
 13674                                  	shr	cx,1
 13675                                  	shr	cx,1
 13676                                  	shr	cl,1
 13677                                  	shr	cl,1		; Hours in CH, minutes in CL
 13678                                  	mov	bl,[TIME_24]
 13679                                  	or	bl,80h		; Tell P_TIME called from DIR
 13680                                  	call	P_TIME		; Don't care about DX, never used with DIR
 13681                                  PRBUF:
 13682                                  	xor	ax,ax
 13683                                  	stosb
 13684                                  	mov	dx,CHARBUF
 13685                                  	mov	[STRING_PTR_2],dx
 13686                                  	mov	dx,STRINGBUF2PTR
 13687                                  	call	STD_PRINTF
 13688                                  NEXENT:
 13689                                  	dec	byte [LINCNT]
 13690                                  	jnz	short SAMLIN
 13691                                  NEXLIN:
 13692                                  	mov	al,[LINLEN]
 13693                                  	mov	[LINCNT],al
 13694                                  	call	CRLF2
 13695                                  	dec	byte [LINPERPAG]
 13696                                  	jnz	short SCROLL
 13697                                  	;test	byte [_BITS],2
 13698                                  	test	byte [_BITS],SWITCHP ; P switch present?
 13699                                  	jz	short SCROLL	; If not, just continue
 13700                                  	mov	byte [LINPERPAG],23
 13701                                  	call	PAUSE
 13702                                  	jmp	short SCROLL
 13703                                  SAMLIN:
 13704                                  	mov	dx,TABPTR	; Output a tab
 13705                                  	call	STD_PRINTF
 13706                                  SCROLL:
 13707                                  	mov	ah,Dir_Search_Next ; 12h
 13708                                  	;mov	dx,55h
 13709                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 13710                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 13711                                  			; DS:DX	-> FCB
 13712                                  			; Return: AL = status
 13713                                  	jmp	DIRSTART
 13714                                  CHKCNT:
 13715                                  	test	word [FILECNT],0FFFFh ; -1
 13716                                  	jnz	short TRAILER
 13717                                  	jmp	DIRNF
 13718                                  TRAILER:
 13719                                  	mov	al,[LINLEN]
 13720                                  	cmp	al,[LINCNT]
 13721                                  	jz	short MMESSAGE
 13722                                  	call	CRLF2
 13723                                  MMESSAGE:
 13724                                  	mov	dx,DIRMESPTR
 13725                                  	mov	si,[FILECNT]
 13726                                  	mov	[DIR_NUM],si
 13727                                  	call	STD_PRINTF
 13728                                  DTFREE:
 13729                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 13730                                  	;mov	dl,[5Ch]
 13731                                  	mov	dl,[FCB]
 13732                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 13733                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 13734                                  	cmp	ax,-1
 13735                                  	jnz	short DTFREE1
 13736                                  DTRET:
 13737                                  	retn
 13738                                  DTFREE1:
 13739                                  	mul	cx
 13740                                  	mul	bx
 13741                                  	mov	[BYTES_FREE],ax
 13742                                  	mov	[BYTES_FREE+2],dx
 13743                                  	mov	dx,BYTEMESPTR
 13744                                  	jmp	STD_PRINTF
 13745                                  
 13746                                  ; =============== S U B	R O U T	I N E =======================================
 13747                                  
 13748                                  SHONAME:
 13749                                  DISPLAYNAME:
 13750                                  	; MSDOS 3.3
 13751                                  	mov	di,CHARBUF
 13752                                  	mov	cx,8
 13753                                  	rep	movsb
 13754                                  	mov	al,' '
 13755                                  	stosb
 13756                                  	mov	cx,3
 13757                                  	rep	movsb
 13758                                  	xor	ax,ax
 13759                                  	stosb
 13760                                  	push	dx
 13761                                  	mov	dx,CHARBUF
 13762                                  	mov	[STRING_PTR_2],dx
 13763                                  	mov	dx,STRINGBUF2PTR
 13764                                  	call	STD_PRINTF
 13765                                  	pop	dx
 13766                                  	retn
 13767                                  
 13768                                  %endif
 13769                                  
 13770                                  ;============================================================================
 13771                                  ; DIR.ASM, MSDOS 6.0, 1991
 13772                                  ;============================================================================
 13773                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13774                                  
 13775                                  	; MSDOS 6.0
 13776                                  %if 0
 13777                                  
 13778                                  ;***	DIR.ASM - DIR internal command
 13779                                  
 13780                                  comment	% =================================================================
 13781                                  
 13782                                  This module replaces TCMD1A.ASM.  The old module was titled 
 13783                                  "PART4 COMMAND Transient routines".
 13784                                  
 13785                                  From residual documentation, I surmise that TCMD.ASM originally
 13786                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 13787                                  VER.  The file seems to have been successively split:
 13788                                  
 13789                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 13790                                  
 13791                                  TCMD1A.ASM contained only the DIR command.
 13792                                  
 13793                                  Usage:
 13794                                  ------
 13795                                  
 13796                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 13797                                  
 13798                                  DIR /?
 13799                                  
 13800                                  
 13801                                  <filespec> may include any or none of:  drive; directory path;
 13802                                             wildcarded filename.  If drive or directory path are
 13803                                  	   omitted, the current defaults are used.  If the
 13804                                  	   file name or extension is omitted, wildcards are
 13805                                  	   assumed.
 13806                                  
 13807                                  /w	Wide listing format.  Files are displayed in compressed
 13808                                  	'name.ext' format.  Subdirectory files are enclosed in
 13809                                  	brackets, '[dirname]'.
 13810                                  
 13811                                  /p	Paged, or prompted listing.  A screenful is displayed
 13812                                  	at a time.  The name of the directory being listed appears
 13813                                  	at the top of each page.
 13814                                  
 13815                                  	Bugbug:  pages nead to be uniform length..?
 13816                                  
 13817                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 13818                                  	listed in compressed 'name.ext' format, one per line,
 13819                                  	without additional information.  Good for making batch
 13820                                  	files or for piping.  When used with /s, complete
 13821                                  	pathnames are listed.
 13822                                  
 13823                                  /s	Descend subdirectory tree.  Performs command on current
 13824                                  	or specified directory, then for each subdirectory below
 13825                                  	that directory.  Directory header and footer is displayed
 13826                                  	for each directory where matching files are found, unless
 13827                                  	used with /b.  /b suppresses headers and footers.
 13828                                  
 13829                                  	Tree is explored depth first, alphabetically within the
 13830                                  	same level.
 13831                                  
 13832                                  	Bugbug:  hidden directories aren't searched.
 13833                                  
 13834                                  /l	Display file names, extensions and paths in lowercase.	;M010
 13835                                  
 13836                                  /c	Display file compression ratio, if the file is on a MagicDrv
 13837                                  	compressed volume.
 13838                                  
 13839                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 13840                                  	extension).  A sort order may be specified after /o.  Any of
 13841                                  	the following characters may be used: nedsgc (name, extension,
 13842                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 13843                                  	a '-' before any letter causes a downward sort on that field.
 13844                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 13845                                  	then within each extension sort by date and time in reverse
 13846                                  	chronological order.
 13847                                  
 13848                                  /a	Attribute selection.  Without /a, hidden and system files
 13849                                  	are suppressed from the listing.  With /a alone, all files
 13850                                  	are listed.  An attribute list may follow /a, consisting of
 13851                                  	any of the following characters:  hsdar (hidden, system,
 13852                                  	directory, archive, read-only).  A '-' before any letter
 13853                                  	means 'not' that attribute.  E.g., /ar-d means files that
 13854                                  	are marked read-only and are not directory files.  Note
 13855                                  	that hidden or system files may be included in the listing.
 13856                                  	They are suppressed without /a but are treated like any other
 13857                                  	attribute with /a.
 13858                                  
 13859                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 13860                                  
 13861                                  /h has been removed.					;M008
 13862                                  
 13863                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 13864                                  	DIR command line.  Any command line options may be specified
 13865                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 13866                                  	A filespec may be specified in DIRCMD and will be used unless
 13867                                  	a filespec is specified on the command line.  Any switch
 13868                                  	specified in DIRCMD may be overridden on the command line.
 13869                                  	If the original DIR default action is desired for a particular
 13870                                  	switch, the switch letter may be preceded by a '-' on the
 13871                                  	command line.  E.g.,
 13872                                  
 13873                                  	  /-w	use long listing format
 13874                                  	  /-p	don't page the listing
 13875                                  	  /-b	don't use bare format
 13876                                  	  /-s	don't descend subdirectory tree
 13877                                  	  /-o	display files in disk order
 13878                                  	  /-a	suppress hidden and system files
 13879                                  
 13880                                  Notes:
 13881                                  ------
 13882                                  
 13883                                  For sorted listings, file entries are loaded into the TPA buffer, which
 13884                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 13885                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 13886                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 13887                                  a flag byte which is made zero when the entry is loaded, and made one
 13888                                  when the entry is used.
 13889                                  
 13890                                  Revision History
 13891                                  ================
 13892                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 13893                                  				in the absence of ANSI.SYS
 13894                                  
 13895                                  M007	sa	8/1/90		Allow /p/b combination
 13896                                  
 13897                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 13898                                  				to internally handle /? message.
 13899                                  
 13900                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 13901                                  
 13902                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 13903                                  				first FCB with the drive number when the drive
 13904                                  				letter in the command line is preceded by a
 13905                                  				switch.  Now dir manually loads the drive
 13906                                  				number after parsing.
 13907                                  
 13908                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 13909                                  				from the ROM BIOS.
 13910                                  
 13911                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 13912                                  				a subdirectory having len(pathname)>MAXPATH.
 13913                                  				Just skip over that subdirectory.
 13914                                  
 13915                                  M028	dbo	9/24/90		When country=US, sort by strict character
 13916                                  				byte value, rather than collating table.
 13917                                  				This to match MS-DOS Shell's sort order.
 13918                                  
 13919                                  ========================================================================= %
 13920                                  
 13921                                  %endif
 13922                                  
 13923                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22)
 13924                                  ;ifdef DBLSPACE_HOOKS
 13925                                  NUM_DIR_SWS	equ	16	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13926                                  ;else
 13927                                  ; 16/02/2023 - Retro DOS v4.0 (v4.1) COMMAND.COM (MSDOS 5.0)
 13928                                  ;NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13929                                  ;endif
 13930                                  
 13931                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13932                                  ;
 13933                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 13934                                  ;		(order is hard-coded; see OnOffSw)
 13935                                  ;		Inmem is set when entries are loaded in memory.
 13936                                  
 13937                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13938                                  ;mask.wide  equ 1
 13939                                  ;mask.pagd  equ 2
 13940                                  ;mask.subd  equ 4
 13941                                  ;mask.bare  equ 8
 13942                                  ;mask.lcase equ 16
 13943                                  ;mask.inmem equ 32
 13944                                  
 13945                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 13946                                  ;ifdef DBLSPACE_HOOKS
 13947                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1,cratio:1
 13948                                  ;else
 13949                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13950                                  ;endif
 13951                                  mask.cratio equ 1
 13952                                  mask.wide   equ 2
 13953                                  mask.pagd   equ 4
 13954                                  mask.subd   equ 8
 13955                                  mask.bare   equ 16
 13956                                  mask.lcase  equ 32
 13957                                  mask.inmem  equ 64
 13958                                  ;
 13959                                  mask.dev    equ 1
 13960                                  mask.baddir equ 2	
 13961                                  
 13962                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 13963                                  
 13964                                  ; 05/06/2023
 13965                                  ;ifdef DBLSPACE_HOOKS
 13966                                  NUM_ORDER_LTRS	equ	6	; length of sort order letter list
 13967                                  CRATIO_ORDER	equ	6	; position of 'C' in ORDER_LTRS
 13968                                  ;else
 13969                                  ;NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 13970                                  ;endif
 13971                                  
 13972                                  ;ResultBuffer	struc		; structure of parse result buffer
 13973                                  ;ValueType	db	?
 13974                                  ;ValueTag	db	?
 13975                                  ;SynPtr		dw	?
 13976                                  ;ValuePtr	dd	?
 13977                                  ;ResultBuffer	ends
 13978                                  
 13979                                  ;ErrorRec	record	baddir:1,dev:1
 13980                                  ;
 13981                                  ;		Error bits are:
 13982                                  ;		  Invalid directory format
 13983                                  ;		  File is device
 13984                                  
 13985                                  ;EntryStruc	struc			; our private directory entry structure
 13986                                  ;used		db	?		; =0 until entry used, then =1
 13987                                  ;filename	db	8 dup (?)	; filename
 13988                                  ;fileext	db	3 dup (?)	; extension
 13989                                  ;fileattr	db	?		; file attributes
 13990                                  ;filetime	dw	?		; file time
 13991                                  ;filedate	dw	?		; file date
 13992                                  ;filesize	dd	?		; file size
 13993                                  ; 05/06/2023
 13994                                  ;;ifdef DBLSPACE_HOOKS
 13995                                  ;compratio	db	?		; compression ratio
 13996                                  ;;endif
 13997                                  ;EntryStruc	ends
 13998                                  
 13999                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 14000                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 14001                                  ;	push	ax
 14002                                  ;	endm
 14003                                  
 14004                                  ;	public	Catalog		; our entry point
 14005                                  ;
 14006                                  ;	break	<DIR (Catalog) principal routines>
 14007                                  ;
 14008                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 14009                                  ; ---------------------------------------------------------------------------
 14010                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 14011                                  
 14012                                  ;----------------------------------------------------------------------------
 14013                                  ;----------------------------------------------------------------------------
 14014                                  
 14015                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14016                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 14017                                  
 14018                                  ;***	Catalog - DIR command main routine
 14019                                  ;
 14020                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 14021                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 14022                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 14023                                  ;		Tpa = TPA buffer seg addr
 14024                                  ;		BytCnt = # bytes in TPA buffer
 14025                                  ;
 14026                                  ;	EXIT	nothing
 14027                                  ;
 14028                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14029                                  ;
 14030                                  ;	ERROR EXITS
 14031                                  ;
 14032                                  ;	  Errors are handled by setting up error message pointers
 14033                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 14034                                  ;	   the environment variable, however, are handled by printing
 14035                                  ;	   an error message and continuing.
 14036                                  ;
 14037                                  ;	EFFECTS
 14038                                  ;
 14039                                  ;	  Directory listing is displayed (on standard output).
 14040                                  ;	  APPEND is disabled. HeadFix routine is expected to
 14041                                  ;	   restore APPEND state.
 14042                                  ;	  Working directory may be changed. The user's default
 14043                                  ;	   directory is saved and flagged for restoration by RestUDir
 14044                                  ;	   during COMMAND cycle.
 14045                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 14046                                  ;
 14047                                  ;	NOTES
 14048                                  ;
 14049                                  ;	  ES = TRANGROUP seg addr except when used to address the
 14050                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 14051                                  
 14052                                  	; 16/02/2023
 14053                                  
 14054                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14055                                  ;----------------------------------------------------------------------------
 14056                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:1167h
 14057                                  
 14058                                  CATALOG:
 14059                                  	; 07/06/2023
 14060                                  	; MSDOS 6.22 COMMAND COM feature only !
 14061 00001137 E82B0A                  	call    screen_f_set	; set display parameters for video/text mode
 14062                                  	;			; (different depending on scr width/columns)
 14063 0000113A E8C900                  	call	SetDefaults
 14064 0000113D E8ED00                  	call	ParseEnvironment
 14065 00001140 E80501                  	call	ParseCmdLine
 14066 00001143 7303                    	jnc	short catalog1	; no parse error
 14067                                  	;jmp	catErr		; error msg is set up
 14068                                  	; 07/06/2023
 14069                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMANBD.COM
 14070 00001145 E9B100                  	jmp	catExtErr2 
 14071                                  catalog1:
 14072 00001148 E82E01                  	call	SetOptions
 14073 0000114B E80401                  	call	SetCollatingTable
 14074                                  
 14075                                  ;	Drive # to operate on has already been placed in FCB by
 14076                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 14077                                  
 14078                                  	;;;test	Bits,mask bare
 14079                                  	;;test 	word [_Bits],8
 14080                                  	;test	byte [_Bits],8
 14081                                  	; 07/06/2023
 14082 0000114E F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 14083 00001153 750A                    	jnz	short catalog2	; don't display volume info for /b
 14084                                  	;invoke	OkVolArg	; find & display volume info
 14085 00001155 E85C10                  	call	OkVolArg
 14086                                  	;sub	byte [LeftOnpage],2
 14087 00001158 832E[1B9E]02            	sub	word [LeftOnPage],2
 14088                                  				; record display lines used by volume info
 14089 0000115D EB14                    	jmp	short catCrunch
 14090                                  
 14091                                  ;	OkVolArg side effects:
 14092                                  ;	APPEND is disabled;
 14093                                  ;	DTA established at DirBuf;
 14094                                  ;	Filename fields in FCB are wildcarded.
 14095                                  
 14096                                  catalog2:
 14097                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 14098                                  
 14099                                  	;invoke	DisAppend	; disable APPEND
 14100 0000115F E81F10                  	call	DisAppend
 14101                                  
 14102                                  	;mov	dx,offset TRANGROUP:DirBuf
 14103 00001162 BA[2AA0]                	mov	dx,DIRBUF
 14104 00001165 B41A                    	mov	ah,1Ah
 14105                                  	;mov	ah,Set_DMA
 14106 00001167 CD21                    	int	21h		; set DTA
 14107                                  
 14108                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 14109                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 14110                                  	; 28/07/2024
 14111 00001169 BF5D00                  	mov	di,FCB+1 ; 5Dh
 14112 0000116C B03F                    	mov	al,'?'		; AL = wildcard character
 14113 0000116E B90B00                  	mov	cx,11
 14114 00001171 F3AA                    	rep	stosb		; wildcard filename field
 14115                                  
 14116                                  catCrunch:
 14117 00001173 E86A01                  	call	CrunchPath	; crunch pathname to get directory and filename
 14118 00001176 724B                    	jc	short catRecErr	; handle recorded or extended error
 14119                                  
 14120                                  ;	User's directory has been saved, we've changed to specified directory.
 14121                                  ;	ComSw = error bits for later use
 14122                                  ;	FCB contains parsed filename
 14123                                  
 14124                                  	;cmp	byte [COMSW],0
 14125 00001178 833E[089E]00            	cmp	word [COMSW],0
 14126 0000117D 7544                    	jne	short catRecErr	; handle recorded error
 14127                                  
 14128 0000117F E8B801                  	call	InstallCtrlC	; install control-C handler
 14129                                  
 14130                                  	; 07/06/2023
 14131                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14132                                  	; MSDOS 6.0 (DBLSPACE/DRVSPACE)
 14133                                  
 14134                                   	;test	word [_Bits],1	; mask.cratio
 14135 00001182 F606[7CA0]01            	test	byte [_Bits],mask.cratio ; compression ratio wanted?
 14136 00001187 740A                    	jz      short catalog4
 14137 00001189 E8350A                  	call    OpenCVF         ; yes, try to open CVF file
 14138 0000118C 7305                    	jnc     short catalog4
 14139                                  
 14140                                  	;and	word [_Bits],0FFFEh ; not (mask cratio)
 14141 0000118E 8026[7CA0]FE            	and	byte [_Bits],~mask.cratio ; 0FEh
 14142                                  
 14143                                  catalog4:	; 07/06/2023
 14144 00001193 E89309                  	call	ZeroTotals	; zero grand totals
 14145 00001196 E88304                  	call	ListDir		; list main directory
 14146                                  	;jc	short catExtErr
 14147                                  	; 07/06/2023
 14148                                  	; MSDOS 6.22 COMMAND.COM
 14149 00001199 724E                    	jc      short catExtErr1
 14150                                  
 14151                                  	;;;test	Bits,mask subd
 14152                                  	;;test	word [_Bits],4
 14153                                  	;test	byte [_Bits],4
 14154                                  	; 07/06/2023
 14155 0000119B F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0 
 14156 000011A0 7405                    	jz	short catalog3	; subdirectories option not set
 14157 000011A2 E8AD01                  	call	ListSubds	; list subdirectories
 14158                                  	;jc	short catExtErr
 14159                                  	; 07/06/2023
 14160                                  	; MSDOS 6.22 COMMAND.COM
 14161 000011A5 7242                    	jc      short catExtErr1
 14162                                  
 14163                                  catalog3:
 14164                                  ;	Check if any files were found.
 14165                                  
 14166                                  	;;;test	Bits,mask bare
 14167                                  	;;test	word [_Bits],8
 14168                                  	;test	byte [_Bits],8
 14169                                  	; 07/06/2023
 14170 000011A7 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 14171 000011AC 750A                    	jnz	short catRet	; don't bother for bare format
 14172                                  
 14173 000011AE A1[239E]                	mov	ax,[FileCntTotal]
 14174 000011B1 09C0                    	or	ax,ax
 14175 000011B3 7421                    	jz	short catNoFiles ; no files found
 14176                                  
 14177 000011B5 E8D202                  	call	DisplayTotals	; display trailing grand totals
 14178                                  	;jmp	short catRet	; all done
 14179                                  	; 25/04/2023
 14180                                  	; 07/06/2023
 14181                                  catRet:
 14182                                  	;retn	; MSDOS 5.0 COMMAND.COM
 14183                                  	
 14184                                  	; 07/06/2023
 14185                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14186                                  
 14187                                  	;test	word [_Bits],1	; mask.cratio
 14188 000011B8 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 14189 000011BD 7403                    	jz      short catRetn
 14190 000011BF E81C0B                  	call    CloseCVF
 14191                                  catRetn:
 14192 000011C2 C3                      	retn
 14193                                  
 14194                                  catRecErr:
 14195                                  
 14196                                  ;	ComSw may have error bit set. If not, do extended error.
 14197                                  
 14198                                  	;;;test	ComSw,mask dev
 14199                                  	;;test	word [COMSW],1
 14200                                  	;test	byte [COMSW],1
 14201 000011C3 F606[089E]01            	test	byte [COMSW],mask.dev
 14202 000011C8 750C                    	jnz	short catNoFiles 
 14203                                  				; filename is device, respond 'file not found'
 14204                                  	;;test	ComSw,mask baddir
 14205                                  	;;test	word [COMSW],2
 14206                                  	;test	byte [COMSW],2
 14207 000011CA F606[089E]02            	test	byte [COMSW],mask.baddir
 14208                                  	;jz	short catExtErr	; no ComSw error bits, must be extended error
 14209                                  	; 07/06/2023
 14210                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM 
 14211 000011CF 7418                    	jz	short catExtErr1
 14212                                  
 14213                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 14214                                  				; invalid directory
 14215 000011D1 BA[0B93]                	mov	dx,badcd_ptr
 14216                                  	;jmp	short catErr
 14217                                  	; 07/06/2023
 14218                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14219 000011D4 EB23                    	jmp	short catExtErr2	
 14220                                  
 14221                                  catNoFiles:
 14222                                  
 14223                                  ;	Display header and force 'file not found' message.
 14224                                  
 14225 000011D6 E89A07                  	call	DisplayHeader
 14226 000011D9 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 14227 000011DC C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 14228 000011E1 BA[D091]                	mov	dx,extend_buf_ptr
 14229 000011E4 A3[D091]                	mov	[extend_buf_ptr],ax
 14230                                  	;jmp	short catErr
 14231                                  	; 07/06/2023
 14232                                  	; MSDOS 6.22 COMMAND.COM
 14233 000011E7 EB10                    	jmp	short catExtErr2
 14234                                  
 14235                                  catExtErr:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 14236                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 14237                                  catExtErr1:
 14238                                  
 14239                                  ;	DOS has returned an error status. Get the extended error#, and
 14240                                  ;	set up an error message, changing 'No more files' error 
 14241                                  ;	to 'File not found' error.
 14242                                  
 14243 000011E9 E84610                  	call	Set_Ext_Error_Msg
 14244 000011EC 833E[D091]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 14245                                  	;jne	short catalog4  ; catErr ; MSDOS 5.0 COMMAND.COM
 14246                                  	; 07/06/2023
 14247                                  	; MSDOS 6.22 COMMAND.COM
 14248 000011F1 7506                    	jne	short catExtErr2	
 14249                                  
 14250 000011F3 C706[D091]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 14251                                  
 14252                                  ;catalog4:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 14253                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 14254                                  catExtErr2:
 14255                                  	;test	word [_Bits],1	; mask.cratio
 14256 000011F9 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 14257                                  				; close Compressed Volume File if cratio
 14258 000011FE 7403                    	jz      short catErr
 14259 00001200 E8DB0A                  	call    CloseCVF
 14260                                  
 14261                                  ;	Error exit. Error message information has been set up
 14262                                  ;	for Std_EPrintf.
 14263                                  
 14264                                  catErr:
 14265 00001203 E99C1C                  	jmp	cerror		; go to COMMAND error recycle point
 14266                                  
 14267                                  	; 25/04/2023
 14268                                  ;catRet:
 14269                                  	;retn
 14270                                  
 14271                                  ; ---------------------------------------------------------------------------
 14272                                  
 14273                                  ;***	SetDefaults - set default pathname, options
 14274                                  ;
 14275                                  ;	ENTRY	DS = TRANGROUP seg addr
 14276                                  ;
 14277                                  ;	EXIT	nothing
 14278                                  ;
 14279                                  ;	USED	AX,DI
 14280                                  ;
 14281                                  ;	EFFECTS
 14282                                  ;	  SrcBuf = '*',EOL - default pathname
 14283                                  ;	  PathPos = ptr to pathname
 14284                                  ;	  PathCnt = length of pathname
 14285                                  
 14286                                  	; 16/02/2023
 14287                                  SetDefaults:
 14288 00001206 BF[12A1]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 14289 00001209 893E[80A0]              	mov	[PathPos],di		; PathPos = ptr to pathname
 14290                                  	;mov	al,STAR
 14291 0000120D B02A                    	mov	al,'*'
 14292 0000120F AA                      	stosb
 14293                                  	;mov	al,END_OF_LINE_IN
 14294 00001210 B00D                    	mov	al,0Dh ; cr
 14295 00001212 AA                      	stosb				; SrcBuf = '*',0Dh
 14296 00001213 C706[7EA0]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 14297                                  
 14298 00001219 31C0                    	xor	ax,ax			; AX = 0
 14299 0000121B A3[089E]                	mov	[COMSW],ax		; = no error
 14300 0000121E A3[7CA0]                	mov	[_Bits],ax		; = options off
 14301 00001221 A2[AFA0]                	mov	[DestBuf],al		; = no sort
 14302 00001224 C606[84A0]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 14303 00001229 A2[85A0]                	mov	[AttrSelect],al		; exclude hidden, system files
 14304                                  peRet:	; 25/04/2023
 14305 0000122C C3                      	retn
 14306                                  
 14307                                  ; ---------------------------------------------------------------------------
 14308                                  
 14309                                  ;***	ParseEnvironment - find and parse our environment variable
 14310                                  ;
 14311                                  ;	Find our environment variable and parse it. If a parse
 14312                                  ;	error occurs, issue an error message. The parse results
 14313                                  ;	up to the error will still have effect. Always leave
 14314                                  ;	the option variables in a useable state.
 14315                                  ;
 14316                                  ;	ENTRY	DS = TRANGROUP seg addr
 14317                                  ;
 14318                                  ;	EXIT	nothing
 14319                                  ;
 14320                                  ;	USED	AX,BX,CX,DX,SI,DI
 14321                                  ;
 14322                                  ;	EFFECTS
 14323                                  ;
 14324                                  ;	  Bits may contain new option settings.
 14325                                  ;	  DestBuf may contain new series of sort codes.
 14326                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14327                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14328                                  ;	  PathPos, PathCnt updated for new pathname.
 14329                                  ;
 14330                                  ;	  If a parse error occurred, an error message will be issued.
 14331                                  
 14332                                  	; 16/02/2023
 14333                                  ParseEnvironment:
 14334 0000122D E8A203                  	call	GetEnvValue		; get environment variable value
 14335 00001230 72FA                    	jc	short peRet		; name not found in environment
 14336                                  
 14337                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 14338                                  
 14339 00001232 E80E05                  	call	Parse_Line		; parse environment value
 14340 00001235 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14341                                  	;cmp	ax,END_OF_LINE
 14342 00001238 74F2                    	je	short peRet		; successful completion
 14343                                  
 14344                                  ;	Some kind of parse error occurred.
 14345                                  ;	We're set up for a Std_EPrintf call.
 14346                                  
 14347 0000123A E8CA42                  	call	std_eprintf		; display the parse error
 14348                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 14349                                  					; restore default msg class
 14350 0000123D C606[CE91]FF            	mov	byte [msg_disp_class],0FFh ; -1
 14351                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 14352 00001242 BA[1294]                	mov	dx,errparsenv_ptr
 14353                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 14354                                  	;call	Printf_Crlf
 14355                                  	; 25/04/2023
 14356                                  	;retn
 14357 00001245 E9B942                  	jmp	Printf_Crlf
 14358                                  					;M008;Internal handling of /? removed
 14359                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 14360                                  	; 25/04/2023
 14361                                  ;peRet:
 14362                                  	;retn
 14363                                  
 14364                                  ; ---------------------------------------------------------------------------
 14365                                  
 14366                                  ;***	ParseCmdLine - parse and record command line parameters
 14367                                  ;
 14368                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 14369                                  ;		DS, ES, CS = TRANGROUP seg addr
 14370                                  ;
 14371                                  ;	EXIT	CY = set if parse error occurred
 14372                                  ;
 14373                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 14374                                  ;		AX = system parser error code
 14375                                  ;		DX = ptr to message block
 14376                                  ;
 14377                                  ;	USED	AX,BX,CX,DX,SI,DI
 14378                                  ;
 14379                                  ;	EFFECTS
 14380                                  ;
 14381                                  ;	  Bits may contain new option settings.
 14382                                  ;	  DestBuf may contain new series of sort codes.
 14383                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14384                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14385                                  ;	  PathPos, PathCnt updated for new pathname.
 14386                                  ;
 14387                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 14388                                  ;	  Msg_Disp_Class = parse error class
 14389                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 14390                                  ;	  Message block (see DX) is set up for parse error message
 14391                                  
 14392                                  	; 16/02/2023
 14393                                  ParseCmdLine:
 14394 00001248 BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 14395 0000124B E8F504                  	call	Parse_Line		; parse cmd line tail
 14396 0000124E 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14397                                  	;;cmp	ax,END_OF_LINE
 14398                                  	; 25/04/2023
 14399                                  	;je	short pcOk		; parse completed successfully
 14400                                  
 14401                                  ;	A parse error occurred. We're all set up for message output.
 14402                                  
 14403                                  	; 25/04/2023
 14404                                  	; cf = 1 (ax < 0FFFFh)
 14405                                  	;stc		   		; return failure
 14406                                  	;jmp	short pcRet
 14407                                  	; 25/04/2023
 14408                                  	;retn
 14409                                  pcOk:
 14410                                  	; 25/04/2023
 14411                                  	;cf = 0 (ax = 0FFFFh)
 14412                                  	;clc				; return success
 14413                                  pcRet:
 14414 00001251 C3                      	retn
 14415                                  
 14416                                  ; ---------------------------------------------------------------------------
 14417                                  
 14418                                  ;***	SetCollatingTable - set up character collating table for sorting
 14419                                  ;
 14420                                  ;	If country is other than USA, try to get a collating table
 14421                                  ;	for character sorting. For USA, use straight byte values.
 14422                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 14423                                  ;	by straight byte values in the USA for better performance.
 14424                                  ;
 14425                                  ;	ENTRY	ES = TRANGROUP seg addr
 14426                                  ;
 14427                                  ;	EXIT	nothing
 14428                                  ;
 14429                                  ;	USED	AX,BX,CX,DX,DI
 14430                                  ;
 14431                                  ;	EFFECTS
 14432                                  ;
 14433                                  ;	  If collating table is set -
 14434                                  ;	    CountryPtrId = 6.
 14435                                  ;	    CountryPtr points to collating table.
 14436                                  ;
 14437                                  ;	  Otherwise -
 14438                                  ;	    CountryPtrId = 0.
 14439                                  
 14440                                  SetCollatingTable:
 14441                                  
 14442                                  ;	Begin modification M028
 14443                                  
 14444                                  	;mov	dx,offset TRANGROUP:InternatVars
 14445                                  	;			; DS:DX = ptr to international info buffer
 14446 00001252 BA[90A9]                	mov	dx,INTERNATVARS
 14447 00001255 B80038                  	mov	ax,3800h
 14448                                  	;mov	ax,INTERNATIONAL << 8
 14449                                  	;;mov	ax,INTERNATIONAL shl 8
 14450                                  				; AX = 'Get current country info'
 14451 00001258 CD21                    	int	21h		; call DOS
 14452 0000125A 7217                    	jc	short scNoTable	; error - so don't collate
 14453                                  
 14454                                  ;	BX = country code
 14455                                  
 14456 0000125C 83FB01                  	cmp	bx,1
 14457 0000125F 7412                    	je	short scNoTable	; we're in USA, don't collate
 14458                                  
 14459                                  ;	End modification M028
 14460                                  
 14461                                  ;*	Country code is other than USA. Try to get a collating table.
 14462                                  
 14463 00001261 B80665                  	mov	ax,6506h
 14464                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 14465                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 14466                                  				; AH = 'Get Extended Country Info'
 14467                                  				; AL = 'Get Pointer to Collating Table'
 14468 00001264 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 14469 00001267 B90500                  	mov	cx,5		; CX = length of info buffer
 14470 0000126A 89DA                    	mov	dx,bx		; DX = country ID = default
 14471                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 14472 0000126C BF[B0A9]                	mov	di,CountryPtrInfo
 14473                                  				; ES:DI = ptr to info buffer
 14474 0000126F CD21                    	int	21h		; call DOS
 14475 00001271 7305                    	jnc	short scRet	; success
 14476                                  
 14477                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 14478                                  
 14479                                  scNoTable:			;M028
 14480 00001273 C606[B0A9]00            	mov	byte [CountryPtrId],0
 14481                                  scRet:
 14482 00001278 C3                      	retn
 14483                                  
 14484                                  ; ---------------------------------------------------------------------------
 14485                                  
 14486                                  ;***	SetOptions - check and set options
 14487                                  ;
 14488                                  ;	ENTRY	nothing
 14489                                  ;
 14490                                  ;	EXIT	nothing
 14491                                  ;
 14492                                  ;	USED	AX,BX,CX,DX
 14493                                  ;
 14494                                  ;	EFFECTS
 14495                                  ;
 14496                                  ;	  Bits may contain modified option settings.
 14497                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 14498                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 14499                                  ;	  PerLine is set according to /w presence.
 14500                                  
 14501                                  	; 16/02/2023
 14502                                  
 14503                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14504                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:12BEh
 14505                                  
 14506                                  SetOptions:
 14507                                  
 14508                                  ;	If bare listing requested, cancel wide listings.
 14509                                  
 14510                                  	;;;test	Bits,mask bare
 14511                                  	;;test	word [_Bits],8
 14512                                  	;test	byte [_Bits],8
 14513                                  	; 07/06/2023
 14514 00001279 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 14515 0000127E 7411                    	jz	short setopts1
 14516                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 14517                                  	;;and	word [_Bits],0FFFEh
 14518                                  	;;and	byte [_Bits],0FEh
 14519                                  	; 07/06/2023
 14520 00001280 8026[7CA0]FD            	and	byte [_Bits],~mask.wide ; 0FDh ; MSDOS 6.0
 14521                                  
 14522                                  ;setopts1:	; MSDOS 5.0 COMMAND.COM
 14523                                  	; 07/06/2023
 14524                                   	; MSDOS 6.22 COMMAND.COM
 14525                                  setopts0:
 14526                                  	;test	word [_Bits],12h  ; (mask bare) or (mask wide)
 14527 00001285 F606[7CA0]12            	test	byte [_Bits],(mask.bare|mask.wide)
 14528 0000128A 7405                    	jz      short setopts1
 14529                                  	;and 	word [_Bits],0FFFEh ; not mask cratio
 14530 0000128C 8026[7CA0]FE            	and	byte [_Bits],~mask.cratio
 14531                                  
 14532                                  setopts1:
 14533                                  ;	Set # lines per display page.
 14534                                  
 14535                                  ;M01  Obtain screen height from ROM BIOS data area
 14536                                  ;
 14537                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 14538                                  
 14539 00001291 1E                      	push	ds
 14540                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 14541 00001292 B84000                  	mov	ax,40h
 14542 00001295 8ED8                    	mov	ds,ax			;
 14543                                  	;Assume	DS:ROMBIOS_DATA
 14544                                  
 14545                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 14546 00001297 A08400                  	mov	al,[84h]
 14547 0000129A 1F                      	pop	ds			;
 14548                                  	;Assume	DS:Trangroup
 14549                                  
 14550 0000129B 08C0                    	or	al,al			; If zero specified
 14551 0000129D 7502                    	jnz	short setopts2		;
 14552                                  
 14553                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 14554 0000129F B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 14555                                  setopts2:
 14556 000012A1 30E4                    	xor	ah,ah
 14557                                  setopts3:
 14558 000012A3 FEC0                    	inc	al			; height + 1 ;M018
 14559                                  
 14560 000012A5 A3[08A2]                	mov	[LinPerPag],ax		; set the rows now
 14561                                  
 14562                                  ; Now the console driver can change the rows if it knows better (M01 end)
 14563                                  
 14564                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 14565                                  					; IOCTL for handles
 14566 000012A8 B80C44                  	mov	ax,440Ch
 14567                                  	;mov	bx,STDOUT		; handle #
 14568 000012AB BB0100                  	mov	bx,1
 14569                                  	;mov	ch,IOC_SC		; screen
 14570 000012AE B503                    	mov	ch,3
 14571                                  	;mov	cl,get_generic		; get display info
 14572 000012B0 B17F                    	mov	cl,7Fh
 14573 000012B2 BA[F8A1]                	mov	dx,Display_Ioctl	; info block
 14574 000012B5 CD21                    	int	21h			; call DOS
 14575                                  
 14576 000012B7 A1[08A2]                	mov	ax,[LinPerPag]		; AX = # lines per page
 14577 000012BA A3[1B9E]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 14578                                  
 14579                                  ;	Set # entries per line.
 14580                                  
 14581                                  	;mov	byte [PerLine],NORMPERLIN
 14582                                  					; # entries per line without /w
 14583 000012BD C606[1A9E]01            	mov	byte [PerLine],1
 14584                                  	;;;test	Bits,mask wide
 14585                                  	;;test	word [_Bits],1
 14586                                  	;test	byte [_Bits],1
 14587                                  	; 07/06/2023
 14588 000012C2 F606[7CA0]02            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 14589 000012C7 7405                    	jz	short setopts4
 14590                                  	;mov	byte [PerLine],WIDEPERLIN
 14591                                  					; # entries per line with /w
 14592 000012C9 C606[1A9E]05            	mov	byte [PerLine],5
 14593                                  setopts4:
 14594                                  				;M011;start;The following code checks if a drive
 14595                                  				;letter has been parsed into SrcBuf, and if
 14596                                  				;so, the correct drive number is loaded into
 14597                                  				;the first FCB, at offset 5C.
 14598                                  
 14599                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 14600 000012CE 803E[13A1]3A            	cmp	byte [SrcBuf+1],':'
 14601 000012D3 750A                    	jne	short soRet
 14602                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 14603 000012D5 A0[12A1]                	mov	al,[SrcBuf]
 14604                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 14605 000012D8 24DF                    	and	al,0DFh ; ~20h ; not 20h
 14606 000012DA 2C40                    	sub	al,'@'	; 40h			; convert to 1-based number (1=A)
 14607 000012DC A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 14608                                  						;M011;end
 14609                                  soRet:
 14610 000012DF C3                      	retn
 14611                                  
 14612                                  ; ---------------------------------------------------------------------------
 14613                                  
 14614                                  ;***	CrunchPath - analyze supplied or default pathname
 14615                                  ;
 14616                                  ;	ENTRY	PathPos = ptr to pathname buffer
 14617                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 14618                                  ;		Pathname in buffer must end in delimiter (like CR) and
 14619                                  ;		 must have space for another char after the delimiter.
 14620                                  ;
 14621                                  ;	EXIT	CY = clear if no error
 14622                                  ;		We are changed to directory found in pathname
 14623                                  ;		Previous directory ready to be restored via RestUDir
 14624                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 14625                                  ;
 14626                                  ;		If error occurred,
 14627                                  ;		CY = set
 14628                                  ;		ComSw = error bits (see ErrorRec)
 14629                                  ;		If ComSw not set,
 14630                                  ;		Ready for DOS Get Extended Error call
 14631                                  
 14632                                  	; 16/02/2023
 14633                                  CrunchPath:
 14634 000012E0 E80102                  	call	FileIsDevice
 14635 000012E3 7507                    	jne	short crpath1	; not a device, skip ahead
 14636                                  	;;;or	ComSw,mask dev	; signal file is device
 14637                                  	;;or	word [COMSW],1
 14638                                  	;or	byte [COMSW],1
 14639 000012E5 800E[089E]01            	or	byte [COMSW],mask.dev
 14640 000012EA EB2F                    	jmp	short cpErr	; return error
 14641                                  crpath1:
 14642 000012EC FF36[80A0]              	push	word [PathPos]	; save ptr to pathname
 14643 000012F0 C606[88A0]FF            	mov	byte [DirFlag],-1
 14644                                  				; tell PathCrunch not to parse file into FCB
 14645 000012F5 E8D218                  	call	PathCrunch	; change to directory in pathname
 14646 000012F8 C606[88A0]00            	mov	byte [DirFlag],0
 14647                                  				; reset our little flag
 14648 000012FD 5E                      	pop	si		; SI = ptr to pathname
 14649 000012FE 7208                    	jc	short cpNoDir	; didn't find directory path
 14650 00001300 741A                    	jz	short cpRet	; found directory path w/ no filename
 14651                                  				;  - leave wildcard default in FCB and return
 14652                                  
 14653                                  ;*	We found a directory, and there was a filename attached.
 14654                                  ;	DestTail = ptr to ASCIIZ filename
 14655                                  
 14656 00001302 8B36[ACA0]              	mov	si,[DestTail]	; SI = ptr to filename
 14657 00001306 EB28                    	jmp	short cpFile	; go parse the file into FCB
 14658                                  
 14659                                  ;*	PathCrunch failed to find a directory in the pathname.
 14660                                  ;
 14661                                  ;	Msg_Numb = error code
 14662                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 14663                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 14664                                  
 14665                                  cpNoDir:
 14666 00001308 A1[25A2]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 14667 0000130B 09C0                    	or	ax,ax
 14668 0000130D 750C                    	jnz	short cpErr	  ; error occurred - return it
 14669 0000130F 803E[AAA0]00            	cmp	byte [DestIsDir],0
 14670 00001314 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 14671                                  crpath3:
 14672                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 14673                                  	;;or	word [COMSW],2
 14674                                  	;or	byte [COMSW],2
 14675 00001316 800E[089E]02            	or	byte [COMSW],mask.baddir
 14676                                  	;jmp	short cpErr	  ; return error
 14677                                  	; 16/02/2023
 14678                                  cpErr:
 14679 0000131B F9                      	stc			  ; return error
 14680                                  cpRet:
 14681 0000131C C3                      	retn
 14682                                  
 14683                                  cpMaybe:
 14684                                  ;	SI = ptr to pathname
 14685                                  
 14686                                  	;cmp	byte [si+1],COLON_CHAR
 14687 0000131D 807C013A                	cmp	byte [si+1],':'
 14688 00001321 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 14689 00001323 AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 14690                                  crpath2:
 14691 00001324 813C2E2E                	cmp	word [si],".."
 14692 00001328 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 14693 0000132A 807C0200                	cmp	byte [si+2],0
 14694                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 14695                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 14696                                  	;;;or	word [COMSW],2
 14697                                  	;;or	byte [COMSW],2
 14698                                  	;or	byte [COMSW],mask.baddir
 14699                                  	;jmp	short cpErr	  ; return error
 14700                                  	; 16/02/2023
 14701 0000132E 74E6                    	je	short crpath3
 14702                                  
 14703                                  ;	The preceding code was taken from the old DIR routine.
 14704                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 14705                                  ;	occurring when we're at the root directory. Too bad it
 14706                                  ;	doesn't handle problems with "..\..", etc.
 14707                                  
 14708                                  ;	We're ready to parse a filename into the FCB.
 14709                                  ;	SI = ptr to ASCIIZ filename
 14710                                  
 14711                                  cpFile:	
 14712 00001330 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 14713 00001333 B80E29                  	mov	ax,290Eh
 14714                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14715                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 14716                                  				; wildcards already in FCB used as defaults
 14717 00001336 CD21                    	int	21h
 14718 00001338 F8                      	clc			; return success
 14719                                  	;jmp	short cpRet
 14720                                  	; 16/02/2023
 14721 00001339 C3                      	retn
 14722                                  
 14723                                  ;cpErr:
 14724                                  ;	stc			; return error
 14725                                  ;cpRet:
 14726                                  ;	retn
 14727                                  
 14728                                  ; ---------------------------------------------------------------------------
 14729                                  
 14730                                  ;***	InstallCtrlC - install our private control-C handler
 14731                                  ;
 14732                                  ;	Put our control-c handler in front of command.com's default
 14733                                  ;	handler, to make sure the user's default directory gets restored.
 14734                                  ;	This shouldn't be necessary, but, for now, there are situations
 14735                                  ;	where the TDATA segment is left in a modified state when a
 14736                                  ;	control-c occurs.  This means that the transient will be
 14737                                  ;	reloaded, and the user's directory cannot be restored.
 14738                                  ;
 14739                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 14740                                  ;
 14741                                  ;	ENTRY	nothing
 14742                                  ;
 14743                                  ;	EXIT	nothing
 14744                                  ;
 14745                                  ;	USED	AX,BX,DX
 14746                                  ;
 14747                                  ;	EFFECTS
 14748                                  ;
 14749                                  ;	  CtrlCHandler address placed in int 23 vector.
 14750                                  ;
 14751                                  ;	NOTE
 14752                                  ;
 14753                                  ;	  Command.com's basic control-c handler will be restored
 14754                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 14755                                  
 14756                                  	; 16/02/2023
 14757                                  InstallCtrlC:
 14758 0000133A 06                      	push	es			; preserve ES
 14759 0000133B B82335                  	mov	ax,3523h
 14760                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 14761                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 14762 0000133E CD21                    	int	21h
 14763 00001340 891E[B5A9]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 14764 00001344 8C06[B7A9]              	mov	[OldCtrlCHandler+2],es	 
 14765 00001348 07                      	pop	es			; restore ES
 14766                                  
 14767 00001349 BA[341B]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 14768 0000134C B82325                  	mov	ax,2523h
 14769                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 14770                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 14771 0000134F CD21                    	int	21h
 14772 00001351 C3                      	retn
 14773                                  
 14774                                  ; ---------------------------------------------------------------------------
 14775                                  
 14776                                  ;***	ListSubds - search and list files in subdirectories
 14777                                  ;
 14778                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 14779                                  ;		FCB is still set up for file searches
 14780                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 14781                                  ;
 14782                                  ;	EXIT	CY = clear if no error
 14783                                  ;		FileCnt = # files found & displayed
 14784                                  ;		FileSiz = total size of files found
 14785                                  ;
 14786                                  ;		If error,
 14787                                  ;		CY = set
 14788                                  ;		Ready for DOS Get Extended Error call
 14789                                  ;
 14790                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14791                                  ;
 14792                                  ;	EFFECTS
 14793                                  ;
 14794                                  ;	  FileCntTotal, FileSizTotal are updated.
 14795                                  ;	  Subdirectories may be listed on standard output device.
 14796                                  ;
 14797                                  ;	NOTES
 14798                                  ;
 14799                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 14800                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 14801                                  ;	   Each name is stored ASCIIZ.
 14802                                  
 14803                                  	; 16/02/2023
 14804                                  ListSubds:
 14805                                  	;invoke	SetRest1		; make sure user's dir gets restored
 14806 00001352 E8DC1E                  	call	SetRest1
 14807                                  
 14808 00001355 BB[6CA1]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 14809                                  lsNode:
 14810 00001358 C60700                  	mov	byte [bx],0		; start with null child name
 14811                                  lsLoop:
 14812 0000135B E81002                  	call	FindNextChild		; search for next subdirectory
 14813 0000135E 7235                    	jc	short lsErr		; search failed - examine error
 14814                                  
 14815 00001360 89DA                    	mov	dx,bx			; DX = ptr to child's name
 14816 00001362 E8A904                  	call	ChangeDir		; enter child directory
 14817                                  
 14818                                  					; M023;start
 14819 00001365 7306                    	jnc	short lstsd1		; check for error
 14820                                  	;cmp	ax,3
 14821 00001367 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 14822 0000136A 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 14823                                  	;jmp	short lsRet		; no, other error: DIR must fail
 14824                                  	; 16/02/2023			; M023;end
 14825 0000136C C3                      	retn
 14826                                  lstsd1:	
 14827 0000136D 53                      	push	bx
 14828 0000136E E8AB02                  	call	ListDir			; list the directory
 14829 00001371 5B                      	pop	bx
 14830                                  
 14831                                  ;	Note we're ignoring errors returned here.
 14832                                  
 14833 00001372 89DF                    	mov	di,bx			; DI = ptr to child's name
 14834 00001374 B90D00                  	mov	cx,13			; CX = max name length w/ null
 14835 00001377 30C0                    	xor	al,al			; AL = zero byte to look for
 14836 00001379 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 14837 0000137B 53                      	push	bx			; save ptr to child's name
 14838 0000137C 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 14839 0000137E E8D7FF                  	call	lsNode			; recurse from new node
 14840 00001381 5B                      	pop	bx			; BX = ptr to child's name
 14841 00001382 9C                      	pushf				; save error condition
 14842                                  	
 14843                                  	;;shove	0
 14844                                  	;mov	ax,0
 14845 00001383 29C0                    	sub	ax,ax ; 0
 14846 00001385 50                      	push	ax
 14847                                  	;shove	".."
 14848 00001386 B82E2E                  	mov	ax,'..'  ; 2E2Eh
 14849 00001389 50                      	push	ax
 14850 0000138A 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 14851 0000138C E87F04                  	call	ChangeDir		; return to parent directory
 14852 0000138F 58                      	pop	ax			; restore stack
 14853 00001390 58                      	pop	ax
 14854                                  
 14855 00001391 9D                      	popf				; restore error condition from child
 14856                                  	;jc	short lsRet		; return error
 14857                                  	;jmp	short lsLoop		; look for more children
 14858                                  	; 16/02/2023
 14859 00001392 73C7                    	jnc	short lsLoop
 14860 00001394 C3                      	retn
 14861                                  lsErr:
 14862 00001395 E8AA0E                  	call	get_ext_error_number	; AX = extended error code
 14863                                  	;cmp	ax,2
 14864 00001398 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 14865 0000139B 7406                    	je	short lsRet		; file not found, we're ok
 14866                                  	;cmp	ax,18
 14867 0000139D 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 14868 000013A0 7401                    	je	short lsRet		; no more files, we're ok
 14869 000013A2 F9                      	stc				; return other errors
 14870                                  lsRet:	
 14871 000013A3 C3                      	retn
 14872                                  
 14873                                  ; ---------------------------------------------------------------------------
 14874                                  
 14875                                  	;break	<DIR support routines>
 14876                                  
 14877                                  ;***	SUPPORT ROUTINES
 14878                                  
 14879                                  ; ----------------------
 14880                                  
 14881                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 14882                                  ;
 14883                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 14884                                  ;		BX = ptr to last child's name
 14885                                  ;		BP = ptr to temp child's name
 14886                                  ;
 14887                                  ;	EXIT	nothing
 14888                                  ;
 14889                                  ;	USED	AX,CX,SI,DI
 14890                                  ;
 14891                                  ;	EFFECTS
 14892                                  ;
 14893                                  ;	  Filename pointed to by BP may be changed.
 14894                                  ;
 14895                                  ;	NOTES
 14896                                  ;
 14897                                  ;	  Potential filename replaces temp filename if:
 14898                                  ;	   it's a subdirectory file;
 14899                                  ;	   it doesn't start with a '.';
 14900                                  ;	   it's alphanumerically greater than last child's name;
 14901                                  ;	   and it's alphanumerically less than temp name.
 14902                                  
 14903                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14904                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14905                                  CheckChild:
 14906                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 14907 000013A4 F606[3FA0]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 14908 000013A9 741D                    	jz	short ccRet	; not a subdirectory file- return
 14909                                  
 14910                                  	; 16/02/2023
 14911 000013AB BE[48A0]                	mov	si,DIRBUF+FIND_BUF.PNAME
 14912 000013AE 803C2E                  	cmp	byte [si],'.'
 14913                                  	;;cmp	DirBuf.find_buf_pname,'.'
 14914                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 14915 000013B1 7415                    	je	short ccRet	; starts with a dot- return
 14916                                  
 14917                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14918                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14919 000013B3 89DF                    	mov	di,bx
 14920 000013B5 E86D04                  	call	CmpAscz		; compare candidate to last child's name
 14921 000013B8 760E                    	jna	short ccRet	; it's not above it- return
 14922                                  
 14923                                  	; 07/06/2023
 14924                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14925                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14926                                  	; si = DIRBUF+FIND_BUF.PNAME
 14927 000013BA 89EF                    	mov	di,bp
 14928 000013BC E86604                  	call	CmpAscz		; compare candidate to temp name
 14929 000013BF 7307                    	jnb	short ccRet	; it's not below it- return
 14930                                  
 14931                                  ;	New kid is alright. Copy to temp.
 14932                                  
 14933                                  	; 07/06/2023
 14934                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14935                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14936                                  	; si = DIRBUF+FIND_BUF.PNAME
 14937 000013C1 89EF                    	mov	di,bp
 14938 000013C3 B90D00                  	mov	cx,13
 14939 000013C6 F3A4                    	rep	movsb
 14940                                  ccRet:
 14941 000013C8 C3                      	retn
 14942                                  
 14943                                  ; ---------------------------------------------------------------------------
 14944                                  
 14945                                  ;***	CmpEntry - compare one directory entry to another in sort order
 14946                                  ;
 14947                                  ;	Compare one directory entry against another according to
 14948                                  ;	the sort codes in DestBuf. One or more comparisons
 14949                                  ;	may be made of file name, extension, time/date, and
 14950                                  ;	size.  Comparisons may be made for upward or downward
 14951                                  ;	sort order.
 14952                                  ;
 14953                                  ;	ENTRY	ES:BX = ptr to entry to compare
 14954                                  ;		ES:BP = ptr to entry to be compared against
 14955                                  ;		DestBuf contains sort codes (see DestBuf)
 14956                                  ;		DS = TRANGROUP seg addr
 14957                                  ;
 14958                                  ;	EXIT	BX = unchanged
 14959                                  ;		BP = unchanged
 14960                                  ;		Condition flags set for same, above, or below
 14961                                  ;		 comparing BX entry against BP entry.
 14962                                  ;		 'Same, above, below' translate to 'same, after, before'.
 14963                                  ;
 14964                                  ;	USED:	AX,CX,DX,SI,DI
 14965                                  
 14966                                  	; 16/02/2023
 14967                                  CmpEntry:
 14968 000013C9 BE[AFA0]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 14969                                  ceLoop:
 14970 000013CC 31C0                    	xor	ax,ax		; AX = 0
 14971 000013CE 8A04                    	mov	al,[si]		; AL = sort code
 14972 000013D0 08C0                    	or	al,al
 14973 000013D2 741C                    	jz	short ceDone	; sort code is zero, we're done
 14974 000013D4 46                      	inc	si		; DS:SI = ptr to next sort code
 14975 000013D5 56                      	push	si		; save ptr to next sort code
 14976 000013D6 FEC8                    	dec	al
 14977 000013D8 D0E0                    	shl	al,1
 14978                                  	;sal	al,1		; AX = index into cmp call table
 14979                                  				; CY set for downward sort order
 14980 000013DA 89C6                    	mov	si,ax		; SI = index into cmp call table
 14981 000013DC 2E8B84[F113]            	mov	ax,[cs:si+FieldCmps]
 14982                                  				; AX = addr of compare routine
 14983 000013E1 7204                    	jc	short ceDn	; downwards sort - go swap entries
 14984 000013E3 FFD0                    	call	ax 		; do upwards sort
 14985 000013E5 EB06                    	jmp	short ceNs
 14986                                  ceDn:
 14987 000013E7 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 14988 000013E9 FFD0                    	call	ax		; do sort
 14989 000013EB 87DD                    	xchg	bx,bp		; swap ptrs back
 14990                                  ceNs:
 14991 000013ED 5E                      	pop	si		; SI = ptr to next sort code
 14992 000013EE 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 14993                                  ceDone:
 14994                                  
 14995                                  ;	Get here either from unequal compare or sort code = 0.
 14996                                  ;	In the latter case, condition codes indicate equality,
 14997                                  ;	which is correct.
 14998                                  
 14999 000013F0 C3                      	retn
 15000                                  
 15001                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15002                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 15003                                  
 15004                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 15005                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:144Eh)
 15006                                  
 15007                                  FieldCmps:		; call table of entry comparisons
 15008 000013F1 [FD13]                  	dw	CmpName
 15009 000013F3 [0814]                  	dw	CmpExt
 15010 000013F5 [4614]                  	dw	CmpTime
 15011 000013F7 [6214]                  	dw	CmpSize
 15012 000013F9 [6714]                  	dw	CmpType
 15013                                  	; 05/06/2023 - Retro DOS 4.2 COMMAND.COM
 15014 000013FB [7514]                  	dw	CmpCratio
 15015                                  
 15016                                  ; ---------------------------------------------------------------------------
 15017                                  
 15018                                  ;***	CmpName - compare file name of two entries
 15019                                  ;***	CmpExt - compare extension of two entries
 15020                                  ;
 15021                                  ;	ENTRY	ES:BX = ptr to one entry
 15022                                  ;		ES:BP = ptr to another entry
 15023                                  ;
 15024                                  ;	EXIT	BX = unchanged
 15025                                  ;		BP = unchanged
 15026                                  ;		Condition flags set for same, above, or below
 15027                                  ;		comparing BX entry to BP entry.
 15028                                  ;
 15029                                  ;	USED:	AX,CX,DX,SI,DI
 15030                                  
 15031                                  	; 16/02/2023
 15032                                  CmpName:
 15033 000013FD 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 15034 000013FF 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 15035                                  	;;add	si,filename	; ES:SI = ptr to BX name
 15036                                  	;add	si,1
 15037                                  	; 25/04/2023
 15038 00001401 46                      	inc	si
 15039                                  	;;add	di,filename	; ES:DI = ptr to BP name
 15040                                  	;add	di,1
 15041                                  	; 25/04/2023
 15042 00001402 47                      	inc	di
 15043                                  	;mov	cx,size filename
 15044                                  				; CX = length of name
 15045 00001403 B90800                  	mov	cx,8
 15046 00001406 EB0C                    	jmp	short CmpStr
 15047                                  
 15048                                  CmpExt:
 15049                                  	; 07/06/2023
 15050                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 15051                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 15052                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 15053                                  	;add	si,9
 15054                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 15055                                  	;add	di,9
 15056                                  	;
 15057 00001408 BE0900                  	mov	si,9
 15058 0000140B 89F7                    	mov	di,si ; mov di,9
 15059 0000140D 01DE                    	add	si,bx
 15060 0000140F 01EF                    	add	di,bp
 15061                                  	;
 15062                                  	;mov	cx,size fileext	; CX = length of extension field
 15063 00001411 B90300                  	mov	cx,3
 15064                                  
 15065                                  ;	Bugbug:	use symbol for subfunction code.
 15066                                  
 15067                                  CmpStr:	
 15068 00001414 803E[B0A9]06            	cmp	byte [CountryPtrId],6
 15069 00001419 7527                    	jne	short cnNoCollTable
 15070                                  				; no collating table available
 15071                                  
 15072                                  ;*	Compare strings using collating table.
 15073                                  ;
 15074                                  ;	ES:SI = ptr to 1st string
 15075                                  ;	ES:DI = ptr to 2nd string
 15076                                  ;	CX = length
 15077                                  
 15078 0000141B 55                      	push	bp		; preserve BP
 15079 0000141C 53                      	push	bx		; preserve BX
 15080 0000141D 1E                      	push	ds		; preserve DS
 15081 0000141E C51E[B1A9]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 15082                                  	;assume	ds:NOTHING
 15083 00001422 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 15084 00001424 43                      	inc	bx
 15085 00001425 43                      	inc	bx		; DS:BX = ptr to collating values
 15086                                  				; DS:[BX]-2 = size of table
 15087 00001426 31C0                    	xor	ax,ax		; AX = 0 for starters
 15088                                  
 15089                                  ;	Bugbug:	Investigate removing collating table length checks.
 15090                                  
 15091                                  cnNextChar:
 15092 00001428 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 15093 0000142B 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 15094 0000142C 39E8                    	cmp	ax,bp		; compare to collating table length
 15095 0000142E 7301                    	jae	short cn1 	; char not in table
 15096 00001430 D7                      	xlat				
 15097                                  cn1:				; AL = AX = collating value
 15098 00001431 89C2                    	mov	dx,ax		; DX = collating value from 2nd string
 15099                                  	;lods	byte ptr es:[si]
 15100 00001433 26AC                    	es	lodsb		; AL = AX = char from 1st string
 15101                                  				; ES:SI = ptr to next char 1st string
 15102 00001435 39E8                    	cmp	ax,bp		; compare to collating table length
 15103 00001437 7301                    	jae	short cn2	; char not in table
 15104 00001439 D7                      	xlat				
 15105                                  cn2:				; AL = AX = collating value
 15106 0000143A 39D0                    	cmp	ax,dx		; compare collating values
 15107 0000143C E1EA                    	loope	cnNextChar	; until unequal or no more left
 15108                                  
 15109 0000143E 1F                      	pop	ds		; restore DS
 15110                                  	;assume	ds:TRANGROUP
 15111 0000143F 5B                      	pop	bx		; restore BX
 15112 00001440 5D                      	pop	bp		; restore BP
 15113 00001441 C3                      	retn
 15114                                  
 15115                                  ;*	If no collating table is available, simply compare raw ASCII values.
 15116                                  ;	Don't we wish we could just do this all the time?  Sigh.
 15117                                  
 15118                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15119                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 15120                                  cnNoCollTable:
 15121                                  	;repe	cmps byte ptr es:[si],[di]
 15122                                  				;db 0F3h,26h,0A6h,0C3h
 15123 00001442 F3                      	repe	; 0F3h
 15124 00001443 26                      	es	; 26h
 15125 00001444 A6                      	cmpsb	; 0A6h
 15126 00001445 C3                      	retn	; 0C3h
 15127                                  
 15128                                  ; ---------------------------------------------------------------------------
 15129                                  
 15130                                  ;***	CmpTime - compare entries by date/time
 15131                                  ;
 15132                                  ;	ENTRY	ES:BX = ptr to one entry
 15133                                  ;		ES:BP = ptr to another entry
 15134                                  ;
 15135                                  ;	EXIT	BX = unchanged
 15136                                  ;		BP = unchanged
 15137                                  ;		Condition flags set for same, above, or below
 15138                                  ;		 comparing BX entry to BP entry.
 15139                                  ;
 15140                                  ;	USED:	CX,SI,DI
 15141                                  ;
 15142                                  ;	NOTE	Filetime and filedate fields in our private entry
 15143                                  ;		structure must be adjacent and in that order.
 15144                                  
 15145                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15146                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15147                                  CmpTime:
 15148 00001446 89DE                    	mov	si,bx
 15149 00001448 89EF                    	mov	di,bp
 15150                                  	;add	si,filedate + size filedate - 1
 15151 0000144A 83C610                  	add	si,16 ; 15+2-1
 15152                                  	;add	di,filedate + size filedate - 1
 15153 0000144D 83C710                  	add	di,16 ; 15+2-1
 15154                                  	; 07/06/2023
 15155 00001450 BE1000                  	mov	si,16
 15156                                  CmpST2:		; 07/06/2023
 15157 00001453 89F7                    	mov	di,si	; mov di,16
 15158 00001455 01DE                    	add	si,bx
 15159 00001457 01EF                    	add	di,bp
 15160                                  
 15161                                  	;mov	cx,size filetime + size filedate
 15162 00001459 B90400                  	mov	cx,4 ; 2+2
 15163 0000145C FD                      	std
 15164                                  	;repe	cmps byte ptr es:[si],[di]
 15165                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 15166 0000145D F3                      	repe	; 0F3h
 15167 0000145E 26                      	es	; 26h
 15168 0000145F A6                      	cmpsb	; 0A6h
 15169                                  	
 15170 00001460 FC                      	cld	; 0FCh
 15171 00001461 C3                      	retn	; 0C3h
 15172                                  
 15173                                  ; ---------------------------------------------------------------------------
 15174                                  
 15175                                  ;***	CmpSize - compare entries by size
 15176                                  ;
 15177                                  ;	ENTRY	ES:BX = ptr to one entry
 15178                                  ;		ES:BP = ptr to another entry
 15179                                  ;
 15180                                  ;	EXIT	BX = unchanged
 15181                                  ;		BP = unchanged
 15182                                  ;		Condition flags set for same, above, or below
 15183                                  ;		 comparing BX entry to BP entry.
 15184                                  ;
 15185                                  ;	USED:	CX,SI,DI
 15186                                  
 15187                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15188                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15189                                  CmpSize:
 15190                                  	;mov	si,bx
 15191                                  	;mov	di,bp
 15192                                  	;;add	si,filesize + size filesize - 1
 15193                                  	;add	si,20  ; 17+4-1
 15194                                  	;;add	di,filesize + size filesize - 1
 15195                                  	;add	di,20  ; 17+4-1
 15196                                  	; 07/06/2023
 15197 00001462 BE1400                  	mov	si,20
 15198                                  	;;;
 15199 00001465 EBEC                    	jmp	short CmpST2 ; 07/06/2023
 15200                                  	;;;
 15201                                  ;CmpST2:
 15202                                  ;	mov	di,si	; mov di,20
 15203                                  ;	add	si,bx
 15204                                  ;	add	di,bp
 15205                                  ;
 15206                                  ;	;mov	cx,size filesize
 15207                                  ;	mov	cx,4
 15208                                  ;	std
 15209                                  ;	;repe	cmps byte ptr es:[si],[di]
 15210                                  ;				;db 0F3h,26h,0A6h
 15211                                  ;	repe	; 0F3h
 15212                                  ;	es	; 26h
 15213                                  ;	cmpsb	; 0A6h
 15214                                  ;
 15215                                  ;	cld
 15216                                  ;	retn
 15217                                  
 15218                                  ; ---------------------------------------------------------------------------
 15219                                  
 15220                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 15221                                  ;
 15222                                  ;	ENTRY	ES:BX = ptr to one entry
 15223                                  ;		ES:BP = ptr to another entry
 15224                                  ;
 15225                                  ;	EXIT	BX = unchanged
 15226                                  ;		BP = unchanged
 15227                                  ;		Condition flags set for same, above, or below
 15228                                  ;		 comparing BX entry to BP entry.
 15229                                  ;
 15230                                  ;	USED:	AX
 15231                                  
 15232                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15233                                  CmpType:
 15234                                  	;mov	al,es:[bx].fileattr
 15235 00001467 268A470C                	mov	al,[es:bx+12]
 15236                                  	;mov	ah,es:[bp].fileattr
 15237 0000146B 268A660C                	mov	ah,[es:bp+12]
 15238                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 15239                                  	;and	ax,1010h
 15240 0000146F 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 15241 00001472 38C4                    	cmp	ah,al
 15242 00001474 C3                      	retn
 15243                                  
 15244                                  ; ---------------------------------------------------------------------------
 15245                                  
 15246                                  ;***	CmpCratio - compare entries by compression ratio
 15247                                  ;
 15248                                  ;	ENTRY	ES:BX = ptr to one entry
 15249                                  ;		ES:BP = ptr to another entry
 15250                                  ;
 15251                                  ;	EXIT	BX = unchanged
 15252                                  ;		BP = unchanged
 15253                                  ;		Condition flags set for same, above, or below
 15254                                  ;		 comparing BX entry to BP entry.
 15255                                  ;
 15256                                  ;	USED:	AX
 15257                                  
 15258                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 15259                                  CmpCratio:
 15260                                  	;mov	al,es:[bx].compratio
 15261 00001475 268A4715                	mov	al,[es:bx+21]	
 15262                                  	;cmp	al,es:[bp].compratio
 15263 00001479 263A4615                	cmp     al,[es:bp+21]
 15264 0000147D C3                      	retn
 15265                                  
 15266                                  ; ---------------------------------------------------------------------------
 15267                                  
 15268                                  ;***	DefaultAttr - set default attribute conditions
 15269                                  ;
 15270                                  ;	ENTRY	nothing
 15271                                  ;
 15272                                  ;	EXIT	CY clear
 15273                                  ;
 15274                                  ;	USED
 15275                                  ;
 15276                                  ;	EFFECTS
 15277                                  ;
 15278                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 15279                                  
 15280                                  	; 16/02/2023
 15281                                  DefaultAttr:
 15282                                  	;mov	byte [AttrSpecified],6
 15283 0000147E C606[84A0]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 15284                                  					; specify H and S
 15285 00001483 C606[85A0]00            	mov	byte [AttrSelect],0	; H and S must be off
 15286 00001488 F8                      	clc				; return success
 15287                                  dtRet:	; 18/02/2023
 15288 00001489 C3                      	retn
 15289                                  
 15290                                  ; ---------------------------------------------------------------------------
 15291                                  
 15292                                  ;***	DisplayTotals - display grand total stats
 15293                                  ;
 15294                                  ;	If we searched subdirectories, display the total # files found
 15295                                  ;	 and total size of files found.
 15296                                  ;	Display disk space remaining.
 15297                                  ;
 15298                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 15299                                  ;		Bits contains setting of /s
 15300                                  ;		FCB contains drive #
 15301                                  ;
 15302                                  ;	EXIT	nothing
 15303                                  ;
 15304                                  ;	USES	AX,DX
 15305                                  ;		FileSiz
 15306                                  
 15307                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15308                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 15309                                  
 15310                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15311                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:14F1h
 15312                                  
 15313                                  DisplayTotals:
 15314                                  	;;;test	Bits,mask subd
 15315                                  	;;test	word [_Bits],4
 15316                                  	;test	byte [_Bits],4
 15317                                  	; 07/06/2023
 15318 0000148A F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 15319 0000148F 7432                    	jz	short dtFree		; no subdirectories- do bytes free
 15320                                  
 15321 00001491 E88D16                  	call	CRLF2			; start on new line
 15322 00001494 E82204                  	call	UseLine
 15323                                  
 15324 00001497 BA[0F94]                	mov	dx,total_ptr
 15325 0000149A E87240                  	call	std_printf		; "Total:",cr,lf
 15326 0000149D E81904                  	call	UseLine
 15327                                  	;;;
 15328                                  	; 07/06/2023
 15329                                  	; MSDOS 6.22 COMMAND.COM
 15330                                  	;test	word [_Bits],1		; mask.cratio
 15331 000014A0 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 15332 000014A5 740E                    	jz      short dtCntSize
 15333 000014A7 A1[2F9E]                	mov     ax,[ccluUsedTotal]
 15334 000014AA A3[2D9E]                	mov     [ccluUsedDir],ax
 15335 000014AD BE[399E]                	mov     si,csecUsedTotal
 15336 000014B0 BF[359E]                	mov     di,csecUsedDir
 15337 000014B3 A5                      	movsw
 15338 000014B4 A5                      	movsw
 15339                                  dtCntSize:    
 15340                                  	;;;
 15341 000014B5 A1[239E]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 15342 000014B8 BE[279E]                	mov	si,FileSizTotal
 15343 000014BB BF[1F9E]                	mov	di,FileSiz
 15344 000014BE A5                      	movsw
 15345 000014BF A5                      	movsw				; move total size to size variable
 15346 000014C0 E8FC05                  	call	DisplayCntSiz		; display file count & size &
 15347                                  dtFree: 				;   (maybe) compression ratio
 15348 000014C3 B436                    	mov	ah,36h
 15349                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 15350 000014C5 8A165C00                	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 15351 000014C9 CD21                    	int	21h			; call DOS
 15352 000014CB 83F8FF                  	cmp	ax,-1			; check 'invalid drive' return code
 15353 000014CE 74B9                    	jz	short dtRet		; can't get drive space - return
 15354 000014D0 F7E1                    	mul	cx
 15355 000014D2 F7E3                    	mul	bx
 15356 000014D4 A3[9AA0]                	mov	[Bytes_Free],ax
 15357 000014D7 8916[9CA0]              	mov	[Bytes_Free+2],dx
 15358 000014DB BA[1E92]                	mov	dx,bytmes_ptr
 15359 000014DE E82E40                  	call	std_printf		; "nnn bytes free",cr,lf
 15360                                  	;call	UseLine
 15361                                  ;dtRet:
 15362                                  	;retn
 15363                                  	; 18/02/2023
 15364 000014E1 E9D503                  	jmp	UseLine
 15365                                  
 15366                                  ; ---------------------------------------------------------------------------
 15367                                  
 15368                                  ;***	FileIsDevice - see if file looks like a device
 15369                                  ;
 15370                                  ;	ENTRY	PathPos = ptr to pathname
 15371                                  ;		PathCnt = length of pathname w/o terminating char
 15372                                  ;		DirBuf is DOS DTA
 15373                                  ;
 15374                                  ;	EXIT	ZR = set if file looks like a device
 15375                                  ;
 15376                                  ;	USED	AX,BX,CX,DX,DI
 15377                                  ;
 15378                                  ;	EFFECTS
 15379                                  ;
 15380                                  ;	  DTA buffer holds results of Find First function
 15381                                  ;
 15382                                  ;	NOTES
 15383                                  ;
 15384                                  ;	  We try to flag devices in two ways. First, we try
 15385                                  ;	  the DOS Find First function. It returns attribute bit 6
 15386                                  ;	  set on a successful find if it identifies a device name.
 15387                                  ;	  Unfortunately, it returns 'path not found' for a device
 15388                                  ;	  name terminated with colon, such as "CON:". So, we look
 15389                                  ;	  for any colon in the pathname after the 2nd character,
 15390                                  ;	  and flag the pathname as a device if we find one.
 15391                                  
 15392                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15393                                  FileIsDevice:
 15394 000014E4 8B16[80A0]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 15395                                  
 15396 000014E8 89D7                    	mov	di,dx
 15397 000014EA 033E[7EA0]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 15398 000014EE 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 15399 000014F0 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 15400                                  
 15401 000014F2 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 15402 000014F4 B44E                    	mov	ah,4Eh
 15403                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 15404 000014F6 CD21                    	int	21h	 	 ; call DOS
 15405 000014F8 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 15406 000014FA 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 15407                                  
 15408                                  ;	Found a dir entry, see if Find First thinks it's a device.
 15409                                  
 15410                                  	;test	byte [DIRBUF+21],40h
 15411 000014FC F606[3FA0]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 15412 00001501 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 15413 00001503 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 15414                                  	;jmp	short piRet
 15415                                  	; 25/04/2023
 15416                                  piRet:
 15417 00001505 C3                      	retn
 15418                                  
 15419                                  ;	Device attribute not returned by Find First function. But
 15420                                  ;	let's check for a colon anywhere in the pathname after the
 15421                                  ;	second byte.
 15422                                  ;
 15423                                  ;	DI = ptr to byte after pathname
 15424                                  
 15425                                  piCol:
 15426 00001506 4F                      	dec	di		 ; DI = ptr to last char in pathname
 15427 00001507 B03A                    	mov	al,':'
 15428                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 15429 00001509 8B0E[7EA0]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 15430 0000150D 49                      	dec	cx
 15431 0000150E 49                      	dec	cx		 ; ignore 1st two chars of pathname
 15432 0000150F 09C9                    	or	cx,cx
 15433 00001511 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 15434 00001513 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 15435 00001515 FD                      	std			 ; scan downward
 15436 00001516 F2AE                    	repne	scasb
 15437 00001518 FC                      	cld			 ; restore default upward direction
 15438                                  
 15439                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 15440                                  ;piRet:
 15441 00001519 C3                      	retn
 15442                                  
 15443                                  ;FileIsDevice endp
 15444                                  
 15445                                  ; ---------------------------------------------------------------------------
 15446                                  
 15447                                  ;***	FindFirst - find first directory entry to display
 15448                                  ;***	FindNext - find next directory entry to display
 15449                                  ;
 15450                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 15451                                  ;		AttrSpecified, AttrSelect are set
 15452                                  ;
 15453                                  ;	EXIT	CY = clear if successful
 15454                                  ;		BX = offset in TPA buffer of directory entry found
 15455                                  ;
 15456                                  ;		If unsuccessful,
 15457                                  ;		CY = set
 15458                                  ;		AX = DOS error code
 15459                                  ;		DOS Get Extended Error call will get error code
 15460                                  ;
 15461                                  ;		NOTE: if entries were loaded into TPA, AX contains
 15462                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 15463                                  ;		but DOS Get Extended Error call WON'T return the correct
 15464                                  ;		error. That's ok, because we'll see the value in AX
 15465                                  ;		and recognize it as a non-error condition.
 15466                                  ;
 15467                                  ;	USED	AX,CX,DX,SI,DI
 15468                                  ;
 15469                                  ;	EFFECTS
 15470                                  ;
 15471                                  ;	  Entries in memory may be marked as output.
 15472                                  ;	  If not sorted, entry is loaded at TPA.
 15473                                  ;
 15474                                  ;	NOTES
 15475                                  ;
 15476                                  ;	  If we don't find a qualifying file, we return after the final
 15477                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 15478                                  ;	   indicate an appropriate condition.
 15479                                  
 15480                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15481                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15482                                  
 15483                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15484                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1585h
 15485                                  	
 15486                                  FindFirst:
 15487                                  	;mov	ax,offset TRANGROUP:GetFirst
 15488 0000151A B8[F115]                	mov	ax,GetFirst
 15489 0000151D EB03                    	jmp	short ffFindEntry
 15490                                  
 15491                                  	; 18/02/2023
 15492                                  FindNext:
 15493                                  	;mov	ax,offset TRANGROUP:GetNext
 15494 0000151F B8[FF15]                	mov	ax,GetNext
 15495                                  
 15496                                  ;	AX = address of correct disk get routine to use.
 15497                                  
 15498                                  ffFindEntry:
 15499 00001522 06                      	push	es			; save TRANGROUP seg addr
 15500                                  	;;;test	Bits,mask inmem
 15501                                  	;;test	word [_Bits],20h
 15502                                  	;test	byte [_Bits],20h
 15503                                  	; 07/06/2023
 15504 00001523 F606[7CA0]40            	test	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0
 15505 00001528 7405                    	jz	short ffDisk		; entries not in memory, search disk
 15506                                  
 15507                                  ;	Entries are loaded in memory to sort out. Find the first one.
 15508                                  ;	There will always be one, or LoadEntries would've failed.
 15509                                  
 15510 0000152A E81A00                  	call	FindInMem		; find first entry in TPA
 15511 0000152D EB16                    	jmp	short ffRet		; return what TPA search returns
 15512                                  
 15513                                  ;	Get entry from disk.
 15514                                  
 15515                                  ffDisk:
 15516 0000152F FFD0                    	call	ax			; get entry from disk
 15517 00001531 720E                    	jc	short ffGetErr		; get & return error
 15518 00001533 8E06[F59D]              	mov	es,[TPA]		; ES = seg addr of TPA
 15519 00001537 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 15520 00001539 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 15521 0000153B E85F01                  	call	LoadEntry		; load entry to TPA
 15522 0000153E F8                      	clc				; return success
 15523 0000153F EB04                    	jmp	short ffRet
 15524                                  
 15525                                  ffGetErr:
 15526 00001541 E8FE0C                  	call	 get_ext_error_number	; AX = DOS error code
 15527 00001544 F9                      	stc
 15528                                  ffRet:
 15529 00001545 07                      	pop	es			; ES = TRANGROUP seg addr again
 15530 00001546 C3                      	retn
 15531                                  
 15532                                  ; ---------------------------------------------------------------------------
 15533                                  
 15534                                  ;***	FindInMem - find next directory entry in TPA buffer
 15535                                  ;
 15536                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 15537                                  ;
 15538                                  ;	EXIT	BX = offset in TPA of entry found
 15539                                  ;
 15540                                  ;		If no more files,
 15541                                  ;		CY = set
 15542                                  ;		AX = DOS 'no more files' error code
 15543                                  ;
 15544                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 15545                                  ;
 15546                                  ;	EFFECTS
 15547                                  ;
 15548                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 15549                                  
 15550                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15551                                  FindInMem:
 15552 00001547 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 15553 0000154B 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 15554 0000154D FC                      	cld				; make sure default string direction is up
 15555                                  	
 15556 0000154E E86D00                  	call	FindOneInMem		; locate an entry
 15557 00001551 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 15558                                  
 15559                                  ;	BX = ptr to entry in TPA
 15560                                  
 15561                                  fiBest:
 15562 00001553 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 15563                                  fiNext:
 15564 00001555 E87300                  	call	FindNextInMem		; locate next entry
 15565 00001558 720C                    	jc	short fiFound		; no more, best entry so far wins
 15566                                  
 15567                                  ;	BX = ptr to next entry
 15568                                  
 15569 0000155A E86CFE                  	call	CmpEntry		; compare it to best found so far (BP)
 15570 0000155D 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 15571 0000155F EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 15572                                  
 15573                                  fiNoMore:
 15574                                  
 15575                                  ;	No more entries available in TPA. Set up 'no more files' error.
 15576                                  
 15577                                  	;mov	ax,18
 15578 00001561 B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 15579 00001564 F9                      	stc				; return error
 15580                                  	;jmp	short fiRet
 15581                                  	; 18/02/2023
 15582 00001565 C3                      	retn
 15583                                  
 15584                                  fiFound:
 15585 00001566 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 15586 00001568 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 15587 0000156C F8                      	clc				; return success
 15588                                  fiRet:
 15589 0000156D C3                      	retn
 15590                                  
 15591                                  ; ---------------------------------------------------------------------------
 15592                                  
 15593                                  ;***	FindNextChild - find next subdirectory in current directory
 15594                                  ;
 15595                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 15596                                  ;		DirBuf is established DTA
 15597                                  ;
 15598                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 15599                                  ;
 15600                                  ;		If failure,
 15601                                  ;		CY = set
 15602                                  ;		DOS Get Extended Error call will get error
 15603                                  ;
 15604                                  ;	USED	AX,CX,DX,SI,DI,BP
 15605                                  ;
 15606                                  ;	EFFECTS
 15607                                  ;
 15608                                  ;	  DirBuf is used for find first/next calls.
 15609                                  ;
 15610                                  ;	NOTES
 15611                                  ;
 15612                                  ;	  We keep on checking files until DOS returns an error. If
 15613                                  ;	  the error is 'no more files' and the temp filename is not
 15614                                  ;	  the initial high tag, copy the temp to the child's name spot
 15615                                  ;	  and return success. Otherwise, send the error back to caller.
 15616                                  ;
 15617                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 15618                                  
 15619                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15620                                  FindNextChild:
 15621 0000156E 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 15622                                  	;shove	00FFh			; temp filename = high tag
 15623 00001571 B8FF00                  	mov	ax,0FFh
 15624 00001574 50                      	push	ax
 15625 00001575 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 15626                                  	;shove	"*"	
 15627 00001577 B02A                    	mov	al,'*'  ; ax = 002Ah
 15628 00001579 50                      	push	ax
 15629                                  	;;shove	".*" 
 15630                                  	;mov	ax,"*."
 15631                                  	;mov	ax,2E2Ah
 15632 0000157A B42E                    	mov	ah,'.'
 15633 0000157C 50                      	push	ax
 15634 0000157D E87D05                  	call	GetDriveLtr		; AX = "d:"
 15635 00001580 50                      	push	ax
 15636 00001581 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 15637                                  
 15638                                  ;	See that the stack is restored properly at the end of this proc.
 15639                                  
 15640                                  	;mov	cx,10h
 15641 00001583 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15642 00001586 B44E                    	mov	ah,4Eh
 15643                                  	;mov	ah,Find_First
 15644 00001588 CD21                    	int	21h			; DOS- Find First matching file
 15645 0000158A 722C                    	jc	short fcRet		; return error
 15646                                  
 15647 0000158C E815FE                  	call	CheckChild		; check child against last, temp
 15648                                  fcNext:	
 15649                                  	;mov	cx,10h
 15650 0000158F B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15651 00001592 B44F                    	mov	ah,4Fh
 15652                                  	;mov	ah,Find_Next
 15653 00001594 CD21                    	int	21h			; DOS- Find Next matching file
 15654 00001596 7205                    	jc	short fcErr		; examine error
 15655                                  
 15656 00001598 E809FE                  	call	CheckChild		; check child against last, temp
 15657 0000159B EBF2                    	jmp	short fcNext		; go find another child
 15658                                  
 15659                                  fcErr:
 15660 0000159D E8A20C                  	call	get_ext_error_number	; AX = extended error code
 15661                                  	;cmp	ax,18
 15662 000015A0 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 15663 000015A3 7512                    	jne	short fcNope		; some other error- return it
 15664                                  
 15665                                  ;	We ran out of files. See if we qualified at least one.
 15666                                  
 15667 000015A5 807E00FF                	cmp	byte [bp],0FFh
 15668 000015A9 740C                    	je	short fcNope		; temp filename is unused- no child
 15669                                  
 15670                                  ;	Move temp filename to child name position.
 15671                                  
 15672 000015AB 89EE                    	mov	si,bp			; SI = ptr to temp filename
 15673 000015AD 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 15674                                  fcMove:
 15675 000015AF AC                      	lodsb				; AL = next byte of filename
 15676 000015B0 AA                      	stosb				; store byte
 15677 000015B1 08C0                    	or	al,al
 15678 000015B3 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 15679 000015B5 EBF8                    	jmp	short fcMove		; go move another byte
 15680                                  fcNope:
 15681 000015B7 F9                      	stc				; return error
 15682                                  fcRet:
 15683 000015B8 9F                      	lahf
 15684 000015B9 83C414                  	add	sp,20			; restore stack
 15685 000015BC 9E                      	sahf
 15686 000015BD C3                      	retn
 15687                                  
 15688                                  ; ---------------------------------------------------------------------------
 15689                                  
 15690                                  ;***	FindOneInMem - find the first available entry in TPA
 15691                                  ;***	FindNextInMem - find the next available entry in TPA
 15692                                  ;
 15693                                  ;	ENTRY	ES = TPA seg addr
 15694                                  ;		BX = ptr to entry in TPA
 15695                                  ;
 15696                                  ;	EXIT	BX = ptr to entry found
 15697                                  ;		CY = set if no more entries available in TPA
 15698                                  ;
 15699                                  ;	USED	AL
 15700                                  
 15701                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15702                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15703                                  FindOneInMem:
 15704 000015BE 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 15705 000015C1 3C01                    	cmp	al,1
 15706 000015C3 7406                    	je	short FindNextInMem	; entry has already been used
 15707 000015C5 3CFF                    	cmp	al,0FFh
 15708 000015C7 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 15709                                  
 15710                                  ;	BX = ptr to entry that hasn't been output yet.
 15711                                  
 15712 000015C9 F8                      	clc				; return success
 15713 000015CA C3                      	retn
 15714                                  
 15715                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15716                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:163Ah
 15717                                  FindNextInMem:
 15718                                  	; 07/06/2023
 15719                                  	;add	bx,21 ; MSDOS 5.0
 15720                                  	; 07/06/2023
 15721 000015CB 83C316                  	add	bx,22 ; MSDOS 6.0  ; size EntryStruc (22 = 21 + compratio)
 15722                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 15723 000015CE EBEE                    	jmp	short FindOneInMem	; go look at it
 15724                                  foNoMore:
 15725 000015D0 F9                      	stc				; ran out of entries, return failure
 15726 000015D1 C3                      	retn
 15727                                  
 15728                                  ; ---------------------------------------------------------------------------
 15729                                  
 15730                                  ;***	GetEnvValue - get value of our environment variable
 15731                                  ;
 15732                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 15733                                  ;
 15734                                  ;	EXIT	CY = set if environment variable not in environment
 15735                                  ;
 15736                                  ;		Otherwise:
 15737                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 15738                                  ;
 15739                                  ;	USED	AX,BX,CX,DX,DI
 15740                                  ;		(We assume the (almost) worst, since we don't know about
 15741                                  ;		Find_Name_In_Environment.)
 15742                                  ;
 15743                                  ;	EFFECTS
 15744                                  ;
 15745                                  ;	  ScanBuf is loaded with value text
 15746                                  
 15747                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15748                                  GetEnvValue:
 15749 000015D2 06                      	push	es				; save ES
 15750                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 15751 000015D3 BE[9B94]                	mov	si,DirEnvVar	; "DIRCMD="
 15752                                  	;invoke	Find_Name_In_Environment
 15753 000015D6 E88C12                  	call	find_name_in_environment
 15754 000015D9 7214                    	jc	short geRet			; name not found in environment
 15755                                  
 15756                                  ;	ES:DI = ptr to value of environment variable
 15757                                  ;	We're assuming DS, CS, and SS are unchanged.
 15758                                  
 15759 000015DB 1E                      	push	ds
 15760 000015DC 06                      	push	es
 15761 000015DD 1F                      	pop	ds
 15762 000015DE 07                      	pop	es
 15763                                  
 15764                                  	;assume	ds:nothing
 15765                                  
 15766                                  ;	DS = seg addr of environment variable value (in environment segment)
 15767                                  ;	ES = TRANGROUP seg addr
 15768                                  
 15769 000015DF 89FE                    	mov	si,di				; DS:SI = ptr to value string
 15770                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 15771 000015E1 BF[6CA1]                	mov	di,ScanBuf
 15772                                  geLoop:
 15773                                  ;@@:	
 15774 000015E4 AC                      	lodsb
 15775 000015E5 08C0                    	or	al,al
 15776 000015E7 AA                      	stosb
 15777                                  	;loopnz	@B		; move the string, including trailing null
 15778 000015E8 E0FA                    	loopnz	geLoop
 15779                                  
 15780 000015EA 06                      	push	es
 15781 000015EB 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 15782                                  	;assume	ds:TRANGROUP
 15783                                  
 15784                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 15785 000015EC BE[6CA1]                	mov	si,ScanBuf
 15786                                  geRet:
 15787 000015EF 07                      	pop	es				; restore ES
 15788 000015F0 C3                      	retn
 15789                                  
 15790                                  ; ---------------------------------------------------------------------------
 15791                                  
 15792                                  ;***	GetFirst - get first directory entry from disk
 15793                                  ;
 15794                                  ;	ENTRY	DOS DTA established at DirBuf
 15795                                  ;		FCB contains drive # and filename
 15796                                  ;		Current directory (on selected drive) is the one to search
 15797                                  ;		AttrSpecified & AttrSelect masks set
 15798                                  ;
 15799                                  ;	EXIT	CY = clear if success
 15800                                  ;		DirBuf contains extended FCB for file found
 15801                                  ;
 15802                                  ;		If unsuccessful,
 15803                                  ;		CY = set
 15804                                  ;		Ready for DOS Get Extended Error call
 15805                                  ;
 15806                                  ;	USED	AX,DX
 15807                                  ;
 15808                                  ;	EFFECTS
 15809                                  ;
 15810                                  ;	  FCB-7 = 0FFh to mark extended FCB
 15811                                  ;	  FCB-1 = attribute mask to find all files
 15812                                  ;	  These fields should remain unmodified for GetNext calls.
 15813                                  ;
 15814                                  ;***	GetNext - get next directory entry from disk
 15815                                  ;
 15816                                  ;	ENTRY	As for GetFirst, plus
 15817                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 15818                                  ;
 15819                                  ;	EXIT	As for GetFirst
 15820                                  ;
 15821                                  ;	USED	AX,DX
 15822                                  
 15823                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15824                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15825                                  
 15826                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15827                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1660h
 15828                                  GetFirst:
 15829                                  	;mov	byte [55h],0FFh	; -1
 15830 000015F1 C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 15831                                  	;mov	byte [5Bh],16h
 15832 000015F6 C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 15833                                  					; find any file
 15834                                  	; 07/06/2023
 15835                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 15836 000015FB B411                    	mov	ah,11h
 15837                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 15838                                  	; 07/06/2023
 15839                                  	;int	21h			; call DOS
 15840                                  	;shl	al,1			; CY = set if error
 15841                                  	;jc	short gfRet		; return error
 15842                                  	;jmp	short gfFound		; go look at attr's
 15843                                  	; 07/06/2023
 15844 000015FD EB02                    	jmp	short GetFrstNxt
 15845                                  GetNext:
 15846                                  	; 07/06/2023
 15847                                  	;;mov	dx,55h
 15848                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 15849 000015FF B412                    	mov	ah,12h
 15850                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 15851                                  GetFrstNxt:
 15852                                  	; 07/06/2023
 15853 00001601 BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 15854                                  	;
 15855 00001604 CD21                    	int	21h			; call DOS
 15856 00001606 D0E0                    	shl	al,1			; CY = set if error
 15857 00001608 7211                    	jc	short gfRet		; return error
 15858                                  
 15859                                  ;*	Found an entry. Check attributes.
 15860                                  gfFound:
 15861                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 15862                                  	;mov	al,[DIRBUF+19]
 15863 0000160A A0[3DA0]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 15864 0000160D 8A26[84A0]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 15865 00001611 20E0                    	and	al,ah			; AL = pertinent attr's of file
 15866 00001613 2226[85A0]              	and	ah,[AttrSelect]		; AH = attr settings to match
 15867 00001617 38E0                    	cmp	al,ah
 15868 00001619 75E4                    	jne	short GetNext		; attr's don't match, look for another
 15869                                  gfRet:
 15870 0000161B C3                      	retn
 15871                                  
 15872                                  ; ---------------------------------------------------------------------------
 15873                                  
 15874                                  ;***	ListDir - search for and list files in the current directory
 15875                                  ;
 15876                                  ;	List header, files, and trailer for current directory on selected
 15877                                  ;	drive. Header & trailer are listed if at least one file is found.
 15878                                  ;	If no qualifying files are found, no display output occurs.
 15879                                  ;
 15880                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 15881                                  ;		FCB contains selected drive # and filename spec
 15882                                  ;		Option bits, attribute masks, and sort codes set up
 15883                                  ;
 15884                                  ;	EXIT	CY = clear if no error
 15885                                  ;		FileCnt = # files found & displayed
 15886                                  ;
 15887                                  ;		If error,
 15888                                  ;		CY = set
 15889                                  ;		Ready for DOS Get Extended Error call
 15890                                  ;
 15891                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15892                                  ;		FileSiz
 15893                                  ;
 15894                                  ;	EFFECTS
 15895                                  ;
 15896                                  ;	  FileCntTotal, FileSizTotal are updated.
 15897                                  ;	  Files found are listed. A directory header and trailer are
 15898                                  ;	   displayed only if files are found.
 15899                                  
 15900                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15901                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 15902                                  
 15903                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 15904                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1694h
 15905                                  ListDir:
 15906 0000161C 31C0                    	xor	ax,ax ; 0
 15907 0000161E A3[1D9E]                	mov	[FileCnt],ax		; zero file count
 15908 00001621 A3[1F9E]                	mov	[FileSiz],ax		; zero file size accumulator
 15909 00001624 A3[219E]                	mov	[FileSiz+2],ax
 15910                                  
 15911                                  	; 08/06/2023
 15912                                  	; MSDOS 6.0
 15913                                  ;ifdef DBLSPACE_HOOKS
 15914 00001627 A3[2D9E]                	mov	[ccluUsedDir],ax 	; zero count clusters used
 15915 0000162A A3[359E]                	mov	[csecUsedDir],ax	; zero count compressed sectors used
 15916 0000162D A3[379E]                	mov	[csecUsedDir+2],ax
 15917                                  ;endif	
 15918                                  	;cmp	byte [DestBuf],0	; check for sort code
 15919                                  	; 31/07/2024
 15920 00001630 3806[AFA0]              	cmp	[DestBuf],al ; 0
 15921 00001634 740A                    	je	short ld1		; no sort
 15922 00001636 E83000                  	call	LoadEntries		; load entries for sorted listing
 15923 00001639 7305                    	jnc	short ld1		; no error - continue
 15924 0000163B E8040C                  	call	get_ext_error_number	; AX = DOS error code
 15925                                  	; 19/02/2023
 15926                                  	;stc
 15927 0000163E EB12                    	jmp	short ldErr		; return error
 15928                                  ld1:
 15929 00001640 E8D7FE                  	call	FindFirst		; find first file
 15930 00001643 720D                    	jc	short ldErr		; not found, return error
 15931                                  
 15932                                  ;	BX = offset in TPA buffer of entry found
 15933                                  
 15934 00001645 E82B03                  	call	DisplayHeader		; if at least one file, display header
 15935                                  ldNext:
 15936 00001648 E8F902                  	call	DisplayFile		; display the file entry
 15937                                  ;ldNext:
 15938 0000164B E8D1FE                  	call	FindNext		; find another file
 15939 0000164E 7202                    	jc	short ldErr		; not found
 15940                                  	;call	DisplayFile		; display entry
 15941                                  	;jmp	short ldNext		; go find another one
 15942                                  	; 19/02/2023
 15943 00001650 EBF6                    	jmp	short ldNext
 15944                                  ldErr:
 15945                                  	;cmp	ax,2
 15946 00001652 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 15947 00001655 7407                    	je	short ldDone		; file not found, we're done
 15948                                  	;cmp	ax,18
 15949 00001657 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 15950 0000165A 7402                    	je	short ldDone		; no more files, we're done
 15951 0000165C F9                      	stc
 15952                                  	;jmp	short ldRet
 15953                                  	; 19/02/2023
 15954 0000165D C3                      	retn
 15955                                  ldDone:
 15956 0000165E 833E[1D9E]00            	cmp	word [FileCnt],0
 15957                                  	;je	short ld2		; no files found, just return
 15958                                  	; 25/04/2023
 15959 00001663 7403                    	jz	short ldRet
 15960 00001665 E84704                  	call	DisplayTrailer		; display trailing info
 15961                                  	; 08/06/2023
 15962                                  	; cf=0
 15963                                  ;ld2:	
 15964                                  	;clc				; return success
 15965                                  ldRet:
 15966 00001668 C3                      	retn
 15967                                  
 15968                                  ; ---------------------------------------------------------------------------
 15969                                  
 15970                                  ;***	LoadEntries - attempt to load entries from current directory
 15971                                  ;
 15972                                  ;	Load all qualifying directory entries from the current directory
 15973                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 15974                                  ;	other than 'no more files', return to caller with carry flag set.
 15975                                  ;	If we run out of buffer space, display a message that we haven't
 15976                                  ;	enough memory to sort this directory, but return without error.
 15977                                  ;	Other routines know whether or not entries have been loaded by
 15978                                  ;	the 'inmem' flag bit, which we set here.
 15979                                  ;
 15980                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 15981                                  ;	this allows sorting over 3000 entries in a directory.
 15982                                  ;
 15983                                  ;	ENTRY	Tpa = buffer seg addr
 15984                                  ;		BytCnt = buffer length, in bytes
 15985                                  ;		Current directory (on selected drive) is the one to load
 15986                                  ;		FCB contains drive # and filespec
 15987                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 15988                                  ;
 15989                                  ;	EXIT	CY = set if error
 15990                                  ;		If error, DOS Get Extended Error will get error info
 15991                                  ;
 15992                                  ;	USED	AX,CX,DX,SI,DI
 15993                                  ;
 15994                                  ;	EFFECTS
 15995                                  ;
 15996                                  ;	  Inmem bit of Bits = set if load succeeded.
 15997                                  ;	  Tpa buffer contains directory entries.
 15998                                  ;	  Byte after last entry = 0FFh.
 15999                                  
 16000                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16001                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16002                                  LoadEntries:
 16003 00001669 06                      	push	es			; save TRANGROUP seg addr
 16004 0000166A 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 16005 0000166E 31FF                    	xor	di,di			; ES:DI = destination ptr
 16006                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 16007                                  	; MSDOS 5.0
 16008                                  	;;and	word [_Bits],0FFDFh
 16009                                  	;and	byte [_Bits],0DFh	; not 20h
 16010                                  	; 08/06/2023
 16011                                  	;and	byte [_Bits],0BFh	; ~20h ; MSDOS 6.0
 16012 00001670 8026[7CA0]BF            	and	byte [_Bits],~mask.inmem ; 0BFh ; MSDOS 6.0
 16013                                  
 16014 00001675 E879FF                  	call	GetFirst		; look for first file
 16015 00001678 7221                    	jc	short leRet		; return any error
 16016 0000167A E82000                  	call	LoadEntry		; load entry into TPA
 16017                                  leNext:
 16018 0000167D E87FFF                  	call	GetNext			; get another file
 16019 00001680 720F                    	jc	short leLoaded		; assume any error is no more files
 16020 00001682 A1[129E]                	mov	ax,[BYTCNT]		; AX = size of TPA
 16021 00001685 29F8                    	sub	ax,di			; AX = bytes left in TPA
 16022                                  	; 08/06/2023
 16023                                  	;;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 16024                                  	;cmp	ax,23 ; 21+2 ; MSDOS 5.0
 16025 00001687 83F818                  	cmp	ax,24 ; 22+2 ; MSDOS 6.0
 16026 0000168A 720E                    	jb	short leOk		; not enough memory left, give up
 16027 0000168C E80E00                  	call	LoadEntry		; load entry into TPA
 16028 0000168F EBEC                    	jmp	short leNext		; go get another file
 16029                                  
 16030                                  leLoaded:
 16031 00001691 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 16032                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 16033                                  	; MSDOS 5.0
 16034                                  	;;or	word [_Bits],20h
 16035                                  	;or	byte [_Bits],20h
 16036                                  	; 08/06/2023
 16037                                  	;or	byte [_Bits],40h	; MSDOS 6.0
 16038 00001695 800E[7CA0]40            	or	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0 
 16039                                  	; 25/04/2023
 16040                                  	; cf = 0
 16041                                  leOk:
 16042 0000169A F8                      	clc				; return no error
 16043                                  leRet:
 16044 0000169B 07                      	pop	es			; ES = TRANGROUP seg addr again
 16045 0000169C C3                      	retn
 16046                                  
 16047                                  ; ---------------------------------------------------------------------------
 16048                                  
 16049                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 16050                                  ;
 16051                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 16052                                  ;		DirBuf contains extended FCB of entry to load
 16053                                  ;
 16054                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 16055                                  ;
 16056                                  ;	USED	AX,CX,SI
 16057                                  ;
 16058                                  ;	NOTES
 16059                                  ;
 16060                                  ;	  I could've used symbolic offsets and sizes of fields from
 16061                                  ;	   the dir_entry struc to do this, but this is time-critical,
 16062                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 16063                                  ;	   as well as our private directory entry structure.
 16064                                  ;
 16065                                  ;	  We force a zero size for subdirectory files. A zero size is
 16066                                  ;	   ordinarily returned for subdirectories, but with Novell
 16067                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 16068                                  
 16069                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16070                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 16071                                  	
 16072                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16073                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:171Ch
 16074                                  LoadEntry:
 16075                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 16076 0000169D BE[32A0]                	mov	si,DIRBUF+8
 16077 000016A0 30C0                    	xor	al,al				; AL = 0
 16078 000016A2 AA                      	stosb					; 'used' byte = false
 16079 000016A3 B90B00                  	mov	cx,11
 16080 000016A6 F3A4                    	rep	movsb				; transfer filename & extension
 16081 000016A8 AC                      	lodsb					; AL = attrib byte
 16082 000016A9 AA                      	stosb					; store attrib byte
 16083                                  	;add	si,10 ; 22-11-1
 16084                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 16085 000016AA 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 16086 000016AD A5                      	movsw					; transfer time
 16087 000016AE A5                      	movsw					; transfer date
 16088                                  
 16089                                  ; 08/06/2023
 16090                                  ; MSDOS 5.0
 16091                                  %if 0
 16092                                  	inc	si				; skip alloc unit
 16093                                  	inc	si
 16094                                  	;and	al,10h
 16095                                  	and	al,ATTR_DIRECTORY
 16096                                  	jnz	short leSetDirSize		; force zero size for subdir
 16097                                  	movsw
 16098                                  	movsw					; transfer size
 16099                                  	retn
 16100                                  leSetDirSize:
 16101                                  	xor	ax,ax ; 0
 16102                                  	stosw
 16103                                  	stosw					; store zero size
 16104                                  	retn
 16105                                  %endif
 16106                                  
 16107                                  ; 08/06/2023
 16108                                  ; MSDOS 6.0
 16109                                  %if 1
 16110                                  ;ifdef DBLSPACE_HOOKS
 16111 000016AF 88C1                    	mov	cl,al				; attrib to cl
 16112 000016B1 AD                      	lodsw					; allocation unit (cluster
 16113                                  	;and	cl,10h
 16114 000016B2 80E110                  	and	cl,ATTR_DIRECTORY
 16115 000016B5 751E                    	jnz	short leSetDirSize		; force zero size for subdir
 16116 000016B7 A5                      	movsw
 16117 000016B8 A5                      	movsw					; transfer size
 16118                                  	
 16119                                  	;;test	word [_Bits],1
 16120                                  	;test	word [_Bits],mask.cratio	; compression ratio report?
 16121 000016B9 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 16122 000016BE 7504                    	jnz	short leCalcRatio		; yup
 16123                                  
 16124 000016C0 31C0                    	xor	ax,ax
 16125 000016C2 AA                      	stosb					; dummy compression ratio
 16126 000016C3 C3                      	retn
 16127                                  leCalcRatio:
 16128 000016C4 E83106                  	call	CalcCompRatio			; takes cluster in AX
 16129 000016C7 09C0                    	or	ax,ax				;   returns ratio in AX
 16130 000016C9 740E                    	jz	short leNoRatio			; 0 means couldn't calculate
 16131 000016CB FECC                    	dec	ah				; pack 1.0 - 16.0 comp ratio
 16132 000016CD B104                    	mov	cl,4				;   into 2 nibbles.  Store
 16133 000016CF D2E4                    	shl	ah,cl				;   1-16 as 0-15 in hi nibble,
 16134 000016D1 08E0                    	or	al,ah				;   tenths (0-9) in low nibble
 16135 000016D3 AA                      	stosb
 16136 000016D4 C3                      	retn
 16137                                  leSetDirSize:
 16138 000016D5 31C0                    	xor	ax,ax ; 0
 16139 000016D7 AB                      	stosw
 16140 000016D8 AB                      	stosw					; store zero size
 16141                                  leNoRatio:
 16142 000016D9 FEC8                    	dec	al				; al = FFh = special invalid
 16143 000016DB AA                      	stosb					; compression ratio
 16144 000016DC C3                      	retn
 16145                                  ;endif
 16146                                  %endif
 16147                                  
 16148                                  ; ---------------------------------------------------------------------------
 16149                                  
 16150                                  ;***	NoOrder - turn sorting off
 16151                                  ;
 16152                                  ;	ENTRY	nothing
 16153                                  ;
 16154                                  ;	EXIT	CY clear
 16155                                  ;
 16156                                  ;	USED	AX
 16157                                  ;
 16158                                  ;	EFFECTS
 16159                                  ;
 16160                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 16161                                  
 16162                                  	; 19/02/2023
 16163                                  NoOrder:
 16164 000016DD C606[AFA0]00            	mov	byte [DestBuf],0
 16165                                  				; no sort
 16166 000016E2 F8                      	clc			; no error
 16167 000016E3 C3                      	retn
 16168                                  
 16169                                  ; ---------------------------------------------------------------------------
 16170                                  
 16171                                  ;***	OnOffSw - record occurence of on/off option switch
 16172                                  ;
 16173                                  ;	ENTRY	DI = index into word list of switches
 16174                                  ;
 16175                                  ;	EXIT	CY clear
 16176                                  ;
 16177                                  ;	USED	AX,CX
 16178                                  ;
 16179                                  ;	EFFECTS
 16180                                  ;
 16181                                  ;	  Bits modified to indicate option state.
 16182                                  
 16183                                  	; 19/02/2023
 16184                                  OnOffSw:
 16185 000016E4 89F9                    	mov	cx,di		; CX = index into word list of options
 16186 000016E6 D1E9                    	shr	cx,1
 16187 000016E8 D1E9                    	shr	cx,1		; CX = bit position of option
 16188 000016EA B80100                  	mov	ax,1		
 16189 000016ED D3E0                    	shl	ax,cl		; AX = bit mask of option
 16190 000016EF F7C70200                	test	di,2		; check if it is a negated option
 16191 000016F3 7405                    	jz	short oo1	; it's negated
 16192                                  	;or	Bits,ax		; turn option on
 16193 000016F5 0906[7CA0]              	or	[_Bits],ax
 16194                                  	;jmp	short ooRet
 16195                                  	; 19/02/2023
 16196                                  	;cf=0
 16197 000016F9 C3                      	retn
 16198                                  oo1:	
 16199 000016FA F7D0                    	not	ax		; AX = complemented bit mask of option
 16200                                  	;and	Bits,ax		; turn option off
 16201 000016FC 2106[7CA0]              	and	[_Bits],ax
 16202                                  ooRet:
 16203                                  	; 19/02/2023
 16204                                  	;cf=0
 16205                                  	;clc			; always return success
 16206 00001700 C3                      	retn
 16207                                  
 16208                                  ; ---------------------------------------------------------------------------
 16209                                  
 16210                                  ;***	ParseAttr - parse and record /A option
 16211                                  ;
 16212                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 16213                                  ;
 16214                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 16215                                  ;
 16216                                  ;		For parse error, we set up for Std_EPrintf call:
 16217                                  ;		AX = parse error code, like system parser
 16218                                  ;		DX = ptr to message block
 16219                                  ;
 16220                                  ;	USED	AX,CX,DX,DI
 16221                                  ;
 16222                                  ;	EFFECTS
 16223                                  ;
 16224                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 16225                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 16226                                  ;
 16227                                  ;	  For parse error, we set up for Std_EPrintf call:
 16228                                  ;	  Msg_Disp_Class = parse error message class
 16229                                  ;	  Message block (see DX) is set up for parse error message
 16230                                  
 16231                                  	; 19/02/2023
 16232                                  ParseAttr:
 16233 00001701 56                      	push	si			; save SI
 16234 00001702 C606[84A0]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 16235                                  
 16236                                  ;	Each /A invocation starts by assuming all files are to be listed.
 16237                                  
 16238                                  	;;mov	si,word ptr [bx].ValuePtr
 16239                                  					; SI = ptr to string after /A
 16240                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16241 00001707 8B7704                  	mov	si,[bx+4]
 16242                                  paLoop:	
 16243 0000170A BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 16244 0000170D AC                      	lodsb				; AL = next char in string
 16245 0000170E 08C0                    	or	al,al
 16246                                  	;jz	short paOk		; it's terminating null, we're done
 16247                                  	; 19/02/2023
 16248 00001710 742F                    	jz	short paRet ; cf=0
 16249 00001712 3C2D                    	cmp	al,'-'
 16250 00001714 7502                    	jne	short pa1		; not '-', go look for letter
 16251 00001716 4A                      	dec	dx			; DX = 0 (for negated attribute)
 16252 00001717 AC                      	lodsb				; AL = next char
 16253                                  pa1:	
 16254                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 16255                                  					; DI = ptr to attrib letter list
 16256 00001718 BF[6897]                	mov	di,AttrLtrs ; "RHSvDA"
 16257                                  	;mov	cx,6
 16258 0000171B B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 16259 0000171E F2AE                    	repne	scasb			; look for our letter in the list
 16260 00001720 751B                    	jne	short paErr		; not found, return error
 16261                                  
 16262 00001722 F7D1                    	not	cx
 16263                                  	;add	cx,6
 16264 00001724 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 16265                                  
 16266                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 16267                                  ;	starting from bit 0.
 16268                                  
 16269                                  ;	Record this attribute bit in AttrSpecified.
 16270                                  
 16271 00001727 B001                    	mov	al,1
 16272 00001729 D2E0                    	shl	al,cl			; AL = mask for our bit
 16273 0000172B 0806[84A0]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 16274                                  
 16275                                  ;	Record the selected state for this attribute in AttrSelect.
 16276                                  ;	DX = 0 or 1, the selected state for this attribute.
 16277                                  
 16278 0000172F F6D0                    	not	al			; AL = mask for all other bits
 16279 00001731 2006[85A0]              	and	[AttrSelect],al		; clear our bit
 16280 00001735 D2E2                    	shl	dl,cl			; DL = our bit state in position
 16281 00001737 0816[85A0]              	or	[AttrSelect],dl		; set selected attr state
 16282 0000173B EBCD                    	jmp	short paLoop		; go look at next char
 16283                                  
 16284                                  ;	The attribute letter string is invalid.
 16285                                  
 16286                                  paErr:	
 16287 0000173D E8CE03                  	call	SetupParamError		; set message up for Std_EPrintf
 16288 00001740 F9                      	stc		   		; return error
 16289                                  	; 19/02/2023
 16290                                  	;jmp	short paRet
 16291                                  ;paOk:
 16292                                  	;clc				; return success		
 16293                                  paRet:	
 16294 00001741 5E                      	pop	si			; restore SI
 16295 00001742 C3                      	retn
 16296                                  
 16297                                  ; ---------------------------------------------------------------------------
 16298                                  
 16299                                  ;***	ParseLine - parse a line of text
 16300                                  ;
 16301                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 16302                                  ;	error occurs.
 16303                                  ;
 16304                                  ;	ENTRY	DS:SI = ptr to text
 16305                                  ;		CS, DS, ES = TRANGROUP seg addr
 16306                                  ;
 16307                                  ;	EXIT	AX = last return code from system parser
 16308                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 16309                                  ;
 16310                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 16311                                  ;		DX = ptr to message block
 16312                                  ;
 16313                                  ;	USED	BX,CX,DX,SI,DI
 16314                                  ;
 16315                                  ;	EFFECTS
 16316                                  ;
 16317                                  ;	  Bits may contain new option settings.
 16318                                  ;	  DestBuf may contain new series of sort codes.
 16319                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 16320                                  ;	  SrcBuf may contain a new default pathname/filespec.
 16321                                  ;	  PathPos, PathCnt updated for new pathname.
 16322                                  ;
 16323                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 16324                                  ;	  Msg_Disp_Class = parse error class
 16325                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 16326                                  ;	  Message block (see DX) is set up for parse error message
 16327                                  
 16328                                  	; 19/02/2023
 16329                                  Parse_Line:
 16330                                  	; 04/05/2023
 16331 00001743 BF[3698]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 16332 00001746 31C9                    	xor	cx,cx			; CX = # positionals found
 16333                                  plPars:
 16334 00001748 E8BE0F                  	call	Parse_With_Msg		; call parser
 16335 0000174B 83F8FF                  	cmp	ax,-1
 16336                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 16337 0000174E 7411                    	je	short plRet		; EOL encountered, return
 16338 00001750 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 16339 00001753 750C                    	jne	short plRet		; parse error occurred, return
 16340                                  
 16341                                  ;	Parse call succeeded. We have a filespec or a switch.
 16342                                  ;	DX = ptr to result buffer
 16343                                  
 16344 00001755 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 16345 00001757 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 16346 0000175A 7406                    	je	short plFil		; we have a filespec
 16347                                  
 16348 0000175C E87500                  	call	ParseSwitch		; else we have a switch
 16349                                  	;jc	short plRet		; error parsing switch, return
 16350                                  	;jmp	short plPars		; parse more
 16351                                  	; 19/02/2023
 16352 0000175F 73E7                    	jnc	short plPars
 16353                                  plRet:
 16354 00001761 C3                      	retn	
 16355                                  plFil:	
 16356 00001762 E8D200                  	call	CopyPathname		; copy pathname into our buffer
 16357 00001765 EBE1                    	jmp	short plPars		; parse more
 16358                                  ;plRet:
 16359                                  ;	retn
 16360                                  
 16361                                  ; ---------------------------------------------------------------------------
 16362                                  
 16363                                  ;***	ParseOrder - parse and record /O option
 16364                                  ;
 16365                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 16366                                  ;
 16367                                  ;	EXIT	CY = set if error occurs parsing order
 16368                                  ;
 16369                                  ;		For parse error, we set up for Std_EPrintf call:
 16370                                  ;		AX = parse error code, like system parser
 16371                                  ;		DX = ptr to message block
 16372                                  ;
 16373                                  ;	USED	AX,CX,DX,DI
 16374                                  ;
 16375                                  ;	EFFECTS
 16376                                  ;
 16377                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 16378                                  ;
 16379                                  ;	  For parse error, we set up for Std_EPrintf call:
 16380                                  ;	  Msg_Disp_Class = parse error message class
 16381                                  ;	  Message block (see DX) is set up for parse error message
 16382                                  
 16383                                  	; 19/02/2023 - Retro DOS v4.0 COMMAND.COM
 16384                                  	;
 16385                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16386                                  	; MSDOS 6.22 COMMAND.COM
 16387                                  ParseOrder:
 16388 00001767 56                      	push	si			; save SI
 16389 00001768 53                      	push	bx			; save ptr to result buffer
 16390                                  
 16391                                  	;;mov	si,word ptr [bx].ValuePtr
 16392                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16393 00001769 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 16394                                  	;mov	bx,offset TRANGROUP:DestBuf
 16395                                  	; 08/06/2023
 16396 0000176C BB[AFA0]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 16397 0000176F 8A04                    	mov	al,[si]			; AL = 1st char of order string
 16398 00001771 08C0                    	or	al,al
 16399 00001773 750E                    	jnz	short poLtr		; not NUL, go parse letters
 16400                                  
 16401                                  ;	We have /O alone. Set standard sort order.
 16402                                  ;	Note hardwired dependency on character order in OrderLtrs.
 16403                                  
 16404 00001775 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 16405 00001778 43                      	inc	bx
 16406 00001779 C60701                  	mov	byte [bx],1		; then by name
 16407 0000177C 43                      	inc	bx
 16408 0000177D C60702                  	mov	byte [bx],2		; then by extension
 16409 00001780 43                      	inc	bx
 16410 00001781 EB2F                    	jmp	short poOk		; return success
 16411                                  
 16412                                  ;	We have /O<something>. Parse sort order letters.
 16413                                  
 16414                                  poLtr:	
 16415 00001783 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 16416 00001785 AC                      	lodsb				; AL = next sort order letter
 16417 00001786 08C0                    	or	al,al
 16418 00001788 7428                    	jz	short poOk		; NUL found, return success
 16419                                  
 16420 0000178A 3C2D                    	cmp	al,'-'
 16421 0000178C 7503                    	jne	short po1		; not '-', go look for letter
 16422 0000178E B280                    	mov	dl,80h			; DL = downward sort mask
 16423 00001790 AC                      	lodsb				; AL = next char
 16424                                  po1:
 16425                                  	;mov	di,offset TRANGROUP:OrderLtrs
 16426                                  	; 08/06/2023
 16427 00001791 BF[6E97]                	mov	di,OrderLtrs ;"NEDSGC"	; DI = ptr to list of letters
 16428                                  	; (NUM_ORDER_LTRS = 6 for MSDOS 6.22 COMMAND.COM)
 16429                                  	; ((N,E,D,S,G for MSDOS 5.0 and N,E,D,S,G,C for MSDOS 6.22)) 
 16430                                  	;mov	cx,6 ; 08/06/2023
 16431 00001794 B90600                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 16432 00001797 F2AE                    	repne	scasb			; look for our letter in the list
 16433 00001799 7510                    	jne	short poErr		; not found, return error
 16434                                  
 16435 0000179B F7D9                    	neg	cx
 16436                                  	;add	cx,6 ; 08/06/2023
 16437 0000179D 83C106                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 16438                                  
 16439 000017A0 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 16440 000017A2 880F                    	mov	[bx],cl			; store sort order code in buffer
 16441 000017A4 43                      	inc	bx			; BX = ptr to next spot in buffer
 16442                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 16443 000017A5 81FB[06A1]              	cmp	bx,EndDestBuf
 16444                                  	;jae	short poErr		; too many letters
 16445                                  	;
 16446                                  	;jmp	short poLtr		; go look at next char
 16447                                  	; 19/02/2023
 16448 000017A9 72D8                    	jb	short poLtr
 16449                                  
 16450                                  ;	The sort order string is invalid.  
 16451                                  
 16452                                  poErr:
 16453 000017AB 5B                      	pop	bx			; BX = ptr to result buffer
 16454 000017AC E85F03                  	call	SetupParamError		; set message up for Std_EPrintf
 16455 000017AF F9                      	stc				; return failure
 16456 000017B0 EB04                    	jmp	short poRet
 16457                                  poOk:	
 16458 000017B2 C60700                  	mov	byte [bx],0		; mark end of sort code list
 16459 000017B5 5B                      	pop	bx			; BX = ptr to result buffer
 16460                                  	; 19/02/2023
 16461                                  	;cf=0
 16462                                  	;clc				; return success
 16463                                  poRet:
 16464 000017B6 5E                      	pop	si			; restore SI
 16465 000017B7 C3                      	retn
 16466                                  
 16467                                  ; ---------------------------------------------------------------------------
 16468                                  ; MSDOS 6.0
 16469                                  	; 08/06/2023
 16470                                  
 16471                                  ;ifdef DBLSPACE_HOOKS
 16472                                  
 16473                                  ;***	ParseRatio - parse and record /C[H] option
 16474                                  ;
 16475                                  ;	ENTRY	BX = ptr to system parser result buffer for /C occurence
 16476                                  ;		DI = index into word list of switches
 16477                                  ;
 16478                                  ;	EXIT	CY = set if error occurs parsing order
 16479                                  ;
 16480                                  ;		For parse error, we set up for Std_EPrintf call:
 16481                                  ;		AX = parse error code, like system parser
 16482                                  ;		DX = ptr to message block
 16483                                  ;
 16484                                  ;	USED	AX,CX,DX,DI
 16485                                  ;
 16486                                  ;	EFFECTS
 16487                                  ;
 16488                                  ;	  Bits modified to indicate option state.
 16489                                  ;	  fUseHostSize is set to zero for /C, non-zero for /CH.
 16490                                  ;
 16491                                  ;	  For parse error, we set up for Std_EPrintf call:
 16492                                  ;	  Msg_Disp_Class = parse error message class
 16493                                  ;	  Message block (see DX) is set up for parse error message
 16494                                  
 16495                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16496                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:184Ch
 16497                                  
 16498                                  ParseRatio:	;proc
 16499 000017B8 E829FF                  	call	OnOffSw			; turn on option bit
 16500 000017BB 56                      	push	si			; save SI
 16501                                  	;;mov	si,word ptr [bx].ValuePtr
 16502                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16503 000017BC 8B7704                  	mov	si,[bx+4]		; SI = ptr to possible H option
 16504 000017BF 8A04                    	mov	al,[si] 		; AL = null or 'H'
 16505 000017C1 08C0                    	or	al,al
 16506 000017C3 740A                    	jz	short prDone		; if null, no H option to check
 16507 000017C5 3C48                    	cmp	al,'H' 			; only H is allowed, make sure that's
 16508 000017C7 7406                    	je	short prDone		;   what it is
 16509 000017C9 E84203                  	call	SetupParamError		; set message up for Std_EPrintf
 16510 000017CC F9                      	stc				; return failure
 16511 000017CD EB03                    	jmp	short prRet
 16512                                  prDone:
 16513 000017CF A2[909E]                	mov	[fUseHostSize],al	; set Host cluster size flag
 16514                                  	; 08/06/2023
 16515                                  	;clc
 16516                                  	;;cf = 0
 16517                                  prRet:	
 16518 000017D2 5E                      	pop	si
 16519 000017D3 C3                      	retn
 16520                                  
 16521                                  ;ParseRatio	;endp
 16522                                  ;endif
 16523                                  
 16524                                  ; ---------------------------------------------------------------------------
 16525                                  
 16526                                  ;***	ParseSwitch - parse a switch
 16527                                  ;
 16528                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16529                                  ;		     a switch
 16530                                  ;
 16531                                  ;	EXIT	CY = set if parse error occurred
 16532                                  ;
 16533                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 16534                                  ;		AX = parse error code, like system parser
 16535                                  ;		DX = ptr to message block
 16536                                  ;
 16537                                  ;	USED	AX,BX,DX
 16538                                  ;
 16539                                  ;	EFFECTS
 16540                                  ;
 16541                                  ;	  Bits may contain new option settings.
 16542                                  ;	  DestBuf may contain new series of sort codes.
 16543                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 16544                                  ;
 16545                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 16546                                  ;	  Msg_Disp_Class = parse error class
 16547                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 16548                                  ;	  Message block (see DX) is set up for parse error message
 16549                                  
 16550                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16551                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 16552                                  
 16553                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16554                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1869h
 16555                                  ParseSwitch:
 16556 000017D4 51                      	push	cx			; save CX
 16557 000017D5 57                      	push	di			; save DI
 16558                                  
 16559                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 16560                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 16561 000017D6 8B4702                  	mov	ax,[bx+2]
 16562                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 16563 000017D9 BF[8D98]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 16564                                  	; 08/06/2023
 16565                                  	; (NUM_DIR_SWS = 16 for MSDOS 6.0)
 16566                                  	;mov	cx,16
 16567 000017DC B91000                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 16568 000017DF FC                      	cld				; scan direction = upward
 16569 000017E0 F2AF                    	repne	scasw			; locate synonym ptr in list
 16570                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 16571 000017E2 81EF[8F98]              	sub	di,Dir_Sw_Ptrs+2
 16572                                  
 16573                                  ;	DI = index into word list of synonym ptrs
 16574                                  
 16575 000017E6 2EFF95[EE17]            	call	word [cs:di+SwHandler]	; use same index into call table
 16576                                  
 16577 000017EB 5F                      	pop	di			; restore DI
 16578 000017EC 59                      	pop	cx			; restore CX
 16579                                  
 16580 000017ED C3                      	retn
 16581                                  
 16582                                  ; ---------------------------------------------------------------------------
 16583                                  
 16584                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 16585                                  ;	Simple on/off switches must occur first in both lists, and must be
 16586                                  ;	  in order of option bits in Bits, starting with bit 0.
 16587                                  
 16588                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16589                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 16590                                  
 16591                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16592                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1883h
 16593                                  SwHandler:
 16594                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 16595                                  		; ifdef DBLSPACE_HOOKS
 16596 000017EE [E416]                  	dw	OnOffSw 	; /-C
 16597 000017F0 [B817]                  	dw	ParseRatio	; /C[H]
 16598                                  	;	; endif	
 16599 000017F2 [E416]                  	dw	OnOffSw		; /-W
 16600 000017F4 [E416]                  	dw	OnOffSw		; /W
 16601 000017F6 [E416]                  	dw	OnOffSw		; /-P
 16602 000017F8 [E416]                  	dw	OnOffSw		; /P
 16603 000017FA [E416]                  	dw	OnOffSw		; /-S
 16604 000017FC [E416]                  	dw	OnOffSw		; /S
 16605 000017FE [E416]                  	dw	OnOffSw		; /-B
 16606 00001800 [E416]                  	dw	OnOffSw		; /B
 16607 00001802 [E416]                  	dw	OnOffSw		; /-L	;M010
 16608 00001804 [E416]                  	dw	OnOffSw		; /L	;M010
 16609 00001806 [DD16]                  	dw	NoOrder		; /-O
 16610 00001808 [6717]                  	dw	ParseOrder	; /O
 16611 0000180A [7E14]                  	dw	DefaultAttr	; /-A
 16612 0000180C [0117]                  	dw	ParseAttr	; /A
 16613                                  
 16614                                  ; ---------------------------------------------------------------------------
 16615                                  
 16616                                  	;break	<DIR utility routines>
 16617                                  
 16618                                  ;***	UTILITY ROUTINES
 16619                                  ; ---------------------- 
 16620                                  
 16621                                  ; ---------------------------------------------------------------------------
 16622                                  
 16623                                  ;***	ChangeDir - change directory on target drive
 16624                                  ;
 16625                                  ;	ENTRY	FCB contains drive #
 16626                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 16627                                  ;
 16628                                  ;	EXIT	Changed current directory on drive
 16629                                  ;
 16630                                  ;		If error,
 16631                                  ;		CY = set
 16632                                  ;		DOS Get Extended Error call will get error
 16633                                  ;
 16634                                  ;	USED	AX,DX,SI,DI
 16635                                  ;
 16636                                  ;	EFFECTS
 16637                                  ;
 16638                                  ;	  DirBuf is used to build "d:string".
 16639                                  
 16640                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16641                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 16642                                  
 16643                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16644                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:18A3h
 16645                                  ChangeDir:
 16646                                  	;mov	di,offset TRANGROUP:DirBuf
 16647 0000180E BF[2AA0]                	mov	di,DIRBUF
 16648 00001811 E8E902                  	call	GetDriveLtr	; AX = "d:"
 16649 00001814 AB                      	stosw			; put drive specifier in buffer
 16650 00001815 89D6                    	mov	si,dx		; SI = ptr to argument string
 16651                                  cdLoop:
 16652 00001817 AC                      	lodsb
 16653 00001818 AA                      	stosb			; move byte to buffer
 16654 00001819 08C0                    	or	al,al
 16655 0000181B 75FA                    	jne	short cdLoop	; continue until null transferred
 16656                                  
 16657                                  	;mov	dx,offset TRANGROUP:DirBuf
 16658 0000181D BA[2AA0]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 16659                                  	;mov	ah,CHDir
 16660 00001820 B43B                    	mov	ah,3Bh
 16661 00001822 CD21                    	int	21h		; change directory
 16662 00001824 C3                      	retn			; return what CHDIR returns
 16663                                  
 16664                                  ; ---------------------------------------------------------------------------
 16665                                  
 16666                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 16667                                  ;
 16668                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 16669                                  ;		ES:DI = ptr to another ASCIIZ string
 16670                                  ;
 16671                                  ;	EXIT	flags set after REPE CMPSB
 16672                                  ;
 16673                                  ;	USED	AL,CX,SI,DI
 16674                                  ;
 16675                                  ;	NOTES
 16676                                  ;
 16677                                  ;	Maximum run of comparison is length of DS:SI string.
 16678                                  ;	This ensures that two identical strings followed by
 16679                                  ;	random characters will compare correctly.
 16680                                  
 16681                                  	; 19/02/2023
 16682                                  CmpAscz:
 16683                                  	; 07/06/2023
 16684 00001825 56                      	push	si ; *
 16685                                  	;
 16686 00001826 57                      	push	di
 16687                                  
 16688 00001827 89F7                    	mov	di,si
 16689 00001829 30C0                    	xor	al,al
 16690 0000182B B9FFFF                  	mov	cx,0FFFFh
 16691 0000182E F2AE                    	repne	scasb
 16692 00001830 F7D1                    	not	cx
 16693                                  
 16694 00001832 5F                      	pop	di
 16695 00001833 F3A6                    	repe	cmpsb
 16696                                  
 16697                                  	; 07/06/2023
 16698 00001835 5E                      	pop	si ; *
 16699                                  	;
 16700 00001836 C3                      	retn
 16701                                  
 16702                                  ; ---------------------------------------------------------------------------
 16703                                  
 16704                                  ;***	CopyPathname - copy pathname to our buffer
 16705                                  ;
 16706                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16707                                  ;		     a filespec
 16708                                  ;
 16709                                  ;	EXIT	nothing
 16710                                  ;
 16711                                  ;	USED	AX
 16712                                  ;
 16713                                  ;	EFFECTS
 16714                                  ;
 16715                                  ;	  SrcBuf may contain a new pathname/filespec.
 16716                                  ;	  PathPos, PathCnt updated for new pathname.
 16717                                  
 16718                                  	; 19/02/2023
 16719                                  CopyPathname:
 16720 00001837 56                      	push	si
 16721                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 16722                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 16723 00001838 C57704                  	lds	si,[bx+4]
 16724                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 16725 0000183B E8B719                  	call	Move_To_SrcBuf
 16726 0000183E 5E                      	pop	si
 16727 0000183F C3                      	retn
 16728                                  
 16729                                  ; ---------------------------------------------------------------------------
 16730                                  
 16731                                  ;***	CountFile - update counters with current file
 16732                                  ;
 16733                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16734                                  ;
 16735                                  ;	EXIT	nothing
 16736                                  ;
 16737                                  ;	USED	AX,DX
 16738                                  ;
 16739                                  ;	EFFECTS
 16740                                  ;
 16741                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16742                                  
 16743                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16744                                  CountFile:
 16745 00001840 06                      	push	es			; save TRANGROUP seg addr
 16746 00001841 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 16747                                  
 16748 00001845 FF06[1D9E]              	inc	word [FileCnt]		; # files this directory
 16749 00001849 FF06[239E]              	inc	word [FileCntTotal]	; # files total
 16750 0000184D 7504                    	jnz	short cntf1
 16751 0000184F FF06[259E]              	inc	word [FileCntTotal+2]
 16752                                  cntf1:
 16753                                  	;mov	ax,word ptr es:[bx].filesize
 16754                                  					; AX = low word of file size
 16755                                  	;mov	dx,word ptr es:[bx].filesize+2
 16756                                  					; DX = high word of file size
 16757 00001853 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 16758 00001857 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 16759 0000185B 0106[1F9E]              	add	[FileSiz],ax
 16760 0000185F 1116[219E]              	adc	[FileSiz+2],dx		; size of this directory
 16761 00001863 0106[279E]              	add	[FileSizTotal],ax
 16762 00001867 1116[299E]              	adc	[FileSizTotal+2],dx	; total size of files listed
 16763                                  
 16764 0000186B 07                      	pop	es			; ES = TRANGROUP seg addr again
 16765                                  dbRet:	; 19/02/2023
 16766 0000186C C3                      	retn
 16767                                  
 16768                                  ; ---------------------------------------------------------------------------
 16769                                  
 16770                                  ;***	DisplayBare - display filename in bare format
 16771                                  ;
 16772                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16773                                  ;
 16774                                  ;	EXIT	DX = # char's displayed, including dot
 16775                                  ;
 16776                                  ;	USED	AX,CX,SI,DI
 16777                                  ;
 16778                                  ;	EFFECTS
 16779                                  ;
 16780                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 16781                                  ;	  If /s is on, complete pathname is displayed.
 16782                                  ;
 16783                                  ;	NOTE
 16784                                  ;
 16785                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 16786                                  
 16787                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16788                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 16789                                  
 16790                                  
 16791                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16792                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1900h
 16793                                  
 16794                                  DisplayBare:
 16795                                  ;	Suppress . and .. files from bare listing.
 16796                                  
 16797 0000186D 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 16798 0000186F 8E1E[F59D]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 16799                                  	;assume	ds:NOTHING
 16800                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 16801 00001873 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 16802 00001877 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 16803                                  	;assume	ds:TRANGROUP
 16804 00001879 74F1                    	je	short dbRet		; it's . or .. - don't display
 16805                                  
 16806                                  	;;;test	Bits,mask subd
 16807                                  	;;test	word [_Bits],4
 16808                                  	;test	byte [_Bits],4
 16809                                  	; 08/06/2023
 16810 0000187B F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 16811 00001880 7431                    	jz	short dbNameExt		; not /s - display filename only
 16812                                  
 16813                                  	;invoke	Build_Dir_String
 16814 00001882 E8170B                  	call	build_dir_string
 16815                                  	;mov	di,offset TRANGROUP:BwdBuf
 16816 00001885 BF[2AA0]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 16817                                     
 16818                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16819                                  	;;test	word [_Bits],10h
 16820                                  	;test	byte [_Bits],10h
 16821                                  	; 08/06/2023
 16822 00001888 F606[7CA0]20            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 16823                                  	;jz	@F			;M010;lowercase not needed
 16824 0000188D 7405                    	jz	short dbare1
 16825 0000188F 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 16826 00001891 E8C002                  	call	LowercaseString		;M010;path string is in BwdBuf
 16827                                  dbare1:
 16828                                  ;@@:	
 16829                                  	;xor	al,al			; AL = 0
 16830                                  	; 19/02/2023
 16831 00001894 31C0                    	xor	ax,ax
 16832 00001896 B9FFFF                  	mov	cx,0FFFFh
 16833 00001899 FC                      	cld
 16834 0000189A F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 16835 0000189C 4F                      	dec	di			; ES:DI = ptr to null byte
 16836                                  
 16837 0000189D 26807DFF5C              	cmp	byte [es:di-1],'\'
 16838                                  	;je	@F
 16839 000018A2 7403                    	je	short dbare2		; already terminated w/ '\'
 16840                                  
 16841                                  	;mov	ax,'\'			; AX = '\',0
 16842 000018A4 B05C                    	mov	al,'\'
 16843 000018A6 AB                      	stosw				; add to dir string
 16844                                  ;@@:
 16845                                  dbare2:
 16846                                  	;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 16847 000018A7 C706[91A0][2AA0]        	mov	word [string_ptr_2],BWDBUF
 16848                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 16849 000018AD BA[9793]                	mov	dx,string_buf_ptr
 16850                                  	;invoke	Std_Printf		; display device & directory path
 16851 000018B0 E85C3C                  	call	std_printf
 16852                                  dbNameExt:
 16853 000018B3 E82D00                  	call	DisplayDotForm		; display name.ext
 16854                                  	;invoke	CrLf2			; display cr/lf
 16855 000018B6 E86812                  	call	CRLF2
 16856                                  	; 19/02/2023
 16857                                  	;call	UseLine			;M007;Allow /p with /b
 16858                                  ;dbRet:
 16859                                  	;retn
 16860                                  
 16861                                  	; 19/02/2023
 16862                                  	;jmp	short UseLine
 16863                                  
 16864                                  ; ---------------------------------------------------------------------------
 16865                                  
 16866                                  ;***	UseLine - use a display line, start a new page if none left
 16867                                  ;
 16868                                  ;	ENTRY	nothing
 16869                                  ;
 16870                                  ;	EXIT	nothing
 16871                                  ;
 16872                                  ;	USED	flags
 16873                                  
 16874                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16875                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 16876                                  UseLine:
 16877 000018B9 FF0E[1B9E]              	dec	word [LeftOnPage]
 16878 000018BD 833E[1B9E]02            	cmp	word [LeftOnPage],2
 16879 000018C2 771E                    	ja	short ulRet
 16880                                  	; 19/02/2023
 16881                                  	;call	EndPage
 16882                                  ;ulRet:
 16883                                  	;retn
 16884                                  
 16885                                  	; 19/02/2023
 16886                                  	;jmp	short EndPage
 16887                                  
 16888                                  ; ---------------------------------------------------------------------------
 16889                                  
 16890                                  ;***	EndPage - end the current display page
 16891                                  ;
 16892                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16893                                  ;		Current directory (on selected drive) is the one being listed
 16894                                  ;		Bits contains /p setting
 16895                                  ;
 16896                                  ;	EXIT	LeftOnPage = # lines left for next page
 16897                                  ;
 16898                                  ;	USED	AX,DX
 16899                                  ;
 16900                                  ;	EFFECTS
 16901                                  ;
 16902                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 16903                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 16904                                  
 16905                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16906                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 16907                                  
 16908                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16909                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1BADh
 16910                                  EndPage:
 16911                                  	;;;test	Bits,mask pagd
 16912                                  	;;test	word [_Bits],2
 16913                                  	;test	byte [_Bits],2
 16914                                  	; 08/06/2023
 16915 000018C4 F606[7CA0]04            	test	byte [_Bits],mask.pagd ; 4 ; MSDOS 6.0
 16916 000018C9 7410                    	jz	short epNew		; paged display isn't enabled
 16917                                  
 16918 000018CB 53                      	push	bx			; save BX
 16919 000018CC 51                      	push	cx			; save CX
 16920                                  
 16921                                  	;invoke	Pause			; "Press any key to continue..."
 16922 000018CD E83506                  	call	PAUSE
 16923                                  
 16924                                  	;invoke	Build_Dir_String
 16925 000018D0 E8C90A                  	call	build_dir_string
 16926                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 16927 000018D3 BA[1B94]                	mov	dx,dircont_ptr
 16928                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 16929 000018D6 E8283C                  	call	Printf_Crlf
 16930                                  
 16931 000018D9 59                      	pop	cx			; restore CX
 16932 000018DA 5B                      	pop	bx			; restore BX
 16933                                  epNew:	
 16934 000018DB A1[08A2]                	mov	ax,[LinPerPag]		; AX = # lines per page
 16935 000018DE 48                      	dec	ax			; AX = # lines till next EndPage
 16936 000018DF A3[1B9E]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 16937                                  ulRet:	
 16938                                  	; 19/02/2023
 16939 000018E2 C3                      	retn
 16940                                  
 16941                                  ; ---------------------------------------------------------------------------
 16942                                  
 16943                                  ;***	DisplayDotForm - display filename in compressed dot format
 16944                                  ;
 16945                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 16946                                  ;	if the filename has a nonblank extension.
 16947                                  ;
 16948                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16949                                  ;
 16950                                  ;	EXIT	DX = # char's displayed, including dot
 16951                                  ;
 16952                                  ;	USED	AX,CX,SI,DI
 16953                                  ;
 16954                                  ;	EFFECTS
 16955                                  ;
 16956                                  ;	  Filename is displayed in name.ext format.
 16957                                  ;
 16958                                  ;	NOTE
 16959                                  ;
 16960                                  ;	  We allow for bogus filenames that have blanks embedded
 16961                                  ;	  in the name or extension.
 16962                                  
 16963                                  ;	Bugbug:	might be a good performance gain if we buffered
 16964                                  ;	up the output and used DOS function 9.
 16965                                  
 16966                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16967                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 16968                                  
 16969                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16970                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1953h
 16971                                  DisplayDotForm:
 16972 000018E3 1E                      	push	ds			; save TRANGROUP seg addr
 16973 000018E4 06                      	push	es			; save ES
 16974 000018E5 2EA1[F59D]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 16975 000018E9 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 16976                                  	;assume	ds:nothing
 16977 000018EB 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 16978                                  
 16979                                  	; 08/06/2023
 16980                                  	;mov	di,bx			; ES:DI = ptr to entry
 16981                                  	;;;add	di,filename + size filename - 1
 16982                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 16983                                  	;;mov	cx,size filename	; CX = length of name field
 16984                                  	;mov	cx,8
 16985                                  	; 08/06/2023
 16986 000018ED B90800                  	mov	cx,8
 16987 000018F0 89CF                    	mov	di,cx
 16988 000018F2 01DF                    	add	di,bx
 16989                                  
 16990 000018F4 B020                    	mov	al,' '
 16991 000018F6 FD                      	std				; scan down
 16992 000018F7 F3AE                    	repe	scasb			; scan for nonblank
 16993                                  
 16994                                  ;	Assume file name has at least one character.
 16995                                  
 16996 000018F9 41                      	inc	cx			; CX = # chars in name
 16997 000018FA 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 16998                                  
 16999 000018FC 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17000                                  	;;add	si,filename		; DS:SI = ptr to name
 17001                                  	;add	si,1 
 17002                                  	;		; add si,EntryStruc.filename
 17003                                  	; 25/04/2023
 17004 000018FE 46                      	inc	si
 17005                                  NextNameChar:
 17006 000018FF FC                      	cld
 17007 00001900 AC                      	lodsb				; AL = next char
 17008                                  
 17009                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 17010                                  	;;test	word [ss:_Bits],10h
 17011                                  	;test	byte [ss:_Bits],10h
 17012                                  	; 08/06/2023
 17013 00001901 36F606[7CA0]20          	test	byte [ss:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17014                                  	;jz	short @F		;M010;lowercase not required
 17015 00001907 7403                    	jz	short ddf1
 17016 00001909 E83D02                  	call	LowerCase		;M010;filename char is in AL
 17017                                  ddf1:
 17018                                  ;@@:	
 17019                                  	;invoke	Print_Char		; display it
 17020 0000190C E83E0A                  	call	PRINT_CHAR
 17021 0000190F E2EE                    	loop	NextNameChar
 17022                                  
 17023                                  ;	Now do extension.
 17024                                  
 17025 00001911 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 17026                                  	;add	di,fileext + size fileext - 1
 17027 00001913 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 17028                                  	;mov	cx,size fileext		; CX = length of ext field
 17029 00001916 B90300                  	mov	cx,3
 17030 00001919 B020                    	mov	al,' '
 17031 0000191B FD                      	std				; scan down
 17032 0000191C F3AE                    	repe	scasb			; scan for nonblank
 17033 0000191E 7420                    	je	short ddDone		; no nonblank chars in ext
 17034                                  
 17035 00001920 41                      	inc	cx			; CX = # chars in ext
 17036 00001921 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 17037 00001923 42                      	inc	dx			;      including dot
 17038                                  
 17039 00001924 B02E                    	mov	al,'.'
 17040 00001926 E8240A                  	call	PRINT_CHAR
 17041 00001929 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17042                                  	;add	si,fileext		; DS:SI = ptr to ext
 17043 0000192B 83C609                  	add	si,9
 17044                                  
 17045                                  NextExtChar:
 17046 0000192E FC                      	cld
 17047 0000192F AC                      	lodsb				; AL = next char
 17048                                  
 17049                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 17050                                  	;;test	word [cs:_Bits],10h
 17051                                  	;test	byte [cs:_Bits],10h
 17052                                  	; 08/06/2023
 17053 00001930 2EF606[7CA0]20          	test	byte [cs:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17054                                  	;jz	short @F		;M010;lowercase not required
 17055 00001936 7403                    	jz	short ddf2
 17056 00001938 E80E02                  	call	LowerCase		;M010;fileext char is in AL
 17057                                  ;@@:	
 17058                                  ddf2:
 17059                                  	;invoke	Print_Char		; display it
 17060 0000193B E80F0A                  	call	PRINT_CHAR
 17061 0000193E E2EE                    	loop	NextExtChar
 17062                                  ddDone:
 17063 00001940 07                      	pop	es			; restore ES
 17064 00001941 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17065                                  	;assume	ds:TRANGROUP
 17066 00001942 FC                      	cld				; leave direction flag = up
 17067 00001943 C3                      	retn
 17068                                  
 17069                                  ; ---------------------------------------------------------------------------
 17070                                  
 17071                                  ;***	DisplayFile - display file entry, update counters
 17072                                  ;
 17073                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17074                                  ;		Bits contains /w, /p settings
 17075                                  ;
 17076                                  ;	EXIT	nothing
 17077                                  ;
 17078                                  ;	USED	AX,CX,DX,SI,DI,BP
 17079                                  ;
 17080                                  ;	EFFECTS
 17081                                  ;
 17082                                  ;	  Entry is displayed.
 17083                                  ;	  If not /b,
 17084                                  ;	    Cursor is left at end of entry on screen.
 17085                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 17086                                  ;	  If /b,
 17087                                  ;	    Cursor is left at beginning of next line.
 17088                                  ;	    Cnt's and Siz's aren't updated.
 17089                                  
 17090                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17091                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 17092                                  	
 17093                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17094                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:19B9h
 17095                                  
 17096                                  DisplayFile:
 17097                                  	;;;test	Bits,mask bare
 17098                                  	;;test	word [_Bits],8
 17099                                  	;test	byte [_Bits],8
 17100                                  	; 08/06/2023
 17101 00001944 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 17102 00001949 7405                    	jz	short dfNorm		; not /b - do normal display
 17103                                  
 17104 0000194B E81FFF                  	call	DisplayBare		; display file in bare format
 17105 0000194E EB22                    	jmp	short dfRet
 17106                                  dfNorm:	
 17107 00001950 E88200                  	call	DisplayNext		; pos'n cursor for next entry
 17108                                  	;;;test	Bits,mask wide
 17109                                  	;;test	word [_Bits],1
 17110                                  	;test	byte [_Bits],1
 17111                                  	; 08/06/2023
 17112 00001953 F606[7CA0]02            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 17113 00001958 7405                    	jz	short dfFull		; full format
 17114 0000195A E87401                  	call	DisplayWide		; wide format
 17115 0000195D EB10                    	jmp	short dfCnt
 17116                                  dfFull:	
 17117 0000195F E83E00                  	call	DisplayName		; display filename & extension
 17118 00001962 E89700                  	call	DisplayTheRest		; display size, date, time
 17119                                  	
 17120                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 17121                                  	; MSDOS 6.0
 17122                                  ;ifdef DBLSPACE_HOOKS
 17123                                  	;;test	Bits,mask cratio
 17124                                  	;test	word [_Bits],1
 17125 00001965 F606[7CA0]01            	test	byte [_Bits],mask.cratio
 17126                                  					; display compression ratio
 17127 0000196A 7403                    	jz	short dfCnt
 17128 0000196C E81A01                  	call	DisplayCompRatio
 17129                                  ;endif
 17130                                  
 17131                                  dfCnt:
 17132 0000196F E8CEFE                  	call	CountFile		; update file counters
 17133                                  dfRet:
 17134                                  dhRet:	; 19/02/2023
 17135 00001972 C3                      	retn
 17136                                  
 17137                                  ; ---------------------------------------------------------------------------
 17138                                  
 17139                                  ;***	DisplayHeader - display directory header of working directory
 17140                                  ;
 17141                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 17142                                  ;		LeftOnPage = # lines left on display page
 17143                                  ;
 17144                                  ;	EXIT	nothing
 17145                                  ;
 17146                                  ;	ERROR EXIT
 17147                                  ;
 17148                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 17149                                  ;	   specification" if there's a problem obtaining the current
 17150                                  ;	   directory pathname.
 17151                                  ;
 17152                                  ;	USED	AX,DX,SI,DI
 17153                                  ;
 17154                                  ;	EFFECTS
 17155                                  ;
 17156                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 17157                                  ;	   we are using for the DTA) contains the directory string.
 17158                                  ;	  LeftOnPage is adjusted.
 17159                                  
 17160                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17161                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17162                                  
 17163                                  DisplayHeader:
 17164                                  	;;;test	Bits,mask bare
 17165                                  	;;test	word [_Bits],8
 17166                                  	;test	byte [_Bits],8
 17167                                  	; 08/06/2023
 17168 00001973 F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 17169 00001978 75F8                    	jnz	short dhRet		; /b - don't display header
 17170                                  
 17171                                  	;;;test	Bits,mask subd
 17172                                  	;;test	word [_Bits],4
 17173                                  	;test	byte [_Bits],4
 17174                                  	; 08/06/2023
 17175 0000197A F606[7CA0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 17176 0000197F 7408                    	jz	short dhNorm		; not /s
 17177                                  
 17178                                  ;	For subdirectory listings, put a blank line before the header.
 17179                                  
 17180                                  	;invoke	Crlf2			; start with a blank line
 17181 00001981 E89D11                  	call	CRLF2
 17182 00001984 E832FF                  	call	UseLine
 17183 00001987 EB05                    	jmp	short dhCom
 17184                                  dhNorm:
 17185 00001989 B020                    	mov	al,' ' ; 20h
 17186                                  	;mov	al,BLANK		; if not /s, precede by a blank
 17187 0000198B E8BF09                  	call	PRINT_CHAR		; print a leading blank
 17188                                  dhCom:
 17189 0000198E E80B0A                  	call	build_dir_string
 17190 00001991 BA[1793]                	mov	dx,dirhead_ptr
 17191 00001994 E8783B                  	call	std_printf		; print header & cr/lf
 17192 00001997 E81FFF                  	call	UseLine
 17193 0000199A E88411                  	call	CRLF2			; another cr/lf
 17194                                  	;call	UseLine
 17195                                  ;dhRet:
 17196                                  	;retn
 17197                                  
 17198                                  	; 19/02/2023
 17199 0000199D E919FF                  	jmp	UseLine
 17200                                  
 17201                                  ; ---------------------------------------------------------------------------
 17202                                  
 17203                                  ;***	DisplayName - display file name & extension
 17204                                  ;
 17205                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17206                                  ;
 17207                                  ;	EXIT	nothing
 17208                                  ;
 17209                                  ;	USED	AX,CX,DX,SI,DI
 17210                                  ;
 17211                                  ;	EFFECTS
 17212                                  ;
 17213                                  ;	  Filename & extension are displayed in spread format.
 17214                                  ;	  Cursor is left at end of extension.
 17215                                  
 17216                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17217                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17218                                  
 17219                                  DisplayName:
 17220 000019A0 1E                      	push	ds			; save TRANGROUP seg addr
 17221 000019A1 8E1E[F59D]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 17222                                  	;assume	ds:nothing
 17223 000019A5 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17224                                  	;;add	si,filename		; DS:SI = ptr to filename
 17225                                  	;add	si,1  ; EntryStruc.filename
 17226                                  	; 08/06/2023
 17227 000019A7 46                      	inc	si
 17228 000019A8 BF[5B9F]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 17229                                  
 17230 000019AB B90800                  	mov	cx,8
 17231 000019AE FC                      	cld
 17232 000019AF F3A4                    	rep	movsb			; move filename to CharBuf
 17233 000019B1 B020                    	mov	al,' '
 17234 000019B3 AA                      	stosb				; add a blank
 17235                                  	;mov	cx,3
 17236                                  	; 08/06/2023
 17237 000019B4 B103                    	mov	cl,3
 17238 000019B6 F3A4                    	rep	movsb			; add extension
 17239 000019B8 30C0                    	xor	al,al
 17240 000019BA AA                      	stosb				; add a NULL
 17241                                  
 17242 000019BB 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17243                                  	;assume	ds:TRANGROUP
 17244                                  
 17245                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 17246                                  	;;test	word [_Bits],10h
 17247                                  	;test	byte [_Bits],10h
 17248                                  	; 08/06/2023
 17249 000019BC F606[7CA0]20            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17250 000019C1 7406                    	jz	short dn1		;M010;lowercase not required
 17251 000019C3 BE[5B9F]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 17252 000019C6 E88B01                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 17253                                  dn1:	
 17254 000019C9 C706[91A0][5B9F]        	mov	word [string_ptr_2],CHARBUF
 17255 000019CF BA[9793]                	mov	dx,string_buf_ptr
 17256                                  	;call	std_printf		; print filename & extension
 17257                                  	;retn
 17258                                  	; 19/02/2023
 17259 000019D2 E93A3B                  	jmp	std_printf
 17260                                  
 17261                                  ; ---------------------------------------------------------------------------
 17262                                  
 17263                                  ;***	DisplayNext - move display cursor to next entry position
 17264                                  ;
 17265                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 17266                                  ;		LeftOnPage = # lines can still be printed for this page
 17267                                  ;		FileCnt = # files in this dir displayed before this one
 17268                                  ;		Bits contains /w setting
 17269                                  ;
 17270                                  ;	EXIT	nothing
 17271                                  ;
 17272                                  ;	USED	AX,DX
 17273                                  ;
 17274                                  ;	EFFECTS
 17275                                  ;
 17276                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 17277                                  ;	   displayed.
 17278                                  ;	  LeftOnPage may be updated.
 17279                                  
 17280                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17281                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17282                                  	
 17283                                  DisplayNext:
 17284 000019D5 833E[1D9E]00            	cmp	word [FileCnt],0
 17285 000019DA 7415                    	je	short dn1st		; 1st file in directory
 17286 000019DC 803E[199E]00            	cmp	byte [LeftOnLine],0
 17287 000019E1 7E08                    	jng	short dnEol	; jle	; no more room on this line
 17288                                  
 17289                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 17290                                  ;	we still have room for more on this line.
 17291                                  ;	Tab to next position.
 17292                                  
 17293 000019E3 BA[A693]                	mov	dx,tab_ptr
 17294 000019E6 E8263B                  	call	std_printf
 17295 000019E9 EB0C                    	jmp	short dnDone
 17296                                  dnEol:	
 17297                                  ;	Start this entry on a new line.
 17298                                  
 17299 000019EB E83311                  	call	CRLF2		; start on new line
 17300 000019EE E8C8FE                  	call	UseLine
 17301                                  dn1st:
 17302 000019F1 A0[1A9E]                	mov	al,[PerLine]
 17303 000019F4 A2[199E]                	mov	[LeftOnLine],al	; reset # entries left on line
 17304                                  
 17305                                  dnDone:
 17306 000019F7 FE0E[199E]              	dec	byte [LeftOnLine]
 17307                                  				; reflect the entry about to be displayed
 17308 000019FB C3                      	retn
 17309                                  
 17310                                  ; ---------------------------------------------------------------------------
 17311                                  
 17312                                  ;***	DisplayTheRest - display file size/dir, date, time
 17313                                  ;
 17314                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17315                                  ;		Display cursor is at end of file extension
 17316                                  ;
 17317                                  ;	EXIT	nothing
 17318                                  ;
 17319                                  ;	USED	AX,CX,DX,SI,DI,BP
 17320                                  ;
 17321                                  ;	EFFECTS
 17322                                  ;
 17323                                  ;	  File size, date, & time are displayed.
 17324                                  
 17325                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17326                                  
 17327                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17328                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1A7Ch
 17329                                  DisplayTheRest:
 17330 000019FC 06                      	push	es			; save TRANGROUP seg addr
 17331 000019FD 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 17332 00001A01 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 17333                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 17334                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 17335 00001A03 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 17336 00001A08 7415                    	jz	short drNonDir		; not a directory file
 17337                                  
 17338                                  ;	For a directory file, display <DIR> instead of size.
 17339                                  
 17340 00001A0A BA[A993]                	mov	dx,dmes_ptr
 17341 00001A0D E8FF3A                  	call	std_printf
 17342                                  	; 08/06/2023
 17343                                  	;jmp	short drCom
 17344                                  
 17345                                  	; 08/06/2023
 17346                                  	; MSDOS 6.22 COMMAND.COM (disassembled source code)
 17347 00001A10 F606[9393]40            	test    byte [screen_f_1],40h	; 80 columns ?
 17348 00001A15 7406                    	jz      short dr_0      	; no
 17349 00001A17 BA[AC93]                	mov     dx,space_4_ptr		; 4 space chars
 17350 00001A1A E8F23A                  	call    std_printf
 17351                                  dr_0:
 17352 00001A1D EB16                    	jmp	short drCom		; skip to common fields
 17353                                  
 17354                                  drNonDir:
 17355                                  ;	For a non-directory file, display file size.
 17356                                  
 17357                                  	;;mov	dx,word ptr es:[bp].filesize
 17358                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 17359 00001A1F 268B5611                	mov	dx,[es:bp+17]
 17360 00001A23 8916[8DA0]              	mov	[File_Size_Low],dx
 17361                                  	;;mov	dx,word ptr es:[bp].filesize+2
 17362                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 17363 00001A27 268B5613                	mov	dx,[es:bp+19]
 17364 00001A2B 8916[8FA0]              	mov	[File_Size_High],dx
 17365 00001A2F BA[8993]                	mov	dx,disp_file_size_ptr
 17366 00001A32 E8DA3A                  	call	std_printf
 17367                                  drCom:
 17368                                  ;	For all files, display date & time.
 17369                                  
 17370                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 17371                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 17372 00001A35 268B460F                	mov	ax,[es:bp+15]
 17373 00001A39 09C0                    	or	ax,ax			; test for null date (DOS 1.x)
 17374 00001A3B 7448                    	jz	short drDone		; no date, skip date/time display
 17375 00001A3D 89C3                    	mov	bx,ax			; BX = date word
 17376 00001A3F 83E01F                  	and	ax,1Fh			; AX = day of month
 17377 00001A42 88C2                    	mov	dl,al			; DL = day of month
 17378 00001A44 89D8                    	mov	ax,bx			; AX = date word
 17379 00001A46 B105                    	mov	cl,5
 17380 00001A48 D3E8                    	shr	ax,cl			; shift day out
 17381 00001A4A 240F                    	and	al,0Fh			; AL = month
 17382 00001A4C 88C6                    	mov	dh,al			; DH = month
 17383 00001A4E 88F9                    	mov	cl,bh
 17384 00001A50 D0E9                    	shr	cl,1			; CL = year - 1980
 17385 00001A52 30ED                    	xor	ch,ch			; CX = year - 1980
 17386 00001A54 83C150                  	add	cx,80			; CX = 2-digit year
 17387 00001A57 80F964                  	cmp	cl,100
 17388 00001A5A 7203                    	jb	short dr_1		; not year 2000 yet, skip ahead
 17389 00001A5C 80E964                  	sub	cl,100			; adjust for 21st century
 17390                                  dr_1:	
 17391 00001A5F 86F2                    	xchg	dh,dl			; DX = month/day
 17392 00001A61 890E[EA93]              	mov	[DirDat_Yr],cx		; move year to msg block
 17393 00001A65 8916[EC93]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 17394                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 17395                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 17396 00001A69 268B4E0D                	mov	cx,[es:bp+13]
 17397 00001A6D E310                    	jcxz	drPrint			; no time field - go print
 17398 00001A6F D1E9                    	shr	cx,1
 17399 00001A71 D1E9                    	shr	cx,1
 17400 00001A73 D1E9                    	shr	cx,1			; CH = hours
 17401 00001A75 D0E9                    	shr	cl,1
 17402 00001A77 D0E9                    	shr	cl,1			; CL = minutes
 17403 00001A79 86E9                    	xchg	ch,cl			; CX = hr/min
 17404 00001A7B 890E[F593]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 17405                                  drPrint:
 17406 00001A7F BA[E593]                	mov	dx,dirdattim_ptr
 17407 00001A82 E88A3A                  	call	std_printf		; print date & time
 17408                                  drDone:
 17409 00001A85 07                      	pop	es			; ES = TRANGROUP seg addr again	
 17410 00001A86 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 17411                                  ;dtrRet:
 17412                                  	; 19/02/2023
 17413 00001A88 C3                      	retn
 17414                                  
 17415                                  ; ---------------------------------------------------------------------------
 17416                                  ; MSDOS 6.0
 17417                                  
 17418                                  ;ifdef DBLSPACE_HOOKS
 17419                                  
 17420                                  ;***	DisplayCompRatio - display compression ratio
 17421                                  ;
 17422                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17423                                  ;
 17424                                  ;	EXIT	nothing
 17425                                  ;
 17426                                  ;	USED	AX,CX,DX
 17427                                  ;
 17428                                  ;	EFFECTS
 17429                                  ;
 17430                                  ;	  File compression ratio is displayed.
 17431                                  
 17432                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17433                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1B09h
 17434                                  
 17435                                  DisplayCompRatio:	;proc
 17436 00001A89 06                      	push	es			; save TRANGROUP seg addr
 17437 00001A8A 8E06[F59D]              	mov	es,[TPA]		; ES = TPA seg addr
 17438                                  	;;mov	al,es:[bx].compratio
 17439                                  	;mov	al,[es:bx+EntryStruc.compratio]
 17440 00001A8E 268A4715                	mov	al,[es:bx+15h]
 17441 00001A92 3CFF                    	cmp	al,0FFh			; invalid/no compression ratio?
 17442 00001A94 7417                    	je	short dcrRet
 17443                                  
 17444 00001A96 88C4                    	mov	ah,al			; unpack compression ratio
 17445 00001A98 B104                    	mov	cl,4
 17446 00001A9A D2EC                    	shr	ah,cl			; isolate whole number portion
 17447 00001A9C FEC4                    	inc	ah			; 0-15 = 1-16
 17448 00001A9E 240F                    	and	al,0Fh 			; isolate tenths
 17449                                  
 17450 00001AA0 8826[98A0]              	mov	[Dir_CRatio_1],ah
 17451 00001AA4 A2[99A0]                	mov	[Dir_CRatio_2],al
 17452                                  	;mov	dx,offset TRANGROUP:DirCompRatio_Ptr
 17453                                  	;invoke	Std_Printf
 17454 00001AA7 BA[5594]                	mov	dx,DirCompRatio_Ptr
 17455 00001AAA E8623A                  	call	std_printf	
 17456                                  dcrRet:
 17457 00001AAD 07                      	pop	es
 17458                                  dtrRet:		; 08/06/2023
 17459 00001AAE C3                      	retn
 17460                                  
 17461                                  ;DisplayCompRatio	;endp
 17462                                  
 17463                                  ;endif
 17464                                  
 17465                                  ; ---------------------------------------------------------------------------
 17466                                  
 17467                                  ;***	DisplayTrailer - display trailing lines for directory listing
 17468                                  ;
 17469                                  ;	ENTRY	LeftOnPage = # lines left on display page
 17470                                  ;		FileCnt = # files listed
 17471                                  ;		FileSiz = total size of files listed
 17472                                  ;
 17473                                  ;	EXIT	nothing
 17474                                  ;
 17475                                  ;	USED
 17476                                  ;
 17477                                  ;	EFFECTS
 17478                                  ;
 17479                                  ;	  Trailing info lines are displayed
 17480                                  
 17481                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17482                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17483                                  
 17484                                  DisplayTrailer:
 17485                                  	;;;test	Bits,mask bare
 17486                                  	;;test	word [_Bits],8
 17487                                  	;test	byte [_Bits],8
 17488                                  	; 08/06/2023
 17489 00001AAF F606[7CA0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 17490 00001AB4 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 17491                                  
 17492 00001AB6 E86810                  	call	CRLF2			; start on new line
 17493 00001AB9 E8FDFD                  	call	UseLine
 17494 00001ABC A1[1D9E]                	mov	ax,[FileCnt]		; AX = # files found
 17495                                  
 17496                                  ;	DisplayTotals uses this entry point.
 17497                                  ;
 17498                                  DisplayCntSiz:
 17499                                  ;	AX = # files
 17500                                  ;	FileSiz = dword total size of files
 17501                                  
 17502 00001ABF A3[96A0]                	mov	[Dir_Num],ax		; load # files
 17503 00001AC2 BA[1092]                	mov	dx,dirmes_ptr		; DX = ptr to message block
 17504 00001AC5 E8473A                  	call	std_printf		; "nnn File(s)"
 17505                                  
 17506 00001AC8 BA[0194]                	mov	dx,bytes_ptr
 17507 00001ACB E8413A                  	call	std_printf		; "nnn bytes",cr,lf
 17508                                  	; 19/02/2023
 17509                                  	;call	UseLine
 17510                                  ;dtrRet:
 17511                                  	;retn
 17512                                  
 17513                                  	; 19/02/2023
 17514 00001ACE E9E8FD                  	jmp	UseLine
 17515                                  
 17516                                  ; ---------------------------------------------------------------------------
 17517                                  
 17518                                  ;***	DisplayWide - display filename in wide format
 17519                                  ;
 17520                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17521                                  ;
 17522                                  ;	EXIT	nothing
 17523                                  ;
 17524                                  ;	USED	AX,CX,DX,SI,DI
 17525                                  ;
 17526                                  ;	EFFECTS
 17527                                  ;
 17528                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 17529                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 17530                                  
 17531                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17532                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 17533                                  
 17534                                  DisplayWide:
 17535 00001AD1 1E                      	push	ds			; save TRANGROUP seg addr
 17536 00001AD2 8E1E[F59D]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 17537                                  	;assume	ds:nothing
 17538                                  
 17539                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 17540                                  	;test	byte [bx+EntryStruc.fileattr],10h
 17541 00001AD6 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 17542 00001ADA 9C                      	pushf	; 03/08/2024
 17543 00001ADB 7405                    	jz	short dw1		; not a subdirectory file
 17544 00001ADD B05B                    	mov	al,'['
 17545 00001ADF E86B08                  	call	PRINT_CHAR		; prefix subdirectory
 17546                                  dw1:	
 17547 00001AE2 E8FEFD                  	call	DisplayDotForm		; display name.ext
 17548                                  
 17549                                  ;	DX = # chars displayed in name.ext
 17550                                  
 17551                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 17552                                  	;test	byte [bx+EntryStruc.fileattr],10h
 17553                                  	; 03/08/2024
 17554                                  	;test	byte [bx+12],ATTR_DIRECTORY
 17555 00001AE5 9D                      	popf	; 03/08/2024
 17556 00001AE6 7405                    	jz	short dw2		; not a subdirectory file
 17557 00001AE8 B05D                    	mov	al,']'
 17558 00001AEA E86008                  	call	PRINT_CHAR		; postfix subdirectory
 17559                                  dw2:
 17560                                  ;	Pad field with blanks.
 17561                                  
 17562                                  	;mov	cx,size filename + size fileext + 1
 17563 00001AED B90C00                  	mov	cx,12 ; 8+3+1
 17564                                  					; CX = field size
 17565 00001AF0 29D1                    	sub	cx,dx			; CX = # pad char's
 17566 00001AF2 E307                    	jcxz	dwDone
 17567 00001AF4 B020                    	mov	al,' '
 17568                                  dw3:	
 17569 00001AF6 E85408                  	call	PRINT_CHAR
 17570 00001AF9 E2FB                    	loop	dw3
 17571                                  dwDone:	
 17572 00001AFB 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17573                                  	;assume	ds:TRANGROUP
 17574 00001AFC C3                      	retn
 17575                                  
 17576                                  ; ---------------------------------------------------------------------------
 17577                                  
 17578                                  ;***	GetDriveLtr - get target drive letter
 17579                                  ;
 17580                                  ;	ENTRY	FCB contains drive #
 17581                                  ;
 17582                                  ;	EXIT	AX = "d:"
 17583                                  ;
 17584                                  ;	USED	nothing
 17585                                  
 17586                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17587                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 17588                                  GetDriveLtr:
 17589 00001AFD A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 17590 00001B00 08C0                    	or	al,al
 17591 00001B02 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 17592 00001B04 A0[059E]                	mov	al,[CURDRV]	; AL = current drive #
 17593 00001B07 FEC0                    	inc	al		; AL = 1-based drive #
 17594                                  gdl1:	
 17595 00001B09 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 17596 00001B0B B43A                    	mov	ah,':'		; AX = "d:"
 17597 00001B0D C3                      	retn
 17598                                  
 17599                                  ; ---------------------------------------------------------------------------
 17600                                  
 17601                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 17602                                  ;
 17603                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 17604                                  ;	for system parser calls. Set up a message substitution block,
 17605                                  ;	etc. for invalid value strings. I copied the procedure from
 17606                                  ;	Setup_Parse_Error_Msg.
 17607                                  ;
 17608                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 17609                                  ;		
 17610                                  ;
 17611                                  ;	EXIT	AX = system parser error return code for bad param format
 17612                                  ;		DX = ptr to message description block for Std_EPrintf
 17613                                  ;
 17614                                  ;	USED	SI
 17615                                  ;
 17616                                  ;	EFFECTS
 17617                                  ;
 17618                                  ;	  Msg_Disp_Class = parse error message class
 17619                                  ;	  Message block (see DX) is set up for parse error message
 17620                                  
 17621                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17622                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 17623                                  SetupParamError:
 17624 00001B0E B80900                  	mov	ax,9			; parse error #
 17625 00001B11 C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 17626                                  	;mov	byte [msg_disp_class],2
 17627 00001B16 A3[D091]                	mov	[extend_buf_ptr],ax
 17628                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17629 00001B19 8B7704                  	mov	si,[bx+4]
 17630 00001B1C 8936[91A0]              	mov	[string_ptr_2],si
 17631 00001B20 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 17632                                  	;mov	byte [extend_buf_sub],1
 17633 00001B25 BA[D091]                	mov	dx,extend_buf_ptr
 17634 00001B28 C3                      	retn
 17635                                  
 17636                                  ; ---------------------------------------------------------------------------
 17637                                  
 17638                                  ;***	ZeroTotals - zero grand total file count, size
 17639                                  ;
 17640                                  ;	ENTRY	nothing
 17641                                  ;
 17642                                  ;	EXIT	nothing
 17643                                  ;
 17644                                  ;	USED	AX
 17645                                  ;
 17646                                  ;	EFFECTS
 17647                                  ;
 17648                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 17649                                  ;
 17650                                  ;	NOTES
 17651                                  ;
 17652                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 17653                                  
 17654                                  ; 05/06/2023
 17655                                  ;ifdef DBLSPACE_HOOKS
 17656                                  ;csecSIZE EQU size csecUsed + size csecUsedDir + size csecUsedTotal
 17657                                  ;ccluSIZE EQU size ccluUsed + size ccluUsedDir + size ccluUsedTotal
 17658                                  ;endif
 17659                                  
 17660                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17661                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h
 17662                                  
 17663                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17664                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C08h	
 17665                                  ZeroTotals:
 17666 00001B29 BF[239E]                	mov	di,FileCntTotal
 17667                                  
 17668                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17669                                  	;;mov	cx,size FileCntTotal+size FileSizTotal
 17670                                  	;mov	cx,8
 17671                                  	;ifdef DBLSPACE_HOOKS
 17672                                  	;mov	cx,size FileCntTotal+size FileSizTotal+csecSIZE+ccluSIZE
 17673                                  	;endif
 17674 00001B2C B91A00                  	mov	cx,26
 17675                                  
 17676 00001B2F 30C0                    	xor	al,al
 17677 00001B31 F3AA                    	rep	stosb
 17678 00001B33 C3                      	retn	
 17679                                  
 17680                                  ; ---------------------------------------------------------------------------
 17681                                  
 17682                                  ;***	CtrlCHandler - our own control-c handler
 17683                                  ;
 17684                                  ;	Make sure user's default directory gets restored. See notes
 17685                                  ;	at InstallCtrlCHandler.
 17686                                  ;
 17687                                  ;	ENTRY	control-c
 17688                                  ;
 17689                                  ;	EXIT	to OldCtrlCHandler
 17690                                  ;
 17691                                  ;	USED	DS,flags
 17692                                  ;
 17693                                  ;	EFFECTS
 17694                                  ;
 17695                                  ;	  Restore user's default directory.
 17696                                  ;
 17697                                  ;	NOTES
 17698                                  ;
 17699                                  ;	  This handler is only installed after calling PathCrunch,
 17700                                  ;	  which sets UserDir1, so the restoration will work.
 17701                                  ;
 17702                                  ;	  The original control-c vector will be restored, whether
 17703                                  ;	  or not this one is invoked, in the HeadFix routine.
 17704                                  
 17705                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17706                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 17707                                  
 17708                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17709                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C13h ; *
 17710                                  
 17711                                  CtrlCHandler:	;proc far
 17712                                  
 17713                                  ;SR;
 17714                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 17715                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 17716                                  ;
 17717 00001B34 1E                      	push	ds
 17718 00001B35 0E                      	push	cs
 17719 00001B36 1F                      	pop	ds			; DS = TRANGROUP seg addr
 17720 00001B37 50                      	push	ax
 17721 00001B38 53                      	push	bx ; *
 17722 00001B39 52                      	push	dx
 17723 00001B3A E8A101                  	call	CloseCVF ; * 		; close CVF file if open
 17724 00001B3D E89E0E                  	call	RestUDir		; restore user's default directory
 17725 00001B40 5A                      	pop	dx
 17726 00001B41 5B                      	pop	bx ; *
 17727 00001B42 58                      	pop	ax
 17728 00001B43 1F                      	pop	ds
 17729 00001B44 2EFF2E[B5A9]            	jmp	far [cs:OldCtrlCHandler]
 17730                                  					; go to previous int 23 handler
 17731                                  
 17732                                  ; ---------------------------------------------------------------------------
 17733                                  
 17734                                  ;M010;start
 17735                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 17736                                  ;
 17737                                  ;	ENTRY	AL = character to be displayed
 17738                                  ;
 17739                                  ;	EXIT	AL is lowercase
 17740                                  ;
 17741                                  ;	USED	nothing
 17742                                  
 17743                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17744                                  LowerCase:
 17745 00001B49 3C41                    	cmp	al,'A'		; ensure AL is in range 'A'-'Z'
 17746 00001B4B 7206                    	jb	short lcRet
 17747 00001B4D 3C5A                    	cmp	al,'Z'
 17748 00001B4F 7702                    	ja	short lcRet
 17749                                  
 17750 00001B51 0C20                    	or	al,20h		; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 17751                                  lcRet:
 17752 00001B53 C3                      	retn
 17753                                  
 17754                                  ; ---------------------------------------------------------------------------
 17755                                  
 17756                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 17757                                  ;
 17758                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 17759                                  ;		ES = DS
 17760                                  ;
 17761                                  ;	EXIT	nothing
 17762                                  ;	
 17763                                  ;	USED	AL,SI
 17764                                  
 17765                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17766                                  LowercaseString:
 17767 00001B54 57                      	push	di			; save di
 17768 00001B55 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 17769 00001B57 FC                      	cld
 17770                                  NextChar: 
 17771 00001B58 AC                      	lodsb				; get character from string into al
 17772 00001B59 08C0                    	or	al,al			; are we at end of string?
 17773 00001B5B 7406                    	jz	short EndOfString
 17774                                  
 17775 00001B5D E8E9FF                  	call	LowerCase		; convert character to lowercase
 17776 00001B60 AA                      	stosb				; store character back into buffer
 17777 00001B61 EBF5                    	jmp	short NextChar		; repeat until end of string
 17778                                  
 17779                                  EndOfString:
 17780 00001B63 5F                      	pop	di			; restore di
 17781 00001B64 C3                      	retn
 17782                                  
 17783                                  ;M010;end
 17784                                  
 17785                                  
 17786                                  ; 08/06/2023
 17787                                  ; ---------------------------------------------------------------------------
 17788                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 17789                                  ; -----------------------------------------
 17790                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 17791                                  ; ---------------------------------------------------------------------------
 17792                                  
 17793                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17794                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C44h
 17795                                  screen_f_set:
 17796                                  	; set dir display parameters depending on screen width (# of columns)
 17797 00001B65 1E                      	push	ds
 17798 00001B66 B84000                  	mov	ax,40h
 17799 00001B69 8ED8                    	mov	ds,ax
 17800 00001B6B 833E4A0028              	cmp	word [4Ah],40	; Check ROMBIOS DATA colums per row
 17801                                  				; value (80 or 40)
 17802 00001B70 1F                      	pop	ds
 17803 00001B71 7527                    	jnz	short columns_80 ; 80 columns per line (video mode 3)
 17804 00001B73 8026[9393]BF            	and	byte [screen_f_1],0BFh ; ~40h
 17805 00001B78 C706[9493]0A0A          	mov	word [screen_f_2],0A0Ah ; 10 bytes (file size field)
 17806 00001B7E 8026[1A92]BF            	and	byte [screen_f_3],0BFh
 17807 00001B83 8026[0B94]BF            	and	byte [screen_f_4],0BFh
 17808 00001B88 C706[0C94]0A0A          	mov	word [screen_f_5],0A0Ah ; 10 bytes (file size field)
 17809 00001B8E 8026[2892]BF            	and	byte [screen_f_6],0BFh
 17810 00001B93 C706[2992]1C1C          	mov	word [screen_f_7],1C1Ch ; 28 bytes (free bytes field)
 17811                                  	;jmp	short screen_f_set_retn
 17812 00001B99 C3                      	retn
 17813                                  columns_80:
 17814 00001B9A 800E[9393]40            	or	byte [screen_f_1],40h
 17815 00001B9F C706[9493]0E0E          	mov	word [screen_f_2],0E0Eh ; 14 bytes (file size field)
 17816 00001BA5 800E[1A92]40            	or	byte [screen_f_3],40h
 17817 00001BAA 800E[0B94]40            	or	byte [screen_f_4],40h
 17818 00001BAF C706[0C94]0E0E          	mov	word [screen_f_5],0E0Eh ; 14 bytes (file size field)
 17819 00001BB5 800E[2892]40            	or	byte [screen_f_6],40h
 17820 00001BBA C706[2992]2020          	mov	word [screen_f_7],2020h ; 32 bytes (free bytes field)
 17821                                  screen_f_set_retn:
 17822 00001BC0 C3                      	retn
 17823                                  
 17824                                  ;============================================================================
 17825                                  ; CRATIO.ASM, MSDOS 6.0, 1992
 17826                                  ;============================================================================
 17827                                  ; 08/06/2023 - Retro DOS v4.2
 17828                                  
 17829                                  ; The code to calculate compression ratios requires access to the drive's
 17830                                  ; (DOS) FAT and MagicDrv FAT regions.  Two buffers are used (one for each
 17831                                  ; FAT type).  pbufDOSFAT and pbufMDFAT contain the offset to the buffers,
 17832                                  ; segFATBuf contains the segment (both buffers are in the same segment).
 17833                                  ; The buffers are of variable size: cFATEntries contains the size of the
 17834                                  ; buffers in terms of the number of FAT entries they can contain.
 17835                                  
 17836                                  ; ---------------------------------------------------------------------------
 17837                                  
 17838                                  ;***	OpenCVF - open Compressed Volume File for compression ratio report
 17839                                  ;
 17840                                  ;	ENTRY
 17841                                  ;		FCB setup with drive for DIR
 17842                                  ;
 17843                                  ;	EXIT	If successful, CY clear, CVF file open, fhCVF has file handle,
 17844                                  ;		szCVF has \0 terminated CVF file name, MDBPB loaded.
 17845                                  ;
 17846                                  ;		If unsuccessful, CY set
 17847                                  ;
 17848                                  ;	USED	AX, BX, CX, DX, SI, DI
 17849                                  
 17850                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17851                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1CA1h
 17852                                  OpenCVF:
 17853 00001BC1 B8FFFF                  	mov	ax,-1
 17854 00001BC4 A3[3D9E]                	mov	[fhCVF],ax		;indicate CVF not open
 17855 00001BC7 A3[939E]                	mov	[entInBuf],ax		;  and no FAT entries in buffers
 17856                                  
 17857 00001BCA 8A165C00                	mov	dl,[FCB] ; mov dl,5Ch	;target drive of DIR cmd
 17858 00001BCE 08D2                    	or	dl,dl			;default drive?
 17859 00001BD0 7404                    	jz	short ocvf_default
 17860 00001BD2 FECA                    	dec	dl			;no, from 1=A to 0=A
 17861 00001BD4 EB04                    	jmp	short ocvf_swap_info
 17862                                  
 17863                                  ocvf_default:
 17864 00001BD6 8A16[059E]              	mov	dl,[CURDRV]		;0=A, 1=B, ...
 17865                                  
 17866                                  ocvf_swap_info:
 17867 00001BDA B8114A                  	mov	ax,4A11h ; multMagicDrv	;magicdrv Int 2Fh multiplex ID
 17868 00001BDD BB0100                  	mov	bx,1	 ; MD_DRIVE_MAP	;get drive swap info
 17869 00001BE0 CD2F                    	int	2fh
 17870                                  
 17871 00001BE2 09C0                    	or	ax,ax			;0 if okay
 17872 00001BE4 7573                    	jnz	short ocvf_error
 17873                                  
 17874 00001BE6 F6C380                  	test	bl,80h 			;80h set if compressed volume
 17875 00001BE9 746E                    	jz	short ocvf_error
 17876                                  
 17877 00001BEB 80E37F                  	and	bl,7Fh 			;bl = host drive, bh = seq #
 17878                                  
 17879                                  	; The CVF may have been mounted from a swapped host drive, in which
 17880                                  	; case the host drive returned in BL is the original host (now
 17881                                  	; swapped with a CVF).	Make a second drive swap info call on the
 17882                                  	; returned host to see if it must be accessed by a different drive
 17883                                  	; letter.
 17884                                  
 17885 00001BEE 53                      	push	bx
 17886 00001BEF 52                      	push	dx			;save dl, orig drive letter
 17887                                  
 17888 00001BF0 B8114A                  	mov	ax,4A11h ; mov ax,multMagicDrv
 17889 00001BF3 88DA                    	mov	dl,bl
 17890 00001BF5 BB0100                  	mov	bx,1	 ; mov bx,MD_DRIVE_MAP
 17891 00001BF8 CD2F                    	int	2fh
 17892                                  
 17893 00001BFA 5A                      	pop	dx
 17894 00001BFB 59                      	pop	cx			;bx from 1st drive swap info call
 17895                                  
 17896 00001BFC 09C0                    	or	ax,ax			;0 if okay
 17897 00001BFE 7559                    	jnz	short ocvf_error
 17898                                  
 17899 00001C00 80E37F                  	and	bl,7Fh
 17900 00001C03 87D9                    	xchg	bx,cx			;bx = 1st, cx = 2nd swap results
 17901                                  
 17902 00001C05 38CA                    	cmp	dl,cl			;2nd swap info call return orig drive?
 17903 00001C07 7402                    	je	short ocvf_got_host	;yes, 1st swap info call returned host
 17904                                  
 17905 00001C09 88CB                    	mov	bl,cl			;no, use swapped host, orig seq #
 17906                                  ocvf_got_host:
 17907                                  	; Build the filename of the Compressed Volume File
 17908                                  
 17909                                  	;mov	di,offset TRANGROUP:szCVF
 17910                                  					;CVF name buffer
 17911 00001C0B BF[3F9E]                	mov	di,szCVF
 17912                                  
 17913 00001C0E 88D8                    	mov	al,bl
 17914 00001C10 0441                    	add	al,'A'
 17915 00001C12 B43A                    	mov	ah,':'
 17916 00001C14 FC                      	cld
 17917 00001C15 AB                      	stosw				; drive:
 17918                                  
 17919                                  	;mov	si,offset TRANGROUP:sCVFRoot
 17920                                  					; \name.
 17921 00001C16 BE[0499]                	mov	si,sCVFRoot	; "\DBLSPACE"
 17922                                  	;mov	cx,cbCVFRoot
 17923 00001C19 B90A00                  	mov	cx,10
 17924 00001C1C F3A4                    	rep	movsb
 17925                                  
 17926 00001C1E 83C703                  	add	di,3			; point past extension
 17927 00001C21 30C0                    	xor	al,al
 17928 00001C23 FD                      	std
 17929 00001C24 AA                      	stosb				; null terminate
 17930                                  
 17931 00001C25 88F8                    	mov	al,bh			; seq #
 17932 00001C27 B30A                    	mov	bl,10
 17933                                  	;mov	cx,3			; 3 digit ext/seq #
 17934 00001C29 B103                    	mov	cl,3
 17935                                  ;@@:
 17936 00001C2B 30E4                    ocvf_1:	xor	ah,ah			; convert seq # to ascii
 17937 00001C2D F6F3                    	div	bl			;   and store as CVF extension
 17938 00001C2F 80C430                  	add	ah,'0'
 17939 00001C32 86E0                    	xchg	ah,al
 17940 00001C34 AA                      	stosb
 17941 00001C35 88E0                    	mov	al,ah
 17942                                  	;loop	@b
 17943 00001C37 E2F2                    	loop	ocvf_1
 17944                                  
 17945 00001C39 FC                      	cld
 17946                                  
 17947                                  	; Now open the Compressed Volume File
 17948                                  
 17949                                  	; 08/06/2023
 17950                                  	; MSDOS 6.22 COMMAND.COM code only !
 17951                                  	;;;
 17952 00001C3A BF[3F9E]                	mov	di,szCVF ; *
 17953 00001C3D C745045256              	mov	word [di+4],5652h ; 'RV' (DRVSPACE)
 17954 00001C42 B8003D                  	mov	ax,3D00h
 17955                                  	;mov	dx,szCVF
 17956 00001C45 89FA                    	mov	dx,di ; *
 17957 00001C47 CD21                    	int	21h     ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17958                                  			; DS:DX -> ASCIZ filename
 17959                                  			; AL = access mode
 17960                                  			; 0 - read
 17961 00001C49 7310                    	jnb     short ocvf_2
 17962 00001C4B C74504424C              	mov	word [di+4],4C42h ; 'BL' (DBLSPACE)
 17963                                  	;;;
 17964                                  
 17965                                  	;mov	ax,(OPEN shl 8) or 00h 	;compatibility mode/read access
 17966 00001C50 B8003D                  	mov	ax,3D00h
 17967                                  	;;mov	dx,offset TRANGROUP:szCVF
 17968                                  	;mov	dx,szCVF
 17969 00001C53 89FA                    	mov	dx,di ; *
 17970 00001C55 CD21                    	int	21h
 17971                                  	;jc	short ocvf_error
 17972                                  	; 18/06/2023
 17973 00001C57 7302                    	jnc	short ocvf_2
 17974                                  ocvf_error:	; 18/06/2023
 17975 00001C59 F9                      	stc				;indicate failure
 17976 00001C5A C3                      	retn
 17977                                  ocvf_2:
 17978 00001C5B A3[3D9E]                	mov	[fhCVF],ax		; success, save CVF file handle
 17979                                  
 17980                                  	; Read the extended MagicDrv BPB
 17981                                  
 17982 00001C5E 89C3                    	mov	bx,ax
 17983                                  	;mov	ah,READ
 17984 00001C60 B43F                    	mov	ah,3Fh
 17985                                  	;mov	cx,size MD_BPB
 17986 00001C62 B94000                  	mov	cx,64
 17987                                  	;mov	dx,offset TRANGROUP:MDBPB
 17988 00001C65 BA[4F9E]                	mov	dx,MDBPB
 17989 00001C68 CD21                    	int	21h
 17990 00001C6A 7204                    	jc	short ocvf_error1
 17991                                  
 17992 00001C6C 39C8                    	cmp	ax,cx			; get it all?
 17993 00001C6E 7405                    	je	short ocvf_pick_cluster_size
 17994                                  					; yes...
 17995                                  ocvf_error1:
 17996 00001C70 E86B00                  	call	CloseCVF
 17997                                  	; 18/06/2023
 17998                                  ;ocvf_error:
 17999 00001C73 F9                      	stc				;indicate failure
 18000                                  	;jmp	short ocvf_ret
 18001 00001C74 C3                      	retn
 18002                                  
 18003                                  	; Determine the cluster size to use for ratio calculation
 18004                                  
 18005                                  ocvf_pick_cluster_size:
 18006 00001C75 803E[909E]00            	cmp	byte [fUseHostSize],0 	; user want Host drive cluster size?
 18007 00001C7A 7411                    	je	short ovcf_use_CVF_size	; no, use CVF cluster size
 18008                                  
 18009                                  	;mov	ah,Get_Drive_Data	; get the host drive cluster size
 18010 00001C7C B41C                    	mov	ah,1Ch
 18011 00001C7E 8A16[3F9E]              	mov	dl,[szCVF]
 18012                                  	;sub	dl,40h	
 18013 00001C82 80EA40                  	sub	dl,'A'-1		; 1 = A, 2 = B, ...
 18014 00001C85 1E                      	push	ds
 18015 00001C86 CD21                    	int	21h
 18016 00001C88 1F                      	pop	ds
 18017                                  
 18018 00001C89 3CFF                    	cmp	al,0FFh			; host drive cluster size in AL if okay,
 18019 00001C8B 7503                    	jne	short ovcf_set_size	;   failed = 0FFh
 18020                                  
 18021                                  ovcf_use_CVF_size:
 18022                                  	;mov	al,[MDBPB.dos_bpb.csecPerClu]
 18023 00001C8D A0[5C9E]                	mov	al,[MDBPB+0Dh]		; using CVF cluster size
 18024                                  
 18025                                  ovcf_set_size:
 18026 00001C90 A2[8F9E]                	mov	[csecPerCluster],al
 18027                                  
 18028                                  	; Lastly, setup the FAT buffers
 18029                                  ocvf_set_buf:
 18030 00001C93 A1[129E]                	mov	ax,[BYTCNT]		; if >= 32k TPA space available,
 18031 00001C96 A3[149E]                	mov	[savBytCnt],ax		;   setup larger FAT buffers
 18032 00001C99 3D0080                  	cmp	ax,32*1024  ; 8000h
 18033 00001C9C 7318                    	jae	short ocvf_big_buf
 18034                                  
 18035                                  	; small TPA, use small resident buffers
 18036                                  
 18037                                  	;mov	word ptr [cFATEntries],cRES_FAT_ENTRIES
 18038 00001C9E C706[919E]2000          	mov	word [cFATEntries],32 ; cRES_FAT_ENTRIES
 18039 00001CA4 8C1E[959E]              	mov	[segFATBuf],ds
 18040                                  	;mov	word ptr [pbufDOSFAT],offset TRANGROUP:bufDOSFAT
 18041                                  	;mov	word ptr [pbufMDFAT],offset TRANGROUP:bufMDFAT
 18042 00001CA8 C706[979E][9B9E]        	mov	word [pbufDOSFAT],bufDOSFAT
 18043 00001CAE C706[999E][DB9E]        	mov	word [pbufMDFAT],bufMDFAT
 18044                                  	;jmp	short ocvf_success
 18045                                  	; 08/06/2023
 18046                                  	; cf = 1
 18047 00001CB4 F8                      	clc
 18048 00001CB5 C3                      	retn
 18049                                  
 18050                                  ocvf_big_buf:
 18051                                  	;mov	bx,cBIG_FAT_ENTRIES
 18052 00001CB6 BB0001                  	mov	bx,256
 18053 00001CB9 891E[919E]              	mov	[cFATEntries],bx
 18054                                  
 18055 00001CBD D1E3                    	shl	bx,1			; 6 bytes per entry (2 for DOS FAT, 4 MD FAT)
 18056 00001CBF 89D9                    	mov	cx,bx			; entries * 2
 18057 00001CC1 D1E3                    	shl	bx,1
 18058 00001CC3 01CB                    	add	bx,cx			; bx = # entries * 6
 18059                                  
 18060 00001CC5 29D8                    	sub	ax,bx			; reduce TPA size by size of FAT buffers
 18061 00001CC7 2500FE                  	and	ax,0FE00h		; init code rounds BytCnt down to multiple of
 18062 00001CCA A3[129E]                	mov	[BYTCNT],ax		;   512 bytes -- a no-op with some buf sizes.
 18063                                  
 18064 00001CCD 8B1E[F59D]              	mov	bx,[TPA]		; buffers in the TPA
 18065 00001CD1 891E[959E]              	mov	[segFATBuf],bx
 18066 00001CD5 A3[979E]                	mov	[pbufDOSFAT],ax		; DOS FAT buffer offset
 18067 00001CD8 01C8                    	add	ax,cx			;   + DOS FAT buffer size
 18068 00001CDA A3[999E]                	mov	[pbufMDFAT],ax 		;   = MD FAT buffer offset
 18069                                  	; 08/06/2023
 18070                                  	; cf = 0
 18071                                  ;ocvf_success:
 18072                                  	;clc				;indicate success
 18073                                  ocvf_ret:
 18074 00001CDD C3                      	retn
 18075                                  
 18076                                  ; ---------------------------------------------------------------------------
 18077                                  
 18078                                  ;***	CloseCVF - close Compressed Volume File
 18079                                  ;
 18080                                  ;	ENTRY	fhCVF has file handle
 18081                                  ;
 18082                                  ;	EXIT
 18083                                  ;
 18084                                  ;	USED	AX, BX, CX, DX
 18085                                  
 18086                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18087                                  CloseCVF:
 18088 00001CDE 8B1E[3D9E]              	mov	bx,[fhCVF]		; -1 unless file is open
 18089 00001CE2 83FBFF                  	cmp	bx,-1 ; 0FFFFh
 18090 00001CE5 7410                    	je	short ccvf_ret
 18091                                  
 18092                                  	;mov	ah,CLOSE
 18093 00001CE7 B43E                    	mov	ah,3Eh
 18094 00001CE9 CD21                    	int	21h
 18095                                  
 18096 00001CEB C706[3D9E]FFFF          	mov	word [fhCVF],-1 ; 0FFFFh ; don't try to close again
 18097                                  
 18098 00001CF1 A1[149E]                	mov	ax,[savBytCnt]		; 'deallocate' DOS & MD FAT buffers
 18099 00001CF4 A3[129E]                	mov	[BYTCNT],ax		;   by restoring old TPA byte count
 18100                                  ccvf_ret:
 18101 00001CF7 C3                      	retn
 18102                                  
 18103                                  ; ---------------------------------------------------------------------------
 18104                                  
 18105                                  ;***	CalcCompRatio - calculate file compression ratio
 18106                                  ;
 18107                                  ;	ENTRY	AX = starting cluster of file to get compression ratio of
 18108                                  ;
 18109                                  ;	EXIT	AX = compression ratio.  Example: a ratio of 2.7 to 1.0
 18110                                  ;		     will return AH = 02h & AL = 07h
 18111                                  ;		ccluUsed set to # DOS clusters used by file
 18112                                  ;		csecUsed set to # compressed sectors used by file
 18113                                  ;		ccluUsedDir, ccluUsedTotal, csecUsedDir, csecUsedTotal updated
 18114                                  ;	USED	none
 18115                                  
 18116                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18117                                  CalcCompRatio:
 18118 00001CF8 53                      	push	bx
 18119 00001CF9 51                      	push	cx
 18120 00001CFA 52                      	push	dx
 18121 00001CFB 06                      	push	es
 18122 00001CFC 8E06[959E]              	mov	es,[segFATBuf]		; es is pointer to FAT buffers
 18123                                  	;assume	es:nothing
 18124                                  
 18125 00001D00 31DB                    	xor	bx,bx			; zero count of sectors & clusters used
 18126 00001D02 891E[2B9E]              	mov	[ccluUsed],bx
 18127 00001D06 891E[319E]              	mov	[csecUsed],bx
 18128 00001D0A 891E[339E]              	mov	[csecUsed+2],bx
 18129                                  ccr_next:
 18130 00001D0E 83F802                  	cmp	ax,2			; sanity check the DOS FAT value
 18131 00001D11 7250                    	jb	short ccr_screwy
 18132                                  
 18133 00001D13 83F8F0                  	cmp	ax,0FFF0h		; end of file?
 18134 00001D16 7352                    	jae	short ccr_eof
 18135                                  
 18136 00001D18 E84701                  	call	CheckFATBuffers 	; make sure buffers contain target
 18137 00001D1B 7246                    	jc	short ccr_screwy	;   FAT entries
 18138                                  
 18139 00001D1D E82901                  	call	GetMDFATEntry		; returns corresponding entry in BX:CX
 18140 00001D20 7241                    	jc	short ccr_screwy
 18141                                  
 18142 00001D22 D1E3                    	shl	bx,1			; used bit to CY
 18143 00001D24 733D                    	jnc	short ccr_screwy	; better be used!
 18144                                  
 18145 00001D26 88FD                    	mov	ch,bh			; save uncompressed count
 18146                                  
 18147 00001D28 D1E3                    	shl	bx,1			; get count into position
 18148 00001D2A 81E3000F                	and	bx,0F00h		; bh = count of compressed sectors used
 18149 00001D2E 86FB                    	xchg	bh,bl			; bx = count
 18150 00001D30 43                      	inc	bx			; 0 - 15 means 1 - 16 used
 18151                                  
 18152 00001D31 011E[319E]              	add	[csecUsed],bx
 18153 00001D35 8316[339E]00            	adc	word [csecUsed+2],0
 18154                                  
 18155 00001D3A 89C2                    	mov	dx,ax			; save cluster # in dx
 18156                                  
 18157 00001D3C 88E8                    	mov	al,ch			; uncompressed count to al
 18158 00001D3E B103                    	mov	cl,3
 18159 00001D40 D2E8                    	shr	al,cl			; get uncompressed count into position
 18160 00001D42 83E00F                  	and	ax,000Fh		; ax = uncompressed count (0 - 15)
 18161 00001D45 4B                      	dec	bx			; bx = compressed count (0 - 15)
 18162 00001D46 39D8                    	cmp	ax,bx			; if the compressed cnt > uncompressed
 18163                                  	;jae	@f			;   fudge a little and use the larger
 18164 00001D48 7302                    	jae	short ccr_1 ; jnb
 18165 00001D4A 89D8                    	mov	ax,bx
 18166                                  ;@@:	
 18167                                  ccr_1:
 18168 00001D4C 8A0E[8F9E]              	mov	cl,[csecPerCluster]	; round up to the number of clusters
 18169 00001D50 30ED                    	xor	ch,ch			;   required for uncompressed
 18170 00001D52 01C8                    	add	ax,cx			;   sectors
 18171 00001D54 F6F1                    	div	cl
 18172 00001D56 30E4                    	xor	ah,ah
 18173 00001D58 0106[2B9E]              	add	[ccluUsed],ax
 18174                                  
 18175 00001D5C 89D0                    	mov	ax,dx			; restore cluster #
 18176 00001D5E E8A900                  	call	GetDOSFATEntry		; retuns next DOS FAT entry in AX
 18177                                  	;jc	short ccr_screwy
 18178                                  	;jmp	short ccr_next
 18179                                  	; 08/06/2023
 18180 00001D61 73AB                    	jnc	short ccr_next
 18181                                  ccr_screwy:
 18182 00001D63 31C0                    	xor	ax,ax			; something screwy happened, set
 18183                                  					;   ratio to 0.0 and exit
 18184                                  ccr_ret:
 18185 00001D65 07                      	pop	es
 18186 00001D66 5A                      	pop	dx
 18187 00001D67 59                      	pop	cx
 18188 00001D68 5B                      	pop	bx
 18189 00001D69 C3                      	retn
 18190                                  
 18191                                  	; Reached the end-of-file, now calculate the ratio as the
 18192                                  	; number of DOS sectors used / number of compressed sectors used.
 18193                                  
 18194                                  ccr_eof:
 18195 00001D6A A1[2B9E]                	mov	ax,[ccluUsed]
 18196 00001D6D 0106[2D9E]              	add	[ccluUsedDir],ax	; update cluster used totals
 18197 00001D71 0106[2F9E]              	add	[ccluUsedTotal],ax
 18198                                  
 18199 00001D75 8B0E[339E]              	mov	cx,[csecUsed+2]
 18200 00001D79 8B1E[319E]              	mov	bx,[csecUsed]		; cx:bx = # compressed sectors used
 18201                                  
 18202 00001D7D 011E[359E]              	add	[csecUsedDir],bx	; update sector used totals
 18203 00001D81 110E[379E]              	adc	[csecUsedDir+2],cx
 18204 00001D85 011E[399E]              	add	[csecUsedTotal],bx
 18205 00001D89 110E[3B9E]              	adc	[csecUsedTotal+2],cx
 18206                                  
 18207 00001D8D E80200                  	call	ComputeRatio		; ax=clusters used, cx:bx=sectors used
 18208                                  
 18209 00001D90 EBD3                    	jmp	short ccr_ret
 18210                                  
 18211                                  	; 08/06/2023
 18212                                  ;ccr_screwy:
 18213                                  ;	xor	ax,ax			; something screwy happened, set
 18214                                  ;					;   ratio to 0.0 and exit
 18215                                  ;ccr_ret:
 18216                                  ;	pop	es
 18217                                  ;	pop	dx
 18218                                  ;	pop	cx
 18219                                  ;	pop	bx
 18220                                  ;	retn
 18221                                  
 18222                                  ; ---------------------------------------------------------------------------
 18223                                  
 18224                                  ;***	ComputeRatio - calculate ratio of compressed sectors used to
 18225                                  ;		       (would be) DOS sectors used
 18226                                  ;
 18227                                  ;	Entry
 18228                                  ;		AX = DOS clusters used, cx:bx = compressed sectors used
 18229                                  ;	Exit
 18230                                  ;		ah = whole portion, al = tenths
 18231                                  ;
 18232                                  ;	Used	BX, CX, DX
 18233                                  
 18234                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18235                                  ComputeRatio:
 18236 00001D92 56                      	push	si
 18237 00001D93 57                      	push	di
 18238                                  
 18239 00001D94 89DE                    	mov	si,bx
 18240 00001D96 89CF                    	mov	di,cx			; save cx:bx in di:si
 18241                                  
 18242 00001D98 8A1E[8F9E]              	mov	bl,[csecPerCluster]
 18243 00001D9C 30FF                    	xor	bh,bh
 18244 00001D9E F7E3                    	mul	bx			; dx:ax = # DOS sectors used
 18245 00001DA0 89F3                    	mov	bx,si			; restore bx
 18246                                  
 18247 00001DA2 E83800                  	call	Div32			; dx:ax = quotient, cx:bx = remainder
 18248                                  
 18249 00001DA5 50                      	push	ax			; save quotient
 18250                                  
 18251 00001DA6 89D8                    	mov	ax,bx			; if no remainder, tenths will be 0
 18252 00001DA8 09C8                    	or	ax,cx			;   which is in AX so skip following
 18253 00001DAA 7423                    	jz	short cr_got_tenths	;   (happens frequently)
 18254                                  
 18255                                  	; Multiply the reminder by 10, add half the divisor so result is
 18256                                  	; rounded up, and divide again to get tenths digit
 18257                                  
 18258 00001DAC 89C8                    	mov	ax,cx
 18259 00001DAE 31D2                    	xor	dx,dx
 18260 00001DB0 89D9                    	mov	cx,bx
 18261 00001DB2 BB0A00                  	mov	bx,10
 18262 00001DB5 F7E3                    	mul	bx
 18263 00001DB7 91                      	xchg	ax,cx
 18264 00001DB8 F7E3                    	mul	bx
 18265 00001DBA 01CA                    	add	dx,cx			; dx:ax = remainder * 10
 18266                                  
 18267 00001DBC 89F9                    	mov	cx,di
 18268 00001DBE 89F3                    	mov	bx,si
 18269 00001DC0 D1E9                    	shr	cx,1
 18270 00001DC2 D1DB                    	rcr	bx,1			; cx:bx = 1/2 divisor
 18271 00001DC4 01D8                    	add	ax,bx
 18272 00001DC6 11CA                    	adc	dx,cx			; dx:ax = remainder * 10 + 1/2 divisor
 18273                                  
 18274 00001DC8 89F9                    	mov	cx,di
 18275 00001DCA 89F3                    	mov	bx,si
 18276                                  
 18277 00001DCC E80E00                  	call	Div32
 18278                                  
 18279                                  cr_got_tenths:
 18280 00001DCF 5B                      	pop	bx			; original quotient
 18281 00001DD0 88DC                    	mov	ah,bl
 18282                                  
 18283 00001DD2 3C0A                    	cmp	al,10			; if the tenths rounded up to the
 18284 00001DD4 7204                    	jb	short cr_exit 		;   next whole number, adjust the
 18285                                  					;   whole number part and 0 the
 18286 00001DD6 FEC4                    	inc	ah			;   tenths  (i.e. round 1.97 to 2.0)
 18287 00001DD8 30C0                    	xor	al,al
 18288                                  cr_exit:
 18289 00001DDA 5F                      	pop	di
 18290 00001DDB 5E                      	pop	si
 18291                                  
 18292 00001DDC C3                      	retn
 18293                                  
 18294                                  ; --------------------------------------------------------------------------- 
 18295                                  
 18296                                  ;***	Div32 - 32 bit divide for computing ratios
 18297                                  ;
 18298                                  ;	Entry	DX:AX = dividend, CX:BX = divisor
 18299                                  ;
 18300                                  ;	Exit	DX:AX = quotient, CX:BX = reminder
 18301                                  
 18302                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18303                                  Div32:
 18304 00001DDD E322                    	jcxz	d32_16bit		; differently if 16bit divisor
 18305                                  
 18306 00001DDF 56                      	push	si
 18307 00001DE0 57                      	push	di
 18308                                  
 18309                                  	; Brute force divide by subtraction. This is okay because worse case
 18310                                  	; the dividend will only be 16 times greater, and typically about 2
 18311                                  	; times
 18312                                  
 18313 00001DE1 31F6                    	xor	si,si
 18314 00001DE3 89F7                    	mov	di,si			; di:si is quotient
 18315                                  ;@@:
 18316                                  div32_1:
 18317 00001DE5 29D8                    	sub	ax,bx			; subtract divisor
 18318 00001DE7 19CA                    	sbb	dx,cx
 18319 00001DE9 7208                    	jc	short d32_too_far
 18320                                  
 18321 00001DEB 83C601                  	add	si, 1			; accumulate quotient
 18322 00001DEE 83D700                  	adc	di, 0
 18323                                  	;jmp	short @b
 18324 00001DF1 EBF2                    	jmp	short div32_1
 18325                                  
 18326                                  d32_too_far:
 18327 00001DF3 01D8                    	add	ax,bx			; fix the last subtraction
 18328 00001DF5 11CA                    	adc	dx,cx
 18329                                  
 18330 00001DF7 89F9                    	mov	cx,di
 18331 00001DF9 89F3                    	mov	bx,si			; dx:ax = remainder, cx:bx = quoient
 18332                                  
 18333 00001DFB 93                      	xchg	ax,bx
 18334 00001DFC 87D1                    	xchg	dx,cx			; dx:ax = quoient, cx:bx = remainder
 18335                                  
 18336 00001DFE 5F                      	pop	di
 18337 00001DFF 5E                      	pop	si
 18338                                  
 18339 00001E00 C3                      	retn
 18340                                  
 18341                                  d32_16bit:
 18342 00001E01 F7F3                    	div	bx			; divide dx:ax by bx
 18343                                  
 18344 00001E03 89D3                    	mov	bx,dx			; remainder to cx:bx
 18345 00001E05 31D2                    	xor	dx,dx			; quotient to dx:ax
 18346 00001E07 89D1                    	mov	cx,dx
 18347 00001E09 C3                      	retn
 18348                                  
 18349                                  ; --------------------------------------------------------------------------- 
 18350                                  
 18351                                  ;***	GetDOSFATEntry - returns next cluster in file's FAT chain
 18352                                  ;
 18353                                  ;	Entry	AX = current cluster number
 18354                                  ;		ES = segment of FAT buffer
 18355                                  ;		Entry should be in FAT buffer
 18356                                  ;
 18357                                  ;	Exit	AX = next cluster number
 18358                                  ;		CY set if error
 18359                                  ;
 18360                                  ;	Uses	BX
 18361                                  
 18362                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18363                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1EF2h
 18364                                  GetDOSFATEntry:
 18365 00001E0A 2B06[939E]              	sub	ax,[entInBuf]		; calc entry # in buffer
 18366 00001E0E 7212                    	jc	short gdf_ret 		; CY already set for error
 18367                                  
 18368 00001E10 89C3                    	mov	bx,ax
 18369                                  
 18370                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 18371 00001E12 803E[8C9E]00            	cmp	byte [MDBPB+3Dh],0
 18372 00001E17 750A                    	jnz	short gdf_12		; go do 12
 18373                                  
 18374 00001E19 D1E3                    	shl	bx,1			; offset = entry * 2
 18375 00001E1B 031E[979E]              	add	bx,[pbufDOSFAT]
 18376 00001E1F 268B07                  	mov	ax,[es:bx]
 18377                                  	; 08/06/2023
 18378                                  	; cf = 0
 18379                                  ;gdf_success:
 18380                                  	;clc				; success
 18381                                  gdf_ret:
 18382 00001E22 C3                      	retn
 18383                                  
 18384                                  gdf_12:
 18385 00001E23 D1EB                    	shr	bx,1
 18386 00001E25 01C3                    	add	bx,ax			; offset to entry = entry * 1.5
 18387 00001E27 031E[979E]              	add	bx,[pbufDOSFAT]
 18388                                  
 18389                                  ;	ES:BX points to the word containing the desired 12 bit FAT entry.
 18390                                  ;	For odd entries, the upper 12 bits are valid, for even entries
 18391                                  ;	the low 12 bits are valid.  odd: OOOx  even: xEEE
 18392                                  
 18393 00001E2B A801                    	test	al,1			; is current entry odd?
 18394                                  
 18395 00001E2D 268B07                  	mov	ax,[es:bx]		; word with FAT entry
 18396 00001E30 7505                    	jnz	short gdf_odd
 18397                                  
 18398 00001E32 25FF0F                  	and	ax,0FFFh		; keep low 12 bits for even
 18399 00001E35 EB08                    	jmp	short gdf_testEOF
 18400                                  
 18401                                  gdf_odd:
 18402 00001E37 89CB                    	mov	bx,cx			; (save cx in bx)
 18403 00001E39 B104                    	mov	cl,4
 18404 00001E3B D3E8                    	shr	ax,cl			; upper 12 bits for odd
 18405 00001E3D 89D9                    	mov	cx,bx			; (restore cx)
 18406                                  
 18407                                  gdf_testEOF:
 18408 00001E3F 3DF00F                  	cmp	ax,0FF0h		; valid entry?
 18409                                  	;jb	short gdf_success
 18410 00001E42 F5                      	cmc	; cf = 1 <--> cf = 0
 18411 00001E43 73DD                    	jnc	short gdf_ret	
 18412                                  
 18413 00001E45 80CCF0                  	or	ah,0F0h			; caller expects 16 bit special values
 18414                                  	;jmp	short gdf_success
 18415                                  	; cf = 0
 18416 00001E48 C3                      	retn
 18417                                  
 18418                                  ; --------------------------------------------------------------------------- 
 18419                                  
 18420                                  ;***	GetMDFATEntry - returns requested MD FAT entry
 18421                                  ;
 18422                                  ;	Entry	AX = current DOS cluster number
 18423                                  ;		ES = segment of FAT buffer
 18424                                  ;		Entry should be in FAT buffer
 18425                                  ;
 18426                                  ;	Exit	BX:CX = corresponding MD FAT entry
 18427                                  ;		CY set if error
 18428                                  ;
 18429                                  ;	Uses	None
 18430                                  
 18431                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18432                                  GetMDFATEntry:
 18433 00001E49 89C3                    	mov	bx,ax
 18434 00001E4B 2B1E[939E]              	sub	bx,[entInBuf]		; calc entry # in buffer
 18435 00001E4F 7210                    	jc	short gmf_ret 		; CY already set for error return
 18436                                  
 18437 00001E51 D1E3                    	shl	bx,1
 18438 00001E53 D1E3                    	shl	bx,1			; * 4 bytes per MDFAT entry
 18439                                  
 18440 00001E55 031E[999E]              	add	bx,[pbufMDFAT]
 18441 00001E59 268B0F                  	mov	cx,[es:bx]
 18442 00001E5C 268B5F02                	mov	bx,[es:bx+2]
 18443                                  
 18444 00001E60 F8                      	clc
 18445                                  gmf_ret:
 18446 00001E61 C3                      	retn
 18447                                  
 18448                                  ; --------------------------------------------------------------------------- 
 18449                                  
 18450                                  ;***	CheckFATBuffers - check that target FAT entry is in FAT buffers.  If
 18451                                  ;			  not, fill the buffers starting with the requested
 18452                                  ;			  entry.
 18453                                  ;
 18454                                  ;	ENTRY	AX = FAT entry #
 18455                                  ;		ES = segment of FAT buffers
 18456                                  ;
 18457                                  ;	EXIT	FAT buffers contain target entry, or CY set if error
 18458                                  ;		entInBuf updated
 18459                                  ;
 18460                                  ;	USED	BX
 18461                                  
 18462                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18463                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1F4Bh
 18464                                  
 18465                                  CheckFATBuffers:
 18466 00001E62 89C3                    	mov	bx,ax
 18467 00001E64 2B1E[939E]              	sub	bx,[entInBuf]
 18468 00001E68 7208                    	jb	short cfb_load_fat
 18469                                  
 18470 00001E6A 2B1E[919E]              	sub	bx,[cFATEntries]
 18471 00001E6E 7302                    	jae	short cfb_load_fat ; jnb
 18472                                  
 18473 00001E70 F8                      	clc
 18474 00001E71 C3                      	retn
 18475                                  
 18476                                  	; Desired entry isn't in the FAT buffers, reload the buffers to
 18477                                  	; include it
 18478                                  
 18479                                  cfb_load_fat:
 18480 00001E72 50                      	push	ax
 18481 00001E73 51                      	push	cx
 18482 00001E74 52                      	push	dx
 18483                                  
 18484                                  	; Start with the DOS FAT buffer
 18485                                  
 18486 00001E75 31C9                    	xor	cx,cx			; zero high offset to FAT file position
 18487                                  
 18488                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 18489 00001E77 803E[8C9E]00            	cmp	byte [MDBPB+3Dh],0
 18490 00001E7C 7509                    	jnz	short cfb_12		; go do 12
 18491                                  
 18492 00001E7E A3[939E]                	mov	[entInBuf],ax		; this entry is first
 18493                                  
 18494 00001E81 D1E0                    	shl	ax,1			; 2 bytes per cluster #
 18495 00001E83 D1D1                    	rcl	cx,1			; cx:ax = offset to FAT entry
 18496                                  
 18497 00001E85 EB0B                    	jmp	short cfb_common
 18498                                  
 18499                                  cfb_12:
 18500                                  	;and	al,not 1 ; 0FEh		; start with even # entry
 18501 00001E87 24FE                    	and	al,~1
 18502 00001E89 A3[939E]                	mov	[entInBuf],ax
 18503                                  
 18504 00001E8C 89C3                    	mov	bx,ax
 18505 00001E8E D1EB                    	shr	bx,1
 18506 00001E90 01D8                    	add	ax,bx			; ax = offset to FAT entry
 18507                                  					;      (entry # * 1.5)
 18508                                  cfb_common:
 18509 00001E92 89C3                    	mov	bx,ax			; cx:bx = offset to FAT entry
 18510                                  
 18511                                  	;mov	ax,[MDBPB.csecMDReserved] ; # magicDrv reserved sectors
 18512 00001E94 A1[769E]                	mov	ax,[MDBPB+27h]
 18513                                  	;add	ax,[MDBPB.dos_bpb.csecReserved]
 18514 00001E97 0306[5D9E]              	add	ax,[MDBPB+0Eh]
 18515                                  
 18516                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 18517 00001E9B F726[5A9E]              	mul	word [MDBPB+0Bh]	; DX:AX = DOS FAT file origin
 18518 00001E9F 01D8                    	add	ax,bx
 18519 00001EA1 11CA                    	adc	dx,cx			; DX:AX = file offset to read from
 18520                                  
 18521 00001EA3 8B0E[919E]              	mov	cx,[cFATEntries]	; size to read
 18522 00001EA7 D1E1                    	shl	cx,1
 18523 00001EA9 8B1E[979E]              	mov	bx,[pbufDOSFAT]		; es:bx = location to read
 18524                                  
 18525 00001EAD E83500                  	call	ReadCVFile
 18526 00001EB0 722F                    	jc	short cfb_error
 18527                                  
 18528                                  	; Now read the corresponding MagicDrv FAT entries
 18529                                  
 18530                                  	;mov	ax,[MDBPB.secMDFATStart]
 18531 00001EB2 A1[739E]                	mov	ax,[MDBPB+24h]
 18532 00001EB5 40                      	inc	ax
 18533                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 18534 00001EB6 F726[5A9E]              	mul	word [MDBPB+0Bh]	; DX:AX = MDFAT file offset
 18535                                  
 18536 00001EBA 8B1E[939E]              	mov	bx,[entInBuf]
 18537 00001EBE 31C9                    	xor	cx,cx			; CX:BX = 32 bit cluster #
 18538                                  	;add	bx,[MDBPB.cluFirstData]
 18539 00001EC0 031E[7C9E]              	add	bx,[MDBPB+2Dh]
 18540 00001EC4 11C9                    	adc	cx,cx			; CX:BX = MDFAT entry #
 18541                                  
 18542 00001EC6 D1E3                    	shl	bx,1
 18543 00001EC8 D1D1                    	rcl	cx,1
 18544 00001ECA D1E3                    	shl	bx,1
 18545 00001ECC D1D1                    	rcl	cx,1			; * 4 bytes per MDFAT entry
 18546                                  
 18547 00001ECE 01D8                    	add	ax,bx
 18548 00001ED0 11CA                    	adc	dx,cx			; DX:AX = file offset of MDFAT entry
 18549                                  
 18550 00001ED2 8B0E[919E]              	mov	cx,[cFATEntries]
 18551 00001ED6 D1E1                    	shl	cx,1
 18552 00001ED8 D1E1                    	shl	cx,1			; size to read
 18553 00001EDA 8B1E[999E]              	mov	bx,[pbufMDFAT]		; es:bx = location to read into
 18554                                  
 18555 00001EDE E80400                  	call	ReadCVFile
 18556                                  	;jnc	short cfb_ret ; cf = 0 ; 08/06/2023
 18557                                  	; 08/06/2023
 18558                                  	; cf = 1
 18559                                  cfb_error:
 18560                                  	;stc
 18561                                  cfb_ret:
 18562 00001EE1 5A                      	pop	dx
 18563 00001EE2 59                      	pop	cx
 18564 00001EE3 58                      	pop	ax
 18565 00001EE4 C3                      	retn
 18566                                  
 18567                                  ; --------------------------------------------------------------------------- 
 18568                                  
 18569                                  ;***	ReadCVFile - read from the Compressed Volume File
 18570                                  ;
 18571                                  ;	Entry	DX:AX file offset, ES:BX buffer location, CX length in bytes
 18572                                  ;
 18573                                  ;	Exit	CY set if error, else data read
 18574                                  ;
 18575                                  ;	Uses	AX, BX, CX, DX
 18576                                  
 18577                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18578                                  ReadCVFile:
 18579 00001EE5 53                      	push	bx			; save buffer loc
 18580 00001EE6 51                      	push	cx			; save read length
 18581                                  
 18582 00001EE7 89D1                    	mov	cx,dx
 18583 00001EE9 89C2                    	mov	dx,ax			; cx:dx = file offset of fat entry
 18584                                  	;mov	ax,(LSEEK shl 8) or 0
 18585 00001EEB B80042                  	mov	ax,4200h
 18586 00001EEE 8B1E[3D9E]              	mov	bx,[fhCVF]
 18587 00001EF2 CD21                    	int	21h
 18588 00001EF4 720E                    	jc	short rcf_ret 		; CY set for error return
 18589                                  
 18590                                  	;mov	ah,READ
 18591 00001EF6 B43F                    	mov	ah,3Fh
 18592 00001EF8 59                      	pop	cx			; read length
 18593 00001EF9 5A                      	pop	dx			; buffer loc offset
 18594 00001EFA 1E                      	push	ds
 18595 00001EFB 06                      	push	es
 18596 00001EFC 1F                      	pop	ds			; buffer loc segment
 18597 00001EFD CD21                    	int	21h
 18598 00001EFF 1F                      	pop	ds
 18599 00001F00 7202                    	jc	short rcf_ret 		; CY set for error return
 18600                                  
 18601 00001F02 39C8                    	cmp	ax,cx			; read it all?
 18602                                  	;je	short rcf_ret 		; yes, CY clear
 18603                                  	; 08/06/2023	
 18604                                  	; ax < cx
 18605                                  	;stc				; end-of-file?
 18606                                  rcf_ret:
 18607 00001F04 C3                      	retn
 18608                                  
 18609                                  ;============================================================================
 18610                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 18611                                  ;============================================================================
 18612                                  ; 09/10/2018 - Retro DOS v3.0
 18613                                  
 18614                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 18615                                  
 18616                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18617                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 18618                                  
 18619                                  ; =============== S U B	R O U T	I N E =======================================
 18620                                  
 18621                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18622                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1FF4h
 18623                                  PAUSE:
 18624 00001F05 BA[6292]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 18625 00001F08 E80436                  	call	std_printf
 18626 00001F0B E819E7                  	call	GETKEYSTROKE
 18627                                  	;call	CRLF2
 18628                                  	;retn
 18629                                  	; 19/02/2023
 18630 00001F0E E9100C                  	jmp	CRLF2
 18631                                  
 18632                                  ; ---------------------------------------------------------------------------
 18633                                  
 18634                                  ;****************************************************************
 18635                                  ;*
 18636                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 18637                                  ;*
 18638                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 18639                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 18640                                  ;*		up an error message and transfer control to CERROR.
 18641                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 18642                                  ;*		entered or SLASHP_ERASE if /P entered.
 18643                                  ;*
 18644                                  ;* INPUT:	command line at offset 81H
 18645                                  ;*
 18646                                  ;* OUTPUT:	if no error:
 18647                                  ;*		FCB at 5ch set up with filename(s) entered
 18648                                  ;*		Current directory set to entered directory
 18649                                  ;*
 18650                                  ;****************************************************************
 18651                                  
 18652                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18653                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 18654                                  
 18655                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18656                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2001h
 18657                                  ERASE:
 18658                                  	; MSDOS 6.0
 18659                                  
 18660                                  	;assume	ds:trangroup,es:trangroup
 18661                                  
 18662 00001F11 BE8100                  	mov	si,81h		;AC000; get command line
 18663 00001F14 C706[089E]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 18664 00001F1A BF[2B98]                	mov	di,PARSE_ERASE
 18665                                  				;AN000; Get address of PARSE_ERASE
 18666 00001F1D 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18667                                  erase_scan:
 18668 00001F1F 31D2                    	xor	dx,dx		;AN000;
 18669 00001F21 E8E507                  	call	Parse_With_Msg	;AC018; call parser
 18670                                  	
 18671                                  	;cmp	ax,-1  ; 0FFFFh
 18672                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 18673                                  	;je	short good_line	;AN000; yes - done parsing
 18674                                  	;;cmp	ax,0
 18675                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 18676                                  	;and	ax,ax		;AC000; did we have an error?
 18677                                  	;jnz	short errj2	;AC000; yes exit
 18678                                  	; 10/06/2023
 18679 00001F24 40                      	inc	ax  ; cmp ax,-1
 18680 00001F25 743C                    	jz	short good_line ; 0FFFFh -> 0
 18681 00001F27 48                      	dec	ax  ; cmp ax,0	
 18682 00001F28 7566                    	jnz	short errj2  ; 1 -> 0
 18683                                  	; ax = 0
 18684                                  
 18685 00001F2A 813E[E3A9][9E97]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 18686                                  				;AN000; was /P entered?
 18687 00001F30 741C                    	je	short set_erase_prompt
 18688                                  				;AN000; yes - go set prompt
 18689                                  ;
 18690                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 18691                                  ;
 18692 00001F32 56                      	push	si		;AC000; save position in line
 18693 00001F33 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18694                                  				;AC000; get address of filespec
 18695                                  	;cmp	byte [si+1],colon_char
 18696 00001F37 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 18697 00001F3B 750B                    	jne	short erase_drive_ok
 18698                                  				;AC000; no - continue
 18699                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 18700 00001F3D 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 18701 00001F41 7505                    	jne	short erase_drive_ok
 18702                                  				;AC000; no - continue
 18703 00001F43 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 18704                                  				;AN022; get message number in control block
 18705 00001F46 EB3D                    	jmp	short extend_setup
 18706                                  				;AC000; exit
 18707                                  erase_drive_ok:
 18708 00001F48 E8AA12                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 18709 00001F4B 5E                      	pop	si		;AC000; get position back
 18710 00001F4C EBD1                    	jmp	short erase_scan
 18711                                  				;AN000; continue parsing
 18712                                  set_erase_prompt:
 18713 00001F4E 833E[089E]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 18714 00001F53 7408                    	jz	short ok_to_set_erase_prompt
 18715                                  				;AN018; no go set switch
 18716                                  	;mov	ax,1
 18717 00001F55 B80100                  	mov	ax,MoreArgs_Ptr 
 18718                                  				;AN018; set up too many arguments
 18719 00001F58 E8BD07                  	call	setup_parse_error_msg
 18720                                  				;AN018; set up an error message
 18721 00001F5B EB33                    	jmp	short errj2	;AN018; exit
 18722                                  
 18723                                  ok_to_set_erase_prompt: 	;AN018;
 18724 00001F5D FF06[089E]              	inc	word [COMSW]	;AN000; indicate /p specified
 18725 00001F61 EBBC                    	jmp	short erase_scan
 18726                                  				;AN000; continue parsing
 18727                                  good_line:			;G  We know line is good
 18728 00001F63 E8640C                  	call	PathCrunch
 18729 00001F66 730D                    	jnc	short checkdr
 18730 00001F68 A1[25A2]                	mov	ax,[Msg_Numb]	;AN022; get message number
 18731                                  	;cmp	ax,0		;AN022; was message flag set?
 18732 00001F6B 09C0                    	or	ax,ax
 18733 00001F6D 7516                    	jnz	short extend_setup
 18734                                  				;AN022; yes - print out message
 18735                                  	;cmp	byte [DestIsDir],0
 18736 00001F6F 3806[AAA0]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 18737 00001F73 750D                    	jnz	short badpath_err
 18738                                  				;AC022; see if they should have
 18739                                  checkdr:
 18740 00001F75 833E[089E]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 18741 00001F7A 7403                    	jz	short notest2j	;AN000; no - go to notest2
 18742 00001F7C E9061B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 18743                                  notest2j:
 18744 00001F7F E99E1A                  	jmp	notest2
 18745                                  
 18746                                  badpath_err:			;AN022; "Path not found" message
 18747 00001F82 B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 18748                                  				;AN022; set up error number
 18749                                  extend_setup:			;AN022;
 18750                                  	;mov	byte [msg_disp_class],1
 18751 00001F85 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 18752                                  				;AN022; set up extended error msg class
 18753 00001F8A BA[D091]                	mov	dx,extend_buf_ptr
 18754                                  				;AC022; get extended message pointer
 18755 00001F8D A3[D091]                	mov	[extend_buf_ptr],ax
 18756                                  				;AN022; get message number in control block
 18757                                  errj2:				;AC022; exit jump
 18758 00001F90 E90F0F                  	jmp	cerror		;AN022;
 18759                                  
 18760                                  ; ---------------------------------------------------------------------------
 18761                                  
 18762                                  ; ****************************************************************
 18763                                  ; *
 18764                                  ; * ROUTINE:	 CRENAME - rename file(s)
 18765                                  ; *
 18766                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 18767                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 18768                                  ; *		 Make sure the second filespec only contains a
 18769                                  ; *		 filename. If both openands are valid, attempt
 18770                                  ; *		 to rename the file.
 18771                                  ; *
 18772                                  ; * INPUT:	 command line at offset 81H
 18773                                  ; *
 18774                                  ; * OUTPUT:	 none
 18775                                  ; *
 18776                                  ; ****************************************************************
 18777                                  
 18778                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18779                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18780                                  CRENAME:
 18781                                  	; MSDOS 6.0
 18782                                  	;assume	ds:trangroup,es:trangroup
 18783                                  
 18784 00001F93 BE8100                  	mov	si,81h		;AC000; Point to command line
 18785 00001F96 BF[AD98]                	mov	di,PARSE_RENAME
 18786                                  				;AN000; Get address of PARSE_RENAME
 18787 00001F99 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18788 00001F9B 31D2                    	xor	dx,dx		;AN000;
 18789 00001F9D E86907                  	call	Parse_With_Msg	;AC018; call parser
 18790                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 18791 00001FA0 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 18792                                  ;	jz	short crename_no_parse_error
 18793                                  				;AC000; no - continue
 18794 00001FA2 752C                    	jnz	short crename_parse_error
 18795                                  				;AC000; Yes, fail. (need long jump)
 18796                                  ;
 18797                                  ;  Get first file name returned from parse into our buffer
 18798                                  ;
 18799                                  crename_no_parse_error:
 18800 00001FA4 56                      	push	si		;AN000; save position in line
 18801 00001FA5 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18802                                  				;AN000; get address of filespec
 18803 00001FA9 E84912                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 18804 00001FAC 5E                      	pop	si		;AN000; restore position in line
 18805                                  
 18806 00001FAD 31D2                    	xor	dx,dx		;AN000; clear dx
 18807 00001FAF E85707                  	call	Parse_With_Msg	;AC018; call parser
 18808                                  	;cmp	ax,RESULT_NO_ERROR
 18809 00001FB2 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 18810 00001FB4 751A                    	jnz	short crename_parse_error
 18811                                  				;AN000; Yes, fail.
 18812                                  ;
 18813                                  ;  Check the second file name for drive letter colon
 18814                                  ;
 18815 00001FB6 56                      	push	si		;AN000; save position in line
 18816 00001FB7 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18817                                  				;AC000; get address of path
 18818                                  	;mov	al,':'		;AC000;
 18819                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 18820 00001FBB 807C013A                	cmp	byte [si+1],':'
 18821 00001FBF 7511                    	jnz	short ren_no_drive
 18822                                  				;AN000; Yes, error
 18823                                  	;mov	byte [msg_disp_class],2
 18824 00001FC1 C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 18825                                  				;AN000; set up parse error msg class
 18826 00001FC6 BA[D091]                	mov	dx,extend_buf_ptr
 18827                                  				;AC000; get extended message pointer
 18828                                  	;mov	word [extend_buf_ptr],0Ah
 18829 00001FC9 C706[D091]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 18830                                  				;AN000; get "Invalid parameter" message number
 18831 00001FCF 5E                      	pop	si		;AN000;
 18832                                  crename_parse_error:		;AC022;
 18833 00001FD0 EB64                    	jmp	short errj	;AC000;
 18834                                  
 18835                                  ;  Get second file name returned from parse into the fCB. Save
 18836                                  ;  character after file name so we can later check to make sure it
 18837                                  ;  isn't a path character.
 18838                                  
 18839                                  ren_no_drive:
 18840 00001FD2 BF6C00                  	mov	di,FCB+10h ; 6Ch
 18841                                  				;AC000; set up to parse second file name
 18842                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 18843 00001FD5 B80129                  	mov	ax,2901h
 18844 00001FD8 CD21                    	int	21h		;AC000; do the function
 18845 00001FDA AC                      	lodsb			;AC000; Load char after filename
 18846 00001FDB A2[A2A0]                	mov	[One_Char_Val],al
 18847                                  				;AN000; save char after filename
 18848 00001FDE 5E                      	pop	si		;AN000; get line position back
 18849                                  ;
 18850                                  ; We have source and target. See if any args beyond.
 18851                                  ;
 18852 00001FDF BF[AD98]                	mov	di,PARSE_RENAME
 18853                                  				;AC000; get address of parse_rename
 18854 00001FE2 E80E07                  	call	parse_check_eol ;AC000; are we at end of line?
 18855 00001FE5 75E9                    	jnz	short crename_parse_error
 18856                                  				;AN000; no, fail.
 18857 00001FE7 E8E00B                  	call	PathCrunch
 18858 00001FEA BA[E191]                	mov	dx,BADCPMES_PTR
 18859 00001FED 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 18860 00001FEF 730F                    	jnc	short notest3
 18861 00001FF1 A1[25A2]                	mov	ax,[Msg_Numb]	;AN022; get message number
 18862                                  	;cmp	ax,0		;AN022; was message flag set?
 18863 00001FF4 21C0                    	and	ax,ax ; 0 ?
 18864 00001FF6 758D                    	jnz	short extend_setup
 18865                                  				;AN022; yes - print out message
 18866                                  	;cmp	byte [DestIsDir],0
 18867 00001FF8 3806[AAA0]              	cmp	[DestIsDir],al	; No CHDIRs worked
 18868 00001FFC 7402                    	jz	short notest3 	; see if they should have
 18869 00001FFE EB82                    	Jmp	badpath_err	;AC022; set up error
 18870                                  notest3:
 18871 00002000 A0[A2A0]                	mov	al,[One_Char_Val]
 18872                                  				;AN000; move char into AX
 18873 00002003 BA[FF91]                	mov	dx,INORNOT_PTR 
 18874                                  				; Load invalid fname error ptr
 18875 00002006 E8B30B                  	call	pathchrcmp	; Is the char in al a path sep?
 18876 00002009 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 18877                                  				;  filename only.
 18878                                  	;mov	ah,FCB_Rename
 18879 0000200B B417                    	mov	ah,17h
 18880 0000200D BA5C00                  	mov	dx,FCB ; 5Ch
 18881 00002010 CD21                    	int	21h
 18882 00002012 3CFF                    	cmp	al,0FFh		; Did an error occur??
 18883 00002014 7506                    	jne	short renameok
 18884                                  
 18885 00002016 E82902                  	call	get_ext_error_number
 18886                                  				;AN022; get extended error
 18887 00002019 50                      	push	ax		;AC022; Save results
 18888 0000201A B0FF                    	mov	al,0FFh		; Restore original error state
 18889                                  renameok:
 18890 0000201C 50                      	push	ax
 18891 0000201D E8BE09                  	call	RestUDir
 18892 00002020 58                      	pop	ax
 18893 00002021 FEC0                    	inc	al
 18894                                  	;;retnz
 18895                                  	;jz	short rn1
 18896                                  	;retn	
 18897 00002023 7514                    	jnz	short ret56
 18898                                  rn1:
 18899 00002025 58                      	pop	ax		;AC022; get the error number back
 18900 00002026 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 18901                                  				;AN022; error file not found?
 18902 00002029 7408                    	je	short use_renerr
 18903                                  				;AN022; yes - use generic error message
 18904 0000202B 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 18905                                  				;AN022; error file not found?
 18906 0000202E 7403                    	je	short use_renerr
 18907                                  				;AN022; yes - use generic error message
 18908 00002030 E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 18909                                  
 18910                                  use_renerr:
 18911 00002033 BA[DE91]                	mov	dx,RENERR_PTR	;AC022;
 18912                                  errj:
 18913 00002036 E9690E                  	jmp	cerror
 18914                                  ret56:
 18915                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023	
 18916 00002039 C3                      	retn
 18917                                  
 18918                                  ; ---------------------------------------------------------------------------
 18919                                  
 18920                                  ;****************************************************************
 18921                                  ;*
 18922                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 18923                                  ;*		standard output device
 18924                                  ;*
 18925                                  ;* SYNTAX:	TYPE filespec
 18926                                  ;*
 18927                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 18928                                  ;*		1Ah and display the contents to STDOUT.
 18929                                  ;*
 18930                                  ;* INPUT:	command line at offset 81H
 18931                                  ;*
 18932                                  ;* OUTPUT:	none
 18933                                  ;*
 18934                                  ;****************************************************************
 18935                                  
 18936                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18937                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18938                                  TYPEFIL:
 18939                                  	; MSDOS 6.0	
 18940                                  	;assume	ds:trangroup,es:trangroup
 18941                                  
 18942 0000203A BE8100                  	mov	si,81h
 18943 0000203D BF[1998]                	mov	di,PARSE_MRDIR
 18944                                  				;AN000; Get address of PARSE_MRDIR
 18945 00002040 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18946 00002042 31D2                    	xor	dx,dx		;AN000;
 18947 00002044 E8C206                  	call	Parse_With_Msg	;AC018; call parser
 18948                                  	;cmp	ax,RESULT_NO_ERROR
 18949 00002047 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 18950 00002049 751E                    	jnz	short typefil_parse_error
 18951                                  				;AN000; yes - issue error message
 18952                                  
 18953 0000204B 56                      	push	si		;AC000; save position in line
 18954 0000204C C536[E5A9]              	lds	si,[PARSE1_ADDR]
 18955                                  				;AC000; get address of filespec
 18956 00002050 E8A211                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 18957 00002053 5E                      	pop	si		;AC000; get position back
 18958 00002054 BF[1998]                	mov	di,PARSE_MRDIR
 18959                                  				;AC000; get address of parse_mrdir
 18960 00002057 E89906                  	call	parse_check_eol ;AC000; are we at end of line?
 18961                                  	;jz	short gottarg 	;AC000; yes - continue
 18962                                  	; 20/02/2023
 18963                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 18964                                  	;jmp	cerror
 18965 0000205A 750D                    	jnz	short typefil_parse_error
 18966                                  gottarg:
 18967 0000205C E8DD0F                  	call	SETPATH
 18968 0000205F F606[AEA0]02            	test	byte [DestInfo],00000010b ; 2
 18969                                  				; Does the filespec contain wildcards
 18970 00002064 7406                    	jz	short nowilds 	; No, continue processing
 18971 00002066 BA[FF91]                	mov	dx,INORNOT_PTR	; Yes, report error
 18972                                  	; 20/02/2023
 18973                                  typefil_parse_error:
 18974 00002069 E9360E                  	jmp	cerror
 18975                                  nowilds:
 18976                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 18977 0000206C B8006C                  	mov	ax,6C00h
 18978                                  	;mov	bx,read_open_mode ; 0
 18979                                  				;AN000; get open mode for TYPE
 18980 0000206F 31C9                    	xor	cx,cx		;AN000; no special files
 18981 00002071 89CB                    	mov	bx,cx ; 20/02/2023
 18982 00002073 BA0101                  	mov	dx,101h
 18983                                  	;mov	dx,read_open_flag ; 101h
 18984                                  				;AN000; set up open flags
 18985 00002076 BE[12A1]                	mov	si,SrcBuf	;AN030; get file name
 18986 00002079 CD21                    	int	21h
 18987 0000207B 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 18988                                  
 18989                                  typerr: 			;AN022;
 18990 0000207D 0E                      	push	cs		;AN022; make sure we have local segment
 18991 0000207E 1F                      	pop	ds		;AN022;
 18992 0000207F E8B001                  	call	Set_Ext_Error_Msg ;AN022;
 18993 00002082 C706[91A0][12A1]        	mov	word [string_ptr_2],SrcBuf 
 18994                                  				;AC022; get address of failed string
 18995                                  	;mov	byte [extend_buf_sub],1
 18996 00002088 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 18997                                  				;AC022; put number of subst in control block
 18998 0000208D E9120E                  	jmp	cerror		;AC022; exit
 18999                                  
 19000                                  typecont:
 19001 00002090 89C3                    	mov	bx,ax		;AC000; get Handle
 19002                                  ;M043
 19003                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 19004                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 19005                                  ;indicate it is a device.
 19006                                  ;
 19007                                  	;mov	ax,(IOCTL shl 8) or 0
 19008 00002092 B80044                  	mov	ax,4400h
 19009 00002095 CD21                    	int	21h
 19010                                  
 19011 00002097 F6C280                  	test	dl,80h		;is it a device?
 19012 0000209A 7408                    	jz	short not_device
 19013                                  				;no, a file
 19014                                  
 19015 0000209C C706[DFA9]FFFF          	mov	word [TypeFilSiz+2],-1 ; 0FFFFh
 19016                                  				;indicate it is a device
 19017 000020A2 EB17                    	jmp	short dotype
 19018                                  not_device:
 19019                                  ;SR;
 19020                                  ; Find the filesize by seeking to the end and then reset file pointer to
 19021                                  ;start of file
 19022                                  
 19023                                  	;mov	ax,(LSEEK shl 8) or 2
 19024 000020A4 B80242                  	mov	ax,4202h
 19025 000020A7 31D2                    	xor	dx,dx
 19026 000020A9 89D1                    	mov	cx,dx		;seek  to end of file
 19027 000020AB CD21                    	int	21h
 19028                                  
 19029 000020AD A3[DDA9]                	mov	[TypeFilSiz],ax
 19030 000020B0 8916[DFA9]              	mov	[TypeFilSiz+2],dx ;store filesize
 19031                                  	;mov	ax,(LSEEK shl 8) or 0
 19032 000020B4 B80042                  	mov	ax,4200h
 19033 000020B7 31D2                    	xor	dx,dx
 19034 000020B9 CD21                    	int	21h	        ;reset file pointer to start
 19035                                  dotype:				;M043
 19036 000020BB C606[D6A1]00            	mov	byte [zflag],0 	; Reset ^Z flag
 19037 000020C0 8E1E[F59D]              	mov	ds,[TPA]
 19038 000020C4 31D2                    	xor	dx,dx
 19039                                  	;ASSUME	DS:NOTHING
 19040                                  typelp:
 19041 000020C6 2E803E[D6A1]00          	cmp	byte [cs:zflag],0
 19042                                  				;AC050; Is the ^Z flag set?
 19043                                  	;retnz			; Yes, return
 19044                                  	; 17/04/2023
 19045 000020CC 7401                    	jz	short tf1
 19046 000020CE C3                      	retn
 19047                                  tf1:
 19048 000020CF 2E8B0E[129E]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 19049                                  
 19050                                  ;Update the filesize left to read
 19051                                  
 19052 000020D4 2E833E[DFA9]FF          	cmp	word [cs:TypeFilSiz+2],-1
 19053                                  				;is it a device? M043
 19054 000020DA 7431                    	je	short typ_read	;yes, just read from it; M043
 19055                                  
 19056 000020DC 2E833E[DFA9]00          	cmp	word [cs:TypeFilSiz+2],0
 19057                                  				;more than 64K left?
 19058 000020E2 740D                    	jz	short lt64k	;no, do word subtraction
 19059 000020E4 2E290E[DDA9]            	sub	[cs:TypeFilSiz],cx
 19060 000020E9 2E831E[DFA9]00          	sbb	word [cs:TypeFilSiz+2],0
 19061                                  				;update filesize
 19062 000020EF EB1C                          	jmp	short typ_read	;do the read
 19063                                  lt64k:
 19064 000020F1 2E3B0E[DDA9]            	cmp	cx,[cs:TypeFilSiz]
 19065                                  				;readsize <= buffer?
 19066 000020F6 7610                    	jbe	short gtbuf	; yes, just update readsize
 19067                                  
 19068                                  ;Buffer size is larger than bytes to read
 19069                                  
 19070 000020F8 2E8B0E[DDA9]            	mov	cx,[cs:TypeFilSiz]
 19071 000020FD E361                    	jcxz	typelp_ret
 19072 000020FF 2EC706[DDA9]0000        	mov	word [cs:TypeFilSiz],0
 19073 00002106 EB05                    	jmp	short typ_read
 19074                                  gtbuf:
 19075 00002108 2E290E[DDA9]            	sub	[cs:TypeFilSiz],cx
 19076                                  				;update filesize remaining
 19077                                  typ_read:
 19078                                  	;mov	ah,read
 19079 0000210D B43F                    	mov	ah,3Fh
 19080 0000210F CD21                    	int	21h
 19081 00002111 7303                    	jnc	short tf2	;M043
 19082 00002113 E967FF                  	jmp	typerr		;M043
 19083                                  tf2:				;M043
 19084                                  ;M043;	jc	typerr		;AN022; Exit if error
 19085                                  
 19086 00002116 89C1                    	mov	cx,ax
 19087 00002118 E346                    	jcxz	typelp_ret	;AC000; exit if nothing read
 19088 0000211A 1E                      	push	ds
 19089 0000211B 07                      	pop	es		; Check to see if a ^Z was read.
 19090                                  	;assume es:nothing
 19091 0000211C 31FF                    	xor	di,di
 19092 0000211E 50                      	push	ax
 19093 0000211F B01A                    	mov	al,1Ah
 19094 00002121 F2AE                    	repnz	scasb
 19095 00002123 58                      	pop	ax
 19096 00002124 91                      	xchg	ax,cx
 19097                                  	;cmp	ax,0
 19098 00002125 21C0                    	and	ax,ax
 19099 00002127 7506                    	jnz	short foundz	; Yes, handle it
 19100 00002129 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 19101 0000212D 750A                    	jnz	short typecont2	; No ^Z, continue
 19102                                  foundz:
 19103 0000212F 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 19104 00002131 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 19105 00002132 0E                      	push	cs		;  will be typed.
 19106 00002133 07                      	pop	es
 19107                                  	;assume es:trangroup
 19108 00002134 26F616[D6A1]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 19109                                  typecont2:			;  will quit after this write.
 19110 00002139 53                      	push	bx
 19111 0000213A BB0100                  	mov	bx,1
 19112                                  	;mov	ah,Write
 19113 0000213D B440                    	mov	ah,40h
 19114 0000213F CD21                    	int	21h
 19115 00002141 5B                      	pop	bx
 19116 00002142 720C                    	jc	short Error_outputj
 19117 00002144 39C8                    	cmp	ax,cx
 19118 00002146 7503                    	jnz	short tf3	;M043
 19119 00002148 E97BFF                  	jmp	typelp		;M043
 19120                                  tf3:				;M043
 19121                                  ;M043;	jz	short typelp
 19122 0000214B 49                      	dec	cx
 19123 0000214C 39C8                    	cmp	ax,cx
 19124                                  	;;retz			; One less byte OK (^Z)
 19125                                  	;jnz	short Error_outputj
 19126                                  ;tf4:
 19127                                  	;retn
 19128 0000214E 7410                    	jz	short typelp_ret ; 20/02/2023
 19129                                  
 19130                                  Error_outputj:
 19131 00002150 BB0100                  	mov	bx,1
 19132                                  	;mov	ax,IOCTL SHL 8
 19133 00002153 B80044                  	mov	ax,4400h
 19134 00002156 CD21                    	int	21h
 19135 00002158 F6C280                  	test	dl,80h
 19136                                  	;test	dl,devid_ISDEV
 19137                                  	;;retnz			; If device, no error message
 19138                                  	;jnz	short tf4
 19139 0000215B 7503                    	jnz	short typelp_ret
 19140 0000215D E9420A                  	jmp	error_output
 19141                                  typelp_ret:
 19142 00002160 C3                      	retn
 19143                                  
 19144                                  ; ---------------------------------------------------------------------------
 19145                                  
 19146                                  ; VOLUME command displays the volume ID on the specified drive
 19147                                  
 19148                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19149                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19150                                  	; 10/06/2023
 19151                                  VOLUME:
 19152                                  	; MSDOS 6.0
 19153 00002161 BE8100                  	mov	si,81h
 19154 00002164 BF[0798]                	mov	di,PARSE_VOL
 19155                                  				;AN000; Get address of PARSE_VOL
 19156 00002167 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 19157 00002169 31D2                    	xor	dx,dx		;AN000;
 19158 0000216B E89B05                  	call	Parse_With_Msg	;AC018; call parser
 19159                                  
 19160                                  	;cmp	ax,-1 ; 0FFFFh
 19161                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 19162                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 19163                                  	;;cmp	ax,RESULT_NO_ERROR
 19164                                  	;;cmp	ax,0		;AC000; did we have an error?
 19165                                  	;or	ax,ax ; 0?
 19166                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 19167                                  	; 10/06/2023
 19168 0000216E 40                      	inc	ax  ; cmp ax,-1
 19169 0000216F 7443                    	jz	short OkVolArg ; 0FFFFh -> 0
 19170 00002171 48                      	dec	ax  ; cmp ax,0
 19171 00002172 750A                    	jnz	short badvolarg ; 1 -> 0
 19172                                  	; ax = 0
 19173                                  
 19174                                  ; We have parsed off the drive. See if there are any more chars left
 19175                                  
 19176 00002174 BF[0798]                	mov	di,PARSE_VOL
 19177                                  				;AC000; get address of parse_vol
 19178 00002177 31D2                    	xor	dx,dx		;AC000;
 19179 00002179 E87705                  	call	parse_check_eol ;AC000; call parser
 19180 0000217C 7436                    	jz	short OkVolArg	;AC000; yes, end of road
 19181                                  
 19182                                  ; The line was not interpretable. Report an error.
 19183                                  
 19184                                  badvolarg:
 19185 0000217E E9210D                  	jmp	cerror
 19186                                  
 19187                                  ; ---------------------------------------------------------------------------
 19188                                  
 19189                                  ;***	DisAppend - disable APPEND
 19190                                  ;
 19191                                  ;	ENTRY	nothing
 19192                                  ;
 19193                                  ;	EXIT	nothing
 19194                                  ;
 19195                                  ;	USED	AX,BX
 19196                                  ;
 19197                                  ;	EFFECTS
 19198                                  ;
 19199                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 19200                                  ;	  after the command finishes, by the HeadFix routine.
 19201                                  ;
 19202                                  ;	NOTE
 19203                                  ;
 19204                                  ;	  This routine must not be called more than once during a single
 19205                                  ;	  command cycle. The second call would permanently disable APPEND.
 19206                                  
 19207                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19208                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 19209                                  	
 19210                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19211                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2289h
 19212                                  
 19213                                  	; MSDOS 6.0
 19214                                  DisAppend:
 19215 00002181 1E                      	push	ds			; save DS
 19216 00002182 06                      	push	es			; save ES
 19217 00002183 57                      	push	di
 19218                                  
 19219                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 19220 00002184 B800B7                  	mov	ax,0B700h
 19221 00002187 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19222 00002189 08C0                    	or	al,al
 19223 0000218B 7423                    	jz	short daRet		; APPEND not installed, return
 19224                                  
 19225                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 19226 0000218D B802B7                  	mov	ax,0B702h
 19227 00002190 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19228 00002192 83F8FF                  	cmp	ax,0FFFFh
 19229 00002195 7519                    	jne	short daRet		; it's not a local version, return
 19230                                  
 19231                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 19232 00002197 B806B7                  	mov	ax,0B706h
 19233 0000219A CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19234                                  
 19235 0000219C 8E1E[F39D]              	mov	ds,[RESSEG]		; DS = resident seg addr
 19236                                  
 19237 000021A0 891E[6002]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 19238 000021A4 C606[6202]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 19239                                  
 19240 000021A9 31DB                    	xor	bx,bx			; BX = APPEND state = off
 19241                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 19242 000021AB B807B7                  	mov	ax,0B707h
 19243 000021AE CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19244                                  daRet:	
 19245 000021B0 5F                      	pop	di
 19246 000021B1 07                      	pop	es			; restore ES
 19247 000021B2 1F                      	pop	ds			; restore DS
 19248                                  
 19249 000021B3 C3                      	retn
 19250                                  
 19251                                  ; ---------------------------------------------------------------------------
 19252                                  
 19253                                  ; Find the Volume ID on the disk.
 19254                                  
 19255                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19256                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19257                                  	
 19258                                  	; MSDOS 6.0
 19259                                  OkVolArg:
 19260 000021B4 E8CAFF                  	call	DisAppend		; disable APPEND
 19261 000021B7 E86709                  	call	CRLF2
 19262                                  	;mov	al,blank			
 19263 000021BA B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 19264 000021BC E88E01                  	call	PRINT_CHAR		;AN051;  before volume message
 19265 000021BF 1E                      	push	ds
 19266 000021C0 07                      	pop	es
 19267                                  
 19268                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 19269                                  ; of volume_id ONLY.
 19270                                  
 19271 000021C1 BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 19272 000021C4 B0FF                    	mov	al,-1 ; 0FFh		; Tag to indicate Extention
 19273 000021C6 AA                      	stosb
 19274 000021C7 31C0                    	xor	ax,ax			; Zero padding to volume label
 19275 000021C9 AB                      	stosw
 19276 000021CA AB                      	stosw
 19277 000021CB AA                      	stosb
 19278 000021CC B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 19279 000021CE AA                      	stosb
 19280 000021CF 47                      	inc	di			; Skip drive byte; it is already set
 19281 000021D0 B90B00                  	mov	cx,11			; fill in remainder of file
 19282 000021D3 B03F                    	mov	al,'?'
 19283 000021D5 F3AA                    	rep	stosb
 19284                                  
 19285                                  ; Set up transfer address (destination of search first information)
 19286                                  
 19287 000021D7 BA[2AA0]                	mov	dx,DIRBUF
 19288                                  	;mov	ah,Set_DMA
 19289 000021DA B41A                    	mov	ah,1Ah
 19290 000021DC CD21                    	int	21h
 19291                                  
 19292                                  ; Do the search
 19293                                  
 19294 000021DE BA5500                  	mov	dx,FCB-7 ; 55h
 19295                                  	;mov	ah,Dir_Search_First
 19296 000021E1 B411                    	mov	ah,11h
 19297 000021E3 CD21                    	int	21h
 19298                                  
 19299                                  ;********************************
 19300                                  ; Print volume ID info
 19301                                  
 19302 000021E5 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 19303 000021E6 A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 19304 000021E9 0440                    	add	al,'@'  ; add al,40h
 19305 000021EB 3C40                    	cmp	al,'@'
 19306 000021ED 7505                    	jne	short drvok
 19307 000021EF A0[059E]                	mov	al,[CURDRV]
 19308                                  	;add	al,capital_A
 19309 000021F2 0441                    	add	al,'A'
 19310                                  drvok:
 19311 000021F4 A2[A4A0]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 19312 000021F7 58                      	pop	ax			;AC000; get return code back
 19313 000021F8 08C0                    	or	al,al			;AC000; volume label found?
 19314 000021FA 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 19315 000021FC BA[CB92]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 19316 000021FF EB13                    	jmp	short print_serial	;AC000; go print it
 19317                                  
 19318                                  Get_vol_name:
 19319 00002201 BF[5B9F]                	mov	di,CHARBUF
 19320 00002204 89FA                    	mov	dx,di
 19321 00002206 BE[32A0]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 19322 00002209 B90B00                  	mov	cx,11			;AN000;  3/3/KK
 19323 0000220C F3A4                    	rep	movsb			;AN000;  3/3/KK
 19324                                  
 19325 0000220E 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 19326 00002210 AA                      	stosb
 19327 00002211 BA[D992]                	mov	dx,VolMes_Ptr		;AC000; set up message
 19328                                  
 19329                                  print_serial:
 19330                                  
 19331                                  ; Attempt to get the volume serial number from the disk. If an error
 19332                                  ; occurs, do not print volume serial number.
 19333                                  
 19334 00002214 52                      	push	dx			;AN000; save message offset
 19335                                  	;mov	ax,(GetSetMediaID SHL 8)
 19336 00002215 B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 19337 00002218 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 19338 0000221C BA[0AA2]                	mov	dx,vol_ioctl_buf	;AN000;target buffer
 19339 0000221F CD21                    	int	21h			;AN000; do the call
 19340                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 19341                                  			; AL = 00h get serial number / 01h set serial number
 19342                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 19343                                  			; DS:DX -> disk info
 19344 00002221 5A                      	pop	dx			;AN000; get message offset back
 19345 00002222 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 19346 00002224 E8E832                  	call	std_printf		;AC000; go print volume message
 19347                                  	;mov	al,blank				
 19348 00002227 B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 19349 00002229 E82101                  	call	PRINT_CHAR		;AN051;  before volume message
 19350 0000222C BA[F292]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 19351                                  printvol_end:
 19352 0000222F E9DD32                  	jmp	std_printf		;AC000; go print and exit
 19353                                  
 19354                                  ; ---------------------------------------------------------------------------
 19355                                  
 19356                                  ;****************************************************************
 19357                                  ;*
 19358                                  ;* ROUTINE:	Set_ext_error_msg
 19359                                  ;*
 19360                                  ;* FUNCTION:	Sets up extended error message for printing
 19361                                  ;*
 19362                                  ;* INPUT:	return from INT 21
 19363                                  ;*
 19364                                  ;* OUTPUT:	extended error message set up in extended error
 19365                                  ;*		buffer.
 19366                                  ;*
 19367                                  ;****************************************************************
 19368                                  	
 19369                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19370                                  
 19371                                  	; MSDOS 6.0
 19372                                  Set_Ext_Error_Msg:			;AN000;
 19373 00002232 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 19374 00002235 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 19375                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 19376 0000223A BA[D091]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 19377 0000223D A3[D091]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 19378 00002240 F9                      	stc				;AN000; make sure carry is set
 19379 00002241 C3                      	retn				;AN000; return
 19380                                  
 19381                                  ; ---------------------------------------------------------------------------
 19382                                  
 19383                                  ;****************************************************************
 19384                                  ;*
 19385                                  ;* ROUTINE:	Get_ext_error_number
 19386                                  ;*
 19387                                  ;* FUNCTION:	Does get extended error function call
 19388                                  ;*
 19389                                  ;* INPUT:	return from INT 21
 19390                                  ;*
 19391                                  ;* OUTPUT:	AX - extended error number
 19392                                  ;*
 19393                                  ;****************************************************************
 19394                                  
 19395                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19396                                  
 19397                                  	; MSDOS 6.0
 19398                                  get_ext_error_number:			;AN022;
 19399                                  
 19400                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 19401                                  					;AN022; save registers
 19402 00002242 53                      	push	bx
 19403 00002243 51                      	push	cx
 19404 00002244 52                      	push	dx
 19405 00002245 56                      	push	si
 19406 00002246 57                      	push	di
 19407 00002247 55                      	push	bp
 19408 00002248 06                      	push	es
 19409 00002249 1E                      	push	ds
 19410                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 19411 0000224A B459                    	mov	ah,59h
 19412 0000224C 31DB                    	xor	bx,bx			;AN022; clear BX
 19413 0000224E CD21                    	int	21h			;AN022;
 19414                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 19415                                  			; BX = version code (0000h for DOS 3.x)
 19416                                  
 19417                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 19418                                  					;AN022; restore registers
 19419 00002250 1F                      	pop	ds
 19420 00002251 07                      	pop	es
 19421 00002252 5D                      	pop	bp
 19422 00002253 5F                      	pop	di
 19423 00002254 5E                      	pop	si
 19424 00002255 5A                      	pop	dx
 19425 00002256 59                      	pop	cx
 19426 00002257 5B                      	pop	bx
 19427                                  
 19428 00002258 C3                      	retn				;AN022; return
 19429                                  
 19430                                  ;============================================================================
 19431                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 19432                                  ;============================================================================
 19433                                  ; 08/10/2018 - Retro DOS v3.0
 19434                                  
 19435                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 19436                                  
 19437                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 19438                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 19439                                  
 19440                                  ; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19441                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 2361h
 19442                                  
 19443                                  ; ---------------------------------------------------------------------------
 19444                                  
 19445                                  ; MSDOS 6.0
 19446                                  ;***	Version - display DOS version
 19447                                  ;
 19448                                  ;	SYNTAX	ver [/debug]
 19449                                  ;
 19450                                  ;		/debug - display additional DOS configuration info
 19451                                  ;
 19452                                  ;	ENTRY	command-line tail is in PSP
 19453                                  ;
 19454                                  ;	EXIT	if successful, nothing
 19455                                  ;		if parse fails,
 19456                                  ;		  parse error message is set up (for Std_EPrintf)
 19457                                  ;		    AX = system parser error code
 19458                                  ;		    DX = ptr to message block
 19459                                  ;		  we jump to CError
 19460                                  ;
 19461                                  ;	EFFECTS
 19462                                  ;	  If parse fails, a parse error message is displayed.
 19463                                  ;	  Otherwise, version message is displayed.
 19464                                  ;	  If /debug is specified, additional DOS info is displayed.
 19465                                  
 19466                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19467                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19468                                  VERSION:
 19469                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 19470                                  
 19471                                  ;	Parse command line for /debug switch.
 19472                                  
 19473 00002259 BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 19474 0000225C BF[CA98]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 19475 0000225F 31C9                    	xor	cx,cx			; CX = # positional param's found
 19476 00002261 E8A504                  	call	Parse_With_Msg
 19477                                  
 19478 00002264 B301                    	mov	bl,1			; BL = flag = /debug present
 19479                                  	;cmp	ax,RESULT_NO_ERROR
 19480                                  	;cmp	ax,0
 19481                                  	;je	short verPrintVer	; something parsed - must be /debug
 19482 00002266 09C0                    	or	ax,ax
 19483 00002268 740A                    	jz	short verPrintVer 
 19484 0000226A FECB                    	dec	bl			; BL = flag = no /debug present
 19485                                  	;cmp	ax,END_OF_LINE ; -1
 19486 0000226C 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 19487                                  
 19488                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 19489                                  %if 0
 19490                                  	je	short verPrintVer	; reached end of line - ok
 19491                                  %else
 19492 0000226F 7414                    	je	short not_truever_sw
 19493                                  %endif
 19494                                  
 19495                                  ;	The parse failed. Error message has been set up.
 19496                                  
 19497 00002271 E92E0C                  	jmp	cerror
 19498                                  
 19499                                  verPrintVer:
 19500                                  
 19501                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 19502                                  %if 1
 19503                                  check_t_switch:
 19504 00002274 813E[E3A9][EA98]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 19505 0000227A 7509                    	jne	short not_truever_sw
 19506 0000227C BA[0E99]                	mov	dx,RD4CMD_VER_MSG
 19507 0000227F B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 19508 00002281 CD21                    	int	21h
 19509 00002283 EB43                    	jmp	short verDone
 19510                                  not_truever_sw:
 19511                                  %endif
 19512 00002285 53                      	push	bx			; save /debug flag
 19513 00002286 E89808                  	call	CRLF2
 19514 00002289 E83F00                  	call	PRINT_VERSION
 19515 0000228C E89208                  	call	CRLF2
 19516 0000228F 5B                      	pop	bx   			; BL = /debug flag
 19517 00002290 08DB                    	or	bl,bl
 19518 00002292 7434                    	jz	short verDone		; /debug is false - we're done
 19519                                  
 19520                                  ;*	For /debug, display DOS internal revision and DOS location
 19521                                  ;	(low memory, HMA, or ROM).
 19522                                  
 19523                                  ;	Bugbug:	use symbols for bitmasks below.
 19524                                  
 19525                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 19526 00002294 B80633                  	mov	ax,3306h
 19527 00002297 CD21                    	int	21h
 19528                                  		; DOS - 5+ Get TRUE Version Number
 19529                                  		; (BL major, BH minor, DL revision, DH flags)
 19530 00002299 88D0                    	mov	al,dl			;revision number in dl; M013
 19531 0000229B 88F7                    	mov	bh,dh			;flags in dh now; M013
 19532                                  ;M032	and	al,7			; AL = DOS internal revision
 19533 0000229D 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 19534                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 19535 0000229F 7602                    	jbe	short ver1
 19536 000022A1 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 19537                                  ;@@:
 19538                                  ver1:
 19539 000022A3 0441                    	add	al,'A' ; 41h		; AL = DOS internal rev letter
 19540 000022A5 A2[A2A0]                	mov	[One_Char_Val],al
 19541 000022A8 BA[2994]                	mov	dx,dosrev_ptr
 19542 000022AB E86132                  	call	std_printf		; print DOS internal revision
 19543                                  
 19544 000022AE B104                    	mov	cl,4
 19545 000022B0 D2EF                    	shr	bh,cl			; CY = DOS in ROM
 19546 000022B2 7209                    	jc	short verRom
 19547 000022B4 D0EF                    	shr	bh,1			; CY = DOS in HMA
 19548 000022B6 720A                    	jc	short verHma
 19549                                  
 19550                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 19551                                  
 19552                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 19553 000022B8 BA[3D94]                	mov	dx,DosLow_Ptr
 19554 000022BB EB08                    	jmp	short verPrintLoc
 19555                                  verRom: 
 19556                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 19557 000022BD BA[3794]                	mov	dx,DosRom_Ptr
 19558 000022C0 EB03                    	jmp	short verPrintLoc
 19559                                  verHma: 
 19560                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 19561 000022C2 BA[3A94]                	mov	dx,DosHma_Ptr
 19562                                  verPrintLoc:
 19563 000022C5 E84732                  	call	std_printf
 19564                                  verDone:
 19565 000022C8 E95608                  	jmp	CRLF2
 19566                                  
 19567                                  ; 21/02/2023
 19568                                  ;	; MSDOS 3.3
 19569                                  ;VERSION:
 19570                                  ;	call	CRLF2
 19571                                  ;	call	PRINT_VERSION
 19572                                  ;	jmp	CRLF2
 19573                                  
 19574                                  ; =============== S U B	R O U T	I N E =======================================
 19575                                  
 19576                                  	; 21/02/2023 - Retro DOS v4.0
 19577                                  PRINT_VERSION:
 19578                                  	;mov	ah,GET_VERSION ; 30h
 19579 000022CB B430                    	mov	ah,30h
 19580 000022CD CD21                    	int	21h	; DOS -	GET DOS	VERSION
 19581                                  			; Return: AL = major version number (00h for DOS 1.x)
 19582 000022CF 50                      	push	ax
 19583 000022D0 30E4                    	xor	ah,ah
 19584 000022D2 A3[9EA0]                	mov	[Major_Ver_Num],ax
 19585 000022D5 58                      	pop	ax
 19586 000022D6 86E0                    	xchg	ah,al
 19587 000022D8 30E4                    	xor	ah,ah
 19588 000022DA A3[A0A0]                	mov	[Minor_Ver_Num],ax
 19589 000022DD BA[B292]                	mov	dx,VerMes_Ptr
 19590 000022E0 E92C32                  	jmp	std_printf
 19591                                  
 19592                                  ; =============== S U B	R O U T	I N E =======================================
 19593                                  
 19594                                  	; 21/02/2023 - Retro DOS v4.0
 19595                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19596                                  PRINT_PROMPT:
 19597 000022E3 1E                      	push	ds
 19598 000022E4 0E                      	push	cs
 19599 000022E5 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 19600 000022E6 06                      	push	es
 19601 000022E7 E87805                  	call	find_prompt	; Look for prompt string
 19602 000022EA 7206                    	jc	short PP0	; Can't find one
 19603 000022EC 26803D00                	cmp	byte [es:di],0
 19604 000022F0 7524                    	jnz	short PP1
 19605                                  PP0:				; Use default prompt
 19606 000022F2 E86700                  	call	PRINT_DRIVE
 19607 000022F5 B03E                    	mov	al,'>'
 19608                                  	;mov	al,SYM
 19609 000022F7 E85300                  	call	PRINT_CHAR
 19610 000022FA EB36                    	jmp	short PP5
 19611                                  ;PP1:
 19612                                  ;	mov	al,[es:di]	; Get a char
 19613                                  ;	inc	di
 19614                                  ;	or	al,al
 19615                                  ;	jz	short PP5	; Nul terminated
 19616                                  ;	; 21/02/2023
 19617                                  ;	cmp	al,'$' ; 24h
 19618                                  ;	;cmp	al,[DOLLAR]	; Meta character
 19619                                  ;	jz	short PP2	; Nope
 19620                                  ;	call	PRINT_CHAR
 19621                                  ;	jmp	short PP1
 19622                                  PP2:
 19623 000022FC 268A05                  	mov	al,[es:di]
 19624 000022FF 47                      	inc	di
 19625                                  	;mov	bx,CLSSTRING+2	; "[2J"
 19626 00002300 BB[9895]                	mov	bx,PROMPT_TABLE-3
 19627 00002303 08C0                    	or	al,al
 19628 00002305 742B                    	jz	short PP5
 19629                                  PP3:
 19630 00002307 83C303                  	add	bx,3
 19631                                  	; 21/02/2023
 19632 0000230A E82C06                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 19633                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 19634 0000230D 3A07                    	cmp	al,[bx]
 19635 0000230F 7416                    	jz	short PP4
 19636 00002311 803F00                  	cmp	byte [bx],0
 19637 00002314 75F1                    	jnz	short PP3
 19638                                  	;jmp	short PP1
 19639                                  	; 21/02/2023
 19640                                  PP1:
 19641 00002316 268A05                  	mov	al,[es:di]	; Get a char
 19642 00002319 47                      	inc	di
 19643 0000231A 08C0                    	or	al,al
 19644 0000231C 7414                    	jz	short PP5	; Nul terminated
 19645                                  	; 21/02/2023
 19646 0000231E 3C24                    	cmp	al,'$' ; 24h
 19647                                  	;cmp	al,[DOLLAR]	; Meta character
 19648 00002320 74DA                    	jz	short PP2	; Nope
 19649 00002322 E82800                  	call	PRINT_CHAR
 19650 00002325 EBEF                    	jmp	short PP1
 19651                                  PP4:
 19652 00002327 06                      	push	es
 19653 00002328 57                      	push	di
 19654 00002329 0E                      	push	cs
 19655 0000232A 07                      	pop	es
 19656 0000232B FF5701                  	call	word [bx+1]
 19657 0000232E 5F                      	pop	di
 19658 0000232F 07                      	pop	es
 19659 00002330 EBE4                    	jmp	short PP1
 19660                                  PP5:
 19661 00002332 07                      	pop	es		; Restore segments
 19662 00002333 1F                      	pop	ds
 19663 00002334 C3                      	retn
 19664                                  
 19665                                  ; ---------------------------------------------------------------------------
 19666                                  
 19667                                  PRINT_BACK:
 19668                                  	; 21/02/2023
 19669 00002335 BA[AF93]                	mov	dx,dback_ptr
 19670 00002338 E9D431                  	jmp	std_printf
 19671                                  
 19672                                  ; ---------------------------------------------------------------------------
 19673                                  
 19674                                  PRINT_EQ:
 19675 0000233B B03D                    	mov	al,'='
 19676 0000233D EB0E                    	jmp	short PRINT_CHAR
 19677                                  
 19678                                  ; ---------------------------------------------------------------------------
 19679                                  
 19680                                  PRINT_ESC:
 19681 0000233F B01B                    	mov	al,1Bh
 19682 00002341 EB0A                    	jmp	short PRINT_CHAR
 19683                                  
 19684                                  ; ---------------------------------------------------------------------------
 19685                                  
 19686                                  	; 21/02/2023
 19687                                  PRINT_G:
 19688                                  	;mov	al,[RABRACKET]
 19689 00002343 B03E                    	mov	al,'>' ; 3Eh
 19690 00002345 EB06                    	jmp	short PRINT_CHAR
 19691                                  
 19692                                  ; ---------------------------------------------------------------------------
 19693                                  
 19694                                  	; 21/02/2023
 19695                                  PRINT_L:
 19696                                  	;mov	al,[LABRACKET]
 19697 00002347 B03C                    	mov	al,'<' ; 3Ch
 19698 00002349 EB02                    	jmp	short PRINT_CHAR
 19699                                  
 19700                                  ; ---------------------------------------------------------------------------
 19701                                  
 19702                                  	; 21/02/2023
 19703                                  Print_B:
 19704                                  	;mov	al,[VBAR]
 19705 0000234B B07C                    	mov	al,'|' ; 7Ch
 19706                                  
 19707                                  ; =============== S U B	R O U T	I N E =======================================
 19708                                  
 19709                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19710                                  PRINT_CHAR:
 19711                                  	; MSDOS 6.0
 19712                                  
 19713                                  ;	Bugbug:	Why bother with ds,es here?
 19714                                  		
 19715 0000234D 06                      	push	es
 19716 0000234E 1E                      	push	ds
 19717 0000234F 07                      	pop	es
 19718 00002350 57                      	push	di
 19719 00002351 52                      	push	dx
 19720 00002352 88C2                    	mov	dl,al		;AC000; Get char into al
 19721                                  	;mov	ah,STD_CON_OUTPUT
 19722                                  				;AC000; print the char to stdout
 19723 00002354 B402                    	mov	ah,2
 19724 00002356 CD21                    	int	21h		;AC000;
 19725 00002358 5A                      	pop	dx
 19726 00002359 5F                      	pop	di
 19727 0000235A 07                      	pop	es
 19728 0000235B C3                      	retn
 19729                                  
 19730                                  ; ---------------------------------------------------------------------------
 19731                                  
 19732                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19733                                  PRINT_DRIVE:
 19734                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 19735 0000235C B419                    	mov	ah,19h
 19736 0000235E CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 19737 00002360 0441                    	add	al,'A'
 19738                                  	;add	al,[CAPITAL_A]
 19739                                  	;call	PRINT_CHAR
 19740                                  	;retn
 19741                                  	; 21/02/2023
 19742 00002362 EBE9                    	jmp	short PRINT_CHAR
 19743                                  
 19744                                  ; ---------------------------------------------------------------------------
 19745                                  
 19746                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19747                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 19748                                  
 19749                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19750                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2460h
 19751                                  
 19752                                  build_dir_for_prompt:
 19753 00002364 30D2                    	xor	dl,dl
 19754 00002366 BE[2AA0]                	mov	si,BWDBUF
 19755 00002369 89F7                    	mov	di,si
 19756 0000236B A0[059E]                	mov	al,[CURDRV]
 19757 0000236E 0441                    	add	al,'A'
 19758 00002370 B43A                    	mov	ah,':'
 19759 00002372 AB                      	stosw
 19760 00002373 A0[F89D]                	mov	al,[DIRCHAR]
 19761 00002376 AA                      	stosb
 19762 00002377 87F7                    	xchg	si,di
 19763 00002379 893E[91A0]              	mov	[string_ptr_2],di
 19764                                  	;mov	ah,CURRENT_DIR ; 47h
 19765 0000237D B447                    	mov	ah,47h
 19766 0000237F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 19767                                  			; DL = drive (0=default,1=A,etc.)
 19768                                  			; DS:SI	points to 64-byte buffer area
 19769                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 19770 00002381 BA[9793]                	mov	dx,string_buf_ptr
 19771 00002384 7303                    	jnc	short doprint
 19772                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 19773 00002386 BA[5F92]                	mov	dx,BADCURDRV
 19774                                  doprint:
 19775                                  	;call	std_printf
 19776                                  	;retn
 19777 00002389 E98331                  	jmp	std_printf
 19778                                  
 19779                                  ; =============== S U B	R O U T	I N E =======================================
 19780                                  
 19781                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19782                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 19783                                  
 19784                                  build_dir_for_chdir:
 19785 0000238C E80D00                  	call	build_dir_string
 19786 0000238F BA[2AA0]                	mov	dx,DIRBUF
 19787 00002392 8916[91A0]              	mov	[string_ptr_2],dx
 19788                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 19789                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 19790 00002396 BA[9793]                	mov	dx,string_buf_ptr
 19791                                  	;call	std_printf
 19792                                  	;retn
 19793                                  	; 21/02/2023
 19794                                  	;jmp	short doprint
 19795 00002399 E97331                  	jmp	std_printf
 19796                                  
 19797                                  ; =============== S U B	R O U T	I N E =======================================
 19798                                  
 19799                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19800                                  build_dir_string:
 19801 0000239C 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 19802 000023A0 88D0                    	mov	al,dl
 19803 000023A2 0440                    	add	al,'@'	; 40h
 19804 000023A4 3C40                    	cmp	al,'@'
 19805 000023A6 7506                    	jne	short gotdrive
 19806 000023A8 0206[059E]              	add	al,[CURDRV]
 19807 000023AC FEC0                    	inc	al
 19808                                  gotdrive:
 19809 000023AE 50                      	push	ax
 19810 000023AF BE[2DA0]                	mov	si,BWDBUF+3
 19811                                  	;mov	ah,CURRENT_DIR ; 47h
 19812 000023B2 B447                    	mov	ah,47h
 19813 000023B4 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 19814                                  			; DL = drive (0=default,1=A,etc.)
 19815                                  			; DS:SI	points to 64-byte buffer area
 19816 000023B6 7305                    	jnc	short dpbisok
 19817 000023B8 0E                      	push	cs
 19818 000023B9 1F                      	pop	ds
 19819 000023BA E9ED09                  	jmp	DRVBAD
 19820                                  dpbisok:
 19821 000023BD BF[2AA0]                	mov	di,BWDBUF
 19822 000023C0 89FA                    	mov	dx,di
 19823 000023C2 58                      	pop	ax
 19824 000023C3 B43A                    	mov	ah,':'
 19825 000023C5 AB                      	stosw
 19826 000023C6 A0[F89D]                	mov	al,[DIRCHAR]
 19827 000023C9 AA                      	stosb
 19828 000023CA C3                      	retn
 19829                                  
 19830                                  ; ---------------------------------------------------------------------------
 19831                                  
 19832                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19833                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 19834                                  
 19835                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19836                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:24C9h
 19837                                  PATH:
 19838                                  	; MSDOS 6.0
 19839 000023CB 30C0                    	xor	al,al			;AN049; Set up holding buffer
 19840 000023CD BF[219B]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 19841 000023D0 AA                      	stosb				;AN049; Initialize PATH to null
 19842 000023D1 4F                      	dec	di			;AN049; point to the start of buffer
 19843 000023D2 E8DE0C                  	call	PGETARG 		; Pre scan for arguments
 19844 000023D5 7460                    	jz	short disppath		; Print the current path
 19845                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 19846 000023D7 3C3B                    	cmp	al,';' ; 3Bh
 19847 000023D9 7503                    	jne	short pathslp 		;AC049;
 19848 000023DB 46                      	inc	si			;AN049; point past semicolon
 19849 000023DC EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 19850                                  pathslp:					; Get the user specified path
 19851 000023DE AC                      	lodsb				; Get a character
 19852 000023DF 3C0D                    	cmp	al,0Dh
 19853                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 19854 000023E1 7434                    	je	short path_eol		;AC049; yes - end of command
 19855 000023E3 E82905                  	call	testkanj		;See if DBCS
 19856 000023E6 7405                    	jz	short notkanj2		;No - continue
 19857 000023E8 AA                      	stosb				;AC049; Yes - store the first byte
 19858 000023E9 AC                      	lodsb				;skip second byte of DBCS
 19859                                  path_hold:				;AN049;
 19860 000023EA AA                      	stosb				;AC049; Store a byte in the PATH buffer
 19861 000023EB EBF1                    	jmp	short pathslp		;continue parsing
 19862                                  notkanj2:
 19863 000023ED E84905                  	call	UPCONV			;upper case the character
 19864                                  
 19865 000023F0 3C3B                    	cmp	al,';' ; 3Bh
 19866                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 19867 000023F2 74F6                    	je	short path_hold		;AC049; go store it
 19868 000023F4 E83F07                  	call	DELIM			;delimiter?
 19869 000023F7 75F1                    	jnz	short path_hold		;AC049; no - go store character
 19870                                  scan_white:				;AN049; make sure were at EOL
 19871 000023F9 AC                      	lodsb				;AN049; get a character
 19872 000023FA 3C0D                    	cmp	al,0Dh
 19873                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 19874 000023FC 7419                    	je	short path_eol		;AN049; yes - go set path
 19875 000023FE 3C20                    	cmp	al,' ' ; 20h
 19876                                  	;cmp	al,blank		;AN049; whitespace?
 19877 00002400 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 19878                                  	;cmp	al,9
 19879 00002402 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 19880 00002404 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 19881                                  
 19882 00002406 BA[D091]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 19883                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 19884 00002409 C706[D091]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 19885                                  	;mov	byte [msg_disp_class],2		
 19886                                  					;AN049; set up parse error msg class
 19887 0000240F C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 19888 00002414 E98B0A                  	jmp	cerror			;AN049;
 19889                                  path_eol:				;AN049; Parsing was clean
 19890 00002417 30C0                    	xor	al,al			;AN049; null terminate the PATH
 19891 00002419 AA                      	stosb				;AN049;    buffer
 19892 0000241A E84004                  	call	find_path		;AN049; Find PATH in environment
 19893 0000241D E81404                  	call	delete_path		;AC049; Delete any offending name
 19894 00002420 E8CA04                  	call	scan_double_null	;AC049; Scan to end of environment
 19895 00002423 E89A04                  	call	move_name		;AC049; move in PATH=
 19896 00002426 BE[219B]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 19897                                  store_path:				;AN049; Store the PATH in the environment
 19898 00002429 AC                      	lodsb				;AN049; Get a character
 19899                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 19900 0000242A 20C0                    	and	al,al ; al=0 ?
 19901 0000242C 7405                    	jz	short got_paths		;AN049; yes - exit
 19902 0000242E E82A05                  	call	store_char		;AN049; no - store character
 19903 00002431 EBF6                    	jmp	short store_path	;AN049; continue
 19904                                  got_paths:				;AN049; we're finished
 19905 00002433 31C0                    	xor	ax,ax			;	null terminate the PATH in
 19906 00002435 AB                      	stosw				;    	the environment
 19907 00002436 C3                      	retn
 19908                                  disppath:
 19909 00002437 E82304                  	call	find_path		;AN049;
 19910 0000243A E80300                  	call	print_path
 19911                                  	;call	CRLF2
 19912                                  	;retn
 19913                                  	; 21/02/2023
 19914 0000243D E9E106                  	jmp	CRLF2
 19915                                  
 19916                                  ; =============== S U B	R O U T	I N E =======================================
 19917                                  
 19918                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19919                                  print_path:
 19920 00002440 26803D00                	cmp	byte [es:di],0
 19921 00002444 750A                    	jnz	short path1
 19922                                  path0:
 19923 00002446 BA[2593]                	mov	dx,NULLPATH_PTR
 19924 00002449 0E                      	push	cs
 19925 0000244A 07                      	pop	es
 19926 0000244B 0E                      	push	cs
 19927 0000244C 1F                      	pop	ds
 19928 0000244D E9BF30                  	jmp	std_printf
 19929                                  path1:
 19930 00002450 06                      	push	es
 19931 00002451 1F                      	pop	ds
 19932 00002452 83EF05                  	sub	di,5
 19933 00002455 89FE                    	mov	si,di
 19934 00002457 E8AD04                  	call	SCASB2		; Look for null
 19935                                  	;cmp	cx,0FFh ; 255
 19936                                  	; 21/02/2023
 19937                                  	;ch = 0
 19938 0000245A 80F9FF                  	cmp	cl,255
 19939 0000245D 74E7                    	je	short path0
 19940 0000245F 0E                      	push	cs
 19941 00002460 07                      	pop	es
 19942 00002461 BF[87A7]                	mov	di,Arg_Buf
 19943                                  	;mov	dx,100h ; 256
 19944                                  	;sub	dx,cx
 19945                                  	;xchg	dx,cx
 19946                                  	; 21/02/2023
 19947 00002464 F6D9                    	neg	cl ; 256-cl
 19948 00002466 F3A4                    	rep	movsb
 19949 00002468 BA[6D93]                	mov	dx,arg_buf_ptr
 19950 0000246B 0E                      	push	cs
 19951 0000246C 1F                      	pop	ds
 19952 0000246D E99F30                  	jmp	std_printf
 19953                                  
 19954                                  ; ---------------------------------------------------------------------------
 19955                                  
 19956                                  ; ****************************************************************
 19957                                  ; *
 19958                                  ; * ROUTINE:	 CLS
 19959                                  ; *
 19960                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 19961                                  ; *		 installed, send a control string to clear the
 19962                                  ; *		 screen.
 19963                                  ; *
 19964                                  ; * INPUT:	 command line at offset 81H
 19965                                  ; *
 19966                                  ; * OUTPUT:	 none
 19967                                  ; *
 19968                                  ; ****************************************************************
 19969                                  
 19970                                  	; MSDOS 6.0
 19971                                  
 19972                                  ANSI_installed	equ 0FFh
 19973                                  
 19974                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19975                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19976                                  CLS:
 19977                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 19978                                  	;mov	ah,1Ah
 19979                                  	;mov	al,0			;AN000;
 19980 00002470 B8001A                  	mov	ax,1A00h
 19981 00002473 CD2F                    	int	2Fh			;AN000;
 19982                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 19983                                  		; Return: AL = FFh if installed
 19984 00002475 3CFF                    	cmp	al,ANSI_installed	;AN000;
 19985 00002477 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 19986                                  
 19987                                  check_lines:
 19988                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 19989 00002479 B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 19990                                  	;mov	bx,stdout		;AN000; lines for stdout
 19991 0000247C BB0100                  	mov	bx,1   ; handle
 19992                                  	;;mov	ch,ioc_sc		;AN000; type is display
 19993                                  	;mov	ch,3   ; CON device	
 19994                                  	;;mov	cl,get_generic		;AN000; get information
 19995                                  	;mov	cl,7Fh ; minor function, get display info
 19996                                  	; 25/04/2023
 19997 0000247F B97F03                  	mov	cx,037Fh
 19998 00002482 BA[F8A1]                	mov	dx,Display_Ioctl	;AN000;
 19999 00002485 CD21                    	int	21h			;AN000;
 20000 00002487 720A                    	jc	short no_variable	;AN000; function had error, use default
 20001                                  		; 21/02/2023
 20002                                  		; ds:dx = parameter block
 20003                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 20004                                  		; offset 00h  byte  level (0 for DOS 4.0)
 20005                                  		;   	 01h  byte  reserved
 20006                                  		;   	 02h  word  length of following data
 20007                                  		;   	 04h  word  control flags
 20008                                  		;	       bit 0 set for blink, clear for intensity
 20009                                  		;	       bits 1 to 15 reserved
 20010                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 20011                                  		;   	 07h  byte  reserved
 20012                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 20013                                  		;   	 0Ah  word  pixel columns
 20014                                  		;   	 0Ch  word  pixel rows
 20015                                  		;   	 0Eh  word  character columns
 20016                                  		;   	 10h  word  character rows
 20017                                  	
 20018                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 20019                                  	;				;AN000; get number of rows returned
 20020                                  	;mov	dh,al			;AN000; set number of rows
 20021                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 20022                                  	;				;AN000; get number of columns returned
 20023                                  	;mov	dl,al			;AN000; set number of columns
 20024                                  	; 21/02/2023
 20025 00002489 8A16[06A2]              	mov	dl,[display_width]
 20026 0000248D 8A36[08A2]              	mov	dh,[LinPerPag]
 20027 00002491 EB3B                    	jmp	short regcls		;AN000; go do cls
 20028                                  
 20029                                  no_variable:
 20030                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 20031                                  	;mov	bx,1
 20032                                  	; bx = 1
 20033                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 20034 00002493 B80044                  	mov	ax,4400h
 20035 00002496 CD21                    	int	21h			;AC000;
 20036 00002498 F6C280                  	test	dl,80h
 20037                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 20038 0000249B 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 20039 0000249D F6C210                  	test	dl,10h
 20040                                  	;test	dl,devid_SPECIAL	;AC000;
 20041 000024A0 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 20042                                  
 20043                                  ansicls:
 20044 000024A2 E85200                  	call	ansi_cls		;AN000; clear the screen
 20045 000024A5 EB2C                    	jmp	short cls_ret		;AN000; exit
 20046                                  
 20047                                  ; Get video mode
 20048                                  
 20049                                  cls_normal:				;AC000;
 20050                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 20051 000024A7 B40F                    	mov	ah,0Fh
 20052                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 20053 000024A9 CD10                    	int	10h
 20054 000024AB 3C03                    	cmp	al,3
 20055                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 20056 000024AD 760A                    	jbe	short DoAlpha
 20057 000024AF 3C07                    	cmp	al,7
 20058                                  	;cmp	al,video_bw		;AC000; see if black & white card
 20059 000024B1 7406                    	je	short DoAlpha
 20060                                  
 20061                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 20062                                  ; be just as bogus and set the mode that we just got. This will blank the
 20063                                  ; screen too.
 20064                                  
 20065                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 20066 000024B3 B400                    	mov	ah,0
 20067                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 20068 000024B5 CD10                    	int	10h
 20069 000024B7 EB1A                    	jmp	short cls_ret		;AC000; exit
 20070                                  
 20071                                  DoAlpha:
 20072                                  
 20073                                  ; Get video mode and number of columns to scroll
 20074                                  
 20075                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 20076                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 20077                                  ;M01   area
 20078                                  ;M01   Commented out code here is the original
 20079                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 20080                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 20081                                  ;M01	mov	dl,ah
 20082                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 20083                                  
 20084                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 20085                                  
 20086 000024B9 1E                      	push	ds
 20087                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 20088 000024BA B84000                  	mov	ax,40h
 20089 000024BD 8ED8                    	mov	ds,ax			;  *			M01
 20090                                  
 20091                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 20092 000024BF 8A164A00                	mov	dl,[4Ah]
 20093                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 20094 000024C3 8A368400                	mov	dh,[84h]
 20095 000024C7 1F                      	pop	ds			;			M01
 20096                                  
 20097 000024C8 08F6                    	or	dh,dh			; Q:ZERO		M01
 20098 000024CA 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 20099                                  
 20100                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 20101                                  	; 25/04/2023
 20102 000024CC B619                    	mov	dh,25
 20103                                  regcls:
 20104 000024CE FEC6                    	inc	dh			; height+1		M018
 20105 000024D0 E80100                  	call	reg_cls 		; go clear the screen
 20106                                  cls_ret:
 20107 000024D3 C3                      	retn				; exit
 20108                                  
 20109                                  ; ---------------------------------------------------------------------------
 20110                                  
 20111                                  ; MSDOS 6.0
 20112                                  
 20113                                  ; ****************************************************************
 20114                                  ; *
 20115                                  ; * ROUTINE:	 REG_CLS
 20116                                  ; *
 20117                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 20118                                  ; *
 20119                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 20120                                  ; *		 DH = NUMBER OF ROWS
 20121                                  ; *
 20122                                  ; * OUTPUT:	 none
 20123                                  ; *
 20124                                  ; ****************************************************************
 20125                                  
 20126                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20127                                  reg_cls:
 20128                                  ; Set overscan to black.
 20129                                  
 20130 000024D4 FECE                    	dec	dh			; decrement rows and columns
 20131 000024D6 FECA                    	dec	dl			;  to zero base
 20132 000024D8 52                      	push	dx			; save rows,columns
 20133                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 20134 000024D9 B40B                    	mov	ah,0Bh
 20135 000024DB 31DB                    	xor	bx,bx
 20136                                  	;int	video_io_int		; do int 10h - BIOS video IO
 20137 000024DD CD10                    	int	10h
 20138 000024DF 5A                      	pop	dx			;  restore rows,colums
 20139                                  
 20140 000024E0 31C0                    	xor	ax,ax			; zero out ax
 20141 000024E2 89C1                    	mov	cx,ax			;  and cx
 20142                                  
 20143                                  ; Scroll active page
 20144                                  
 20145                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 20146 000024E4 B406                    	mov	ah,6
 20147                                  	;mov	bh,video_attribute	; attribute for blank line
 20148 000024E6 B707                    	mov	bh,7
 20149 000024E8 30DB                    	xor	bl,bl			; set BL to 0
 20150                                  	;int	video_io_int		; do int 10h - BIOS video IO
 20151 000024EA CD10                    	int	10h
 20152                                  
 20153                                  ; Seek to cursor to 0,0
 20154                                  
 20155                                  ;M022 following two lines added
 20156                                  	;mov	ah,get_video_state	; get current video page in BH
 20157 000024EC B40F                    	mov	ah,0Fh
 20158                                  	;int	video_io_int
 20159 000024EE CD10                    	int	10h
 20160                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 20161 000024F0 B402                    	mov	ah,2
 20162 000024F2 31D2                    	xor	dx,dx			; row and column 0
 20163                                  ;M022	mov	bh,0
 20164                                  	;int	video_io_int		; do into 10h - BIOS video IO
 20165 000024F4 CD10                    	int	10h
 20166                                  
 20167 000024F6 C3                      	retn
 20168                                  
 20169                                  ; ---------------------------------------------------------------------------
 20170                                  
 20171                                  ; MSDOS 6.0
 20172                                  
 20173                                  ; ****************************************************************
 20174                                  ; *
 20175                                  ; * ROUTINE:	 ANSI_CLS
 20176                                  ; *
 20177                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 20178                                  ; *		 to STDOUT.
 20179                                  ; *
 20180                                  ; * INPUT:	 none
 20181                                  ; *
 20182                                  ; * OUTPUT:	 none
 20183                                  ; *
 20184                                  ; ****************************************************************
 20185                                  
 20186                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20187                                  ansi_cls:			;AC000;
 20188 000024F7 BE[9695]                	mov	si,CLSSTRING
 20189                                  			; db 4,1Bh,'[2J'
 20190 000024FA AC                      	lodsb
 20191 000024FB 88C1                    	mov	cl,al	; al = 4
 20192 000024FD 30ED                    	xor	ch,ch
 20193                                  	;mov	ah,Raw_CON_IO
 20194 000024FF B406                    	mov	ah,6
 20195                                  clrloop:
 20196 00002501 AC                      	lodsb
 20197 00002502 88C2                    	mov	dl,al
 20198 00002504 CD21                    	int	21h
 20199                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 20200 00002506 E2F9                    	loop	clrloop
 20201 00002508 C3                      	retn
 20202                                  
 20203                                  ;============================================================================
 20204                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 20205                                  ;============================================================================
 20206                                  ; 08/10/2018 - Retro DOS v3.0
 20207                                  
 20208                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 20209                                  
 20210                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 20211                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 20212                                  
 20213                                  ; ---------------------------------------------------------------------------
 20214                                  
 20215                                  ; ****************************************************************
 20216                                  ; *
 20217                                  ; * ROUTINE:	 CTTY - Change console
 20218                                  ; *
 20219                                  ; * SYNTAX:	 CTTY device
 20220                                  ; *
 20221                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 20222                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 20223                                  ; *		 STDERR. This routine returns to LODCOM1.
 20224                                  ; *
 20225                                  ; * INPUT:	 command line at offset 81H
 20226                                  ; *
 20227                                  ; * OUTPUT:	 none
 20228                                  ; *
 20229                                  ; ****************************************************************
 20230                                  
 20231                                  	; 21/02/2023 - Retro DOS v4.0
 20232                                  	; 08/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 20233                                  	; 10/06/2023
 20234                                  CTTY:
 20235                                  	; MSDOS 6.0
 20236 00002509 1E                      	push	ds			;AN000; Get local ES
 20237 0000250A 07                      	pop	es			;AN000;
 20238 0000250B BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 20239 0000250E BF[B898]                	mov	di,PARSE_CTTY
 20240                                  					;AC000; Get address of PARSE_CTTY
 20241 00002511 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 20242 00002513 31D2                    	xor	dx,dx			;AC000;
 20243 00002515 E84125                  	call	cmd_parse		;AC000; call parser
 20244                                  
 20245                                  	;cmp	ax,-1 ; 0FFFFh
 20246                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 20247                                  	;je	short ctty_error	;AN000; yes - error
 20248                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 20249                                  	;and	ax,ax ; ax > 0 ?
 20250                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 20251                                  	; 10/06/2023
 20252 00002518 40                      	inc	ax  ; cmp ax,-1
 20253 00002519 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 20254 0000251B 48                      	dec	ax  ; cmp ax,0
 20255 0000251C 7531                    	jnz	short ctty_error  ; 1 -> 0
 20256                                  	; ax = 0
 20257                                  
 20258 0000251E 56                      	push	si			;AN000; save position in line
 20259 0000251F C536[E5A9]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 20260 00002523 BF[12A1]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 20261                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 20262 00002526 AC                      	lodsb				;AN000; get a char from buffer
 20263 00002527 AA                      	stosb				;AN000; store in srcbuf
 20264                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 20265 00002528 08C0                    	or	al,al ; al = 0 ?
 20266 0000252A 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 20267                                  					;AN000; no - keep moving
 20268 0000252C 5E                      	pop	si			;AN000; get line position back
 20269 0000252D BF[B898]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 20270 00002530 E8C001                  	call	parse_check_eol 	;AN000; are we at end of line?
 20271                                  	;jz	short nocolon 		;AN000; yes - continue
 20272                                  	; 21/02/2023
 20273 00002533 751A                    	jnz	short ctty_error
 20274                                  ;ctty_error:
 20275                                  	;jmp	short isbaddev		;AC000; yes - exit
 20276                                  
 20277                                  	; 21/02/2023
 20278                                  	; MSDOS 3.3
 20279                                  	;call	SETPATH
 20280                                  	;dec	si
 20281                                  	;dec	si
 20282                                  	;cmp	byte [si],':'
 20283                                  	;jnz	short NOCOLON
 20284                                  	;mov	byte [si],0
 20285                                  nocolon:
 20286                                  	; 21/02/2023
 20287                                  	; MSDOS 6.0
 20288 00002535 BA[12A1]                	mov	dx,SrcBuf
 20289                                  ;NOCOLON:
 20290                                  	; MSDOS 3.3 & MSDOS 6.0
 20291                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 20292                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 20293 00002538 B8023D                  	mov	ax,3D02h ; 21/02/2023
 20294 0000253B CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 20295                                  			; DS:DX	-> ASCIZ filename
 20296                                  			; AL = access mode
 20297                                  			; 2 - read & write
 20298 0000253D 7210                    	jc	short isbaddev
 20299 0000253F 89C3                    	mov	bx,ax
 20300                                  	;mov	ax,IOCTL*256 ; 4400h
 20301 00002541 B80044                  	mov	ax,4400h
 20302 00002544 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 20303                                  			; BX = file or device handle
 20304 00002546 F6C280                  	test	dl,80h
 20305 00002549 750C                    	jnz	short devisok
 20306                                  closedev:
 20307                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 20308 0000254B B43E                    	mov	ah,3Eh
 20309 0000254D CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20310                                  			; BX = file handle
 20311                                  ctty_error:
 20312                                  isbaddev:
 20313 0000254F BA[2B93]                	mov	dx,BADDEV_PTR
 20314 00002552 E8BA2F                  	call	std_printf
 20315 00002555 EB40                    	jmp	short resret
 20316                                  
 20317                                  	;nop
 20318                                  devisok:
 20319                                  	; 21/02/2023
 20320                                  	; MSDOS 6.0
 20321 00002557 52                      	push	dx		;AN007; save device info
 20322                                  	; 08/06/2023
 20323 00002558 A1[B293]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 20324                                  	;mov	dh,util_msg_class
 20325 0000255B B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 20326 0000255D 53                      	push	bx		;AN021; save handle
 20327 0000255E E89130                  	call	TSYSGETMSG	;AN021; get the address of the message
 20328 00002561 89F2                    	mov	dx,si		;AN021; get address into dx
 20329                                  	;mov	ax,(Write shl 8)
 20330 00002563 B80040                  	mov	ax,4000h	;AN007; write to device
 20331 00002566 B90200                  	mov	cx,2		;AN007; write two bytes
 20332 00002569 CD21                    	int	21h		;AN007;
 20333 0000256B 5B                      	pop	bx		;AN021; get back handle
 20334 0000256C 5A                      	pop	dx		;AN007; get back device info
 20335 0000256D 72DC                    	jc	short closedev	;AN007; if error, quit
 20336                                  
 20337                                  	; MSDOS 3.3 & MSDOS 6.0
 20338 0000256F 30F6                    	xor	dh,dh
 20339 00002571 80CA03                  	or	dl,3
 20340                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 20341                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 20342 00002574 B80144                  	mov	ax,4401h
 20343 00002577 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 20344                                  			; BX = device handle,DH = 0
 20345                                  			; DL = device information to set 
 20346                                  			;	(bits 0-7 from	function 0)
 20347 00002579 53                      	push	bx
 20348 0000257A B90300                  	mov	cx,3
 20349 0000257D 31DB                    	xor	bx,bx
 20350                                  iclloop:			; Close basic handles
 20351                                  	;mov	ah,CLOSE ; 3Eh
 20352 0000257F B43E                    	mov	ah,3Eh
 20353 00002581 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20354                                  			; BX = file handle
 20355 00002583 43                      	inc	bx
 20356 00002584 E2F9                    	loop	iclloop
 20357 00002586 5B                      	pop	bx		; Get handle
 20358                                  	;mov	ah,XDUP ; 45h
 20359 00002587 B445                    	mov	ah,45h
 20360 00002589 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20361                                  			; BX = file handle to duplicate
 20362                                  	;mov	ah,XDUP ; 45h
 20363 0000258B B445                    	mov	ah,45h
 20364 0000258D CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20365                                  			; BX = file handle to duplicate
 20366                                  	;mov	ah,XDUP ; 45h
 20367 0000258F B445                    	mov	ah,45h
 20368 00002591 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20369                                  			; BX = file handle to duplicate
 20370                                  	;mov	ah,CLOSE ; 3Eh
 20371 00002593 B43E                    	mov	ah,3Eh
 20372 00002595 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20373                                  			; BX = file handle
 20374                                  resret:
 20375 00002597 8E1E[F39D]              	mov	ds,[RESSEG]
 20376 0000259B 1E                      	push	ds
 20377                                  	;mov	ax,[18h]
 20378 0000259C A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 20379 0000259F A3[3D02]                	mov	[Io_Save],ax
 20380                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 20381                                  	;;mov	ax,LODCOM1
 20382                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 20383                                  	;mov	ax,175h ; MSDOS 6.0
 20384 000025A2 B8[7400]                	mov	ax,TrnLodCom1_Trap
 20385 000025A5 50                      	push	ax
 20386                                  
 20387 000025A6 CB                      	retf		; Far return
 20388                                  
 20389                                  ; ---------------------------------------------------------------------------
 20390                                  
 20391                                  ;****************************************************************
 20392                                  ;*
 20393                                  ;* ROUTINE:	CHCP - Change code page internal command
 20394                                  ;*		(added DOS 3.30 07/21/86)
 20395                                  ;*
 20396                                  ;* SYNTAX:	CHCP [xxx]
 20397                                  ;*		where xxx is a valid code page
 20398                                  ;*
 20399                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 20400                                  ;*		6402H to set the code page to xxxx. If no parameters
 20401                                  ;*		are specified, CHCP will use INT 21H function 6401H
 20402                                  ;*		to get global code page and display it to the user.
 20403                                  ;*
 20404                                  ;* INPUT:	command line at offset 81H
 20405                                  ;*
 20406                                  ;* OUTPUT:	none
 20407                                  ;*
 20408                                  ;****************************************************************
 20409                                  
 20410                                  NLSFUNC_installed equ  0FFh
 20411                                  set_global_cp	  equ  2
 20412                                  get_global_cp	  equ  1
 20413                                  
 20414                                  	; 21/02/2023 - Retro DOS v4.0
 20415                                  	; 09/06/2023 - Retro DOS v4.2 COMMAND.COM
 20416                                  	; 10/06/2023
 20417                                  CHCP:
 20418                                  	; MSDOS 6.0
 20419 000025A7 1E                      	push	ds		;AN000; Get local ES
 20420 000025A8 07                      	pop	es		;AN000;
 20421 000025A9 BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 20422 000025AC BF[C497]                	mov	di,PARSE_CHCP
 20423                                  				;AN000; Get address of PARSE_CHCP
 20424 000025AF 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 20425 000025B1 31D2                    	xor	dx,dx		;AC000;
 20426 000025B3 E85301                  	call    Parse_With_Msg	;AC018; call parser
 20427                                  
 20428                                  	;cmp	ax,-1
 20429                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 20430                                  	;;jne	short setcp	;AC000; no go get number & set code page
 20431                                  	;je	short getcp	;AC000; yes - no parm - get code page
 20432                                  ;setcp:
 20433                                  	;;cmp	ax,0
 20434                                  	;;cmp	ax,RESULT_NO_ERROR
 20435                                  	;			;AN000; did we have an error?
 20436                                  	;;jne	short cp_error	;AC018; yes - go issue message
 20437                                  	;and	ax,ax ; ax > 0 ?
 20438                                  	;jnz	short cp_error	
 20439                                  	; 10/06/2023
 20440 000025B6 40                      	inc	ax  ; cmp ax,-1	
 20441 000025B7 745C                    	jz	short getcp ; 0FFFFh -> 0
 20442 000025B9 48                      	dec	ax  ; cmp ax,0
 20443 000025BA 7556                    	jnz	short cp_error ; 1 -> 0
 20444                                  	; ax = 0
 20445                                  
 20446                                  	;;push	cx		;AN000; save positional count
 20447                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 20448                                  	;;mov	cx,[bx]		;AN000;  into cx
 20449                                  	;;mov	[system_cpage],cx
 20450                                  	;			;AN000; save user input number
 20451                                  	;;pop	cx		;AC000; restore positional count
 20452                                  	;; 21/02/2023
 20453                                  	;mov	di,[bx]
 20454                                  	;mov	[system_cpage],di
 20455                                  	; 09/06/2023	
 20456 000025BC 8B1E[E5A9]              	mov	bx,[PARSE1_ADDR]
 20457 000025C0 891E[8BA0]              	mov	[system_cpage],bx
 20458                                  	;
 20459 000025C4 BF[C497]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 20460 000025C7 E82901                  	call	parse_check_eol ;AN000; are we at end of line?
 20461 000025CA 7546                    	jnz	short cp_error	;AC000; no - exit
 20462                                  okset:
 20463                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 20464                                  	;mov	ah,14h
 20465                                  	;mov	al,0		;AN000;
 20466 000025CC B80014                  	mov	ax,1400h
 20467 000025CF CD2F                    	int	2Fh		;AN000;
 20468                                  	;cmp	al,0FFh
 20469 000025D1 3CFF                    	cmp	al,NLSFUNC_installed
 20470                                  				;AN000;
 20471 000025D3 7405                    	je	short got_NLS 	;AN000; Yes - continue
 20472 000025D5 BA[5992]                	mov	dx,NLSFUNC_PTR
 20473                                  				;AN000; no - set up error message
 20474 000025D8 EB38                    	jmp	short cp_error	;AN000; error exit
 20475                                  
 20476                                  	; 21/02/2023
 20477                                  got_NLS:
 20478                                  	; MSDOS 6.0
 20479 000025DA 8B1E[8BA0]              	mov	bx,[system_cpage]
 20480                                  				;AN000; get user input code page
 20481                                  ;SET_CP_TBL_NUM:
 20482                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 20483                                  	;
 20484                                  	; MSDOS 3.3 & MSDOS 6.0
 20485                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 20486                                  	;mov	ah,66h
 20487                                  	;;mov	al,set_global_cp 
 20488                                  	;mov	al,2		;minor - set
 20489                                  	; 26/04/2023
 20490 000025DE B80266                  	mov	ax,6602h
 20491 000025E1 CD21                    	int	21h
 20492                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 20493                                  		; BX = active code page
 20494                                  		; DX = system code page (active page at boot time)
 20495                                  
 20496 000025E3 733F                    	jnc	short chcp_return
 20497                                  				;no error - exit
 20498                                  
 20499 000025E5 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 20500 000025E8 7515                    	jnz	short chcp_other_error
 20501                                  
 20502                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 20503 000025EA B459                    	mov	ah,59h
 20504 000025EC 31DB                    	xor	bx,bx
 20505 000025EE CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 20506                                  			; BX = version code (0000h for DOS 3.x)
 20507                                  
 20508 000025F0 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 20509 000025F3 7505                    	jne	short no_countrysys ; 26/04/2023
 20510                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 20511 000025F5 BA[5C92]                	mov	dx,INV_CODE_PAGE
 20512                                  	;jmp	cerror
 20513 000025F8 EB18                    	jmp	short cp_error
 20514                                  
 20515                                  	; 21/02/2023
 20516                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 20517                                  no_countrysys:
 20518                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 20519                                  ;					;AN000; set up extended error msg class
 20520                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 20521                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 20522                                  					;AN000; get message number in control block
 20523 000025FA BA[4694]                	mov	dx,NoCntry_Ptr
 20524 000025FD EB13                    	jmp	short cp_error
 20525                                  
 20526                                  chcp_other_error:		; end of p716
 20527                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 20528 000025FF B459                    	mov	ah,59h
 20529 00002601 31DB                    	xor	bx,bx
 20530 00002603 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 20531                                  			; BX = version code (0000h for DOS 3.x)
 20532 00002605 83F841                  	cmp	ax,65		;was it access denied?
 20533 00002608 7505                    	jne	short none_set	;no - assume all failed
 20534 0000260A BA[3D92]                	mov	dx,cp_not_all_ptr
 20535                                  				;set up message
 20536                                  	;jmp	cerror		;AC000; error exit
 20537 0000260D EB03                    	jmp     short cp_error
 20538                                  none_set:
 20539 0000260F BA[2F92]                	mov	dx,cp_not_set_ptr
 20540                                  				;set up message
 20541                                  cp_error:
 20542 00002612 E98D08                  	jmp	cerror		;exit
 20543                                  getcp:
 20544                                  	;;mov	ah,GETSETCDPG ; 66h
 20545                                  	;mov	ah,66h		;get/set global code page function	
 20546                                  	;;mov	al,get_global_cp ; 1
 20547                                  	;mov	al,1		;minor - get
 20548                                  	; 26/04/2023
 20549 00002615 B80166                  	mov	ax,6601h
 20550 00002618 CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 20551 0000261A 891E[8BA0]              	mov	[system_cpage],bx
 20552                                  				;get active cp for output
 20553 0000261E BA[4B92]                	mov	dx,cp_active_ptr
 20554 00002621 E8EB2E                  	call	std_printf	;print it out
 20555                                  chcp_return:
 20556 00002624 C3                      	retn
 20557                                  
 20558                                  ; ---------------------------------------------------------------------------
 20559                                  
 20560                                  ; ****************************************************************
 20561                                  ; *
 20562                                  ; * ROUTINE:	 TRUENAME
 20563                                  ; *
 20564                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 20565                                  ; *		 Parses the command line. If a path is found, set
 20566                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 20567                                  ; *		 set SRCXNAME to the drive letter. If no path
 20568                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 20569                                  ; *		 current directory. Use the NAME TRANSLATE system
 20570                                  ; *		 call to get the real name and  then display the 
 20571                                  ; *		 real name. If an error occurs issue an error
 20572                                  ; *		 message and transfer control to  CERROR.
 20573                                  ; *
 20574                                  ; * INPUT:	 command line at offset 81H
 20575                                  ; *
 20576                                  ; * OUTPUT:	 none
 20577                                  ; *
 20578                                  ; ****************************************************************
 20579                                  
 20580                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20581                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 20582                                  
 20583                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20584                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2741h
 20585                                  
 20586                                  TRUENAME:				;AN000; TRUENAME entry point
 20587 00002625 1E                      	push	ds			;AN000; Get local ES
 20588 00002626 07                      	pop	es			;AN000;
 20589 00002627 BE8100                  	mov	si,81h			;AN000; Get command line
 20590 0000262A BF[2298]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 20591 0000262D 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 20592 0000262F 31D2                    	xor	dx,dx			;AN000;
 20593 00002631 E8D500                  	call	Parse_With_Msg		;AC018; call parser
 20594                                  
 20595 00002634 BF[219B]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 20596                                  	;cmp	ax,0FFFFh
 20597                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 20598                                  	;je	short tn_eol		;AN000; yes - go process
 20599                                  	;; 22/02/2023
 20600                                  	;;cmp	ax,0
 20601                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 20602                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 20603                                  	;and	ax,ax ; ax = 0 ?
 20604                                  	;jnz	short tn_parse_error ; no, parse error	
 20605                                  	; 10/06/2023
 20606 00002637 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 20607 00002638 7433                    	jz	short tn_eol ; ah = 0 ; *
 20608 0000263A 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 20609 0000263B 752D                    	jnz	short tn_parse_error
 20610                                  	
 20611                                  	;cmp	byte [PARSE1_TYPE],6
 20612 0000263D 803E[E1A9]06            	cmp	byte [PARSE1_TYPE],result_drive
 20613                                  					;AN000; was a drive entered?
 20614                                  	;je	short tn_drive		;AN000; yes - go process
 20615                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 20616                                  	; 23/02/2023
 20617 00002642 7512                    	jne	short tn_filespec
 20618                                  
 20619                                  ;tn_eol: 
 20620                                  ;	;mov	ah,0			;AN000; no parameters on line
 20621                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 20622                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 20623                                  ;	mov	al,'.'
 20624                                  ;	stosw				;AN000; store in srcxname
 20625                                  ;	jmp	short tn_doit		;AN000; go do command
 20626                                  
 20627                                  tn_drive:				;AN000; a drive was entered
 20628 00002644 56                      	push	si			;AN000; save position in line
 20629 00002645 BE[E5A9]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 20630 00002648 AC                      	lodsb				;AN000; get the drive number
 20631 00002649 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 20632 0000264B AA                      	stosb				;AN000; store it in srcxname
 20633                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 20634 0000264C B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 20635 0000264F AB                      	stosw				;AN000;  store in srcxname
 20636                                  	;mov	al,0
 20637 00002650 B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 20638 00002652 AA                      	stosb				;AN000;
 20639 00002653 5E                      	pop	si			;AN000; get line position back
 20640 00002654 EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 20641                                  
 20642                                  tn_filespec:				;AN000; a filespec was entered
 20643 00002656 56                      	push	si			;AN000; save position in line
 20644 00002657 C536[E5A9]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 20645                                  
 20646                                  tn_move_filename:			;AN000; put filespec in srcxname
 20647 0000265B AC                      	lodsb				;AN000; get a char from buffer
 20648 0000265C AA                      	stosb				;AN000; store in srcxname
 20649                                  	;;cmp	al,0
 20650                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 20651 0000265D 08C0                    	or	al,al ; al = 0 ?
 20652 0000265F 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 20653 00002661 5E                      	pop	si			;AN000; get line position back
 20654                                  
 20655                                  tn_check_eol:				;AN000; make sure no extra parms
 20656 00002662 BF[2298]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 20657 00002665 E88B00                  	call	parse_check_eol 	;AN000; are we at end of line?
 20658 00002668 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 20659                                  tn_parse_error: 			;AN000; A parse error occurred
 20660 0000266A E93508                  	jmp	cerror			;AN000; Go to error routine
 20661                                  
 20662                                  tn_eol: 
 20663                                  	;23/02/2023
 20664                                  	;;mov	ah,0			;AN000; no parameters on line
 20665                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 20666                                  	;;mov	al,dot_chr		;AN000;   for current dir
 20667                                  	;mov	al,'.'
 20668                                  	; 10/06/2023
 20669                                  	;mov	ax,002Eh
 20670                                  	; ah = 0 ; *
 20671 0000266D B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 20672                                  	;	
 20673 0000266F AB                      	stosw				;AN000; store in srcxname
 20674                                  	; 23/02/2023
 20675                                  	;jmp	short tn_doit		;AN000; go do command
 20676                                  
 20677                                  tn_doit:				;AN000;
 20678 00002670 BE[219B]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 20679 00002673 BF[529C]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 20680 00002676 B460                    	mov	ah,xNameTrans		;AN000; do name translate call
 20681                                  	;mov	ah,60h
 20682 00002678 CD21                    	int	21h			;AN000;
 20683 0000267A 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 20684                                  
 20685 0000267C E8B3FB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 20686 0000267F C706[91A0][219B]        	mov	word [string_ptr_2],SRCXNAME
 20687                                  					;AN000; get address of failed string
 20688                                  	;mov	byte [extend_buf_sub],1
 20689 00002685 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 20690                                  					;AN000; put number of subst in control block
 20691 0000268A E91508                  	jmp	cerror			;AN000; Go to error routine
 20692                                  
 20693                                  tn_print_xname: 			;AN000;
 20694 0000268D C706[91A0][529C]        	mov	word [string_ptr_2],COMBUF
 20695                                  					;AN000; Set up address of combuf
 20696 00002693 BA[9793]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 20697 00002696 E88804                  	call	CRLF2			;AN000; print a crlf
 20698                                  	;call	Printf_Crlf		;AN000; print it out
 20699                                  	;retn				;AN000;
 20700                                  	; 23/02/2023
 20701 00002699 E9652E                  	jmp	Printf_Crlf
 20702                                  
 20703                                  ; ---------------------------------------------------------------------------
 20704                                  
 20705                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20706                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 20707                                  
 20708                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20709                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:27C3h
 20710                                  _$EXIT:
 20711                                  	; MSDOS 6.0
 20712 0000269C 1E                      	push	ds			;AN000; save data segment
 20713 0000269D 8E1E[F39D]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 20714                                  	;assume	ds:resgroup		;AN000;
 20715                                  
 20716 000026A1 803E[4002]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 20717 000026A6 740A                    	jz	short free_com		;AN045; no - free everything
 20718                                  
 20719                                  ;	We're a permanent command.
 20720                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 20721                                  
 20722 000026A8 833E[4302]FF            	cmp	word [SingleCom],-1	;M034
 20723 000026AD 7412                    	je	short no_reset		;M034 ; exit singlecom
 20724 000026AF E952DA                  	jmp	TCOMMAND		;permanent command, recycle
 20725                                  
 20726                                  free_com:
 20727                                  	;mov	ax,(multdos shl 8 or message_2f)
 20728 000026B2 B82E12                  	mov	ax,122Eh		;AN060; reset parse message pointers
 20729                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 20730 000026B5 B205                    	mov	dl,5
 20731 000026B7 8B3E[5802]              	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 20732 000026BB 8E06[5A02]              	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 20733 000026BF CD2F                    	int	2Fh			;AN000; go set it
 20734                                  no_reset:				;AN045;
 20735 000026C1 1F                      	pop	ds			;AN000; restore local data segment
 20736                                  	;assume	ds:trangroup		;AN000;
 20737                                  ;M040
 20738                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 20739                                  ;this, restores user dir if flag is set and resets the flag.
 20740                                  
 20741                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 20742 000026C2 E80C03                  	call	RestUDir1
 20743 000026C5 8E06[F39D]              	mov	es,[RESSEG]
 20744                                  	;assume	es:resgroup
 20745                                  
 20746 000026C9 26A1[DC01]              	mov	ax,[es:Parent]
 20747                                  	;mov	[es:16h],ax
 20748                                  	;mov	[es:PDB_Parent_PID],ax
 20749 000026CD 26A31600                	mov	[es:PDB.PARENT_PID],ax
 20750 000026D1 26A1[DE01]              	mov	ax,[es:OldTerm]
 20751                                  	;mov	[es:0Ah],ax
 20752                                  	;mov	[es:PDB_Exit],ax
 20753 000026D5 26A30A00                	mov	[es:PDB.EXIT],ax
 20754 000026D9 26A1[E001]              	mov	ax,[es:OldTerm+2]
 20755                                  	;mov	[es:0Ch],ax
 20756                                  	;mov	[es:PDB_Exit+2],ax
 20757 000026DD 26A30C00                	mov	[es:PDB.EXIT+2],ax
 20758                                  
 20759 000026E1 06                      	push	es
 20760 000026E2 8E06[019E]              	mov	es,[TRAN_TPA]
 20761                                  	;mov	ah,DEALLOC
 20762 000026E6 B449                    	mov	ah,49h
 20763 000026E8 CD21                    	int	21h			; Now running in "free" space
 20764 000026EA 07                      	pop	es
 20765                                  
 20766                                  	;mov	ah,Exit
 20767 000026EB B44C                    	mov	ah,4Ch
 20768                                  	;mov	al,byte ptr RetCode
 20769 000026ED 26A0[3802]              	mov	al,[es:RetCode]
 20770 000026F1 CD21                    	int	21h
 20771                                  
 20772                                  ; ---------------------------------------------------------------------------
 20773                                  
 20774                                  ; MSDOS 6.0
 20775                                  ; ****************************************************************
 20776                                  ; *
 20777                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 20778                                  ; *
 20779                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 20780                                  ; *		 If not end of line, set up to print parse
 20781                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 20782                                  ; *		 EXPECTED!
 20783                                  ; *
 20784                                  ; * INPUT:	 DS:SI	  last output from parser
 20785                                  ; *		 ES:DI	  points to parse block
 20786                                  ; *		 CX	  last output from parser
 20787                                  ; *
 20788                                  ; * OUTPUT:	 AX	  parser return code
 20789                                  ; *
 20790                                  ; *		 if end of line found
 20791                                  ; *		     zero flag set
 20792                                  ; *		 else
 20793                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 20794                                  ; *
 20795                                  ; ****************************************************************
 20796                                  
 20797                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20798                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 20799                                  
 20800                                  parse_check_eol:
 20801 000026F3 31D2                    	xor	dx,dx			;AN000;
 20802 000026F5 8936[89A0]              	mov	[parse_last],si 	;AN018; save start of parameter
 20803 000026F9 E85D23                  	call	cmd_parse		;AN000; call parser
 20804 000026FC 3CFF                    	cmp	al,-1 ; 0FFh
 20805                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 20806 000026FE 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 20807                                  	;cmp	ax,0
 20808                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 20809 00002700 21C0                    	and	ax,ax ; ax = 0 ?
 20810 00002702 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 20811 00002704 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 20812                                  ok_to_setup_pmsg:
 20813 00002705 E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 20814                                  parse_good_eol:
 20815                                  parse_msg_good:	; 23/02/2023
 20816 00002708 C3                      	retn				;AN000;
 20817                                  
 20818                                  ; ---------------------------------------------------------------------------
 20819                                  
 20820                                  ; MSDOS 6.0
 20821                                  ; ****************************************************************
 20822                                  ; *
 20823                                  ; * ROUTINE:	 PARSE_WITH_MSG
 20824                                  ; *
 20825                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 20826                                  ; *		 message is set up.
 20827                                  ; *
 20828                                  ; * INPUT:	 DS:SI	  last output from parser
 20829                                  ; *		 ES:DI	  points to parse block
 20830                                  ; *		 CX	  last output from parser
 20831                                  ; *
 20832                                  ; * OUTPUT:	 AX	  parser return code
 20833                                  ; *
 20834                                  ; *		 if no error
 20835                                  ; *		     outputs from parser
 20836                                  ; *		 else
 20837                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 20838                                  ; *		     error message set up for STD_PRINTF
 20839                                  ; *
 20840                                  ; ****************************************************************
 20841                                  
 20842                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20843                                  Parse_With_Msg:
 20844 00002709 8936[89A0]              	mov	[parse_last],si 	;AN018; save start of parameter
 20845 0000270D E84923                  	call	cmd_parse		;AN018; call parser
 20846 00002710 3CFF                    	cmp	al,-1 ; 0FFh
 20847                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 20848 00002712 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 20849                                  	;cmp	ax,0
 20850                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 20851 00002714 09C0                    	or	ax,ax ; ax = 0 ?
 20852 00002716 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 20853                                  	; 23/02/2023
 20854                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 20855                                  ;parse_msg_good:
 20856                                  	;retn				;AN018;
 20857                                  	; 23/02/2023
 20858                                  	;jmp	short setup_parse_error_msg	
 20859                                  
 20860                                  ; ---------------------------------------------------------------------------
 20861                                  
 20862                                  ; MSDOS 6.0
 20863                                  ; ****************************************************************
 20864                                  ; *
 20865                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 20866                                  ; *
 20867                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 20868                                  ; *		 message is set up.
 20869                                  ; *
 20870                                  ; * INPUT:	 AX	     Parse error number
 20871                                  ; *		 SI	     Set to past last parameter
 20872                                  ; *		 Parse_last  Set to start of last parameter
 20873                                  ; *
 20874                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 20875                                  ; *		 error message set up for STD_PRINTF
 20876                                  ; *
 20877                                  ; ****************************************************************
 20878                                  
 20879                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20880                                  setup_parse_error_msg:
 20881 00002718 C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 20882                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 20883 0000271D BA[D091]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 20884 00002720 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 20885                                  					;AC018; terminate the parameter string
 20886 00002723 A3[D091]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 20887 00002726 83F802                  	cmp	ax,2
 20888                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 20889 00002729 740D                    	je	short setup_parse_msg_ret
 20890                                  					;AN018;    no subst
 20891 0000272B 8B36[89A0]              	mov	si,[parse_last] 	;AC018; get start of parameter
 20892 0000272F 8936[91A0]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 20893 00002733 C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 20894                                  					;AC018; put number of subst in control block
 20895                                  	;mov	byte [extend_buf_sub],1
 20896                                  setup_parse_msg_ret:
 20897 00002738 46                      	inc	si			;AN018; make sure zero flag not set
 20898 00002739 C3                      	retn				;AC018;
 20899                                  
 20900                                  ;============================================================================
 20901                                  ; TENV.ASM, MSDOS 6.0, 1991
 20902                                  ;============================================================================
 20903                                  ; 08/10/2018 - Retro DOS v3.0
 20904                                  
 20905                                  ; TITLE	Part6 COMMAND Transient routines.
 20906                                  
 20907                                  ;	Environment utilities and misc. routines
 20908                                  
 20909                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 20910                                  
 20911                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 20912                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 20913                                  
 20914                                  ; ---------------------------------------------------------------------------
 20915                                  
 20916                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20917                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20918                                  ADD_PROMPT:
 20919 0000273A E8FC00                  	call	delete_prompt	; Delete any existing prompt
 20920 0000273D E8AD01                  	call	scan_double_null
 20921                                  
 20922                                  ADD_PROMPT2:
 20923 00002740 56                      	push	si
 20924 00002741 E89B01                  	call	GETARG
 20925 00002744 5E                      	pop	si
 20926 00002745 7501                    	jnz	short ADD_PROMPT3
 20927                                  ADD_PROMPT_RETN:
 20928 00002747 C3                      	retn
 20929                                  ADD_PROMPT3:			; Pre scan for arguments
 20930 00002748 E87501                  	call	move_name	; Move in name
 20931 0000274B E89101                  	call	GETARG
 20932 0000274E 56                      	push	si
 20933 0000274F EB53                    	jmp	short ADD_NAME
 20934                                  
 20935                                  ;break	The SET command
 20936                                  
 20937                                  ; Input: DS:SI points to a CR terminated string
 20938                                  ; Output: carry flag is set if no room
 20939                                  ;	  otherwise name is added to environment
 20940                                  
 20941                                  DISP_ENVJ:
 20942 00002751 E9BC00                  	jmp	DISP_ENV
 20943                                  
 20944                                  ADD_NAME_TO_ENVIRONMENT:
 20945 00002754 E88801                  	call	GETARG
 20946 00002757 74F8                    	jz	short DISP_ENVJ
 20947                                  
 20948                                  ; check if line contains exactly one equals sign
 20949                                  
 20950 00002759 31DB                    	xor	bx,bx		; = count is 0
 20951 0000275B 56                      	push	si		; Save pointer to beginning of line
 20952                                  EQLP:
 20953 0000275C AC                      	lodsb			; Get a char
 20954 0000275D 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 20955 0000275F 740F                    	je	short QUEQ	
 20956 00002761 3C3D                    	cmp	al,'='		; Look for = sign	
 20957 00002763 75F7                    	jne	short EQLP	; not there, get next char
 20958 00002765 FEC3                    	inc	bl		; Otherwise increment EQ count
 20959 00002767 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 20960 0000276A 75F0                    	jne	short EQLP
 20961 0000276C FEC7                    	inc	bh		; Set BH=1 means no parameters
 20962 0000276E EBEC                    	jmp	short EQLP	; And look for more
 20963                                  QUEQ:
 20964 00002770 5E                      	pop	si		; Restore beginning of line
 20965 00002771 FECB                    	dec	bl		; Zero flag means only one EQ
 20966 00002773 7406                    	jz	short ONEQ	; Good line
 20967 00002775 BA[6892]                	mov	dx,SYNTMES_PTR
 20968 00002778 E92707                  	jmp	cerror
 20969                                  ONEQ:
 20970 0000277B 53                      	push	bx
 20971 0000277C E8BD00                  	call	delete_name_in_environment
 20972 0000277F 5B                      	pop	bx
 20973 00002780 FECF                    	dec	bh
 20974 00002782 74C3                    	jz	short ADD_PROMPT_RETN
 20975 00002784 E86601                  	call	scan_double_null
 20976 00002787 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 20977 00002789 E83401                  	call	move_name
 20978 0000278C 56                      	push	si
 20979 0000278D 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 20980                                  				;  env var name
 20981                                  		
 20982                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 20983                                  ; necessary in the resident for re-reading the transient. Let's look for
 20984                                  ; COMSPEC=
 20985                                  
 20986 0000278F C606[7497]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 20987 00002794 BE[9394]                	mov	si,COMSPECSTR ; "COMSPEC="
 20988 00002797 B90400                  	mov	cx,4
 20989 0000279A F3A7                    	repe	cmpsw
 20990 0000279C 7504                    	jnz	short NOT_COMSPEC
 20991                                  				; Zero set => exact match
 20992 0000279E FE06[7497]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 20993                                  	;mov	byte [COMSPEC_FLAG],1
 20994                                  NOT_COMSPEC:
 20995 000027A2 89DF                    	mov	di,bx		; Load ptr to end of env var name
 20996                                  ADD_NAME:
 20997 000027A4 5E                      	pop	si		; Add the value of the new env var
 20998 000027A5 56                      	push	si		;  to the environment.
 20999                                  ADD_NAME1:
 21000 000027A6 AC                      	lodsb
 21001 000027A7 3C0D                    	cmp	al,13 ; 0Dh
 21002 000027A9 7405                    	je	short ADD_NAME_RET
 21003 000027AB E8AD01                  	call	store_char
 21004 000027AE EBF6                    	jmp	short ADD_NAME1
 21005                                  ADD_NAME_RET:
 21006 000027B0 5E                      	pop	si
 21007 000027B1 803E[7497]00            	cmp	byte [comspec_flag],0
 21008                                  				; If the new env var is comspec,	
 21009                                  ADD_NAME_JZ_RET:
 21010 000027B6 748F                    	jz	short ADD_PROMPT_RETN 
 21011                                  				;  copy the value into the
 21012                                  				;  comspec var in the resident
 21013                                  
 21014                                  ; We have changed the COMSPEC variable. We need to update the resident
 21015                                  ; pieces necessary to reread in the info. First, skip all delimiters
 21016                                  
 21017 000027B8 E87303                  	call	scanoff
 21018 000027BB 8E06[F39D]              	mov	es,[RESSEG]	;  comspec var in the resident
 21019                                  
 21020                                  ; Make sure that the printer knows where the beginning of the string is
 21021                                  
 21022 000027BF BF[E901]                	mov	di,ComSpec
 21023 000027C2 89FB                    	mov	bx,di
 21024                                  
 21025                                  ; Generate drive letter for display
 21026                                  
 21027 000027C4 31C0                    	xor	ax,ax		;g assume no drive first
 21028 000027C6 26A2[3202]              	mov	[es:ComDrv],al
 21029                                  	; 23/02/2023
 21030                                  	; MSDOS 6.0 (& 5.0)
 21031 000027CA 50                      	push	ax		;AN000; 3/3/KK
 21032 000027CB 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 21033 000027CD E83F01                  	call	testkanj	;AN000; 3/3/KK	
 21034 000027D0 58                      	pop	ax		;AN000; 3/3/KK
 21035 000027D1 7518                    	jnz	short _GOTDRIVE
 21036                                  	;
 21037 000027D3 807C013A                	cmp	byte [si+1],':'	; drive specified?
 21038 000027D7 7512                    	jne	short _GOTDRIVE
 21039 000027D9 8A04                    	mov	al,[si]		; get his specified drive
 21040                                  	; 23/02/2023
 21041 000027DB E85B01                  	call	UPCONV
 21042                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 21043 000027DE 2C41                    	sub	al,'A'		; convert to 0-based
 21044 000027E0 83C702                  	add	di,2
 21045 000027E3 FEC0                    	inc	al		; convert to 1-based number
 21046 000027E5 26A2[3202]              	mov	[es:ComDrv],al
 21047                                  
 21048                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 21049                                  ; done here..
 21050                                  	;add	al,40h
 21051 000027E9 0440                    	add	al,'A'-1
 21052                                  _GOTDRIVE:
 21053                                  	; 23/02/2023
 21054                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 21055                                  	;mov	[es:PUTBACKSUBSTPTR],di
 21056                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 21057 000027EB 26893E[C801]            	mov	[es:PutBackComSpec],di
 21058                                  				;g point to beginning of name after drive
 21059                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 21060                                  	;mov	[es:PUTBACKDRV],al
 21061                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 21062 000027F0 26A2[CD01]              	mov	[es:PutBackDrv],al
 21063                                  
 21064                                  ; Copy chars until delim      	
 21065                                  
 21066 000027F4 89DF                    	mov	di,bx
 21067                                  COPY_COMSPEC:
 21068 000027F6 AC                      	lodsb
 21069 000027F7 E83C03                  	call	DELIM
 21070 000027FA 7407                    	jz	short COPYDONE
 21071 000027FC 3C0D                    	cmp	al,13 ; 0Dh
 21072 000027FE 7403                    	je	short COPYDONE
 21073 00002800 AA                      	stosb
 21074 00002801 EBF3                    	jmp	short COPY_COMSPEC
 21075                                  COPYDONE:
 21076 00002803 30C0                    	xor	al,al		; Null terminate the string and quit
 21077 00002805 AA                      	stosb
 21078                                  	;mov	byte [comspec_flag],0
 21079 00002806 A2[7497]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 21080 00002809 4F                      	dec	di
 21081 0000280A 26893E[2902]            	mov	[es:ComSpec_End],di
 21082 0000280F C3                      	retn
 21083                                  
 21084                                  DISP_ENV:
 21085 00002810 8E1E[F39D]              	mov	ds,[RESSEG]
 21086 00002814 8E1E[DC03]              	mov	ds,[EnvirSeg]
 21087                                  	; assume ds:nothing
 21088 00002818 31F6                    	xor	si,si
 21089                                  PENVLP:
 21090 0000281A 803C00                  	cmp	byte [si],0
 21091 0000281D 7497                    	jz	short ADD_NAME_JZ_RET
 21092 0000281F BF[87A7]                	mov	di,Arg_Buf
 21093                                  PENVLP2:
 21094 00002822 AC                      	lodsb
 21095 00002823 AA                      	stosb
 21096 00002824 08C0                    	or	al,al
 21097 00002826 75FA                    	jnz	short PENVLP2
 21098 00002828 BA[6D93]                	mov	dx,arg_buf_ptr
 21099 0000282B 1E                      	push	ds
 21100 0000282C 06                      	push	es
 21101 0000282D 1F                      	pop	ds
 21102                                  	; assume ds:nothing
 21103 0000282E E8D02C                  	call	Printf_Crlf
 21104 00002831 1F                      	pop	ds
 21105 00002832 EBE6                    	jmp	short PENVLP
 21106                                  
 21107                                  ; =============== S U B	R O U T	I N E =======================================
 21108                                  
 21109                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21110                                  delete_path:
 21111 00002834 BE[8794]                	mov	si,PATH_TEXT ; "PATH="
 21112 00002837 EB03                    	jmp	short delete_name_in_environment
 21113                                  
 21114                                  ; =============== S U B	R O U T	I N E =======================================
 21115                                  
 21116                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21117                                  delete_prompt:
 21118 00002839 BE[8C94]                	mov	si,PROMPT_TEXT ; "PROMPT="
 21119                                  
 21120                                  ; ---------------------------------------------------------------------------
 21121                                  
 21122                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21123                                  delete_name_in_environment:
 21124                                  
 21125                                  ; Input: DS:SI points to a "=" terminated string
 21126                                  ; Output: carry flag is set if name not found
 21127                                  ;	  otherwise name is deleted
 21128                                  
 21129 0000283C 56                      	push	si
 21130 0000283D 1E                      	push	ds
 21131 0000283E E82C00                  	call	FIND		; ES:DI points to name
 21132 00002841 7217                    	jc	short del1
 21133 00002843 89FE                    	mov	si,di		; Save it
 21134 00002845 E8BF00                  	call	SCASB2		; Scan for the nul
 21135 00002848 87F7                    	xchg	si,di
 21136                                  ;SR;
 21137                                  ; If we have only one env string, then the double null is lost when the last
 21138                                  ;string is deleted and we have an invalid empty environment with only a
 21139                                  ;single null. To avoid this, we will look for the double null case and then
 21140                                  ;move an extra null char.
 21141                                  ; Bugbug: The only possible problem is that the last pathstring
 21142                                  ;will be followed by a triple null. Is this really a problem?
 21143                                  
 21144                                  	; MSDOS 6.0
 21145 0000284A 26803C00                	cmp	byte [es:si],0	;null char?
 21146 0000284E 7501                    	jnz	short not_dnull	;no, we are at a double null
 21147 00002850 4E                      	dec	si		;point at the double null
 21148                                  not_dnull:
 21149                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21150 00002851 E86901                  	call	GETENVSIZ
 21151 00002854 29F1                    	sub	cx,si
 21152 00002856 06                      	push	es
 21153 00002857 1F                      	pop	ds		; ES:DI points to name
 21154                                  				; DS:SI points to next name
 21155 00002858 F3A4                    	rep	movsb
 21156                                  del1:
 21157 0000285A 1F                      	pop	ds
 21158 0000285B 5E                      	pop	si
 21159                                  find_retn:
 21160 0000285C C3                      	retn
 21161                                  
 21162                                  ; =============== S U B	R O U T	I N E =======================================
 21163                                  
 21164                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21165                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 21166                                  find_path:
 21167 0000285D BE[8794]                	mov	si,PATH_TEXT ; "PATH="
 21168 00002860 EB03                    	jmp	short find_name_in_environment
 21169                                  
 21170                                  ; =============== S U B	R O U T	I N E =======================================
 21171                                  
 21172                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21173                                  find_prompt:
 21174 00002862 BE[8C94]                	mov	si,PROMPT_TEXT ; "PROMPT="
 21175                                  
 21176                                  ; ---------------------------------------------------------------------------
 21177                                  
 21178                                  find_name_in_environment:
 21179                                  
 21180                                  ; Input: DS:SI points to a "=" terminated string
 21181                                  ; Output: ES:DI points to the arguments in the environment
 21182                                  ;	  zero is set if name not found
 21183                                  ;	  carry flag is set if name not valid format
 21184                                  
 21185 00002865 E80500                  	call	FIND		; Find the name
 21186 00002868 72F2                    	jc	short find_retn	; Carry means not found	
 21187 0000286A E99600                  	jmp	SCASB1		; Scan for = sign
 21188                                  
 21189                                  ; ---------------------------------------------------------------------------
 21190                                  	;nop
 21191                                  
 21192                                  ; =============== S U B	R O U T	I N E =======================================
 21193                                  
 21194                                  ; On return of FIND1, ES:DI points to beginning of name
 21195                                  
 21196                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21197                                  FIND:
 21198 0000286D FC                      	cld
 21199 0000286E E84100                  	call	COUNT0		; CX = Length of name
 21200 00002871 8E06[F39D]              	mov	es,[RESSEG]
 21201                                  	;assume es:RESGROUP
 21202 00002875 268E06[DC03]            	mov	es,[es:EnvirSeg]
 21203                                  	;assume es:NOTHING
 21204 0000287A 31FF                    	xor	di,di
 21205                                  find1:	
 21206 0000287C 51                      	push	cx
 21207 0000287D 56                      	push	si
 21208 0000287E 57                      	push	di
 21209                                  find11:
 21210 0000287F AC                      	lodsb
 21211                                  	; 23/02/2023 
 21212                                  	; MSDOS 6.0 (& 5.0)
 21213 00002880 E88C00                  	call	testkanj	
 21214 00002883 740F                    	jz	short notkanj3
 21215 00002885 4E                      	dec	si
 21216 00002886 AD                      	lodsw
 21217 00002887 47                      	inc	di
 21218 00002888 47                      	inc	di
 21219 00002889 263B45FE                	cmp	ax,[es:di-2]
 21220 0000288D 7511                    	jne	short find12
 21221 0000288F 49                      	dec	cx
 21222 00002890 E2ED                    	loop	find11
 21223 00002892 EB0C                    	jmp	short find12
 21224                                  notkanj3:
 21225 00002894 E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 21226                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 21227 00002897 47                      	inc	di
 21228 00002898 263A45FF                	cmp	al,[es:di-1]
 21229 0000289C 7502                    	jne	short find12
 21230 0000289E E2DF                    	loop	find11
 21231                                  find12:
 21232 000028A0 5F                      	pop	di
 21233 000028A1 5E                      	pop	si
 21234 000028A2 59                      	pop	cx
 21235 000028A3 74B7                    	jz	short find_retn
 21236 000028A5 51                      	push	cx
 21237 000028A6 E85E00                  	call	SCASB2		; Scan for a nul
 21238 000028A9 59                      	pop	cx
 21239 000028AA 26803D00                	cmp	byte [es:di],0
 21240 000028AE 75CC                    	jnz	short find1
 21241 000028B0 F9                      	stc			; Indicate not found
 21242 000028B1 C3                      	retn
 21243                                  
 21244                                  ; =============== S U B	R O U T	I N E =======================================
 21245                                  
 21246                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21247                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 21248                                  COUNT0:
 21249 000028B2 1E                      	push	ds
 21250 000028B3 07                      	pop	es
 21251                                  	;assume es:nothing
 21252 000028B4 89F7                    	mov	di,si
 21253                                  ;COUNT1:
 21254 000028B6 57                      	push	di		; Count number of chars until "="
 21255 000028B7 E84900                  	call	SCASB1
 21256                                  	; 23/02/2023
 21257                                  ;	jmp	short COUNTX
 21258                                  ;COUNT2:
 21259                                  ;	push	di		; Count number of chars until nul
 21260                                  ;	call	SCASB2
 21261                                  ;COUNTX:
 21262 000028BA 59                      	pop	cx
 21263 000028BB 29CF                    	sub	di,cx
 21264 000028BD 87F9                    	xchg	di,cx
 21265                                  move_name_retn:
 21266 000028BF C3                      	retn
 21267                                  
 21268                                  ; =============== S U B	R O U T	I N E =======================================
 21269                                  
 21270                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21271                                  move_name:
 21272 000028C0 803C0D                  	cmp	byte [si],13 ; 0Dh
 21273 000028C3 74FA                    	je	short move_name_retn
 21274 000028C5 AC                      	lodsb
 21275                                  	; 23/02/2023 
 21276                                  	; MSDOS 6.0 (& 5.0)
 21277 000028C6 E84600                  	call	testkanj		
 21278 000028C9 7409                    	jz	short notkanj1
 21279 000028CB E88D00                  	call	store_char
 21280 000028CE AC                      	lodsb
 21281 000028CF E88900                  	call	store_char
 21282 000028D2 EBEC                    	jmp	short move_name
 21283                                  notkanj1: 
 21284 000028D4 E86200                  	call	UPCONV
 21285                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 21286 000028D7 E88100                  	call	store_char
 21287 000028DA 3C3D                    	cmp	al,'='
 21288 000028DC 75E2                    	jne	short move_name
 21289                                  getarg_retn:
 21290 000028DE C3                      	retn
 21291                                  
 21292                                  ; =============== S U B	R O U T	I N E =======================================
 21293                                  
 21294                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21295                                  GETARG:
 21296 000028DF BE8000                  	mov	si,80h
 21297 000028E2 AC                      	lodsb
 21298 000028E3 08C0                    	or	al,al
 21299 000028E5 74F7                    	jz	short getarg_retn
 21300 000028E7 E84402                  	call	scanoff
 21301 000028EA 3C0D                    	cmp	al,13 ; 0Dh
 21302                                  sdn_retn:
 21303 000028EC C3                      	retn
 21304                                  
 21305                                  ; =============== S U B	R O U T	I N E =======================================
 21306                                  
 21307                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 21308                                  ; there is NO double NULL, merely a string that is empty.
 21309                                  
 21310                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21311                                  scan_double_null:
 21312 000028ED 8E06[F39D]              	mov	es,[RESSEG]
 21313 000028F1 268E06[DC03]            	mov	es,[es:EnvirSeg]
 21314 000028F6 31FF                    	xor	di,di
 21315                                  
 21316                                  ; Top cycle-point. If the string here is empty, then we are done
 21317                                  
 21318                                  sdn1:
 21319 000028F8 26803D00                	cmp	byte [es:di],0	; nul string?
 21320 000028FC 74EE                    	jz	short sdn_retn	; yep, all done
 21321 000028FE E80600                  	call	SCASB2
 21322 00002901 EBF5                    	jmp	short sdn1
 21323                                  
 21324                                  ; =============== S U B	R O U T	I N E =======================================
 21325                                  
 21326                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21327                                  SCASB1:
 21328 00002903 B03D                    	mov	al,'='		; Scan for an =
 21329 00002905 EB02                    	jmp	short SCASBX
 21330                                  
 21331                                  ; =============== S U B	R O U T	I N E =======================================
 21332                                  
 21333                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21334                                  SCASB2:
 21335 00002907 30C0                    	xor	al,al		; Scan for a nul
 21336                                  
 21337                                  ; ---------------------------------------------------------------------------
 21338                                  
 21339                                  	; 23/02/2023
 21340                                  SCASBX:
 21341 00002909 B90001                  	mov	cx,256
 21342 0000290C F2AE                    	repne	scasb
 21343 0000290E C3                      	retn
 21344                                  
 21345                                  ; =============== S U B	R O U T	I N E =======================================
 21346                                  
 21347                                  ; MSDOS 6.0
 21348                                  
 21349                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 21350                                  
 21351                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21352                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 21353                                  testkanj:
 21354 0000290F 1E                      	push	ds			;AN000;  3/3/KK
 21355 00002910 56                      	push	si			;AN000;  3/3/KK
 21356 00002911 50                      	push	ax			;AN000;  3/3/KK
 21357 00002912 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 21358 00002917 C536[5C02]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 21359                                  ktlop:					;AN000;  3/3/KK
 21360 0000291B 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 21361 0000291E 740E                    	je	short notlead 		;AN000;  3/3/KK
 21362 00002920 58                      	pop	ax			;AN000;  3/3/KK
 21363 00002921 50                      	push	ax			;AN000;  3/3/KK
 21364 00002922 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 21365 00002924 7208                    	jb	short notlead 		;AN000;  3/3/KK
 21366 00002926 46                      	inc	si			;AN000;  3/3/KK
 21367 00002927 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 21368 00002929 7607                    	jbe	short islead		;AN000;  3/3/KK
 21369 0000292B 46                      	inc	si			;AN000;  3/3/KK
 21370 0000292C EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 21371                                  notlead:				;AN000;  3/3/KK
 21372 0000292E 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 21373 00002930 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 21374                                  islead: 				;AN000;  3/3/KK
 21375 00002932 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 21376 00002934 40                      	inc	ax			;AN000;  3/3/KK
 21377                                  ktret:					;AN000;  3/3/KK
 21378 00002935 58                      	pop	ax			;AN000;  3/3/KK
 21379 00002936 5E                      	pop	si			;AN000;  3/3/KK
 21380 00002937 1F                      	pop	ds			;AN000;  3/3/KK
 21381 00002938 C3                      	retn				;AN000;  3/3/KK
 21382                                  
 21383                                  ; =============== S U B	R O U T	I N E =======================================
 21384                                  
 21385                                  ; MSDOS 6.0
 21386                                  
 21387                                  ; ****************************************************************
 21388                                  ; *
 21389                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 21390                                  ; *
 21391                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 21392                                  ; *		 the character in AL from the file upper case table
 21393                                  ; *		 in DOS if character if above  ascii 128, else
 21394                                  ; *		 subtracts 20H if between "a" and "z".
 21395                                  ; *
 21396                                  ; * INPUT:	 AL	      char to be upper cased
 21397                                  ; *		 FUCASE_ADDR  set to the file upper case table
 21398                                  ; *
 21399                                  ; * OUTPUT:	 AL	      upper cased character
 21400                                  ; *
 21401                                  ; ****************************************************************
 21402                                  
 21403                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21404                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 21405                                  
 21406                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21407                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2A6Eh
 21408                                  UPCONV:
 21409 00002939 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 21410 0000293B 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 21411 0000293D 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 21412 0000293F 1E                      	push	ds			;AN000;
 21413 00002940 53                      	push	bx			;AN000;
 21414 00002941 8E1E[F39D]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 21415                                  	;lds	bx,dword ptr FUCase_Addr+1
 21416 00002945 C51E[5402]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 21417 00002949 83C302                  	add	bx,2			;AN000;  skip over first word
 21418                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 21419 0000294C D7                      	xlat
 21420 0000294D 5B                      	pop	bx			;AN000;
 21421 0000294E 1F                      	pop	ds			;AN000;
 21422                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 21423                                  	; 10/06/2023
 21424                                  upconv_end:
 21425                                  	; 24/02/2023
 21426 0000294F C3                      	retn
 21427                                  oth_fucase:				;AN000;
 21428 00002950 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 21429 00002952 72FB                    	jb	short upconv_end	;AC000;    subtract 20h to get
 21430 00002954 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 21431 00002956 77F7                    	ja	short upconv_end	;AC000;
 21432 00002958 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 21433                                  ;upconv_end:	; 10/06/2023		;AN000;
 21434 0000295A C3                      	retn
 21435                                  
 21436                                  ; ---------------------------------------------------------------------------
 21437                                  
 21438                                  ; MSDOS 3.3
 21439                                  
 21440                                  	; 24/02/2023
 21441                                  ;UPCONV_MAPCALL:
 21442                                  	;			; If between "a" and "z"
 21443                                  	;cmp	al,[small_a]
 21444                                  	;jb	short UPCONV_END
 21445                                  	;cmp	al,[small_z]
 21446                                  	;ja	short UPCONV_END
 21447                                  	;sub	al,20h		; Change lower-case to upper
 21448                                  ;UPCONV_END:
 21449                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 21450                                  	;			  ; 	  for (current) country
 21451                                  	;retn
 21452                                  
 21453                                  ; =============== S U B	R O U T	I N E =======================================
 21454                                  
 21455                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 21456                                  
 21457                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21458                                  store_char:
 21459 0000295B 51                      	push	cx
 21460 0000295C 53                      	push	bx
 21461                                  
 21462                                  	; 24/02/2023
 21463                                  	;;16/10/2018
 21464                                  	; MSDOS 6.0
 21465 0000295D 06                      	push	es		;AN056;*
 21466 0000295E 1E                      	push	ds		;AN056; Save local DS
 21467 0000295F 8E1E[F39D]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 21468 00002963 8E06[DC03]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 21469 00002967 1F                      	pop	ds		;AN056; Get local segment back
 21470                                  
 21471                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21472 00002968 E85200                  	call	GETENVSIZ
 21473 0000296B 89CB                    	mov	bx,cx		; Save room for double nul
 21474 0000296D 83EB02                  	sub	bx,2
 21475 00002970 39DF                    	cmp	di,bx
 21476 00002972 723F                    	jb	short store1
 21477 00002974 50                      	push	ax
 21478 00002975 51                      	push	cx
 21479 00002976 53                      	push	bx		; Save Size of environment
 21480 00002977 E85DDE                  	call	FREE_TPA
 21481 0000297A 5B                      	pop	bx
 21482 0000297B 83C302                  	add	bx,2		; Recover true environment size
 21483                                  
 21484 0000297E 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K
 21485 00002982 7203                    	jb	short envsiz_ok
 21486                                  bad_env_size:			;AN056;
 21487 00002984 F9                      	stc
 21488 00002985 EB16                    	jmp	short envnoset
 21489                                  	;nop
 21490                                  envsiz_ok:
 21491 00002987 B104                    	mov	cl,4
 21492 00002989 D3EB                    	shr	bx,cl		; Convert back to paragraphs
 21493 0000298B 43                      	inc	bx
 21494                                  	; 24/02/2023
 21495                                  	; MSDOS 6.0
 21496 0000298C 8CC1                    	mov	cx,es		;AN056; Get environment segment
 21497 0000298E 01D9                    	add	cx,bx		;AN056; Add in size of environment
 21498 00002990 83C120                  	add	cx,20h		;AN056; Add in some TPA
 21499 00002993 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 21500 00002995 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 21501 00002997 73EB                    	jnb	short bad_env_size
 21502                                  				;AN056; Yes - don't do it!!!
 21503                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21504 00002999 B44A                    	mov	ah,4Ah
 21505                                  	;mov	ah,SETBLOCK ; 4Ah
 21506 0000299B CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21507                                  			; ES = segment address of block	to change
 21508                                  			; BX = new size	in paragraphs
 21509                                  envnoset:
 21510 0000299D 9C                      	pushf
 21511 0000299E 06                      	push	es
 21512 0000299F 8E06[F39D]              	mov	es,[RESSEG]
 21513 000029A3 E841DE                  	call	ALLOC_TPA
 21514 000029A6 07                      	pop	es
 21515 000029A7 9D                      	popf
 21516 000029A8 59                      	pop	cx
 21517 000029A9 58                      	pop	ax
 21518                                  	; 10/06/2023
 21519 000029AA 7307                    	jnc	short store1
 21520                                  	; 24/02/2023
 21521 000029AC 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 21522                                  	;jnc	short store1
 21523 000029AD BA[E791]                	mov	dx,ENVERR_PTR
 21524 000029B0 E9EF04                  	jmp	cerror
 21525                                  store1:	
 21526 000029B3 AA                      	stosb
 21527 000029B4 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 21528                                  	; 24/02/2023
 21529 000029B9 07                      	pop	es ; MSDOS 6.0	;AN056;*
 21530 000029BA 5B                      	pop	bx
 21531 000029BB 59                      	pop	cx
 21532 000029BC C3                      	retn
 21533                                  
 21534                                  ; =============== S U B	R O U T	I N E =======================================
 21535                                  
 21536                                  	; 24/02/2023
 21537                                  GETENVSIZ:
 21538                                  
 21539                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 21540                                  ;ES has environment segment
 21541                                  ;Size returned in CX, all other registers preserved
 21542                                  
 21543 000029BD 06                      	push	es
 21544 000029BE 50                      	push	ax
 21545 000029BF 8CC0                    	mov	ax,es
 21546 000029C1 48                      	dec	ax		;Point at arena
 21547 000029C2 8EC0                    	mov	es,ax
 21548                                  	;mov	ax,[es:3]
 21549 000029C4 26A10300                	mov	ax,[es:ARENA.size]
 21550 000029C8 B104                    	mov	cl,4
 21551 000029CA D3E0                    	shl	ax,cl		;Convert to bytes
 21552 000029CC 89C1                    	mov	cx,ax
 21553 000029CE 58                      	pop	ax
 21554 000029CF 07                      	pop	es
 21555                                  getenvsiz_retn:
 21556 000029D0 C3                      	retn
 21557                                  
 21558                                  ; =============== S U B	R O U T	I N E =======================================
 21559                                  
 21560                                  	; 24/02/2023
 21561                                  RestUDir1:
 21562 000029D1 1E                      	push	ds
 21563 000029D2 8E1E[F39D]              	mov	ds,[RESSEG]
 21564 000029D6 803E[3F02]00            	cmp	byte [RestDir],0
 21565 000029DB 1F                      	pop	ds
 21566 000029DC 74F2                    	jz	short getenvsiz_retn
 21567                                  
 21568                                  ; =============== S U B	R O U T	I N E =======================================
 21569                                  
 21570                                  	; 24/02/2023
 21571                                  RestUDir:
 21572 000029DE BA[D59C]                	mov	dx,USERDIR1
 21573 000029E1 B43B                    	mov	ah,3Bh
 21574                                  	;mov	ah,CHDir ; 3Bh
 21575 000029E3 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21576                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21577 000029E5 30C0                    	xor	al,al
 21578                                  	;call	SETREST
 21579                                  	;retn
 21580                                  	; 24/02/2023
 21581 000029E7 E94908                  	jmp	SETREST
 21582                                  
 21583                                  ;============================================================================
 21584                                  ; TENV2.ASM, MSDOS 6.0, 1991
 21585                                  ;============================================================================
 21586                                  ; 07/10/2018 - Retro DOS v3.0
 21587                                  
 21588                                  ; TITLE	Part6 COMMAND Transient routines.
 21589                                  
 21590                                  ;	Environment utilities and misc. routines
 21591                                  
 21592                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 21593                                  
 21594                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21595                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 21596                                  
 21597                                  ; ---------------------------------------------------------------------------
 21598                                  
 21599                                  ; ****************************************************************
 21600                                  ; *
 21601                                  ; * ROUTINE:	 $CHDIR
 21602                                  ; *
 21603                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 21604                                  ; *		 line. If path is found, CHDIR to path. If a drive
 21605                                  ; *		 letter is found, get and display the current dir
 21606                                  ; *		 of the specified drive. If nothing is found, get
 21607                                  ; *		 and display the current dir of the default drive.
 21608                                  ; *
 21609                                  ; * INPUT:	 command line at offset 81H
 21610                                  ; *
 21611                                  ; * OUTPUT:	 none
 21612                                  ; *
 21613                                  ; ****************************************************************
 21614                                  
 21615                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21616                                  
 21617                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21618                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B21h
 21619                                  _$CHDIR:
 21620                                  	; MSDOS 6.0
 21621 000029EA BE8100                  	mov	si,81h
 21622 000029ED BF[2298]                	mov	di,PARSE_CHDIR
 21623                                  				;AN000; Get address of PARSE_CHDIR
 21624 000029F0 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 21625 000029F2 31D2                    	xor	dx,dx		;AN000;
 21626 000029F4 E812FD                  	call	Parse_With_Msg	;AC018; call parser
 21627                                  	
 21628                                  	;cmp	ax,-1
 21629                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 21630                                  	;je	short bwdj	; No args
 21631                                  	;;cmp	ax,0
 21632                                  	;;cmp	ax,RESULT_NO_ERROR
 21633                                  	;			;AC000; did we have an error?
 21634                                  	;or	ax,ax ; ax = 0 ?
 21635                                  	;jnz	short ChDirErr	;AC018; yes - exit
 21636                                  	
 21637                                  	; 10/06/2023
 21638 000029F7 40                      	inc	ax	; cmp ax,-1
 21639 000029F8 7414                    	jz	short bwdj ; 0FFFFh -> 0
 21640 000029FA 48                      	dec	ax	; cmp ax,0
 21641 000029FB 756D                    	jnz	short ChDirErr ; 1 -> 0
 21642                                  	; ax = 0
 21643                                  
 21644                                  	;cmp	byte [PARSE1_TYPE],6
 21645 000029FD 803E[E1A9]06            	cmp	byte [PARSE1_TYPE],result_drive
 21646                                  				;AC000; was a drive entered?
 21647 00002A02 7511                    	jne	short REALCD	; no
 21648                                  
 21649                                  ; D: was found. See if there is anything more.
 21650                                  
 21651 00002A04 BF[2298]                	mov	di,PARSE_CHDIR
 21652                                  				;AC000; get address of parse_chdir
 21653 00002A07 31D2                    	xor	dx,dx		;AC000;
 21654 00002A09 E8E7FC                  	call	parse_check_eol ;AC000; call parser
 21655 00002A0C 755C                    	jnz	short ChDirErr	;AC000;
 21656                                  bwdj:
 21657 00002A0E E87BF9                  	call	build_dir_for_chdir
 21658                                  				; Drive only specified
 21659 00002A11 E80D01                  	call	CRLF2
 21660                                  chdir_retn:
 21661 00002A14 C3                      	retn
 21662                                  
 21663                                  	; 24/02/2023
 21664                                  	; MSDOS 3.3
 21665                                  	;mov	ax,[COMSW]
 21666                                  	;or	ax,[ALLSWITCH]
 21667                                  	;mov	dx,BADPARMPTR
 21668                                  	;jnz	short CHDIR_ERR
 21669                                  	;mov	si,81h
 21670                                  	;call	SCANOFF
 21671                                  	;cmp	al,0Dh		; are we at end of line?
 21672                                  	;je	short BWDJ	; No args
 21673                                  	;inc	si
 21674                                  	;lodsb
 21675                                  	;cmp	al,':'
 21676                                  	;jne	short REALCD
 21677                                  	;push	si
 21678                                  	;call	SCANOFF
 21679                                  	;pop	si
 21680                                  	;cmp	al,0Dh		; was a drive entered?
 21681                                  	;jne	short REALCD	; no
 21682                                  ;BWDJ:
 21683                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 21684                                  	;call	CRLF2
 21685                                  ;CHDIR_RETN:
 21686                                  	;retn
 21687                                  
 21688                                  	; 24/02/2023
 21689                                  	; MSDOS 6.0
 21690                                  REALCD:
 21691 00002A15 56                      	push	si		;AN000; save position in line
 21692 00002A16 C536[E5A9]              	lds	si,[PARSE1_ADDR]
 21693                                  				;AN000; get address of filespec
 21694 00002A1A E8D807                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 21695 00002A1D 5E                      	pop	si		;AN000; restore position in line
 21696 00002A1E BF[2298]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 21697 00002A21 31D2                    	xor	dx,dx		;AC000;
 21698 00002A23 E8CDFC                  	call	parse_check_eol ;AC000; call parser
 21699 00002A26 7542                    	jnz	short ChDirErr	;AC000;
 21700                                  	
 21701 00002A28 E81106                  	call	SETPATH
 21702 00002A2B F606[AEA0]02            	test	byte [DestInfo],2
 21703 00002A30 7518                    	jnz	short BadChDir
 21704                                  
 21705                                  	; 26/04/2023
 21706 00002A32 B43B                    	mov	ah,3Bh
 21707                                  	;mov	ah,CHDir
 21708 00002A34 CD21                    	int	21h
 21709 00002A36 73DC                    	jnc	short chdir_retn
 21710                                  	
 21711 00002A38 E807F8                  	call	get_ext_error_number
 21712                                  				;AN022; get the extended error
 21713 00002A3B 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21714                                  				;AN022; see if path not found
 21715 00002A3E 740A                    	je	short BadChDir	;AN022; yes - issue old message
 21716                                  ;SR;
 21717                                  ; We want to issue "Invalid Directory" message even if the path is valid
 21718                                  ;but is not a directory. The extended error returns "Access denied" which
 21719                                  ;is kind of confusing. Issue the old message if access denied error is 
 21720                                  ;returned
 21721                                  
 21722 00002A40 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21723 00002A43 7405                    	je	short BadChDir
 21724                                  	
 21725 00002A45 E89E00                  	call	set_ext_error_subst ;AN022;
 21726 00002A48 EB20                    	jmp	short ChDirErr	;AN022;
 21727                                  
 21728                                  BadChDir:
 21729 00002A4A BA[0B93]                	mov	dx,badcd_ptr
 21730                                  ;ChDirErr:
 21731                                  ;	call	std_eprintf
 21732                                  ;mkdir_retn:
 21733                                  	;retn
 21734                                  	; 24/02/2023
 21735 00002A4D EB1B                    	jmp	short ChDirErr	;AN022;
 21736                                  
 21737                                  	; 24/02/2023
 21738                                  	; MSDOS 3.3
 21739                                  ;REALCD:
 21740                                  	;call	SETPATH
 21741                                  	;test	byte [DESTINFO],2
 21742                                  	;jnz	short BADCHDIR
 21743                                  	;mov	ah,CHDir ; 3Bh
 21744                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21745                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 21746                                  	;jnc	short CHDIR_RETN
 21747                                  ;BADCHDIR:
 21748                                  	;mov	dx,BADCDPTR
 21749                                  ;CHDIR_ERR:
 21750                                  	;call	STD_EPRINTF
 21751                                  ;MKDIR_RETN:
 21752                                  	;retn
 21753                                  
 21754                                  ; =============== S U B	R O U T	I N E =======================================
 21755                                  
 21756                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21757                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 21758                                  
 21759                                  	; 11/06/2023 - Retro DOS v4.2
 21760                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B8Ch
 21761                                  _$MKDIR:
 21762                                  	; MSDOS 6.0
 21763 00002A4F E86300                  	call	SETRMMK
 21764 00002A52 7216                    	jc	short MkDirErr
 21765                                  
 21766 00002A54 B439                    	mov	ah,39h
 21767                                  	;mov	ah,MKDIR
 21768 00002A56 CD21                    	int	21h
 21769 00002A58 7313                    	jnc	short mkdir_retn
 21770                                  
 21771 00002A5A E8E5F7                  	call	get_ext_error_number	
 21772                                  				;AN022; get the extended error
 21773 00002A5D 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21774                                  				;AN022; see if path not found
 21775 00002A60 742A                    	je	short MD_other_err
 21776                                  				;AN022; yes - issue old message
 21777 00002A62 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21778                                  				;AN022; access denied?
 21779 00002A65 7407                    	je	short badmderr	;AN022; yes - see if file exists
 21780                                  	
 21781 00002A67 E87C00                  	call	set_ext_error_subst
 21782                                  				;AN022;
 21783                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 21784                                  	; 24/02/2023
 21785                                  ChDirErr:
 21786                                  MkDirErr:
 21787                                  RmDirErr:
 21788 00002A6A E89A2A                  	call	std_eprintf
 21789                                  mkdir_retn:
 21790                                  rmdir_retn:
 21791 00002A6D C3                      	retn
 21792                                  	
 21793                                  badmderr:
 21794 00002A6E BA[219B]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 21795 00002A71 B41A                    	mov	ah,1Ah
 21796                                  	;mov	ah,Set_DMA	;AN006;
 21797 00002A73 CD21                    	int	21h		;AN006;
 21798                                  	
 21799 00002A75 B44E                    	mov	ah,4Eh
 21800                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 21801                                  	;mov	cx,10h
 21802 00002A77 B91000                  	mov	cx,ATTR_DIRECTORY
 21803                                  				;AN006;   search for directory
 21804 00002A7A CD21                    	int	21h		;AN006;
 21805 00002A7C 720E                    	jc	short MD_other_err
 21806                                  				;AN006; doesn't exist - must be something else
 21807                                  	;;mov	dl,SRCXNAME.find_buf_attr
 21808                                  				;AN006; we found a file/dir
 21809                                  	;mov	dl,[SRCXNAME+21] 
 21810 00002A7E 8A16[369B]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 21811 00002A82 F6C210                  	test	dl,ATTR_DIRECTORY
 21812                                  				;AN006; was it a directory?
 21813 00002A85 7405                    	jz	short MD_other_err
 21814                                  				;AN006; no - must have been a file
 21815 00002A87 BA[FE93]                	mov	dx,MD_EXISTS_PTR
 21816                                  				;AN006; set up already exists error
 21817 00002A8A EBDE                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 21818                                  MD_other_err:			;AN006;
 21819 00002A8C BA[0E93]                	mov	dx,badmkd_ptr
 21820                                  ;MkDirErr:
 21821                                  	;call	std_eprintf
 21822                                  	;retn
 21823                                  	; 24/02/2023
 21824 00002A8F EBD9                    	jmp	short MkDirErr
 21825                                  
 21826                                  	; 24/02/2023
 21827                                  	; MSDOS 3.3
 21828                                  	;call	SETRMMK
 21829                                  	;jb	short MKDIRERR
 21830                                  	;mov	ah,MKDIR ; 39h
 21831                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 21832                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 21833                                  	;jnc	short MKDIR_RETN
 21834                                  	;mov	dx,BADMKDPTR
 21835                                  	;call	GET_EXT_ERR_NUMBER
 21836                                  ;MKDIRERR:
 21837                                  	;call	STD_EPRINTF
 21838                                  	;retn
 21839                                  
 21840                                  ; =============== S U B	R O U T	I N E =======================================
 21841                                  
 21842                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21843                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 21844                                  	; 11/06/2023 - Retro DOS v4.2
 21845                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2C00h
 21846                                  _$RMDIR:
 21847 00002A91 E82100                  	call	SETRMMK
 21848 00002A94 72D4                    	jb	short RmDirErr
 21849 00002A96 7518                    	jnz	short badrderr
 21850                                  
 21851 00002A98 B43A                    	mov	ah,3Ah
 21852                                  	;mov	ah,RMDIR ; 3Ah
 21853 00002A9A CD21                    	int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 21854                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 21855 00002A9C 73CF                    	jnc	short rmdir_retn ; 24/02/2023
 21856                                  
 21857                                  	; 24/02/2023
 21858                                  	; MSDOS 6.0
 21859 00002A9E E8A1F7                  	call	get_ext_error_number
 21860                                  				;AN022; get the extended error
 21861 00002AA1 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21862                                  				;AN022; see if path not found
 21863 00002AA4 740A                    	je	short badrderr	;AN022; yes - issue old message
 21864 00002AA6 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21865                                  				;AN022; access denied?
 21866 00002AA9 7405                    	je	short badrderr	;AN022; yes - issue old message
 21867                                  
 21868 00002AAB E83800                  	call	set_ext_error_subst
 21869                                  				;AN022;
 21870 00002AAE EBBA                    	jmp	short RmDirErr	;AC022; yes - go print it
 21871                                  
 21872                                  	; MSDOS 6.0
 21873                                  badrderr:
 21874                                  	; 24/02/2023
 21875 00002AB0 BA[1193]                	mov	dx,badrmd_ptr
 21876 00002AB3 EBB5                    	jmp	short RmDirErr
 21877                                  ;RmDirErr:
 21878                                  	;call	std_eprintf
 21879                                  ;;rmdir_retn
 21880                                  	;retn
 21881                                  
 21882                                  	; 24/02/2023
 21883                                  	; MSDOS 3.3
 21884                                  	;mov	dx,BADRMDPTR
 21885                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 21886                                  ;RMDIRERR:
 21887                                  	;call	STD_EPRINTF
 21888                                  ;RMDIR_RETN:
 21889                                  	;retn
 21890                                  
 21891                                  ; =============== S U B	R O U T	I N E =======================================
 21892                                  
 21893                                  ; 	<Common MkDir/RmDir set up code>
 21894                                  ;****************************************************************
 21895                                  ;*
 21896                                  ;* ROUTINE:	SETRMMK
 21897                                  ;*
 21898                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 21899                                  ;*		commands. Parses the command line for a required
 21900                                  ;*		filespec.
 21901                                  ;*
 21902                                  ;* INPUT:	command line at offset 81H
 21903                                  ;*
 21904                                  ;* OUTPUT:	carry clear
 21905                                  ;*		    DS:DX points to ASCIIZ argument
 21906                                  ;*		carry set
 21907                                  ;*		    DS:DX has error message pointer
 21908                                  ;*
 21909                                  ;****************************************************************
 21910                                  
 21911                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21912                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 21913                                  	; 11/06/2023 - Retro DOS v4.2
 21914                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2BCEh
 21915                                  SETRMMK:
 21916                                  	; MSDOS 6.0
 21917 00002AB5 BE8100                  	mov	si,81h
 21918 00002AB8 BF[1998]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 21919 00002ABB 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 21920 00002ABD 31D2                    	xor	dx,dx		;AN000;
 21921                                  	;invoke	Parse_With_Msg	;AC000; call parser
 21922 00002ABF E847FC                  	call	Parse_With_Msg
 21923                                  	;cmp	ax,0
 21924                                  	;cmp	ax,RESULT_NO_ERROR
 21925 00002AC2 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 21926 00002AC4 7519                    	jnz	short noargerr	;AC000; yes - exit
 21927                                  
 21928 00002AC6 BF[219B]                	mov	di,SRCXNAME
 21929                                  				;AN000; get address of srcxname
 21930 00002AC9 57                      	push	di		;AN000; save address
 21931 00002ACA 56                      	push	si		;AN000; save position in line
 21932 00002ACB C536[E5A9]              	lds	si,[PARSE1_ADDR]
 21933                                  				;AN000; get address of path
 21934                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 21935 00002ACF AC                      	lodsb			;get a char from buffer
 21936 00002AD0 AA                      	stosb			;AN000; store in srcxname
 21937                                  	;cmp	al,0
 21938                                  	;cmp	al,END_OF_LINE_OUT
 21939 00002AD1 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 21940 00002AD3 75FA                    	jnz	short mrdir_move_filename
 21941                                  				;AC000; no - keep moving
 21942 00002AD5 5E                      	pop	si		;AN000; get line position back
 21943                                  
 21944                                  ; we have scanned an argument.	See if any args beyond.
 21945                                  
 21946 00002AD6 BF[1998]                	mov	di,PARSE_MRDIR
 21947 00002AD9 E817FC                  	call	parse_check_eol ;AC000; are we at end of line?
 21948 00002ADC 5A                      	pop	dx		;AC000; get address of SRCXNAME
 21949                                  	;retz			;yes - return no error
 21950 00002ADD 7406                    	jz	short setrmmk_retn
 21951                                  noargerr:
 21952 00002ADF BA[D091]                	mov	dx,extend_buf_ptr
 21953                                  				;AC000; get extended message pointer
 21954 00002AE2 31C0                    	xor	ax,ax
 21955 00002AE4 F9                      	stc
 21956                                  setrmmk_retn:
 21957 00002AE5 C3                      	retn
 21958                                  
 21959                                  	; 24/02/2023
 21960                                  	; MSDOS 3.3
 21961                                  ;SETRMMK:
 21962                                  	;mov	si,81h
 21963                                  	;call	SCANOFF
 21964                                  	;cmp	al,0Dh
 21965                                  	;je	short NOARGERR
 21966                                  	;mov	dx,si
 21967                                  ;SETRMMK1:
 21968                                  	;lodsb
 21969                                  	;call	DELIM
 21970                                  	;jz	short SETRMMK3
 21971                                  	;cmp	al,0Dh
 21972                                  	;jne	short SETRMMK1
 21973                                  	;mov	byte [si-1],0
 21974                                  ;SETRMMK2:
 21975                                  	;retn
 21976                                  ;SETRMMK3:
 21977                                  	;mov	byte [si-1],0
 21978                                  	;push	si
 21979                                  	;call	SCANOFF
 21980                                  	;pop	si
 21981                                  	;cmp	al,0Dh
 21982                                  	;je	short SETRMMK2
 21983                                  ;NOARGERR:
 21984                                  	;mov	dx,BADARGSPTR
 21985                                  	;xor	ax,ax
 21986                                  	;stc
 21987                                  ;SETRMMK_RETN:
 21988                                  	;retn
 21989                                  
 21990                                  ; =============== S U B	R O U T	I N E =======================================
 21991                                  
 21992                                  ; MSDOS 6.0
 21993                                  
 21994                                  ;****************************************************************
 21995                                  ;*
 21996                                  ;* ROUTINE:	Set_ext_error_subst
 21997                                  ;*
 21998                                  ;* FUNCTION:	Sets up substitution for extended error
 21999                                  ;*
 22000                                  ;* INPUT:	AX - extended error number
 22001                                  ;*		DX - offset of string
 22002                                  ;*
 22003                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 22004                                  ;*
 22005                                  ;****************************************************************
 22006                                  
 22007                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22008                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 22009                                  set_ext_error_subst:
 22010                                  	;mov	byte [msg_disp_class],1
 22011 00002AE6 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 22012                                  					;AN022; set up extended error msg class
 22013 00002AEB 8916[91A0]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 22014                                  	;mov	byte [extend_buf_sub],1
 22015 00002AEF C606[D291]01            	mov	byte [extend_buf_sub],one_subst
 22016                                  	;AN022; put number of subst in control block
 22017 00002AF4 BA[D091]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 22018 00002AF7 A3[D091]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 22019                                  savudir_err_retn: ; 24/02/2023
 22020 00002AFA C3                      	retn				;AN022; return
 22021                                  
 22022                                  ; =============== S U B	R O U T	I N E =======================================
 22023                                  
 22024                                  ; <SavUDir - preserve the users current directory on a particular drive>
 22025                                  
 22026                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 22027                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 22028                                  ;   buffer
 22029                                  ;
 22030                                  ;   Inputs:	DL has 1-based drive number
 22031                                  ;		ES:DI has destination buffer (SavUDir1 only)
 22032                                  ;   Outputs:	Carry Clear
 22033                                  ;		    DS = TranGroup
 22034                                  ;		Carry Set
 22035                                  ;		    AX has error code
 22036                                  ;   Registers Modified: AX, SI
 22037                                  
 22038                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22039                                  SAVUDIR:
 22040 00002AFB BF[D59C]                	mov	di,USERDIR1
 22041                                  ; --------------
 22042                                  SAVUDIR1:
 22043 00002AFE 88D0                    	mov	al,dl
 22044 00002B00 0440                    	add	al,'@' ; 40h
 22045 00002B02 3C40                    	cmp	al,'@' ; 40h
 22046 00002B04 7506                    	jne	short GOTUDRV
 22047 00002B06 0206[059E]              	add	al,[CURDRV]
 22048 00002B0A FEC0                    	inc	al		; A = 1
 22049                                  GOTUDRV:
 22050 00002B0C AA                      	stosb
 22051 00002B0D 8A26[F89D]              	mov	ah,[DIRCHAR]
 22052 00002B11 B03A                    	mov	al,':' ; 3Ah
 22053 00002B13 AB                      	stosw
 22054 00002B14 06                      	push	es
 22055 00002B15 1F                      	pop	ds
 22056 00002B16 89FE                    	mov	si,di
 22057 00002B18 B447                    	mov	ah,47h ; 24/02/2023
 22058                                  	;mov	ah,CURRENT_DIR	; 47h
 22059 00002B1A CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 22060                                  			; DL = drive (0=default,1=A,etc.)
 22061                                  			; DS:SI	points to 64-byte buffer area
 22062 00002B1C 72DC                    	jc	short savudir_err_retn ; 24/02/2023
 22063 00002B1E 0E                      	push	cs
 22064 00002B1F 1F                      	pop	ds
 22065 00002B20 C3                      	retn
 22066                                  
 22067                                  ; =============== S U B	R O U T	I N E =======================================
 22068                                  
 22069                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22070                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 22071                                  CRLF2:
 22072 00002B21 52                      	push	dx
 22073 00002B22 BA[B293]                	mov	dx,acrlf_ptr
 22074 00002B25 1E                      	push	ds
 22075 00002B26 0E                      	push	cs
 22076 00002B27 1F                      	pop	ds
 22077 00002B28 E8E429                  	call	std_printf
 22078 00002B2B 1F                      	pop	ds
 22079 00002B2C 5A                      	pop	dx
 22080 00002B2D C3                      	retn
 22081                                  
 22082                                  ; =============== S U B	R O U T	I N E =======================================
 22083                                  
 22084                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 22085                                  ; may NOT be TRANGROUP
 22086                                  
 22087                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22088                                  scanoff:
 22089 00002B2E AC                      	lodsb
 22090 00002B2F E80400                  	call	DELIM
 22091 00002B32 74FA                    	jz	short scanoff
 22092 00002B34 4E                      	dec	si		; Point to first non-delimiter
 22093                                  scanoff_retn:
 22094 00002B35 C3                      	retn
 22095                                  
 22096                                  ; =============== S U B	R O U T	I N E =======================================
 22097                                  
 22098                                  ; Input:    AL is character to classify
 22099                                  ; Output:   Z set if delimiter
 22100                                  ;	    NZ set otherwise
 22101                                  ; Registers modified: none
 22102                                  
 22103                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22104                                  DELIM:
 22105 00002B36 3C20                    	cmp	al,' '	 ;20h
 22106 00002B38 74FB                    	je	short scanoff_retn
 22107 00002B3A 3C3D                    	cmp	al,'='  ; 3Dh
 22108 00002B3C 74F7                    	je	short scanoff_retn
 22109 00002B3E 3C2C                    	cmp	al,','	; 2Ch
 22110 00002B40 74F3                    	je	short scanoff_retn
 22111 00002B42 3C3B                    	cmp	al,';'	 ;3Bh
 22112 00002B44 74EF                    	je	short scanoff_retn
 22113 00002B46 3C09                    	cmp	al,9		; Check for TAB character
 22114 00002B48 74EB                    	je	short scanoff_retn
 22115 00002B4A 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 22116 00002B4C C3                      	retn
 22117                                  
 22118                                  
 22119                                  ; =============== S U B	R O U T	I N E =======================================
 22120                                  
 22121                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22122                                  FCB_TO_ASCZ:			
 22123                                  	; Convert DS:SI to ASCIZ ES:DI
 22124 00002B4D B90800                  	mov	cx,8
 22125                                  MAINNAME:
 22126 00002B50 AC                      	lodsb
 22127 00002B51 3C20                    	cmp	al,' ' ; 20h
 22128 00002B53 7401                    	jz	short SKIPSPC
 22129 00002B55 AA                      	stosb
 22130                                  SKIPSPC:
 22131 00002B56 E2F8                    	loop	MAINNAME
 22132 00002B58 AC                      	lodsb
 22133 00002B59 3C20                    	cmp	al,' '
 22134 00002B5B 740F                    	je	short GOTNAME
 22135 00002B5D 88C4                    	mov	ah,al
 22136                                  	; 24/02/2023
 22137 00002B5F B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 22138                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 22139                                  	;stosb
 22140                                  	;xchg	al,ah
 22141                                  	;stosb
 22142                                  	; 24/02/2023
 22143 00002B61 AB                      	stosw
 22144 00002B62 B102                    	mov	cl,2
 22145                                  EXTNAME:
 22146 00002B64 AC                      	lodsb
 22147 00002B65 3C20                    	cmp	al,' '
 22148 00002B67 7403                    	je	short GOTNAME
 22149 00002B69 AA                      	stosb
 22150 00002B6A E2F8                    	loop	EXTNAME
 22151                                  GOTNAME:
 22152 00002B6C 30C0                    	xor	al,al
 22153 00002B6E AA                      	stosb
 22154                                  STRCOMP_RETN:
 22155 00002B6F C3                      	retn
 22156                                  
 22157                                  ; =============== S U B	R O U T	I N E =======================================
 22158                                  
 22159                                  ; Compare ASCIZ DS:SI with ES:DI.
 22160                                  ; SI,DI destroyed.
 22161                                  
 22162                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22163                                  STRCOMP:	
 22164 00002B70 A6                      	cmpsb
 22165 00002B71 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 22166 00002B73 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?	
 22167                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 22168                                  	;jmp	short STRCOMP	; Equal so far, keep going
 22169                                  	; 24/02/2023
 22170 00002B77 75F7                    	jnz	short STRCOMP
 22171 00002B79 C3                      	retn
 22172                                  
 22173                                  ; =============== S U B	R O U T	I N E =======================================
 22174                                  
 22175                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22176                                  CRPRINT:
 22177 00002B7A 50                      	push	ax
 22178                                  	;mov	al,13	; 0Dh
 22179 00002B7B B00D                    	mov	al,0Dh
 22180 00002B7D 51                      	push	cx
 22181 00002B7E 57                      	push	di
 22182 00002B7F 89D7                    	mov	di,dx
 22183 00002B81 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 22184 00002B84 06                      	push	es
 22185 00002B85 1E                      	push	ds
 22186 00002B86 07                      	pop	es
 22187 00002B87 F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 22188 00002B89 C645FF00                	mov	byte [di-1],0	; nul terminate the string
 22189 00002B8D 07                      	pop	es
 22190 00002B8E 8916[91A0]              	mov	[string_ptr_2],dx
 22191                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 22192 00002B92 BA[9793]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 22193 00002B95 E87729                  	call	std_printf
 22194                                  	;mov	byte [di-1],13
 22195 00002B98 C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 22196 00002B9C 7204                    	jb	short error_output
 22197 00002B9E 5F                      	pop	di
 22198 00002B9F 59                      	pop	cx
 22199 00002BA0 58                      	pop	ax
 22200 00002BA1 C3                      	retn
 22201                                  
 22202                                  ; ---------------------------------------------------------------------------
 22203                                  
 22204                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22205                                  error_output:
 22206 00002BA2 0E                      	push	cs
 22207 00002BA3 1F                      	pop	ds
 22208 00002BA4 8E06[F39D]              	mov	es,[RESSEG]
 22209 00002BA8 BA[E491]                	mov	dx,NOSPACE_PTR
 22210 00002BAB 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 22211 00002BB1 7406                    	jz	short go_to_error
 22212 00002BB3 E80209                  	call	PipeOff
 22213 00002BB6 BA[3193]                	mov	dx,PIPEEMES_PTR
 22214                                  go_to_error:
 22215 00002BB9 E9E602                  	jmp	cerror
 22216                                  
 22217                                  ; =============== S U B	R O U T	I N E =======================================
 22218                                  
 22219                                  ;---- Mod for path invocation ----
 22220                                  
 22221                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22222                                  pathchrcmp:
 22223                                  	; 18/03/2023	
 22224                                  	;push	ax
 22225                                  	;mov	ah,'/' ; 2Fh
 22226                                  	;cmp	[SWITCHAR],ah
 22227 00002BBC 803E[F79D]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 22228 00002BC1 7404                    	je	short noslasht
 22229 00002BC3 3C2F                    	cmp	al,'/'
 22230 00002BC5 7402                    	je	short pccont
 22231                                  noslasht:
 22232 00002BC7 3C5C                    	cmp	al,'\' ; 5Ch
 22233                                  pccont:	
 22234                                  	;pop	ax
 22235 00002BC9 C3                      	retn
 22236                                  
 22237                                  ; =============== S U B	R O U T	I N E =======================================
 22238                                  
 22239                                  ; PATHCRUNCH -
 22240                                  ;
 22241                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 22242                                  ;       PathPos = ptr to string with pathname in it
 22243                                  ;       PathCnt = length of string
 22244                                  ;
 22245                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 22246                                  ;       PathCnt = length left in string
 22247                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 22248                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 22249                                  ;       If path crunched successfully,
 22250                                  ;         CY = clear
 22251                                  ;         Current directory is changed to directory in pathname
 22252                                  ;         UserDir1 contains previous directory for use by RestUDir
 22253                                  ;         RestDir = nonzero to flag later restoration of user's dir
 22254                                  ;         DestTail = ptr to beginning of filename
 22255                                  ;         If filename found in pathname,
 22256                                  ;           ZR = clear
 22257                                  ;           FCB filename fields contain filename
 22258                                  ;         If filename not found (pure directory path),
 22259                                  ;           ZR = set
 22260                                  ;           FCB filename fields are wildcarded with ?'s
 22261                                  ;       If pathcrunch failed (no ChDir's worked),
 22262                                  ;         CY = set
 22263                                  ;         Msg_Numb = extended error code
 22264                                  ;
 22265                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 22266                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 22267                                  ;       with the filename wildcarded.
 22268                                  
 22269                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 22270                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 22271                                  
 22272                                  	; 11/06/2023 - Retro DOS v4.2
 22273                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2D11h
 22274                                  PathCrunch:
 22275                                  	; MSDOS 6.0
 22276 00002BCA C706[25A2]0000          	mov     word [Msg_Numb],0
 22277                                  				;AN022; Set up message flag
 22278                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22279                                  	;mov	dl,[5Ch]
 22280 00002BD0 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 22281 00002BD4 E824FF                  	call	SAVUDIR		; save current directory in UserDir1
 22282                                  	; MSDOS 6.0
 22283 00002BD7 7233                     	jc	short pcrunch_cderrj
 22284                                  				;AN022; if error on current dir - report
 22285 00002BD9 E86004                  	call	SETPATH		; scan past switches, whitespace
 22286                                  
 22287                                  ;       DX = ptr to pathname, NULL-terminated
 22288                                  ;       PathPos = ptr to byte after NULL at end of pathname
 22289                                  
 22290                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22291 00002BDC F606[AEA0]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 22292 00002BE1 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 22293                                  
 22294                                  	;mov	ah,CHDir ; 3Bh
 22295 00002BE3 B43B                    	mov	ah,3Bh
 22296 00002BE5 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22297                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22298                                  	; MSDOS 6.0
 22299 00002BE7 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 22300                                  	
 22301 00002BE9 E856F6                  	call	get_ext_error_number    ;AN022; get the extended error
 22302 00002BEC 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 22303 00002BEF 741E                    	je	short trypeel		;AC022;    keep trying
 22304 00002BF1 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 22305 00002BF4 7419                    	je	short trypeel		;AC022;    keep trying
 22306 00002BF6 A3[25A2]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 22307 00002BF9 E99C00                  	jmp	peelfail                ;AN022; exit with other error
 22308                                  
 22309                                  	; MSDOS 3.3
 22310                                  	;jc	short trypeel
 22311                                  chdir_worked:
 22312                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22313 00002BFC E83206                  	call	SetRest1	; set 'Restore Directory' flag true
 22314 00002BFF B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 22315 00002C01 BF5D00                  	mov	di,5Dh  ; FCB+1
 22316 00002C04 B90B00                  	mov	cx,11
 22317 00002C07 F3AA                    	rep	stosb
 22318 00002C09 30C0                    	xor	al,al		; return carry clear, zero set
 22319 00002C0B C3                      	retn
 22320                                  
 22321                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 22322 00002C0C E98100                  	jmp	pcrunch_cderr	;AN022;
 22323                                  
 22324                                  trypeel:
 22325 00002C0F 8B36[80A0]              	mov	si,[PathPos]
 22326 00002C13 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 22327 00002C14 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 22328                                  	; 25/02/2023
 22329                                  	; MSDOS 5.0 (& 6.0)
 22330 00002C17 803E[40A2]00            	cmp	byte [KPARSE],0
 22331 00002C1C 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 22332                                  	
 22333 00002C1E E89BFF                  	call	pathchrcmp
 22334 00002C21 7475                    	jz	short peelfail	; Trailing '/'
 22335                                  delstrt:
 22336 00002C23 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 22337 00002C25 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 22338 00002C27 52                      	push	dx		; save ptr to pathname
 22339                                  delloop:
 22340 00002C28 39CE                    	cmp	si,cx
 22341                                  	;jz	short BADRET
 22342                                  	; 25/02/2023
 22343 00002C2A 7413                    	je	short gotdele	; no char's left, we have what we have
 22344 00002C2C AC                      	lodsb			; AL = next char of pathname
 22345 00002C2D E8DFFC                  	call	testkanj
 22346 00002C30 7403                    	jz	short notkanj8	; not Kanji, move along
 22347 00002C32 46                      	inc	si
 22348 00002C33 EBF3                    	jmp	short delloop	
 22349                                  
 22350                                  	; 25/02/2023
 22351                                  	; MSDOS 3.3
 22352                                  	;mov	al,[si]
 22353                                  	;call	PATHCHRCMP
 22354                                  	;jz	short TRYCD
 22355                                  	;dec	si
 22356                                  	;jmp	short delloop
 22357                                  
 22358                                  notkanj8:
 22359 00002C35 E884FF                  	call	pathchrcmp
 22360 00002C38 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 22361 00002C3A 89F2                    	mov	dx,si
 22362 00002C3C 4A                      	dec	dx		; DX = ptr to last delimiter found	
 22363 00002C3D EBE9                    	jmp	short delloop	; go look for more
 22364                                  
 22365                                  	; 25/02/2023
 22366                                  	; MSDOS 5.0 (& 6.0)
 22367                                  gotdele:
 22368 00002C3F 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 22369 00002C41 5A                      	pop	dx		; DX = ptr to pathname
 22370 00002C42 39D6                    	cmp	si,dx
 22371 00002C44 7454                    	je	short badret	; didn't find path delim
 22372 00002C46 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 22373 00002C48 89D6                    	mov	si,dx		; SI = ptr to pathname
 22374                                  delloop2:			; Set value of KPARSE
 22375 00002C4A 39CE                    	cmp	si,cx
 22376 00002C4C 7412                    	je	short trycd	; roll up till SI meets CX
 22377 00002C4E C606[40A2]00            	mov	byte [KPARSE],0
 22378 00002C53 AC                      	lodsb
 22379 00002C54 E8B8FC                  	call	testkanj
 22380 00002C57 74F1                    	jz	short delloop2
 22381 00002C59 46                      	inc	si
 22382 00002C5A FE06[40A2]              	inc	byte [KPARSE]
 22383 00002C5E EBEA                    	jmp	short delloop2
 22384                                  
 22385                                  trycd:
 22386 00002C60 50                      	push	ax
 22387                                  	; 25/02/2023
 22388 00002C61 B02E                    	mov	al,'.'
 22389                                  	;mov	al,[DOT_CHR]	; AL = '.'
 22390                                  	; MSDOS 6.0
 22391 00002C63 384401                  	cmp	[si+1],al	; check for '.' after path delim
 22392                                  				;M019; allow continuation if '. ' or 
 22393                                  				;M019; '..' is not found.
 22394 00002C66 7509                    	jne	short trycd1	;M019; '.' not found
 22395 00002C68 384402                  	cmp	[si+2],al	;M019; check for '..'
 22396 00002C6B 7404                    	je	short trycd1	;M019; found '..'
 22397 00002C6D 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 22398                                  trycd1:	
 22399 00002C71 58                      	pop     ax
 22400 00002C72 7424                    	jz	short peelfail	; if . or .., pure cd should have worked
 22401                                  
 22402                                  	; 25/02/2023
 22403                                  	; MSDOS 3.3
 22404                                  	;cmp	[si+1],	al	; check for '.' after path delim
 22405                                  	;pop	ax
 22406                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 22407                                  
 22408                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22409 00002C74 8A44FF                  	mov	al,[si-1]
 22410 00002C77 3C3A                    	cmp	al,':' 		; Special case d:\file
 22411 00002C79 741F                    	je	short badret
 22412                                  	; 25/02/2023
 22413                                  	; MSDOS 6.0
 22414 00002C7B 803E[40A2]00            	cmp	byte [KPARSE],0
 22415 00002C80 7505                    	jnz	short notdoublesl
 22416 00002C82 E837FF                  	call	pathchrcmp
 22417                                  	;jnz	short notdoublesl
 22418                                  				; Last char is 2nd KANJI byte, might be '\'
 22419                                  	; 25/02/2023
 22420 00002C85 7411                    	jz	short peelfail 
 22421                                  ;peelfail:
 22422                                  	;stc
 22423                                  	;retn
 22424                                  
 22425                                  notdoublesl:
 22426 00002C87 C60400                  	mov	byte [si],0
 22427                                  	;mov	ah,CHDir ; 3Bh
 22428 00002C8A B43B                    	mov	ah,3Bh
 22429 00002C8C CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22430                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22431 00002C8E 7320                    	jnc	short cdsucc
 22432                                  
 22433                                  	; 25/02/2023
 22434                                  	; MSDOS 6.0
 22435                                  pcrunch_cderr:
 22436 00002C90 E8AFF5                  	call	get_ext_error_number
 22437                                  				;AN022; get the extended error
 22438 00002C93 A3[25A2]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 22439 00002C96 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 22440                                  peelfail: ; 25/02/2023
 22441 00002C98 F9                      	stc			;AN022; set up carry flag
 22442                                  pcrunch_retn:
 22443 00002C99 C3                      	retn
 22444                                  
 22445                                  badret:
 22446                                  	; MSDOS 3.3 & MSDOS 6.0
 22447 00002C9A 8A04                    	mov	al,[si]
 22448 00002C9C E81DFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 22449 00002C9F F9                      	stc
 22450 00002CA0 75F7                    	jnz	short pcrunch_retn
 22451 00002CA2 30DB                    	xor	bl,bl
 22452 00002CA4 865C01                  	xchg	bl,[si+1]
 22453                                  	;mov	ah,CHDir ; 3Bh
 22454 00002CA7 B43B                    	mov	ah,3Bh
 22455 00002CA9 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22456                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22457                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 22458                                  	; 25/02/2023
 22459 00002CAB 72E3                    	jc	short pcrunch_cderr
 22460                                  				;AN022; go to error exit 
 22461 00002CAD 885C01                  	mov	[si+1],bl
 22462                                  cdsucc:
 22463 00002CB0 E87E05                  	call	SetRest1
 22464 00002CB3 46                      	inc	si		; Reset zero
 22465 00002CB4 8936[ACA0]              	mov	[DestTail],si
 22466                                  	; 25/02/2023
 22467                                  	; MSDOS 6.0
 22468 00002CB8 9C                      	pushf			;AN015; save flags
 22469 00002CB9 803E[88A0]FF            	cmp	byte [DirFlag],-1
 22470                                  				;AN015; don't do parse if in DIR
 22471 00002CBE 7408                    	je	short pcrunch_end
 22472                                  				;AN015;
 22473                                  	; MSDOS 3.3 & MSDOS 6.0
 22474 00002CC0 BF5C00                  	mov	di,FCB  ; 5Ch
 22475                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 22476 00002CC3 B80229                  	mov	ax,2902h	
 22477 00002CC6 CD21                    	int	21h		; Parse with default drive
 22478                                  			; DOS -	PARSE FILENAME
 22479                                  			; DS:SI	-> string to parse
 22480                                  			; ES:DI	-> buffer to fill with unopened	FCB
 22481                                  			; AL = bit mask	to control parsing
 22482                                  	; MSDOS 3.3
 22483                                  	;retn
 22484                                  
 22485                                  pcrunch_end:
 22486 00002CC8 9D                      	popf			;AN015; get flags back
 22487 00002CC9 C3                      	retn
 22488                                  
 22489                                  ;============================================================================
 22490                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 22491                                  ;============================================================================
 22492                                  ; 05/10/2018 - Retro DOS v3.0
 22493                                  
 22494                                  ;TITLE	Part7 COMMAND Transient Routines
 22495                                  
 22496                                  ;	More misc routines
 22497                                  
 22498                                  ;---------------------------
 22499                                  ; We can get rid of this switch processing code if we can take
 22500                                  ; care of the remaining two calls to switch, later in the file.
 22501                                  ; However, I have not checked whether or not any other files use
 22502                                  ; switch -- after all, it IS public!
 22503                                  ;---------------------------
 22504                                  
 22505                                  ; 14/06/2023
 22506                                  SWCOUNT	EQU 8	; MSDOS 6.22		; Length of switch_list
 22507                                  ; 28/03/2023
 22508                                  ;SWCOUNT  EQU  6  ; MSDOS 6.0 (& MSDOS 5.0)
 22509                                  ;;SWCOUNT EQU  5  ; MSDOS 3.3	
 22510                                  
 22511                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 22512                                  
 22513                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 22514                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 22515                                  
 22516                                  ; ---------------------------------------------------------------------------
 22517                                  
 22518                                  	; 25/02/2023
 22519                                  RETSW:
 22520 00002CCA 93                      	xchg	ax,bx		; Put switches in AX
 22521 00002CCB C3                      	retn
 22522                                  
 22523                                  ; =============== S U B	R O U T	I N E =======================================
 22524                                  
 22525                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22526                                  	; 11/06/2023 - Retro DOS 4.2 COMMAND.COM
 22527                                  SWITCH:
 22528 00002CCC 31DB                    	xor	bx,bx		; Initialize - no switches set
 22529                                  SWLOOP:
 22530 00002CCE E85DFE                  	call	scanoff		; Skip any delimiters
 22531 00002CD1 3A06[F79D]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 22532 00002CD5 75F3                    	jnz	short RETSW	; No -- we're finished
 22533 00002CD7 81CB0080                	or	bx,8000h
 22534                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 22535 00002CDB 46                      	inc	si		; Skip over the switch character
 22536 00002CDC E84FFE                  	call	scanoff
 22537 00002CDF 3C0D                    	cmp	al,0Dh
 22538 00002CE1 74E7                    	je	short RETSW	; Oops
 22539 00002CE3 46                      	inc	si
 22540                                  
 22541                                  	; Convert lower case input to upper case
 22542                                  
 22543 00002CE4 E852FC                  	call	UPCONV
 22544                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 22545                                  
 22546 00002CE7 BF[6097]                	mov	di,switch_list	; "-Y?VBAPW" (for MSDOS 6.22) ; 11/06/2023
 22547                                  				; "?VBAPW" (for MSDOS 6.0)
 22548                                  				; ("VBAPW" (for MSDOS 3.3))
 22549                                  	; 11/06/2023
 22550                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2E33h
 22551 00002CEA B90800                  	mov	cx,8  ; MSDOS 6.22	   	
 22552                                  	;mov	cx,6  ; MSDOS 6.0 (& MSDOS 5.0)
 22553                                  	;;mov	cx,5  ; MSDOS 3.3
 22554                                  	;;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 22555                                  		
 22556                                  	;nop
 22557                                  		
 22558 00002CED F2AE                    	repne	scasb		; Look for matching switch
 22559 00002CEF 7507                    	jnz	short BADSW
 22560 00002CF1 B80100                  	mov	ax,1
 22561 00002CF4 D3E0                    	shl	ax,cl		; Set a bit for the switch
 22562 00002CF6 09C3                    	or	bx,ax
 22563                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 22564 00002CF8 EBD4                    	jmp	short SWLOOP
 22565                                  ;BADSW:
 22566                                  	;jmp	short SWLOOP
 22567                                  ;DRVBAD:
 22568                                  ;	mov	dx,baddrv_ptr
 22569                                  ;	jmp	cerror
 22570                                  EXTERNALJ:
 22571 00002CFA E90501                  	jmp	EXTERNAL
 22572                                  FNDCOM:				; search the internal command table
 22573 00002CFD 08C0                    	or	al,al		; Get real length of first arg
 22574 00002CFF 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 22575                                  				;  to be external.
 22576                                  ; barryf code starts here
 22577                                  
 22578 00002D01 E82703                  	call	test_append	; see if APPEND installed
 22579 00002D04 7429                    	jz	short CONTCOM	; not loaded
 22580                                  
 22581                                  APPEND_INTERNAL:
 22582 00002D06 8A0E[AB9F]              	mov	cl,[IDLEN]
 22583 00002D0A B500                    	mov	ch,0
 22584 00002D0C 890E[80A0]              	mov	[PathPos],cx
 22585                                  	
 22586                                  	; 25/02/2023	
 22587                                  	; MSDOS 6.0
 22588 00002D10 FE06[27A2]              	inc 	byte [append_exec]
 22589                                  				;AN041; set APPEND to ON
 22590 00002D14 E8B603                  	call	IOSET		; re-direct the o'l io
 22591                                  
 22592 00002D17 BE[AB9F]                	mov	si,IDLEN	; address command name, DS already set	
 22593 00002D1A BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 22594                                  		
 22595                                  	; MSDOS 6.0
 22596 00002D1D BF[F954]                	mov	di,append_parse
 22597                                  				;AN010; Get the entry point for PARSE for APPEND
 22598                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22599 00002D20 B801AE                  	mov	ax,0AE01h
 22600 00002D23 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 22601                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 22602                                  			; DX = FFFFh, DS:SI -> buffer
 22603                                  			; Return: buffer at DS:SI filled with a	length byte
 22604                                  			; followed by the uppercase internal command
 22605                                  			; to execute (if length not 0)
 22606                                  	; 25/02/2023
 22607                                  	; INT 2Fh
 22608                                  	; 	AX = AE01h
 22609                                  	; entry:
 22610                                  	; 	DX = magic value FFFFh
 22611                                  	; 	CH = 00h
 22612                                  	; 	CL = length of command name
 22613                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 22614                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 22615                                  	; return:
 22616                                  	;	DS:SI buffer updated
 22617                                  	;	if length byte is nonzero, the following bytes contain
 22618                                  	;	the uppercase internal command to execute and the command line
 22619                                  	; 	buffer contains the command's parameters
 22620                                  	;	(the first DS:[SI] bytes are ignored)
 22621                                  	;
 22622                                  	; Format of COMMAND.COM command line buffer:
 22623                                  	;	Offset  Size    Description
 22624                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 22625                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 22626                                  	;	N BYTEs command line text, terminated by 0Dh
 22627                                  	;
 22628                                  	; Format of command name buffer:
 22629                                  	;	Offset  Size    Description
 22630                                  	;	00h     BYTE    length of command name
 22631                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 22632                                  
 22633 00002D25 803E[AB9F]00            	cmp	byte [IDLEN],0 ; execute requested
 22634 00002D2A 7503                    	jne	short CONTCOM
 22635 00002D2C E9A300                  	jmp	CMD_DONE
 22636                                  
 22637                                  	;nop
 22638                                  CONTCOM:			; continue with internal scan
 22639 00002D2F BF[DF95]                	mov	di,COMTAB
 22640 00002D32 31C9                    	xor	cx,cx
 22641                                  FINDCOM:
 22642 00002D34 BE[AC9F]                	mov	si,ID		; pointer to command argument
 22643 00002D37 8A0D                    	mov	cl,[di]		; load length of internal command
 22644 00002D39 47                      	inc	di		; advance past length
 22645 00002D3A E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 22646 00002D3C 3A0E[AB9F]              	cmp	cl,[IDLEN]	; that of the command argument
 22647 00002D40 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 22648 00002D42 890E[80A0]              	mov	[PathPos],cx	; store length of command
 22649 00002D46 F3A6                    	repe	cmpsb
 22650                                  ABCD:					
 22651 00002D48 9F                      	lahf			; save the good ol' flags
 22652 00002D49 01CF                    	add	di,cx		; skip over remaining internal, if any
 22653 00002D4B 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 22654 00002D4D A2[039E]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 22655 00002D50 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 22656 00002D51 8B1D                    	mov	bx,[di]		; load internal command address
 22657 00002D53 47                      	inc	di		; skip over the puppy
 22658 00002D54 47                      	inc	di
 22659                                  		
 22660                                  	; MSDOS 6.0
 22661 00002D55 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 22662 00002D57 47                      	inc	di
 22663 00002D58 47                      	inc	di
 22664 00002D59 9E                      	sahf			; remember those flags?
 22665 00002D5A 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 22666                                  
 22667                                  ; All messages get redirected.
 22668                                  
 22669 00002D5C 803E[27A2]00            	cmp     byte [append_exec],0
 22670                                  				;AN041; APPEND just executed?
 22671 00002D61 7503                    	jnz 	short DONT_SET_IO
 22672                                  				;AN041; Yes - this junk is already set
 22673 00002D63 E86703                  	call	IOSET		; re-direct the ol' i/o
 22674                                  
 22675                                  DONT_SET_IO:			;AN041;
 22676                                  
 22677                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 22678                                  ; respond to /? only if it is the only command-line argument.
 22679                                  
 22680 00002D66 A1[089E]                	mov	ax,[COMSW]	; AX = switches after command
 22681 00002D69 0B06[0E9E]              	or	ax,[AllSwitch]	; AX = all switches
 22682                                  	;and	ax,SwitchQues	
 22683 00002D6D 83E020                  	and	ax,20h
 22684 00002D70 7426                    	jz	short DRIVE_CHECK
 22685                                  				; /? not in command line
 22686 00002D72 F606[039E]04            	test	byte [CHKDRV],4	
 22687                                  	;test	byte [CHKDRV],fLimitHelp
 22688 00002D77 7407                    	jz	short DO_HELP	; /? allowed in combination
 22689                                  
 22690                                  ; Make sure /? is the only argument on the command line.
 22691                                  
 22692 00002D79 833E[01A5]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 22693 00002D7E 7518                    	jne	short DRIVE_CHECK
 22694                                  				; /? not only arg - ignore
 22695                                  
 22696                                  ; Note: this is all the check we need, even against things like /??.
 22697                                  ; Our argv parser breaks /?? into two args, /? and ?.
 22698                                  
 22699                                  DO_HELP:
 22700                                  ; DX = ptr to word list of msg #s, terminated by zero word
 22701                                  
 22702 00002D80 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 22703                                      	;mov	ax,no_subst	; AL = no subst's code
 22704 00002D82 B80000                  	mov	ax,0
 22705 00002D85 50                      	push	ax		; build subst block on stack
 22706                                  
 22707                                  NEXT_HELP_MSG:
 22708 00002D86 AD                      	lodsw			; AX = help msg # or zero
 22709 00002D87 09C0                    	or	ax,ax
 22710 00002D89 7409                    	jz	short HELP_DONE
 22711 00002D8B 50                      	push	ax		; SS:SP = ptr to subst block
 22712                                  				; (msg # and no_subst byte)
 22713                                  ;; We assume DS = SS.
 22714                                  	
 22715 00002D8C 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 22716 00002D8E E87E27                  	call	std_printf	; display help message	
 22717 00002D91 58                      	pop	ax		; remove msg # from stack
 22718 00002D92 EBF2                    	jmp	short NEXT_HELP_MSG
 22719                                  
 22720                                  HELP_DONE:
 22721 00002D94 58                      	pop	ax		; clean up stack
 22722 00002D95 E96CD3                  	jmp	TCOMMAND	
 22723                                  
 22724                                  	; 25/02/2023
 22725                                  	; MSDOS 3.3
 22726                                  	;sahf			; remember those flags?
 22727                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 22728                                  	;call	IOSET		; re-direct the ol' i/o
 22729                                  
 22730                                  DRIVE_CHECK:
 22731 00002D98 F606[039E]01            	test	byte [CHKDRV],1
 22732                                  	;test	byte [CHKDRV],FCHECKDRIVE 
 22733                                  				; did we wanna check those drives?
 22734 00002D9D 7411                    	jz	short NOCHECK
 22735 00002D9F A0[069E]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 22736 00002DA2 0A06[079E]              	or	al,[PARM2]	; us whether those drives were OK
 22737 00002DA6 3CFF                    	cmp	al,-1
 22738 00002DA8 7506                    	jne	short NOCHECK
 22739                                  	;jmp	DRVBAD
 22740                                  	; 25/02/2023
 22741                                  DRVBAD:
 22742 00002DAA BA[2C92]                	mov	dx,baddrv_ptr
 22743 00002DAD E9F200                  	jmp	cerror
 22744                                  
 22745                                  ; The user may have omitted the space between the command and its arguments.
 22746                                  ; We need to copy the remainder of the user's command line into the buffer.
 22747                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 22748                                  ; into the command line at 80.
 22749                                  
 22750                                  NOCHECK:
 22751 00002DB0 E85B02                  	call	cmd_copy
 22752                                  SWITCHECK:
 22753                                  	;test	byte [CHKDRV],2
 22754 00002DB3 F606[039E]02            	test	byte [CHKDRV],fSwitchAllowed 
 22755                                  				; Does the command take switches
 22756 00002DB8 7516                    	jnz	short REALWORK	; Yes, process the command
 22757 00002DBA E82F00                  	call	noswit		; No, check to see if any switches
 22758 00002DBD 7511                    	jnz	short REALWORK	; None, process the command
 22759                                  
 22760                                  	; MSDOS 6.0
 22761                                  	;mov	byte [msg_disp_class],2
 22762 00002DBF C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class
 22763                                  				;AN000; set up parse error msg class
 22764 00002DC4 BA[D091]                	mov	dx,extend_buf_ptr	
 22765                                  				;AC000; get extended message pointer
 22766                                  	;mov	word [extend_buf_ptr],3
 22767 00002DC7 C706[D091]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 22768                                  				;AN000; get "Invalid switch" message number
 22769 00002DCD E9D200                  	jmp	cerror		; Print error and chill out...
 22770                                  
 22771                                  	; 25/02/2023
 22772                                  	; MSDOS 3.3
 22773                                  	;mov	dx,BADPARMPTR
 22774                                  	;jmp	CERROR
 22775                                  
 22776                                  REALWORK:
 22777 00002DD0 FFD3                    	call	bx		; do some real work, at last
 22778                                  
 22779                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 22780                                  ; otherwise, go get another command.
 22781                                  
 22782                                  CMD_DONE:
 22783 00002DD2 0E                      	push	cs		; g  restore data segment
 22784 00002DD3 1F                      	pop	ds		; g
 22785 00002DD4 1E                      	push	ds
 22786 00002DD5 8E1E[F39D]              	mov	ds,[RESSEG]	; g  save data segment
 22787                                  	;cmp	byte [Call_Flag],1
 22788                                  				; G  Is a call in progress?
 22789 00002DD9 803E[4E02]01            	cmp	byte [Call_Flag],call_in_progress
 22790 00002DDE C606[4E02]00            	mov	byte [Call_Flag],0
 22791                                  				; G  Either way, reset flag
 22792 00002DE3 1F                      	pop	ds		; g  get data segment back
 22793 00002DE4 7403                    	jz	short INCALL	; G
 22794 00002DE6 E91BD3                  	jmp	TCOMMAND	; chill out...
 22795                                  INCALL:
 22796                                  	;jmp	DOCOM1
 22797                                  	; 11/06/2023
 22798                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 22799 00002DE9 E907D5                  	jmp	DOCOM0
 22800                                  
 22801                                  ; =============== S U B	R O U T	I N E =======================================
 22802                                  
 22803                                  	; 25/02/2023
 22804                                  noswit:
 22805 00002DEC 57                      	push	di		; Save di
 22806 00002DED BF8100                  	mov	di,81h		; di = ptr to command args
 22807 00002DF0 BE8000                  	mov	si,80h		; Get address of length of command args
 22808 00002DF3 AC                      	lodsb			; Load length
 22809 00002DF4 88C1                    	mov	cl,al		; Move length to cl
 22810 00002DF6 30ED                    	xor	ch,ch		; Zero ch
 22811 00002DF8 2EA0[F79D]              	mov	al,[cs:SWITCHAR] ; al = switch character
 22812                                  	;cmp	al,0		; Turn off ZF
 22813                                  	; 25/02/2023
 22814 00002DFC 20C0                    	and	al,al
 22815 00002DFE F2AE                    	repne	scasb		; Scan for a switch character and return
 22816 00002E00 5F                      	pop	di		;  with ZF set if one was found
 22817 00002E01 C3                      	retn
 22818                                  
 22819                                  ; ---------------------------------------------------------------------------
 22820                                  
 22821                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22822                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 22823                                  
 22824                                  EXTERNAL:
 22825 00002E02 E82602                  	call	test_append	; check to see if append installed
 22826 00002E05 7403                    	jz	short NOT_BARRYF
 22827                                  				; no - truly external command
 22828 00002E07 E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 22829                                  
 22830                                  NOT_BARRYF:
 22831 00002E0A 2EC606[049E]00          	mov	byte [cs:FILTYP],0
 22832 00002E10 2E8A16[119E]            	mov	dl,[cs:SPECDRV]
 22833 00002E15 2E8816[AB9F]            	mov	[cs:IDLEN],dl
 22834 00002E1A 2EC606[A5A0]00          	mov	byte [cs:ROM_CALL],0
 22835 00002E20 52                      	push	dx
 22836 00002E21 BA[AB9F]                	mov	dx,IDLEN
 22837 00002E24 E8A6D6                  	call	ROM_SCAN
 22838 00002E27 5A                      	pop	dx
 22839                                  	;jnc	short POSTSAVE
 22840 00002E28 7305                    	jnc	short DO_SCAN
 22841 00002E2A 2EFE06[A5A0]            	inc	byte [cs:ROM_CALL]
 22842                                  	;jmp	short POSTSAVE
 22843                                  
 22844                                  	;nop
 22845                                  DO_SCAN:
 22846                                  POSTSAVE:
 22847 00002E2F BF[1B9D]                	mov	di,EXECPATH
 22848 00002E32 C60500                  	mov	byte [di],0	; Initialize to current directory
 22849                                  	
 22850 00002E35 2E803E[A5A0]00          	cmp	byte [cs:ROM_CALL],0
 22851                                  	;jz	short RESEARCH
 22852                                  	; 25/02/2023
 22853                                  	;jmp	short NEOEXECUTE
 22854 00002E3B 750F                    	jnz	short NEOEXECUTE	
 22855                                  
 22856                                  	;nop
 22857                                  RESEARCH:
 22858 00002E3D E87008                  	call	path_search	; find the mother (result in execpath)
 22859 00002E40 09C0                    	or	ax,ax		; did we find anything?
 22860                                  	;jz	short BADCOMJ45	; null means no (sob)
 22861                                  	; 25/02/2023
 22862 00002E42 7459                    	jz	short BADCOM
 22863 00002E44 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 22864                                  				; fuckin' sixteen-bit machine ought
 22865                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 22866                                  				; DISPLACEMENT!!
 22867                                  	;;jmp	short NEOEXECUTE
 22868                                  	;jmp	short EXECUTE	
 22869                                  	; 25/02/2023
 22870 00002E47 7D03                    	jnl	short EXECUTE ; jge
 22871                                  
 22872                                  	; 02H is .bat
 22873                                  
 22874                                  	;nop
 22875                                  BATCOMJ:
 22876 00002E49 E911DA                  	jmp	BATCOM
 22877                                  
 22878                                  	; 25/02/2023
 22879                                  ;BADCOMJ45:
 22880                                  	;jmp	short BADCOM
 22881                                  
 22882                                  	;nop
 22883                                  EXECUTE:
 22884                                  NEOEXECUTE:
 22885 00002E4C E87E02                  	call	IOSET
 22886                                  
 22887                                  ; MSDOS 6.0
 22888                                  ;M051
 22889                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 22890                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 22891                                  ;After a close, this would still leave one open active resulting in sharing
 22892                                  ;errors on subsequent opens of the redirected file.
 22893                                  
 22894                                  LH_EXECUTE:			;M051	
 22895 00002E4F 8E06[019E]              	mov	es,[TRAN_TPA]
 22896                                  	;mov	ah,DEALLOC ; 49h
 22897 00002E53 B449                    	mov	ah,49h
 22898 00002E55 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 22899                                  			; ES = segment address of area to be freed
 22900                                  				; Now running in "free" space
 22901 00002E57 8E06[F39D]              	mov	es,[RESSEG]
 22902 00002E5B 26FE06[3702]            	inc	byte [es:ExtCom] ; Indicate external command
 22903 00002E60 26C606[3F02]00          	mov	byte [es:RestDir],0 
 22904                                  				; Since USERDIR1 is in transient, insure
 22905                                  				; this flag value for re-entry to COMMAND
 22906                                  	; MSDOS 6.0
 22907 00002E66 BE[1B9D]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 22908 00002E69 BF[0004]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 22909                                  	;mov	cx,LENMSGORPATHBUF
 22910 00002E6C B95000                  	mov	cx,80
 22911 00002E6F FC                      	cld
 22912 00002E70 F3A4                    	rep	movsb		; copy program pathname to resident
 22913                                  
 22914                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22915 00002E72 BF5C00                  	mov	di,FCB ; 5Ch
 22916 00002E75 89FE                    	mov	si,di
 22917                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 22918 00002E77 B152                    	mov	cl,82 ; 25/02/2023
 22919 00002E79 F3A5                    	rep	movsw		; Transfer parameters to resident header
 22920                                  	
 22921                                  	; 25/02/2023
 22922                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 22923                                  	; MSDOS 6.0 (& 5.0)
 22924                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 22925 00002E7B BA[0004]                	mov	dx,SafePathBuffer
 22926 00002E7E 06                      	push	es
 22927 00002E7F 1F                      	pop	ds
 22928                                  
 22929                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 22930 00002E80 BB[DC03]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 22931                                  	;mov	ax,EXEC*256 ; 4B00h
 22932 00002E83 B8004B                  	mov	ax,4B00h
 22933                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 22934 00002E86 2EF606[A5A0]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 22935 00002E8C 7403                    	jz	short OK_EXEC
 22936 00002E8E E9B5D6                  	jmp	ROM_EXEC
 22937                                  
 22938                                  OK_EXEC:
 22939                                  
 22940                                  ; we are now running in free space. Anything we do from here on may get
 22941                                  ; trashed. Move the stack (also in free space) to allocated space because
 22942                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 22943                                  
 22944 00002E91 8CC1                    	mov	cx,es
 22945 00002E93 8ED1                    	mov	ss,cx
 22946 00002E95 BC[D404]                	mov	sp,RStack
 22947                                  	; MSDOS 3.3
 22948                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 22949                                  	; 25/02/2023
 22950                                  	; MSDOS 6.0
 22951 00002E98 2EFF2E[F99D]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 22952                                  
 22953                                  ; ---------------------------------------------------------------------------
 22954                                  
 22955                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22956                                  BADCOM:
 22957 00002E9D 0E                      	push	cs
 22958 00002E9E 1F                      	pop	ds
 22959 00002E9F BA[F391]                	mov	dx,BADNAM_PTR
 22960                                  cerror:		
 22961 00002EA2 E86226                  	call	std_eprintf
 22962 00002EA5 E95CD2                  	jmp	TCOMMAND
 22963                                  
 22964                                  ; =============== S U B	R O U T	I N E =======================================
 22965                                  
 22966                                  ; Prescan converts the input buffer into a canonicalized form.
 22967                                  ; All redirections and pipes are removed.
 22968                                  
 22969                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22970                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 22971                                  
 22972                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 22973                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2FFBh
 22974                                  
 22975                                  PRESCAN:
 22976 00002EA8 31C9                    	xor	cx,cx
 22977 00002EAA 8E06[F39D]              	mov	es,[RESSEG]
 22978 00002EAE BE[549C]                	mov	si,COMBUF+2
 22979 00002EB1 89F7                    	mov	di,si
 22980                                  COUNTQUOTES:
 22981 00002EB3 AC                      	lodsb			; get a byte
 22982 00002EB4 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 22983 00002EB6 7504                    	jne	short COUNTEND	; no, try for end of road
 22984 00002EB8 FEC5                    	inc	ch		; bump count
 22985 00002EBA EBF7                    	jmp	short COUNTQUOTES
 22986                                  				; go get next char
 22987                                  COUNTEND:
 22988 00002EBC 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 22989 00002EBE 75F3                    	jne	short COUNTQUOTES
 22990                                  				; no, go back for next char
 22991                                  	; 26/02/2023
 22992                                  	; MSDOS 5.0 (& 6.0)
 22993 00002EC0 51                      	push	cx		; save count
 22994 00002EC1 89FE                    	mov	si,di		; restore pointer to begining
 22995                                  KanjiScan:
 22996 00002EC3 AC                      	lodsb			; get a byte
 22997 00002EC4 E848FA                  	call	testkanj	; is it a leadin byte
 22998 00002EC7 740F                    	jz	short KanjiQuote
 22999                                  				; no, check for quotes
 23000 00002EC9 88C4                    	mov	ah,al		; save leadin
 23001 00002ECB AC                      	lodsb			; get trailing byte
 23002 00002ECC 3D2020                  	cmp	ax,2020h
 23003                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 23004 00002ECF 75F2                    	jne	short KanjiScan	; no, go get next
 23005 00002ED1 C744FE2020              	mov	word [si-2],2020h
 23006                                  				; replace with spaces
 23007 00002ED6 EBEB                    	jmp	short KanjiScan	; go get next char
 23008                                  	
 23009                                  KanjiQuote:
 23010 00002ED8 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 23011 00002EDA 750D                    	jne	short KanjiEnd	; no, check for end
 23012 00002EDC FECD                    	dec	ch		; drop count
 23013 00002EDE 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 23014                                  KanjiQuoteLoop:
 23015 00002EE0 AC                      	lodsb			; get next byte
 23016 00002EE1 3C22                    	cmp	al,22h	; '"'	; is it another quote
 23017 00002EE3 75FB                    	jne	short KanjiQuoteLoop
 23018                                  				; no, get another
 23019 00002EE5 FECD                    	dec	ch		; yes, drop count
 23020 00002EE7 EBDA                    	jmp	short KanjiScan	; go get next char
 23021                                  KanjiEnd:
 23022 00002EE9 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 23023 00002EEB 75D6                    	jne	short KanjiScan	; go back to beginning
 23024 00002EED 59                      	pop	cx		; get back original count
 23025                                  	; 26/04/2023
 23026 00002EEE 89FE                    	mov	si,di		; restore pointer to beginning
 23027                                  	
 23028                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23029                                  PRESCANLP:
 23030 00002EF0 AC                      	lodsb
 23031                                  	; 26/02/2023
 23032 00002EF1 E81BFA                  	call	testkanj
 23033 00002EF4 740C                    	jz	short NOTKANJ6
 23034                                  	; MSDOS 6.0
 23035 00002EF6 8805                    	mov	[di],al
 23036 00002EF8 47                      	inc	di		; fake STOSB into DS
 23037 00002EF9 AC                      	lodsb			; grab second byte
 23038 00002EFA 8805                    	mov	[di],al		; fake stosb into DS
 23039 00002EFC FEC1                    	inc	cl
 23040 00002EFE FEC1                    	inc	cl
 23041 00002F00 EBEE                    	jmp	short PRESCANLP
 23042                                  
 23043                                  NOTKANJ6:
 23044                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23045 00002F02 3C22                    	cmp	al,'"'	; 22h	; " character
 23046 00002F04 7510                    	jne	short TRYGREATER
 23047 00002F06 FECD                    	dec	ch
 23048 00002F08 740C                    	jz	short TRYGREATER
 23049                                  QLOOP:
 23050 00002F0A 8805                    	mov	[di],al
 23051 00002F0C 47                      	inc	di
 23052 00002F0D FEC1                    	inc	cl
 23053 00002F0F AC                      	lodsb
 23054 00002F10 3C22                    	cmp	al,'"'		; " character
 23055 00002F12 75F6                    	jne	short QLOOP
 23056 00002F14 FECD                    	dec	ch
 23057                                  TRYGREATER:
 23058 00002F16 3C3E                    	cmp	al,'>' ; 3Eh
 23059                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 23060                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 23061 00002F18 7557                    	jne	short NOOUT
 23062                                  
 23063                                  ; We have found a ">" char. We need to see if there is another ">"
 23064                                  ; following it.
 23065                                  
 23066 00002F1A 3804                    	cmp	[si],al
 23067 00002F1C 7506                    	jne	short NOAPPND
 23068 00002F1E AC                      	lodsb
 23069 00002F1F 26FE06[6302]            	inc	byte [es:Re_Out_App] ; Flag >>
 23070                                  NOAPPND:
 23071                                  ; Now we attempt to find the file name. First, scan off all whitespace
 23072                                  
 23073 00002F24 E807FC                  	call	scanoff
 23074                                  
 23075                                  	; 26/02/2023
 23076                                  	; MSDOS 6.0
 23077 00002F27 3C3C                    	cmp	al,'<' ; 3Ch
 23078                                  	;cmp	al,labracket	;AN040; was there no filename?
 23079 00002F29 7404                    	je	short REOUT_ERRSET
 23080                                  				;AN040; yes - set up error
 23081                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23082 00002F2B 3C0D                    	cmp	al,0Dh
 23083 00002F2D 750D                    	jnz	short GOTREOFIL
 23084                                  
 23085                                  ; There was no file present. Set us up at end-of-line.
 23086                                  
 23087                                  REOUT_ERRSET:			;AN040; set up for an error
 23088 00002F2F C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 23089 00002F32 26C706[6402]0900        	mov	word [es:Re_OutStr],9
 23090                                  				; Cause an error later
 23091 00002F39 E9A900                  	jmp	PRESCANEND
 23092                                  
 23093                                  GOTREOFIL:
 23094 00002F3C 57                      	push	di
 23095                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 23096 00002F3D BF[6402]                	mov	di,Re_OutStr
 23097 00002F40 89FB                    	mov	bx,di
 23098 00002F42 06                      	push	es
 23099                                  
 23100                                  	; 26/02/2023
 23101                                  	; MSDOS 6.0
 23102                                  SETREOUTSTR:			; Get the output redirection name
 23103                                  				; MSKK06 07/14/89
 23104 00002F43 51                      	push	cx		; save cx
 23105 00002F44 B94D00                  	mov	cx,64+13	; CX = max string length
 23106                                  SETREOUTSTR_LOOP:
 23107 00002F47 AC                      	lodsb
 23108 00002F48 3C0D                    	cmp	al,0Dh
 23109 00002F4A 741A                    	je	short GOTRESTR_J
 23110 00002F4C E8E7FB                  	call	DELIM
 23111 00002F4F 7415                    	jz	short GOTRESTR_J
 23112 00002F51 3A06[F79D]              	cmp	al,[SWITCHAR]
 23113 00002F55 740F                    	je	short GOTRESTR_J
 23114 00002F57 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 23115 00002F59 7413                    	je	short PIPEERRSYNJ5_J
 23116                                  				;AN033; Yes - get out quick - or system crashes
 23117 00002F5B 3C3C                    	cmp	al,'<' ; 3Ch
 23118                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 23119 00002F5D 7404                    	je	short ABRACKET_TERM
 23120                                  				;AN002; yes - end of string
 23121 00002F5F 3C3E                    	cmp	al,'>' ; 3Eh
 23122                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 23123 00002F61 7506                    	jne	short NO_ABRACKET
 23124                                  				;AN002; no - not end of string
 23125                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 23126 00002F63 4E                      	dec	si		;AN002; back up over symbol
 23127 00002F64 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 23128                                  GOTRESTR_J:
 23129 00002F66 59                      	pop	cx		; MSKK06 07/14/89
 23130 00002F67 EB58                    	jmp	short GOTRESTR	;AN002; go process it
 23131                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 23132 00002F69 AA                      	stosb			; store it into resgroup
 23133 00002F6A E2DB                    	loop	SETREOUTSTR_LOOP
 23134                                  				; MSKK06 07/14/89
 23135 00002F6C EBF8                    	jmp	short GOTRESTR_J
 23136                                  PIPEERRSYNJ5_J:
 23137 00002F6E 59                      	pop	cx		; recover CX
 23138 00002F6F EB4B                    	jmp	short PIPEERRSYNJ5
 23139                                  
 23140                                  	; 26/02/2023
 23141                                  ;	; MSDOS 3.3
 23142                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 23143                                  ;	lodsb
 23144                                  ;	cmp	al,0Dh
 23145                                  ;	jz	short GOTRESTR
 23146                                  ;	call	DELIM
 23147                                  ;	jz	short GOTRESTR
 23148                                  ;	cmp	al,[SWITCHAR]
 23149                                  ;	je	short GOTRESTR
 23150                                  ;	cmp	al,'"'
 23151                                  ;	jne	short NO_ABRACKET
 23152                                  ;	dec	ch
 23153                                  ;NO_ABRACKET:
 23154                                  ;	stosb
 23155                                  ;	jmp	short SETREOUTSTR_LOOP
 23156                                  
 23157                                  NOOUT:
 23158                                  	; 26/02/2023
 23159                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23160 00002F71 3C3C                    	cmp	al, '<' ; 3Ch
 23161                                  	;cmp	al,labracket	; MSDOS 6.0
 23162                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 23163 00002F73 7523                    	jne	short CHKPIPE
 23164 00002F75 89F3                    	mov	bx,si		; Save loc of "<"
 23165 00002F77 E8B4FB                  	call	scanoff
 23166                                  	; MSDOS 6.0
 23167 00002F7A 3C3E                    	cmp	al,'>' ; 3Eh
 23168                                  	;cmp	al,rabracket	;AN040; was there no filename?
 23169 00002F7C 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 23170                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23171 00002F7E 3C0D                    	cmp	al,0Dh
 23172 00002F80 750B                    	jne	short GOTREIFIL
 23173                                  REIN_ERRSET:			;AN040; set up for error
 23174 00002F82 C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 23175 00002F85 C706[9E9D]0900          	mov	word [RE_INSTR],9 
 23176                                  				; Cause an error later
 23177 00002F8B EB58                    	jmp	short PRESCANEND
 23178                                  GOTREIFIL:
 23179 00002F8D 57                      	push	di
 23180 00002F8E BF[9E9D]                	mov	di,RE_INSTR
 23181 00002F91 89FB                    	mov	bx,di
 23182 00002F93 06                      	push	es
 23183 00002F94 0E                      	push	cs
 23184 00002F95 07                      	pop	es		; store in TRANGROUP
 23185                                  	; 26/04/2023
 23186                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 23187 00002F96 EBAB                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 23188                                  				; Get the input redirection name
 23189                                  CHKPIPE:
 23190 00002F98 88C4                    	mov	ah,al
 23191                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23192 00002F9A 80FC7C                  	cmp	ah,'|' ; 7Ch
 23193                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 23194                                  	;je	short ISPIPE3
 23195                                  	;; MSDOS 6.0
 23196                                  	;cmp	ah,'|' ; 7Ch
 23197                                  	;;cmp	al,vbar ; 7Ch
 23198                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 23199 00002F9D 7539                    	jne	short CONTPRESCAN
 23200                                  ISPIPE3:
 23201                                  ; Only push the echo flag if we are entering the pipe for the first time.
 23202                                  
 23203 00002F9F 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23204 00002FA5 7505                    	jne	short NOECHOPUSH
 23205 00002FA7 26D026[3B02]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 23206                                  NOECHOPUSH:
 23207 00002FAC 26FE06[B502]            	inc	byte [es:PipeFlag]
 23208 00002FB1 E87AFB                  	call	scanoff
 23209 00002FB4 3C0D                    	cmp	al,0Dh
 23210 00002FB6 7404                    	je	short PIPEERRSYNJ5
 23211                                  	; 26/02/2023
 23212 00002FB8 3C7C                    	cmp	al,'|' ; 7Ch
 23213                                  	;cmp	al,ALTPIPECHR ; 7Ch
 23214                                  	;je	short PIPEERRSYNJ5
 23215                                  	;; MSDOS 6.0
 23216                                  	;cmp	al,'|' ; 7Ch
 23217                                  	;;cmp	al,vbar ; 7Ch
 23218                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 23219 00002FBA 751C                    	jne	short CONTPRESCAN
 23220                                  
 23221                                  PIPEERRSYNJ5:
 23222 00002FBC 06                      	push	es
 23223 00002FBD 1F                      	pop	ds
 23224 00002FBE E99C02                  	jmp	PIPEERRSYN
 23225                                  
 23226                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 23227                                  ; than just a : in the redir string.
 23228                                  
 23229                                  GOTRESTR:
 23230 00002FC1 86E0                    	xchg	ah,al
 23231 00002FC3 B03A                    	mov	al,':' ; 3Ah
 23232 00002FC5 29FB                    	sub	bx,di		; compute negative of number of chars
 23233 00002FC7 83FBFF                  	cmp	bx,-1		; is there just a :?
 23234 00002FCA 7407                    	je	short NOTRAILCOL ; yep, don't change
 23235 00002FCC 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 23236 00002FD0 7501                    	jne	short NOTRAILCOL
 23237 00002FD2 4F                      	dec	di		; Back up over trailing ':'
 23238                                  NOTRAILCOL:
 23239 00002FD3 30C0                    	xor	al,al
 23240 00002FD5 AA                      	stosb			; NUL terminate the string
 23241 00002FD6 07                      	pop	es
 23242 00002FD7 5F                      	pop	di		; Remember the start
 23243                                  CONTPRESCAN:
 23244 00002FD8 8825                    	mov	[di],ah		; "delete" the redirection string
 23245 00002FDA 47                      	inc	di
 23246 00002FDB 80FC0D                  	cmp	ah,0Dh
 23247 00002FDE 7405                    	je	short PRESCANEND
 23248 00002FE0 FEC1                    	inc	cl
 23249 00002FE2 E90BFF                  	jmp	PRESCANLP
 23250                                  PRESCANEND:
 23251 00002FE5 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23252 00002FEB 7414                    	jz	short ISNOPIPE
 23253                                  
 23254                                  	; 11/06/2023
 23255                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:314Ah
 23256                                  	;mov	di,48Ah		; PipeStr ; RESGROUP:EndInit+160
 23257                                  	;mov	[es:488h],di	; [es:PipePtr],di
 23258                                  				; (RESGROUP:EndInit+158)
 23259                                  	; 26/02/2023
 23260                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 23261                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 23262                                  	;;			; (EndInit+160]
 23263                                  	;mov	di,offset RESGROUP:PIPESTR
 23264 00002FED BF[5703]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 23265                                  
 23266                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 23267                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 23268 00002FF0 26893E[5503]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 23269                                  	
 23270 00002FF5 BE[549C]                	mov	si,COMBUF+2
 23271 00002FF8 E833FB                  	call	scanoff
 23272                                  PIPESETLP:			; Transfer the pipe into the resident
 23273 00002FFB AC                      	lodsb			; pipe buffer
 23274 00002FFC AA                      	stosb
 23275 00002FFD 3C0D                    	cmp	al,0Dh
 23276 00002FFF 75FA                    	jnz	short PIPESETLP
 23277                                  ISNOPIPE:
 23278 00003001 880E[539C]              	mov	[COMBUF+1],cl
 23279 00003005 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23280 0000300B 0E                      	push	cs
 23281 0000300C 07                      	pop	es
 23282 0000300D C3                      	retn
 23283                                  
 23284                                  ; =============== S U B	R O U T	I N E =======================================
 23285                                  
 23286                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23287                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 23288                                  cmd_copy:
 23289 0000300E BE[549C]                	mov	si,COMBUF+2
 23290 00003011 E81AFB                  	call	scanoff		; advance past separators...
 23291 00003014 0336[80A0]              	add	si,[PathPos]
 23292 00003018 BF8100                  	mov	di,81h
 23293 0000301B 31C9                    	xor	cx,cx
 23294                                  cmdcopy:
 23295 0000301D AC                      	lodsb
 23296 0000301E AA                      	stosb
 23297 0000301F 3C0D                    	cmp	al,0Dh
 23298 00003021 7403                    	je	short copy_done
 23299 00003023 41                      	inc	cx
 23300 00003024 EBF7                    	jmp	short cmdcopy
 23301                                  copy_done:
 23302 00003026 880E8000                	mov	[80h],cl
 23303 0000302A C3                      	retn
 23304                                  
 23305                                  ; =============== S U B	R O U T	I N E =======================================
 23306                                  
 23307                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23308                                  test_append:
 23309 0000302B BB[529C]                	mov	bx,COMBUF	; barry can address
 23310 0000302E BE[AB9F]                	mov	si,IDLEN	; address command name, DS already set 	
 23311 00003031 BAFFFF                  	mov	dx,-1
 23312 00003034 B800AE                  	mov	ax,0AE00h
 23313 00003037 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 23314                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 23315                                  			; DX = FFFFh,[BX -> command line
 23316                                  			; Return: AL = FFh if this command is a TSR extension 
 23317                                  			;		   to COMMAND.COM
 23318                                  			; AL = 00h if the command should be executed as	usual
 23319                                  	;cmp	al,0
 23320 00003039 08C0                    	or	al,al ; 25/02/2023
 23321 0000303B C3                      	retn
 23322                                  
 23323                                  	; 25/02/2023
 23324                                  	; INT 2Fh
 23325                                  	; 	AX = AE00h
 23326                                  	; entry:
 23327                                  	; 	DX = magic value FFFFh
 23328                                  	; 	CH = FFh
 23329                                  	; 	CL = length of command line tail
 23330                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 23331                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 23332                                  	; return:
 23333                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 23334                                  	;	AL = 00h if the command should be executed as usual
 23335                                  	;
 23336                                  	; Format of COMMAND.COM command line buffer:
 23337                                  	;	Offset  Size    Description
 23338                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 23339                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 23340                                  	;	N BYTEs command line text, terminated by 0Dh
 23341                                  	;
 23342                                  	; Format of command name buffer:
 23343                                  	;	Offset  Size    Description
 23344                                  	;	00h     BYTE    length of command name
 23345                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 23346                                  
 23347                                  ;============================================================================
 23348                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 23349                                  ;============================================================================
 23350                                  ; 05/10/2018 - Retro DOS v3.0
 23351                                  
 23352                                  ;	More misc routines
 23353                                  
 23354                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 23355                                  
 23356                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23357                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 23358                                  
 23359                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23360                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3199h
 23361                                  
 23362                                  ; =============== S U B	R O U T	I N E =======================================
 23363                                  
 23364                                  SETPATH:
 23365                                  
 23366                                  ; ENTRY PathPos = ptr to string
 23367                                  ;       PathCnt = length of string
 23368                                  ;
 23369                                  ; EXIT  PathPos = ptr to string after pathname
 23370                                  ;       PathCnt = length of rest of string
 23371                                  ;       DX = ptr to pathname in string, made ASCIIZ
 23372                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 23373                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 23374                                  ;
 23375                                  ;       A null character is dropped at the end of the pathname. If the
 23376                                  ;       character in that spot previously was CR, it is copied into the
 23377                                  ;       following byte. So there must be at least two two character 
 23378                                  ;       positions in the buffer following the pathname.
 23379                                  
 23380                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23381                                  	
 23382                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23383                                  	; MSDOS 6.0
 23384                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 23385                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 23386                                  
 23387                                  	; 26/02/2023
 23388                                  	; MSDOS 3.3
 23389                                  	;mov	si,80h
 23390                                  	;lodsb
 23391                                  	;xor	ah,ah
 23392                                  	;mov	[PATCNT],ax
 23393                                  	;mov	[PATHPOS],si
 23394                                  GETPATH:
 23395                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23396 0000303C C606[AEA0]00            	mov	byte [DestInfo],0
 23397 00003041 C606[AAA0]00            	mov	byte [DestIsDir],0
 23398 00003046 8B36[80A0]              	mov	si,[PathPos]	; SI = ptr to string
 23399 0000304A 8B0E[7EA0]              	mov	cx,[PathCnt]	; CX = string length
 23400 0000304E 89F2                    	mov	dx,si		; DX = ptr to string
 23401 00003050 E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 23402 00003052 51                      	push	cx		; save string length
 23403 00003053 56                      	push	si		; save ptr to string
 23404 00003054 E875FC                  	call	SWITCH
 23405                                  
 23406                                  ;       After Switch, SI has been scanned past any switches, and
 23407                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 23408                                  
 23409 00003057 A3[82A0]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 23410 0000305A 5B                      	pop	bx		; BX = ptr to original string
 23411 0000305B 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 23412 0000305D 59                      	pop	cx		; CX = string length
 23413 0000305E 01D9                    	add	cx,bx		; CX = string length from current SI
 23414 00003060 89F2                    	mov	dx,si		; DX = ptr to current string
 23415                                  SKIPPATH:
 23416                                  	; 26/02/2023
 23417                                  	; MSDOS 6.0
 23418 00003062 C606[40A2]00            	mov	byte [KPARSE],0
 23419                                  SKIPPATH2:
 23420 00003067 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 23421 00003069 49                      	dec	cx		; CX = length left after next char
 23422 0000306A AC                      	lodsb			; AL = next char of string
 23423                                  				; SI = ptr to char after this one
 23424                                  	; 26/02/2023
 23425 0000306B E8A1F8                  	call	testkanj
 23426 0000306E 7408                    	jz	short TESTPPSEP
 23427 00003070 49                      	dec	cx
 23428 00003071 46                      	inc	si
 23429 00003072 FE06[40A2]              	inc	byte [KPARSE]
 23430 00003076 EBEF                    	jmp	short SKIPPATH2
 23431                                  TESTPPSEP:
 23432 00003078 E841FB                  	call	pathchrcmp	; compare AL to path delimiter char
 23433 0000307B 7504                    	jnz	short TESTPMETA	; it's not a path delim
 23434 0000307D FE06[AAA0]              	inc	byte [DestIsDir]
 23435                                  				; DestIsDir = 1, signalling path char
 23436                                  TESTPMETA:
 23437 00003081 3C3F                    	cmp	al,'?'
 23438 00003083 7505                    	jne	short TESTPSTAR	; char is not '?'
 23439 00003085 800E[AEA0]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 23440                                  TESTPSTAR:
 23441 0000308A 3C2A                    	cmp	al,'*'
 23442                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 23443 0000308C 7505                    	jne	short TESTPDELIM ; char is not '*'
 23444 0000308E 800E[AEA0]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 23445                                  TESTPDELIM:
 23446 00003093 E8A0FA                  	call	DELIM		; compare AL to all delimiters
 23447 00003096 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 23448 00003098 3A06[F79D]              	cmp	al,[SWITCHAR]
 23449 0000309C 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 23450                                  PATHDONEDEC:
 23451 0000309E 4E                      	dec	si		; SI = ptr to char after pathname
 23452                                  PATHDONE:
 23453 0000309F 30C0                    	xor	al,al		; AL = NULL
 23454 000030A1 8604                    	xchg	al,[si]		; place NULL after pathname
 23455 000030A3 46                      	inc	si		; SI = ptr to byte after NULL
 23456 000030A4 3C0D                    	cmp	al,0Dh		; were we at end of line?
 23457 000030A6 7502                    	jne	short NOPSTORE	; not EOL, finish up
 23458 000030A8 8804                    	mov	[si],al		; save EOL after NULL
 23459                                  NOPSTORE:
 23460 000030AA 8936[80A0]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 23461 000030AE 890E[7EA0]              	mov	[PathCnt],cx	; PathCnt = length of string left
 23462                                  SETPATH_RETN:
 23463 000030B2 C3                      	retn
 23464                                  
 23465                                  ; ---------------------------------------------------------------------------
 23466                                  
 23467                                  PGETARG:
 23468 000030B3 BE8000                  	mov	si,80h
 23469 000030B6 AC                      	lodsb
 23470 000030B7 08C0                    	or	al,al
 23471 000030B9 74F7                    	jz	short SETPATH_RETN
 23472 000030BB E80300                  	call	PSCANOFF
 23473 000030BE 3C0D                    	cmp	al,0Dh
 23474 000030C0 C3                      	retn
 23475                                  
 23476                                  ; ---------------------------------------------------------------------------
 23477                                  
 23478                                  PSCANOFF:
 23479 000030C1 AC                      	lodsb
 23480 000030C2 E871FA                  	call	DELIM
 23481 000030C5 7504                    	jnz	short PSCANOFFD
 23482 000030C7 3C3B                    	cmp	al,';' ; 3Bh
 23483 000030C9 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 23484                                  PSCANOFFD:
 23485 000030CB 4E                      	dec	si		; Point to first non-delimiter
 23486 000030CC C3                      	retn
 23487                                  
 23488                                  ; =============== S U B	R O U T	I N E =======================================
 23489                                  
 23490                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23491                                  IOSET:
 23492                                  	; ALL REGISTERS PRESERVED
 23493 000030CD 1E                      	push	ds
 23494 000030CE 52                      	push	dx
 23495 000030CF 50                      	push	ax
 23496 000030D0 53                      	push	bx
 23497 000030D1 51                      	push	cx
 23498 000030D2 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 23499 000030D7 803E[B502]00            	cmp	byte [PipeFlag],0
 23500 000030DC 750D                    	jne	short NOREDIR
 23501 000030DE F606[4802]FF            	test	byte [IfFlag],0FFh
 23502 000030E3 7506                    	jnz	short NOREDIR
 23503 000030E5 E88C00                  	call	TESTDOREIN
 23504 000030E8 E80600                  	call	TESTDOREOUT
 23505                                  NOREDIR:
 23506 000030EB 59                      	pop	cx
 23507 000030EC 5B                      	pop	bx
 23508 000030ED 58                      	pop	ax
 23509 000030EE 5A                      	pop	dx
 23510 000030EF 1F                      	pop	ds
 23511                                  IOSET_RETN:	; 06/08/2024
 23512 000030F0 C3                      	retn
 23513                                  
 23514                                  ; =============== S U B	R O U T	I N E =======================================
 23515                                  
 23516                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23517                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 23518                                  	; 06/08/2024
 23519                                  TESTDOREOUT:
 23520 000030F1 803E[6402]00            	cmp	byte [Re_OutStr],0
 23521                                  	;je	short NOREOUT  ; MSDOS 3.3
 23522                                  	; 26/02/2023
 23523                                  	;jne	short REOUTEXISTS
 23524                                  	;jmp	NOREOUT
 23525                                  	; 06/08/2024
 23526 000030F6 74F8                    	jz	short IOSET_RETN
 23527                                  REOUTEXISTS:
 23528 000030F8 803E[6302]00            	cmp	byte [Re_Out_App],0
 23529 000030FD 745D                    	je	short REOUTCRT
 23530                                  
 23531 000030FF BA[6402]                	mov	dx,Re_OutStr
 23532                                  
 23533                                  	; 26/02/2023
 23534                                  	; MSDOS 6.0
 23535                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 23536 00003102 B8023D                  	mov	ax,3D02h
 23537                                  	; MSDOS 3.3
 23538                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 23539                                  
 23540                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23541 00003105 50                      	push	ax
 23542 00003106 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23543                                  			; DS:DX	-> ASCIZ filename
 23544                                  			; AL = access mode
 23545                                  			; 1 - write
 23546 00003108 5B                      	pop	bx
 23547 00003109 724B                    	jc	short OpenWriteError
 23548                                  
 23549                                  	; 26/02/2023
 23550                                  	; MSDOS 6.0
 23551 0000310B 89C3                    	mov	bx,ax
 23552                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 23553 0000310D B80044                  	mov	ax,4400h
 23554 00003110 CD21                    	int	21h			;AN035;
 23555                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 23556                                  			; BX = file or device handle
 23557 00003112 F6C280                  	test	dl,80h
 23558                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 23559 00003115 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 23560                                  	
 23561                                  	;mov	ax,(LSEEK SHL 8) OR 2
 23562 00003117 B80242                  	mov	ax,4202h
 23563 0000311A B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 23564 0000311D 89CA                    	mov	dx,cx			;AC011;
 23565 0000311F CD21                    	int	21h
 23566                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 23567                                  			; AL = method: offset from end of file
 23568 00003121 0E                      	push	cs			;AN011; Get transient seg to DS
 23569 00003122 1F                      	pop	ds			;AN011;
 23570                                  
 23571                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 23572 00003123 B8003F                  	mov	ax,3F00h
 23573 00003126 B90100                  	mov	cx,1			;AN011;  file into one_char_val
 23574 00003129 BA[A2A0]                	mov	dx,One_Char_Val		;AN011;
 23575 0000312C CD21                    	int	21h			;AN011;
 23576                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 23577                                  			; BX = file handle, CX = number of bytes to read
 23578                                  			; DS:DX -> buffer
 23579 0000312E 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 23580 00003130 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 23581 00003132 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 23582                                  
 23583 00003134 803E[A2A0]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 23584 00003139 8E1E[F39D]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 23585 0000313D 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 23586                                  
 23587                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 23588 0000313F B80142                  	mov	ax,4201h
 23589 00003142 B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 23590                                  setreout_p:	; 26/02/2023
 23591 00003145 89CA                    	mov	dx,cx			;AN011;
 23592 00003147 CD21                    	int	21h			;AN011;
 23593 00003149 EB20                    	jmp	short SET_REOUT
 23594                                  reout_0_length: 			;AN017; We have a 0 length file
 23595                                  	; ds = cs ; 26/02/2023
 23596                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 23597                                  					;AN017; Get resident segment back
 23598                                  	; 26/02/2023
 23599 0000314B 8E1E[F39D]              	mov	ds,[RESSEG]
 23600                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 23601 0000314F B80042                  	mov	ax,4200h
 23602 00003152 31C9                    	xor	cx,cx			;AN017; Offset is 0
 23603                                  	;mov	dx,cx			;AN017;
 23604                                  	;int	21h			;AN017;
 23605                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 23606                                  	; 26/02/2023
 23607 00003154 EBEF                    	jmp	short setreout_p
 23608                                  
 23609                                  	; 26/02/2023
 23610                                  	; MSDOS 3.3
 23611                                  	;xor	dx,dx
 23612                                  	;xor	cx,cx
 23613                                  	;mov	bx,ax
 23614                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 23615                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 23616                                  	;		; AL = method: offset from end of file
 23617                                  	;jmp	short SET_REOUT
 23618                                  
 23619                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23620                                  OpenWriteError:
 23621                                  	;cmp	ax,5
 23622 00003156 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 23623 00003159 F9                      	stc
 23624                                  	;;je	short REDIRERR ; MSDOS 3.3
 23625                                  	; 26/02/2023
 23626                                  	;jnz	short REOUTCRT
 23627                                  	;jmp	REDIRERR
 23628 0000315A 743B                    	je	short REDIRERR
 23629                                  
 23630                                  REOUTCRT:
 23631 0000315C BA[6402]                	mov	dx,Re_OutStr
 23632 0000315F 31C9                    	xor	cx,cx
 23633                                  	;mov	ah,CREAT ; 3Ch
 23634 00003161 B43C                    	mov	ah,3Ch
 23635 00003163 50                      	push	ax
 23636 00003164 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 23637                                  			; CX = attributes for file
 23638                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 23639 00003166 5B                      	pop	bx
 23640                                  	;jc	short REDIRERR ; MSDOS 3.3
 23641                                  	; 26/02/2023
 23642                                  	;jnc	short NOREDIRERR
 23643                                  	;jmp	REDIRERR
 23644 00003167 722E                    	jc	short REDIRERR
 23645                                  
 23646                                  NOREDIRERR:
 23647 00003169 89C3                    	mov	bx,ax
 23648                                  SET_REOUT:
 23649                                  
 23650                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 23651                                  ; spot. We invalidate the new JFN we got.
 23652                                  
 23653 0000316B B0FF                    	mov	al,0FFh
 23654                                  	;xchg	al,[bx+18h]
 23655 0000316D 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23656 00003170 A21900                  	mov	[PDB.JFN_TABLE+1],al
 23657                                  	; 06/08/2024
 23658                                  NOREOUT:
 23659                                  ;IOSET_RETN:	; 17/04/2023
 23660 00003173 C3                      	retn
 23661                                  
 23662                                  ; =============== S U B	R O U T	I N E =======================================
 23663                                  
 23664                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23665                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 23666                                  	; 06/08/2024
 23667                                  TESTDOREIN:
 23668 00003174 2E803E[9E9D]00          	cmp	byte [cs:RE_INSTR],0
 23669                                  	;jz	short IOSET_RETN
 23670                                  	; 06/08/2024
 23671 0000317A 74F7                    	jz	short NOREOUT
 23672 0000317C 1E                      	push	ds
 23673 0000317D 0E                      	push	cs
 23674 0000317E 1F                      	pop	ds
 23675 0000317F BA[9E9D]                	mov	dx,RE_INSTR
 23676                                  	;mov	ax,OPEN*256 ; 3D00h
 23677 00003182 B8003D                  	mov	ax,3D00h
 23678 00003185 89C3                    	mov	bx,ax
 23679 00003187 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23680                                  			; DS:DX	-> ASCIZ filename
 23681                                  			; AL = access mode
 23682                                  			; 0 - read
 23683 00003189 1F                      	pop	ds
 23684                                  
 23685 0000318A 720B                    	jc	short REDIRERR
 23686                                  
 23687 0000318C 89C3                    	mov	bx,ax
 23688 0000318E B0FF                    	mov	al,0FFh
 23689                                  
 23690                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 23691                                  ; spot. We invalidate the new JFN we got.
 23692                                  
 23693                                  	;xchg	al,[bx+18h]
 23694 00003190 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23695 00003193 A21800                  	mov	[PDB.JFN_TABLE],al
 23696 00003196 C3                      	retn
 23697                                  
 23698                                  ; ---------------------------------------------------------------------------
 23699                                  
 23700                                  ; We had some kind of error on the redirection. Figure out what the
 23701                                  ; appropriate message should be; BX has the system call that failed
 23702                                  
 23703                                  REDIRERR:
 23704 00003197 0E                      	push	cs
 23705 00003198 1F                      	pop	ds
 23706 00003199 E82E00                  	call	TriageError  ; MSDOS 6.0
 23707                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23708                                  
 23709                                  ; At this point, we have recognized the network-generated access denied error.
 23710                                  ; The correct message is in DX
 23711                                  
 23712 0000319C 83F841                  	cmp	ax,65
 23713 0000319F 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 23714 000031A1 80FF3D                  	cmp	bh,OPEN ; 3Dh
 23715 000031A4 7406                    	je	short OpenError
 23716 000031A6 BA[EA91]                	mov	dx,FULLDIR_PTR
 23717                                  _CERRORJ:
 23718 000031A9 E9F6FC                  	jmp	cerror
 23719                                  
 23720                                  OpenError:
 23721                                  ; The system call was an OPEN. Report either file not found or path not found.
 23722                                  
 23723                                  	; 26/02/2023
 23724                                  	; MSDOS 6.0
 23725                                  	;mov	byte [cs:msg_disp_class],1
 23726 000031AC 2EC606[CE91]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 23727                                  				;AN000; set up extended error msg class
 23728 000031B2 BA[D091]                	mov	dx,extend_buf_ptr
 23729                                  				;AC000; get extended message pointer
 23730 000031B5 2EA3[D091]              	mov	[cs:extend_buf_ptr],ax
 23731                                  				;AN000; get message number in control block
 23732 000031B9 E9E6FC                  	jmp	cerror
 23733                                  
 23734                                  	; 26/02/2023
 23735                                  	; MSDOS 3.3
 23736                                  	;mov	dx,FNOTFOUNDPTR
 23737                                  	;;cmp	ax,2
 23738                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 23739                                  	;je	short _CERRORJ
 23740                                  	;mov	dx,ACCDENPTR
 23741                                  	;;cmp	ax,5 ; Access denied error
 23742                                  	;cmp	ax,ERROR_ACCESS_DENIED
 23743                                  	;je	short _CERRORJ
 23744                                  	;	; ERROR_PATH_NOT_FOUND
 23745                                  	;mov	dx,PNOTFOUNDPTR
 23746                                  	;jmp	CERROR
 23747                                  
 23748                                  ; =============== S U B	R O U T	I N E =======================================
 23749                                  
 23750                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 23751                                  ; registers
 23752                                  
 23753                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 23754                                  dstrlen:
 23755 000031BC 50                      	push	ax
 23756 000031BD 31C9                    	xor	cx,cx
 23757 000031BF FC                      	cld
 23758                                  dloop:
 23759 000031C0 AC                      	lodsb
 23760 000031C1 41                      	inc	cx
 23761 000031C2 08C0                    	or	al,al
 23762 000031C4 75FA                    	jnz	short dloop
 23763 000031C6 29CE                    	sub	si,cx
 23764 000031C8 58                      	pop	ax
 23765                                  TRIAGEERR_RETN:
 23766 000031C9 C3                      	retn
 23767                                  
 23768                                  ; =============== S U B	R O U T	I N E =======================================
 23769                                  
 23770                                  ;Break	<Extended error support>
 23771                                  
 23772                                  TriageError:  ; MSDOS 6.0
 23773                                  
 23774                                  ; TriageError will examine the return from a carry-set system call and
 23775                                  ; return the correct error if applicable.
 23776                                  ;
 23777                                  ;   Inputs:	outputs from a carry-settable system call
 23778                                  ;		No system calls may be done in the interrim
 23779                                  ;   Outputs:	If carry was set on input
 23780                                  ;		   carry set on output
 23781                                  ;		   DX contains trangroup offset to printf message
 23782                                  ;		else
 23783                                  ;		   No registers changed
 23784                                  
 23785                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 23786                                  
 23787                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23788                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 23789                                  
 23790                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23791                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 333Ch
 23792                                  
 23793                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 23794 000031CA 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 23795 000031CC 9C                      	pushf
 23796 000031CD 53                      	push	bx
 23797 000031CE 51                      	push	cx
 23798 000031CF 56                      	push	si
 23799 000031D0 57                      	push	di
 23800 000031D1 55                      	push	bp
 23801 000031D2 06                      	push	es
 23802 000031D3 1E                      	push	ds
 23803 000031D4 50                      	push	ax
 23804 000031D5 52                      	push	dx
 23805 000031D6 B459                    	mov	ah,59h
 23806                                  	;mov	ah,GETEXTENDEDERROR
 23807 000031D8 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 23808                                  			; BX = version code (0000h for DOS 3.x)
 23809 000031DA 59                      	pop	cx
 23810 000031DB 5B                      	pop	bx		; restore original AX
 23811 000031DC BA[F691]                	mov	dx,ACCDEN_PTR
 23812 000031DF 83F841                  	cmp	ax,65		; network access denied?
 23813 000031E2 7404                    	je	short NoMove	; Yes, return it.
 23814 000031E4 89D8                    	mov	ax,bx
 23815 000031E6 89CA                    	mov	dx,cx
 23816                                  NoMove:
 23817 000031E8 1F                      	pop	ds
 23818 000031E9 07                      	pop	es
 23819 000031EA 5D                      	pop	bp
 23820 000031EB 5F                      	pop	di
 23821 000031EC 5E                      	pop	si
 23822 000031ED 59                      	pop	cx
 23823 000031EE 5B                      	pop	bx
 23824 000031EF 9D                      	popf
 23825 000031F0 C3                      	retn
 23826                                  
 23827                                  ; =============== S U B	R O U T	I N E =======================================
 23828                                  
 23829                                  	; Far call from resident portion/segment of COMMAND.COM
 23830                                  
 23831                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 23832                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 23833                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3363h
 23834                                  
 23835                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23836                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23837                                  Triage_Init:
 23838 000031F1 E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 23839                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23840 000031F4 CB                      	retf
 23841                                  
 23842                                  ; =============== S U B	R O U T	I N E =======================================
 23843                                  
 23844                                  ; MSDOS 6.0
 23845                                  
 23846                                  ; ****************************************************************
 23847                                  ; *
 23848                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 23849                                  ; *
 23850                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 23851                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 23852                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 23853                                  ; *
 23854                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 23855                                  ; *		 ES    points to TRANGROUP
 23856                                  ; *
 23857                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 23858                                  ; *		 PATHCNT set to length of string
 23859                                  ; *		 PATHPOS set to start of SRCBUF
 23860                                  ; *		 CX,AX	 changed
 23861                                  ; *
 23862                                  ; ****************************************************************
 23863                                  
 23864                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23865                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 23866                                  Move_To_SrcBuf:
 23867 000031F5 56                      	push	si			;AN000;  save si,di
 23868 000031F6 57                      	push	di			;AN000;
 23869 000031F7 51                      	push	cx			;AN000;
 23870 000031F8 BF[12A1]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 23871 000031FB 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 23872 000031FD 89C8                    	mov	ax,cx			;AN000; clear ax
 23873 000031FF 57                      	push	di			;AN000; save start of srcbuf
 23874 00003200 AC                      	lodsb				;AN000; get a character from DS:SI
 23875                                  mts_get_chars:				;AN000;
 23876                                  	;cmp	al,0			;AN000; was it a null char?
 23877 00003201 20C0                    	and 	al,al ; al = 0 ?
 23878 00003203 7405                    	jz	short mts_end_string	;AN000; yes - exit
 23879 00003205 AA                      	stosb				;AN000; no - store it in srcbuf
 23880 00003206 41                      	inc	cx			;AN000; increment length count
 23881 00003207 AC                      	lodsb				;AN000; get a character from DS:SI
 23882 00003208 EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 23883                                  mts_end_string: 			;AN000; we've reached the end of line
 23884                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 23885 0000320A B00D                    	mov	al,0Dh
 23886 0000320C AA                      	stosb				;AN000;
 23887 0000320D 5F                      	pop	di			;AN000; restore start of srcbuf
 23888 0000320E 0E                      	push	cs			;AN000; set DS to local segment
 23889 0000320F 1F                      	pop	ds			;AN000;
 23890 00003210 890E[7EA0]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 23891 00003214 893E[80A0]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 23892 00003218 59                      	pop	cx			;AN000; restore cx,di,si
 23893 00003219 5F                      	pop	di			;AN000;
 23894 0000321A 5E                      	pop	si			;AN000;
 23895 0000321B C3                      	retn				;AN000; exit
 23896                                  
 23897                                  ;============================================================================
 23898                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 23899                                  ;============================================================================
 23900                                  ; 03/10/2018 - Retro DOS v3.0
 23901                                  
 23902                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 23903                                  
 23904                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23905                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 23906                                  
 23907                                  ; =============== S U B	R O U T	I N E =======================================
 23908                                  
 23909                                  	; 26/02/2023
 23910                                  SINGLETEST:
 23911 0000321C 1E                      	push	ds
 23912 0000321D 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 23913 00003222 833E[4302]00            	cmp	word [SingleCom],0
 23914 00003227 7406                    	jz	short TESTDONE
 23915 00003229 813E[4302]FFEF          	cmp	word [SingleCom],0EFFFh
 23916                                  TESTDONE:
 23917 0000322F 1F                      	pop	ds
 23918 00003230 C3                      	retn
 23919                                  
 23920                                  ; =============== S U B	R O U T	I N E =======================================
 23921                                  
 23922                                  	; 26/02/2023
 23923                                  SetRest1:
 23924 00003231 B001                    	mov	al,1
 23925                                  
 23926                                  ; ---------------------------------------------------------------------------
 23927                                  
 23928                                  SETREST:
 23929 00003233 1E                      	push	ds
 23930 00003234 8E1E[F39D]              	mov	ds,[RESSEG]
 23931 00003238 A2[3F02]                	mov	[RestDir],al
 23932 0000323B 1F                      	pop	ds
 23933 0000323C C3                      	retn
 23934                                  
 23935                                  ; =============== S U B	R O U T	I N E =======================================
 23936                                  
 23937                                  ; Note that we need to handle the same thing that RestDir handles: the
 23938                                  ; requirement that we try only once to restore the user's environment after
 23939                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 23940                                  ; disappear, we just give up.
 23941                                  
 23942                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 23943                                  	;
 23944                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23945                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33AFh
 23946                                  PIPEDEL:
 23947 0000323D 1E                      	push	ds
 23948 0000323E 52                      	push	dx
 23949 0000323F 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 23950                                  	;mov	dx,3EAh	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33B1h
 23951                                  	;;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 23952                                  			; Pipe1 = offset RESGROUP:EndInit
 23953 00003244 BA[B702]                	mov	dx,Pipe1	; Clean up in case ^C
 23954                                  	;mov	ah,Unlink ; 41h
 23955 00003247 B441                    	mov	ah,41h
 23956 00003249 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 23957                                  			; DS:DX	-> ASCIZ pathname of file to delete
 23958                                  			;		(no wildcards allowed)
 23959                                  
 23960                                  	;mov	dx,439h	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33BDh
 23961                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 23962                                  			; Pipe2 = offset RESGROUP:EndInit+79
 23963 0000324B BA[0603]                	mov	dx,Pipe2
 23964                                  	;mov	ah,Unlink ; 41h
 23965 0000324E B441                    	mov	ah,41h
 23966 00003250 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 23967                                  			; DS:DX	-> ASCIZ pathname of file to delete
 23968                                  			;		(no wildcards allowed)
 23969 00003252 5A                      	pop	dx
 23970 00003253 E86202                  	call	PipeOff
 23971 00003256 C606[B602]00            	mov	byte [PipeFiles],0
 23972 0000325B 1F                      	pop	ds
 23973 0000325C C3                      	retn
 23974                                  
 23975                                  ; ---------------------------------------------------------------------------
 23976                                  
 23977                                  	; 26/02/2023
 23978                                  PIPEERRSYN:
 23979 0000325D BA[6892]                	mov	dx,SYNTMES_PTR
 23980 00003260 E8DAFF                  	call	PIPEDEL
 23981 00003263 0E                      	push	cs
 23982 00003264 1F                      	pop	ds
 23983 00003265 E93AFC                  	jmp	cerror
 23984                                  
 23985                                  ; ---------------------------------------------------------------------------
 23986                                  
 23987                                  	; 26/02/2023
 23988                                  PIPERR:
 23989 00003268 9C                      	pushf
 23990 00003269 E85EFF                  	call    TriageError
 23991                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 23992 0000326C 50                      	push	ax		; Save results from TriageError
 23993 0000326D 52                      	push	dx
 23994 0000326E BA[3193]                	mov	dx,PIPEEMES_PTR
 23995 00003271 E8C9FF                  	call	PIPEDEL
 23996 00003274 0E                      	push	cs
 23997 00003275 1F                      	pop	ds
 23998 00003276 E88E22                  	call	std_eprintf
 23999 00003279 5A                      	pop	dx		; Restore results from TriageError
 24000 0000327A 58                      	pop	ax
 24001 0000327B 9D                      	popf
 24002 0000327C 83F841                  	cmp	ax,65
 24003 0000327F 7503                    	jne	short TCOMMANDJ
 24004 00003281 E91EFC                  	jmp	cerror
 24005                                  
 24006                                  TCOMMANDJ:
 24007 00003284 E97DCE                  	jmp	TCOMMAND
 24008                                  
 24009                                  ; ---------------------------------------------------------------------------
 24010                                  
 24011                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24012                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24013                                  PIPEPROCSTRT:
 24014 00003287 8E1E[F39D]              	mov	ds,[RESSEG]
 24015 0000328B FE06[B602]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 24016                                  
 24017                                  	; MSDOS 6.0
 24018 0000328F 06                      	push	es
 24019 00003290 57                      	push	di
 24020 00003291 1E                      	push	ds
 24021 00003292 56                      	push	si
 24022                                  	
 24023 00003293 1E                      	push	ds
 24024 00003294 06                      	push	es
 24025 00003295 1F                      	pop	ds			;ds = TRANGROUP
 24026 00003296 BE[F698]                	mov	si,TempVarName		;ds:si = "TEMP="
 24027                                  
 24028                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 24029                                  ;so the routine is not really general
 24030                                  
 24031 00003299 E8C9F5                  	call	find_name_in_environment
 24032                                  					;es:di points at path
 24033 0000329C 1F                      	pop	ds			;ds = DATARES again
 24034 0000329D 721F                    	jc	short no_temp_path
 24035                                  	
 24036 0000329F 1E                      	push	ds
 24037 000032A0 06                      	push	es
 24038 000032A1 1F                      	pop	ds
 24039 000032A2 07                      	pop	es			;swap ds and es
 24040 000032A3 89FE                    	mov	si,di			;ds:si points at path
 24041                                  	
 24042 000032A5 E8AA02                  	call	skip_white		;skip white space chars
 24043                                  
 24044                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 24045                                  
 24046 000032A8 E8B302                  	call	copy_pipe_path		;copy the pipe path
 24047                                  	
 24048                                  ;Check if the TEMP path is valid
 24049                                  
 24050 000032AB 06                      	push	es
 24051 000032AC 1F                      	pop	ds			;ds = DATARES
 24052                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 24053                                  	;;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 24054                                  	;mov	dx,3EAh	; MSDOS 6.22 - offset EndInit
 24055 000032AD BA[B702]                	mov	dx,Pipe1
 24056                                  	;mov	ax,(CHMOD shl 8) or 0
 24057 000032B0 B80043                  	mov	ax,4300h
 24058 000032B3 CD21                    	int	21h
 24059 000032B5 7207                    	jc	short no_temp_path
 24060                                  	
 24061 000032B7 F7C11000                	test	cx,10h			;is it a directory?
 24062 000032BB 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 24063                                  	
 24064 000032BD F9                      	stc				;no, indicate fail
 24065                                  no_temp_path:
 24066 000032BE 5E                      	pop	si
 24067 000032BF 1F                      	pop	ds
 24068 000032C0 5F                      	pop	di
 24069 000032C1 07                      	pop	es
 24070 000032C2 730B                    	jnc	short crt_temp		;path found, create tempfiles
 24071                                  
 24072                                  	; 27/02/2023
 24073                                  	; MSDOS 3.3
 24074                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 24075                                  	;				; Get current drive
 24076                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 24077                                  	;add	al,[cs:CAPITAL_A]
 24078                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 24079                                  	;mov	bx,PIPE1
 24080                                  	;mov	[bx],al
 24081                                  	;xor	ah,ah			; nul terminate path names
 24082                                  	;mov	byte [PIPE1+3],ah
 24083                                  	;mov	byte [PIPE2+3],ah
 24084                                  
 24085                                  	; MSDOS 6.0
 24086                                  ;SR;
 24087                                  ; We want to create temp files in the current directory rather than in the 
 24088                                  ;root of the drive. This is because the number of files that can be present
 24089                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 24090                                  
 24091                                  	;mov	ah,'.'
 24092                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 24093                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 24094                                  	;xor	ah,ah
 24095                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 24096                                  	;mov	[Pipe2+1],ah		;create files in current dir
 24097                                  	; 27/02/2023
 24098 000032C4 B92E00                  	mov	cx,002Eh
 24099 000032C7 890E[B702]              	mov	[Pipe1],cx
 24100 000032CB 890E[0603]              	mov	[Pipe2],cx
 24101                                  crt_temp:
 24102                                  	; MSDOS 6.0
 24103                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 24104                                  	;;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 24105                                  	;mov	dx,3EAh ; MSDOS 6.22 COMMAND.COM	
 24106 000032CF BA[B702]                	mov	dx,Pipe1
 24107                                  	; MSDOS 3.3
 24108                                  	;mov	dx,bx
 24109                                  	
 24110                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24111 000032D2 31C9                    	xor	cx,cx
 24112                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 24113 000032D4 B45A                    	mov	ah,5Ah
 24114 000032D6 CD21                    	int	21h
 24115                                  		; DOS -	3+ - CREATE UNIQUE FILE
 24116                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 24117                                  		; receive generated filename
 24118                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 24119 000032D8 728E                    	jc	short PIPERR	; Couldn't create
 24120                                  
 24121 000032DA 89C3                    	mov	bx,ax
 24122                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 24123 000032DC B43E                    	mov	ah,3Eh
 24124 000032DE CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24125                                  			; BX = file handle
 24126                                  	;;;mov	dx,PIPE2
 24127                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 24128                                  	;mov	dx,439h ; MSDOS 6.22 COMMAND.COM
 24129 000032E0 BA[0603]                	mov	dx,Pipe2
 24130                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 24131 000032E3 B45A                    	mov	ah,5Ah
 24132 000032E5 CD21                    	int	21h
 24133                                  		; DOS -	3+ - CREATE UNIQUE FILE
 24134                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 24135                                  		; receive generated filename
 24136                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 24137                                  	; 17/04/2023
 24138                                  	;jc	short PIPERR
 24139                                  	; 27/02/2023
 24140 000032E7 7303                    	jnc	short pps1
 24141 000032E9 E97CFF                  	jmp	PIPERR
 24142                                  pps1:
 24143 000032EC 89C3                    	mov	bx,ax
 24144 000032EE B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 24145 000032F0 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24146                                  				; BX = file handle
 24147                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 24148 000032F2 E87FFE                  	call	TESTDOREIN
 24149                                  	;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24150 000032F5 8B36[5503]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 24151 000032F9 833E[4302]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 24152 000032FE 7506                    	jne	short NOSINGP
 24153 00003300 C706[4302]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 24154                                  NOSINGP:
 24155 00003306 EB29                    	jmp	short FIRSTPIPE
 24156                                  
 24157                                  ; ---------------------------------------------------------------------------
 24158                                  
 24159                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24160                                  	; 11/06/2026 - Retro DOS v4.2 COMMAND.COM
 24161                                  PIPEPROC:
 24162 00003308 8026[3B02]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 24163                                  	;;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24164 0000330D 8B36[5503]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 24165 00003311 AC                      	lodsb
 24166                                  	; 27/02/2023
 24167 00003312 3C7C                    	cmp	al,'|'		
 24168                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 24169                                  	;je	short ISPIPE1	; Yes
 24170                                  	;cmp	al,'|'
 24171                                  	;;cmp	al,[cs:VBAR]
 24172 00003314 7403                    	je	short ISPIPE1
 24173 00003316 E98400                  	jmp	PIPEEND		; Pipe done
 24174                                  ISPIPE1:
 24175 00003319 8B16[D803]              	mov	dx,[InPipePtr]	; Get the input file name
 24176                                  	;mov	ax,OPEN*256 ; 3D00h
 24177 0000331D B8003D                  	mov	ax,3D00h
 24178 00003320 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 24179                                  			; DS:DX	-> ASCIZ filename
 24180                                  			; AL = access mode
 24181                                  			; 0 - read
 24182                                  PIPEERRJ:
 24183 00003322 7303                    	jnc	short NO_PIPEERR
 24184 00003324 E941FF                  	jmp	PIPERR		; Lost the pipe file
 24185                                  NO_PIPEERR:
 24186 00003327 89C3                    	mov	bx,ax
 24187 00003329 B0FF                    	mov	al,0FFh
 24188                                  	;xchg	al,[bx+18h]
 24189 0000332B 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 24190 0000332E A21800                  	mov	[PDB.JFN_TABLE],al	; Redirect
 24191                                  FIRSTPIPE:
 24192 00003331 BF[549C]                	mov	di,COMBUF+2
 24193 00003334 31C9                    	xor	cx,cx
 24194 00003336 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 24195 00003339 7503                    	jne	short PIPEOK1
 24196                                  PIPEERRSYNJ:
 24197 0000333B E91FFF                  	jmp	PIPEERRSYN
 24198                                  PIPEOK1:
 24199                                  	;;;mov	al,[cs:VBAR]
 24200                                  	; 27/02/2023
 24201                                  	;;mov	al,vbar
 24202                                  	;mov	al,'|'
 24203                                  	;cmp	[si],al		; '||'
 24204                                  	;je	short PIPEERRSYNJ
 24205 0000333E 803C7C                  	cmp	byte [si],'|'
 24206                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 24207 00003341 74F8                    	je	short PIPEERRSYNJ
 24208                                  PIPECOMLP:
 24209 00003343 AC                      	lodsb
 24210 00003344 AA                      	stosb
 24211                                  	; 27/02/2023
 24212 00003345 E8C7F5                  	call	testkanj
 24213 00003348 7405                    	jz	short NOTKANJ5
 24214 0000334A A4                      	movsb
 24215                                  ;  Added following 2 commands to the fix pipe bug.
 24216 0000334B 41                      	inc	cx		;AN000;  3/3/KK
 24217 0000334C 41                      	inc	cx		;AN000;  3/3/KK
 24218 0000334D EBF4                    	jmp	short PIPECOMLP
 24219                                  NOTKANJ5:
 24220 0000334F 3C0D                    	cmp	al,0Dh
 24221 00003351 7438                    	je	short LASTPIPE
 24222 00003353 41                      	inc	cx
 24223                                  	; 27/02/2023
 24224 00003354 3C7C                    	cmp	al,'|'
 24225                                  	;cmp	al,ALTPIPECHR
 24226                                  	;je	short ISPIPE2
 24227                                  	;;cmp	al,[cs:VBAR]
 24228                                  	;cmp	al,vbar
 24229 00003356 75EB                    	jne	short PIPECOMLP
 24230                                  ISPIPE2:
 24231 00003358 26C645FF0D              	mov	byte [es:di-1],0Dh
 24232 0000335D 49                      	dec	cx
 24233                                  	;mov	[cs:COMBUF+1],cl
 24234                                  	; 27/02/2023
 24235 0000335E 26880E[539C]            	mov	[es:COMBUF+1],cl
 24236 00003363 4E                      	dec	si
 24237                                  	;;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 24238                                  	; 11/06/2023 - MSDOS 6.22 COMMAND.COM
 24239                                  	;mov	[488h],si ; [PipePtr] = [EndInit+158]
 24240 00003364 8936[5503]              	mov	[PipePtr],si		; On to next pipe element
 24241                                  			; mov [EndInit+158],si
 24242 00003368 8B16[DA03]              	mov	dx,[OutPipePtr]
 24243 0000336C 51                      	push	cx
 24244 0000336D 31C9                    	xor	cx,cx
 24245                                  	;mov	ax,CREAT*256 ; 3C00h
 24246 0000336F B8003C                  	mov	ax,3C00h
 24247 00003372 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 24248                                  			; CX = attributes for file
 24249                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 24250 00003374 59                      	pop	cx
 24251 00003375 72AB                    	jc	short PIPEERRJ		; Lost the file
 24252 00003377 89C3                    	mov	bx,ax
 24253 00003379 B0FF                    	mov	al,0FFh
 24254                                  	;xchg	al,[bx+18h]
 24255 0000337B 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 24256 0000337E A21900                  	mov	[PDB.JFN_TABLE+1],al
 24257 00003381 8716[D803]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 24258 00003385 8916[DA03]              	mov	[OutPipePtr],dx
 24259 00003389 EB0D                    	jmp	short PIPECOM
 24260                                  LASTPIPE:
 24261                                  	;mov	[cs:COMBUF+1],cl 
 24262                                  	; 27/02/2023
 24263 0000338B 26880E[539C]            	mov	[es:COMBUF+1],cl
 24264 00003390 4E                      	dec	si
 24265                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 24266                                  	;mov	[488h],si ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24267 00003391 8936[5503]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 24268                                  		; mov [EndInit+158],si
 24269 00003395 E859FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 24270                                  PIPECOM:
 24271 00003398 0E                      	push	cs
 24272 00003399 1F                      	pop	ds
 24273 0000339A E97DCF                  	jmp	NOPIPEPROC	; Process the pipe element
 24274                                  PIPEEND:
 24275 0000339D E89DFE                  	call	PIPEDEL
 24276 000033A0 813E[4302]00F0          	cmp	word [SingleCom],0F000h
 24277 000033A6 7506                    	jnz	short NOSINGP2
 24278 000033A8 C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 24279                                  NOSINGP2:
 24280 000033AE E953CD                  	jmp	TCOMMAND
 24281                                  
 24282                                  ; =============== S U B	R O U T	I N E =======================================
 24283                                  
 24284                                  ; Date and time are set during initialization and use
 24285                                  ; this routines since they need to do a long return
 24286                                  
 24287                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24288                                  DATINIT:
 24289 000033B1 2E8C1E[F39D]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 24290 000033B6 06                      	push	es
 24291 000033B7 1E                      	push	ds		; Going to use the previous stack
 24292 000033B8 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 24293 000033BA 8EC0                    	mov	es,ax
 24294 000033BC 8ED8                    	mov	ds,ax
 24295 000033BE E82B22                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 24296 000033C1 BA[90A9]                	mov	dx,INTERNATVARS
 24297 000033C4 B80038                  	mov	ax,3800h
 24298                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 24299 000033C7 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 24300                                  			; get current-country info
 24301                                  			; DS:DX	-> buffer for returned info
 24302                                  	; 20/10/2018
 24303 000033C9 C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 24304 000033CF C606[529C]80            	mov	byte [COMBUF],128 ; Init COMBUF
 24305 000033D4 C706[539C]010D          	mov	word [COMBUF+1],0D01h
 24306 000033DA E80600                  	call	DATE
 24307 000033DD E86200                  	call	CTIME
 24308 000033E0 1F                      	pop	ds
 24309 000033E1 07                      	pop	es
 24310 000033E2 CB                      	retf	; far return
 24311                                  
 24312                                  ; =============== S U B	R O U T	I N E =======================================
 24313                                  
 24314                                  ; MSDOS 6.0
 24315                                  
 24316                                  ; ****************************************************************
 24317                                  ; *
 24318                                  ; * ROUTINE:	 DATE - Set system date
 24319                                  ; *
 24320                                  ; * FUNCTION:	 If a date is specified, set the system date,
 24321                                  ; *		 otherwise display the current system date and
 24322                                  ; *		 prompt the user for a new date.  If an invalid
 24323                                  ; *		 date is specified, issue an error message and
 24324                                  ; *		 prompt for a new date.  If the user enters
 24325                                  ; *		 nothing when prompted for a date, terminate.
 24326                                  ; *
 24327                                  ; * INPUT:	 command line at offset 81H
 24328                                  ; *
 24329                                  ; * OUTPUT:	 none
 24330                                  ; *
 24331                                  ; ****************************************************************
 24332                                  
 24333                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24334                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 24335                                  
 24336                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24337                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:356Eh
 24338                                  DATE:
 24339 000033E3 BE8100                  	mov	si,81h			; Accepting argument for date inline
 24340 000033E6 BF[E397]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24341 000033E9 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 24342 000033EB 31D2                    	xor	dx,dx			;AN000;
 24343 000033ED E86916                  	call	cmd_parse		;AC000; call parser
 24344                                  
 24345                                  	; 27/02/2023
 24346                                  	;cmp	ax,-1
 24347                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24348                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 24349                                  	;;cmp	ax,0
 24350                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24351                                  	;;jne	short DATERR		;AN000; yes - go issue message
 24352                                  	; 26/04/2023
 24353                                  	;or	ax,ax ; ax = 0 ?
 24354                                  	;jnz	short DATERR
 24355                                  	;;jmp	short COMDAT		;AC000; we have a date
 24356                                  	; 11/06/2023
 24357 000033F0 40                      	inc	ax  ; cmp ax,-1
 24358 000033F1 7428                    	jz	short PRMTDAT ; 0FFFFh -> 0
 24359 000033F3 48                      	dec	ax  ; cmp ax,0
 24360 000033F4 7541                    	jnz	short DATERR ; 1 -> 0
 24361                                  	; ax = 0
 24362                                  
 24363                                  	; 27/02/2023
 24364                                  COMDAT:
 24365 000033F6 8B0E[EDA9]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 24366 000033FA 8A36[EFA9]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 24367 000033FE 8A16[F0A9]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 24368 00003402 51                      	push	cx			;AC000; save date
 24369 00003403 52                      	push	dx			;AC000;
 24370 00003404 B90100                  	mov	cx,1			;AC000; set 1 positional entered
 24371 00003407 31D2                    	xor	dx,dx			;AN029;
 24372 00003409 E84D16                  	call	cmd_parse		;AN029; call parser
 24373 0000340C 3CFF                    	cmp	al,0FFh ; -1
 24374                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 24375 0000340E 5A                      	pop	dx			;AC000; retrieve date
 24376 0000340F 59                      	pop	cx			;AC000;
 24377 00003410 7525                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 24378                                  	; 26/04/2023
 24379                                  	;mov	ah,SET_DATE		;yes - set date
 24380 00003412 B42B                    	mov	ah,2Bh
 24381 00003414 CD21                    	int	21h
 24382                                  			; DOS - SET CURRENT DATE
 24383                                  			; DL = day, DH = month, CX = year
 24384                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 24385 00003416 08C0                    	or	al,al
 24386 00003418 751D                    	jnz	short DATERR
 24387                                  date_end:
 24388 0000341A C3                      	retn
 24389                                  
 24390                                  PRMTDAT:
 24391                                  	; Print "Current date is
 24392 0000341B E81508                  	call	GetDate 		;AN000; get date for output
 24393                                  
 24394 0000341E 86F2                    	xchg	dh,dl			;AN000; switch month & day
 24395 00003420 890E[7E92]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 24396 00003424 8916[8092]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 24397 00003428 BA[6E92]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 24398 0000342B E8E120                  	call	std_printf
 24399                                  
 24400                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 24401                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 24402                                  
 24403                                  GET_NEW_DATE:				;AN000;
 24404 0000342E E8BC00                  	call	GETDAT			;AC000; prompt user for date
 24405                                  	
 24406                                  	; 11/06/2023
 24407                                  	;cmp	ax,0FFFFh ; -1
 24408                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24409                                  	;je	short date_end		;AC000; yes - exit
 24410                                  	; 26/04/2023
 24411                                  	;;cmp	ax,0
 24412                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24413                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 24414                                  	;; 27/02/2023
 24415                                  	;;jz	short COMDAT
 24416                                  	; 26/04/2023
 24417                                  	;and	ax,ax ; 0 ?
 24418                                  	;jz	short COMDAT
 24419                                  
 24420                                  	; 11/06/2023
 24421 00003431 40                      	inc	ax  ; cmp ax,-1
 24422 00003432 74E6                    	jz	short date_end ; 0FFFFh -> 0
 24423 00003434 48                      	dec	ax  ; cmp ax,0
 24424 00003435 74BF                    	jz	short COMDAT ; 1 -> 0
 24425                                  	; ax > 0
 24426                                  
 24427                                  ;COMDAT:
 24428                                  ;	....
 24429                                  DATERR:
 24430 00003437 E8E7F6                  	call	CRLF2			;AN028; print out a blank line
 24431 0000343A BA[6B92]                	mov	dx,BADDAT_PTR
 24432 0000343D E8CF20                  	call	std_printf
 24433 00003440 EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 24434                                  
 24435                                  ; =============== S U B	R O U T	I N E =======================================
 24436                                  
 24437                                  ; MSDOS 6.0
 24438                                  
 24439                                  ; TIME gets and sets the time
 24440                                  
 24441                                  ; ****************************************************************
 24442                                  ; *
 24443                                  ; * ROUTINE:	 TIME - Set system time
 24444                                  ; *
 24445                                  ; * FUNCTION:	 If a time is specified, set the system time,
 24446                                  ; *		 otherwise display the current system time and
 24447                                  ; *		 prompt the user for a new time.  If an invalid
 24448                                  ; *		 time is specified, issue an error message and
 24449                                  ; *		 prompt for a new time.  If the user enters
 24450                                  ; *		 nothing when prompted for a time, terminate.
 24451                                  ; *
 24452                                  ; * INPUT:	 command line at offset 81H
 24453                                  ; *
 24454                                  ; * OUTPUT:	 none
 24455                                  ; *
 24456                                  ; ****************************************************************
 24457                                  
 24458                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24459                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 24460                                  
 24461                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24462                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:35D7h
 24463                                  CTIME:
 24464 00003442 BE8100                  	mov	si,81h			; Accepting argument for time inline
 24465 00003445 BF[F597]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 24466 00003448 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 24467 0000344A 31D2                    	xor	dx,dx			;AN000;
 24468 0000344C E80A16                  	call	cmd_parse		;AC000; call parser
 24469                                  	
 24470                                  	; 27/02/2023
 24471                                  	;cmp	ax,-1
 24472                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24473                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 24474                                  	;;cmp	ax,0
 24475                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24476                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 24477                                  	;and	ax,ax ; ax = 0 ?
 24478                                  	;jnz	short TIMERR
 24479                                  	;;jmp	short COMTIM		;AC000; we have a time
 24480                                  	; 11/06/2023
 24481 0000344F 40                      	inc	ax  ; cmp ax,-1
 24482 00003450 742C                    	jz	short PRMTTIM ; 0FFFFh -> 0
 24483 00003452 48                      	dec	ax  ; cmp ax,0
 24484 00003453 7548                    	jnz	short TIMERR ; 1 -> 0
 24485                                  	; ax = 0
 24486                                  	
 24487                                  	; 27/02/2023
 24488                                  COMTIM:
 24489 00003455 8A2E[F5A9]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 24490 00003459 8A0E[F6A9]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 24491 0000345D 8A36[F7A9]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 24492 00003461 8A16[F8A9]              	mov	dl,[TIME_FRACTION]	;AC000;
 24493 00003465 51                      	push	cx			;AC000; save time
 24494 00003466 52                      	push	dx			;AC000;
 24495 00003467 B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 24496 0000346A 31D2                    	xor	dx,dx			;AN029;
 24497 0000346C E8EA15                  	call	cmd_parse		;AN029; call parser
 24498 0000346F 3CFF                    	cmp	al, -1
 24499                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 24500 00003471 5A                      	pop	dx			;AC000; retieve time
 24501 00003472 59                      	pop	cx			;AC000;
 24502 00003473 7528                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 24503                                  SAVTIM:
 24504                                  	;mov	ah,SET_TIME
 24505 00003475 B42D                    	mov	ah,2Dh
 24506 00003477 CD21                    	int	21h
 24507 00003479 08C0                    	or	al,al
 24508 0000347B 7520                    	jnz	short TIMERR		;AC000; if an error occured, try again
 24509                                  time_end:
 24510 0000347D C3                      	retn
 24511                                  
 24512                                  PRMTTIM:
 24513                                  	;Printf "Current time is ... "
 24514                                  
 24515                                  	;mov	ah,Get_Time		;AC000; get the current time
 24516 0000347E B42C                    	mov	ah,2Ch
 24517 00003480 CD21                    	int	21h			;AC000;   Get time in CX:DX
 24518 00003482 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 24519 00003484 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 24520 00003486 890E[A092]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 24521 0000348A 8916[A292]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 24522 0000348E BA[9B92]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 24523 00003491 E87B20                  	call	std_printf
 24524                                  
 24525                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 24526                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 24527                                  
 24528                                  GET_NEW_TIME:
 24529 00003494 E8AE00                  	call	GETTIM			;AC000;
 24530                                  	
 24531                                  	; 11/06/2023
 24532                                  	;cmp	ax,-1
 24533                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24534                                  	;je	short time_end		;AC000;
 24535                                  	;;cmp	ax,0
 24536                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24537                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 24538                                  	;or	ax,ax  ; ax = 0 ?
 24539                                  	;;jnz	short TIMERR
 24540                                  	; 27/02/2023
 24541                                  	;jz	short COMTIM
 24542                                  
 24543                                  	; 11/06/2023
 24544 00003497 40                      	inc	ax  ; cmp ax,-1
 24545 00003498 74E3                    	jz	short time_end ; 0FFFFh -> 0
 24546 0000349A 48                      	dec	ax  ; cmp ax,0
 24547 0000349B 74B8                    	jz	short COMTIM ; 1 -> 0
 24548                                  	; ax > 0
 24549                                  
 24550                                  ;COMTIM:
 24551                                  ;	....
 24552                                  TIMERR:
 24553 0000349D E881F6                  	call	CRLF2			;AN028; print out a blank line
 24554 000034A0 BA[9892]                	mov	dx,BadTim_Ptr
 24555 000034A3 E86920                  	call	std_printf		; Print error message
 24556 000034A6 EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 24557                                  
 24558                                  ; =============== S U B	R O U T	I N E =======================================
 24559                                  
 24560                                  ; MSDOS 6.0
 24561                                  
 24562                                  ; Set the special flag in the INIT flag to the value in CX.
 24563                                  
 24564                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24565                                  SetInitFlag:
 24566 000034A8 8E1E[F39D]              	mov	ds,[RESSEG]
 24567                                  
 24568 000034AC 8026[B402]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 24569                                  	;and	byte [InitFlag],0FDh
 24570 000034B1 080E[B402]              	or	byte [InitFlag],cl
 24571 000034B5 0E                      	push	cs
 24572 000034B6 1F                      	pop	ds
 24573 000034B7 C3                      	retn
 24574                                  
 24575                                  ; =============== S U B	R O U T	I N E =======================================
 24576                                  
 24577                                  ; MSDOS 6.0
 24578                                  
 24579                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24580                                  PipeOff:
 24581 000034B8 1E                      	push	ds
 24582 000034B9 50                      	push	ax
 24583 000034BA 2E8E1E[F39D]            	mov	ds,[cs:RESSEG]
 24584 000034BF 30C0                    	xor	al,al
 24585 000034C1 8606[B502]              	xchg	[PipeFlag],al
 24586 000034C5 08C0                    	or	al,al
 24587 000034C7 7404                    	jz	short PipeOffDone
 24588 000034C9 D02E[3B02]              	shr	byte [EchoFlag],1
 24589                                  PipeOffDone:
 24590 000034CD 58                      	pop	ax
 24591 000034CE 1F                      	pop	ds
 24592 000034CF C3                      	retn
 24593                                  
 24594                                  ; =============== S U B	R O U T	I N E =======================================
 24595                                  
 24596                                  ; MSDOS 6.0
 24597                                  
 24598                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24599                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24600                                  PRINT_TIME:
 24601                                  	;mov	ah,Get_Time
 24602 000034D0 B42C                    	mov	ah,2Ch
 24603 000034D2 CD21                    	int	21h			; Get time in CX:DX
 24604                                  
 24605 000034D4 06                      	push	es
 24606 000034D5 0E                      	push	cs
 24607 000034D6 07                      	pop	es
 24608 000034D7 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 24609 000034D9 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 24610 000034DB 2E890E[DC93]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 24611 000034E0 2E8916[DE93]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 24612 000034E5 BA[D793]                	mov	dx,promtim_ptr		;AC000; set up message for output
 24613 000034E8 E82420                  	call	std_printf
 24614                                  
 24615                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 24616                                  					;AC000; reset hour, minutes, seconds, and hundredths
 24617                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 24618                                  					;AC000;  pointers in control block
 24619 000034EB 07                      	pop	es
 24620 000034EC C3                      	retn
 24621                                  
 24622                                  ; =============== S U B	R O U T	I N E =======================================
 24623                                  
 24624                                  ; MSDOS 6.0
 24625                                  
 24626                                  ; ****************************************************************
 24627                                  ; *
 24628                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 24629                                  ; *
 24630                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 24631                                  ; *		 INFORMATION and issues the "Enter new date"
 24632                                  ; *		 message with the proper date format. COMBUF
 24633                                  ; *		 is reset to get a date from the command line.
 24634                                  ; *		 The PARSE_DATE blocks are then reset and the
 24635                                  ; *		 PARSE function call is issued.
 24636                                  ; *
 24637                                  ; * INPUT:	 NONE
 24638                                  ; *
 24639                                  ; * OUTPUT:	 COMBUF
 24640                                  ; *		 PARSER RETURN CODES
 24641                                  ; *
 24642                                  ; ****************************************************************
 24643                                  
 24644                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24645                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 24646                                  
 24647                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24648                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:368Ch
 24649                                  GETDAT:
 24650                                  	;mov	ax,(International SHL 8)
 24651 000034ED B80038                  	mov	ax,3800h
 24652                                  					; Determine what format the date
 24653 000034F0 BA5C00                  	mov	dx,5Ch			;  should be entered in and
 24654 000034F3 CD21                    	int	21h			;  print a message describing it
 24655                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 24656                                  			; get current-country info
 24657                                  			; DS:DX -> buffer for returned info
 24658 000034F5 89D6                    	mov	si,dx
 24659 000034F7 AD                      	lodsw
 24660 000034F8 2E8B16[B593]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 24661 000034FD 48                      	dec	ax
 24662 000034FE 780C                    	js	short printformat
 24663 00003500 2E8B16[B893]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 24664 00003505 7405                    	jz	short printformat
 24665 00003507 2E8B16[BB93]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 24666                                  printformat:
 24667 0000350C 89D0                    	mov	ax,dx			;AN000; get message number of format
 24668                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 24669 0000350E B6FF                    	mov	dh,-1 ; 0FFh
 24670 00003510 E8DF20                  	call	TSYSGETMSG		;AN000; get the address of the message
 24671 00003513 2E8936[8F92]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 24672 00003518 BA[8A92]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 24673 0000351B E8F11F                  	call	std_printf
 24674                                  	;mov	word [cs:NewDat_Format],no_subst
 24675                                  					;AN000; reset subst block
 24676 0000351E 2EC706[8F92]0000        	mov	word [cs:NewDat_Format],0
 24677                                  
 24678                                  	; 28/02/2023
 24679 00003525 BF[E397]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24680                                  ; 28/02/2023
 24681                                  gettim_p:	
 24682                                  	;mov	ah,Std_Con_String_Input
 24683 00003528 B40A                    	mov	ah,0Ah
 24684 0000352A BA[529C]                	mov	dx,COMBUF
 24685 0000352D B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 24686 00003530 E875FF                  	call	SetInitFlag		;  prompting for date.
 24687 00003533 CD21                    	int	21h			; Get input line
 24688 00003535 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 24689 00003537 E86EFF                  	call	SetInitFlag		;  prompting for date.
 24690 0000353A E8E4F5                  	call	CRLF2
 24691                                  	; 28/02/2023
 24692                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24693                                  ;gettim_p: ; 28/02/2023
 24694 0000353D BE[549C]                	mov	si,COMBUF+2
 24695                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 24696 00003540 31D2                    	xor	dx,dx			;AN000;
 24697                                  	;call	cmd_parse		;AC000; call parser
 24698                                  	;retn
 24699                                  	; 28/02/2023
 24700 00003542 E91415                  	jmp	cmd_parse
 24701                                  
 24702                                  ; =============== S U B	R O U T	I N E =======================================
 24703                                  
 24704                                  ; MSDOS 6.0
 24705                                  
 24706                                  ; ****************************************************************
 24707                                  ; *
 24708                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 24709                                  ; *
 24710                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 24711                                  ; *		 INFORMATION and issues the "Enter new time"
 24712                                  ; *		 message. COMBUF is reset to get a time from the
 24713                                  ; *		 command line. The PARSE_TIME blocks are then
 24714                                  ; *		 reset and the PARSE function call is issued.
 24715                                  ; *
 24716                                  ; * INPUT:	 NONE
 24717                                  ; *
 24718                                  ; * OUTPUT:	 COMBUF
 24719                                  ; *		 PARSER RETURN CODES
 24720                                  ; *
 24721                                  ; ****************************************************************
 24722                                  
 24723                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24724                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 24725                                  
 24726                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24727                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:36E7h
 24728                                  GETTIM:
 24729 00003545 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 24730 00003547 BA[A992]                	mov	dx,NewTim_Ptr
 24731 0000354A E8C21F                  	call	std_printf
 24732                                  
 24733                                  	; 28/02/2023
 24734 0000354D BF[F597]                	mov	di,PARSE_TIME
 24735 00003550 EBD6                    	jmp	short gettim_p
 24736                                  
 24737                                  ; 28/02/2023
 24738                                  ;	;mov	ah,Std_Con_String_Input
 24739                                  ;	mov	ah,0Ah
 24740                                  ;	mov	dx,COMBUF
 24741                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 24742                                  ;	call	SetInitFlag		;  prompting for time.
 24743                                  ;	int	21h			; Get input line
 24744                                  ;	; 28/02/2023
 24745                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 24746                                  ;	call	SetInitFlag		;  prompting for time.
 24747                                  ;	call	CRLF2
 24748                                  ;	; 28/02/2023
 24749                                  ;	;mov	si,COMBUF+2
 24750                                  ;	; 28/02/2023
 24751                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 24752                                  ;	; 28/02/2023
 24753                                  ;	jmp	short gettim_p	
 24754                                  ;	; 28/02/2023
 24755                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 24756                                  ;	;xor	dx,dx			;AN000;
 24757                                  ;	;call	cmd_parse		;AC000; call parser
 24758                                  ;	;retn
 24759                                  
 24760                                  
 24761                                  ; =============== S U B	R O U T	I N E =======================================
 24762                                  
 24763                                  ; MSDOS 6.0
 24764                                  
 24765                                  ;Skip_white: Skips over the whitespace chars that could be present after
 24766                                  ;the '=' sign in the environment variable before the actual path.
 24767                                  ;
 24768                                  ;	ENTRY:	ds:si = arguments of the environment variable
 24769                                  ;
 24770                                  ;	EXIT:	ds:si = start of the path
 24771                                  ;
 24772                                  ;	REGISTERS AFFECTED: ax
 24773                                  
 24774                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24775                                  skip_white:
 24776 00003552 FC                      	cld
 24777                                  skw_lp:
 24778 00003553 AC                      	lodsb
 24779 00003554 3C20                    	cmp	al,' '			;blank char?
 24780 00003556 74FB                    	jz	short skw_lp		;yes, skip it
 24781 00003558 3C09                    	cmp	al,9			;tab char?
 24782 0000355A 74F7                    	jz	short skw_lp		;yes, skip it
 24783 0000355C 4E                      	dec	si			;point at first non-white
 24784 0000355D C3                      	retn
 24785                                  
 24786                                  ; =============== S U B	R O U T	I N E =======================================
 24787                                  
 24788                                  ; MSDOS 6.0
 24789                                  
 24790                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 24791                                  ;variable into the path buffers Pipe1 & Pipe2.
 24792                                  ;
 24793                                  ;	ENTRY:	ds:si = path to be copied
 24794                                  ;		es = RESGROUP
 24795                                  ;
 24796                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 24797                                  ;
 24798                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 24799                                  
 24800                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24801                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 24802                                  
 24803                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24804                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:371Eh
 24805                                  copy_pipe_path:
 24806 0000355E B9FFFF                  	mov	cx,0FFFFh ; 65535
 24807 00003561 30C0                    	xor	al,al
 24808                                  
 24809 00003563 89F7                    	mov	di,si
 24810 00003565 06                      	push	es			;save es
 24811 00003566 1E                      	push	ds
 24812 00003567 07                      	pop	es			;es:di = path to be copied
 24813                                  	
 24814 00003568 FC                      	cld
 24815 00003569 57                      	push	di
 24816 0000356A F2AE                    	repnz	scasb			;look for the null char
 24817 0000356C 5F                      	pop	di
 24818                                  
 24819 0000356D 07                      	pop	es			;es = RESGROUP again
 24820                                  
 24821 0000356E F7D1                    	not	cx			;length including the null
 24822                                  
 24823                                  	;;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 24824                                  	;;mov	di,3EAh ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24825                                  	;mov	di,offset DATARES:Pipe1
 24826 00003570 BF[B702]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 24827 00003573 57                      	push	di
 24828 00003574 51                      	push	cx			
 24829 00003575 F3A4                    	rep	movsb			;copy path into Pipe1
 24830 00003577 59                      	pop	cx
 24831 00003578 5F                      	pop	di
 24832                                  
 24833 00003579 1E                      	push	ds
 24834 0000357A 06                      	push	es
 24835 0000357B 1F                      	pop	ds			;ds:si = Pipe1
 24836 0000357C 89FE                    	mov	si,di
 24837                                  	;;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 24838                                  	;;mov	di,439h ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24839                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 24840 0000357E BF[0603]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 24841 00003581 F3A4                    	rep	movsb			;copy path into Pipe2
 24842 00003583 1F                      	pop	ds
 24843 00003584 C3                      	retn
 24844                                  
 24845                                  ;============================================================================
 24846                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 24847                                  ;============================================================================
 24848                                  ; 03/10/2018 - Retro DOS v3.0
 24849                                  
 24850                                  ;----------------------------------------------------------------------------
 24851                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 24852                                  ; argv[argvcnt] array. The most important difference between this array and
 24853                                  ; the tradition UNIX format is the extra cparse information included with
 24854                                  ; each argument element.
 24855                                  ;---------------
 24856                                  ; ENTRY:
 24857                                  ;	BL	     special delimiter for cparse -- not implemented)
 24858                                  ;---------------
 24859                                  ; EXIT:
 24860                                  ;	CF	    set if error
 24861                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 24862                                  ;	argv[]	    array of cparse flags and pointers to arguments
 24863                                  ;	argvcnt     argument count
 24864                                  ;---------------
 24865                                  ; NOTE(S):
 24866                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 24867                                  ;	*   Parseflags record contains cparse flags, as follows:
 24868                                  ;		sw_flag 	--	was this arg a switch?
 24869                                  ;		wildcard	--	whether or not it contained a * or ?
 24870                                  ;		path_sep	--	maybe it was a pathname
 24871                                  ;		unused		--	for future expansion
 24872                                  ;		special_delim	--	was there an initial special delimiter?
 24873                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 24874                                  ;	*   Relationship between input, cparse output, and comtail can be
 24875                                  ;	    found in the following chart. Despite the claim of the cparse
 24876                                  ;	    documentation that, "Token buffer always starts d: for non switch
 24877                                  ;	    tokens", such is not the case (see column two, row two).
 24878                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 24879                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 24880                                  ;	    STARTEL addresses) will be null. This is clearly just a
 24881                                  ;	    documentation error.
 24882                                  ;	*   cparse also returns a switch code in BP for each switch it
 24883                                  ;	    recognizes on the command line.
 24884                                  ;	*   arglen for each token does NOT include the terminating null.
 24885                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 24886                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 24887                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 24888                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 24889                                  ;	    line parsing may result in slightly different behavior than
 24890                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 24891                                  ;
 24892                                  ;	    Input		    Cparse		Command Line (80H)
 24893                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 24894                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 24895                                  ;	foo.bat 		foo.bat 		foo.bat
 24896                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 24897                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 24898                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 24899                                  
 24900                                  ; =============== S U B	R O U T	I N E =======================================
 24901                                  
 24902                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 24903                                  
 24904                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24905                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 24906                                  
 24907                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24908                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 24909                                  
 24910                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 24911                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 24912                                  
 24913                                  PARSELINE:
 24914 00003585 50                      	push	ax			; most of these are clobbered
 24915 00003586 53                      	push	bx			; by cparse...
 24916 00003587 51                      	push	cx
 24917 00003588 52                      	push	dx
 24918 00003589 57                      	push	di
 24919 0000358A 56                      	push	si
 24920 0000358B 9C                      	pushf
 24921                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 24922 0000358C C706[07A8]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 24923 00003592 31C0                    	xor	ax,ax
 24924                                  	;;mov	cx,1348
 24925                                  	; 27/07/2024
 24926                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 24927 00003594 B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 24928 00003597 A2[95A0]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 24929 0000359A BF[41A2]                	mov	di,ARG
 24930 0000359D F3AA                    	rep	stosb
 24931                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 24932 0000359F C706[85A7][05A5]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 24933                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 24934                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 24935 000035A5 A3[03A5]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 24936                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 24937                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 24938 000035A8 A3[01A5]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 24939 000035AB BE[549C]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 24940                                  
 24941                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 24942                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 24943                                  ; otherwise. This is done so that commands can get arg pointers into their
 24944                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 24945                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 24946                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 24947                                  ; the command to be repeated or the transient part of command has been
 24948                                  ; reloaded.
 24949                                  
 24950 000035AE 1E                      	push	ds
 24951 000035AF 8E1E[F39D]              	mov	ds,[RESSEG]
 24952                                  	;cmp	byte [ForFlag],0
 24953 000035B3 3806[4902]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 24954 000035B7 1F                      	pop	ds
 24955 000035B8 7510                    	jnz	short PCONT
 24956                                  	;mov	di,ARG_ARGFORCOMBUF
 24957 000035BA BF[05A6]                	mov	di,ARG+ARG_UNIT.argforcombuf
 24958 000035BD 30ED                    	xor	ch,ch
 24959 000035BF 8A0E[539C]              	mov	cl,[COMBUF+1]
 24960 000035C3 FEC1                    	inc	cl
 24961 000035C5 F3A4                    	rep	movsb
 24962                                  	;mov	si,ARG_ARGFORCOMBUF
 24963 000035C7 BE[05A6]                	mov	si,ARG+ARG_UNIT.argforcombuf
 24964                                  PCONT:
 24965 000035CA BF[87A7]                	mov	di,TPBUF	; destination is temporary token buffer
 24966 000035CD B320                    	mov	bl,' '		; no special delimiter, for now
 24967                                  PARSELOOP:
 24968 000035CF 8936[09A8]              	mov	[COMPTR],si	; save ptr into original command buffer
 24969 000035D3 31ED                    	xor	bp,bp		; switch information put here by cparse
 24970 000035D5 C606[23A2]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 24971 000035DA E851F5                  	call	scanoff		; skip leading blanks...
 24972 000035DD E8B412                  	call	cparse		; byte off a token (args in SI, DI, BL)
 24973 000035E0 730B                    	jnb	short MORE_PRSE
 24974 000035E2 09ED                    	or	bp,bp		; Check for trailing switch character
 24975 000035E4 7403                    	jz	short PARSEDONE
 24976 000035E6 E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 24977                                  				;   typical cause of this is that a
 24978                                  				;   switch char IMMEDIATELY preceeds
 24979                                  				;   the CR. We have an argument, but it
 24980                                  				;   is sort of an error.
 24981                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 24982                                  	; 01/03/2023
 24983                                  PARSEDONE:
 24984 000035E9 9D                      	popf
 24985 000035EA F8                      	clc
 24986 000035EB EB0C                    	jmp	short PARSE_EXIT
 24987                                  
 24988                                  MORE_PRSE:
 24989 000035ED C606[95A0]02            	mov	byte [cpyflag],2
 24990                                  				; tell CPARSE that 1st token is done
 24991 000035F2 E80B00                  	call	newarg		; add to argv array (CX has char count)
 24992 000035F5 73D8                    	jnb	short PARSELOOP	; was everything OK?
 24993                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 24994                                  	; 01/03/2023
 24995                                  ;PARSEDONE:
 24996                                  	;popf
 24997                                  	;clc
 24998                                  	;jmp	short PARSE_EXIT
 24999                                  
 25000                                  PARSE_ERROR:			; error entry (er, exit) point
 25001 000035F7 9D                      	popf
 25002 000035F8 F9                      	stc
 25003                                  PARSE_EXIT:			; depend on not changing CF
 25004 000035F9 5E                      	pop	si
 25005 000035FA 5F                      	pop	di
 25006 000035FB 5A                      	pop	dx
 25007 000035FC 59                      	pop	cx
 25008 000035FD 5B                      	pop	bx
 25009 000035FE 58                      	pop	ax
 25010 000035FF C3                      	retn
 25011                                  
 25012                                  ; =============== S U B	R O U T	I N E =======================================
 25013                                  
 25014                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 25015                                  ;
 25016                                  ; ENTRY:
 25017                                  ;   BH			argflags
 25018                                  ;   CX			character count in argstring
 25019                                  ;   DI			pointer to argstring
 25020                                  ;   comptr		ptr to starting loc of current token in original command
 25021                                  ;   [STARTEL]		cparse's answer to where the last element starts
 25022                                  ; EXIT:
 25023                                  ;   argbufptr		points to next free section of argbuffer
 25024                                  ;   arg.argbuf		contains null-terminated argument strings
 25025                                  ;   arg.argvcnt 	argument count
 25026                                  ;   arg.argv[]		array of flags and pointers
 25027                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 25028                                  ;   CF			set if error
 25029                                  ;   AL			carry set:  error code; otherwise, zero
 25030                                  
 25031                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25032                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25033                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM 
 25034                                  	;	     & Retro DOS v4.2 COMMAND.COM (2024 modification)
 25035                                  newarg:
 25036 00003600 53                      	push	bx
 25037 00003601 51                      	push	cx
 25038 00003602 52                      	push	dx
 25039 00003603 57                      	push	di
 25040 00003604 56                      	push	si
 25041 00003605 9C                      	pushf
 25042 00003606 E86200                  	call	arg_switch		; if it's a switch, record switch info
 25043                                  					; LEAVE SWITCH ON COMMAND LINE!!
 25044                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 25045                                  
 25046                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 25047 00003609 833E[01A5]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 25048 0000360E 7D50                    	jge	short to_many_args	; exceeded array limits
 25049 00003610 88FE                    	mov	dh,bh			
 25050                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 25051 00003612 8B1E[01A5]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 25052                                  	;inc	word [ARG_ARGVCNT]
 25053 00003616 FF06[01A5]              	inc	word [ARG+ARG_UNIT.argvcnt]
 25054                                  	;mov	ax,ARG_ARGV
 25055 0000361A B8[41A2]                	mov	ax,ARG+ARG_UNIT.argv
 25056 0000361D E87E00                  	call	argv_calc		; convert offset to pointer
 25057                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 25058                                  	;mov	word [bx+7],0
 25059 00003620 C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 25060                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 25061                                  	;mov	[bx+5],cx
 25062 00003625 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 25063                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 25064                                  	;mov	[bx+2],dh
 25065 00003628 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 25066 0000362B 8B36[85A7]              	mov	si,[ARGBUF_PTR]
 25067                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 25068                                  	;mov	[bx+ARGV_ELE.argpointer],si
 25069 0000362F 8937                    	mov	[bx],si			
 25070 00003631 0336[E7A1]              	add	si,[STARTEL]		; save startel from new location
 25071 00003635 29FE                    	sub	si,di			; form pointer into argbuf
 25072                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 25073                                  	;mov	[bx+3],si
 25074 00003637 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 25075 0000363A 8B36[09A8]              	mov	si,[COMPTR]
 25076                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 25077                                  	;mov	[bx+9],si
 25078 0000363E 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 25079 00003641 89FE                    	mov	si,di			; now save argstring in argbuffer
 25080 00003643 8B3E[85A7]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 25081                                  
 25082                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25083                                  ; PCDOS 7.1 COMMAND.COM
 25084                                  %if 0
 25085                                  	add	di,cx			; sure we're not about to run off
 25086                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 25087                                  	;;cmp	di,ARG_ARGBUF+255
 25088                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 25089                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25090                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 25091                                  	sub	di,cx
 25092                                  %else
 25093                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25094                                  	;mov	bx,ARG_ARGBUF+127
 25095 00003647 BB[84A5]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25096 0000364A 29FB                    	sub	bx,di	; sure we're not about to run off
 25097 0000364C 39CB                    	cmp	bx,cx
 25098 0000364E 7302                    	jnb	short newarg_@
 25099 00003650 89D9                    	mov	cx,bx	
 25100                                  %endif
 25101                                  
 25102                                  newarg_@:	; 27/07/2024
 25103 00003652 FC                      	cld
 25104 00003653 F3A4                    	rep	movsb
 25105 00003655 B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 25106 00003657 AA                      	stosb
 25107 00003658 893E[85A7]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 25108                                  newarg_done:
 25109 0000365C 9D                      	popf
 25110 0000365D F8                      	clc
 25111 0000365E EB05                    	jmp	short newarg_exit
 25112                                  
 25113                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25114                                  ; PCDOS 7.1 COMMAND.COM
 25115                                  %if 0
 25116                                  to_many_args:
 25117                                  	mov	ax,1
 25118                                  	jmp	short newarg_error
 25119                                  buf_oflow:
 25120                                  	mov	ax,2
 25121                                  %else
 25122                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25123                                  ;buf_oflow:
 25124                                  ;	; 27/07/2024
 25125                                  ;	; PCDOS 7.1 COMMAND.COM
 25126                                  ;	sub	di,cx
 25127                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 25128                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25129                                  ;	sub	cx,di
 25130                                  ;	jmp     short newarg_@
 25131                                  to_many_args:
 25132 00003660 B80100                  	mov	ax,1
 25133                                  %endif
 25134                                  
 25135                                  newarg_error:
 25136 00003663 9D                      	popf
 25137 00003664 F9                      	stc
 25138                                  newarg_exit:
 25139 00003665 5E                      	pop	si
 25140 00003666 5F                      	pop	di
 25141 00003667 5A                      	pop	dx
 25142 00003668 59                      	pop	cx
 25143 00003669 5B                      	pop	bx
 25144 0000366A C3                      	retn
 25145                                  
 25146                                  ; =============== S U B	R O U T	I N E =======================================
 25147                                  
 25148                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 25149                                  ; event that it is, and we can recognize
 25150                                  ;
 25151                                  ; ENTRY:
 25152                                  ;   As in <newarg>.
 25153                                  ; EXIT:
 25154                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 25155                                  ; NOTE(S):
 25156                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 25157                                  ;	on the order of definition in the <switch_list> variable and the
 25158                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 25159                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 25160                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 25161                                  ;   *	The <switch_list> declared below is redundant to one declared in
 25162                                  ;	TDATA.ASM, and used in TCODE.ASM.
 25163                                  ;   *	An ugly routine.
 25164                                  
 25165                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 25166                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25167                                  arg_switch:
 25168 0000366B 50                      	push	ax
 25169 0000366C 53                      	push	bx
 25170 0000366D 51                      	push	cx
 25171 0000366E 57                      	push	di
 25172 0000366F 9C                      	pushf
 25173 00003670 F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 25174 00003673 741C                    	jz	short arg_no_switch0
 25175 00003675 833E[07A8]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 25176 0000367A 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 25177 0000367C 8B1E[07A8]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 25178                                  	;mov	ax,offset TRANGROUP:arg.argv
 25179                                  	;mov	ax,ARG_ARGV
 25180 00003680 B8[41A2]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 25181 00003683 E81800                  	call	argv_calc
 25182                                  	;or	[BX].argsw_word,BP
 25183                                  	;or	[bx+7],bp
 25184 00003686 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 25185                                  	;or	arg.argswinfo,BP
 25186                                  	;or	[ARG_ARGSWINFO],bp
 25187 00003689 092E[03A5]              	or	[ARG+ARG_UNIT.argswinfo],bp
 25188                                  arg_yes_switch:
 25189 0000368D 9D                      	popf
 25190 0000368E F9                      	stc
 25191 0000368F EB08                    	jmp	short arg_switch_exit
 25192                                  
 25193                                  arg_no_switch0:
 25194                                  	;mov	ax,[ARG_ARGVCNT]
 25195 00003691 A1[01A5]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 25196 00003694 A3[07A8]                	mov	[LASTARG],ax
 25197                                  arg_no_switch1:
 25198 00003697 9D                      	popf
 25199 00003698 F8                      	clc
 25200                                  arg_switch_exit:
 25201 00003699 5F                      	pop	di
 25202 0000369A 59                      	pop	cx
 25203 0000369B 5B                      	pop	bx
 25204 0000369C 58                      	pop	ax
 25205 0000369D C3                      	retn
 25206                                  
 25207                                  ; =============== S U B	R O U T	I N E =======================================
 25208                                  
 25209                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 25210                                  ; the supplied array.  Method used for computing the address is:
 25211                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 25212                                  ; ENTRY:
 25213                                  ;   AX	    --	    base of array
 25214                                  ;   BX	    --	    array index
 25215                                  ; EXIT:
 25216                                  ;   BX	    --	    byte offset
 25217                                  
 25218                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 25219                                  argv_calc:
 25220 0000369E 50                      	push	ax		; Save base
 25221 0000369F 88D8                    	mov	al,bl		; al = array index
 25222                                  	;mov	bl,11
 25223 000036A1 B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 25224 000036A3 F6E3                    	mul	bl		; ax = base offset
 25225 000036A5 5B                      	pop	bx		; Get base
 25226 000036A6 01D8                    	add	ax,bx		; Add in base offset
 25227 000036A8 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 25228 000036A9 C3                      	retn
 25229                                  
 25230                                  ; ---------------------------------------------------------------------------
 25231                                  	
 25232                                  	;db 0Ah dup(0)
 25233                                  	;times 10 db 0
 25234                                  
 25235 000036AA 90<rep 6h>              align 16
 25236                                  
 25237                                  ;============================================================================
 25238                                  ; PATH1.ASM, MSDOS 6.0, 1991
 25239                                  ;============================================================================
 25240                                  ; 03/10/2018 - Retro DOS v3.0
 25241                                  
 25242                                  ;----------------------------------------------------------------------------
 25243                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 25244                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 25245                                  ;    given a pathname, attempts to find a corresponding executable or batch
 25246                                  ;    file on disk. Directories specified in the user's search path will be
 25247                                  ;    searched for a matching file, if a match is not found in the current
 25248                                  ;    directory and if the pathname is actually only an MSDOS filename.
 25249                                  ;    <Path_Search> assumes that the parsed command name can be found in
 25250                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 25251                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 25252                                  ;    information could be placed in argv[0], or <Path_Search> could be
 25253                                  ;    (easily) modified to make no assumptions about where its input is found.
 25254                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 25255                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 25256                                  ;    allocated memory. This is handy for for-loop processing, and anything
 25257                                  ;    else that wants to save the whole shebang and then process other command
 25258                                  ;    lines.
 25259                                  ;
 25260                                  ; Alan L, OS/MSDOS				    August 15, 1983
 25261                                  ;
 25262                                  ; ENTRY:
 25263                                  ;   <Path_Search>:	    argv[0].
 25264                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 25265                                  ; EXIT:
 25266                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 25267                                  ;   <Save_Args>:	    success flag, segment address of new memory
 25268                                  ; NOTE(S):
 25269                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 25270                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 25271                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 25272                                  ;	does not function as specified; see <Parseline> for more details.
 25273                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 25274                                  ;	need to know about. This extra information is stored in a switch_flag
 25275                                  ;	word with each command-line argument; the switches themselves will not
 25276                                  ;	appear in the resulting arg structure.
 25277                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 25278                                  ;----------------------------------------------------------------------------
 25279                                  
 25280                                  ; =============== S U B	R O U T	I N E =======================================
 25281                                  
 25282                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 25283                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 25284                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 25285                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 25286                                  ; have a match, either in the current working directory if we were handed
 25287                                  ; a filename, or in the specified directory, given a pathname. If this call
 25288                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 25289                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 25290                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 25291                                  ; either the first invocation of search or on one of the succeeding calls
 25292                                  ; sets up the appropriate information for copying the successful pathname
 25293                                  ; prefix (if any) into the result buffer, followed by the successful filename
 25294                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 25295                                  ;
 25296                                  ; ENTRY:
 25297                                  ;   argv[0]		--	command name and associated information
 25298                                  ; EXIT:
 25299                                  ;   AX			--	non-zero indicates type of file found
 25300                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 25301                                  ; NOTE(S):
 25302                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 25303                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 25304                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 25305                                  ;	if search returns an .exe or .bat.
 25306                                  ;   5)	Clobbers dma address.
 25307                                  
 25308                                  PBUFLEN 	EQU	128		; length of EXECPATH
 25309                                  PATH_SEP_CHAR	EQU	';'
 25310                                  
 25311                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 25312                                  
 25313                                  	;special_delim equ 128
 25314                                  	;path_sep equ 4
 25315                                  	;wildcard equ 2
 25316                                  	;sw_flag  equ 1
 25317                                  
 25318                                  ;----------------------------------------------------------------------------
 25319                                  
 25320                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 25321                                  
 25322                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25323                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 25324                                  
 25325                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25326                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 387Bh
 25327                                  
 25328                                  path_search:
 25329 000036B0 53                      	push	bx
 25330 000036B1 51                      	push	cx
 25331 000036B2 52                      	push	dx		; could use a "stack 'em" instruction
 25332 000036B3 56                      	push	si
 25333 000036B4 57                      	push	di
 25334 000036B5 55                      	push	bp
 25335 000036B6 9C                      	pushf
 25336                                  
 25337                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 25338                                  	;test	byte [ARGV0_ARG_FLAGS],3
 25339 000036B7 F606[43A2]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 25340 000036BC 7403                    	jz	short path_search_ok
 25341                                  path_failure_jmp:
 25342 000036BE E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 25343                                  
 25344                                  path_search_ok:
 25345 000036C1 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 25346 000036C4 BA[0BA8]                	mov	dx,FBUF		; clobber old dma value with
 25347 000036C7 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 25348 000036CA CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 25349                                  			; DS:DX	-> disk	transfer buffer
 25350 000036CC 06                      	push	es
 25351 000036CD E88DF1                  	call	find_path	; get a handle (ES:DI) on user path
 25352 000036D0 8C06[36A8]              	mov	[pathinfo+0],es	; and squirrel it away
 25353 000036D4 893E[38A8]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 25354 000036D8 893E[3AA8]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 25355 000036DC 07                      	pop	es
 25356                                  	
 25357 000036DD BB8000                  	mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 25358 000036E0 BE[1B9D]                	mov	si,EXECPATH
 25359 000036E3 E88002                  	call	STRIP
 25360 000036E6 72D6                    	jc	short path_failure_jmp ; if possible, of course
 25361                                  		
 25362 000036E8 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 25363 000036EA C706[8BA8][2C92]        	mov	word [search_error],baddrv_ptr
 25364 000036F0 E89F01                  	call	PSEARCH		; must do at least one search
 25365 000036F3 09C0                    	or	ax,ax		; find anything?
 25366 000036F5 7469                    	jz	short path_noinit
 25367                                  				; failure ... search farther
 25368 000036F7 89C5                    	mov	bp,ax		; success... save filetype code
 25369 000036F9 BF[1B9D]                	mov	di,EXECPATH
 25370                                  	;mov	si,ds:arg.argv[0].argpointer
 25371                                  	;mov	si,[ARG_ARGV]
 25372 000036FC 8B36[41A2]              	mov	si,[ARG+ARGV_ELE.argpointer]
 25373                                  	;mov	cx,ds:arg.argv[0].argstartel
 25374                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 25375 00003700 8B0E[44A2]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 25376 00003704 29F1                    	sub	cx,si		; compute prefix bytes to copy
 25377                                  
 25378                                  ; We have the number of bytes in the prefix (up to the final component).
 25379                                  ; We need to form the complete pathname including leading drive and current
 25380                                  ; directory.
 25381                                  ;
 25382                                  ; Is there a drive letter present?
 25383                                  
 25384 00003706 B43A                    	mov	ah,':'
 25385 00003708 83F902                  	cmp	cx,2		; room for drive letter?
 25386 0000370B 7205                    	jb	short adddrive	; no, stick it in
 25387 0000370D 386401                  	cmp	[si+1],	ah	; colon present?
 25388 00003710 7408                    	je	short movedrive	; yes, just move it
 25389                                  adddrive:
 25390 00003712 A0[059E]                	mov	al,[CURDRV]	; get current drive
 25391 00003715 0441                    	add	al,'A'		; convert to uppercase letter
 25392 00003717 AB                      	stosw			; store d:
 25393 00003718 EB05                    	jmp	short checkpath
 25394                                  
 25395                                  movedrive:
 25396 0000371A AD                      	lodsw			; move d:
 25397 0000371B AB                      	stosw
 25398 0000371C 83E902                  	sub	cx,2		; 2 bytes less to move
 25399                                  checkpath:
 25400 0000371F 0C20                    	or	al,20h
 25401 00003721 88C2                    	mov	dl,al
 25402                                  	;sub	dl,60h
 25403 00003723 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 25404                                  
 25405                                  ; Stick in beginning path char
 25406                                  
 25407 00003726 A0[3CA8]                	mov	al,[psep_char]
 25408 00003729 AA                      	stosb
 25409                                  
 25410                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 25411                                  ; Otherwise, get current dir for DL.
 25412                                  
 25413 0000372A 83F901                  	cmp	cx,1		; is there room for path char?
 25414 0000372D 720A                    	jb	short addpath	; no, go add path
 25415 0000372F AC                      	lodsb
 25416 00003730 49                      	dec	cx
 25417 00003731 3A06[3CA8]              	cmp	al,[psep_char]	; is there a path separator?
 25418 00003735 741C                    	je	short movepath	; yes, go move remainder of path
 25419 00003737 41                      	inc	cx
 25420 00003738 4E                      	dec	si		; undo the lodsb
 25421                                  addpath:
 25422 00003739 56                      	push	si
 25423 0000373A 89FE                    	mov	si,di		; remainder of buffer
 25424 0000373C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25425 0000373F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25426                                  			; DL = drive (0=default,1=A,etc.)
 25427                                  			; DS:SI	points to 64-byte buffer area
 25428                                  
 25429                                  ; The previous current dir will succeed a previous find_first already worked.
 25430                                  ;
 25431                                  ; Find end of string.
 25432                                  
 25433 00003741 89F7                    	mov	di,si
 25434 00003743 5E                      	pop	si
 25435 00003744 A0[3CA8]                	mov	al,[psep_char]
 25436 00003747 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 25437 0000374A 7407                    	jz	short movepath	; yes, no need for path char
 25438                                  scanend:
 25439                                  	;cmp	byte [di],0	; end of string?
 25440                                  	;jz	short foundend
 25441                                  	;inc	di
 25442                                  	;jmp	short scanend
 25443                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 25444 0000374C 47                      	inc	di
 25445 0000374D 803D00                  	cmp	byte [di],0
 25446 00003750 75FA                    	jnz	short scanend
 25447                                  
 25448                                  ; Stick in a trailing path char.
 25449                                  
 25450                                  foundend:
 25451 00003752 AA                      	stosb
 25452                                  
 25453                                  ; Move remaining part of path. Skip leading path char if present.
 25454                                  
 25455                                  movepath:
 25456 00003753 3804                    	cmp	[si],al		; first char a path char?
 25457 00003755 7502                    	jne	short copypath
 25458                                  	; 26/04/2023
 25459 00003757 46                      	inc	si		; move past leading char
 25460 00003758 49                      	dec	cx		; drop from count
 25461                                  copypath:
 25462 00003759 E302                    	jcxz	_copydone	; no chars to move!
 25463 0000375B F3A4                    	rep	movsb
 25464                                  _copydone:
 25465 0000375D E9A100                  	jmp	path_success
 25466                                  				; run off and form complete pathname
 25467                                  path_noinit:
 25468                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 25469                                  	;test	byte [ARGV0_ARG_FLAGS],4
 25470 00003760 F606[43A2]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 25471 00003765 751B                    	jnz	short path_failure
 25472                                  				; complete pathname specified ==> fail
 25473                                  	;mov	bh,';'
 25474 00003767 B73B                    	mov	bh,PATH_SEP_CHAR
 25475                                  				; semicolon terminates pathstring
 25476                                  	;mov	dx,ds:arg.argv[0].argstartel
 25477                                  				; this is where the last element starts
 25478                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 25479 00003769 8B16[44A2]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 25480                                  	;sub	dx,ds:arg.argv[0].argpointer
 25481                                  				; form pointer into EXECPATH,
 25482                                  	;sub	dx,[ARG_ARGV]
 25483 0000376D 2B16[41A2]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 25484 00003771 81C2[1B9D]              	add	dx,EXECPATH	; skipping over drive spec, if any
 25485                                  path_loop:
 25486 00003775 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 25487 00003778 89C5                    	mov	bp,ax		; save filetype code
 25488 0000377A 9F                      	lahf			; save flags, just in case
 25489 0000377B 09ED                    	or	bp,bp		; did path_crunch find anything?
 25490 0000377D 7508                    	jnz	short path_found
 25491 0000377F 9E                      	sahf			; see? needed those flags, after all!
 25492 00003780 73F3                    	jnc	short path_loop	; is there anything left to the path?
 25493                                  path_failure:
 25494 00003782 31C0                    	xor	ax,ax
 25495 00003784 E98700                  	jmp	path_exit
 25496                                  
 25497                                  path_found:				; pathinfo[] points to winner
 25498 00003787 BF[1B9D]                	mov	di,EXECPATH
 25499                                  	;mov	cx,pathinfo[4]
 25500 0000378A 8B0E[3AA8]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 25501                                  	;mov	si,pathinfo[2]
 25502 0000378E 8B36[38A8]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 25503                                  
 25504                                  ;	BAS Nov 20/84
 25505                                  ;   Look at the pathname and expand . and .. if they are the first element
 25506                                  ;   in the pathname (after the drive letter)
 25507                                  
 25508 00003792 06                      	push	es
 25509                                  	;push	pathinfo[0]
 25510 00003793 FF36[36A8]              	push	word [pathinfo+0]
 25511 00003797 07                      	pop	es
 25512                                  ;SR;
 25513                                  ; Oops! Gets fooled if path= \;..
 25514                                  ; We should also check if a drive letter is really present
 25515                                  ;
 25516 00003798 26807C022E              	cmp	byte [es:si+2],'.'
 25517                                  				; Look for Current dir at start of path
 25518 0000379D 7534                    	jne	short path_cpy
 25519                                  
 25520                                  	; 18/03/2023
 25521                                  	; MSDOS 6.0
 25522 0000379F 26807C013A              	cmp	byte [es:si+1],':'
 25523                                  				; does path have drive letter?
 25524 000037A4 752D                    	jne	short path_cpy	; no, copy the path string
 25525                                  
 25526 000037A6 51                      	push	cx		; Save pointer to end of string
 25527                                  	;mov	al,[es:si]
 25528                                  	;mov	[di],al		; Copy drive letter, :, and root char
 25529                                  	;mov	al,[es:si+1]	; to EXECPATH
 25530                                  	;mov	[di+1],al
 25531                                  	; 05/05/2023
 25532 000037A7 268B04                  	mov	ax,[es:si]
 25533 000037AA 8905                    	mov	[di],ax
 25534 000037AC A0[3CA8]                	mov	al,[psep_char]
 25535 000037AF 884502                  	mov	[di+2],	al
 25536 000037B2 56                      	push	si		; Save pointer to begining of string
 25537 000037B3 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 25538 000037B6 80CA20                  	or	dl,20h
 25539                                  	;sub	dl,60h
 25540 000037B9 80EA60                  	sub	dl,'a'-1
 25541 000037BC 89FE                    	mov	si,di		; pointer to EXECPATH
 25542 000037BE 83C603                  	add	si,3		; Don't wipe out drive and root info
 25543 000037C1 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25544 000037C4 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25545                                  			; DL = drive (0=default,1=A,etc.)
 25546                                  			; DS:SI	points to 64-byte buffer area
 25547 000037C6 E8F3F9                  	call	dstrlen		; Determine length of present info
 25548 000037C9 01CE                    	add	si,cx		; Don't copy over drive and root info
 25549 000037CB 4E                      	dec	si
 25550 000037CC 89F7                    	mov	di,si		; Point to end of target string
 25551 000037CE 5E                      	pop	si		; Restore pointer to begining of string
 25552 000037CF 83C603                  	add	si,3		; Point past drive letter, :, .
 25553 000037D2 59                      	pop	cx		; Restore pointer to end of string
 25554                                  path_cpy:
 25555 000037D3 07                      	pop	es
 25556 000037D4 29F1                    	sub	cx,si		; yields character count
 25557 000037D6 1E                      	push	ds		; time to switch segments
 25558 000037D7 FF36[36A8]              	push	word [pathinfo+0]
 25559                                  				; string lives in this segment
 25560 000037DB 1F                      	pop	ds
 25561 000037DC FC                      	cld
 25562                                  
 25563                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25564                                  	; MSDOS 5.0 (& MSDOS 5.0)
 25565                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 25566                                  kloop:
 25567 000037DD AC                      	lodsb			;AN000;  3/3/KK
 25568 000037DE AA                      	stosb			;AN000;  3/3/KK
 25569 000037DF E82DF1                  	call	testkanj	;AN000;  3/3/KK
 25570 000037E2 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 25571 000037E4 49                      	dec	cx		;AN000;  3/3/KK
 25572 000037E5 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 25573 000037E7 A4                      	movsb			;AN000;  3/3/KK
 25574 000037E8 49                      	dec	cx		;AN000;  3/3/KK
 25575 000037E9 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 25576 000037EC 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 25577                                  popdone:			;AN000;  3/3/KK
 25578 000037EE 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 25579 000037EF A0[3CA8]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 25580 000037F2 EB0C                    	jmp	short path_store
 25581                                  				;AN000;  3/3/KK
 25582                                  _notkanj1:
 25583                                  	; 26/04/2023
 25584 000037F4 E2E7                    	loop	kloop
 25585 000037F6 1F                      	pop	ds		; return to our segment
 25586 000037F7 4F                      	dec	di		; overwrite terminator
 25587 000037F8 A0[3CA8]                	mov	al,[psep_char]	; with a pathname separator
 25588 000037FB 3A45FF                  	cmp	al,[di-1]
 25589 000037FE 7401                    	je	short path_success
 25590                                  path_store:
 25591 00003800 AA                      	stosb
 25592                                  path_success:
 25593 00003801 BE[3EA8]                	mov	si,search_best_buf
 25594 00003804 31C9                    	xor	cx,cx
 25595                                  path_succ_loop:
 25596 00003806 AC                      	lodsb			; append winning filename to path
 25597 00003807 AA                      	stosb			; (including terminating null)
 25598 00003808 08C0                    	or	al,al
 25599 0000380A 75FA                    	jnz	short path_succ_loop
 25600 0000380C 89E8                    	mov	ax,bp		; retrieve filetype code
 25601                                  path_exit:
 25602 0000380E 9D                      	popf
 25603 0000380F 5D                      	pop	bp
 25604 00003810 5F                      	pop	di
 25605 00003811 5E                      	pop	si		; chill out...
 25606 00003812 5A                      	pop	dx
 25607 00003813 59                      	pop	cx
 25608 00003814 5B                      	pop	bx
 25609 00003815 C3                      	retn
 25610                                  
 25611                                  ; =============== S U B	R O U T	I N E =======================================
 25612                                  
 25613                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 25614                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 25615                                  ;
 25616                                  ; ENTRY:
 25617                                  ; EXIT:
 25618                                  ; NOTE(S):
 25619                                  ;   *	Uses <psep_char>, defined in <path_search>.
 25620                                  
 25621                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25622                                  STORE_PCHAR:
 25623 00003816 50                      	push	ax
 25624 00003817 B02F                    	mov	al,'/'		; is the pathname-element separator
 25625 00003819 E8A0F3                  	call	pathchrcmp	; a regular slash?
 25626 0000381C 7402                    	jz	short STORE_SLASH
 25627                                  				; if yes, remember slash
 25628 0000381E B05C                    	mov	al,'\'
 25629                                  	; 18/03/2023
 25630                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 25631                                  	;pop	ax
 25632                                  	;retn
 25633                                  STORE_SLASH:
 25634 00003820 A2[3CA8]                	mov	[psep_char],al
 25635 00003823 58                      	pop	ax
 25636 00003824 C3                      	retn
 25637                                  
 25638                                  ; =============== S U B	R O U T	I N E =======================================
 25639                                  
 25640                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 25641                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 25642                                  ; additional separator to use for breaking up the path-string. Null is the
 25643                                  ; default. Once the user-string has been formed, search is invoked to see
 25644                                  ; what's out there.
 25645                                  ;
 25646                                  ; ENTRY:
 25647                                  ;   BH			--	additional terminator character
 25648                                  ;   SI			--	pointer into pathstring to be dissected
 25649                                  ;   DX			--	pointer to stripped filename
 25650                                  ; EXIT:
 25651                                  ;   AX			--	non-zero (file type), zero (nothing found)
 25652                                  ;   SI			--	moves along pathstring from call to call
 25653                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 25654                                  ;   [tpbuf]		--	clobbered
 25655                                  ; NOTE(S):
 25656                                  ;   *	Implicit in this code is the ability to specify when to search
 25657                                  ;	the current directory (if at all) through the PATH defined by
 25658                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 25659                                  ;	current directory before the bin and etc directories of drive c).
 25660                                  
 25661                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25662                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 25663                                  
 25664                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25665                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:39FEh
 25666                                  	
 25667                                  path_crunch:
 25668 00003825 53                      	push	bx
 25669 00003826 51                      	push	cx
 25670 00003827 52                      	push	dx
 25671 00003828 57                      	push	di
 25672 00003829 56                      	push	si
 25673                                  	;pushf	; ** ; 18/03/2023
 25674 0000382A E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 25675 0000382D BF[87A7]                	mov	di,TPBUF	; destination of concatenated string
 25676 00003830 8B36[3AA8]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 25677 00003834 8936[38A8]              	mov	[pathinfo+2],si	; becomes "old" pointer
 25678 00003838 1E                      	push	ds		; save old segment pointer
 25679 00003839 FF36[36A8]              	push	word [pathinfo+0]
 25680                                  				; replace with pointer to userpath's
 25681 0000383D 1F                      	pop	ds		; segment
 25682                                  	; 26/04/2023
 25683 0000383E 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK
 25684                                  path_cr_copy:
 25685 00003840 AC                      	lodsb			; get a pathname byte
 25686 00003841 08C0                    	or	al,al		; check for terminator(s)
 25687 00003843 7414                    	jz	short path_seg	; null terminates segment & pathstring
 25688 00003845 38F8                    	cmp	al,bh
 25689 00003847 7410                    	je	short path_seg	; BH terminates a pathstring segment
 25690                                  	;
 25691                                  	; 18/03/2023
 25692                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 25693 00003849 E8C3F0                  	call	testkanj	;AN000; 3/3/KK
 25694 0000384C 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 25695 0000384E AA                      	stosb			;AN000; 3/3/KK
 25696 0000384F A4                      	movsb			;AN000; 3/3/KK
 25697 00003850 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK
 25698 00003852 EBEC                    	jmp	short path_cr_copy
 25699                                  _notkanj2:
 25700 00003854 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 25701                                  	;
 25702 00003856 AA                      	stosb
 25703 00003857 EBE7                    	jmp	short path_cr_copy
 25704                                  
 25705                                  path_seg:
 25706 00003859 1F                      	pop	ds		; restore old data segment
 25707 0000385A 8936[3AA8]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 25708 0000385E 88C3                    	mov	bl,al		; remember if we saw null or not...
 25709                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 25710 00003860 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 25711 00003862 81FF[87A7]              	cmp	di,TPBUF	; was there really anything in pathstr?
 25712 00003866 7421                    	je	short path_cr_leave
 25713                                  				; if nothing was copied, pathstr empty
 25714                                  path_cr_look:
 25715 00003868 A0[3CA8]                	mov	al,[psep_char]	; form complete pathname
 25716                                  	;
 25717                                  	; 18/03/2023
 25718                                  	; MSDOS 6.0
 25719 0000386B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 25720 0000386D 7505                    	jnz	short path_cr_store
 25721                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 25722                                  	;
 25723 0000386F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 25724 00003872 7401                    	je	short path_cr_l1
 25725                                  path_cr_store:
 25726 00003874 AA                      	stosb
 25727                                  path_cr_l1:
 25728 00003875 89D6                    	mov	si,dx
 25729                                  path_cr_l2:
 25730 00003877 AC                      	lodsb			; tack the stripped filename onto
 25731 00003878 AA                      	stosb			; the end of the path, up to and
 25732 00003879 08C0                    	or	al,al		; including the terminating null
 25733 0000387B 75FA                    	jnz	short path_cr_l2
 25734 0000387D BA[87A7]                	mov	dx,TPBUF	; and look for an appropriate file...
 25735 00003880 C706[8BA8][2893]        	mov	word [search_error],BADPMES_PTR
 25736                                  	;invoke search
 25737 00003886 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 25738                                  
 25739                                  	; 18/03/2023
 25740                                  ;path_cr_leave:
 25741                                  	;or	bl,bl		; did we finish off the pathstring?
 25742                                  	;jz	short path_cr_empty
 25743                                  	;			; null in BL means all gone...
 25744                                  	;popf	; **		; otherwise, plenty left
 25745                                  	;clc
 25746                                  	;jmp	short path_cr_exit
 25747                                  ;path_cr_empty:
 25748                                  	;popf	; **
 25749                                  	;stc
 25750                                  ;path_cr_exit:
 25751                                  
 25752                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25753                                  path_cr_leave:
 25754                                  	;popf ; ** ; 18/03/2023
 25755 00003889 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 25756                                  
 25757                                  path_cr_exit:
 25758 0000388C 5E                      	pop	si
 25759 0000388D 5F                      	pop	di
 25760 0000388E 5A                      	pop	dx
 25761 0000388F 59                      	pop	cx
 25762 00003890 5B                      	pop	bx
 25763 00003891 C3                      	retn
 25764                                  
 25765                                  ;============================================================================
 25766                                  ; PATH2.ASM, MSDOS 6.0, 1991
 25767                                  ;============================================================================
 25768                                  ; 02/10/2018 - Retro DOS v3.0
 25769                                  
 25770                                  ;----------------------------------------------------------------------------
 25771                                  ;   SEARCH, when given a pathname, attempts to find a file with
 25772                                  ; one of the following extensions: .com, .exe, .bat (highest to
 25773                                  ; lowest priority). Where conflicts arise, the extension with
 25774                                  ; the highest priority is favored.
 25775                                  ; ENTRY:
 25776                                  ;   DX		--	pointer to null-terminated pathname
 25777                                  ;   fbuf	--	dma buffer for findfirst/next
 25778                                  ; EXIT:
 25779                                  ;   AX		--	8)  file found with .com extension
 25780                                  ;			4)  file found with .exe extension
 25781                                  ;			2)  file found with .bat extension
 25782                                  ;			0)  no such file to be found
 25783                                  ;   (if AX is non-zero:)
 25784                                  ;   [search_best]	identical to AX
 25785                                  ;   [search_best_buf]	null-terminated filename
 25786                                  ; NOTES:
 25787                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 25788                                  ;---------------
 25789                                  ; CONSTANTS:
 25790                                  ;---------------
 25791                                  SEARCH_FILE_NOT_FOUND	EQU	0
 25792                                  SEARCH_COM		EQU	8
 25793                                  SEARCH_EXE		EQU	4
 25794                                  SEARCH_BAT		EQU	2
 25795                                  FNAME_LEN		EQU	8
 25796                                  FNAME_MAX_LEN		EQU	13
 25797                                  DOT			EQU	'.'
 25798                                  WILDCHAR		EQU	'?'
 25799                                  
 25800                                  
 25801                                  ; =============== S U B	R O U T	I N E =======================================
 25802                                  
 25803                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 25804                                  
 25805                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25806                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 25807                                  
 25808                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25809                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3A73h
 25810                                  PSEARCH:
 25811 00003892 51                      	push	cx
 25812 00003893 52                      	push	dx
 25813 00003894 57                      	push	di
 25814 00003895 56                      	push	si
 25815                                  	;pushf	; ** ; 18/03/2023
 25816 00003896 52                      	push	dx		; check drivespec (save pname ptr)
 25817 00003897 89D7                    	mov	di,dx		; working copy of pathname
 25818 00003899 BE[4BA8]                	mov	si,search_curdir_buf
 25819 0000389C 31D2                    	xor	dx,dx		; zero means current drive
 25820 0000389E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 25821 000038A2 7508                    	jne	short SEARCH_DIR_CHECK
 25822 000038A4 8A15                    	mov	dl,[di]		; get the drive byte
 25823 000038A6 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 25824 000038A9 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 25825                                  SEARCH_DIR_CHECK:
 25826 000038AC B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25827 000038AF CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25828                                  			; DL = drive (0=default,1=A,etc.)
 25829                                  			; DS:SI	points to 64-byte buffer area
 25830 000038B1 5A                      	pop	dx		; directory? If we can't we'll
 25831 000038B2 724C                    	jc	short SEARCH_INVALID_DRIVE
 25832                                  				; assume it's a bad drive...
 25833 000038B4 B91300                  	mov	cx,search_attr	; 13h
 25834                                  				; filetypes to search for
 25835 000038B7 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 25836 000038BA CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 25837                                  			; CX = search attributes
 25838                                  			; DS:DX	-> ASCIZ filespec
 25839                                  			; (drive,path, and wildcards allowed)
 25840 000038BC 7249                    	jc	short SEARCH_NO_FILE
 25841 000038BE C606[3DA8]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 25842 000038C3 C606[3EA8]00            	mov	byte [search_best_buf],ANULL
 25843                                  				; 0 ; nothing's been found, yet
 25844                                  SEARCH_LOOP:
 25845 000038C8 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 25846 000038CB 3A06[3DA8]              	cmp	al,[search_best]
 25847                                  				; better than what we've found so far?
 25848 000038CF 7E13                    	jle	short SEARCH_NEXT
 25849                                  				; no, look for another
 25850 000038D1 A2[3DA8]                	mov	[search_best],al
 25851                                  				; found something... save its code
 25852                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 25853                                  	;mov	si,FBUF_PNAME
 25854 000038D4 BE[29A8]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 25855 000038D7 BF[3EA8]                	mov	di,search_best_buf
 25856 000038DA B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25857 000038DD FC                      	cld
 25858 000038DE F3A4                    	rep	movsb		; save complete pathname representation
 25859 000038E0 3C08                    	cmp	al,SEARCH_COM	; 8
 25860                                  				; have we found the best of all?
 25861 000038E2 740A                    	je	short SEARCH_DONE
 25862                                  SEARCH_NEXT:			; keep on looking
 25863 000038E4 B91300                  	mov	cx,search_attr ; 13h
 25864 000038E7 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 25865 000038EA CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 25866                                  			; [DTA]	= data block from
 25867                                  			; last AH = 4Eh/4Fh call
 25868 000038EC 73DA                    	jnc	short SEARCH_LOOP
 25869                                  SEARCH_DONE:			; it's all over with...
 25870 000038EE A0[3DA8]                	mov	al,[search_best]
 25871                                  				; pick best to return with
 25872                                  	; 18/03/2023
 25873                                  	; MSDOS 6.0
 25874 000038F1 803E[F7A1]01            	cmp	byte [ext_entered],1
 25875                                  				;AN005; Did user request a specific ext?
 25876 000038F6 7411                    	je	short SEARCH_EXIT
 25877                                  				;AN005; no - exit
 25878 000038F8 A0[F7A1]                	mov	al,[ext_entered]
 25879                                  				;AN005; yes - get the real file type back
 25880 000038FB A2[3DA8]                	mov	[search_best],al
 25881                                  				;AN005; save the real file type
 25882                                  	;
 25883 000038FE EB09                    	jmp	short SEARCH_EXIT
 25884                                  
 25885                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 25886 00003900 8B16[8BA8]              	mov	dx,[search_error]
 25887                                  				; appropriate error message
 25888 00003904 E8081C                  	call	std_printf	; and pretend no file found
 25889                                  
 25890                                  SEARCH_NO_FILE:			; couldn't find a match
 25891                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 25892                                  	; 18/03/2023
 25893 00003907 31C0                    	xor	ax,ax
 25894                                  SEARCH_EXIT:
 25895                                  	;popf	; ** ; 18/03/2023
 25896 00003909 5E                      	pop	si
 25897 0000390A 5F                      	pop	di
 25898 0000390B 5A                      	pop	dx
 25899 0000390C 59                      	pop	cx
 25900 0000390D C3                      	retn
 25901                                  
 25902                                  ; =============== S U B	R O U T	I N E =======================================
 25903                                  
 25904                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 25905                                  ;
 25906                                  ; ENTRY:
 25907                                  ;   fbuf    --	dma buffer containing filename
 25908                                  ; EXIT:
 25909                                  ;   AX	    --	file code, as given in search header
 25910                                  ; NOTE(S):
 25911                                  ;   *	Implicit assumption that NULL == search_file_not_found
 25912                                  
 25913                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25914                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25915                                  SEARCH_FTYPE:
 25916 0000390E 57                      	push	di
 25917 0000390F 56                      	push	si
 25918                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 25919                                  	; 18/02/2023
 25920 00003910 31C0                    	xor	ax,ax ; ax = 0		
 25921                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 25922                                  	;mov	di,FBUF_PNAME
 25923 00003912 BF[29A8]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 25924 00003915 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25925 00003918 FC                      	cld
 25926 00003919 F2AE                    	repnz	scasb		; search for the terminating null
 25927 0000391B 7535                    	jnz	short FTYPE_EXIT
 25928                                  				; weird... no null byte at end
 25929 0000391D 83EF05                  	sub	di,5		; . + E + X + T + NULL
 25930                                  
 25931                                  	; Compare .COM
 25932                                  
 25933 00003920 BE[5497]                	mov	si,comext ; ".COM"
 25934 00003923 89F8                    	mov	ax,di
 25935 00003925 A7                      	cmpsw
 25936 00003926 7508                    	jnz	short FTYPE_EXE
 25937 00003928 A7                      	cmpsw
 25938 00003929 7505                    	jnz	short FTYPE_EXE
 25939                                  	;mov	ax,8
 25940 0000392B B80800                  	mov	ax,SEARCH_COM	; success!
 25941 0000392E EB22                    	jmp	short FTYPE_EXIT
 25942                                  
 25943                                  	; Compare .EXE
 25944                                  FTYPE_EXE:			; still looking... now for '.exe'
 25945 00003930 89C7                    	mov	di,ax
 25946 00003932 BE[5897]                	mov	si,exeext ; ".EXE"
 25947 00003935 A7                      	cmpsw
 25948 00003936 7508                    	jnz	short FTYPE_BAT
 25949 00003938 A7                      	cmpsw
 25950 00003939 7505                    	jnz	short FTYPE_BAT
 25951                                  	;mov	ax,4
 25952 0000393B B80400                  	mov	ax,SEARCH_EXE	; success!
 25953 0000393E EB12                    	jmp	short FTYPE_EXIT
 25954                                  
 25955                                  	; Compare .BAT
 25956                                  FTYPE_BAT:			; still looking... now for '.bat'
 25957 00003940 89C7                    	mov	di,ax
 25958 00003942 BE[5C97]                	mov	si,batext ; ".BAT"
 25959 00003945 A7                      	cmpsw
 25960 00003946 7508                    	jnz	short FTYPE_FAIL
 25961 00003948 A7                      	cmpsw
 25962 00003949 7505                    	jnz	short FTYPE_FAIL
 25963                                  	;mov	ax,2
 25964 0000394B B80200                  	mov	ax,SEARCH_BAT	; success!
 25965 0000394E EB02                    	jmp	short FTYPE_EXIT
 25966                                  
 25967                                  FTYPE_FAIL:			; file doesn't match what we need
 25968                                  	;mov	ax,ANULL ; 0
 25969                                  	; 18/03/2023
 25970 00003950 29C0                    	sub	ax,ax  ; ax = 0
 25971                                  FTYPE_EXIT:
 25972                                  	; 18/03/2023
 25973                                  	; MSDOS 6.0
 25974 00003952 803E[F7A1]01            	cmp	byte [ext_entered],1
 25975                                  				;AN005; was an extension entered?
 25976 00003957 740A                    	jz	short FTYPE_DONE
 25977                                  				;AN005; no - exit
 25978                                  	;cmp	ax,ANULL	;AN005; was any match found
 25979 00003959 21C0                    	and	ax,ax  ; ax = 0 ?
 25980 0000395B 7406                    	jz	short FTYPE_DONE
 25981                                  				;AN005; no - exit
 25982 0000395D A2[F7A1]                	mov	[ext_entered],al
 25983                                  				;AN005; save the match type found
 25984 00003960 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 25985                                  FTYPE_DONE:
 25986 00003963 5E                      	pop	si
 25987 00003964 5F                      	pop	di
 25988 00003965 C3                      	retn
 25989                                  
 25990                                  ; =============== S U B	R O U T	I N E =======================================
 25991                                  
 25992                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 25993                                  ; replacing any extension with wildcards.
 25994                                  ;
 25995                                  ; ENTRY:
 25996                                  ;	BX	--	maximum length of destination buffer
 25997                                  ;	DS:SI	--	address of destination buffer
 25998                                  ;	argv[0] --	command name to be stripped
 25999                                  ; EXIT:
 26000                                  ;	CF	--	set if failure, clear if successful
 26001                                  ; NOTE(S):
 26002                                  
 26003                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26004                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26005                                  STRIP:
 26006 00003966 50                      	push	ax
 26007 00003967 53                      	push	bx
 26008 00003968 51                      	push	cx
 26009 00003969 52                      	push	dx
 26010 0000396A 57                      	push	di
 26011 0000396B 56                      	push	si
 26012                                  	;pushf	; ** ; 18/03/2023
 26013                                  		
 26014                                  	; 05/05/2023
 26015                                  	; MSDOS 6.0
 26016 0000396C C606[F7A1]01            	mov	byte [ext_entered],1
 26017                                  				;AN005; assume no extension on file name
 26018                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26019                                  	;mov	dx,[ARG_ARGV]
 26020                                  	;mov	dx,ds:arg.argv[0].argpointer
 26021                                  				; save pointer to beginning of argstring
 26022                                  	;mov	dx,[ARGV0_ARGPOINTER]
 26023 00003971 8B16[41A2]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 26024                                  	;mov	di,ds:arg.argv[0].argstartel
 26025                                  				; beginning of last pathname element
 26026                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 26027 00003975 8B3E[44A2]              	mov	di,[ARG+ARGV_ELE.argstartel]
 26028 00003979 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 26029 0000397C 743D                    	je	short STRIP_ERROR
 26030 0000397E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 26031                                  	;add	cx,ds:arg.argv[0].arglen
 26032                                  	;add	cx,[ARGV0_ARGLEN]
 26033 00003980 030E[46A2]              	add	cx,[ARG+ARGV_ELE.arglen]
 26034 00003984 29F9                    	sub	cx,di		; and then find length of last element
 26035 00003986 41                      	inc	cx		; include null as well
 26036 00003987 B02E                    	mov	al,'.'
 26037                                  	;mov	al,DOT		; let's find the filetype extension
 26038 00003989 FC                      	cld
 26039 0000398A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 26040                                  
 26041                                  	; 18/03/2023
 26042                                  	; MSDOS 6.0
 26043 0000398C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 26044 0000398E B000                    	mov	al,0 ; 18/03/2023
 26045                                  	;mov	byte [ext_entered],0
 26046 00003990 A2[F7A1]                	mov	[ext_entered],al
 26047                                  				;AN005; we found an extension
 26048                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 26049                                  	;mov	al,0
 26050 00003993 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 26051                                  PROCESS_EXT:
 26052                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26053 00003995 89F9                    	mov	cx,di		; pointer to end of argstring yields
 26054 00003997 29D1                    	sub	cx,dx		; number of bytes to be copied
 26055 00003999 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 26056 0000399C 39D9                    	cmp	cx,bx
 26057 0000399E 7F1B                    	jg	short STRIP_ERROR
 26058                                  				; if not, we must have a bad pathname
 26059 000039A0 89F7                    	mov	di,si		; destination buffer
 26060 000039A2 89D6                    	mov	si,dx		; source is beginning of pathname
 26061 000039A4 FC                      	cld
 26062 000039A5 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 26063                                  
 26064                                  	; 18/03/2023
 26065                                  	; MSDOS 6.0
 26066 000039A7 803E[F7A1]01            	cmp	byte [ext_entered],1
 26067                                  				;AN005; if an extension was entered
 26068 000039AC 750A                    	jne	short SKIP_WILDS ; cf = 1 ; 12/06/2023
 26069                                  				;AN005;    don't set up wildcard ext.
 26070                                  
 26071                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26072 000039AE 4F                      	dec	di		; overwrite null or dot
 26073 000039AF AA                      	stosb			; with a dot
 26074 000039B0 B03F                    	mov	al,'?'
 26075                                  	;mov	al,WILDCHAR	; now add wildcards
 26076 000039B2 AA                      	stosb
 26077 000039B3 AA                      	stosb
 26078 000039B4 AA                      	stosb
 26079 000039B5 B000                    	mov	al,0
 26080                                  	;mov	al,ANULL	; and a terminating null	
 26081 000039B7 AA                      	stosb
 26082                                  SKIP_WILDS:
 26083                                  	;popf	; ** ; 18/03/2023
 26084 000039B8 F8                      	clc
 26085 000039B9 EB01                    	jmp	short STRIP_EXIT ; chill out...
 26086                                  
 26087                                  STRIP_ERROR:
 26088                                  	;popf	; ** ; 18/03/2023
 26089 000039BB F9                      	stc
 26090                                  STRIP_EXIT:
 26091 000039BC 5E                      	pop	si
 26092 000039BD 5F                      	pop	di
 26093 000039BE 5A                      	pop	dx
 26094 000039BF 59                      	pop	cx
 26095 000039C0 5B                      	pop	bx
 26096 000039C1 58                      	pop	ax
 26097 000039C2 C3                      	retn
 26098                                  
 26099                                  ; =============== S U B	R O U T	I N E =======================================
 26100                                  
 26101                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 26102                                  ;
 26103                                  ; structure in newly allocated memory. The argv[] structure is found at the
 26104                                  ; beginning of this area. The caller indicates how much extra space is
 26105                                  ; needed in the resulting structure; Save_Args returns a segment number and
 26106                                  ; an offset into that area, indicating where the caller may preserve its own
 26107                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 26108                                  ; ENTRY:
 26109                                  ;   BX	    --	size (in bytes) of extra area to allocate
 26110                                  ; EXIT:
 26111                                  ;   AX	    --	segment of new area.
 26112                                  ;   CF	    --	set if unable to save a copy.
 26113                                  ; NOTE(S):
 26114                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 26115                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 26116                                  ;	paragraphs.
 26117                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 26118                                  ;	as the caller of Save_Args requests.
 26119                                  ;   3)	AX is undefined if CF indicates an error.
 26120                                  
 26121                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26122                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26123                                  SAVE_ARGS:
 26124 000039C3 53                      	push	bx
 26125 000039C4 51                      	push	cx
 26126 000039C5 52                      	push	dx
 26127 000039C6 57                      	push	di
 26128 000039C7 56                      	push	si
 26129 000039C8 55                      	push	bp
 26130                                  	; 01/05/2023
 26131                                  	; 26/04/2023
 26132                                  	;pushf ; **
 26133                                  	;add	bx,1363		; space for arg structure, round up
 26134 000039C9 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 26135                                  			; 1092+15 ; 31/07/2024
 26136 000039CD B104                    	mov	cl,4		; to paragraph size and convert
 26137 000039CF D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 26138 000039D1 B80048                  	mov	ax,ALLOC*256 ; 4800h
 26139 000039D4 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 26140                                  			; BX = number of 16-byte paragraphs desired
 26141 000039D6 7241                    	jc	short SAVE_ERROR ; ***
 26142 000039D8 89C5                    	mov	bp,ax		; save segment id
 26143 000039DA 06                      	push	es		; save TRANGROUP address
 26144 000039DB 8EC0                    	mov	es,ax		; switch to new memory segment
 26145                                  	; assume es:nothing
 26146                                  	;mov	cx,1348		; get back structure size
 26147 000039DD B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092 ; 31/07/2024
 26148 000039E0 31FF                    	xor	di,di		; destination is new memory area
 26149                                  	;mov	si,ARG_ARGV
 26150 000039E2 BE[41A2]                	mov	si,ARG		; source is arg structure
 26151                                  	; 09/08/2024
 26152 000039E5 56                      	push	si
 26153 000039E6 F3A4                    	rep	movsb		; move that sucker!
 26154                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 26155                                  	;mov	cx,[ARG_ARGVCNT]
 26156 000039E8 8B0E[01A5]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 26157 000039EC 31C0                    	xor	ax,ax		; base address for argv_calc
 26158                                  
 26159                                  ;	Bugbug:	What did they mean by this?
 26160                                  ;	Note that the replacement line produces exactly the same code.
 26161                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 26162                                  ;	mov	SI, OFFSET TRANGROUP:arg
 26163                                  
 26164                                  	;;mov	si,ARG_ARGV
 26165                                  	;mov	si,ARG
 26166                                  	; 09/08/2024
 26167 000039EE 5E                      	pop	si
 26168                                  SAVE_PTR_LOOP:
 26169 000039EF 49                      	dec	cx		; exhausted all args?
 26170 000039F0 7C24                    	jl	short SAVE_DONE
 26171 000039F2 89CB                    	mov	bx,cx		; get arg index and
 26172 000039F4 E8A7FC                  	call	argv_calc	; convert to a pointer
 26173                                  	;mov	dx,ds:arg.argv[bx].argpointer
 26174                                  	;mov	dx,[ARG_ARGV+bx]
 26175 000039F7 8B97[41A2]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 26176 000039FB 29F2                    	sub	dx,si		; adjust argpointer
 26177                                  	;mov	es:argv[BX].argpointer,dx
 26178                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 26179 000039FD 268917                  	mov	[es:bx],dx
 26180                                  	;mov	dx,ds:arg.argv[bx].argstartel
 26181                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 26182 00003A00 8B97[44A2]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 26183 00003A04 29F2                    	sub	dx,si		; and adjust argstartel
 26184                                  	;mov	es:argv[bx].argstartel,dx
 26185                                  	;mov	[es:bx+3],dx
 26186 00003A06 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 26187                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 26188                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 26189 00003A0A 8B97[4AA2]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 26190 00003A0E 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 26191                                  	;mov	es:argv[bx].arg_ocomptr,dx
 26192                                  	;mov	[es:bx+9],dx
 26193 00003A10 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 26194 00003A14 EBD9                    	jmp	short SAVE_PTR_LOOP
 26195                                  SAVE_DONE:
 26196 00003A16 07                      	pop	es		; back we go to TRANGROUP
 26197                                  	; assume es:nothing
 26198 00003A17 89E8                    	mov	ax,bp		; restore segment id
 26199                                  	; 26/04/2023
 26200                                  	; cf = 0 ; *
 26201                                  	;jmp	short SAVE_OK
 26202                                  
 26203                                  	; 26/04/2023
 26204                                  ;SAVE_ERROR:
 26205                                  ;	; 26/04/2023
 26206                                  ;	;popf ; **
 26207                                  ;	stc
 26208                                  ;	jmp	short SAVE_EXIT
 26209                                  
 26210                                  SAVE_OK:
 26211                                  	; 26/04/2023
 26212                                  	;popf ; **
 26213                                  	; 26/04/2023
 26214                                  	; cf = 0 ; *
 26215                                  	;clc
 26216                                  SAVE_EXIT:
 26217                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 26218 00003A19 5D                      	pop	bp
 26219 00003A1A 5E                      	pop	si
 26220 00003A1B 5F                      	pop	di
 26221 00003A1C 5A                      	pop	dx
 26222 00003A1D 59                      	pop	cx
 26223 00003A1E 5B                      	pop	bx
 26224                                  answ_no:	; 26/04/2023
 26225 00003A1F C3                      	retn
 26226                                  
 26227                                  ;============================================================================
 26228                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 26229                                  ;============================================================================
 26230                                  ; 02/10/2018 - Retro DOS v3.0
 26231                                  
 26232                                  ; Title	COMMAND Language midifiable Code Transient
 26233                                  
 26234                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 26235                                  
 26236                                  ; =============== S U B	R O U T	I N E =======================================
 26237                                  
 26238                                  ; ****************************************************************
 26239                                  ; *
 26240                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 26241                                  ; *
 26242                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 26243                                  ; *		 user for Y/N if necessary. If an error occurs,
 26244                                  ; *		 set up an error message and go to CERROR.
 26245                                  ; *
 26246                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 26247                                  ; *		 Current directory set to entered directory
 26248                                  ; *
 26249                                  ; * OUTPUT:	 none
 26250                                  ; *
 26251                                  ; ****************************************************************
 26252                                  ;
 26253                                  ; ARE YOU SURE prompt when deleting *.*
 26254                                  
 26255                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26256                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26257                                  notest2:
 26258 00003A20 B90B00                  	mov	cx,11
 26259 00003A23 BE5D00                  	mov	si,FCB+1 ; 5Dh
 26260                                  ambspec:
 26261 00003A26 AC                      	lodsb
 26262 00003A27 3C3F                    	cmp	al,'?'
 26263 00003A29 7502                    	jne	short allfil
 26264 00003A2B E2F9                    	loop	ambspec
 26265                                  allfil:
 26266                                  	; 19/03/2023
 26267                                  	;cmp	cx,0
 26268 00003A2D 09C9                    	or	cx,cx
 26269 00003A2F 752E                    	jnz	short noprmpt
 26270                                  askagn:	
 26271 00003A31 BA[AF92]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 26272 00003A34 E8D81A                  	call	std_printf
 26273 00003A37 BE8000                  	mov	si,80h
 26274 00003A3A 89F2                    	mov	dx,si
 26275 00003A3C C7047800                	mov	word [si],120	; zero length
 26276                                  	;mov	ax,0C0Ah
 26277 00003A40 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 26278 00003A43 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 26279                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 26280 00003A45 AD                      	lodsw
 26281 00003A46 08E4                    	or	ah,ah
 26282 00003A48 74E7                    	jz	short askagn
 26283 00003A4A E8E1F0                  	call	scanoff
 26284                                  	; 19/03/2023
 26285                                  	; MSDOS 6.0
 26286 00003A4D E80C02                  	call	char_in_xlat	; Convert to upper case
 26287                                  	;retc			; return if function not supported
 26288                                  	; 19/03/2023
 26289                                  	;jnc	short check_yn
 26290                                  ;answ_no:
 26291                                  	;retn
 26292 00003A50 72CD                    	jc	short answ_no
 26293                                  
 26294                                  	; 19/03/2023
 26295                                  	; AL = 0 if it was (country depended) NO character
 26296                                  	; AL = 1 if it was (country depenced) YES character
 26297                                  
 26298                                  	; MSDOS 3.3
 26299                                  	;call	UPCONV
 26300                                  
 26301                                  	; 19/03/2023	
 26302                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26303                                  	;cmp	al,[CAPITAL_N]
 26304                                  	;jne	short CHECK_Y
 26305                                  	;retn
 26306                                  ;CHECK_Y:
 26307                                  	;cmp	al,[CAPITAL_Y]
 26308                                  	;pushf
 26309                                  	;call	CRLF2
 26310                                  	;popf
 26311                                  	;jne	short ASKAGN
 26312                                  
 26313                                  check_yn:
 26314                                  	; 19/03/2023
 26315                                  	;cmp	al,0	; NO character
 26316 00003A52 08C0                    	or	al,al
 26317 00003A54 74C9                    	jz	short answ_no
 26318                                  	;cmp	al,1	 ;YES character
 26319 00003A56 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 26320 00003A58 9C                      	pushf
 26321 00003A59 E8C5F0                  	call	CRLF2
 26322 00003A5C 9D                      	popf
 26323 00003A5D 75D2                    	jnz	short askagn
 26324                                  noprmpt:
 26325 00003A5F B413                    	mov	ah,FCB_Delete ; 13h
 26326 00003A61 BA5C00                  	mov	dx,FCB ; 5Ch
 26327 00003A64 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 26328                                  			; DS:DX	-> FCB with filename field filled with
 26329                                  			; template for deletion ('?' wildcard allowed,but not '*')
 26330                                  			; Return: AL = 00h file	found,FFh file	not found
 26331 00003A66 FEC0                    	inc	al
 26332 00003A68 7403                    	jz	short eraerr
 26333                                  	; 26/04/2023
 26334                                  	;call	RestUDir
 26335                                  ;answ_no:
 26336                                  	;retn
 26337 00003A6A E971EF                  	jmp	RestUDir ; 26/04/2023
 26338                                  
 26339                                  	; 19/03/2023
 26340                                  	; MSDOS 6.0
 26341                                  eraerr:
 26342                                  	;invoke	set_ext_error_msg
 26343                                  				;AN022; set up the extended error
 26344 00003A6D E8C2E7                  	call	Set_Ext_Error_Msg
 26345 00003A70 52                      	push	dx		;AN022; save message
 26346                                  	;invoke	RESTUDIR
 26347 00003A71 E86AEF                  	call	RestUDir
 26348 00003A74 5A                      	pop	dx		;AN022; restore message
 26349                                  	
 26350 00003A75 833E[D091]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 26351                                  				;AN022; convert no more files to
 26352 00003A7A 7506                    	jne	short cerrorj2	;AN022;  file not found
 26353 00003A7C C706[D091]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 26354                                  				;AN000; get message number in control block
 26355                                  cerrorj2:
 26356 00003A82 E91DF4                  	jmp	cerror
 26357                                  	
 26358                                  	; 19/03/2023
 26359                                  	; MSDOS 3.3
 26360                                  ;ERAERR:	
 26361                                  	;mov	ah,Set_DMA ; 1Ah
 26362                                  	;mov	dx,FCB ; 5Ch
 26363                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 26364                                  	;			; DS:DX	-> disk	transfer buffer
 26365                                  	;mov	ah,Dir_Search_First ; 11h
 26366                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 26367                                  	;			; DS:DX	-> FCB
 26368                                  	;push	ax
 26369                                  	;call	RESTUDIR
 26370                                  	;pop	ax
 26371                                  	;mov	dx,FNOTFOUNDPTR
 26372                                  	;inc	al
 26373                                  	;jz	short CERRORJ
 26374                                  	;mov	dx,ACCDENPTR
 26375                                  	;jmp	CERROR
 26376                                  
 26377                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26378                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 26379                                  
 26380                                  ; ****************************************************************
 26381                                  ; *
 26382                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 26383                                  ; *
 26384                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 26385                                  ; *		 user for Y/N where necessary. If an error occurs
 26386                                  ; *		 set up and error message and transfer control
 26387                                  ; *		 to CERROR.
 26388                                  ; *
 26389                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 26390                                  ; *		 Current directory set to entered directory
 26391                                  ; *
 26392                                  ; * OUTPUT:	 none
 26393                                  ; *
 26394                                  ; ****************************************************************
 26395                                  
 26396                                  	; 19/03/2023
 26397                                  slashp_erase:				;AN000; entry point
 26398                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 26399 00003A85 E814E9                  	call	build_dir_string
 26400                                  
 26401 00003A88 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 26402                                  	;mov	dx,offset trangroup:destdir
 26403 00003A8A BA[E79F]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 26404 00003A8D CD21                    	int	21h			;AN000;
 26405                                  
 26406                                  	;mov	ah,11h
 26407 00003A8F B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 26408 00003A91 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 26409 00003A94 CD21                    	int	21h			;AN000;
 26410 00003A96 FEC0                    	inc	al			;AN000; did an error occur
 26411                                  	;jz	short eraerr		;AN022; go to error exit
 26412                                  	; 26/04/2023
 26413 00003A98 7502                    	jnz	short delete_prompt_loop
 26414                                  
 26415                                  	; 26/04/2023
 26416                                  stop_del:
 26417 00003A9A EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 26418                                  
 26419                                  delete_prompt_loop:			;AN000;
 26420                                  	;mov	si,offset trangroup:destdir+1
 26421 00003A9C BE[E89F]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 26422                                  	;mov	di,offset trangroup:dest
 26423 00003A9F BF[B79F]                	mov	di,DEST			;AN000; set up dest as target
 26424 00003AA2 A0[F89D]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 26425 00003AA5 AA                      	stosb				;AN000;   of DEST
 26426                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 26427 00003AA6 E8A4F0                  	call	FCB_TO_ASCZ
 26428                                  
 26429                                  slashp_askagn:				;AN000;
 26430 00003AA9 E875F0                  	call	CRLF2			;AN000; print out carriage return, line feed
 26431                                  	;mov	dx,offset trangroup:bwdbuf
 26432 00003AAC BA[2AA0]                	mov	dx,BWDBUF		;AN000; print out current directory string
 26433 00003AAF 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 26434 00003AB1 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 26435                                  					;AN000; see if only D:\,0
 26436 00003AB5 7504                    	jnz	short not_del_root	;AN000; no continue
 26437 00003AB7 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 26438                                  					;AN000; yes, get rid of \ ;
 26439                                  not_del_root:				;AN000;
 26440 00003ABB 8916[91A0]              	mov	[string_ptr_2],dx 	;AN000;
 26441                                  	;mov	dx,offset trangroup:string_buf_ptr
 26442 00003ABF BA[9793]                	mov	dx,string_buf_ptr	;AN000;
 26443                                  	;invoke	std_printf		;AN000;
 26444 00003AC2 E84A1A                  	call	std_printf
 26445                                  	;mov	dx,offset trangroup:dest
 26446 00003AC5 BA[B79F]                	mov	dx,DEST			;AN000; print out file name string
 26447 00003AC8 8916[91A0]              	mov	[string_ptr_2],dx 	;AN000;
 26448                                  	;mov	dx,offset trangroup:string_buf_ptr
 26449 00003ACC BA[9793]                	mov	dx,string_buf_ptr	;AN000;
 26450                                  	;invoke	std_printf		;AN000;
 26451 00003ACF E83D1A                  	call	std_printf
 26452                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 26453 00003AD2 BA[AC92]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 26454                                  	;invoke	std_printf		;AN000;
 26455 00003AD5 E8371A                  	call	std_printf
 26456                                  
 26457                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 26458                                  ;;M029	mov	dx,si			;AN000;
 26459                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 26460                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 26461                                  ;;M029	int	21h			;AN000; get input from the user
 26462                                  ;;M029	lodsw				;AN000;
 26463                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 26464                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 26465                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 26466                                  
 26467                                  ;	Get a single character input.
 26468                                  
 26469                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 26470                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 26471 00003AD8 B8010C                  	mov	ax,0C01h
 26472 00003ADB CD21                    	int	21h			;M029
 26473                                  
 26474 00003ADD E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 26475                                  	;retc				;AN000; return if function not supported
 26476                                  	; 19/03/2023
 26477 00003AE0 7301                    	jnc	short slashp_check_yn
 26478                                  slashp_ans_no:
 26479 00003AE2 C3                      	retn
 26480                                  
 26481                                  slashp_check_yn:
 26482                                  	; 19/03/2023
 26483                                  	; AL = 0 if it was (country depended) NO character
 26484                                  	; AL = 1 if it was (country depenced) YES character
 26485                                  
 26486                                  	;cmp	al,capital_n		;AN000; was it no?
 26487                                  	;cmp	al,0
 26488 00003AE3 20C0                    	and	al,al ; 0
 26489 00003AE5 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 26490                                  	;cmp	al,capital_y		;AN000; was it yes?
 26491                                  	;cmp	al,1
 26492 00003AE7 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 26493                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 26494                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 26495                                  	; 19/03/2023
 26496 00003AE9 75BE                    	jnz	short slashp_askagn
 26497                                  
 26498                                  delete_this_file:			;AN000;
 26499 00003AEB B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 26500                                  	;mov	dx,offset trangroup:destdir
 26501 00003AED BA[E79F]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 26502 00003AF0 CD21                    	int	21h			;AN000;
 26503 00003AF2 FEC0                    	inc	al			;AN000; did an error occur?
 26504 00003AF4 7511                    	jnz	short next_del_file	;AN000; no - get next file
 26505                                  ;
 26506                                  ;M041; Begin changes
 26507                                  ; We got an error deleting the file. If this is access denied, we can go on
 26508                                  ;to the next file after printing an error message.
 26509                                  ;
 26510                                  	;invoke	Get_ext_error_number	;see what error we got
 26511 00003AF6 E849E7                  	call	get_ext_error_number
 26512 00003AF9 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 26513                                  					;is it access denied?
 26514 00003AFC 759C                    	jne	short stop_del		;no, some other error
 26515                                  	;invoke	CrLf2			;print a CR-LF
 26516 00003AFE E820F0                  	call	CRLF2
 26517                                  	;invoke set_ext_error_msg	;error message
 26518 00003B01 E82EE7                  	call	Set_Ext_Error_Msg
 26519                                  	;invoke	std_eprintf		;"Access denied"
 26520 00003B04 E8001A                  	call	std_eprintf
 26521                                  	; 26/04/2023
 26522                                  	;jmp	short next_del_file	;try next file
 26523                                  	; 26/04/2023
 26524                                  ;stop_del:
 26525                                  ;;
 26526                                  ;;M041; End changes
 26527                                  ;;
 26528                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 26529                                  
 26530                                  next_del_file:				;AN000;
 26531                                  ;
 26532                                  ; M050 - begin
 26533                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 26534                                  ;       with /protect+ and /light+ makes it intercept all
 26535                                  ;       deletes. This hook does not save and restore the DTA correctly.
 26536                                  ;       They save the DWORD in a WORD by mistake! They save both the
 26537                                  ;       segment and the offset in the SAME variable (WORD)!!!
 26538                                  ;
 26539 00003B07 B41A                    	mov	ah,Set_DMA ; 1Ah
 26540                                  	;mov	dx,offset trangroup:destdir
 26541 00003B09 BA[E79F]                	mov	dx,DESTDIR
 26542 00003B0C CD21                    	int	21h
 26543                                  ;
 26544                                  ; M050 - end
 26545                                  
 26546 00003B0E B412                    	mov	ah,Dir_Search_Next ; 12h
 26547                                  					;AN000; search for another file
 26548 00003B10 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 26549 00003B13 CD21                    	int	21h			;AN000;
 26550 00003B15 FEC0                    	inc	al			;AN000; was a file found?
 26551                                  	;jz	short slash_p_exit	;AN000; no - exit
 26552                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 26553                                  	; 26/04/2023
 26554 00003B17 7583                    	jnz	short delete_prompt_loop
 26555                                  
 26556                                  slash_p_exit:
 26557                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 26558 00003B19 E826E7                  	call	get_ext_error_number
 26559 00003B1C 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 26560 00003B1F 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 26561 00003B21 E961E4                  	jmp	extend_setup		;AN022; go issue error message
 26562                                  
 26563                                  good_erase_exit:
 26564                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 26565 00003B24 E8B7EE                  	call	RestUDir
 26566                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 26567                                  	;retn				;AN000; exit
 26568                                  	; 19/03/2023
 26569 00003B27 E9F7EF                  	jmp	CRLF2
 26570                                  
 26571                                  ; =============== S U B	R O U T	I N E =======================================
 26572                                  
 26573                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 26574                                  
 26575                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26576                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26577                                  _ECHO:
 26578 00003B2A E89900                  	call	ON_OFF
 26579 00003B2D 7212                    	jb	short DOEMES
 26580 00003B2F 8E1E[F39D]              	mov	ds,[RESSEG]
 26581 00003B33 7506                    	jnz	short ECH_OFF
 26582 00003B35 800E[3B02]01            	or	byte [EchoFlag],1
 26583 00003B3A C3                      	retn
 26584                                  
 26585                                  ECH_OFF:
 26586 00003B3B 8026[3B02]FE            	and	byte [EchoFlag],0FEh
 26587 00003B40 C3                      	retn
 26588                                  
 26589                                  	; 19/03/2023
 26590                                  	; MSDOS 6.0 (& MSDOS 5.0)
 26591                                  ;CERRORJ:
 26592                                  	;jmp	cerror
 26593                                  
 26594                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 26595                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 26596                                  
 26597                                  DOEMES:
 26598                                  	; 19/03/2023
 26599                                  	; MSDOS 6.0
 26600                                  	;cmp	cl,0		;AC000; was anything on the line?
 26601 00003B41 20C9                    	and	cl,cl
 26602 00003B43 7409                    	jz	short PECHO	; just display current state.
 26603 00003B45 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 26604 00003B48 E82FF0                  	call	CRPRINT
 26605 00003B4B E9D3EF                  	jmp	CRLF2
 26606                                  
 26607                                  	; 19/03/2023
 26608                                  	; MSDOS 3.3
 26609                                  	;call	MOVE_TO_FIRST_ARG
 26610                                  	;jz	short PECHO
 26611                                  	;mov	dx,82h
 26612                                  	;call	CRPRINT
 26613                                  	;jmp	CRLF2
 26614                                  
 26615                                  PECHO:
 26616                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26617 00003B4E 8E1E[F39D]              	mov	ds,[RESSEG]
 26618 00003B52 8A1E[3B02]              	mov	bl,[EchoFlag]
 26619 00003B56 0E                      	push	cs
 26620 00003B57 1F                      	pop	ds
 26621 00003B58 80E301                  	and	bl,1
 26622 00003B5B BA[5393]                	mov	dx,EchoMes_Ptr
 26623 00003B5E EB24                    	jmp	short PYN
 26624                                  
 26625                                  ; ---------------------------------------------------------------------------
 26626                                  
 26627                                  	; 19/03/2023
 26628                                  	; MSDOS 3.3
 26629                                  CERRORJ:
 26630 00003B60 E93FF3                  	jmp	cerror
 26631                                  
 26632                                  ; =============== S U B	R O U T	I N E =======================================
 26633                                  
 26634                                  	; 19/03/2023
 26635                                  	; MSDOS 3.3
 26636                                  ;MOVE_TO_FIRST_ARG:
 26637                                  	;mov	si,81h
 26638                                  	;call	SCANOFF
 26639                                  	;cmp	al,0Dh
 26640                                  	;retn
 26641                                  
 26642                                  ; =============== S U B	R O U T	I N E =======================================
 26643                                  
 26644                                  CNTRLC:
 26645 00003B63 E86000                  	call	ON_OFF
 26646 00003B66 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 26647 00003B69 720C                    	jc	short PCNTRLC
 26648 00003B6B 7505                    	jnz	short CNTRLC_OFF
 26649 00003B6D B201                    	mov	dl,1
 26650 00003B6F CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 26651                                  			; AL = 00h get state / 01h set state / 02h set AND get
 26652                                  			; DL = 00h for OFF or 01h for ON
 26653 00003B71 C3                      	retn
 26654                                  
 26655                                  ; ---------------------------------------------------------------------------
 26656                                  
 26657                                  CNTRLC_OFF:
 26658 00003B72 30D2                    	xor	dl,dl
 26659 00003B74 CD21                    	int	21h		; Turn off ^C check
 26660 00003B76 C3                      	retn
 26661                                  
 26662                                  ; ---------------------------------------------------------------------------
 26663                                  
 26664                                  PCNTRLC:
 26665                                  	; 19/03/2023
 26666                                  	; MSDOS 6.0
 26667                                  	;cmp	cl,0		;AC000; rest of line blank?
 26668 00003B77 08C9                    	or	cl,cl
 26669 00003B79 75E5                    	jnz	short CERRORJ 	; no, oops!
 26670                                  
 26671                                  	; 19/03/2023
 26672                                  	; MSDOS 3.3
 26673                                  	;call	MOVE_TO_FIRST_ARG
 26674                                  	;jnz	short CERRORJ
 26675                                  ;pccont:
 26676                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26677 00003B7B 30C0                    	xor	al,al
 26678 00003B7D CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 26679 00003B7F 88D3                    	mov	bl,dl
 26680 00003B81 BA[3793]                	mov	dx,CtrlcMes_Ptr
 26681                                  
 26682                                  ; ---------------------------------------------------------------------------
 26683                                  
 26684                                  PYN:	; write "ON" or "OFF" state 
 26685                                  
 26686                                  	; 26/04/2023
 26687                                  	; 19/03/2023
 26688                                  	; MSDOS 3.3
 26689                                  	;call	STD_PRINTF
 26690                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 26691                                  	;or	bl,bl
 26692                                  	;jnz	short PRINTVAL
 26693                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 26694                                  	
 26695                                  	; 26/04/2023
 26696                                  	; 19/03/2023
 26697                                  	; MSDOS 6.0
 26698 00003B84 BE[6493]                	mov	si,ONMES_PTR
 26699 00003B87 08DB                    	or	bl,bl
 26700 00003B89 7503                    	jnz	short PRINTVAL
 26701 00003B8B BE[6193]                	mov	si,OFFMES_PTR
 26702                                  PRINTVAL:
 26703                                  	; 19/03/2023
 26704                                  	; MSDOS 3.3
 26705                                  	;jmp	STD_PRINTF
 26706                                  
 26707                                  	; 19/03/2023
 26708                                  	; MSDOS 6.0
 26709 00003B8E 52                      	push	dx		;AN000; save offset of message block
 26710 00003B8F 89D3                    	mov	bx,dx		;AN000; save offset value
 26711 00003B91 AD                      	lodsw			;AN000; get message number of on or off
 26712 00003B92 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 26713                                  				;AN000; this is a utility message
 26714 00003B94 E85B1A                  	call	TSYSGETMSG	;AN000; get the address of the message
 26715                                  	;add	bx,5
 26716 00003B97 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 26717                                  	
 26718 00003B9A 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 26719 00003B9C 5A                      	pop	dx		;AN000; get message back
 26720 00003B9D E86F19                  	call	std_printf	;AC000; go print message
 26721 00003BA0 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 26722 00003BA4 C3                      	retn			;AN000; exit
 26723                                  
 26724                                  ; =============== S U B	R O U T	I N E =======================================
 26725                                  
 26726                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 26727                                  VERIFY:
 26728 00003BA5 E81E00                  	call	ON_OFF
 26729 00003BA8 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 26730 00003BAB 720A                    	jc	short PVERIFY
 26731 00003BAD 7503                    	jnz	short VER_OFF
 26732 00003BAF CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 26733                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 26734 00003BB1 C3                      	retn
 26735                                  
 26736                                  ; ---------------------------------------------------------------------------
 26737                                  
 26738                                  VER_OFF:
 26739 00003BB2 FEC8                    	dec	al
 26740 00003BB4 CD21                    	int	21h		; Turn off verify after write
 26741 00003BB6 C3                      	retn
 26742                                  
 26743                                  ; ---------------------------------------------------------------------------
 26744                                  
 26745                                  PVERIFY:
 26746                                  	; 19/03/2023
 26747                                  	; MSDOS 6.0
 26748                                  	;cmp	cl,0		;AC000; is rest of line blank?
 26749 00003BB7 20C9                    	and	cl,cl
 26750 00003BB9 75A5                    	jnz	short CERRORJ 	; nope...
 26751                                  
 26752                                  	 ;19/03/2023
 26753                                  	; MSDOS 3.3
 26754                                  	;call	MOVE_TO_FIRST_ARG
 26755                                  	;jnz	short CERRORJ
 26756                                  
 26757 00003BBB B454                    	mov	ah,Get_Verify_On_Write ; 54h
 26758 00003BBD CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 26759                                  				; Return: AL = 00h if flag OFF
 26760                                  				; AL = 01h if flag ON
 26761 00003BBF 88C3                    	mov	bl,al
 26762 00003BC1 BA[4593]                	mov	dx,VeriMes_Ptr
 26763 00003BC4 EBBE                    	jmp	short PYN
 26764                                  
 26765                                  ; =============== S U B	R O U T	I N E =======================================
 26766                                  
 26767                                  ; ****************************************************************
 26768                                  ; *
 26769                                  ; * ROUTINE:	 ON_OFF
 26770                                  ; *
 26771                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 26772                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 26773                                  ; *		 routines.
 26774                                  ; *
 26775                                  ; * INPUT:	 command line at offset 81H
 26776                                  ; *		 PARSE_BREAK control block
 26777                                  ; *
 26778                                  ; * OUTPUT:	 If carry is clear
 26779                                  ; *		    If ON is found
 26780                                  ; *		       Zero flag set
 26781                                  ; *		    If OFF is found
 26782                                  ; *		       Zero flag clear
 26783                                  ; *		 If carry set
 26784                                  ; *		    If nothing on command line
 26785                                  ; *		       CL set to zero
 26786                                  ; *		    If error
 26787                                  ; *		       CL contains error value from parse
 26788                                  ; *
 26789                                  ; ****************************************************************
 26790                                  
 26791                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26792                                  ON_OFF:
 26793 00003BC6 BE8100                  	mov	si,81h
 26794                                  
 26795                                  	; 19/03/2023
 26796                                  	; MSDOS 3.3
 26797                                  	;call	SCANOFF		; scan off leading blanks & equal
 26798                                  	;cmp	al,0Dh		; are we at end of line?
 26799                                  	;je	short BAD_ONF	; yes, return error
 26800                                  	;lodsw
 26801                                  	;or	ax,2020h	; convert to lowercase
 26802                                  	;cmp	ax,6E6Fh ;'on'
 26803                                  	;je	short ON_CHECK
 26804                                  	;cmp	ax,666Fh ;'of'
 26805                                  	;jne	short BAD_ONF
 26806                                  	;lodsb
 26807                                  	;or	al,20h		; convert to lowercase		
 26808                                  	;cmp	al,66h	 ; 'f'
 26809                                  	;jne	short BAD_ONF	
 26810                                  	;or	al,66h ; or al,'f'
 26811                                  	;jmp	short OFF_CHECK
 26812                                  ;ON_CHECK:
 26813                                  	;xor	al,al
 26814                                  ;OFF_CHECK:
 26815                                  	;lahf
 26816                                  	;mov	bx,ax
 26817                                  	;call	SCANOFF		; scan off leading blanks & equal
 26818                                  	;cmp	al,0Dh		; are we at end of line?	
 26819                                  	;jne	short BAD_ONF	; no, return error
 26820                                  	;mov	ax,bx
 26821                                  	;sahf
 26822                                  	;clc
 26823                                  	;retn
 26824                                  
 26825                                  	; 19/03/2023
 26826                                  	; MSDOS 6.0
 26827                                  scan_on_off:			;AN032; scan off leading blanks & equal
 26828 00003BC9 AC                      	lodsb			;AN032; get a char
 26829                                  	;cmp	al,blank	;AN032; if whitespace
 26830 00003BCA 3C20                    	cmp	al,20h
 26831 00003BCC 74FB                    	je	short scan_on_off
 26832                                  				;AN032;    keep scanning
 26833 00003BCE 3C09                    	cmp	al,tab_chr	;AN032; if tab
 26834                                  	;cmp	al,09h
 26835 00003BD0 74F7                    	je	short scan_on_off
 26836                                  				;AN032;    keep scanning
 26837                                  	;cmp	al,equal_chr	;AN032; if equal char
 26838 00003BD2 3C3D                    	cmp	al,'=' ; 3Dh
 26839 00003BD4 7401                    	je	short parse_on_off
 26840                                  				;AN032;    start parsing
 26841 00003BD6 4E                      	dec	si		;AN032; if none of above - back up
 26842                                  
 26843                                  parse_on_off:			;AN032;    and start parsing
 26844 00003BD7 BF[A197]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26845 00003BDA 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 26846 00003BDC 31D2                    	xor	dx,dx		;AN000;
 26847 00003BDE E8780E                  	call	cmd_parse	;AC000; call parser
 26848                                  	;cmp	ax,-1 ; 0FFFFh
 26849 00003BE1 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 26850 00003BE4 742E                    	je	short BADONF	;AC000; yes, return error
 26851                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 26852                                  	;cmp	ax,0
 26853 00003BE6 21C0                    	and	ax,ax ; ax = 0 ?
 26854 00003BE8 7404                    	jz	short on_off_there
 26855                                  				;AN000; no - continue
 26856 00003BEA 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 26857 00003BEC EB26                    	jmp	short BADONF	;AN000; return error
 26858                                  
 26859                                  on_off_there:
 26860 00003BEE 803E[E2A9]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 26861                                  				;AN014; was a valid positional present?
 26862 00003BF3 7505                    	jnz	short good_on_off
 26863                                  				;AN014; yes - continue
 26864 00003BF5 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 26865                                  	;mov	cx,10 ; 0Ah
 26866 00003BF8 EB1A                    	jmp	short BADONF	;AN014; return error
 26867                                  
 26868                                  good_on_off:			;AN014;
 26869 00003BFA 31C0                    	xor	ax,ax		;AC000; set up return code for
 26870 00003BFC 0A06[E2A9]              	or	al,[PARSE1_CODE]
 26871                                  				;AC000;    ON or OFF in AX
 26872 00003C00 9C                      	pushf			;AN000; save flags
 26873 00003C01 BF[A197]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26874 00003C04 31D2                    	xor	dx,dx		;AN000;
 26875 00003C06 E8500E                  	call	cmd_parse	;AN000; call parser
 26876 00003C09 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 26877                                  	;cmp	ax,-1 ; 0FFFFh
 26878 00003C0C 7503                    	jne	short BADONF_flags
 26879                                  				;AN000; NO, return error
 26880 00003C0E 9D                      	popf			;AN000; restore flags
 26881 00003C0F F8                      	clc			;AC000; no error
 26882                                  	;jmp	short on_off_end
 26883                                  				;AN000; return to caller
 26884                                  	; 26/04/2023
 26885 00003C10 C3                      	retn
 26886                                  
 26887                                  BADONF_flags:
 26888 00003C11 89C1                    	mov	cx,ax
 26889 00003C13 9D                      	popf
 26890                                  
 26891                                  ; ---------------------------------------------------------------------------
 26892                                  
 26893                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 26894                                  ; and return the error
 26895                                  
 26896                                  BADONF:
 26897 00003C14 BA[1493]                	mov	dx,bad_on_off_ptr
 26898 00003C17 F9                      	stc
 26899                                  on_off_end:
 26900 00003C18 C3                      	retn
 26901                                  
 26902                                  ;============================================================================
 26903                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 26904                                  ;============================================================================
 26905                                  ; 02/10/2018 - Retro DOS v3.0
 26906                                  
 26907                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 26908                                  
 26909                                  ; =============== S U B	R O U T	I N E =======================================
 26910                                  
 26911                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26912                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 26913                                  	
 26914                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26915                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3E20h
 26916                                  PRINT_DATE:
 26917                                  	; 20/03/2023
 26918                                  	; MSDOS 3.3
 26919                                  	;push	es
 26920                                  	;push	di
 26921                                  	;push	cs
 26922                                  	;pop	es
 26923                                  	;mov	di,ARG_BUF
 26924                                  	;mov	ah,Get_Date ; 2Ah
 26925                                  	;int	21h	; DOS -	GET CURRENT DATE
 26926                                  	;		; Return: DL = day,DH = month,	CX = year
 26927                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 26928                                  	;cbw
 26929                                  	;call	GETDATE
 26930                                  	;call	P_DATE
 26931                                  	;xor	al,al
 26932                                  	;stosb
 26933                                  	;mov	dx,ARG_BUF_PTR
 26934                                  	;call	STD_PRINTF
 26935                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 26936                                  	;pop	es ; !!??!! 
 26937                                  	;pop	di
 26938                                  	;retn
 26939                                  
 26940                                  	; 20/03/2023
 26941                                  	; MSDOS 6.0
 26942 00003C19 06                      	push	es
 26943 00003C1A 57                      	push	di
 26944 00003C1B 0E                      	push	cs
 26945 00003C1C 07                      	pop	es
 26946 00003C1D E81300                  	call	GetDate 		; get date
 26947 00003C20 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26948 00003C22 890E[CE93]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 26949 00003C26 8916[D093]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 26950 00003C2A BA[BE93]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 26951 00003C2D E8DF18                  	call	std_printf
 26952                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 26953                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 26954 00003C30 5F                      	pop	di			;AC000; restore di,es
 26955 00003C31 07                      	pop	es			;AC000;
 26956 00003C32 C3                      	retn
 26957                                  
 26958                                  ; ---------------------------------------------------------------------------
 26959                                  
 26960                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26961                                  
 26962                                  ;GETDATE:
 26963                                  	; 21/03/2023
 26964                                  	; MSDOS 3.3
 26965                                  	;mov	si,ax
 26966                                  	;shl	si,1
 26967                                  	;add	si,ax
 26968                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 26969                                  	;mov	bx,cx
 26970                                  	;mov	cx,3
 26971                                  	;rep	movsb
 26972                                  	;mov	al,' '
 26973                                  	;stosb
 26974                                  	;retn
 26975                                  
 26976                                  	; 21/03/2023
 26977                                  	; MSDOS 6.0
 26978                                  
 26979                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 26980                                  ; for output. Date will be returned in CX,DX.
 26981                                  
 26982                                  GetDate:
 26983 00003C33 BF[87A7]                	mov	di,Arg_Buf		;AC000; target for day of week
 26984 00003C36 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 26985 00003C38 CD21                    	int	21h			;AC000; Get date in CX:DX
 26986 00003C3A 98                      	cbw				;AC000;
 26987 00003C3B 51                      	push	cx			;AN000; save date returned in
 26988 00003C3C 52                      	push	dx			;AN000;  CX:DX
 26989 00003C3D 89C6                    	mov	si,ax
 26990 00003C3F D1E6                    	shl	si,1
 26991 00003C41 01C6                    	add	si,ax			; SI=AX*3
 26992 00003C43 89F1                    	mov	cx,si			;AN000; save si
 26993 00003C45 A1[8792]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 26994 00003C48 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 26995 00003C4A 57                      	push	di			;AN000; save argument buffer
 26996 00003C4B E8A419                  	call	TSYSGETMSG		;AN000; get the address of the message
 26997 00003C4E 5F                      	pop	di			;AN000; retrieve argument buffer
 26998 00003C4F 01CE                    	add	si,cx			;AC000; get day of week
 26999 00003C51 B90300                  	mov	cx,3
 27000 00003C54 F3A4                      	rep	movsb
 27001 00003C56 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 27002 00003C58 AA                      	stosb
 27003 00003C59 5A                      	pop	dx			;AN000; get back date
 27004 00003C5A 59                      	pop	cx			;AN000;
 27005 00003C5B C3                      	retn
 27006                                  
 27007                                  ; =============== S U B	R O U T	I N E =======================================
 27008                                  
 27009                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27010                                  
 27011                                  	; MSDOS 6.0
 27012                                  
 27013                                  ; This routine determines whether the character in AL is a
 27014                                  ; Yes or No character. On return, if AL=0, the character is
 27015                                  ; No, if AL=1, the character is Yes.
 27016                                  
 27017                                  ;	assume	ds:trangroup
 27018                                  
 27019                                  char_in_xlat:	; proc	near
 27020                                  	; 21/03/2023
 27021 00003C5C 88C2                    	mov	dl,al			;AC000; get character into DX
 27022 00003C5E 30F6                    	xor	dh,dh			;AC000;
 27023                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 27024 00003C60 B82365                  	mov	ax,6523h
 27025 00003C63 CD21                    	int	21h			;AC000;
 27026 00003C65 C3                      	retn
 27027                                  
 27028                                  ;char_in_xlat	endp
 27029                                  
 27030                                  ;============================================================================
 27031                                  ; TENV.ASM, MSDOS 6.0, 1991
 27032                                  ;============================================================================
 27033                                  ; 02/10/2018 - Retro DOS v3.0
 27034                                  
 27035                                  ;	Environment utilities and misc. routines
 27036                                  
 27037                                  ; MSDOS 6.0
 27038                                  ; ****************************************************************
 27039                                  ; *
 27040                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 27041                                  ; *
 27042                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 27043                                  ; *		 the character in AL from the file upper case table
 27044                                  ; *		 in DOS if character if above  ascii 128, else
 27045                                  ; *		 subtracts 20H if between "a" and "z".
 27046                                  ; *
 27047                                  ; * INPUT:	 AL	      char to be upper cased
 27048                                  ; *		 FUCASE_ADDR  set to the file upper case table
 27049                                  ; *
 27050                                  ; * OUTPUT:	 AL	      upper cased character
 27051                                  ; *
 27052                                  ; ****************************************************************
 27053                                  ;
 27054                                  ;assume	ds:trangroup				;AN000;
 27055                                  ;
 27056                                  ;upconv	proc	near				;AN000;
 27057                                  ;
 27058                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 27059                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 27060                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 27061                                  ;	push	ds				;AN000;
 27062                                  ;	push	bx				;AN000;
 27063                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 27064                                  ;assume	ds:resgroup				;AN000;
 27065                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 27066                                  ;	add	bx,2				;AN000;  skip over first word
 27067                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 27068                                  ;	pop	bx				;AN000;
 27069                                  ;	pop	ds				;AN000;
 27070                                  ;assume	ds:trangroup				;AN000;
 27071                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 27072                                  ;
 27073                                  ;oth_fucase:					;AN000;
 27074                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 27075                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 27076                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 27077                                  ;	ja	upconv_end			;AC000;
 27078                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 27079                                  ;
 27080                                  ;upconv_end:					;AN000;
 27081                                  ;	ret
 27082                                  ;
 27083                                  ;upconv	endp					;AN000;
 27084                                  
 27085                                  ;============================================================================
 27086                                  ; COPY.ASM, MSDOS 6.0, 1991
 27087                                  ;============================================================================
 27088                                  ; 01/10/2018 - Retro DOS v3.0
 27089                                  
 27090                                  ;	title	COMMAND COPY routines.
 27091                                  
 27092                                  ;/*
 27093                                  ; *                      Microsoft Confidential
 27094                                  ; *                      Copyright (C) Microsoft Corporation 1991
 27095                                  ; *                      All Rights Reserved.
 27096                                  ; */
 27097                                  
 27098                                  ;***	COPY.ASM
 27099                                  
 27100                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 27101                                  
 27102                                  
 27103                                  ;***	MODIFICATION HISTORY
 27104                                  
 27105                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 27106                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 27107                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 27108                                  ;	     to tokens which begin with path characters so that PARSELINE
 27109                                  ;	     will work correctly.
 27110                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 27111                                  ;	     individual tokens. That distinction is no longer needed for
 27112                                  ;	     FOR loop processing.
 27113                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 27114                                  ;	     1 when Cparse is called from COPY.
 27115                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 27116                                  ;	     mod. It now is conditional on flag like previous mod.
 27117                                  ;11/21/83 NP  Added printf
 27118                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 27119                                  ;	     be added to a token.
 27120                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 27121                                  ;	     NOTE: DestHand is the destination handle. There are two
 27122                                  ;	     special values: -1 meaning destination was never opened and
 27123                                  ;	     0 which means that the destination has been openned and
 27124                                  ;	     closed.
 27125                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 27126                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 27127                                  ;	     lost on large and multiple file (wildcard) copies.
 27128                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 27129                                  ;	     destination are not equal.
 27130                                  ;
 27131                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 27132                                  ;	     first source file AND we run out of disk space before
 27133                                  ;	     completing the concatenation, restore the first source
 27134                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 27135                                  ;
 27136                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 27137                                  ;		instead of compatibility mode. This gives lesser sharing
 27138                                  ;		violations when files are opened for read on a copy.
 27139                                  
 27140                                  ; ---------------------------------------------------------------------------
 27141                                  ;***	COPY CODE
 27142                                  ; ---------------------------------------------------------------------------
 27143                                  
 27144                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 27145                                  
 27146                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27147                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 27148                                  
 27149                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27150                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3E6Dh
 27151                                  
 27152                                  COPY:
 27153                                  	; 	Initialize internal variables.
 27154                                  
 27155 00003C66 31C0                    	xor	ax,ax		; AX = 0
 27156 00003C68 A3[93A0]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 27157 00003C6B A3[C3A1]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 27158 00003C6E A3[0FA1]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 27159 00003C71 A2[109E]                	mov	[CFLAG],al	; 'destination file created' = false
 27160 00003C74 A3[169E]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 27161 00003C77 A3[0C9E]                	mov	[DestSwitch],ax	; destination switches = none
 27162 00003C7A A3[E7A1]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 27163 00003C7D A3[ACA0]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 27164 00003C80 A2[119E]                	mov	[DestClosed],al	; 'destination file closed' = false
 27165 00003C83 A2[ABA0]                	mov	[DestSiz],al	; length of destination pathname = 0
 27166 00003C86 A2[0EA1]                	mov	[SrcSiz],al	; length of source pathname = 0
 27167 00003C89 A2[AEA0]                	mov	[DestInfo],al	; destination pathname flags = none
 27168 00003C8C A2[11A1]                	mov	[SrcInfo],al	; source pathname flags = none
 27169 00003C8F A2[C5A1]                	mov	[INEXACT],al	; 'inexact copy' = false
 27170 00003C92 A2[AAA0]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 27171 00003C95 A2[0DA1]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 27172 00003C98 A2[D59C]                	mov	[USERDIR1],al	; saved working directory = null
 27173 00003C9B A2[C6A1]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 27174 00003C9E A2[049E]                	mov	[RDEOF],al	; 'read end of file' = false
 27175 00003CA1 A3[69A1]                	mov	[SRCHAND],ax	; source handle = 0
 27176 00003CA4 A3[CEA1]                	mov	[CPDATE],ax	; copy date = 0
 27177 00003CA7 A3[D0A1]                	mov	[CPTIME],ax	; copy time = 0
 27178 00003CAA A2[6BA1]                	mov	[SRCISDEV],al	; 'source is device' = false
 27179                                  	; 23/03/2023
 27180                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 27181 00003CAD A2[D6A1]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 27182 00003CB0 A3[D2A1]                	mov	[OFilePtr_Lo],ax
 27183 00003CB3 A3[D4A1]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 27184 00003CB6 A2[CAA1]                	mov	[TERMREAD],al	; 'terminate read' = false
 27185 00003CB9 A2[86A0]                	mov	[comma],al	; '"+,," found' = false
 27186 00003CBC A2[87A0]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 27187 00003CBF A2[24A2]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 27188 00003CC2 A3[0E9E]                	mov	[AllSwitch],ax	; all switches = none
 27189 00003CC5 A2[079E]                	mov	[ArgC],al	; source/dest argument count = 0
 27190 00003CC8 A2[CCA1]                	mov	[PLUS],al	; '"+" in command line' = false
 27191 00003CCB A2[C7A1]                	mov	[BINARY],al	; 'binary copy' = false
 27192 00003CCE A2[CBA1]                	mov	[ASCII],al	; 'ascii copy' = false
 27193 00003CD1 A3[1D9E]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 27194 00003CD4 A3[C8A1]                	mov	[WRITTEN],ax	; 'destination written to' = false
 27195 00003CD7 A2[069E]                	mov	[Concat],al	; 'concatenating' = false
 27196 00003CDA A2[0AA1]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 27197 00003CDD A3[0BA1]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 27198                                  	
 27199                                  	; 12/06/2023
 27200                                  	; MSDOS 6.22 COMMAND.COM
 27201                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27202 00003CE0 A2[E3A1]                	mov     [cox_dest_file], al ; MSDOS 6.22
 27203 00003CE3 A2[E4A1]                	mov     [cox_src_file], al  ; MSDOS 6.22
 27204                                  
 27205                                  	;	Initialize buffers with double-nulls.
 27206                                  
 27207 00003CE6 A3[6CA1]                	mov	[ScanBuf],ax
 27208 00003CE9 A3[AFA0]                	mov	[DestBuf],ax
 27209 00003CEC A3[12A1]                	mov	[SrcBuf],ax
 27210 00003CEF A3[70A0]                	mov	[SDIRBUF],ax
 27211 00003CF2 A3[2AA0]                	mov	[DIRBUF],ax
 27212 00003CF5 A3[E79F]                	mov	[DestFcb],ax
 27213                                  
 27214 00003CF8 A2[CDA1]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 27215                                  		
 27216 00003CFB 48                      	dec	ax ; -1		; AX = 0FFFFh
 27217 00003CFC A3[06A1]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 27218 00003CFF A2[189E]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 27219 00003D02 A2[09A1]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 27220 00003D05 A2[AAA0]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 27221                                  
 27222                                  	; 12/06/2023
 27223                                  	; Retro DOS v4.2 COMMAND.COM
 27224                                  	; MSDOS 6.22 COMMAND.COM code only !
 27225                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27226                                  	;
 27227 00003D08 E8F106                  	call	init_copycmd_option ; MSDOS 6.22 
 27228                                  		
 27229 00003D0B BE8100                  	mov	si,81h		; SI = ptr to command line
 27230                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 27231                                  	; 23/03/2023
 27232 00003D0E B32B                    	mov	bl,'+'
 27233 00003D10 FE06[23A2]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 27234 00003D14 C606[95A0]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 27235                                  
 27236                                  	;*	Scan the command line for destination information.
 27237                                  
 27238                                  DESTSCAN:
 27239 00003D19 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 27240 00003D1B BF[6CA1]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 27241                                  	; 23/03/2023
 27242 00003D1E 8936[89A0]              	mov	[parse_last],si		;AN018; save cmd line ptr
 27243 00003D22 E86F0B                  	call	cparse			; parse next object
 27244 00003D25 9C                      	pushf	; (*)			; save CParse flags
 27245 00003D26 FE06[CDA1]              	inc	byte [objcnt]		; count object
 27246 00003D2A F6C780                  	test	bh,80h
 27247 00003D2D 7405                    	jz	short NOCOPY		; no "+" delimiter
 27248 00003D2F C606[CCA1]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 27249                                  NOCOPY:
 27250 00003D34 F6C701                  	test	bh,1
 27251 00003D37 747D                    	jz	short TESTP2		; not a switch
 27252                                  
 27253                                  	;	Found a switch.
 27254                                  
 27255                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 27256                                  	;
 27257                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27258                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F43h
 27259                                  CHK_CP_SWITCH:
 27260                                  	; MSDOS 6.0
 27261 00003D39 F7C51000                	test	bp,10h
 27262                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 27263 00003D3D 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 27264                                  	;test	word [AllSwitch],10h
 27265 00003D3F F606[0E9E]10            	test	byte [AllSwitch],10h
 27266                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 27267 00003D44 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 27268                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 27269                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 27270 00003D46 81CD0040                	or	bp,4000h
 27271                                  NOT_SLASHV:
 27272                                  	; ****************************************
 27273                                  	; 12/06/2023
 27274                                  	; Retro DOS v4.2 COMMAND.COM
 27275                                  	; MSDOS 6.22 COMMAND.COM code only !
 27276                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27277                                  	; ****************************************
 27278                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F55h
 27279                                  	;
 27280 00003D4A F7C54000                	test    bp,40h			; negative Y (-Y) switch flag
 27281 00003D4E 7417                    	jz	short CHK_SLASHY0
 27282                                  	;
 27283                                  	;test	word [AllSwitch],40h
 27284 00003D50 F606[0E9E]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 27285 00003D55 7507                    	jnz	short NOT_SLASHY1	; N flag
 27286                                  	;test	word [AllSwitch],80h
 27287 00003D57 F606[0E9E]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 27288 00003D5C 7404                    	jz	short NOT_SLASHY2
 27289                                  NOT_SLASHY1:
 27290 00003D5E 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 27291                                  NOT_SLASHY2:				; Set up bad switch
 27292 00003D62 C606[E2A1]00            	mov	byte [cox_y_override],0	; cox_y setting will be used
 27293                                  CHK_SLASHY0:
 27294 00003D67 F7C58000                	test    bp,80h
 27295 00003D6B 742B                    	jz      short CHK_SLASHY4	; not a /Y switch
 27296                                  	;
 27297 00003D6D 8A04                    	mov	al,[si]
 27298 00003D6F 3C79                    	cmp	al,'y'
 27299 00003D71 740A                    	je	short CHK_SLASHY1
 27300 00003D73 3C59                    	cmp	al,'Y'
 27301 00003D75 7406                    	je	short CHK_SLASHY1
 27302 00003D77 81CD0040                	or	bp,4000h		; FBadSwitch
 27303                                  	;				; Set up bad switch
 27304 00003D7B EB1B                    	jmp	short CHK_SLASHY4
 27305                                  CHK_SLASHY1:
 27306 00003D7D C60420                  	mov	byte [si],20h ; ' '
 27307 00003D80 46                      	inc	si
 27308                                  	;test	word [AllSwitch],40h
 27309 00003D81 F606[0E9E]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 27310 00003D86 7507                    	jnz	short CHK_SLASHY2	; N flag
 27311                                  	;test	word [AllSwitch],80h
 27312 00003D88 F606[0E9E]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 27313 00003D8D 7404                    	jz	short CHK_SLASHY3
 27314                                  CHK_SLASHY2:
 27315 00003D8F 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 27316                                  	;				; Set up bad switch
 27317                                  CHK_SLASHY3:
 27318 00003D93 C606[E2A1]01            	mov	byte [cox_y_override],1
 27319                                  CHK_SLASHY4:
 27320                                  	; ****************************************
 27321                                  	; 12/06/2023
 27322                                  ;NOT_SLASHV:
 27323                                  	;or	[DestSwitch],bp		; assume destination
 27324                                  	;or	[AllSwitch],bp		; keep tabs on all switches
 27325                                  
 27326                                  	; 12/06/2023
 27327                                  	; Retro DOS v4.2 COMMAND.COM
 27328                                  	; MSDOS 6.22 COMMAND.COM -TRANGROUP:3FA7h
 27329 00003D98 092E[0C9E]              	or	[DestSwitch],bp		; set [DestSwitch] SwitchY flag to 1
 27330 00003D9C 092E[0E9E]              	or	[AllSwitch],bp		; set [AllSwitch] SwitchY flag to 1
 27331                                  	;test	bp,~SwitchCopy		; Bad switch?
 27332 00003DA0 F7C5237F                	test	bp,7F23h ; MSDOS 6.22	; ~SwitchCopy ; not SwitchCopy
 27333 00003DA4 740A                    	jz	short NOT_BAD_SWITCH	; Switches are okay
 27334                                  
 27335                                  	; 12/06/2023
 27336                                  	; 23/03/2023
 27337                                  	; MSDOS 6.0
 27338                                  	;;test	bp,not SwitchCopy	;AN018; Bad switch?
 27339                                  	;test	bp,7FE3h ; test bp,~SwitchCopy
 27340                                  	;jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 27341                                  	
 27342 00003DA6 9D                      	popf	; (*)			;AN018; fix up stack
 27343 00003DA7 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 27344 00003DAA E86BE9                  	call	setup_parse_error_msg	;AN018; setup to print the message
 27345 00003DAD E9F2F0                  	jmp	cerror			;AC018; exit
 27346                                  NOT_BAD_SWITCH:
 27347 00003DB0 9D                      	popf				; restore CParse flags
 27348 00003DB1 7233                    	jc	short CHECKDONE		; found CR
 27349 00003DB3 E963FF                  	jmp	DESTSCAN		; continue scanning for destination
 27350                                  TESTP2:
 27351 00003DB6 9D                      	popf	; (*)			; restore CParse flags
 27352 00003DB7 722D                    	jc	short CHECKDONE		; found CR
 27353 00003DB9 F6C780                  	test	bh,80h
 27354 00003DBC 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 27355 00003DBE FE06[079E]              	inc	byte [ArgC]		; count independent pathname args
 27356                                  GOTPLUS:
 27357 00003DC2 56                      	push	si			; save cmd line ptr
 27358 00003DC3 A1[E7A1]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 27359 00003DC6 BE[6CA1]                	mov	si,ScanBuf		; SI = ptr to path string
 27360 00003DC9 29F0                    	sub	ax,si			; AX = offset of last element
 27361 00003DCB BF[AFA0]                	mov	di,DestBuf		; DI = ptr to destination buf
 27362 00003DCE 01F8                    	add	ax,di			; AX = ptr to last element in
 27363                                  					;  destination path buffer
 27364 00003DD0 A3[ACA0]                	mov	[DestTail],ax		; save ptr to last element
 27365 00003DD3 880E[ABA0]              	mov	[DestSiz],cl		; save path string length
 27366 00003DD7 41                      	inc	cx			; CX = mov length (incl null)
 27367 00003DD8 F3A4                    	rep	movsb			; DestBuf = possible destination path
 27368 00003DDA 883E[AEA0]              	mov	[DestInfo],bh		; save CParse info flags
 27369                                  	;mov	word [DestSwitch],0	; clear destination switches
 27370                                  	; 10/08/2024
 27371 00003DDE 890E[0C9E]              	mov	[DestSwitch],cx ; 0
 27372 00003DE2 5E                      	pop	si			; SI = ptr into cmd line again
 27373 00003DE3 E933FF                  	jmp	DESTSCAN		;AC018; continue scanning for dest
 27374                                  
 27375                                  CHECKDONE:
 27376                                  	;	We reached the CR. The destination scan is finished.
 27377                                  
 27378                                  	;	Disallow "copy file1+" as file overwriting itself.
 27379                                  	;
 27380                                  	;	(Note that "copy file1+file2+" will be accepted, and
 27381                                  	;	equivalent to "copy file1+file2".)
 27382                                  
 27383                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 27384                                  	;	through this check, since the switch would count
 27385                                  	;	as another object in ObjCnt.
 27386                                  
 27387 00003DE6 803E[CCA1]01            	cmp	byte [PLUS],1		; "+" with
 27388 00003DEB 7514                    	jnz	short CDCONT
 27389 00003DED 803E[079E]01            	cmp	byte [ArgC],1		; one arg,
 27390 00003DF2 750D                    	jnz	short CDCONT
 27391 00003DF4 803E[CDA1]02            	cmp	byte [objcnt],2		; two objects..
 27392 00003DF9 7506                    	jnz	short CDCONT
 27393 00003DFB BA[F991]                	mov	dx,OVERWR_PTR
 27394 00003DFE E9AE07                  	jmp	COPYERR			; is file overwrite
 27395                                  
 27396                                  CDCONT:
 27397 00003E01 A0[CCA1]                	mov	al,[PLUS]		; AL = '"+" occurred'
 27398 00003E04 A2[069E]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 27399 00003E07 D0E0                    	shl	al,1
 27400 00003E09 D0E0                    	shl	al,1
 27401 00003E0B A2[C5A1]                	mov	[INEXACT],al		; therefore making an inexact copy
 27402                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 27403 00003E0E A0[079E]                	mov	al,[ArgC]		; AL = # independent arguments
 27404                                  
 27405                                  	; 23/03/2023
 27406                                  	; MSDOS 3.3		
 27407                                  	;or	al,al
 27408                                  	;jz	short CERROR4J
 27409                                  	; MSDOS 6.0
 27410 00003E11 08C0                    	or	al,al
 27411 00003E13 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 27412                                  		
 27413 00003E15 BA[D091]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27414 00003E18 C706[D091]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 27415                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 27416 00003E1E EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 27417                                  
 27418                                  	; more than 0 args; check if too many
 27419                                  TRY_TOO_MANY:
 27420 00003E20 3C02                    	cmp	al,2
 27421 00003E22 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 27422                                  
 27423                                  	; 23/03/2023
 27424                                  	; MSDOS 6.0
 27425 00003E24 BA[D091]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27426 00003E27 C706[D091]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 27427                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 27428                                  CERROR_PARSEJ:
 27429 00003E2D C606[CE91]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 27430                                  					; parse error message	
 27431                                  CERROR4J:
 27432 00003E32 E96DF0                  	jmp	cerror
 27433                                  
 27434                                  ACOUNTOK:
 27435 00003E35 BD[AAA0]                	mov	bp,DestVars		; BP = base of dest variables
 27436                                  
 27437 00003E38 3C01                    	cmp	al,1
 27438 00003E3A 7520                    	jnz	short GOT2ARGS
 27439                                  
 27440                                  	;	Only one independent pathname argument on command line.
 27441                                  	;	Set destination to d:*.*, where d: is current drive.
 27442                                  
 27443                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 27444                                  	;	The two files would be appended as d:file1, rather than x:file1.
 27445                                  
 27446 00003E3C A0[059E]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 27447                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 27448                                  	; 23/03/2023
 27449 00003E3F 0441                    	add	al,'A'
 27450 00003E41 B43A                    	mov	ah,':'			; AX = "d:"
 27451                                  	;mov	byte [bp+1],2
 27452 00003E43 C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 27453                                  
 27454 00003E47 BF[AFA0]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 27455 00003E4A AB                      	stosw				; store "d:"
 27456                                  		
 27457 00003E4B C706[0C9E]0000          	mov	word [DestSwitch],0	; clear destination switches
 27458                                  	;mov	byte [bp+4],2		
 27459 00003E51 C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 27460                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 27461                                  	;mov	byte [bp+0],0		
 27462 00003E55 C6460000                	mov	byte [bp],0
 27463 00003E59 E8090A                  	call	SETSTARS		; add wildcards
 27464                                  GOT2ARGS:
 27465                                  	;	If destination pathname is "d:", add full wildcard filename
 27466                                  
 27467                                  	;cmp	byte [bp+1],2
 27468 00003E5C 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 27469 00003E60 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 27470 00003E62 B03A                    	mov	al,':'  ; 3Ah
 27471 00003E64 3806[B0A0]              	cmp	byte [DestBuf+1],al
 27472 00003E68 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 27473                                  	;or	byte [bp+4],2
 27474 00003E6A 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 27475 00003E6E BF[B1A0]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 27476                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 27477                                  	;mov	byte [bp+0],0		
 27478 00003E71 C6460000                	mov	byte [bp],0
 27479 00003E75 E8ED09                  	call	SETSTARS		; add wildcards
 27480                                  NOTSHORTDEST:
 27481                                  	;	If destination pathname ends with "\", try to make
 27482                                  	;	sure it's "d:\".
 27483                                  
 27484                                  	;mov	di,[bp+2]
 27485 00003E78 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 27486 00003E7B 803D00                  	cmp	byte [di],0
 27487 00003E7E 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 27488                                  
 27489 00003E80 BA[0B93]                	mov	dx,badcd_ptr
 27490 00003E83 B03A                    	mov	al,':'
 27491 00003E85 3845FE                  	cmp	[di-2],al
 27492 00003E88 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 27493                                  	;mov	byte [bp+0],2
 27494                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 27495 00003E8A C6460002                	mov	byte [bp],2
 27496                                  	;or	byte [bp+4],6
 27497 00003E8E 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 27498                                  					  ;  path character
 27499 00003E92 E8D009                  	call	SETSTARS		; add wildcards
 27500                                  CHKSWTCHES:
 27501                                  	;	We have enough information about the destination for now.
 27502                                  
 27503                                  	;	Turn on verify if requested. Save the current verify flag.
 27504                                  
 27505                                  	; 23/03/2023
 27506                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 27507                                  	;mov	dx,BADPARMPTR
 27508                                  	
 27509 00003E95 A1[0E9E]                	mov	ax,[AllSwitch]		; AX = all switch flags
 27510                                  
 27511                                  	; 23/03/2023
 27512                                  	; MSDOS 3.3
 27513                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 27514                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 27515                                  	;jnz	short CERROR4J
 27516                                  	
 27517                                  	; 23/03/2023
 27518                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27519                                  	;test	ax,SwitchV ; 10h
 27520                                  	; 18/04/2023
 27521                                  	;test	ax,10h
 27522 00003E98 A810                    	test	al,10h  ; test al,SwitchV
 27523 00003E9A 7414                    	jz	short NOVERIF		; no /v, no verify
 27524                                  
 27525 00003E9C B454                    	mov	ah,Get_Verify_On_Write ; 54h
 27526 00003E9E CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 27527                                  				; Return: AL = 00h if flag OFF
 27528                                  				; AL = 01h if flag ON
 27529 00003EA0 1E                      	push	ds
 27530 00003EA1 8E1E[F39D]              	mov	ds,[RESSEG]
 27531 00003EA5 30E4                    	xor	ah,ah
 27532 00003EA7 A3[4502]                	mov	[VerVal],ax		; save current verify flag
 27533 00003EAA 1F                      	pop	ds
 27534 00003EAB B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 27535 00003EAE CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 27536                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 27537                                  NOVERIF:
 27538                                  	;*	Scan for first source.
 27539                                  
 27540 00003EB0 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27541 00003EB2 BE8100                  	mov	si,81h			; SI = ptr into command line
 27542                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 27543                                  	; 23/03/2023
 27544 00003EB5 B32B                    	mov	bl,'+' ; 2Bh
 27545                                  SCANFSRC:
 27546 00003EB7 BF[6CA1]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27547 00003EBA E8D709                  	call	cparse			; parse first source pathname
 27548 00003EBD F6C701                  	test	bh,1			; switch?
 27549 00003EC0 75F5                    	jnz	short SCANFSRC		; yes, try again
 27550 00003EC2 092E[0C9E]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 27551                                  
 27552                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 27553                                  
 27554                                  	; 23/03/2023
 27555 00003EC6 F7C50800                	test	bp,8
 27556                                  	;test	bp,SWITCHB
 27557 00003ECA 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 27558 00003ECC 803E[069E]00            	cmp	byte [Concat],0
 27559 00003ED1 7405                    	jz	short NOSETCASC		; we're not concatenating
 27560 00003ED3 C606[CBA1]04            	mov	byte [ASCII],4
 27561                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 27562                                  NOSETCASC:
 27563 00003ED8 E82604                  	call	SOURCE_SET		; set source variables
 27564 00003EDB E84400                  	call	FRSTSRC			; set up first source copy
 27565 00003EDE E99500                  	jmp	FIRSTENT		; jump into the copy loop
 27566                                  
 27567                                  ; ---------------------------------------------------------------------------
 27568                                  
 27569                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27570                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 27571                                  ENDCOPY:
 27572                                  	;*	End of the road. Close destination, display # files
 27573                                  	;	copied (meaning # destinations), and go back to main
 27574                                  	;	transient COMMAND code.
 27575                                  
 27576 00003EE1 E83203                  	call	CLOSEDEST
 27577                                  ENDCOPY2:
 27578 00003EE4 BA[0292]                	mov	dx,copied_ptr
 27579 00003EE7 8B36[1D9E]              	mov	si,[FileCnt]
 27580 00003EEB 8936[93A0]              	mov	[Copy_num],si
 27581 00003EEF E81D16                  	call	std_printf
 27582 00003EF2 E90FC2                  	jmp	TCOMMAND		; stack could be messed up
 27583                                  
 27584                                  ; ---------------------------------------------------------------------------
 27585                                  
 27586                                  SRCNONEXIST:
 27587                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 27588                                  	;	Otherwise, say 'file not found' and quit.
 27589                                  
 27590 00003EF5 803E[069E]00            	cmp	byte [Concat],0
 27591 00003EFA 7543                    	jne	short NEXTSRC		; concatenating - go on to next source
 27592                                  
 27593                                  	; 24/03/2023
 27594                                  	; MSDOS 3.3
 27595                                  	;mov	dx,SRCBUF
 27596                                  	;mov	[STRING_PTR_1],dx
 27597                                  	;mov	dx,STRINGBUF1PTR
 27598                                  	;call	STD_PRINTF
 27599                                  	;mov	dx,FNOTFOUNDPTR
 27600                                  	;jmp	COPYERR
 27601                                  
 27602                                  	; 24/*03/2023
 27603                                  	; MSDOS 6.0
 27604                                  	;	Set up error message.
 27605 00003EFC C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 27606                                  				  	; extended error msg
 27607 00003F01 BA[D091]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27608 00003F04 C706[D091]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 27609                                  					; 'file not found' msg#
 27610 00003F0A C706[91A0][12A1]        	mov	word [string_ptr_2],SrcBuf
 27611                                  					; point at bad pathname
 27612 00003F10 C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27613                                  					; 1 substitution
 27614 00003F15 E99706                  	jmp	COPYERR			; print msg and clean up
 27615                                  
 27616                                  ; ---------------------------------------------------------------------------
 27617                                  
 27618                                  SOURCEPROC:
 27619                                  
 27620                                  	;*	Preparatory processing for each source file.
 27621                                  	;	Called at FrstSrc for first source file.
 27622                                  
 27623 00003F18 E8E603                  	call	SOURCE_SET		; set source variables & ascii/binary
 27624 00003F1B 803E[069E]00            	cmp	byte [Concat],0
 27625 00003F20 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 27626                                  
 27627                                  ; ---------------------------------------------------------------------------
 27628                                  
 27629                                  FRSTSRC:
 27630 00003F22 31C0                    	xor	ax,ax
 27631 00003F24 A2[109E]                	mov	[CFLAG],al		; 'destination not created'
 27632 00003F27 A3[169E]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 27633 00003F2A A2[119E]                	mov	[DestClosed],al		; 'destination not closed'
 27634                                  
 27635                                  LEAVECFLAG:
 27636 00003F2D 8936[C3A1]              	mov	[SRCPT],si		; save cmd-line ptr
 27637 00003F31 BF[D59C]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 27638                                  						;   current dir
 27639 00003F34 BD[0DA1]                	mov	bp,SrcVars		; BP = base of source variables
 27640 00003F37 E8DB07                  	call	BUILDPATH		; cd to source dir, figure
 27641                                  						;   out stuff about source
 27642 00003F3A 8B36[0FA1]              	mov	si,[SrcTail]		; SI = ptr to source filename
 27643 00003F3E C3                      	retn
 27644                                  
 27645                                  ; ---------------------------------------------------------------------------
 27646                                  
 27647                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27648                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27649                                  NEXTSRC:
 27650                                  	;*	Next source. Come here after handling each pathname.
 27651                                  	;	We're done unless there are additional source pathnames
 27652                                  	;	to be appended.
 27653                                  	;
 27654                                  	;	Note that all files matching an ambiguous pathname
 27655                                  	;	are processed before coming here.
 27656                                  
 27657 00003F3F 803E[CCA1]00            	cmp	byte [PLUS],0
 27658                                  	;jne	short MORECP		; copying "+" sources - keep going
 27659                                  	; 26/04/2023
 27660                                  ;ENDCOPYJ2:
 27661                                  	;jmp	short ENDCOPY
 27662 00003F44 749B                    	je	short ENDCOPY
 27663                                  MORECP:
 27664 00003F46 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27665 00003F48 8B36[C3A1]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 27666                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 27667 00003F4C B32B                    	mov	bl,'+' ; 2Bh
 27668                                  SCANSRC:
 27669 00003F4E BF[6CA1]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27670 00003F51 E84009                  	call	cparse			; parse first source name
 27671                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 27672                                  	; 26/04/2023
 27673 00003F54 728B                    	jb	short ENDCOPY
 27674                                  
 27675 00003F56 F6C780                  	test	bh,80h
 27676                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 27677                                  	; 26/04/2023
 27678 00003F59 7486                    	jz	short ENDCOPY
 27679                                  
 27680 00003F5B F6C701                  	test	bh,1
 27681 00003F5E 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 27682                                  
 27683                                  	;	ScanBuf contains the next source pathname.
 27684                                  
 27685 00003F60 E8B5FF                  	call	SOURCEPROC		; prepare this source
 27686 00003F63 803E[86A0]01            	cmp	byte [comma],1		; was +,, found last time?
 27687 00003F68 7507                    	jnz	short NOSTAMP		;  no - try for a file
 27688 00003F6A C606[87A0]01            	mov	byte [plus_comma],1	; yes - set flag
 27689 00003F6F EB84                    	jmp	short SRCNONEXIST	; we know we won't find it
 27690                                  
 27691                                  NOSTAMP:
 27692 00003F71 C606[87A0]00            	mov	byte [plus_comma],0	; reset +,, flag
 27693                                  
 27694                                  ; ---------------------------------------------------------------------------
 27695                                  
 27696                                  FIRSTENT:
 27697                                  
 27698                                  ;M047
 27699                                  ; The only case we need to worry about is when the source is wildcarded and
 27700                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 27701                                  ;concatenation. We check for this case.
 27702                                  ;
 27703                                  ;NB: This change has been backed out and replaced by M048. This is not the
 27704                                  ;right place to do this check.
 27705                                  
 27706                                  	;	This is where we enter the loop with the first source.
 27707                                  
 27708 00003F76 BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 27709 00003F79 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27710 00003F7C CD21                    	int	21h		; DOS -	PARSE FILENAME
 27711                                  				; DS:SI	-> string to parse
 27712                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27713                                  				; AL = bit mask	to control parsing
 27714 00003F7E 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 27715 00003F81 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 27716 00003F83 A1[12A1]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 27717 00003F86 80FC3A                  	cmp	ah,':'
 27718 00003F89 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 27719 00003F8B B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 27720                                  DRVSPEC1:
 27721 00003F8D 0C20                    	or	al,20h			; AL = lowercase drive letter
 27722 00003F8F 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 27723                                  	;mov	[5Ch],al
 27724 00003F91 A25C00                  	mov	[FCB],al		; put drive id in FCB
 27725                                  
 27726                                  	;	FCB contains drive and filename to search.
 27727                                  		
 27728 00003F94 B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'
 27729 00003F96 E86D01                  	call	SEARCH
 27730                                  SRCHDONE:
 27731 00003F99 9C                      	pushf				; save flags from Search
 27732 00003F9A E834EA                  	call	RestUDir1		; restore users current directory
 27733 00003F9D 9D                      	popf				; restore flags from search
 27734 00003F9E 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 27735 00003FA0 E952FF                  	jmp	SRCNONEXIST		; didn't find the source
 27736                                  
 27737                                  NEXTAMBIG0:
 27738 00003FA3 30C0                    	xor	al,al
 27739 00003FA5 8606[189E]              	xchg	al,[FRSTSRCH]
 27740 00003FA9 08C0                    	or	al,al
 27741 00003FAB 740B                    	jz	short NEXTAMBIG
 27742                                  SETNMEL:
 27743 00003FAD B90C00                  	mov	cx,12
 27744 00003FB0 BF[70A0]                	mov	di,SDIRBUF
 27745 00003FB3 BE[2AA0]                	mov	si,DIRBUF
 27746 00003FB6 F3A4                    	rep	movsb			; save very first source name
 27747                                  NEXTAMBIG:
 27748 00003FB8 30C0                    	xor	al,al
 27749 00003FBA A2[C6A1]                	mov	[NOWRITE],al		; turn off nowrite
 27750 00003FBD 8B3E[0FA1]              	mov	di,[SrcTail]
 27751 00003FC1 BE[2BA0]                	mov	si,DIRBUF+1
 27752 00003FC4 E886EB                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 27753                                  ;MELDO:
 27754                                  	; ****************************************
 27755                                  	; 12/06/2023
 27756                                  	; Retro DOS v4.2 COMMAND.COM
 27757                                  	; MSDOS 6.22 COMMAND.COM code only !
 27758                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27759                                  	; ****************************************
 27760                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:41DBh
 27761                                  MELDO0:
 27762 00003FC7 803E[E2A1]00            	cmp	byte [cox_y_override],0 ; /Y switch override (question) enabled ?
 27763 00003FCC 746C                    	jz	short MELDO ; no
 27764                                  	; ----------------------
 27765                                  	; yes
 27766 00003FCE E85406                  	call	BUILDDEST
 27767 00003FD1 BE[12A1]                	mov	si,SrcBuf
 27768 00003FD4 BF[219B]                	mov	di,SRCXNAME
 27769                                  	;mov	ah,60h
 27770 00003FD7 B460                    	mov	ah,xNameTrans ; 60h
 27771 00003FD9 CD21                    	int	21h	; DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING
 27772                                  			; DS:SI -> ASCIZ relative path string or directory name
 27773                                  			; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
 27774 00003FDB E8A308                  	call	COMPNAME
 27775 00003FDE 7540                    	jnz	short MELDO1    	; different file names
 27776 00003FE0 803E[069E]00            	cmp	byte [Concat],0
 27777 00003FE5 7539                    	jnz	short MELDO1		; concatenating
 27778                                  	; "File cannot be copied onto itself"
 27779 00003FE7 BA[7B93]                	mov	dx,file_name_ptr
 27780 00003FEA E82215                  	call	std_printf
 27781 00003FED E831EB                  	call	CRLF2
 27782 00003FF0 BA[F991]                	mov	dx,OVERWR_PTR
 27783 00003FF3 E9B905                  	jmp	COPYERR
 27784                                  ;MELDO1:
 27785                                  	;cmp	byte [CFLAG],0		; destination file created flag
 27786                                  	;jnz	short MELDO		; yes, new (created) file
 27787                                  	;				; no, overwrite question (must be confirmed)
 27788                                  	;call	get_answer_YNA
 27789                                  	;jb	short MELDO2    	; answer is no
 27790                                  	;cmp	byte [Concat],0
 27791                                  	;jnz	short MELDO
 27792                                  	;cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 27793                                  	;jnz	short DOREAD    	; yes
 27794                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 27795                                  MELDO2:
 27796 00003FF6 803E[0AA1]00            	cmp	byte [MELCOPY],0	; is 'Mel Hallerman copy' false ?
 27797 00003FFB 7507                    	jnz	short MELDO3    	; no (, it is true)
 27798 00003FFD 803E[069E]00            	cmp	byte [Concat],0
 27799 00004002 7408                    	jz	short MELDO4
 27800                                  MELDO3:
 27801 00004004 C606[119E]01            	mov	byte [DestClosed],1
 27802 00004009 E9D5FE                  	jmp	ENDCOPY
 27803                                  MELDO4:
 27804 0000400C E8EB00                  	call	SEARCHNEXT
 27805 0000400F 74A7                    	jz	short NEXTAMBIG
 27806 00004011 803E[E4A1]00            	cmp	byte [cox_src_file],0
 27807                                  	;jz	short MELDO5
 27808                                  	;jmp	NEXTSRC
 27809                                  	; 18/06/2023
 27810 00004016 7505                    	jnz	short NEXTSRCJ
 27811                                  MELDO5:
 27812 00004018 C606[119E]01            	mov	byte [DestClosed],1
 27813                                  NEXTSRCJ:	; 18/06/2023
 27814 0000401D E91FFF                  	jmp	NEXTSRC
 27815                                  
 27816                                  	; 12/06/2023
 27817                                  MELDO1:
 27818 00004020 803E[109E]00            	cmp	byte [CFLAG],0		; destination file created flag
 27819 00004025 7513                    	jnz	short MELDO     	; yes, new (created) file
 27820                                  					; no, overwrite question (must be confirmed)
 27821 00004027 E81803                  	call	get_answer_YNA
 27822 0000402A 72CA                    	jb	short MELDO2    	; answer is no
 27823 0000402C 803E[069E]00            	cmp	byte [Concat],0
 27824 00004031 7507                    	jnz	short MELDO
 27825 00004033 803E[E3A1]00            	cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 27826 00004038 7517                    	jnz	short DOREAD    	; yes
 27827                                  	; 12/06/2023
 27828                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 27829                                  
 27830                                  	; ****************************************
 27831                                  	; 12/06/2023
 27832                                  MELDO:
 27833 0000403A 803E[069E]00            	cmp	byte [Concat],0
 27834 0000403F 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 27835 00004041 F606[11A1]02            	test	byte [SrcInfo],2	; wildcard - show name
 27836 00004046 7409                    	jz	short DOREAD
 27837                                  SHOWCPNAM:
 27838                                  	; 25/03/2023
 27839                                  	; MSDOS 3.3
 27840                                  	;mov	dx,SRCBUF
 27841                                  	;mov	[STRING_PTR_2],dx
 27842                                  	;mov	dx,STRINGBUF2PTR
 27843                                  	;call	STD_PRINTF
 27844                                  	;call	CRLF2
 27845                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 27846                                  	; MSDOS 6.0 (& MSDOS 5.0
 27847 00004048 BA[7B93]                	mov	dx,file_name_ptr
 27848 0000404B E8C114                  	call	std_printf
 27849 0000404E E8D0EA                  	call	CRLF2
 27850                                  DOREAD:
 27851 00004051 E8C300                  	call	DOCOPY
 27852 00004054 803E[069E]00            	cmp	byte [Concat],0
 27853 00004059 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 27854                                  
 27855 0000405B E8B801                  	call	CLOSEDEST		; close current destination
 27856 0000405E 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 27857                                  
 27858 00004060 C606[109E]00            	mov	byte [CFLAG],0		; 'destination not created'
 27859                                  NODCLOSE:
 27860 00004065 803E[069E]00            	cmp	byte [Concat],0
 27861 0000406A 740A                    	jz	short NOFLUSH
 27862                                  
 27863                                  ;	Concatenating - flush output between source files so LostErr
 27864                                  ;	stuff works correctly.
 27865                                  
 27866                                  	;invoke	FlshFil  ; MSDOS 6.0
 27867                                  	; 25/03/2023
 27868 0000406C E80304                  	call	FlshFil
 27869                                  	;call	FLUSHFIL ; MSDOS 3.3
 27870                                  
 27871 0000406F F606[0AA1]FF            	test	byte [MELCOPY],0FFh
 27872                                  	;jz	short NOFLUSH
 27873                                  	;jmp	short DOMELCOPY
 27874                                  	; 25/03/2023
 27875 00004074 750D                    	jnz	short DOMELCOPY
 27876                                  NOFLUSH:
 27877 00004076 E88100                  	call	SEARCHNEXT		; try next match
 27878 00004079 75A2                    	jnz	short NEXTSRCJ		; not found - finished with 
 27879                                  					;   this source spec
 27880 0000407B C606[119E]00            	mov	byte [DestClosed],0	; 'destination not closed'
 27881 00004080 E935FF                  	jmp	NEXTAMBIG		; do next ambig match
 27882                                  
 27883                                  DOMELCOPY:
 27884 00004083 803E[0AA1]FF            	cmp	byte [MELCOPY],0FFh
 27885 00004088 740D                    	je	short CONTMEL
 27886 0000408A 8B36[C3A1]              	mov	si,[SRCPT]
 27887 0000408E 8936[0BA1]              	mov	[MELSTART],si
 27888 00004092 C606[0AA1]FF            	mov	byte [MELCOPY],0FFh
 27889                                  
 27890                                  CONTMEL:
 27891 00004097 31ED                    	xor	bp,bp
 27892 00004099 8B36[C3A1]              	mov	si,[SRCPT]
 27893                                  	;mov	bl,[PLUS_CHR]
 27894                                  	; 25/03/2023
 27895 0000409D B32B                    	mov	bl,'+'
 27896                                  SCANSRC2:
 27897 0000409F BF[6CA1]                	mov	di,ScanBuf
 27898 000040A2 E8EF07                  	call	cparse
 27899 000040A5 F6C780                  	test	bh,80h
 27900 000040A8 742F                    	jz	short NEXTMEL		; no "+" - go back to start
 27901 000040AA F6C701                  	test	bh,1
 27902 000040AD 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 27903 000040AF E866FE                  	call	SOURCEPROC
 27904 000040B2 E81CE9                  	call	RestUDir1
 27905 000040B5 BF[AB9F]                	mov	di,DESTFCB2
 27906 000040B8 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27907 000040BB CD21                    	int	21h		; DOS -	PARSE FILENAME
 27908                                  				; DS:SI	-> string to parse
 27909                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27910                                  				; AL = bit mask	to control parsing
 27911 000040BD BB[71A0]                	mov	bx,SDIRBUF+1
 27912 000040C0 BE[AC9F]                	mov	si,DESTFCB2+1
 27913 000040C3 8B3E[0FA1]              	mov	di,[SrcTail]
 27914                                  
 27915 000040C7 E81C06                  	call	BUILDNAME
 27916                                  
 27917 000040CA 803E[069E]00            	cmp	byte [Concat],0
 27918 000040CF 7405                    	je	short MELDOJ		; not concatenating - continue
 27919                                  
 27920                                  	;	Yes, turn off nowrite because this part of the code 
 27921                                  	;	is only reached after the first file has been dealt with.
 27922                                  
 27923 000040D1 C606[C6A1]00            	mov	byte [NOWRITE],0
 27924                                  MELDOJ:
 27925 000040D6 E961FF                  	jmp	MELDO
 27926                                  	; 18/06/2023
 27927                                  ;NEXTSRCJ:
 27928                                  	;jmp	NEXTSRC
 27929                                  
 27930                                  NEXTMEL:
 27931 000040D9 E83A01                  	call	CLOSEDEST
 27932 000040DC 31C0                    	xor	ax,ax
 27933 000040DE A2[109E]                	mov	[CFLAG],al
 27934 000040E1 A3[169E]                	mov	[NXTADD],ax
 27935 000040E4 A2[119E]                	mov	[SPECDRV],al
 27936 000040E7 8B36[0BA1]              	mov	si,[MELSTART]
 27937 000040EB 8936[C3A1]              	mov	[SRCPT],si
 27938 000040EF E80800                  	call	SEARCHNEXT
 27939 000040F2 7403                    	jz	short SETNMELJ
 27940 000040F4 E9EDFD                  	jmp	ENDCOPY2
 27941                                  SETNMELJ:
 27942 000040F7 E9B3FE                  	jmp	SETNMEL
 27943                                  
 27944                                  ; ---------------------------------------------------------------------------
 27945                                  
 27946                                  SEARCHNEXT:
 27947 000040FA B412                    	mov	ah,Dir_Search_Next ; 12h
 27948 000040FC F606[11A1]02            	test	byte [SrcInfo],2
 27949 00004101 7503                    	jnz	short SEARCH		; do search-next if ambig
 27950 00004103 08E4                    	or	ah,ah			; reset zero flag
 27951 00004105 C3                      	retn
 27952                                  
 27953                                  ; ---------------------------------------------------------------------------
 27954                                  
 27955                                  SEARCH:
 27956 00004106 50                      	push	ax
 27957 00004107 B41A                    	mov	ah,Set_DMA ; 1Ah
 27958 00004109 BA[2AA0]                	mov	dx,DIRBUF	; put result of search in dirbuf
 27959 0000410C CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27960                                  			; DS:DX	-> disk	transfer buffer
 27961 0000410E 58                      	pop	ax		; restore search first/next command
 27962 0000410F BA5C00                  	mov	dx,FCB ; 5Ch
 27963 00004112 CD21                    	int	21h		; Do the search
 27964 00004114 08C0                    	or	al,al
 27965 00004116 C3                      	retn
 27966                                  
 27967                                  ; ---------------------------------------------------------------------------
 27968                                  
 27969                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27970                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27971                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4335h
 27972                                  DOCOPY:
 27973 00004117 BE[12A1]                	mov	si,SrcBuf	; do name translate of source
 27974 0000411A BF[219B]                	mov	di,SRCXNAME	; save for name comparison
 27975 0000411D B460                    	mov	ah,xNameTrans ; 60h
 27976                                  	;mov	ah,60h
 27977 0000411F CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 27978                                  			; DS:SI	-> ASCIZ relative path string or directory name
 27979                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 27980 00004121 C606[049E]00            	mov	byte [RDEOF],0	; no EOF yet
 27981                                  
 27982                                  	; MSDOS 6.0
 27983                                  	;mov	ax,ExtOpen shl 8	; open the file
 27984                                  	; 26/03/2023
 27985 00004126 B8006C                  	mov	ax,6C00h
 27986                                  ;M046
 27987                                  ; For reads, the sharing mode should be deny none so that any process can
 27988                                  ;open this file again in any other sharing mode. This is mainly to allow
 27989                                  ;multiple command.com's to access the same file without getting sharing
 27990                                  ;violations
 27991                                  ;
 27992                                  	;mov	bx,deny_none|read_open_mode
 27993 00004129 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 27994 0000412C 31C9                    	xor	cx,cx			; no special files
 27995                                  	;mov	dx,read_open_flag	; set up open flags
 27996 0000412E BA0101                  	mov	dx,101h
 27997 00004131 CD21                    	int	21h
 27998                                  	; 26/03/2023
 27999 00004133 7230                    	jc	short Error_On_Source
 28000                                  	;jnc	short OPENOK
 28001                                  
 28002                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 28003                                  	;	They asked for it...
 28004                                  
 28005                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 28006                                  
 28007                                  	; 26/03/2023
 28008                                  	; MSDOS 3.3
 28009                                  	;mov	dx,SRCBUF
 28010                                  	;mov	ax,OPEN*256 ; 3D00h
 28011                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 28012                                  	;			; DS:DX	-> ASCIZ filename
 28013                                  	;			; AL = access mode
 28014                                  	;			; 0 - read
 28015                                  	;jnc	short OPENOK
 28016                                  	;call	GET_EXT_ERR_NUMBER
 28017                                  	;pushf
 28018                                  	;cmp	ax,65
 28019                                  	;jnz	short DOCOPY_ERR
 28020                                  	;mov	dx,ACCDENPTR
 28021                                  	;call	STD_PRINTF
 28022                                  ;DOCOPY_ERR:
 28023                                  	;popf
 28024                                  	;retn
 28025                                  
 28026                                  	; 26/03/2023
 28027                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28028                                  OPENOK:
 28029 00004135 89C3                    	mov	bx,ax
 28030 00004137 891E[69A1]              	mov	[SRCHAND],bx		; save handle
 28031 0000413B B80057                  	mov	ax,File_Times*256 ; 5700h
 28032 0000413E CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 28033                                  				; BX = file handle
 28034                                  
 28035 00004140 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 28036                                  
 28037 00004142 8916[CEA1]              	mov	[CPDATE],dx		; save date
 28038 00004146 890E[D0A1]              	mov	[CPTIME],cx		; save time
 28039                                  
 28040                                  	; MSDOS 6.0
 28041                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 28042                                  	; 26/04/2023
 28043                                  No_Copy_Xa:
 28044                                  	; 26/03/2023
 28045                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 28046                                  
 28047                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28048 0000414A B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 28049 0000414D CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28050                                  				; BX = file or device handle
 28051                                  	;and	dl,devid_ISDEV ; 80h
 28052                                  	; 18/04/2023
 28053 0000414F 80E280                  	and	dl,80h ; devid_ISDEV
 28054 00004152 8816[6BA1]              	mov	[SRCISDEV],dl		; set source info
 28055 00004156 7436                    	jz	short COPYLP		; source not a device
 28056 00004158 803E[C7A1]00            	cmp	byte [BINARY],0
 28057 0000415D 742F                    	je	short COPYLP		; ascii device ok
 28058 0000415F BA[3493]                	mov	dx,INBDEV_PTR		; cannot do binary input
 28059 00004162 E94A04                  	jmp	COPYERR
 28060                                  
 28061                                  Error_On_Source:			;AN022; we have a BAD error
 28062 00004165 E8CAE0                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 28063 00004168 C706[91A0][12A1]        	mov	word [string_ptr_2],SrcBuf
 28064                                  				;AN022; get address of failed string
 28065 0000416E C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1
 28066                                  				;AN022; put number of subst in control block
 28067 00004173 E89113                  	call	std_eprintf		;AN022; print it
 28068                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 28069 00004176 8B1E[69A1]              	mov	bx,[SRCHAND]
 28070                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 28071                                  	;je	short No_Close_Src	;AN022; no - don't close
 28072 0000417A 09DB                    	or	bx,bx
 28073 0000417C 7403                    	jz	short No_Close_Src
 28074                                  	;call	CLOSESRC		;AN022; clean up
 28075                                  	; 26/03/2023
 28076 0000417E E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 28077                                  No_Close_Src:				;AN022;
 28078 00004181 803E[109E]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 28079 00004186 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 28080 00004188 E956FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 28081                                  EndCopyJ3:				;AN022;
 28082 0000418B E956FD                  	jmp	ENDCOPY2		;AN022;
 28083                                  
 28084                                  	; 26/04/2023
 28085                                  ;No_Copy_Xa:
 28086                                  ;	; 26/03/2023
 28087                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 28088                                  ;
 28089                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 28090                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 28091                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28092                                  ;				; BX = file or device handle
 28093                                  ;	;and	dl,devid_ISDEV ; 80h
 28094                                  ;	; 18/04/2023
 28095                                  ;	and	dl,80h ; devid_ISDEV
 28096                                  ;	mov	[SRCISDEV],dl		; set source info
 28097                                  ;	jz	short COPYLP		; source not a device
 28098                                  ;	cmp	byte [BINARY],0
 28099                                  ;	je	short COPYLP		; ascii device ok
 28100                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 28101                                  ;	jmp	COPYERR
 28102                                  
 28103                                  COPYLP:
 28104                                  	; 26/03/2023
 28105 0000418E 8B1E[69A1]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 28106 00004192 8B0E[129E]              	mov	cx,[BYTCNT]
 28107 00004196 8B16[169E]              	mov	dx,[NXTADD]
 28108 0000419A 29D1                    	sub	cx,dx			; compute available space
 28109 0000419C 750E                    	jnz	short GOTROOM
 28110 0000419E E8D102                  	call	FlshFil   ; MSDOS 6.0
 28111                                  	;call	FLUSHFIL  ; MSDOS 3.3
 28112 000041A1 803E[CAA1]00            	cmp	byte [TERMREAD],0
 28113 000041A6 7565                    	jne	short CLOSESRC		; give up
 28114 000041A8 8B0E[129E]              	mov	cx,[BYTCNT]
 28115                                  GOTROOM:
 28116 000041AC 1E                      	push	ds
 28117 000041AD 8E1E[F59D]              	mov	ds,[TPA]
 28118 000041B1 B43F                    	mov	ah,READ ; 3Fh
 28119 000041B3 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 28120                                  				; BX = file handle,CX = number of bytes to read
 28121                                  				; DS:DX	-> buffer
 28122 000041B5 1F                      	pop	ds
 28123                                  	;jc	short CLOSESRC	; MSDOS 3.3
 28124                                  	; 26/03/2023
 28125 000041B6 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 28126 000041B8 89C1                    	mov	cx,ax			; get count
 28127 000041BA E351                    	jcxz	CLOSESRC		; no more to read
 28128 000041BC 803E[6BA1]00            	cmp	byte [SRCISDEV],0
 28129 000041C1 7507                    	jne	short NOTESTA		; is a device, ascii mode
 28130 000041C3 803E[CBA1]00            	cmp	byte [ASCII],0
 28131 000041C8 741B                    	je	short BINREAD
 28132                                  NOTESTA:
 28133 000041CA 89CA                    	mov	dx,cx
 28134 000041CC 8B3E[169E]              	mov	di,[NXTADD]
 28135 000041D0 B01A                    	mov	al,1Ah
 28136 000041D2 06                      	push	es
 28137 000041D3 8E06[F59D]              	mov	es,[TPA]		; scan for EOF
 28138 000041D7 F2AE                    	repne	scasb
 28139 000041D9 07                      	pop	es
 28140 000041DA 7505                    	jnz	short USEALL
 28141 000041DC FE06[049E]              	inc	byte [RDEOF]
 28142 000041E0 41                      	inc	cx
 28143                                  USEALL:
 28144 000041E1 29CA                    	sub	dx,cx
 28145 000041E3 89D1                    	mov	cx,dx
 28146                                  BINREAD:
 28147 000041E5 030E[169E]              	add	cx,[NXTADD]
 28148 000041E9 890E[169E]              	mov	[NXTADD],cx
 28149 000041ED 3B0E[129E]              	cmp	cx,[BYTCNT]		; is buffer full?
 28150 000041F1 720C                    	jb	short TESTDEV		; if not, we may have found eof
 28151                                  	; 26/03/2023
 28152 000041F3 E87C02                  	call	FlshFil
 28153                                  	;call	FLUSHFIL
 28154 000041F6 803E[CAA1]00            	cmp	byte [TERMREAD],0
 28155 000041FB 7510                    	jne	short CLOSESRC		; give up
 28156 000041FD EB8F                    	jmp	short COPYLP
 28157                                  TESTDEV:
 28158 000041FF 803E[6BA1]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 28159 00004204 7407                    	je	short CLOSESRC
 28160 00004206 803E[049E]00            	cmp	byte [RDEOF],0
 28161 0000420B 7481                    	je	short COPYLP		; on device, go till ^Z
 28162                                  CLOSESRC:
 28163 0000420D 8B1E[69A1]              	mov	bx,[SRCHAND]
 28164                                  CLOSESRC2:
 28165 00004211 B43E                    	mov	ah,CLOSE ; 3Eh
 28166 00004213 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28167                                  				; BX = file handle
 28168                                  CLOSESRCDEST_RETN:
 28169 00004215 C3                      	retn
 28170                                  
 28171                                  ; ---------------------------------------------------------------------------
 28172                                  
 28173                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28174                                  CLOSEDEST:
 28175                                  
 28176                                  	;	We are called to close the destination.
 28177                                  	;	We need to note whether or not there is any internal data left
 28178                                  	;	to be flushed out.
 28179                                  
 28180 00004216 803E[119E]00            	cmp	byte [DestClosed],0
 28181 0000421B 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 28182 0000421D A0[0C9E]                	mov	al,[DestSwitch]
 28183 00004220 E8E803                  	call	SETASC			; check for b or a switch
 28184 00004223 742E                    	jz	short BINCLOS		;   on destination
 28185 00004225 8B1E[169E]              	mov	bx,[NXTADD]
 28186                                  ;
 28187                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 28188                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 28189                                  ;just return without appending a ^Z incorrectly for the first file (since we
 28190                                  ;are concatenating now). Also, in case it is a single file copy, we will
 28191                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 28192                                  ;performance overhead on single ASCII file copies which now always involve
 28193                                  ;2 writes instead of 1 before. Is this really that important?
 28194                                  ;
 28195                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 28196                                  ;M048;	jne	short PutZ
 28197                                  
 28198                                  	; 26/03/2023
 28199                                  	; MSDOS 3.3
 28200                                  	;cmp	bx,[BYTCNT]		; is memory full?
 28201                                  	;jne	short PUTZ
 28202                                  
 28203                                  	; 26/03/2023
 28204 00004229 E83902                  	call	TRYFLUSH		; flush (and double-check for concat)	
 28205 0000422C 7402                    	jz	short NOCONC
 28206                                  CONCHNG:
 28207 0000422E F9                      	stc
 28208 0000422F C3                      	retn
 28209                                  
 28210                                  NOCONC:	
 28211 00004230 31DB                    	xor	bx,bx
 28212                                  PUTZ:
 28213 00004232 1E                      	push	ds
 28214 00004233 8E1E[F59D]              	mov	ds,[TPA]
 28215 00004237 C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 28216 0000423B 1F                      	pop	ds
 28217 0000423C FF06[169E]              	inc	word [NXTADD]	; make sure our ^z gets written	
 28218 00004240 C606[C6A1]00            	mov	byte [NOWRITE],0
 28219 00004245 A1[C8A1]                	mov	ax,[WRITTEN]
 28220 00004248 0306[169E]              	add	ax,[NXTADD]
 28221 0000424C 7205                    	jc	short BINCLOS	; > 1
 28222 0000424E 83F801                  	cmp	ax,1
 28223 00004251 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 28224                                  BINCLOS:
 28225 00004253 E80F02                  	call	TRYFLUSH
 28226 00004256 75D6                    	jnz	short CONCHNG
 28227                                  
 28228                                  	; 26/04/2023
 28229 00004258 833E[C8A1]00            	cmp	word [WRITTEN],0
 28230                                  	; 26/03/2023
 28231 0000425D 7503                    	jnz	short NO_FORGET
 28232                                  FORGETITJ:
 28233                                  	;jz	short FORGETIT	; never wrote nothing
 28234                                  	; 26/03/2023
 28235 0000425F E98500                  	jmp	FORGETIT ; 18/04/2023
 28236                                  NO_FORGET:			; wrote something
 28237 00004262 8B1E[06A1]              	mov	bx,[DESTHAND]
 28238 00004266 8B0E[D0A1]              	mov	cx,[CPTIME]
 28239 0000426A 8B16[CEA1]              	mov	dx,[CPDATE]
 28240 0000426E 803E[C5A1]00            	cmp	byte [INEXACT],0 ; copy not exact?
 28241 00004273 7431                    	je	short DODCLOSE	; if no, copy date & time
 28242 00004275 B42C                    	mov	ah,Get_Time ; 2Ch
 28243 00004277 CD21                    	int	21h		; DOS -	GET CURRENT TIME
 28244                                  				; Return: CH = hours,CL = minutes,DH = seconds
 28245                                  				; DL = hundredths of seconds
 28246 00004279 D0E1                    	shl	cl,1
 28247 0000427B D0E1                    	shl	cl,1		; left justify min in cl
 28248 0000427D D1E1                    	shl	cx,1
 28249 0000427F D1E1                    	shl	cx,1
 28250 00004281 D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 28251 00004283 D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 28252 00004285 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 28253 00004287 51                      	push	cx		; save packed time
 28254 00004288 B42A                    	mov	ah,Get_Date ; 2Ah
 28255 0000428A CD21                    	int	21h		; DOS -	GET CURRENT DATE
 28256                                  				; Return: DL = day,DH = month,	CX = year
 28257                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 28258 0000428C 81E9BC07                	sub	cx,1980
 28259 00004290 86E9                    	xchg	ch,cl
 28260 00004292 D1E1                    	shl	cx,1		; year to high 7 bits
 28261 00004294 D0E6                    	shl	dh,1		; month to high 3 bits
 28262 00004296 D0E6                    	shl	dh,1
 28263 00004298 D0E6                    	shl	dh,1
 28264 0000429A D0E6                    	shl	dh,1
 28265 0000429C D0E6                    	shl	dh,1		; most sig bit of month in carry
 28266 0000429E 80D500                  	adc	ch,0		; put that bit next to year
 28267 000042A1 08F2                    	or	dl,dh		; or low three of month into day
 28268 000042A3 88EE                    	mov	dh,ch		; get year and high bit of month
 28269 000042A5 59                      	pop	cx
 28270                                  DODCLOSE:
 28271 000042A6 83FB00                  	cmp	bx,0
 28272 000042A9 7E36                    	jle	short CLOSEDONE
 28273 000042AB B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 28274 000042AE CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 28275                                  				; BX = file handle,CX = time to be set
 28276                                  				; DX = date to be set
 28277                                  	; 26/03/2023
 28278                                  	; MSDOS 6.0
 28279 000042B0 721A                    	jc	short Cleanup_Err ;AN022; handle error
 28280                                  
 28281                                  	;	See if the destination has *anything* in it.
 28282                                  	;	If not, just close and delete it.
 28283                                  
 28284 000042B2 B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 28285 000042B5 31D2                    	xor	dx,dx
 28286 000042B7 89D1                    	mov	cx,dx
 28287 000042B9 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28288                                  			; AL = method: offset from end of file
 28289                                  	;	DX:AX is file size
 28290                                  
 28291 000042BB 09C2                    	or	dx,ax
 28292 000042BD 9C                      	pushf
 28293 000042BE B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 28294 000042C1 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28295                                  			; BX = file or device handle
 28296 000042C3 52                      	push	dx		; save them away
 28297 000042C4 B43E                    	mov	ah,CLOSE ; 3Eh
 28298 000042C6 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28299                                  			; BX = file handle
 28300 000042C8 5A                      	pop	dx
 28301                                  
 28302                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 28303                                  	; MSDOS 6.0
 28304 000042C9 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 28305 000042CB 9D                      	popf			;AN022; get the flags back
 28306                                  Cleanup_Err: 			;AN022;
 28307 000042CC E85A00                  	call	CleanUpErr	;AN022; attempt to delete the target
 28308                                  	; 26/03/2023
 28309                                  	;call	DestDelete	;AN022; attempt to delete the target
 28310                                  	;jmp	short FILECLOSED
 28311                                  	;			;AN022; close the file
 28312                                  	; 26/03/2023
 28313                                  DestDel_fclosed:
 28314 000042CF E82700                  	call	DestDelete
 28315                                  FILECLOSED:
 28316 000042D2 FE06[119E]              	inc	byte [DestClosed]
 28317                                  RET50:
 28318 000042D6 F8                      	clc
 28319 000042D7 C3                      	retn
 28320                                  	
 28321                                  Close_Cont:			;AN022; no error - co
 28322                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28323 000042D8 9D                      	popf
 28324 000042D9 7506                    	jnz	short CLOSEDONE
 28325 000042DB F7C28000                	test	dx,80h		; is the destination a device?
 28326                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 28327                                  	;call	DestDelete
 28328                                  	;jmp	short FILECLOSED
 28329                                  	; 26/03/2023
 28330 000042DF 74EE                    	jz	short DestDel_fclosed
 28331                                  CLOSEDONE:
 28332 000042E1 FF06[1D9E]              	inc	word [FileCnt]
 28333                                  	; 26/03/2023
 28334 000042E5 EBEB                    	jmp	short FILECLOSED
 28335                                  	
 28336                                  ;FILECLOSED:
 28337                                  ;	inc	byte [DestClosed]
 28338                                  ;RET50:
 28339                                  	;clc
 28340                                  	;retn
 28341                                  
 28342                                  FORGETIT:
 28343 000042E7 8B1E[06A1]              	mov	bx,[DESTHAND]
 28344 000042EB E8B8FF                  	call	DODCLOSE	 ; close the dest
 28345 000042EE E80800                  	call	DestDelete
 28346 000042F1 C706[1D9E]0000          	mov	word [FileCnt],0 ; no files transferred
 28347 000042F7 EBDD                    	jmp	short RET50
 28348                                  
 28349                                  ; ---------------------------------------------------------------------------
 28350                                  
 28351                                  	; 26/03/2023
 28352                                  DestDelete:
 28353 000042F9 BA[AFA0]                	mov	dx,DestBuf
 28354 000042FC B441                    	mov	ah,Unlink ; 41h
 28355 000042FE CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 28356                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 28357                                  			;		(no wildcards allowed)
 28358 00004300 C3                      	retn
 28359                                  
 28360                                  ; ---------------------------------------------------------------------------
 28361                                  
 28362                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28363                                  SOURCE_SET:
 28364 00004301 56                      	push	si
 28365 00004302 A1[E7A1]                	mov	ax,[STARTEL]
 28366 00004305 BE[6CA1]                	mov	si,ScanBuf	; adjust to copy
 28367 00004308 29F0                    	sub	ax,si
 28368 0000430A BF[12A1]                	mov	di,SrcBuf
 28369 0000430D 01F8                    	add	ax,di
 28370 0000430F A3[0FA1]                	mov	[SrcTail],ax
 28371 00004312 880E[0EA1]              	mov	[SrcSiz],cl	; save its size
 28372 00004316 41                      	inc	cx		; include the nul
 28373 00004317 F3A4                    	rep	movsb		; save this source
 28374 00004319 883E[11A1]              	mov	[SrcInfo],bh	; save info about it
 28375 0000431D 5E                      	pop	si
 28376 0000431E 89E8                    	mov	ax,bp		; switches so far
 28377 00004320 E8E802                  	call	SETASC		; set a,b switches accordingly
 28378 00004323 E8A6E9                  	call	SWITCH		; get any more switches on this arg
 28379                                  	;call	SETASC		; set
 28380                                  	;retn
 28381                                  	; 26/03/2023
 28382 00004326 E9E202                  	jmp	SETASC
 28383                                  
 28384                                  ; =============== S U B	R O U T	I N E =======================================
 28385                                  
 28386                                  ; MSDOS 6.0
 28387                                  
 28388                                  ;****************************************************************
 28389                                  ;*
 28390                                  ;* ROUTINE:	CleanupErr
 28391                                  ;*
 28392                                  ;* FUNCTION:	Issues extended error message for destination
 28393                                  ;*		if not alreay issued
 28394                                  ;*
 28395                                  ;* INPUT:	return from INT 21
 28396                                  ;*
 28397                                  ;* OUTPUT:	none
 28398                                  ;*
 28399                                  ;****************************************************************
 28400                                  
 28401                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28402                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28403                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 28404                                  CleanUpErr:	;proc near		;AN022;
 28405                                  
 28406 00004329 803E[24A2]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 28407 0000432E 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 28408 00004330 E8FFDE                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 28409 00004333 C706[91A0][AFA0]        	mov	word [string_ptr_2],DestBuf 
 28410                                  					;AN022; get address of failed string
 28411 00004339 C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 28412                                  					;AN022; put number of subst in control block
 28413 0000433E E8C611                  	call	std_eprintf		;AN022; issue the error message
 28414                                  CleanupErr_Cont:			;AN022;
 28415                                  getansw_8:	; 12/06/2023
 28416 00004341 C3                      	retn				;AN022; return to caller
 28417                                  
 28418                                  ;CleanUpErr	endp			;AN022;
 28419                                  
 28420                                  
 28421                                  ; 12/06/2023
 28422                                  ; ---------------------------------------------------------------------------
 28423                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 28424                                  ; -----------------------------------------
 28425                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 28426                                  ; ---------------------------------------------------------------------------
 28427                                  
 28428                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28429                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:456Dh
 28430                                  
 28431                                  get_answer_YNA:
 28432 00004342 C606[E3A1]00            	mov	byte [cox_dest_file],0	; clear validation flag
 28433 00004347 B80043                  	mov	ax,4300h
 28434 0000434A BA[AFA0]                	mov	dx,DestBuf
 28435 0000434D CD21                    	int	21h		; DOS -	2+ - GET FILE ATTRIBUTES
 28436                                  				; DS:DX	-> ASCIZ file name or directory
 28437                                  				; name without trailing	slash
 28438                                  	;jnc	short getansw_1
 28439                                  	;jmp	getansw_5
 28440                                  	; 12/06/2023
 28441 0000434F F5                      	cmc
 28442 00004350 73EF                    	jnc	short getansw_8 
 28443                                  getansw_1:
 28444 00004352 FE06[E3A1]              	inc	byte [cox_dest_file]	; valid destination file
 28445 00004356 8D36[D7A1]              	lea	si,cox_sublist_buff
 28446 0000435A C7040B00                	mov	word [si],11		; sublist size, 11 bytes
 28447 0000435E C74402[AFA0]            	mov	word [si+2],DestBuf	; sublist value	(pointer)
 28448 00004363 8C5C04                  	mov	[si+4],ds		; sublist segment
 28449                                  	;mov	byte [si+6],1		; sub id (N of %N)
 28450 00004366 C6440710                	mov	byte [si+7],10h		; data type flags
 28451                                  	;mov	byte [si+8],0		; maximum length (chars)
 28452                                  	;mov	byte [si+9],0		; minimum length (chars)
 28453                                  	;mov	byte [si+10],0		; pad field character (0)
 28454                                  	; 12/06/2023
 28455 0000436A 31C9                    	xor	cx,cx
 28456 0000436C 894C08                  	mov	[si+8],cx ; 0
 28457 0000436F 884C0A                  	mov	[si+10],cl ; 0
 28458 00004372 FEC1                    	inc	cl
 28459 00004374 884C06                  	mov	[si+6],cl ; 1	
 28460                                  
 28461                                  	; 12/06/2023
 28462                                  	;lea	si,cox_sublist_buff
 28463 00004377 B84F04                  	mov	ax,1103			; message number
 28464                                  					; 'Overwrite %1 (Yes/No/All)?'
 28465 0000437A BB0200                  	mov	bx,2			; std error (file handle = 2)
 28466                                  	; 12/06/2023
 28467                                  	;mov	cx,1			; byte count
 28468                                  	; cx = 1
 28469                                  	;mov	dh,0FFh			; message class	(utility)
 28470                                  	;xor	dl,dl			; control flag = 0
 28471 0000437D 31D2                    	xor	dx,dx
 28472 0000437F FECE                    	dec	dh  ; dh = 0FFh
 28473 00004381 E85614                  	call	SYSDISPMSG
 28474                                  	; 12/06/2023
 28475                                  	;xor	bx,bx
 28476                                  	; bh = 0
 28477                                  getansw_2:
 28478 00004384 B8080C                  	mov	ax,0C08h
 28479 00004387 CD21                    	int	21h		; DOS -	CLEAR KEYBOARD BUFFER
 28480                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 28481                                  	;cmp	al,0
 28482                                  	;jz	short getansw_2
 28483                                  	; 12/06/2023
 28484 00004389 20C0                    	and	al,al
 28485 0000438B 74F7                    	jz	short getansw_2
 28486 0000438D 3C0D                    	cmp	al,0Dh
 28487 0000438F 743B                    	je	short getansw_4
 28488 00004391 88C3                    	mov	bl,al
 28489 00004393 88C2                    	mov	dl,al
 28490 00004395 B82065                  	mov	ax,6520h
 28491 00004398 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 28492                                  				; AL = function	-
 28493 0000439A 3A16[AC6E]              	cmp	dl,[_Y_es]		; 'Y' ?
 28494 0000439E 740C                    	je	short getansw_3
 28495 000043A0 3A16[AD6E]              	cmp	dl,[_N_o]		; 'N' ?
 28496 000043A4 7406                    	je	short getansw_3
 28497 000043A6 3A16[AE6E]              	cmp	dl,[_A_ll]		; 'A' ?
 28498 000043AA 75D8                    	jne	short getansw_2
 28499                                  getansw_3:
 28500 000043AC 88DF                    	mov	bh,bl
 28501 000043AE 53                      	push	bx
 28502 000043AF 881E[AB6E]              	mov	[MSG_1104],bl
 28503 000043B3 B440                    	mov	ah,40h
 28504 000043B5 BB0200                  	mov	bx,2			; std error (file handle = 2)
 28505 000043B8 B90100                  	mov	cx,1			; byte count
 28506 000043BB BA[AB6E]                	mov	dx,MSG_1104
 28507 000043BE CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28508                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 28509 000043C0 B440                    	mov	ah,40h
 28510 000043C2 C606[AB6E]08            	mov	byte [MSG_1104],8	; backspace (move cursor to back)
 28511 000043C7 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28512                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 28513 000043C9 5B                      	pop	bx
 28514 000043CA EBB8                    	jmp	short getansw_2
 28515                                  getansw_4:
 28516                                  	;cmp	bh,0
 28517                                  	;jz	short getansw_2
 28518                                  	; 12/06/2023
 28519 000043CC 08FF                    	or	bh,bh
 28520 000043CE 74B4                    	jz	short getansw_2
 28521 000043D0 88FA                    	mov	dl,bh
 28522 000043D2 B82065                  	mov	ax,6520h
 28523 000043D5 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 28524                                  				; AL = function	-
 28525 000043D7 52                      	push	dx
 28526 000043D8 B82E04                  	mov	ax,1070			; message number
 28527 000043DB BB0200                  	mov	bx,2			; std error (file handle = 2)
 28528 000043DE 31C9                    	xor	cx,cx
 28529                                  	;mov	dh,0FFh			; message class	(utility)
 28530                                  	;xor	dl,dl
 28531                                  	; 12/06/2023
 28532 000043E0 31D2                    	xor	dx,dx
 28533 000043E2 FECE                    	dec	dh  ; dh = 0FFh
 28534 000043E4 E8F313                  	call	SYSDISPMSG
 28535 000043E7 5A                      	pop	dx
 28536 000043E8 3A16[AC6E]              	cmp	dl,[_Y_es]
 28537 000043EC 740B                    	jz	short getansw_5
 28538 000043EE 3A16[AD6E]              	cmp	dl,[_N_o]
 28539 000043F2 7406                    	jz	short getansw_6
 28540 000043F4 C606[E2A1]00            	mov	byte [cox_y_override],0
 28541                                  	; 12/06/2023
 28542                                  	;jmp	short $+2
 28543                                  getansw_5:
 28544                                  	; 12/06/2023
 28545                                  	;clc
 28546                                  	; cf = 0
 28547                                  	;jmp	short getansw_7
 28548                                  	; 12/06/2023
 28549 000043F9 C3                      	retn
 28550                                  getansw_6:
 28551                                  gcpcmdo_2:	; 12/06/2023
 28552                                  gecpcmd_3:	; 12/06/2023
 28553 000043FA F9                      	stc
 28554                                  getansw_7:
 28555 000043FB C3                      	retn
 28556                                  
 28557                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28558                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:463Ah
 28559                                  init_copycmd_option:
 28560 000043FC C606[E2A1]01            	mov	byte [cox_y_override],1 ; suppress copy overwrite confirmation
 28561 00004401 06                      	push	es
 28562 00004402 8E06[F39D]              	mov	es,[RESSEG]
 28563 00004406 268E06[DC03]            	mov	es,[es:EnvirSeg]
 28564 0000440B 8D36[FC98]              	lea	si,copycmd		; "COPYCMD="
 28565 0000440F B90800                  	mov	cx,8
 28566 00004412 E83500                  	call	getenv_copycmd
 28567 00004415 7216                    	jc	short icpcmd_3
 28568 00004417 E82000                  	call	get_copycmd_option	; copycmd=/Y or copycmd=/-Y
 28569 0000441A 720F                    	jc	short icpcmd_2
 28570 0000441C 47                      	inc	di			; skip '/'
 28571 0000441D 268A05                  	mov	al,[es:di]
 28572 00004420 24DF                    	and	al,0DFh			; convert to uppercase
 28573 00004422 3C59                    	cmp	al,'Y'
 28574 00004424 7505                    	jnz	short icpcmd_2
 28575                                  icpcmd_1:
 28576 00004426 C606[E2A1]00            	mov	byte [cox_y_override],0	; clear copy overwrite question/confirmation
 28577                                  					; (don't suppress)
 28578                                  icpcmd_2:
 28579 0000442B 07                      	pop	es
 28580 0000442C C3                      	retn
 28581                                  icpcmd_3:				; ...
 28582 0000442D 8E06[F39D]              	mov	es,[RESSEG]
 28583 00004431 803E[9B01]00            	cmp	byte [cox_Y_option],0	; default (/Y) switch option (1 = enabled)
 28584 00004436 74F3                    	jz	short icpcmd_2
 28585 00004438 EBEC                    	jmp	short icpcmd_1
 28586                                  
 28587                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28588                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4679h
 28589                                  get_copycmd_option:
 28590 0000443A 26803D00                	cmp	byte [es:di],0
 28591 0000443E 74BA                    	jz	short gcpcmdo_2
 28592 00004440 26803D2F                	cmp	byte [es:di],'/'
 28593 00004444 7403                    	jz	short gcpcmdo_1
 28594 00004446 47                      	inc	di
 28595 00004447 EBF1                    	jmp	short get_copycmd_option
 28596                                  gcpcmdo_1:
 28597                                  	; 12/06/2023
 28598                                  	;clc
 28599                                  	; cf = 0
 28600                                  	;jmp	short gcpcmdo_3
 28601                                  	; 12/06/2023
 28602 00004449 C3                      	retn
 28603                                  	; 12/06/2023
 28604                                  ;gcpcmdo_2:
 28605                                  ;	stc
 28606                                  ;gcpcmdo_3:
 28607                                  ;	retn
 28608                                  
 28609                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28610                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:468Dh
 28611                                  getenv_copycmd:
 28612 0000444A 31FF                    	xor	di,di
 28613 0000444C 30C0                    	xor	al,al
 28614                                  gecpcmd_1:
 28615                                  	;cmp	byte [es:di],0
 28616                                  	; 12/06/2023
 28617 0000444E 263805                  	cmp	[es:di],al ; 0
 28618 00004451 74A7                    	jz	short gecpcmd_3
 28619 00004453 51                      	push	cx
 28620 00004454 56                      	push	si
 28621 00004455 F3A6                    	repe	cmpsb
 28622 00004457 5E                      	pop	si
 28623 00004458 59                      	pop	cx
 28624 00004459 7409                    	jz	short gecpcmd_2 ; cf = 0
 28625 0000445B 51                      	push	cx
 28626 0000445C B90080                  	mov	cx,32768
 28627 0000445F F2AE                    	repne	scasb	; al = 0
 28628 00004461 59                      	pop	cx
 28629 00004462 EBEA                    	jmp	short gecpcmd_1
 28630                                  gecpcmd_2:
 28631                                  	;clc
 28632                                  	; 12/06/2023
 28633                                  	; cf = 0
 28634                                  	;jmp	short gecpcmd_4
 28635                                  	; 12/06/2023
 28636 00004464 C3                      	retn
 28637                                  	; 12/06/2023
 28638                                  ;gecpcmd_3:
 28639                                  ;	stc
 28640                                  ;gecpcmd_4:
 28641                                  ;	retn
 28642                                  
 28643                                  ;============================================================================
 28644                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 28645                                  ;============================================================================
 28646                                  ; 01/10/2018 - Retro DOS v3.0
 28647                                  
 28648                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 28649                                  
 28650                                  ; =============== S U B	R O U T	I N E =======================================
 28651                                  
 28652                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 28653                                  ;
 28654                                  ;	EXIT	ZR set if concatenate flag unchanged
 28655                                  
 28656                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28657                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 28658                                  
 28659                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28660                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46ADh
 28661                                  TRYFLUSH:
 28662 00004465 A0[069E]                	mov	al,[Concat]
 28663 00004468 50                      	push	ax
 28664                                  	;call	FLUSHFIL
 28665 00004469 E80600                  	call	FlshFil
 28666 0000446C 58                      	pop	ax
 28667 0000446D 3A06[069E]              	cmp	al,[Concat]
 28668 00004471 C3                      	retn
 28669                                  
 28670                                  ; =============== S U B	R O U T	I N E =======================================
 28671                                  
 28672                                  	; 26/03/2023
 28673                                  	; MSDOS 3.3
 28674                                  ;FLUSHFIL:
 28675                                  	;mov	al,[BINARY]
 28676                                  	;mov	ah,[ASCII]
 28677                                  	;push	ax
 28678                                  	;call	FLSHFIL
 28679                                  	;pop	ax
 28680                                  	;mov	[ASCII],ah
 28681                                  	;mov	[BINARY],al
 28682                                  	;retn
 28683                                  
 28684                                  ; =============== S U B	R O U T	I N E =======================================
 28685                                  
 28686                                  ;***	Flshfil - write out any data remaining in copy buffer.
 28687                                  ;
 28688                                  ;	Inputs:
 28689                                  ;	  [NXTADD] = No. of bytes to write
 28690                                  ;	  [CFLAG] <> 0 if file has been created
 28691                                  ;	Outputs:
 28692                                  ;	  [NXTADD] = 0
 28693                                  
 28694                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28695                                  	;
 28696                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 28697                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46BAh
 28698                                  FlshFil:
 28699 00004472 C606[CAA1]00            	mov	byte [TERMREAD],0
 28700 00004477 803E[109E]00            	cmp	byte [CFLAG],0
 28701 0000447C 7403                    	jz	short NotExists
 28702 0000447E E99600                  	jmp	Exists
 28703                                  NotExists:
 28704 00004481 E8A101                  	call	BUILDDEST		; find out all about the destination
 28705 00004484 E8FA03                  	call	COMPNAME		; source and dest. the same?
 28706 00004487 7519                    	jnz	short ProcDest		; if not, go ahead
 28707 00004489 803E[6BA1]00            	cmp	byte [SRCISDEV],0
 28708 0000448E 7512                    	jnz	short ProcDest		; same name on device ok
 28709 00004490 803E[069E]00            	cmp	byte [Concat],0		; concatenation?
 28710 00004495 BA[F991]                	mov	dx,OVERWR_PTR
 28711                                  	;je	short COPERR		; not concatenating - overwrite error
 28712                                  	; 26/03/2023
 28713 00004498 7503                    	jne	short No_Concat_Err
 28714 0000449A E91201                  	jmp	COPYERR
 28715                                  	
 28716                                  No_Concat_Err:	; concatenating
 28717 0000449D C606[C6A1]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 28718                                  ProcDest:
 28719                                  	; MSDOS 6.0
 28720                                  	;mov	ax,(ExtOpen<<8)		; open the file
 28721                                  	; 26/03/2023
 28722 000044A2 B8006C                  	mov	ax,6C00h
 28723 000044A5 BE[AFA0]                	mov	si,DestBuf		; get file name
 28724                                  ;M046
 28725                                  ; For writes, we want to deny writes by anyone else at the same time that we
 28726                                  ;are writing to it. For instance, on a network, 2 workstations could try
 28727                                  ;writing to the same file. Also, because we opened the source file with
 28728                                  ;DENY NONE, it is fine if the source and destination files are the same as
 28729                                  ;would happen when we append to an existing file.
 28730                                  
 28731                                  	; 26/03/2023
 28732                                  	;mov	bx,deny_write|write_open_mode
 28733 000044A8 BB2100                  	mov	bx,21h			; get open mode for copy; M046
 28734 000044AB 31C9                    	xor	cx,cx			; no special files
 28735                                  	;mov	dx,write_open_flag	; set up open flags
 28736 000044AD BA0101                  	mov	dx,101h	
 28737                                  
 28738 000044B0 803E[C6A1]00            	cmp	byte [NOWRITE],0
 28739 000044B5 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 28740                                  	;mov	dx,creat_open_flag	; set up create flags
 28741 000044B7 BA1201                  	mov	dx,112h
 28742                                  
 28743                                  	; 26/03/2023
 28744                                  	; MSDOS 3.3
 28745                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 28746                                  	;cmp	byte [NOWRITE],0
 28747                                  	;jne	short DODESTOPEN
 28748                                  	;mov	ah,CREAT ; 3Ch
 28749                                  	;xor	cx,cx
 28750                                  ;DODESTOPEN:
 28751                                  	;mov	dx,DESTBUF
 28752                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 28753                                  	;		; CX = attributes for file
 28754                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 28755                                  
 28756                                  ; 26/03/2023
 28757                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 28758                                  ;	;mov	dx,FULDIRPTR
 28759                                  ;	;call	GET_EXT_ERR_NUMBER
 28760                                  ;	;jc	short COPERR
 28761                                  ;
 28762                                  ;	; 01/10/2018
 28763                                  ;	;jnc	short DEST_OPEN_OKAY
 28764                                  ;		
 28765                                  ;	;mov	dx,FULDIRPTR
 28766                                  ;	;call	GET_EXT_ERR_NUMBER
 28767                                  ;	;jmp	short COPERR
 28768                                  ;
 28769                                  ;	jc	short DEST_OPEN_ERROR
 28770                                  
 28771                                  	; 26/03/2023
 28772                                  DoDestOpen:
 28773 000044BA CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 28774                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 28775                                  			; BH = flags
 28776                                  			; CX = create attribute
 28777                                  			; DL = action if file exists/does not exists
 28778                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 28779                                  
 28780                                  ;	We assume that the error is normal.
 28781                                  ;	TriageError will correct the DX value appropriately.
 28782                                  	
 28783 000044BC 7311                    	jnc	short Dest_Open_Okay
 28784                                  Xa_Set_Error:				;AN030; error occurred on XA
 28785 000044BE E871DD                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 28786                                  
 28787                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 28788                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 28789                                  Ext_Err_Set:				;AN030;
 28790 000044C1 C706[91A0][AFA0]        	mov	word [string_ptr_2],DestBuf
 28791                                  					;AN000; get address of failed string
 28792 000044C7 C606[D291]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 28793                                  					;AN030; put number of subst in control block
 28794                                  CopErrJ2:				;AN030;
 28795 000044CC E9E000                  	jmp	COPYERR			;AN030; go issue message
 28796                                  
 28797                                  ;DEST_OPEN_OKAY:
 28798                                  	; 26/03/2023
 28799                                  Dest_Open_Okay:
 28800 000044CF A3[06A1]                	mov	[DESTHAND],ax		; save handle
 28801 000044D2 C606[109E]01            	mov	byte [CFLAG],1		; destination now exists
 28802 000044D7 89C3                    	mov	bx,ax
 28803 000044D9 B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 28804 000044DC CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 28805                                  			   	; BX = file or device handle
 28806                                  
 28807 000044DE 8816[08A1]              	mov	[DESTISDEV],dl		; set dest info
 28808                                  	; 18/04/2023
 28809 000044E2 F6C280                  	test	dl,80h
 28810                                  	;test	dl,devid_ISDEV
 28811 000044E5 7430                    	jz	short Exists		; Dest not a device
 28812                                  
 28813                                  ;	Destination is device.
 28814                                  
 28815 000044E7 A0[0C9E]                	mov	al,[DestSwitch]
 28816                                  	; 26/03/2023
 28817 000044EA 240C                    	and	al,0Ch
 28818                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 28819 000044EC 7509                    	jnz	short TestBoth
 28820 000044EE A0[CBA1]                	mov	al,[ASCII]		; neither set, use current setting
 28821 000044F1 0A06[C7A1]              	or	al,[BINARY]
 28822 000044F5 7416                    	jz	short ExSetA		; neither set, default to ascii
 28823                                  TestBoth:
 28824 000044F7 7A1E                    	jpe	short Exists		; both are set, ignore
 28825 000044F9 A808                    	test	al,8
 28826                                  	;test	al,SWITCHB
 28827 000044FB 741A                    	jz	short Exists
 28828                                  	;mov	ax,(IOCTL shl 8) or 1
 28829 000044FD B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 28830 00004500 30F6                    	xor	dh,dh
 28831                                  	; 18/04/2023
 28832 00004502 80CA20                  	or	dl,20h
 28833                                  	;or	dl,devid_RAW
 28834 00004505 8816[08A1]              	mov	[DESTISDEV],dl
 28835 00004509 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 28836                                  			; BX = device handle,DH = 0
 28837                                  			; DL = device information to set (bits 0-7 from	function 0)
 28838 0000450B EB0A                    	jmp	short Exists
 28839                                  
 28840                                  	; 26/03/2023
 28841                                  	; 01/10/2018 - Retro DOS v3.0 modification
 28842                                  ;DEST_OPEN_ERROR:
 28843                                  	;mov	dx,FULDIRPTR
 28844                                  	;call	GET_EXT_ERR_NUMBER
 28845                                  ;COPERR:
 28846                                  	; 26/03/2023
 28847                                  ;CopyErrj:
 28848                                  	;jmp	short COPYERR
 28849                                  
 28850                                  ExSetA:
 28851                                  ;	What we read in may have been in binary mode, flag zapped write OK
 28852                                  
 28853 0000450D C606[CBA1]04            	mov	byte [ASCII],4
 28854                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 28855 00004512 800E[C5A1]04            	or	byte [INEXACT],4
 28856                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 28857                                  Exists:
 28858 00004517 803E[C6A1]00            	cmp	byte [NOWRITE],0
 28859 0000451C 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 28860 0000451E 803E[87A0]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 28861 00004523 741D                    	jz	short NoChecking
 28862 00004525 E85903                  	call	COMPNAME		; source and dest. the same?
 28863 00004528 7518                    	jnz	short NoChecking	; if not, go ahead
 28864 0000452A 803E[6BA1]00            	cmp	byte [SRCISDEV],0
 28865 0000452F 7511                    	jne	short NoChecking	; same name on device ok
 28866                                  
 28867                                  ;	At this point we know in append (would have gotten overwrite error
 28868                                  ;	on first destination create otherwise), and user trying to specify
 28869                                  ;	destination which has been scribbled already (if dest had been named
 28870                                  ;	first, NoWrite would be set).
 28871                                  
 28872 00004531 BA[FC91]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 28873                                  	;invoke	Std_EprintF		;ac022;
 28874                                  	; 26/03/2023
 28875 00004534 E8D00F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 28876                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 28877 00004537 C706[169E]0000          	mov	word [NXTADD],0		; set return
 28878 0000453D FE06[CAA1]              	inc	byte [TERMREAD]		; tell read to give up
 28879                                  Ret60:
 28880 00004541 C3                      	retn
 28881                                  
 28882                                  NoChecking:
 28883 00004542 8B1E[06A1]              	mov	bx,[DESTHAND]		; get handle
 28884 00004546 31C9                    	xor	cx,cx
 28885 00004548 870E[169E]              	xchg	cx,[NXTADD]
 28886 0000454C E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 28887 0000454E FF06[C8A1]              	inc	word [WRITTEN]		; flag that we wrote something
 28888 00004552 803E[C6A1]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 28889 00004557 7514                    	jnz	short SeekEnd
 28890 00004559 31D2                    	xor	dx,dx
 28891 0000455B 1E                      	push	ds
 28892 0000455C 8E1E[F59D]              	mov	ds,[TPA]
 28893 00004560 B440                    	mov	ah,Write ; 40h
 28894 00004562 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28895                                  			; BX = file handle,CX = number of bytes to write,DS:DX -> buffer
 28896 00004564 1F                      	pop	ds
 28897 00004565 BA[E491]                	mov	dx,NOSPACE_PTR
 28898                                  	;jc	short COPERRP		; failure
 28899                                  	; 26/03/2023
 28900                                  	; MSDOS 6.0
 28901 00004568 7326                    	jnc	short NoChecking2
 28902 0000456A E951FF                  	jmp	Xa_Set_Error
 28903                                  
 28904                                  	; 18/04/2023
 28905                                  	; 26/03/2023
 28906                                  SeekEnd:
 28907 0000456D 31D2                    	xor	dx,dx
 28908 0000456F 87D1                    	xchg	dx,cx
 28909                                  	;mov	ax,(LSEEK shl 8) or 1
 28910 00004571 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 28911 00004574 CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28912                                  				; AL = method: offset from present location
 28913                                  
 28914                                  	; 26/03/2023
 28915                                  	; MSDOS 6.0
 28916                                  
 28917                                  ;	Save the file pointer in DX:AX to restore the file
 28918                                  ;	with in case the copy should fail.
 28919                                  
 28920 00004576 A3[D2A1]                	mov	[OFilePtr_Lo],ax
 28921 00004579 8916[D4A1]              	mov	[OFilePtr_Hi],dx
 28922                                  
 28923                                  	; 26/03/2023
 28924                                  	; MSDOS 3.3  MSDOS 6.0
 28925                                  
 28926 0000457D 803E[049E]00            	cmp	byte [RDEOF],0
 28927 00004582 740B                    	jz	short Retz60
 28928                                  
 28929                                  ;	^Z has been read - we must set the file size to the current
 28930                                  ;	file pointer location
 28931                                  
 28932 00004584 B440                    	mov	ah,Write ; 40h
 28933 00004586 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28934                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28935                                  
 28936                                  	; 26/03/2023
 28937                                  	; MSDOS 6.0
 28938 00004588 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 28939                                  
 28940                                  ;	Make note that ^Z was removed, in case the
 28941                                  ;	copy should fail and we need to restore the file.
 28942                                  
 28943 0000458A C606[D6A1]1A            	mov	byte [OCtrlZ],1Ah
 28944                                  Retz60:
 28945 0000458F C3                      	retn
 28946                                  
 28947                                  NoChecking2:
 28948 00004590 29C1                    	sub	cx,ax
 28949 00004592 74AD                    	jz	short Ret60		; wrote all supposed to
 28950                                  	; 18/04/2023
 28951 00004594 F606[08A1]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 28952                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 28953 00004599 7414                    	jz	short COPYERR		; is a file, error
 28954 0000459B F606[08A1]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 28955                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 28956 000045A0 750A                    	jnz	short DevWrtErr	; is a raw device, error
 28957 000045A2 803E[C5A1]00            	cmp	byte [INEXACT],0
 28958 000045A7 7598                    	jnz	short Ret60		; inexact so ok
 28959 000045A9 49                      	dec	cx
 28960                                  ;Retz60:
 28961 000045AA 7495                    	jz	short Ret60		; wrote one byte less (the ^z)
 28962                                  
 28963                                  DevWrtErr:
 28964 000045AC BA[6793]                	mov	dx,DEVWMES_PTR
 28965                                  	; 26/03/2023
 28966                                  COPYERR:
 28967                                  	;invoke	Std_EPrintF		;AC022;
 28968 000045AF E8550F                  	call	std_eprintf  ; MSDOS 6.0
 28969                                  	;call	STD_PRINTF   ; MSDOS 3.3
 28970                                  CopErrP:
 28971 000045B2 FE06[119E]              	inc	byte [DestClosed]
 28972 000045B6 803E[109E]00            	cmp	byte [CFLAG],0
 28973 000045BB 7448                    	jz	short EndCopyJ		; never actually got it open
 28974 000045BD 8B1E[06A1]              	mov	bx,[DESTHAND]
 28975 000045C1 83FB00                  	cmp	bx,0
 28976 000045C4 7E33                    	jle	short NoClose
 28977                                  
 28978                                  ;	Check to see if we should save part of the destination file.
 28979                                  
 28980                                  	; 26/03/2023
 28981                                  	; MSDOS 6.0
 28982 000045C6 8B0E[D4A1]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 28983 000045CA 8B16[D2A1]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 28984                                  			
 28985 000045CE 89C8                    	mov	ax,cx
 28986 000045D0 09D0                    	or	ax,dx
 28987 000045D2 7421                    	jz	short ceClose		; null file ptr means nothing to save
 28988                                  
 28989                                  ;	Destination was also the first source. Do the best we can to
 28990                                  ;	restore it. Truncate it back to the size we took from it (which
 28991                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 28992                                  ;	file). If a Ctrl-Z was originally read, put it back.
 28993                                  
 28994 000045D4 B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 28995 000045D7 CD21                    	int	21h
 28996                                  
 28997 000045D9 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 28998 000045DB B440                    	mov	ah,Write ; 40h
 28999 000045DD CD21                    	int	21h			; truncate file
 29000                                  
 29001 000045DF 803E[D6A1]00            	cmp	byte [OCtrlZ],0
 29002 000045E4 7408                    	je	short ceClose0		; no ctrl-z removed from original
 29003 000045E6 41                      	inc	cx			; CX = # bytes to write = 1
 29004 000045E7 BA[D6A1]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 29005 000045EA B440                    	mov	ah,Write ; 40h
 29006 000045EC CD21                    	int	21h			; write ctrl-z
 29007                                  ceClose0:
 29008 000045EE B43E                    	mov	ah,CLOSE ; 3Eh
 29009 000045F0 CD21                    	int	21h			; close it
 29010                                  ;;	;mov	byte [CFLAG],0
 29011 000045F2 E9ECF8                  	jmp	ENDCOPY			; and go home
 29012                                  
 29013                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29014                                  ceClose:
 29015 000045F5 B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 29016 000045F7 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 29017                                  				; BX = file handle
 29018                                  NoClose:
 29019 000045F9 BA[AFA0]                	mov	dx,DestBuf
 29020 000045FC B441                    	mov	ah,Unlink ; 41h 	; and delete it
 29021 000045FE CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 29022                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 29023 00004600 C606[109E]00            	mov	byte [CFLAG],0
 29024                                  EndCopyJ:
 29025 00004605 E9D9F8                  	jmp	ENDCOPY
 29026                                  
 29027                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 29028 00004608 E9B3FE                  	jmp	Xa_Set_Error
 29029                                  
 29030                                  ;============================================================================
 29031                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 29032                                  ;============================================================================
 29033                                  ; 01/10/2018 - Retro DOS v3.0
 29034                                  
 29035                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 29036                                  
 29037                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29038                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 29039                                  
 29040                                  ; =============== S U B	R O U T	I N E =======================================
 29041                                  
 29042                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 29043                                  ;
 29044                                  ;	Given switch vector in AX,
 29045                                  ;	  Set Ascii flag if /a is set
 29046                                  ;	  Clear Ascii flag if /b is set
 29047                                  ;	  Binary set if /b specified
 29048                                  ;	  Leave Ascii unchanged if neither or both are set
 29049                                  ; 	Also sets Inexact if Ascii is ever set. 
 29050                                  ;	AL = Ascii on exit, flags set
 29051                                  
 29052                                  	; 26/03/2023
 29053                                  SETASC:
 29054                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 29055 0000460B 240C                    	and	al,0Ch ; 4+8
 29056 0000460D 7A10                    	jpe	short LOADSW	; even parity - both or neither
 29057 0000460F 50                      	push	ax
 29058                                  	;and	al,SWITCHB  ; 8
 29059 00004610 2408                    	and	al,8
 29060 00004612 A2[C7A1]                	mov	[BINARY],al
 29061 00004615 58                      	pop	ax
 29062                                  	;and	al,SWITCHA
 29063 00004616 2404                    	and	al,4	
 29064 00004618 A2[CBA1]                	mov	[ASCII],al
 29065 0000461B 0806[C5A1]              	or	[INEXACT],al
 29066                                  LOADSW:
 29067 0000461F A0[CBA1]                	mov	al,[ASCII]
 29068 00004622 08C0                    	or	al,al
 29069 00004624 C3                      	retn
 29070                                  
 29071                                  ; =============== S U B	R O U T	I N E =======================================
 29072                                  
 29073                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29074                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 29075                                  BUILDDEST:
 29076 00004625 803E[AAA0]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 29077 0000462A 750C                    	jnz	short KNOWABOUTDEST	; figuring already done
 29078 0000462C BF[D59C]                	mov	di,USERDIR1
 29079 0000462F BD[AAA0]                	mov	bp,DestVars
 29080 00004632 E8E000                  	call	BUILDPATH
 29081 00004635 E899E3                  	call	RestUDir1
 29082                                  
 29083                                  ;	We now know all about the destination
 29084                                  
 29085                                  KNOWABOUTDEST:
 29086 00004638 30C0                    	xor	al,al
 29087 0000463A 8606[09A1]              	xchg	al,[FIRSTDEST]
 29088 0000463E 08C0                    	or	al,al
 29089 00004640 7503                    	jnz	short FIRSTDST
 29090 00004642 E98D00                  	jmp	NOFIRSTDEST
 29091                                  
 29092                                  FIRSTDST:
 29093                                  ;	Create an fcb of the original dest.
 29094                                  
 29095 00004645 8B36[ACA0]              	mov	si,[DestTail]
 29096 00004649 BF[E79F]                	mov	di,DestFcb
 29097 0000464C B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 29098 0000464F CD21                    	int	21h		; DOS -	PARSE FILENAME
 29099                                  				; DS:SI	-> string to parse
 29100                                  				; ES:DI	-> buffer to fill with unopened	FCB
 29101                                  				; AL = bit mask	to control parsing
 29102 00004651 803C00                  	cmp	byte [si],0
 29103 00004654 7406                    	jz	short GOODPARSE
 29104                                  
 29105                                  	; 27/03/2023	
 29106                                  	; MSDOS 6.0
 29107                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 29108                                  	
 29109 00004656 BA[EA91]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 29110 00004659 E953FF                  	jmp	COPYERR			;AN052;
 29111                                  GOODPARSE:
 29112 0000465C A1[AFA0]                	mov	ax,[DestBuf]		; AX = possible "d:"
 29113 0000465F 80FC3A                  	cmp	ah,':'
 29114 00004662 7402                    	jz	short DRVSPEC4
 29115 00004664 B040                    	mov	al,'@'  ; 40h
 29116                                  DRVSPEC4:
 29117                                  ;	AX = "d:" for following FCB drive computation
 29118                                  
 29119 00004666 8A0E[CBA1]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 29120 0000466A 0C20                    	or	al,20h
 29121 0000466C 2C60                    	sub	al,60h
 29122 0000466E A2[E79F]                	mov	[DestFcb],al		; store drive # in FCB
 29123                                  
 29124                                  ;*	Figure out what copy mode we're in.
 29125                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 29126                                  ;	+n stands for additional sources delimited by +'s.
 29127                                  ;
 29128                                  ;	copy a b	not concatenating
 29129                                  ;	copy a *	not concatenating
 29130                                  ;	copy * a	concatenating
 29131                                  ;	copy * *	not concatenating
 29132                                  ;	copy a+n b	concatenating
 29133                                  ;	copy *+n a	concatenating
 29134                                  ;	copy *+n *	concatenating, Mel Hallerman style
 29135                                  
 29136                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 29137                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 29138                                  
 29139 00004671 A0[AEA0]                	mov	al,[DestInfo]		; AL = destination CParse flags
 29140 00004674 8A26[11A1]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 29141 00004678 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 29142 0000467B 08C0                    	or	al,al
 29143 0000467D 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 29144                                  
 29145                                  ;	Destination is wildcarded.
 29146                                  	
 29147 0000467F 38E0                    	cmp	al,ah
 29148 00004681 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 29149                                  
 29150                                  ;	Source and destination are both wildcarded.
 29151                                  
 29152 00004683 803E[CCA1]00            	cmp	byte [PLUS],0
 29153 00004688 7408                    	jz	short NOTMELCOPY	; no +'s in source
 29154                                  
 29155                                  ;	Source and destination are wildcarded, and source includes +'s.
 29156                                  ;	It's Mel Hallorman copy time.
 29157                                  
 29158 0000468A FE06[0AA1]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 29159 0000468E 30C0                    	xor	al,al
 29160 00004690 EB06                    	jmp	short SETCONC
 29161                                  
 29162                                  NOTMELCOPY:
 29163 00004692 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 29164 00004694 20E0                    	and	al,ah
 29165 00004696 D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 29166                                  					;   (implies concatenation)
 29167                                  SETCONC:
 29168 00004698 0A06[CCA1]              	or	al,[PLUS]		; "+" always infers concatenation
 29169                                  
 29170                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 29171                                  
 29172 0000469C A2[069E]                	mov	[Concat],al
 29173 0000469F D0E0                    	shl	al,1
 29174 000046A1 D0E0                    	shl	al,1
 29175 000046A3 A2[C5A1]                	mov	[INEXACT],al		; concatenation -> inexact copy
 29176 000046A6 803E[C7A1]00            	cmp	byte [BINARY],0
 29177 000046AB 7525                    	jne	short NOFIRSTDEST 	; explicit binary copy
 29178                                  
 29179                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 29180                                  	; MSDOS 6.0 (MSDOS 5.0)
 29181                                  	;mov	[ASCII],al		; otherwise, concatenate in ascii mode
 29182                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:48FAh
 29183 000046AD 0806[CBA1]              	or	[ASCII],al
 29184                                  
 29185 000046B1 08C9                    	or	cl,cl
 29186 000046B3 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly
 29187 000046B5 08C0                    	or	al,al
 29188 000046B7 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 29189                                  
 29190                                  ;	At this point there may already be binary read data in the read
 29191                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 29192                                  ;	amount of data in the buffer correctly.
 29193                                  
 29194 000046B9 8B0E[169E]              	mov	cx,[NXTADD]
 29195 000046BD E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 29196 000046BF B01A                    	mov	al,1Ah
 29197 000046C1 06                      	push	es
 29198 000046C2 31FF                    	xor	di,di
 29199 000046C4 8E06[F59D]              	mov	es,[TPA]
 29200 000046C8 F2AE                    	repne	scasb			; scan for EOF
 29201 000046CA 07                      	pop	es
 29202 000046CB 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 29203 000046CD 4F                      	dec	di			; point at ^z
 29204 000046CE 893E[169E]              	mov	[NXTADD],di		; new buffer length
 29205                                  
 29206                                  NOFIRSTDEST:
 29207 000046D2 BB[2BA0]                	mov	bx,DIRBUF+1		; Source of replacement chars
 29208 000046D5 803E[069E]00            	cmp	byte [Concat],0
 29209 000046DA 7403                    	jz	short GOTCHRSRC		; Not a concat
 29210 000046DC BB[71A0]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 29211                                  GOTCHRSRC:
 29212 000046DF BE[E89F]                	mov	si,DestFcb+1		; Original dest name
 29213 000046E2 8B3E[ACA0]              	mov	di,[DestTail]		; Where to put result
 29214                                  
 29215                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 29216                                  
 29217                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29218                                  BUILDNAME:
 29219 000046E6 B90800                  	mov	cx,8
 29220                                  BUILDMAIN:
 29221 000046E9 AC                      	lodsb
 29222 000046EA 3C3F                    	cmp	al,'?'
 29223 000046EC 7502                    	jne	short NOTAMBIG
 29224 000046EE 8A07                    	mov	al,[bx]
 29225                                  NOTAMBIG:
 29226 000046F0 3C20                    	cmp	al,' '
 29227 000046F2 7401                    	je	short NOSTORE
 29228 000046F4 AA                      	stosb
 29229                                  NOSTORE:
 29230 000046F5 43                      	inc	bx
 29231 000046F6 E2F1                    	loop	BUILDMAIN
 29232 000046F8 B103                    	mov	cl,3
 29233                                  	;mov	al,' ' ; 20h
 29234                                  	;cmp	[si],al
 29235                                  	; 27/03/2023
 29236 000046FA 803C20                  	cmp	byte [si],20h ; ' '
 29237 000046FD 7412                    	je	short ENDDEST		; No extension
 29238                                  	;mov	al,[DOT_CHR]
 29239                                  	; 27/03/2023
 29240 000046FF B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 29241 00004701 AA                      	stosb
 29242                                  BUILDEXT:
 29243 00004702 AC                      	lodsb
 29244 00004703 3C3F                    	cmp	al,'?'
 29245 00004705 7502                    	jne	short NOTAMBIGE
 29246 00004707 8A07                    	mov	al,[bx]
 29247                                  NOTAMBIGE:
 29248 00004709 3C20                    	cmp	al,' '
 29249 0000470B 7401                    	je	short NOSTOREE
 29250 0000470D AA                      	stosb
 29251                                  NOSTOREE:
 29252 0000470E 43                      	inc	bx
 29253 0000470F E2F1                    	loop	BUILDEXT
 29254                                  ENDDEST:
 29255 00004711 30C0                    	xor	al,al
 29256 00004713 AA                      	stosb				; NUL terminate
 29257 00004714 C3                      	retn
 29258                                  
 29259                                  ; =============== S U B	R O U T	I N E =======================================
 29260                                  
 29261                                  	; 28/03/2023
 29262                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29263                                  	;
 29264                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29265                                  BUILDPATH:
 29266 00004715 F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 29267 00004719 7543                    	jnz	short NOTPFILE		; If ambig don't bother with open
 29268 0000471B 89EA                    	mov	dx,bp			; Set DX to spec
 29269 0000471D 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 29270                                  
 29271                                  	; 27/03/2023
 29272                                  	; MSDOS 6.0
 29273 00004720 57                      	push	di			;AN000;
 29274 00004721 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 29275                                  	;mov	bx,deny_none|read_open_mode
 29276 00004724 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 29277 00004727 31C9                    	xor	cx,cx			;AN000; no special files
 29278 00004729 89D6                    	mov	si,dx			;AN030; get file name offset
 29279                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 29280 0000472B BA0101                  	mov	dx,101h
 29281 0000472E CD21                    	INT	21h
 29282 00004730 5F                      	pop	di			;AN000;
 29283 00004731 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 29284 00004733 E80CDB                  	call	get_ext_error_number	;AN022; get the extended error
 29285                                  	;cmp	ax,2
 29286 00004736 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 29287 00004739 7423                    	jz	short NOTPFILE		;AN022;
 29288                                  	;cmp	ax,3
 29289 0000473B 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 29290 0000473E 741E                    	jz	short NOTPFILE		;AN022;
 29291                                  	;cmp	ax,5
 29292 00004740 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 29293 00004743 7419                    	jz	short NOTPFILE		;AN022;
 29294 00004745 E93DD8                  	jmp	extend_setup		;AN022; exit with error
 29295                                  
 29296                                  	; 27/03/2023
 29297                                  	; MSDOS 3.3
 29298                                  	;mov	ax,OPEN*256 ; 3D00h
 29299                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 29300                                  	;			; DS:DX	-> ASCIZ filename
 29301                                  	;			; AL = access mode
 29302                                  	;			; 0 - read
 29303                                  	;jc	short NOTPFILE
 29304                                  
 29305                                  PURE_FILE:
 29306 00004748 89C3                    	mov	bx,ax
 29307 0000474A B80044                  	mov	ax,IOCTL*256 ; 4400h
 29308 0000474D CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 29309                                  				; BX = file or device handle
 29310 0000474F B43E                    	mov	ah,CLOSE ;3Eh
 29311 00004751 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 29312                                  				; BX = file handle
 29313                                  	; 18/04/2023
 29314 00004753 F6C280                  	test	dl,80h
 29315                                  	;test	dl,devid_ISDEV ; test dl,80h
 29316 00004756 7553                    	jnz	short ISADEV
 29317 00004758 F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 29318 0000475C 744D                    	jz	short ISADEV
 29319                                  NOTPFILE:
 29320 0000475E 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 29321                                  	
 29322                                  	; 27/03/2023
 29323                                  	; MSDOS 6.0
 29324 00004761 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 29325 00004764 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 29326                                  
 29327 00004766 80FE3A                  	cmp	dh,':'
 29328 00004769 7402                    	je	short DRVSPEC5
 29329                                  SET_DRIVE_SPEC:
 29330 0000476B B240                    	mov	dl,'@' ; 40h
 29331                                  DRVSPEC5:
 29332 0000476D 80CA20                  	or	dl,20h
 29333 00004770 80EA60                  	sub	dl,60h		; A = 1
 29334 00004773 E888E3                  	call	SAVUDIR1
 29335                                  	
 29336                                  	; 27/03/2023
 29337                                  	; MSDOS 6.0
 29338 00004776 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 29339 00004778 E8C7DA                  	call	get_ext_error_number	;AN022; get the extended error
 29340 0000477B E907D8                  	jmp	extend_setup		;AN022; exit with error
 29341                                  
 29342                                  CURDIR_OK:
 29343 0000477E 89EA                    	mov	dx,bp
 29344                                  	;add	dx,5
 29345 00004780 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 29346                                  	;mov	bh,[bp+4]
 29347 00004783 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 29348 00004786 80E706                  	and	bh,6
 29349 00004789 80FF06                  	cmp	bh,6			; Ambig and path ?
 29350 0000478C 7518                    	jne	short CHECKAMB		; jmp if no
 29351                                  	;mov	si,[bp+2]
 29352 0000478E 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 29353 00004791 B33A                    	mov	bl,':'
 29354 00004793 385CFE                  	cmp	[si-2],bl
 29355 00004796 7506                    	jne	short KNOWNOTSPEC
 29356                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 29357                                  					; Know is d:/file
 29358                                  	;mov	byte [bp+0],2
 29359 00004798 C6460002                	mov	byte [bp],2
 29360 0000479C EB05                    	jmp	short DOPCDJ
 29361                                  KNOWNOTSPEC:
 29362                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 29363                                  					; Know is path/file
 29364                                  	;mov	byte [bp+0],1
 29365 0000479E C6460001                	mov	byte [bp],1
 29366 000047A2 4E                      	dec	si
 29367                                  DOPCDJ:
 29368 000047A3 E98300                  	jmp	DOPCD
 29369                                  CHECKAMB:
 29370 000047A6 80FF02                  	cmp	bh,2
 29371 000047A9 7505                    	jnz	short CHECKCD
 29372                                  ISSIMPFILE:
 29373                                  ISADEV:
 29374                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 29375                                  	;mov	byte [bp+0],0
 29376 000047AB C6460000                	mov	byte [bp],0
 29377 000047AF C3                      	retn
 29378                                  CHECKCD:
 29379 000047B0 E87EEA                  	call	SetRest1
 29380 000047B3 B43B                    	mov	ah,CHDir ; 3Bh
 29381 000047B5 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 29382                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 29383 000047B7 7239                    	jb	short NOTPDIR
 29384 000047B9 89D7                    	mov	di,dx
 29385 000047BB 31C0                    	xor	ax,ax
 29386 000047BD 89C1                    	mov	cx,ax
 29387 000047BF 49                      	dec	cx
 29388                                  	; 14/06/2023
 29389                                  	;repne	scasb	 ; MSDOS 3.3
 29390                                  
 29391                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29392                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 29393                                  	; MSDOS 6.0
 29394                                  Kloop:					;AN000;  3/3/KK
 29395 000047C0 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 29396 000047C3 47                      	inc	di			;AN000;  3/3/KK
 29397 000047C4 08C0                    	or	al,al			;AN000;  3/3/KK
 29398 000047C6 740C                    	jz	short DONE		;AN000;  3/3/KK
 29399 000047C8 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 29400 000047CA E842E1                  	call	testkanj		;AN000;  3/3/KK
 29401 000047CD 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 29402 000047CF 47                      	inc	di			;AN000;  3/3/KK
 29403 000047D0 FEC4                    	inc	ah			;AN000;  3/3/KK
 29404 000047D2 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 29405                                  DONE:
 29406 000047D4 4F                      	dec	di
 29407 000047D5 A0[F89D]                	mov	al,[DIRCHAR]
 29408                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 29409                                  	;mov	byte [bp+0],2
 29410 000047D8 C6460002                	mov	byte [bp],2
 29411                                  	; 27/03/2023
 29412                                  	; MSDOS 6.0
 29413 000047DC 08E4                    	or	ah,ah			;AN000; 3/3/KK
 29414 000047DE 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK
 29415                                  					;this is the trailing byte of ECS code
 29416                                  	;
 29417 000047E0 3A45FF                  	cmp	al,[di-1]
 29418 000047E3 7405                    	jz	short GOTSRCSLSH
 29419                                  _STORE_PCHAR:
 29420 000047E5 AA                      	stosb
 29421                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 29422                                  	;mov	byte [bp+0],1
 29423 000047E6 C6460001                	mov	byte [bp],1
 29424                                  GOTSRCSLSH:
 29425                                  	;or	byte [bp+4],6
 29426 000047EA 804E0406                	or 	byte [bp+VARSTRUC.INFO],6
 29427 000047EE E87400                  	call	SETSTARS
 29428                                  NOTPDIR_RETN:
 29429 000047F1 C3                      	retn
 29430                                  
 29431                                  	; 28/03/2023
 29432                                  NOTPDIR:
 29433                                  	; MSDOS 6.0
 29434 000047F2 E84DDA                  	call	get_ext_error_number	;AN022; get the extended error
 29435                                  	;cmp	ax,3
 29436 000047F5 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 29437 000047F8 7405                    	je	short NOTPDIR_TRY	;AN022;
 29438                                  	;cmp	ax,5
 29439 000047FA 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 29440 000047FD 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 29441                                  NOTPDIR_TRY:
 29442                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29443                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 29444                                  	;mov	byte [bp+0],0
 29445 000047FF C6460000                	mov	byte [bp],0
 29446                                  	;mov	bh,[bp+4]
 29447 00004803 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 29448 00004806 F6C704                  	test	bh,4
 29449 00004809 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 29450                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 29451                                  	;mov	byte [bp+0],2
 29452 0000480B C6460002                	mov	byte [bp],2
 29453                                  	;mov	si,[bp+2]
 29454 0000480F 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 29455 00004812 803C00                  	cmp	byte [si],0
 29456 00004815 744B                    	je	short BADCDERRJ2	; Trailing '/'
 29457                                  	;mov	bl,[DOT_CHR]
 29458                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 29459                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 29460 00004817 B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 29461 00004819 381C                    	cmp	[si],bl
 29462 0000481B 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 29463 0000481D B33A                    	mov	bl,':'  ; 3Ah
 29464 0000481F 385CFE                  	cmp	[si-2],bl
 29465 00004822 7405                    	je	short DOPCD		; Know d:/file
 29466                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 
 29467                                  					; Know path/file
 29468                                  	;mov	byte [bp+0],1
 29469 00004824 C6460001                	mov	byte [bp],1
 29470 00004828 4E                      	dec	si			; Point at last '/'
 29471                                  DOPCD:
 29472 00004829 30DB                    	xor	bl,bl
 29473 0000482B 861C                    	xchg	bl,[si]			; Stick in a NUL
 29474 0000482D E801EA                  	call	SetRest1
 29475                                  
 29476                                  	; 28/03/2023
 29477                                  	; MSDOS 6.0 (& MSDOS 5.0)
 29478 00004830 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 29479 00004832 771B                    	ja	short LookBack		;AN000;  3/3/KK
 29480 00004834 56                      	push	si			;AN000;  3/3/KK
 29481 00004835 51                      	push	cx			;AN000;  3/3/KK
 29482 00004836 89F1                    	mov	cx,si			;AN000;  3/3/KK
 29483 00004838 89D6                    	mov	si,dx			;AN000;  3/3/KK
 29484                                  Kloop2: 				;AN000;  3/3/KK
 29485 0000483A AC                      	lodsb				;AN000;  3/3/KK
 29486 0000483B E8D1E0                  	call	testkanj		;AN000;  3/3/KK
 29487 0000483E 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 29488 00004840 AC                      	lodsb				;AN000;  3/3/KK
 29489 00004841 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 29490 00004843 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 29491 00004845 59                      	pop	cx			;AN000;  3/3/KK
 29492 00004846 5E                      	pop	si			;AN000;  3/3/KK
 29493 00004847 EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 29494                                  					;		 trailing path sep
 29495                                  NotKanj4:				;AN000;  3/3/KK
 29496 00004849 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 29497 0000484B 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 29498 0000484D 59                      	pop	cx			;AN000;  3/3/KK
 29499 0000484E 5E                      	pop	si			;AN000;  3/3/KK
 29500                                  LookBack:				;AN000;  3/3/KK
 29501                                  	; 28/03/2023
 29502                                  	; MSDOS 3.3 & MSDOS 6.0
 29503 0000484F 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 29504 00004852 740E                    	je	short BADCDERRJ2
 29505                                  DoCdr:
 29506 00004854 B43B                    	mov	ah,CHDir ; 3Bh
 29507 00004856 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 29508                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 29509 00004858 861C                    	xchg	bl,[si]
 29510 0000485A 7395                    	jnc	short NOTPDIR_RETN
 29511                                  	
 29512                                  	; 28/03/2023
 29513                                  	; MSDOS 3.3
 29514                                  ;BADCDERRJ2:
 29515                                  	;stc
 29516                                  	;jmp	BADCDERR
 29517                                  
 29518                                  	; 28/03/2023
 29519                                  	; MSDOS 6.0 (& MSDOS 5.0)
 29520 0000485C E8E3D9                  	call	get_ext_error_number	;AN022; get the extended error
 29521                                  EXTEND_SETUPJ:				;AN022;
 29522 0000485F E923D7                  	jmp	extend_setup		;AN022; go issue the error message
 29523                                  BADCDERRJ2:
 29524 00004862 E91DD7                  	jmp	badpath_err		;AC022; go issue path not found message
 29525                                  
 29526                                  ; =============== S U B	R O U T	I N E =======================================
 29527                                  
 29528                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29529                                  SETSTARS:
 29530                                  	;mov	[bp+2],di
 29531 00004865 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 29532                                  	;add	byte [bp+1],12
 29533 00004868 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 29534                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 29535                                  	; 28/03/2023
 29536                                  	; MSDOS 6.0
 29537 0000486C B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 29538                                  	;mov	ax,'?.' ; dot_qmark
 29539                                  
 29540 0000486F B90800                  	mov	cx,8
 29541 00004872 F3AA                    	rep	stosb
 29542 00004874 86C4                    	xchg	al,ah
 29543 00004876 AA                      	stosb
 29544 00004877 86C4                    	xchg	al,ah
 29545 00004879 B103                    	mov	cl,3
 29546 0000487B F3AA                    	rep	stosb
 29547 0000487D 30C0                    	xor	al,al
 29548 0000487F AA                      	stosb
 29549 00004880 C3                      	retn
 29550                                  
 29551                                  ; =============== S U B	R O U T	I N E =======================================
 29552                                  
 29553                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29554                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29555                                  COMPNAME:
 29556 00004881 BE[AFA0]                	mov	si,DestBuf	; do name translate of target
 29557 00004884 BF[789B]                	mov	di,TRGXNAME	; save for name comparison
 29558 00004887 B460                    	mov	ah,xNameTrans ; 60h
 29559                                  	;mov	ah,60h
 29560 00004889 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 29561                                  			; DS:SI	-> ASCIZ relative path string or directory name
 29562                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 29563 0000488B BE[219B]                	mov	si,SRCXNAME	; get name translate of source
 29564 0000488E BF[789B]                	mov	di,TRGXNAME	; get name translate of target
 29565                                  	;call	STRCOMP
 29566                                  	;retn
 29567                                  	; 28/03/2023
 29568 00004891 E9DCE2                  	jmp	STRCOMP
 29569                                  
 29570                                  ;============================================================================
 29571                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 29572                                  ;============================================================================
 29573                                  ; 30/09/2018 - Retro DOS v3.0
 29574                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29575                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29576                                  
 29577                                  ;-----------------------------------------------------------------------;
 29578                                  ; ENTRY:								;
 29579                                  ;	DS:SI	Points input buffer					;
 29580                                  ;	ES:DI	Points to the token buffer				;
 29581                                  ;	BL	Special delimiter for this call 			;
 29582                                  ;		    Always checked last 				;
 29583                                  ;		    set it to space if there is no special delimiter	;
 29584                                  ; EXIT: 								;
 29585                                  ;	DS:SI	Points to next char in the input buffer 		;
 29586                                  ;	ES:DI	Points to the token buffer				;
 29587                                  ;	[STARTEL] Points to start of last element of path in token	;
 29588                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 29589                                  ;	CX	Character count 					;
 29590                                  ;	BH	Condition Code						;
 29591                                  ;			Bit 1H of BH set if switch character		;
 29592                                  ;				Token buffer contains char after	;
 29593                                  ;				switch character			;
 29594                                  ;				BP has switch bits set (ORing only)	;
 29595                                  ;			Bit 2H of BH set if ? or * in token		;
 29596                                  ;				if * found element ? filled		;
 29597                                  ;			Bit 4H of BH set if path sep in token		;
 29598                                  ;			Bit 80H of BH set if the special delimiter	;
 29599                                  ;			   was skipped at the start of this token	;
 29600                                  ;		Token buffer always starts d: for non switch tokens	;
 29601                                  ;	CARRY SET							;
 29602                                  ;	    if CR on input						;
 29603                                  ;		token buffer not altered				;
 29604                                  ;									;
 29605                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 29606                                  ; MODIFIES:								;
 29607                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 29608                                  ;									;
 29609                                  ;-----------------------------------------------------------------------;
 29610                                  
 29611                                  ; Modifications to cparse: recognition of right and left parentheses
 29612                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 29613                                  ;
 29614                                  ; Both modifications were installed in the course of adding a coherent
 29615                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 29616                                  ; structure for command-line arguments. This parser relies on cparse to
 29617                                  ; recognize individual tokens.
 29618                                  ;
 29619                                  ; To process for-loops correctly, parentheses must therefore be
 29620                                  ; recognized as tokens. The upper-case conversion code was removed so
 29621                                  ; that commands (such as for and echo) would be able to use the "original"
 29622                                  ; text of the command line.
 29623                                  ;
 29624                                  ; Note also the modification to prevent the automatic conversion of colons
 29625                                  ; into spaces WITHIN THE SOURCE TEXT!
 29626                                  ;
 29627                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 29628                                  ; on the command line.
 29629                                  ;
 29630                                  ; Alan L, OS/MSDOS				    14 August 1983
 29631                                  
 29632                                  ; ---------------------------------------------------------------------------
 29633                                  
 29634                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 29635                                  
 29636                                  ;FSWITCH	EQU	8000h
 29637                                  ;FBADSWITCH	EQU	4000h
 29638                                  
 29639                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 29640                                  
 29641                                  ; =============== S U B	R O U T	I N E =======================================
 29642                                  		
 29643                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29644                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 29645                                  
 29646                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29647                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 4AE3h
 29648                                  cparse:
 29649 00004894 31C0                    	xor	ax,ax
 29650 00004896 893E[E7A1]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 29651 0000489A A2[EAA1]                	mov	[ELPOS],al		; Start in 8 char prefix
 29652                                  	; MSDOS 3.3
 29653                                  	;mov	[SOURCE],al		
 29654                                  	; MSDOS 6.0
 29655 0000489D A2[EBA1]                	mov	[SKPDEL], al		; No skip delimiter yet
 29656 000048A0 88C7                    	mov	bh,al			; Init nothing
 29657 000048A2 9C                      	pushf				; save flags
 29658 000048A3 57                      	push	di			; save the token buffer addrss
 29659 000048A4 31C9                    	xor	cx,cx			; no chars in token buffer
 29660 000048A6 880E[86A0]              	mov	[comma],cl		; reset comma flag
 29661                                  moredelim:
 29662 000048AA AC                      	lodsb
 29663 000048AB E888E2                  	call	DELIM
 29664 000048AE 751D                    	jnz	short SCANCDONE
 29665 000048B0 3C20                    	cmp	al,' '
 29666 000048B2 74F6                    	jz	short moredelim
 29667 000048B4 3C09                    	cmp	al,9
 29668 000048B6 74F2                    	jz	short moredelim
 29669                                  	;xchg	al,[SOURCE]
 29670                                  	; 28/03/2023
 29671 000048B8 8606[EBA1]              	xchg	al,[SKPDEL]
 29672 000048BC 08C0                    	or	al,al
 29673 000048BE 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 29674 000048C0 F6C780                  	test	bh,80h			; has a special char been found?
 29675 000048C3 7405                    	jz	short no_comma		; no - just exit
 29676 000048C5 C606[86A0]01            	mov	byte [comma],1		; set comma flag
 29677                                  no_comma:
 29678 000048CA E92A01                  	jmp	x_done			; Nul argument
 29679                                  
 29680                                  SCANCDONE:
 29681                                  	; 28/03/2023
 29682                                  	; MSDOS 6.0
 29683                                  	; -----------------------------------
 29684                                  	; Mod to avoid upper-case conversion.
 29685                                  	; -----------------------------------
 29686                                  	; MSDOS 3.3
 29687                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 29688                                  	;jnz	short cpcont1		; 3/3/KK
 29689                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 29690                                  cpcont1:
 29691                                  	; -----------------------------------
 29692                                  	; 28/03/2023
 29693 000048CD 38D8                    	cmp	al,bl			; Special delimiter?
 29694 000048CF 7505                    	jne	short nospec
 29695 000048D1 80CF80                  	or	bh,80h
 29696 000048D4 EBD4                    	jmp	short moredelim
 29697                                  nospec:
 29698 000048D6 3C0D                    	cmp	al,0Dh			; a CR?
 29699 000048D8 7503                    	jne	short ncperror
 29700 000048DA E91501                  	jmp	cperror
 29701                                  ncperror:
 29702 000048DD 3A06[F79D]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 29703 000048E1 7503                    	jne	short na_switch		; yes, process...
 29704 000048E3 E91401                  	jmp	a_switch
 29705                                  na_switch:
 29706 000048E6 B23A                    	mov	dl,':'
 29707 000048E8 3814                    	cmp	[si],dl
 29708 000048EA 751D                    	jne	short anum_chard	; Drive not specified
 29709                                  	; 28/03/2023
 29710                                  	; MSDOS 6.0 
 29711 000048EC 803E[95A0]01            	cmp	byte [cpyflag],1	; 3/3/KK
 29712 000048F1 7503                    	jne	short cpcont2		; 3/3/KK
 29713 000048F3 E843E0                  	call	UPCONV			; 3/3/KK
 29714                                  cpcont2:
 29715 000048F6 E85901                  	call	move_char
 29716 000048F9 AC                      	lodsb				; Get the ':'
 29717 000048FA E85501                  	call	move_char
 29718 000048FD 893E[E7A1]              	mov	[STARTEL],di
 29719 00004901 C606[E9A1]00            	mov	byte [ELCNT],0
 29720 00004906 E9B300                  	jmp	anum_test
 29721                                  anum_chard:
 29722 00004909 893E[E7A1]              	mov	[STARTEL],di
 29723 0000490D C606[E9A1]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 29724 00004912 803E[95A0]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 29725 00004917 751D                    	jnz	short anum_char		; No, don't add drive spec.
 29726 00004919 E8A0E2                  	call	pathchrcmp		; Starts with a pathchar?
 29727 0000491C 7518                    	jnz	short anum_char		; no
 29728 0000491E 50                      	push	ax
 29729 0000491F A0[059E]                	mov	al,[CURDRV]		; Insert drive spec
 29730                                  	;add	al,[CAPITAL_A]
 29731                                  	; 28/03/2023
 29732                                  	; MSDOS 6.0
 29733 00004922 0441                    	add	al,'A' ; 41h
 29734 00004924 E82B01                  	call	move_char
 29735 00004927 B03A                    	mov	al,':' ; 3Ah
 29736 00004929 E82601                  	call	move_char
 29737 0000492C 58                      	pop	ax
 29738 0000492D 893E[E7A1]              	mov	[STARTEL],di
 29739 00004931 C606[E9A1]00            	mov	byte [ELCNT],0
 29740                                  anum_char:
 29741                                  	; 28/03/2023
 29742                                  	; MSDOS 6.0
 29743 00004936 E8D6DF                  	call	testkanj		;AC048			
 29744 00004939 7406                    	jz	short NOTKANJ		;AC048;
 29745 0000493B E81401                  	call	move_char
 29746 0000493E AC                      	lodsb
 29747 0000493F EB78                    	jmp	short notspecial
 29748                                  
 29749                                  NOTKANJ:				;AN048; If not kanji
 29750 00004941 803E[95A0]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 29751 00004946 7503                    	jne	short TESTDOT 		;AN048;
 29752 00004948 E8EEDF                  	call	UPCONV			;AN048; upper case the char
 29753                                  TESTDOT:
 29754                                  	; 28/03/2023
 29755                                  	;cmp	al,dot_chr  ; 2Eh
 29756 0000494B 3C2E                    	cmp	al,'.'
 29757 0000494D 7509                    	jne	short testquest
 29758 0000494F FE06[EAA1]              	inc	byte [ELPOS] 		; flag in extension
 29759 00004953 C606[E9A1]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 29760                                  testquest:
 29761 00004958 3C3F                    	cmp	al,'?'  ; 3Fh
 29762 0000495A 7503                    	jnz	short testsplat
 29763 0000495C 80CF02                  	or	bh,2
 29764                                  testsplat:
 29765                                  	;cmp	al,[STAR]
 29766 0000495F 3C2A                    	cmp	al,star	; 2Ah
 29767                                  	; 27/04/2023
 29768                                  	;cmp	al,'*' 
 29769 00004961 7530                    	jne	short testpath
 29770 00004963 80CF02                  	or	bh,2
 29771 00004966 803E[23A2]00            	cmp	byte [expand_star],0
 29772 0000496B 7504                    	jne	short expand_filename
 29773 0000496D EB24                    	jmp	short testpath
 29774                                  
 29775                                  BADPERR2J:
 29776                                  	;jmp	BADPERR2
 29777                                  	; 28/03/2023
 29778                                  	; MSDOS 6.0
 29779 0000496F EB75                    	jmp	short BADPERR2
 29780                                  
 29781                                  expand_filename:
 29782 00004971 B407                    	mov	ah,7
 29783 00004973 803E[EAA1]00            	cmp	byte [ELPOS],0
 29784 00004978 7402                    	jz	short gotelcnt
 29785 0000497A B402                    	mov	ah,2
 29786                                  gotelcnt:
 29787 0000497C B03F                    	mov	al,'?'
 29788 0000497E 2A26[E9A1]              	sub	ah,[ELCNT]
 29789 00004982 72EB                    	jb	short BADPERR2J
 29790 00004984 86E1                    	xchg	ah,cl
 29791 00004986 E309                    	jcxz	testpathx
 29792                                  qmove:
 29793 00004988 86E1                    	xchg	ah,cl
 29794 0000498A E8C500                  	call	move_char
 29795 0000498D 86E1                    	xchg	ah,cl
 29796 0000498F E2F7                    	loop	qmove
 29797                                  testpathx:
 29798 00004991 86E1                    	xchg	ah,cl
 29799                                  testpath:
 29800 00004993 E826E2                  	call	pathchrcmp
 29801 00004996 7521                    	jnz	short notspecial
 29802 00004998 80CF04                  	or	bh,4
 29803 0000499B 803E[23A2]00            	cmp	byte [expand_star],0
 29804 000049A0 7405                    	jz	short no_err_check
 29805 000049A2 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 29806 000049A5 7545                    	jnz	short BADPERR
 29807                                  no_err_check:
 29808 000049A7 893E[E7A1]              	mov	[STARTEL],di	  	; New element
 29809 000049AB FF06[E7A1]              	inc	word [STARTEL]	  	; Point to char after /
 29810 000049AF C606[E9A1]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 29811 000049B4 C606[EAA1]00            	mov	byte [ELPOS],0
 29812                                  notspecial:
 29813 000049B9 E89600                  	call	move_char		; just an alphanum string
 29814                                  anum_test:
 29815 000049BC AC                      	lodsb
 29816                                  
 29817                                  	; 28/03/2023
 29818                                  	; MSDOS 6.0
 29819                                  	; -----------------------------------
 29820                                  	; Mod to avoid upper-case conversion.
 29821                                  	; -----------------------------------
 29822                                  	; MSDOS 3.3
 29823                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 29824                                  	;jnz	short cpcont3		; 3/3/KK
 29825                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 29826                                  cpcont3:
 29827                                  	; -----------------------------------
 29828                                  
 29829 000049BD E876E1                  	call	DELIM
 29830 000049C0 7435                    	jz	short x_done
 29831 000049C2 3C0D                    	cmp	al,0Dh
 29832 000049C4 7431                    	je	short x_done
 29833 000049C6 3A06[F79D]              	cmp	al,[SWITCHAR]
 29834 000049CA 742B                    	je	short x_done
 29835 000049CC 38D8                    	cmp	al,bl
 29836 000049CE 7427                    	je	short x_done
 29837 000049D0 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 29838                                  	; 28/03/2023
 29839                                  	; MSDOS 3.3
 29840                                  	;jnz	short ANUM_CHARJ 
 29841                                  	; MSDOS 6.0
 29842 000049D2 7403                    	je	short FOO15
 29843 000049D4 E95FFF                  	jmp	anum_char
 29844                                  
 29845                                  ; Modification made for parseline.
 29846                                  ; Why would it be necessary to change colons to spaces? In this
 29847                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 29848                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 29849                                  
 29850                                  FOO15:
 29851 000049D7 803E[95A0]02            	cmp	byte [cpyflag],2
 29852 000049DC 7505                    	jnz	short cpcont4
 29853 000049DE E87100                  	call	move_char
 29854 000049E1 EBD9                    	jmp	short anum_test
 29855                                  cpcont4:
 29856 000049E3 46                      	inc	si			; Skip the ':'
 29857 000049E4 EB11                    	jmp	short x_done
 29858                                  
 29859                                  	; 28/03/2023
 29860                                  ;ANUM_CHARJ:
 29861                                  	;jmp	anum_char
 29862                                  
 29863                                  BADPERR2:
 29864 000049E6 BA[E191]                	mov	dx,BADCPMES_PTR
 29865 000049E9 E9B6E4                  	jmp	cerror
 29866                                  
 29867                                  BADPERR:
 29868                                  	; 28/03/2023
 29869                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 29870                                  BADCDERR:
 29871                                  	; MSDOS 6.0
 29872 000049EC BA[0B93]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 29873 000049EF E9B0E4                  	jmp	cerror			;AC022;  message
 29874                                  	
 29875                                  cperror:
 29876 000049F2 4E                      	dec	si			; adjust the pointer
 29877 000049F3 5F                      	pop	di			; retrieve token buffer address
 29878 000049F4 9D                      	popf				; restore flags
 29879 000049F5 F9                      	stc				; set the carry bit
 29880 000049F6 C3                      	retn
 29881                                  
 29882                                  x_done:
 29883 000049F7 4E                      	dec	si			; adjust for next round
 29884                                  
 29885                                  ; Mod to recognize right and left parens as integral tokens.
 29886                                  ;x_done2:
 29887 000049F8 EB51                    	jmp	short out_token
 29888                                  
 29889                                  a_switch:
 29890 000049FA 80CF01                  	or	bh,1			; Indicate switch
 29891                                  	;or	bp,FSWITCH ; 8000h
 29892                                  	; 28/03/2023
 29893 000049FD 81CD0080                	or	bp,8000h
 29894 00004A01 E82AE1                  	call	scanoff
 29895 00004A04 46                      	inc	si
 29896                                  	; 28/03/2023
 29897                                  	; MSDOS 6.0
 29898 00004A05 E807DF                  	call	testkanj		;AN057; See if DBCS lead byte
 29899 00004A08 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 29900 00004A0A E84500                  	call	move_char		;AN057; DBCS - store first byte
 29901 00004A0D AC                      	lodsb				;AN057; get second byte
 29902 00004A0E E84100                  	call	move_char		;AN057; store second byte
 29903                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 29904 00004A11 81CD0040                	or	bp,4000h
 29905 00004A15 EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 29906                                  a_switch_notkanj:			;AN057;
 29907 00004A17 3C0D                    	cmp	al,0Dh
 29908 00004A19 7509                    	jne	short Store_swt
 29909 00004A1B B000                    	mov	al,0
 29910 00004A1D AA                      	stosb
 29911                                  	;or	bp,FBADSWITCH ; 4000h
 29912 00004A1E 81CD0040                	or	bp,4000h
 29913 00004A22 EBCE                    	jmp	short cperror		; Trailing switch character error
 29914                                  					;   BP = fSwitch but no switch
 29915                                  					;   bit is set (unknown switch)
 29916                                  Store_swt:
 29917 00004A24 E82B00                  	call	move_char		; store the character
 29918                                  
 29919                                  ; This upconv call must stay. It is used to identify copy-switches
 29920                                  ; on the command line, and won't store anything into the output buffer.
 29921                                  
 29922                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 29923                                  	; 28/03/2023
 29924 00004A27 E80FDF                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 29925                                  	
 29926 00004A2A 06                      	push	es
 29927 00004A2B 57                      	push	di
 29928 00004A2C 51                      	push	cx
 29929 00004A2D 0E                      	push	cs
 29930 00004A2E 07                      	pop	es
 29931                                  	; 28/03/2023
 29932                                  	; MSDOS 3.3
 29933                                  	;;mov	di,SWITCH_LIST ; "VBAPW"
 29934                                  	; MSDOS 6.0
 29935                                  	;mov	di,switch_list ; "?VBAPW"
 29936                                  	; 14/06/*2023
 29937                                  	; MSDOS 6.22
 29938 00004A2F BF[6097]                	mov	di,switch_list ; "-Y?VBAPW"
 29939                                  
 29940                                  	; MSDOS 3.3
 29941                                  	;mov	cx,SWCOUNT ; 5
 29942                                  	; MSDOS 6.0
 29943                                  	;mov	cx,6  ; SWCOUNT = 6
 29944                                  	; 14/06/2023
 29945                                  	; MSDOS 6.22
 29946 00004A32 B90800                  	mov	cx,8  ; SWCOUNT = 8
 29947                                  
 29948                                  	;or	bp,FBADSWITCH  ; 4000h
 29949 00004A35 81CD0040                	or	bp,4000h
 29950 00004A39 F2AE                    	repne	scasb
 29951 00004A3B 750B                    	jnz	short out_tokenp
 29952                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 29953 00004A3D 81E5FFBF                	and	bp,0BFFFh
 29954 00004A41 B80100                  	mov	ax,1
 29955 00004A44 D3E0                    	shl	ax,cl
 29956 00004A46 09C5                    	or	bp,ax
 29957                                  out_tokenp:
 29958 00004A48 59                      	pop	cx
 29959 00004A49 5F                      	pop	di
 29960 00004A4A 07                      	pop	es
 29961                                  out_token:
 29962 00004A4B B000                    	mov	al,0			; null at the end
 29963 00004A4D AA                      	stosb
 29964 00004A4E 5F                      	pop	di			; restore token buffer pointer
 29965 00004A4F 9D                      	popf
 29966 00004A50 F8                      	clc				; clear carry flag
 29967 00004A51 C3                      	retn
 29968                                  
 29969                                  ; =============== S U B	R O U T	I N E =======================================
 29970                                  
 29971                                  	; 28/03/2023
 29972                                  move_char:
 29973 00004A52 AA                      	stosb				; store char in token buffer
 29974 00004A53 41                      	inc	cx			; increment char count
 29975 00004A54 FE06[E9A1]              	inc	byte [ELCNT]		; increment element count for * substi
 29976 00004A58 C3                      	retn
 29977                                  
 29978                                  ;============================================================================
 29979                                  ; PARSE.ASM, MSDOS 6.0, 1991
 29980                                  ;============================================================================
 29981                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29982                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29983                                  
 29984                                  ; -----------------------------
 29985                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 29986                                  ; -----------------------------
 29987                                  
 29988                                  ;**** Equation field
 29989                                  ;-------- Character code definition
 29990                                  
 29991                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 29992                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 29993                                  $P_Period	   equ	"."             ;AN020;
 29994                                  $P_Slash	   equ	"/"             ;AN020;
 29995                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 29996                                  $P_Comma	   equ	","             ;AN000;
 29997                                  $P_Switch	   equ	"/"             ;AN000;
 29998                                  $P_Keyword	   equ	"="             ;AN000;
 29999                                  $P_Colon	   equ	":"             ;AN000;
 30000                                  $P_Plus 	   equ	"+"             ;AN000;
 30001                                  $P_Minus	   equ	"-"             ;AN000;
 30002                                  $P_Rparen	   equ	")"             ;AN000;
 30003                                  $P_Lparen	   equ	"("             ;AN000;
 30004                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 30005                                  $P_DQuote	   equ	'"'             ;AN000;
 30006                                  $P_NULL 	   equ	0		;AN000;
 30007                                  $P_TAB		   equ	9		;AN000;
 30008                                  $P_CR		   equ	0Dh		;AN000;
 30009                                  $P_LF		   equ	0Ah		;AN000;
 30010                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 30011                                  
 30012                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 30013                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 30014                                  
 30015                                  $P_error_filespec  equ  1
 30016                                  
 30017                                  ;----------------------------------------------------------------------------
 30018                                  ; PARMS LABEL	BYTE
 30019                                  ;	DW	PARMSX
 30020                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 30021                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30022                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 30023                                  ;				; TYPICAL ARE ";", "="
 30024                                  ;				; "," & WHITESPACE ALWAYS
 30025                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30026                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 30027                                  ;----------------------------------------------------------------------------
 30028                                  
 30029                                  struc $P_PARMS_BLK			;AN000;
 30030 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 30031 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 30032 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 30033                                  endstruc 				;AN000;
 30034                                  
 30035                                  $P_Len_PARMS	   equ	4		;AN000;
 30036                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 30037                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 30038                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 30039                                  
 30040                                  ;----------------------------------------------------------------------------
 30041                                  ; PARMSX LABEL	BYTE
 30042                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 30043                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 30044                                  ;	:				; REPEATS maxp-1 TIMES
 30045                                  ;	DB	maxs			; # OF SWITCHES
 30046                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 30047                                  ;	:				; REPEATS maxs-1 TIMES
 30048                                  ;	DB	maxk			; # OF KEYWORD
 30049                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 30050                                  ;	:				; REPEATS maxk-1 TIMES
 30051                                  ;----------------------------------------------------------------------------
 30052                                  
 30053                                  struc $P_PARMSX_BLK			;AN000;
 30054 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 30055 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 30056 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 30057                                  endstruc				;AN000;
 30058                                  
 30059                                  ; 31/03/2023
 30060                                  ;----------------------------------------------------------------------------
 30061                                  ; << Control field definition >>
 30062                                  ;
 30063                                  ;CONTROL   LABEL   BYTE
 30064                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 30065                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 30066                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 30067                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 30068                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 30069                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 30070                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 30071                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 30072                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 30073                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 30074                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 30075                                  ;				; 0002H=REPEATS ALLOWED
 30076                                  ;				; 0001H=OPTIONAL
 30077                                  ;	   DW FUNCTION_FLAGS
 30078                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 30079                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 30080                                  ;				; 0010H=REMOVE ":" AT END
 30081                                  ; (tm10)			; 0020H=colon is not necessary for switch
 30082                                  ;
 30083                                  ;	   DW RESULT		; RESULT BUFFER
 30084                                  ;	   DW VALUES		; VALUE LISTS
 30085                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 30086                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 30087                                  ;	   :
 30088                                  ;
 30089                                  ;Note:
 30090                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 30091                                  ;      DATE bit simalteniously.
 30092                                  ;
 30093                                  ;      The parser examins each bit along with the following priority.
 30094                                  ;
 30095                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 30096                                  ;      FILE SPEC -> SIMPLE STRING.
 30097                                  ;
 30098                                  ;
 30099                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 30100                                  ;      in the result buffer is capitalized.
 30101                                  ;
 30102                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 30103                                  ;
 30104                                  ;
 30105                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 30106                                  ;      switch, for example, '/A', then STRING points to;
 30107                                  ;
 30108                                  ;		DB    1 	; number of following synonyms
 30109                                  ;		DB   '/A',0
 30110                                  ;
 30111                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 30112                                  ;
 30113                                  ;		DB    1 	; number of following synonyms
 30114                                  ;		DB   'CODEPAGE=',0
 30115                                  ;
 30116                                  ;
 30117                                  ;    - "..." must consist of upper case characters only because the parser
 30118                                  ;      performs pattern matching after converting input to upper case (by
 30119                                  ;      using the current country upper case table)
 30120                                  ;
 30121                                  ;
 30122                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 30123                                  ;      example /A and /B, the format will be;
 30124                                  ;
 30125                                  ;		DB    2 	; number of following synonyms
 30126                                  ;		DB    '/A',0
 30127                                  ;		DB    '/B',0
 30128                                  ;----------------------------------------------------------------------------
 30129                                  
 30130                                  ;**** Match_Flags
 30131                                  
 30132                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 30133                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 30134                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 30135                                  $P_Date_S	   equ	1000h		;AN000; Date string
 30136                                  $P_Time_S	   equ	0800h		;AN000; Time string
 30137                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 30138                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 30139                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 30140                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 30141                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 30142                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 30143                                  $P_Optional	   equ	0001h		;AN000; Optional
 30144                                  
 30145                                  ;**** Function flags
 30146                                  
 30147                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 30148                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 30149                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 30150                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 30151                                  
 30152                                  ;-------------------------------- Control block structure
 30153                                  struc $P_CONTROL_BLK
 30154 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 30155 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 30156 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 30157 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 30158 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 30159 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 30160                                  endstruc
 30161                                  
 30162                                  ; 31/03/2023
 30163                                  ;----------------------------------------------------------------------------
 30164                                  ;
 30165                                  ;VALUES LABEL	BYTE
 30166                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 30167                                  ;	+-
 30168                                  ;	| DB	nrng		; NUMBER OF RANGES
 30169                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 30170                                  ;	| +DD	X,Y		; RANGE OF VALUES
 30171                                  ;	|	:
 30172                                  ;	| DB	nnval		; NUMBER OF CHOICES
 30173                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 30174                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 30175                                  ;	|	:
 30176                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 30177                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 30178                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 30179                                  ;	+-	:
 30180                                  ;
 30181                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 30182                                  ;
 30183                                  ;Note:
 30184                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 30185                                  ;      when no choice lists are provided.
 30186                                  ;
 30187                                  ;    - STRING must consist of upper case characters only because the parser
 30188                                  ;      performs pattern matching after converting input to upper case (by
 30189                                  ;      using the current country upper case table)
 30190                                  ;----------------------------------------------------------------------------
 30191                                  
 30192                                  $P_nval_None	equ 0		;AN000; no value list ID
 30193                                  $P_nval_Range	equ 1		;AN000; range list ID
 30194                                  $P_nval_Value	equ 2		;AN000; value list ID
 30195                                  $P_nval_String	equ 3		;AN000; string list ID
 30196                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 30197                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 30198                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 30199                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 30200                                  
 30201                                  struc $P_VAL_LIST
 30202 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 30203 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 30204 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 30205 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 30206 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 30207                                  endstruc
 30208                                  
 30209                                  ; 31/03/2023
 30210                                  ;----------------------------------------------------------------------------
 30211                                  ;
 30212                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 30213                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 30214                                  ;					;	1=NUMBER, 2=LIST INDEX,
 30215                                  ;					;	3=STRING, 4=COMPLEX,
 30216                                  ;					;	5=FILESPEC, 6=DRIVE
 30217                                  ;					;	7=DATE, 8=TIME
 30218                                  ;					;	9=QUOTED STRING
 30219                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 30220                                  ;
 30221                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 30222                                  ;
 30223                                  ;       +-
 30224                                  ;       | DD	n			; VALUE IF NUMBER
 30225                                  ;       | or
 30226                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 30227                                  ;       |				; (ES presents Segment address)
 30228                                  ;       | or
 30229                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 30230                                  ;       | or
 30231                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 30232                                  ;       | or
 30233                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 30234                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 30235                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 30236                                  ;       | or
 30237                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 30238                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 30239                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 30240                                  ;       |	DB HUNDREDTHS ;(0-99)
 30241                                  ;       +-
 30242                                  ;
 30243                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 30244                                  ;      list.
 30245                                  ;
 30246                                  ;      YEAR: If the input value for the year is less than 100, parser
 30247                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 30248                                  ;	     the year value, he returns 1987.
 30249                                  ;----------------------------------------------------------------------------
 30250                                  
 30251                                  ;-------------------------------- Result block structure
 30252                                  struc $P_RESULT_BLK;
 30253 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 30254 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 30255 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 30256 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 30257                                  endstruc
 30258                                  
 30259                                  ;**** values for the type field in the result block
 30260                                  
 30261                                  $P_EOL		 equ 0		;AN000; End of line
 30262                                  $P_Number	 equ 1		;AN000; Number
 30263                                  $P_List_Idx	 equ 2		;AN000; List Index
 30264                                  $P_String	 equ 3		;AN000; String
 30265                                  $P_Complex	 equ 4		;AN000; Complex
 30266                                  $P_File_Spec	 equ 5		;AN000; File Spec
 30267                                  $P_Drive	 equ 6		;AN000; Drive
 30268                                  $P_Date_F	 equ 7		;AN000; Date
 30269                                  $P_Time_F	 equ 8		;AN000; Time
 30270                                  $P_Quoted_String equ 9		;AN000; Quoted String
 30271                                  
 30272                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 30273                                  
 30274                                  ;**** Return code
 30275                                  ;
 30276                                  ; following return code will be returned in the AX register.
 30277                                  
 30278                                  $P_No_Error	 equ 0		;AN000; No error
 30279                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 30280                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 30281                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 30282                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 30283                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 30284                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 30285                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 30286                                  $P_Syntax	 equ 9		;AN000; Syntax error
 30287                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 30288                                  
 30289                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 30290                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 30291                                  $P_Neg		 equ 02h	;AN000; Negative value
 30292                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 30293                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 30294                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 30295                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 30296                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 30297                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 30298                                  
 30299                                  ;-------- Masks
 30300                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 30301                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 30302                                  
 30303                                  ;-------------
 30304                                  
 30305                                  struc $P_DOS_TBL
 30306 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 30307 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 30308 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 30309                                  endstruc
 30310                                  
 30311                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 30312                                  				;AN000; following parameters are set
 30313                                  				;AN000; to get casemap table.
 30314                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 30315                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 30316                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 30317                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 30318                                  				; By this call following information
 30319                                  				; is returned.
 30320                                  
 30321                                  ; 03/04/2023
 30322                                  ;-------------------------------- country dependent information
 30323                                  
 30324                                  $P_DOS_Get_CDI	equ 3800h
 30325                                  
 30326                                  struc $P_CDI
 30327 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 30328 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 30329 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 30330 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 30331 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 30332 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 30333 0000000E ??                      		resb 1		;AN000;
 30334 0000000F ??                      		resb 1		;AN000;
 30335 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 30336 00000011 ????????                		resw 2		;AN000;
 30337 00000015 ????                    		resb 2		;AN000;
 30338 00000017 <res Ah>                		resw 5		;AN000;
 30339                                  endstruc
 30340                                  
 30341                                  $P_Date_MDY	equ 0		;AN000;
 30342                                  $P_Date_DMY	equ 1		;AN000;
 30343                                  $P_Date_YMD	equ 2		;AN000;
 30344                                  
 30345                                  ; ----------------------------
 30346                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 30347                                  ; ----------------------------
 30348                                  
 30349                                  ;***********************************************************************
 30350                                  ; SysParse;
 30351                                  ;
 30352                                  ;  Function : Parser Entry
 30353                                  ;
 30354                                  ;  Input: DS:SI -> command line
 30355                                  ;	  ES:DI -> parameter block
 30356                                  ;	  psdata_seg -> psdata.inc
 30357                                  ;	  CX = operand ordinal
 30358                                  ;
 30359                                  ;	  Note:  ES is the segment containing all the control blocks defined
 30360                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 30361                                  ;		 is in DS.
 30362                                  ;
 30363                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 30364                                  ;		    invalid value list. But this parser does NOT implement
 30365                                  ;		    this feature. Therefore CY always zero.
 30366                                  ;
 30367                                  ;	   CY = 0   AX = return code
 30368                                  ;		    BL = terminated delimiter code
 30369                                  ;		    CX = new operand ordinal
 30370                                  ;		    SI = set past scaned operand
 30371                                  ;		    DX = selected result buffer
 30372                                  ;
 30373                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 30374                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 30375                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 30376                                  ;
 30377                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 30378                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 30379                                  ;
 30380                                  ;-------- Modification History -----------------------------------------
 30381                                  ;
 30382                                  ;  4/04/87 : Created by K. K,
 30383                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 30384                                  ;	   : JMP SHORT assemble error (tm02)
 30385                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 30386                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 30387                                  ;	     DateSW equ 1)	      (tm04)
 30388                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 30389                                  ;				      (tm05) in PSDATA.INC
 30390                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 30391                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 30392                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 30393                                  ;	     value-list block	      (tm07)
 30394                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 30395                                  ;	     switch (keyword) or not. If there is, backup si for next call
 30396                                  ;	     (tm08)
 30397                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 30398                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 30399                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 30400                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 30401                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 30402                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 30403                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 30404                                  ;					  (tm12)
 30405                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 30406                                  ;					  (tm13)
 30407                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 30408                                  ;					  (tm14)
 30409                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 30410                                  ;					  (tm15)
 30411                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 30412                                  ;
 30413                                  ;  7/24/87 : Quoted strings being returned with quotes.
 30414                                  ;
 30415                                  ;  7/28/87 : Kerry S (;AN018;)
 30416                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 30417                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 30418                                  ;	     affected: $P_Chk_SW_Control.
 30419                                  ;
 30420                                  ;  7/29/87 : Kerry S (;AN019;)
 30421                                  ;	     Now allow the optional bit in match flags for switches.  This
 30422                                  ;	     allows the switch to be encountered with a value or without a
 30423                                  ;	     value and no error is returned.
 30424                                  ;
 30425                                  ;
 30426                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 30427                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 30428                                  ;	     within a date response, instead of checking just for the one
 30429                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 30430                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 30431                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 30432                                  ;
 30433                                  ;  9/1/87  : Kerry S (;AN021)
 30434                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 30435                                  ;	     the command line with the string in the control block the
 30436                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 30437                                  ;	     on the command line and assuming a match.	This allowed a shorter
 30438                                  ;	     string on the command line than in the synonym list in the control
 30439                                  ;	     block.  I put in a test for a null in the control block so the
 30440                                  ;	     string in the control block must be the same length as the string
 30441                                  ;	     preceeding the colon or equal on the command line.
 30442                                  ;
 30443                                  ;  8/28/87 : Kerry S (;AN022;)
 30444                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 30445                                  ;	     problems for people who included it themselves in a segment other
 30446                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 30447                                  ;	     segment.
 30448                                  ;
 30449                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 30450                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 30451                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 30452                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 30453                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 30454                                  ;	     BL be used if TIME is being parsed.
 30455                                  ;
 30456                                  ;  9/24/87 : Ed K
 30457                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 30458                                  ;	     invocations with their normally expanded code; made comments
 30459                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 30460                                  ;
 30461                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 30462                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 30463                                  ;	     pointed to by non-existant CONTROL.
 30464                                  ;
 30465                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 30466                                  ;	     A quoted text string can be framed only by double quote.  Remove
 30467                                  ;	     support to frame quoted text string with single quote.
 30468                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 30469                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 30470                                  ;	     single quote in PROC prologues are left as is for history reasons.
 30471                                  ;
 30472                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 30473                                  ;	     quote chars within a quoted string is supposed to be reported as
 30474                                  ;	     one quote character, but is reported as two quotes.  This changed
 30475                                  ;	     two instructions in PROC $P_Quoted_Str.
 30476                                  ;
 30477                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 30478                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 30479                                  ;
 30480                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 30481                                  ;
 30482                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 30483                                  ;	     psdata buffer should have psdata_seg.
 30484                                  ;
 30485                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 30486                                  ;	     positional missing.
 30487                                  ;
 30488                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 30489                                  ;	     as a line delimiter, should use carriage return.
 30490                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 30491                                  ;
 30492                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 30493                                  ;
 30494                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 30495                                  ;	     endless loop since SI is returned still pointing to start
 30496                                  ;	     of that parm.
 30497                                  ;
 30498                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 30499                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 30500                                  ;	     when tried to fix it on previous version, changed similar
 30501                                  ;	     but wrong place.
 30502                                  ;
 30503                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 30504                                  ;	     delimiters between hours, minutes, seconds for time. And period
 30505                                  ;	     and comma are valid delimiters between seconds and 100th second.
 30506                                  ;
 30507                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 30508                                  ;	     in a filespec, then flag an error.
 30509                                  ;
 30510                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 30511                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 30512                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 30513                                  ;  -->	     local parser data. Why were some references to local data changed
 30514                                  ;	     to do this before, but not all ?????
 30515                                  ;
 30516                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 30517                                  ;
 30518                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 30519                                  ;
 30520                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 30521                                  ;
 30522                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 30523                                  ;
 30524                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 30525                                  ;	     separator in TIME before hundredths field.
 30526                                  ;
 30527                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 30528                                  ;			strings as keywords.
 30529                                  ;
 30530                                  ;***********************************************************************
 30531                                  
 30532                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30533                                  cmd_parse:
 30534                                  	;call	sysparse
 30535                                  	;retn
 30536                                  
 30537                                  ; -----------------------------------
 30538                                  
 30539                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30540                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 30541                                  
 30542                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30543                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4CABh
 30544                                  sysparse:
 30545 00004A59 2EC706[4E99]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 30546 00004A60 2E890E[D899]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 30547 00004A65 2E8926[DA99]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 30548 00004A6A 2E8936[DC99]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 30549                                  $P_Redo_Time:				;AN039; try to parse time again
 30550 00004A6F FC                      	cld				;AN000; confirm forward direction
 30551 00004A70 2E890E[4199]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 30552                                  	;mov	word [cs:$P_RC],$P_No_Error
 30553 00004A75 2EC706[4399]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 30554 00004A7C 2EC706[5699]0000        	mov	word [cs:$P_Found_SYNONYM],0
 30555                                  					;AC034; initalize synonym pointer
 30556 00004A83 2EC706[4799]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 30557                                  
 30558                                  ;M029 -- Begin changes
 30559                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 30560                                  ;entry to SysParse. This is in the non-checksum region and any program that
 30561                                  ;corrupts this table but does not corrupt the checksum region will leave
 30562                                  ;command.com parsing in an inconsistent state.
 30563                                  ; NB: The special characters string has been hardcoded here. If any change
 30564                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 30565                                  
 30566 00004A8A 2EC706[139A]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 30567 00004A91 2EC706[159A]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 30568 00004A98 2EC706[179A]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 30569 00004A9F 2EC706[199A]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 30570                                  
 30571                                  ;M029 -- End of changes
 30572                                  
 30573 00004AA6 E82209                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 30574 00004AA9 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 30575                                  
 30576                                  ;--------------------------- End of Line
 30577                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 30578 00004AAB B8FFFF                  	mov	ax,0FFFFh
 30579 00004AAE 53                      	push	bx			;AN000;
 30580                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 30581 00004AAF 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 30582                                  	
 30583                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 30584 00004AB2 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 30585 00004AB5 7304                    	jae	short $P_Fin		;AN000; positional found.
 30586                                  
 30587                                  	;mov	ax,2
 30588 00004AB7 B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 30589                                  	; 27/04/2023
 30590 00004ABA F8                      	clc
 30591                                  $P_Fin: 				;AN000;
 30592 00004ABB 5B                      	pop	bx			;AN000;
 30593                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 30594                                  	; 27/04/2023
 30595                                  	; cf = 0
 30596                                  	;clc
 30597 00004ABC C3                      	retn
 30598                                  
 30599                                  ;---------------------------
 30600                                  $P_Start:				;AN000;
 30601 00004ABD 2E8936[5099]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034; save ptr to command line for later use by complex,
 30602 00004AC2 53                      	push	bx			;AN000; quoted string or file spec.
 30603 00004AC3 57                      	push	di			;AN000;
 30604 00004AC4 55                      	push	bp			;AN000;
 30605 00004AC5 8D1E[5899]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 30606 00004AC9 2EF606[4F99]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 30607                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 30608 00004ACF 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 30609                                  $P_Pack_Loop:				;AN000;
 30610 00004AD1 AC                      	lodsb				;AN000; Pick a operand from buffer
 30611 00004AD2 E8A909                  	call	$P_Chk_Switch		;AN000; Check switch character
 30612 00004AD5 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 30613                                  
 30614 00004AD7 E81309                  	call	$P_Chk_EOL		;AN000; Check EOL character
 30615 00004ADA 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 30616                                  
 30617 00004ADC E84009                  	call	$P_Chk_Delim		;AN000; Check delimiter
 30618 00004ADF 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 30619                                  
 30620 00004AE1 2EF606[4F99]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 30621                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 30622 00004AE7 7505                    	jnz	short $P_Pack_End_backup_si
 30623                                  					;AN000; (tm08)
 30624 00004AE9 E8DF08                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 30625 00004AEC EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 30626                                  
 30627                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 30628 00004AEE 2EF606[4F99]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 30629                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 30630 00004AF4 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 30631                                  
 30632 00004AF6 4E                      	dec	si			;AN000; (tm08)
 30633 00004AF7 EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 30634                                  $P_PL01:				;AN000;
 30635 00004AF9 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 30636                                  	;cmp	al,'='
 30637 00004AFC 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 30638 00004AFE 7506                    	jne	short $P_PL00 		;AN000; then
 30639                                  
 30640 00004B00 2E800E[4F99]01          	or	byte [cs:$P_Flags2],$P_equ
 30641                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 30642                                  $P_PL00:				;AN000;
 30643 00004B06 43                      	inc	bx			;AN000; ready to see next byte
 30644 00004B07 E89F09                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 30645 00004B0A 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 30646                                  
 30647 00004B0C AC                      	lodsb				;AN000; if yes, store
 30648 00004B0D 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 30649 00004B10 43                      	inc	bx			;AN000; update pointer
 30650 00004B11 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 30651                                  
 30652                                  $P_Pack_End_BY_EOL:			;AN000;
 30653 00004B13 4E                      	dec	si			;AN000; backup si pointer
 30654                                  $P_Pack_End:				;AN000;
 30655 00004B14 2E8936[4599]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 30656                                  	;mov	byte [cs:bx],0
 30657 00004B19 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 30658 00004B1D 2E891E[5499]            	mov	[cs:$P_Save_EOB],bx
 30659                                  					;AC034; 3/17/87 keep the address for later use of complex
 30660                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 30661 00004B22 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 30662 00004B25 8D36[5899]              	lea	si,$P_STRING_BUF	;AC034;
 30663                                  	;cmp	byte [cs:si],'/'
 30664 00004B29 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 30665 00004B2D 7442                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 30666                                  
 30667 00004B2F 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 30668 00004B33 7408                    	je	short $P_Positional_Manager
 30669                                  					;M005;if so, process as one!
 30670 00004B35 2EF606[4F99]01          	test	byte [cs:$P_Flags2],$P_equ
 30671                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 30672 00004B3B 7556                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 30673                                  
 30674                                  $P_Positional_Manager:			;AN000; else process as positional
 30675                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30676 00004B3D 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30677 00004B41 30E4                    	xor	ah,ah			;AN000; ax = maxp
 30678 00004B43 2E3906[4199]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 30679 00004B48 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 30680                                  
 30681 00004B4A 2EA1[4199]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 30682 00004B4E D1E0                    	shl	ax,1			;AN000; ax = ax*2
 30683 00004B50 43                      	inc	bx			;AC035; add '2' to
 30684 00004B51 43                      	inc	bx			;AC035;  BX reg
 30685                                  					;AN000; now bx points to 1st CONTROL
 30686 00004B52 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 30687 00004B54 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 30688 00004B57 E88000                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 30689 00004B5A EB61                    	jmp	short $P_Return_to_Caller
 30690                                  					;AN000; and return to the caller
 30691                                  $P_Too_Many_Error:			;AN000;
 30692                                  	;mov	word [cs:$P_RC],1
 30693 00004B5C 2EC706[4399]0100        	mov	word [cs:$P_RC],$P_Too_Many
 30694                                  					;AC034; set exit code
 30695 00004B63 EB58                    	jmp	short $P_Return_to_Caller
 30696                                  					;AN000; and return to the caller
 30697                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30698                                  %if 0
 30699                                  $P_SW_Manager:				;AN000;
 30700                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30701                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30702                                  	xor	ah,ah			;AN000; ax = maxp
 30703                                  	inc	ax			;AN000;
 30704                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 30705                                  	add	bx,ax			;AN000; now bx points to maxs
 30706                                  	mov	cl,[es:bx]		;AN000;
 30707                                  	xor	ch,ch			;AN000; cx = maxs
 30708                                  	or	cx,cx			;AN000; at least one switch ?
 30709                                  	jz	short $P_SW_Not_Found 	;AN000;
 30710                                  	inc	bx			;AN000; now bx points to 1st CONTROL address
 30711                                  %else
 30712                                  $P_get_max_ptr:
 30713                                  	;mov	al,[es:bx+1]		; get maxp
 30714 00004B65 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30715 00004B69 30E4                    	xor	ah,ah			; ax = maxp
 30716 00004B6B 40                      	inc	ax
 30717 00004B6C D1E0                    	shl	ax,1			; ax = (ax+1)*2
 30718 00004B6E 01C3                    	add	bx,ax			; now bx points to maxs
 30719 00004B70 C3                      	retn
 30720                                  
 30721                                  $P_SW_Manager:
 30722 00004B71 E8F1FF                  	call	$P_get_max_ptr
 30723 00004B74 268A0F                  	mov	cl,[es:bx]
 30724 00004B77 30ED                    	xor	ch,ch			; cx = maxs
 30725                                  					; at least one switch ?
 30726 00004B79 E30F                    	jcxz	$P_SW_Not_Found 	; no
 30727 00004B7B 43                      	inc	bx			; now bx points to 1st CONTROL address
 30728                                  %endif
 30729                                  
 30730                                  $P_SW_Mgr_Loop: 			;AN000;
 30731 00004B7C 53                      	push	bx			;AN000;
 30732 00004B7D 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 30733 00004B80 E8B700                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 30734 00004B83 5B                      	pop	bx			;AN000;
 30735 00004B84 7337                    	jnc	short $P_Return_to_Caller
 30736                                  					;AN000; if the CONTROL is for the switch, exit
 30737 00004B86 43                      	inc	bx			;AC035; add '2' to
 30738 00004B87 43                      	inc	bx			;AC035;  BX reg
 30739                                  					;AN000; else bx points to the next CONTROL
 30740 00004B88 E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 30741                                  $P_SW_Not_Found:			;AN000;
 30742                                  	;mov	word [cs:$P_RC],3
 30743 00004B8A 2EC706[4399]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 30744                                  					;AC034; here no CONTROL for the switch has
 30745 00004B91 EB2A                    	jmp	short $P_Return_to_Caller0
 30746                                  					;AN000; not been found, means error.
 30747                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30748                                  %if 0
 30749                                  $P_Key_Manager: 			;AN000;
 30750                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30751                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30752                                  	xor	ah,ah			;AN000; ax = maxp
 30753                                  	inc	ax			;AN000;
 30754                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 30755                                  	add	bx,ax			;AN000; now bx points to maxs
 30756                                  	mov	al,[es:bx]		;AN000;
 30757                                  	xor	ah,ah			;AN000; ax = maxs
 30758                                  	shl	ax,1			;AN000;
 30759                                  	inc	ax			;AN000; ax = ax*2+1
 30760                                  	add	bx,ax			;AN000; now bx points to maxk
 30761                                  	mov	cl,[es:bx]		;AN000;
 30762                                  	xor	ch,ch			;AN000; cx = maxk
 30763                                  	or	cx,cx			;AN000; at least one keyword ?
 30764                                  	jz	short $P_Key_Not_Found	;AN000;
 30765                                  	inc	bx			;AN000; now bx points to 1st CONTROL
 30766                                  %else
 30767                                  $P_Key_Manager:
 30768 00004B93 E8CFFF                  	call	$P_get_max_ptr
 30769 00004B96 268A07                  	mov	al,[es:bx]
 30770 00004B99 30E4                    	xor	ah,ah			; ax = maxs
 30771 00004B9B D1E0                    	shl	ax,1
 30772 00004B9D 40                      	inc	ax			; ax = ax*2+1
 30773 00004B9E 01C3                    	add	bx,ax			; now bx points to maxk
 30774 00004BA0 268A0F                  	mov	cl,[es:bx]
 30775 00004BA3 30ED                    	xor	ch,ch			; cx = maxk
 30776                                  					; at least one keyword ?
 30777 00004BA5 E30F                    	jcxz	$P_Key_Not_Found
 30778 00004BA7 43                      	inc	bx			; now bx points to 1st CONTROL
 30779                                  %endif
 30780                                  
 30781                                  $P_Key_Mgr_Loop:			;AN000;
 30782 00004BA8 53                      	push	bx			;AN000;
 30783 00004BA9 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 30784 00004BAC E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 30785 00004BAF 5B                      	pop	bx			;AN000;
 30786 00004BB0 730B                    	jnc	short $P_Return_to_Caller
 30787                                  					;AN000; if the CONTROL is for the keyword, exit
 30788 00004BB2 43                      	inc	bx			;AC035; add '2' to
 30789 00004BB3 43                      	inc	bx			;AC035;  BX reg
 30790                                  					;AN000; else bx points to the next CONTROL
 30791 00004BB4 E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 30792                                  $P_Key_Not_Found:			;AN000;
 30793                                  	;mov	word [cs:$P_RC],4
 30794 00004BB6 2EC706[4399]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 30795                                  					;AC034; here no CONTROL for the keyword has
 30796                                  $P_Return_to_Caller0:
 30797                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 30798 00004BBD 5D                      	pop	bp			;AN000;
 30799 00004BBE 5F                      	pop	di			;AN000;
 30800 00004BBF 5B                      	pop	bx			;AN000;
 30801 00004BC0 2E8B0E[4199]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 30802 00004BC5 2EA1[4399]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 30803 00004BC9 2E8B36[4599]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 30804 00004BCE 2E8B16[4799]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 30805 00004BD3 2E8A1E[4999]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 30806                                  $P_Single_Exit: 			;AN000;
 30807 00004BD8 F8                      	clc				;AN000;
 30808 00004BD9 C3                      	retn				;AN000;
 30809                                  
 30810                                  ;***********************************************************************
 30811                                  ; $P_Chk_Pos_Control
 30812                                  ;
 30813                                  ; Function: Parse CONTROL block for a positional
 30814                                  ;
 30815                                  ; Input:     ES:BX -> CONTROL block
 30816                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30817                                  ;
 30818                                  ; Output:    None
 30819                                  ;
 30820                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 30821                                  ;
 30822                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 30823                                  ;***********************************************************************
 30824                                  
 30825                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30826                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 30827                                  
 30828                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30829                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E35h
 30830                                  $P_Chk_Pos_Control:
 30831 00004BDA 50                      	push	ax			;AN000;
 30832                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 30833 00004BDB 268B07                  	mov	ax,[es:bx]		;AN000;
 30834                                  	;test	ax,2
 30835 00004BDE A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 30836 00004BE1 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 30837                                  
 30838 00004BE3 2EFF06[4199]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 30839                                  $P_CPC00:				;AN000;
 30840                                  	;cmp	byte [cs:si],0
 30841 00004BE8 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 30842 00004BEC 7516                    	jne	short $P_CPC01		;AN000;
 30843                                  
 30844                                  	;test	ax,1
 30845 00004BEE A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 30846 00004BF1 7509                    	jnz	short $P_CPC02		;AN000;
 30847                                  
 30848 00004BF3 2EC706[4399]0200        	mov	word [cs:$P_RC],$P_Op_Missing ; 2
 30849                                  					;AC034; no, then error	 3/17/87
 30850 00004BFA EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 30851                                  $P_CPC02:				;AN000;
 30852                                  	; 27/04/2023
 30853                                  	;push	ax ; *			;AN000;
 30854                                  	;
 30855                                  	;;mov	al,3
 30856                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 30857                                  	;;mov	ah,0FFh
 30858                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 30859                                  	; 31/03/2023
 30860 00004BFC B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30861 00004BFF E89500                  	call	$P_Fill_Result		;AN000;
 30862                                  	; 27/04/2023
 30863                                  	;pop	ax ; *			;AN000;
 30864 00004C02 EB03                    	jmp	short $P_CPC_Exit	;AN000;
 30865                                  $P_CPC01:				;AN000;
 30866 00004C04 E81101                  	call	$P_Check_Match_Flags	;AN000;
 30867                                  $P_CPC_Exit:				;AN000;
 30868 00004C07 58                      	pop	ax			;AN000;
 30869 00004C08 C3                      	retn				;AN000;
 30870                                  
 30871                                  ;***********************************************************************
 30872                                  ; $P_Chk_Key_Control
 30873                                  ;
 30874                                  ; Function: Parse CONTROL block for a keyword
 30875                                  ;
 30876                                  ; Input:     ES:BX -> CONTROL block
 30877                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30878                                  ;
 30879                                  ; Output:    CY = 1 : not match
 30880                                  ;
 30881                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30882                                  ;
 30883                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30884                                  ;***********************************************************************
 30885                                  
 30886                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30887                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30888                                  $P_Chk_Key_Control:			;AN000;
 30889 00004C09 F9                      	stc				;AN000;this logic works when the KeySW
 30890 00004C0A C3                      	retn				;AN000;is reset.
 30891                                  
 30892                                  ;***********************************************************************
 30893                                  ; $P_Search_KEYorSW:
 30894                                  ;
 30895                                  ; Function: Seach specified keyword or switch from CONTROL
 30896                                  ;
 30897                                  ; Input:     ES:BX -> CONTROL block
 30898                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30899                                  ;
 30900                                  ; Output:    CY = 1 : not match
 30901                                  ;
 30902                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 30903                                  ;***********************************************************************
 30904                                  
 30905                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30906                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30907                                  $P_Search_KEYorSW:
 30908 00004C0B 55                      	push	bp			;AN000;
 30909 00004C0C 51                      	push	cx			;AN000;
 30910 00004C0D 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 30911                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 30912                                  	; 14/06/2023
 30913                                  	;xor	ch,ch			;AN000; and set it to cx
 30914                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30915 00004C11 08C9                    	or	cl,cl
 30916 00004C13 740E                    	jz	short $P_KEYorSW_Not_Found
 30917                                  					;AN000; then indicate not found by CY
 30918 00004C15 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 30919                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 30920                                  $P_KEYorSW_Loop:			;AN000;
 30921 00004C19 E8E703                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 30922 00004C1C 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 30923 00004C1E E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 30924 00004C21 E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 30925                                  $P_KEYorSW_Not_Found:			;AN000;
 30926 00004C23 F9                      	stc				;AN000; indicate not found in synonym list
 30927 00004C24 EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 30928                                  $P_KEYorSW_Found:			;AN000;
 30929 00004C26 2E892E[5699]            	mov	[cs:$P_Found_SYNONYM],bp
 30930                                  					;AC034; set synonym pointer
 30931                                  	; 27/04/2023
 30932                                  	; cf = 0
 30933                                  	;clc				;AN000; indicate found
 30934                                  $P_KEYorSW_Exit:			;AN000;
 30935 00004C2B 59                      	pop	cx			;AN000;
 30936 00004C2C 5D                      	pop	bp			;AN000;
 30937 00004C2D C3                      	retn				;AN000;
 30938                                  
 30939                                  ;***********************************************************************
 30940                                  ; $P_MoveBP_NUL
 30941                                  ;***********************************************************************
 30942                                  
 30943                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30944                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30945                                  $P_MoveBP_NUL:
 30946                                  $P_MBP_Loop:				;AN000;
 30947                                  	;cmp	byte [es:bp+0],0
 30948 00004C2E 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 30949 00004C33 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 30950 00004C35 45                      	inc	bp			;AN000; until
 30951 00004C36 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 30952                                  $P_MBP_Exit:				;AN000;
 30953 00004C38 45                      	inc	bp			;AN000; bp points to next to NULL
 30954 00004C39 C3                      	retn				;AN000;
 30955                                  
 30956                                  ;***********************************************************************
 30957                                  ; $P_Chk_SW_Control
 30958                                  ;
 30959                                  ; Function: Parse CONTROL block for a switch
 30960                                  ;
 30961                                  ; Input:     ES:BX -> CONTROL block
 30962                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30963                                  ;
 30964                                  ; Output:    CY = 1 : not match
 30965                                  ;
 30966                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30967                                  ;
 30968                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30969                                  ;***********************************************************************
 30970                                  
 30971                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30972                                  	;
 30973                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30974                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E9Ah
 30975                                  $P_Chk_SW_Control:
 30976 00004C3A 2E800E[4F99]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 30977                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 30978 00004C40 E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 30979 00004C43 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 30980                                  
 30981 00004C45 2E8026[4F99]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 30982                                  	;and	byte [cs:$P_Flags2],0EFh
 30983                                  					;AC034; reset the indicator previously set
 30984 00004C4B 50                      	push	ax			;AN000;       /switch:
 30985 00004C4C 2EA1[5299]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 30986 00004C50 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 30987 00004C52 2E0106[5099]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 30988 00004C57 58                      	pop	ax			;AN000;
 30989                                  
 30990 00004C58 2E8B36[5299]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 30991                                  	;cmp	byte [cs:si],0
 30992 00004C5D 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 30993 00004C61 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 30994                                  
 30995                                  	;cmp	byte [cs:si],':'
 30996 00004C63 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 30997                                  					;AN000; if no, the switch terminated by colon ?
 30998 00004C68 7509                    	jne	short $P_Chk_if_data_required
 30999                                  					;AN000; if yes,
 31000                                  
 31001 00004C6A 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31002                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 31003 00004C71 EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 31004                                  
 31005                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 31006                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 31007                                  	; 27/04/2023
 31008 00004C73 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 31009 00004C77 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 31010                                  
 31011                                  	;;test	word [es:bx],1 ; $P_Optional
 31012                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 31013 00004C79 26F60701                	test	byte [es:bx],$P_Optional
 31014                                  					;AN019; see if no value is valid
 31015 00004C7D 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 31016                                  
 31017 00004C7F 2EC706[4399]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 31018                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 31019 00004C86 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 31020                                  
 31021                                  $P_CSW00:				;AN000;
 31022 00004C88 E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 31023 00004C8B F8                      	clc				;AN000; indicate match
 31024                                  	;jmp	short $P_Chk_SW_Single_Exit
 31025 00004C8C C3                      	retn	; 31/03/2023		;AN000;
 31026                                  	; 31/03/2023
 31027                                  ;$P_Chk_SW_Err0: 			;AN000;
 31028                                  ;	stc				;AN000; not found in switch synonym list
 31029                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 31030                                  ;	retn	; 31/03/2023		;AN000;
 31031                                  	
 31032                                  $P_Chk_SW_Exit: 			;AN000;
 31033 00004C8D 50                      	push	ax			;AN000;
 31034                                  	; 31/03/2023
 31035 00004C8E B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31036                                  	;;mov	al,3
 31037                                  	;;mov	ah,0FFh
 31038                                  	;mov	al,$P_String		;AN000; set
 31039                                  	;mov	ah,$P_No_Tag		;AN000;    result
 31040 00004C91 E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 31041 00004C94 58                      	pop	ax			;AN000;
 31042 00004C95 F8                      	clc				;AN000;
 31043                                  	; 31/03/2023
 31044                                  $P_Chk_SW_Err0:
 31045                                  $P_Chk_SW_Single_Exit:			;AN000;
 31046 00004C96 C3                      	retn				;AN000;
 31047                                  
 31048                                  ;***********************************************************************
 31049                                  ; $P_Fill_Result
 31050                                  ;
 31051                                  ; Function: Fill the result buffer
 31052                                  ;
 31053                                  ; Input:    AH = Item tag
 31054                                  ;	    AL = type
 31055                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 31056                                  ;		  AL = 2: DX has index(offset) into value list
 31057                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 31058                                  ;		  AL = 7: DX has year, CL has month and CH has date
 31059                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 31060                                  ;			  amd CH has hundredths
 31061                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 31062                                  ;	    ES:BX -> CONTROL block
 31063                                  ;
 31064                                  ; Output:   None
 31065                                  ;
 31066                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 31067                                  ;
 31068                                  ; Vars: $P_DX(W)
 31069                                  ;***********************************************************************
 31070                                  
 31071                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31072                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31073                                  $P_Fill_Result:
 31074 00004C97 57                      	push	di			;AN000;
 31075 00004C98 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 31076                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 31077 00004C9C 2E893E[4799]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 31078                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 31079                                  	;;mov	[es:di],al		;AN000; store type
 31080                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 31081                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 31082                                  	; 31/03/2023
 31083 00004CA1 268905                  	mov	[es:di],ax
 31084 00004CA4 50                      	push	ax			;AN000;
 31085 00004CA5 2EA1[5699]              	mov	ax,[cs:$P_Found_SYNONYM]
 31086                                  					;AC034; if yes,
 31087 00004CA9 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 31088                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 31089 00004CAD 58                      	pop	ax			;AN000;
 31090                                  $P_RLT04:				;AN000;
 31091                                  	;cmp	al,1
 31092 00004CAE 3C01                    	cmp	al,$P_Number		;AN000; if number
 31093 00004CB0 750A                    	jne	short $P_RLT00		;AN000;
 31094                                  $P_RLT02:				;AN000;
 31095 00004CB2 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 31096                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 31097 00004CB6 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 31098                                  	;mov	[es:di+6],cx		;AN000;	number
 31099 00004CBA EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 31100                                  $P_RLT00:				;AN000;
 31101                                  	;cmp	al,2
 31102 00004CBC 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 31103 00004CBE 7506                    	jne	short $P_RLT01		;AN000;
 31104 00004CC0 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 31105                                  	;mov	[es:di+4],dx		;AN000; then store list index
 31106 00004CC4 EB50                    	jmp	short $P_RLT_Exit	;AN000;
 31107                                  $P_RLT01:				;AN000;
 31108                                  	;cmp	al,7
 31109 00004CC6 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 31110 00004CC8 74E8                    	je	short $P_RLT02		;AN000;
 31111                                  	;cmp	al,8
 31112 00004CCA 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 31113 00004CCC 74E4                    	je	short $P_RLT02		;AN000;
 31114                                  	;cmp	al,6
 31115 00004CCE 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 31116 00004CD0 7506                    	jne	short $P_RLT03		;AN000;
 31117                                  
 31118 00004CD2 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 31119                                  	;mov	[es:di+4],dl		;AN000; store drive number
 31120 00004CD6 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 31121                                  
 31122                                  $P_RLT03:				;AN000;
 31123                                  	;cmp	al,4
 31124 00004CD8 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 31125 00004CDA 750F                    	jne	short $P_RLT05		;AN000;
 31126                                  
 31127 00004CDC 2EA1[5099]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 31128 00004CE0 40                      	inc	ax			;AN000; skip left Parentheses
 31129 00004CE1 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 31130                                  	;mov	[es:di+4],ax		;AN000; store offset
 31131 00004CE5 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 31132                                  	;mov	[es:di+6],ds		;AN000; store segment
 31133 00004CE9 EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 31134                                  
 31135                                  $P_RLT05:				;AN000;
 31136                                  ;------------------------  AL = 3, 5, or 9
 31137 00004CEB 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 31138                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 31139 00004CEF 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 31140                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 31141                                  
 31142 00004CF3 50                      	push	ax			;AN000;
 31143 00004CF4 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 31144                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 31145 00004CF9 7404                    	jz	short $P_RLT_CAP00	;AN000;
 31146                                  
 31147                                  	;mov	al,4
 31148 00004CFB B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 31149 00004CFD EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 31150                                  
 31151                                  $P_RLT_CAP00:				;AN000;
 31152 00004CFF 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 31153                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 31154 00004D04 7405                    	jz	short $P_RLT_CAP01	;AN000;
 31155                                  
 31156                                  	;mov	al,2
 31157 00004D06 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 31158                                  $P_RLT_CAP02:				;AN000;
 31159 00004D08 E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 31160                                  $P_RLT_CAP01:				;AN000;
 31161 00004D0B 58                      	pop	ax			;AN000;
 31162 00004D0C 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 31163                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 31164 00004D11 7403                    	jz	short $P_RLT_Exit	;AN000;
 31165                                  
 31166 00004D13 E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 31167                                  $P_RLT_Exit:				;AN000;
 31168 00004D16 5F                      	pop	di			;AN000;
 31169 00004D17 C3                      	retn				;AN000;
 31170                                  
 31171                                  ;***********************************************************************
 31172                                  ; $P_Check_Match_Flags
 31173                                  ;
 31174                                  ; Function:  Check the mutch_flags and make the exit code and set the
 31175                                  ;	     result buffer
 31176                                  ;
 31177                                  ;	    Check for types in this order:
 31178                                  ;		Complex
 31179                                  ;		Date
 31180                                  ;		Time
 31181                                  ;		Drive
 31182                                  ;		Filespec
 31183                                  ;		Quoted String
 31184                                  ;		Simple String
 31185                                  ;
 31186                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31187                                  ;	     ES:BX -> CONTROL block
 31188                                  ;
 31189                                  ; Output:    None
 31190                                  ;
 31191                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 31192                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 31193                                  ;	     $P_Drive_Format
 31194                                  ;***********************************************************************
 31195                                  
 31196                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31197                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31198                                  $P_Check_Match_Flags:
 31199 00004D18 2EC606[1C9A]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 31200                                  					;AN033;AC034;; clear filespec error flag.
 31201 00004D1E 50                      	push	ax			;AN000;
 31202                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 31203 00004D1F 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 31204 00004D22 09C0                    	or	ax,ax			;AC035; test ax for zero
 31205 00004D24 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 31206 00004D26 50                      	push	ax			;AN000; (tm12)
 31207 00004D27 53                      	push	bx			;AN000; (tm12)
 31208 00004D28 52                      	push	dx			;AN000; (tm12)
 31209 00004D29 57                      	push	di			;AN000; (tm12)
 31210 00004D2A 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31211                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 31212                                  	; 31/03/2023
 31213 00004D31 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31214                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 31215                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 31216 00004D34 E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 31217 00004D37 5F                      	pop	di			;AN000; (tm12)
 31218 00004D38 5A                      	pop	dx			;AN000; (tm12)
 31219 00004D39 5B                      	pop	bx			;AN000; (tm12)
 31220 00004D3A 58                      	pop	ax			;AN000; (tm12)
 31221                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 31222                                  	; 31/03/2023
 31223                                  $P_Bridge:	; 18/04/2023		;AN000;
 31224 00004D3B E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 31225                                  $P_Mat: 				;AN000; (tm12)
 31226                                  $P_Match01:				;AN000;
 31227                                  	;test	ax,1000h
 31228 00004D3E A90010                  	test	ax,$P_Date_S		;AN000; Date string
 31229 00004D41 7412                    	jz	short $P_Match02	;AN000;
 31230 00004D43 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31231                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31232 00004D4A E85403                  	call	$P_Date_Format		;AN000; do process
 31233 00004D4D 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31234                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31235                                  	; 18/04/2023
 31236 00004D53 75E6                    	jne	short $P_Bridge		;AN000;
 31237                                  $P_Match02:				;AN000;
 31238                                  	;test	ax,800h
 31239 00004D55 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 31240 00004D58 7412                    	jz	short $P_Match03	;AN000;
 31241 00004D5A 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31242                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31243 00004D61 E85404                  	call	$P_Time_Format		;AN000; do process
 31244 00004D64 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31245                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31246                                  	;jne	short $P_Bridge		;AN000; (tm09)
 31247                                  	;jmp	short $P_Match03	;AN025; (tm09)
 31248                                  	; 31/03/2023
 31249 00004D6A 756E                    	jne	short $P_Match_Exit
 31250                                  ;$P_Bridge:				;AN000;
 31251                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 31252                                  $P_Match03:				;AN000;
 31253                                  	;test	ax,8000h
 31254 00004D6C A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 31255 00004D6F 7412                    	jz	short $P_Match04	;AN000;
 31256 00004D71 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31257                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31258 00004D78 E82701                  	call	$P_Value		;AN000; do process
 31259 00004D7B 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31260                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31261 00004D81 7557                    	jne	short $P_Match_Exit	;AN000;
 31262                                  $P_Match04:				;AN000;
 31263                                  	;test	ax,4000h
 31264 00004D83 A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 31265 00004D86 7412                    	jz	short $P_Match05	;AN000;
 31266 00004D88 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31267                                  					;AC034; assume no error
 31268 00004D8F E8EC00                  	call	$P_SValue		;AN000; do process
 31269 00004D92 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31270                                  					;AC034; if error, examine the next type
 31271 00004D98 7540                    	jne	short $P_Match_Exit	;AN000;
 31272                                  $P_Match05:				;AN000;
 31273                                  	;test	ax,100h
 31274 00004D9A A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 31275 00004D9D 7415                    	jz	short $P_Match06	;AN000;
 31276 00004D9F 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31277                                  					;AC034; assume no error
 31278 00004DA6 E85C05                  	call	$P_File_Format		;AN000; 1st, call file format
 31279 00004DA9 E8DD05                  	call	$P_Drive_Format 	;AN000; check drive format, next
 31280 00004DAC 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31281                                  					;AC034; if error, examinee the next type
 31282 00004DB2 7526                    	jne	short $P_Match_Exit	;AN000;
 31283                                  $P_Match06:				;AN000;
 31284                                  	;test	ax,200h
 31285 00004DB4 A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 31286 00004DB7 7412                    	jz	short $P_Match07	;AN000;
 31287 00004DB9 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31288                                  					;AC034; assume no error
 31289 00004DC0 E84205                  	call	$P_File_Format		;AN000; do process
 31290 00004DC3 2E833E[4399]09          	cmp	word [cs:$P_RC],$P_Syntax
 31291                                  					;AC034; if error, examine the next type
 31292 00004DC9 750F                    	jne	short $P_Match_Exit	;AN000;
 31293                                  $P_Match07:				;AN000;
 31294                                  $P_Match08:				;AN000;
 31295                                  	;test	ax,2000h
 31296 00004DCB A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 31297 00004DCE 740A                    	jz	short $P_Match09	;AN000;
 31298 00004DD0 2EC706[4399]0000        	mov	word [cs:$P_RC],$P_No_Error
 31299                                  					;AC034; assume no error
 31300 00004DD7 E8C501                  	call	$P_Simple_String	;AN000; do process
 31301                                  $P_Match09:				;AN000;
 31302                                  $P_Match_Exit:				;AN000;
 31303 00004DDA 2E833E[1C9A]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 31304                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 31305 00004DE0 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 31306 00004DE2 2E833E[4399]00          	cmp	word [cs:$P_RC],$P_No_Error
 31307                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 31308 00004DE8 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 31309 00004DEA 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31310                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 31311                                  $P_Match2_Exit: 			;AN033;
 31312 00004DF1 58                      	pop	ax			;AN000;
 31313 00004DF2 C3                      	retn
 31314                                  
 31315                                  ;***********************************************************************
 31316                                  ; $P_Remove_Colon;
 31317                                  ;
 31318                                  ; Function: Remove colon at end
 31319                                  ;
 31320                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 31321                                  ;
 31322                                  ; Output:   None
 31323                                  ;
 31324                                  ; Use:	$P_Chk_DBCS
 31325                                  ;***********************************************************************
 31326                                  
 31327                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31328                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31329                                  $P_Remove_Colon:
 31330 00004DF3 50                      	push	ax			;AN000;
 31331 00004DF4 56                      	push	si			;AN000;
 31332                                  $P_RCOL_Loop:				;AN000;
 31333 00004DF5 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31334 00004DF8 08C0                    	or	al,al			;AN000; end of string ?
 31335 00004DFA 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 31336                                  
 31337 00004DFC 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 31338 00004DFE 750E                    	jne	short $P_RCOL00		;AN000;
 31339                                  
 31340                                  	;cmp	byte [cs:si+1],0
 31341 00004E00 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 31342 00004E05 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 31343                                  
 31344 00004E07 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 31345                                  	; 31/03/2023
 31346                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 31347                                  $P_RCOL_Exit:
 31348 00004E0B 5E                      	pop	si
 31349 00004E0C 58                      	pop	ax
 31350 00004E0D C3                      	retn
 31351                                  
 31352                                  $P_RCOL00:				;AN000;
 31353 00004E0E E89806                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 31354 00004E11 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 31355                                  
 31356 00004E13 46                      	inc	si			;AN000; if yes, skip trailing byte
 31357                                  $P_RCOL01:				;AN000;
 31358 00004E14 46                      	inc	si			;AN000; si points to next byte
 31359 00004E15 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 31360                                  
 31361                                  	; 31/03/2023
 31362                                  ;$P_RCOL_Exit:				;AN000;
 31363                                  	;pop	si			;AN000;
 31364                                  	;pop	ax			;AN000;
 31365                                  	;retn
 31366                                  
 31367                                  ;***********************************************************************
 31368                                  ; $P_Do_CAPS_String;
 31369                                  ;
 31370                                  ; Function: Perform capitalization along with the file case map table
 31371                                  ;	    or character case map table.
 31372                                  ;
 31373                                  ; Input:    AL = 2 : Use character table
 31374                                  ;	    AL = 4 : Use file table
 31375                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 31376                                  ;
 31377                                  ; Output:   None
 31378                                  ;
 31379                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 31380                                  ;***********************************************************************
 31381                                  
 31382                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31383                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31384                                  $P_Do_CAPS_String:
 31385 00004E17 56                      	push	si			;AN000;
 31386 00004E18 52                      	push	dx			;AN000;
 31387 00004E19 88C2                    	mov	dl,al			;AN000; save info id
 31388                                  $P_DCS_Loop:				;AN000;
 31389 00004E1B 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 31390 00004E1E E88806                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 31391 00004E21 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 31392                                  
 31393 00004E23 08C0                    	or	al,al			;AN000; end of string ?
 31394 00004E25 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 31395                                  
 31396 00004E27 E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 31397 00004E2A 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 31398 00004E2D EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 31399                                  $P_DCS00:				;AN000;
 31400 00004E2F 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 31401                                  $P_DCS01:				;AN000;
 31402 00004E30 46                      	inc	si			;AN000; si point to next byte
 31403 00004E31 EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 31404                                  $P_DCS_Exit:				;AN000;
 31405 00004E33 5A                      	pop	dx			;AN000;
 31406 00004E34 5E                      	pop	si			;AN000;
 31407 00004E35 C3                      	retn
 31408                                  
 31409                                  ;***********************************************************************
 31410                                  ; $P_Do_CAPS_Char;
 31411                                  ;
 31412                                  ; Function: Perform capitalization along with the file case map table
 31413                                  ;	    or character case map table.
 31414                                  ;
 31415                                  ; Input:    DL = 2 : Use character table
 31416                                  ;	    DL = 4 : Use file table
 31417                                  ;	    AL = character to be capitalized
 31418                                  ;
 31419                                  ; Output:   None
 31420                                  ;
 31421                                  ; Use:	INT 21h /w AH=65h
 31422                                  ;***********************************************************************
 31423                                  
 31424                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31425                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31426                                  $P_Do_CAPS_Char:
 31427 00004E36 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 31428 00004E38 730B                    	jae	short $P_DCC_Go		;AN000;
 31429                                  
 31430 00004E3A 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 31431 00004E3C 723F                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 31432                                  
 31433 00004E3E 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 31434 00004E40 773B                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 31435                                  
 31436 00004E42 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 31437                                  	;jmp	short $P_CAPS_Ret	;AN000;
 31438                                  	; 18/04/2023
 31439 00004E44 C3                      	retn
 31440                                  
 31441                                  $P_DCC_Go:				;AN000;
 31442 00004E45 53                      	push	bx			;AN000;
 31443 00004E46 06                      	push	es			;AN000;
 31444 00004E47 57                      	push	di			;AN000;
 31445                                  	; 18/04/2023
 31446 00004E48 8D3E[0E9A]              	lea	di,$P_File_CAP_Ptr	;AC034;
 31447 00004E4C 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 31448 00004E4F 7404                    	je	short $P_DCC00		;AN000;
 31449                                  	; 27/04/2023
 31450 00004E51 8D3E[099A]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 31451                                  $P_DCC00:				;AN000;
 31452 00004E55 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 31453 00004E58 7416                    	je	short $P_DCC01		;AN000; if no,
 31454                                  
 31455                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 31456                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 31457                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 31458                                  
 31459 00004E5A 50                      	push	ax			;AN000; get CAPS table thru DOS call
 31460 00004E5B 51                      	push	cx			;AN000;
 31461 00004E5C 52                      	push	dx			;AN000;
 31462 00004E5D 0E                      	push	cs			;AC036; pass current base seg into
 31463                                  					;(Note: this used to push CS. BUG...
 31464 00004E5E 07                      	pop	es			;AN000;   ES reg, required for
 31465                                  					;get extended country information
 31466                                  	; 31/03/2023
 31467 00004E5F B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 31468                                  	;mov	ah,65h
 31469 00004E61 88D0                    	mov	al,dl			;AN000; upper case table
 31470                                  	;mov	bx,-1 ; 0FFFFh
 31471                                  	;mov	cx,5
 31472                                  	;mov	dx,-1
 31473 00004E63 BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 31474 00004E66 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 31475                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31476 00004E69 89DA                    	mov	dx,bx
 31477                                  	;mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 31478                                  					;DI already set to point to buffer
 31479 00004E6B CD21                    	int	21h			;AN000; es:di point to buffer that
 31480                                  					;now has been filled in with info
 31481 00004E6D 5A                      	pop	dx			;AN000;
 31482 00004E6E 59                      	pop	cx			;AN000;
 31483 00004E6F 58                      	pop	ax			;AN000;
 31484                                  
 31485                                  $P_DCC01:				;AN000;
 31486                                  
 31487                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 31488                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 31489                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 31490                                  
 31491                                  	;mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 31492                                  	;;mov	bx,[cs:di+1]		;AN000; get offset of table
 31493                                  	;mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 31494                                  	;;mov	es,[cs:di+3]		;AN000; get segment of table
 31495                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31496                                  	;les	bx,[cs:di+1]
 31497 00004E70 2EC45D01                	les	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 31498                                  	;
 31499 00004E74 43                      	inc	bx			;AC035; add '2' to
 31500 00004E75 43                      	inc	bx			;AC035;  BX reg
 31501                                  					;AN000; skip length field
 31502 00004E76 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 31503                                  	;xlat	es:[bx] 		;AN000; perform case map
 31504                                  	; 31/03/2023
 31505 00004E78 26D7                    	es	xlat
 31506                                  
 31507 00004E7A 5F                      	pop	di			;AN000;
 31508 00004E7B 07                      	pop	es			;AN000;
 31509 00004E7C 5B                      	pop	bx			;AN000;
 31510                                  $P_CAPS_Ret:				;AN000;
 31511 00004E7D C3                      	retn
 31512                                  
 31513                                  ;***********************************************************************
 31514                                  ; $P_Value / $P_SValue
 31515                                  ;
 31516                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 31517                                  ;	     and make result buffer.
 31518                                  ;	     $P_SValue is an entry point for the signed value
 31519                                  ;	     and this will simply call $P_Value after the handling
 31520                                  ;	     of the sign character, "+" or "-"
 31521                                  ;
 31522                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31523                                  ;	     ES:BX -> CONTROL block
 31524                                  ;
 31525                                  ; Output:    None
 31526                                  ;
 31527                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 31528                                  ;
 31529                                  ; Vars: $P_RC(W), $P_Flags(RW)
 31530                                  ;***********************************************************************
 31531                                  
 31532                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31533                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31534                                  $P_SValue:
 31535 00004E7E 50                      	push	ax			;AN000;
 31536                                  	;or	byte [cs:$P_Flags2],80h
 31537 00004E7F 2E800E[4F99]80          	or	byte [cs:$P_Flags2],$P_Signed
 31538                                  					;AC034; indicate a signed numeric
 31539                                  	;and	byte [cs:$P_Flags2],0FDh
 31540 00004E85 2E8026[4F99]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 31541                                  					;AC034; assume positive value
 31542 00004E8B 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 31543 00004E8E 3C2B                    	cmp	al,'+' ; 2Bh
 31544                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 31545 00004E90 740A                    	je	short $P_SVal00		;AN000;
 31546                                  
 31547 00004E92 3C2D                    	cmp	al,'-' ; 2Dh
 31548                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 31549 00004E94 7507                    	jne	short $P_Sval01		;AN000; else
 31550                                  
 31551 00004E96 2E800E[4F99]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 31552                                  					;AC034; set this is negative value
 31553                                  $P_SVal00:				;AN000;
 31554 00004E9C 46                      	inc	si			;AN000; skip sign char
 31555                                  $P_Sval01:				;AN000;
 31556 00004E9D E80200                  	call	$P_Value		;AN000; and process value
 31557 00004EA0 58                      	pop	ax			;AN000;
 31558                                  $P_Check_OVF_ok: ; 11/08/2024
 31559 00004EA1 C3                      	retn				;AN000;
 31560                                  
 31561                                  ;***********************************************************************
 31562                                  
 31563                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31564                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 31565                                  
 31566                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31567                                  	; MSDOS 6.2 COMMAND.COM - TRANGROUP:5119h
 31568                                  
 31569                                  	; 11/08/2024
 31570                                  $P_Value:
 31571 00004EA2 50                      	push	ax			;AN000;
 31572 00004EA3 51                      	push	cx			;AN000;
 31573 00004EA4 52                      	push	dx			;AN000;
 31574 00004EA5 56                      	push	si			;AN000;
 31575 00004EA6 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 31576 00004EA8 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 31577 00004EAA 53                      	push	bx			;AN000; save control pointer
 31578                                  $P_Value_Loop:				;AN000;
 31579 00004EAB 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31580 00004EAE 08C0                    	or	al,al			;AN000; end of line ?
 31581 00004EB0 7436                    	jz	short $P_Value00	;AN000;
 31582                                  
 31583 00004EB2 E8DF00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 31584 00004EB5 722D                    	jc	short $P_Value_Err0	;AN000;
 31585                                  
 31586                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31587                                  %if 0
 31588                                  	xor	ah,ah			;AN000;
 31589                                  	mov	bp,ax			;AN000; save binary number
 31590                                  	shl	dx,1			;AN000; to have 2*x
 31591                                  	rcl	cx,1			;AN000; shift left w/ carry
 31592                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31593                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31594                                  
 31595                                  	mov	bx,dx			;AN000; save low(2*x)
 31596                                  	mov	ax,cx			;AN000; save high(2*x)
 31597                                  	shl	dx,1			;AN000; to have 4*x
 31598                                  	rcl	cx,1			;AN000; shift left w/ carry
 31599                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31600                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31601                                  
 31602                                  	shl	dx,1			;AN000; to have 8*x
 31603                                  	rcl	cx,1			;AN000; shift left w/ carry
 31604                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31605                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31606                                  
 31607                                  	add	dx,bx			;AN000; now have 10*x
 31608                                  	adc	cx,ax			;AN000; 32bit ADD
 31609                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31610                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31611                                  
 31612                                  	add	dx,bp			;AN000; Add the current one degree decimal
 31613                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 31614                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31615                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 31616                                  
 31617                                  	inc	si			;AN000; update pointer
 31618                                  	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 31619                                  %else
 31620 00004EB7 30E4                    	xor	ah,ah
 31621 00004EB9 89C5                    	mov	bp,ax			; save binary number
 31622 00004EBB E81C00                  	call	$P_Check_OVF_shl32	; check Overflow (after shl32)
 31623 00004EBE 89D3                    	mov	bx,dx			; save low(2*x)
 31624 00004EC0 89C8                    	mov	ax,cx			; save high(2*x)
 31625 00004EC2 E81500                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 31626 00004EC5 E81200                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 31627 00004EC8 01DA                    	add	dx,bx			; now have 10*x
 31628 00004ECA 11C1                    	adc	cx,ax			; 32bit ADD
 31629 00004ECC E80F00                  	call	$P_Check_OVF_@		; check OverFlow
 31630 00004ECF 01EA                    	add	dx,bp			; Add the current one degree decimal
 31631 00004ED1 83D100                  	adc	cx,0			; if carry, add 1 to high 16bit
 31632 00004ED4 E80700                  	call	$P_Check_OVF_@		; check Overflow
 31633 00004ED7 46                      	inc	si			; update pointer
 31634 00004ED8 EBD1                    	jmp	short $P_Value_Loop	; loop until NULL encountered
 31635                                  
 31636                                  $P_Check_OVF_shl32:
 31637 00004EDA D1E2                    	shl	dx,1
 31638 00004EDC D1D1                    	rcl	cx,1
 31639                                  $P_Check_OVF_@:
 31640 00004EDE E8A100                  	call	$P_Check_OVF
 31641                                  	;jc	short $P_Value_Err0_@
 31642                                  	;retn
 31643                                  	; 11/08/2024
 31644 00004EE1 73BE                    	jnc	short $P_Check_OVF_ok
 31645                                  
 31646                                  $P_Value_Err0_@:
 31647                                  	;inc	sp
 31648                                  	;inc	sp
 31649                                  	; 11/08/2024
 31650 00004EE3 5B                      	pop	bx
 31651                                  %endif
 31652                                  
 31653                                  $P_Value_Err0:				;AN000;
 31654 00004EE4 5B                      	pop	bx			;AN000;
 31655 00004EE5 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 31656                                  
 31657                                  $P_Value00:				;AN000;
 31658 00004EE8 5B                      	pop	bx			;AN000; restore control pointer
 31659 00004EE9 2EF606[4F99]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 31660                                  					;AC034; here cx,dx = 32bit value
 31661 00004EEF 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 31662                                  
 31663 00004EF1 F7D1                    	not	cx			;AN000; +
 31664 00004EF3 F7D2                    	not	dx			;AN000; |- Make 2's complement
 31665 00004EF5 83C201                  	add	dx,1			;AN000; |
 31666 00004EF8 83D100                  	adc	cx,0			;AN000; +
 31667                                  $P_Value01:				;AN000; / nval =0
 31668 00004EFB 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31669                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 31670 00004EFF 268A04                  	mov	al,[es:si]		;AN000; get nval
 31671 00004F02 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 31672 00004F04 7505                    	jne	short $P_Value02	;AN000;
 31673                                  
 31674                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 31675                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 31676                                  	; 31/03/2023
 31677 00004F06 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 31678 00004F09 EB6F                    	jmp	short $P_Value_Exit	;AN000;
 31679                                  
 31680                                  $P_Value02:				;AN000; / nval = 1
 31681 00004F0B 46                      	inc	si			;AN000;
 31682 00004F0C 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 31683 00004F0F 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 31684 00004F11 745D                    	je	short $P_Value03	;AN000; (tm07)
 31685                                  
 31686 00004F13 46                      	inc	si			;AN000; si points to 1st item_tag
 31687                                  $P_Val02_Loop:				;AN000;
 31688 00004F14 2EF606[4F99]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 31689                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 31690 00004F1A 751E                    	jnz	short $P_Val02_Sign	;AN000;
 31691                                  
 31692 00004F1C 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 31693                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 31694 00004F20 723B                    	jb	short $P_Val02_Next	;AN000;
 31695 00004F22 7706                    	ja	short $P_Val_In		;AN000;
 31696                                  
 31697 00004F24 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 31698                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 31699 00004F28 7233                    	jb	short $P_Val02_Next	;AN000;
 31700                                  
 31701                                  $P_Val_In:				;AN000;
 31702 00004F2A 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 31703                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 31704 00004F2E 772D                    	ja	short $P_Val02_Next	;AN000;
 31705 00004F30 7224                    	jb	short $P_Val_Found	;AN000;
 31706                                  
 31707 00004F32 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 31708                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 31709 00004F36 7725                    	ja	short $P_Val02_Next	;AN000;
 31710                                  
 31711 00004F38 EB1C                    	jmp	short $P_Val_Found	;AN000;
 31712                                  
 31713                                  $P_Val02_Sign:				;AN000;
 31714 00004F3A 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 31715                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 31716 00004F3E 7C1D                    	jl	short $P_Val02_Next	;AN000;
 31717 00004F40 7F06                    	jg	short $P_SVal_In	;AN000;
 31718                                  
 31719 00004F42 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 31720                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 31721 00004F46 7C15                    	jl	short $P_Val02_Next	;AN000;
 31722                                  
 31723                                  $P_SVal_In:				;AN000;
 31724 00004F48 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 31725                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 31726 00004F4C 7F0F                    	jg	short $P_Val02_Next	;AN000;
 31727 00004F4E 7C06                    	jl	short $P_Val_Found	;AN000;
 31728                                  
 31729 00004F50 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 31730                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 31731 00004F54 7F07                    	jg	short $P_Val02_Next	;AN000;
 31732                                  
 31733                                  	;jmp	short $P_Val_Found	;AN000;
 31734                                  	; 27/04/2023
 31735                                  $P_Val_Found:				;AN000;
 31736 00004F56 B001                    	mov	al,$P_Number ; 1	;AN000;
 31737 00004F58 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31738 00004F5B EB1D                    	jmp	short $P_Value_Exit	;AN000;
 31739                                  
 31740                                  $P_Val02_Next:				;AN000;
 31741 00004F5D 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 31742 00004F60 FEC8                    	dec	al			;AN000; loop nrng times in AL
 31743 00004F62 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 31744                                  					; / Not found
 31745 00004F64 2EC706[4399]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 31746                                  	;mov	word [cs:$P_RC],6	;AC034;
 31747                                  	
 31748                                  	;mov	al,$P_Number ; 1	;AN000;
 31749                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31750                                  	; 31/03/2023
 31751 00004F6B B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 31752 00004F6E EB0A                    	jmp	short $P_Value_Exit	;AN000;
 31753                                  
 31754                                  	; 27/04/2023
 31755                                  ;$P_Val_Found:				;AN000;
 31756                                  	;mov	al,$P_Number ; 1	;AN000;
 31757                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31758                                  	;jmp	short $P_Value_Exit	;AN000;
 31759                                  
 31760                                  $P_Value03:				;AN000; / nval = 2
 31761                                  $P_Value04:				;AN000; / nval = 3 or else
 31762                                  $P_Value_Err:				;AN000;
 31763 00004F70 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 31764                                  					;AC034;
 31765                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31766                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31767                                  	; 31/03/2023
 31768 00004F77 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31769                                  $P_Value_Exit:				;AN000;
 31770 00004F7A E81AFD                  	call	$P_Fill_Result		;AN000;
 31771 00004F7D 5E                      	pop	si			;AN000;
 31772 00004F7E 5A                      	pop	dx			;AN000;
 31773 00004F7F 59                      	pop	cx			;AN000;
 31774 00004F80 58                      	pop	ax			;AN000;
 31775 00004F81 C3                      	retn				;AN000;
 31776                                  
 31777                                  ;***********************************************************************
 31778                                  ; $P_Check_OVF
 31779                                  ;
 31780                                  ; Function:  Check if overflow is occurred with consideration of
 31781                                  ;	     signed or un-signed numeric value
 31782                                  ;
 31783                                  ; Input:     Flag register
 31784                                  ;
 31785                                  ; Output:    CY = 1  :	Overflow
 31786                                  ;
 31787                                  ; Vars:     $P_Flags(R)
 31788                                  ;***********************************************************************
 31789                                  
 31790                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31791                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31792                                  $P_Check_OVF:
 31793 00004F82 9C                      	pushf				;AN000;
 31794 00004F83 2EF606[4F99]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 31795                                  					;AC034; is it negative value ?
 31796 00004F89 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 31797 00004F8B 9D                      	popf				;AN000; by the CY bit
 31798 00004F8C C3                      	retn				;AN000;
 31799                                  $P_COVF:				;AN000;
 31800 00004F8D 9D                      	popf				;AN000; else,
 31801 00004F8E 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 31802 00004F90 F8                      	clc				;AN000; indicate it with CY bit
 31803 00004F91 C3                      	retn				;AN000; CY=0 means no overflow
 31804                                  $P_0099Err:	; 31/03/2023
 31805                                  $P_COVF00:				;AN000;
 31806 00004F92 F9                      	stc				;AN000; and CY=1 means overflow
 31807                                  $P_0099Err2:	; 31/03/2023
 31808 00004F93 C3                      	retn				;AN000;
 31809                                  
 31810                                  ;***********************************************************************
 31811                                  ; $P_0099;
 31812                                  ;
 31813                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 31814                                  ;
 31815                                  ; Input:     AL = character code
 31816                                  ;
 31817                                  ; Output:    CY = 1 : AL is not number
 31818                                  ;	     CY = 0 : AL contains binary value
 31819                                  ;***********************************************************************
 31820                                  
 31821                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31822                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31823                                  $P_0099:
 31824 00004F94 3C30                    	cmp	al,"0"                  ;AN000;
 31825                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 31826                                  	; 31/03/2023
 31827 00004F96 72FB                    	jb	short $P_0099Err2
 31828                                  
 31829 00004F98 3C39                    	cmp	al,"9"                  ;AN000;
 31830 00004F9A 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 31831                                  
 31832 00004F9C 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 31833                                  	; 31/03/2023
 31834                                  	;clc				;AN000; indicate no error
 31835 00004F9E C3                      	retn				;AN000;
 31836                                  	 ;31/03/2023
 31837                                  ;$P_0099Err:				;AN000;
 31838                                  ;	stc				;AN000; indicate error
 31839                                  ;	retn				;AN000;
 31840                                  
 31841                                  ;***********************************************************************
 31842                                  ; $P_Simple_String
 31843                                  ;
 31844                                  ; Function:  See value list for the simple string
 31845                                  ;	     and make result buffer.
 31846                                  ;
 31847                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31848                                  ;	     ES:BX -> CONTROL block
 31849                                  ;
 31850                                  ; Output:    None
 31851                                  ;
 31852                                  ; Use:	$P_Fill_Result, $P_String_Comp
 31853                                  ;
 31854                                  ; Vars: $P_RC(W)
 31855                                  ;***********************************************************************
 31856                                  
 31857                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31858                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31859                                  $P_Simple_String:
 31860 00004F9F 50                      	push	ax			;AN000;
 31861 00004FA0 53                      	push	bx			;AN000;
 31862 00004FA1 52                      	push	dx			;AN000;
 31863 00004FA2 57                      	push	di			;AN000;
 31864 00004FA3 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31865                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 31866 00004FA7 268A05                  	mov	al,[es:di]		;AN000; get nval
 31867 00004FAA 08C0                    	or	al,al			;AN000; no value list ?
 31868 00004FAC 7502                    	jnz	short $P_Sim00		;AN000; then
 31869                                  	; 31/03/2023
 31870                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31871 00004FAE EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 31872                                  $P_Sim00:				;AN000;
 31873 00004FB0 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 31874 00004FB2 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 31875                                  
 31876 00004FB4 47                      	inc	di			;AN000;
 31877 00004FB5 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 31878 00004FB8 B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 31879 00004FBA F6E4                    	mul	ah			;AN000;  Skip nrng field
 31880 00004FBC 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 31881 00004FBD 01C7                    	add	di,ax			;AN000; di points to nnval
 31882 00004FBF 268A05                  	mov	al,[es:di]		;AN000; get nnval
 31883 00004FC2 B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 31884 00004FC4 F6E4                    	mul	ah			;AN000; Skip nnval field
 31885 00004FC6 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 31886 00004FC7 01C7                    	add	di,ax			;AN000; di points to nstrval
 31887 00004FC9 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 31888 00004FCC 47                      	inc	di			;AC035; add '2' to
 31889 00004FCD 47                      	inc	di			;AC035;  DI reg
 31890                                  					;AN000; di points to 1st string in list
 31891                                  $P_Sim_Loop:				;AN000;
 31892 00004FCE 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 31893 00004FD1 E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 31894 00004FD4 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 31895                                  
 31896 00004FD6 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 31897 00004FD9 FEC8                    	dec	al			;AN000; loop nstval times in AL
 31898 00004FDB 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 31899                                  					;AN000; / Not found
 31900 00004FDD 2EC706[4399]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 31901                                  	;mov	[cs:$P_RC],8		;AC034;
 31902                                  	; 31/03/2023
 31903                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31904 00004FE4 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 31905                                  $P_Sim_Found:				;AN000;
 31906 00004FE6 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 31907 00004FEA B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 31908 00004FEC 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 31909 00004FEF EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 31910                                  $P_Sim01:				;AN000;
 31911 00004FF1 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 31912                                  	;mov	word [cs:$P_RC],9	;AC034;
 31913                                  $P_Sim_Exit:
 31914                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31915                                  ;$P_Sim_Exit:				;AN000;
 31916                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31917                                  	; 31/03/2023
 31918 00004FF8 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31919                                  $P_Sim_Exit0:				;AN000;
 31920 00004FFB E899FC                  	call	$P_Fill_Result		;AN000;
 31921 00004FFE 5F                      	pop	di			;AN000;
 31922 00004FFF 5A                      	pop	dx			;AN000;
 31923 00005000 5B                      	pop	bx			;AN000;
 31924 00005001 58                      	pop	ax			;AN000;
 31925 00005002 C3                      	retn				;AN000;
 31926                                  
 31927                                  ;***********************************************************************
 31928                                  ; $P_String_Comp:
 31929                                  ;
 31930                                  ; Function:  Compare two string
 31931                                  ;
 31932                                  ; Input:     psdata_seg:SI -> 1st string
 31933                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 31934                                  ;	     ES:BX -> CONTROL block
 31935                                  ;
 31936                                  ; Output:    CY = 1 if not match
 31937                                  ;
 31938                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 31939                                  ;
 31940                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 31941                                  ;***********************************************************************
 31942                                  
 31943                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31944                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31945                                  $P_String_Comp:
 31946 00005003 50                      	push	ax			;AN000;
 31947 00005004 55                      	push	bp			;AN000;
 31948 00005005 52                      	push	dx			;AN000;
 31949 00005006 56                      	push	si			;AN000;
 31950 00005007 B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 31951                                  $P_SCOM_Loop:				;AN000;
 31952 00005009 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 31953 0000500C E89A04                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 31954 0000500F 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 31955                                  
 31956 00005011 E822FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 31957                                  	
 31958 00005014 2EF606[4F99]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 31959                                  					;AC034; keyword search ?
 31960 0000501A 740D                    	jz	short $P_SCOM04		;AN000;
 31961                                  
 31962                                  	;cmp	al,'=' ; 3Dh
 31963 0000501C 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 31964 0000501E 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 31965                                  
 31966 00005020 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 31967 00005025 7562                    	jne	short $P_SCOM_Differ	;AN021;
 31968                                  
 31969 00005027 EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 31970                                  
 31971                                  $P_SCOM04:				;AN000;
 31972 00005029 2EF606[4F99]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h 
 31973                                  					;AC034; switch search ?
 31974 0000502F 740E                    	jz	short $P_SCOM03		;AN000;
 31975                                  
 31976 00005031 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 31977 00005033 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 31978                                  
 31979 00005035 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 31980 0000503A 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 31981                                  
 31982                                  $P_SCOM05:				;AN000;   found a match
 31983 0000503C 46                      	inc	si			;AN000; si points to just after "=" or ":"
 31984 0000503D EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 31985                                  
 31986                                  $P_SCOM03:				;AN000;
 31987 0000503F 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 31988 00005043 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 31989                                  
 31990 00005045 08C0                    	or	al,al			;AN000; end of line
 31991 00005047 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 31992                                  
 31993 00005049 46                      	inc	si			;AN000; update operand pointer
 31994 0000504A 45                      	inc	bp			;AN000;    and synonym pointer
 31995 0000504B EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 31996                                  
 31997                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 31998 0000504D 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 31999 00005051 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 32000                                  
 32001 00005053 46                      	inc	si			;AN000; else, load next byte
 32002 00005054 2E8A04                  	mov	al,[cs:si]		;AN000; and
 32003 00005057 45                      	inc	bp			;AN000;
 32004 00005058 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 32005 0000505C 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 32006                                  
 32007 0000505E 46                      	inc	si			;AN000; else update operand pointer
 32008 0000505F 45                      	inc	bp			;AN000; 	and synonym pointer
 32009                                  $P_SCOM01:				;AN000;
 32010 00005060 EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 32011                                  
 32012                                  $P_SCOM_Differ0:			;AN000;
 32013 00005062 2EF606[4F99]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h
 32014                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 32015 00005068 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 32016                                  
 32017                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 32018                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 32019                                  	; 03/04/2023
 32020 0000506A 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 32021 0000506F 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 32022                                  
 32023 00005071 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 32024 00005076 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 32025                                  
 32026                                  $P_not_applicable:			;AN000;(tm10)
 32027                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32028                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 32029                                  	; 03/04/2023
 32030 00005078 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32031 0000507C 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 32032                                  
 32033 0000507E 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 32034 00005080 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 32035                                  
 32036 00005082 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 32037                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 32038                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 32039                                  	; 01/04/2023
 32040 00005087 740E                    	je	short $P_SCOM_Same
 32041                                  $P_SCOM_Differ:
 32042 00005089 F9                      	stc
 32043 0000508A EB10                    	jmp	short $P_SCOM_Exit
 32044                                  
 32045                                  $P_SCOM02:				;AN000;
 32046 0000508C 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 32047 0000508E 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 32048                                  
 32049                                  	;cmp	byte [es:bp],':'
 32050 00005090 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 32051                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 32052                                  	; 01/04/2023
 32053 00005095 75F2                    	jne	short $P_SCOM_Differ
 32054                                  ;$P_SCOM_Differ: 			;AN000;
 32055                                  	;stc				;AN000; indicate not found
 32056                                  	;jmp	short $P_SCOM_Exit	;AN000;
 32057                                  
 32058                                  $P_SCOM_Same:				;AN000;
 32059 00005097 2E8936[5299]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 32060                                  	; 01/04/2023
 32061                                  	;clc
 32062                                  	; cf = 0			;AN000; indicate found
 32063                                  $P_SCOM_Exit:				;AN000;
 32064 0000509C 5E                      	pop	si			;AN000;
 32065 0000509D 5A                      	pop	dx			;AN000;
 32066 0000509E 5D                      	pop	bp			;AN000;
 32067 0000509F 58                      	pop	ax			;AN000;
 32068 000050A0 C3                      	retn				;AN000;
 32069                                  
 32070                                  ;***********************************************************************
 32071                                  ; $P_Date_Format
 32072                                  ;
 32073                                  ; Function:  Convert a date string to DOS date format for int 21h
 32074                                  ;	     with format validation.
 32075                                  ;
 32076                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32077                                  ;	     ES:BX -> CONTROL block
 32078                                  ;
 32079                                  ; Output:    None
 32080                                  ;
 32081                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 32082                                  ;
 32083                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 32084                                  ;***********************************************************************
 32085                                  
 32086                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32087                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32088                                  	; 11/08/2024
 32089                                  $P_Date_Format:
 32090 000050A1 50                      	push	ax			;AN000;
 32091 000050A2 51                      	push	cx			;AN000;
 32092 000050A3 52                      	push	dx			;AN000;
 32093 000050A4 56                      	push	si			;AN000;
 32094 000050A5 53                      	push	bx			;AN000;
 32095 000050A6 56                      	push	si			;AN000;
 32096 000050A7 E8A400                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 32097                                  	; 03/04/2023
 32098                                  	;pop	si			;AN000;
 32099                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 32100                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 32101                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 32102 000050AA 31F6                    	xor	si,si
 32103 000050AC 2E8936[019A]            	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 32104 000050B1 2E8936[039A]            	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 32105                                  	; 11/08/2024
 32106 000050B6 2E8936[059A]            	mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 32107 000050BB 5E                      	pop	si
 32108 000050BC E8A900                  	call	$P_Get_DecNum		;AN000; get 1st number
 32109                                  	;jc	short $P_DateF_Err0	;AN000;-----------------------+
 32110                                  	; 11/08/2024
 32111 000050BF 727A                    	jc	short $P_DateF_Error
 32112 000050C1 2EA3[019A]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 32113 000050C5 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 32114 000050C7 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 32115 000050C9 E89C00                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 32116 000050CC 726D                    	jc	short $P_DateF_Error	;AN000; 		      |
 32117 000050CE 2EA3[039A]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 32118 000050D2 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 32119 000050D4 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 32120 000050D6 E88F00                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 32121                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 32122 000050D9 7260                    	jc	short $P_DateF_Error	;AN000;
 32123 000050DB 2EA3[059A]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 32124 000050DF 08DB                    	or	bl,bl			;AN000; end of line ?
 32125 000050E1 7558                    	jnz	short $P_DateF_Error	;AN000;
 32126                                  $P_DateF_YMD:				;AN000;
 32127 000050E3 2E8B1E[DF99]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 32128                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 32129 000050E8 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 32130 000050EB 7422                    	je	short $P_DateF00	;AN000;
 32131 000050ED 2EA1[019A]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 32132 000050F1 08E4                    	or	ah,ah			;AN000;
 32133 000050F3 7546                    	jnz	short $P_DateF_Error	;AN000;
 32134 000050F5 88C1                    	mov	cl,al			;AN000; set month
 32135 000050F7 2EA1[039A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32136 000050FB 08E4                    	or	ah,ah			;AN000; if overflow, error.
 32137 000050FD 753C                    	jnz	short $P_DateF_Error	;AN000;
 32138 000050FF 88C5                    	mov	ch,al			;AN000; set date
 32139 00005101 2E8B16[059A]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 32140 00005106 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 32141 00005109 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 32142 0000510B 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 32143                                  $P_DateF01:				;AN000;
 32144 0000510D EB19                    	jmp	short $P_DateF02	;AN000;
 32145                                  $P_DateF00:				;AN000; / here format = YMD
 32146 0000510F 2E8B16[019A]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 32147 00005114 2EA1[039A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32148 00005118 08E4                    	or	ah,ah			;AN000; if overflow, error
 32149 0000511A 751F                    	jnz	short $P_DateF_Error	;AN000;
 32150                                  
 32151 0000511C 88C1                    	mov	cl,al			;AN000; set month
 32152 0000511E 2EA1[059A]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 32153 00005122 08E4                    	or	ah,ah			;AN000; if overflow, error
 32154 00005124 7515                    	jnz	short $P_DateF_Error	;AN000;
 32155 00005126 88C5                    	mov	ch,al			;AN000; set date
 32156                                  $P_DateF02:				;AN000;
 32157 00005128 83FA64                  	cmp	dx,100			;AN000; year is less that 100 ?
 32158 0000512B 7304                    	jae	short $P_DateF03	;AN000;
 32159 0000512D 81C26C07                	add	dx,1900 		;AN000; set year 19xx
 32160                                  $P_DateF03:				;AN000;
 32161 00005131 5B                      	pop	bx			;AN000; recover CONTROL block
 32162 00005132 5E                      	pop	si			;AN000; recover string pointer
 32163                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32164                                  	;mov	al,$P_Date_F ; 7	;AN000;   result
 32165                                  	; 03/04/2023
 32166 00005133 B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 32167 00005136 E85EFB                  	call	$P_Fill_Result		;AN000;        buffer
 32168 00005139 EB0F                    	jmp	short $P_Date_Format_Exit
 32169                                  					;AN000;	to Date
 32170                                  $P_DateF_Error: 			;AN000;
 32171 0000513B 5B                      	pop	bx			;AN000; recover CONTROL block
 32172 0000513C 5E                      	pop	si			;AN000; recover string pointer
 32173                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32174                                  	;mov	al,$P_String ; 3	;AN000;   result
 32175                                  	; 03/04/2023
 32176 0000513D B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32177 00005140 E854FB                  	call	$P_Fill_Result		;AN000; 	buffer
 32178                                  					;AN000; to string
 32179 00005143 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 32180                                  					;AC034; indicate syntax error
 32181                                  $P_Date_Format_Exit:			;AN000;
 32182 0000514A 5A                      	pop	dx			;AN000;
 32183 0000514B 59                      	pop	cx			;AN000;
 32184 0000514C 58                      	pop	ax			;AN000;
 32185 0000514D C3                      	retn				;AN000;
 32186                                  
 32187                                  ;***********************************************************************
 32188                                  ; $P_Set_CDI:
 32189                                  ;
 32190                                  ; Function: Read CDI from DOS if it has not been read yet
 32191                                  ;
 32192                                  ; Input:    None
 32193                                  ;
 32194                                  ; Output:   psdata_seg:SI -> CDI
 32195                                  ;
 32196                                  ; Use:	INT 21h w/ AH = 38h
 32197                                  ;***********************************************************************
 32198                                  
 32199                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32200                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32201                                  $P_Set_CDI:
 32202                                  	; 18/04/2023
 32203 0000514E 8D36[DF99]              	lea	si,$P_Country_Info	;AC034;
 32204                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 32205 00005152 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 32206                                  					;AN000; already read ?
 32207                                  	;je	short $P_Read_CDI	;AN000;
 32208                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 32209                                  	; 03/04/2023
 32210 00005156 750F                    	jne	short $P_Set_CDI_Exit
 32211                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 32212 00005158 1E                      	push	ds			;AN000;
 32213 00005159 52                      	push	dx			;AN000;
 32214 0000515A 50                      	push	ax			;AN000;
 32215 0000515B 0E                      	push	cs			;AC023;
 32216 0000515C 1F                      	pop	ds			;AN000; set segment register
 32217                                  	;mov	ax,3800h
 32218 0000515D B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 32219 00005160 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 32220 00005162 CD21                    	int	21h			;AN000;
 32221 00005164 58                      	pop	ax			;AN000;
 32222 00005165 5A                      	pop	dx			;AN000;
 32223 00005166 1F                      	pop	ds			;AN000;
 32224                                  $P_Set_CDI_Exit:			;AN000;
 32225 00005167 C3                      	retn				;AN000;
 32226                                  
 32227                                  ;***********************************************************************
 32228                                  ; $P_Get_DecNum:
 32229                                  ;
 32230                                  ; Function:  Read a character code from psdata_seg:SI until specified delimiter
 32231                                  ;	     or NULL encountered. And make a decimal number.
 32232                                  ;
 32233                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32234                                  ;
 32235                                  ; Output:    BL = delimiter code or NULL
 32236                                  ;	     AX = Decimal number
 32237                                  ;	     SI advanced to the next number
 32238                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 32239                                  ;
 32240                                  ; Use:	$P_0099
 32241                                  ;***********************************************************************
 32242                                  
 32243                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32244                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32245                                  $P_Get_DecNum:
 32246 00005168 51                      	push	cx			;AN000;
 32247 00005169 52                      	push	dx			;AN000;
 32248 0000516A 31C9                    	xor	cx,cx			;AN000; cx will have final value
 32249                                  $P_GetNum_Loop: 			;AN000;
 32250 0000516C 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32251 0000516F 08C0                    	or	al,al			;AN000; end of line ?
 32252 00005171 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 32253 00005173 2E803E[DE99]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 32254 00005179 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 32255                                  
 32256                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 32257                                  	;cmp	bl,$P_colon_period
 32258 0000517B 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 32259 0000517E 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 32260                                  
 32261 00005180 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 32262 00005182 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 32263                                  
 32264                                  	; 03/04/2023
 32265 00005184 EB08                    	jmp	short $P_Do_Time_Delim1
 32266                                  ;$P_Do_Time_Delim1:			;AN000;
 32267                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 32268                                  	;je	short $P_GetNum01	;AC023; yes, exit
 32269                                  	;
 32270                                  	;jmp	short $P_Neither_Delims ;AN023;
 32271                                  
 32272                                  $P_Do_Date_Delims:			;AN000;
 32273                                  ;Regardless of the date delimiter character specified in the country
 32274                                  ;dependent information, check for the presence of any one of these
 32275                                  ;three field delimiters: "-", "/", or ".".
 32276 00005186 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 32277 00005188 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 32278                                  
 32279 0000518A 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 32280 0000518C 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 32281                                  
 32282                                  $P_Do_Time_Delim1:  ; 03/04/2023
 32283 0000518E 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 32284 00005190 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 32285                                  
 32286                                  $P_Neither_Delims:			;AN023;
 32287 00005192 E8FFFD                  	call	$P_0099 		;AN000; convert it to binary
 32288 00005195 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 32289                                  
 32290 00005197 B400                    	mov	ah,0			;AN000;
 32291 00005199 91                      	xchg	ax,cx			;AN000;
 32292 0000519A BA0A00                  	mov	dx,10			;AN000;
 32293 0000519D F7E2                    	mul	dx			;AN000; ax = ax * 10
 32294 0000519F 09D2                    	or	dx,dx			;AN000; overflow
 32295 000051A1 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 32296                                  
 32297 000051A3 01C8                    	add	ax,cx			;AN000;
 32298 000051A5 720C                    	jc	short $P_GetNum_Exit	;AN000;
 32299                                  
 32300 000051A7 91                      	xchg	ax,cx			;AN000;
 32301 000051A8 46                      	inc	si			;AN000;
 32302 000051A9 EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 32303                                  
 32304                                  $P_GetNum00:				;AN000;
 32305 000051AB 88C3                    	mov	bl,al			;AN000; set bl to NULL
 32306                                  	;03/04/2023
 32307                                  	; cf=0
 32308                                  	;clc				;AN000; indicate no error
 32309 000051AD EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 32310                                  
 32311                                  $P_GetNum01:				;AN000;
 32312 000051AF 46                      	inc	si			;AN000; si points to next number
 32313                                  	;03/04/2023
 32314                                  	; cf=0
 32315                                  	;clc				;AN000; indicate no error
 32316 000051B0 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 32317                                  
 32318                                  $P_GetNum02:				;AN000;
 32319 000051B2 F9                      	stc				;AN000; indicate error
 32320                                  $P_GetNum_Exit: 			;AN000;
 32321 000051B3 89C8                    	mov	ax,cx			;AN000;return value
 32322 000051B5 5A                      	pop	dx			;AN000;
 32323 000051B6 59                      	pop	cx			;AN000;
 32324 000051B7 C3                      	retn				;AN000;
 32325                                  
 32326                                  ;***********************************************************************
 32327                                  ; $P_Time_Format
 32328                                  ;
 32329                                  ; Function:  Convert a time string to DOS time format for int 21h
 32330                                  ;	     with format validation.
 32331                                  ;
 32332                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32333                                  ;	     ES:BX -> CONTROL block
 32334                                  ;
 32335                                  ; Output:    None
 32336                                  ;
 32337                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 32338                                  ;
 32339                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 32340                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 32341                                  ;***********************************************************************
 32342                                  
 32343                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32344                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32345                                  	; 12/08/2024
 32346                                  $P_Time_Format:				;AN000;
 32347 000051B8 50                      	push	ax			;AN000;
 32348 000051B9 51                      	push	cx			;AN000;
 32349 000051BA 52                      	push	dx			;AN000;
 32350 000051BB 56                      	push	si			;AN000;
 32351 000051BC 53                      	push	bx			;AN000;
 32352 000051BD 56                      	push	si			;AN000;
 32353 000051BE E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 32354                                  					; information before process
 32355                                  	;test	byte [cs:si+11h], 1
 32356 000051C1 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 32357                                  					;AN000; 24 hour system
 32358 000051C6 5E                      	pop	si			;AN000;
 32359 000051C7 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 32360 000051C9 E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 32361                                  $P_TimeF00:				;AN000;
 32362                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 32363                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 32364                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 32365                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 32366                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 32367                                  	; 03/04/2023
 32368 000051CC 31DB                    	xor	bx,bx
 32369 000051CE 2E891E[019A]            	mov	[cs:$P_1st_Val],bx ; 0
 32370 000051D3 2E891E[039A]            	mov	[cs:$P_2nd_Val],bx ; 0
 32371 000051D8 2E891E[059A]            	mov	[cs:$P_3rd_Val],bx ; 0
 32372 000051DD 2E891E[079A]            	mov	[cs:$P_4th_Val],bx ; 0
 32373                                  	;inc	bl
 32374                                  	;mov	[cs:$P_Got_Time],bl ; 1
 32375                                  
 32376                                  	;mov	bl,$P_colon_period
 32377                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 32378                                  					; delimiters between hours,
 32379                                  					;  minutes,seconds
 32380                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 32381 000051E2 FEC3                    	inc	bl ; bl = 1
 32382 000051E4 2E881E[DE99]            	mov	[cs:$P_Got_Time],bl ; 1
 32383                                  	;
 32384 000051E9 E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 32385                                  	;jc	short $P_TimeF_Err0	;AN000;
 32386                                  	; 12/08/2024
 32387 000051EC 725A                    	jc	short $P_TimeF_Error
 32388 000051EE 2EA3[019A]              	mov	[cs:$P_1st_Val],ax	;AC034;
 32389 000051F2 08DB                    	or	bl,bl			;AN000; end of line ?
 32390 000051F4 7478                    	jz	short $P_TimeF_Rlt	;AN000;
 32391 000051F6 E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 32392                                  	;jc	short $P_TimeF_Err0	;AC038; if OK
 32393                                  	; 12/08/2024
 32394 000051F9 724D                    	jc	short $P_TimeF_Error
 32395 000051FB 2EA3[039A]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 32396 000051FF 08DB                    	or	bl,bl			;AN000; end of line ?
 32397 00005201 746B                    	jz	short $P_TimeF_Rlt	;AN000;
 32398 00005203 B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 32399 00005205 E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 32400                                  	;jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 32401                                  	; 12/08/2024
 32402 00005208 723E                    	jc	short $P_TimeF_Error
 32403 0000520A 2EA3[059A]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 32404 0000520E 08DB                    	or	bl,bl			;AN000; end of line ?
 32405 00005210 754F                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 32406                                  					;AN039;   GO TO 4TH NUMBER
 32407                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 32408 00005212 2EF606[4E99]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 32409                                  					;AN039;    BEEN REPEATED?
 32410 00005218 7554                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 32411                                  					;AN039;   the end of line
 32412                                  					;AN039; no, time has not been repeated
 32413 0000521A 2E8B36[4599]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 32414                                  					;AN039;   in command line
 32415 0000521F 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 32416                                  					;AN039; look at delimiter
 32417                                  					;AN039;   from command line
 32418 00005223 7549                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 32419                                  					;AN039;  really end of line
 32420                                  					;AN039; is comma before hundredths,
 32421                                  					;AN039;   redo TIME
 32422 00005225 C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 32423                                  					;AN039; change that ambiguous
 32424                                  					;AN039;    comma to a decimal point
 32425                                  					;AN039;     parse can understand
 32426 00005229 2EC706[4E99]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 32427                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 32428 00005230 2E800E[4E99]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 32429                                  					;AN039; is being repeated
 32430 00005236 2E8B0E[D899]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 32431 0000523B 2E8B26[DA99]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 32432                                  					;AN039;   OF STACK FROM SP
 32433 00005240 2E8B36[DC99]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 32434                                  					;AN039;   PARSE POINTER FROM SI
 32435 00005245 E927F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 32436                                  
 32437                                  	; 12/08/2024
 32438                                  $P_TimeF_Error: 			;AN000;
 32439                                  $P_TimeF_Err:				;AN000;
 32440 00005248 5B                      	pop	bx			;AN000; recover CONTROL block
 32441 00005249 5E                      	pop	si			;AN000; recover string pointer
 32442                                  	;mov	ah,$P_No_Tag		;AN000; set
 32443                                  	;mov	al,$P_String		;AN000;     result
 32444                                  	; 03/04/2023
 32445 0000524A B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32446 0000524D E847FA                  	call	$P_Fill_Result		;AN000; 	  buffer
 32447                                  					;AN000; to string
 32448 00005250 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 32449                                  					;AC034; return syntax error
 32450                                  $P_Time_Format_Exit:			;AN000;
 32451 00005257 2EC606[DE99]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 32452 0000525D 5A                      	pop	dx			;AN000;
 32453 0000525E 59                      	pop	cx			;AN000;
 32454 0000525F 58                      	pop	ax			;AN000;
 32455 00005260 C3                      	retn
 32456                                  
 32457                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 32458 00005261 E804FF                  	call	$P_Get_DecNum		;AN000; get 4th number
 32459                                  $P_TimeF_Err0:				;AN000; Bridge
 32460 00005264 72E2                    	jc	short $P_TimeF_Error	;AN000;
 32461                                  	;
 32462 00005266 2EA3[079A]              	mov	[cs:$P_4th_Val],ax	;AC034;
 32463 0000526A 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 32464 0000526C 75DA                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 32465                                  $P_TimeF_Rlt:				;AN000;
 32466 0000526E 2EA1[019A]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 32467 00005272 08E4                    	or	ah,ah			;AN000; if overflow then error
 32468 00005274 75D2                    	jnz	short $P_TimeF_Err	;AN000;
 32469                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 32470 00005276 2EF606[4E99]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 32471 0000527C 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 32472                                  					;since "AM" was specified,
 32473 0000527E 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 32474 00005280 77C6                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 32475 00005282 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 32476 00005284 30C0                    	xor	al,al			;AN038; set hour = zero
 32477                                  $P_Time_notAM:				;AN038;
 32478                                  	;test	byte [cs:$P_Flags2],$P_Time12
 32479 00005286 2EF606[4F99]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 32480 0000528C 740C                    	jz	short $P_TimeSkip00	;AN000; then
 32481 0000528E 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 32482 00005290 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 32483 00005292 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 32484 00005294 72B2                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 32485 00005296 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 32486 00005298 77AE                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 32487                                  $P_TimeSkip00:				;AN000;
 32488 0000529A 88C2                    	mov	dl,al			;AN000; set hour
 32489 0000529C 2EA1[039A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32490 000052A0 08E4                    	or	ah,ah			;AN000; if overflow then error
 32491 000052A2 75A4                    	jnz	short $P_TimeF_Err	;AN000;
 32492 000052A4 88C6                    	mov	dh,al			;AN000; set minute
 32493 000052A6 2EA1[059A]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 32494 000052AA 08E4                    	or	ah,ah			;AN000; if overflow then error
 32495 000052AC 759A                    	jnz	short $P_TimeF_Err	;AN000;
 32496 000052AE 88C1                    	mov	cl,al			;AN000; set second
 32497 000052B0 2EA1[079A]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 32498 000052B4 08E4                    	or	ah,ah			;AN000; if overflow then error
 32499 000052B6 7590                    	jnz	short $P_TimeF_Err	;AN000;
 32500 000052B8 88C5                    	mov	ch,al			;AN000; set hundredth
 32501 000052BA 5B                      	pop	bx			;AN000; recover CONTROL block
 32502 000052BB 5E                      	pop	si			;AN000; recover string pointer
 32503                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32504                                  	;mov	al,$P_Time_F ; 8 	;AN000;   result
 32505                                  	; 03/04/2023
 32506 000052BC B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 32507 000052BF E8D5F9                  	call	$P_Fill_Result		;AN000;        buffer
 32508 000052C2 EB93                    	jmp	short $P_Time_Format_Exit
 32509                                  					;AN000; to time
 32510                                  
 32511                                  ;***********************************************************************
 32512                                  ; $P_Time_2412:
 32513                                  ;
 32514                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 32515                                  ;
 32516                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32517                                  ;
 32518                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 32519                                  ;	     or "pm"
 32520                                  ;
 32521                                  ; Vars:  $P_Flags(W)
 32522                                  ;***********************************************************************
 32523                                  
 32524                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32525                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32526                                  $P_Time_2412:				;AN000;
 32527 000052C4 50                      	push	ax			;AN000;
 32528 000052C5 56                      	push	si			;AN000;
 32529                                  $P_T12_Loop:				;AN000;
 32530 000052C6 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 32531 000052C9 46                      	inc	si			;AN000;     si
 32532 000052CA 08C0                    	or	al,al			;AN000;       to
 32533 000052CC 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 32534                                  
 32535 000052CE 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 32536                                  	;or	al,20h
 32537 000052D2 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 32538 000052D4 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 32539 000052D6 7425                    	je	short $P_T1200		;AN000;
 32540                                  
 32541 000052D8 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 32542 000052DA 7413                    	je	short $P_T1201		;AN000;
 32543                                  
 32544 000052DC 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 32545 000052DE 751A                    	jne	short $P_T12_Exit	;AN000;
 32546                                  
 32547 000052E0 4E                      	dec	si			;AN000;
 32548 000052E1 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 32549                                  	;or	al,20h
 32550 000052E5 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 32551 000052E7 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 32552 000052E9 7412                    	je	short $P_T1200		;AN000;
 32553                                  
 32554 000052EB 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 32555                                  	;je	short $P_T1201		;AN000; go process "a"
 32556                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 32557                                  	; 05/04/2023
 32558 000052ED 750B                    	jne	short $P_T12_Exit
 32559                                  
 32560                                  ;$P_T1200:				;AN000; "P" found
 32561                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 32562                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 32563                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 32564                                  
 32565                                  $P_T1201:				;AN000; "A" found
 32566                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 32567 000052EF 2E800E[4E99]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 32568                                  $P_Tclr_chr:				;AN038;
 32569 000052F5 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 32570                                  $P_T12_Exit:				;AN000;
 32571 000052FA 5E                      	pop	si			;AN000;
 32572 000052FB 58                      	pop	ax			;AN000;
 32573 000052FC C3                      	retn				;AN000;
 32574                                  
 32575                                  	; 05/04/2023
 32576                                  $P_T1200:				;AN000; "P" found
 32577                                  	;or	byte [cs:$P_Flags2],$P_Time12
 32578 000052FD 2E800E[4F99]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 32579 00005303 EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 32580                                  
 32581                                  ;***********************************************************************
 32582                                  ; $P_File_Format;
 32583                                  ;
 32584                                  ; Function:  Check if the input string is valid file spec format.
 32585                                  ;	     And set the result buffer.
 32586                                  ;
 32587                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32588                                  ;	     ES:BX -> CONTROL block
 32589                                  ;
 32590                                  ; Output:    None
 32591                                  ;
 32592                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 32593                                  ;
 32594                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 32595                                  ;	$P_SaveSI_Cmpx(R)
 32596                                  ;***********************************************************************
 32597                                  
 32598                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32599                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 32600                                  
 32601                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32602                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:55B4h
 32603                                  $P_File_Format:
 32604 00005305 50                      	push	ax			;AN000;
 32605 00005306 57                      	push	di			;AN000;
 32606 00005307 56                      	push	si			;AN000;
 32607 00005308 2E8B3E[5099]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 32608 0000530D 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32609 00005310 08C0                    	or	al,al			;AN000; end of line ?
 32610 00005312 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 32611 00005314 E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 32612 00005317 7523                    	jne	short $P_FileF03	;AN000; if yes,
 32613 00005319 2EC606[1C9A]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 32614                                  					;AN033;AC034;; set error flag- bad char.
 32615 0000531F 5E                      	pop	si			;AN033;
 32616 00005320 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 32617 00005324 5F                      	pop	di			;AN033;
 32618 00005325 EB3E                    	jmp	short $P_FileF02	;AN033;
 32619                                  $P_FileF_Err:				;AN000;
 32620 00005327 5E                      	pop	si			;AN000;
 32621 00005328 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 32622 0000532C 5F                      	pop	di			;AN000;
 32623                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 32624                                  	;test	word [es:bx],1		;AN000; is it optional ?
 32625 0000532D 26F60701                	test	byte [es:bx],$P_Optional ; 1
 32626 00005331 7532                    	jnz	short $P_FileF02	;AN000;
 32627 00005333 2EC706[4399]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 32628                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 32629 0000533A EB29                    	jmp	short $P_FileF02	;AN000;
 32630                                  $P_FileF03:				;AN000;
 32631 0000533C 58                      	pop	ax			;AN000; discard save si
 32632 0000533D 56                      	push	si			;AN000; save new si
 32633                                  $P_FileF_Loop1: 			;AN000;
 32634 0000533E 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 32635 00005341 08C0                    	or	al,al			;AN000; end of line ?
 32636 00005343 741E                    	jz	short $P_FileF_RLT	;AN000;
 32637 00005345 E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 32638 00005348 740B                    	jz	short $P_FileF00	;AN000;
 32639 0000534A E85C01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 32640 0000534D 7302                    	jnc	short $P_FileF01	;AN000;
 32641 0000534F 47                      	inc	di			;AN000; if yes, skip next byte
 32642 00005350 46                      	inc	si			;AN000;
 32643                                  $P_FileF01:				;AN000;
 32644 00005351 47                      	inc	di			;AN000;
 32645 00005352 46                      	inc	si			;AN000;
 32646 00005353 EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 32647                                  $P_FileF00:				;AN000;
 32648 00005355 2EA2[4999]              	mov	[cs:$P_Terminator],al	;AC034;
 32649 00005359 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 32650 0000535D 47                      	inc	di			;AN000;
 32651 0000535E 2E893E[4599]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 32652                                  $P_FileF_RLT:				;AN000;
 32653 00005363 5E                      	pop	si			;AN000;
 32654 00005364 5F                      	pop	di			;AN000;
 32655                                  $P_FileF02:				;AN000;
 32656 00005365 58                      	pop	ax			;AN000; (tm14)
 32657                                  	;;test	ax,200h
 32658                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 32659                                  	; 05/04/2023
 32660 00005366 F6C402                  	test	ah,($P_File_Spc>>8)
 32661 00005369 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 32662 0000536B 50                      	push	ax			;AN000; (tm14)
 32663                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32664                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 32665                                  	; 05/04/2023
 32666 0000536C B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 32667 0000536F E825F9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 32668 00005372 58                      	pop	ax			;AN000;
 32669                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 32670 00005373 C3                      	retn				;AN000;
 32671                                  
 32672                                  ;***********************************************************************
 32673                                  ; $P_FileSp_Chk
 32674                                  ;
 32675                                  ; Function:  Check if the input byte is one of file special characters
 32676                                  ;
 32677                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32678                                  ;	     AL = character code to be examineed
 32679                                  ;
 32680                                  ; Output:    ZF = 1 , AL is one of special characters
 32681                                  ;***********************************************************************
 32682                                  
 32683                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32684                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32685                                  $P_FileSp_Chk:
 32686 00005374 53                      	push	bx			;AN000;
 32687 00005375 51                      	push	cx			;AN000;
 32688                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 32689 00005376 8D1E[139A]              	lea	bx,$P_FileSp_Char ; '[]|<>+=;"'
 32690 0000537A B90900                  	mov	cx,$P_FileSp_Len ; 9
 32691                                  	;mov	cx,9			;AN000; load length of it
 32692                                  $P_FileSp_Loop: 			;AN000;
 32693 0000537D 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 32694 00005380 7404                    	je	short $P_FileSp_Exit	;AN000;
 32695 00005382 43                      	inc	bx			;AN000;
 32696 00005383 E2F8                    	loop	$P_FileSp_Loop		;AN000;
 32697 00005385 41                      	inc	cx			;AN000; reset ZF
 32698                                  $P_FileSp_Exit: 			;AN000;
 32699 00005386 59                      	pop	cx			;AN000;
 32700 00005387 5B                      	pop	bx			;AN000;
 32701 00005388 C3                      	retn				;AN000;
 32702                                  
 32703                                  ;***********************************************************************
 32704                                  ; $P_Drive_Format;
 32705                                  ;
 32706                                  ; Function:  Check if the input string is valid drive only format.
 32707                                  ;	     And set the result buffer.
 32708                                  ;
 32709                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32710                                  ;	     ES:BX -> CONTROL block
 32711                                  ;
 32712                                  ; Output:    None
 32713                                  ;
 32714                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 32715                                  ;
 32716                                  ; Vars: $P_RC(W)
 32717                                  ;***********************************************************************
 32718                                  
 32719                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32720                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32721                                  $P_Drive_Format:
 32722 00005389 50                      	push	ax			;AN000;
 32723 0000538A 52                      	push	dx			;AN000;
 32724 0000538B 2E8A04                  	mov	al,[cs:si]		;AN000;
 32725 0000538E 08C0                    	or	al,al			;AN000; if null string
 32726 00005390 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 32727 00005392 E81401                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 32728 00005395 722A                    	jc	short $P_Drv_Err	;AN000;
 32729                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 32730 00005397 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 32731 0000539C 740D                    	je	short $P_DrvF00		;AN000;
 32732                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32733                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 32734 0000539E 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 32735 000053A2 741D                    	jz	short $P_Drv_Err	;AN000;
 32736 000053A4 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 32737 000053A9 7516                    	jne	short $P_Drv_Err	;AN000;
 32738                                  $P_DrvF00:				;AN000;
 32739 000053AB 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 32740 000053AD 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 32741 000053AF 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 32742 000053B1 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 32743 000053B3 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 32744 000053B5 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 32745 000053B7 88C2                    	mov	dl,al			;AN000; set
 32746                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 32747                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 32748                                  	; 05/04/2023
 32749 000053B9 B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 32750 000053BC E8D8F8                  	call	$P_Fill_Result		;AN000; 	       to drive
 32751 000053BF EB07                    	jmp	short $P_Drv_Exit	;AN000;
 32752                                  $P_Drv_Err:				;AN000;
 32753 000053C1 2EC706[4399]0900        	mov	word [cs:$P_RC],$P_Syntax
 32754                                  	;mov	word [cs:$P_RC],9	;AC034;
 32755                                  $P_Drv_Exit:				;AN000;
 32756 000053C8 5A                      	pop	dx			;AN000;
 32757 000053C9 58                      	pop	ax			;AN000;
 32758 000053CA C3                      	retn				;AN000;
 32759                                  
 32760                                  ;***********************************************************************
 32761                                  ; $P_Skip_Delim;
 32762                                  ;
 32763                                  ; Function: Skip delimiters specified in the PARMS list, white space
 32764                                  ;	    and comma.
 32765                                  ;
 32766                                  ; Input:    DS:SI -> Command String
 32767                                  ;	    ES:DI -> Parameter List
 32768                                  ;
 32769                                  ; Output:   CY = 1 if the end of line encounterd
 32770                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 32771                                  ;	    AL = Last examineed character
 32772                                  ;
 32773                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 32774                                  ;
 32775                                  ; Vars:     $P_Flags(R)
 32776                                  ;***********************************************************************
 32777                                  
 32778                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32779                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32780                                  $P_Skip_Delim:				;AN000;
 32781                                  $P_Skip_Delim_Loop:			;AN000;
 32782 000053CB AC                      	lodsb				;AN000;
 32783 000053CC E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 32784 000053CF 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 32785                                  
 32786 000053D1 E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 32787 000053D4 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 32788                                  
 32789 000053D6 2EF606[4F99]20          	test	byte [cs:$P_Flags2],$P_Extra
 32790                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 32791 000053DC 74ED                    	jz	short $P_Skip_Delim_Loop
 32792                                  					;AN000; if no, loop
 32793 000053DE 2EF606[4F99]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 32794                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 32795                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 32796                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 32797                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 32798                                  	; 05/04/2023
 32799 000053E4 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 32800                                  $P_Exit_At_Extra:			;AN000;
 32801                                  	; cf = 0
 32802                                  	;clc				;AN000; indicate extra delim
 32803 000053E6 C3                      	retn				;AN000;
 32804                                  
 32805                                  $P_Skip_Delim_CY:			;AN000;
 32806 000053E7 F9                      	stc				;AN000; indicate EOL
 32807 000053E8 EB01                    	jmp	short $P_Skip_Delim_Exit
 32808                                  					;AN000;
 32809                                  $P_Skip_Delim_NCY:			;AN000;
 32810 000053EA F8                      	clc				;AN000; indicate non delim
 32811                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 32812 000053EB 4E                      	dec	si ; *			;AN000;  backup index pointer
 32813 000053EC C3                      	retn				;AN000;
 32814                                  	; 05/04/2023
 32815                                  ;$P_Exit_At_Extra:			;AN000;
 32816                                  	;clc				;AN000; indicate extra delim
 32817                                  	;retn				;AN000;
 32818                                  
 32819                                  ;***********************************************************************
 32820                                  ; $P_Chk_EOL;
 32821                                  ;
 32822                                  ; Function: Check if AL is one of End of Line characters.
 32823                                  ;
 32824                                  ; Input:    AL = character code
 32825                                  ;	    ES:DI -> Parameter List
 32826                                  ;
 32827                                  ; Output:   ZF = 1 if one of End of Line characters
 32828                                  ;***********************************************************************
 32829                                  
 32830                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32831                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32832                                  $P_Chk_EOL:
 32833 000053ED 53                      	push	bx			;AN000;
 32834 000053EE 51                      	push	cx			;AN000;
 32835 000053EF 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 32836 000053F1 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32837 000053F3 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 32838 000053F5 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32839 000053F7 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 32840                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 32841 000053FC 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 32842 000053FE 31DB                    	xor	bx,bx			;AN000;
 32843 00005400 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32844                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 32845 00005404 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 32846 00005407 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 32847                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 32848 0000540B 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 32849 0000540D 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 32850 0000540F 268A09                  	mov	cl,[es:bx+di]		;AN000;
 32851                                  $P_Chk_EOL_Loop:			;AN000;
 32852 00005412 43                      	inc	bx			;AN000;
 32853 00005413 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 32854 00005416 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32855 00005418 E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 32856                                  $P_Chk_EOL_NZ:				;AN000;
 32857 0000541A 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 32858                                  $P_Chk_EOL_Exit:			;AN000;
 32859 0000541C 59                      	pop	cx			;AN000;
 32860 0000541D 5B                      	pop	bx			;AN000;
 32861 0000541E C3                      	retn				;AN000;
 32862                                  
 32863                                  ;***********************************************************************
 32864                                  ; $P_Chk_Delim;
 32865                                  ;
 32866                                  ; Function: Check if AL is one of delimiter characters.
 32867                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 32868                                  ;	    blanks.
 32869                                  ;
 32870                                  ; Input:    AL = character code
 32871                                  ;	    DS:SI -> Next Character
 32872                                  ;	    ES:DI -> Parameter List
 32873                                  ;
 32874                                  ; Output:   ZF = 1 if one of delimiter characters
 32875                                  ;	    SI points to the next character
 32876                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 32877                                  ;***********************************************************************
 32878                                  
 32879                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32880                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32881                                  	; 12/08/2024
 32882                                  $P_Chk_Delim:
 32883 0000541F 53                      	push	bx			;AN000;
 32884 00005420 51                      	push	cx			;AN000;
 32885 00005421 2EC606[4999]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 32886                                  					;AC034; Assume terminated by space
 32887 00005427 2E8026[4F99]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 32888                                  					;AC034;
 32889 0000542D 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 32890 0000542F 7434                    	je	short $P_Chk_Delim_Exit	;AN000;
 32891                                  
 32892 00005431 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 32893 00005433 7430                    	je	short $P_Chk_Delim_Exit	;AN000;
 32894                                  
 32895 00005435 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 32896 00005437 742F                    	je	short $P_Chk_Delim_Exit0
 32897                                  					;AN000;
 32898                                  $P_Chk_Delim00: 			;AN000;
 32899 00005439 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 32900 0000543B 750C                    	jne	short $P_Chk_Delim01	;AN000;
 32901 0000543D 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 32902                                  					;AN000; 2nd byte of DBCS Space ?
 32903 00005440 7507                    	jne	short $P_Chk_Delim01	;AN000;
 32904 00005442 B020                    	mov	al,$P_Space ; 20h	;AN000;
 32905 00005444 46                      	inc	si			;AN000; make si point to next character
 32906 00005445 38C0                    	cmp	al,al			;AN000; Set ZF
 32907 00005447 EB1C                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32908                                  
 32909                                  $P_Chk_Delim01: 			;AN000;
 32910                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 32911 00005449 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 32912                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 32913 0000544E 7215                    	jb	short $P_Chk_Delim_Exit	;AN000;
 32914                                  
 32915 00005450 31C9                    	xor	cx,cx			;AN000;
 32916 00005452 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32917                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 32918                                  	;or	cx,cx			;AN000; No extra Delim character ?
 32919                                  	;jz	short $P_Chk_Delim_NZ	;AN000;
 32920                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 32921 00005456 E30B                    	jcxz	$P_Chk_Delim_NZ
 32922                                  
 32923 00005458 BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 32924                                  $P_Chk_Delim_Loop:			;AN000;
 32925 0000545B 43                      	inc	bx			;AN000;
 32926 0000545C 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 32927 0000545F 7407                    	je	short $P_Chk_Delim_Exit0
 32928                                  					;AN000;
 32929 00005461 E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 32930                                  
 32931                                  $P_Chk_Delim_NZ:			;AN000;
 32932 00005463 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 32933                                  $P_Chk_Delim_Exit:			;AN000;
 32934 00005465 59                      	pop	cx			;AN000;
 32935 00005466 5B                      	pop	bx			;AN000;
 32936 00005467 C3                      	retn				;AN000;
 32937                                  
 32938                                  $P_Chk_Delim_Exit0:			;AN000;
 32939 00005468 2EA2[4999]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 32940 0000546C 2EF606[4F99]01          	test	byte [cs:$P_Flags2],$P_equ
 32941                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 32942 00005472 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 32943                                  
 32944 00005474 2E800E[4F99]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 32945                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 32946                                  $P_No_Set_Extra:			;AN027;
 32947 0000547A 38C0                    	cmp	al,al			;AN000; set ZF
 32948 0000547C EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32949                                  
 32950                                  ;***********************************************************************
 32951                                  ; $P_Chk_Switch;
 32952                                  ;
 32953                                  ; Function: Check if AL is the switch character not in first position of
 32954                                  ;	    $P_STRING_BUF
 32955                                  ;
 32956                                  ; Input:    AL = character code
 32957                                  ;	    BX = current pointer within $P_String_Buf
 32958                                  ;	    SI =>next char on command line (following the one in AL)
 32959                                  ;
 32960                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 32961                                  ;		 position, and has no chance of being part of a date string,
 32962                                  ;		 i.e. should be treated as a delimiter.
 32963                                  ;
 32964                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 32965                                  ;		 position, or is a slash but may be part of a date string, i.e.
 32966                                  ;		 should not be treated as a delimiter.
 32967                                  ;
 32968                                  ; Vars:  $P_Terminator(W)
 32969                                  ;
 32970                                  ; Use:	 $P_0099
 32971                                  ;***********************************************************************
 32972                                  
 32973                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32974                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32975                                  $P_Chk_Switch:
 32976                                  	; 18/04/2023
 32977 0000547E 8D2E[5899]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 32978                                  
 32979 00005482 39EB                    	cmp	bx,bp			;AN000;
 32980 00005484 7418                    	je	short $P_STRUC_L2	;AN000;
 32981                                  
 32982 00005486 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32983 00005488 7512                    	jne	short $P_STRUC_L5	;AN000;
 32984                                  
 32985 0000548A F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 32986 0000548B 50                      	push	ax			;AN020;save input char
 32987 0000548C 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 32988 00005490 E801FB                  	call	$P_0099 		;AN020;return carry set if not numeric
 32989 00005493 7205                    	jc	short $P_STRUC_L7	;AN000;
 32990                                  
 32991 00005495 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 32992 00005497 E8FAFA                  	call	$P_0099			;AN020;return carry set if not numeric
 32993                                  $P_STRUC_L7:				;AN000;
 32994 0000549A 58                      	pop	ax			;AN020;restore AL to input char
 32995                                  	;jmp	short $P_STRUC_L1	;AN000;
 32996                                  	; 18/04/2023
 32997 0000549B C3                      	retn
 32998                                  
 32999                                  $P_STRUC_L5:				;AN000;
 33000 0000549C F8                      	clc				;AN020;not a slash
 33001                                  	;jmp	short $P_STRUC_L1	;AN000;
 33002                                  	 ;18/04/2023
 33003 0000549D C3                      	retn
 33004                                  
 33005                                  $P_STRUC_L2:				;AN000;
 33006 0000549E 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 33007                                  	;jne	short $P_STRUC_L12	;AN000;
 33008                                  	; 18/04/2023
 33009 000054A0 75FA                    	jne	short $P_STRUC_L5
 33010                                  
 33011 000054A2 2E800E[4F99]40          	or	byte [cs:$P_Flags2],$P_SW
 33012                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 33013                                  	; 18/04/2023
 33014                                  ;$P_STRUC_L12:				;AN000;
 33015                                  	;clc				;AN020;CF=0 indicating first char
 33016                                  $P_STRUC_L1:				;AN000;
 33017 000054A8 C3                      	retn				;AN000;
 33018                                  
 33019                                  ;**************************************************************************
 33020                                  ; $P_Chk_DBCS:
 33021                                  ;
 33022                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 33023                                  ;
 33024                                  ;  Input:
 33025                                  ;	  AL	= Code to be examineed
 33026                                  ;
 33027                                  ;  Output:
 33028                                  ;	  If CF is on then a lead byte of DBCS
 33029                                  ;
 33030                                  ; Use: INT 21h w/AH=63
 33031                                  ;
 33032                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 33033                                  ;***************************************************************************
 33034                                  
 33035                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33036                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33037                                  	; 12/08/2024
 33038                                  $P_Chk_DBCS:
 33039 000054A9 1E                      	push	ds			;AN000;
 33040 000054AA 56                      	push	si			;AN000;
 33041 000054AB 53                      	push	bx			;AN000; (tm11)
 33042 000054AC 2E833E[4C99]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 33043                                  					;AC034; ALREADY SET ?
 33044 000054B2 7527                    	jne	short $P_DBCS00		;AN000;
 33045 000054B4 50                      	push	ax			;AN000;
 33046 000054B5 1E                      	push	ds			;AN000; (tm11)
 33047 000054B6 51                      	push	cx			;AN000;
 33048 000054B7 52                      	push	dx			;AN000;
 33049 000054B8 57                      	push	di			;AN000;
 33050 000054B9 55                      	push	bp			;AN000;
 33051 000054BA 06                      	push	es			;AN000;
 33052 000054BB 31F6                    	xor	si,si			;AN000;
 33053 000054BD 8EDE                    	mov	ds,si			;AN000;
 33054                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 33055 000054BF B80063                  	mov	ax,6300h
 33056 000054C2 CD21                    	int	21h			;AN000;
 33057 000054C4 8CDB                    	mov	bx,ds			;AN000; (tm11)
 33058 000054C6 09DB                    	or	bx,bx			;AN000; (tm11)
 33059 000054C8 07                      	pop	es			;AN000;
 33060 000054C9 5D                      	pop	bp			;AN000;
 33061 000054CA 5F                      	pop	di			;AN000;
 33062 000054CB 5A                      	pop	dx			;AN000;
 33063 000054CC 59                      	pop	cx			;AN000;
 33064 000054CD 1F                      	pop	ds			;AN000; (tm11)
 33065 000054CE 58                      	pop	ax			;AN000;
 33066 000054CF 7424                    	jz	short $P_NON_DBCS	;AN000;
 33067                                  $P_DBCS02:				;AN000;
 33068 000054D1 2E8936[4A99]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 33069 000054D6 2E891E[4C99]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 33070                                  $P_DBCS00:				;AN000;
 33071                                  	;mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 33072                                  	;mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 33073                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 33074 000054DB 2EC536[4A99]            	lds	si,[cs:$P_DBCSEV_OFF]
 33075                                  $P_DBCS_LOOP:				;AN000;
 33076 000054E0 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 33077 000054E3 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 33078 000054E5 3A04                    	cmp	al,[si] 		;AN000;
 33079 000054E7 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 33080 000054E9 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 33081 000054EC 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 33082 000054EE F9                      	stc				;AN000; if yes, indicate DBCS and exit
 33083 000054EF EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 33084                                  $P_DBCS01:				;AN000;
 33085 000054F1 46                      	inc	si			;AC035; add '2' to
 33086 000054F2 46                      	inc	si			;AC035;  SI reg
 33087                                  					;AN000; get next vector
 33088 000054F3 EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 33089                                  
 33090                                  $P_NON_DBCS:				;AN000;
 33091                                  	; 18/04/2023
 33092                                  	; cf=0
 33093                                  	;clc				;AN000; indicate SBCS
 33094                                  $P_DBCS_EXIT:				;AN000;
 33095 000054F5 5B                      	pop	bx			;AN000; (tm11)
 33096 000054F6 5E                      	pop	si			;AN000;
 33097 000054F7 1F                      	pop	ds			;AN000;
 33098 000054F8 C3                      	retn				;AN000;
 33099                                  
 33100                                  ;============================================================================
 33101                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 33102                                  ;============================================================================
 33103                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33104                                  
 33105                                  ; ****************************************************************
 33106                                  ; *
 33107                                  ; * ROUTINE:	 CMD_PARSE
 33108                                  ; *
 33109                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 33110                                  ; *		 SYSPARSE.
 33111                                  ; *
 33112                                  ; * INPUT:	 inputs to SYSPARSE
 33113                                  ; *
 33114                                  ; * OUTPUT:	 outputs from SYSPARSE
 33115                                  ; *
 33116                                  ; ****************************************************************
 33117                                  
 33118                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33119                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 33120                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33121                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:57BBh
 33122                                  ;cmd_parse:
 33123                                  	;call	sysparse		;AN000;
 33124                                  	;retn				;AN000;
 33125                                  	; 06/04/2023
 33126                                  	;jmp	sysparse
 33127                                  
 33128                                  append_parse:
 33129 000054F9 E85DF5                  	call	sysparse		;AN010;
 33130 000054FC CB                      	retf				;AN010;
 33131                                  
 33132                                  ;============================================================================
 33133                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 33134                                  ;============================================================================
 33135                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33136                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33137                                  
 33138                                  ; ----------------------------
 33139                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 33140                                  ; ----------------------------
 33141                                  
 33142                                  ;; Replacable parameters are described by a sublist structure
 33143                                  
 33144                                  struc $M_SUBLIST_STRUC		;;AN000;;
 33145 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33146 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33147 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33148 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 33149 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33150 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33151 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33152 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33153                                  endstruc
 33154                                  
 33155                                  ; ---------------------------------------------------------------------------
 33156                                  ; ---------------------------------------------------------------------------
 33157                                  
 33158                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33159                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 33160                                  
 33161                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33162                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57C3h
 33163                                  
 33164                                  Printf_Init:
 33165 000054FD E80F00                  	call	std_printf
 33166 00005500 CB                      	retf
 33167                                  
 33168                                  Printf_Crlf:
 33169 00005501 E80B00                  	call	std_printf
 33170                                  	;call	CRLF2
 33171                                  	;retn
 33172                                  	; 07/04/2023
 33173 00005504 E91AD6                  	jmp	CRLF2
 33174                                  
 33175                                  ;****************************************************************
 33176                                  ;*
 33177                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 33178                                  ;*
 33179                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 33180                                  ;*		Set up substitutions if utility message.  Make
 33181                                  ;*		sure any changes to message variables in TDATA
 33182                                  ;*		are reset to avoid reloading the transient.
 33183                                  ;*
 33184                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 33185                                  ;*		Msg_Cont_Flag	-  set to control flags
 33186                                  ;*		DS	points to transient segment
 33187                                  ;*
 33188                                  ;*		if utility message:
 33189                                  ;*		DX	points to a block with message number
 33190                                  ;*			(word), number of substitutions (byte),
 33191                                  ;*			followed by substitution list if there
 33192                                  ;*			are substitutions.  If substitutions
 33193                                  ;*			are not in transient segment they must
 33194                                  ;*			be set.
 33195                                  ;*		else
 33196                                  ;*		AX	set to message number
 33197                                  ;*
 33198                                  ;* OUTPUT:	none
 33199                                  ;*
 33200                                  ;****************************************************************
 33201                                  
 33202                                  std_eprintf:
 33203 00005507 C706[1F9B]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 33204 0000550D EB06                    	jmp	short new_printf		;AC000;
 33205                                  
 33206                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33207                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 33208                                  
 33209                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33210                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57D6h
 33211                                  	; 12/08/2024
 33212                                  std_printf:
 33213 0000550F C706[1F9B]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 33214                                  
 33215                                  new_printf:
 33216 00005515 50                      	push	ax				;AN000;save registers
 33217 00005516 53                      	push	bx				;AN000;
 33218 00005517 51                      	push	cx				;AN000;
 33219 00005518 06                      	push	es				;AN000;get local ES
 33220 00005519 1E                      	push	ds				;AN000;
 33221 0000551A 07                      	pop	es				;AN000;
 33222 0000551B 57                      	push	di				;AN000;
 33223 0000551C 56                      	push	si				;AN000;
 33224 0000551D 52                      	push	dx				;AN000;
 33225                                  
 33226                                  	; 07/04/2023
 33227                                  	;mov	word [print_err_flag],0		;AN000;
 33228 0000551E 31C9                    	xor	cx,cx
 33229 00005520 890E[28A2]              	mov	[print_err_flag],cx ; 0
 33230                                  
 33231 00005524 89D6                    	mov	si,dx				;AN000;Get offset of message number
 33232 00005526 AD                      	lodsw					;AN000;load message number
 33233                                  	; 15/06/2023
 33234                                  	;push	ax				;AN000;save it
 33235                                  	;lodsb					;AN000;get number of substitutions
 33236                                  	;mov	cl,al				;AN000;set up CX as # of subst
 33237                                  	;; 07/04/2023
 33238                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 33239                                  	;pop	ax				;AN000;get message number back
 33240                                  	; 15/06/2023
 33241 00005527 8A0C                    	mov	cl,[si]
 33242 00005529 46                      	inc	si
 33243                                  
 33244                                  	;cmp	cx,0				;AN000;Any substitutions?
 33245                                  	; 07/04/2023
 33246                                  	;and	cx,cx
 33247                                  	;jz	short ready_to_print		;AN000;No - continue
 33248                                  	; 12/08/2024
 33249 0000552A E35C                    	jcxz	ready_to_print
 33250                                  
 33251 0000552C BF[2AA2]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 33252 0000552F 57                      	push	di				;AN061; save it
 33253 00005530 51                      	push	cx				;AN061; save number of subst
 33254                                  
 33255                                  move_subst:
 33256 00005531 51                      	push	cx				;AN061;save number of subst
 33257 00005532 89F3                    	mov	bx,si				;AN061;save start of sublist
 33258                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 33259                                  	; 07/04/2023
 33260 00005534 B10B                    	mov	cl,parm_block_size ; 11
 33261 00005536 F3A4                    	rep	movsb				;AN061;move sublist
 33262                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 33263 00005538 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 33264                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 33265 0000553C 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 33266                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 33267                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 33268 0000553E 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 33269                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 33270                                  	;mov	word [bx+4],0			;AN061;
 33271 00005541 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 33272                                  
 33273                                  move_subst_cont:				;AN061;
 33274 00005544 59                      	pop	cx				;AN061;get number of subst back
 33275 00005545 E2EA                    	loop	move_subst			;AN061;move cx sublists
 33276                                  
 33277 00005547 59                      	pop	cx				;AN061;get number of subst
 33278 00005548 50                      	push	ax				;AN061;save message number
 33279 00005549 803E[CE91]FF            	cmp	byte [msg_disp_class],util_msg_class
 33280                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 33281 0000554E 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 33282                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 33283 00005550 C606[24A2]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 33284 00005555 BF[D091]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 33285 00005558 31C0                    	xor	ax,ax				;AN061;clear ax register
 33286 0000555A AB                      	stosw					;AN061;clear out message number
 33287 0000555B AA                      	stosb					;AN061;clear out subst count
 33288                                  
 33289                                  check_fix:					;AN061;
 33290 0000555C 58                      	pop	ax				;AN061;get message number back
 33291 0000555D 5F                      	pop	di				;AN061;get start of sublists
 33292 0000555E 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 33293 00005560 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 33294 00005562 51                      	push	cx				;AN061;save number of subst
 33295                                  
 33296                                  set_subst:					;AN061;store the segment of the subst
 33297 00005563 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 33298                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 33299 00005567 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 33300 00005569 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 33301                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 33302                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 33303 0000556D 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 33304 0000556F 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 33305                                  	;mov	word [bx+4],cs			;AN061;set segment value
 33306                                  
 33307                                  subst_seg_set:					;AN061;
 33308 00005572 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 33309 00005575 E2EC                    	loop	set_subst			;AN061;loop CX times
 33310 00005577 59                      	pop	cx				;AN061;get number of subst back
 33311                                  
 33312 00005578 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 33313 0000557A 817F02[91A0]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 33314                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 33315 0000557F 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 33316                                  	; 01/05/2023
 33317 00005581 8B16[91A0]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 33318 00005585 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 33319                                  						;AN061;put it into the subst block
 33320                                  	;mov	[bx+2],dx
 33321                                  
 33322                                  ready_to_print:
 33323 00005588 8B1E[1F9B]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 33324 0000558C 8A16[CF91]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 33325 00005590 8A36[CE91]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 33326 00005594 C606[CF91]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 33327                                  						;AN061;reset flags to avoid
 33328 00005599 C606[CE91]FF            	mov	byte [msg_disp_class],util_msg_class
 33329                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 33330                                  
 33331 0000559E 1E                      	push	ds				;AN026;
 33332 0000559F 06                      	push	es				;AN026;
 33333                                  
 33334 000055A0 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 33335                                  
 33336 000055A3 07                      	pop	es				;AN026; restore registers
 33337 000055A4 1F                      	pop	ds				;AN026;
 33338                                  
 33339 000055A5 7303                    	jnc	short print_success		;AN000; everything went okay
 33340 000055A7 A3[28A2]                	mov	[print_err_flag],ax		;AN000;
 33341                                  
 33342                                  print_success:
 33343 000055AA 5A                      	pop	dx				;AN061;restore dx
 33344 000055AB 5E                      	pop	si				;AN000;restore registers
 33345 000055AC 5F                      	pop	di				;AN000;
 33346 000055AD 07                      	pop	es				;AN000;restore registers
 33347 000055AE 59                      	pop	cx				;AN000;
 33348 000055AF 5B                      	pop	bx				;AN000;
 33349 000055B0 58                      	pop	ax				;AN000;
 33350 000055B1 833E[28A2]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 33351 000055B6 7501                    	jnz	short print_err			;AN000;
 33352                                  
 33353 000055B8 C3                      	retn					;AC000;
 33354                                  
 33355                                  print_err:
 33356 000055B9 0E                      	push	cs
 33357 000055BA 07                      	pop	es
 33358 000055BB 833E[1F9B]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 33359 000055C0 7503                    	jne	short not_stderr		;AN026;no - continue
 33360 000055C2 E93FAB                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 33361                                  
 33362                                  not_stderr:
 33363 000055C5 A1[28A2]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 33364 000055C8 8E06[F39D]              	mov	es,[RESSEG]			; No, set up for error, load the
 33365                                  						;  right error msg, and jmp to cerror.
 33366 000055CC 26F606[B502]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 33367 000055D2 7408                    	jz	short _go_to_error
 33368 000055D4 E8E1DE                  	call	PipeOff
 33369 000055D7 BA[3193]                	mov	dx,PIPEEMES_PTR
 33370 000055DA EB0B                    	jmp	short print_err_exit		;AC000;
 33371                                  
 33372                                  _go_to_error:
 33373 000055DC C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class
 33374                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 33375 000055E1 BA[D091]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 33376 000055E4 A3[D091]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 33377                                  
 33378                                  print_err_exit: 				;AC000;
 33379 000055E7 0E                      	push	cs
 33380 000055E8 07                      	pop	es
 33381 000055E9 E9B6D8                  	jmp	cerror
 33382                                  
 33383                                  ;****************************************************************
 33384                                  ;*
 33385                                  ;* ROUTINE:	TSYSLOADMSG
 33386                                  ;*
 33387                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 33388                                  ;*		names since these routines are also used in the
 33389                                  ;*		resident.
 33390                                  ;*
 33391                                  ;* INPUT:	Inputs to SYSLOADMSG
 33392                                  ;*
 33393                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 33394                                  ;*
 33395                                  ;****************************************************************
 33396                                  
 33397                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33398                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33399                                  TSYSLOADMSG:
 33400 000055EC 53                      	push	bx				;AN000;
 33401 000055ED E80800                  	call	SYSLOADMSG			;AN000; call routine
 33402 000055F0 5B                      	pop	bx				;AN000;
 33403 000055F1 C3                      	retn					;AN000; exit
 33404                                  
 33405                                  ;****************************************************************
 33406                                  ;*
 33407                                  ;* ROUTINE:	TSYSGETMSG
 33408                                  ;*
 33409                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 33410                                  ;*		names since these routines are also used in the
 33411                                  ;*		resident.
 33412                                  ;*
 33413                                  ;* INPUT:	Inputs to SYSGETMSG
 33414                                  ;*
 33415                                  ;* OUTPUT:	Outputs from SYSGETMSG
 33416                                  ;*
 33417                                  ;****************************************************************
 33418                                  
 33419                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33420                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33421                                  TSYSGETMSG:
 33422 000055F2 51                      	push	cx				;AN000;
 33423 000055F3 E8B500                  	call	SYSGETMSG			;AN000; call routine
 33424 000055F6 59                      	pop	cx				;AN000;
 33425 000055F7 C3                      	retn					;AN000; exit
 33426                                  
 33427                                  ;============================================================================
 33428                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 33429                                  ;============================================================================
 33430                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33431                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33432                                  
 33433                                  ; ---------------------------------------------------------------------------
 33434                                  ; MODULE NAME: MSGSERV.SAL
 33435                                  ;
 33436                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 33437                                  ;
 33438                                  ; FUNCTION: This module incorporates all the messages services and
 33439                                  ;	    is called upon at build time to INCLUDE the code requested
 33440                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 33441                                  ;
 33442                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 33443                                  ;	    requested procedure.
 33444                                  ;
 33445                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 33446                                  ;	    function requested.
 33447                                  ;
 33448                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 33449                                  ;
 33450                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 33451                                  ;
 33452                                  ; INTERNAL REFERENCES: (list of included subroutines)
 33453                                  ;
 33454                                  ;	- SYSLOADMSG
 33455                                  ;	- SYSDISPMSG
 33456                                  ;	- SYSGETMSG
 33457                                  ;
 33458                                  ; EXTERNAL REFERENCES: None
 33459                                  ;
 33460                                  ; NOTES: At build time, some modules must be included. These are only included
 33461                                  ;	 once using assembler switches. Other logic is included at the request
 33462                                  ;	 of the utility.
 33463                                  ;
 33464                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 33465                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 33466                                  ;	 storage and multiple EQUates.
 33467                                  ;
 33468                                  ; REVISION HISTORY: Created MAY 1987
 33469                                  ;
 33470                                  ;     Label: DOS - - Message Retriever
 33471                                  ;	     (c) Copyright 1988 Microsoft
 33472                                  ; ---------------------------------------------------------------------------
 33473                                  
 33474                                  ;	Revision History
 33475                                  ;	================
 33476                                  ;
 33477                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 33478                                  ;				$M_DISPLAY_H_STRING to properly
 33479                                  ;				handle Ctrl-Z being passed
 33480                                  ;
 33481                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 33482                                  ;				these routines are no longer assembled.
 33483                                  ;
 33484                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 33485                                  ;				CR-LF string also gets reinitialized
 33486                                  ;				on every cycle.
 33487                                  ;
 33488                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 33489                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 33490                                  
 33491                                  ; ---------------------------------------------------------------------------
 33492                                  
 33493                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33494                                  
 33495                                  ;;; Replacable parameters are described by a sublist structure
 33496                                  ;
 33497                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 33498                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33499                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33500                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33501                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 33502                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33503                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33504                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33505                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33506                                  ;endstruc
 33507                                  
 33508                                  ;; Each class will be defined by this structure.
 33509                                  
 33510                                  struc $M_CLASS_ID		;;AN000;;
 33511 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 33512 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 33513 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 33514                                   .size:
 33515                                  endstruc
 33516                                  
 33517                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 33518                                  
 33519                                  ;; Each message will be defined by this structure.
 33520                                  
 33521                                  struc $M_ID			;;AN000;;
 33522 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 33523 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 33524                                   .size:	
 33525                                  endstruc
 33526                                  
 33527                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 33528                                  
 33529                                  ; ---------------------------
 33530                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33531                                  ; ---------------------------
 33532                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 33533                                  
 33534                                  ; --------------------------- 
 33535                                  
 33536                                  ; 07/04/2023
 33537                                  $M_NUM_CLS equ 3
 33538                                  
 33539                                  ;; Resident data area definition of variables
 33540                                  
 33541                                  struc $M_RES_ADDRS			;;AN000;;
 33542 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 33543 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 33544 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 33545 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 33546 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 33547 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 33548 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 33549 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 33550 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 33551 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 33552 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 33553 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 33554 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 33555 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 33556 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 33557 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 33558 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 33559 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 33560 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 33561 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 33562 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 33563 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 33564 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 33565                                   .size:
 33566                                  endstruc				;;AN000;;
 33567                                  
 33568                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 33569                                  
 33570                                  ;; Important fields of the Get Country Information call
 33571                                  
 33572                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 33573 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 33574                                  					;;AN000;; Go past first part of struc
 33575 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 33576 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 33577 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 33578 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 33579 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 33580 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 33581 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 33582 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 33583 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 33584                                  endstruc				;;AN000;;
 33585                                  
 33586                                  ; ---------------------------------------------------------------------------
 33587                                  
 33588                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33589                                  ;;
 33590                                  ;;	PROC NAME: SYSLOADMSG
 33591                                  ;;
 33592                                  ;;	FUNCTION:
 33593                                  ;;	INPUTS:
 33594                                  ;;
 33595                                  ;;	OUTPUTS:
 33596                                  ;;
 33597                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33598                                  
 33599                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33600                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 33601                                  
 33602                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33603                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:58CBh
 33604                                  
 33605                                  SYSLOADMSG:
 33606 000055F8 50                      	push	ax				;;AN000;
 33607 000055F9 53                      	push	bx				;;AN000;
 33608 000055FA 52                      	push	dx				;;AN000;
 33609 000055FB 06                      	push	es				;;AN000;
 33610 000055FC 57                      	push	di				;;AN000;
 33611 000055FD 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 33612 000055FF 8EC1                    	mov	es,cx				;;AN000;
 33613 00005601 31FF                    	xor	di,di				;;AN000;
 33614 00005603 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33615 00005606 B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 33616 00005608 CD2F                    	int	2Fh				;;AN000;; Private interface
 33617                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33618                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 33619                                  		; Return: ES:DI -> error table
 33620                                  	
 33621 0000560A 8C06[279A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 33622                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 33623 0000560E 893E[259A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 33624                                  	;mov	[$M_RT+8],di			;;AN000;;
 33625                                  
 33626 00005612 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33627 00005615 B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 33628 00005617 CD2F                    	int	2Fh				;;AN000;; Private interface
 33629                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33630                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 33631                                  		; ES:DI -> error table
 33632                                  
 33633 00005619 8C06[2F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 33634                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 33635 0000561D 893E[2D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 33636                                  	;mov	[$M_RT+16],di			;;AN000;;
 33637                                  
 33638 00005621 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33639 00005624 B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 33640 00005626 CD2F                    	int	2Fh				;;AN000;; Private interface
 33641                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33642                                  		; DL = subfunction - get ??? error table
 33643                                  		; ES:DI -> error table
 33644                                  
 33645 00005628 8C06[3F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 33646                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 33647 0000562C 893E[3D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 33648                                  	;mov	[$M_RT+32],di			;;AN000;;
 33649                                  
 33650 00005630 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33651 00005633 B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 33652 00005635 CD2F                    	int	2Fh					     ;;AN001;; Private interface
 33653                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33654                                  		; DL = subfunction - get ??? error table
 33655                                  		; ES:DI -> error table
 33656                                  
 33657 00005637 8C06[239A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 33658                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 33659 0000563B 893E[219A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 33660                                  	;mov	[$M_RT+4],di			;;AN001;;
 33661                                  
 33662 0000563F E8673B                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 33663                                  						;;AN000;;
 33664 00005642 8C06[1F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 33665                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 33666 00005646 893E[1D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 33667                                  	;mov	[$M_RT+0],di			;;AN000;;
 33668 0000564A 8C06[3B9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 33669                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 33670 0000564E 893E[399A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 33671                                  	;mov	[$M_RT+28],di			;;AN000;;
 33672                                  
 33673 00005652 E8723B                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 33674                                  
 33675 00005655 8C06[339A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 33676                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 33677 00005659 893E[319A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 33678                                  	;mov	[$M_RT+20],di			;;AN000;;
 33679                                  
 33680 0000565D B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33681 00005660 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 33682 00005662 CD2F                    	int	2Fh				;;AN001;; Private interface
 33683                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33684                                  		; DL = subfunction - get ??? error table
 33685                                  		; ES:DI -> error table
 33686                                  
 33687 00005664 8C06[479A]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 33688                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 33689 00005668 893E[459A]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 33690                                  	;mov	[$M_RT+40],di			;;AN001;;
 33691                                  
 33692                                  ;M016; M020
 33693                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 33694                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 33695                                  
 33696 0000566C C706[609A]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 33697                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 33698 00005672 C606[A99A]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 33699                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 33700 00005677 C706[659A]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 33701                                  	;mov	word [$M_RT+72],0		; M020
 33702 0000567D C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 33703                                  	;mov	word [$M_RT+74],10		; M020
 33704                                  
 33705                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 33706                                  	; --------------------------
 33707                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 33708                                  	; --------------------------
 33709                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 33710                                  
 33711                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 33712 00005683 E8C03A                  	call    $M_CLS_3			; Get addressibility to class F
 33713 00005686 893E[499A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 33714                                  	;mov	[$M_RT+44],di
 33715                                  	
 33716 0000568A E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 33717                                  
 33718                                  	; 15/04/2023
 33719                                  	;clc					;;AN000;; Make sure carry is clear
 33720                                  	;jc	short $MIF20
 33721                                  	
 33722 0000568D 5F                      	pop	di				;;AN000;; Restore REGS
 33723 0000568E 07                      	pop	es				;;AN000;;
 33724 0000568F 5A                      	pop	dx				;;AN000;;
 33725 00005690 5B                      	pop	bx				;;AN000;;
 33726 00005691 58                      	pop	ax				;;AN000;;
 33727                                  	;jmp	short $MEN20
 33728                                  	; 15/04/2023
 33729 00005692 C3                      	retn
 33730                                  
 33731                                  	; 15/04/2023
 33732                                  ;$MIF20:
 33733                                  	;add	sp,10				;;AN000;;
 33734                                  	;stc					;;AN000;; Reset carry flag
 33735                                  ;$MEN20:
 33736                                  	;retn					;;AN000;;
 33737                                  
 33738                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33739                                  ;;
 33740                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 33741                                  ;;
 33742                                  ;;  Function:	Get the DBCS vector and save it for later use
 33743                                  ;;
 33744                                  ;;  Inputs:	None
 33745                                  ;;
 33746                                  ;;  Outputs:	None
 33747                                  ;;
 33748                                  ;;  Regs Changed:
 33749                                  ;;
 33750                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33751                                  
 33752                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33753                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33754                                  $M_GET_DBCS_VEC:
 33755 00005693 50                      	push	ax				;;AN000;; Save character to check
 33756 00005694 56                      	push	si				;;AN000;;
 33757 00005695 1E                      	push	ds				;;AN000;;
 33758 00005696 B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 33759 00005699 CD21                    	int	21h				;;AN000;; Get environment pointer
 33760 0000569B 1E                      	push	ds				;;AN000;; Get environment pointer
 33761 0000569C 07                      	pop	es				;;AN000;; Get environment pointer
 33762 0000569D 1F                      	pop	ds				;;AN000;; Get environment pointer
 33763 0000569E 7208                    	jc	short $MIF23
 33764                                  	
 33765 000056A0 8936[599A]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 33766                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 33767 000056A4 8C06[5B9A]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 33768                                  	;mov	word [$M_RT+62],es		;;AN000;;
 33769                                  $MIF23:
 33770 000056A8 5E                      	pop	si				;;AN000;;
 33771 000056A9 58                      	pop	ax				;;AN000;; Retrieve character to check
 33772 000056AA C3                      	retn					;;AN000;; Return
 33773                                  
 33774                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33775                                  ;;
 33776                                  ;;  Proc Name:	SYSGETMSG
 33777                                  ;;
 33778                                  ;;  Function:	The GET service returns the segment, offset and size of the
 33779                                  ;;		message text to the caller based on a message number.
 33780                                  ;;		The GET function will not display the message thus assumes
 33781                                  ;;		caller will handle replaceable parameters.
 33782                                  ;;
 33783                                  ;;  Inputs:
 33784                                  ;;
 33785                                  ;;  Outputs:
 33786                                  ;;
 33787                                  ;;  Psuedocode:
 33788                                  ;;		Call $M_GET_MSG_ADDRESS
 33789                                  ;;		IF MSG_NUM exists THEN
 33790                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 33791                                  ;;		   CARRY_FLAG = 0
 33792                                  ;;		ELSE
 33793                                  ;;		   CARRY_FLAG = 1
 33794                                  ;;		ENDIF
 33795                                  ;;
 33796                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33797                                  
 33798                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33799                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33800                                  
 33801                                  	utility_msg_class equ 0FFh ; 18/04/2023
 33802                                  
 33803                                  SYSGETMSG:
 33804                                  	;; Save registers needed later
 33805 000056AB 50                      	push	ax				;;AN000;; Save changed regs
 33806 000056AC 06                      	push	es				;;AN000;;
 33807 000056AD 57                      	push	di				;;AN000;;
 33808 000056AE 55                      	push	bp				;;AN000;;
 33809                                  
 33810 000056AF E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33811 000056B2 720D                    	jc	short $MIF31
 33812                                  	
 33813 000056B4 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 33814                                  	;clc					;;AN000;;
 33815 000056B7 7404                    	je	short $MIF32			;;AN000;;
 33816                                  	; 15/06/2023
 33817 000056B9 F8                      	clc	
 33818                                  
 33819 000056BA 06                      	push	es				;;AN000;;
 33820                                  	;pop	ds				;;AN000;;
 33821 000056BB EB01                    	jmp	short $MEN32
 33822                                  $MIF32:
 33823 000056BD 0E                      	push	cs				;;AN000;;			
 33824                                  	;pop	ds				;;AN000;;
 33825                                  $MEN32:
 33826                                  	; 07/04/2023
 33827 000056BE 1F                      	pop	ds
 33828 000056BF 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 33829                                  $MIF31:
 33830 000056C1 5D                      	pop	bp				;;AN000;; Restore changed regs
 33831 000056C2 5F                      	pop	di				;;AN000;;
 33832 000056C3 07                      	pop	es				;;AN000;;
 33833 000056C4 58                      	pop	ax				;;AN000;;
 33834 000056C5 C3                      	retn					;;AN000;; Return
 33835                                  
 33836                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33837                                  ;;
 33838                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 33839                                  ;;
 33840                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 33841                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 33842                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 33843                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 33844                                  ;;	REGS CHANGED: ES,DI,CX
 33845                                  ;;
 33846                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33847                                  
 33848                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33849                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33850                                  $M_GET_MSG_ADDRESS:
 33851 000056C6 56                      	push	si				;;AN000;;
 33852 000056C7 53                      	push	bx				;;AN000;;
 33853 000056C8 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 33854 000056CA 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 33855                                  $MDO36:
 33856 000056CC 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 33857 000056CF 7508                    	jne	short $MIF37			;;AN000;; No
 33858                                  
 33859                                  	; 07/04/2023
 33860                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33861 000056D1 8BBC[499A]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 33862                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 33863 000056D5 89FB                    	mov	bx,di				;;AN000;;
 33864 000056D7 EB21                    	jmp	short $MEN37
 33865                                  $MIF37:
 33866 000056D9 F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 33867 000056DC 7406                    	jz	short $MIF39
 33868                                  	
 33869                                  	; 07/04/2023
 33870                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33871 000056DE C4BC[2D9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 33872                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 33873                                  
 33874                                  	; 07/04/2023
 33875                                  	;mov	bx,es ; *			;;AN000;;
 33876 000056E2 EB14                    	jmp	short $MEN39
 33877                                  $MIF39:
 33878 000056E4 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 33879 000056E7 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 33880                                  
 33881 000056E9 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 33882 000056EC 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 33883                                  
 33884                                  	; 07/04/2023
 33885                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33886 000056EE C4BC[399A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 33887                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 33888                                  	
 33889                                  	; 07/04/2023
 33890                                  	;mov	bx,es ; *			;;AN000;;
 33891 000056F2 EB04                    	jmp	short $MEN41
 33892                                  $MIF41:
 33893                                  	; 07/04/2023
 33894                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33895 000056F4 C4BC[1D9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 33896                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 33897                                  	
 33898                                  	; 07/04/2023
 33899                                  	;mov	bx,es ; *			;;AN000;;
 33900                                  $MEN41:
 33901                                  $MEN39:
 33902                                  	; 07/04/2023
 33903 000056F8 8CC3                    	mov	bx,es ; *
 33904                                  $MEN37:						;;AN000;;
 33905 000056FA 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 33906 000056FD 7515                    	jne	short $MIF46			;;AN000;; No
 33907                                  
 33908 000056FF 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 33909 00005702 7503                    	jne	short $MIF47			;;AN000;; No
 33910 00005704 F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 33911                                  	; 07/04/2023
 33912                                  	;jmp	short $MEN47 ; **-
 33913 00005705 EB1B                    	jmp	short $MEN36 ; **-
 33914                                  $MIF47:
 33915 00005707 A3[659A]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],ax
 33916                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 33917 0000570A B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 33918 0000570D BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 33919 00005710 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 33920                                  	; 28/04/2023
 33921                                  	; 07/04/2023
 33922                                  	;clc	; **+				;;AN000;;
 33923                                  ;$MEN47:
 33924                                  	;jmp	short $MEN46 ; ***
 33925 00005712 EB0A                    	jmp	short $MEN47 ; ***
 33926                                  $MIF46:
 33927                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 33928 00005714 21DB                    	and	bx,bx ; 0 ?
 33929 00005716 7403                    	jz	short $MIF51			;;AN000;; No
 33930                                  	
 33931 00005718 E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 33932                                  $MIF51:
 33933 0000571B 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 33934                                  	; 07/04/2023
 33935                                  	;clc					;;AN000;;
 33936                                  ;$MEN46:
 33937                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 33938                                  $MEN47:	; 07/04/2023	; **+
 33939 0000571E 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 33940                                  	;jnz	short $MXL2			;;AN000;; Yes
 33941                                  	;jmp	short $MDO36
 33942                                  	; 07/04/2023
 33943 00005720 74AA                    	jz	short $MDO36	
 33944                                  $MXL2:
 33945                                  $MEN36:
 33946 00005722 9C                      	pushf 					;;AN006;; Save the flag state
 33947                                  	
 33948 00005723 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 33949                                  	;jne	short $MIF56			;;AN006;; No
 33950                                  	; 28/04/2023
 33951 00005726 752A                    	jne	short $M_MYRET	
 33952                                  
 33953 00005728 52                      	push	dx				;;AN006;; Save all needed registers
 33954 00005729 55                      	push	bp				;;AN006;;
 33955 0000572A 51                      	push	cx				;;AN006;;
 33956 0000572B 06                      	push	es				;;AN006;;
 33957 0000572C 57                      	push	di				;;AN006;;
 33958 0000572D 50                      	push	ax				;;AN006;;
 33959                                  
 33960 0000572E B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 33961 00005731 CD2F                    	int	2Fh				;;AN006;;
 33962                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 33963                                  		; Return: AL = 00h not installed, OK to install
 33964                                  		; 01h not installed, can't install
 33965                                  		; FFh installed
 33966                                  
 33967 00005733 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 33968 00005735 58                      	pop	ax				;;AN006;; Restore msg number
 33969 00005736 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 33970                                  
 33971 00005738 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 33972 0000573A B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 33973 0000573D CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 33974                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 33975                                  
 33976                                  	;jmp	short $MEN57			;;AN006;;
 33977                                  	; 28/04/2023
 33978 0000573F 720B                    	jc	short $MEN57
 33979                                  $MIF60:
 33980 00005741 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 33981 00005744 E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33982                                  $MEN60:
 33983 00005747 5D                      	pop	bp				;;AN006;; Restore other Regs
 33984 00005748 5A                      	pop	dx				;;AN006;;
 33985                                  $MIF56:
 33986                                  	; 07/04/2023
 33987                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33988 00005749 EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33989                                  
 33990                                  $MIF57:
 33991 0000574B F9                      	stc					;;AN006;; Carry conditon
 33992                                  $MEN57:
 33993                                  	; 28/04/2023
 33994                                  	;jnc	short $MIF60			;;AN006;;
 33995                                  
 33996 0000574C 5F                      	pop	di				;;AN006;;
 33997 0000574D 07                      	pop	es				;;AN006;; Restore old pointer
 33998 0000574E 59                      	pop	cx				;;AN006;;
 33999 0000574F EBF6                    	jmp	short $MEN60
 34000                                  
 34001                                  ;$MIF60:
 34002                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 34003                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 34004                                  ;$MEN60:
 34005                                  ;	pop	bp				;;AN006;; Restore other Regs
 34006                                  ;	pop	dx				;;AN006;;
 34007                                  ;$MIF56:
 34008                                  ;	; 07/04/2023
 34009                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34010                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 34011                                  
 34012                                  ; 07/04/2023
 34013                                  ; ---------------------------
 34014                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 34015                                  ; ---------------------------
 34016                                  	; $M_POPF macro
 34017                                  	;jmp	short $+3
 34018                                  m_popf_iret:
 34019 00005751 CF                      	iret
 34020                                  $M_MYRET:
 34021 00005752 0E                      	push	cs
 34022 00005753 E8FBFF                  	call	m_popf_iret
 34023                                  	;;; end macro	
 34024                                  ; ---------------------------
 34025                                  
 34026 00005756 5B                      	pop	bx				;;AN000;;
 34027 00005757 5E                      	pop	si				;;AN000;;
 34028 00005758 C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 34029                                  
 34030                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34031                                  
 34032                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34033                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34034                                  $M_SET_LEN_IN_CX:			
 34035 00005759 57                      	push	di				;;AN006;; Save position
 34036 0000575A 50                      	push	ax				;;AN006;;
 34037 0000575B B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 34038 0000575E 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 34039 00005760 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 34040 00005762 F7D1                    	not	cx				;;AN006;; Change decrement into number
 34041 00005764 49                      	dec	cx				;;AN006;; Don't include the zero
 34042 00005765 58                      	pop	ax				;;AN006;;
 34043 00005766 5F                      	pop	di				;;AN006;; Restore position
 34044 00005767 C3                      	retn					;;AN006;;
 34045                                  
 34046                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34047                                  ;;
 34048                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 34049                                  ;;
 34050                                  ;;	FUNCTION:  To scan thru message headers until message is found
 34051                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 34052                                  ;;		   CX contains the number of messages in class
 34053                                  ;;		   DH contains the message class
 34054                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 34055                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 34056                                  ;;
 34057                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34058                                  
 34059                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34060                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34061                                  $M_FIND_SPECIFIED_MSG:
 34062 00005768 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 34063 0000576B 751F                    	jne	short $MIF64
 34064 0000576D 833E[459A]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 34065                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 34066                                  	; 15/06/2023
 34067 00005772 7418                    	je	short $MIF64
 34068                                  
 34069 00005774 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 34070 00005777 750B                    	jne	short $MIF65
 34071                                  	
 34072 00005779 50                      	push	ax				;;AN004;; Reset the special message number
 34073 0000577A A1[659A]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 34074                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 34075 0000577D FF1E[459A]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 34076                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 34077 00005781 58                      	pop	ax				;;AN004;; Reset the special message number
 34078                                  	; 28/04/2023
 34079 00005782 EB04                    	jmp	short $MEN65
 34080                                  	; 18/04/2023
 34081                                  	;jmp	short $MEN64
 34082                                  $MIF65:
 34083 00005784 FF1E[459A]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 34084                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 34085                                  $MEN65:
 34086                                  	; 28/04/2023
 34087 00005788 7344                    	jnc	short $MIF75
 34088                                  	;
 34089 0000578A EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 34090                                  $MIF64:
 34091 0000578C 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 34092 0000578E 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 34093 00005791 7406                    	je	short $MIF69
 34094                                  	
 34095 00005793 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 34096                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 34097 00005797 EB09                    	jmp	short $MEN69
 34098                                  $MIF69:
 34099                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 34100                                  	;cmp	[cs:di+0],dh
 34101 00005799 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 34102 0000579C 7504                    	jne	short $MIF71
 34103                                  
 34104 0000579E 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 34105                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 34106                                  $MIF71:						;;AN001;;
 34107                                  $MEN69:
 34108 000057A2 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 34109                                  	; 02/05/2023
 34110                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 34111                                  $MEN64:
 34112                                  	;jnc	short $MIF75
 34113                                  	; 28/04/2023
 34114                                  	; (or instruction clears carry flag)
 34115                                  	;clc					;;AN004;; No, reset carry
 34116                                  $MDO76:
 34117 000057A5 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 34118 000057A7 7417                    	jz	short $MEN76
 34119                                  
 34120 000057A9 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 34121 000057AC 7405                    	je	short $MIF78
 34122                                  
 34123                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 34124 000057AE 263B05                  	cmp	ax,[es:di]
 34125 000057B1 EB03                    	jmp	short $MEN78
 34126                                  $MIF78:
 34127                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 34128 000057B3 2E3B05                  	cmp	ax,[cs:di]
 34129                                  $MEN78:
 34130                                  	;jne	short $MIF76
 34131                                  	;jmp	short $MSR76
 34132                                  	; 07/04/2023
 34133 000057B6 740B                    	je	short $MSR76 ; *
 34134                                  $MIF76:
 34135 000057B8 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 34136 000057B9 7405                    	jz	short $MEN76
 34137                                  
 34138 000057BB 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 34139 000057BE EBE5                    	jmp	short $MDO76			;;AN000;;
 34140                                  $MEN76:
 34141 000057C0 F9                      	stc					;;AN000;;
 34142                                  ;$MSR76:	; 07/04/2023
 34143                                  	;jc	short $MIF86			;;AN000;;
 34144                                  	; 07/04/2023
 34145                                  	;jc	short $MIF91
 34146 000057C1 EB11                    	jmp	short $MIF91 ;*
 34147                                  $MSR76:	; 07/04/2023 ; *	
 34148 000057C3 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 34149                                  	; 07/04/2023
 34150                                  	;clc					;;AN001;;
 34151 000057C6 7502                    	jne	short $MIF87
 34152                                  
 34153 000057C8 0E                      	push	cs				;;AN000;;
 34154 000057C9 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 34155                                  $MIF87:
 34156                                  	;add	di,[es:di+2]
 34157 000057CA 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 34158                                  $MIF86:
 34159                                  ;$MIF75:
 34160                                  	; 02/05/2023
 34161                                  	;jc	short $MIF91
 34162                                  $MIF75:	; 28/04/2023
 34163 000057CE 30ED                    	xor	ch,ch				;;AN000;;
 34164 000057D0 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 34165 000057D3 47                      	inc	di				;;AN000;; Increment past length
 34166                                  $MIF91:
 34167 000057D4 C606[5F9A]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 34168                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 34169 000057D9 C3                      	retn					;;AN000;; Return
 34170                                  
 34171                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34172                                  ;;
 34173                                  ;;  Proc Name:	SYSDISPMSG
 34174                                  ;;
 34175                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 34176                                  ;;		requested by the caller. It also provides function to display
 34177                                  ;;		messages when handles are not applicable (ie. DOS function calls
 34178                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 34179                                  ;;		defined previous to entry.
 34180                                  ;;
 34181                                  ;;		It is assumes that a PRELOAD function has already determined
 34182                                  ;;		the addressibilty internally to the message retriever services.
 34183                                  ;;  Inputs:
 34184                                  ;;
 34185                                  ;;  Outputs:
 34186                                  ;;
 34187                                  ;;  Psuedocode:
 34188                                  ;;		Save registers needed later
 34189                                  ;;		Get address of the message requested
 34190                                  ;;		IF Message number exists THEN
 34191                                  ;;		  IF replacable parameters were specified THEN
 34192                                  ;;		     Display message with replacable parms
 34193                                  ;;		  ELSE
 34194                                  ;;		     Display string without replacable parms
 34195                                  ;;		  ENDIF
 34196                                  ;;		  IF character input was requested THEN
 34197                                  ;;		     Wait for character input
 34198                                  ;;		  ENDIF
 34199                                  ;;		  Clear CARRY FLAG
 34200                                  ;;		ELSE
 34201                                  ;;		   Set CARRY FLAG
 34202                                  ;;		ENDIF
 34203                                  ;;		Return
 34204                                  ;;
 34205                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34206                                  
 34207                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34208                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 34209                                  	;
 34210                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34211                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5ACBh
 34212                                  SYSDISPMSG:
 34213                                  	;; Save registers and values needed later
 34214 000057DA 50                      	push	ax				;;AN000;; Save changed REGs
 34215 000057DB 53                      	push	bx				;;AN000;;
 34216 000057DC 51                      	push	cx				;;AN000;;
 34217 000057DD 55                      	push	bp				;;AN000;;
 34218 000057DE 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 34219 000057DF 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 34220 000057E0 52                      	push	dx				;;AN000;; Save Input/Class request
 34221                                  
 34222 000057E1 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 34223 000057E3 891E[5D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 34224                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 34225 000057E7 8836[629A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 34226                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 34227                                  
 34228                                  	;; Get address of the message requested
 34229 000057EB E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 34230                                  
 34231 000057EE 09C9                    	or	cx,cx				;;AN000;; Was message found?
 34232 000057F0 7427                    	jz	short $MIF93
 34233                                  						;;AN000;; Yes, Message address in ES:DI
 34234                                  	
 34235                                  	;; Test if replacable parameters were specified
 34236 000057F2 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 34237 000057F4 7505                    	jnz	short $MIF94
 34238                                  
 34239                                  	;; Display string without replacable parms
 34240 000057F6 E82800                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 34241 000057F9 EB03                    	jmp	short $MEN94
 34242                                  $MIF94:
 34243                                  	;; Display message with replacable parms
 34244 000057FB E88B01                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 34245                                  $MEN94:
 34246 000057FE 7214                    	jc	short $MIF97
 34247 00005800 5A                      	pop	dx				;;AN000;; Get Input/Class request
 34248 00005801 E8FC00                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 34249 00005804 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 34250 00005805 5F                      	pop	di				;;AN000;;
 34251                                  	
 34252                                  ; 15/06/2023 - MSDOS 5.0
 34253                                  ;	;jmp	short $MEN97 ; ***
 34254                                  ;	; 08/04/2023
 34255                                  ;	;jmp	short $MEN93 ; **
 34256                                  ;
 34257                                  ;	; 08/04/2023
 34258                                  ;;$MEN93:
 34259                                  ;	jc	short $MIF104
 34260                                  
 34261                                  	; 15/06/2023 Retro DOS v4.2 COMMAND.COM
 34262                                   	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5AF7h
 34263                                  
 34264                                  	; MSDOS 6.0 (MSDOS 6.22)
 34265                                  	; Test if character input was requested	;;AN000;;
 34266 00005806 08D2                    	or	dl,dl
 34267 00005808 7403                    	jz	short $MIF98
 34268                                  	;jz	short $MEN98 ; *
 34269                                  
 34270 0000580A E88B05                  	call	$M_WAIT_FOR_INPUT	; MSDOS 6.0 (to 6.22)
 34271                                  	; cf = 0 ; *
 34272                                  $MIF98:
 34273                                  	;jmp	short $MEN97
 34274                                  	;;jc	short $MIF104 ; *
 34275                                  $MEN98:
 34276                                  ;$MEN97:
 34277 0000580D 5D                      	pop	bp				;;AN000;;
 34278 0000580E 59                      	pop	cx				;;AN000;;
 34279 0000580F 5B                      	pop	bx				;;AN000;;
 34280                                  	; 15/06/2023
 34281                                  	;pop	ax	; MSDOS 5.0		;;AN000;;
 34282 00005810 83C402                  	add	sp,2	; MSDOS 6.0 (to 6.22)
 34283 00005813 C3                      	retn
 34284                                   
 34285                                  $MIF97:
 34286                                  	; 08/04/2023
 34287                                  	;add	sp,6				;;AN000;;
 34288                                  	;stc					;;AN000;; Reset carry flag
 34289                                  ;$MEN97: ; ***
 34290                                  	;jmp	short $MEN93
 34291                                  	; 08/04/2023
 34292                                  	;jmp	short $MIF104
 34293                                  	; 08/04/2023
 34294 00005814 83C40E                  	add	sp,14 ; 6+8
 34295 00005817 F9                      	stc
 34296 00005818 C3                      	retn
 34297                                  $MIF93:
 34298                                  	; 08/04/2023 - 15/06/2023
 34299                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 34300                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 34301                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5B06h
 34302 00005819 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 34303 0000581A 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 34304 0000581B 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 34305                                  	;stc	; * 				;;AN000;; Set carry flag
 34306                                  	; 08/04/2023
 34307                                  	;jmp	short $MIF104 ; *
 34308                                  
 34309                                  ;$MEN93: ; **
 34310                                  ;	jc	short $MIF104
 34311                                  ;$MEN97: ; 08/04/2023
 34312                                  ;	pop	bp				;;AN000;;
 34313                                  ;	pop	cx				;;AN000;;
 34314                                  ;	pop	bx				;;AN000;;
 34315                                  ;	pop	ax				;;AN000;;
 34316                                  ;	;jmp	short $MEN104
 34317                                  ;	; 08/04/2023
 34318                                  ;	retn
 34319                                  
 34320                                  $MIF104: ; *
 34321 0000581C 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 34322 0000581F F9                      	stc					;;AN000;;
 34323                                  $MEN104:
 34324 00005820 C3                      	retn					;;AN000;; Return
 34325                                  
 34326                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34327                                  ;;
 34328                                  ;;	PROC NAME: $M_DISPLAY_STRING
 34329                                  ;;
 34330                                  ;;	FUNCTION:  Will display or write string
 34331                                  ;;	INPUTS:    ES:DI points to beginning of message
 34332                                  ;;		   CX contains the length of string to write (if applicable)
 34333                                  ;;	OUTPUTS:   None
 34334                                  ;;	REGS Revised: None
 34335                                  ;;
 34336                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34337                                  
 34338                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34339                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34340                                  $M_DISPLAY_STRING:
 34341 00005821 50                      	push	ax				;;AN000;;
 34342 00005822 53                      	push	bx				;;AN000;;
 34343 00005823 52                      	push	dx				;;AN000;;
 34344 00005824 8B1E[5D9A]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 34345                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 34346                                  	
 34347 00005828 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 34348 0000582B 7505                    	jne	short $MIF107
 34349                                  
 34350 0000582D E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 34351 00005830 EB03                    	jmp	short $MEN107
 34352                                  $MIF107:
 34353 00005832 E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 34354                                  $MEN107:
 34355 00005835 730D                    	jnc	short $MIF110
 34356                                  	
 34357 00005837 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 34358                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 34359                                  	; 08/04/2023
 34360 00005839 31DB                    	xor	bx,bx
 34361 0000583B CD21                    	int	21h				;;AN000;;
 34362                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 34363                                  		; BX = version code (0000h for DOS 3.x)
 34364 0000583D 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 34365                                  $MEN110: ; 08/04/2023 ; ***
 34366 0000583F 83C406                  	add	sp,6				;;AN000;; Clean up stack
 34367 00005842 F9                      	stc					;;AN000;; Flag that there was an error
 34368                                  	;jmp	short $MEN110 ; ****
 34369                                  	; 08/04/2023
 34370 00005843 C3                      	retn
 34371                                  $MIF110:
 34372                                  	;cmp	bx,$M_NO_HANDLE
 34373 00005844 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 34374 00005847 7409                    	je	short $MIF112 ; *  ; cf = 0
 34375 00005849 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 34376 0000584B 7405                    	je	short $MIF113 ; ** ; cf = 0
 34377 0000584D E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 34378                                  	;add	sp,6				;;AN001;; Clean up stack
 34379                                  	;stc					;;AN001;; Flag that there was an error
 34380                                  	; 08/04/2023
 34381 00005850 EBED                    	jmp	short $MEN110 ; ***
 34382                                  	; 08/04/2023
 34383                                  ;$MIF112:
 34384                                  ;$MEN110: ; ****
 34385                                  	;jc	short $MIF117
 34386                                  $MIF112: ; 08/04/2023	; *
 34387                                  $MIF113:	; **
 34388 00005852 5A                      	pop	dx				;;AN000;; Restore regs
 34389 00005853 5B                      	pop	bx				;;AN000;;
 34390 00005854 58                      	pop	ax				;;AN000;;
 34391                                  $MIF117:
 34392 00005855 C3                      	retn
 34393                                  
 34394                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34395                                  ;;
 34396                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 34397                                  ;;
 34398                                  ;;	FUNCTION:  Will display a $ terminated string
 34399                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 34400                                  ;;	OUTPUTS:   None
 34401                                  ;;	REGS USED: AX,DX
 34402                                  ;;
 34403                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34404                                  
 34405                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34406                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34407                                  $M_DISPLAY_$_STRING:
 34408 00005856 1E                      	push	ds				;;AN000;;
 34409 00005857 06                      	push	es				;;AN000;;
 34410 00005858 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 34411                                  
 34412                                  	; 08/04/2023
 34413 00005859 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 34414                                  
 34415                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 34416 0000585B 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 34417 0000585E 7518                    	jne	short $MIF119			;;AN000;; No
 34418                                  	
 34419                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 34420 00005860 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 34421 00005863 CD21                    	int	21h				;;AN000;; Write character
 34422                                  		; DOS - DISPLAY OUTPUT
 34423                                  		; DL = character to send to standard output
 34424 00005865 1F                      	pop	ds				;;AN000;;
 34425 00005866 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 34426 00005868 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 34427 0000586B 1E                      	push	ds				;;AN000;;
 34428 0000586C 06                      	push	es				;;AN000;;
 34429 0000586D 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 34430 0000586E 7316                    	jnc	short $MIF120 ; *
 34431                                  
 34432 00005870 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 34433 00005874 CD21                    	int	21h				;;AN000;; Write character
 34434                                  		; DOS - DISPLAY OUTPUT
 34435                                  		; DL = character to send to standard output
 34436                                  	; 08/04/2023
 34437                                  	;clc					;;AN000;; Clear the DBCS indicator
 34438                                  ;$MIF120:
 34439 00005876 EB0D                    	jmp	short $MEN119
 34440                                  $MIF119:
 34441                                  	; 08/04/2023
 34442                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 34443                                  ;$MDO123:
 34444 00005878 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 34445                                  	;jz	short $MEN123
 34446                                  	; 18/04/2023
 34447 0000587A 740A                    	jz	short $MIF120 ; cf = 0
 34448                                  $MDO123: ; 08/04/2023
 34449 0000587C 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 34450 0000587F CD21                    	int	21h				;;AN002;; Display the character
 34451                                  		; DOS - DISPLAY OUTPUT
 34452                                  		; DL = character to send to standard output
 34453 00005881 47                      	inc	di				;;AN002;; Set pointer to next character
 34454 00005882 49                      	dec	cx				;;AN002;; Count this character
 34455 00005883 75F7                    	jnz	short $MDO123
 34456                                  ;$MEN123:
 34457                                  $MEN119:
 34458 00005885 F8                      	clc					;;AN000;;Char functions used don't return carry as error
 34459                                  $MIF120: ; 08/04/2023 ; *
 34460 00005886 1F                      	pop	ds				;;AN000;;
 34461 00005887 C3                      	retn
 34462                                  
 34463                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34464                                  ;;
 34465                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 34466                                  ;; truncates it at the Ctrl-Z if any present.
 34467                                  ;;
 34468                                  ;;	ENTRY:	ds:dx = String to be displayed
 34469                                  ;;		cx = number of chars to be displayed
 34470                                  ;;
 34471                                  ;;	EXIT:	cx = number of chars to be displayed
 34472                                  ;;
 34473                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34474                                  
 34475                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34476                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34477                                  scan_ctrlz:
 34478 00005888 57                      	push	di
 34479 00005889 50                      	push	ax
 34480 0000588A 06                      	push	es
 34481 0000588B 53                      	push	bx
 34482                                  
 34483 0000588C 89D7                    	mov	di,dx
 34484 0000588E 1E                      	push	ds
 34485 0000588F 07                      	pop	es   			;es:di points at string
 34486                                  
 34487 00005890 89CB                    	mov	bx,cx			;save current count
 34488                                  
 34489 00005892 B01A                    	mov	al,1Ah	; Ctrl-Z
 34490 00005894 FC                      	cld
 34491 00005895 F2AE                    	repne	scasb			;find first Ctrl-Z
 34492 00005897 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 34493                                  
 34494 00005899 29CB                    	sub	bx,cx
 34495 0000589B 4B                      	dec	bx			;bx = new count to display
 34496                                  noCtrlZ:
 34497 0000589C 89D9                    	mov	cx,bx			;cx = actual display count
 34498                                  
 34499 0000589E 5B                      	pop	bx
 34500 0000589F 07                      	pop	es
 34501 000058A0 58                      	pop	ax
 34502 000058A1 5F                      	pop	di
 34503                                  $MIF127:	; 08/04/2023
 34504 000058A2 C3                      	retn
 34505                                  
 34506                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34507                                  ;;
 34508                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 34509                                  ;;
 34510                                  ;;	FUNCTION:  Will display a string to a specified handle
 34511                                  ;;	INPUTS:    ES:DI points to beginning of message
 34512                                  ;;		   CX contains the number of bytes to write
 34513                                  ;;		   BX contains the handle to write to
 34514                                  ;;	OUPUTS:    None
 34515                                  ;;	REGS USED: AX,DX
 34516                                  ;;
 34517                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34518                                  
 34519                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34520                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34521                                  $M_DISPLAY_H_STRING:
 34522 000058A3 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 34523 000058A5 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 34524 000058A7 74F9                    	jz	short $MIF127
 34525                                  	
 34526 000058A9 1E                      	push	ds			;;AN000;;
 34527 000058AA 06                      	push	es			;;AN000;;
 34528 000058AB 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34529                                  	
 34530 000058AC B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34531 000058AE 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 34532                                  
 34533 000058B0 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 34534 000058B3 7528                    	jne	short $MIF128		;;AN000;; No
 34535                                  
 34536 000058B5 CD21                    	int	21h			;;AN000;; Write character
 34537                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34538                                  		; BX = file handle, CX = number of bytes to writ
 34539                                  
 34540 000058B7 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34541 000058B8 50                      	push	ax			;;AN000;;
 34542 000058B9 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 34543 000058BC E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 34544 000058BF 58                      	pop	ax			;;AN000;;
 34545 000058C0 1E                      	push	ds			;;AN000;;
 34546 000058C1 06                      	push	es			;;AN000;;
 34547 000058C2 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34548 000058C3 7306                    	jnc	short $MIF129
 34549                                  	
 34550 000058C5 F8                      	clc				;;AN000;; Clear the DBCS indicator
 34551 000058C6 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34552 000058C8 42                      	inc	dx			;;AN000;; Point to next character
 34553 000058C9 CD21                    	int	21h			;;AN000;; Write character
 34554                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34555                                  		; BX = file handle, CX = number of bytes to write, 
 34556                                  $MIF129:
 34557                                  ;SR;
 34558                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 34559                                  ;0 chars written making the caller think there was an error writing. To 
 34560                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 34561                                  ;the char was written, thus fooling the caller.
 34562                                  
 34563 000058CB 9C                      	pushf				;save flags
 34564 000058CC 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 34565 000058D0 7502                    	jne	short m_popf_j		;no, continue
 34566                                  
 34567 000058D2 89C8                    	mov	ax,cx			;yes, fake as if it was written
 34568                                  m_popf_j:
 34569                                  	; 08/04/2023
 34570                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34571 000058D4 EB01                    	jmp	short m_popf		;restore flags
 34572                                  
 34573                                  ; 07/04/2023
 34574                                  ; ---------------------------
 34575                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 34576                                  ; ---------------------------
 34577                                  	; $M_POPF macro
 34578                                  	;jmp	short $+3
 34579                                  intret:
 34580 000058D6 CF                      	iret
 34581                                  m_popf:
 34582 000058D7 0E                      	push	cs
 34583 000058D8 E8FBFF                  	call	intret
 34584                                  	;;; end macro	
 34585                                  ; ---------------------------
 34586                                  
 34587 000058DB EB18                    	jmp	short $MEN128
 34588                                  
 34589                                  $MIF128:
 34590                                  ;SR;
 34591                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 34592                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 34593                                  
 34594 000058DD 55                      	push	bp			; M007
 34595 000058DE 51                      	push	cx
 34596 000058DF E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 34597 000058E2 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 34598 000058E4 59                      	pop	cx			;get old count back ;M007
 34599                                  	
 34600 000058E5 CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 34601                                  	;jnc	short chk_count		;no error, adjust return count
 34602                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 34603                                  	; 08/04/2023
 34604 000058E7 720B                    	jc	short m_cnt_ok
 34605                                  ;M007
 34606                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 34607                                  ;return count will be much less and if this returns to the caller we can get
 34608                                  ;spurious error messages. We check here if the count returned is same as
 34609                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 34610                                  ;case, we fake it as if all bytes have been written. If the return count
 34611                                  ;does not match either count, then we had some other disk error (such as
 34612                                  ;insufficient disk space) and we pass it through
 34613                                  
 34614                                  chk_count:
 34615 000058E9 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 34616 000058EB 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 34617 000058ED 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 34618 000058EF F8                      	clc				;no error either way ;M007
 34619 000058F0 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 34620 000058F2 89C8                    	mov	ax,cx			;return old count ;M007
 34621                                  m_cnt_ok:				; M007
 34622 000058F4 5D                      	pop	bp			; M007
 34623                                  $MEN128:
 34624 000058F5 1F                      	pop	ds			;;AN000;;
 34625                                  ;$MIF127: ; 08/04/2023
 34626 000058F6 C3                      	retn
 34627                                  
 34628                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34629                                  ;;
 34630                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 34631                                  ;;
 34632                                  ;;	FUNCTION:  Will set registers for extended error #39
 34633                                  ;;	INPUTS:    None
 34634                                  ;;	OUPUTS:    AX,BX,CX set
 34635                                  ;;	REGS USED:
 34636                                  ;;
 34637                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34638                                  
 34639                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34640                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 34641                                  
 34642                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34643                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5BFAh
 34644                                  
 34645                                  $M_GET_EXT_ERR_39:
 34646 000058F7 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 34647                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 34648 000058FA BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 34649                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 34650 000058FD B501                    	mov	ch,1			;AN001;
 34651 000058FF C3                      	retn				;AN001;
 34652                                  
 34653                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34654                                  ;;
 34655                                  ;;	PROC NAME: $M_ADD_CRLF
 34656                                  ;;
 34657                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 34658                                  ;;	INPUTS:    DX contains the Input/Class requested
 34659                                  ;;	OUTPUTS:   None
 34660                                  ;;	REGS Revised: CX,ES,DI
 34661                                  ;;
 34662                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34663                                  
 34664                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34665                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34666                                  $M_ADD_CRLF:
 34667                                  	;cmp	dh,0FFh
 34668 00005900 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 34669 00005903 7411                    	je	short $MIF134		;;AN004;; Yes
 34670 00005905 F6C680                  	test	dh,80h ; $M_NO_CRLF_MASK ;;AN004;; Are we to supress the CR LF?
 34671 00005908 750C                    	jnz	short $MIF135
 34672                                  					;;AN004;; No	
 34673 0000590A 1E                      	push	ds			;;AN004;;
 34674 0000590B 07                      	pop	es			;;AN004;; Set ES to data segment
 34675 0000590C 8D3E[609A]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 34676                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 34677 00005910 B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 34678 00005913 E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 34679                                  $MIF135:
 34680                                  $MIF134:
 34681 00005916 C3                      	retn				;;AN004;; Return
 34682                                  
 34683                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34684                                  ;;
 34685                                  ;;	PROC NAME: $M_IS_IT_DBCS
 34686                                  ;;
 34687                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 34688                                  ;;	INPUTS:    AL contains the byte to be checked
 34689                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 34690                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 34691                                  ;;	REGS USED: All restored
 34692                                  ;;
 34693                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34694                                  
 34695                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34696                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34697                                  $M_IS_IT_DBCS:
 34698 00005917 06                      	push	es			;;AN000;; Save Extra Segment register
 34699 00005918 57                      	push	di			;;AN000;; Save DI register
 34700                                  
 34701 00005919 C43E[599A]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 34702                                  	;les	di,[$M_RT+60]		;;AN000;;
 34703 0000591D 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 34704 0000591F 7417                    	jz	short $MIF138		;;AN000;; No
 34705                                  $MDO139:
 34706 00005921 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 34707                                  					;;AN000;; Is this the terminating flag?
 34708 00005925 F8                      	clc				;;AN000;;
 34709 00005926 7410                    	jz	short $MEN139
 34710                                  					;;AN000;; No
 34711 00005928 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 34712 0000592B 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 34713 0000592D 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 34714 00005931 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 34715                                  					;;AN000;; Yes
 34716 00005933 F9                      	stc				;;AN000;; Set carry flag
 34717                                  $MIF141:
 34718 00005934 47                      	inc	di			;;AN000;;
 34719 00005935 47                      	inc	di			;;AN000;;
 34720 00005936 EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 34721                                  $MEN139:
 34722                                  $MIF138:
 34723 00005938 5F                      	pop	di			;;AN000;; Restore DI register
 34724 00005939 07                      	pop	es			;;AN000;; Restore Extra Segment register
 34725 0000593A C3                      	retn				;;AN000;; Return
 34726                                  
 34727                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34728                                  ;;
 34729                                  ;;	PROC NAME: $M_CONVERT2ASC
 34730                                  ;;
 34731                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 34732                                  ;;	INPUTS: DX:AX contains the number to be converted
 34733                                  ;;		$M_RT_DIVISOR contains the divisor
 34734                                  ;;	OUTPUTS: CX contains the number of characters
 34735                                  ;;		Top of stack  --> Last character
 34736                                  ;;				     . . .
 34737                                  ;;		Bot of stack  --> First character
 34738                                  ;;	REGS USED:
 34739                                  ;;
 34740                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34741                                  
 34742                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34743                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34744                                  $M_CONVERT2ASC:
 34745 0000593B 8F06[639A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34746                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 34747                                  	
 34748 0000593F 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 34749 00005941 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 34750 00005942 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 34751                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 34752 00005943 F736[679A]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34753                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 34754 00005947 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 34755                                  						;;AN000;;  and save reduced High Word in BX
 34756 00005948 F736[679A]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34757                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 34758                                  
 34759 0000594C 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 34760 0000594F 7605                    	jna	short $MIF146			;;AN000;; 0-9
 34761 00005951 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 34762 00005954 EB03                    	jmp	short $MEN146
 34763                                  $MIF146:
 34764 00005956 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 34765                                  $MEN146:
 34766 00005959 52                      	push	dx				;;AN000;; Save the digit on the stack
 34767 0000595A 41                      	inc	cx				;;AN000;; Count that digit
 34768 0000595B 09C0                    	or	ax,ax				;;AN000;; Are we done?
 34769 0000595D 7504                    	jnz	short $MLL149			;;AN000;; No
 34770 0000595F 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 34771 00005961 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 34772                                  $MLL149:
 34773 00005963 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 34774                                  ; 28/04/2023
 34775 00005966 740A                    	je	short $MIF153
 34776                                  ;	jne	short $MIF150			;;AN000;; No
 34777                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34778                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34779                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34780                                  ;	;jne	short $MIF151
 34781                                  ;	; 09/04/2023
 34782                                  ;	jne	short $MEN150
 34783                                  ;						;;AN000;; Yes
 34784                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34785                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34786                                  ;	inc	cx				;;AN000;;
 34787                                  ;$MIF151:
 34788                                  ;	jmp	short $MEN150
 34789                                  
 34790                                  $MIF150:
 34791                                  	; 15/06/2023 (6)
 34792                                  	; MSDOS 6.0
 34793                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 34794                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34795                                  	; 15/06/2023 (7)
 34796                                  	; MSDOS 6.22
 34797                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 34798 00005968 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34799                                  
 34800                                  ; 28/04/2023
 34801 0000596B 7405                    	je	short $MIF153
 34802                                  ;	jne	short $MIF154			;;AN000;; No
 34803                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34804                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34805                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34806                                  ;	;jne	short $MIF155			;;AN000;; No
 34807                                  ;	; 09/04/2023
 34808                                  ;	jne	short $MEN154
 34809                                  ;						;;AN000;; Yes
 34810                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34811                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34812                                  ;	inc	cx				;;AN000;;
 34813                                  ;$MIF155:
 34814                                  ;	jmp	short $MEN154
 34815                                  
 34816                                  $MIF154:
 34817                                  	; 15/06/2023 (9)
 34818                                  	; MSDOS 6.0
 34819                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh
 34820                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34821                                  	; 15/06/2023 (11)
 34822                                  	; MSDOS 6.22
 34823                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah
 34824 0000596D 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34825 00005970 750B                    	jne	short $MIF158			;;AN000;; No
 34826                                  ; 28/04/2023
 34827                                  $MIF153:
 34828                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34829 00005972 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34830                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34831 00005976 7505                    	jne	short $MIF159			;;AN000;; No
 34832                                  						;;AN000;; Yes
 34833 00005978 FF36[709A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34834                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34835 0000597C 41                      	inc	cx				;;AN000;;
 34836                                  $MIF159:
 34837                                  $MIF158:
 34838                                  $MEN154:
 34839                                  $MEN150:					;;AN000;;
 34840 0000597D 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 34841                                  						;;AN000;;  and Revised Low Word
 34842 0000597E 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34843                                  	; 28/04/2023
 34844 00005980 EBC1                    	jmp	short $MDO145
 34845                                  ;$MEN145:
 34846                                  	; 28/04/2023
 34847                                  	;xor	ax,ax				;;AN000;; Reset remainder
 34848                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 34849 00005982 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34850 00005984 FF36[639A]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34851                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 34852 00005988 C3                      	retn					;;AN000;; Return
 34853                                  
 34854                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34855                                  ;;
 34856                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 34857                                  ;;
 34858                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 34859                                  ;;	INPUTS:    ES:DI points to beginning of message
 34860                                  ;;		   DS:SI points to first sublist structure in chain
 34861                                  ;;		   BX contains the handle to write to (if applicable)
 34862                                  ;;		   CX contains the length of string to write (before substitutions)
 34863                                  ;;		   BP contains the count of replacables
 34864                                  ;;
 34865                                  ;;	OUTPUTS:
 34866                                  ;;	REGS USED: All
 34867                                  ;;
 34868                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34869                                  
 34870                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34871                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 34872                                  
 34873                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34874                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:54DBh
 34875                                  
 34876                                  $M_DISPLAY_MESSAGE:
 34877                                  ; $DO						;;AN000;; Note: DS:SI -> message
 34878                                  $MDO165:
 34879 00005989 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 34880 0000598B 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 34881                                  ;; $IF NZ					;;AN000;; No
 34882 0000598D 741F                    	jz	short $MIF166			;;AN000;; Yes
 34883                                  	;mov	ah,"%"				;;AN000;; Prepare to scan for %
 34884                                  	;mov	al,0				;;AN004;;
 34885                                  	; 12/08/2024
 34886 0000598F B80025                  	mov	ax,2500h
 34887                                  ;; $DO						;;AN000;; Scan through string until %
 34888                                  $MDO167:
 34889 00005992 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 34890                                  ;; $LEAVE E,AND					;;AN000;; No
 34891 00005995 750A                    	jne	short $MLL168
 34892 00005997 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 34893                                  ;; $LEAVE NE,AND				;;AN000;; No
 34894 0000599B 7404                    	je	short $MLL168
 34895                                  
 34896 0000599D 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 34897                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 34898 0000599F 750D                    	jne	short $MEN167 ; 12/08/2024
 34899                                  $MLL168:
 34900 000059A1 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 34901 000059A4 E870FF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 34902                                  ;;; $IF C					;;AN004;; Yes
 34903 000059A7 7301                    	jnc	short $MIF169
 34904 000059A9 47                      	inc	di				;;AN004;; Increment past second part
 34905                                  ;;; $ENDIF					;;AN004;;
 34906                                  $MIF169:
 34907 000059AA 47                      	inc	di				;;AN000;; Next character in string
 34908 000059AB 42                      	inc	dx				;;AN000;; Size = Size + 1
 34909                                  	;dec	cx				;;AN000;; Decrement total size
 34910                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 34911                                  	;jnz	short $MDO167
 34912                                  	; 12/08/2024
 34913 000059AC E2E4                    	loop	$MDO167
 34914                                  $MEN167:
 34915                                  ;; $ENDIF					;;AN000;;
 34916                                  $MIF166:
 34917 000059AE 56                      	push	si				;;AN000;; Save beginning of sublists
 34918 000059AF 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 34919 000059B1 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 34920                                  ;; $IF NZ					;;AN000;; Yes
 34921 000059B3 7431                    	jz	short $MIF173
 34922 000059B5 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 34923                                  
 34924                                  ;; Search through sublists to find applicable one
 34925                                  
 34926 000059B6 833E[659A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34927                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34928                                  ;;; $IF E					;;AN000;; No
 34929 000059BB 7529                    	jne	short $MIF174
 34930                                  ;;; $SEARCH					;;AN000;;
 34931                                  $MDO175:
 34932                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 34933 000059BD 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 34934                                  	;mov	al,[si+6]
 34935 000059C0 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 34936                                  	; 28/04/2023					
 34937 000059C2 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 34938                                  ;;; $EXITIF E					;;AN000;;
 34939                                  	;jne	short $MIF175
 34940                                  ;;; $ORELSE					;;AN000;; No
 34941                                  	;jmp	short $MSR175
 34942                                  	; 28/04/2023
 34943 000059C6 741E                    	je	short $MSR175
 34944                                  $MIF175:
 34945 000059C8 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 34946                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 34947 000059CA 7504                    	jne	short $MLL178
 34948 000059CC 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 34949                                  ;;; $LEAVE Z					;;AN000;; No
 34950 000059CE 7404                    	jz	short $MEN175
 34951                                  $MLL178:
 34952                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 34953                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 34954                                  	;;add	si,[si+0]
 34955 000059D0 0334                    	add	si,[si]
 34956                                  ;;; ENDLOOP					;;AN000;; Yes
 34957 000059D2 EBE9                    	jmp	short $MDO175
 34958                                  $MEN175:
 34959 000059D4 803E[629A]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 34960                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 34961                                  ;;;; $IF E					;;AN004;; Yes
 34962 000059D9 7508                    	jne	short $MIF180
 34963 000059DB 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 34964 000059DC 42                      	inc	dx				;;AN000;;  at the end of the message
 34965 000059DD 49                      	dec	cx				;;AN000;; Adjust message length
 34966 000059DE 49                      	dec	cx				;;AN000;;
 34967 000059DF 4F                      	dec	di				;;AN000;; Adjust ending address of message
 34968 000059E0 4F                      	dec	di				;;AN000;;
 34969                                  ;;;; $ELSE					;;AN004;; No
 34970 000059E1 EB03                    	jmp	short $MEN180
 34971                                  $MIF180:
 34972 000059E3 BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 34973                                  ;;;; $ENDIF					;;AN004;;
 34974                                  $MEN180:
 34975                                  ;;; $ENDSRCH					;;AN000;;
 34976                                  $MSR175:
 34977                                  ;; $ENDIF					;;AN000;;
 34978                                  $MIF174:
 34979                                  ; $ENDIF					;;AN000;;
 34980                                  $MIF173:
 34981                                  ;; Prepare and display this part of message
 34982                                  
 34983 000059E6 57                      	push	di				;;AN000;; Save pointer to replace number
 34984 000059E7 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 34985 000059E9 E835FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 34986 000059EC 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 34987 000059ED 59                      	pop	cx				;;AN000;; Clean up stack in case error
 34988                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 34989                                  	;jnc	short $MXL3
 34990                                  	;jmp	$MEN165
 34991                                  	; 02/05/2023
 34992 000059EE 7214                    	jc	short $MEN165
 34993                                  $MXL3:
 34994 000059F0 51                      	push	cx				;;AN000;;
 34995                                  
 34996                                  ;; Save and reset pointer registers
 34997                                  
 34998 000059F1 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 34999                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 35000 000059F3 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 35001                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 35002                                  ; $IF NE					;;AN000;; No
 35003 000059F7 7412                    	je	short $MIF187			;;AN000;; Yes			
 35004 000059F9 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 35005                                  ;; $IF NZ					;;AN000;; No
 35006 000059FB 7406                    	jz	short $MIF188			;;AN000;; Yes
 35007 000059FD 49                      	dec	cx				;;AN000;; Decrement total size (%)
 35008 000059FE 49                      	dec	cx				;;AN000;; Decrement total size (#)
 35009 000059FF 47                      	inc	di				;;AN000;; Go past %
 35010 00005A00 47                      	inc	di				;;AN000;; Go past replace number
 35011                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 35012                                  	;jmp	short $MEN188
 35013                                  	; 28/04/2023
 35014 00005A01 EB15                    	jmp	short $MEN187
 35015                                  $MIF188:
 35016 00005A03 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 35017                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 35018                                  $MEN188:
 35019                                  ; $ELSE 					;;AN000;;
 35020                                  	;jmp	short $MEN187
 35021                                  	; 28/04/2023
 35022                                  	; zf = 1
 35023                                  	;jmp	short $MEN165 
 35024                                  
 35025                                  ; 28/04/2023
 35026                                  $MXL4:
 35027                                  $MLL214:
 35028                                  $MEN165:
 35029 00005A04 C706[659A]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 35030                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 35031                                  						;;AN000;; Reset message number to null
 35032 00005A0A C3                      	retn					;;AN000;; Return
 35033                                  
 35034                                  $MIF187:
 35035 00005A0B 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 35036                                  ;; $IF Z					;;AN004;; No
 35037                                  	;jnz	short $MIF192
 35038                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 35039                                  ;; $ELSE					;;AN000;; No
 35040                                  	;jmp	short $MEN192
 35041                                  	; 28/04/2023
 35042 00005A0D 74F4                    	jz	short $MIF188
 35043                                  $MIF192:
 35044 00005A0F 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 35045                                  ;;; $IF Z					;;AN004;; No
 35046 00005A12 7502                    	jnz	short $MIF194
 35047 00005A14 31C9                    	xor	cx,cx				;;AN004;;
 35048                                  ;;; $ENDIF					;;AN000;;
 35049                                  $MIF194:
 35050 00005A16 09FF                    	or	di,di				;;AN004;; Turn ZF off
 35051                                  ;; $ENDIF					;;AN000;;
 35052                                  $MEN192:
 35053                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 35054                                  $MEN187:
 35055                                  ; $LEAVE Z					;;AN000;;
 35056 00005A18 74EA                    	jz	short $MEN165
 35057                                  	;
 35058 00005A1A 55                      	push	bp				;;AN000;; Save the replace count
 35059 00005A1B 57                      	push	di				;;AN000;; Save location to complete message
 35060 00005A1C 06                      	push	es				;;AN000;;
 35061 00005A1D 51                      	push	cx				;;AN000;; Save size of the rest of the message
 35062 00005A1E 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 35063                                  
 35064                                  ;; Determine what action is required on parameter
 35065                                  
 35066 00005A20 833E[659A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 35067                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 35068                                  ; $IF E						;;AN000;;
 35069 00005A25 753B                    	jne	short $MIF199
 35070                                  
 35071                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 35072 00005A27 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35073                                  	;test	byte [si+7],0Fh			;;AN000;;
 35074                                  ;; $IF Z					;;AN000;;
 35075 00005A2B 7508                    	jnz	short $MIF200
 35076                                  
 35077                                  ;; Character type requested
 35078                                  
 35079                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 35080 00005A2D C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35081                                  	;les	di,[si+2]
 35082 00005A30 E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 35083                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 35084 00005A33 EB28                    	jmp	short $MEN200
 35085                                  $MIF200:
 35086                                  ;; ENDIF					;;AN000;;
 35087                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35088 00005A35 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35089                                  	;test	byte [si+7],0Dh			;;AN000;;
 35090                                  ;; $IF Z,OR					;;AN000;;
 35091 00005A39 740C                    	jz	short $MLL202
 35092                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 35093 00005A3B F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35094                                  	;test	byte [si+7],0Eh			;;AN000;;
 35095                                  ;;; $IF Z,OR					;;AN000;;
 35096 00005A3F 7406                    	jz	short $MLL202
 35097                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 35098 00005A41 F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 35099                                  	;test	byte [si+7],0Ch			;;AN000;;
 35100                                  ;;;; $IF Z 					;;AN000;;
 35101 00005A45 7508                    	jnz	short $MIF202
 35102                                  $MLL202:
 35103                                  
 35104                                  ;; Numeric type requested
 35105                                  
 35106                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 35107 00005A47 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35108                                  	;les	di,[si+2]
 35109 00005A4A E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 35110                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 35111 00005A4D EB0E                    	jmp	short $MEN202
 35112                                  $MIF202:
 35113                                  ;;;; ENDIF					;;AN000;;
 35114                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 35115 00005A4F F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 35116                                  	;test	byte [si+7],0Bh			;;AN000;;
 35117                                  ;;;; $IF E					;;AN000;;
 35118 00005A53 7505                    	jnz	short $MIF204
 35119                                  
 35120                                  ;; Date type requested
 35121                                  
 35122 00005A55 E8EC01                  	call	$M_DATE_REPLACE			;;AN000;;
 35123                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 35124 00005A58 EB03                    	jmp	short $MEN204
 35125                                  $MIF204:					;;AN000;;
 35126                                  
 35127                                  ;; Time type requested (Default if we have not matched until here)
 35128                                  
 35129 00005A5A E89E02                  	call	$M_TIME_REPLACE			;;AN000;;
 35130                                  
 35131                                  ;;;; $ENDIF					;;AN000;;
 35132                                  $MEN204:
 35133                                  ;;; $ENDIF					;;AN000;;
 35134                                  $MEN202:
 35135                                  ;; $ENDIF					;;AN000;;
 35136                                  $MEN200:
 35137                                  
 35138                                  ;; With the replace information of the Stack, display the replaceable field
 35139                                  
 35140 00005A5D E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 35141                                  
 35142                                  ;; None of the above - Extended/Parse replace
 35143                                  ; $ELSE 					;;AN000;;
 35144 00005A60 EB03                    	jmp	short $MEN199
 35145                                  $MIF199:
 35146 00005A62 E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 35147                                  ; $ENDIF					;;AN000;;
 35148                                  $MEN199:
 35149                                  
 35150                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 35151                                  
 35152                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 35153 00005A65 7207                    	jc	short $MIF211
 35154                                  	;
 35155 00005A67 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 35156 00005A68 07                      	pop	es				;;AN000;; Get address of the rest of the message
 35157 00005A69 5F                      	pop	di				;;AN000;;
 35158 00005A6A 5D                      	pop	bp				;;AN000;; Get replacment count
 35159 00005A6B 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 35160                                  ; $ELSE						;;AN000;;
 35161 00005A6C EB03                    	jmp	short $MEN211
 35162                                  $MIF211:
 35163 00005A6E 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 35164                                  	; 28/04/2023
 35165                                  	;stc					;;AN000;;
 35166                                  ; $ENDIF					;;AN000;;
 35167                                  $MEN211:
 35168 00005A71 833E[659A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 35169                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 35170                                  ; $ENDDO NE,OR					;;AN000;;
 35171 00005A76 758C                    	jne	short $MLL214
 35172                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 35173                                  	; 10/04/2023
 35174                                  	;jc	short $MXL4
 35175 00005A78 E90EFF                  	jmp	$MDO165
 35176                                  
 35177                                  ; 28/04/2023
 35178                                  ;$MXL4:
 35179                                  ;$MLL214:
 35180                                  ;$MEN165:
 35181                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 35182                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 35183                                  ;						;;AN000;; Reset message number to null
 35184                                  ;	retn					;;AN000;; Return
 35185                                  
 35186                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35187                                  ;;
 35188                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 35189                                  ;;
 35190                                  ;;	FUNCTION:
 35191                                  ;;	INPUTS:
 35192                                  ;;	OUPUTS:
 35193                                  ;;
 35194                                  ;;	REGS USED:
 35195                                  ;;
 35196                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35197                                  
 35198                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35199                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35200                                  
 35201                                  $M_EXT_PAR_REPLACE:
 35202 00005A7B 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35203 00005A7D A1[659A]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 35204                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 35205 00005A80 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35206                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 35207 00005A86 E8B2FE                  	call	$M_CONVERT2ASC			;;AN000;;
 35208                                  $MDO215:
 35209 00005A89 58                      	pop	ax				;;AN000;; Get character in register
 35210 00005A8A 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35211                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 35212 00005A8E 43                      	inc	bx				;;AN000;; Increase buffer count
 35213 00005A8F 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 35214 00005A92 7503                    	jne	short $MIF216			;;AN000;; No
 35215 00005A94 E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35216                                  $MIF216:
 35217 00005A97 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 35218 00005A99 75EE                    	jnz	short $MDO215
 35219                                  
 35220 00005A9B B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 35221 00005A9E 8987[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 35222                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 35223 00005AA2 43                      	inc	bx				;;AN000;; Increase buffer count
 35224 00005AA3 43                      	inc	bx				;;AN000;; Increase buffer count
 35225                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35226                                  	;retn					;;AN000::
 35227                                  	; 11/04/2023
 35228                                  	;jmp	$M_FLUSH_BUF
 35229                                  
 35230                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35231                                  ;;
 35232                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 35233                                  ;;
 35234                                  ;;	FUNCTION: Display the contents of the temporary buffer
 35235                                  ;;	INPUTS: DI contains the number of bytes to display
 35236                                  ;;	OUTPUTS: BX reset to zero
 35237                                  ;;
 35238                                  ;;	REGS USED:
 35239                                  ;;
 35240                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35241                                  	
 35242                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35243                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 35244                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35245                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5E95h
 35246                                  $M_FLUSH_BUF:
 35247 00005AA4 51                      	push	cx				;;AN000;; Save changed regs
 35248 00005AA5 06                      	push	es				;;AN000;;
 35249 00005AA6 57                      	push	di				;;AN000;;
 35250 00005AA7 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 35251 00005AA8 07                      	pop	es				;;AN000;;
 35252 00005AA9 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 35253 00005AAB 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 35254 00005AAD 8D3E[699A]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35255                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 35256 00005AB1 E86DFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 35257 00005AB4 7204                    	jc	short $MIF314
 35258 00005AB6 5F                      	pop	di				;;AN000;; No, Restore changed regs
 35259 00005AB7 07                      	pop	es				;;AN000;;
 35260 00005AB8 59                      	pop	cx				;;AN000;;
 35261                                  	;jmp	short $MEN314
 35262                                  	; 11/04/2023
 35263 00005AB9 C3                      	retn
 35264                                  $MIF314:
 35265 00005ABA 83C406                  	add	sp,6				;;AN000;; Fix stack
 35266 00005ABD F9                      	stc					;;AN000;;
 35267                                  $MEN314:
 35268 00005ABE C3                      	retn					;;AN000;; Return
 35269                                  
 35270                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35271                                  ;;
 35272                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35273                                  
 35274                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35275                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 35276                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35277                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5DD6h
 35278                                  $M_DISPLAY_REPLACE:
 35279 00005ABF 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 35280                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 35281 00005AC1 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 35282                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 35283 00005AC5 7511                    	jne	short $MIF276
 35284                                  	
 35285 00005AC7 C787[699A]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 35286                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 35287                                  	
 35288 00005ACD 43                      	inc	bx				;;AN000;; Increment count
 35289 00005ACE 43                      	inc	bx				;;AN000;; Increment count
 35290                                  	
 35291 00005ACF C687[699A]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h ; $M_SPACE
 35292                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 35293                                  	
 35294 00005AD4 43                      	inc	bx				;;AN000;; Increment count
 35295 00005AD5 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 35296                                  $MIF276:
 35297 00005AD8 5D                      	pop	bp				;;AN000;; Remember the return address
 35298 00005AD9 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 35299 00005ADB 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 35300                                  
 35301 00005ADD 880E[5F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 35302                                  	;mov	[$M_RT+66],cl
 35303                                  	
 35304                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 35305 00005AE1 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 35306                                  	;mov	al,[si+9]
 35307                                  	
 35308 00005AE4 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 35309 00005AE6 761E                    	jna	short $MIF278
 35310 00005AE8 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 35311 00005AEA 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 35312                                  	
 35313                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 35314 00005AEC F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 35315                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 35316 00005AF0 7414                    	jz	short $MIF279			;;AN000;; No
 35317                                  $MDO280:
 35318                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 35319 00005AF2 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35320                                  	;mov	al,[si+0Ah]
 35321 00005AF5 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35322                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 35323                                  	
 35324 00005AF9 43                      	inc	bx				;;AN000;;
 35325 00005AFA 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 35326 00005AFD 7503                    	jne	short $MIF281
 35327 00005AFF E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35328                                  $MIF281:
 35329 00005B02 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 35330 00005B04 75EC                    	jnz	short $MDO280
 35331                                  $MIF279:
 35332                                  $MIF278:
 35333                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 35334 00005B06 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 35335                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 35336 00005B0A 740C                    	je	short $MIF286
 35337                                  	
 35338                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 35339 00005B0C 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 35340                                  	;;cmp	byte [si+8],cl
 35341 00005B0F 7307                    	jnb	short $MIF287
 35342                                  
 35343                                  	; 03/05/2023
 35344                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 35345                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35346                                  	;;sub	cl,[si+8]
 35347 00005B11 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 35348                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 35349                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35350                                  	;;mov	cl,[si+8]
 35351                                  	; 03/05/2023
 35352 00005B13 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35353 00005B16 28CA                    	sub	dl,cl
 35354                                  $MIF287:
 35355                                  $MIF286:
 35356 00005B18 09C9                    	or	cx,cx				;;AN000;;
 35357 00005B1A 7424                    	jz	short $MIF290			;;AN000;;
 35358                                  $MDO291:
 35359                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 35360 00005B1C F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35361                                  	;test	byte [si+7],0Fh			;;AN000;;
 35362 00005B20 750C                    	jnz	short $MIF292
 35363                                  
 35364                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 35365 00005B22 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35366                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 35367 00005B26 7406                    	jz	short $MIF292			;;AN000;; No
 35368                                  
 35369 00005B28 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 35370 00005B2B 47                      	inc	di				;;AN000;; Next character in string
 35371 00005B2C EB01                    	jmp	short $MEN292
 35372                                  $MIF292:
 35373 00005B2E 58                      	pop	ax				;;AN000;; Get character in register
 35374                                  $MEN292:
 35375                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 35376 00005B2F 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35377                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 35378                                  	; 03/05/2023
 35379 00005B33 43                      	inc	bx				;;AN000;; Increase buffer count
 35380 00005B34 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 35381 00005B37 7503                    	jne	short $MIF295			;;AN000;;
 35382 00005B39 E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35383                                  $MIF295:
 35384 00005B3C FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 35385 00005B3E 75DC                    	jnz	short $MDO291
 35386                                  $MIF290:
 35387                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 35388 00005B40 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 35389                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 35390 00005B44 7518                    	jnz	short $MIF299			;;AN000;; Yes
 35391 00005B46 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 35392 00005B48 7414                    	jz	short $MIF300
 35393                                  $MDO301:
 35394                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 35395 00005B4A 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35396                                  	;mov	al,[si+0Ah]
 35397                                  
 35398                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 35399 00005B4D 8887[699A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35400                                  	; 03/05/2023
 35401                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 35402                                  
 35403 00005B51 43                      	inc	bx				;;AN000;;
 35404 00005B52 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 35405 00005B55 7503                    	jne	short $MIF302			;;AN000;; No
 35406                                  						;;AN000;; Yes
 35407 00005B57 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35408                                  $MIF302:
 35409 00005B5A FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 35410 00005B5C 75EC                    	jnz	short $MDO301			;;AN000;;
 35411                                  $MIF300:
 35412                                  $MIF299:
 35413                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 35414 00005B5E F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35415                                  	;test	byte [si+7],0Fh			;;AN000;;
 35416 00005B62 7506                    	jnz	short $MIF307
 35417                                  	
 35418                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 35419 00005B64 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35420                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 35421                                  	; 11/04/2023
 35422                                  	;jz	short $MIF307			;;AN000;;
 35423                                  	;jmp	short $MEN307			;;AN000;;
 35424 00005B68 750C                    	jnz	short $MEN307
 35425                                  $MIF307:
 35426 00005B6A 08D2                    	or	dl,dl				;;AN000;;
 35427 00005B6C 7408                    	jz	short $MIF309			;;AN000;;
 35428                                  $MDO310:
 35429 00005B6E 8F06[639A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 35430                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 35431 00005B72 FECA                    	dec	dl				;;AN000;; Are we done?
 35432 00005B74 75F8                    	jnz	short $MDO310
 35433                                  $MIF309:
 35434                                  $MEN307:
 35435 00005B76 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 35436 00005B79 55                      	push	bp				;;AN000;; Restore the return address
 35437 00005B7A C3                      	retn					;;AN000;;
 35438                                  
 35439                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35440                                  ;;
 35441                                  ;;	PROC NAME: $M_CHAR_REPLACE
 35442                                  ;;
 35443                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 35444                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35445                                  ;;		ES:DI contains the VALUE from SUBLIST
 35446                                  ;;	OUTPUTS: CX contains number of characters on stack
 35447                                  ;;		 Top of stack  --> Last character
 35448                                  ;;					. . .
 35449                                  ;;		 Bot of stack  --> First character
 35450                                  ;;
 35451                                  ;;	OTHER REGS Revised: AX
 35452                                  ;;
 35453                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35454                                  
 35455                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35456                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35457                                  $M_CHAR_REPLACE:
 35458 00005B7B 5D                      	pop	bp				;;AN000;; Save return address
 35459                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 35460 00005B7C F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 35461                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 35462 00005B80 7512                    	jnz	short $MIF317			;;AN000;; No
 35463 00005B82 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 35464 00005B85 50                      	push	ax				;;AN000;; Put it on the stack
 35465 00005B86 41                      	inc	cx				;;AN000;; Increase the count
 35466 00005B87 E88DFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 35467 00005B8A 7306                    	jnc	short $MIF318
 35468 00005B8C 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 35469 00005B90 50                      	push	ax				;;AN000;; Put it on the stack
 35470 00005B91 F8                      	clc					;;AN000;; Clear the carry
 35471                                  $MIF318:
 35472 00005B92 EB0D                    	jmp	short $MEN317
 35473                                  $MIF317:
 35474                                  $MDO321:
 35475 00005B94 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 35476 00005B97 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 35477 00005B99 7404                    	jz	short $MEN321			;;AN000;; Yes
 35478 00005B9B 47                      	inc	di				;;AN000;; Next character
 35479 00005B9C 41                      	inc	cx				;;AN000;; Increment the count
 35480 00005B9D EBF5                    	jmp	short $MDO321
 35481                                  $MEN321:
 35482 00005B9F 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 35483                                  $MEN317:
 35484 00005BA1 55                      	push	bp				;;AN000;; Restore return address
 35485 00005BA2 C3                      	retn					;;AN000;;	
 35486                                  
 35487                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35488                                  ;;
 35489                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 35490                                  ;;
 35491                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 35492                                  ;;		  and prepare to display
 35493                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35494                                  ;;		ES:DI contains the VALUE from SUBLIST
 35495                                  ;;	OUTPUTS: CX contains number of characters on stack
 35496                                  ;;		 Top of stack  --> Last character
 35497                                  ;;					. . .
 35498                                  ;;		 Bot of stack  --> First character
 35499                                  ;;	OTHER REGS Revised: BX,DX,AX
 35500                                  ;;
 35501                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35502                                  
 35503                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35504                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35505                                  $M_BIN2ASC_REPLACE:
 35506 00005BA3 5D                      	pop	bp				;;AN000;; Save return address
 35507 00005BA4 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35508 00005BA6 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 35509 00005BA8 C706[679A]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 35510                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 35511                                  
 35512 00005BAE 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 35513                                  
 35514                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 35515 00005BB0 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35516                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 35517 00005BB4 7511                    	jnz	short $MIF325			;;AN000;; No
 35518                                  	
 35519 00005BB6 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 35520                                  
 35521                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35522 00005BB9 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35523                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 35524 00005BBD 753D                    	jnz	short $MIF326			;;AN000;; No
 35525                                  			 
 35526 00005BBF A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 35527 00005BC1 7433                    	jz	short $MIF327			;;AN000;; No
 35528                                  						;;AN000;; Yes				
 35529                                  	; 12/04/2023
 35530                                  	;inc	bx				;;AN000;; Remember that it was negative
 35531 00005BC3 247F                    	and	al,01111111b			;;AN000;; Make it positive
 35532                                  
 35533                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 35534                                  	;jmp	short $MIF327
 35535 00005BC5 EB2E                    	jmp	short $MIF350 ; inc bx
 35536                                  
 35537                                  ; 12/04/2023
 35538                                  %if 0
 35539                                  
 35540                                  $MIF327:
 35541                                  $MIF335:	; 12/04/2023
 35542                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35543                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35544                                  $MIF326:
 35545                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35546                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35547                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35548                                  	jnz	short $MIF330			;;AN000;; No
 35549                                  						;;AN000;; Yes
 35550                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35551                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35552                                  $MIF330:
 35553                                  	jmp	short $MEN325
 35554                                  
 35555                                  %endif
 35556                                  
 35557                                  $MIF325:
 35558                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 35559 00005BC7 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35560                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 35561 00005BCB 7513                    	jnz	short $MIF333			;;AN000;; No
 35562                                  						;;AN000;; Yes
 35563 00005BCD 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 35564                                  
 35565                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35566 00005BD0 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35567                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35568 00005BD4 7526                    	jnz	short $MIF334			;;AN000;; No
 35569                                  						;;AN000;; Yes
 35570 00005BD6 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 35571 00005BD9 741B                    	jz	short $MIF335			;;AN000;; No
 35572                                  						;;AN000;; Yes
 35573                                  	; 12/04/2023
 35574                                  	;inc	bx				;;AN000;; Remember that it was negative
 35575 00005BDB 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 35576                                  
 35577                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35578                                  	;jmp	short $MIF335
 35579 00005BDE EB15                    	jmp	short $MIF350 ; inc bx
 35580                                  
 35581                                  ; 12/04/2023
 35582                                  %if 0
 35583                                  
 35584                                  $MIF335:
 35585                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35586                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35587                                  $MIF334:
 35588                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 35589                                  	jnz	short $MIF338
 35590                                  
 35591                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35592                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35593                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35594                                  	jnz	short $MIF338			;;AN000;; No
 35595                                  						;;AN000;; Yes
 35596                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35597                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35598                                  $MIF338:
 35599                                  	jmp	short $MEN333			;;AN000;;
 35600                                  %endif
 35601                                  
 35602                                  $MIF333:
 35603 00005BE0 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 35604 00005BE3 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 35605                                  
 35606                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35607 00005BE7 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35608                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35609 00005BEB 750F                    	jnz	short $MIF341			;;AN000;; No
 35610                                  						;;AN000;; Yes
 35611 00005BED F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 35612 00005BF0 7404                    	jz	short $MIF342			;;AN000;; No
 35613                                  						;;AN000;; Yes
 35614                                  	; 12/04/2023
 35615                                  	;inc	bx				;;AN000;; Remember that it was negative
 35616 00005BF2 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 35617                                  	
 35618                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35619                                  $MIF350:
 35620 00005BF5 43                      	inc	bx
 35621                                  $MIF342:
 35622                                  	; 12/04/2023
 35623                                  $MIF327:
 35624                                  $MIF335:
 35625 00005BF6 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35626                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35627                                  $MIF341:
 35628                                  $MIF326:
 35629                                  	; 18/04/2023
 35630                                  $MIF334:
 35631                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35632 00005BFC F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35633                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35634 00005C00 7506                    	jnz	short $MIF345			;;AN000;; No
 35635                                  						;;AN000;; Yes
 35636 00005C02 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35637                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35638                                  
 35639                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35640                                  	; ****************************************
 35641                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5F64h
 35642                                  $MIF345:
 35643                                  	; *** (Disassembled MSDOS 6.22 COMMAND.COM source code.)
 35644                                  $MEN333:
 35645 00005C08 F6440740                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],40h
 35646                                  	;test	byte [si+7],40h		; MSDOS 6.22
 35647                                  				; (Custom/International flag for thousand separator)
 35648 00005C0C 7428                    	jz	short $MEN325
 35649 00005C0E 50                      	push	ax			; MSDOS 6.22
 35650 00005C0F 52                      	push	dx
 35651 00005C10 B438                    	mov	ah,38h	 ; International
 35652 00005C12 30C0                    	xor	al,al
 35653 00005C14 8D16[699A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35654 00005C18 CD21                    	int	21h		; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 35655                                  				; get current-country info
 35656                                  				; DS:DX -> buffer for returned info
 35657 00005C1A 7305                    	jnb	short $MEN341		; (use country depended thousand separator)
 35658 00005C1C C606[709A]2C            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','
 35659                                  $MEN341:
 35660 00005C21 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35661                                  	;mov	al,[si+0Ah]		; (save pad character)
 35662 00005C24 89C7                    	mov	di,ax
 35663 00005C26 5A                      	pop	dx
 35664 00005C27 58                      	pop	ax
 35665 00005C28 C6440A2C                	mov	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','  ; $M_COMMA
 35666                                  	;mov	byte [si+0Ah],','	; (comma is needed for converting procedure)
 35667 00005C2C E80CFD                  	call	$M_CONVERT2ASC
 35668 00005C2F 89F8                    	mov	ax,di
 35669 00005C31 88440A                  	mov	[si+$M_SUBLIST_STRUC.$M_S_PAD],al
 35670                                  	;mov	[si+0Ah],al		; (restore pad character)
 35671 00005C34 EB03                    	jmp	short $MEN345		; MSDOS 6.22
 35672                                  	; *** (end of disassembled MSDOS 6.22 COMMAND.COM source code porehion) 
 35673                                  	; ****************************************
 35674                                  ;$MIF345:
 35675                                  ;$MEN333:
 35676                                  $MEN325:
 35677 00005C36 E802FD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 35678                                  $MEN345: 	; 15/06/2023 - MSDOS 6.22
 35679 00005C39 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 35680 00005C3B 7405                    	jz	short $MIF349			;;AN000;; No
 35681                                  						;;AN000;; Yes
 35682 00005C3D 31D2                    	xor	dx,dx				;;AN000;;
 35683 00005C3F B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 35684 00005C41 52                      	push	dx				;;AN000;;
 35685                                  $MIF349:
 35686 00005C42 55                      	push	bp				;;AN000;; Restore return address
 35687 00005C43 C3                      	retn					;;AN000;; Return
 35688                                  
 35689                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35690                                  ;;
 35691                                  ;;	PROC NAME: $M_DATE_REPLACE
 35692                                  ;;
 35693                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 35694                                  ;;		  country format and prepare to display
 35695                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35696                                  ;;		ES:DI points at VALUE from SUBLIST
 35697                                  ;;	OUTPUTS: CX contains number of characters on stack
 35698                                  ;;		 Top of stack  --> Last character
 35699                                  ;;					. . .
 35700                                  ;;		 Bot of stack  --> First character
 35701                                  ;;	OTHER REGS Revised: DX,AX
 35702                                  ;;
 35703                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35704                                  
 35705                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35706                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35707                                  $M_DATE_REPLACE:
 35708 00005C44 5D                      	pop	bp				;;AN000;; Save return address
 35709                                  
 35710 00005C45 C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35711                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35712                                  	
 35713 00005C4B E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 35714                                  						;;AN000;; All O.K.?
 35715 00005C4E 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 35716                                  	; 12/04/2023
 35717                                  	;xor	ax,ax				;;AN000;; Reset AX value
 35718                                  	
 35719                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 35720                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 35721                                  	;jne	short $MIF351
 35722                                  	; 12/04/2023
 35723 00005C50 A1[699A]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35724 00005C53 09C0                    	or	ax,ax
 35725 00005C55 751D                    	jnz	short $MIF351
 35726                                  
 35727 00005C57 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 35728 00005C5A E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35729                                  
 35730 00005C5D FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35731                                  	;push	word [$M_RT+87]			;;AN000;;
 35732                                  	
 35733 00005C61 41                      	inc	cx				;;AN000;; Increment count
 35734 00005C62 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 35735                                  
 35736 00005C64 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35737                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35738 00005C67 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35739                                  	
 35740 00005C6A FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35741                                  	;push	word [$M_RT+87]			;;AN000;;
 35742                                  
 35743 00005C6E 41                      	inc	cx				;;AN000;; Increment count
 35744 00005C6F 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35745                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35746                                  	; 12/04/2023
 35747                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35748 00005C72 EB3C                    	jmp	short $MIF354 ; **
 35749                                  $MIF351:
 35750                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 35751                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 35752                                  	;jne	short $MIF353
 35753                                  	; 12/04/2023
 35754                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35755 00005C74 48                      	dec	ax 
 35756 00005C75 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 35757                                  
 35758 00005C77 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 35759 00005C7A E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35760                                  
 35761 00005C7D FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35762                                  	;push	word [$M_RT+87]			;;AN000;;
 35763                                  	
 35764 00005C81 41                      	inc	cx				;;AN000;; Increment count
 35765 00005C82 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 35766                                  
 35767 00005C84 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35768                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35769 00005C87 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35770                                  
 35771 00005C8A FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35772                                  	;push	word [$M_RT+87]			;;AN000;;
 35773                                  
 35774 00005C8E 41                      	inc	cx				;;AN000;;
 35775                                  	      
 35776 00005C8F 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35777                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35778                                  
 35779                                  	; 12/04/2023
 35780                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35781 00005C92 EB1C                    	jmp	short $MIF354 ; **
 35782                                  	; 12/04/2023
 35783                                  $MIF352:
 35784                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 35785 00005C94 48                      	dec	ax
 35786                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 35787                                  	;xor	ax,ax
 35788                                  	;jmp	short $MIF355
 35789                                  	; 12/04/2023
 35790 00005C95 751C                    	jnz	short $MIF355
 35791                                  $MIF353:
 35792                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 35793                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 35794                                  	;jne	short $MIF355
 35795                                  
 35796 00005C97 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35797                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35798 00005C9A E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35799                                  	
 35800 00005C9D FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35801                                  	;push	word [$M_RT+87]			;;AN000;;
 35802                                  
 35803 00005CA1 41                      	inc	cx				;;AN000;;
 35804                                  
 35805 00005CA2 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35806                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35807 00005CA5 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35808                                  	
 35809 00005CA8 FF36[749A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35810                                  	;push	word [$M_RT+87]			;;AN000;;
 35811                                  	
 35812 00005CAC 41                      	inc	cx				;;AN000;;
 35813                                  
 35814 00005CAD E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 35815                                  	; 12/04/2023
 35816                                  $MIF354:
 35817 00005CB0 E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 35818                                  $MIF355:
 35819 00005CB3 55                      	push	bp				;;AN000;; Restore return address
 35820 00005CB4 C3                      	retn					;;AN000;; Return
 35821                                  
 35822                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35823                                  ;;
 35824                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35825                                  
 35826                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35827                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35828                                  $M_GET_DATE:
 35829                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35830                                  	;mov	al,0 				;;AN000;; Get current country info
 35831                                  	; 12/04/2023
 35832 00005CB5 B80038                  	mov	ax,3800h
 35833                                  	;
 35834 00005CB8 8D16[699A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35835                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35836 00005CBC CD21                    	int	21h				;;AN000;;
 35837 00005CBE 730B                    	jnc	short $MIF357
 35838                                  	;
 35839 00005CC0 C706[699A]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 35840                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 35841 00005CC6 C606[749A]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 35842                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 35843                                  $MIF357:
 35844 00005CCB C3                      	retn					;;AN000;;
 35845                                  
 35846                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35847                                  ;;
 35848                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35849                                  
 35850                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35851                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35852                                  $M_YEAR:
 35853 00005CCC 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35854                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 35855                                  
 35856                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 35857 00005CCF F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35858                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 35859 00005CD3 7508                    	jnz	short $MIF359			;;AN000;; No
 35860                                  						;;AN000;; Yes
 35861 00005CD5 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35862 00005CD8 7603                    	jna	short $MIF360			;;AN000;;
 35863 00005CDA B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35864                                  $MIF360:
 35865                                  $MIF359:
 35866 00005CDD C3                      	retn					;;AN000;;
 35867                                  
 35868                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35869                                  ;;
 35870                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35871                                  
 35872                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35873                                  $M_CONVERTDATE:
 35874                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 35875 00005CDE 8F06[699A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35876                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35877 00005CE2 880E[5F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35878                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35879 00005CE6 E852FC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35880 00005CE9 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 35881 00005CEA 3A0E[5F9A]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35882 00005CEE 7505                    	jne	short $MIF363			;;AN000;; No
 35883 00005CF0 B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35884 00005CF3 50                      	push	ax				;;AN000;; Save it
 35885 00005CF4 41                      	inc	cx				;;AN000;; Count it
 35886                                  $MIF363:
 35887 00005CF5 41                      	inc	cx				;;AN000;; Restore CX
 35888 00005CF6 FF36[699A]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35889                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35890 00005CFA C3                      	retn
 35891                                  
 35892                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35893                                  ;;
 35894                                  ;;	PROC NAME: $M_TIME_REPLACE
 35895                                  ;;
 35896                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 35897                                  ;;		  and prepare to display
 35898                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35899                                  ;;		ES:DI points at VALUE from SUBLIST
 35900                                  ;;	OUTPUTS: CX contains number of characters on stack
 35901                                  ;;		 Top of stack  --> Last character
 35902                                  ;;					. . .
 35903                                  ;;		 Bot of stack  --> First character
 35904                                  ;;	REGS USED: BP,CX,AX
 35905                                  ;;
 35906                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35907                                  
 35908                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35909                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35910                                  	; 13/08/2024							     ;;
 35911                                  $M_TIME_REPLACE:
 35912 00005CFB 5D                      	pop	bp				;;AN000;; Save return address
 35913                                  
 35914 00005CFC C706[679A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35915                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35916                                  
 35917 00005D02 E87700                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 35918                                  
 35919                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35920 00005D05 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 35921                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35922 00005D09 741A                    	jz	short $MIF365			;;AN000;; No
 35923                                  						;;AN000;; Yes
 35924 00005D0B 803E[7A9A]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35925                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35926 00005D10 7513                    	jne	short $MIF366			;;AN000;; No
 35927                                  						;;AN000;; Yes
 35928 00005D12 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35929                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35930 00005D15 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 35931 00005D17 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 35932 00005D19 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 35933 00005D1B 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 35934                                  $MLL367:
 35935 00005D1D B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 35936                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 35937                                  	;inc	cx				;;AN000;;
 35938                                  	;jmp	short $MEN367			;;AN000;;
 35939                                  	; 12/04/2023
 35940 00005D1F EB02                    	jmp	short $MEN367 ; *
 35941                                  $MIF367:
 35942 00005D21 B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 35943                                  $MEN367:	; * ; 12/04/2023
 35944 00005D23 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 35945 00005D24 41                      	inc	cx				;;AN000;;
 35946                                  ;$MEN367:
 35947                                  $MIF366:
 35948                                  $MIF365:					;;AN000;;
 35949 00005D25 31C0                    	xor	ax,ax				;;AN000;;
 35950                                  	;xor	dx,dx				;;AN000;;
 35951                                  	; 13/08/2024
 35952 00005D27 99                      	cwd	; PCDOS 7.1 COMMAND.COM
 35953                                  	
 35954                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35955 00005D28 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35956                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35957 00005D2C 740B                    	jz	short $MIF372			;;AN000;;
 35958                                  
 35959 00005D2E 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35960                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 35961 00005D31 E8AAFF                  	call	$M_CONVERTTIME			;;AN000;;
 35962                                  
 35963 00005D34 FF36[729A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 35964                                  	;push	word [$M_RT+85]			;;AN000;;
 35965 00005D38 41                      	inc	cx				;;AN000;;
 35966                                  $MIF372:
 35967                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35968 00005D39 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35969                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35970 00005D3D 7506                    	jnz	short $MLL374			;;AN000;; No
 35971                                  
 35972                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 35973 00005D3F F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35974                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 35975 00005D43 740B                    	jz	short $MIF374			;;AN000;; No
 35976                                  $MLL374:
 35977 00005D45 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35978                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 35979 00005D48 E893FF                  	call	$M_CONVERTTIME			;;AN000;;
 35980                                  
 35981 00005D4B FF36[769A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35982                                  	;push	word [$M_RT+89]			;;AN000;;
 35983 00005D4F 41                      	inc	cx				;;AN000;;
 35984                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 35985 00005D50 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 35986                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 35987 00005D53 E888FF                  	call	$M_CONVERTTIME			;;AN000;;
 35988                                  
 35989 00005D56 FF36[769A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35990                                  	;push	word [$M_RT+89]			;;AN000;;
 35991 00005D5A 41                      	inc	cx				;;AN000;;
 35992                                  
 35993 00005D5B 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35994                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35995                                  
 35996                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35997 00005D5E F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 35998                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35999 00005D62 7413                    	jz	short $MIF376			;;AN000;; No
 36000                                  
 36001 00005D64 803E[7A9A]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 36002                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 36003 00005D69 750C                    	jne	short $MIF377			;;AN000;; No
 36004                                  
 36005 00005D6B 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 36006 00005D6D 7C02                    	jnge	short $MIF378 ; jl
 36007 00005D6F 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 36008                                  $MIF378:
 36009                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 36010                                  	;jne	short $MIF380			;;AN000;; No
 36011                                  	; 12/04/2023
 36012 00005D71 20C0                    	and	al,al
 36013 00005D73 7502                    	jnz	short $MIF380	
 36014 00005D75 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 36015                                  $MIF380:
 36016                                  $MIF377:
 36017                                  $MIF376:
 36018 00005D77 E8C1FB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 36019 00005D7A 55                      	push	bp				;;AN000;; Restore return address
 36020 00005D7B C3                      	retn					;;AN000;; Return
 36021                                  
 36022                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36023                                  ;;
 36024                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36025                                  
 36026                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36027                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36028                                  $M_GET_TIME:
 36029                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 36030                                  	;mov	al,0 				;;AN000;; Get current country info
 36031                                  	; 12/04/2023
 36032 00005D7C B80038                  	mov	ax,3800h
 36033                                  	;
 36034 00005D7F 8D16[699A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 36035                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 36036 00005D83 CD21                    	int	21h				;;AN000;;
 36037 00005D85 7310                    	jnc	short $MIF384
 36038                                  
 36039 00005D87 C706[7A9A]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 36040                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 36041 00005D8D C606[769A]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 36042                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 36043 00005D92 C606[729A]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 36044                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 36045                                  $MIF384:
 36046 00005D97 C3                      	retn					;;AN000;;
 36047                                  
 36048                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36049                                  ;;
 36050                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36051                                  
 36052                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36053                                  
 36054                                  ; 12/04/2023 
 36055                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 36056                                  %if 0
 36057                                  $M_CONVERTTIME:
 36058                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 36059                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 36060                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 36061                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 36062                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 36063                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 36064                                  	dec	cx				;;AN000;; Test if size only grew by 1
 36065                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 36066                                  	jne	short $MIF386			;;AN000;; No
 36067                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 36068                                  	push	ax				;;AN000;; Save it
 36069                                  	inc	cx				;;AN000;; Count itount it
 36070                                  $MIF386:
 36071                                  	inc	cx				;;AN000;; Restore CX
 36072                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 36073                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 36074                                  	retn
 36075                                  %endif
 36076                                  
 36077                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36078                                  ;;
 36079                                  ;;	PROC NAME: $M_WAIT_FOR_INPUT
 36080                                  ;;
 36081                                  ;;	FUNCTION:  To accept keyed input and return extended key value
 36082                                  ;;		   in AX register
 36083                                  ;;	INPUTS:    DL contains the DOS function requested for input
 36084                                  ;;	OUTPUTS:   AX contains the extended key value that was read
 36085                                  ;;	REGS USED:
 36086                                  ;;
 36087                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36088                                  
 36089                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36090                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6123h
 36091                                  $M_WAIT_FOR_INPUT:
 36092 00005D98 51                      	push	cx				;;AN000;; Save CX
 36093 00005D99 52                      	push	dx				;;AN000;; Save DX
 36094 00005D9A 1E                      	push	ds				;;AN000;; Save Data segment
 36095                                  
 36096 00005D9B 80FAC0                  	cmp	dl,0C0h ; DOS_CLR_KEYB_BUF_MASK	;;AN001;; Are we to clear the keyboard buffer?
 36097 00005D9E 7608                    	jna	short $MIF388	; jbe		;;AN001;; No,
 36098                                  						;;AN001;; Yes,
 36099 00005DA0 88D0                    	mov	al,dl				;;AN001;; Mov function into AL
 36100 00005DA2 240F                    	and	al,0Fh	; LOW_NIB_MASK		;;AN001;; Mask out the C in high nibble
 36101 00005DA4 B40C                    	mov	ah,0Ch	; DOS_CLR_KEYB_BUF 	;;AN001;; Set input function
 36102 00005DA6 EB02                    	jmp	short $MEN388
 36103                                  $MIF388:
 36104 00005DA8 88D4                    	mov	ah,dl				;;AN000;; Put DOS function in AH
 36105                                  $MEN388:
 36106 00005DAA 06                      	push	es				;;AN000;; Get output buffer segment
 36107 00005DAB 1F                      	pop	ds				;;AN000;;
 36108 00005DAC 89FA                    	mov	dx,di				;;AN000;; Get output buffer offset in case needed
 36109 00005DAE CD21                    	int	21h				;;AN000;; Get keyboard input
 36110 00005DB0 1F                      	pop	ds				;;AN000;;
 36111 00005DB1 80FA0A                  	cmp	dl,0Ah	; DOS_BUF_KEYB_INP	;;AN000;;
 36112                                  	;clc					;;AN000;;
 36113 00005DB4 7412                    	je	short $MIF391
 36114 00005DB6 E85EFB                  	call	$M_IS_IT_DBCS			;;AN000;; Is this character DBCS?
 36115 00005DB9 730B                    	jnc	short $MIF392
 36116 00005DBB 88C1                    	mov	cl,al				;;AN000;; Save first character
 36117 00005DBD 88D4                    	mov	ah,dl				;;AN001;; Get back function
 36118 00005DBF CD21                    	int	21h				;;AN000;; Get keyboard input
 36119 00005DC1 88CC                    	mov	ah,cl				;;AN000;; Retrieve first character AX = xxxx
 36120 00005DC3 F8                      	clc					;;AN000;; Clear carry condition
 36121 00005DC4 EB02                    	jmp	short $MEN392
 36122                                  $MIF392:
 36123 00005DC6 B400                    	mov	ah,0				;;AN000;; AX = 00xx where xx is SBCS
 36124                                  $MEN392:
 36125                                  $MIF391:
 36126                                  	;jc	short $MIF396 ; 15/06/2023
 36127 00005DC8 5A                      	pop	dx				;;AN000;;
 36128 00005DC9 59                      	pop	cx				;;AN000;;
 36129                                  	;jmp	short $MEN396
 36130 00005DCA C3                      	retn
 36131                                  
 36132                                  	; 15/06/2023
 36133                                  ;$MIF396:
 36134                                  	;add	sp,4				;;AN000;;
 36135                                  	;stc					;;AN000;; Reset carry flag
 36136                                  ;$MEN396:
 36137                                  	;retn					;;AN000;; Return
 36138                                  
 36139                                  ; ----------------------------
 36140                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 36141                                  ; ----------------------------
 36142                                  ; include msgdcl.inc
 36143                                  ; ----------------------------
 36144                                  
 36145                                  ;============================================================================
 36146                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 36147                                  ;============================================================================
 36148                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36149                                  
 36150                                  ;****************************************************************************
 36151                                  ;
 36152                                  ; This file contains routines needed to parse and implement user-given
 36153                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 36154                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 36155                                  ; the variables in highvar.inc, for use by the rest of the routines.
 36156                                  ;
 36157                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 36158                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 36159                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 36160                                  ;    DH/LH module opts
 36161                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 36162                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 36163                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 36164                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 36165                                  ; available during the load.
 36166                                  ;
 36167                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 36168                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 36169                                  ; upper-memory block which was not specified by the user... in addition, if
 36170                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 36171                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 36172                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 36173                                  ; free any UMBs so allocated.
 36174                                  ;
 36175                                  ; When a device driver loads, there is the additional problem of allocating its
 36176                                  ; initial load site; this should be restricted to the first UMB specified on
 36177                                  ; the command-line.  The function FreezeUM temporarily allocates all remaining
 36178                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 36179                                  ; UMB.  Then the initial allocation may be made, and a call to UnFreeze will
 36180                                  ; return any so-allocated memory elements to FREE, for the true load.  Note
 36181                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 36182                                  ;
 36183                                  ;****************************************************************************
 36184                                  
 36185                                  ;___PROCEDURES_______________________________________________________________
 36186                                  ;
 36187                                  ;   AddrToUmb   - converts a segment address in AX to its appropriate UMB #
 36188                                  ;   BigFree     - makes ES:0 point to the largest free MCB in UMB given as AL
 36189                                  ;   FixMem      - scans the UM chain and concatenates adjacent free MCBs
 36190                                  ;   FreezeUM    - Marks FROZEN all UM elements now FREE, save those in load UMB
 36191                                  ;   GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36192                                  ;   GetLoadUMB  - Returns the load UMB number in AL (-1 if not specified)
 36193                                  ;   GetSize     - Returns the UMB in AL's minimum size (0 if not specified)
 36194                                  ;   GetXNum     - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36195                                  ;   HideUMBs    - links UMBs and hides upper-memory as appropriate
 36196                                  ;   InitVar     - initializes all the variables used in ParseVar and HideUMBs
 36197                                  ;   NextMCB     - moves an MCB pointer forward to the next MCB
 36198                                  ;   ParseVar    - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36199                                  ;   PrTable     - produces a printout of the variables in highvar.inc
 36200                                  ;   StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36201                                  ;   StoLoadUMB  - Overrides the load UMB number with what's in AL
 36202                                  ;   UmbHead     - returns in AX the address of the first UMB block (0x9FFF)
 36203                                  ;   UnFreeze    - Marks FROZEN elements as FREE
 36204                                  ;
 36205                                  ;___VARIABLES________________________________________________________________
 36206                                  ;
 36207                                  ;   gnradix     - After a call to GetXNum, is 16 or 10, depending on the # read
 36208                                  ;
 36209                                  ;   Internal:
 36210                                  ;___PROCEDURES_______________________________________________________________
 36211                                  ;
 36212                                  ;   convUMB     - checks after GetXNum to convert an address to a UMB number
 36213                                  ;   findUMB     - makes ES:0 point to the first MCB in UMB given as AL
 36214                                  ;   fm_link     - links UMBs not already linked in
 36215                                  ;   fm_unlink   - unlinks UMBs if fm_umb is set to 0
 36216                                  ;   frezMCB     - marks as 8+FROZEN the MCB at ES:0
 36217                                  ;   hideMCB     - marks as HIDDEN the MCB at ES:0
 36218                                  ;   hideUMB     - marks as HIDDEN all FREE elements in UMB passed as AL
 36219                                  ;   hideUMB?    - hides as appropriate the UMB in CL
 36220                                  ;   hl_unlink   - unlinks UMBs if fm_umb is set to 0; restores strategy too
 36221                                  ;   incArgc     - increments fm_argc, for use with LH command-line parsing
 36222                                  ;   isEOL       - returns with ZF set iff AL contains CR or LF, or 0
 36223                                  ;   isFreeMCB   - returns with ZF set if current MCB (ES:0) is FREE
 36224                                  ;   isFrozMCB   - returns with ZF set if current MCB (ES:0) is FROZEN
 36225                                  ;   isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36226                                  ;   isSysMCB    - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 36227                                  ;   isTiny      - returns with ZF set if user didn't specify /S
 36228                                  ;   isWhite     - returns with ZF set iff AL contains whitespace (or "=")
 36229                                  ;   loadLow     - returns AL==0 if UMB0 == 0, else AL==1
 36230                                  ;   mul32       - multiplies the number in DX:AX by gnradix
 36231                                  ;   parseL      - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36232                                  ;   setUMBs     - links umbs and sets allocation strategy for a load
 36233                                  ;   shrinkMCB   - breaks an MCB into two pieces, the lowest one's size==AX
 36234                                  ;   stowSiz     - marks a given UMB as having a given minimum size
 36235                                  ;   stowUMB     - marks a given UMB as used, if it hasn't been so marked before
 36236                                  ;   toDigit     - converts a character-digit to its binary counterpart
 36237                                  ;   toPara      - divides DX:AX by 16; result in AX only
 36238                                  ;   toUpper     - accepts one argument (probly a register), and upper-cases it.
 36239                                  ;   unHideMCB   - marks as FREE the MCB at ES:0
 36240                                  ;   unMarkUMB   - marks a given UMB as unused, even if previously marked used
 36241                                  ;
 36242                                  ;****************************************************************************
 36243                                  
 36244                                  ;DOS_CHECK_STRATEGY equ 5800h ; Int 21h, Func 58h, Svc 0 = check alloc strat
 36245                                  ;DOS_SET_STRATEGY   equ 5801h ; Int 21h, Func 58h, Svc 1 = set alloc strategy
 36246                                  ;DOS_CHECK_UMBLINK  equ 5802h ; Int 21h, Func 58h, Svc 2 = check link state
 36247                                  ;DOS_SET_UMBLINK    equ 5803h ; Int 21h, Func 58h, Svc 3 = set link state
 36248                                  ;DOS_GET_DOS_LISTS  equ   52h ; Int 21h, Func 52h = return list of lists
 36249                                  ;DOS_UMB_HEAD       equ   8Ch ; Offset from ES (after func52h) to get UMBHead
 36250                                  
 36251                                  ; -----------------------------------------------------------------------------
 36252                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 36253                                  ; -----------------------------------------------------------------------------
 36254                                  ; ENTRY:       None
 36255                                  ; EXIT:        Variables listed in highvar.inc are initialized
 36256                                  ; ERROR EXIT:  None
 36257                                  ; USES:        Flags, variables in highvar.inc
 36258                                  ; -----------------------------------------------------------------------------
 36259                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 36260                                  ; are largely ignored, but it is initialized nonetheless.
 36261                                  ; -----------------------------------------------------------------------------
 36262                                  
 36263                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36264                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:615Fh
 36265                                  InitVar:	; proc	near
 36266                                  	;push	ax
 36267                                  	;push	cx
 36268                                  	;push	di
 36269 00005DCB 06                      	push	es ; * es = ds
 36270 00005DCC 8E06[F39D]              	mov	es,[RESSEG]		;Point ES into appropriate data segment
 36271 00005DD0 31C0                    	xor	ax,ax
 36272                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 36273                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 36274 00005DD2 26A3[D604]              	mov	[es:fInHigh],ax ; 16/06/2023
 36275 00005DD6 26A3[D804]              	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 36276 00005DDA 26C606[DA04]FF          	mov	byte [es:UmbLoad],0FFh	;UNSPECIFIED
 36277                                  					;Later is the # of the 1st spec'd UMB
 36278 00005DE0 26A2[DD04]              	mov	[es:fm_argc],al		;Start with zero args having been read
 36279                                  
 36280 00005DE4 FC                      	cld
 36281                                  
 36282 00005DE5 B91000                  	mov	cx,16 ; MAXUMB		;For each entry
 36283 00005DE8 BF[0004]                	mov	di,UmbUsed		;on the UmbUsed array,
 36284 00005DEB F3AA                    	rep	stosb			;	Store 0
 36285                                  
 36286                                  	;mov	cx,16 ; MAXUMB		;Okay... for each entry
 36287 00005DED B110                    	mov	cl,16
 36288 00005DEF BF[1004]                	mov	di,UmbSize		;on the UmbSize array,
 36289 00005DF2 F3AB                    	rep	stosw			;	Store 0
 36290                                  
 36291 00005DF4 07                      	pop	es ; * es = ds
 36292                                  	;pop	di
 36293                                  	;pop	cx
 36294                                  	;pop	ax
 36295 00005DF5 C3                       	retn
 36296                                  
 36297                                  ;InitVar endp
 36298                                  
 36299                                  ; -----------------------------------------------------------------------------
 36300                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 36301                                  ; -----------------------------------------------------------------------------
 36302                                  ; ENTRY   : None
 36303                                  ; EXIT    : None
 36304                                  ; ERROR   : None
 36305                                  ; USES    : Flags, fm_umb, fm_strat
 36306                                  ; -----------------------------------------------------------------------------
 36307                                  
 36308                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36309                                  FixMem:
 36310                                  	;push	ax
 36311                                  	;push	bx
 36312                                  	;push	cx
 36313                                  	;push	dx
 36314 00005DF6 06                      	push	es
 36315                                  
 36316 00005DF7 E84900                  	call	fm_link			; Link in UMBs
 36317                                  
 36318 00005DFA E82302                  	call	UmbHead			; Get first upper-memory MCB address (0x9FFF)
 36319 00005DFD 723F                    	jc	short fmX		; (if couldn't get it, leave now).
 36320                                  
 36321 00005DFF 8EC0                    	mov	es,ax			; It returns in AX, so move it to ES.
 36322                                  
 36323                                  ; - Walk MCB Chain ------------------------------------------------------------
 36324                                  
 36325 00005E01 31D2                    	xor	dx,dx			; We're keeping the address of the last MCB
 36326 00005E03 89D1                    	mov 	cx,dx			; in CX... and the last owner
 36327 00005E05 42                      	inc	dx			; in dx as we go through the loop:
 36328                                  
 36329                                  ; ------------------------------------------
 36330                                  ; FM10--DX  = last MCB's owner's PSP address
 36331                                  ;       CX  = last MCB's address (segment)
 36332                                  ; ------------------------------------------
 36333                                  
 36334                                  fm10:	
 36335 00005E06 26A00000                	mov	al,[es:arena_signature]	; if 'Z', don't repeat loop
 36336                                  	;mov	al,[es:0]
 36337 00005E0A 268B1E0100              	mov	bx,[es:arena_owner]	; if not zero, do nothing
 36338                                  	;mov	bx,[es:1]
 36339 00005E0F 09D3                    	or	bx,dx			; dx was owner of previous MCB
 36340 00005E11 7516                    	jnz	short fm30		; If not both zero, don't cat.
 36341                                  
 36342                                  ; - Coalesce memory blocks at ES:00 and CX:00 ---------------------------------
 36343                                  
 36344                                  fm20:	
 36345 00005E13 268B1E0300              	mov	bx,[es:arena_size]	; Grab this block's Size,
 36346                                  	;mov	bx,[es:3]
 36347 00005E18 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 36348 00005E1A 26A20000                	mov	[es:arena_signature], al ; & move the SECOND sig here
 36349                                  	;mov	[es:0],al
 36350                                  
 36351 00005E1E 26031E0300              	add	bx,[es:arena_size]	; Size += first MCB's size
 36352                                  	;add	bx,1			; And add one for the header
 36353 00005E23 43                      	inc	bx
 36354 00005E24 26891E0300              	mov	[es:arena_size],bx	; Write the size
 36355                                  
 36356                                  	; ---------------------------------------------------------------------
 36357                                  fm30:	
 36358 00005E29 8CC1                    	mov	cx,es			; Put this address on the stack
 36359 00005E2B 268B160100              	mov	dx,[es:arena_owner]	; And remember its owner
 36360                                  	;mov	dx,[es:1]
 36361                                  
 36362                                  	;NextMCB es,bx			; Move to the next MCB
 36363                                  	
 36364 00005E30 8CC3                    	mov	bx,es
 36365                                  	;add	bx,[es:3]
 36366 00005E32 26031E0300              	add	bx,[es:arena_size]
 36367 00005E37 43                      	inc	bx
 36368 00005E38 8EC3                    	mov	es,bx
 36369                                  
 36370                                  	;cmp	al,'Z'	; cmp al,5Ah
 36371 00005E3A 3C5A                    	cmp	al,arena_signature_end
 36372 00005E3C 75C8                    	jnz	short fm10		; If signature != 'Z', there are more.
 36373                                  fmX:	
 36374 00005E3E E81900                  	call	fm_unlink		; Unlink UMBs
 36375                                  
 36376 00005E41 07                      	pop	es
 36377                                  	;pop	dx
 36378                                  	;pop	cx
 36379                                  	;pop	bx
 36380                                  	;pop	ax
 36381 00005E42 C3                      	retn
 36382                                  
 36383                                  ; -----------------------------------------------------------------------------
 36384                                  ; 16/06/2023
 36385                                  
 36386                                  ;INT 21h - DOS 5+ - GET OR SET UMB LINK STATE
 36387                                  ; .......................................................
 36388                                  ;     AH = 58h
 36389                                  ;     AL = subfunction
 36390                                  ;	02h get UMB link state
 36391                                  ;	    Return:
 36392                                  ;		AL = current link state
 36393                                  ;		  00h - UMBs not part of DOS memory chain
 36394                                  ;		  01h - UMBs in DOS memory chain
 36395                                  ;	03h set UMB link state
 36396                                  ;	    BX = new link state
 36397                                  ;		0000h - remove UMBs from DOS memory chain
 36398                                  ;		0001h - add UMBs to DOS memory chain
 36399                                  ;
 36400                                  ;Return: CF clear if successful
 36401                                  ;	CF set on error
 36402                                  ;	AX = error code (01h) (see #01680)
 36403                                  ; .......................................................
 36404                                  
 36405                                  ; -----------------------------------------------------------------------------
 36406                                  ;*** fm_link - links UMBs not already linked in
 36407                                  ; -----------------------------------------------------------------------------
 36408                                  ; ENTRY:    None
 36409                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 36410                                  ; ERROR:    None
 36411                                  ; USES:     AX, BX, fm_umb
 36412                                  ; -----------------------------------------------------------------------------
 36413                                  
 36414                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36415                                  fm_link:
 36416 00005E43 B80258                  	mov	ax,5802h ; DOS_CHECK_UMBLINK
 36417 00005E46 CD21                    	int	21h			; Current link-state is now in al
 36418                                  
 36419                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 36420                                  
 36421                                  	;push	es
 36422                                  	;mov	es,[RESSEG]
 36423                                  	;mov	[es:fm_umb],al
 36424                                  	;pop	es
 36425 00005E48 1E                      	push	ds
 36426 00005E49 8E1E[F39D]              	mov	ds,[RESSEG]
 36427 00005E4D A2[DB04]                	mov	[fm_umb],al
 36428 00005E50 1F                      	pop	ds
 36429                                  
 36430 00005E51 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 36431 00005E54 BB0100                  	mov	bx,1
 36432 00005E57 CD21                    	int	21h
 36433 00005E59 C3                      	retn
 36434                                  
 36435                                  ; -----------------------------------------------------------------------------
 36436                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 36437                                  ; -----------------------------------------------------------------------------
 36438                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 36439                                  ; EXIT:     None
 36440                                  ; ERROR:    None
 36441                                  ; USES:     AX, BX
 36442                                  ; -----------------------------------------------------------------------------
 36443                                  
 36444                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36445                                  fm_unlink:
 36446 00005E5A 31DB                    	xor	bx,bx
 36447                                  	
 36448                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 36449                                  
 36450 00005E5C 1E                      	push    ds
 36451 00005E5D 8E1E[F39D]              	mov     ds,[RESSEG]
 36452 00005E61 8A1E[DB04]              	mov     bl,[fm_umb]
 36453 00005E65 1F                      	pop     ds
 36454                                  	
 36455 00005E66 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 36456 00005E69 CD21                    	int	21h			; so just use that, and call int 21h
 36457 00005E6B C3                      	retn
 36458                                  
 36459                                  ; -----------------------------------------------------------------------------
 36460                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36461                                  ; laid out in highvar.inc
 36462                                  ; -----------------------------------------------------------------------------
 36463                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 36464                                  ; EXIT:     ES:SI points to first character in child program name
 36465                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 36466                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 36467                                  ; -----------------------------------------------------------------------------
 36468                                  ; Error codes (in AX if carry set on return):
 36469                                  ;
 36470                                  
 36471                                  ;PV_InvArg	equ	1	; Invalid argument passed
 36472                                  ;PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 36473                                  ;PV_InvSwt	equ	3	; Unrecognized switch passed
 36474                                  
 36475                                  ;
 36476                                  ; This routine exects ES:SI to point to a string much like the following:
 36477                                  ;    "/S/L:1,200;2 module options"
 36478                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 36479                                  ; required, though that's what this routine is supposed to parse.
 36480                                  ;
 36481                                  
 36482                                  ;optS		equ	'S'	; /S
 36483                                  ;optL		equ	'L'	; /L:...
 36484                                  
 36485                                  ;
 36486                                  ; -----------------------------------------------------------------------------
 36487                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 36488                                  ; a command-line for spawning a child process. For a typical LH command, say,
 36489                                  ;     lh /l:1,1000;2 print/d:lpt2
 36490                                  ; the arguments would look like (one per line):
 36491                                  ;     lh
 36492                                  ;     /l
 36493                                  ;     1
 36494                                  ;     1000
 36495                                  ;     2
 36496                                  ;     print
 36497                                  ;     /d
 36498                                  ;     :lpt2
 36499                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 36500                                  ; arg was the filename. So, inside this routine, we keep a running counter
 36501                                  ; of the number of arguments LH will need to skip in order to get to the
 36502                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 36503                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 36504                                  ; for:
 36505                                  ;    Each /L
 36506                                  ;    Each /S (there should be only one)
 36507                                  ;    Each UMB number (they follow ":" or ";")
 36508                                  ;    Each UMB size   (they follow ",")
 36509                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 36510                                  ; "print". Note that InitVar initializes fm_argc to zero.
 36511                                  ; -----------------------------------------------------------------------------
 36512                                  
 36513                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36514                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6216h
 36515                                  ParseVar:	; proc	near
 36516                                  	;push	di
 36517                                  	;push	ds ; *
 36518                                  	;push	es
 36519                                  	;
 36520                                  	; 16/06/2023
 36521                                  	; es = ds (from 'ParseLhCmd')
 36522                                  	;push	es		; Make DS:SI point to it, as well as ES:SI
 36523                                  	;pop	ds		; (regardless if we're in devhigh or loadhigh)
 36524                                  	
 36525 00005E6C FC                      	cld
 36526                                  
 36527                                  ; ------------------------------------------------
 36528                                  ; PV10--ES:SI = any whitespace on the command-line
 36529                                  ; ------------------------------------------------
 36530                                  
 36531                                  pv10:	
 36532 00005E6D AC                      	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 36533 00005E6E E8A800                  	call	isWhite
 36534 00005E71 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 36535 00005E73 3C2F                    	cmp	al,'/' ; SWTCH
 36536 00005E75 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 36537                                  
 36538 00005E77 4E                      	dec	si		; Backup--it's now "odule options", and we need
 36539 00005E78 F8                      	clc			; that "m" we just read (or whatever it is).
 36540 00005E79 EB2C                    	jmp	short pvX	; Then return with carry clear == we're done.
 36541                                  pv20:
 36542 00005E7B AC                      	lodsb			; Just read 'S' or 'L', hopefully
 36543                                  
 36544                                  	;toUpper al		; So we make it upper-case, and...
 36545 00005E7C 24DF                    	and	al,0DFh
 36546                                  
 36547 00005E7E 3C53                    	cmp	al,'S' ; optS	; just read 'S'?
 36548 00005E80 7510                    	jne	short pv30
 36549                                  
 36550 00005E82 E87E00                  	call	incArgc		; If it's /S, it's another arg for LH to skip.
 36551                                  
 36552                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 36553                                  
 36554                                  	;push	es
 36555                                  	;mov	es,[RESSEG]
 36556                                  	;mov	byte [es:fUmbTiny],1
 36557                                  	;pop	es
 36558 00005E85 1E                      	push	ds
 36559 00005E86 8E1E[F39D]              	mov	ds,[RESSEG]
 36560 00005E8A C606[D704]01            	mov	byte [fUmbTiny],1
 36561 00005E8F 1F                      	pop	ds
 36562                                  
 36563 00005E90 EBDB                    	jmp	short pv10	; possibly even "/L...".
 36564                                  pv30:	
 36565 00005E92 3C4C                    	cmp	al,'L' ; optL	; If it's not 'L' either, then it's a bad
 36566 00005E94 750B                    	jne	short pvE1	; switch!
 36567                                  
 36568 00005E96 E86A00                  	call	incArgc		; If it's /L, it's another arg for LH to skip.
 36569                                  
 36570 00005E99 E80C00                  	call	parseL
 36571 00005E9C 73CF                    	jnc	short pv10	; If no carry, go back and look for more
 36572                                  
 36573 00005E9E 4E                      	dec	si		; Else, back up and exit.
 36574 00005E9F EB03                    	jmp	short pvErr	; AX has already been set by parseL
 36575                                  pvE1:	
 36576 00005EA1 B80300                  	mov	ax,3 ; PV_InvSwt
 36577                                  				; Unrecognized switch passed
 36578                                  pvErr:
 36579 00005EA4 4E                      	dec	si
 36580 00005EA5 4E                      	dec	si
 36581 00005EA6 F9                      	stc
 36582                                  pvX:	
 36583                                  	;pop	es
 36584                                  	;pop	ds ; *
 36585                                  	;pop	di
 36586 00005EA7 C3                      	retn
 36587                                  
 36588                                  ;ParseVar endp
 36589                                  
 36590                                  ; -----------------------------------------------------------------------------
 36591                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36592                                  ; -----------------------------------------------------------------------------
 36593                                  ; ENTRY:    ES:SI points to colon
 36594                                  ; EXIT:     ES:SI points to first character not parsed
 36595                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 36596                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 36597                                  ; -----------------------------------------------------------------------------
 36598                                  ; If the string here is terminated with anything other than whitespace or a
 36599                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 36600                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 36601                                  ; makes sure the app /L: is reported as being the culprit.
 36602                                  ; -----------------------------------------------------------------------------
 36603                                  
 36604                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36605                                  parseL:
 36606 00005EA8 AC                      	lodsb
 36607 00005EA9 3C3A                    	cmp	al,':'		; Make sure they did /L:
 36608 00005EAB 754A                    	jne	short plE1	; If they didn't, return with carry set.
 36609                                  
 36610                                  ; ------------------------------------------
 36611                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 36612                                  ; ------------------------------------------
 36613                                  
 36614                                  pl10:
 36615 00005EAD E8FD00                  	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 36616 00005EB0 724B                    	jc	short plE2	; And error if it's a bad number.
 36617 00005EB2 E8C801                  	call	convUMB		; Convert any address to a UMB number
 36618                                  
 36619 00005EB5 88C1                    	mov	cl,al	; !*	; Remember the UMB number
 36620 00005EB7 E88300                  	call	stowUMB		; Mark this UMB # as used;
 36621 00005EBA 7241                    	jc	short plE2	; If it was already marked, it'll error
 36622                                  
 36623 00005EBC E84400                  	call	incArgc		; Each UMB number is another arg for LH to skip
 36624                                  
 36625 00005EBF AC                      	lodsb
 36626 00005EC0 3C3B                    	cmp	al,';'		; Did "umb;" ?
 36627 00005EC2 74E9                    	je	short pl10	; Yep: go back and get another UMB.
 36628                                  
 36629 00005EC4 E85200                  	call	isWhite		; Did "umb " ?
 36630 00005EC7 7439                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 36631                                  
 36632 00005EC9 E84200                  	call	isEOL		; Did "umb" ?
 36633 00005ECC 7433                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36634                                  
 36635 00005ECE 3C2F                    	cmp	al,'/' ; SWTCH	; Did "umb/" ? (as in, "/L:1,100;2/S")
 36636 00005ED0 742F                    	je	short plSwX	; If so, back up ES:SI one character and return
 36637                                  
 36638 00005ED2 3C2C                    	cmp	al,','		; Did "umb," ?
 36639 00005ED4 7521                    	jne	short plE1	; Just what the heck DID they do? Return error.
 36640                                  
 36641                                  ; --- Read a size -------------------------------------------------------------
 36642                                  
 36643 00005ED6 E8D400                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 36644 00005ED9 721C                    	jc	short plE1	; And error if it's a bad size.
 36645                                  
 36646 00005EDB E83401                  	call	toPara		; Convert from bytes to paragraphs
 36647                                  
 36648 00005EDE E88600                  	call	stowSiz		; CL still has the UMB number for this routine
 36649                                  
 36650 00005EE1 E81F00                  	call	incArgc		; Each UMB size is another arg for LH to skip
 36651                                  
 36652 00005EE4 AC                      	lodsb
 36653 00005EE5 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 36654 00005EE7 74C4                    	je	short pl10		;
 36655                                  
 36656 00005EE9 E82D00                  	call	isWhite		; Did it end with whitespace?
 36657 00005EEC 7414                    	jz	short plX	; If so, we're done here--go back.
 36658                                  
 36659 00005EEE E81D00                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 36660 00005EF1 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36661                                  
 36662 00005EF3 3C2F                    	cmp	al,'/' ; SWTCH	; Did they do "umb,size/" ?
 36663 00005EF5 740A                    	je	short plSwX	; If so, again, we're done here.
 36664                                  plE1:	
 36665 00005EF7 B80100                  	mov	ax,1 ; PV_InvArg
 36666                                  				; If not, we don't know WHAT they did...
 36667 00005EFA 4E                      	dec	si
 36668 00005EFB F9                      	stc
 36669 00005EFC C3                      	retn
 36670                                  plE2:
 36671                                  	; cf = 1 
 36672 00005EFD B80200                  	mov	ax,2 ; PV_BadUMB
 36673                                  				; In this case, they've specified a UMB twice
 36674                                  	;stc
 36675 00005F00 C3                      	retn
 36676                                  plSwX:
 36677 00005F01 4E                      	dec	si		; If we hit a '/' character, back up one char
 36678                                  				; so the whitespace checker will see it too.
 36679                                  plX:
 36680                                  	; cf = 0
 36681                                  	;clc			; Then just return with carry clear, so
 36682 00005F02 C3                      	retn			; ParseVar will go about its business.
 36683                                  
 36684                                  ; -----------------------------------------------------------------------------
 36685                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 36686                                  ; -----------------------------------------------------------------------------
 36687                                  ; ENTRY:    None
 36688                                  ; EXIT:     None
 36689                                  ; ERROR:    None
 36690                                  ; USES:     fm_argc, flags
 36691                                  ; -----------------------------------------------------------------------------
 36692                                  
 36693                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36694                                  incArgc:
 36695                                  	;push	ax
 36696                                  
 36697                                  	;;getdata al,fm_argc	; Obtain previous value of fm_argc,
 36698                                  	;
 36699                                  	;push	ds		; getdata (macro)
 36700                                  	;			; getdata al, fm_argc
 36701                                  	;mov	ds,[RESSEG]
 36702                                  	;mov	al,[fm_argc]	; Obtain previous value of fm_argc,
 36703                                  	;pop	ds
 36704                                  	;
 36705                                  	;inc	al		; Increment it,
 36706                                  	;
 36707                                  	;;putdata fm_argc,al	; And store it right back.
 36708                                  	;
 36709                                  	;push	es		; putdata (macro)
 36710                                  	;			; putdata fm_argc, al
 36711                                  	;mov	es,[RESSEG]
 36712                                  	;mov	[es:fm_argc],al	; and store it right back.
 36713                                  	;pop	es
 36714                                  
 36715                                  	; 16/06/2023
 36716 00005F03 1E                      	push	ds
 36717 00005F04 8E1E[F39D]              	mov	ds,[RESSEG]
 36718 00005F08 FE06[DD04]              	inc	byte [fm_argc]	; increment fm_argc
 36719 00005F0C 1F                      	pop	ds
 36720                                  
 36721                                  	;pop	ax
 36722 00005F0D C3                      	retn
 36723                                  
 36724                                  ; -----------------------------------------------------------------------------
 36725                                  ;*** isEOL - returns with ZF set iff AL contains CR or LF, or 0
 36726                                  ; -----------------------------------------------------------------------------
 36727                                  ; ENTRY:    AL contains character to test
 36728                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 36729                                  ; ERROR:    None
 36730                                  ; USES:     ZF
 36731                                  ; -----------------------------------------------------------------------------
 36732                                  
 36733                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36734                                  isEOL:
 36735                                  	;cmp	al,0		; Null-terminator
 36736 00005F0E 20C0                    	and	al,al
 36737 00005F10 7406                    	jz	short ieX
 36738 00005F12 3C0D                    	cmp	al,0Dh ; CR	; Carriage Return
 36739 00005F14 7402                    	je	short ieX
 36740 00005F16 3C0A                    	cmp	al,0Ah ; LF	; LineFeed
 36741                                  ieX:
 36742 00005F18 C3                      	retn
 36743                                  
 36744                                  
 36745                                  ; -----------------------------------------------------------------------------
 36746                                  ;*** isWhite - returns with ZF set iff AL contains whitespace (or "=")
 36747                                  ; -----------------------------------------------------------------------------
 36748                                  ; ENTRY:    AL contains character to test
 36749                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 36750                                  ; ERROR:    None
 36751                                  ; USES:     ZF
 36752                                  ; -----------------------------------------------------------------------------
 36753                                  
 36754                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36755                                  isWhite:
 36756 00005F19 3C20                    	cmp	al,' '		; Space
 36757 00005F1B 7406                    	je	short iwX
 36758 00005F1D 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 36759 00005F1F 7402                    	je	short iwX
 36760 00005F21 3C09                    	cmp	al,09h ; TAB	; Tab
 36761                                  iwX:
 36762 00005F23 C3                      	retn
 36763                                  
 36764                                  ; -----------------------------------------------------------------------------
 36765                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 36766                                  ; -----------------------------------------------------------------------------
 36767                                  ; ENTRY:    AL contains UMB number
 36768                                  ; EXIT:     None
 36769                                  ; ERROR:    None
 36770                                  ; USES:     Flags, variables in highvar.inc
 36771                                  ; -----------------------------------------------------------------------------
 36772                                  
 36773                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36774                                  unMarkUMB:
 36775                                  	;;pushreg <ax,bx,di,es>
 36776                                  	;push	ax ; ***
 36777                                  	
 36778                                  	;push	bx ; **
 36779                                  	
 36780                                  	;push	di
 36781                                  	;push	es
 36782 00005F24 1E                      	push	ds ; *	
 36783                                  
 36784                                  	;;dataseg es
 36785                                  	;mov	es,[RESSEG]
 36786                                  
 36787 00005F25 8E1E[F39D]              	mov	ds,[RESSEG] ; *
 36788                                  	
 36789                                  	;xor	ah,ah ; 0
 36790                                  	;mov	bx,ax
 36791                                  	;mov	byte [es:bx+UmbUsed],0
 36792                                  	;mov	[bx+UmbUsed],ah ; marks the UMB as unused
 36793 00005F29 88C3                    	mov	bl,al
 36794 00005F2B 30FF                    	xor	bh,bh ; 0	
 36795 00005F2D 88BF[0004]              	mov	[bx+UmbUsed],bh ; 0 ; **
 36796                                  
 36797                                  	;cmp	[es:UmbLoad],al
 36798                                  	;jnz	short umu10
 36799 00005F31 3806[DA04]              	cmp	[UmbLoad],al
 36800 00005F35 7504                    	jne	short umu10
 36801                                  
 36802                                  	;mov	byte [es:UmbLoad],0
 36803                                  	;mov	[UmbLoad],ah	; If unmarked the load UMB, load into convent.
 36804 00005F37 883E[DA04]              	mov	[UmbLoad],bh ; 0 ; **
 36805                                  umu10:	
 36806 00005F3B 1F                      	pop	ds ; *
 36807                                  	;;popreg <es,di,bx,ax>
 36808                                  	;pop	es
 36809                                  	;pop	di
 36810                                  	
 36811                                  	;pop	bx ; **
 36812                                  	
 36813                                  	;pop	ax ; ***
 36814                                  
 36815                                  	;;normseg es
 36816                                  	
 36817 00005F3C C3                      	retn
 36818                                  
 36819                                  ; -----------------------------------------------------------------------------
 36820                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 36821                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 36822                                  ; listed in the /L:... chain.  If it's the first one specified, it sets UmbLoad
 36823                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 36824                                  ; -----------------------------------------------------------------------------
 36825                                  ; ENTRY:    AL contains UMB number, as specified by the user
 36826                                  ; EXIT:     None
 36827                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 36828                                  ; USES:     AX, Flags, variables in highvar.inc
 36829                                  ; -----------------------------------------------------------------------------
 36830                                  
 36831                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36832                                  stowUMB:
 36833 00005F3D 3C10                    	cmp	al,16 ; MAXUMB
 36834 00005F3F 7202                    	jb	short su10
 36835 00005F41 F9                      	stc
 36836 00005F42 C3                      	retn			; Ooops-- UMB>=MAXUMB
 36837                                  su10:
 36838                                  	;pushreg <bx,di,si,ds,es>
 36839                                  	;dataseg es		; Point ES into appropriate data segment
 36840                                  	;dataseg ds		; Point DS into appropriate data segment
 36841                                  
 36842                                  	;push	bx ; **
 36843                                  	
 36844                                  	;push	di
 36845                                  	;push	si
 36846                                  
 36847 00005F43 1E                      	push	ds ; *
 36848                                  
 36849                                  	;push	es
 36850                                  	;mov	es,[RESSEG]
 36851 00005F44 8E1E[F39D]              	mov	ds,[RESSEG]
 36852                                  
 36853 00005F48 803E[DA04]FF            	cmp	byte [UmbLoad],0FFh ; UNSPECIFIED
 36854                                  				; If this, we haven't been here before
 36855 00005F4D 7503                    	jne	short su20
 36856 00005F4F A2[DA04]                	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 36857                                  su20:	
 36858 00005F52 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 36859 00005F54 740F                    	jz	short su30	; that we should do here.
 36860                                  
 36861                                  	;mov	bl,al
 36862                                  	;xor	bh,bh
 36863                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 36864 00005F56 30E4                    	xor	ah,ah
 36865 00005F58 89C3                    	mov	bx,ax
 36866 00005F5A B001                    	mov	al,1
 36867                                  
 36868                                  	;xchg	[es:bx+UmbUsed],al
 36869 00005F5C 8687[0004]              	xchg	[bx+UmbUsed],al
 36870                                  
 36871 00005F60 08C0                    	or	al,al		; If it was already 1, then al==1... and that
 36872 00005F62 7401                    	jz	short su30	; means an error.
 36873                                  
 36874 00005F64 F9                      	stc			; OOOPS! This one's been used before. :(
 36875                                  su30:	
 36876                                  	;popreg	<es,ds,si,di,bx>
 36877                                  	;normseg ds
 36878                                  	;normseg es
 36879                                  	;retn
 36880                                  
 36881                                  	;pop	es
 36882                                  	
 36883 00005F65 1F                      	pop	ds ; *
 36884                                  	
 36885                                  	;pop	si
 36886                                  	;pop	di
 36887                                  	
 36888                                  	;pop	bx ; **
 36889                                  
 36890 00005F66 C3                      	retn
 36891                                  
 36892                                  ; -----------------------------------------------------------------------------
 36893                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36894                                  ; -----------------------------------------------------------------------------
 36895                                  ; ENTRY:    CL contains UMB number, AX contains size
 36896                                  ; EXIT:     None
 36897                                  ; ERROR:    None
 36898                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36899                                  ; -----------------------------------------------------------------------------
 36900                                  	
 36901                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36902                                  stowSiz:
 36903                                  	;pushreg <bx,di,es>
 36904                                  	;dataseg es		; Point ES into appropriate data seg
 36905                                  
 36906                                  	;push	bx ; **
 36907                                  	
 36908                                  	;push	di
 36909                                  	;push	es
 36910                                  	;mov	es,[RESSEG]
 36911 00005F67 1E                      	push	ds ; *
 36912 00005F68 8E1E[F39D]              	mov	ds,[RESSEG]
 36913                                  
 36914 00005F6C 88CB                    	mov	bl,cl		; Now bl==UMB number, AX==size
 36915 00005F6E B700                    	mov	bh,0		;     bx==UMB number, AX==size
 36916 00005F70 D0E3                    	shl	bl,1		;     bx==offset into array, AX=size
 36917                                  	;mov	[es:bx+UmbSize],ax
 36918 00005F72 8987[1004]              	mov	[bx+UmbSize],ax	; Store the size
 36919                                  
 36920 00005F76 1F                      	pop	ds ; *
 36921                                  
 36922                                  	;popreg	<es,di,bx>
 36923                                  	;normseg es		; Return ES to where it was
 36924                                  
 36925                                  	;pop	es
 36926                                  	;pop	di
 36927                                  	
 36928                                  	;pop	bx ; **
 36929                                  
 36930 00005F77 C3                      	retn
 36931                                  
 36932                                  ; -----------------------------------------------------------------------------
 36933                                  ;*** toDigit - converts a character-digit to its binary counterpart
 36934                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 36935                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).  A-F
 36936                                  ; are considered valid iff gnradix is 16.
 36937                                  ; -----------------------------------------------------------------------------
 36938                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 36939                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 36940                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 36941                                  ; USES:     CL, Flags
 36942                                  ; -----------------------------------------------------------------------------
 36943                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36944                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36945                                  ; will be 10 or 16.
 36946                                  ; -----------------------------------------------------------------------------
 36947                                  
 36948                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36949                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6358h
 36950                                  gnradix:
 36951 00005F78 0000                    	dw	0		; Must be a word--16x16 multiplication
 36952                                  
 36953                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36954                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:635Ah
 36955                                  toDigit:
 36956                                  	;cmp	word [gnradix],16
 36957 00005F7A 803E[785F]10            	cmp	byte [gnradix],16
 36958 00005F7F 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 36959                                  
 36960 00005F81 80F961                  	cmp	cl,'a'
 36961 00005F84 7209                    	jb	short td10
 36962 00005F86 80F966                  	cmp	cl,'f'
 36963 00005F89 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 36964 00005F8B 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 36965                                  ;	clc			; <- CLC is implicit from last SUB
 36966 00005F8E C3                      	retn
 36967                                  td10:
 36968 00005F8F 80F941                  	cmp	cl,'A'
 36969 00005F92 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 36970 00005F94 80F946                  	cmp	cl,'F'
 36971 00005F97 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 36972 00005F99 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 36973                                  ;	clc			; <- CLC is implicit from last SUB
 36974                                  tdErr:
 36975 00005F9C C3                      	retn
 36976                                  td20:
 36977 00005F9D 80F930                  	cmp	cl,'0'		; If less than zero,
 36978                                  	;jb	short tdE	; Done.
 36979 00005FA0 72FA                    	jb	short tdErr ; cf = 1
 36980 00005FA2 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 36981 00005FA5 7704                    	ja	short tdE	; Done.
 36982 00005FA7 80E930                  	sub	cl,'0'	  ; 30h	; Okay--make '0'==0 and return.
 36983                                  ;	clc			; <- CLC is implicit from last SUB
 36984 00005FAA C3                      	retn
 36985                                  tdE:
 36986 00005FAB F9                      	stc
 36987 00005FAC C3                      	retn
 36988                                  
 36989                                  ; -----------------------------------------------------------------------------
 36990                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36991                                  ; -----------------------------------------------------------------------------
 36992                                  ; ENTRY:    ES:SI points to an ascii string to scan
 36993                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 36994                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 36995                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 36996                                  ; -----------------------------------------------------------------------------
 36997                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36998                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36999                                  ; will be 10 or 16.
 37000                                  ; -----------------------------------------------------------------------------
 37001                                  
 37002                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 37003                                  GetXNum:
 37004                                  	;pushreg <bx,cx,ds>
 37005                                  	
 37006                                  	;push	bx ; **
 37007 00005FAD 51                      	push	cx ; *
 37008                                  	
 37009                                  	;push	ds
 37010                                  
 37011 00005FAE FC                      	cld
 37012 00005FAF 31C0                    	xor	ax,ax
 37013 00005FB1 31DB                    	xor	bx,bx
 37014 00005FB3 31C9                    	xor	cx,cx
 37015 00005FB5 31D2                    	xor	dx,dx		; Start with 0 (makes sense)
 37016                                  
 37017                                  	;mov	word [gnradix],10 ; And default to a radix of 10 (dec)
 37018 00005FB7 C606[785F]0A            	mov	byte [gnradix],10
 37019                                  
 37020 00005FBC 268A0C                  	mov	cl,[es:si]	; Now AX=0, BX=0, CH=0/CL=char, DX=0
 37021 00005FBF E8B8FF                  	call	toDigit
 37022 00005FC2 722D                    	jc	short gxnE	; If it's not a digit, leave now.
 37023                                  
 37024 00005FC4 08C9                    	or	cl,cl
 37025 00005FC6 7515                    	jnz	short gxn20	; Doesn't have '0x'
 37026 00005FC8 268A4C01                	mov	cl,[es:si+1]
 37027 00005FCC 80F978                  	cmp	cl,'x'		; Either 'x'...
 37028 00005FCF 7405                    	je	short gxn10
 37029 00005FD1 80F958                  	cmp	cl,'X'		; ...or 'X' means it's hexadecimal
 37030 00005FD4 7507                    	jne	short gxn20
 37031                                  
 37032                                  gxn10:
 37033                                  	;mov	word [gnradix],16
 37034 00005FD6 C606[785F]10            	mov	byte [gnradix],16
 37035 00005FDB 46                      	inc	si		; Since we read "0x", march over it.
 37036 00005FDC 46                      	inc	si
 37037                                  
 37038                                  ; ------------------------------------------------------
 37039                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 37040                                  ;        DX:AX = current total
 37041                                  ;        BX    = 0
 37042                                  ;        CH    = 0
 37043                                  ; ------------------------------------------------------
 37044                                  
 37045                                  gxn20:
 37046 00005FDD 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 37047 00005FE0 46                      	inc	si
 37048                                  
 37049 00005FE1 E896FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 37050 00005FE4 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 37051                                  
 37052 00005FE6 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 37053 00005FE9 7206                    	jc	short gxnX	; (if it's too big, error out)
 37054                                  
 37055 00005FEB 01C8                    	add	ax,cx		; Add the digit
 37056 00005FED 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 37057                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 37058                                  	;jmp	short gxn20
 37059 00005FEF 73EC                    	jnc	short gxn20
 37060                                  gxnE:
 37061                                  	; cf = 1
 37062                                  	;stc			; In this case, we need to set the carry
 37063                                  	;jmp	short gxnX	; and leave--there were no digits given.
 37064                                  ;gxnQ:
 37065                                  	;dec	si		; Don't read in the offensive character.
 37066                                  	;clc			; And clear carry, so they know it's okay.
 37067                                  gxnX:
 37068                                  	;popreg	<ds,cx,bx>
 37069                                  
 37070                                  	;pop	ds
 37071                                  
 37072 00005FF1 59                      	pop	cx ; *
 37073                                  	;pop	bx ; **
 37074                                  
 37075 00005FF2 C3                      	retn
 37076                                  gxnQ:
 37077 00005FF3 4E                      	dec	si
 37078 00005FF4 F8                      	clc
 37079 00005FF5 EBFA                    	jmp	short gxnX
 37080                                  
 37081                                  ; -----------------------------------------------------------------------------
 37082                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 37083                                  ; -----------------------------------------------------------------------------
 37084                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 37085                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 37086                                  ; ERROR:   Carry set if number was too large
 37087                                  ; USES:    Flags, AX, DX
 37088                                  ; -----------------------------------------------------------------------------
 37089                                  
 37090                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37091                                  mul32:
 37092 00005FF7 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 37093 00005FF8 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 37094 00005FFA F726[785F]              	mul	word [gnradix]	; DX=?,      AX=new:hi, TOS=old:lo, BX=0
 37095 00005FFE 7210                    	jc	short m32E	; Too big?
 37096                                  
 37097 00006000 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 37098 00006002 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig,   BX=0
 37099                                  
 37100 00006003 87D3                    	xchg	dx,bx		; DX=0,      AX=old:lo, TOS=orig,   BX=new:hi
 37101 00006005 F726[785F]              	mul	word [gnradix]	; DX=carry,  AX=new:lo, TOS=orig,   BX=new:hi
 37102 00006009 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 37103 0000600B 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 37104 0000600D 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=0
 37105 0000600F C3                      	retn
 37106                                  m32E:
 37107 00006010 58                      	pop	ax
 37108 00006011 C3                      	retn
 37109                                  
 37110                                  ; -----------------------------------------------------------------------------
 37111                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 37112                                  ; -----------------------------------------------------------------------------
 37113                                  ; ENTRY:   DX:AX = the number to be divided
 37114                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 37115                                  ; ERROR:   None
 37116                                  ; USES:    Flags, AX, DX
 37117                                  ; -----------------------------------------------------------------------------
 37118                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 37119                                  ;       can't ensure a 386 host machine. Sorry.
 37120                                  ; -----------------------------------------------------------------------------
 37121                                  
 37122                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37123                                  toPara:
 37124 00006012 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 37125                                  
 37126 00006013 B104                    	mov	cl,4		;
 37127 00006015 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 37128 00006017 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 37129 00006018 B10C                    	mov	cl,12
 37130 0000601A D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 37131 0000601C 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 37132                                  
 37133 0000601E 59                      	pop	cx
 37134 0000601F C3                      	retn
 37135                                  
 37136                                  ; -----------------------------------------------------------------------------
 37137                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 37138                                  ; -----------------------------------------------------------------------------
 37139                                  ; ENTRY:  Nothing
 37140                                  ; EXIT:   AX contains 0x9FFF for most systems
 37141                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37142                                  ; USES:   Flags, AX
 37143                                  ; -----------------------------------------------------------------------------
 37144                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 37145                                  ; to be precise, before a UMB provider is around.  In this event, the pointer
 37146                                  ; is always set to 0xFFFF; it changes once a provider is around.  On most
 37147                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 37148                                  ; -----------------------------------------------------------------------------
 37149                                  
 37150                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37151                                  UmbHead:
 37152                                  	;pushreg <si,ds,es>
 37153                                  	
 37154                                  	;push	si
 37155                                  	;push	ds
 37156                                  	;push	es
 37157                                  
 37158 00006020 B452                    	mov	ah,52h	; DOS_GET_DOS_LISTS
 37159                                  					; Call int 21h, function 52h...
 37160 00006022 CD21                    	int	21h
 37161                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37162                                  			; Return: ES:BX -> DOS list of lists
 37163                                  
 37164                                  	;mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 37165 00006024 26A18C00                	mov	ax,[es:8Ch]
 37166 00006028 83F8FF                  	cmp	ax,0FFFFh
 37167                                  	;je	short uhE		; If it's 0xFFFF, it's an error...
 37168                                  
 37169                                  	;clc				; Else, it isn't (CLC done by prev cmp)
 37170                                  	;jmp	short uhX
 37171                                  	; 17/06/2023
 37172 0000602B F5                      	cmc	; cf = 0 <--> cf = 1
 37173                                  uhE:
 37174                                  	;stc
 37175                                  uhX:	
 37176                                  	;popreg	<es,ds,si>
 37177                                  	
 37178                                  	;pop	es
 37179                                  	;pop	ds
 37180                                  	;pop	si
 37181                                  
 37182 0000602C C3                      	retn
 37183                                  
 37184                                  ; -----------------------------------------------------------------------------
 37185                                  ;*** isSysMCB - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 37186                                  ; -----------------------------------------------------------------------------
 37187                                  ; ENTRY:  ES:0 should point to a valid MCB
 37188                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 37189                                  ; USES:   Flags
 37190                                  ; -----------------------------------------------------------------------------
 37191                                  
 37192                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37193                                  isSysMCB:
 37194                                  	;push	ax
 37195                                  	
 37196                                  	;mov	ax,[es:1]
 37197 0000602D 26A10100                	mov	ax,[es:arena_owner]	; Check the owner...
 37198 00006031 83F808                  	cmp	ax,8 ; SystemPSPOwner	; 8 (for US OR Japan) is valid
 37199 00006034 7405                    	jz	short ism10
 37200 00006036 83F809                  	cmp	ax,9 ; JapanPSPOwner	; 9 (for Japan) is valid
 37201                                  	;jz	short ism10
 37202                                  	;jmp	short ismX		; Anything else isn't.
 37203 00006039 7507                    	jnz	short ismX
 37204                                  ism10:
 37205                                  	;mov	ax,[es:8]
 37206 0000603B 26A10800                	mov	ax,[es:arena_name]	; Check the name...
 37207 0000603F 3D5343                  	cmp	ax,'SC' ; cmp ax,4353h
 37208                                  ismX:
 37209                                  	;pop	ax
 37210 00006042 C3                      	retn
 37211                                  
 37212                                  ; -----------------------------------------------------------------------------
 37213                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 37214                                  ; -----------------------------------------------------------------------------
 37215                                  ; ENTRY:  AX contains a segment address
 37216                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 37217                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 37218                                  ; USES:   Flags, AX
 37219                                  ; -----------------------------------------------------------------------------
 37220                                  ; An address in the following areas is treated as:
 37221                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 37222                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 37223                                  ;      ...
 37224                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 37225                                  ; -----------------------------------------------------------------------------
 37226                                  
 37227                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37228                                  AddrToUmb:
 37229                                  	;pushreg <cx,dx,es>
 37230                                  	
 37231                                  	;push	cx
 37232                                  	;push	dx
 37233 00006043 06                      	push	es
 37234                                  
 37235 00006044 89C2                    	mov	dx,ax		; DX = address to search for
 37236                                  
 37237 00006046 E8D7FF                  	call	UmbHead		; AX = first segment
 37238 00006049 722B                    	jc	short atuE	; If it couldn't get it, error out.
 37239                                  
 37240                                  	;mov	es,ax ; *	; ES = first UMB segment
 37241 0000604B 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 37242                                  
 37243                                  ; ----------------------------------------
 37244                                  ; ATU10--ES - Current MCB address
 37245                                  ;        DX - Address given for conversion
 37246                                  ;        CX - Current UMB #
 37247                                  ; ----------------------------------------
 37248                                  
 37249                                  	; 17/06/2023
 37250                                  atu10:
 37251 0000604D 8EC0                    	mov	es,ax ; *
 37252                                  ;atu10:
 37253                                  	;mov	ax,es
 37254 0000604F 39D0                            cmp	ax,dx		; Present segment >= given segment?
 37255 00006051 7326                    	jae	short atuX	; Yep--done.
 37256                                  
 37257 00006053 E8D7FF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 37258 00006056 7501                    	jnz	short atu20
 37259                                  
 37260 00006058 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 37261                                  atu20:
 37262                                  	;mov	al,[es:0]
 37263 00006059 26A00000                	mov	al,[es:arena_signature]
 37264                                  	;cmp	al,'Z' ; 5Ah
 37265 0000605D 3C5A                    	cmp	al,arena_signature_end
 37266 0000605F 740A                    	je	short atu30	; 'Z' means this was the last MCB... that's it.
 37267                                  
 37268                                  	;NextMCB es,ax
 37269 00006061 8CC0                    	mov	ax,es
 37270                                  	;add	ax,[es:3]	; NextMCB (macro)
 37271 00006063 2603060300              	add	ax,[es:arena_size]
 37272 00006068 40                      	inc	ax
 37273                                  	;mov	es,ax ; * ; 17/06/2023
 37274 00006069 EBE2                    	jmp	short atu10
 37275                                  
 37276                                  ; -----------------------------------------------------------------------------
 37277                                  ; if we get to atu30, they specified a number that was past the last MCB.
 37278                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 37279                                  ; -----------------------------------------------------------------------------
 37280                                  
 37281                                  atu30:
 37282 0000606B 8CC0                    	mov	ax,es
 37283                                  	;add	ax,[es:3]
 37284 0000606D 2603060300              	add	ax,[es:arena_size]
 37285 00006072 39D0                    	cmp	ax,dx		; Present >= given?
 37286 00006074 7303                    	jae	short atuX	; Yep! It _was_ inside.
 37287                                  atuE:
 37288 00006076 31C9                    	xor	cx,cx		; Else, fall through with UMB # == -1
 37289 00006078 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 37290                                  atuX:	
 37291 00006079 89C8                    	mov	ax,cx		; Return the UMB number in AX
 37292                                  	
 37293                                  	;popreg	<es,dx,cx>
 37294                                  
 37295 0000607B 07                      	pop	es
 37296                                  	;pop	dx
 37297                                  	;pop	cx
 37298                                  	
 37299 0000607C C3                      	retn
 37300                                  
 37301                                  ; -----------------------------------------------------------------------------
 37302                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 37303                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 37304                                  ; address rather than a UMB number... and use that address to look up a UMB.
 37305                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 37306                                  ; -----------------------------------------------------------------------------
 37307                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 37308                                  ; EXIT:   AX will contain a UMB number
 37309                                  ; ERROR:  None
 37310                                  ; USES:   Flags, AX
 37311                                  ; -----------------------------------------------------------------------------
 37312                                  
 37313                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37314                                  convUMB:
 37315                                  	;cmp	word [gnradix],16
 37316 0000607D 803E[785F]10            	cmp	byte [gnradix],16
 37317 00006082 7509                    	jne	short cu10	; If it didn't read in hex, it's not an address
 37318 00006084 E8BCFF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 37319 00006087 83F8FF                  	cmp	ax,0FFFFh
 37320 0000608A 7501                    	jne	short cu10
 37321 0000608C 40                      	inc	ax ; ax = 0	; If too high, ignore it (make it conventional)
 37322                                  cu10:
 37323 0000608D C3                      	retn
 37324                                  
 37325                                  ; -----------------------------------------------------------------------------
 37326                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 37327                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 37328                                  ; of the usual HIGH_FIRST.  See the code.
 37329                                  ; -----------------------------------------------------------------------------
 37330                                  ; ENTRY:  None
 37331                                  ; EXIT:   None
 37332                                  ; ERROR:  None
 37333                                  ; USES:   Flags, fm_umb, fm_strat
 37334                                  ; -----------------------------------------------------------------------------
 37335                                  
 37336                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37337                                  setUMBs:
 37338                                  	;pushreg <ax,bx>
 37339                                  	
 37340                                  	;push	ax
 37341                                  	;push	bx
 37342                                  
 37343 0000608E E8B2FD                  	call	fm_link
 37344                                  
 37345 00006091 B80058                  	mov	ax,5800h ; DOS_CHECK_STRATEGY
 37346 00006094 CD21                    	int	21h
 37347                                  
 37348                                  	;putdata fm_strat,al	; Store the current strategy for later restore
 37349                                  
 37350                                  	;push	es
 37351                                  	;mov	es,[RESSEG]
 37352                                  	;mov	[es:fm_strat],al ; store the current strategy
 37353                                  	;pop	es
 37354 00006096 1E                      	push	ds ; *
 37355 00006097 8E1E[F39D]              	mov	ds,[RESSEG]
 37356 0000609B A2[DC04]                	mov	[fm_strat],al
 37357                                  	;pop	ds ; *
 37358                                  
 37359 0000609E 83E07F                  	and	ax,007Fh	; 0000.0000.0111.1111 == All that other stuff
 37360 000060A1 50                      	push	ax ; **		; Watch this carefully...
 37361                                  
 37362 000060A2 E80C00                  	call	loadLow		; returns al==0 if load low, al==1 if loadhigh
 37363 000060A5 D0C8                    	ror	al,1		; Shift that to al==0 or al==0x80
 37364                                  
 37365 000060A7 5B                      	pop	bx ; **		; ...pushed as AX above
 37366                                  	
 37367 000060A8 1F                      	pop	ds ; *
 37368                                  	
 37369 000060A9 08C3                    	or	bl,al		; Now we have 0000.0000.?111.1111 in BX;
 37370                                  
 37371 000060AB B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 37372                                  				; with ? ==1 if load highfirst. Perfect!
 37373 000060AE CD21                    	int	21h
 37374                                  
 37375                                  	;popreg	<bx,ax>
 37376                                  
 37377                                  	;pop	bx
 37378                                  	;pop	ax
 37379                                  
 37380 000060B0 C3                      	retn
 37381                                  
 37382                                  ; -----------------------------------------------------------------------------
 37383                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 37384                                  ; -----------------------------------------------------------------------------
 37385                                  ; ENTRY:  None
 37386                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 37387                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 37388                                  ; ERROR:  None
 37389                                  ; USES:   Flags, fm_strat, fm_umb
 37390                                  ; -----------------------------------------------------------------------------
 37391                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 37392                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 37393                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 37394                                  ; such that the load UMB is too small, and shouldn't be used.
 37395                                  ; -----------------------------------------------------------------------------
 37396                                  
 37397                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37398                                  loadLow:
 37399                                  	;push	ds ; *	
 37400                                  	
 37401                                  	;dataseg ds		; Point DS into appropriate data segment
 37402                                  	;mov	ds,[RESSEG]
 37403                                  
 37404                                  	; * ; ds = [RESSEG] from 'setUMBs') ; 17/06/2023
 37405                                  
 37406 000060B1 A0[DA04]                	mov	al,[UmbLoad]
 37407 000060B4 3CFF                    	cmp	al,0FFh ; UNSPECIFIED
 37408 000060B6 7503                    	jne	short ll10
 37409                                  
 37410                                  	;mov	al,1		; Return with AL==1 && STC if no UMBs specified
 37411 000060B8 F9                      	stc
 37412                                  	;jmp	short llX
 37413 000060B9 EB04                    	jmp	short lly ; 17/06/2023
 37414                                  ll10:
 37415 000060BB 08C0                    	or	al,al		; AL=the load UMB: Is it == 0?
 37416 000060BD 7402                    	jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 37417                                  	; cf= 0
 37418                                  
 37419                                  	;mov	al,1
 37420                                  	;clc	
 37421                                  lly:		; 17/06/2023
 37422 000060BF B001                    	mov	al,1
 37423                                  llX:
 37424                                  	;pop	ds ; *		; Return DS to where it was
 37425                                  	
 37426                                  	;normseg ds		;
 37427                                  	
 37428 000060C1 C3                      	retn
 37429                                  
 37430                                  ; -----------------------------------------------------------------------------
 37431                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 37432                                  ; -----------------------------------------------------------------------------
 37433                                  ; ENTRY:  None
 37434                                  ; EXIT:   None
 37435                                  ; ERROR:  None
 37436                                  ; USES:   Flags, fm_strat, fm_umb
 37437                                  ; -----------------------------------------------------------------------------
 37438                                  
 37439                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37440                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:64D0h
 37441                                  HideUMBs:
 37442                                  	;pushreg <ax,cx,ds,es>
 37443                                  	
 37444                                  	;push	ax
 37445                                  	;push	cx
 37446                                  	;push	ds
 37447                                  	;push	es
 37448                                  
 37449 000060C2 E8EF01                  	call	UmbTest		; See if we REALLY linked in anything...
 37450 000060C5 7236                    	jc	short husX	; ...if not, there's nothing for us to do.
 37451                                  
 37452 000060C7 E82CFD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 37453 000060CA E8C1FF                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 37454                                  
 37455                                  	;putdata fInHigh,1	; Remember that we're now running high
 37456                                  	;push	es
 37457                                  	;mov	es,[RESSEG]
 37458                                  	;mov	byte [es:fInHigh], 1
 37459                                  	;			; remember that we're now running high
 37460                                  	;pop	es
 37461 000060CD 1E                      	push	ds
 37462 000060CE 8E1E[F39D]              	mov	ds,[RESSEG]
 37463 000060D2 C606[D604]01            	mov	byte [fInHigh], 1
 37464 000060D7 1F                      	pop	ds
 37465                                  
 37466 000060D8 E82300                  	call	GetLoadUMB	; See if they gave us a list to leave free
 37467 000060DB 3CFF                    	cmp	al,0FFh	; UNSPECIFIED
 37468                                  				; If they didn't,
 37469 000060DD 741E                    	je	short husX	; then we shouldn't do this loop:
 37470                                  
 37471 000060DF 31C9                    	xor	cx,cx
 37472                                  
 37473                                  ; -----------------------------------------------
 37474                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 37475                                  ; -----------------------------------------------
 37476                                  
 37477                                  hus10:
 37478 000060E1 41                      	inc	cx		; For each UMB:
 37479 000060E2 83F910                  	cmp	cx,16 ; MAXUMB
 37480 000060E5 730C                    	jae	short hus20
 37481                                  
 37482 000060E7 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 37483                                  	; 17/06/2023
 37484                                  	;push	es
 37485 000060E9 E8A900                  	call	findumb		; valid range of UMBs)
 37486                                  	;pop	es		; push/pop: trash what findumb finds.  :-)
 37487 000060EC 7205                    	jc	short hus20
 37488                                  
 37489 000060EE E87901                  	call	hideUMB?	; hide what we need to hide.
 37490                                  
 37491 000060F1 EBEE                    	jmp	short hus10
 37492                                  hus20:
 37493 000060F3 E80800                  	call	GetLoadUMB	; Now check if they offered /L:0
 37494 000060F6 08C0                    	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 37495 000060F8 7503                    	jnz	short husX	; If not, we're done.
 37496                                  
 37497 000060FA E8E701                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 37498                                  husX:
 37499                                  	;popreg	<es,ds,cx,ax>
 37500                                  	
 37501                                  	;pop	es
 37502                                  	;pop	ds
 37503                                  	;pop	cx
 37504                                  	;pop	ax
 37505                                  
 37506 000060FD C3                      	retn
 37507                                  
 37508                                  ; -----------------------------------------------------------------------------
 37509                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 37510                                  ; -----------------------------------------------------------------------------
 37511                                  ; ENTRY:  None
 37512                                  ; EXIT:   AL == load UMB
 37513                                  ; ERROR:  None
 37514                                  ; USES:   Flags, AX
 37515                                  ; -----------------------------------------------------------------------------
 37516                                  
 37517                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37518                                  GetLoadUMB:
 37519                                  	;getdata al,UmbLoad
 37520                                  
 37521 000060FE 1E                      	push    ds
 37522 000060FF 8E1E[F39D]              	mov     ds,[RESSEG]   ; getdata (macro)
 37523 00006103 A0[DA04]                	mov     al,[UmbLoad]
 37524 00006106 1F                      	pop     ds
 37525                                  
 37526 00006107 C3                      	retn
 37527                                  
 37528                                  ; -----------------------------------------------------------------------------
 37529                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 37530                                  ; -----------------------------------------------------------------------------
 37531                                  ; ENTRY:  AL == a UMB number
 37532                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 37533                                  ; ERROR:  None
 37534                                  ; USES:   Flags, AX
 37535                                  ; -----------------------------------------------------------------------------
 37536                                  
 37537                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37538                                  GetSize:
 37539                                  	;pushreg <bx,si,ds>
 37540                                  	;push	bx
 37541                                  	;push	si
 37542 00006108 1E                      	push	ds
 37543                                  	
 37544                                  	;dataseg ds
 37545 00006109 8E1E[F39D]              	mov	ds,[RESSEG]
 37546                                  
 37547 0000610D 30E4                    	xor	ah,ah			;    ax==UMB
 37548                                  	;mov	bx,offset UmbSize
 37549 0000610F BB[1004]                	mov	bx,UmbSize		;    bx==array
 37550 00006112 D0E0                    	shl	al,1	                ;    ax==offset
 37551                                  	;add	ax,bx			;    ax==element index
 37552                                  	;mov	si,ax			; ds:si==element index
 37553                                  	;lodsw				;    ax==size
 37554 00006114 01C3                    	add	bx,ax
 37555 00006116 8B07                    	mov	ax,[bx]
 37556                                  
 37557                                  	;popreg	<ds,si,bx>
 37558 00006118 1F                      	pop	ds
 37559                                  	;pop	si
 37560                                  	;pop	bx
 37561                                  
 37562                                  	;normseg ds
 37563 00006119 C3                      	retn
 37564                                  
 37565                                  ; -----------------------------------------------------------------------------
 37566                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 37567                                  ; -----------------------------------------------------------------------------
 37568                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 37569                                  ; EXIT:     None; free elements in UMB marked as hidden
 37570                                  ; ERROR:    None
 37571                                  ; USES:     Flags
 37572                                  ; -----------------------------------------------------------------------------
 37573                                  
 37574                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37575                                  hideUMB:
 37576                                  	;pushreg <ax,es>
 37577                                  	
 37578                                  	;push	ax
 37579                                  	;push	es
 37580                                  
 37581 0000611A E87800                  	call	findumb		; Returns with carry if err, else ES == MCB
 37582 0000611D 7221                    	jc	short huX
 37583                                  
 37584                                  ; ------------------------------------------------
 37585                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 37586                                  ;            we're not in the same UMB, so exit.
 37587                                  ; ------------------------------------------------
 37588                                  
 37589                                  hu10:
 37590 0000611F E80BFF                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37591 00006122 741C                    	jz	short huX	; If it is, we've finished the UMB.
 37592 00006124 E82800                  	call	isFreeMCB	; Returns with ZF set if owner is 0
 37593 00006127 7503                    	jnz	short hu20
 37594                                  
 37595 00006129 E82A00                  	call	hideMCB
 37596                                  hu20:
 37597                                  	;mov	al,[es:0]
 37598 0000612C 26A00000                	mov	al,[es:arena_signature]
 37599                                  	;cmp	al,'Z'
 37600 00006130 3C5A                    	cmp	al,arena_signature_end
 37601 00006132 740C                    	je	short huX	; 'Z' means this was the last MCB... that's it.
 37602                                  
 37603                                  	;NextMCB es,ax		; Go on forward.
 37604                                  
 37605 00006134 8CC0                     	mov	ax,es		; NextMCB (macro)
 37606                                  	;add	ax,[es:3]
 37607 00006136 2603060300              	add	ax,[es:arena_size]
 37608 0000613B 40                      	inc	ax
 37609 0000613C 8EC0                    	mov	es,ax
 37610                                  
 37611 0000613E EBDF                    	jmp	short hu10
 37612                                  huX:
 37613                                  	;popreg	<es,ax>
 37614                                  	
 37615                                  	;pop	es
 37616                                  	;pop	ax
 37617                                  
 37618 00006140 C3                      	retn
 37619                                  
 37620                                  ; -----------------------------------------------------------------------------
 37621                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 37622                                  ; -----------------------------------------------------------------------------
 37623                                  ; ENTRY:    None
 37624                                  ; EXIT:     ZF set if user DIDN'T specify /S
 37625                                  ; ERROR:    None
 37626                                  ; USES:     Flags
 37627                                  ; -----------------------------------------------------------------------------
 37628                                  
 37629                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37630                                  isTiny:
 37631 00006141 50                      	push	ax
 37632                                  
 37633                                  	;getdata al,fUmbTiny
 37634 00006142 1E                      	push    ds
 37635 00006143 8E1E[F39D]              	mov     ds,[RESSEG]   ; getdata (macro)
 37636 00006147 A0[D704]                	mov     al,[fUmbTiny]
 37637 0000614A 1F                      	pop     ds
 37638                                  
 37639 0000614B 08C0                    	or	al,al
 37640 0000614D 58                      	pop	ax
 37641 0000614E C3                      	retn
 37642                                  
 37643                                  ; -----------------------------------------------------------------------------
 37644                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 37645                                  ; -----------------------------------------------------------------------------
 37646                                  ; ENTRY:    ES:0 should point to an MCB
 37647                                  ; EXIT:     ZF set if MCB is free, else !ZF
 37648                                  ; ERROR:    None
 37649                                  ; USES:     Flags
 37650                                  ; -----------------------------------------------------------------------------
 37651                                  
 37652                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37653                                  isFreeMCB:
 37654                                  	;or	word [es:1],0
 37655 0000614F 26830E010000            	or	word [es:arena_owner],0
 37656 00006155 C3                      	retn
 37657                                  
 37658                                  ; -----------------------------------------------------------------------------
 37659                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 37660                                  ; -----------------------------------------------------------------------------
 37661                                  ; ENTRY:    ES:0 should point to an MCB
 37662                                  ; EXIT:     None; MCB marked as HIDDEN
 37663                                  ; ERROR:    None
 37664                                  ; USES:     None
 37665                                  ; -----------------------------------------------------------------------------
 37666                                  
 37667                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37668                                  hideMCB:
 37669                                  	;mov	word [es:1],8
 37670 00006156 26C70601000800          	mov	word [es:arena_owner],8 ; SystemPSPOwner
 37671                                  	;mov	word [es:8],4948h     ; 'HIDDEN  ' 
 37672 0000615D 26C70608004849          	mov	word [es:arena_name+0], 'HI' ; 4948h
 37673 00006164 26C7060A004444          	mov	word [es:arena_name+2], 'DD' ; 4444h
 37674 0000616B 26C7060C00454E          	mov	word [es:arena_name+4], 'EN' ; 4E45h
 37675                                  	;mov	word [es:14],2020h
 37676 00006172 26C7060E002020          	mov	word [es:arena_name+6], '  ' ; 2020h 
 37677 00006179 C3                      	retn
 37678                                  
 37679                                  ; -----------------------------------------------------------------------------
 37680                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 37681                                  ; -----------------------------------------------------------------------------
 37682                                  ; ENTRY:    ES:0 should point to an MCB
 37683                                  ; EXIT:     None; MCB marked as FREE
 37684                                  ; ERROR:    None
 37685                                  ; USES:     None
 37686                                  ; -----------------------------------------------------------------------------
 37687                                  
 37688                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37689                                  unHideMCB:
 37690                                  	;push	ax
 37691                                  	;mov	word [es:1],0
 37692 0000617A 26C70601000000          	mov	word [es:arena_owner],0 ; FreePSPOwner
 37693 00006181 B82020                  	mov	ax, '  '  ; mov ax,2020h
 37694                                  	;mov	[es:8],ax
 37695 00006184 26A30800                	mov	[es:arena_name+0],ax
 37696 00006188 26A30A00                	mov	[es:arena_name+2],ax
 37697 0000618C 26A30C00                	mov	[es:arena_name+4],ax
 37698                                  	;mov	[es:14],ax
 37699 00006190 26A30E00                	mov	[es:arena_name+6],ax
 37700                                  	;pop	ax
 37701 00006194 C3                      	retn
 37702                                  
 37703                                  ; -----------------------------------------------------------------------------
 37704                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 37705                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 37706                                  ; -----------------------------------------------------------------------------
 37707                                  ; ENTRY:    AL should be to a valid UMB number
 37708                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 37709                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 37710                                  ; USES:     Flags, ES
 37711                                  ; -----------------------------------------------------------------------------
 37712                                  
 37713                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37714                                  findumb:
 37715                                  	;pushreg <ax,cx,dx>
 37716                                  	
 37717                                  	;push	ax
 37718 00006195 51                      	push	cx
 37719 00006196 52                      	push	dx
 37720                                  
 37721 00006197 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37722                                  
 37723 00006199 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 37724                                  
 37725 0000619B E882FE                  	call	UmbHead		; Returns first UMB segment in AX
 37726                                  
 37727 0000619E 8EC0                    	mov	es,ax
 37728 000061A0 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37729                                  
 37730                                  ; ---------------------------------------------
 37731                                  ; FU10--CX - This UMB number; 0 == conventional
 37732                                  ;       DX - The UMB number they're looking for
 37733                                  ;       ES - The current MCB address
 37734                                  ; ---------------------------------------------
 37735                                  
 37736                                  fu10:	
 37737 000061A2 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 37738 000061A4 741B                    	je	short fuX	; searching for--so exit.
 37739                                  
 37740 000061A6 E884FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37741 000061A9 7501                    	jnz	short fu20
 37742                                  
 37743 000061AB 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37744                                  fu20:
 37745                                  	;mov	al,[es:0]
 37746 000061AC 26A00000                	mov	al,[es:arena_signature]
 37747                                  	;cmp	al,'Z'
 37748 000061B0 3C5A                    	cmp	al,arena_signature_end
 37749 000061B2 740C                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 37750                                  
 37751                                  	;NextMCB es,ax		; Go on forward.
 37752                                  
 37753 000061B4 8CC0                     	mov	ax,es		; NextMCB (macro)
 37754                                  	;add	ax,[es:3]
 37755 000061B6 2603060300              	add	ax,[es:arena_size]
 37756 000061BB 40                      	inc	ax
 37757 000061BC 8EC0                    	mov	es,ax
 37758                                  
 37759 000061BE EBE2                    	jmp	short fu10
 37760                                  fuE:
 37761 000061C0 F9                      	stc
 37762                                  fuX:
 37763                                  	;popreg	<dx,cx,ax>	; The address is already in ES.
 37764                                  	
 37765 000061C1 5A                      	pop	dx
 37766 000061C2 59                      	pop	cx
 37767                                  	
 37768                                  	;pop	ax
 37769 000061C3 C3                      	retn
 37770                                  
 37771                                  ; -----------------------------------------------------------------------------
 37772                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 37773                                  ; -----------------------------------------------------------------------------
 37774                                  ; ENTRY:    AL should be to a valid UMB number
 37775                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 37776                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 37777                                  ; USES:     Flags, ES
 37778                                  ; -----------------------------------------------------------------------------
 37779                                  
 37780                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37781                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6624h
 37782                                  BigFree:
 37783                                  	;pushreg <bx,cx>
 37784                                  	
 37785                                  	;push	bx
 37786 000061C4 51                      	push	cx
 37787                                  
 37788 000061C5 E8CDFF                  	call	findumb			; Returns with CF if err, else ES==MCB
 37789 000061C8 7239                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 37790                                  
 37791 000061CA 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 37792 000061CC 31C9                    	xor	cx,cx			; Size of largest free MCB
 37793                                  
 37794                                  ; ---------------------------------------------
 37795                                  ; BF10--ES - Current MCB address
 37796                                  ;       BX - Address of largest free MCB so far
 37797                                  ;       CX - Size of largest free MCB so far
 37798                                  ; ---------------------------------------------
 37799                                  
 37800                                  bf10:
 37801 000061CE E85CFE                  	call	isSysMCB		; If we've left the MCB, we're done.
 37802 000061D1 7427                    	jz	short bf30
 37803                                  
 37804 000061D3 E879FF                  	call	isFreeMCB		; Returns with ZF set if owner is 0
 37805 000061D6 750E                    	jnz	short bf20
 37806                                  
 37807                                  	;cmp	cx,[es:3]
 37808 000061D8 263B0E0300              	cmp	cx,[es:arena_size]	; Compare sizes...
 37809 000061DD 7F07                    	jg	short bf20		; Unless we're bigger,
 37810                                  
 37811 000061DF 8CC3                    	mov	bx,es			; Store this new element's address,
 37812                                  	;mov	cx,[es:3]
 37813 000061E1 268B0E0300              	mov	cx,[es:arena_size]	; and its size.
 37814                                  bf20:
 37815                                  	;mov	al,[es:0]
 37816 000061E6 26A00000                	mov	al,[es:arena_signature]
 37817                                  	;cmp	al,'Z'  ; 5Ah
 37818 000061EA 3C5A                    	cmp	al,arena_signature_end
 37819 000061EC 740C                    	je	short bf30		; 'Z' means this was the last MCB.
 37820                                  
 37821                                  	;NextMCB es,ax			; Go on forward.
 37822                                  
 37823 000061EE 8CC0                    	mov	ax,es 
 37824                                  	;add	ax,[es:3]
 37825 000061F0 2603060300              	add	ax,[es:arena_size]
 37826 000061F5 40                      	inc	ax
 37827 000061F6 8EC0                    	mov	es,ax
 37828                                  
 37829 000061F8 EBD4                    	jmp	short bf10
 37830                                  bf30:
 37831 000061FA 8EC3                    	mov	es,bx			; Return the address
 37832 000061FC 89C8                    	mov	ax,cx			; Return the size
 37833 000061FE 09DB                    	or	bx,bx
 37834 00006200 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 37835                                  bfE:
 37836 00006202 F9                      	stc
 37837                                  bfX:
 37838                                  	;popreg	<cx,bx>
 37839                                  
 37840 00006203 59                      	pop	cx
 37841                                  	;pop	bx
 37842                                  
 37843 00006204 C3                      	retn
 37844                                  
 37845                                  ; -----------------------------------------------------------------------------
 37846                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 37847                                  ; -----------------------------------------------------------------------------
 37848                                  ; ENTRY:    AL should be to a valid UMB number
 37849                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 37850                                  ; ERROR:    None
 37851                                  ; USES:     Flags
 37852                                  ; -----------------------------------------------------------------------------
 37853                                  
 37854                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37855                                  isSpecified:
 37856                                  	;push	ax
 37857                                  
 37858 00006205 30FF                    	xor	bh,bh
 37859 00006207 88C3                    	mov	bl,al
 37860                                  
 37861                                  	;getdata al,DS:UmbUsed[bx]
 37862                                  
 37863 00006209 1E                      	push	ds
 37864 0000620A 8E1E[F39D]              	mov	ds,[RESSEG]
 37865 0000620E 8A87[0004]              	mov	al,[bx+UmbUsed]
 37866 00006212 1F                      	pop     ds
 37867                                  
 37868 00006213 08C0                    	or	al,al		; Sets ZF if al==0 (ie, if unspecified)
 37869                                  
 37870                                  	;pop	ax
 37871 00006215 C3                      	retn
 37872                                  
 37873                                  ; -----------------------------------------------------------------------------
 37874                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 37875                                  ; -----------------------------------------------------------------------------
 37876                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 37877                                  ; EXIT:     None; MCB broken if carry clear
 37878                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 37879                                  ; USES:     Flags
 37880                                  ; -----------------------------------------------------------------------------
 37881                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 37882                                  ; the specified new size, the split is useless; if it's onnly 0x10 bytes, that
 37883                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 37884                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 37885                                  ; minimum for performing a split.
 37886                                  ; -----------------------------------------------------------------------------
 37887                                  
 37888                                  ;MIN_SPLIT_SIZE	equ 20h
 37889                                  
 37890                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37891                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:667Ah
 37892                                  shrinkMCB:
 37893                                  	;pushreg <bx,cx,es>
 37894                                  
 37895                                  	;push	bx
 37896 00006216 51                      	push	cx ; *
 37897 00006217 26                      	psuh	es ; **
 37898                                  
 37899 00006218 89C3                    	mov	bx,ax			; Move things around... and
 37900 0000621A 8CC0                    	mov	ax,es			; save this one for later.
 37901                                  
 37902 0000621C 268B0E0300              	mov	cx,[es:arena_size]
 37903 00006221 83E920                  	sub	cx,32 ; sub cx,MIN_SPLIT_SIZE
 37904                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37905                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37906 00006224 39D9                    	cmp	cx,bx
 37907 00006226 723E                    	jb	short smE ; cf = 1 (***)
 37908                                  
 37909                                  	;mov	dl,[es:0]
 37910 00006228 268A160000              	mov	dl,[es:arena_signature]
 37911                                  
 37912                                  	;;mov	cx,[es:3]
 37913                                  	;mov	cx,[es:arena_size] ; *!
 37914                                  
 37915 0000622D 26891E0300              	mov	[es:arena_size],bx
 37916                                  	;mov	byte [es:0],'M' ; 4Dh
 37917 00006232 26C60600004D            	mov	byte [es:arena_signature],'M'
 37918                                  
 37919 00006238 01D8                    	add	ax,bx
 37920 0000623A 40                      	inc	ax
 37921 0000623B 8EC0                    	mov	es,ax			; Move to new arena area
 37922                                  
 37923                                  	;mov	ax,cx ; !*
 37924 0000623D 26A10300                	mov	ax,[es:arena_size] ; *!
 37925 00006241 29D8                    	sub	ax,bx
 37926 00006243 48                      	dec	ax			; And prepare the new size
 37927                                  
 37928                                  	;mov	[es:0],dl
 37929 00006244 2688160000              	mov	[es:arena_signature],dl
 37930                                  	;;mov	word [es:1],0
 37931                                  	;mov	word [es:arena_owner],0
 37932                                  	;mov	[es:3],ax
 37933 00006249 26A30300                	mov	[es:arena_size],ax
 37934 0000624D B82020                  	mov	ax,'  ' ; mov ax,2020h
 37935                                  	;mov	[es:8],ax
 37936 00006250 26A30800                	mov	[es:arena_name+0],ax
 37937 00006254 26A30A00                	mov	[es:arena_name+2],ax
 37938 00006258 26A30C00                	mov	[es:arena_name+4],ax
 37939                                  	;mov	[es:14],ax
 37940 0000625C 26A30E00                	mov	[es:arena_name+6],ax
 37941                                  
 37942                                  	;clc
 37943 00006260 31C0                    	xor	ax,ax
 37944 00006262 26A30100                	mov	[es:arena_owner],ax ; 0
 37945                                  	; cf = 0
 37946                                  	;jmp	short smX
 37947                                  smE:
 37948                                  	;stc	 ; cf = 1 (***)
 37949                                  smX:
 37950                                  	;popreg	<es,cx,bx>
 37951 00006266 07                      	pop	es ; **
 37952 00006267 59                      	pop	cx ; *
 37953 00006268 5B                      	pop	bx
 37954                                  
 37955 00006269 C3                      	retn
 37956                                  
 37957                                  ; -----------------------------------------------------------------------------
 37958                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37959                                  ; -----------------------------------------------------------------------------
 37960                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37961                                  ; EXIT:     None; UMB is hidden as necessary
 37962                                  ; ERROR:    None
 37963                                  ; USES:     Flags, AX, CX
 37964                                  ; -----------------------------------------------------------------------------
 37965                                  ; PRIMARY LOGIC:
 37966                                  ;
 37967                                  ; If the UMB is specified in the DH/LH statement, then:
 37968                                  ;    If the largest free segment is too small (check specified size), then:
 37969                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37970                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37971                                  ;       If /S was given on the command-line, then:
 37972                                  ;          Break that element into two pieces
 37973                                  ;          Set a flag that we're shrinking
 37974                                  ;       Endif
 37975                                  ;    Endif
 37976                                  ; Endif
 37977                                  ; If the UMB is NOT specified (or was removed by the above):
 37978                                  ;    Hide all free elements in the UMB
 37979                                  ;    If the flag that we're shrinking was set, then:
 37980                                  ;       UN-hide the lower portion of the shrunken UMB
 37981                                  ;    ENDIF
 37982                                  ; ENDIF
 37983                                  ; -----------------------------------------------------------------------------
 37984                                  
 37985                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37986                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:66D7h
 37987                                  hideUMB?:
 37988                                  	;pushreg <bx,dx,es>
 37989                                  
 37990                                  	;push	bx
 37991                                  	;push	dx
 37992                                  	;push	es
 37993                                  
 37994 0000626A 88C8                    	mov	al,cl
 37995 0000626C E896FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37996                                  	;jz	short hu?20
 37997                                  	; 17/06/2023
 37998 0000626F 7432                    	jz	short hu?25 ; *
 37999                                  
 38000 00006271 88C8                    	mov	al,cl		; Retrieve the size of the largest
 38001 00006273 E84EFF                  	call	BigFree		; free element in AX; put its address in ES
 38002                                  	;jc	short hu?20	; Oops. Errors mean skip this part.
 38003                                  	; 17/06/2023
 38004 00006276 723B                    	jc	short hu?X ; **
 38005                                  
 38006 00006278 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 38007 00006279 88C8                    	mov	al,cl		; Retrieve the user's specified
 38008 0000627B E88AFE                  	call	GetSize		; minimum size for this umb (into AX)
 38009 0000627E 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 38010                                  
 38011 0000627F 09C0                    	or	ax,ax		; If they didn't specify one,
 38012                                  	;jz	short hu?20	; Skip over all this.
 38013                                  	; 17/06/2023
 38014 00006281 7530                    	jnz	short hu?X ; **
 38015                                  
 38016 00006283 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 38017 00006285 7607                    	jbe	short hu?10
 38018                                  
 38019 00006287 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 38020 00006289 E898FC                  	call	unMarkUMB
 38021                                  	;jmp	short hu?20 ; ***
 38022                                  	; 17/06/2023
 38023                                  	; ('isSpecified' would return with ZF=1) ; ***
 38024 0000628C EB15                    	jmp	short hu?25
 38025                                  hu?10:
 38026 0000628E E8B0FE                  	call	isTiny		; Returns ZF clear if user specified /S
 38027                                  	;jz	short hu?20
 38028                                  	; 17/06/2023
 38029                                  	; ('isSpecified' would return with ZF=0) ; **
 38030 00006291 7420                    	jz	short hu?X
 38031                                  
 38032 00006293 E880FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 38033                                  	;jc	short hu?20	; Ah... if didn't shrink after all, skip this:
 38034                                  	; 17/06/2023
 38035                                  	; ('isSpecified' would return with ZF=0) ; **
 38036 00006296 721B                    	jc	short hu?X
 38037                                  
 38038 00006298 8CC2                    	mov	dx,es
 38039 0000629A EB09                    	jmp	short hu?30	; Skip the spec check.. we wanna hide this one.
 38040                                  hu?20:
 38041                                  	;mov	al,cl
 38042 0000629C 89C8                    	mov	ax,cx
 38043 0000629E E864FF                  	call	isSpecified	; If they specified this UMB, we're done...
 38044 000062A1 7510                    	jnz	short hu?X ; **	; so leave.
 38045                                  hu?25:	; 17/06/2023 ; *
 38046 000062A3 31D2                    	xor	dx,dx
 38047                                  hu?30:
 38048 000062A5 88C8                    	mov	al,cl
 38049                                  
 38050 000062A7 E870FE                  	call	hideUMB		; Hides everything in UMB #al
 38051                                  
 38052 000062AA 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 38053 000062AC 7405                    	jz	short hu?X	; So we should leave.
 38054                                  
 38055 000062AE 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 38056 000062B0 E8C7FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 38057                                  hu?X:
 38058                                  	;popreg	<es,dx,bx>
 38059                                  
 38060                                  	;pop	es
 38061                                  	;pop	dx
 38062                                  	;pop	bx
 38063                                  
 38064 000062B3 C3                      	retn
 38065                                  
 38066                                  ; -----------------------------------------------------------------------------
 38067                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 38068                                  ; -----------------------------------------------------------------------------
 38069                                  ; ENTRY:    None
 38070                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 38071                                  ; ERROR:    None
 38072                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 38073                                  ; -----------------------------------------------------------------------------
 38074                                  
 38075                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38076                                  UmbTest:
 38077                                  	;pushreg <ax,bx,ds,es>
 38078                                  	
 38079                                  	;push	ax
 38080                                  	;push	bx
 38081                                  	;push	ds
 38082                                  	;push	es
 38083                                  
 38084 000062B4 E88CFB                  	call	fm_link		; Link in UMBs (if not already linked)
 38085 000062B7 E80600                  	call	WalkMem		; Check to see if they're really linked
 38086 000062BA 9C                      	pushf			; And remember what we found out
 38087 000062BB E89CFB                  	call	fm_unlink	; Unlink UMBs (if WE have linked 'em)
 38088 000062BE 9D                      	popf			; And restore what we found out.
 38089                                  
 38090                                  	;popreg	<es,ds,bx,ax>
 38091                                  	
 38092                                  	;pop	es
 38093                                  	;pop	ds
 38094                                  	;pop	bx
 38095                                  	;pop	ax
 38096                                  	
 38097 000062BF C3                      	retn
 38098                                  
 38099                                  ; -----------------------------------------------------------------------------
 38100                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 38101                                  ; -----------------------------------------------------------------------------
 38102                                  ; ENTRY:    None
 38103                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 38104                                  ; ERROR:    None
 38105                                  ; USES:     Flags
 38106                                  ; -----------------------------------------------------------------------------
 38107                                  
 38108                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38109                                  WalkMem:
 38110                                  	;pushreg <ax,bx,es>
 38111                                  	
 38112                                  	;push	ax
 38113                                  	;push	bx
 38114 000062C0 06                      	push	es
 38115                                  
 38116 000062C1 B452                    	mov	ah,52h ; DOS_GET_DOS_LISTS
 38117                                  				; Call int 21h, function 52h...
 38118 000062C3 CD21                    	int	21h
 38119                                  
 38120 000062C5 268B47FE                	mov	ax,[es:bx-2]
 38121                                  	;mov	es,ax ; *
 38122                                  
 38123                                  ; ------------------------------
 38124                                  ; UM10: ES = Current MCB pointer
 38125                                  ; ------------------------------
 38126                                  
 38127                                  um10:	
 38128 000062C9 8EC0                    	mov	es,ax ; *
 38129                                  
 38130                                  	;mov	al,[es:0]
 38131 000062CB 26A00000                	mov	al,[es:arena_signature]
 38132                                  	;cmp	al,'Z' ; 5Ah
 38133 000062CF 3C5A                    	cmp	al,arena_signature_end
 38134 000062D1 740A                    	je	short um20	; If signature == 'Z', hay no more.
 38135                                  
 38136                                  	;NextMCB es,bx		; Move to the next MCB
 38137                                  	
 38138                                  	;mov	bx,es
 38139                                  	;;add	bx,[es:3]
 38140                                  	;add	bx,[es:arena_size]
 38141                                  	;inc	bx
 38142                                  	;mov	es,bx
 38143 000062D3 8CC0                    	mov	ax,es
 38144 000062D5 2603060300              	add	ax,[es:arena_size]
 38145 000062DA 40                      	inc	ax
 38146                                  	;mov	es,ax ; *
 38147                                  
 38148 000062DB EBEC                    	jmp	short um10	; And restart the loop.
 38149                                  um20:
 38150 000062DD 8CC0                    	mov	ax,es
 38151 000062DF 3DFF9F                  	cmp	ax,9FFFh	; This sets CF if ax < 9FFF.
 38152                                  
 38153                                  	;popreg	<es,bx,ax>
 38154 000062E2 07                      	pop	es
 38155                                  	;pop	bx
 38156                                  	;pop	ax
 38157                                  
 38158 000062E3 C3                      	retn
 38159                                  
 38160                                  ; -----------------------------------------------------------------------------
 38161                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 38162                                  ; -----------------------------------------------------------------------------
 38163                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38164                                  ; EXIT:     None
 38165                                  ; ERROR:    None
 38166                                  ; USES:     AX, BX
 38167                                  ; -----------------------------------------------------------------------------
 38168                                  
 38169                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38170                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:681Ch
 38171                                  hl_unlink:
 38172 000062E4 1E                      	push	ds ; *
 38173                                  
 38174 000062E5 30FF                    	xor	bh,bh
 38175                                  	;getdata bl,fm_umb	; Restore original link-state
 38176                                  
 38177                                  	;push	ds
 38178 000062E7 8E1E[F39D]              	mov	ds,[RESSEG]
 38179 000062EB 8A1E[DB04]              	mov	bl,[fm_umb]	; Restore original link-state
 38180                                  	;pop	ds
 38181                                  	
 38182 000062EF B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38183 000062F2 CD21                    	int	21h
 38184                                  
 38185 000062F4 30FF                    	xor	bh,bh
 38186                                  
 38187                                  	;getdata bl,fm_strat	; Restore original mem-alloc strategy
 38188                                  
 38189                                  	;push	ds
 38190                                  	;mov	ds,[RESSEG]
 38191 000062F6 8A1E[DC04]              	mov	bl,[fm_strat]	;Restore original mem-alloc strategy
 38192                                  	;pop	ds
 38193                                  
 38194 000062FA B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 38195 000062FD CD21                    	int	21h
 38196                                  
 38197 000062FF 1F                      	pop	ds ; *
 38198                                  
 38199 00006300 C3                      	retn
 38200                                  
 38201                                  ;============================================================================
 38202                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 38203                                  ;============================================================================
 38204                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38205                                  
 38206                                  ; This is a new module added to support loading programs into UMBs provided
 38207                                  ; by DOS 5.0. 
 38208                                  ; ---------------------------------------------------------------------------
 38209                                  ; Usage:
 38210                                  ;
 38211                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 38212                                  ;
 38213                                  ; <filespec> has to be a filename that is not wildcarded.
 38214                                  
 38215                                  ; ---------------------------------------------------------------------------
 38216                                  ;
 38217                                  ;	Revision History
 38218                                  ;	================
 38219                                  ;
 38220                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 38221                                  ;				loading and high and also remember
 38222                                  ;				current UMB state.
 38223                                  ;
 38224                                  ;	M016	SR	08/09/90	Give special error message on attempt
 38225                                  ;				to loadhigh batch files and invalid
 38226                                  ;				filename on Loadhigh command line.
 38227                                  ;
 38228                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 38229                                  ;				after the program name also as part
 38230                                  ;				of the command line being passed to
 38231                                  ;				the program to be invoked.
 38232                                  ;
 38233                                  ; ---------------------------------------------------------------------------
 38234                                  
 38235                                  ; ---------------------------------------------------------------------------
 38236                                  ;
 38237                                  ;	include highload.inc		; Grab code for ParseVar and such
 38238                                  
 38239                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 38240                                  
 38241                                  ;
 38242                                  ; ---------------------------------------------------------------------------
 38243                                  
 38244                                  ;****	LoadHigh -- Main routine for Loadhigh command
 38245                                  ;
 38246                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 38247                                  ;		CS = DS = SS = TRANGROUP
 38248                                  ;
 38249                                  ;	EXIT	None
 38250                                  ;
 38251                                  ;	USED	ax, bx, cx, dx, si, di, es
 38252                                  ;
 38253                                  ;	ERROR EXITS
 38254                                  ;		Message pointers are setup at the error locations and then
 38255                                  ;	we jump back to CERROR which is the transient error recycle point.
 38256                                  ;	Apart from parse errors, the other errors handled are too many
 38257                                  ;	switches anf invalid filenames.
 38258                                  ;
 38259                                  ;	EFFECTS
 38260                                  ;		The allocation strategy and the state of the arena chain are
 38261                                  ;	put in the requested state according to the given options. If a 
 38262                                  ;	filename is also given, it is executed as well.
 38263                                  ; ---------------------------------------------------------------------------
 38264                                  
 38265                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38266                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 38267                                  
 38268                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38269                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:683Fh
 38270                                  LoadHigh:
 38271 00006301 1E                      	push	ds
 38272 00006302 07                      	pop	es
 38273                                  	
 38274                                  	; 16/06/2023
 38275                                  	;call	SkipLhDelims	; MSDOS 5.0 !
 38276                                  
 38277                                  ;Get command tail to be passed to the program. This includes any whitespace
 38278                                  ;chars between the program name and its parameters as well.
 38279                                  ;On return, ds:si points at the start of the command tail.
 38280                                  
 38281                                  	; 16/06/2023
 38282                                  	;push	si		; MSDOS 5.0 !
 38283 00006303 E81300                  	call	ParseLhCmd
 38284                                  	;pop	si		; MSDOS 5.0 !	
 38285 00006306 720E                    	jc	short LhErr
 38286                                  	
 38287 00006308 E86500                  	call	SetupCmdLine		;setup pgm's command line
 38288                                  
 38289 0000630B E88700                  	call	SetupPath		;setup path for file
 38290 0000630E 7206                    	jc	short LhErr		;file not found
 38291                                  
 38292                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 38293                                  ;be reset after return from the Exec
 38294                                  ;We will also set a resident flag to indicate that UMBs were activated for
 38295                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 38296                                  
 38297 00006310 E8AFFD                  	call	HideUMBs		;prepare upper-memory for load
 38298                                  
 38299 00006313 E939CB                  	jmp	LH_EXECUTE		;go and exec file ;M051
 38300                                  
 38301                                  LhErr:
 38302                                  ;The error message has been setup at this stage
 38303                                  
 38304 00006316 E989CB                  	jmp	cerror			;print error message and recycle 
 38305                                  
 38306                                  ; ---------------------------------------------------------------------------
 38307                                  					
 38308                                  ;*** 	ParseLhCmd - parses any command-line options
 38309                                  ;
 38310                                  ;	ENTRY	None
 38311                                  ;
 38312                                  ;	EXIT	Carry clear -- command line parsed successfully
 38313                                  ;		Carry set -- appropriate error message setup
 38314                                  ;
 38315                                  ;	USED	ax, si
 38316                                  ;
 38317                                  ;	EFFECTS
 38318                                  ;		Options set up (see highvar.inc)
 38319                                  ;		Filename to be executed setup
 38320                                  ;
 38321                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 38322                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 38323                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 38324                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 38325                                  ;	prepare the command-line for that program.
 38326                                  ; ---------------------------------------------------------------------------
 38327                                  
 38328                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38329                                  %if 0
 38330                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38331                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 38332                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38333                                  	; 11/06/2023
 38334                                  ParseLhCmd:
 38335                                  	;mov	si,81h
 38336                                  	mov	si,iCmdLine	;ds:si points at command line
 38337                                  
 38338                                  	mov	word [COMSW],0
 38339                                  	mov	di,Parse_LoadHi
 38340                                  	xor	cx,cx
 38341                                  	call	Parse_With_Msg
 38342                                  
 38343                                  	; 11/06/2023
 38344                                  	;cmp	ax,0FFFFh ; -1
 38345                                  	;jz	short PLhCmd2
 38346                                  	;cmp	ax,0
 38347                                  	;jnz	short PLhCmd1
 38348                                  	; 11/06/2023
 38349                                  	inc	ax ; cmp ax,-1
 38350                                  	jz	short PLhCmd2 ; 0FFFFh -> 0
 38351                                  	dec	ax ; cmp ax,0
 38352                                  	jnz	short PLhCmd1 ; 1 -> 0
 38353                                  	; ax = 0
 38354                                  
 38355                                  	mov	bx,dx
 38356                                  	; 14/04/2023
 38357                                  	;call	LhCopyFilename
 38358                                  	;; 13/04/2023
 38359                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 38360                                  	;;jmp	short PLhCmd2
 38361                                  	;retn
 38362                                  	; 14/04/2023
 38363                                  	jmp	short LhCopyFilename
 38364                                  PLhCmd1:
 38365                                  	stc
 38366                                  PLhCmd2:
 38367                                  	retn
 38368                                  %endif
 38369                                  
 38370                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38371                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6857h
 38372                                  	; MSDOS 6.0
 38373                                  ParseLhCmd:
 38374                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 38375                                  	
 38376                                  	;mov	si,81h
 38377 00006319 BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 38378                                  
 38379                                  	; es = ds (from 'LoadHigh') 
 38380                                  	;push	es		;Store ES 'cause we're gonna change it:
 38381                                  
 38382                                  	;push	ds
 38383                                  	;pop	es		;Make sure es:si points to cmd line as well
 38384                                  
 38385 0000631C E8ACFA                  	call	InitVar		;Initialize data for ParseVar
 38386                                  
 38387 0000631F E84AFB                  	call	ParseVar	;And parse the command line
 38388                                  
 38389                                  	;pop	es		;Restore ES now; we're done with it.
 38390                                  
 38391 00006322 7317                    	jnc	short plcC	;If no error, continue on our way.
 38392                                  
 38393 00006324 83F802                  	cmp	ax,2 ; PV_BadUMB
 38394                                  				;Bad UMB passed?
 38395 00006327 7505                    	jne	short plc10
 38396                                  	;mov	dx,offset TRANGROUP:LhBadUMB_Ptr
 38397 00006329 BA[5294]                	mov	dx,LhBadUMB_Ptr
 38398 0000632C F9                      	stc
 38399 0000632D C3                      	retn
 38400                                  plc10:	
 38401                                  	;mov	dx,offset TRANGROUP:LhInvSwt_Ptr
 38402 0000632E BA[4F94]                	mov	dx,LhInvSwt_Ptr
 38403 00006331 83F803                  	cmp	ax,3 ; PV_InvSwt
 38404                                  				;Unrecognized switch passed?
 38405 00006334 7403                    	je	short plc20
 38406                                  	;mov	dx,offset TRANGROUP:LhInvArg_Ptr
 38407 00006336 BA[4994]                	mov	dx,LhInvArg_Ptr
 38408                                  plc20:
 38409 00006339 F9                      	stc
 38410 0000633A C3                      	retn
 38411                                  plcC:
 38412                                  	;call	LhCopyFilename	;copy filename into our buffer
 38413                                  	;retn			;Return-- carry=status
 38414                                  	; 16/06/2023
 38415                                  	;jmp	short LhCopyFilename
 38416                                  
 38417                                  ; ---------------------------------------------------------------------------
 38418                                  
 38419                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38420                                  
 38421                                  ; ---------------------------------------------------------------------------
 38422                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 38423                                  ; ---------------------------------------------------------------------------
 38424                                  
 38425                                  	; 13/04/2023
 38426                                  	; MSDOS 5.0 COMMAND.COM only !
 38427                                  	; (Procedure names are not from original Microsoft source code!)
 38428                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 38429                                  ;set_strategy:
 38430                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 38431                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38432                                  	;		; AL = function code: get allocation strategy
 38433                                  	;mov	bx,ax
 38434                                  	;or	bx,80h
 38435                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 38436                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38437                                  	;		; AL = function code: set allocation strategy
 38438                                  	;retn
 38439                                  
 38440                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 38441                                  ;set_umblink:
 38442                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 38443                                  	;mov	bx,1
 38444                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38445                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 38446                                  	;retn
 38447                                  
 38448                                  ; ---------------------------------------------------------------------------
 38449                                  
 38450                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 38451                                  ;
 38452                                  ;	ENTRY	ds:si points at primary argument (filename)
 38453                                  ;
 38454                                  ;	EXIT	Carry set -- filename has wildcards. In this event, DX will
 38455                                  ;				already contain an appropriate error number.
 38456                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 38457                                  ;				points to first character (most likely space)
 38458                                  ;				after filename.
 38459                                  ;
 38460                                  ;	USED	ax, si
 38461                                  ;
 38462                                  ;	EFFECTS
 38463                                  ;		ExecPath contains the filename
 38464                                  ;
 38465                                  ; If there are any wildcards in the filename, then we have an error
 38466                                  ; ---------------------------------------------------------------------------
 38467                                  
 38468                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38469                                  %if 0
 38470                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38471                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 38472                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38473                                  LhCopyFilename:
 38474                                  	push	ds
 38475                                  	push	si
 38476                                  	push	di
 38477                                  	lds	si,[bx+4]
 38478                                  	mov	di,EXECPATH
 38479                                  lhcpfn1:
 38480                                  	lodsb
 38481                                  	cmp	al,2Ah ; '*'
 38482                                  	jz	short lhfilerr
 38483                                  	cmp	al,3Fh ; '?'
 38484                                  	jz	short lhfilerr
 38485                                  	stosb
 38486                                  	or	al,al
 38487                                  	jnz	short lhcpfn1
 38488                                  	; 14/04/2023
 38489                                  	; cf = 0
 38490                                  	;clc
 38491                                  lhfilerr2:
 38492                                  	pop	di
 38493                                  	pop	si
 38494                                  	pop	ds
 38495                                  	retn
 38496                                  lhfilerr:
 38497                                  	mov	dx,LhInvFil_Ptr
 38498                                  	stc
 38499                                  	jmp	short lhfilerr2
 38500                                  
 38501                                  %endif
 38502                                  
 38503                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38504                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6881h
 38505                                  	; MSDOS 6.0
 38506                                  LhCopyFilename:
 38507                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 38508                                  
 38509                                  	;mov	di,offset TRANGROUP:ExecPath
 38510 0000633B BF[1B9D]                	mov	di,EXECPATH
 38511                                  
 38512                                  	;mov	cx,0	; Copied zero characters
 38513 0000633E 29C9                    	sub	cx,cx
 38514                                  ;@@:
 38515                                  lhcpfn1:
 38516 00006340 AC                      	lodsb
 38517 00006341 3C2A                    	cmp	al,'*'			;wildcard?
 38518 00006343 7421                    	je	short lhfilerr		;yes, error
 38519 00006345 3C3F                    	cmp	al,'?'			;wildcard?
 38520 00006347 741D                    	je	short lhfilerr		;yes, error
 38521                                  
 38522 00006349 3C0D                    	cmp	al,0Dh			;carriage return?
 38523                                  	;jz	@f
 38524 0000634B 7410                    	je	short lhcpfn2
 38525 0000634D 3C2F                    	cmp	al,'/' ; SwitChar	;'/'?
 38526                                  	;jz	@f
 38527 0000634F 740C                    	je	short lhcpfn2
 38528 00006351 08C0                    	or	al,al			;EOS?
 38529                                  	;jz	@f
 38530 00006353 7408                    	jz	short lhcpfn2
 38531 00006355 3C20                    	cmp	al,' '			;Space?
 38532                                  	;jz	@f
 38533 00006357 7404                    	je	short lhcpfn2
 38534                                  	
 38535                                  	;or	al,al
 38536                                  	;;jz	@f
 38537                                  	;je	short lhcpfn2	
 38538                                  
 38539 00006359 AA                      	stosb				;store char
 38540 0000635A 41                      	inc	cx			;And remember that we did one more
 38541                                  	;jmp	short @b
 38542 0000635B EBE3                    	jmp	short lhcpfn1
 38543                                  ;@@:
 38544                                  lhcpfn2:
 38545 0000635D 30C0                    	xor	al,al			;Indicate EOS reached
 38546 0000635F AA                      	stosb				;store char
 38547                                  
 38548 00006360 09C9                    	or	cx,cx			;If we didn't copy any characters,
 38549 00006362 7407                    	jz	short lhmissing	; they didn't give a filename.
 38550                                  
 38551 00006364 4E                      	dec	si			;Move back to the delimiting character
 38552                                  	; cf = 0
 38553                                  	;clc				;And indicate no error occurred
 38554 00006365 C3                      	retn
 38555                                  lhfilerr:
 38556                                  	;mov	dx,offset TRANGROUP:LhInvFil_Ptr
 38557 00006366 BA[4394]                	mov	dx,LhInvFil_Ptr		;"Invalid Filename" ; M016
 38558 00006369 F9                      	stc
 38559 0000636A C3                      	retn
 38560                                  lhmissing:
 38561                                  	;mov	dx,offset TRANGROUP:ReqParmMiss
 38562 0000636B BA[4C94]                	mov	dx,ReqParmMiss		;"Required parm missing"
 38563 0000636E F9                      	stc
 38564 0000636F C3                      	retn
 38565                                  
 38566                                  ; ---------------------------------------------------------------------------
 38567                                  	
 38568                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 38569                                  %if 0
 38570                                  	; 14/04/2023
 38571                                  	; 13/04/2023
 38572                                  	; MSDOS 5.0 COMMAND.COM only !
 38573                                  	; (Procedure name is not from original Microsoft source code!)
 38574                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 38575                                  set_strategy:
 38576                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 38577                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38578                                  			; AL = function code: get allocation strategy
 38579                                  	mov	bx,ax
 38580                                  	or	bx,80h
 38581                                  	mov	ax,5801h	; DOS_SET_STRATEGY
 38582                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38583                                  			; AL = function code: set allocation strategy
 38584                                  	retn
 38585                                  
 38586                                  ; ---------------------------------------------------------------------------
 38587                                  
 38588                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38589                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 38590                                  	; MSDOS 5.0 COMMAND.COM only !
 38591                                  	; (Procedure name is not from original Microsoft source code!)
 38592                                  SkipLhDelims:
 38593                                  	mov	si,81h
 38594                                  	call	scanoff
 38595                                  stfn1:
 38596                                  	lodsb
 38597                                  	call	DELIM
 38598                                  	jz	short stfn2
 38599                                  	cmp	al,0Dh
 38600                                  	jz	short stfn2
 38601                                  	cmp	al,[SWITCHAR]
 38602                                  	jnz	short stfn1
 38603                                  stfn2:
 38604                                  	dec	si
 38605                                  	retn
 38606                                  
 38607                                  %endif
 38608                                  
 38609                                  ; ---------------------------------------------------------------------------
 38610                                  
 38611                                  ;***	SetupCmdLine -- prepare command line for the program
 38612                                  ;
 38613                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 38614                                  ;
 38615                                  ;	EXIT	None
 38616                                  ;
 38617                                  ;	USED
 38618                                  ;
 38619                                  ;	EFFECTS		
 38620                                  ;		The rest of the command line following the pgm name is 
 38621                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 38622                                  ;	and a new command line length is put in
 38623                                  ; ---------------------------------------------------------------------------
 38624                                  
 38625                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38626                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 38627                                  
 38628                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38629                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68BEh
 38630                                  SetupCmdLine:
 38631                                  	;mov	di,81h
 38632 00006370 BF8100                  	mov	di,iCmdLine
 38633 00006373 30C9                    	xor	cl,cl
 38634 00006375 FEC9                    	dec	cl			;just CR means count = 0
 38635                                  SetCmdL1:
 38636 00006377 AC                      	lodsb
 38637 00006378 AA                      	stosb
 38638 00006379 FEC1                    	inc	cl			;update count
 38639                                  	
 38640                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38641                                  	; MSDOS 6.0
 38642                                  	; 14/04/2023
 38643                                  	; * ; MSDOS 6.0 only !
 38644 0000637B 08C0                    	or	al,al	; *
 38645 0000637D 7404                    	jz	short SetCmdL2 ; *
 38646                                  	
 38647 0000637F 3C0D                    	cmp	al,0Dh			;carriage return?
 38648 00006381 75F4                    	jnz	short SetCmdL1		;no, continue storing
 38649                                  SetCmdL2:
 38650 00006383 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 38651 00006388 C3                      	retn
 38652                                  
 38653                                  ; ---------------------------------------------------------------------------
 38654                                  
 38655                                  ;***	LhSetupErrMsg -- Sets up error messages
 38656                                  ;
 38657                                  ;	ENTRY	ax = error message number
 38658                                  ;
 38659                                  ;	EXIT	None
 38660                                  ;
 38661                                  ;	USED	dx
 38662                                  ;
 38663                                  ;	EFFECTS
 38664                                  ;		Everything setup to display error message
 38665                                  ; ---------------------------------------------------------------------------
 38666                                  	
 38667                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38668                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38669                                  LhSetupErrMsg:
 38670 00006389 C606[CE91]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 38671 0000638E BA[D091]                	mov	dx,extend_buf_ptr
 38672 00006391 A3[D091]                	mov	[extend_buf_ptr],ax
 38673 00006394 C3                      	retn
 38674                                  
 38675                                  ; ---------------------------------------------------------------------------
 38676                                  
 38677                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 38678                                  %if 0
 38679                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38680                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 38681                                  	; MSDOS 5.0 COMMAND.COM only !
 38682                                  	; (Procedure name is not from original Microsoft source code!)
 38683                                  check_umblink:
 38684                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 38685                                  	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38686                                  			 ; AL = function code: get allocation strategy
 38687                                  	mov	bl,al
 38688                                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 38689                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38690                                  			; AL = function code: (DOS 5beta) get UMB link state
 38691                                  	mov	bh,al
 38692                                  	xchg	ax,bx
 38693                                  	rol	al,1
 38694                                  	and	al,1
 38695                                  	shl	ah,1
 38696                                  	or	al,ah
 38697                                  	retn
 38698                                  
 38699                                  ; ---------------------------------------------------------------------------
 38700                                  
 38701                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38702                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 38703                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38704                                  HideUMBs:
 38705                                  	push	ds
 38706                                  	call	check_umblink
 38707                                  	mov	ds,[RESSEG]
 38708                                  	mov	[fInHigh],al
 38709                                  	or	byte [fInHigh],80h
 38710                                  	pop	ds
 38711                                  	call	set_strategy
 38712                                  	;call	set_umblink
 38713                                  	;retn
 38714                                  	; 14/04/023
 38715                                  	;jmp	short set_umblink
 38716                                  
 38717                                  ; ---------------------------------------------------------------------------
 38718                                  
 38719                                  	; 14/04/2023
 38720                                  	; 13/04/2023
 38721                                  	; MSDOS 5.0 COMMAND.COM only !
 38722                                  	; (Procedure name is not from original Microsoft source code!)
 38723                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 38724                                  set_umblink:
 38725                                  	mov	ax,5803h	; DOS_SET_UMBLINK
 38726                                  	mov	bx,1
 38727                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38728                                  			; AL = function code: (DOS 5beta) set UMB link state
 38729                                  	retn
 38730                                  %endif
 38731                                  
 38732                                  ; ---------------------------------------------------------------------------
 38733                                  
 38734                                  ;***	SetupPath -- Do path search for the file to be executed
 38735                                  ;
 38736                                  ;	ENTRY	None
 38737                                  ;
 38738                                  ;	EXIT	Carry set if file not found or not executable file
 38739                                  ;
 38740                                  ;	EFFECTS
 38741                                  ;		ExecPath contains the full path of the file to be executed
 38742                                  ; ---------------------------------------------------------------------------
 38743                                  
 38744                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38745                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 38746                                  
 38747                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38748                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68E3h
 38749                                  SetupPath:
 38750                                  
 38751                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 38752                                  ;because the path search routine that we are about to invoke expects the
 38753                                  ;filename to search for to be argv[0].
 38754                                  ;
 38755                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 38756                                  ;over it by doing the whole move again (smaller, of course, this time).
 38757                                  
 38758                                  	;mov	ax,arg.argvcnt		;total number of arguments
 38759                                  	; 14/04/2023
 38760                                  	;mov	ax,[ARG_ARGVCNT]
 38761 00006395 A1[01A5]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 38762                                  
 38763 00006398 48                      	dec	ax			;less one - skip "LoadHigh"
 38764                                  	;mov	bx,SIZE Argv_ele
 38765 00006399 BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 38766                                  	;mov	bx,11
 38767 0000639C F7E3                    	mul	bx			;dx:ax = size of argument lists
 38768                                  
 38769                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 38770                                  	; --------------------------------------
 38771                                  	; MSDOS 6.0
 38772                                  
 38773                                  	;getdata cl,fm_argc		;CL = number of arguments to skip
 38774 0000639E 1E                      	push	ds			; getdata (macro)
 38775 0000639F 8E1E[F39D]              	mov	ds,[RESSEG]
 38776 000063A3 8A0E[DD04]              	mov	cl,[fm_argc]
 38777 000063A7 1F                      	pop	ds
 38778                                  	
 38779 000063A8 FEC1                    	inc	cl			;Skip one arg, to get over "lh"
 38780                                  
 38781                                  ;Move argv[1]..argv[n] to argv[0]..argv[n-1]. Here, AX == the overall size
 38782                                  ;of the argument lists.
 38783                                  
 38784                                  argloop:
 38785 000063AA E31B                    	jcxz	argdone			;If we've finished copying args, leave.
 38786                                  
 38787 000063AC 49                      	dec	cx			;One less time we'll go through this.
 38788                                  
 38789 000063AD 50                      	push	ax			;Copy ( size of remaining list ) bytes
 38790 000063AE 51                      	push	cx			;And remember how many args there were
 38791                                  
 38792                                  	; --------------------------------------
 38793                                  
 38794                                  	; 14/04/2023
 38795 000063AF 89C1                    	mov	cx,ax			;size to move
 38796                                  
 38797                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 38798                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 38799 000063B1 BF[41A2]                	mov	di,ARG	
 38800 000063B4 89FE                    	mov	si,di			;
 38801                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 38802 000063B6 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 38803                                  	
 38804                                  	; 14/04/2023
 38805                                  	;mov	cx,ax
 38806                                  
 38807 000063B9 FC                      	cld
 38808 000063BA F3A4                    	rep	movsb			;Move the argument list
 38809                                  	
 38810                                  	;dec	arg.argvcnt		;Fake one less argument, and
 38811                                  	;dec	word [ARG_ARGVCNT]
 38812 000063BC FF0E[01A5]              	dec	word [ARG+ARG_UNIT.argvcnt]
 38813                                  
 38814                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 38815                                  	; --------------------------------------
 38816                                  	; MSDOS 6.0
 38817                                  	
 38818                                  	;sub	ax,ARGV_ELE.SIZE ; 11	;there's one argument we don't copy.
 38819                                  
 38820 000063C0 59                      	pop	cx
 38821 000063C1 58                      	pop	ax			;Restore the size of the arg list
 38822                                  	; 17/06/2023
 38823                                  	;jmp	short argloop
 38824                                  	
 38825                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38826 000063C2 83E80B                  	sub	ax,ARGV_ELE.SIZE ; 11
 38827 000063C5 77E3                    	ja	short argloop
 38828                                  	; --------------------------------------
 38829                                  	
 38830                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 38831                                  
 38832                                  	; 17/06/2023
 38833                                  argdone:
 38834 000063C7 E8E6D2                  	call	path_search		;look in the path
 38835                                  
 38836                                  ;ax = 0, no file found
 38837                                  ;ax < 4, batch file found -- cant be executed
 38838                                  ;ax = 4,8 => .com or .exe file found
 38839                                  
 38840 000063CA 09C0                    	or	ax,ax			;any file found?
 38841 000063CC 740B                    	jz	short no_exec_file	;no, error
 38842                                  
 38843 000063CE 83F804                  	cmp	ax,4			;executable file?
 38844                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 38845                                  	;clc
 38846                                  	;retn
 38847                                  	; 14/04/2023
 38848 000063D1 7201                    	jb	short no_exec_bat
 38849 000063D3 C3                      	retn 
 38850                                  
 38851                                  no_exec_bat:
 38852 000063D4 BA[4094]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 38853 000063D7 EB06                    	jmp	short lhsp_errret	;return error; M016
 38854                                  
 38855                                  no_exec_file:
 38856 000063D9 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 38857 000063DC E8AAFF                  	call	LhSetupErrMsg		;setup error message
 38858                                  lhsp_errret:				; M016
 38859 000063DF F9                      	stc
 38860 000063E0 C3                      	retn
 38861                                  
 38862                                  ;============================================================================
 38863                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 38864                                  ;============================================================================
 38865                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38866                                  
 38867                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 38868                                  
 38869                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38870                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6930h
 38871                                  
 38872                                  ; ---------------------------------------------------------------------------
 38873                                  ; Class 3 message table/structure
 38874                                  ; ---------------------------------------------------------------------------
 38875                                  
 38876                                  $M_CLASS_3_STRUC:
 38877 000063E1 FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 38878                                  	;dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 38879                                  	;db 162			; Total number of messages
 38880                                  	; 17/06/2023
 38881 000063E2 0616                    	dw 1606h		; MSDOS 6.22 COMMAND.COM (hb=22,lb=6)	
 38882 000063E4 BB                      	db 187			; Total number of messages
 38883                                  $M_ID_3_1:
 38884                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 38885 000063E5 FC03                    	dw 1020			; Message Number = 1020
 38886                                  	;dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 38887                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38888 000063E7 EC02                    	dw MSG_1020-$+2 ; 2ECh	; Message offset from message number (6934h+02ECh=6C20h)
 38889                                  $M_ID_3_2:
 38890 000063E9 F703                    	dw 1015			; Message Number = 1015
 38891                                  	;dw MSG_1015-$+2 ; 294h ; Message offset from message number (5A4Ch+0294h=5CE0h)
 38892                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38893 000063EB F802                    	dw MSG_1015-$+2 ; 2F8h	; Message offset from message number (6938h+02F8h=6C30h)
 38894                                  $M_ID_3_3:	; 26/04/2023
 38895                                  			; 17/06/2023
 38896 000063ED EC031803                	dw 1004,MSG_1004-$ ; 792
 38897 000063F1 02042E03                	dw 1026,MSG_1026-$ ; 814
 38898 000063F5 07043E03                	dw 1031,MSG_1031-$ ; 830
 38899 000063F9 0B044903                	dw 1035,MSG_1035-$ ; 841
 38900 000063FD 26045403                	dw 1062,MSG_1062-$ ; 852
 38901 00006401 04045F03                	dw 1028,MSG_1028-$ ; 863
 38902 00006405 15047D03                	dw 1045,MSG_1045-$ ; 893
 38903 00006409 11049603                	dw 1041,MSG_1041-$ ; 918
 38904 0000640D 1204B403                	dw 1042,MSG_1042-$ ; 948
 38905                                  $M_ID_3_12:
 38906 00006411 1304CB03                	dw 1043,MSG_1043-$ ; 971
 38907 00006415 EA03E703                	dw 1002,MSG_1002-$ ; 999
 38908 00006419 EB030B04                	dw 1003,MSG_1003-$ ; 1035
 38909 0000641D EF032304                	dw 1007,MSG_1007-$ ; 1059
 38910 00006421 F0033A04                	dw 1008,MSG_1008-$ ; 1082
 38911 00006425 F1034C04                	dw 1009,MSG_1009-$ ; 1100
 38912 00006429 F2035D04                	dw 1010,MSG_1010-$ ; 1117
 38913 0000642D F3037904                	dw 1011,MSG_1011-$ ; 1145
 38914 00006431 F6039004                	dw 1014,MSG_1014-$ ; 1168
 38915 00006435 F8039D04                	dw 1016,MSG_1016-$ ; 1181
 38916 00006439 F903C304                	dw 1017,MSG_1017-$ ; 1219
 38917 0000643D FA03E404                	dw 1018,MSG_1018-$ ; 1252
 38918                                  $M_ID_3_24:
 38919 00006441 FB03F404                	dw 1019,MSG_1019-$ ; 1268
 38920 00006445 FD03FC04                	dw 1021,MSG_1021-$ ; 1276
 38921 00006449 FE031605                	dw 1022,MSG_1022-$ ; 1302
 38922 0000644D FF033905                	dw 1023,MSG_1023-$ ; 1337
 38923 00006451 00046105                	dw 1024,MSG_1024-$ ; 1377
 38924 00006455 01047405                	dw 1025,MSG_1025-$ ; 1396
 38925 00006459 03048805                	dw 1027,MSG_1027-$ ; 1416
 38926 0000645D 0504A505                	dw 1029,MSG_1029-$ ; 1445
 38927 00006461 0604B305                	dw 1030,MSG_1030-$ ; 1459
 38928 00006465 0804BE05                	dw 1032,MSG_1032-$ ; 1470
 38929 00006469 0904D205                	dw 1033,MSG_1033-$ ; 1490
 38930 0000646D 0A04E405                	dw 1034,MSG_1034-$ ; 1508
 38931 00006471 0C04F605                	dw 1036,MSG_1036-$ ; 1526
 38932 00006475 0D040706                	dw 1037,MSG_1037-$ ; 1543
 38933 00006479 0E041406                	dw 1038,MSG_1038-$ ; 1556
 38934 0000647D 0F042306                	dw 1039,MSG_1039-$ ; 1571
 38935                                  $M_ID_3_40:
 38936 00006481 10045C06                	dw 1040,MSG_1040-$ ; 1628
 38937 00006485 14046D06                	dw 1044,MSG_1044-$ ; 1645
 38938 00006489 16047D06                	dw 1046,MSG_1046-$ ; 1661
 38939 0000648D 1704B006                	dw 1047,MSG_1047-$ ; 1712
 38940 00006491 1804C506                	dw 1048,MSG_1048-$ ; 1733
 38941 00006495 1904D306                	dw 1049,MSG_1049-$ ; 1747
 38942 00006499 1A04D906                	dw 1050,MSG_1050-$ ; 1753
 38943 0000649D 1B04F406                	dw 1051,MSG_1051-$ ; 1780
 38944 000064A1 1C040107                	dw 1052,MSG_1052-$ ; 1793
 38945 000064A5 1D041407                	dw 1053,MSG_1053-$ ; 1812
 38946 000064A9 1E043607                	dw 1054,MSG_1054-$ ; 1846
 38947                                  $M_ID_3_51:
 38948 000064AD 1F045907                	dw 1055,MSG_1055-$ ; 1881
 38949 000064B1 20046307                	dw 1056,MSG_1056-$ ; 1891
 38950 000064B5 21046E07                	dw 1057,MSG_1057-$ ; 1902
 38951 000064B9 23047707                	dw 1059,MSG_1059-$ ; 1911
 38952 000064BD 24047807                	dw 1060,MSG_1060-$ ; 1912
 38953 000064C1 25047807                	dw 1061,MSG_1061-$ ; 1912
 38954 000064C5 27048E07                	dw 1063,MSG_1063-$ ; 1934
 38955 000064C9 28048D07                	dw 1064,MSG_1064-$ ; 1933
 38956 000064CD 29048C07                	dw 1065,MSG_1065-$ ; 1932
 38957 000064D1 2A048B07                	dw 1066,MSG_1066-$ ; 1931
 38958 000064D5 2B048A07                	dw 1067,MSG_1067-$ ; 1930
 38959 000064D9 2C048807                	dw 1068,MSG_1068-$ ; 1928
 38960 000064DD 2D048F07                	dw 1069,MSG_1069-$ ; 1935
 38961 000064E1 2E048F07                	dw 1070,MSG_1070-$ ; 1935
 38962 000064E5 2F048E07                	dw 1071,MSG_1071-$ ; 1934
 38963 000064E9 30048D07                	dw 1072,MSG_1072-$ ; 1933
 38964                                  $M_ID_3_67:
 38965 000064ED 31049307                	dw 1073,MSG_1073-$ ; 1939
 38966 000064F1 32049907                	dw 1074,MSG_1074-$ ; 1945
 38967 000064F5 33049F07                	dw 1075,MSG_1075-$ ; 1951
 38968 000064F9 3404A107                	dw 1076,MSG_1076-$ ; 1953
 38969 000064FD 3504A007                	dw 1077,MSG_1077-$ ; 1952
 38970 00006501 3604A407                	dw 1078,MSG_1078-$ ; 1956
 38971 00006505 3704BB07                	dw 1079,MSG_1079-$ ; 1979
 38972 00006509 3804C207                	dw 1080,MSG_1080-$ ; 1986
 38973 0000650D 3904D407                	dw 1081,MSG_1081-$ ; 2004
 38974                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38975 00006511 3A04FB07                	dw 1082,MSG_1082-$ ; 2043	
 38976 00006515 3B04FF07                	dw 1083,MSG_1083-$ ; 2047	
 38977                                  	;
 38978 00006519 3C04FE07                	dw 1084,MSG_1084-$ ; 2046
 38979 0000651D 42040A08                	dw 1090,MSG_1090-$ ; 2058
 38980 00006521 43041408                	dw 1091,MSG_1091-$ ; 2068
 38981 00006525 44041E08                	dw 1092,MSG_1092-$ ; 2078
 38982 00006529 45042808                	dw 1093,MSG_1093-$ ; 2088
 38983 0000652D 46043908                	dw 1094,MSG_1094-$ ; 2105
 38984 00006531 47045208                	dw 1095,MSG_1095-$ ; 2130
 38985 00006535 48046B08                	dw 1096,MSG_1096-$ ; 2155
 38986                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38987 00006539 49049808                	dw 1097,MSG_1097-$ ; 2200
 38988 0000653D 4A04B108                	dw 1098,MSG_1098-$ ; 2225
 38989 00006541 4B04CA08                	dw 1099,MSG_1099-$ ; 2250
 38990 00006545 4C04DC08                	dw 1100,MSG_1100-$ ; 2268
 38991 00006549 4D04FE08                	dw 1101,MSG_1101-$ ; 2302
 38992 0000654D 4E040909                	dw 1102,MSG_1102-$ ; 2313
 38993 00006551 4F043F09                	dw 1103,MSG_1103-$ ; 2367
 38994 00006555 50045609                	dw 1104,MSG_1104-$ ; 2390
 38995 00006559 51045609                	dw 1105,MSG_1105-$ ; 2390 ; TRANGROUP:6AA8h 
 38996                                  ;$M_ID_3_84:
 38997                                  $M_ID_3_95: ; 17/06/2023	
 38998 0000655D B0045709                	dw 1200,MSG_1200-$ ; 2391
 38999 00006561 14055409                	dw 1300,MSG_1300-$ ; 2388
 39000 00006565 2805D709                	dw 1320,MSG_1320-$ ; 2519
 39001 00006569 2905130A                	dw 1321,MSG_1321-$ ; 2579
 39002 0000656D 3C05800A                	dw 1340,MSG_1340-$ ; 2688
 39003 00006571 3D05D80A                	dw 1341,MSG_1341-$ ; 2776
 39004 00006575 3E05370B                	dw 1342,MSG_1342-$ ; 2871
 39005 00006579 5005C50B                	dw 1360,MSG_1360-$ ; 3013
 39006 0000657D 7805DD0B                	dw 1400,MSG_1400-$ ; 3037
 39007 00006581 7905760C                	dw 1401,MSG_1401-$ ; 3190
 39008 00006585 7A05DB0C                	dw 1402,MSG_1402-$ ; 3291
 39009 00006589 7B054E0D                	dw 1403,MSG_1403-$ ; 3406
 39010 0000658D 7C058A0D                	dw 1404,MSG_1404-$ ; 3466 ; TRANGROUP:6ADCh 
 39011                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39012 00006591 7D05FB0D                	dw 1405,MSG_1405-$ ; 3579 ; TRANGROUP:6AE0h 
 39013 00006595 7E056A0E                	dw 1406,MSG_1406-$ ; 3690
 39014 00006599 7F05A90E                	dw 1407,MSG_1407-$ ; 3753 ; (MSG_1404 for MSDOS 5.0 COMMAND.COM)
 39015                                  	;
 39016 0000659D 8C052D0F                	dw 1420,MSG_1420-$ ; 3885
 39017 000065A1 A005B40F                	dw 1440,MSG_1440-$ ; 4020
 39018 000065A5 A1050E10                	dw 1441,MSG_1441-$ ; 4110
 39019                                  ;$M_ID_3_100:
 39020                                  $M_ID_3_114: ; 17/06/2023
 39021 000065A9 B4058E10                	dw 1460,MSG_1460-$ ; 4238
 39022 000065AD B505EF10                	dw 1461,MSG_1461-$ ; 4335
 39023 000065B1 B6056F11                	dw 1462,MSG_1462-$ ; 4463
 39024 000065B5 C805BB11                	dw 1480,MSG_1480-$ ; 4539
 39025 000065B9 C9054112                	dw 1481,MSG_1481-$ ; 4673
 39026 000065BD CA055C12                	dw 1482,MSG_1482-$ ; 4700
 39027 000065C1 CB05A912                	dw 1483,MSG_1483-$ ; 4777
 39028 000065C5 CC05FF12                	dw 1484,MSG_1484-$ ; 4863
 39029 000065C9 CD057A13                	dw 1485,MSG_1485-$ ; 4986
 39030 000065CD CE05F213                	dw 1486,MSG_1486-$ ; 5106
 39031 000065D1 CF058414                	dw 1487,MSG_1487-$ ; 5252
 39032 000065D5 D005C714                	dw 1488,MSG_1488-$ ; 5319
 39033                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39034 000065D9 D1054315                	dw 1489,MSG_1489-$ ; 5443
 39035 000065DD D2058115                	dw 1490,MSG_1490-$ ; 5505
 39036 000065E1 D3059915                	dw 1491,MSG_1491-$ ; 5529
 39037 000065E5 D405E815                	dw 1492,MSG_1492-$ ; 5608
 39038 000065E9 D5057716                	dw 1493,MSG_1493-$ ; 5751
 39039 000065ED D6058A16                	dw 1494,MSG_1494-$ ; 5770
 39040                                  ;$M_ID_3_112:
 39041                                  $M_ID_3_132: ; 17/06/2023
 39042 000065F1 DC05A416                	dw 1500,MSG_1500-$ ; 5796
 39043 000065F5 F005DF16                	dw 1520,MSG_1520-$ ; 5855
 39044 000065F9 04061917                	dw 1540,MSG_1540-$ ; 5913
 39045 000065FD 05067317                	dw 1541,MSG_1541-$ ; 6003
 39046 00006601 0606DB17                	dw 1542,MSG_1542-$ ; 6107
 39047 00006605 18061318                	dw 1560,MSG_1560-$ ; 6163
 39048 00006609 19064718                	dw 1561,MSG_1561-$ ; 6215
 39049 0000660D 1A06C018                	dw 1562,MSG_1562-$ ; 6336
 39050 00006611 1B06EC18                	dw 1563,MSG_1563-$ ; 6380
 39051 00006615 1C061319                	dw 1564,MSG_1564-$ ; 6419
 39052 00006619 1D064D19                	dw 1565,MSG_1565-$ ; 6477
 39053 0000661D 1E067E19                	dw 1566,MSG_1566-$ ; 6526
 39054 00006621 1F06A719                	dw 1567,MSG_1567-$ ; 6567
 39055 00006625 20061D1A                	dw 1568,MSG_1568-$ ; 6685
 39056 00006629 2C06661A                	dw 1580,MSG_1580-$ ; 6758
 39057                                  ;$M_ID_3_127:
 39058                                  $M_ID_3_147: ; 17/06/2023
 39059 0000662D 4006AA1A                	dw 1600,MSG_1600-$ ; 6826
 39060 00006631 4106C31A                	dw 1601,MSG_1601-$ ; 6851
 39061 00006635 4206131B                	dw 1602,MSG_1602-$ ; 6931
 39062 00006639 5406B01B                	dw 1620,MSG_1620-$ ; 7088
 39063 0000663D 5506041C                	dw 1621,MSG_1621-$ ; 7172
 39064 00006641 5606821C                	dw 1622,MSG_1622-$ ; 7298
 39065 00006645 6806CA1C                	dw 1640,MSG_1640-$ ; 7370
 39066 00006649 6906F41C                	dw 1641,MSG_1641-$ ; 7412
 39067 0000664D 7C06741D                	dw 1660,MSG_1660-$ ; 7540
 39068 00006651 9006B71D                	dw 1680,MSG_1680-$ ; 7607
 39069 00006655 A406D91D                	dw 1700,MSG_1700-$ ; 7641
 39070 00006659 B806871E                	dw 1720,MSG_1720-$ ; 7815
 39071 0000665D CC06D61E                	dw 1740,MSG_1740-$ ; 7894
 39072 00006661 CD062E1F                	dw 1741,MSG_1741-$ ; 7982
 39073 00006665 E0069D1F                	dw 1760,MSG_1760-$ ; 8093
 39074 00006669 F406E61F                	dw 1780,MSG_1780-$ ; 8166
 39075                                  ;$M_ID_3_143:
 39076                                  $M_ID_3_163: ; 17/06/2023
 39077 0000666D 08074E20                	dw 1800,MSG_1800-$ ; 8270
 39078 00006671 09079820                	dw 1801,MSG_1801-$ ; 8344
 39079 00006675 1C07EC20                	dw 1820,MSG_1820-$ ; 8428
 39080 00006679 1D073021                	dw 1821,MSG_1821-$ ; 8496
 39081 0000667D 3007B721                	dw 1840,MSG_1840-$ ; 8631
 39082 00006681 4407FE21                	dw 1860,MSG_1860-$ ; 8702
 39083 00006685 45075522                	dw 1861,MSG_1861-$ ; 8789
 39084 00006689 46079822                	dw 1862,MSG_1862-$ ; 8856
 39085 0000668D 47071223                	dw 1863,MSG_1863-$ ; 8978
 39086 00006691 4807B123                	dw 1864,MSG_1864-$ ; 9137
 39087 00006695 49071424                	dw 1865,MSG_1865-$ ; 9236
 39088 00006699 4A077B24                	dw 1866,MSG_1866-$ ; 9339
 39089 0000669D 5807DF24                	dw 1880,MSG_1880-$ ; 9439
 39090 000066A1 59075325                	dw 1881,MSG_1881-$ ; 9555
 39091 000066A5 5A07CD25                	dw 1882,MSG_1882-$ ; 9677
 39092 000066A9 5B072026                	dw 1883,MSG_1883-$ ; 9760
 39093 000066AD 6C07BF26                	dw 1900,MSG_1900-$ ; 9919
 39094 000066B1 8007D326                	dw 1920,MSG_1920-$ ; 9939
 39095 000066B5 8107FF26                	dw 1921,MSG_1921-$ ; 9983
 39096                                  ;$M_ID_3_162:
 39097                                  $M_ID_3_182: ; 17/06/2023
 39098 000066B9 82079927                	dw 1922,MSG_1922-$ ; 9285
 39099                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 39100 000066BD 83074C28                	dw 1923,MSG_1923-$ ; 10316
 39101 000066C1 8407CE28                	dw 1924,MSG_1924-$ ; 10446
 39102 000066C5 85074A29                	dw 1925,MSG_1925-$ ; 10570
 39103 000066C9 8607CA29                	dw 1926,MSG_1926-$ ; 10698
 39104                                  $M_ID_3_187:	; 17/06/2023
 39105 000066CD 8707                    	dw 1927	; 19/06/2023	; Message Number = 1927
 39106 000066CF 1E2A                    	dw MSG_1927-$+2	; 10782	; Message offset from message number
 39107                                  				; (Msg addr: 6C1Ch+2A1Eh = TRANGROUP:963Ah)
 39108                                  
 39109                                  ; ---------------------------------------------------------------------------
 39110                                  ; Class 3 messages
 39111                                  ; ---------------------------------------------------------------------------
 39112                                  	
 39113                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39114                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 39115                                  
 39116                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39117                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6C20h
 39118                                  
 39119                                  MSG_1020:	; COMMON4
 39120 000066D1 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 39121 000066D2 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 39121 000066DB 667265650D0A       
 39122                                  MSG_1015:	; COMMON18
 39123 000066E1 23                      	db 35
 39124 000066E2 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 39124 000066EB 6F7420626520636F70-
 39124 000066F4 696564206F6E746F20-
 39124 000066FD 697473656C660D0A   
 39125                                  MSG_1004:	; COMMON20
 39126 00006705 19                      	db 25
 39127 00006706 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 39127 0000670F 656E74206469736B20-
 39127 00006718 73706163650D0A     
 39128                                  MSG_1026:	; COMMON22
 39129 0000671F 13                      	db 19
 39130 00006720 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 39130 00006729 6F646520706167650D-
 39130 00006732 0A                 
 39131                                  MSG_1031:	; COMMON23
 39132 00006733 0E                      	db 14
 39133 00006734 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 39133 0000673D 6174650D0A         
 39134                                  MSG_1035:	; COMMON24
 39135 00006742 0E                      	db 14
 39136 00006743 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 39136 0000674C 696D650D0A         
 39137                                  MSG_1062:	; COMMON25
 39138 00006751 0E                      	db 14
 39139 00006752 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 39139 0000675B 6174680D0A         
 39140                                  MSG_1028:	; COMMON28
 39141 00006760 21                      	db 33
 39142 00006761 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 39142 0000676A 206B657920746F2063-
 39142 00006773 6F6E74696E7565202E-
 39142 0000677C 202E202E0D0A       
 39143                                  MSG_1045:	; COMMON32
 39144 00006782 1C                      	db 28
 39145 00006783 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 39145 0000678C 206372656174652064-
 39145 00006795 69726563746F72790D-
 39145 0000679E 0A                 
 39146                                  MSG_1041:	; COMMON33
 39147 0000679F 21                      	db 33
 39148 000067A0 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 39148 000067A9 206472697665202531-
 39148 000067B2 20686173206E6F206C-
 39148 000067BB 6162656C0D0A       
 39149                                  MSG_1042:	; COMMON34
 39150 000067C1 1A                      	db 26
 39151 000067C2 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 39151 000067CB 206472697665202531-
 39151 000067D4 2069732025320D0A   
 39152                                  MSG_1043:	; COMMON36
 39153 000067DC 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 39154 000067DD 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 39154 000067E6 7269616C204E756D62-
 39154 000067EF 65722069732025312D-
 39154 000067F8 25320D0A           
 39155                                  MSG_1002:
 39156 000067FC 27                              db 39
 39157 000067FD 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 39157 00006806 2066696C65206E616D-
 39157 0000680F 65206F722066696C65-
 39157 00006818 206E6F7420666F756E-
 39157 00006821 640D0A             
 39158                                  MSG_1003:
 39159 00006824 1B                      	db 27
 39160 00006825 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 39160 0000682E 617468206F72206669-
 39160 00006837 6C65206E616D650D0A 
 39161                                  MSG_1007:
 39162 00006840 1A                      	db 26
 39163 00006841 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 39163 0000684A 7669726F6E6D656E74-
 39163 00006853 2073706163650D0A   
 39164                                  MSG_1008:
 39165 0000685B 15                      	db 21
 39166 0000685C 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 39166 00006865 74696F6E206572726F-
 39166 0000686E 720D0A             
 39167                                  MSG_1009:
 39168 00006871 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 39169 00006872 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 39169 0000687B 65206D697373696E67-
 39169 00006884 0D0A               
 39170                                  MSG_1010:
 39171 00006886 1F                      	db 31
 39172 00006887 0D0A                    	db 0Dh,0Ah
 39173 00006889 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 39173 00006892 736B20776974682062-
 39173 0000689B 617463682066696C65-
 39173 000068A4 0D0A               
 39174                                  MSG_1011:
 39175 000068A6 1A                      	db 26
 39176 000068A7 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 39176 000068B0 6E64206F722066696C-
 39176 000068B9 65206E616D650D0A   
 39177                                  MSG_1014:	; EXTEND5
 39178 000068C1 10                      	db 16
 39179 000068C2 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 39179 000068CB 6E696564200D0A     
 39180                                  MSG_1016:
 39181 000068D2 29                      	db 41
 39182 000068D3 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 39182 000068DC 662064657374696E61-
 39182 000068E5 74696F6E206C6F7374-
 39182 000068EE 206265666F72652063-
 39182 000068F7 6F70790D0A         
 39183                                  MSG_1017:
 39184 000068FC 24                      	db 36
 39185 000068FD 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 39185 00006906 696C656E616D65206F-
 39185 0000690F 722066696C65206E6F-
 39185 00006918 7420666F756E640D0A 
 39186                                  MSG_1018:
 39187 00006921 13                      	db 19
 39188 00006922 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 39188 0000692B 2920636F706965640D-
 39188 00006934 0A                 
 39189                                  MSG_1019:
 39190 00006935 0B                      	db 11
 39191 00006936 25312066696C652873-     	db '%1 file(s) '
 39191 0000693F 2920               
 39192                                  MSG_1021:	; EXTEND15
 39193 00006941 1D                      	db 29
 39194 00006942 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 39194 0000694B 726976652073706563-
 39194 00006954 696669636174696F6E-
 39194 0000695D 0D0A               
 39195                                  MSG_1022:
 39196 0000695F 26                      	db 38
 39197 00006960 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 39197 00006969 202531206E6F742070-
 39197 00006972 726570617265642066-
 39197 0000697B 6F722073797374656D-
 39197 00006984 0D0A               
 39198                                  MSG_1023:
 39199 00006986 2B                      	db 43
 39200 00006987 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 39200 00006990 202531206E6F742070-
 39200 00006999 726570617265642066-
 39200 000069A2 6F7220616C6C206465-
 39200 000069AB 76696365730D0A     
 39201                                  MSG_1024:
 39202 000069B2 16                      	db 22
 39203 000069B3 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 39203 000069BC 646520706167653A20-
 39203 000069C5 25310D0A           
 39204                                  MSG_1025:
 39205 000069C9 17                      	db 23
 39206 000069CA 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 39206 000069D3 6F7420696E7374616C-
 39206 000069DC 6C65640D0A         
 39207                                  MSG_1027:
 39208 000069E1 20                      	db 32
 39209 000069E2 43757272656E742064-     	db 'Current drive is no longer valid'
 39209 000069EB 72697665206973206E-
 39209 000069F4 6F206C6F6E67657220-
 39209 000069FD 76616C6964         
 39210                                  MSG_1029:
 39211 00006A02 11                      	db 17
 39212 00006A03 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 39212 00006A0C 20666F756E640D0A   
 39213                                  MSG_1030:
 39214 00006A14 0E                      	db 14
 39215 00006A15 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 39215 00006A1E 726F720D0A         
 39216                                  MSG_1032:
 39217 00006A23 17                      	db 23
 39218 00006A24 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 39218 00006A2D 617465206973202531-
 39218 00006A36 2025320D0A         
 39219                                  MSG_1033:
 39220 00006A3B 15                      	db 21
 39221 00006A3C 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 39221 00006A45 576564546875467269-
 39221 00006A4E 536174             
 39222                                  MSG_1034:
 39223 00006A51 15                      	db 21
 39224 00006A52 456E746572206E6577-     	db 'Enter new date (%1): '
 39224 00006A5B 206461746520282531-
 39224 00006A64 293A20             
 39225                                  MSG_1036:
 39226 00006A67 14                      	db 20
 39227 00006A68 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 39227 00006A71 696D65206973202531-
 39227 00006A7A 0D0A               
 39228                                  MSG_1037:
 39229 00006A7C 10                      	db 16
 39230 00006A7D 456E746572206E6577-     	db 'Enter new time: '
 39230 00006A86 2074696D653A20     
 39231                                  MSG_1038:
 39232 00006A8D 12                              db 18
 39233 00006A8E 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 39233 00006A97 74652028592F4E293F 
 39234                                  MSG_1039:
 39235 00006AA0 3C                              db 60
 39236 00006AA1 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 39236 00006AAA 20696E206469726563-
 39236 00006AB3 746F72792077696C6C-
 39236 00006ABC 2062652064656C6574-
 39236 00006AC5 6564210D0A         
 39237 00006ACA 41726520796F752073-     	db 'Are you sure (Y/N)?'
 39237 00006AD3 7572652028592F4E29-
 39237 00006ADC 3F                 
 39238                                  MSG_1040:
 39239 00006ADD 14                      	db 20
 39240 00006ADE 4D532D444F53205665-     	db 'MS-DOS Version %1.%2'
 39240 00006AE7 7273696F6E2025312E-
 39240 00006AF0 2532               
 39241                                  MSG_1044:
 39242 00006AF2 13                      	db 19
 39243 00006AF3 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 39243 00006AFC 69726563746F72790D-
 39243 00006B05 0A                 
 39244                                  MSG_1046:
 39245 00006B06 36                      	db 54
 39246 00006B07 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 39246 00006B10 6174682C206E6F7420-
 39246 00006B19 6469726563746F7279-
 39246 00006B22 2C0D0A             
 39247 00006B25 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 39247 00006B2E 6F7279206E6F742065-
 39247 00006B37 6D7074790D0A       
 39248                                  MSG_1047:
 39249 00006B3D 18                      	db 24
 39250 00006B3E 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 39250 00006B47 696679204F4E206F72-
 39250 00006B50 204F46460D0A       
 39251                                  MSG_1048:
 39252 00006B56 11                      	db 17
 39253 00006B57 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 39253 00006B60 206F662025310D0A   
 39254                                  MSG_1049:
 39255 00006B68 09                      	db 9
 39256 00006B69 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 39257                                  MSG_1050:
 39258 00006B72 1E                      	db 30
 39259 00006B73 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 39259 00006B7C 7269766520696E2073-
 39259 00006B85 656172636820706174-
 39259 00006B8E 680D0A             
 39260                                  MSG_1051:
 39261 00006B91 10                      	db 16
 39262 00006B92 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 39262 00006B9B 65766963650D0A     
 39263                                  MSG_1052:
 39264 00006BA2 16                      	db 22
 39265 00006BA3 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 39265 00006BAC 74206265206E657374-
 39265 00006BB5 65640D0A           
 39266                                  MSG_1053:
 39267 00006BB9 25                      	db 37
 39268 00006BBA 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 39268 00006BC3 6174652066696C6520-
 39268 00006BCC 6572726F7220647572-
 39268 00006BD5 696E6720706970650D-
 39268 00006BDE 0A                 
 39269                                  MSG_1054:
 39270 00006BDF 26                      	db 38
 39271 00006BE0 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 39271 00006BE9 2062696E6172792072-
 39271 00006BF2 656164732066726F6D-
 39271 00006BFB 206120646576696365-
 39271 00006C04 0D0A               
 39272                                  
 39273                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 39274                                  	; 17/06/2023
 39275                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7155h)
 39276                                  MSG_1055:
 39277 00006C06 0D                      	db 13
 39278 00006C07 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 39278 00006C10 25310D0A           
 39279                                  MSG_1056:
 39280 00006C14 0E                      	db 14
 39281 00006C15 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 39281 00006C1E 2025310D0A         
 39282                                  MSG_1057:
 39283 00006C23 0C                      	db 12
 39284 00006C24 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 39284 00006C2D 310D0A             
 39285                                  MSG_1059:
 39286 00006C30 04                      	db 4
 39287 00006C31 6F666600                	db 'off',0
 39288                                  MSG_1060:
 39289 00006C35 03                      	db 3
 39290 00006C36 6F6E00                  	db 'on',0
 39291                                  MSG_1061:
 39292 00006C39 19                      	db 25
 39293 00006C3A 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 39293 00006C43 74696E6720746F2064-
 39293 00006C4C 65766963650D0A     
 39294                                  MSG_1063:
 39295 00006C53 02                      	db 2
 39296 00006C54 2531                    	db '%1'
 39297                                  MSG_1064:
 39298 00006C56 02                      	db 2
 39299 00006C57 2531                    	db '%1'
 39300                                  MSG_1065:
 39301 00006C59 02                      	db 2
 39302 00006C5A 2531                    	db '%1'
 39303                                  MSG_1066:
 39304 00006C5C 02                      	db 2
 39305 00006C5D 2531                    	db '%1'
 39306                                  MSG_1067:
 39307 00006C5F 01                      	db 1
 39308 00006C60 09                      	db 9
 39309                                  MSG_1068:
 39310 00006C61 0A                      	db 10
 39311 00006C62 203C4449523E202020-     	db ' <DIR>    '
 39311 00006C6B 20                 
 39312                                  MSG_1069:
 39313 00006C6C 03                      	db 3
 39314 00006C6D 082008                  	db 8, 20h, 8
 39315                                  MSG_1070:	; CRLF
 39316 00006C70 02                      	db 2
 39317 00006C71 0D                      	db 0Dh
 39318 00006C72 0A                      	db 0Ah
 39319                                  MSG_1071:
 39320 00006C73 02                      	db 2
 39321 00006C74 2531                    	db '%1'
 39322                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 39323                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:71C5h
 39324                                  MSG_1072:
 39325                                  	;db 8
 39326                                  	;db 'mm-dd-yy'
 39327 00006C76 09                      	db 9
 39328 00006C77 6D6D2D64642D797900      	db 'mm-dd-yy',0
 39329                                  MSG_1073:
 39330                                  	;db 8
 39331                                  	;db 'dd-mm-yy'
 39332 00006C80 09                      	db 9
 39333 00006C81 64642D6D6D2D797900      	db 'dd-mm-yy',0
 39334                                  MSG_1074:
 39335                                  	;db 8
 39336                                  	;db 'yy-mm-dd'
 39337 00006C8A 09                      	db 9
 39338 00006C8B 79792D6D6D2D646400      	db 'yy-mm-dd',0
 39339                                  MSG_1075:
 39340 00006C94 05                      	db 5
 39341 00006C95 2531202532              	db '%1 %2'
 39342                                  MSG_1076:
 39343 00006C9A 02                      	db 2
 39344 00006C9B 2531                    	db '%1'
 39345                                  MSG_1077:
 39346 00006C9D 07                      	db 7
 39347 00006C9E 20253120202532          	db ' %1  %2'
 39348                                  MSG_1078:
 39349 00006CA5 1A                      	db 26
 39350 00006CA6 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 39350 00006CAF 20616C726561647920-
 39350 00006CB8 6578697374730D0A   
 39351                                  MSG_1079:
 39352 00006CC0 0A                      	db 10
 39353 00006CC1 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 39353 00006CCA 0A                 
 39354                                  MSG_1080:
 39355 00006CCB 15                      	db 21
 39356 00006CCC 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 39356 00006CD5 6573206C6973746564-
 39356 00006CDE 3A0D0A             
 39357                                  MSG_1081:
 39358 00006CE1 2A                      	db 42
 39359 00006CE2 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 39359 00006CEB 63757272656420696E-
 39359 00006CF4 20656E7669726F6E6D-
 39359 00006CFD 656E74207661726961-
 39359 00006D06 626C65290D0A       
 39360                                  	;
 39361                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 39362                                  MSG_1082:
 39363 00006D0C 07                              db 7
 39364 00006D0D 205B592F4E5D3F          	db ' [Y/N]?'
 39365                                  MSG_1083:
 39366 00006D14 02                      	db 2
 39367 00006D15 594E                    	db 'YN'
 39368                                  	;
 39369                                  MSG_1084:
 39370 00006D17 0F                      	db 15
 39371 00006D18 28636F6E74696E7569-     	db '(continuing %1)'
 39371 00006D21 6E6720253129       
 39372                                  MSG_1090:
 39373 00006D27 0D                      	db 13
 39374 00006D28 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 39374 00006D31 25310D0A           
 39375                                  MSG_1091:
 39376 00006D35 0D                      	db 13
 39377 00006D36 444F5320697320696E-     	db 'DOS is in ROM'
 39377 00006D3F 20524F4D           
 39378                                  MSG_1092:
 39379 00006D43 0D                      	db 13
 39380 00006D44 444F5320697320696E-     	db 'DOS is in HMA'
 39380 00006D4D 20484D41           
 39381                                  MSG_1093:
 39382 00006D51 14                      	db 20
 39383 00006D52 444F5320697320696E-     	db 'DOS is in low memory'
 39383 00006D5B 206C6F77206D656D6F-
 39383 00006D64 7279               
 39384                                  MSG_1094:
 39385 00006D66 1C                      	db 28
 39386 00006D67 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 39386 00006D70 616468696768206261-
 39386 00006D79 7463682066696C650D-
 39386 00006D82 0A                 
 39387                                  MSG_1095:
 39388 00006D83 1C                      	db 28
 39389 00006D84 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 39389 00006D8D 20496E76616C696420-
 39389 00006D96 66696C656E616D650D-
 39389 00006D9F 0A                 
 39390                                  MSG_1096:
 39391 00006DA0 30                      	db 48
 39392 00006DA1 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 39392 00006DAA 656E20737065636966-
 39392 00006DB3 69656420636F756E74-
 39392 00006DBC 727920696E666F726D-
 39392 00006DC5 6174696F6E2066696C-
 39392 00006DCE 650D0A             
 39393                                  
 39394                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39395                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7320h
 39396                                  MSG_1097:
 39397 00006DD1 1C                      	db 28
 39398 00006DD2 4C6F6164486967683A-     	db 'LoadHigh: Invalid argument',0Dh,0Ah
 39398 00006DDB 20496E76616C696420-
 39398 00006DE4 617267756D656E740D-
 39398 00006DED 0A                 
 39399                                  MSG_1098:
 39400 00006DEE 1C                      	db 28
 39401 00006DEF 526571756972656420-     	db 'Required parameter missing',0Dh,0Ah
 39401 00006DF8 706172616D65746572-
 39401 00006E01 206D697373696E670D-
 39401 00006E0A 0A                 
 39402                                  MSG_1099:
 39403 00006E0B 15                      	db 21
 39404 00006E0C 556E7265636F676E69-     	db 'Unrecognized switch',0Dh,0Ah
 39404 00006E15 7A6564207377697463-
 39404 00006E1E 680D0A             
 39405                                  MSG_1100:
 39406 00006E21 25                      	db 37
 39407 00006E22 412062616420554D42-     	db 'A bad UMB number has been specified',0Dh,0Ah
 39407 00006E2B 206E756D6265722068-
 39407 00006E34 6173206265656E2073-
 39407 00006E3D 70656369666965640D-
 39407 00006E46 0A                 
 39408                                  MSG_1101:
 39409 00006E47 0E                      	db 14
 39410 00006E48 202025312E25322074-     	db '  %1.%2 to 1.0'
 39410 00006E51 6F20312E30         
 39411                                  MSG_1102:
 39412 00006E56 39                      	db 57
 39413 00006E57 202020202020202020-     	db '                 %1.%2 to 1.0 average compression ratio',0Dh,0Ah
 39413 00006E60 202020202020202025-
 39413 00006E69 312E253220746F2031-
 39413 00006E72 2E3020617665726167-
 39413 00006E7B 6520636F6D70726573-
 39413 00006E84 73696F6E2072617469-
 39413 00006E8D 6F0D0A             
 39414                                  MSG_1103:
 39415 00006E90 1A                      	db 26
 39416 00006E91 4F7665727772697465-     	db 'Overwrite %1 (Yes/No/All)?'
 39416 00006E9A 20253120285965732F-
 39416 00006EA3 4E6F2F416C6C293F   
 39417                                  MSG_1104:
 39418 00006EAB 03                      	db 3
 39419 00006EAC 59                      _Y_es:	db 'Y'
 39420 00006EAD 4E                      _N_o:	db 'N'
 39421 00006EAE 41                      _A_ll:	db 'A'
 39422                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:73FEh)
 39423                                  MSG_1105:
 39424 00006EAF 04                      	db 4
 39425 00006EB0 20202020                	db '    '
 39426                                  	
 39427                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h)
 39428                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7403h
 39429                                  MSG_1200:
 39430 00006EB4 00                      	db 0	; /? unimplemented
 39431                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7404h)
 39432                                  MSG_1300:
 39433 00006EB5 86                      	db 134
 39434 00006EB6 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 39434 00006EBF 6C6561727320657874-
 39434 00006EC8 656E64656420435452-
 39434 00006ED1 4C2B4320636865636B-
 39434 00006EDA 696E672E0D0A       
 39435 00006EE0 0D0A                    	db 0Dh,0Ah
 39436 00006EE2 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 39436 00006EEB 207C204F46465D0D0A 
 39437 00006EF4 0D0A                    	db 0Dh,0Ah
 39438 00006EF6 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 39438 00006EFF 4B20776974686F7574-
 39438 00006F08 206120706172616D65-
 39438 00006F11 74657220746F206469-
 39438 00006F1A 73706C617920746865-
 39438 00006F23 2063757272656E7420-
 39438 00006F2C 425245414B20736574-
 39438 00006F35 74696E672E0D0A     
 39439                                  MSG_1320:
 39440 00006F3C 3F                      	db 63
 39441 00006F3D 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 39441 00006F46 6F7220736574732074-
 39441 00006F4F 686520616374697665-
 39441 00006F58 20636F646520706167-
 39441 00006F61 65206E756D6265722E-
 39441 00006F6A 0D0A               
 39442 00006F6C 0D0A                    	db 0Dh,0Ah
 39443 00006F6E 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 39443 00006F77 5D0D0A             
 39444 00006F7A 0D0A                    	db 0Dh,0Ah
 39445                                  MSG_1321:
 39446 00006F7C 70                      	db 112
 39447 00006F7D 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 39447 00006F86 706563696669657320-
 39447 00006F8F 6120636F6465207061-
 39447 00006F98 6765206E756D626572-
 39447 00006FA1 2E0D0A             
 39448 00006FA4 0D0A                    	db 0Dh,0Ah
 39449 00006FA6 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 39449 00006FAF 20776974686F757420-
 39449 00006FB8 6120706172616D6574-
 39449 00006FC1 657220746F20646973-
 39449 00006FCA 706C61792074686520-
 39449 00006FD3 61637469766520636F-
 39449 00006FDC 64652070616765206E-
 39449 00006FE5 756D6265722E0D0A   
 39450                                  MSG_1340:
 39451 00006FED 5B                      	db 91
 39452 00006FEE 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 39452 00006FF7 746865206E616D6520-
 39452 00007000 6F66206F7220636861-
 39452 00007009 6E6765732074686520-
 39452 00007012 63757272656E742064-
 39452 0000701B 69726563746F72792E-
 39452 00007024 0D0A               
 39453 00007026 0D0A                    	db 0Dh,0Ah
 39454 00007028 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 39454 00007031 6976653A5D5B706174-
 39454 0000703A 685D0D0A           
 39455 0000703E 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 39455 00007047 0D0A               
 39456                                  MSG_1341:
 39457 00007049 62                      	db 98
 39458 0000704A 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 39458 00007053 3A5D5B706174685D0D-
 39458 0000705C 0A                 
 39459 0000705D 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 39460 00007065 0D0A                    	db 0Dh,0Ah
 39461 00007067 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 39461 00007070 656369666965732074-
 39461 00007079 68617420796F752077-
 39461 00007082 616E7420746F206368-
 39461 0000708B 616E676520746F2074-
 39461 00007094 686520706172656E74-
 39461 0000709D 206469726563746F72-
 39461 000070A6 792E               
 39462 000070A8 0D0A                    	db 0Dh,0Ah
 39463 000070AA 0D0A                    	db 0Dh,0Ah
 39464                                  MSG_1342:
 39465 000070AC 91                      	db 145
 39466 000070AD 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 39466 000070B6 726976653A20746F20-
 39466 000070BF 646973706C61792074-
 39466 000070C8 68652063757272656E-
 39466 000070D1 74206469726563746F-
 39466 000070DA 727920696E20746865-
 39466 000070E3 207370656369666965-
 39466 000070EC 6420               
 39467 000070EE 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 39468 000070F6 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 39468 000070FF 6974686F7574207061-
 39468 00007108 72616D657465727320-
 39468 00007111 746F20646973706C61-
 39468 0000711A 792074686520637572-
 39468 00007123 72656E742064726976-
 39468 0000712C 6520616E6420646972-
 39468 00007135 6563746F72792E0D0A 
 39469                                  MSG_1360:
 39470 0000713E 1B                      	db 27
 39471 0000713F 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 39471 00007148 652073637265656E2E-
 39471 00007151 0D0A               
 39472 00007153 0D0A                    	db 0Dh,0Ah
 39473 00007155 434C530D0A              	db 'CLS',0Dh,0Ah
 39474                                  MSG_1400:
 39475                                  	;db 145
 39476                                  	;db 'Copies one or more files to another location.',0Dh,0Ah
 39477                                  	;db 0Dh,0Ah
 39478                                  	;db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 39479                                  	;db '  [/A | /B]] [/V]',0Dh,0Ah
 39480                                  	;db 0Dh,0Ah
 39481                                  	
 39482                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39483                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:76A9h)
 39484 0000715A 9C                      	db 156 ; 19/06/2023	
 39485 0000715B 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 39485 00007164 65206F72206D6F7265-
 39485 0000716D 2066696C657320746F-
 39485 00007176 20616E6F7468657220-
 39485 0000717F 6C6F636174696F6E2E-
 39485 00007188 0D0A               
 39486 0000718A 0D0A                    	db 0Dh,0Ah
 39487 0000718C 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 39487 00007195 7C202F425D20736F75-
 39487 0000719E 726365205B2F41207C-
 39487 000071A7 202F425D205B2B2073-
 39487 000071B0 6F75726365205B2F41-
 39487 000071B9 207C202F425D205B2B-
 39487 000071C2 202E2E2E5D5D205B64-
 39487 000071CB 657374696E6174696F-
 39487 000071D4 6E0D0A             
 39488 000071D7 20205B2F41207C202F-     	db '  [/A | /B]] [/V] [/Y | /-Y]',0Dh,0Ah
 39488 000071E0 425D5D205B2F565D20-
 39488 000071E9 5B2F59207C202F2D59-
 39488 000071F2 5D0D0A             
 39489 000071F5 0D0A                    	db 0Dh,0Ah
 39490                                  MSG_1401:
 39491 000071F7 68                      	db 104
 39492 000071F8 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 39492 00007201 202020202020537065-
 39492 0000720A 636966696573207468-
 39492 00007213 652066696C65206F72-
 39492 0000721C 2066696C657320746F-
 39492 00007225 20626520636F706965-
 39492 0000722E 642E0D0A           
 39493 00007232 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 39493 0000723B 202020202020496E64-
 39493 00007244 69636174657320616E-
 39493 0000724D 204153434949207465-
 39493 00007256 78742066696C652E0D-
 39493 0000725F 0A                 
 39494                                  MSG_1402:
 39495 00007260 76                      	db 118
 39496 00007261 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 39496 0000726A 202020202020496E64-
 39496 00007273 696361746573206120-
 39496 0000727C 62696E617279206669-
 39496 00007285 6C652E0D0A         
 39497 0000728A 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 39497 00007293 74696F6E2020537065-
 39497 0000729C 636966696573207468-
 39497 000072A5 65206469726563746F-
 39497 000072AE 727920616E642F6F72-
 39497 000072B7 2066696C656E616D65-
 39497 000072C0 20666F722074686520-
 39497 000072C9 6E65772066696C6528-
 39497 000072D2 73292E0D0A         
 39498                                  MSG_1403:	
 39499                                  	;db 65  ;  MSDOS 5.0
 39500                                  	; 17/06/2023
 39501 000072D7 3F                      	db 63 ; MSDOS 6.22
 39502 000072D8 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 39502 000072E1 202020202020566572-
 39502 000072EA 696669657320746861-
 39502 000072F3 74206E65772066696C-
 39502 000072FC 657320617265207772-
 39502 00007305 697474656E20636F72-
 39502 0000730E 726563746C792E0D0A 
 39503                                  	;db 0Dh,0Ah ; MSDOS 5.0
 39504                                  
 39505                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39506                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7866h
 39507                                  MSG_1404:
 39508 00007317 74                              db 116
 39509 00007318 20202F592020202020-     	db '  /Y           Suppresses prompting to confirm you want to overwrite an',0Dh,0Ah
 39509 00007321 202020202020537570-
 39509 0000732A 707265737365732070-
 39509 00007333 726F6D7074696E6720-
 39509 0000733C 746F20636F6E666972-
 39509 00007345 6D20796F752077616E-
 39509 0000734E 7420746F206F766572-
 39509 00007357 777269746520616E0D-
 39509 00007360 0A                 
 39510 00007361 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 39510 0000736A 202020202020657869-
 39510 00007373 7374696E6720646573-
 39510 0000737C 74696E6174696F6E20-
 39510 00007385 66696C652E0D0A     
 39511                                  MSG_1405:
 39512 0000738C 72                      	db 114
 39513 0000738D 20202F2D5920202020-     	db '  /-Y          Causes prompting to confirm you want to overwrite an',0Dh,0Ah
 39513 00007396 202020202020436175-
 39513 0000739F 7365732070726F6D70-
 39513 000073A8 74696E6720746F2063-
 39513 000073B1 6F6E6669726D20796F-
 39513 000073BA 752077616E7420746F-
 39513 000073C3 206F76657277726974-
 39513 000073CC 6520616E0D0A       
 39514 000073D2 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 39514 000073DB 202020202020657869-
 39514 000073E4 7374696E6720646573-
 39514 000073ED 74696E6174696F6E20-
 39514 000073F6 66696C652E0D0A     
 39515 000073FD 0D0A                    	db 0Dh,0Ah
 39516                                  MSG_1406:
 39517 000073FF 42                      	db 66
 39518 00007400 546865207377697463-     	db 'The switch /Y may be preset in the COPYCMD environment variable.',0Dh,0Ah
 39518 00007409 68202F59206D617920-
 39518 00007412 626520707265736574-
 39518 0000741B 20696E207468652043-
 39518 00007424 4F5059434D4420656E-
 39518 0000742D 7669726F6E6D656E74-
 39518 00007436 207661726961626C65-
 39518 0000743F 2E0D0A             
 39519                                  
 39520                                  ;MSG_1404: ; MSDOS 5.0 (TRANGROUP:681Ch)
 39521                                  MSG_1407:  ; MSDOS 6.22	(TRANGROUP:7991h)
 39522 00007442 87                      	db 135
 39523 00007443 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 39523 0000744C 2066696C65732C2073-
 39523 00007455 706563696679206120-
 39523 0000745E 73696E676C65206669-
 39523 00007467 6C6520666F72206465-
 39523 00007470 7374696E6174696F6E-
 39523 00007479 2C20627574206D756C-
 39523 00007482 7469706C652066696C-
 39523 0000748B 65730D0A           
 39524 0000748F 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 39524 00007498 6520287573696E6720-
 39524 000074A1 77696C646361726473-
 39524 000074AA 206F722066696C6531-
 39524 000074B3 2B66696C65322B6669-
 39524 000074BC 6C653320666F726D61-
 39524 000074C5 74292E0D0A         
 39525                                  MSG_1420:
 39526 000074CA 8A                      	db 138
 39527 000074CB 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 39527 000074D4 6865207465726D696E-
 39527 000074DD 616C20646576696365-
 39527 000074E6 207573656420746F20-
 39527 000074EF 636F6E74726F6C2079-
 39527 000074F8 6F7572207379737465-
 39527 00007501 6D2E0D0A           
 39528 00007505 0D0A                    	db 0Dh,0Ah
 39529 00007507 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 39529 00007510 63650D0A           
 39530 00007514 0D0A                    	db 0Dh,0Ah
 39531 00007516 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 39531 0000751F 202054686520746572-
 39531 00007528 6D696E616C20646576-
 39531 00007531 69636520796F752077-
 39531 0000753A 616E7420746F207573-
 39531 00007543 652C20737563682061-
 39531 0000754C 7320434F4D312E0D0A 
 39532                                  MSG_1440:
 39533                                  	;db 45
 39534                                  	;db 'Displays or sets the date.',0Dh,0Ah
 39535                                  	;db 0Dh,0Ah
 39536                                  	;db 'DATE [date]',0Dh,0Ah
 39537                                  	;db 0Dh,0Ah
 39538                                  
 39539                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39540                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7AA4h)
 39541 00007555 5D                      	db 93
 39542 00007556 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 39542 0000755F 6F7220736574732074-
 39542 00007568 686520646174652E0D-
 39542 00007571 0A                 
 39543 00007572 0D0A                    	db 0Dh,0Ah
 39544 00007574 44415445205B6D6D2D-     	db 'DATE [mm-dd-yy]',0Dh,0Ah
 39544 0000757D 64642D79795D0D0A   
 39545 00007585 0D0A                    	db 0Dh,0Ah
 39546 00007587 20206D6D2D64642D79-     	db '  mm-dd-yy    Sets the date you specify.',0Dh,0Ah
 39546 00007590 792020202053657473-
 39546 00007599 207468652064617465-
 39546 000075A2 20796F752073706563-
 39546 000075AB 6966792E0D0A       
 39547 000075B1 0D0A                    	db 0Dh,0Ah
 39548                                  MSG_1441:
 39549 000075B3 83                      	db 131
 39550 000075B4 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 39550 000075BD 20776974686F757420-
 39550 000075C6 706172616D65746572-
 39550 000075CF 7320746F2064697370-
 39550 000075D8 6C6179207468652063-
 39550 000075E1 757272656E74206461-
 39550 000075EA 74652073657474696E-
 39550 000075F3 6720616E640D0A     
 39551 000075FA 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 39551 00007603 666F722061206E6577-
 39551 0000760C 206F6E652E20205072-
 39551 00007615 65737320454E544552-
 39551 0000761E 20746F206B65657020-
 39551 00007627 7468652073616D6520-
 39551 00007630 646174652E0D0A     
 39552                                  MSG_1460:	
 39553 00007637 64                      	db 100
 39554 00007638 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 39554 00007641 6E65206F72206D6F72-
 39554 0000764A 652066696C65732E0D-
 39554 00007653 0A                 
 39555 00007654 0D0A                    	db 0Dh,0Ah
 39556 00007656 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 39556 0000765F 653A5D5B706174685D-
 39556 00007668 66696C656E616D6520-
 39556 00007671 5B2F505D0D0A       
 39557 00007677 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 39557 00007680 6976653A5D5B706174-
 39557 00007689 685D66696C656E616D-
 39557 00007692 65205B2F505D0D0A   
 39558 0000769A 0D0A                    	db 0Dh,0Ah
 39559                                  MSG_1461:
 39560 0000769C 83                      	db 131
 39561 0000769D 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 39561 000076A6 5D5B706174685D6669-
 39561 000076AF 6C656E616D65202053-
 39561 000076B8 706563696669657320-
 39561 000076C1 7468652066696C6528-
 39561 000076CA 732920746F2064656C-
 39561 000076D3 6574652E2020537065-
 39561 000076DC 63696679206D756C74-
 39561 000076E5 69706C650D0A       
 39562 000076EB 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 39562 000076F4 202020202020202020-
 39562 000076FD 202020202020202066-
 39562 00007706 696C65732062792075-
 39562 0000770F 73696E672077696C64-
 39562 00007718 63617264732E0D0A   
 39563                                  MSG_1462:
 39564 00007720 4F                      	db 79
 39565 00007721 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 39565 0000772A 202020202020202020-
 39565 00007733 202020202020202050-
 39565 0000773C 726F6D70747320666F-
 39565 00007745 7220636F6E6669726D-
 39565 0000774E 6174696F6E20626566-
 39565 00007757 6F72652064656C6574-
 39565 00007760 696E67206561636820-
 39565 00007769 66696C652E0D0A     
 39566                                  
 39567                                  ; 17/06/2023
 39568                                  %if 0	; MSDOS 5.0 DIR Help messages
 39569                                  
 39570                                  MSG_1480:
 39571                                  	db 162
 39572                                  	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 39573                                  	db 0Dh,0Ah
 39574                                  	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 39575                                  	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 39576                                  	db 0Dh,0Ah
 39577                                  MSG_1481:
 39578                                  	db 93
 39579                                  	db '  [drive:][path][filename]',0Dh,0Ah
 39580                                  	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 39581                                  MSG_1482:
 39582                                  	db 97
 39583                                  	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 39584                                  	db '  /W          Uses wide list format.',0Dh,0Ah
 39585                                  MSG_1483:	
 39586                                  	db 122
 39587                                  	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 39588                                  	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 39589                                  MSG_1484:
 39590                                  	db 191
 39591                                  	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 39592                                  	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 39593                                  	db '  /O          List by files in sorted order.',0Dh,0Ah
 39594                                  MSG_1485:
 39595                                  	db 155
 39596                                  	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 39597                                  	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 39598                                  MSG_1486:
 39599                                  	db 150
 39600                                  	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 39601                                  	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 39602                                  MSG_1487:
 39603                                  	db 102
 39604                                  	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 39605                                  	db '  /L          Uses lowercase.',0Dh,0Ah
 39606                                  	db 0Dh,0Ah
 39607                                  MSG_1488:
 39608                                  	db 146
 39609                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 39610                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 39611                                  %endif
 39612                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39613                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7CBFh
 39614                                  MSG_1480:
 39615 00007770 89                      	db 137
 39616 00007771 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 39616 0000777A 61206C697374206F66-
 39616 00007783 2066696C657320616E-
 39616 0000778C 642073756264697265-
 39616 00007795 63746F726965732069-
 39616 0000779E 6E2061206469726563-
 39616 000077A7 746F72792E0D0A     
 39617 000077AE 0D0A                    	db 0Dh,0Ah
 39618 000077B0 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]sortord]]',0Dh,0Ah
 39618 000077B9 653A5D5B706174685D-
 39618 000077C2 5B66696C656E616D65-
 39618 000077CB 5D205B2F505D205B2F-
 39618 000077D4 575D205B2F415B5B3A-
 39618 000077DD 5D617474726962735D-
 39618 000077E6 5D205B2F4F5B5B3A5D-
 39618 000077EF 736F72746F72645D5D-
 39618 000077F8 0D0A               
 39619                                  MSG_1481:
 39620 000077FA 1E                      	db 30
 39621 000077FB 202020205B2F535D20-     	db '    [/S] [/B] [/L] [/C[H]]',0Dh,0Ah
 39621 00007804 5B2F425D205B2F4C5D-
 39621 0000780D 205B2F435B485D5D0D-
 39621 00007816 0A                 
 39622 00007817 0D0A                    	db 0Dh,0Ah
 39623                                  MSG_1482:
 39624 00007819 50                      	db 80
 39625 0000781A 20205B64726976653A-     	db '  [drive:][path][filename]   Specifies drive, directory, and/or files to list.',0Dh,0Ah
 39625 00007823 5D5B706174685D5B66-
 39625 0000782C 696C656E616D655D20-
 39625 00007835 202053706563696669-
 39625 0000783E 65732064726976652C-
 39625 00007847 206469726563746F72-
 39625 00007850 792C20616E642F6F72-
 39625 00007859 2066696C657320746F-
 39625 00007862 206C6973742E0D0A   
 39626                                  MSG_1483:
 39627 0000786A 59                      	db 89
 39628 0000786B 20202F502020202020-     	db '  /P      Pauses after each screenful of information.',0Dh,0Ah
 39628 00007874 205061757365732061-
 39628 0000787D 667465722065616368-
 39628 00007886 2073637265656E6675-
 39628 0000788F 6C206F6620696E666F-
 39628 00007898 726D6174696F6E2E0D-
 39628 000078A1 0A                 
 39629 000078A2 20202F572020202020-     	db '  /W      Uses wide list format.',0Dh,0Ah
 39629 000078AB 205573657320776964-
 39629 000078B4 65206C69737420666F-
 39629 000078BD 726D61742E0D0A     
 39630                                  MSG_1484:
 39631 000078C4 7E                      	db 126
 39632 000078C5 20202F412020202020-     	db '  /A      Displays files with specified attributes.',0Dh,0Ah
 39632 000078CE 20446973706C617973-
 39632 000078D7 2066696C6573207769-
 39632 000078E0 746820737065636966-
 39632 000078E9 696564206174747269-
 39632 000078F2 62757465732E0D0A   
 39633 000078FA 202061747472696273-     	db '  attribs   D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
 39633 00007903 202020442020446972-
 39633 0000790C 6563746F7269657320-
 39633 00007915 202052202052656164-
 39633 0000791E 2D6F6E6C792066696C-
 39633 00007927 657320202020202020-
 39633 00007930 202048202048696464-
 39633 00007939 656E2066696C65730D-
 39633 00007942 0A                 
 39634                                  MSG_1485:
 39635 00007943 7B                      	db 123
 39636 00007944 202020202020202020-     	db '            S  System files  A  Files ready to archive  -  Prefix meaning "not"',0Dh,0Ah
 39636 0000794D 202020532020537973-
 39636 00007956 74656D2066696C6573-
 39636 0000795F 202041202046696C65-
 39636 00007968 732072656164792074-
 39636 00007971 6F2061726368697665-
 39636 0000797A 20202D202050726566-
 39636 00007983 6978206D65616E696E-
 39636 0000798C 6720226E6F74220D0A 
 39637 00007995 20202F4F2020202020-     	db '  /O      List by files in sorted order.',0Dh,0Ah
 39637 0000799E 204C69737420627920-
 39637 000079A7 66696C657320696E20-
 39637 000079B0 736F72746564206F72-
 39637 000079B9 6465722E0D0A       
 39638                                  MSG_1486:
 39639 000079BF 95                      	db 149
 39640 000079C0 2020736F72746F7264-     	db '  sortord   N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 39640 000079C9 2020204E2020427920-
 39640 000079D2 6E616D652028616C70-
 39640 000079DB 686162657469632920-
 39640 000079E4 202020202020532020-
 39640 000079ED 42792073697A652028-
 39640 000079F6 736D616C6C65737420-
 39640 000079FF 6669727374290D0A   
 39641 00007A07 202020202020202020-     	db '            E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 39641 00007A10 202020452020427920-
 39641 00007A19 657874656E73696F6E-
 39641 00007A22 2028616C7068616265-
 39641 00007A2B 746963292020442020-
 39641 00007A34 427920646174652026-
 39641 00007A3D 2074696D6520286561-
 39641 00007A46 726C69657374206669-
 39641 00007A4F 727374290D0A       
 39642                                  MSG_1487:
 39643 00007A55 46                      	db 70
 39644 00007A56 202020202020202020-     	db '            G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 39644 00007A5F 20202047202047726F-
 39644 00007A68 757020646972656374-
 39644 00007A71 6F7269657320666972-
 39644 00007A7A 7374202020202D2020-
 39644 00007A83 50726566697820746F-
 39644 00007A8C 207265766572736520-
 39644 00007A95 6F726465720D0A     
 39645                                  MSG_1488:
 39646 00007A9C 7F                      	db 127
 39647 00007A9D 202020202020202020-     	db '            C  By compression ratio (smallest first)',0Dh,0Ah
 39647 00007AA6 202020432020427920-
 39647 00007AAF 636F6D707265737369-
 39647 00007AB8 6F6E20726174696F20-
 39647 00007AC1 28736D616C6C657374-
 39647 00007ACA 206669727374290D0A 
 39648 00007AD3 20202F532020202020-     	db '  /S      Displays files in specified directory and all subdirectories.',0Dh,0Ah
 39648 00007ADC 20446973706C617973-
 39648 00007AE5 2066696C657320696E-
 39648 00007AEE 207370656369666965-
 39648 00007AF7 64206469726563746F-
 39648 00007B00 727920616E6420616C-
 39648 00007B09 6C2073756264697265-
 39648 00007B12 63746F726965732E0D-
 39648 00007B1B 0A                 
 39649                                  MSG_1489:
 39650 00007B1C 41                      	db 65
 39651 00007B1D 20202F422020202020-     	db '  /B      Uses bare format (no heading information or summary).',0Dh,0Ah
 39651 00007B26 205573657320626172-
 39651 00007B2F 6520666F726D617420-
 39651 00007B38 286E6F206865616469-
 39651 00007B41 6E6720696E666F726D-
 39651 00007B4A 6174696F6E206F7220-
 39651 00007B53 73756D6D617279292E-
 39651 00007B5C 0D0A               
 39652                                  MSG_1490:
 39653 00007B5E 1B                      	db 27
 39654 00007B5F 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 39654 00007B68 2055736573206C6F77-
 39654 00007B71 6572636173652E0D0A 
 39655                                  MSG_1491:
 39656 00007B7A 52                      	db 82
 39657 00007B7B 20202F435B485D2020-     	db '  /C[H]   Displays file compression ratio; /CH uses host allocation unit size.',0Dh,0Ah
 39657 00007B84 20446973706C617973-
 39657 00007B8D 2066696C6520636F6D-
 39657 00007B96 7072657373696F6E20-
 39657 00007B9F 726174696F3B202F43-
 39657 00007BA8 48207573657320686F-
 39657 00007BB1 737420616C6C6F6361-
 39657 00007BBA 74696F6E20756E6974-
 39657 00007BC3 2073697A652E0D0A   
 39658 00007BCB 0D0A                    	db 0Dh,0Ah
 39659                                  MSG_1492:
 39660 00007BCD 92                      	db 146
 39661 00007BCE 537769746368657320-     	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 39661 00007BD7 6D6179206265207072-
 39661 00007BE0 6573657420696E2074-
 39661 00007BE9 686520444952434D44-
 39661 00007BF2 20656E7669726F6E6D-
 39661 00007BFB 656E74207661726961-
 39661 00007C04 626C652E20204F7665-
 39661 00007C0D 72726964650D0A     
 39662 00007C14 707265736574207377-     	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 39662 00007C1D 697463686573206279-
 39662 00007C26 20707265666978696E-
 39662 00007C2F 6720616E7920737769-
 39662 00007C38 746368207769746820-
 39662 00007C41 2D202868797068656E-
 39662 00007C4A 292D2D666F72206578-
 39662 00007C53 616D706C652C202F2D-
 39662 00007C5C 572E0D0A           
 39663                                  MSG_1493:
 39664 00007C60 16                      	db 22
 39665 00007C61 202020205B2F535D20-     	db '    [/S] [/B] [/L]',0Dh,0Ah
 39665 00007C6A 5B2F425D205B2F4C5D-
 39665 00007C73 0D0A               
 39666 00007C75 0D0A                    	db 0Dh,0Ah
 39667                                  MSG_1494:
 39668 00007C77 1D                      	db 29
 39669 00007C78 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 39669 00007C81 2055736573206C6F77-
 39669 00007C8A 6572636173652E0D0A 
 39670 00007C93 0D0A                    	db 0Dh,0Ah
 39671                                  
 39672                                  MSG_1500:
 39673 00007C95 3E                      	db 62
 39674 00007C96 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 39674 00007C9F 20434F4D4D414E442E-
 39674 00007CA8 434F4D2070726F6772-
 39674 00007CB1 616D2028636F6D6D61-
 39674 00007CBA 6E6420696E74657270-
 39674 00007CC3 7265746572292E0D0A 
 39675 00007CCC 0D0A                    	db 0Dh,0Ah
 39676 00007CCE 455849540D0A            	db 'EXIT',0Dh,0Ah
 39677                                  MSG_1520:
 39678 00007CD4 3D                      	db 61
 39679 00007CD5 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 39679 00007CDE 206469726563746F72-
 39679 00007CE7 792E0D0A           
 39680 00007CEB 0D0A                    	db 0Dh,0Ah
 39681 00007CED 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 39681 00007CF6 6976653A5D70617468-
 39681 00007CFF 0D0A               
 39682 00007D01 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 39682 00007D0A 3A5D706174680D0A   
 39683                                  MSG_1540:
 39684 00007D12 5D                      	db 93
 39685 00007D13 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 39685 00007D1C 6F7220736574732061-
 39685 00007D25 207365617263682070-
 39685 00007D2E 61746820666F722065-
 39685 00007D37 786563757461626C65-
 39685 00007D40 2066696C65732E0D0A 
 39686 00007D49 0D0A                    	db 0Dh,0Ah
 39687 00007D4B 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 39687 00007D54 6976653A5D70617468-
 39687 00007D5D 5B3B2E2E2E5D5D0D0A 
 39688 00007D66 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 39689 00007D6E 0D0A                    	db 0Dh,0Ah
 39690                                  MSG_1541:
 39691 00007D70 6B                      	db 107
 39692 00007D71 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct MS-DOS to search',0Dh,0Ah
 39692 00007D7A 203B20746F20636C65-
 39692 00007D83 617220616C6C207365-
 39692 00007D8C 617263682D70617468-
 39692 00007D95 2073657474696E6773-
 39692 00007D9E 20616E642064697265-
 39692 00007DA7 6374204D532D444F53-
 39692 00007DB0 20746F207365617263-
 39692 00007DB9 680D0A             
 39693 00007DBC 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 39693 00007DC5 68652063757272656E-
 39693 00007DCE 74206469726563746F-
 39693 00007DD7 72792E0D0A         
 39694                                  MSG_1542:
 39695 00007DDC 3B                      	db 59
 39696 00007DDD 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 39696 00007DE6 20776974686F757420-
 39696 00007DEF 706172616D65746572-
 39696 00007DF8 7320746F2064697370-
 39696 00007E01 6C6179207468652063-
 39696 00007E0A 757272656E74207061-
 39696 00007E13 74682E0D0A         
 39697                                  MSG_1560:
 39698 00007E18 37                      	db 55
 39699 00007E19 4368616E6765732074-     	db 'Changes the MS-DOS command prompt.',0Dh,0Ah
 39699 00007E22 6865204D532D444F53-
 39699 00007E2B 20636F6D6D616E6420-
 39699 00007E34 70726F6D70742E0D0A 
 39700 00007E3D 0D0A                    	db 0Dh,0Ah
 39701 00007E3F 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 39701 00007E48 6578745D0D0A       
 39702 00007E4E 0D0A                    	db 0Dh,0Ah
 39703                                  MSG_1561:
 39704 00007E50 7C                      	db 124
 39705 00007E51 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 39705 00007E5A 205370656369666965-
 39705 00007E63 732061206E65772063-
 39705 00007E6C 6F6D6D616E64207072-
 39705 00007E75 6F6D70742E0D0A     
 39706 00007E7C 0D0A                    	db 0Dh,0Ah
 39707 00007E7E 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 39707 00007E87 6E206265206D616465-
 39707 00007E90 207570206F66206E6F-
 39707 00007E99 726D616C2063686172-
 39707 00007EA2 61637465727320616E-
 39707 00007EAB 642074686520666F6C-
 39707 00007EB4 6C6F77696E67207370-
 39707 00007EBD 656369616C20636F64-
 39707 00007EC6 65733A0D0A         
 39708 00007ECB 0D0A                    	db 0Dh,0Ah
 39709                                  MSG_1562:
 39710 00007ECD 2F                      	db 47
 39711 00007ECE 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 39711 00007ED7 28657175616C207369-
 39711 00007EE0 676E290D0A         
 39712 00007EE5 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 39712 00007EEE 28646F6C6C61722073-
 39712 00007EF7 69676E290D0A       
 39713                                  MSG_1563:
 39714 00007EFD 2A                      	db 42
 39715 00007EFE 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 39715 00007F07 7272656E742074696D-
 39715 00007F10 650D0A             
 39716 00007F13 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 39716 00007F1C 7272656E7420646174-
 39716 00007F25 650D0A             
 39717                                  MSG_1564:
 39718 00007F28 3D                      	db 61
 39719 00007F29 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 39719 00007F32 7272656E7420647269-
 39719 00007F3B 766520616E64207061-
 39719 00007F44 74680D0A           
 39720 00007F48 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 39720 00007F51 2D444F532076657273-
 39720 00007F5A 696F6E206E756D6265-
 39720 00007F63 720D0A             
 39721                                  MSG_1565:
 39722 00007F66 34                      	db 52
 39723 00007F67 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 39723 00007F70 7272656E7420647269-
 39723 00007F79 76650D0A           
 39724 00007F7D 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 39724 00007F86 28677265617465722D-
 39724 00007F8F 7468616E207369676E-
 39724 00007F98 290D0A             
 39725                                  MSG_1566:
 39726 00007F9B 2C                      	db 44
 39727 00007F9C 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 39727 00007FA5 286C6573732D746861-
 39727 00007FAE 6E207369676E290D0A 
 39728 00007FB7 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 39728 00007FC0 2870697065290D0A   
 39729                                  MSG_1567:
 39730 00007FC8 79                      	db 121
 39731 00007FC9 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 39731 00007FD2 636B73706163652028-
 39731 00007FDB 657261736573207072-
 39731 00007FE4 6576696F7573206368-
 39731 00007FED 61726163746572290D-
 39731 00007FF6 0A                 
 39732 00007FF7 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 39732 00008000 6361706520636F6465-
 39732 00008009 202841534349492063-
 39732 00008012 6F6465203237290D0A 
 39733 0000801B 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 39733 00008024 727269616765207265-
 39733 0000802D 7475726E20616E6420-
 39733 00008036 6C696E65666565640D-
 39733 0000803F 0A                 
 39734 00008040 0D0A                    	db 0Dh,0Ah
 39735                                  MSG_1568:
 39736 00008042 4C                      	db 76
 39737 00008043 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 39737 0000804C 505420776974686F75-
 39737 00008055 7420706172616D6574-
 39737 0000805E 65727320746F207265-
 39737 00008067 736574207468652070-
 39737 00008070 726F6D707420746F20-
 39737 00008079 746865206465666175-
 39737 00008082 6C742073657474696E-
 39737 0000808B 672E0D0A           
 39738                                  MSG_1580:
 39739 0000808F 47                      	db 71
 39740 00008090 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 39740 00008099 64656C657465732920-
 39740 000080A2 61206469726563746F-
 39740 000080AB 72792E0D0A         
 39741 000080B0 0D0A                    	db 0Dh,0Ah
 39742 000080B2 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 39742 000080BB 6976653A5D70617468-
 39742 000080C4 0D0A               
 39743 000080C6 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 39743 000080CF 3A5D706174680D0A   
 39744                                  MSG_1600:
 39745 000080D7 1C                      	db 28
 39746 000080D8 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 39746 000080E1 2066696C65206F7220-
 39746 000080EA 66696C65732E0D0A   
 39747 000080F2 0D0A                    	db 0Dh,0Ah
 39748                                  MSG_1601:
 39749 000080F4 53                      	db 83
 39750 000080F5 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 39750 000080FE 726976653A5D5B7061-
 39750 00008107 74685D66696C656E61-
 39750 00008110 6D65312066696C656E-
 39750 00008119 616D65320D0A       
 39751 0000811F 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 39751 00008128 653A5D5B706174685D-
 39751 00008131 66696C656E616D6531-
 39751 0000813A 2066696C656E616D65-
 39751 00008143 320D0A             
 39752 00008146 0D0A                    	db 0Dh,0Ah
 39753                                  MSG_1602:
 39754                                  	;db 77
 39755                                  	;db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 39756                                  
 39757                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39758                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:8697h
 39759                                  MSG_1602:
 39760 00008148 A0                      	db 160
 39761 00008149 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 39761 00008152 20796F752063616E6E-
 39761 0000815B 6F7420737065636966-
 39761 00008164 792061206E65772064-
 39761 0000816D 72697665206F722070-
 39761 00008176 61746820666F722079-
 39761 0000817F 6F7572206465737469-
 39761 00008188 6E6174696F6E206669-
 39761 00008191 6C652E0D0A         
 39762 00008196 0D0A                    	db 0Dh,0Ah
 39763 00008198 557365204D4F564520-     	db 'Use MOVE to rename a directory, or to move files from one directory to another.',0Dh,0Ah
 39763 000081A1 746F2072656E616D65-
 39763 000081AA 206120646972656374-
 39763 000081B3 6F72792C206F722074-
 39763 000081BC 6F206D6F7665206669-
 39763 000081C5 6C65732066726F6D20-
 39763 000081CE 6F6E65206469726563-
 39763 000081D7 746F727920746F2061-
 39763 000081E0 6E6F746865722E0D0A 
 39764                                  MSG_1620:
 39765 000081E9 57                      	db 87
 39766 000081EA 446973706C6179732C-     	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 39766 000081F3 20736574732C206F72-
 39766 000081FC 2072656D6F76657320-
 39766 00008205 4D532D444F5320656E-
 39766 0000820E 7669726F6E6D656E74-
 39766 00008217 207661726961626C65-
 39766 00008220 732E0D0A           
 39767 00008224 0D0A                    	db 0Dh,0Ah
 39768 00008226 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 39768 0000822F 61626C653D5B737472-
 39768 00008238 696E675D5D0D0A     
 39769 0000823F 0D0A                    	db 0Dh,0Ah
 39770                                  MSG_1621:
 39771 00008241 81                      	db 129
 39772 00008242 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 39772 0000824B 652020537065636966-
 39772 00008254 696573207468652065-
 39772 0000825D 6E7669726F6E6D656E-
 39772 00008266 742D7661726961626C-
 39772 0000826F 65206E616D652E0D0A 
 39773 00008278 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 39773 00008281 202020537065636966-
 39773 0000828A 696573206120736572-
 39773 00008293 696573206F66206368-
 39773 0000829C 617261637465727320-
 39773 000082A5 746F2061737369676E-
 39773 000082AE 20746F207468652076-
 39773 000082B7 61726961626C652E0D-
 39773 000082C0 0A                 
 39774 000082C1 0D0A                    	db 0Dh,0Ah
 39775                                  MSG_1622:
 39776 000082C3 4B                      	db 75
 39777 000082C4 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 39777 000082CD 776974686F75742070-
 39777 000082D6 6172616D6574657273-
 39777 000082DF 20746F20646973706C-
 39777 000082E8 617920746865206375-
 39777 000082F1 7272656E7420656E76-
 39777 000082FA 69726F6E6D656E7420-
 39777 00008303 7661726961626C6573-
 39777 0000830C 2E0D0A             
 39778                                  MSG_1640:
 39779                                  	;db 52
 39780                                  	;db 'Displays or sets the system time.',0Dh,0Ah
 39781                                  	;db 0Dh,0Ah
 39782                                  	;db 'TIME [time]',0Dh,0Ah
 39783                                  	;db 0Dh,0Ah
 39784                                  
 39785                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39786                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:885Eh)
 39787 0000830F 2D                      	db 45
 39788 00008310 446973706C61797320-     	db 'Displays or sets the time.',0Dh,0Ah
 39788 00008319 6F7220736574732074-
 39788 00008322 68652074696D652E0D-
 39788 0000832B 0A                 
 39789 0000832C 0D0A                    	db 0Dh,0Ah
 39790 0000832E 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 39790 00008337 655D0D0A           
 39791 0000833B 0D0A                    	db 0Dh,0Ah
 39792                                  MSG_1641:
 39793 0000833D 83                      	db 131
 39794 0000833E 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 39794 00008347 2077697468206E6F20-
 39794 00008350 706172616D65746572-
 39794 00008359 7320746F2064697370-
 39794 00008362 6C6179207468652063-
 39794 0000836B 757272656E74207469-
 39794 00008374 6D652073657474696E-
 39794 0000837D 6720616E6420612070-
 39794 00008386 726F6D70740D0A     
 39795 0000838D 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 39795 00008396 206F6E652E20205072-
 39795 0000839F 65737320454E544552-
 39795 000083A8 20746F206B65657020-
 39795 000083B1 7468652073616D6520-
 39795 000083BA 74696D652E0D0A     
 39796                                  MSG_1660:
 39797 000083C1 46                      	db 70
 39798 000083C2 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 39798 000083CB 74686520636F6E7465-
 39798 000083D4 6E7473206F66206120-
 39798 000083DD 746578742066696C65-
 39798 000083E6 2E0D0A             
 39799 000083E9 0D0A                    	db 0Dh,0Ah
 39800 000083EB 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 39800 000083F4 76653A5D5B70617468-
 39800 000083FD 5D66696C656E616D65-
 39800 00008406 0D0A               
 39801                                  MSG_1680:
 39802 00008408 25                      	db 37
 39803 00008409 446973706C61797320-     	db 'Displays the MS-DOS version.',0Dh,0Ah
 39803 00008412 746865204D532D444F-
 39803 0000841B 532076657273696F6E-
 39803 00008424 2E0D0A             
 39804 00008427 0D0A                    	db 0Dh,0Ah
 39805 00008429 5645520D0A              	db 'VER',0Dh,0Ah
 39806                                  MSG_1700:
 39807 0000842E B1                      	db 177
 39808 0000842F 54656C6C73204D532D-     	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 39808 00008438 444F53207768657468-
 39808 00008441 657220746F20766572-
 39808 0000844A 696679207468617420-
 39808 00008453 796F75722066696C65-
 39808 0000845C 732061726520777269-
 39808 00008465 7474656E20636F7272-
 39808 0000846E 6563746C7920746F20-
 39808 00008477 610D0A             
 39809 0000847A 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 39810 00008481 0D0A                    	db 0Dh,0Ah
 39811 00008483 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 39811 0000848C 4E207C204F46465D0D-
 39811 00008495 0A                 
 39812 00008496 0D0A                    	db 0Dh,0Ah
 39813 00008498 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 39813 000084A1 465920776974686F75-
 39813 000084AA 74206120706172616D-
 39813 000084B3 6574657220746F2064-
 39813 000084BC 6973706C6179207468-
 39813 000084C5 652063757272656E74-
 39813 000084CE 205645524946592073-
 39813 000084D7 657474696E672E0D0A 
 39814                                  MSG_1720:
 39815 000084E0 52                      	db 82
 39816 000084E1 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 39816 000084EA 746865206469736B20-
 39816 000084F3 766F6C756D65206C61-
 39816 000084FC 62656C20616E642073-
 39816 00008505 657269616C206E756D-
 39816 0000850E 6265722C2069662074-
 39816 00008517 686579206578697374-
 39816 00008520 2E0D0A             
 39817 00008523 0D0A                    	db 0Dh,0Ah
 39818 00008525 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 39818 0000852E 653A5D0D0A         
 39819                                  MSG_1740:
 39820 00008533 5B                      	db 91
 39821 00008534 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 39821 0000853D 206261746368207072-
 39821 00008546 6F6772616D2066726F-
 39821 0000854F 6D20616E6F74686572-
 39821 00008558 2E0D0A             
 39822 0000855B 0D0A                    	db 0Dh,0Ah
 39823 0000855D 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 39823 00008566 76653A5D5B70617468-
 39823 0000856F 5D66696C656E616D65-
 39823 00008578 205B62617463682D70-
 39823 00008581 6172616D6574657273-
 39823 0000858A 5D0D0A             
 39824 0000858D 0D0A                    	db 0Dh,0Ah
 39825                                  MSG_1741:
 39826 0000858F 72                      	db 114
 39827 00008590 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 39827 00008599 6172616D6574657273-
 39827 000085A2 202020537065636966-
 39827 000085AB 69657320616E792063-
 39827 000085B4 6F6D6D616E642D6C69-
 39827 000085BD 6E6520696E666F726D-
 39827 000085C6 6174696F6E20726571-
 39827 000085CF 756972656420627920-
 39827 000085D8 7468650D0A         
 39828 000085DD 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 39828 000085E6 202020202020202020-
 39828 000085EF 202020626174636820-
 39828 000085F8 70726F6772616D2E0D-
 39828 00008601 0A                 
 39829                                  MSG_1760:
 39830 00008602 4C                      	db 76
 39831 00008603 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 39831 0000860C 6F6D6D656E74732028-
 39831 00008615 72656D61726B732920-
 39831 0000861E 696E20612062617463-
 39831 00008627 682066696C65206F72-
 39831 00008630 20434F4E4649472E53-
 39831 00008639 59532E0D0A         
 39832 0000863E 0D0A                    	db 0Dh,0Ah
 39833 00008640 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 39833 00008649 656E745D0D0A       
 39834                                  MSG_1780:
 39835 0000864F 6B                      	db 107
 39836 00008650 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 39836 00008659 70726F63657373696E-
 39836 00008662 67206F662061206261-
 39836 0000866B 7463682070726F6772-
 39836 00008674 616D20616E64206469-
 39836 0000867D 73706C617973207468-
 39836 00008686 65206D657373616765-
 39836 0000868F 2022               
 39837 00008691 507265737320616E79-     	db 'Press any',0Dh,0Ah
 39837 0000869A 0D0A               
 39838 0000869C 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 39838 000086A5 6E74696E75652E2E2E-
 39838 000086AE 2E220D0A           
 39839 000086B2 0D0A                    	db 0Dh,0Ah
 39840 000086B4 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 39841                                  MSG_1800:
 39842 000086BB 4D                      	db 77
 39843 000086BC 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 39843 000086C5 6D657373616765732C-
 39843 000086CE 206F72207475726E73-
 39843 000086D7 20636F6D6D616E642D-
 39843 000086E0 6563686F696E67206F-
 39843 000086E9 6E206F72206F66662E-
 39843 000086F2 0D0A               
 39844 000086F4 0D0A                    	db 0Dh,0Ah
 39845 000086F6 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 39845 000086FF 4E207C204F46465D0D-
 39845 00008708 0A                 
 39846                                  MSG_1801:
 39847 00008709 57                      	db 87
 39848 0000870A 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 39848 00008713 6573736167655D0D0A 
 39849 0000871C 0D0A                    	db 0Dh,0Ah
 39850 0000871E 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 39850 00008727 20776974686F757420-
 39850 00008730 706172616D65746572-
 39850 00008739 7320746F2064697370-
 39850 00008742 6C6179207468652063-
 39850 0000874B 757272656E74206563-
 39850 00008754 686F2073657474696E-
 39850 0000875D 672E               
 39851 0000875F 0D0A                    	db 0Dh,0Ah
 39852                                  MSG_1820:
 39853 00008761 47                      	db 71
 39854 00008762 44697265637473204D-     	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 39854 0000876B 532D444F5320746F20-
 39854 00008774 61206C6162656C6C65-
 39854 0000877D 64206C696E6520696E-
 39854 00008786 206120626174636820-
 39854 0000878F 70726F6772616D2E0D-
 39854 00008798 0A                 
 39855 00008799 0D0A                    	db 0Dh,0Ah
 39856 0000879B 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 39856 000087A4 6C0D0A             
 39857 000087A7 0D0A                    	db 0Dh,0Ah
 39858                                  MSG_1821:
 39859 000087A9 8A                      	db 138
 39860 000087AA 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 39860 000087B3 205370656369666965-
 39860 000087BC 732061207465787420-
 39860 000087C5 737472696E67207573-
 39860 000087CE 656420696E20746865-
 39860 000087D7 206261746368207072-
 39860 000087E0 6F6772616D20617320-
 39860 000087E9 61206C6162656C2E0D-
 39860 000087F2 0A                 
 39861 000087F3 0D0A                    	db 0Dh,0Ah
 39862 000087F5 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 39862 000087FE 61206C6162656C206F-
 39862 00008807 6E2061206C696E6520-
 39862 00008810 627920697473656C66-
 39862 00008819 2C20626567696E6E69-
 39862 00008822 6E6720776974682061-
 39862 0000882B 20636F6C6F6E2E0D0A 
 39863                                  MSG_1840:
 39864 00008834 4A                      	db 74
 39865 00008835 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 39865 0000883E 686520706F73697469-
 39865 00008847 6F6E206F6620726570-
 39865 00008850 6C61636561626C6520-
 39865 00008859 706172616D65746572-
 39865 00008862 7320696E2061206261-
 39865 0000886B 7463682066696C652E-
 39865 00008874 0D0A               
 39866 00008876 0D0A                    	db 0Dh,0Ah
 39867 00008878 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 39868                                  MSG_1860:
 39869 0000887F 5A                      	db 90
 39870 00008880 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 39870 00008889 636F6E646974696F6E-
 39870 00008892 616C2070726F636573-
 39870 0000889B 73696E6720696E2062-
 39870 000088A4 617463682070726F67-
 39870 000088AD 72616D732E0D0A     
 39871 000088B4 0D0A                    	db 0Dh,0Ah
 39872 000088B6 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 39872 000088BF 4552524F524C455645-
 39872 000088C8 4C206E756D62657220-
 39872 000088D1 636F6D6D616E640D0A 
 39873                                  MSG_1861:
 39874 000088DA 46                      	db 70
 39875 000088DB 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 39875 000088E4 737472696E67313D3D-
 39875 000088ED 737472696E67322063-
 39875 000088F6 6F6D6D616E640D0A   
 39876 000088FE 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 39876 00008907 45584953542066696C-
 39876 00008910 656E616D6520636F6D-
 39876 00008919 6D616E640D0A       
 39877 0000891F 0D0A                    	db 0Dh,0Ah
 39878                                  MSG_1862:
 39879 00008921 7D                      	db 125
 39880 00008922 20204E4F5420202020-     	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 39880 0000892B 202020202020202020-
 39880 00008934 202053706563696669-
 39880 0000893D 65732074686174204D-
 39880 00008946 532D444F532073686F-
 39880 0000894F 756C64206361727279-
 39880 00008958 206F75742074686520-
 39880 00008961 636F6D6D616E64206F-
 39880 0000896A 6E6C790D0A         
 39881 0000896F 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 39881 00008978 202020202020202020-
 39881 00008981 202069662074686520-
 39881 0000898A 636F6E646974696F6E-
 39881 00008993 2069732066616C7365-
 39881 0000899C 2E0D0A             
 39882                                  MSG_1863:
 39883 0000899F A2                      	db 162
 39884 000089A0 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 39884 000089A9 56454C206E756D6265-
 39884 000089B2 722053706563696669-
 39884 000089BB 657320612074727565-
 39884 000089C4 20636F6E646974696F-
 39884 000089CD 6E2069662074686520-
 39884 000089D6 6C6173742070726F67-
 39884 000089DF 72616D2072756E2072-
 39884 000089E8 657475726E65640D0A 
 39885 000089F1 202020202020202020-     	db '                    '
 39885 000089FA 202020202020202020-
 39885 00008A03 2020               
 39886 00008A05 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 39886 00008A0E 6F646520657175616C-
 39886 00008A17 20746F206F72206772-
 39886 00008A20 656174657220746861-
 39886 00008A29 6E20746865206E756D-
 39886 00008A32 626572207370656369-
 39886 00008A3B 666965642E0D0A     
 39887                                  MSG_1864:
 39888 00008A42 66                      	db 102
 39889 00008A43 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 39889 00008A4C 202020202020202020-
 39889 00008A55 202053706563696669-
 39889 00008A5E 65732074686520636F-
 39889 00008A67 6D6D616E6420746F20-
 39889 00008A70 6361727279206F7574-
 39889 00008A79 206966207468652063-
 39889 00008A82 6F6E646974696F6E20-
 39889 00008A8B 69730D0A           
 39890 00008A8F 202020202020202020-     	db '                    met.',0Dh,0Ah
 39890 00008A98 202020202020202020-
 39890 00008AA1 20206D65742E0D0A   
 39891                                  MSG_1865:
 39892 00008AA9 6A                      	db 106
 39893 00008AAA 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 39893 00008AB3 3D3D737472696E6732-
 39893 00008ABC 202053706563696669-
 39893 00008AC5 657320612074727565-
 39893 00008ACE 20636F6E646974696F-
 39893 00008AD7 6E2069662074686520-
 39893 00008AE0 737065636966696564-
 39893 00008AE9 207465787420737472-
 39893 00008AF2 696E67730D0A       
 39894 00008AF8 202020202020202020-     	db '                    match.',0Dh,0Ah
 39894 00008B01 202020202020202020-
 39894 00008B0A 20206D617463682E0D-
 39894 00008B13 0A                 
 39895                                  MSG_1866:
 39896 00008B14 67                      	db 103
 39897 00008B15 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 39897 00008B1E 696C656E616D652020-
 39897 00008B27 202053706563696669-
 39897 00008B30 657320612074727565-
 39897 00008B39 20636F6E646974696F-
 39897 00008B42 6E2069662074686520-
 39897 00008B4B 737065636966696564-
 39897 00008B54 2066696C656E616D65-
 39897 00008B5D 0D0A               
 39898 00008B5F 202020202020202020-     	db '                    exists.',0Dh,0Ah
 39898 00008B68 202020202020202020-
 39898 00008B71 20206578697374732E-
 39898 00008B7A 0D0A               
 39899                                  MSG_1880:
 39900 00008B7C 77                      	db 119
 39901 00008B7D 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 39901 00008B86 656369666965642063-
 39901 00008B8F 6F6D6D616E6420666F-
 39901 00008B98 722065616368206669-
 39901 00008BA1 6C6520696E20612073-
 39901 00008BAA 6574206F662066696C-
 39901 00008BB3 65732E0D0A         
 39902 00008BB8 0D0A                    	db 0Dh,0Ah
 39903 00008BBA 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 39903 00008BC3 61626C6520494E2028-
 39903 00008BCC 7365742920444F2063-
 39903 00008BD5 6F6D6D616E64205B63-
 39903 00008BDE 6F6D6D616E642D7061-
 39903 00008BE7 72616D65746572735D-
 39903 00008BF0 0D0A               
 39904 00008BF2 0D0A                    	db 0Dh,0Ah
 39905                                  MSG_1881:
 39906 00008BF4 7D                      	db 125
 39907 00008BF5 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 39907 00008BFE 6C6520205370656369-
 39907 00008C07 666965732061207265-
 39907 00008C10 706C61636561626C65-
 39907 00008C19 20706172616D657465-
 39907 00008C22 722E0D0A           
 39908 00008C26 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 39908 00008C2F 202020205370656369-
 39908 00008C38 666965732061207365-
 39908 00008C41 74206F66206F6E6520-
 39908 00008C4A 6F72206D6F72652066-
 39908 00008C53 696C65732E20205769-
 39908 00008C5C 6C646361726473206D-
 39908 00008C65 617920626520757365-
 39908 00008C6E 642E0D0A           
 39909                                  MSG_1882:
 39910 00008C72 56                      	db 86
 39911 00008C73 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 39911 00008C7C 202020205370656369-
 39911 00008C85 666965732074686520-
 39911 00008C8E 636F6D6D616E642074-
 39911 00008C97 6F206361727279206F-
 39911 00008CA0 757420666F72206561-
 39911 00008CA9 63682066696C652E0D-
 39911 00008CB2 0A                 
 39912 00008CB3 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 39912 00008CBC 2D706172616D657465-
 39912 00008CC5 72730D0A           
 39913                                  MSG_1883:
 39914 00008CC9 A2                      	db 162
 39915 00008CCA 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 39915 00008CD3 202020205370656369-
 39915 00008CDC 666965732070617261-
 39915 00008CE5 6D6574657273206F72-
 39915 00008CEE 207377697463686573-
 39915 00008CF7 20666F722074686520-
 39915 00008D00 737065636966696564-
 39915 00008D09 20636F6D6D616E642E-
 39915 00008D12 0D0A               
 39916 00008D14 0D0A                    	db 0Dh,0Ah
 39917 00008D16 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 39917 00008D1F 6520464F5220636F6D-
 39917 00008D28 6D616E6420696E2061-
 39917 00008D31 206261746368207072-
 39917 00008D3A 6F6772616D2C207370-
 39917 00008D43 656369667920252576-
 39917 00008D4C 61726961626C652069-
 39917 00008D55 6E7374656164206F66-
 39917 00008D5E 0D0A               
 39918 00008D60 257661726961626C65-     	db '%variable.',0Dh,0Ah
 39918 00008D69 2E0D0A             
 39919                                  MSG_1900:
 39920 00008D6C 17                      	db 23
 39921 00008D6D 526573657276656420-     	db 'Reserved command name',0Dh,0Ah
 39921 00008D76 636F6D6D616E64206E-
 39921 00008D7F 616D650D0A         
 39922                                  MSG_1920:
 39923 00008D84 2F                      	db 47
 39924 00008D85 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 39924 00008D8E 726F6772616D20696E-
 39924 00008D97 746F20746865207570-
 39924 00008DA0 706572206D656D6F72-
 39924 00008DA9 7920617265612E0D0A 
 39925 00008DB2 0D0A                    	db 0Dh,0Ah
 39926                                  MSG_1921:
 39927                                  	;db 88
 39928                                  	;db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 39929                                  	;db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 39930                                  	;db 0Dh,0Ah
 39931                                  
 39932                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39933                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9303h
 39934 00008DB4 9D                      	db 157
 39935 00008DB5 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 39935 00008DBE 5B64726976653A5D5B-
 39935 00008DC7 706174685D66696C65-
 39935 00008DD0 6E616D65205B706172-
 39935 00008DD9 616D65746572735D0D-
 39935 00008DE2 0A                 
 39936 00008DE3 4C4F41444849474820-     	db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...] [/S]]',0Dh,0Ah
 39936 00008DEC 5B2F4C3A726567696F-
 39936 00008DF5 6E315B2C6D696E7369-
 39936 00008DFE 7A65315D5B3B726567-
 39936 00008E07 696F6E325B2C6D696E-
 39936 00008E10 73697A65325D2E2E2E-
 39936 00008E19 5D205B2F535D5D0D0A 
 39937 00008E22 202020202020202020-     	db '         [drive:][path]filename [parameters]',0Dh,0Ah
 39937 00008E2B 5B64726976653A5D5B-
 39937 00008E34 706174685D66696C65-
 39937 00008E3D 6E616D65205B706172-
 39937 00008E46 616D65746572735D0D-
 39937 00008E4F 0A                 
 39938 00008E50 0D0A                    	db 0Dh,0Ah
 39939                                  	
 39940                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:8111h)
 39941                                  ;MSG_1922: 	; MSDOS 5.0 COMMAND.COM
 39942                                  	;db 113
 39943                                  	;db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 39944                                  	;db '               program you want to load.',0Dh,0Ah
 39945                                  
 39946                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39947                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:93A1h
 39948                                  MSG_1922:
 39949 00008E52 B6                      	db 182
 39950 00008E53 2F4C3A726567696F6E-     	db '/L:region1[,minsize1][;region2[,minsize2]]...',0Dh,0Ah
 39950 00008E5C 315B2C6D696E73697A-
 39950 00008E65 65315D5B3B72656769-
 39950 00008E6E 6F6E325B2C6D696E73-
 39950 00008E77 697A65325D5D2E2E2E-
 39950 00008E80 0D0A               
 39951 00008E82 202020202020202020-     	db '            Specifies the region(s) of memory into which to load',0Dh,0Ah
 39951 00008E8B 202020537065636966-
 39951 00008E94 696573207468652072-
 39951 00008E9D 6567696F6E28732920-
 39951 00008EA6 6F66206D656D6F7279-
 39951 00008EAF 20696E746F20776869-
 39951 00008EB8 636820746F206C6F61-
 39951 00008EC1 640D0A             
 39952 00008EC4 202020202020202020-     	db '            the program.  Region1 specifies the number of the first',0Dh,0Ah
 39952 00008ECD 202020746865207072-
 39952 00008ED6 6F6772616D2E202052-
 39952 00008EDF 6567696F6E31207370-
 39952 00008EE8 656369666965732074-
 39952 00008EF1 6865206E756D626572-
 39952 00008EFA 206F66207468652066-
 39952 00008F03 697273740D0A       
 39953                                  MSG_1923:
 39954 00008F09 85                      	db 133
 39955 00008F0A 202020202020202020-     	db '            memory region; minsize1 specifies the minimum size, if',0Dh,0Ah
 39955 00008F13 2020206D656D6F7279-
 39955 00008F1C 20726567696F6E3B20-
 39955 00008F25 6D696E73697A653120-
 39955 00008F2E 737065636966696573-
 39955 00008F37 20746865206D696E69-
 39955 00008F40 6D756D2073697A652C-
 39955 00008F49 2069660D0A         
 39956 00008F4E 202020202020202020-     	db '            any, for region1.  Region2 and minsize2 specify the',0Dh
 39956 00008F57 202020616E792C2066-
 39956 00008F60 6F7220726567696F6E-
 39956 00008F69 312E2020526567696F-
 39956 00008F72 6E3220616E64206D69-
 39956 00008F7B 6E73697A6532207370-
 39956 00008F84 656369667920746865-
 39956 00008F8D 0D                 
 39957 00008F8E 0A                      	db 0Ah
 39958                                  MSG_1924:
 39959 00008F8F 7F                      	db 127
 39960 00008F90 202020202020202020-     	db '            number and minimum size of the second region, if any.',0Dh,0Ah
 39960 00008F99 2020206E756D626572-
 39960 00008FA2 20616E64206D696E69-
 39960 00008FAB 6D756D2073697A6520-
 39960 00008FB4 6F6620746865207365-
 39960 00008FBD 636F6E642072656769-
 39960 00008FC6 6F6E2C20696620616E-
 39960 00008FCF 792E0D0A           
 39961 00008FD3 202020202020202020-     	db '            You can specify as many regions as you want.',0Dh,0Ah
 39961 00008FDC 202020596F75206361-
 39961 00008FE5 6E2073706563696679-
 39961 00008FEE 206173206D616E7920-
 39961 00008FF7 726567696F6E732061-
 39961 00009000 7320796F752077616E-
 39961 00009009 742E0D0A           
 39962 0000900D 0D0A                    	db 0Dh,0Ah
 39963                                  MSG_1925:
 39964 0000900F 83                      	db 131
 39965 00009010 2F5320202020202020-     	db '/S          Shrinks a UMB to its minimum size while the program',0Dh,0Ah
 39965 00009019 202020536872696E6B-
 39965 00009022 73206120554D422074-
 39965 0000902B 6F20697473206D696E-
 39965 00009034 696D756D2073697A65-
 39965 0000903D 207768696C65207468-
 39965 00009046 652070726F6772616D-
 39965 0000904F 0D0A               
 39966 00009051 202020202020202020-     	db '            is loading.  /S is normally used only by MemMaker.',0Dh,0Ah
 39966 0000905A 2020206973206C6F61-
 39966 00009063 64696E672E20202F53-
 39966 0000906C 206973206E6F726D61-
 39966 00009075 6C6C79207573656420-
 39966 0000907E 6F6E6C79206279204D-
 39966 00009087 656D4D616B65722E0D-
 39966 00009090 0A                 
 39967 00009091 0D0A                    	db 0Dh,0Ah
 39968                                  MSG_1926:
 39969 00009093 57                      	db 87
 39970 00009094 5B64726976653A5D5B-     	db '[drive:][path]filename',0Dh,0Ah
 39970 0000909D 706174685D66696C65-
 39970 000090A6 6E616D650D0A       
 39971 000090AC 202020202020202020-     	db '            Specifies the location and name of the program.',0Dh,0Ah
 39971 000090B5 202020537065636966-
 39971 000090BE 69657320746865206C-
 39971 000090C7 6F636174696F6E2061-
 39971 000090D0 6E64206E616D65206F-
 39971 000090D9 66207468652070726F-
 39971 000090E2 6772616D2E0D0A     
 39972 000090E9 0D0A                    	db 0Dh,0Ah
 39973                                  
 39974                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39975                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:963Ah
 39976                                  MSG_1927:
 39977 000090EB 5A                      	db 90
 39978 000090EC 706172616D65746572-     	db 'parameters  Specifies any command-line information required by',0Dh,0Ah
 39978 000090F5 732020537065636966-
 39978 000090FE 69657320616E792063-
 39978 00009107 6F6D6D616E642D6C69-
 39978 00009110 6E6520696E666F726D-
 39978 00009119 6174696F6E20726571-
 39978 00009122 75697265642062790D-
 39978 0000912B 0A                 
 39979 0000912C 202020202020202020-     	db '            the program.',0Dh,0Ah
 39979 00009135 202020746865207072-
 39979 0000913E 6F6772616D2E0D0A   
 39980                                  
 39981                                  ; ---------------------------------------------------------------------------
 39982                                  
 39983                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39984                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 39985                                  
 39986                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39987                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9695h
 39988                                  
 39989                                  ; --------------- S U B R O U T I N E ---------------------------------------
 39990                                  
 39991                                  $M_CLS_3:
 39992 00009146 0E                      	push	cs		; CLASS_F
 39993 00009147 07                      	pop	es
 39994 00009148 8D3E[E163]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 39995                                  	; 15/04/2023
 39996                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 39997                                  	; 17/06/2023
 39998                                  	;add	cx,11627	; ADD CX,$-$M_CLASS_3_STRUC ; 969Bh-6930h
 39999                                  	; 06/08/2024
 40000 0000914C 81C16B2D                	add	cx,$-$M_CLASS_3_STRUC
 40001 00009150 C3                      	retn
 40002                                  
 40003                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40004                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 40005                                  
 40006                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40007                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96A0h
 40008                                  
 40009                                  ; ---------------------------------------------------------------------------
 40010                                  ; Class 1 messages
 40011                                  ; ---------------------------------------------------------------------------
 40012                                  	
 40013                                  $M_CLASS_1_STRUC:
 40014 00009151 01                      	db 1			; $M_CLASS_ID
 40015                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 40016                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40017 00009152 0616                    	dw 1606h  ; MSDOS 6.22 COMMAND.COM
 40018 00009154 04                      	db 4			; Class_1_MessageCount
 40019                                  $M_ID_1_1:
 40020 00009155 0200                    	dw 2			; Message Number = 2
 40021 00009157 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 40022                                  $M_ID_1_2:
 40023 00009159 0300                    	dw 3			; Message Number = 3
 40024 0000915B 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 40025                                  $M_ID_1_3:
 40026 0000915D 0800                    	dw 8			; Message Number = 8
 40027 0000915F 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 40028                                  $M_ID_1_4:
 40029 00009161 FFFF                    	dw 0FFFFh		; Message Number = -1
 40030 00009163 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 40031                                  
 40032                                  ; ---------------------------------------------------------------------------
 40033                                  
 40034                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 40035                                  EXTEND2:
 40036 00009165 0E                      	db 14
 40037 00009166 46696C65206E6F7420-     	db 'File not found'
 40037 0000916F 666F756E64         
 40038                                  EXTEND3:
 40039 00009174 0E                      	db 14
 40040 00009175 50617468206E6F7420-     	db 'Path not found'
 40040 0000917E 666F756E64         
 40041                                  EXTEND8:
 40042 00009183 13                      	db 19
 40043 00009184 496E73756666696369-     	db 'Insufficient memory'
 40043 0000918D 656E74206D656D6F72-
 40043 00009196 79                 
 40044                                  EXTEND999:
 40045 00009197 11                      	db 17
 40046 00009198 457874656E64656420-     	db 'Extended Error %1'
 40046 000091A1 4572726F72202531   
 40047                                  
 40048                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40049                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 40050                                  
 40051                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40052                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96F8h
 40053                                  
 40054                                  ; --------------- S U B R O U T I N E ---------------------------------------
 40055                                  $M_MSGSERV_1:
 40056 000091A9 0E                      	push	cs
 40057 000091AA 07                      	pop	es
 40058 000091AB 8D3E[5191]              	lea	di,$M_CLASS_1_STRUC
 40059                                  	; 15/04/2023
 40060                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 40061                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 40062                                  				; 96FEh-96A0h = 5Eh = 94
 40063 000091AF C3                      	retn
 40064                                  
 40065                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40066                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 40067                                  
 40068                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40069                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9702h
 40070                                  
 40071                                  ; ---------------------------------------------------------------------------
 40072                                  ; Class 2 messages
 40073                                  ; ---------------------------------------------------------------------------
 40074                                  	
 40075                                  $M_CLASS_2_STRUC:
 40076 000091B0 02                      	db 2			; $M_CLASS_ID
 40077                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 40078                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40079 000091B1 0616                    	dw 1606h  ; MSDOS 6.22 COMMAND.COM
 40080 000091B3 01                      	db 1			; Class_2_MessageCount
 40081                                  $M_ID_2_1:
 40082 000091B4 FFFF                    	dw 0FFFFh		; Message Number = -1
 40083 000091B6 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 40084                                  ; ---------------------------------------------------------------------------
 40085                                  
 40086                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 40087                                  PARSE999:
 40088 000091B8 0E                      	db 14
 40089 000091B9 506172736520457272-     	db 'Parse Error %1'
 40089 000091C2 6F72202531         
 40090                                  
 40091                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40092                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 40093                                  
 40094                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40095                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9719h
 40096                                  
 40097                                  ; --------------- S U B R O U T I N E ---------------------------------------
 40098                                  $M_MSGSERV_2:
 40099 000091C7 0E                      	push	cs
 40100 000091C8 07                      	pop	es
 40101 000091C9 8D3E[B091]              	lea	di,$M_CLASS_2_STRUC
 40102                                  	; 15/04/2023
 40103                                  	;add	cx,29		; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 40104                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 40105                                  				; 971Fh-9702h = 1Dh = 29
 40106 000091CD C3                      	retn
 40107                                  
 40108                                  ;============================================================================
 40109                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 40110                                  ;============================================================================
 40111                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40112                                  ; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40113                                  
 40114                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 40115                                  	
 40116                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9723h
 40117                                  
 40118                                  ;****************************************************
 40119                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 40120                                  ;****************************************************
 40121                                  
 40122                                  msg_disp_class:
 40123 000091CE FF                      	db	util_msg_class ; 0FFh
 40124                                  msg_cont_flag:
 40125 000091CF 00                      	db	no_cont_flag ; 0
 40126                                  
 40127                                  ;  extended error string output
 40128                                  extend_buf_ptr:
 40129 000091D0 0000                    	dw	0			;AN000;set to no message
 40130                                  extend_buf_sub:
 40131 000091D2 00                      	db	0			;AN000;set to no substitutions
 40132 000091D3 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40133 000091D4 00                      	db	0			;AN000;reserved
 40134                                  extend_buf_off:
 40135 000091D5 [91A0]                  	dw	string_ptr_2		;AN000;offset of arg
 40136                                  extend_buf_seg:
 40137 000091D7 0000                    	dw	0			;AN000;segment of arg
 40138 000091D9 00                      	db	0			;AN000;first subst
 40139 000091DA 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40140 000091DB 80                      	db	128			;AN000;maximum width
 40141 000091DC 00                      	db	0			;AN000;minimum width
 40142 000091DD 20                      	db	blank ; 20h		;AN000;pad character
 40143                                  
 40144                                  ;  "Duplicate file name or file not found"
 40145                                  RENERR_PTR:
 40146 000091DE EA03                    	dw	1002			;AN000;message number
 40147 000091E0 00                      	db	no_subst ; 0		;AN000;number of subst
 40148                                  
 40149                                  ;  "Invalid path or file name"
 40150                                  BADCPMES_PTR:
 40151 000091E1 EB03                    	dw	1003			;AN000;message number
 40152 000091E3 00                      	db	no_subst ; 0		;AN000;number of subst
 40153                                  
 40154                                  ;  "Insufficient disk space"
 40155                                  NOSPACE_PTR:
 40156 000091E4 EC03                    	dw	1004			;AN000;message number
 40157 000091E6 00                      	db	no_subst ; 0		;AN000;number of subst
 40158                                  
 40159                                  ;  "Out of environment space"
 40160                                  ENVERR_PTR:
 40161 000091E7 EF03                    	dw	1007			;AN000;message number
 40162 000091E9 00                      	db	no_subst ; 0		;AN000;number of subst
 40163                                  
 40164                                  ;  "File creation error"
 40165                                  FULLDIR_PTR:
 40166 000091EA F003                    	dw	1008			;AN000;message number
 40167 000091EC 00                      	db	no_subst ; 0		;AN000;number of subst
 40168                                  
 40169                                  ;  "Batch file missing",13,10
 40170                                  BADBAT_PTR:
 40171 000091ED F103                    	dw	1009			;AN000;message number
 40172 000091EF 00                      	db	no_subst ; 0		;AN000;number of subst
 40173                                  
 40174                                  ;  "Insert disk with batch file",13,10
 40175                                  NEEDBAT_PTR:
 40176 000091F0 F203                    	dw	1010			;AN000;message number
 40177 000091F2 00                      	db	no_subst ; 0		;AN000;number of subst
 40178                                  
 40179                                  ;  "Bad command or file name",13,10
 40180                                  BADNAM_PTR:
 40181 000091F3 F303                    	dw	1011			;AN000;message number
 40182 000091F5 00                      	db	no_subst ; 0		;AN000;number of subst
 40183                                  
 40184                                  ;  "Access denied",13,10
 40185                                  ACCDEN_PTR:
 40186 000091F6 F603                    	dw	1014			;AN000;message number
 40187 000091F8 00                      	db	no_subst ; 0		;AN000;number of subst
 40188                                  
 40189                                  ;  "File cannot be copied onto itself",13,10
 40190                                  OVERWR_PTR:
 40191 000091F9 F703                    	dw	1015			;AN000;message number
 40192 000091FB 00                      	db	no_subst ; 0		;AN000;number of subst
 40193                                  
 40194                                  ;  "Content of destination lost before copy",13,10
 40195                                  LOSTERR_PTR:
 40196 000091FC F803                    	dw	1016			;AN000;message number
 40197 000091FE 00                      	db	no_subst ; 0		;AN000;number of subst
 40198                                  
 40199                                  ;  "Invalid filename or file not found",13,10
 40200                                  INORNOT_PTR:
 40201 000091FF F903                    	dw	1017			;AN000;message number
 40202 00009201 00                      	db	no_subst		;AN000;number of subst
 40203                                  
 40204                                  ;  "%1 File(s) copied",13,10
 40205                                  copied_ptr:
 40206 00009202 FA03                    	dw	1018			;AN000;message number
 40207 00009204 01                      	db	1			;AN000;number of subst
 40208 00009205 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40209 00009206 00                      	db	0			;AN000;reserved
 40210 00009207 [93A0]                  	dw	Copy_num		;AN000;offset of arg
 40211 00009209 0000                    	dw	0			;AN000;segment of arg
 40212 0000920B 01                      	db	1			;AN000;first subst
 40213 0000920C A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40214                                  					;AN000;binary to decimal
 40215 0000920D 09                      	db	9			;AN000;maximum width
 40216 0000920E 09                      	db	9			;AN000;minimum width
 40217 0000920F 20                      	db	blank ; 20h		;AN000;pad character
 40218                                  
 40219                                  ;  "%1 File(s) "
 40220                                  dirmes_ptr:
 40221 00009210 FB03                    	dw	1019			;AN000;message number
 40222 00009212 01                      	db	1			;AN000;number of subst
 40223 00009213 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40224 00009214 00                      	db	0			;AN000;reserved
 40225 00009215 [96A0]                  	dw	Dir_Num			;AN000;offset of arg
 40226 00009217 0000                    	dw	0			;AN000;segment of arg
 40227 00009219 01                      	db	1			;AN000;first subst
 40228                                  	; MSDOS 5.0 COMMAND.COM
 40229                                  	;db	0A1h ; Right_Align+Unsgn_Bin_Word
 40230                                  	; 17/06/2023
 40231                                  screen_f_3:
 40232 0000921A E1                      	db	0E1h ; MSDOS 6.22 COMMAND.COM
 40233                                  					;AN000;binary to decimal
 40234 0000921B 09                      	db	9			;AN000;maximum width
 40235 0000921C 09                      	db	9			;AN000;minimum width
 40236 0000921D 20                      	db	blank ; 20h		;AN000;pad character
 40237                                  
 40238                                  ;  "%1 bytes free",13,10
 40239                                  bytmes_ptr:
 40240 0000921E FC03                    	dw	1020			;AN000;message number
 40241 00009220 01                      	db	1			;AN000;number of subst
 40242 00009221 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40243 00009222 00                      	db	0			;AN000;reserved
 40244 00009223 [9AA0]                  	dw	Bytes_Free		;AN000;offset of arg
 40245 00009225 0000                    	dw	0			;AN000;segment of arg
 40246 00009227 01                      	db	1			;AN000;first subst
 40247                                  	; MSDOS 5.0 COMMAND.COM
 40248                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40249                                  	; 17/06/2023
 40250                                  screen_f_6:
 40251 00009228 F1                      	db	0F1h
 40252                                  					;AN000;long binary to decimal
 40253                                  	; MSDOS 5.0 COMMAND.COM
 40254                                  	;db	28			;AN000;maximum width
 40255                                  	;db	28			;AN000;minimum width
 40256                                  	; 17/06/2023
 40257                                  screen_f_7:
 40258 00009229 20                      	db	32 ; MSDOS 6.22 COMMAND.COM
 40259 0000922A 20                      	db	32
 40260                                  
 40261 0000922B 20                      	db	blank ; 20h		;AN000;pad character
 40262                                  
 40263                                  ;  "Invalid drive specification",13,10
 40264                                  baddrv_ptr:
 40265 0000922C FD03                    	dw	1021			;AN000;message number
 40266 0000922E 00                      	db	no_subst ; 0		;AN000;number of subst
 40267                                  
 40268                                  ;  "Code page %1 not prepared for system",13,10
 40269                                  cp_not_set_ptr:
 40270 0000922F FE03                    	dw	1022			;AN000;message number
 40271 00009231 01                      	db	1			;AN000;number of subst
 40272 00009232 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40273 00009233 00                      	db	0			;AN000;reserved
 40274 00009234 [8BA0]                  	dw	system_cpage		;AN000;offset of arg
 40275 00009236 0000                    	dw	0			;AN000;segment of arg
 40276 00009238 01                      	db	1			;AN000;first subst
 40277 00009239 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40278                                  					;AN000;binary to decimal
 40279 0000923A 05                      	db	5			;AN000;maximum width
 40280 0000923B 01                      	db	1			;AN000;minimum width
 40281 0000923C 20                      	db	blank ; 20h		;AN000;pad character
 40282                                  
 40283                                  ;  "Code page %1 not prepared for all devices",13,10
 40284                                  cp_not_all_ptr:
 40285 0000923D FF03                    	dw	1023			;AN000;message number
 40286 0000923F 01                      	db	1			;AN000;number of subst
 40287 00009240 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40288 00009241 00                      	db	0			;AN000;reserved
 40289 00009242 [8BA0]                  	dw	system_cpage		;AN000;offset of arg
 40290 00009244 0000                    	dw	0			;AN000;segment of arg
 40291 00009246 01                      	db	1			;AN000;first subst
 40292 00009247 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40293                                  					;AN000;binary to decimal
 40294 00009248 05                      	db	5			;AN000;maximum width
 40295 00009249 01                      	db	1			;AN000;minimum width
 40296 0000924A 20                      	db	blank ; 20h		;AN000;pad character
 40297                                  
 40298                                  ;  "Active code page: %1",13,10
 40299                                  cp_active_ptr:
 40300 0000924B 0004                    	dw	1024			;AN000;message number
 40301 0000924D 01                      	db	1			;AN000;number of subst
 40302 0000924E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40303 0000924F 00                      	db	0			;AN000;reserved
 40304 00009250 [8BA0]                  	dw	system_cpage		;AN000;offset of arg
 40305 00009252 0000                    	dw	0			;AN000;segment of arg
 40306 00009254 01                      	db	1			;AN000;first subst
 40307 00009255 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40308                                  					;AN000;binary to decimal
 40309 00009256 05                      	db	5			;AN000;maximum width
 40310 00009257 01                      	db	1			;AN000;minimum width
 40311 00009258 20                      	db	blank ; 20h		;AN000;pad character
 40312                                  
 40313                                  ;  "NLSFUNC not installed",13,10
 40314                                  NLSFUNC_PTR:
 40315 00009259 0104                    	dw	1025			;AN000;message number
 40316 0000925B 00                      	db	no_subst ; 0		;AN000;number of subst
 40317                                  
 40318                                  ;  "Invalid code page",13,10
 40319                                  INV_CODE_PAGE:
 40320 0000925C 0204                    	dw	1026			;AN000;message number
 40321 0000925E 00                      	db	no_subst ; 0		;AN000;number of subst
 40322                                  
 40323                                  ;  "Current drive is no longer valid"
 40324                                  BADCURDRV:
 40325 0000925F 0304                    	dw	1027			;AN000;message number
 40326 00009261 00                      	db	no_subst ; 0		;AN000;number of subst
 40327                                  
 40328                                  ;  "Press any key to continue"
 40329                                  PAUSEMES_PTR:
 40330 00009262 0404                    	dw	1028			;AN000;message number
 40331 00009264 00                      	db	no_subst ; 0		;AN000;number of subst
 40332                                  
 40333                                  ;  "Label not found",13,10
 40334                                  BADLAB_PTR:
 40335 00009265 0504                    	dw	1029			;AN000;message number
 40336 00009267 00                      	db	no_subst ; 0		;AN000;number of subst
 40337                                  
 40338                                  ;  "Syntax error",13,10
 40339                                  SYNTMES_PTR:
 40340 00009268 0604                    	dw	1030			;AN000;message number
 40341 0000926A 00                      	db	no_subst ; 0		;AN000;number of subst
 40342                                  
 40343                                  ;  "Invalid date",13,10
 40344                                  BADDAT_PTR:
 40345 0000926B 0704                    	dw	1031			;AN000;message number
 40346 0000926D 00                      	db	no_subst ; 0		;AN000;number of subst
 40347                                  
 40348                                  ;  "Current date is %1 %2",13,10
 40349                                  CurDat_Ptr:
 40350 0000926E 0804                    	dw	1032			;AN000;message number
 40351 00009270 02                      	db	2			;AN000;number of subst
 40352 00009271 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40353 00009272 00                      	db	0			;AN000;reserved
 40354 00009273 [87A7]                  	dw	Arg_Buf			;AN000;offset of arg
 40355 00009275 0000                    	dw	0			;AN000;segment of arg
 40356 00009277 01                      	db	1			;AN000;first subst
 40357 00009278 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40358 00009279 03                      	db	3			;AN000;maximum width
 40359 0000927A 03                      	db	3			;AN000;minimum width
 40360 0000927B 20                       	db	blank ; 20h		;AN000;pad character
 40361 0000927C 0B                      	db	parm_block_size 	;AN000;size of sublist
 40362 0000927D 00                      	db	0			;AN000;reserved
 40363                                  CurDat_yr:
 40364 0000927E 0000                    	dw	0			;AN000;year
 40365                                  CurDat_mo_day:
 40366 00009280 0000                    	dw	0			;AN000;month,day
 40367 00009282 02                      	db	2			;AN000;second subst
 40368 00009283 34                      	db	34h ; DATE_MDY_4	;AN000;date
 40369 00009284 0A                      	db	10			;AN000;maximum width
 40370 00009285 0A                      	db	10			;AN000;minimum width
 40371 00009286 20                      	db	blank ; 20h		;AN000;pad character
 40372                                  
 40373                                  ;  "SunMonTueWedThuFriSat"
 40374                                  WeekTab:
 40375 00009287 0904                    	dw	1033			;AN000;message number
 40376 00009289 00                      	db	no_subst ; 0		;AN000;number of subst
 40377                                  
 40378                                  ;  "Enter new date (%1):"
 40379                                  
 40380                                  NewDat_Ptr:
 40381 0000928A 0A04                    	dw	1034			;AN000;message number
 40382 0000928C 01                      	db	1			;AN000;number of subst
 40383 0000928D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40384 0000928E 00                      	db	0			;AN000;reserved
 40385                                  NewDat_Format:
 40386 0000928F 0000                    	dw	0			;AN000;offset of replacement
 40387 00009291 0000                    	dw	0			;AN000;segment of arg
 40388 00009293 01                      	db	1			;AN000;first subst
 40389 00009294 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40390 00009295 08                      	db	8			;AN000;maximum width
 40391 00009296 08                      	db	8			;AN000;minimum width
 40392 00009297 20                      	db	blank ; 20h		;AN000;pad character
 40393                                  
 40394                                  ;  "Invalid time",13,10
 40395                                  
 40396                                  BadTim_Ptr:
 40397 00009298 0B04                    	dw	1035			;AN000;message number
 40398 0000929A 00                      	db	no_subst ; 0		;AN000;number of subst
 40399                                  
 40400                                  ;  "Current time is %1",13,10
 40401                                  CurTim_Ptr:
 40402 0000929B 0C04                    	dw	1036			;AN000;message number
 40403 0000929D 01                      	db	1			;AN000;number of subst
 40404 0000929E 0B                      	db	parm_block_size 	;AN000;size of sublist
 40405 0000929F 00                      	db	0			;AN000;reserved
 40406                                  CurTim_hr_min:
 40407 000092A0 0000                    	dw	0			;AN000;hours,minutes
 40408                                  CurTim_Sec_hn:
 40409 000092A2 0000                    	dw	0			;AN000;seconds,hundredths
 40410 000092A4 01                      	db	1			;AN000;first subst
 40411 000092A5 A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 40412                                  					;AC059;time
 40413 000092A6 0C                      	db	12			;AC059;maximum width
 40414 000092A7 0C                      	db	12			;AC059;minimum width
 40415 000092A8 20                      	db	blank ; 20h		;AN000;pad character
 40416                                  
 40417                                  ;  "Enter new time:"
 40418                                  NewTim_Ptr:
 40419 000092A9 0D04                    	dw	1037			;AN000;message number
 40420 000092AB 00                      	db	no_subst ; 0		;AN000;number of subst
 40421                                  
 40422                                  ;  ",    Delete (Y/N)?",13,10
 40423                                  Del_Y_N_Ptr:
 40424 000092AC 0E04                    	dw	1038			;AN000;message number
 40425 000092AE 00                      	db	no_subst ; 0		;AN000;number of subst
 40426                                  
 40427                                  ;  "All files in directory will be deleted!",13,10
 40428                                  ;  "Are you sure (Y/N)?",13,10
 40429                                  SureMes_Ptr:
 40430 000092AF 0F04                    	dw	1039			;AN000;message number
 40431 000092B1 00                      	db	no_subst ; 0		;AN000;number of subst
 40432                                  
 40433                                  ;  "Microsoft DOS Version %1.%2",13,10
 40434                                  VerMes_Ptr:
 40435 000092B2 1004                    	dw	1040			;AN000;message number
 40436 000092B4 02                      	db	2			;AN000;number of subst
 40437 000092B5 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40438 000092B6 00                      	db	0			;AN000;reserved
 40439 000092B7 [9EA0]                  	dw	Major_Ver_Num		;AN000;offset of arg
 40440 000092B9 0000                    	dw	0			;AN000;segment of arg
 40441 000092BB 01                      	db	1			;AN000;first subst
 40442 000092BC A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40443                                  					;AN000;binary to decimal
 40444 000092BD 01                      	db	1			;AN000;maximum width
 40445 000092BE 01                      	db	1			;AN000;minimum width
 40446 000092BF 20                      	db	blank ; 20h		;AN000;pad character
 40447 000092C0 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40448 000092C1 00                      	db	0			;AN000;reserved
 40449 000092C2 [A0A0]                  	dw	Minor_Ver_Num	;AN000;offset of arg
 40450 000092C4 0000                    	dw	0			;AN000;segment of arg
 40451 000092C6 02                      	db	2			;AN000;second subst
 40452 000092C7 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40453                                  					;AN000;binary to decimal
 40454 000092C8 02                      	db	2			;AN000;maximum width
 40455 000092C9 02                      	db	2			;AN000;minimum width
 40456 000092CA 30                      	db	'0' ; 30h		;AN000;pad character
 40457                                  
 40458                                  ;  "Volume in drive %1 has no label",13,10
 40459                                  VolMes_Ptr_2:
 40460 000092CB 1104                    	dw	1041			;AN000;message number
 40461 000092CD 01                      	db	1			;AN000;number of subst
 40462 000092CE 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 40463 000092CF 00                      	db	0			;AN000;reserved
 40464 000092D0 [A4A0]                  	dw	vol_drv			;AN000;offset of drive
 40465 000092D2 0000                    	dw	0			;AN000;segment of arg
 40466 000092D4 01                      	db	1			;AN000;first subst
 40467 000092D5 00                      	db	0 ; Char_field_Char 	;AN000;character
 40468 000092D6 80                      	db	128			;AN000;maximum width
 40469 000092D7 01                      	db	1			;AN000;minimum width
 40470 000092D8 20                      	db	blank ; 20h		;AN000;pad character
 40471                                  
 40472                                  ;  "Volume in drive %1 is %2",13,10
 40473                                  VolMes_Ptr:
 40474 000092D9 1204                    	dw	1042			;AN000;message number
 40475 000092DB 02                      	db	2			;AN000;number of subst
 40476 000092DC 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40477 000092DD 00                      	db	0			;AN000;reserved
 40478 000092DE [A4A0]                  	dw	vol_drv			;AN000;offset of drive
 40479 000092E0 0000                    	dw	0			;AN000;segment of arg
 40480 000092E2 01                      	db	1			;AN000;first subst
 40481 000092E3 00                      	db	00000000b		;AN000;character
 40482 000092E4 80                      	db	128			;AN000;maximum width
 40483 000092E5 01                      	db	1			;AN000;minimum width
 40484 000092E6 20                      	db	blank ; 20h		;AN000;pad character
 40485 000092E7 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40486 000092E8 00                      	db	0			;AN000;reserved
 40487 000092E9 [5B9F]                  	dw	CHARBUF			;AN000;offset of string
 40488 000092EB 0000                    	dw	0			;AN000;segment of arg
 40489 000092ED 02                      	db	2			;AN000;second subst
 40490 000092EE 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40491 000092EF 80                      	db	128			;AN000;maximum width
 40492 000092F0 01                      	db	1			;AN000;minimum width
 40493 000092F1 20                      	db	blank ; 20h		;AN000;pad character
 40494                                  
 40495                                  ;  "Volume Serial Number is %1-%2",13,10
 40496                                  VolSerMes_Ptr:
 40497 000092F2 1304                    	dw	1043			;AN000;message number
 40498 000092F4 02                      	db	2			;AN000;number of subst
 40499 000092F5 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 40500 000092F6 00                      	db	0			;AN000;reserved
 40501 000092F7 [0EA2]                  	dw	vol_serial+2		;AN000;offset of serial
 40502 000092F9 0000                    	dw	0			;AN000;segment of arg
 40503 000092FB 01                      	db	1			;AN000;first subst
 40504 000092FC A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 40505                                  					;AN000;binary to hex
 40506 000092FD 04                      	db	4			;AN000;maximum width
 40507 000092FE 04                      	db	4			;AN000;minimum width
 40508 000092FF 30                      	db	'0' ; 30h		;AN000;pad character
 40509 00009300 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40510 00009301 00                      	db	0			;AN000;reserved
 40511 00009302 [0CA2]                  	dw	vol_serial		;AN000;offset of serial
 40512 00009304 0000                    	dw	0			;AN000;segment of arg
 40513 00009306 02                      	db	2			;AN000;second subst
 40514 00009307 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 40515                                  					;AN000;binary to hex
 40516 00009308 04                      	db	4			;AN000;maximum width
 40517 00009309 04                      	db	4			;AN000;minimum width
 40518 0000930A 30                      	db	'0' ; 30h		;AN000;pad character
 40519                                  
 40520                                  ;  "Invalid directory",13,10
 40521                                  badcd_ptr:
 40522 0000930B 1404                    	dw	1044			;AN000;message number
 40523 0000930D 00                      	db	no_subst ; 0		;AN000;number of subst
 40524                                  
 40525                                  ;  "Unable to create directory",13,10
 40526                                  badmkd_ptr:
 40527 0000930E 1504                    	dw	1045			;AN000;message number
 40528 00009310 00                      	db	no_subst ; 0		;AN000;number of subst
 40529                                  
 40530                                  ;  "Invalid path, not directory,",13,10
 40531                                  ;  "or directory not empty",13,10
 40532                                  badrmd_ptr:
 40533 00009311 1604                    	dw	1046			;AN000;message number
 40534 00009313 00                      	db	no_subst ; 0		;AN000;number of subst
 40535                                  
 40536                                  ;  "Must specify ON or OFF",13,10
 40537                                  bad_on_off_ptr:
 40538 00009314 1704                    	dw	1047			;AN000;message number
 40539 00009316 00                      	db	no_subst ; 0		;AN000;number of subst
 40540                                  
 40541                                  ;  "Directory of %1",13,10
 40542                                  dirhead_ptr:
 40543 00009317 1804                    	dw	1048			;AN000;message number
 40544 00009319 01                      	db	1			;AN000;number of subst
 40545 0000931A 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40546 0000931B 00                      	db	0			;AN000;reserved
 40547 0000931C [2AA0]                  	dw	BWDBUF			;AN000;offset of arg
 40548 0000931E 0000                    	dw	0			;AN000;segment of arg
 40549 00009320 01                      	db	1			;AN000;first subst
 40550 00009321 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40551 00009322 80                      	db	128			;AN000;maximum width
 40552 00009323 00                      	db	0			;AN000;minimum width
 40553 00009324 20                      	db	blank ; 20h		;AN000;pad character
 40554                                  
 40555                                  ;  "No Path",13,10
 40556                                  NULLPATH_PTR:
 40557 00009325 1904                    	dw	1049			;AN000;message number
 40558 00009327 00                      	db	no_subst ; 0		;AN000;number of subst
 40559                                  
 40560                                  ;  "Invalid drive in search path",13,10
 40561                                  BADPMES_PTR:
 40562 00009328 1A04                    	dw	1050			;AN000;message number
 40563 0000932A 00                      	db	no_subst ; 0		;AN000;number of subst
 40564                                  
 40565                                  ;  "Invalid device",13,10
 40566                                  BADDEV_PTR:
 40567 0000932B 1B04                    	dw	1051			;AN000;message number
 40568 0000932D 00                      	db	no_subst ; 0		;AN000;number of subst
 40569                                  
 40570                                  ;  "FOR cannot be nested",13,10
 40571                                  FORNESTMES_PTR:
 40572 0000932E 1C04                    	dw	1052			;AN000;message number
 40573 00009330 00                      	db	no_subst ; 0		;AN000;number of subst
 40574                                  
 40575                                  ;  "Intermediate file error during pipe",13,10
 40576                                  PIPEEMES_PTR:
 40577 00009331 1D04                    	dw	1053			;AN000;message number
 40578 00009333 00                      	db	no_subst ; 0		;AN000;number of subst
 40579                                  
 40580                                  ;  "Cannot do binary reads from a device",13,10
 40581                                  INBDEV_PTR:
 40582 00009334 1E04                    	dw	1054			;AN000;message number
 40583 00009336 00                      	db	no_subst ; 0		;AN000;number of subst
 40584                                  
 40585                                  ;  "BREAK is %1",13,10
 40586                                  CtrlcMes_Ptr:
 40587 00009337 1F04                    	dw	1055			;AN000;message number
 40588 00009339 01                      	db	1			;AN000;number of subst
 40589 0000933A 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40590 0000933B 00                      	db	0			;AN000;reserved
 40591 0000933C 0000                    	dw	0			;AN000;offset of on/off (new)
 40592 0000933E 0000                    	dw	0			;AN000;segment of arg
 40593 00009340 01                      	db	1			;AN000;first subst
 40594 00009341 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40595 00009342 80                      	db	128			;AN000;maximum width
 40596 00009343 01                      	db	1			;AN000;minimum width
 40597 00009344 20                      	db	blank ; 20h		;AN000;pad character
 40598                                  
 40599                                  ;  "VERIFY is %1",13,10
 40600                                  VeriMes_Ptr:
 40601 00009345 2004                    	dw	1056			;AN000;message number
 40602 00009347 01                      	db	1			;AN000;number of subst
 40603 00009348 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40604 00009349 00                      	db	0			;AN000;reserved
 40605 0000934A 0000                    	dw	0			;AN000;offset of on/off (new)
 40606 0000934C 0000                    	dw	0			;AN000;segment of arg
 40607 0000934E 01                      	db	1			;AN000;first subst
 40608 0000934F 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40609 00009350 80                      	db	128			;AN000;maximum width
 40610 00009351 01                      	db	1			;AN000;minimum width
 40611 00009352 20                      	db	blank ; 20h		;AN000;pad character
 40612                                  
 40613                                  ;  "ECHO is %1",13,10
 40614                                  EchoMes_Ptr:
 40615 00009353 2104                    	dw	1057			;AN000;message number
 40616 00009355 01                      	db	1			;AN000;number of subst
 40617 00009356 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40618 00009357 00                      	db	0			;AN000;reserved
 40619 00009358 0000                    	dw	0			;AN000;offset of on/off (new)
 40620 0000935A 0000                    	dw	0			;AN000;segment of arg
 40621 0000935C 01                      	db	1			;AN000;first subst
 40622 0000935D 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40623 0000935E 80                      	db	128			;AN000;maximum width
 40624 0000935F 01                      	db	1			;AN000;minimum width
 40625 00009360 20                      	db	blank ; 20h		;AN000;pad character
 40626                                  
 40627                                  ;  "off"
 40628                                  OFFMES_PTR:
 40629 00009361 2304                    	dw	1059			;AN000;message number
 40630 00009363 00                      	db	no_subst		;AN000;number of subst
 40631                                  
 40632                                  ;  "on"
 40633                                  ONMES_PTR:
 40634 00009364 2404                    	dw	1060			;AN000;message number
 40635 00009366 00                      	db	no_subst ; 0		;AN000;number of subst
 40636                                  
 40637                                  ;  "Error writing to device",13,10
 40638                                  DEVWMES_PTR:
 40639 00009367 2504                    	dw	1061			;AN000;message number
 40640 00009369 00                      	db	no_subst ; 0		;AN000;number of subst
 40641                                  
 40642                                  ;  "Invalid path",13,10
 40643                                  INVAL_PATH_PTR:
 40644 0000936A 2604                    	dw	1062			;AN000;message number
 40645 0000936C 00                      	db	no_subst ; 0		;AN000;number of subst
 40646                                  
 40647                                  ;  unformatted string output
 40648                                  arg_buf_ptr:
 40649 0000936D 2704                    	dw	1063			;AN000;message number
 40650 0000936F 01                      	db	1			;AN000;number of subst
 40651 00009370 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40652 00009371 00                      	db	0			;AN000;reserved
 40653 00009372 [87A7]                  	dw	Arg_Buf 		;AN000;offset of arg
 40654 00009374 0000                    	dw	0			;AN000;segment of arg
 40655 00009376 01                      	db	1			;AN000;first subst
 40656 00009377 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40657 00009378 80                      	db	128			;AN000;maximum width
 40658 00009379 00                      	db	0			;AN000;minimum width
 40659 0000937A 20                      	db	blank ; 20h		;AN000;pad character
 40660                                  
 40661                                  ;  file name output
 40662                                  file_name_ptr:
 40663 0000937B 2804                    	dw	1064			;AN000;message number
 40664 0000937D 01                      	db	1			;AN000;number of subst
 40665 0000937E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40666 0000937F 00                      	db	0			;AN000;reserved
 40667 00009380 [12A1]                  	dw	SrcBuf			;AN000;offset of arg
 40668 00009382 0000                    	dw	0			;AN000;segment of arg
 40669 00009384 01                      	db	1			;AN000;first subst
 40670 00009385 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40671 00009386 80                      	db	128			;AN000;maximum width
 40672 00009387 00                      	db	0			;AN000;minimum width
 40673 00009388 20                      	db	blank ; 20h		;AN000;pad character
 40674                                  
 40675                                  ;  file size output for dir
 40676                                  disp_file_size_ptr:
 40677 00009389 2904                    	dw	1065			;AN000;message number
 40678 0000938B 01                      	db	1			;AN000;number of subst
 40679 0000938C 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40680 0000938D 00                      	db	0			;AN000;reserved
 40681 0000938E [8DA0]                  	dw	File_Size_Low		;AN000;offset of arg
 40682 00009390 0000                    	dw	0			;AN000;segment of arg
 40683 00009392 01                      	db	1			;AN000;first subst
 40684                                  	; MSDOS 5.0 COMMAND.COM
 40685                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40686                                  	; 17/06/2023
 40687                                  screen_f_1:
 40688 00009393 F1                      	db	0F1h ; MSDOS 6.22 COMMAND.COM
 40689                                  					;AN000;long binary to decimal
 40690                                  	; MSDOS 5.0 COMMAND.COM
 40691                                  	;db	10			;AN000;maximum width
 40692                                  	;db	10			;AN000;minimum width
 40693                                  screen_f_2:
 40694 00009394 0E                      	db	14 ; MSDOS 6.22 COMMAND.COM		
 40695 00009395 0E                      	db	14
 40696                                  	
 40697 00009396 20                      	db	blank ; 20h		;AN000;pad character
 40698                                  
 40699                                  ;  unformatted string output
 40700                                  ; %s
 40701                                  string_buf_ptr:
 40702 00009397 2A04                    	dw	1066			;AN000;message number
 40703 00009399 01                      	db	1			;AN000;number of subst
 40704 0000939A 0B                      	db	parm_block_size 	;AN000;size of sublist
 40705 0000939B 00                      	db	0			;AN000;reserved
 40706 0000939C [91A0]                  	dw	string_ptr_2		;AN000;offset of arg
 40707 0000939E 0000                    	dw	0			;AN000;segment of arg
 40708 000093A0 01                      	db	1			;AN000;first subst
 40709 000093A1 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40710 000093A2 80                      	db	128			;AN000;maximum width
 40711 000093A3 00                      	db	0			;AN000;minimum width
 40712 000093A4 20                      	db	blank ; 20h		;AN000;pad character
 40713 000093A5 00                      	db	0			;AN000;
 40714                                  
 40715                                  ;  tab character
 40716                                  tab_ptr:
 40717 000093A6 2B04                    	dw	1067			;AN000;message number
 40718 000093A8 00                      	db	no_subst ; 0		;AN000;number of subst
 40719                                  
 40720                                  ;  " <DIR>   "
 40721                                  dmes_ptr:
 40722 000093A9 2C04                    	dw	1068			;AN000;message number
 40723 000093AB 00                      	db	no_subst ; 0		;AN000;number of subst
 40724                                  
 40725                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40726                                  space_4_ptr :
 40727 000093AC 5104                    	dw	1105 
 40728 000093AE 00                      	db	no_subst ; 0
 40729                                  
 40730                                  ;  destructive back space
 40731                                  dback_ptr:
 40732 000093AF 2D04                    	dw	1069			;AN000;message number
 40733 000093B1 00                      	db	no_subst ; 0		;AN000;number of subst
 40734                                  
 40735                                  ;  carriage return / line feed
 40736                                  acrlf_ptr:
 40737 000093B2 2E04                    	dw	1070			;AN000;message number
 40738 000093B4 00                      	db	no_subst ; 0		;AN000;number of subst
 40739                                  
 40740                                  ;  "mm-dd-yy"
 40741                                  usadat_ptr:
 40742 000093B5 3004                    	dw	1072			;AN000;message number
 40743 000093B7 00                      	db	no_subst ; 0		;AN000;number of subst
 40744                                  
 40745                                  ;  "dd-mm-yy"
 40746                                  eurdat_ptr:
 40747 000093B8 3104                    	dw	1073			;AN000;message number
 40748 000093BA 00                      	db	no_subst ; 0		;AN000;number of subst
 40749                                  
 40750                                  ;  "yy-mm-dd"
 40751                                  japdat_ptr:
 40752 000093BB 3204                    	dw	1074			;AN000;message number
 40753 000093BD 00                      	db	no_subst ; 0		;AN000;number of subst
 40754                                  
 40755                                  ;  date string for prompt
 40756                                  promptdat_ptr:
 40757 000093BE 3304                    	dw	1075			;AN000;message number
 40758 000093C0 02                      	db	2			;AN000;number of subst
 40759 000093C1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40760 000093C2 00                      	db	0			;AN000;reserved
 40761 000093C3 [87A7]                  	dw	Arg_Buf			;AN000;offset of arg
 40762 000093C5 0000                    	dw	0			;AN000;segment of arg
 40763 000093C7 01                      	db	1			;AN000;first subst
 40764 000093C8 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 40765 000093C9 03                      	db	3			;AN000;maximum width
 40766 000093CA 03                      	db	3			;AN000;minimum width
 40767 000093CB 20                       	db	blank ; 20h		;AN000;pad character
 40768 000093CC 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 40769 000093CD 00                      	db	0			;AN000;reserved
 40770                                  promptDat_yr:
 40771 000093CE 0000                    	dw	0			;AN000;year
 40772                                  promptDat_moday:
 40773 000093D0 0000                    	dw	0			;AN000;month,day
 40774 000093D2 02                      	db	2			;AN000;second subst
 40775 000093D3 34                       	db	34h ; DATE_MDY_4	;AN000;date
 40776 000093D4 0A                      	db	10			;AN000;maximum width
 40777 000093D5 08                      	db	8			;AN000;minimum width
 40778 000093D6 20                      	db	blank ; 20h		;AN000;pad character
 40779                                  
 40780                                  ;  Time for prompt
 40781                                  promtim_ptr:
 40782 000093D7 3404                    	dw	1076			;AN000;message number
 40783 000093D9 01                      	db	1			;AN000;number of subst
 40784 000093DA 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40785 000093DB 00                      	db	0			;AN000;reserved
 40786                                  PromTim_hr_min:
 40787 000093DC 0000                    	dw	0			;AN000;hours,minutes
 40788                                  PromTim_Sec_hn:
 40789 000093DE 0000                    	dw	0			;AN000;seconds,hundredths
 40790 000093E0 01                      	db	1			;AN000;first subst
 40791 000093E1 A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 40792                                  					;AC013;time
 40793 000093E2 0B                      	db	11			;AN000;maximum width
 40794 000093E3 0B                      	db	11			;AC013;minimum width
 40795 000093E4 20                      	db	blank ; 20h		;AN000;pad character
 40796                                  
 40797                                  ;  Date and time for DIR
 40798                                  dirdattim_ptr:
 40799 000093E5 3504                    	dw	1077			;AN000;message number
 40800 000093E7 02                      	db	2			;AN000;number of subst
 40801 000093E8 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40802 000093E9 00                      	db	0			;AN000;reserved
 40803                                  DirDat_Yr:
 40804 000093EA 0000                    	dw	0			;AN000;year
 40805                                  DirDat_Mo_Day:
 40806 000093EC 0000                    	dw	0			;AN000;month,day
 40807 000093EE 01                      	db	1			;AN000;first subst
 40808 000093EF A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 40809                                  					;AN000;date
 40810 000093F0 0A                      	db	10			;AN000;maximum width
 40811 000093F1 08                      	db	8			;AN000;minimum width
 40812 000093F2 20                      	db	blank ; 20h		;AN000;pad character
 40813 000093F3 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40814 000093F4 00                      	db	0			;AN000;reserved
 40815                                  DirTim_Hr_Min:
 40816 000093F5 0000                    	dw	0			;AN000;hours,minutes
 40817                                  DirTim_Sec_hn:
 40818 000093F7 0000                    	dw	0			;AN000;seconds,hundredths
 40819 000093F9 02                      	db	2			;AN000;second subst
 40820 000093FA 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 40821                                  					;AN000;time
 40822 000093FB 06                      	db	6			;AN000;maximum width
 40823 000093FC 06                      	db	6			;AN000;minimum width
 40824 000093FD 20                      	db	blank ; 20h		;AN000;pad character
 40825                                  
 40826                                  ;  "Directory already exists"
 40827                                  MD_EXISTS_PTR:
 40828 000093FE 3604                    	dw	1078			;AN000;message number
 40829 00009400 00                      	db	no_subst		;AN000;number of subst
 40830                                  
 40831                                  ;  "%1 bytes",13,10
 40832                                  bytes_ptr:
 40833 00009401 3704                    	dw	1079			; message number
 40834 00009403 01                      	db	1			; number of subst
 40835 00009404 0B                      	db	parm_block_size ; 11	; size of sublist
 40836 00009405 00                      	db	0			; reserved
 40837 00009406 [1F9E]                  	dw	FileSiz			; offset of arg
 40838 00009408 0000                    	dw	0			; segment of arg
 40839 0000940A 01                      	db	1			; first subst
 40840                                  	; MSDOS 5.0 COMMAND.COM
 40841                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40842                                  	; 17/06/2023
 40843                                  screen_f_4:
 40844 0000940B F1                      	db	0F1h ; MSDOS 6.22 COMMAND.COM
 40845                                  					; long binary to decimal
 40846                                  	; MSDOS 5.0 COMMAND.COM
 40847                                  	;db	10			; maximum width
 40848                                  	;db	10			; minimum width
 40849                                  screen_f_5:
 40850 0000940C 0E                      	db	14 ; MSDOS 6.22 COMMAND.COM
 40851 0000940D 0E                      	db	14	
 40852                                  
 40853 0000940E 20                      	db	blank ; 20h		; pad character
 40854                                  
 40855                                  ;  "Total:",13,10
 40856                                  total_ptr:
 40857 0000940F 3804                    	dw	1080			; message number
 40858 00009411 00                      	db	no_subst ; 0		; number of subst
 40859                                  
 40860                                  ;  "Error parsing environment variable:",13,10
 40861                                  errparsenv_ptr:
 40862 00009412 3904                    	dw	1081			; message number
 40863 00009414 00                      	db	no_subst ; 0		; number of subst
 40864                                  
 40865                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40866                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:996Ah)
 40867                                  cox_Y_quest_ptr:
 40868 00009415 3A04                    	dw	1082
 40869 00009417 00                      	db	no_subst ; 0
 40870                                  cox_Y_answ_ptr:
 40871 00009418 3B04                    	dw	1083
 40872 0000941A 00                      	db	no_subst ; 0
 40873                                  
 40874                                  ;  "(continuing %1)",13,10
 40875                                  dircont_ptr:
 40876 0000941B 3C04                    	dw	1084			;AN000;message number
 40877 0000941D 01                      	db	1			;AN000;number of subst
 40878 0000941E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40879 0000941F 00                      	db	0			;AN000;reserved
 40880 00009420 [2AA0]                  	dw	BWDBUF			;AN000;offset of arg
 40881 00009422 0000                    	dw	0			;AN000;segment of arg
 40882 00009424 01                      	db	1			;AN000;first subst
 40883 00009425 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40884 00009426 80                      	db	128			;AN000;maximum width
 40885 00009427 00                      	db	0			;AN000;minimum width
 40886 00009428 20                      	db	blank ; 20h		;AN000;pad character
 40887                                  
 40888                                  ;  "Revision %1",CR,LF
 40889                                  dosrev_ptr:
 40890 00009429 4204                    	dw	1090
 40891 0000942B 01                      	db	1			; one substitution
 40892 0000942C 0B                      	db	parm_block_size ; 11
 40893 0000942D 00                      	db	0
 40894 0000942E [A2A0]                  	dw	One_Char_Val		; ptr to char
 40895 00009430 0000                    	dw	0			; segment addr?
 40896 00009432 01                      	db	1			; 1st substitution
 40897 00009433 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 40898 00009434 01                      	db	1			; max width
 40899 00009435 01                      	db	1			; min width
 40900 00009436 20                      	db	blank ; 20h		; pad char
 40901                                  
 40902                                  ;  "DOS is in ROM"
 40903                                  DosRom_Ptr:
 40904 00009437 4304                    	dw	1091
 40905 00009439 00                      	db	no_subst ; 0		
 40906                                  
 40907                                  ;  "DOS is in HMA"
 40908                                  DosHma_Ptr:
 40909 0000943A 4404                    	dw	1092
 40910 0000943C 00                      	db	no_subst ; 0		
 40911                                  
 40912                                  ;  "DOS is in low memory"
 40913                                  DosLow_Ptr:
 40914 0000943D 4504                    	dw	1093
 40915 0000943F 00                      	db	no_subst ; 0		
 40916                                  
 40917                                  ;  "Cannot Loadhigh batch file" ;M016
 40918                                  NoExecBat_Ptr:
 40919 00009440 4604                    	dw	1094			; M016
 40920 00009442 00                      	db	no_subst ; 0		; M016
 40921                                  
 40922                                  ;  "LoadHigh: Invalid filename" ; M016
 40923                                  LhInvFil_Ptr:
 40924 00009443 4704                    	dw	1095			; M016
 40925 00009445 00                      	db	no_subst ; 0		; M016
 40926                                  
 40927                                  ;  "Could not open specified country information file" ; M045
 40928                                  NoCntry_Ptr:
 40929 00009446 4804                    	dw	1096			; M045
 40930 00009448 00                      	db	no_subst ; 0		; M045
 40931                                  
 40932                                  ; 15/04/2023
 40933                                  ; MSDOS 6.0 COMMAND.COM only !
 40934                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40935                                  ;%if 0
 40936                                  
 40937                                  ;* The next four errors emulate those reported by the normal parse
 40938                                  ;  mechanism, with a little more accurate wording; that parser has been
 40939                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 40940                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 40941                                  ;  parser, so they've been added here.
 40942                                  
 40943                                  ;  "LoadHigh: Invalid argument"
 40944                                  LhInvArg_Ptr:
 40945 00009449 4904                    	dw	1097
 40946 0000944B 00                      	db	no_subst ; 0		
 40947                                  
 40948                                  ;  "Required parameter missing"
 40949                                  ReqParmMiss:
 40950 0000944C 4A04                    	dw	1098
 40951 0000944E 00                      	db	no_subst ; 0		
 40952                                  
 40953                                  ;  "Unrecognized switch"
 40954                                  LhInvSwt_Ptr:
 40955 0000944F 4B04                    	dw	1099
 40956 00009451 00                      	db	no_subst ; 0		
 40957                                  
 40958                                  ;  "A bad UMB number has been specified"
 40959                                  LhBadUMB_Ptr:
 40960 00009452 4C04                    	dw	1100
 40961 00009454 00                      	db	no_subst ; 0
 40962                                  ;%endif	
 40963                                  
 40964                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 40965                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99AAh
 40966                                  
 40967                                  DirCompRatio_Ptr:
 40968 00009455 4D04                    	dw	1101			;message number
 40969 00009457 02                      	db	2			;number of subst
 40970 00009458 0B                      	db	parm_block_size ; 11	;size of sublist
 40971 00009459 00                      	db	0			;reserved
 40972 0000945A [98A0]                  	dw	Dir_CRatio_1		;offset of arg
 40973 0000945C 0000                    	dw	0			;segment of arg
 40974 0000945E 01                      	db	1			;first subst
 40975 0000945F 91                      	db	91h			;format
 40976 00009460 02                      	db	2			;maximum width
 40977 00009461 02                      	db	2			;minimum width
 40978 00009462 20                      	db	blank ; 20h		;pad character
 40979 00009463 0B                      	db	parm_block_size  ; 11	;size of sublist
 40980 00009464 00                      	db	0			; reserved
 40981 00009465 [99A0]                  	dw	Dir_CRatio_2		;offset of arg
 40982 00009467 0000                    	dw	0			;segment of arg
 40983 00009469 02                      	db	2			;second subst
 40984 0000946A 11                      	db	11h			;format
 40985 0000946B 01                      	db	1			;maximum width
 40986 0000946C 01                      	db	1			;minimum width
 40987 0000946D 20                      	db	blank ; 20h		;pad character
 40988                                  
 40989                                  AveCompRatio_Ptr:
 40990 0000946E 4E04                    	dw	1102			;message number
 40991 00009470 02                      	db	2			;number of subst
 40992 00009471 0B                      	db	parm_block_size ; 11	;size of sublist
 40993 00009472 00                      	db	0			;reserved
 40994 00009473 [98A0]                  	dw	Dir_CRatio_1		;offset of arg
 40995 00009475 0000                    	dw	0			;segment of arg
 40996 00009477 01                      	db	1			;first subst
 40997 00009478 91                      	db	91h			;format
 40998 00009479 02                      	db	2			;maximum width
 40999 0000947A 02                      	db	2			;minimum width
 41000 0000947B 20                      	db	blank ; 20h		;pad character
 41001 0000947C 0B                      	db	parm_block_size  ; 11	;size of sublist
 41002 0000947D 00                      	db	0			; reserved
 41003 0000947E [99A0]                  	dw	Dir_CRatio_2		;offset of arg
 41004 00009480 0000                    	dw	0			;segment of arg
 41005 00009482 02                      	db	2			;second subst
 41006 00009483 11                      	db	11h			;format
 41007 00009484 01                      	db	1			;maximum width
 41008 00009485 01                      	db	1			;minimum width
 41009 00009486 20                      	db	blank ; 20h		;pad character
 41010                                  
 41011                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41012                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 41013                                  
 41014                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41015                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99DCh
 41016                                  
 41017                                  ; ---------------------------------------------------------------------------
 41018                                  
 41019                                  PATH_TEXT:
 41020 00009487 504154483D              	db	"PATH="
 41021                                  PROMPT_TEXT:
 41022 0000948C 50524F4D50543D          	db	"PROMPT="
 41023                                  COMSPECSTR:
 41024 00009493 434F4D535045433D        	db	"COMSPEC="
 41025                                  DirEnvVar:
 41026 0000949B 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 41027                                  
 41028                                  ;============================================================================
 41029                                  ; TDATA.ASM, MSDOS 6.0, 1991
 41030                                  ;============================================================================
 41031                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41032                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41033                                  
 41034                                  	; 15/04/2023
 41035 000094A2 00                      	db	0
 41036 000094A3 90                      align 2
 41037                                  
 41038                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 41039                                  ; ---------------------------------------------------------------------------
 41040                                  	; 18/06/2023
 41041                                  	;db	0
 41042                                  
 41043                                  ; Lists of help message numbers for internal commands and /?
 41044                                  
 41045                                  	; 18/06/2023
 41046                                  ;;NoHelpMsgs:
 41047                                  	;dw	1200,0		;M014
 41048                                  
 41049                                  	; 18/06/2023
 41050                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99F7h
 41051                                  
 41052                                  BreakHelpMsgs:
 41053 000094A4 14050000                	dw	1300,0
 41054                                  ChcpHelpMsgs:
 41055 000094A8 280529050000            	dw	1320,1321,0
 41056                                  CdHelpMsgs:
 41057 000094AE 3C053D053E050000        	dw	1340,1341,1342,0
 41058                                  ClsHelpMsgs:
 41059 000094B6 50050000                	dw	1360,0
 41060                                  CopyHelpMsgs:
 41061                                  	;dw	1400,1401,1402,1403,1404,0
 41062                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41063 000094BA 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,1405,1406,1407,0
 41063 000094C3 057D057E057F050000 
 41064                                  CttyHelpMsgs:
 41065 000094CC 8C050000                	dw	1420,0
 41066                                  DateHelpMsgs:
 41067 000094D0 A005A1050000            	dw	1440,1441,0
 41068                                  DelHelpMsgs:
 41069 000094D6 B405B505B6050000        	dw	1460,1461,1462,0
 41070                                  DirHelpMsgs:
 41071 000094DE C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 41071 000094E7 05CD05CE05CF05D005 
 41072                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 41073                                  	; MSDOS 6.0 COMMAND.COM
 41074 000094F0 D105D205D305D405        	dw	1489,1490,1491,1492
 41075 000094F8 0000                    	dw	0
 41076                                  ExitHelpMsgs:
 41077 000094FA DC050000                	dw	1500,0
 41078                                  MdHelpMsgs:
 41079 000094FE F0050000                	dw	1520,0
 41080                                  PathHelpMsgs:
 41081 00009502 0406050606060000        	dw	1540,1541,1542,0
 41082                                  PromptHelpMsgs:
 41083 0000950A 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 41083 00009513 061D061E061F062006-
 41083 0000951C 0000               
 41084                                  RdHelpMsgs:
 41085 0000951E 2C060000                	dw	1580,0
 41086                                  RenHelpMsgs:
 41087 00009522 4006410642060000        	dw	1600,1601,1602,0
 41088                                  SetHelpMsgs:
 41089 0000952A 5406550656060000        	dw	1620,1621,1622,0
 41090                                  TimeHelpMsgs:
 41091 00009532 680669060000            	dw	1640,1641,0
 41092                                  TypeHelpMsgs:
 41093 00009538 7C060000                	dw	1660,0
 41094                                  VerHelpMsgs:
 41095 0000953C 90060000                	dw	1680,0
 41096                                  VerifyHelpMsgs:
 41097 00009540 A4060000                	dw	1700,0
 41098                                  VolHelpMsgs:
 41099 00009544 B8060000                	dw	1720,0
 41100                                  CallHelpMsgs:
 41101 00009548 CC06CD060000            	dw	1740,1741,0	;M014
 41102                                  RemHelpMsgs:
 41103 0000954E E0060000                	dw	1760,0		;M014
 41104                                  PauseHelpMsgs:
 41105 00009552 F4060000                	dw	1780,0		;M014
 41106                                  EchoHelpMsgs:
 41107 00009556 080709070000            	dw	1800,1801,0	;M014
 41108                                  GotoHelpMsgs:
 41109 0000955C 1C071D070000            	dw	1820,1821,0	;M014
 41110                                  ShiftHelpMsgs:
 41111 00009562 30070000                	dw	1840,0		;M014
 41112                                  IfHelpMsgs:
 41113 00009566 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 41113 0000956F 0749074A070000     
 41114                                  ForHelpMsgs:
 41115 00009576 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 41115 0000957F 00                 
 41116                                  TruenameHelpMsgs:
 41117 00009580 6C070000                	 dw	1900,0		;M014
 41118                                  LoadhighHelpMsgs:
 41119 00009584 800781078207            	dw	1920,1921,1922
 41120                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 41121                                  	; MSDOS 6.0 COMMAND.COM
 41122 0000958A 830784078507860787-     	dw	1923,1924,1925,1926,1927 ;M014
 41122 00009593 07                 
 41123 00009594 0000                    	dw	0
 41124                                  
 41125                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 41126                                  CLSSTRING:
 41127 00009596 041B5B324A              	db	4,1Bh,"[2J"		; ANSI Clear screen
 41128                                  
 41129                                  PROMPT_TABLE:
 41130 0000959B 42                      	db	"B"
 41131 0000959C [4B23]                  	dw	Print_B
 41132 0000959E 44                      	db	"D"
 41133 0000959F [193C]                  	dw	PRINT_DATE
 41134 000095A1 45                      	db	"E"
 41135 000095A2 [3F23]                  	dw	PRINT_ESC
 41136 000095A4 47                      	db	"G"
 41137 000095A5 [4323]                  	dw	PRINT_G
 41138 000095A7 48                      	db	"H"
 41139 000095A8 [3523]                  	dw	PRINT_BACK
 41140 000095AA 4C                      	db	"L"
 41141 000095AB [4723]                  	dw	PRINT_L
 41142 000095AD 4E                      	db	"N"
 41143 000095AE [5C23]                  	dw	PRINT_DRIVE
 41144 000095B0 50                      	db	"P"
 41145 000095B1 [6423]                  	dw	build_dir_for_prompt
 41146 000095B3 51                      	db	"Q"
 41147 000095B4 [3B23]                  	dw	PRINT_EQ
 41148 000095B6 54                      	db	"T"
 41149 000095B7 [D034]                  	dw	PRINT_TIME
 41150 000095B9 56                      	db	"V"
 41151 000095BA [CB22]                  	dw	PRINT_VERSION
 41152 000095BC 5F                      	db	"_"
 41153 000095BD [212B]                  	dw	CRLF2
 41154 000095BF 24                      	db	"$"
 41155 000095C0 [4D23]                  	dw	PRINT_CHAR
 41156 000095C2 00                      	db	0			; NUL TERMINATED
 41157                                  
 41158                                  ; Table of IF conditionals
 41159                                  IFTAB:
 41160 000095C3 034E4F54                	db	3,"NOT"			; First byte is count
 41161 000095C7 [B30B]                  	dw	IFNOT
 41162 000095C9 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 41162 000095D2 454C               
 41163 000095D4 [720C]                  	dw	IFERLEV
 41164 000095D6 054558495354            	db	5,"EXIST"
 41165 000095DC [070C]                  	dw	IFEXISTS
 41166 000095DE 00                      	db	0
 41167                                  
 41168                                  ; Table for internal command names
 41169                                  COMTAB:
 41170 000095DF 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 41171 000095E4 [3711]                  	dw	CATALOG			; In TCMD1.ASM
 41172 000095E6 [DE94]                  	dw	DirHelpMsgs
 41173                                  
 41174 000095E8 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 41175 000095EE [E70C]                  	dw	_$CALL			; In TBATCH2.ASM
 41176 000095F0 [4895]                  	dw	CallHelpMsgs
 41177                                  
 41178 000095F2 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 41179 000095F8 [A725]                  	dw	CHCP			; In TCMD2B.ASM
 41180 000095FA [A894]                  	dw	ChcpHelpMsgs
 41181                                  
 41182 000095FC 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41183 00009604 [931F]                  	dw	CRENAME			; In TCMD1.ASM
 41184 00009606 [2295]                  	dw	RenHelpMsgs
 41185                                  
 41186 00009608 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41187 0000960D [931F]                  	dw	CRENAME			; In TCMD1.ASM
 41188 0000960F [2295]                  	dw	RenHelpMsgs
 41189                                  	
 41190 00009611 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 41191 00009618 [111F]                  	dw	ERASE			; In TCMD1.ASM
 41192 0000961A [D694]                  	dw	DelHelpMsgs
 41193                                  	
 41194 0000961C 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 41195 00009621 [111F]                  	dw	ERASE			; In TCMD1.ASM
 41196 00009623 [D694]                  	dw	DelHelpMsgs
 41197                                  	
 41198 00009625 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41199 0000962B [3A20]                  	dw	TYPEFIL			; In TCMD1.ASM
 41200 0000962D [3895]                  	dw	TypeHelpMsgs
 41201                                  	
 41202 0000962F 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 41203 00009634 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 41204 00009636 [4E95]                  	dw	RemHelpMsgs
 41205                                  	
 41206 00009638 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 41207 0000963E [663C]                  	dw	COPY			; In COPY.ASM
 41208 00009640 [BA94]                  	dw	CopyHelpMsgs
 41209                                  	
 41210 00009642 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 41211 00009649 [051F]                  	dw	PAUSE			; In TCMD1.ASM
 41212 0000964B [5295]                  	dw	PauseHelpMsgs
 41213                                  	
 41214 0000964D 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 41215 00009653 [E333]                  	dw	DATE			; In TPIPE.ASM
 41216 00009655 [D094]                  	dw	DateHelpMsgs
 41217                                  	
 41218 00009657 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 41219 0000965D [4234]                  	dw	CTIME			; In TPIPE.ASM
 41220 0000965F [3295]                  	dw	TimeHelpMsgs
 41221                                  	
 41222 00009661 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 41223 00009666 [5922]                  	dw	VERSION			; In TCMD2.ASM
 41224 00009668 [3C95]                  	dw	VerHelpMsgs
 41225                                  	
 41226 0000966A 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41227 0000966F [6121]                  	dw	VOLUME			; In TCMD1.ASM
 41228 00009671 [4495]                  	dw	VolHelpMsgs
 41229                                  	
 41230 00009673 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41231 00009677 [EA29]                  	dw	_$CHDIR			; In TENV.ASM
 41232 00009679 [AE94]                  	dw	CdHelpMsgs
 41233                                  	
 41234 0000967B 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41235 00009682 [EA29]                  	dw	_$CHDIR			; In TENV.ASM
 41236 00009684 [AE94]                  	dw	CdHelpMsgs
 41237                                  	
 41238 00009686 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41239 0000968A [4F2A]                  	dw	_$MKDIR			; In TENV.ASM
 41240 0000968C [FE94]                  	dw	MdHelpMsgs
 41241                                  	
 41242 0000968E 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41243 00009695 [4F2A]                  	dw	_$MKDIR			; In TENV.ASM
 41244 00009697 [FE94]                  	dw	MdHelpMsgs
 41245                                  	
 41246 00009699 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41247 0000969D [912A]                  	dw	_$RMDIR			; In TENV.ASM
 41248 0000969F [1E95]                  	dw	RdHelpMsgs
 41249                                  	
 41250 000096A1 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41251 000096A8 [912A]                  	dw	_$RMDIR			; In TENV.ASM
 41252 000096AA [1E95]                  	dw	RdHelpMsgs
 41253                                  	
 41254 000096AC 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 41255 000096B3 [633B]                  	dw	CNTRLC			; In TUCODE.ASM
 41256 000096B5 [A494]                  	dw	BreakHelpMsgs
 41257                                  	
 41258 000096B7 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 41259 000096BF [A53B]                  	dw	VERIFY			; In TUCODE.ASM
 41260 000096C1 [4095]                  	dw	VerifyHelpMsgs
 41261                                  	
 41262 000096C3 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 41263 000096C8 [5427]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 41264 000096CA [2A95]                  	dw	SetHelpMsgs
 41265                                  	
 41266 000096CC 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 41267 000096D4 [3A27]                  	dw	ADD_PROMPT		; In TENV.ASM
 41268 000096D6 [0A95]                  	dw	PromptHelpMsgs
 41269                                  	
 41270 000096D8 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 41271 000096DE [CB23]                  	dw	PATH			; In TCMD2.ASM
 41272 000096E0 [0295]                  	dw	PathHelpMsgs
 41273                                  	
 41274 000096E2 044558495400            	db	4,"EXIT",0
 41275 000096E8 [9C26]                  	dw	_$EXIT			; In TCMD2.ASM
 41276 000096EA [FA94]                  	dw	ExitHelpMsgs
 41277                                  	
 41278 000096EC 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 41279 000096F2 [0925]                  	dw	CTTY			; In TCMD2.ASM
 41280 000096F4 [CC94]                  	dw	CttyHelpMsgs
 41281                                  	
 41282 000096F6 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 41283 000096FC [2A3B]                  	dw	_ECHO			; In TUCODE.ASM
 41284 000096FE [5695]                  	dw	EchoHelpMsgs
 41285                                  	
 41286 00009700 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 41287 00009706 [1B0D]                  	dw	_GOTO			; In TBATCH.ASM
 41288 00009708 [5C95]                  	dw	GotoHelpMsgs
 41289                                  	
 41290 0000970A 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 41291 00009711 [A00C]                  	dw	_SHIFT			; In TBATCH.ASM
 41292 00009713 [6295]                  	dw	ShiftHelpMsgs
 41293                                  	
 41294 00009715 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 41295 00009719 [4C0B]                  	dw	_$IF			; In TBATCH.ASM
 41296 0000971B [6695]                  	dw	IfHelpMsgs
 41297                                  	
 41298 0000971D 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 41299 00009722 [D00F]                  	dw	_$FOR			; In TBATCH.ASM
 41300 00009724 [7695]                  	dw	ForHelpMsgs
 41301                                  	
 41302 00009726 03434C5300              	db	3,"CLS",0
 41303 0000972B [7024]                  	dw	CLS			; In TCMD2.ASM
 41304 0000972D [B694]                  	dw	ClsHelpMsgs
 41305                                  	
 41306 0000972F 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 41306 00009738 03                 
 41307 00009739 [2526]                  	dw	TRUENAME		;AN000;
 41308 0000973B [8095]                  	dw	TruenameHelpMsgs
 41309                                  	
 41310 0000973D 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 41310 00009746 02                 
 41311 00009747 [0163]                  	dw	LoadHigh		; In loadhi.asm ; M003
 41312 00009749 [8495]                  	dw	LoadhighHelpMsgs	; M003
 41313                                  	
 41314 0000974B 024C4802                	db	2,"LH",fSwitchAllowed ; 2 ; Short form; M003
 41315 0000974F [0163]                  	dw	LoadHigh		; In loadhi.asm ; M003
 41316 00009751 [8495]                  	dw	LoadhighHelpMsgs	; M003
 41317                                  	
 41318 00009753 00                      	db	0			; Terminate command table
 41319                                  
 41320                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 41321                                  
 41322 00009754 2E434F4D                comext:	db	".COM"
 41323 00009758 2E455845                exeext:	db	".EXE"
 41324 0000975C 2E424154                batext:	db	".BAT"
 41325                                  
 41326                                  switch_list:
 41327                                  	; MSDOS 5.0 (& 6.0) COMMAND.COM
 41328                                  	;db	"?VBAPW"		; flags we can recognize
 41329                                  	; 18/06/2023
 41330                                  	; MSDOS 6.22 COMMAND.COM
 41331 00009760 2D593F5642415057        	db	"-Y?VBAPW"
 41332                                  
 41333                                  AttrLtrs:
 41334 00009768 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 41335                                  
 41336                                  ;	Attribute letters in AttrLtrs must appear in the order that
 41337                                  ;	attribute bits occur in the attribute byte returned by
 41338                                  ;	directory searches, starting with bit 0.
 41339                                  ;	The volume label attribute is lowercased to keep it from
 41340                                  ;	being matched (by an uppercase comparison).
 41341                                  
 41342                                  OrderLtrs:
 41343                                  	; MSDOS 5.0
 41344                                  	;db	"NEDSG"			; sort order letters for DIR
 41345                                  	; 18/06/2023
 41346                                  	; MSDOS 6.0 COMMAND.COM
 41347 0000976E 4E4544534743            	db	"NEDSGC"		; sort order letters for DIR
 41348                                  
 41349                                  ;	Sort order letters stand for file name, extension,
 41350                                  ;	date/time, size, grouped (directory files before others),
 41351                                  ;	and compression ratio. DIR routines rely on the specific
 41352                                  ;	order of the letters in this list.
 41353                                  
 41354                                  comspec_flag:
 41355 00009774 00                      	db	0                       ;AN071;
 41356                                  
 41357                                  BATBUFLEN:
 41358 00009775 2000                    	dw	BatLen ; 32
 41359                                  
 41360                                  ; *****************************************************
 41361                                  ; EMG 4.00
 41362                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 41363                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 41364                                  ; *****************************************************
 41365                                  
 41366                                  ; COMMON PARSE BLOCKS
 41367                                  
 41368                                  ; Indicates no value list for PARSE.
 41369                                  
 41370                                  NO_VALUES:
 41371 00009777 0000                    	dw	0			;AN000;  no values
 41372                                  
 41373                                  NULL_VALUE_LIST:  ; for unvalidated value
 41374 00009779 00                       	db	0                       ; no value lists
 41375                                  
 41376                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41377                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 41378                                  
 41379                                  ; PARSE control block for a required file specification (upper cased)
 41380                                  
 41381                                  FILE_REQUIRED:
 41382 0000977A 0002                    	dw	0200h			;AN000;  filespec - required
 41383 0000977C 0100                    	dw	1			;AN000;  capitalize - file table
 41384 0000977E [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41385 00009780 [7797]                  	dw	NO_VALUES		;AN000;
 41386 00009782 00                      	db	0			;AN000;  no keywords
 41387                                  
 41388                                  ; PARSE control block for an optional file specification (upper cased)
 41389                                  ; or drive number
 41390                                  
 41391                                  FILE_OPTIONAL:
 41392 00009783 0103                    	dw	0301h			;AN000;  filespec or drive number
 41393                                  					;	 optional
 41394 00009785 0100                    	dw	1			;AN000;  capitalize - file table
 41395 00009787 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41396 00009789 [7797]                  	dw	NO_VALUES		;AN000;
 41397 0000978B 00                      	db	0			;AN000;  no keywords
 41398                                  
 41399                                  ; PARSE control block for an optional file specification (upper cased)
 41400                                  
 41401                                  FILE_OPTIONAL2:
 41402 0000978C 0102                    	dw	0201h                   ;AN000;  filespec optional
 41403 0000978E 0100                    	dw	1                       ;AN000;  capitalize - file table
 41404 00009790 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41405 00009792 [7797]                  	dw	NO_VALUES		;AN000;
 41406 00009794 00                      	db	0			;AN000;  no keywords
 41407                                  
 41408                                  ; PARSE control block for an optional /P switch
 41409                                  
 41410                                  SLASH_P_SWITCH:
 41411 00009795 0000                    	dw	0			;AN000;  no match flags
 41412 00009797 0200                    	dw	2			;AN000;  capitalize - char table
 41413 00009799 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41414 0000979B [7797]                  	dw	NO_VALUES		;AN000;
 41415 0000979D 01                      	db	1			;AN000;  1 keyword
 41416                                  SLASH_P_SYN:
 41417 0000979E 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 41418                                  
 41419                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 41420                                  
 41421                                  ; The following parse control block can be used for any command which
 41422                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 41423                                  ; the equal sign as an additional delimiter. Returns verified result
 41424                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 41425                                  ; internal commands.
 41426                                  
 41427                                  PARSE_BREAK:
 41428 000097A1 [A497]                  	dw	BREAK_PARMS		;AN000;
 41429 000097A3 00                      	db	0			;AN032; no extra delimiter
 41430                                  
 41431                                  BREAK_PARMS:
 41432 000097A4 0001                    	db	0,1			;AN000;  1 positional parm
 41433 000097A6 [AA97]                  	dw	BREAK_CONTROL1		;AN000;
 41434 000097A8 00                      	db	0			;AN000;  no switches
 41435 000097A9 00                      	db	0			;AN000;  no keywords
 41436                                  
 41437                                  BREAK_CONTROL1:
 41438 000097AA 0120                    	dw	2001h			;AN000;  string value - optional
 41439 000097AC 0200                    	dw	2			;AN000;  capitalize - char table
 41440 000097AE [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41441 000097B0 [B397]                  	dw	BREAK_VALUES		;AN000;
 41442 000097B2 00                      	db	0			;AN000;  no keywords
 41443                                  
 41444                                  BREAK_VALUES:
 41445 000097B3 03                      	db	3			;AN000;
 41446 000097B4 00                      	db	0			;AN000;  no ranges
 41447 000097B5 00                      	db	0			;AN000;  no numeric values
 41448 000097B6 02                      	db	2			;AN000;  2 string values
 41449 000097B7 00                      	db	0			;AN000;  returned if ON
 41450 000097B8 [BD97]                  	dw	BREAK_ON		;AN000;  point to ON string
 41451 000097BA 66                      	db	'f'                     ;AN000;  returned if OFF
 41452 000097BB [C097]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 41453                                  
 41454                                  BREAK_ON:
 41455 000097BD 4F4E00                  	db	"ON",0                  ;AN000;
 41456                                  BREAK_OFF:
 41457 000097C0 4F464600                	db	"OFF",0                 ;AN000;
 41458                                  
 41459                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41460                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 41461                                  
 41462                                  ; PARSE BLOCK FOR CHCP
 41463                                  
 41464                                  ; The following parse control block can be used for any command which
 41465                                  ; needs only one optional three digit decimal parameter for operands.
 41466                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 41467                                  ; CHCP internal command.
 41468                                  
 41469                                  CHCP_MINVAL	EQU	100			;AN000;
 41470                                  CHCP_MAXVAL	EQU	999			;AN000;
 41471                                  
 41472                                  PARSE_CHCP:
 41473 000097C4 [C797]                  	dw	CHCP_PARMS			;AN000;
 41474 000097C6 00                      	db	0				;AN000;  no extra delimiter
 41475                                  CHCP_PARMS:
 41476 000097C7 0001                    	db	0,1				;AN000;  1 positional parm
 41477 000097C9 [CD97]                  	dw	CHCP_CONTROL1			;AN000;
 41478 000097CB 00                      	db	0				;AN000;  no switches
 41479 000097CC 00                      	db	0				;AN000;  no keywords
 41480                                  
 41481                                  CHCP_CONTROL1:
 41482 000097CD 0180                    	dw	8001h				;AN000;  numeric value - optional
 41483 000097CF 0000                    	dw	0				;AN000;  no function flags
 41484 000097D1 [E1A9]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 41485 000097D3 [D697]                  	dw	CHCP_VALUES			;AN000;
 41486 000097D5 00                      	db	0				;AN000;  no keywords
 41487                                  
 41488                                  CHCP_VALUES:
 41489 000097D6 01                      	db	1				;AN000;
 41490 000097D7 01                      	db	1				;AN000;  1 range
 41491 000097D8 01                      	db	1				;AN000;  returned if result
 41492 000097D9 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 41493 000097E1 00                      	db	0				;AN000;  no numeric values
 41494 000097E2 00                      	db	0				;AN000;  no string values
 41495                                  
 41496                                  ; PARSE BLOCK FOR DATE
 41497                                  
 41498                                  ; The following parse control block can be used for any command which
 41499                                  ; needs only an optional date string as an operand. Returns unverified
 41500                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 41501                                  
 41502                                  PARSE_DATE:
 41503 000097E3 [E697]                  	dw	DATE_PARMS			;AN000;
 41504 000097E5 00                      	db	0				;AN000;  no extra delimiter
 41505                                  DATE_PARMS:
 41506 000097E6 0001                    	db	0,1				;AN000;  1 positional parm
 41507 000097E8 [EC97]                  	dw	DATE_CONTROL1			;AN000;
 41508 000097EA 00                      	db	0				;AN000;  no switches
 41509 000097EB 00                      	db	0				;AN000;  no keywords
 41510                                  
 41511                                  DATE_CONTROL1:
 41512 000097EC 0110                    	dw	1001h				;AN000;  date - optional
 41513 000097EE 0000                    	dw	0				;AN000;  no function flags
 41514 000097F0 [E9A9]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 41515 000097F2 [7797]                  	dw	NO_VALUES			;AN000;
 41516 000097F4 00                      	db	0				;AN000;  no keywords
 41517                                  
 41518                                  ; PARSE BLOCK FOR TIME
 41519                                  
 41520                                  ; The following parse control block can be used for any command which
 41521                                  ; needs only an optional time string as an operand. Returns unverified
 41522                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 41523                                  
 41524                                  PARSE_TIME:
 41525 000097F5 [F897]                  	dw	TIME_PARMS			;AN000;
 41526 000097F7 00                      	db	0				;AN000;  no extra delimiter
 41527                                  TIME_PARMS:
 41528 000097F8 0001                    	db	0,1				;AN000;  1 positional parm
 41529 000097FA [FE97]                  	dw	TIME_CONTROL1			;AN000;
 41530 000097FC 00                      	db	0				;AN000;  no switches
 41531 000097FD 00                      	db	0				;AN000;  no keywords
 41532                                  
 41533                                  TIME_CONTROL1:
 41534 000097FE 0108                    	dw	0801h				;AN000;  TIME - optional
 41535 00009800 0000                    	dw	0				;AN000;  no function flags
 41536 00009802 [F1A9]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 41537 00009804 [7797]                  	dw	NO_VALUES			;AN000;
 41538 00009806 00                      	db	0				;AN000;  no keywords
 41539                                  
 41540                                  ; PARSE BLOCK FOR VOL
 41541                                  
 41542                                  ; The following parse control block can be used for any command which
 41543                                  ; needs only an optional drive letter as an operand.  Returns unverified
 41544                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 41545                                  ; internal command.
 41546                                  
 41547                                  PARSE_VOL:
 41548 00009807 [0A98]                  	dw	VOL_PARMS			;AN000;
 41549 00009809 00                      	db	0				;AN000;  no extra delimiter
 41550                                  VOL_PARMS:
 41551 0000980A 0001                    	db	0,1				;AN000;  1 positional parm
 41552 0000980C [1098]                  	dw	DRIVE_CONTROL1			;AN000;
 41553 0000980E 00                      	db	0				;AN000;  no switches
 41554 0000980F 00                      	db	0				;AN000;  no keywords
 41555                                  
 41556                                  DRIVE_CONTROL1:
 41557 00009810 0101                    	dw	0101h				;AN000;  DRIVE - optional
 41558 00009812 0100                    	dw	1				;AN000;  capitalize - file table
 41559 00009814 [F9A9]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 41560 00009816 [7797]                  	dw	NO_VALUES			;AN000;
 41561 00009818 00                      	db	0				;AN000;  no keywords
 41562                                  
 41563                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 41564                                  
 41565                                  ; The following parse control block can be used for any command which
 41566                                  ; needs only one required file specification as an operand. Returns a
 41567                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 41568                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 41569                                  
 41570                                  PARSE_MRDIR:
 41571 00009819 [1C98]                  	dw	MRDIR_PARMS			;AN000;
 41572 0000981B 00                      	db	0				;AN000;  no extra delimiter
 41573                                  MRDIR_PARMS:
 41574 0000981C 0101                    	db	1,1				;AN000;  1 positional parm
 41575 0000981E [7A97]                  	dw	FILE_REQUIRED			;AN000;
 41576 00009820 00                      	db	0				;AN000;  no switches
 41577 00009821 00                      	db	0				;AN000;  no keywords
 41578                                  
 41579                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 41580                                  
 41581                                  ; The following parse control block can be used for any command which
 41582                                  ; needs only one optional file specification an operand. Returns a
 41583                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 41584                                  ; for the CHDIR and TRUENAME internal commands.
 41585                                  
 41586                                  PARSE_CHDIR:
 41587 00009822 [2598]                  	dw	CHDIR_PARMS			;AN000;
 41588 00009824 00                      	db	0				;AN000;  no extra delimiter
 41589                                  CHDIR_PARMS:
 41590 00009825 0001                    	db	0,1				;AN000;  1 positional parm
 41591 00009827 [8397]                  	dw	FILE_OPTIONAL			;AN000;
 41592 00009829 00                      	db	0				;AN000;  no switches
 41593 0000982A 00                      	db	0				;AN000;  no keywords
 41594                                  
 41595                                  ; PARSE BLOCK FOR ERASE
 41596                                  
 41597                                  ; The following parse control block is used for the DEL/ERASE internal
 41598                                  ; commands. This command has one required file specification and an
 41599                                  ; optional switch (/p) as operands. The verified switch or unverified
 41600                                  ; file specification is returned in PARSE1_OUTPUT.
 41601                                  
 41602                                  PARSE_ERASE:
 41603 0000982B [2E98]                  	dw	ERASE_PARMS			;AN000;
 41604 0000982D 00                      	db	0				;AN000;  no extra delimiter
 41605                                  
 41606                                  ERASE_PARMS:
 41607 0000982E 0101                    	db	1,1				;AN000;  1 positional parm
 41608 00009830 [7A97]                  	dw	FILE_REQUIRED			;AN000;
 41609 00009832 01                      	db	1				;AN000;  1 switch
 41610 00009833 [9597]                  	dw	SLASH_P_SWITCH			;AN000;
 41611 00009835 00                      	db	0				;AN000;  no keywords
 41612                                  
 41613                                  ; PARSE BLOCK FOR DIR
 41614                                  
 41615                                  ; The following parse control block is used for the DIR internal command.
 41616                                  ; This command has one optional file specification and several optional
 41617                                  ; switches. Switches, switch values, and the filespec are returned in 
 41618                                  ; PARSE1_OUTPUT.
 41619                                  ;
 41620                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 41621                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 41622                                  ; do not require colons, and are not checked against a value list.
 41623                                  ;
 41624                                  ; Switch /h has been removed from the DIR command	;M008
 41625                                  ; Switch /? is no longer handled internally		;M008
 41626                                  ;
 41627                                  ; A list of pointers to all the switch synonyms is provided here to
 41628                                  ; help identify which switch has been matched.
 41629                                  
 41630                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 41631                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 41632                                  
 41633                                  PARSE_DIR:
 41634 00009836 [3998]                  	dw	DIR_PARMS
 41635 00009838 00                      	db	0			; no extra delimiters
 41636                                  DIR_PARMS:
 41637 00009839 0001                    	db	0,1			; 1 optional positional param
 41638 0000983B [8C97]                  	dw	FILE_OPTIONAL2
 41639 0000983D 02                      	db	2			; 2 kinds of switches
 41640 0000983E [4398]                  	dw	DIR_SW_VALUED
 41641 00009840 [5598]                  	dw	DIR_SW_UNVALUED
 41642 00009842 00                      	db	0			; no keywords
 41643                                  
 41644                                  DIR_SW_VALUED:
 41645 00009843 0120                    	dw	2001h			; optional string value
 41646 00009845 2100                    	dw	21h			; optional colon; capitalize 
 41647 00009847 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41648 00009849 [7997]                  	dw	NULL_VALUE_LIST		; don't validate value
 41649                                  
 41650                                  	; 18/06/2023
 41651                                  	;db	2
 41652                                  
 41653                                  ; MSDOS 6.0 COMMAND.COM
 41654                                  ;ifdef DBLSPACE_HOOKS
 41655                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41656 0000984B 03                      	db	3		; 3 'synonyms'
 41657                                  ;else
 41658                                  ;	db	2		; 2 'synonyms'
 41659                                  ;endif
 41660                                  
 41661                                  DIR_SW_A:
 41662 0000984C 2F4100                  	db	"/A",0
 41663                                  DIR_SW_O:
 41664 0000984F 2F4F00                  	db	"/O",0
 41665                                  
 41666                                  ; MSDOS 6.0 COMMAND.COM
 41667                                  ;ifdef DBLSPACE_HOOKS
 41668                                  	; 18/06/2023
 41669                                  DIR_SW_C:
 41670 00009852 2F4300                  	db	"/C",0
 41671                                  ;endif
 41672                                  
 41673                                  DIR_SW_UNVALUED:
 41674 00009855 0000                    	dw	0			; no value
 41675 00009857 0000                    	dw	0			; no format functions
 41676 00009859 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41677 0000985B [7797]                  	dw	NO_VALUES
 41678                                  
 41679                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 41680                                  	;;db	12
 41681                                  	
 41682                                  	; 18/06/2023
 41683                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 41684                                  	;db	14		; 14 'synonyms' !?
 41685                                  
 41686                                  ; MSDOS 6.0 COMMAND.COM
 41687                                  ;ifdef DBLSPACE_HOOKS
 41688                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41689                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DB0h
 41690 0000985D 0D                      	db	13		; 13 'synonyms'
 41691                                  ;else
 41692                                  ;	db	12		; 12 'synonyms'
 41693                                  ;endif
 41694                                  
 41695                                  DIR_SW_NEG_A:
 41696 0000985E 2F2D4100                	db	"/-A",0
 41697                                  DIR_SW_NEG_O:
 41698 00009862 2F2D4F00                	db	"/-O",0
 41699                                  DIR_SW_S:
 41700 00009866 2F5300                  	db	"/S",0
 41701                                  DIR_SW_NEG_S:
 41702 00009869 2F2D5300                	db	"/-S",0
 41703                                  DIR_SW_B:
 41704 0000986D 2F4200                  	db	"/B",0
 41705                                  DIR_SW_NEG_B:
 41706 00009870 2F2D4200                	db	"/-B",0
 41707                                  DIR_SW_W:
 41708 00009874 2F5700                  	db	"/W",0
 41709                                  DIR_SW_NEG_W:
 41710 00009877 2F2D5700                	db	"/-W",0
 41711                                  DIR_SW_P:
 41712 0000987B 2F5000                  	db	"/P",0
 41713                                  DIR_SW_NEG_P:
 41714 0000987E 2F2D5000                	db	"/-P",0
 41715                                  DIR_SW_L:
 41716 00009882 2F4C00                  	db	"/L",0		;M010
 41717                                  DIR_SW_NEG_L:
 41718 00009885 2F2D4C00                	db	"/-L",0 	;M010
 41719                                  
 41720                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41721                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 41722                                  DIR_SW_NEG_C:
 41723 00009889 2F2D4300                	db	"/-C",0
 41724                                  
 41725                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 41726                                  ; identification. Order is critical - DIR routines rely on the
 41727                                  ; specific order in this list. Negated options appear at odd 
 41728                                  ; positions in the list, and simple on/off options appear first.
 41729                                  
 41730                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41731                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DE0h
 41732                                  Dir_Sw_Ptrs:			; list of ptrs to switch synonyms
 41733                                  	; 18/06/2023
 41734                                  	; MSDOS 6.0 COMMAND.COM ; *
 41735 0000988D [8998]                  	dw	DIR_SW_NEG_C	; * 
 41736                                  Dir_Sw_Ptrs_2:
 41737 0000988F [5298]                  	dw	DIR_SW_C	; *
 41738                                  	; MSDOS 5.0 COMMAND.COM	
 41739                                  ;Dir_Sw_Ptrs:
 41740 00009891 [7798]                  	dw	DIR_SW_NEG_W
 41741                                  ;Dir_Sw_Ptrs_2:
 41742 00009893 [7498]                  	dw	DIR_SW_W
 41743 00009895 [7E98]                  	dw	DIR_SW_NEG_P
 41744 00009897 [7B98]                  	dw	DIR_SW_P
 41745 00009899 [6998]                  	dw	DIR_SW_NEG_S
 41746 0000989B [6698]                  	dw	DIR_SW_S
 41747 0000989D [7098]                  	dw	DIR_SW_NEG_B
 41748 0000989F [6D98]                  	dw	DIR_SW_B
 41749 000098A1 [8598]                  	dw	DIR_SW_NEG_L	;M010
 41750 000098A3 [8298]                  	dw	DIR_SW_L	;M010
 41751 000098A5 [6298]                  	dw	DIR_SW_NEG_O
 41752 000098A7 [4F98]                  	dw	DIR_SW_O
 41753 000098A9 [5E98]                  	dw	DIR_SW_NEG_A
 41754 000098AB [4C98]                  	dw	DIR_SW_A
 41755                                  
 41756                                  ; PARSE BLOCK FOR RENAME
 41757                                  
 41758                                  ; The following parse control block can be used for any command which
 41759                                  ; needs only two required file specifications as operands. Returns
 41760                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 41761                                  ; Currently used for the RENAME internal command.
 41762                                  
 41763                                  PARSE_RENAME:
 41764 000098AD [B098]                  	dw	RENAME_PARMS		;AN000;
 41765 000098AF 00                      	db	0			;AN000;  no extra delimiter
 41766                                  RENAME_PARMS:
 41767 000098B0 0202                    	db	2,2			;AN000;  2 positional parms
 41768 000098B2 [7A97]                  	dw	FILE_REQUIRED		;AN000;
 41769 000098B4 [7A97]                  	dw	FILE_REQUIRED		;AN000;
 41770 000098B6 00                      	db	0			;AN000;  no switches
 41771 000098B7 00                      	db	0			;AN000;  no keywords
 41772                                  
 41773                                  ; PARSE BLOCK FOR CTTY
 41774                                  
 41775                                  ; The following parse control block can be used for any command which
 41776                                  ; needs one required device name as an operand. Returns a pointer to
 41777                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 41778                                  ; internal command.
 41779                                  
 41780                                  PARSE_CTTY:
 41781 000098B8 [BB98]                  	dw	CTTY_PARMS		;AN000;
 41782 000098BA 00                      	db	0			;AN000;  no extra delimiter
 41783                                  CTTY_PARMS:
 41784 000098BB 0101                    	db	1,1			;AN000;  1 positional parm
 41785 000098BD [C198]                  	dw	CTTY_CONTROL1		;AN000;
 41786 000098BF 00                      	db	0			;AN000;  no switches
 41787 000098C0 00                      	db	0			;AN000;  no keywords
 41788                                  CTTY_CONTROL1:
 41789 000098C1 0020                    	dw	2000h			;AN000;  string value - required
 41790 000098C3 1100                    	dw	11h			;AN000;  capitalize - file table
 41791                                  					;AN000;  remove colon at end
 41792 000098C5 [E1A9]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41793 000098C7 [7797]                  	dw	NO_VALUES		;AN000;
 41794 000098C9 00                      	db	0			;AN000;  no keywords
 41795                                  
 41796                                  ; PARSE BLOCK FOR VER
 41797                                  
 41798                                  ; The following parse control block can be used for any command which
 41799                                  ; needs an optional switch "/debug". Currently used for the VER command.
 41800                                  
 41801                                  PARSE_VER:
 41802 000098CA [CD98]                  	dw	VER_PARMS
 41803 000098CC 00                      	db	0			; no extra delimiters
 41804                                  VER_PARMS:
 41805 000098CD 0000                    	db	0,0			; no positional parameters
 41806                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41807                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 41808                                  	db	1			; one switch
 41809                                  	dw	SLASH_R
 41810                                  %else
 41811                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 41812 000098CF 02                      	db	2			; two switches
 41813 000098D0 [D598]                  	dw	SLASH_R
 41814 000098D2 [E198]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 41815                                  %endif
 41816 000098D4 00                      	db	0			; no keywords
 41817                                  SLASH_R:
 41818 000098D5 0000                    	dw	0			; no values
 41819 000098D7 0200                    	dw	2			; capitalize by filename table
 41820 000098D9 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41821 000098DB [7797]                  	dw	NO_VALUES		; no values
 41822 000098DD 01                      	db	1			; one synonym
 41823                                  SLASH_R_SYN:
 41824 000098DE 2F5200                  	db	"/R",0
 41825                                  
 41826                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41827                                  %if 1
 41828                                  SLASH_T:
 41829 000098E1 0000                    	dw	0			; no values
 41830 000098E3 0200                    	dw	2			; capitalize by filename table
 41831 000098E5 [E1A9]                  	dw	PARSE1_OUTPUT		; result buffer
 41832 000098E7 [7797]                  	dw	NO_VALUES		; no values
 41833 000098E9 01                      	db	1			; one synonym
 41834                                  SLASH_T_SYN:
 41835 000098EA 2F5400                  	db	"/T",0
 41836                                  %endif
 41837                                  
 41838                                  ; M003 ; Start of changes for LoadHigh support
 41839                                  
 41840                                  ;Parse Control Block for LOADHIGH command
 41841                                  
 41842                                  Parse_LoadHi:
 41843 000098ED [F098]                  	dw	LoadHi_Parms		;extended parm table
 41844 000098EF 00                      	db	0			;no extra delimiters
 41845                                  
 41846                                  LoadHi_Parms:
 41847 000098F0 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 41848 000098F2 [7A97]                  	dw	FILE_REQUIRED		;control struc for filename
 41849 000098F4 00                      	db	0			;no switches
 41850 000098F5 00                      	db	0			;no keywords
 41851                                  
 41852                                  ; M003 ; End of changes for LoadHigh support
 41853                                  
 41854                                  TempVarName:
 41855 000098F6 54454D503D00            	db	"TEMP=",0
 41856                                  
 41857                                  	; 16/04/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 41858                                  ;TRANDATAEND:		; TRANGROUP:88C2h
 41859                                  
 41860                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41861                                  copycmd:
 41862 000098FC 434F5059434D443D        	db 'COPYCMD='
 41863                                  sCVFRoot:
 41864 00009904 5C44424C5350414345-     	db '\DBLSPACE.'
 41864 0000990D 2E                 
 41865                                  
 41866                                  ; ---------------------------------------------------------------------------
 41867                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41868                                  %if 1
 41869 0000990E 0D0A                    RD4CMD_VER_MSG:	db 0Dh,0Ah
 41870 00009910 526574726F20444F53-     		db 'Retro DOS v4.2 COMMAND.COM'
 41870 00009919 2076342E3220434F4D-
 41870 00009922 4D414E442E434F4D   
 41871 0000992A 0D0A                    		db 0Dh,0Ah 
 41872 0000992C 32303234202D204572-     		db '2024 - Erdogan Tan'
 41872 00009935 646F67616E2054616E 
 41873 0000993E 0D0A                    		db 0Dh,0Ah
 41874 00009940 24                      		db '$'
 41875                                  %endif
 41876                                  ; ---------------------------------------------------------------------------
 41877                                  
 41878                                  	; 18/06/2023
 41879                                  	; MSDOS 6.22 COMMAND.COM
 41880                                  TRANDATAEND:		; TRANGROUP:9E53h
 41881                                  
 41882                                  ;============================================================================
 41883                                  ; PSDATA.INC, MSDOS 6.0, 1991
 41884                                  ;============================================================================
 41885                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41886                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41887                                  
 41888                                  ; 18/04/2023
 41889                                  TRANSPACESTART:
 41890                                  
 41891                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 41892                                  	
 41893                                  	; 18/06/2023
 41894                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9E53h
 41895                                  
 41896                                  ;********************** Local Data *************************************
 41897                                  
 41898                                  $P_ORDINAL:
 41899 00009941 0000                    	dw	0		;AN000; Operand ordinal save area
 41900                                  $P_RC:
 41901 00009943 0000                    	dw	0		;AN000; Return code from parser
 41902                                  $P_SI_Save:
 41903 00009945 0000                    	dw	0		;AN000; Pointer of command buffer
 41904                                  $P_DX:
 41905 00009947 0000                    	dw	0		;AN000; Return result buffer address
 41906                                  $P_Terminator:
 41907 00009949 00                      	db	0		;AN000; Terminator code (ASCII)
 41908                                  $P_DBCSEV_OFF:
 41909 0000994A 0000                    	dw	0		;AN000; Offset of DBCS EV
 41910                                  $P_DBCSEV_SEG:
 41911 0000994C 0000                    	dw	0		;AN000; Segment of DBCS EV
 41912                                  $P_Flags:			;AN000; Parser internal flags
 41913                                  $P_Flags1:
 41914 0000994E 00                      	db	0		;AN038; to reference first byte flags
 41915                                  $P_Flags2:
 41916 0000994F 00                      	db	0		;AN038; to reference second byte flags only
 41917                                  $P_SaveSI_Cmpx:
 41918 00009950 0000                    	dw	0		;AN000; save si for later use by complex
 41919                                  $P_KEYorSW_Ptr:
 41920 00009952 0000                    	dw	0		;AN000; points next to "=" or ":" code
 41921                                  $P_Save_EOB:
 41922 00009954 0000                    	dw	0		;AN000; save pointer to EOB
 41923                                  $P_Found_SYNONYM:
 41924 00009956 0000                    	dw	0		;AN000; es:@ points to found synonym
 41925                                  $P_STRING_BUF:
 41926 00009958 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 41927                                  $P_ORIG_ORD:
 41928 000099D8 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 41929                                  $P_ORIG_STACK:
 41930 000099DA 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 41931                                  $P_ORIG_SI:
 41932 000099DC 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 41933                                  $P_Got_Time:
 41934 000099DE 00                      	db	0		;AN023; if 1, use Time delimiters
 41935                                  $P_Country_Info:
 41936 000099DF FFFF                    	dw	-1 ; 0FFFFh
 41937 000099E1 00<rep 20h>             	times	32 db 0	
 41938                                  $P_1st_Val:
 41939 00009A01 0000                    	dw	0		;AN000; used when process date or time
 41940                                  $P_2nd_Val:
 41941 00009A03 0000                    	dw	0		;AN000; used when process date or time
 41942                                  $P_3rd_Val:
 41943 00009A05 0000                    	dw	0		;AN000; used when process date or time
 41944                                  $P_4th_Val:
 41945 00009A07 0000                    	dw	0		;AN000; used when process date or time
 41946                                  $P_Char_CAP_Ptr:
 41947 00009A09 FF                      	db	0FFh		;AN000; info id
 41948 00009A0A 0000                    	dw	0		;AN000; offset	of char case map table
 41949 00009A0C 0000                    	dw	0		;AN000; segment of char case map table
 41950                                  $P_File_CAP_Ptr:
 41951 00009A0E FF                      	db	0FFh		;AN000; info id
 41952 00009A0F 0000                    	dw	0		;AN000; offset	of file case map table
 41953 00009A11 0000                    	dw	0		;AN000; segment of file case map table
 41954                                  
 41955                                  	; 18/04/2023
 41956                                  ;M029
 41957                                  ;!!!WARNING!!!
 41958                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 41959                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 41960                                  ;changes need to be made in SYSPARSE
 41961                                  
 41962                                  $P_FileSp_Char:
 41963 00009A13 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 41964                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 41965                                  
 41966                                  ;filespec error flag
 41967                                  $P_err_flag:
 41968 00009A1C 00                      	db	0		;AN033; flag set if filespec parsing error
 41969                                  				;AN033;  was detected.
 41970                                  
 41971                                  ;============================================================================
 41972                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 41973                                  ;============================================================================
 41974                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41975                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41976                                  
 41977                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 41978                                  
 41979                                  	; 18/06/2023
 41980                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9F2Fh
 41981                                  
 41982                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41983                                  ;;
 41984                                  ;; STRUCTURE: $M_RES_ADDRS
 41985                                  ;;
 41986                                  ;; Resident data area definition of variables
 41987                                  ;;
 41988                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41989                                  
 41990                                  $M_RT:
 41991 00009A1D 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 41992                                  
 41993                                  ;============================================================================
 41994                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 41995                                  ;============================================================================
 41996                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41997                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41998                                  
 41999                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 42000                                  ; ---------------------------------------------------------------------------
 42001                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 42002                                  ;;M031 - changed copyright to 1991
 42003                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 42004                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 42005                                  ;;B49,50 - changed version to 6 and copyright to 1993
 42006                                  ; ---------------------------------------------------------------------------
 42007                                  	
 42008                                  	; 18/06/2023
 42009                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9FBCh
 42010                                  ;ifdef USA
 42011                                  MsDosVer6_CCopy:
 42012                                  	; MSDOS 6.0
 42013                                  	;db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 42014                                  	; 18/06/2023
 42015                                  	; MSDOS 6.22
 42016 00009AAA 4D5320444F53205665-     	db	"MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp "
 42016 00009AB3 7273696F6E20362028-
 42016 00009ABC 4329436F7079726967-
 42016 00009AC5 687420313938312D31-
 42016 00009ACE 393934204D6963726F-
 42016 00009AD7 736F667420436F7270-
 42016 00009AE0 20                 
 42017 00009AE1 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 42017 00009AEA 4D6174657269616C20-
 42017 00009AF3 2D2050726F70657274-
 42017 00009AFC 79206F66204D696372-
 42017 00009B05 6F736F667420       
 42018 00009B0B 416C6C207269676874-     	db	"All rights reserved "
 42018 00009B14 732072657365727665-
 42018 00009B1D 6420               
 42019                                  ;endif
 42020                                  
 42021                                  ; ---------------------------------------------------------------------------
 42022                                  ; 18/06/2023
 42023                                  ; 15/04/2023
 42024                                  ;MsDosVer5_CCopy:
 42025                                  	;db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 42026                                  	;db	"Licensed Material - Property of Microsoft "
 42027                                  	;db	"All rights reserved "
 42028                                  ; ---------------------------------------------------------------------------
 42029                                  ; 15/04/2023
 42030                                  	; 16/04/2023 - 21/04/2023
 42031                                  	;db 	0
 42032                                  	;db	0Dh,0Ah
 42033                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 42034                                  	;db	0
 42035                                  	;db	'by Erdogan Tan - 05/05/2023'
 42036                                  	;db	0
 42037                                  
 42038                                  	; 19/06/2023
 42039                                  	; 18/06/2023
 42040                                  	;db 	0
 42041                                  	;db	0Dh,0Ah
 42042                                  	;db	'Retro DOS v4.2 COMMAND.COM '
 42043                                  	;db	0
 42044                                  	;db	'by Erdogan Tan - 19/6/2023'
 42045                                  	;db	0
 42046                                  
 42047                                  ;============================================================================
 42048                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 42049                                  ;============================================================================
 42050                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42051                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42052                                  
 42053                                  PRINTF_HANDLE:
 42054 00009B1F 0000                    	dw	0		;AC000;
 42055                                  
 42056                                  ;============================================================================
 42057                                  ; TSPC.ASM, MSDOS 6.0, 1991
 42058                                  ;============================================================================
 42059                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42060                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42061                                  
 42062                                  ;TITLE	COMMAND Transient Uninitialized DATA
 42063                                  
 42064                                  ;The TRANSPACE segment contains variable data that is considered
 42065                                  ;volatile between command cycles, and therefore is not included in the
 42066                                  ;transient checksum area. Contents of these variables MUST be
 42067                                  ;initialized before use, and must not be relied upon from command
 42068                                  ;cycle to command cycle.
 42069                                  ;
 42070                                  ;No constant data values should be stored here.
 42071                                  
 42072                                  ; ---------------------------------------------------------------------------
 42073                                  ; START OF UNITIALIZED DATA
 42074                                  ; ---------------------------------------------------------------------------
 42075                                  
 42076                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 42077                                  
 42078                                  	; 18/06/2023
 42079                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A033h
 42080                                  
 42081 00009B21 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 42082 00009B78 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 42083 00009BCF 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 42084 00009C52 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 42085 00009CD5 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 42086 00009D1B 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 42087 00009D9E 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 42088                                  
 42089                                  ; Variables passed up from resident	; in the Resident portion: (initial values)
 42090                                  HEADCALL:
 42091 00009DF1 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 42092 00009DF3 0000                    RESSEG:	dw 0			; MYSEG     (dw 0)
 42093 00009DF5 0000                    TPA:	dw 0			; LTPA	    (dw 0)
 42094                                  SWITCHAR:
 42095 00009DF7 00                      	db 0			; RSWITCHAR (db '-')
 42096                                  DIRCHAR:
 42097 00009DF8 00                      	db 0			; RDIRCHAR  (db '/')
 42098                                  EXEC_ADDR:
 42099 00009DF9 00000000                	dd 0			; 	    (dw EXT_EXEC)
 42100                                  				; MYSEG1    (dw 0)
 42101                                  RCH_ADDR:
 42102 00009DFD 00000000                	dd 0			;	    (dw TREMCHECK)
 42103                                  				; MYSEG2    (dw 0)
 42104                                  ; 14/08/2024 - PCDOS 7.1 COMMAND.COM
 42105                                  %if 0
 42106                                  	dw 0			; RESTEST   (dw 0)
 42107                                  %endif
 42108                                  
 42109                                  TRAN_TPA:
 42110 00009E01 0000                    	dw 0			; RES_TPA   (dw 0)
 42111                                  
 42112 00009E03 00                      CHKDRV:	db 0
 42113                                  IFNOTFLAG:
 42114                                  FILTYP:
 42115 00009E04 00                      RDEOF:	db 0			; Misc flags
 42116 00009E05 00                      CURDRV:	db 0
 42117                                  PARM1:
 42118 00009E06 00                      Concat:	db 0
 42119                                  PARM2:
 42120 00009E07 00                      ArgC:	db 0
 42121 00009E08 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 42122 00009E0A 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 42123                                  ARG2S:				; Switches after 2nd arg
 42124                                  DestSwitch:
 42125 00009E0C 0000                    	dw 0
 42126                                  ARGTS:
 42127                                  AllSwitch:
 42128 00009E0E 0000                    	dw 0			; ALL switches except for COMSW
 42129 00009E10 00                      CFLAG:	db 0
 42130                                  DestClosed:
 42131                                  SPECDRV:
 42132 00009E11 00                      	db 0
 42133 00009E12 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 42134                                  
 42135                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 42136                                  ;ifdef DBLSPACE_HOOKS
 42137                                  savBytCnt: ; MSDOS 6.0
 42138 00009E14 0000                    	dw 0
 42139                                  ;endif
 42140                                  	
 42141 00009E16 0000                    NXTADD:	dw 0
 42142                                  FRSTSRCH:
 42143 00009E18 00                      	db 0
 42144                                  ; 15/04/2023
 42145                                  LeftOnLine:
 42146 00009E19 00                      	db 0			; entries left on line u.b. DIR
 42147                                  PerLine:
 42148 00009E1A 00                      	db 0			; entries/line u.b. DIR
 42149                                  
 42150                                  ; 14/08/2024
 42151                                  %if 0
 42152                                  LINCNT:	db 0
 42153                                  LINLEN:	db 0
 42154                                  %endif
 42155                                  
 42156                                  LeftOnPage:
 42157 00009E1B 0000                    	dw 0			; lines left on page u.b. DIR
 42158                                  FileCnt:
 42159 00009E1D 0000                    	dw 0			; file count u.b. DIR
 42160                                  FileSiz:
 42161 00009E1F 00000000                	dd 0			; file size u.b. DIR
 42162                                  
 42163                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 42164                                  
 42165                                  FileCntTotal:
 42166 00009E23 00000000                	dd 0			; total file count u.b. DIR
 42167                                  FileSizTotal:
 42168 00009E27 00000000                	dd 0			; total file size u.b. DIR
 42169                                  
 42170                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 42171                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A33Fh
 42172                                  	; MSDOS 6.0
 42173                                  ;ifdef DBLSPACE_HOOKS
 42174                                  ccluUsed:
 42175 00009E2B 0000                    	dw 0			; count of DOS clusters used
 42176                                  ccluUsedDir:
 42177 00009E2D 0000                    	dw 0
 42178                                  ccluUsedTotal:
 42179 00009E2F 0000                    	dw 0
 42180                                  csecUsed:
 42181 00009E31 00000000                	dd 0			; count of comp sectors used
 42182                                  csecUsedDir:
 42183 00009E35 00000000                	dd 0
 42184                                  csecUsedTotal:
 42185 00009E39 00000000                	dd 0
 42186                                  
 42187                                  ; Note:  keep FileCntTotal through csecUsedTotal together!
 42188                                  
 42189                                  fhCVF:
 42190 00009E3D 0000                    	dw 0			; Compressed Volume File handle
 42191                                  szCVF:
 42192 00009E3F 00<rep 10h>             	times	16 db 0		; "X:\\12345678.123\0"
 42193                                  MDBPB:
 42194                                  	;MD_BPB	<>		; Extended MagicDrv BPB
 42195 00009E4F 00<rep 40h>             	times	64 db 0
 42196                                  csecPerCluster:
 42197 00009E8F 00                      	db 0			; sectors/cluster for ratio calc
 42198                                  fUseHostSize:
 42199 00009E90 00                      	db 0			; NZ if using host cluster size
 42200                                  cFATEntries:
 42201 00009E91 0000                    	dw 0			; # FAT entries in buffers
 42202                                  entInBuf:
 42203 00009E93 0000                    	dw 0			; 1st entry # in FAT buffers
 42204                                  segFATBuf:
 42205 00009E95 0000                    	dw 0			; seg of DOS & MD FAT buffers
 42206                                  pbufDOSFAT:
 42207 00009E97 0000                    	dw 0			; off of DOS FAT buffer
 42208                                  pbufMDFAT:
 42209 00009E99 0000                    	dw 0			; off of MD FAT buffer
 42210                                  bufDOSFAT:
 42211                                  	;times (cRES_FAT_ENTRIES*2) db 0
 42212 00009E9B 00<rep 40h>             	times 64 db 0	 	; small DOS FAT buffer
 42213                                  bufMDFAT:
 42214                                  	;times (cRES_FAT_ENTRIES*4) db 0
 42215 00009EDB 00<rep 80h>             	times 128 db 0		; small MD FAT buffer
 42216                                  ;endif
 42217                                  
 42218                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 42219                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A46Fh
 42220                                  CHARBUF:
 42221 00009F5B 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 42222                                  DESTFCB2:
 42223 00009FAB 00                      IDLEN:	db 0
 42224 00009FAC 00<rep 8h>              ID:	times	8  db 0
 42225 00009FB4 00<rep 3h>              COM:	times	3  db 0
 42226 00009FB7 00<rep 25h>             DEST:	times	37 db 0
 42227                                  DESTNAME:
 42228 00009FDC 00<rep Bh>              	times	11 db 0
 42229                                  DESTDIR:
 42230                                  DestFcb:
 42231 00009FE7 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 42232                                  GOTOLEN: ; word
 42233                                  BWDBUF:  ; byte
 42234                                  EXEFCB:  ; word
 42235 0000A02A 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 42236                                  
 42237                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 42238                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 42239                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 42240                                  DIRBUF_FDATE   equ DIRBUF+32  ; word
 42241                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 42242                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 42243                                  
 42244                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42245                                  
 42246                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42247                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A584h
 42248                                  SDIRBUF:
 42249 0000A070 00<rep Ch>              	times 12 db 0
 42250                                  _Bits:
 42251 0000A07C 0000                    	dw 0
 42252                                  PathCnt:
 42253 0000A07E 0000                    	dw 0
 42254                                  PathPos:
 42255 0000A080 0000                    	dw 0
 42256 0000A082 0000                    PathSw:	dw 0
 42257                                  AttrSpecified:
 42258 0000A084 00                      	db 0			; attribute bits u.b. DIR
 42259                                  AttrSelect:
 42260 0000A085 00                      	db 0			; attribute bits u.b. DIR
 42261 0000A086 00                      comma:	db 0			; flag set if +,, occurs
 42262                                  plus_comma:
 42263 0000A087 00                      	db 0			; flag set if +,, occurs
 42264                                  DirFlag:
 42265 0000A088 00                       	db 0			;AN015; set when pathcrunch called from DIR
 42266                                  parse_last:
 42267 0000A089 0000                    	dw 0			;AN018; used to hold parsing position
 42268                                  system_cpage:
 42269 0000A08B 0000                    	dw 0			;AC001; used for CHCP variable
 42270                                  ; 03/08/2024
 42271                                  ;Arg_Buf:
 42272                                  ;	times 128 db 0	
 42273                                  File_Size_Low:
 42274 0000A08D 0000                    	dw 0	
 42275                                  File_Size_High:
 42276 0000A08F 0000                    	dw 0		
 42277                                  string_ptr_2:
 42278 0000A091 0000                    	dw 0	
 42279                                  Copy_num:
 42280 0000A093 0000                    	dw 0
 42281                                  cpyflag:
 42282 0000A095 00                      	db 0
 42283                                  Dir_Num:
 42284 0000A096 0000                    	dw 0
 42285                                  
 42286                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42287                                  	; MSDOS 6.0
 42288                                  ;ifdef DBLSPACE_HOOKS
 42289                                  Dir_CRatio_1:
 42290 0000A098 00                      	db 0
 42291                                  Dir_CRatio_2:
 42292 0000A099 00                      	db 0
 42293                                  ;endif
 42294                                  
 42295                                  Bytes_Free:
 42296 0000A09A 00000000                	dd 0
 42297                                  
 42298                                  Major_Ver_Num:
 42299 0000A09E 0000                    	dw 0
 42300                                  Minor_Ver_Num:
 42301 0000A0A0 0000                    	dw 0
 42302                                  
 42303                                  One_Char_Val:
 42304 0000A0A2 00                      	db 0
 42305 0000A0A3 00                      	db 0
 42306                                  vol_drv:
 42307 0000A0A4 00                      	db 0
 42308                                  ROM_CALL:
 42309 0000A0A5 00                      	db 0			; flag for rom function
 42310 0000A0A6 0000                    ROM_IP:	dw 0
 42311 0000A0A8 0000                    ROM_CS:	dw 0
 42312                                  
 42313                                  DestVars:
 42314                                  DestIsDir:
 42315 0000A0AA 00                      	db 0
 42316                                  DestSiz:
 42317 0000A0AB 00                      	db 0
 42318                                  DestTail:
 42319 0000A0AC 0000                    	dw 0
 42320                                  DestInfo:
 42321 0000A0AE 00                      	db 0
 42322                                  DestBuf:
 42323 0000A0AF 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42324                                  EndDestBuf:
 42325                                  DESTHAND:
 42326 0000A106 0000                    	dw 0
 42327                                  DESTISDEV:
 42328 0000A108 00                      	db 0
 42329                                  FIRSTDEST:
 42330 0000A109 00                      	db 0
 42331                                  MELCOPY:
 42332 0000A10A 00                      	db 0
 42333                                  MELSTART:
 42334 0000A10B 0000                    	dw 0
 42335                                  SrcVars:
 42336                                  SrcIsDir:
 42337 0000A10D 00                      	db 0
 42338 0000A10E 00                      SrcSiz:	db 0
 42339                                  SrcTail:
 42340 0000A10F 0000                    	dw 0
 42341                                  SrcInfo:
 42342 0000A111 00                      	db 0
 42343                                  SrcBuf:
 42344 0000A112 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42345                                  SRCHAND:
 42346 0000A169 0000                    	dw 0
 42347                                  SRCISDEV:
 42348 0000A16B 00                      	db 0
 42349                                  ScanBuf:
 42350 0000A16C 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42351                                  
 42352 0000A1C3 0000                    SRCPT:	dw 0
 42353                                  INEXACT:
 42354 0000A1C5 00                      	db 0
 42355                                  NOWRITE:
 42356 0000A1C6 00                      	db 0
 42357                                  BINARY:
 42358 0000A1C7 00                      	db 0
 42359                                  WRITTEN:
 42360 0000A1C8 0000                    	dw 0
 42361                                  TERMREAD:
 42362 0000A1CA 00                      	db 0
 42363 0000A1CB 00                      ASCII:	db 0
 42364 0000A1CC 00                      PLUS:	db 0
 42365 0000A1CD 00                      objcnt:	db 0			; Used in copy
 42366 0000A1CE 0000                    CPDATE:	dw 0
 42367 0000A1D0 0000                    CPTIME:	dw 0
 42368                                  
 42369                                  OFilePtr_Lo:
 42370 0000A1D2 0000                    	dw 0			; original file ptr for COPY when
 42371                                  OFilePtr_Hi:
 42372 0000A1D4 0000                    	dw 0			; 1st source is also destination
 42373                                  zflag:	; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 42374 0000A1D6 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 42375                                  
 42376                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42377                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A76Bh
 42378                                  cox_sublist_buff:
 42379 0000A1D7 00<rep Bh>              	times 11 db 0
 42380                                  cox_y_override:
 42381 0000A1E2 00                      	db 0
 42382                                  cox_dest_file:
 42383 0000A1E3 00                      	db 0
 42384                                  cox_src_file:
 42385 0000A1E4 00                      	db 0
 42386                                  
 42387                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0A779h)
 42388                                  BATHAND:
 42389 0000A1E5 0000                    	dw 0			; Batch handle
 42390                                  STARTEL:
 42391 0000A1E7 0000                    	dw 0
 42392 0000A1E9 00                      ELCNT:	db 0
 42393 0000A1EA 00                      ELPOS:	db 0
 42394                                  
 42395                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 42396                                  ; MSDOS 5.0
 42397                                  SKPDEL:
 42398                                  	; 18/06/2023
 42399 0000A1EB 00                      	db 0	; MSDOS 6.22 (& MSDOS 5.0)
 42400 0000A1EC 00<rep Bh>              SOURCE:	times 11 db 0
 42401                                  
 42402                                  ext_entered:
 42403 0000A1F7 00                      	db 0			;AN005;
 42404                                  
 42405                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 42406                                  
 42407                                  Display_Ioctl:
 42408 0000A1F8 00                      	db 0			;AN000; info level
 42409 0000A1F9 00                      	db 0			;AN000; reserved
 42410 0000A1FA 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 42411 0000A1FC 0000                    	dw 0			;AN000; control flags
 42412                                  display_mode:
 42413 0000A1FE 00                      	db 0			;AN000; display mode, colors
 42414 0000A1FF 00                      	db 0			;AN000; reserved
 42415 0000A200 0000                    	dw 0			;AN023; colors
 42416 0000A202 0000                    	dw 0			;AN000; display width (PELS)
 42417 0000A204 0000                    	dw 0			;AN000; display length (PELS)
 42418                                  display_width:
 42419 0000A206 0000                    	dw 0			;AN000; display width
 42420                                  LinPerPag:
 42421 0000A208 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 42422                                  
 42423                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 42424 0000A20A 0000                    	dw 0			;AN000; info level
 42425                                  vol_serial:
 42426 0000A20C 00000000                	dd 0			;AN000; volume serial number
 42427                                  vol_label:
 42428 0000A210 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 42429 0000A21B 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 42430                                  
 42431                                  expand_star:
 42432 0000A223 00                      	db 0
 42433                                  
 42434                                  msg_flag:
 42435 0000A224 00                      	db 0			;AN022; flag set if non-utility message issued
 42436                                  Msg_Numb:
 42437 0000A225 0000                    	dw 0			;AN022; set with extended error message issued
 42438                                  append_exec:
 42439 0000A227 00                      	db 0			;AN041; set if internal append executed
 42440                                  print_err_flag:
 42441 0000A228 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 42442                                  subst_buffer:
 42443 0000A22A 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 42444                                  				;AN061;
 42445                                  ; 15/04/2023
 42446 0000A240 00                      KPARSE:	db 0	; 3/3/KK
 42447                                  
 42448                                  ; Data declarations taken out of parse.asm
 42449                                  
 42450                                  ; MSDOS 6.0
 42451                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 42452                                  ;argbufptr	dw	?		; index for argv[].argpointer
 42453                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 42454                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 42455                                  ;comptr		dw	?		; ptr into combuf
 42456                                  
 42457                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 42458                                  
 42459                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42460                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A7D5h
 42461                                  ARG:
 42462                                  ARG_ARGV:
 42463                                  ARGV0_ARGPOINTER:
 42464 0000A241 0000                    	dw 0	; ARGV[0]
 42465                                  ARGV0_ARG_FLAGS:
 42466 0000A243 00                      	db 0
 42467                                  ARGV0_ARGSTARTEL:
 42468 0000A244 0000                    	dw 0
 42469                                  ARGV0_ARGLEN:
 42470 0000A246 0000                    	dw 0
 42471                                  ARGV0_ARGSW_WORD:
 42472 0000A248 0000                    	dw 0
 42473                                  ARGV0_OCOMPTR:
 42474 0000A24A 0000                    	dw 0
 42475                                  ARGV1_ARGPOINTER:
 42476 0000A24C 0000                    	dw 0	; ARGV[1]
 42477 0000A24E 00<rep 5h>              	times 5 db 0
 42478                                  ARGV1_ARGSW_WORD:
 42479 0000A253 0000                    	dw 0
 42480 0000A255 0000                    	dw 0
 42481                                  ARGV2_ARGPOINTER:
 42482 0000A257 0000                    	dw 0	; ARGV[2]
 42483 0000A259 00<rep 5h>              	times 5 db 0
 42484                                  ARGV2_ARGSW_WORD:
 42485 0000A25E 0000                    	dw 0
 42486 0000A260 0000                    	dw 0
 42487 0000A262 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 42488                                  ARG_ARGVCNT:
 42489 0000A501 0000                    	dw 0
 42490                                  ARG_ARGSWINFO:
 42491 0000A503 0000                    	dw 0
 42492                                  ARG_ARGBUF:
 42493 0000A505 0000<rep 100h>          	times 256 dw 0	; times ARGBLEN dw 0 
 42494                                  ARG_ARGFORCOMBUF:
 42495 0000A705 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 42496                                  
 42497                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 42498                                  	; 18/06/2023
 42499                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0AD19h
 42500                                  ARGBUF_PTR:
 42501 0000A785 0000                    	dw 0			; index for argv[].argpointer
 42502                                  TPBUF:	;times 128 db 0		; temporary buffer
 42503                                  Arg_Buf:
 42504 0000A787 00<rep 80h>             	times 128 db 0	; 03/08/2024 (PCDOS 7.1 COMMAND.COM)
 42505                                  LASTARG:
 42506 0000A807 0000                    	dw 0			; point at which to accumulate switch info
 42507 0000A809 0000                    COMPTR:	dw 0			; ptr into combuf
 42508                                  
 42509                                  ; Data declarations taken out of path.asm
 42510                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 42511                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 42512                                  ;psep_char	DB	?		; '/' or '\'
 42513                                  ;search_best	DB	(?)		; best code, best filename so far
 42514                                  ;fname_max_len	equ	13
 42515                                  ;search_best_buf DB	fname_max_len DUP (?)
 42516                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 42517                                  ;search_error	DW	(?)		; address of error message to be printed
 42518                                  
 42519                                  FINDBUFLEN equ FIND_BUF.size ; 43
 42520                                  
 42521                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 42522                                  
 42523                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42524                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AD9Fh
 42525                                  
 42526 0000A80B 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 42527                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 42528                                  pathinfo:
 42529                                  ;pathinfo_0:
 42530 0000A836 0000                    	dw 0
 42531                                  ;pathinfo_2:
 42532 0000A838 0000                    	dw 0
 42533                                  ;pathinfo_4:
 42534 0000A83A 0000                    	dw 0
 42535                                  psep_char:
 42536 0000A83C 00                      	db 0
 42537                                  search_best:
 42538 0000A83D 00                      	db 0
 42539                                  FNAME_MAX_LEN equ 13
 42540                                  search_best_buf:
 42541 0000A83E 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 42542                                  search_curdir_buf:
 42543 0000A84B 00<rep 40h>             	times 64 db 0
 42544                                  search_error:
 42545 0000A88B 0000                    	dw 0
 42546                                  
 42547                                  ; Data declarations taken out of tbatch.asm
 42548                                  
 42549                                  ;if_not_count	DW	?
 42550                                  ;
 42551                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 42552                                  ;
 42553                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 42554                                  
 42555                                  ; 31/03/2023
 42556                                  ;STACK:	;LABEL	WORD
 42557                                  
 42558                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 42559                                  
 42560                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42561                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AE21h
 42562                                  
 42563                                  IF_NOT_COUNT:
 42564 0000A88D 0000                    	dw 0
 42565                                  ; 10/08/2024
 42566                                  ;zflag:	db 0
 42567                                  
 42568 0000A88F 90                      align 2 ; 18/06/2023
 42569                                  
 42570 0000A890 00<rep 100h>            	times 256 db 0
 42571                                  
 42572                                  	; 16/04/2023
 42573                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 42574                                  
 42575                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42576                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AF24h
 42577                                  STACK:
 42578                                  
 42579                                  ;INTERNATVARS	internat_block <>
 42580                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 42581                                  
 42582                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 42583                                  INTERNATVARS:
 42584                                  		; (24+8 = 32 bytes)
 42585                                  DATE_TIME_FORMAT:
 42586 0000A990 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 42587                                  CURRENCY_SYM:
 42588 0000A992 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 42589                                  THOUS_SEP:
 42590 0000A997 0000                    	db 0,0			; Thousands separator 2 bytes
 42591                                  DECIMAL_SEP:
 42592 0000A999 0000                    	db 0,0			; Decimal separator 2 bytes
 42593                                  DATE_SEP:
 42594 0000A99B 0000                    	db 0,0			; Date separator 2 bytes
 42595                                  TIME_SEP:
 42596 0000A99D 0000                    	db 0,0			; Time separator 2 bytes
 42597                                  BIT_FIELD:
 42598 0000A99F 00                      	db 0			; Bit values
 42599                                  				;   Bit 0 = 0 if currency symbol first
 42600                                  				;	  = 1 if currency symbol last
 42601                                  				;   Bit 1 = 0 if No space after currency symbol
 42602                                  				;	  = 1 if space after currency symbol
 42603                                  CURRENCY_CENTS:
 42604 0000A9A0 00                      	db 0			; Number of places after currency dec point
 42605                                  TIME_24:
 42606 0000A9A1 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 42607                                  MAP_CALL:
 42608 0000A9A2 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 42609                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 42610                                  				;  in pieces.
 42611                                  DATA_SEP:
 42612 0000A9A6 0000                    	db 0,0			; Data list separator character
 42613                                  
 42614 0000A9A8 00<rep 8h>              	times 8 db 0
 42615                                  
 42616                                  ; Max size of the block returned by the INTERNATIONAL call
 42617                                  
 42618                                  INTERNAT_BLOCK_SIZE EQU	32
 42619                                  
 42620                                  ;;	Buffer for DOS function 64h (Get extended country information)
 42621                                  ;;	subfunctions 2, 4, 6, or 7:
 42622                                  ;
 42623                                  ;CountryPtrInfo	label	byte
 42624                                  ;CountryPtrId	db	?
 42625                                  ;CountryPtr	dd	?
 42626                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 42627                                  	
 42628                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 42629                                  CountryPtrInfo:
 42630                                  CountryPtrId:	
 42631 0000A9B0 00                      	db 0
 42632                                  CountryPtr:
 42633 0000A9B1 00000000                	dd 0
 42634                                  
 42635                                  OldCtrlCHandler:
 42636 0000A9B5 00000000                	dd 0			; previous int 23 vector
 42637                                  
 42638                                  BATLEN equ 32
 42639                                  
 42640                                  BATBUFPOS:
 42641 0000A9B9 0000                    	dw 0			; integer position in buffer of next byte
 42642                                  
 42643 0000A9BB 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 42644                                  BATBUFEND:
 42645 0000A9DB 0000                    	dw 0
 42646                                  TypeFilSiz:
 42647 0000A9DD 00000000                	dd 0			; stores size of file to be typed
 42648                                  
 42649                                  ; *****************************************************
 42650                                  ; EMG 4.00
 42651                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 42652                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 42653                                  ; *****************************************************
 42654                                  ;
 42655                                  ; COMMON PARSE OUTPUT BLOCKS
 42656                                  
 42657                                  ; Common output blocks for PARSE number, complex, or string values.
 42658                                  
 42659                                  PARSE1_OUTPUT:
 42660                                  PARSE1_TYPE:
 42661 0000A9E1 00                      	db 0			;AN000;  type
 42662                                  PARSE1_CODE:
 42663 0000A9E2 00                      	db 0			;AN000;  return value
 42664                                  PARSE1_SYN:
 42665 0000A9E3 0000                    	dw 0			;AN000;  es offset of synonym
 42666                                  PARSE1_ADDR:
 42667 0000A9E5 00000000                	dd 0			;AN000;  numeric value / address
 42668                                  				;	 of string value
 42669                                  
 42670                                  ;  Common output block for PARSE date strings.
 42671                                  
 42672                                  DATE_OUTPUT:
 42673                                  DATE_TYPE:
 42674 0000A9E9 00                      	db 0			;AN000;  type
 42675 0000A9EA 00                      	db 0			;AN000;  return value
 42676 0000A9EB 0000                    	dw 0			;AN000;  es offset of synonym
 42677                                  DATE_YEAR:
 42678 0000A9ED 0000                    	dw 0			;AN000;  year
 42679                                  DATE_MONTH:
 42680 0000A9EF 00                      	db 0			;AN000;  month
 42681                                  DATE_DAY:
 42682 0000A9F0 00                      	db 0			;AN000;  day
 42683                                  
 42684                                  ;  Common output block for PARSE time strings.
 42685                                  
 42686                                  TIME_OUTPUT:
 42687                                  TIME_TYPE:
 42688 0000A9F1 00                      	db 0			;AN000;  type
 42689 0000A9F2 00                      	db 0			;AN000;  return value
 42690 0000A9F3 0000                    	dw 0			;AN000;  es offset of synonym
 42691                                  TIME_HOUR:
 42692 0000A9F5 00                      	db 0			;AN000;  hour
 42693                                  TIME_MINUTES:
 42694 0000A9F6 00                      	db 0			;AN000;  minutes
 42695                                  TIME_SECONDS:
 42696 0000A9F7 00                      	db 0			;AN000;  seconds
 42697                                  TIME_FRACTION:
 42698 0000A9F8 00                      	db 0			;AN000;  hundredths
 42699                                  
 42700                                  ;  Common output block for PARSE drive specifier (one based drive number).
 42701                                  
 42702                                  DRIVE_OUTPUT:
 42703                                  DRIVE_TYPE:
 42704 0000A9F9 00                      	db 0			;AN000;  type
 42705                                  DRIVE_VALUE:
 42706 0000A9FA 00                      	db 0			;AN000;  return value
 42707 0000A9FB 0000                    	dw 0			;AN000;  es offset of synonym
 42708                                  DRIVE_NUMBER:
 42709 0000A9FD 00                      	db 0			;AN000;  drive number
 42710 0000A9FE 000000                  	db 0,0,0		;AN000;  reserved
 42711                                  
 42712                                  	; 18/04/2023
 42713                                  	; 16/04/2023
 42714                                  ;TRANSPACEEND:	; 98C5h
 42715                                  		; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 42716                                  
 42717                                  	; 18/06/2023
 42718                                  ;TRANSPACEEND:	; 0AF95h 
 42719                                  		; End of MSDOS 6.22 COMMAND.COM (1994) Transient portion
 42720                                  
 42721                                  ; ----------------------------------------------------------------------------
 42722                                  ; 18/06/2023
 42723                                  ; 20/04/2023
 42724                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
